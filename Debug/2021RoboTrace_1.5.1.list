
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017c48  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b24  08017e08  08017e08  00027e08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801892c  0801892c  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801892c  0801892c  0002892c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018934  08018934  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08018934  08018934  00028934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801893c  0801893c  0002893c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08018940  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00040c58  200001e0  08018b1c  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20040e38  08018b1c  00030e38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00038963  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007942  00000000  00000000  00068b6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002260  00000000  00000000  000704b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001fa0  00000000  00000000  00072718  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00036f44  00000000  00000000  000746b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00025957  00000000  00000000  000ab5fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001107e0  00000000  00000000  000d0f53  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e1733  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a374  00000000  00000000  001e17b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08017df0 	.word	0x08017df0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08017df0 	.word	0x08017df0

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f008 fbac 	bl	8009734 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	2003e92c 	.word	0x2003e92c

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f008 fb94 	bl	8009734 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	2003e92c 	.word	0x2003e92c

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f008 fa35 	bl	8009490 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f006 ff9c 	bl	8007f64 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f006 ff96 	bl	8007f64 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f006 ff90 	bl	8007f64 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f006 ff8a 	bl	8007f64 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f006 ff84 	bl	8007f64 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f006 ff7e 	bl	8007f64 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f006 ff78 	bl	8007f64 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f006 ff72 	bl	8007f64 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f006 ff6c 	bl	8007f64 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f006 ff66 	bl	8007f64 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f006 ff5a 	bl	8007f64 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f006 ff54 	bl	8007f64 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f014 fa35 	bl	8015598 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), distance_10mm_(0), total_distance_(0), cross_line_ignore_distance_(0){}
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	615a      	str	r2, [r3, #20]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f04f 0200 	mov.w	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f04f 0200 	mov.w	r2, #0
 800119a:	61da      	str	r2, [r3, #28]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4618      	mov	r0, r3
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <_ZN7Encoder4initEv>:

void Encoder::init()
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80011b4:	213c      	movs	r1, #60	; 0x3c
 80011b6:	4809      	ldr	r0, [pc, #36]	; (80011dc <_ZN7Encoder4initEv+0x30>)
 80011b8:	f00c f954 	bl	800d464 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 80011bc:	213c      	movs	r1, #60	; 0x3c
 80011be:	4808      	ldr	r0, [pc, #32]	; (80011e0 <_ZN7Encoder4initEv+0x34>)
 80011c0:	f00c f950 	bl	800d464 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 80011c4:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <_ZN7Encoder4initEv+0x38>)
 80011c6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011ca:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <_ZN7Encoder4initEv+0x3c>)
 80011ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011d2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	2003eb80 	.word	0x2003eb80
 80011e0:	2003e864 	.word	0x2003e864
 80011e4:	40010000 	.word	0x40010000
 80011e8:	40010400 	.word	0x40010400
 80011ec:	00000000 	.word	0x00000000

080011f0 <_ZN7Encoder6updateEv>:

void Encoder::update()
{
 80011f0:	b5b0      	push	{r4, r5, r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 80011f8:	4b69      	ldr	r3, [pc, #420]	; (80013a0 <_ZN7Encoder6updateEv+0x1b0>)
 80011fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fc:	ee07 3a90 	vmov	s15, r3
 8001200:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001204:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80013a4 <_ZN7Encoder6updateEv+0x1b4>
 8001208:	ee77 7a67 	vsub.f32	s15, s14, s15
 800120c:	ed9f 7a66 	vldr	s14, [pc, #408]	; 80013a8 <_ZN7Encoder6updateEv+0x1b8>
 8001210:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001214:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001218:	4b64      	ldr	r3, [pc, #400]	; (80013ac <_ZN7Encoder6updateEv+0x1bc>)
 800121a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121c:	ee07 3a90 	vmov	s15, r3
 8001220:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001224:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80013a4 <_ZN7Encoder6updateEv+0x1b4>
 8001228:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800122c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80013a8 <_ZN7Encoder6updateEv+0x1b8>
 8001230:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001234:	edc7 7a02 	vstr	s15, [r7, #8]
	monitor_cnt_l = cnt_l;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4a5d      	ldr	r2, [pc, #372]	; (80013b0 <_ZN7Encoder6updateEv+0x1c0>)
 800123c:	6013      	str	r3, [r2, #0]

	cnt_l_ = ((R_ENC)*(cnt_l) + (1.0 - (R_ENC))* (pre_cnt_l)); // lowpath filter
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff f999 	bl	8000578 <__aeabi_f2d>
 8001246:	a350      	add	r3, pc, #320	; (adr r3, 8001388 <_ZN7Encoder6updateEv+0x198>)
 8001248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124c:	f7ff f9ec 	bl	8000628 <__aeabi_dmul>
 8001250:	4603      	mov	r3, r0
 8001252:	460c      	mov	r4, r1
 8001254:	4625      	mov	r5, r4
 8001256:	461c      	mov	r4, r3
 8001258:	4b56      	ldr	r3, [pc, #344]	; (80013b4 <_ZN7Encoder6updateEv+0x1c4>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff f98b 	bl	8000578 <__aeabi_f2d>
 8001262:	a34b      	add	r3, pc, #300	; (adr r3, 8001390 <_ZN7Encoder6updateEv+0x1a0>)
 8001264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001268:	f7ff f9de 	bl	8000628 <__aeabi_dmul>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4620      	mov	r0, r4
 8001272:	4629      	mov	r1, r5
 8001274:	f7ff f822 	bl	80002bc <__adddf3>
 8001278:	4603      	mov	r3, r0
 800127a:	460c      	mov	r4, r1
 800127c:	4618      	mov	r0, r3
 800127e:	4621      	mov	r1, r4
 8001280:	f7ff fcca 	bl	8000c18 <__aeabi_d2f>
 8001284:	4602      	mov	r2, r0
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	601a      	str	r2, [r3, #0]
	cnt_r_ = ((R_ENC)*(cnt_r) + (1.0 - (R_ENC))* (pre_cnt_r)); // lowpath filter
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff f973 	bl	8000578 <__aeabi_f2d>
 8001292:	a33d      	add	r3, pc, #244	; (adr r3, 8001388 <_ZN7Encoder6updateEv+0x198>)
 8001294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001298:	f7ff f9c6 	bl	8000628 <__aeabi_dmul>
 800129c:	4603      	mov	r3, r0
 800129e:	460c      	mov	r4, r1
 80012a0:	4625      	mov	r5, r4
 80012a2:	461c      	mov	r4, r3
 80012a4:	4b44      	ldr	r3, [pc, #272]	; (80013b8 <_ZN7Encoder6updateEv+0x1c8>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff f965 	bl	8000578 <__aeabi_f2d>
 80012ae:	a338      	add	r3, pc, #224	; (adr r3, 8001390 <_ZN7Encoder6updateEv+0x1a0>)
 80012b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b4:	f7ff f9b8 	bl	8000628 <__aeabi_dmul>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	4620      	mov	r0, r4
 80012be:	4629      	mov	r1, r5
 80012c0:	f7fe fffc 	bl	80002bc <__adddf3>
 80012c4:	4603      	mov	r3, r0
 80012c6:	460c      	mov	r4, r1
 80012c8:	4618      	mov	r0, r3
 80012ca:	4621      	mov	r1, r4
 80012cc:	f7ff fca4 	bl	8000c18 <__aeabi_d2f>
 80012d0:	4602      	mov	r2, r0
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	605a      	str	r2, [r3, #4]
	monitor_cnt_l_lpf = cnt_l_;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a38      	ldr	r2, [pc, #224]	; (80013bc <_ZN7Encoder6updateEv+0x1cc>)
 80012dc:	6013      	str	r3, [r2, #0]

	pre_cnt_l = cnt_l_;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a34      	ldr	r2, [pc, #208]	; (80013b4 <_ZN7Encoder6updateEv+0x1c4>)
 80012e4:	6013      	str	r3, [r2, #0]
	pre_cnt_r = cnt_r_;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	4a33      	ldr	r2, [pc, #204]	; (80013b8 <_ZN7Encoder6updateEv+0x1c8>)
 80012ec:	6013      	str	r3, [r2, #0]

	//total_cnt_l_ += cnt_l_;
	//total_cnt_r_ += cnt_r_;

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	ed93 7a00 	vldr	s14, [r3]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80012fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012fe:	ee17 0a90 	vmov	r0, s15
 8001302:	f7ff f939 	bl	8000578 <__aeabi_f2d>
 8001306:	a324      	add	r3, pc, #144	; (adr r3, 8001398 <_ZN7Encoder6updateEv+0x1a8>)
 8001308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130c:	f7ff f98c 	bl	8000628 <__aeabi_dmul>
 8001310:	4603      	mov	r3, r0
 8001312:	460c      	mov	r4, r1
 8001314:	4618      	mov	r0, r3
 8001316:	4621      	mov	r1, r4
 8001318:	f04f 0200 	mov.w	r2, #0
 800131c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001320:	f7ff faac 	bl	800087c <__aeabi_ddiv>
 8001324:	4603      	mov	r3, r0
 8001326:	460c      	mov	r4, r1
 8001328:	4618      	mov	r0, r3
 800132a:	4621      	mov	r1, r4
 800132c:	f7ff fc74 	bl	8000c18 <__aeabi_d2f>
 8001330:	4602      	mov	r2, r0
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	609a      	str	r2, [r3, #8]
	distance_10mm_ += distance_;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	ed93 7a05 	vldr	s14, [r3, #20]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	edc3 7a05 	vstr	s15, [r3, #20]
	total_distance_ += distance_;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	ed93 7a06 	vldr	s14, [r3, #24]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	edd3 7a02 	vldr	s15, [r3, #8]
 8001358:	ee77 7a27 	vadd.f32	s15, s14, s15
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	edc3 7a06 	vstr	s15, [r3, #24]
	cross_line_ignore_distance_ += distance_;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	ed93 7a07 	vldr	s14, [r3, #28]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	edd3 7a02 	vldr	s15, [r3, #8]
 800136e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	edc3 7a07 	vstr	s15, [r3, #28]
	monitor_distance = distance_10mm_;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	695b      	ldr	r3, [r3, #20]
 800137c:	4a10      	ldr	r2, [pc, #64]	; (80013c0 <_ZN7Encoder6updateEv+0x1d0>)
 800137e:	6013      	str	r3, [r2, #0]
}
 8001380:	bf00      	nop
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bdb0      	pop	{r4, r5, r7, pc}
 8001388:	9999999a 	.word	0x9999999a
 800138c:	3fa99999 	.word	0x3fa99999
 8001390:	66666666 	.word	0x66666666
 8001394:	3fee6666 	.word	0x3fee6666
 8001398:	ce73a049 	.word	0xce73a049
 800139c:	3f77a3f6 	.word	0x3f77a3f6
 80013a0:	40010000 	.word	0x40010000
 80013a4:	47000000 	.word	0x47000000
 80013a8:	3f912547 	.word	0x3f912547
 80013ac:	40010400 	.word	0x40010400
 80013b0:	20000200 	.word	0x20000200
 80013b4:	20000208 	.word	0x20000208
 80013b8:	2000020c 	.word	0x2000020c
 80013bc:	20000204 	.word	0x20000204
 80013c0:	200001fc 	.word	0x200001fc

080013c4 <_ZN7Encoder5clearEv>:

void Encoder::clear()
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f04f 0200 	mov.w	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <_ZN7Encoder5clearEv+0x3c>)
 80013de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013e2:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80013e4:	4b07      	ldr	r3, [pc, #28]	; (8001404 <_ZN7Encoder5clearEv+0x40>)
 80013e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013ea:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	40010000 	.word	0x40010000
 8001404:	40010400 	.word	0x40010400

08001408 <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	685a      	ldr	r2, [r3, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	601a      	str	r2, [r3, #0]
}
 8001424:	bf00      	nop
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	return distance_;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	ee07 3a90 	vmov	s15, r3
}
 8001440:	eeb0 0a67 	vmov.f32	s0, s15
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <_ZN7Encoder15getDistance10mmEv>:

float Encoder::getDistance10mm()
{
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
	return distance_10mm_;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	ee07 3a90 	vmov	s15, r3
}
 800145e:	eeb0 0a67 	vmov.f32	s0, s15
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	return total_distance_;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	ee07 3a90 	vmov	s15, r3
}
 800147c:	eeb0 0a67 	vmov.f32	s0, s15
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <_ZN7Encoder16setTotalDistanceEf>:

void Encoder::setTotalDistance(float true_distance){
 800148a:	b480      	push	{r7}
 800148c:	b083      	sub	sp, #12
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
 8001492:	ed87 0a00 	vstr	s0, [r7]
	total_distance_ = true_distance;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	619a      	str	r2, [r3, #24]
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <_ZN7Encoder17clearDistance10mmEv>:
	return (total_cnt_l_ + total_cnt_r_) / 2;
}
*/

void Encoder::clearDistance10mm()
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
	//total_cnt_l_ = 0;
	//total_cnt_r_ = 0;
	distance_10mm_ = 0;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f04f 0200 	mov.w	r2, #0
 80014b6:	615a      	str	r2, [r3, #20]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <_ZN7Encoder18clearTotalDistanceEv>:

void Encoder::clearTotalDistance()
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	total_distance_ = 0;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f04f 0200 	mov.w	r2, #0
 80014d2:	619a      	str	r2, [r3, #24]
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:

float Encoder::getCrossLineIgnoreDistance()
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	69db      	ldr	r3, [r3, #28]
 80014ec:	ee07 3a90 	vmov	s15, r3
}
 80014f0:	eeb0 0a67 	vmov.f32	s0, s15
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 80014fe:	b480      	push	{r7}
 8001500:	b083      	sub	sp, #12
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f04f 0200 	mov.w	r2, #0
 800150c:	61da      	str	r2, [r3, #28]
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 800151a:	b580      	push	{r7, lr}
 800151c:	b084      	sub	sp, #16
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 8001528:	6839      	ldr	r1, [r7, #0]
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f000 f978 	bl	8001820 <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 8001530:	f000 f98c 	bl	800184c <fopen_folder_and_file>

	return ret;
 8001534:	7bfb      	ldrb	r3, [r7, #15]
}
 8001536:	4618      	mov	r0, r3
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 800154a:	4804      	ldr	r0, [pc, #16]	; (800155c <user_fclose+0x1c>)
 800154c:	f010 fce4 	bl	8011f18 <f_close>

	return ret;
 8001550:	79fb      	ldrb	r3, [r7, #7]
}
 8001552:	4618      	mov	r0, r3
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	2003d770 	.word	0x2003d770

08001560 <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 8001560:	b590      	push	{r4, r7, lr}
 8001562:	b087      	sub	sp, #28
 8001564:	af02      	add	r7, sp, #8
 8001566:	4603      	mov	r3, r0
 8001568:	6039      	str	r1, [r7, #0]
 800156a:	80fb      	strh	r3, [r7, #6]
 800156c:	4613      	mov	r3, r2
 800156e:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 8001574:	2300      	movs	r3, #0
 8001576:	81fb      	strh	r3, [r7, #14]
 8001578:	e030      	b.n	80015dc <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 800157a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	4413      	add	r3, r2
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4618      	mov	r0, r3
 8001588:	f7fe fff6 	bl	8000578 <__aeabi_f2d>
 800158c:	4603      	mov	r3, r0
 800158e:	460c      	mov	r4, r1
 8001590:	e9cd 3400 	strd	r3, r4, [sp]
 8001594:	4a17      	ldr	r2, [pc, #92]	; (80015f4 <sd_write_float+0x94>)
 8001596:	2180      	movs	r1, #128	; 0x80
 8001598:	4817      	ldr	r0, [pc, #92]	; (80015f8 <sd_write_float+0x98>)
 800159a:	f013 f8b1 	bl	8014700 <sniprintf>

		if(state == ADD_WRITE){
 800159e:	797b      	ldrb	r3, [r7, #5]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d106      	bne.n	80015b2 <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 80015a4:	4b15      	ldr	r3, [pc, #84]	; (80015fc <sd_write_float+0x9c>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	4619      	mov	r1, r3
 80015aa:	4814      	ldr	r0, [pc, #80]	; (80015fc <sd_write_float+0x9c>)
 80015ac:	f010 fd28 	bl	8012000 <f_lseek>
 80015b0:	e003      	b.n	80015ba <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 80015b2:	2100      	movs	r1, #0
 80015b4:	4811      	ldr	r0, [pc, #68]	; (80015fc <sd_write_float+0x9c>)
 80015b6:	f010 fd23 	bl	8012000 <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 80015ba:	480f      	ldr	r0, [pc, #60]	; (80015f8 <sd_write_float+0x98>)
 80015bc:	f7fe fe20 	bl	8000200 <strlen>
 80015c0:	4602      	mov	r2, r0
 80015c2:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <sd_write_float+0xa0>)
 80015c4:	490c      	ldr	r1, [pc, #48]	; (80015f8 <sd_write_float+0x98>)
 80015c6:	480d      	ldr	r0, [pc, #52]	; (80015fc <sd_write_float+0x9c>)
 80015c8:	f010 fa91 	bl	8011aee <f_write>

		bufclear();	//書き込み用のバッファをクリア
 80015cc:	f000 f958 	bl	8001880 <bufclear>
	for(short i = 0 ; i < size; i++){
 80015d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	3301      	adds	r3, #1
 80015d8:	b29b      	uxth	r3, r3
 80015da:	81fb      	strh	r3, [r7, #14]
 80015dc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80015e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	dbc8      	blt.n	800157a <sd_write_float+0x1a>
	}
	return ret;
 80015e8:	7b7b      	ldrb	r3, [r7, #13]
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3714      	adds	r7, #20
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd90      	pop	{r4, r7, pc}
 80015f2:	bf00      	nop
 80015f4:	08017e08 	.word	0x08017e08
 80015f8:	2003d6e0 	.word	0x2003d6e0
 80015fc:	2003d770 	.word	0x2003d770
 8001600:	2003d760 	.word	0x2003d760

08001604 <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 8001604:	b590      	push	{r4, r7, lr}
 8001606:	b089      	sub	sp, #36	; 0x24
 8001608:	af02      	add	r7, sp, #8
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	603b      	str	r3, [r7, #0]
 8001610:	4613      	mov	r3, r2
 8001612:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001618:	68b9      	ldr	r1, [r7, #8]
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	f000 f900 	bl	8001820 <create_path>

	if(state == OVER_WRITE){
 8001620:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001624:	2b00      	cmp	r3, #0
 8001626:	d108      	bne.n	800163a <sd_write_array_float+0x36>
		f_chdir(dirpath);
 8001628:	4822      	ldr	r0, [pc, #136]	; (80016b4 <sd_write_array_float+0xb0>)
 800162a:	f010 fc9f 	bl	8011f6c <f_chdir>
		f_unlink(filepath);	//	一回消す
 800162e:	4822      	ldr	r0, [pc, #136]	; (80016b8 <sd_write_array_float+0xb4>)
 8001630:	f010 ff0a 	bl	8012448 <f_unlink>
		f_chdir("..");
 8001634:	4821      	ldr	r0, [pc, #132]	; (80016bc <sd_write_array_float+0xb8>)
 8001636:	f010 fc99 	bl	8011f6c <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 800163a:	f000 f907 	bl	800184c <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 800163e:	2300      	movs	r3, #0
 8001640:	82fb      	strh	r3, [r7, #22]
 8001642:	e028      	b.n	8001696 <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 8001644:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	683a      	ldr	r2, [r7, #0]
 800164c:	4413      	add	r3, r2
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f7fe ff91 	bl	8000578 <__aeabi_f2d>
 8001656:	4603      	mov	r3, r0
 8001658:	460c      	mov	r4, r1
 800165a:	e9cd 3400 	strd	r3, r4, [sp]
 800165e:	4a18      	ldr	r2, [pc, #96]	; (80016c0 <sd_write_array_float+0xbc>)
 8001660:	2180      	movs	r1, #128	; 0x80
 8001662:	4818      	ldr	r0, [pc, #96]	; (80016c4 <sd_write_array_float+0xc0>)
 8001664:	f013 f84c 	bl	8014700 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 8001668:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <sd_write_array_float+0xc4>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	4619      	mov	r1, r3
 800166e:	4816      	ldr	r0, [pc, #88]	; (80016c8 <sd_write_array_float+0xc4>)
 8001670:	f010 fcc6 	bl	8012000 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 8001674:	4813      	ldr	r0, [pc, #76]	; (80016c4 <sd_write_array_float+0xc0>)
 8001676:	f7fe fdc3 	bl	8000200 <strlen>
 800167a:	4602      	mov	r2, r0
 800167c:	4b13      	ldr	r3, [pc, #76]	; (80016cc <sd_write_array_float+0xc8>)
 800167e:	4911      	ldr	r1, [pc, #68]	; (80016c4 <sd_write_array_float+0xc0>)
 8001680:	4811      	ldr	r0, [pc, #68]	; (80016c8 <sd_write_array_float+0xc4>)
 8001682:	f010 fa34 	bl	8011aee <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 8001686:	f000 f8fb 	bl	8001880 <bufclear>
	for(short i = 0 ; i < size; i++){
 800168a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800168e:	b29b      	uxth	r3, r3
 8001690:	3301      	adds	r3, #1
 8001692:	b29b      	uxth	r3, r3
 8001694:	82fb      	strh	r3, [r7, #22]
 8001696:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800169a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800169e:	429a      	cmp	r2, r3
 80016a0:	dbd0      	blt.n	8001644 <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 80016a2:	4809      	ldr	r0, [pc, #36]	; (80016c8 <sd_write_array_float+0xc4>)
 80016a4:	f010 fc38 	bl	8011f18 <f_close>

	return ret;
 80016a8:	7d7b      	ldrb	r3, [r7, #21]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	371c      	adds	r7, #28
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd90      	pop	{r4, r7, pc}
 80016b2:	bf00      	nop
 80016b4:	2003d5e0 	.word	0x2003d5e0
 80016b8:	2003c4a0 	.word	0x2003c4a0
 80016bc:	08017e24 	.word	0x08017e24
 80016c0:	08017e08 	.word	0x08017e08
 80016c4:	2003d6e0 	.word	0x2003d6e0
 80016c8:	2003d770 	.word	0x2003d770
 80016cc:	2003d760 	.word	0x2003d760

080016d0 <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	603b      	str	r3, [r7, #0]
 80016dc:	4613      	mov	r3, r2
 80016de:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80016e8:	68b9      	ldr	r1, [r7, #8]
 80016ea:	68f8      	ldr	r0, [r7, #12]
 80016ec:	f000 f898 	bl	8001820 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80016f0:	f000 f8ac 	bl	800184c <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80016f4:	e019      	b.n	800172a <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 80016f6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	4413      	add	r3, r2
 8001700:	461a      	mov	r2, r3
 8001702:	4913      	ldr	r1, [pc, #76]	; (8001750 <sd_read_array_float+0x80>)
 8001704:	4813      	ldr	r0, [pc, #76]	; (8001754 <sd_read_array_float+0x84>)
 8001706:	f013 f84f 	bl	80147a8 <siscanf>
		i++;
 800170a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800170e:	b29b      	uxth	r3, r3
 8001710:	3301      	adds	r3, #1
 8001712:	b29b      	uxth	r3, r3
 8001714:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001716:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800171a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800171e:	429a      	cmp	r2, r3
 8001720:	db03      	blt.n	800172a <sd_read_array_float+0x5a>
 8001722:	88fb      	ldrh	r3, [r7, #6]
 8001724:	3b01      	subs	r3, #1
 8001726:	b29b      	uxth	r3, r3
 8001728:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800172a:	4a0b      	ldr	r2, [pc, #44]	; (8001758 <sd_read_array_float+0x88>)
 800172c:	2180      	movs	r1, #128	; 0x80
 800172e:	4809      	ldr	r0, [pc, #36]	; (8001754 <sd_read_array_float+0x84>)
 8001730:	f011 f868 	bl	8012804 <f_gets>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1dd      	bne.n	80016f6 <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 800173a:	f000 f8a1 	bl	8001880 <bufclear>

	f_close(&fil);	//ファイル閉じる
 800173e:	4806      	ldr	r0, [pc, #24]	; (8001758 <sd_read_array_float+0x88>)
 8001740:	f010 fbea 	bl	8011f18 <f_close>

	return ret;
 8001744:	7d7b      	ldrb	r3, [r7, #21]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	08017e14 	.word	0x08017e14
 8001754:	2003d6e0 	.word	0x2003d6e0
 8001758:	2003d770 	.word	0x2003d770

0800175c <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	603b      	str	r3, [r7, #0]
 8001768:	4613      	mov	r3, r2
 800176a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	757b      	strb	r3, [r7, #21]
	short i = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001774:	68b9      	ldr	r1, [r7, #8]
 8001776:	68f8      	ldr	r0, [r7, #12]
 8001778:	f000 f852 	bl	8001820 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 800177c:	f000 f866 	bl	800184c <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001780:	e019      	b.n	80017b6 <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 8001782:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	4413      	add	r3, r2
 800178c:	461a      	mov	r2, r3
 800178e:	4913      	ldr	r1, [pc, #76]	; (80017dc <sd_read_array_double+0x80>)
 8001790:	4813      	ldr	r0, [pc, #76]	; (80017e0 <sd_read_array_double+0x84>)
 8001792:	f013 f809 	bl	80147a8 <siscanf>
		i++;
 8001796:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800179a:	b29b      	uxth	r3, r3
 800179c:	3301      	adds	r3, #1
 800179e:	b29b      	uxth	r3, r3
 80017a0:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 80017a2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80017a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	db03      	blt.n	80017b6 <sd_read_array_double+0x5a>
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	3b01      	subs	r3, #1
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80017b6:	4a0b      	ldr	r2, [pc, #44]	; (80017e4 <sd_read_array_double+0x88>)
 80017b8:	2180      	movs	r1, #128	; 0x80
 80017ba:	4809      	ldr	r0, [pc, #36]	; (80017e0 <sd_read_array_double+0x84>)
 80017bc:	f011 f822 	bl	8012804 <f_gets>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1dd      	bne.n	8001782 <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80017c6:	f000 f85b 	bl	8001880 <bufclear>

	f_close(&fil);	//ファイル閉じる
 80017ca:	4806      	ldr	r0, [pc, #24]	; (80017e4 <sd_read_array_double+0x88>)
 80017cc:	f010 fba4 	bl	8011f18 <f_close>

	return ret;
 80017d0:	7d7b      	ldrb	r3, [r7, #21]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3718      	adds	r7, #24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	08017e20 	.word	0x08017e20
 80017e0:	2003d6e0 	.word	0x2003d6e0
 80017e4:	2003d770 	.word	0x2003d770

080017e8 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 80017f2:	2201      	movs	r2, #1
 80017f4:	4908      	ldr	r1, [pc, #32]	; (8001818 <sd_mount+0x30>)
 80017f6:	4809      	ldr	r0, [pc, #36]	; (800181c <sd_mount+0x34>)
 80017f8:	f00f fe06 	bl	8011408 <f_mount>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d102      	bne.n	8001808 <sd_mount+0x20>
 8001802:	2301      	movs	r3, #1
 8001804:	71fb      	strb	r3, [r7, #7]
 8001806:	e001      	b.n	800180c <sd_mount+0x24>
	else ret = 0;
 8001808:	2300      	movs	r3, #0
 800180a:	71fb      	strb	r3, [r7, #7]

	return ret;
 800180c:	79fb      	ldrb	r3, [r7, #7]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	08017e30 	.word	0x08017e30
 800181c:	2003c5a0 	.word	0x2003c5a0

08001820 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	4805      	ldr	r0, [pc, #20]	; (8001844 <create_path+0x24>)
 800182e:	f012 ffe7 	bl	8014800 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 8001832:	6839      	ldr	r1, [r7, #0]
 8001834:	4804      	ldr	r0, [pc, #16]	; (8001848 <create_path+0x28>)
 8001836:	f012 ffe3 	bl	8014800 <strcpy>

}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	2003d5e0 	.word	0x2003d5e0
 8001848:	2003c4a0 	.word	0x2003c4a0

0800184c <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001850:	4807      	ldr	r0, [pc, #28]	; (8001870 <fopen_folder_and_file+0x24>)
 8001852:	f010 febb 	bl	80125cc <f_mkdir>

	f_chdir(dirpath);
 8001856:	4806      	ldr	r0, [pc, #24]	; (8001870 <fopen_folder_and_file+0x24>)
 8001858:	f010 fb88 	bl	8011f6c <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800185c:	2213      	movs	r2, #19
 800185e:	4905      	ldr	r1, [pc, #20]	; (8001874 <fopen_folder_and_file+0x28>)
 8001860:	4805      	ldr	r0, [pc, #20]	; (8001878 <fopen_folder_and_file+0x2c>)
 8001862:	f00f fe17 	bl	8011494 <f_open>

	f_chdir("..");
 8001866:	4805      	ldr	r0, [pc, #20]	; (800187c <fopen_folder_and_file+0x30>)
 8001868:	f010 fb80 	bl	8011f6c <f_chdir>


}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}
 8001870:	2003d5e0 	.word	0x2003d5e0
 8001874:	2003c4a0 	.word	0x2003c4a0
 8001878:	2003d770 	.word	0x2003d770
 800187c:	08017e24 	.word	0x08017e24

08001880 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 8001886:	2300      	movs	r3, #0
 8001888:	607b      	str	r3, [r7, #4]
 800188a:	e007      	b.n	800189c <bufclear+0x1c>
		buffer[i] = '\0';
 800188c:	4a08      	ldr	r2, [pc, #32]	; (80018b0 <bufclear+0x30>)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	2200      	movs	r2, #0
 8001894:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	3301      	adds	r3, #1
 800189a:	607b      	str	r3, [r7, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b7f      	cmp	r3, #127	; 0x7f
 80018a0:	ddf4      	ble.n	800188c <bufclear+0xc>
	}
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	2003d6e0 	.word	0x2003d6e0

080018b4 <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 80018c8:	2200      	movs	r2, #0
 80018ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018ce:	480e      	ldr	r0, [pc, #56]	; (8001908 <read_byte+0x54>)
 80018d0:	f007 fdde 	bl	8009490 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 80018d4:	f107 010f 	add.w	r1, r7, #15
 80018d8:	2364      	movs	r3, #100	; 0x64
 80018da:	2201      	movs	r2, #1
 80018dc:	480b      	ldr	r0, [pc, #44]	; (800190c <read_byte+0x58>)
 80018de:	f00a ff87 	bl	800c7f0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 80018e2:	f107 010e 	add.w	r1, r7, #14
 80018e6:	2364      	movs	r3, #100	; 0x64
 80018e8:	2201      	movs	r2, #1
 80018ea:	4808      	ldr	r0, [pc, #32]	; (800190c <read_byte+0x58>)
 80018ec:	f00b f8b4 	bl	800ca58 <HAL_SPI_Receive>
	CS_SET;
 80018f0:	2201      	movs	r2, #1
 80018f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018f6:	4804      	ldr	r0, [pc, #16]	; (8001908 <read_byte+0x54>)
 80018f8:	f007 fdca 	bl	8009490 <HAL_GPIO_WritePin>

	return val;
 80018fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40020400 	.word	0x40020400
 800190c:	2003e80c 	.word	0x2003e80c

08001910 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	460a      	mov	r2, r1
 800191a:	71fb      	strb	r3, [r7, #7]
 800191c:	4613      	mov	r3, r2
 800191e:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001926:	b2db      	uxtb	r3, r3
 8001928:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800192a:	2200      	movs	r2, #0
 800192c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001930:	480c      	ldr	r0, [pc, #48]	; (8001964 <write_byte+0x54>)
 8001932:	f007 fdad 	bl	8009490 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001936:	f107 010f 	add.w	r1, r7, #15
 800193a:	2364      	movs	r3, #100	; 0x64
 800193c:	2201      	movs	r2, #1
 800193e:	480a      	ldr	r0, [pc, #40]	; (8001968 <write_byte+0x58>)
 8001940:	f00a ff56 	bl	800c7f0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001944:	1db9      	adds	r1, r7, #6
 8001946:	2364      	movs	r3, #100	; 0x64
 8001948:	2201      	movs	r2, #1
 800194a:	4807      	ldr	r0, [pc, #28]	; (8001968 <write_byte+0x58>)
 800194c:	f00a ff50 	bl	800c7f0 <HAL_SPI_Transmit>
	CS_SET;
 8001950:	2201      	movs	r2, #1
 8001952:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001956:	4803      	ldr	r0, [pc, #12]	; (8001964 <write_byte+0x54>)
 8001958:	f007 fd9a 	bl	8009490 <HAL_GPIO_WritePin>
}
 800195c:	bf00      	nop
 800195e:	3710      	adds	r7, #16
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40020400 	.word	0x40020400
 8001968:	2003e80c 	.word	0x2003e80c

0800196c <IMU_init>:

uint16_t IMU_init() {
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001972:	2300      	movs	r3, #0
 8001974:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001976:	2000      	movs	r0, #0
 8001978:	f7ff ff9c 	bl	80018b4 <read_byte>
 800197c:	4603      	mov	r3, r0
 800197e:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001980:	797b      	ldrb	r3, [r7, #5]
 8001982:	2be0      	cmp	r3, #224	; 0xe0
 8001984:	d119      	bne.n	80019ba <IMU_init+0x4e>
		ret = 1;
 8001986:	2301      	movs	r3, #1
 8001988:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 800198a:	2101      	movs	r1, #1
 800198c:	2006      	movs	r0, #6
 800198e:	f7ff ffbf 	bl	8001910 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001992:	2110      	movs	r1, #16
 8001994:	2003      	movs	r0, #3
 8001996:	f7ff ffbb 	bl	8001910 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 800199a:	2120      	movs	r1, #32
 800199c:	207f      	movs	r0, #127	; 0x7f
 800199e:	f7ff ffb7 	bl	8001910 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 80019a2:	2106      	movs	r1, #6
 80019a4:	2001      	movs	r0, #1
 80019a6:	f7ff ffb3 	bl	8001910 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 80019aa:	2106      	movs	r1, #6
 80019ac:	2014      	movs	r0, #20
 80019ae:	f7ff ffaf 	bl	8001910 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 80019b2:	2100      	movs	r1, #0
 80019b4:	207f      	movs	r0, #127	; 0x7f
 80019b6:	f7ff ffab 	bl	8001910 <write_byte>
	}
	return ret;
 80019ba:	88fb      	ldrh	r3, [r7, #6]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <read_gyro_data>:

void read_gyro_data() {
 80019c4:	b598      	push	{r3, r4, r7, lr}
 80019c6:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 80019c8:	2033      	movs	r0, #51	; 0x33
 80019ca:	f7ff ff73 	bl	80018b4 <read_byte>
 80019ce:	4603      	mov	r3, r0
 80019d0:	021b      	lsls	r3, r3, #8
 80019d2:	b21c      	sxth	r4, r3
 80019d4:	2034      	movs	r0, #52	; 0x34
 80019d6:	f7ff ff6d 	bl	80018b4 <read_byte>
 80019da:	4603      	mov	r3, r0
 80019dc:	b21b      	sxth	r3, r3
 80019de:	4323      	orrs	r3, r4
 80019e0:	b21a      	sxth	r2, r3
 80019e2:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <read_gyro_data+0x64>)
 80019e4:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 80019e6:	2035      	movs	r0, #53	; 0x35
 80019e8:	f7ff ff64 	bl	80018b4 <read_byte>
 80019ec:	4603      	mov	r3, r0
 80019ee:	021b      	lsls	r3, r3, #8
 80019f0:	b21c      	sxth	r4, r3
 80019f2:	2036      	movs	r0, #54	; 0x36
 80019f4:	f7ff ff5e 	bl	80018b4 <read_byte>
 80019f8:	4603      	mov	r3, r0
 80019fa:	b21b      	sxth	r3, r3
 80019fc:	4323      	orrs	r3, r4
 80019fe:	b21a      	sxth	r2, r3
 8001a00:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <read_gyro_data+0x68>)
 8001a02:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001a04:	2037      	movs	r0, #55	; 0x37
 8001a06:	f7ff ff55 	bl	80018b4 <read_byte>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	021b      	lsls	r3, r3, #8
 8001a0e:	b21c      	sxth	r4, r3
 8001a10:	2038      	movs	r0, #56	; 0x38
 8001a12:	f7ff ff4f 	bl	80018b4 <read_byte>
 8001a16:	4603      	mov	r3, r0
 8001a18:	b21b      	sxth	r3, r3
 8001a1a:	4323      	orrs	r3, r4
 8001a1c:	b21a      	sxth	r2, r3
 8001a1e:	4b04      	ldr	r3, [pc, #16]	; (8001a30 <read_gyro_data+0x6c>)
 8001a20:	801a      	strh	r2, [r3, #0]
}
 8001a22:	bf00      	nop
 8001a24:	bd98      	pop	{r3, r4, r7, pc}
 8001a26:	bf00      	nop
 8001a28:	2003e7a8 	.word	0x2003e7a8
 8001a2c:	2003e7a6 	.word	0x2003e7a6
 8001a30:	2003e7a0 	.word	0x2003e7a0

08001a34 <_ZN3IMUC1Ev>:

#define PI 3.1415926535

//int16_t mon_zg_;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	801a      	strh	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	805a      	strh	r2, [r3, #2]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	809a      	strh	r2, [r3, #4]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	80da      	strh	r2, [r3, #6]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	811a      	strh	r2, [r3, #8]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	815a      	strh	r2, [r3, #10]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f04f 0200 	mov.w	r2, #0
 8001a66:	60da      	str	r2, [r3, #12]
{

}
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
	...

08001a78 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001a80:	f7ff ff74 	bl	800196c <IMU_init>
 8001a84:	4603      	mov	r3, r0
 8001a86:	81fb      	strh	r3, [r7, #14]
	//printf("who i am: %d\n", who_i_am);

	lcd_clear();
 8001a88:	f7ff fb0a 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	2000      	movs	r0, #0
 8001a90:	f7ff fb16 	bl	80010c0 <lcd_locate>
	lcd_printf("IMUstatus");
 8001a94:	4809      	ldr	r0, [pc, #36]	; (8001abc <_ZN3IMU4initEv+0x44>)
 8001a96:	f7ff fb3d 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	f7ff fb0f 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001aa2:	89fb      	ldrh	r3, [r7, #14]
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4806      	ldr	r0, [pc, #24]	; (8001ac0 <_ZN3IMU4initEv+0x48>)
 8001aa8:	f7ff fb34 	bl	8001114 <lcd_printf>

	HAL_Delay(500);
 8001aac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ab0:	f006 fa58 	bl	8007f64 <HAL_Delay>

}
 8001ab4:	bf00      	nop
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	08017e34 	.word	0x08017e34
 8001ac0:	08017e40 	.word	0x08017e40
 8001ac4:	00000000 	.word	0x00000000

08001ac8 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001ac8:	b5b0      	push	{r4, r5, r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001ad0:	f7ff ff78 	bl	80019c4 <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001ad4:	4b24      	ldr	r3, [pc, #144]	; (8001b68 <_ZN3IMU12updateValuesEv+0xa0>)
 8001ad6:	881b      	ldrh	r3, [r3, #0]
 8001ad8:	b21a      	sxth	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001ade:	4b23      	ldr	r3, [pc, #140]	; (8001b6c <_ZN3IMU12updateValuesEv+0xa4>)
 8001ae0:	881b      	ldrh	r3, [r3, #0]
 8001ae2:	b21a      	sxth	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001ae8:	4b21      	ldr	r3, [pc, #132]	; (8001b70 <_ZN3IMU12updateValuesEv+0xa8>)
 8001aea:	881b      	ldrh	r3, [r3, #0]
 8001aec:	b21a      	sxth	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7fe fd2b 	bl	8000554 <__aeabi_i2d>
 8001afe:	a316      	add	r3, pc, #88	; (adr r3, 8001b58 <_ZN3IMU12updateValuesEv+0x90>)
 8001b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b04:	f7fe fd90 	bl	8000628 <__aeabi_dmul>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	460c      	mov	r4, r1
 8001b0c:	4625      	mov	r5, r4
 8001b0e:	461c      	mov	r4, r3
 8001b10:	4b18      	ldr	r3, [pc, #96]	; (8001b74 <_ZN3IMU12updateValuesEv+0xac>)
 8001b12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7fe fd1c 	bl	8000554 <__aeabi_i2d>
 8001b1c:	a310      	add	r3, pc, #64	; (adr r3, 8001b60 <_ZN3IMU12updateValuesEv+0x98>)
 8001b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b22:	f7fe fd81 	bl	8000628 <__aeabi_dmul>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	4620      	mov	r0, r4
 8001b2c:	4629      	mov	r1, r5
 8001b2e:	f7fe fbc5 	bl	80002bc <__adddf3>
 8001b32:	4603      	mov	r3, r0
 8001b34:	460c      	mov	r4, r1
 8001b36:	4618      	mov	r0, r3
 8001b38:	4621      	mov	r1, r4
 8001b3a:	f7ff f825 	bl	8000b88 <__aeabi_d2iz>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	b21a      	sxth	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001b4c:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <_ZN3IMU12updateValuesEv+0xac>)
 8001b4e:	801a      	strh	r2, [r3, #0]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001b50:	bf00      	nop
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bdb0      	pop	{r4, r5, r7, pc}
 8001b58:	eb851eb8 	.word	0xeb851eb8
 8001b5c:	3f9eb851 	.word	0x3f9eb851
 8001b60:	70a3d70a 	.word	0x70a3d70a
 8001b64:	3fef0a3d 	.word	0x3fef0a3d
 8001b68:	2003e7a8 	.word	0x2003e7a8
 8001b6c:	2003e7a6 	.word	0x2003e7a6
 8001b70:	2003e7a0 	.word	0x2003e7a0
 8001b74:	20000210 	.word	0x20000210

08001b78 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001b78:	b5b0      	push	{r4, r5, r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b86:	ee07 3a90 	vmov	s15, r3
 8001b8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b98:	edc7 7a03 	vstr	s15, [r7, #12]
	return -(corrected_zg / 16.4) * PI / 180;
 8001b9c:	68f8      	ldr	r0, [r7, #12]
 8001b9e:	f7fe fceb 	bl	8000578 <__aeabi_f2d>
 8001ba2:	a316      	add	r3, pc, #88	; (adr r3, 8001bfc <_ZN3IMU8getOmegaEv+0x84>)
 8001ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba8:	f7fe fe68 	bl	800087c <__aeabi_ddiv>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4614      	mov	r4, r2
 8001bb2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001bb6:	a313      	add	r3, pc, #76	; (adr r3, 8001c04 <_ZN3IMU8getOmegaEv+0x8c>)
 8001bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbc:	4620      	mov	r0, r4
 8001bbe:	4629      	mov	r1, r5
 8001bc0:	f7fe fd32 	bl	8000628 <__aeabi_dmul>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	460c      	mov	r4, r1
 8001bc8:	4618      	mov	r0, r3
 8001bca:	4621      	mov	r1, r4
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <_ZN3IMU8getOmegaEv+0x80>)
 8001bd2:	f7fe fe53 	bl	800087c <__aeabi_ddiv>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	460c      	mov	r4, r1
 8001bda:	4618      	mov	r0, r3
 8001bdc:	4621      	mov	r1, r4
 8001bde:	f7ff f81b 	bl	8000c18 <__aeabi_d2f>
 8001be2:	4603      	mov	r3, r0
 8001be4:	ee07 3a90 	vmov	s15, r3
}
 8001be8:	eeb0 0a67 	vmov.f32	s0, s15
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bdb0      	pop	{r4, r5, r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	f3af 8000 	nop.w
 8001bf8:	40668000 	.word	0x40668000
 8001bfc:	66666666 	.word	0x66666666
 8001c00:	40306666 	.word	0x40306666
 8001c04:	54411744 	.word	0x54411744
 8001c08:	400921fb 	.word	0x400921fb

08001c0c <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c0e:	b08b      	sub	sp, #44	; 0x2c
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001c14:	466b      	mov	r3, sp
 8001c16:	461e      	mov	r6, r3
	HAL_Delay(1000);
 8001c18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c1c:	f006 f9a2 	bl	8007f64 <HAL_Delay>
	lcd_clear();
 8001c20:	f7ff fa3e 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001c24:	2100      	movs	r1, #0
 8001c26:	2000      	movs	r0, #0
 8001c28:	f7ff fa4a 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001c2c:	4840      	ldr	r0, [pc, #256]	; (8001d30 <_ZN3IMU11calibrationEv+0x124>)
 8001c2e:	f7ff fa71 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001c32:	2101      	movs	r1, #1
 8001c34:	2000      	movs	r0, #0
 8001c36:	f7ff fa43 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001c3a:	483e      	ldr	r0, [pc, #248]	; (8001d34 <_ZN3IMU11calibrationEv+0x128>)
 8001c3c:	f7ff fa6a 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001c40:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001c44:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001c46:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c4a:	1e5d      	subs	r5, r3, #1
 8001c4c:	61bd      	str	r5, [r7, #24]
 8001c4e:	462b      	mov	r3, r5
 8001c50:	3301      	adds	r3, #1
 8001c52:	4619      	mov	r1, r3
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	f04f 0300 	mov.w	r3, #0
 8001c5c:	f04f 0400 	mov.w	r4, #0
 8001c60:	0154      	lsls	r4, r2, #5
 8001c62:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c66:	014b      	lsls	r3, r1, #5
 8001c68:	462b      	mov	r3, r5
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f04f 0200 	mov.w	r2, #0
 8001c72:	f04f 0300 	mov.w	r3, #0
 8001c76:	f04f 0400 	mov.w	r4, #0
 8001c7a:	0154      	lsls	r4, r2, #5
 8001c7c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c80:	014b      	lsls	r3, r1, #5
 8001c82:	462b      	mov	r3, r5
 8001c84:	3301      	adds	r3, #1
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	3303      	adds	r3, #3
 8001c8a:	3307      	adds	r3, #7
 8001c8c:	08db      	lsrs	r3, r3, #3
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	ebad 0d03 	sub.w	sp, sp, r3
 8001c94:	466b      	mov	r3, sp
 8001c96:	3303      	adds	r3, #3
 8001c98:	089b      	lsrs	r3, r3, #2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	83fb      	strh	r3, [r7, #30]
 8001ca2:	8bfa      	ldrh	r2, [r7, #30]
 8001ca4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	da13      	bge.n	8001cd4 <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001cb2:	8bfb      	ldrh	r3, [r7, #30]
 8001cb4:	ee07 2a90 	vmov	s15, r2
 8001cb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cbc:	697a      	ldr	r2, [r7, #20]
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4413      	add	r3, r2
 8001cc2:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 8001cc6:	2002      	movs	r0, #2
 8001cc8:	f006 f94c 	bl	8007f64 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001ccc:	8bfb      	ldrh	r3, [r7, #30]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	83fb      	strh	r3, [r7, #30]
 8001cd2:	e7e6      	b.n	8001ca2 <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8001cd8:	697a      	ldr	r2, [r7, #20]
 8001cda:	462b      	mov	r3, r5
 8001cdc:	3301      	adds	r3, #1
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4413      	add	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
 8001ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d00e      	beq.n	8001d0a <_ZN3IMU11calibrationEv+0xfe>
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	edd3 7a00 	vldr	s15, [r3]
 8001cf6:	ed97 7a08 	vldr	s14, [r7, #32]
 8001cfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cfe:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	3304      	adds	r3, #4
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
 8001d08:	e7ec      	b.n	8001ce4 <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8001d0a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001d0e:	ee07 3a90 	vmov	s15, r3
 8001d12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d16:	edd7 6a08 	vldr	s13, [r7, #32]
 8001d1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	edc3 7a03 	vstr	s15, [r3, #12]
 8001d24:	46b5      	mov	sp, r6
}
 8001d26:	bf00      	nop
 8001d28:	372c      	adds	r7, #44	; 0x2c
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	08017e44 	.word	0x08017e44
 8001d34:	08017e50 	.word	0x08017e50

08001d38 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af02      	add	r7, sp, #8
 8001d3e:	4603      	mov	r3, r0
 8001d40:	460a      	mov	r2, r1
 8001d42:	71fb      	strb	r3, [r7, #7]
 8001d44:	4613      	mov	r3, r2
 8001d46:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001d48:	79bb      	ldrb	r3, [r7, #6]
 8001d4a:	b299      	uxth	r1, r3
 8001d4c:	1dfa      	adds	r2, r7, #7
 8001d4e:	2364      	movs	r3, #100	; 0x64
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	2301      	movs	r3, #1
 8001d54:	480c      	ldr	r0, [pc, #48]	; (8001d88 <INA260_read+0x50>)
 8001d56:	f007 fced 	bl	8009734 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001d5a:	79bb      	ldrb	r3, [r7, #6]
 8001d5c:	b299      	uxth	r1, r3
 8001d5e:	f107 020c 	add.w	r2, r7, #12
 8001d62:	2364      	movs	r3, #100	; 0x64
 8001d64:	9300      	str	r3, [sp, #0]
 8001d66:	2302      	movs	r3, #2
 8001d68:	4807      	ldr	r0, [pc, #28]	; (8001d88 <INA260_read+0x50>)
 8001d6a:	f007 fde1 	bl	8009930 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001d6e:	7b3b      	ldrb	r3, [r7, #12]
 8001d70:	021b      	lsls	r3, r3, #8
 8001d72:	b21a      	sxth	r2, r3
 8001d74:	7b7b      	ldrb	r3, [r7, #13]
 8001d76:	b21b      	sxth	r3, r3
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	b21b      	sxth	r3, r3
 8001d7c:	81fb      	strh	r3, [r7, #14]
	return val;
 8001d7e:	89fb      	ldrh	r3, [r7, #14]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	2003e9c0 	.word	0x2003e9c0

08001d8c <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001d8c:	b590      	push	{r4, r7, lr}
 8001d8e:	b087      	sub	sp, #28
 8001d90:	af02      	add	r7, sp, #8
 8001d92:	4604      	mov	r4, r0
 8001d94:	4608      	mov	r0, r1
 8001d96:	4611      	mov	r1, r2
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4623      	mov	r3, r4
 8001d9c:	71fb      	strb	r3, [r7, #7]
 8001d9e:	4603      	mov	r3, r0
 8001da0:	71bb      	strb	r3, [r7, #6]
 8001da2:	460b      	mov	r3, r1
 8001da4:	717b      	strb	r3, [r7, #5]
 8001da6:	4613      	mov	r3, r2
 8001da8:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	733b      	strb	r3, [r7, #12]
 8001dae:	79bb      	ldrb	r3, [r7, #6]
 8001db0:	737b      	strb	r3, [r7, #13]
 8001db2:	797b      	ldrb	r3, [r7, #5]
 8001db4:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8001db6:	793b      	ldrb	r3, [r7, #4]
 8001db8:	b299      	uxth	r1, r3
 8001dba:	f107 020c 	add.w	r2, r7, #12
 8001dbe:	2364      	movs	r3, #100	; 0x64
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	4803      	ldr	r0, [pc, #12]	; (8001dd4 <INA260_write+0x48>)
 8001dc6:	f007 fcb5 	bl	8009734 <HAL_I2C_Master_Transmit>
}
 8001dca:	bf00      	nop
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd90      	pop	{r4, r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	2003e9c0 	.word	0x2003e9c0

08001dd8 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	71fb      	strb	r3, [r7, #7]
 8001de2:	460b      	mov	r3, r1
 8001de4:	71bb      	strb	r3, [r7, #6]
 8001de6:	4613      	mov	r3, r2
 8001de8:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8001dea:	797b      	ldrb	r3, [r7, #5]
 8001dec:	79ba      	ldrb	r2, [r7, #6]
 8001dee:	79f9      	ldrb	r1, [r7, #7]
 8001df0:	2000      	movs	r0, #0
 8001df2:	f7ff ffcb 	bl	8001d8c <INA260_write>
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	4603      	mov	r3, r0
 8001e06:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	21df      	movs	r1, #223	; 0xdf
 8001e0e:	2000      	movs	r0, #0
 8001e10:	f7ff ffe2 	bl	8001dd8 <setConfig>
}
 8001e14:	bf00      	nop
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
{

}
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4618      	mov	r0, r3
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
	...

08001e34 <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8001e40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e44:	482a      	ldr	r0, [pc, #168]	; (8001ef0 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e46:	f007 fb0b 	bl	8009460 <HAL_GPIO_ReadPin>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	bf0c      	ite	eq
 8001e50:	2301      	moveq	r3, #1
 8001e52:	2300      	movne	r3, #0
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <_ZN8JoyStick8getValueEv+0x2e>
 8001e5a:	89fb      	ldrh	r3, [r7, #14]
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 8001e62:	2101      	movs	r1, #1
 8001e64:	4823      	ldr	r0, [pc, #140]	; (8001ef4 <_ZN8JoyStick8getValueEv+0xc0>)
 8001e66:	f007 fafb 	bl	8009460 <HAL_GPIO_ReadPin>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	bf0c      	ite	eq
 8001e70:	2301      	moveq	r3, #1
 8001e72:	2300      	movne	r3, #0
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <_ZN8JoyStick8getValueEv+0x4e>
 8001e7a:	89fb      	ldrh	r3, [r7, #14]
 8001e7c:	f043 0302 	orr.w	r3, r3, #2
 8001e80:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 8001e82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e86:	481a      	ldr	r0, [pc, #104]	; (8001ef0 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e88:	f007 faea 	bl	8009460 <HAL_GPIO_ReadPin>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	bf0c      	ite	eq
 8001e92:	2301      	moveq	r3, #1
 8001e94:	2300      	movne	r3, #0
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <_ZN8JoyStick8getValueEv+0x70>
 8001e9c:	89fb      	ldrh	r3, [r7, #14]
 8001e9e:	f043 0304 	orr.w	r3, r3, #4
 8001ea2:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 8001ea4:	2104      	movs	r1, #4
 8001ea6:	4814      	ldr	r0, [pc, #80]	; (8001ef8 <_ZN8JoyStick8getValueEv+0xc4>)
 8001ea8:	f007 fada 	bl	8009460 <HAL_GPIO_ReadPin>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	bf0c      	ite	eq
 8001eb2:	2301      	moveq	r3, #1
 8001eb4:	2300      	movne	r3, #0
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d003      	beq.n	8001ec4 <_ZN8JoyStick8getValueEv+0x90>
 8001ebc:	89fb      	ldrh	r3, [r7, #14]
 8001ebe:	f043 0308 	orr.w	r3, r3, #8
 8001ec2:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 8001ec4:	2180      	movs	r1, #128	; 0x80
 8001ec6:	480a      	ldr	r0, [pc, #40]	; (8001ef0 <_ZN8JoyStick8getValueEv+0xbc>)
 8001ec8:	f007 faca 	bl	8009460 <HAL_GPIO_ReadPin>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	bf0c      	ite	eq
 8001ed2:	2301      	moveq	r3, #1
 8001ed4:	2300      	movne	r3, #0
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d003      	beq.n	8001ee4 <_ZN8JoyStick8getValueEv+0xb0>
 8001edc:	89fb      	ldrh	r3, [r7, #14]
 8001ede:	f043 0310 	orr.w	r3, r3, #16
 8001ee2:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8001ee4:	89fb      	ldrh	r3, [r7, #14]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	40020c00 	.word	0x40020c00
 8001ef8:	40020400 	.word	0x40020400

08001efc <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	460b      	mov	r3, r1
 8001f06:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8001f08:	78fb      	ldrb	r3, [r7, #3]
 8001f0a:	2b52      	cmp	r3, #82	; 0x52
 8001f0c:	d112      	bne.n	8001f34 <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f14:	4856      	ldr	r0, [pc, #344]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f16:	f007 fabb 	bl	8009490 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f20:	4853      	ldr	r0, [pc, #332]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f22:	f007 fab5 	bl	8009490 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f26:	2201      	movs	r2, #1
 8001f28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f2c:	4850      	ldr	r0, [pc, #320]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f2e:	f007 faaf 	bl	8009490 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 8001f32:	e098      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 8001f34:	78fb      	ldrb	r3, [r7, #3]
 8001f36:	2b47      	cmp	r3, #71	; 0x47
 8001f38:	d112      	bne.n	8001f60 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f40:	484b      	ldr	r0, [pc, #300]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f42:	f007 faa5 	bl	8009490 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f46:	2200      	movs	r2, #0
 8001f48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f4c:	4848      	ldr	r0, [pc, #288]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f4e:	f007 fa9f 	bl	8009490 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f52:	2201      	movs	r2, #1
 8001f54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f58:	4845      	ldr	r0, [pc, #276]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f5a:	f007 fa99 	bl	8009490 <HAL_GPIO_WritePin>
}
 8001f5e:	e082      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8001f60:	78fb      	ldrb	r3, [r7, #3]
 8001f62:	2b42      	cmp	r3, #66	; 0x42
 8001f64:	d112      	bne.n	8001f8c <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f66:	2201      	movs	r2, #1
 8001f68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f6c:	4840      	ldr	r0, [pc, #256]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f6e:	f007 fa8f 	bl	8009490 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f72:	2201      	movs	r2, #1
 8001f74:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f78:	483d      	ldr	r0, [pc, #244]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f7a:	f007 fa89 	bl	8009490 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f84:	483a      	ldr	r0, [pc, #232]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f86:	f007 fa83 	bl	8009490 <HAL_GPIO_WritePin>
}
 8001f8a:	e06c      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8001f8c:	78fb      	ldrb	r3, [r7, #3]
 8001f8e:	2b43      	cmp	r3, #67	; 0x43
 8001f90:	d112      	bne.n	8001fb8 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f92:	2201      	movs	r2, #1
 8001f94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f98:	4835      	ldr	r0, [pc, #212]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f9a:	f007 fa79 	bl	8009490 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fa4:	4832      	ldr	r0, [pc, #200]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001fa6:	f007 fa73 	bl	8009490 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001faa:	2200      	movs	r2, #0
 8001fac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fb0:	482f      	ldr	r0, [pc, #188]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001fb2:	f007 fa6d 	bl	8009490 <HAL_GPIO_WritePin>
}
 8001fb6:	e056      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8001fb8:	78fb      	ldrb	r3, [r7, #3]
 8001fba:	2b4d      	cmp	r3, #77	; 0x4d
 8001fbc:	d112      	bne.n	8001fe4 <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fc4:	482a      	ldr	r0, [pc, #168]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001fc6:	f007 fa63 	bl	8009490 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fd0:	4827      	ldr	r0, [pc, #156]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001fd2:	f007 fa5d 	bl	8009490 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fdc:	4824      	ldr	r0, [pc, #144]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001fde:	f007 fa57 	bl	8009490 <HAL_GPIO_WritePin>
}
 8001fe2:	e040      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 8001fe4:	78fb      	ldrb	r3, [r7, #3]
 8001fe6:	2b59      	cmp	r3, #89	; 0x59
 8001fe8:	d112      	bne.n	8002010 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001fea:	2200      	movs	r2, #0
 8001fec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ff0:	481f      	ldr	r0, [pc, #124]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001ff2:	f007 fa4d 	bl	8009490 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ffc:	481c      	ldr	r0, [pc, #112]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001ffe:	f007 fa47 	bl	8009490 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8002002:	2201      	movs	r2, #1
 8002004:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002008:	4819      	ldr	r0, [pc, #100]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 800200a:	f007 fa41 	bl	8009490 <HAL_GPIO_WritePin>
}
 800200e:	e02a      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8002010:	78fb      	ldrb	r3, [r7, #3]
 8002012:	2b57      	cmp	r3, #87	; 0x57
 8002014:	d112      	bne.n	800203c <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002016:	2200      	movs	r2, #0
 8002018:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800201c:	4814      	ldr	r0, [pc, #80]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 800201e:	f007 fa37 	bl	8009490 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8002022:	2200      	movs	r2, #0
 8002024:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002028:	4811      	ldr	r0, [pc, #68]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 800202a:	f007 fa31 	bl	8009490 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800202e:	2200      	movs	r2, #0
 8002030:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002034:	480e      	ldr	r0, [pc, #56]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8002036:	f007 fa2b 	bl	8009490 <HAL_GPIO_WritePin>
}
 800203a:	e014      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 800203c:	78fb      	ldrb	r3, [r7, #3]
 800203e:	2b7e      	cmp	r3, #126	; 0x7e
 8002040:	d111      	bne.n	8002066 <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002042:	2201      	movs	r2, #1
 8002044:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002048:	4809      	ldr	r0, [pc, #36]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 800204a:	f007 fa21 	bl	8009490 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800204e:	2201      	movs	r2, #1
 8002050:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002054:	4806      	ldr	r0, [pc, #24]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8002056:	f007 fa1b 	bl	8009490 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800205a:	2201      	movs	r2, #1
 800205c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002060:	4803      	ldr	r0, [pc, #12]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8002062:	f007 fa15 	bl	8009490 <HAL_GPIO_WritePin>
}
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40020000 	.word	0x40020000

08002074 <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	460b      	mov	r3, r1
 800207e:	70fb      	strb	r3, [r7, #3]
 8002080:	4613      	mov	r3, r2
 8002082:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 8002084:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d106      	bne.n	800209a <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800208c:	2201      	movs	r2, #1
 800208e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002092:	4813      	ldr	r0, [pc, #76]	; (80020e0 <_ZN3LED2LREaa+0x6c>)
 8002094:	f007 f9fc 	bl	8009490 <HAL_GPIO_WritePin>
 8002098:	e009      	b.n	80020ae <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 800209a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d105      	bne.n	80020ae <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80020a2:	2200      	movs	r2, #0
 80020a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020a8:	480d      	ldr	r0, [pc, #52]	; (80020e0 <_ZN3LED2LREaa+0x6c>)
 80020aa:	f007 f9f1 	bl	8009490 <HAL_GPIO_WritePin>

	if(r_status == 1)
 80020ae:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d106      	bne.n	80020c4 <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80020b6:	2201      	movs	r2, #1
 80020b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020bc:	4808      	ldr	r0, [pc, #32]	; (80020e0 <_ZN3LED2LREaa+0x6c>)
 80020be:	f007 f9e7 	bl	8009490 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 80020c2:	e009      	b.n	80020d8 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 80020c4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d105      	bne.n	80020d8 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80020cc:	2200      	movs	r2, #0
 80020ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020d2:	4803      	ldr	r0, [pc, #12]	; (80020e0 <_ZN3LED2LREaa+0x6c>)
 80020d4:	f007 f9dc 	bl	8009490 <HAL_GPIO_WritePin>
}
 80020d8:	bf00      	nop
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40020000 	.word	0x40020000

080020e4 <_ZN10LineSensorC1Ev>:
#include "Macro.h"
#include "AQM0802.h"

float mon_sens, mon_sens_lpf;

LineSensor::LineSensor()
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b092      	sub	sp, #72	; 0x48
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff fe92 	bl	8001e1c <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	637b      	str	r3, [r7, #52]	; 0x34
 80020fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020fe:	647b      	str	r3, [r7, #68]	; 0x44
 8002100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002102:	331c      	adds	r3, #28
 8002104:	633b      	str	r3, [r7, #48]	; 0x30
 8002106:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800210a:	429a      	cmp	r2, r3
 800210c:	d008      	beq.n	8002120 <_ZN10LineSensorC1Ev+0x3c>
 800210e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002110:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 8002112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002114:	2200      	movs	r2, #0
 8002116:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8002118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800211a:	3302      	adds	r3, #2
 800211c:	647b      	str	r3, [r7, #68]	; 0x44
 800211e:	e7f2      	b.n	8002106 <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002126:	62bb      	str	r3, [r7, #40]	; 0x28
 8002128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212a:	643b      	str	r3, [r7, #64]	; 0x40
 800212c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212e:	3338      	adds	r3, #56	; 0x38
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
 8002132:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	429a      	cmp	r2, r3
 8002138:	d009      	beq.n	800214e <_ZN10LineSensorC1Ev+0x6a>
 800213a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800213c:	623b      	str	r3, [r7, #32]
		s = 0;
 800213e:	6a3b      	ldr	r3, [r7, #32]
 8002140:	f04f 0200 	mov.w	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 8002146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002148:	3304      	adds	r3, #4
 800214a:	643b      	str	r3, [r7, #64]	; 0x40
 800214c:	e7f1      	b.n	8002132 <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002154:	61fb      	str	r3, [r7, #28]
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	63fb      	str	r3, [r7, #60]	; 0x3c
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	3338      	adds	r3, #56	; 0x38
 800215e:	61bb      	str	r3, [r7, #24]
 8002160:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	429a      	cmp	r2, r3
 8002166:	d009      	beq.n	800217c <_ZN10LineSensorC1Ev+0x98>
 8002168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800216a:	617b      	str	r3, [r7, #20]
		m = 0;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	f04f 0200 	mov.w	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 8002174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002176:	3304      	adds	r3, #4
 8002178:	63fb      	str	r3, [r7, #60]	; 0x3c
 800217a:	e7f1      	b.n	8002160 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	63bb      	str	r3, [r7, #56]	; 0x38
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	3338      	adds	r3, #56	; 0x38
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	429a      	cmp	r2, r3
 8002194:	d009      	beq.n	80021aa <_ZN10LineSensorC1Ev+0xc6>
 8002196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002198:	60bb      	str	r3, [r7, #8]
		s = 1;
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80021a0:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 80021a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021a4:	3304      	adds	r3, #4
 80021a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80021a8:	e7f1      	b.n	800218e <_ZN10LineSensorC1Ev+0xaa>
	}

}
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4618      	mov	r0, r3
 80021ae:	3748      	adds	r7, #72	; 0x48
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	220e      	movs	r2, #14
 80021c0:	4619      	mov	r1, r3
 80021c2:	4803      	ldr	r0, [pc, #12]	; (80021d0 <_ZN10LineSensor8ADCStartEv+0x1c>)
 80021c4:	f005 ff34 	bl	8008030 <HAL_ADC_Start_DMA>
}
 80021c8:	bf00      	nop
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	2003e8e4 	.word	0x2003e8e4

080021d4 <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 80021dc:	2300      	movs	r3, #0
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2b0d      	cmp	r3, #13
 80021e4:	dc2f      	bgt.n	8002246 <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	3392      	adds	r3, #146	; 0x92
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	3304      	adds	r3, #4
 80021f2:	ed93 7a00 	vldr	s14, [r3]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80021fe:	ee07 3a90 	vmov	s15, r3
 8002202:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	33a0      	adds	r3, #160	; 0xa0
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	3304      	adds	r3, #4
 8002212:	edd3 7a00 	vldr	s15, [r3]
 8002216:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800221a:	4b14      	ldr	r3, [pc, #80]	; (800226c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	4619      	mov	r1, r3
 8002220:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	460b      	mov	r3, r1
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	1a5b      	subs	r3, r3, r1
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	68f9      	ldr	r1, [r7, #12]
 8002230:	440b      	add	r3, r1
 8002232:	3306      	adds	r3, #6
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	3304      	adds	r3, #4
 800223a:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	3301      	adds	r3, #1
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	e7cc      	b.n	80021e0 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 8002246:	4b09      	ldr	r3, [pc, #36]	; (800226c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	3301      	adds	r3, #1
 800224c:	b2da      	uxtb	r2, r3
 800224e:	4b07      	ldr	r3, [pc, #28]	; (800226c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002250:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 8002252:	4b06      	ldr	r3, [pc, #24]	; (800226c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b09      	cmp	r3, #9
 8002258:	d902      	bls.n	8002260 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 800225a:	4b04      	ldr	r3, [pc, #16]	; (800226c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800225c:	2200      	movs	r2, #0
 800225e:	701a      	strb	r2, [r3, #0]


}
 8002260:	bf00      	nop
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	2000021c 	.word	0x2000021c

08002270 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 8002270:	b5b0      	push	{r4, r5, r7, lr}
 8002272:	b08e      	sub	sp, #56	; 0x38
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
	float temp_val[10];
	static float pre_sensor[AD_DATA_SIZE];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002278:	2300      	movs	r3, #0
 800227a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800227e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002282:	2b0d      	cmp	r3, #13
 8002284:	f200 80b8 	bhi.w	80023f8 <_ZN10LineSensor18updateSensorValuesEv+0x188>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002288:	2300      	movs	r3, #0
 800228a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800228e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002292:	2b09      	cmp	r3, #9
 8002294:	d81c      	bhi.n	80022d0 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 8002296:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800229a:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 800229e:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	4613      	mov	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	1a9b      	subs	r3, r3, r2
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	4423      	add	r3, r4
 80022ae:	3306      	adds	r3, #6
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	4403      	add	r3, r0
 80022b4:	3304      	adds	r3, #4
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	008b      	lsls	r3, r1, #2
 80022ba:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022be:	440b      	add	r3, r1
 80022c0:	3b30      	subs	r3, #48	; 0x30
 80022c2:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80022c4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80022c8:	3301      	adds	r3, #1
 80022ca:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80022ce:	e7de      	b.n	800228e <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 80022d0:	2300      	movs	r3, #0
 80022d2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80022d6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022da:	2b09      	cmp	r3, #9
 80022dc:	d84d      	bhi.n	800237a <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 80022de:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022e2:	3301      	adds	r3, #1
 80022e4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80022e8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022ec:	2b09      	cmp	r3, #9
 80022ee:	d83e      	bhi.n	800236e <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 80022f0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022fa:	4413      	add	r3, r2
 80022fc:	3b30      	subs	r3, #48	; 0x30
 80022fe:	ed93 7a00 	vldr	s14, [r3]
 8002302:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800230c:	4413      	add	r3, r2
 800230e:	3b30      	subs	r3, #48	; 0x30
 8002310:	edd3 7a00 	vldr	s15, [r3]
 8002314:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800231c:	d521      	bpl.n	8002362 <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 800231e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002328:	4413      	add	r3, r2
 800232a:	3b30      	subs	r3, #48	; 0x30
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 8002330:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8002334:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002338:	0092      	lsls	r2, r2, #2
 800233a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800233e:	440a      	add	r2, r1
 8002340:	3a30      	subs	r2, #48	; 0x30
 8002342:	6812      	ldr	r2, [r2, #0]
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800234a:	440b      	add	r3, r1
 800234c:	3b30      	subs	r3, #48	; 0x30
 800234e:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 8002350:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800235a:	4413      	add	r3, r2
 800235c:	3b30      	subs	r3, #48	; 0x30
 800235e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002360:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 8002362:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002366:	3301      	adds	r3, #1
 8002368:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800236c:	e7bc      	b.n	80022e8 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 800236e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002372:	3301      	adds	r3, #1
 8002374:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002378:	e7ad      	b.n	80022d6 <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = ((R_LINESENSE)*(temp_val[5]) + (1.0 - (R_LINESENSE))* (pre_sensor[ad_cnt]));
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	4618      	mov	r0, r3
 800237e:	f7fe f8fb 	bl	8000578 <__aeabi_f2d>
 8002382:	a32a      	add	r3, pc, #168	; (adr r3, 800242c <_ZN10LineSensor18updateSensorValuesEv+0x1bc>)
 8002384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002388:	f7fe f94e 	bl	8000628 <__aeabi_dmul>
 800238c:	4603      	mov	r3, r0
 800238e:	460c      	mov	r4, r1
 8002390:	4625      	mov	r5, r4
 8002392:	461c      	mov	r4, r3
 8002394:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002398:	4a21      	ldr	r2, [pc, #132]	; (8002420 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7fe f8e9 	bl	8000578 <__aeabi_f2d>
 80023a6:	a31c      	add	r3, pc, #112	; (adr r3, 8002418 <_ZN10LineSensor18updateSensorValuesEv+0x1a8>)
 80023a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ac:	f7fe f93c 	bl	8000628 <__aeabi_dmul>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	4620      	mov	r0, r4
 80023b6:	4629      	mov	r1, r5
 80023b8:	f7fd ff80 	bl	80002bc <__adddf3>
 80023bc:	4603      	mov	r3, r0
 80023be:	460c      	mov	r4, r1
 80023c0:	461a      	mov	r2, r3
 80023c2:	4623      	mov	r3, r4
 80023c4:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 80023c8:	4610      	mov	r0, r2
 80023ca:	4619      	mov	r1, r3
 80023cc:	f7fe fc24 	bl	8000c18 <__aeabi_d2f>
 80023d0:	4601      	mov	r1, r0
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	6019      	str	r1, [r3, #0]
		pre_sensor[ad_cnt] = temp_val[5];
 80023de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80023e2:	69fa      	ldr	r2, [r7, #28]
 80023e4:	490e      	ldr	r1, [pc, #56]	; (8002420 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80023ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80023f0:	3301      	adds	r3, #1
 80023f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80023f6:	e742      	b.n	800227e <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}

	mon_sens = store_vals_[5][5];
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80023fe:	4a09      	ldr	r2, [pc, #36]	; (8002424 <_ZN10LineSensor18updateSensorValuesEv+0x1b4>)
 8002400:	6013      	str	r3, [r2, #0]
	mon_sens_lpf = sensor[5];
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8002408:	4a07      	ldr	r2, [pc, #28]	; (8002428 <_ZN10LineSensor18updateSensorValuesEv+0x1b8>)
 800240a:	6013      	str	r3, [r2, #0]
}
 800240c:	bf00      	nop
 800240e:	3738      	adds	r7, #56	; 0x38
 8002410:	46bd      	mov	sp, r7
 8002412:	bdb0      	pop	{r4, r5, r7, pc}
 8002414:	f3af 8000 	nop.w
 8002418:	66666666 	.word	0x66666666
 800241c:	3fee6666 	.word	0x3fee6666
 8002420:	20000220 	.word	0x20000220
 8002424:	20000214 	.word	0x20000214
 8002428:	20000218 	.word	0x20000218
 800242c:	9999999a 	.word	0x9999999a
 8002430:	3fa99999 	.word	0x3fa99999

08002434 <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b0a0      	sub	sp, #128	; 0x80
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 800243c:	2064      	movs	r0, #100	; 0x64
 800243e:	f005 fd91 	bl	8007f64 <HAL_Delay>

	lcd_clear();
 8002442:	f7fe fe2d 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8002446:	2100      	movs	r1, #0
 8002448:	2000      	movs	r0, #0
 800244a:	f7fe fe39 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 800244e:	4886      	ldr	r0, [pc, #536]	; (8002668 <_ZN10LineSensor11calibrationEv+0x234>)
 8002450:	f7fe fe60 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8002454:	2101      	movs	r1, #1
 8002456:	2000      	movs	r0, #0
 8002458:	f7fe fe32 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 800245c:	4883      	ldr	r0, [pc, #524]	; (800266c <_ZN10LineSensor11calibrationEv+0x238>)
 800245e:	f7fe fe59 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002462:	2300      	movs	r3, #0
 8002464:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002468:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800246c:	2b0d      	cmp	r3, #13
 800246e:	d823      	bhi.n	80024b8 <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 8002470:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8002474:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	32b0      	adds	r2, #176	; 0xb0
 800247c:	0092      	lsls	r2, r2, #2
 800247e:	440a      	add	r2, r1
 8002480:	6812      	ldr	r2, [r2, #0]
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002488:	440b      	add	r3, r1
 800248a:	3b40      	subs	r3, #64	; 0x40
 800248c:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 800248e:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8002492:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	32b0      	adds	r2, #176	; 0xb0
 800249a:	0092      	lsls	r2, r2, #2
 800249c:	440a      	add	r2, r1
 800249e:	6812      	ldr	r2, [r2, #0]
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80024a6:	440b      	add	r3, r1
 80024a8:	3b78      	subs	r3, #120	; 0x78
 80024aa:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80024ac:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80024b0:	3301      	adds	r3, #1
 80024b2:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80024b6:	e7d7      	b.n	8002468 <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff fcb8 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	bf14      	ite	ne
 80024ca:	2301      	movne	r3, #1
 80024cc:	2300      	moveq	r3, #0
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d079      	beq.n	80025c8 <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80024d4:	2300      	movs	r3, #0
 80024d6:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80024da:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024de:	2b0d      	cmp	r3, #13
 80024e0:	d850      	bhi.n	8002584 <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 80024e2:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80024ec:	4413      	add	r3, r2
 80024ee:	3b40      	subs	r3, #64	; 0x40
 80024f0:	ed93 7a00 	vldr	s14, [r3]
 80024f4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	33b0      	adds	r3, #176	; 0xb0
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	edd3 7a00 	vldr	s15, [r3]
 8002504:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250c:	d50f      	bpl.n	800252e <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 800250e:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8002512:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	32b0      	adds	r2, #176	; 0xb0
 800251a:	0092      	lsls	r2, r2, #2
 800251c:	440a      	add	r2, r1
 800251e:	6812      	ldr	r2, [r2, #0]
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002526:	440b      	add	r3, r1
 8002528:	3b40      	subs	r3, #64	; 0x40
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	e024      	b.n	8002578 <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 800252e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002538:	4413      	add	r3, r2
 800253a:	3b78      	subs	r3, #120	; 0x78
 800253c:	ed93 7a00 	vldr	s14, [r3]
 8002540:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	33b0      	adds	r3, #176	; 0xb0
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4413      	add	r3, r2
 800254c:	edd3 7a00 	vldr	s15, [r3]
 8002550:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002558:	dd0e      	ble.n	8002578 <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 800255a:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 800255e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	32b0      	adds	r2, #176	; 0xb0
 8002566:	0092      	lsls	r2, r2, #2
 8002568:	440a      	add	r2, r1
 800256a:	6812      	ldr	r2, [r2, #0]
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002572:	440b      	add	r3, r1
 8002574:	3b78      	subs	r3, #120	; 0x78
 8002576:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002578:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800257c:	3301      	adds	r3, #1
 800257e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002582:	e7aa      	b.n	80024da <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f203 23be 	addw	r3, r3, #702	; 0x2be
 800258a:	4618      	mov	r0, r3
 800258c:	f002 f81a 	bl	80045c4 <_ZN12RotarySwitch8getValueEv>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	bf0c      	ite	eq
 8002596:	2301      	moveq	r3, #1
 8002598:	2300      	movne	r3, #0
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b00      	cmp	r3, #0
 800259e:	d009      	beq.n	80025b4 <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80025a6:	2201      	movs	r2, #1
 80025a8:	f04f 31ff 	mov.w	r1, #4294967295
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff fd61 	bl	8002074 <_ZN3LED2LREaa>
 80025b2:	e781      	b.n	80024b8 <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80025ba:	2200      	movs	r2, #0
 80025bc:	f04f 31ff 	mov.w	r1, #4294967295
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff fd57 	bl	8002074 <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 80025c6:	e777      	b.n	80024b8 <_ZN10LineSensor11calibrationEv+0x84>
		printf("%f, ", m);
	}
		printf("\n");
	*/

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80025c8:	2300      	movs	r3, #0
 80025ca:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80025ce:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80025d2:	2b0d      	cmp	r3, #13
 80025d4:	d826      	bhi.n	8002624 <_ZN10LineSensor11calibrationEv+0x1f0>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 80025d6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80025e0:	4413      	add	r3, r2
 80025e2:	3b40      	subs	r3, #64	; 0x40
 80025e4:	ed93 7a00 	vldr	s14, [r3]
 80025e8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80025f2:	4413      	add	r3, r2
 80025f4:	3b78      	subs	r3, #120	; 0x78
 80025f6:	edd3 7a00 	vldr	s15, [r3]
 80025fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025fe:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002602:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002670 <_ZN10LineSensor11calibrationEv+0x23c>
 8002606:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	3392      	adds	r3, #146	; 0x92
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	3304      	adds	r3, #4
 8002614:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002618:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800261c:	3301      	adds	r3, #1
 800261e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002622:	e7d4      	b.n	80025ce <_ZN10LineSensor11calibrationEv+0x19a>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002624:	2300      	movs	r3, #0
 8002626:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 800262a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800262e:	2b0d      	cmp	r3, #13
 8002630:	d815      	bhi.n	800265e <_ZN10LineSensor11calibrationEv+0x22a>
		offset_values_[i] = min_values[i];
 8002632:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8002636:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800263a:	0092      	lsls	r2, r2, #2
 800263c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002640:	440a      	add	r2, r1
 8002642:	3a78      	subs	r2, #120	; 0x78
 8002644:	6812      	ldr	r2, [r2, #0]
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	33a0      	adds	r3, #160	; 0xa0
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	440b      	add	r3, r1
 800264e:	3304      	adds	r3, #4
 8002650:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002652:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002656:	3301      	adds	r3, #1
 8002658:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 800265c:	e7e5      	b.n	800262a <_ZN10LineSensor11calibrationEv+0x1f6>
	}


}
 800265e:	bf00      	nop
 8002660:	3780      	adds	r7, #128	; 0x80
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	08017e5c 	.word	0x08017e5c
 800266c:	08017e68 	.word	0x08017e68
 8002670:	447a0000 	.word	0x447a0000

08002674 <_ZN10LineSensor13emergencyStopEv>:
{
	printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 8002674:	b480      	push	{r7}
 8002676:	b089      	sub	sp, #36	; 0x24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
	uint16_t out_cnt = 0;
 800267c:	2300      	movs	r3, #0
 800267e:	83fb      	strh	r3, [r7, #30]
	static uint16_t cnt = 0;
	static bool flag = false;

	for(const auto & s : sensor){
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002686:	617b      	str	r3, [r7, #20]
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	61bb      	str	r3, [r7, #24]
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	3338      	adds	r3, #56	; 0x38
 8002690:	613b      	str	r3, [r7, #16]
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	429a      	cmp	r2, r3
 8002698:	d012      	beq.n	80026c0 <_ZN10LineSensor13emergencyStopEv+0x4c>
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	60fb      	str	r3, [r7, #12]
		if(s >= 700) out_cnt++;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	edd3 7a00 	vldr	s15, [r3]
 80026a4:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002714 <_ZN10LineSensor13emergencyStopEv+0xa0>
 80026a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026b0:	db02      	blt.n	80026b8 <_ZN10LineSensor13emergencyStopEv+0x44>
 80026b2:	8bfb      	ldrh	r3, [r7, #30]
 80026b4:	3301      	adds	r3, #1
 80026b6:	83fb      	strh	r3, [r7, #30]
	for(const auto & s : sensor){
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	3304      	adds	r3, #4
 80026bc:	61bb      	str	r3, [r7, #24]
 80026be:	e7e8      	b.n	8002692 <_ZN10LineSensor13emergencyStopEv+0x1e>
	}

	if(out_cnt >= AD_DATA_SIZE){
 80026c0:	8bfb      	ldrh	r3, [r7, #30]
 80026c2:	2b0d      	cmp	r3, #13
 80026c4:	d906      	bls.n	80026d4 <_ZN10LineSensor13emergencyStopEv+0x60>
		cnt++;
 80026c6:	4b14      	ldr	r3, [pc, #80]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	3301      	adds	r3, #1
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	4b12      	ldr	r3, [pc, #72]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026d0:	801a      	strh	r2, [r3, #0]
 80026d2:	e002      	b.n	80026da <_ZN10LineSensor13emergencyStopEv+0x66>
	}
	else{
		cnt = 0;
 80026d4:	4b10      	ldr	r3, [pc, #64]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 50){
 80026da:	4b0f      	ldr	r3, [pc, #60]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	2b31      	cmp	r3, #49	; 0x31
 80026e0:	d903      	bls.n	80026ea <_ZN10LineSensor13emergencyStopEv+0x76>
		flag = true;
 80026e2:	4b0e      	ldr	r3, [pc, #56]	; (800271c <_ZN10LineSensor13emergencyStopEv+0xa8>)
 80026e4:	2201      	movs	r2, #1
 80026e6:	701a      	strb	r2, [r3, #0]
 80026e8:	e002      	b.n	80026f0 <_ZN10LineSensor13emergencyStopEv+0x7c>
	}
	else flag = false;
 80026ea:	4b0c      	ldr	r3, [pc, #48]	; (800271c <_ZN10LineSensor13emergencyStopEv+0xa8>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	701a      	strb	r2, [r3, #0]

	if(cnt >= 10000) cnt = 10000;
 80026f0:	4b09      	ldr	r3, [pc, #36]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026f2:	881b      	ldrh	r3, [r3, #0]
 80026f4:	f242 720f 	movw	r2, #9999	; 0x270f
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d903      	bls.n	8002704 <_ZN10LineSensor13emergencyStopEv+0x90>
 80026fc:	4b06      	ldr	r3, [pc, #24]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026fe:	f242 7210 	movw	r2, #10000	; 0x2710
 8002702:	801a      	strh	r2, [r3, #0]

	return flag;
 8002704:	4b05      	ldr	r3, [pc, #20]	; (800271c <_ZN10LineSensor13emergencyStopEv+0xa8>)
 8002706:	781b      	ldrb	r3, [r3, #0]

}
 8002708:	4618      	mov	r0, r3
 800270a:	3724      	adds	r7, #36	; 0x24
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	442f0000 	.word	0x442f0000
 8002718:	20000258 	.word	0x20000258
 800271c:	2000025a 	.word	0x2000025a

08002720 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	ed87 0a01 	vstr	s0, [r7, #4]
 800272a:	edd7 7a01 	vldr	s15, [r7, #4]
 800272e:	eef0 7ae7 	vabs.f32	s15, s15
 8002732:	eeb0 0a67 	vmov.f32	s0, s15
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU>:
float mon_ave_l, mon_ave_r;
float mon_ref_dis, mon_current_dis;
uint16_t mon_vel_idx, mon_i;
float mon_tar_vel;

LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger, IMU *imu) :
 8002740:	b480      	push	{r7}
 8002742:	b087      	sub	sp, #28
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
 800274c:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0), kp_velo_(0), kd_velo_(0), ki_velo_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0),
				target_velocity_(0), max_velocity_(0), max_velocity2_(0), logging_flag_(false),
				ref_distance_(0), velocity_play_flag_(false), velocity_table_idx_(0), mode_selector_(0), crossline_idx_(0), sideline_idx_(0),
				ignore_crossline_flag_(false)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	625a      	str	r2, [r3, #36]	; 0x24
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f04f 0200 	mov.w	r2, #0
 800275c:	629a      	str	r2, [r3, #40]	; 0x28
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f04f 0200 	mov.w	r2, #0
 8002764:	62da      	str	r2, [r3, #44]	; 0x2c
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f04f 0200 	mov.w	r2, #0
 800276c:	631a      	str	r2, [r3, #48]	; 0x30
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	635a      	str	r2, [r3, #52]	; 0x34
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	639a      	str	r2, [r3, #56]	; 0x38
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f04f 0200 	mov.w	r2, #0
 8002794:	641a      	str	r2, [r3, #64]	; 0x40
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f04f 0200 	mov.w	r2, #0
 800279c:	679a      	str	r2, [r3, #120]	; 0x78
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f04f 0200 	mov.w	r2, #0
 80027a4:	67da      	str	r2, [r3, #124]	; 0x7c
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f04f 0200 	mov.w	r2, #0
 80027ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 80027be:	3348      	adds	r3, #72	; 0x48
 80027c0:	f04f 0200 	mov.w	r2, #0
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80027cc:	330c      	adds	r3, #12
 80027ce:	2200      	movs	r2, #0
 80027d0:	701a      	strb	r2, [r3, #0]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80027d8:	330e      	adds	r3, #14
 80027da:	2200      	movs	r2, #0
 80027dc:	801a      	strh	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80027e4:	3310      	adds	r3, #16
 80027e6:	2200      	movs	r2, #0
 80027e8:	801a      	strh	r2, [r3, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80027f0:	3344      	adds	r3, #68	; 0x44
 80027f2:	2200      	movs	r2, #0
 80027f4:	801a      	strh	r2, [r3, #0]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80027fc:	3346      	adds	r3, #70	; 0x46
 80027fe:	2200      	movs	r2, #0
 8002800:	801a      	strh	r2, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002808:	3348      	adds	r3, #72	; 0x48
 800280a:	2200      	movs	r2, #0
 800280c:	701a      	strb	r2, [r3, #0]
{
	motor_ = motor;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	68ba      	ldr	r2, [r7, #8]
 8002812:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6a3a      	ldr	r2, [r7, #32]
 8002824:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800282a:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002830:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002836:	61da      	str	r2, [r3, #28]
	imu_ = imu;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800283c:	621a      	str	r2, [r3, #32]

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 800283e:	2300      	movs	r3, #0
 8002840:	82fb      	strh	r3, [r7, #22]
 8002842:	8afb      	ldrh	r3, [r7, #22]
 8002844:	f241 726f 	movw	r2, #5999	; 0x176f
 8002848:	4293      	cmp	r3, r2
 800284a:	d80e      	bhi.n	800286a <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x12a>
		velocity_table_[i] = 0;
 800284c:	8afb      	ldrh	r3, [r7, #22]
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8002854:	3312      	adds	r3, #18
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4413      	add	r3, r2
 800285a:	3304      	adds	r3, #4
 800285c:	f04f 0200 	mov.w	r2, #0
 8002860:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002862:	8afb      	ldrh	r3, [r7, #22]
 8002864:	3301      	adds	r3, #1
 8002866:	82fb      	strh	r3, [r7, #22]
 8002868:	e7eb      	b.n	8002842 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x102>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 800286a:	2300      	movs	r3, #0
 800286c:	82bb      	strh	r3, [r7, #20]
 800286e:	8abb      	ldrh	r3, [r7, #20]
 8002870:	2b63      	cmp	r3, #99	; 0x63
 8002872:	d80e      	bhi.n	8002892 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x152>
		crossline_distance_[i] = 0;
 8002874:	8abb      	ldrh	r3, [r7, #20]
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 800287c:	3304      	adds	r3, #4
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	3304      	adds	r3, #4
 8002884:	f04f 0200 	mov.w	r2, #0
 8002888:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 800288a:	8abb      	ldrh	r3, [r7, #20]
 800288c:	3301      	adds	r3, #1
 800288e:	82bb      	strh	r3, [r7, #20]
 8002890:	e7ed      	b.n	800286e <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x12e>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002892:	2300      	movs	r3, #0
 8002894:	827b      	strh	r3, [r7, #18]
 8002896:	8a7b      	ldrh	r3, [r7, #18]
 8002898:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800289c:	d20e      	bcs.n	80028bc <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x17c>
		sideline_distance_[i] = 0;
 800289e:	8a7b      	ldrh	r3, [r7, #18]
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 80028a6:	3328      	adds	r3, #40	; 0x28
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	4413      	add	r3, r2
 80028ac:	3304      	adds	r3, #4
 80028ae:	f04f 0200 	mov.w	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80028b4:	8a7b      	ldrh	r3, [r7, #18]
 80028b6:	3301      	adds	r3, #1
 80028b8:	827b      	strh	r3, [r7, #18]
 80028ba:	e7ec      	b.n	8002896 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x156>
	}
}
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	4618      	mov	r0, r3
 80028c0:	371c      	adds	r7, #28
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	0000      	movs	r0, r0
 80028cc:	0000      	movs	r0, r0
	...

080028d0 <_ZN9LineTrace9calcErrorEv>:

// --------private--------- //
float LineTrace::calcError()
{
 80028d0:	b5b0      	push	{r4, r5, r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
	static float pre_diff;
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 80028e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 80028f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 8002900:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 800290c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002918:	ee37 7a27 	vadd.f32	s14, s14, s15
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 8002924:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	edd3 6ab7 	vldr	s13, [r3, #732]	; 0x2dc
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8002938:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002944:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002950:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 800295c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002968:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8002974:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002978:	ee77 7a67 	vsub.f32	s15, s14, s15
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 800297c:	edc7 7a03 	vstr	s15, [r7, #12]
	mon_diff = diff;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	4a1f      	ldr	r2, [pc, #124]	; (8002a00 <_ZN9LineTrace9calcErrorEv+0x130>)
 8002984:	6013      	str	r3, [r2, #0]

	diff = ((R_DIFF)*(diff) + (1.0 - (R_DIFF))* (pre_diff));
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	4618      	mov	r0, r3
 800298a:	f7fd fdf5 	bl	8000578 <__aeabi_f2d>
 800298e:	a318      	add	r3, pc, #96	; (adr r3, 80029f0 <_ZN9LineTrace9calcErrorEv+0x120>)
 8002990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002994:	f7fd fe48 	bl	8000628 <__aeabi_dmul>
 8002998:	4603      	mov	r3, r0
 800299a:	460c      	mov	r4, r1
 800299c:	4625      	mov	r5, r4
 800299e:	461c      	mov	r4, r3
 80029a0:	4b18      	ldr	r3, [pc, #96]	; (8002a04 <_ZN9LineTrace9calcErrorEv+0x134>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7fd fde7 	bl	8000578 <__aeabi_f2d>
 80029aa:	a313      	add	r3, pc, #76	; (adr r3, 80029f8 <_ZN9LineTrace9calcErrorEv+0x128>)
 80029ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b0:	f7fd fe3a 	bl	8000628 <__aeabi_dmul>
 80029b4:	4602      	mov	r2, r0
 80029b6:	460b      	mov	r3, r1
 80029b8:	4620      	mov	r0, r4
 80029ba:	4629      	mov	r1, r5
 80029bc:	f7fd fc7e 	bl	80002bc <__adddf3>
 80029c0:	4603      	mov	r3, r0
 80029c2:	460c      	mov	r4, r1
 80029c4:	4618      	mov	r0, r3
 80029c6:	4621      	mov	r1, r4
 80029c8:	f7fe f926 	bl	8000c18 <__aeabi_d2f>
 80029cc:	4603      	mov	r3, r0
 80029ce:	60fb      	str	r3, [r7, #12]
	mon_diff_lpf = diff;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	4a0d      	ldr	r2, [pc, #52]	; (8002a08 <_ZN9LineTrace9calcErrorEv+0x138>)
 80029d4:	6013      	str	r3, [r2, #0]

	pre_diff = diff;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	4a0a      	ldr	r2, [pc, #40]	; (8002a04 <_ZN9LineTrace9calcErrorEv+0x134>)
 80029da:	6013      	str	r3, [r2, #0]

	return diff;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	ee07 3a90 	vmov	s15, r3

}
 80029e2:	eeb0 0a67 	vmov.f32	s0, s15
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bdb0      	pop	{r4, r5, r7, pc}
 80029ec:	f3af 8000 	nop.w
 80029f0:	47ae147b 	.word	0x47ae147b
 80029f4:	3fb47ae1 	.word	0x3fb47ae1
 80029f8:	d70a3d71 	.word	0xd70a3d71
 80029fc:	3fed70a3 	.word	0x3fed70a3
 8002a00:	2000025c 	.word	0x2000025c
 8002a04:	20000280 	.word	0x20000280
 8002a08:	20000260 	.word	0x20000260
 8002a0c:	00000000 	.word	0x00000000

08002a10 <_ZN9LineTrace8pidTraceEv>:
	float phi = atan2(norm_l - norm_r, 1.0);
	delta_theta = (phi * ANGLE_BETWEEN_SENSORS/2) / (PI / 4);
}

void LineTrace::pidTrace()
{
 8002a10:	b5b0      	push	{r4, r5, r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f7ff ff59 	bl	80028d0 <_ZN9LineTrace9calcErrorEv>
 8002a1e:	ed87 0a05 	vstr	s0, [r7, #20]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d007      	beq.n	8002a3c <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 8002a2c:	4b3c      	ldr	r3, [pc, #240]	; (8002b20 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002a2e:	f04f 0200 	mov.w	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	}

	p = kp_ * diff;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002a42:	ed97 7a05 	vldr	s14, [r7, #20]
 8002a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a4a:	edc7 7a04 	vstr	s15, [r7, #16]
	d = kd_ * (diff - pre_diff) / DELTA_T;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002a54:	4b33      	ldr	r3, [pc, #204]	; (8002b24 <_ZN9LineTrace8pidTraceEv+0x114>)
 8002a56:	edd3 7a00 	vldr	s15, [r3]
 8002a5a:	edd7 6a05 	vldr	s13, [r7, #20]
 8002a5e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a66:	ee17 0a90 	vmov	r0, s15
 8002a6a:	f7fd fd85 	bl	8000578 <__aeabi_f2d>
 8002a6e:	a32a      	add	r3, pc, #168	; (adr r3, 8002b18 <_ZN9LineTrace8pidTraceEv+0x108>)
 8002a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a74:	f7fd ff02 	bl	800087c <__aeabi_ddiv>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	460c      	mov	r4, r1
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	4621      	mov	r1, r4
 8002a80:	f7fe f8ca 	bl	8000c18 <__aeabi_d2f>
 8002a84:	4603      	mov	r3, r0
 8002a86:	60fb      	str	r3, [r7, #12]
	i += ki_ * diff * DELTA_T;
 8002a88:	4b25      	ldr	r3, [pc, #148]	; (8002b20 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7fd fd73 	bl	8000578 <__aeabi_f2d>
 8002a92:	4604      	mov	r4, r0
 8002a94:	460d      	mov	r5, r1
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002a9c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002aa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aa4:	ee17 0a90 	vmov	r0, s15
 8002aa8:	f7fd fd66 	bl	8000578 <__aeabi_f2d>
 8002aac:	a31a      	add	r3, pc, #104	; (adr r3, 8002b18 <_ZN9LineTrace8pidTraceEv+0x108>)
 8002aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab2:	f7fd fdb9 	bl	8000628 <__aeabi_dmul>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	460b      	mov	r3, r1
 8002aba:	4620      	mov	r0, r4
 8002abc:	4629      	mov	r1, r5
 8002abe:	f7fd fbfd 	bl	80002bc <__adddf3>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	460c      	mov	r4, r1
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	4621      	mov	r1, r4
 8002aca:	f7fe f8a5 	bl	8000c18 <__aeabi_d2f>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	4b13      	ldr	r3, [pc, #76]	; (8002b20 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002ad2:	601a      	str	r2, [r3, #0]

	float rotation_ratio = p + d + i;
 8002ad4:	ed97 7a04 	vldr	s14, [r7, #16]
 8002ad8:	edd7 7a03 	vldr	s15, [r7, #12]
 8002adc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ae0:	4b0f      	ldr	r3, [pc, #60]	; (8002b20 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002ae2:	edd3 7a00 	vldr	s15, [r3]
 8002ae6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aea:	edc7 7a02 	vstr	s15, [r7, #8]

	//motor_->setRatio(left_ratio, right_ratio);
	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	689a      	ldr	r2, [r3, #8]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002af8:	edd7 0a02 	vldr	s1, [r7, #8]
 8002afc:	eeb0 0a67 	vmov.f32	s0, s15
 8002b00:	4610      	mov	r0, r2
 8002b02:	f002 f935 	bl	8004d70 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002b06:	4a07      	ldr	r2, [pc, #28]	; (8002b24 <_ZN9LineTrace8pidTraceEv+0x114>)
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	6013      	str	r3, [r2, #0]

}
 8002b0c:	bf00      	nop
 8002b0e:	3718      	adds	r7, #24
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bdb0      	pop	{r4, r5, r7, pc}
 8002b14:	f3af 8000 	nop.w
 8002b18:	d2f1a9fc 	.word	0xd2f1a9fc
 8002b1c:	3f50624d 	.word	0x3f50624d
 8002b20:	20000288 	.word	0x20000288
 8002b24:	20000284 	.word	0x20000284

08002b28 <_ZN9LineTrace11loggerStartEv>:
	monitor_target_omega = target_omega;
	monitor_r = r;
}

void LineTrace::loggerStart()
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
	encoder_->clearDistance10mm();
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7fe fcb7 	bl	80014a8 <_ZN7Encoder17clearDistance10mmEv>
	odometry_->clearPotition();
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f001 fc02 	bl	8004348 <_ZN8Odometry13clearPotitionEv>
	logger_->resetLogs2();
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	69db      	ldr	r3, [r3, #28]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f001 f92f 	bl	8003dac <_ZN6Logger10resetLogs2Ev>

	logging_flag_ = true;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
}
 8002b56:	bf00      	nop
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b082      	sub	sp, #8
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f001 f994 	bl	8003e98 <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
}
 8002b78:	bf00      	nop
 8002b7a:	3708      	adds	r7, #8
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
	static uint16_t cnt = 0;
	float sensor_edge_val_l = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2]) / 3;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002b98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8002ba4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ba8:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002bac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bb0:	edc7 7a03 	vstr	s15, [r7, #12]
	float sensor_edge_val_r = (line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]) / 3;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	ed93 7abb 	vldr	s14, [r3, #748]	; 0x2ec
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002bc4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8002bd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bd4:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002bd8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bdc:	edc7 7a02 	vstr	s15, [r7, #8]
	static bool flag = false;
	static bool white_flag = false;
	mon_ave_l = sensor_edge_val_l;
 8002be0:	4a3a      	ldr	r2, [pc, #232]	; (8002ccc <_ZN9LineTrace11isCrossLineEv+0x14c>)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6013      	str	r3, [r2, #0]
	mon_ave_r = sensor_edge_val_r;
 8002be6:	4a3a      	ldr	r2, [pc, #232]	; (8002cd0 <_ZN9LineTrace11isCrossLineEv+0x150>)
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	6013      	str	r3, [r2, #0]

	if(white_flag == false){
 8002bec:	4b39      	ldr	r3, [pc, #228]	; (8002cd4 <_ZN9LineTrace11isCrossLineEv+0x154>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	f083 0301 	eor.w	r3, r3, #1
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d038      	beq.n	8002c6c <_ZN9LineTrace11isCrossLineEv+0xec>
		if(sensor_edge_val_l < 600 && sensor_edge_val_r < 600){
 8002bfa:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bfe:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002cd8 <_ZN9LineTrace11isCrossLineEv+0x158>
 8002c02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c0a:	d50f      	bpl.n	8002c2c <_ZN9LineTrace11isCrossLineEv+0xac>
 8002c0c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c10:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8002cd8 <_ZN9LineTrace11isCrossLineEv+0x158>
 8002c14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c1c:	d506      	bpl.n	8002c2c <_ZN9LineTrace11isCrossLineEv+0xac>
			cnt++;
 8002c1e:	4b2f      	ldr	r3, [pc, #188]	; (8002cdc <_ZN9LineTrace11isCrossLineEv+0x15c>)
 8002c20:	881b      	ldrh	r3, [r3, #0]
 8002c22:	3301      	adds	r3, #1
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	4b2d      	ldr	r3, [pc, #180]	; (8002cdc <_ZN9LineTrace11isCrossLineEv+0x15c>)
 8002c28:	801a      	strh	r2, [r3, #0]
 8002c2a:	e002      	b.n	8002c32 <_ZN9LineTrace11isCrossLineEv+0xb2>
		}
		else{
			cnt = 0;
 8002c2c:	4b2b      	ldr	r3, [pc, #172]	; (8002cdc <_ZN9LineTrace11isCrossLineEv+0x15c>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 3){
 8002c32:	4b2a      	ldr	r3, [pc, #168]	; (8002cdc <_ZN9LineTrace11isCrossLineEv+0x15c>)
 8002c34:	881b      	ldrh	r3, [r3, #0]
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d941      	bls.n	8002cbe <_ZN9LineTrace11isCrossLineEv+0x13e>
			flag = true;
 8002c3a:	4b29      	ldr	r3, [pc, #164]	; (8002ce0 <_ZN9LineTrace11isCrossLineEv+0x160>)
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	701a      	strb	r2, [r3, #0]
			white_flag = true;
 8002c40:	4b24      	ldr	r3, [pc, #144]	; (8002cd4 <_ZN9LineTrace11isCrossLineEv+0x154>)
 8002c42:	2201      	movs	r2, #1
 8002c44:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8002c46:	4b25      	ldr	r3, [pc, #148]	; (8002cdc <_ZN9LineTrace11isCrossLineEv+0x15c>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	801a      	strh	r2, [r3, #0]

			if(mode_selector_ == FIRST_RUNNING){
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002c52:	3310      	adds	r3, #16
 8002c54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d103      	bne.n	8002c64 <_ZN9LineTrace11isCrossLineEv+0xe4>
				storeCrossLineDistance();
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 fe1b 	bl	8003898 <_ZN9LineTrace22storeCrossLineDistanceEv>
 8002c62:	e02c      	b.n	8002cbe <_ZN9LineTrace11isCrossLineEv+0x13e>
			}
			else{
				correctionTotalDistance();
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 fe4e 	bl	8003906 <_ZN9LineTrace23correctionTotalDistanceEv>
 8002c6a:	e028      	b.n	8002cbe <_ZN9LineTrace11isCrossLineEv+0x13e>

			//led_.LR(-1, 1);
		}
	}
	else{
		if(sensor_edge_val_l > 500 && sensor_edge_val_r > 500){
 8002c6c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c70:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002ce4 <_ZN9LineTrace11isCrossLineEv+0x164>
 8002c74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c7c:	dd0f      	ble.n	8002c9e <_ZN9LineTrace11isCrossLineEv+0x11e>
 8002c7e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c82:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002ce4 <_ZN9LineTrace11isCrossLineEv+0x164>
 8002c86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c8e:	dd06      	ble.n	8002c9e <_ZN9LineTrace11isCrossLineEv+0x11e>
			cnt++;
 8002c90:	4b12      	ldr	r3, [pc, #72]	; (8002cdc <_ZN9LineTrace11isCrossLineEv+0x15c>)
 8002c92:	881b      	ldrh	r3, [r3, #0]
 8002c94:	3301      	adds	r3, #1
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	4b10      	ldr	r3, [pc, #64]	; (8002cdc <_ZN9LineTrace11isCrossLineEv+0x15c>)
 8002c9a:	801a      	strh	r2, [r3, #0]
 8002c9c:	e002      	b.n	8002ca4 <_ZN9LineTrace11isCrossLineEv+0x124>
		}
		else{
			cnt = 0;
 8002c9e:	4b0f      	ldr	r3, [pc, #60]	; (8002cdc <_ZN9LineTrace11isCrossLineEv+0x15c>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 10){
 8002ca4:	4b0d      	ldr	r3, [pc, #52]	; (8002cdc <_ZN9LineTrace11isCrossLineEv+0x15c>)
 8002ca6:	881b      	ldrh	r3, [r3, #0]
 8002ca8:	2b09      	cmp	r3, #9
 8002caa:	d908      	bls.n	8002cbe <_ZN9LineTrace11isCrossLineEv+0x13e>
			flag = false;
 8002cac:	4b0c      	ldr	r3, [pc, #48]	; (8002ce0 <_ZN9LineTrace11isCrossLineEv+0x160>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	701a      	strb	r2, [r3, #0]
			white_flag = false;
 8002cb2:	4b08      	ldr	r3, [pc, #32]	; (8002cd4 <_ZN9LineTrace11isCrossLineEv+0x154>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8002cb8:	4b08      	ldr	r3, [pc, #32]	; (8002cdc <_ZN9LineTrace11isCrossLineEv+0x15c>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	801a      	strh	r2, [r3, #0]
			//led_.LR(-1, 0);
		}

	}

	return flag;
 8002cbe:	4b08      	ldr	r3, [pc, #32]	; (8002ce0 <_ZN9LineTrace11isCrossLineEv+0x160>)
 8002cc0:	781b      	ldrb	r3, [r3, #0]
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	20000268 	.word	0x20000268
 8002cd0:	2000026c 	.word	0x2000026c
 8002cd4:	2000028f 	.word	0x2000028f
 8002cd8:	44160000 	.word	0x44160000
 8002cdc:	2000028c 	.word	0x2000028c
 8002ce0:	2000028e 	.word	0x2000028e
 8002ce4:	43fa0000 	.word	0x43fa0000

08002ce8 <_ZN9LineTrace15radius2VelocityEf>:
	if(theta == 0) theta = 0.000001;
	return distance / theta;
}

float LineTrace::radius2Velocity(float radius)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	ed87 0a00 	vstr	s0, [r7]
	float velocity;

	if(mode_selector_ == SECOND_RUNNING){
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002cfa:	3310      	adds	r3, #16
 8002cfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d11b      	bne.n	8002d3c <_ZN9LineTrace15radius2VelocityEf+0x54>
		if(radius < 130) velocity = 1.4;
 8002d04:	edd7 7a00 	vldr	s15, [r7]
 8002d08:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002da0 <_ZN9LineTrace15radius2VelocityEf+0xb8>
 8002d0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d14:	d502      	bpl.n	8002d1c <_ZN9LineTrace15radius2VelocityEf+0x34>
 8002d16:	4b23      	ldr	r3, [pc, #140]	; (8002da4 <_ZN9LineTrace15radius2VelocityEf+0xbc>)
 8002d18:	60fb      	str	r3, [r7, #12]
 8002d1a:	e036      	b.n	8002d8a <_ZN9LineTrace15radius2VelocityEf+0xa2>
		else if(radius < 500) velocity = 1.4;
 8002d1c:	edd7 7a00 	vldr	s15, [r7]
 8002d20:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002da8 <_ZN9LineTrace15radius2VelocityEf+0xc0>
 8002d24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d2c:	d502      	bpl.n	8002d34 <_ZN9LineTrace15radius2VelocityEf+0x4c>
 8002d2e:	4b1d      	ldr	r3, [pc, #116]	; (8002da4 <_ZN9LineTrace15radius2VelocityEf+0xbc>)
 8002d30:	60fb      	str	r3, [r7, #12]
 8002d32:	e02a      	b.n	8002d8a <_ZN9LineTrace15radius2VelocityEf+0xa2>
		else velocity = max_velocity_;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d38:	60fb      	str	r3, [r7, #12]
 8002d3a:	e026      	b.n	8002d8a <_ZN9LineTrace15radius2VelocityEf+0xa2>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002d42:	3310      	adds	r3, #16
 8002d44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d11c      	bne.n	8002d86 <_ZN9LineTrace15radius2VelocityEf+0x9e>
		if(radius < 130) velocity = 1.3;
 8002d4c:	edd7 7a00 	vldr	s15, [r7]
 8002d50:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002da0 <_ZN9LineTrace15radius2VelocityEf+0xb8>
 8002d54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d5c:	d502      	bpl.n	8002d64 <_ZN9LineTrace15radius2VelocityEf+0x7c>
 8002d5e:	4b13      	ldr	r3, [pc, #76]	; (8002dac <_ZN9LineTrace15radius2VelocityEf+0xc4>)
 8002d60:	60fb      	str	r3, [r7, #12]
 8002d62:	e012      	b.n	8002d8a <_ZN9LineTrace15radius2VelocityEf+0xa2>
		else if(radius < 500) velocity = 1.3;
 8002d64:	edd7 7a00 	vldr	s15, [r7]
 8002d68:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002da8 <_ZN9LineTrace15radius2VelocityEf+0xc0>
 8002d6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d74:	d502      	bpl.n	8002d7c <_ZN9LineTrace15radius2VelocityEf+0x94>
 8002d76:	4b0d      	ldr	r3, [pc, #52]	; (8002dac <_ZN9LineTrace15radius2VelocityEf+0xc4>)
 8002d78:	60fb      	str	r3, [r7, #12]
 8002d7a:	e006      	b.n	8002d8a <_ZN9LineTrace15radius2VelocityEf+0xa2>
		else velocity = max_velocity2_;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d82:	60fb      	str	r3, [r7, #12]
 8002d84:	e001      	b.n	8002d8a <_ZN9LineTrace15radius2VelocityEf+0xa2>
	}
	else velocity = 1.3;
 8002d86:	4b09      	ldr	r3, [pc, #36]	; (8002dac <_ZN9LineTrace15radius2VelocityEf+0xc4>)
 8002d88:	60fb      	str	r3, [r7, #12]

	return velocity;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	ee07 3a90 	vmov	s15, r3
}
 8002d90:	eeb0 0a67 	vmov.f32	s0, s15
 8002d94:	3714      	adds	r7, #20
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	43020000 	.word	0x43020000
 8002da4:	3fb33333 	.word	0x3fb33333
 8002da8:	43fa0000 	.word	0x43fa0000
 8002dac:	3fa66666 	.word	0x3fa66666

08002db0 <_ZN9LineTrace20createVelocityTabeleEv>:

void LineTrace::createVelocityTabele()
{
 8002db0:	b590      	push	{r4, r7, lr}
 8002db2:	b08b      	sub	sp, #44	; 0x2c
 8002db4:	af02      	add	r7, sp, #8
 8002db6:	6078      	str	r0, [r7, #4]
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	69db      	ldr	r3, [r3, #28]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f000 ff50 	bl	8003c62 <_ZN6Logger23getDistanceArrayPointerEv>
 8002dc2:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	69db      	ldr	r3, [r3, #28]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f000 ff56 	bl	8003c7a <_ZN6Logger20getThetaArrayPointerEv>
 8002dce:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	837b      	strh	r3, [r7, #26]
 8002dd4:	8b7b      	ldrh	r3, [r7, #26]
 8002dd6:	f241 726f 	movw	r2, #5999	; 0x176f
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d84b      	bhi.n	8002e76 <_ZN9LineTrace20createVelocityTabeleEv+0xc6>
		temp_distance = p_distance[i];
 8002dde:	8b7b      	ldrh	r3, [r7, #26]
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	4413      	add	r3, r2
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8002dea:	8b7b      	ldrh	r3, [r7, #26]
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	4413      	add	r3, r2
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8002df6:	edd7 7a07 	vldr	s15, [r7, #28]
 8002dfa:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e02:	d101      	bne.n	8002e08 <_ZN9LineTrace20createVelocityTabeleEv+0x58>
 8002e04:	4b24      	ldr	r3, [pc, #144]	; (8002e98 <_ZN9LineTrace20createVelocityTabeleEv+0xe8>)
 8002e06:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 8002e08:	ed97 7a02 	vldr	s14, [r7, #8]
 8002e0c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e10:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002e14:	eeb0 0a66 	vmov.f32	s0, s13
 8002e18:	f7ff fc82 	bl	8002720 <_ZSt3absf>
 8002e1c:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 8002e20:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e24:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002e9c <_ZN9LineTrace20createVelocityTabeleEv+0xec>
 8002e28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e30:	db01      	blt.n	8002e36 <_ZN9LineTrace20createVelocityTabeleEv+0x86>
 8002e32:	4b1b      	ldr	r3, [pc, #108]	; (8002ea0 <_ZN9LineTrace20createVelocityTabeleEv+0xf0>)
 8002e34:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 8002e36:	8b7c      	ldrh	r4, [r7, #26]
 8002e38:	ed97 0a05 	vldr	s0, [r7, #20]
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f7ff ff53 	bl	8002ce8 <_ZN9LineTrace15radius2VelocityEf>
 8002e42:	eef0 7a40 	vmov.f32	s15, s0
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 8002e4c:	3312      	adds	r3, #18
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	4413      	add	r3, r2
 8002e52:	3304      	adds	r3, #4
 8002e54:	edc3 7a00 	vstr	s15, [r3]
		//velocity_table_[i] = radius;

		ref_delta_distances_[i] = p_distance[i]; //copy
 8002e58:	8b7b      	ldrh	r3, [r7, #26]
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	441a      	add	r2, r3
 8002e60:	8b7b      	ldrh	r3, [r7, #26]
 8002e62:	6812      	ldr	r2, [r2, #0]
 8002e64:	6879      	ldr	r1, [r7, #4]
 8002e66:	3322      	adds	r3, #34	; 0x22
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	440b      	add	r3, r1
 8002e6c:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002e6e:	8b7b      	ldrh	r3, [r7, #26]
 8002e70:	3301      	adds	r3, #1
 8002e72:	837b      	strh	r3, [r7, #26]
 8002e74:	e7ae      	b.n	8002dd4 <_ZN9LineTrace20createVelocityTabeleEv+0x24>
	}

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8002e7c:	334c      	adds	r3, #76	; 0x4c
 8002e7e:	2200      	movs	r2, #0
 8002e80:	9200      	str	r2, [sp, #0]
 8002e82:	f241 7270 	movw	r2, #6000	; 0x1770
 8002e86:	4907      	ldr	r1, [pc, #28]	; (8002ea4 <_ZN9LineTrace20createVelocityTabeleEv+0xf4>)
 8002e88:	4807      	ldr	r0, [pc, #28]	; (8002ea8 <_ZN9LineTrace20createVelocityTabeleEv+0xf8>)
 8002e8a:	f7fe fbbb 	bl	8001604 <sd_write_array_float>

}
 8002e8e:	bf00      	nop
 8002e90:	3724      	adds	r7, #36	; 0x24
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd90      	pop	{r4, r7, pc}
 8002e96:	bf00      	nop
 8002e98:	3727c5ac 	.word	0x3727c5ac
 8002e9c:	459c4000 	.word	0x459c4000
 8002ea0:	459c4000 	.word	0x459c4000
 8002ea4:	08017eac 	.word	0x08017eac
 8002ea8:	08017ebc 	.word	0x08017ebc

08002eac <_ZN9LineTrace26createVelocityTabeleFromSDEv>:
void LineTrace::createVelocityTabeleFromSD()
{
 8002eac:	b590      	push	{r4, r7, lr}
 8002eae:	b08b      	sub	sp, #44	; 0x2c
 8002eb0:	af02      	add	r7, sp, #8
 8002eb2:	6078      	str	r0, [r7, #4]
	logger_->importDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	69d8      	ldr	r0, [r3, #28]
 8002eb8:	4b39      	ldr	r3, [pc, #228]	; (8002fa0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xf4>)
 8002eba:	4a3a      	ldr	r2, [pc, #232]	; (8002fa4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xf8>)
 8002ebc:	493a      	ldr	r1, [pc, #232]	; (8002fa8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xfc>)
 8002ebe:	f000 ff58 	bl	8003d72 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	69db      	ldr	r3, [r3, #28]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 fecb 	bl	8003c62 <_ZN6Logger23getDistanceArrayPointerEv>
 8002ecc:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f000 fed1 	bl	8003c7a <_ZN6Logger20getThetaArrayPointerEv>
 8002ed8:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002eda:	2300      	movs	r3, #0
 8002edc:	837b      	strh	r3, [r7, #26]
 8002ede:	8b7b      	ldrh	r3, [r7, #26]
 8002ee0:	f241 726f 	movw	r2, #5999	; 0x176f
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d84b      	bhi.n	8002f80 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xd4>
		temp_distance = p_distance[i];
 8002ee8:	8b7b      	ldrh	r3, [r7, #26]
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	4413      	add	r3, r2
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8002ef4:	8b7b      	ldrh	r3, [r7, #26]
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	4413      	add	r3, r2
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8002f00:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f04:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f0c:	d101      	bne.n	8002f12 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x66>
 8002f0e:	4b27      	ldr	r3, [pc, #156]	; (8002fac <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x100>)
 8002f10:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 8002f12:	ed97 7a02 	vldr	s14, [r7, #8]
 8002f16:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f1a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002f1e:	eeb0 0a66 	vmov.f32	s0, s13
 8002f22:	f7ff fbfd 	bl	8002720 <_ZSt3absf>
 8002f26:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 8002f2a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f2e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002fb0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x104>
 8002f32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f3a:	db01      	blt.n	8002f40 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x94>
 8002f3c:	4b1d      	ldr	r3, [pc, #116]	; (8002fb4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x108>)
 8002f3e:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 8002f40:	8b7c      	ldrh	r4, [r7, #26]
 8002f42:	ed97 0a05 	vldr	s0, [r7, #20]
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f7ff fece 	bl	8002ce8 <_ZN9LineTrace15radius2VelocityEf>
 8002f4c:	eef0 7a40 	vmov.f32	s15, s0
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 8002f56:	3312      	adds	r3, #18
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	4413      	add	r3, r2
 8002f5c:	3304      	adds	r3, #4
 8002f5e:	edc3 7a00 	vstr	s15, [r3]
		//velocity_table_[i] = radius;

		ref_delta_distances_[i] = p_distance[i]; //copy
 8002f62:	8b7b      	ldrh	r3, [r7, #26]
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	441a      	add	r2, r3
 8002f6a:	8b7b      	ldrh	r3, [r7, #26]
 8002f6c:	6812      	ldr	r2, [r2, #0]
 8002f6e:	6879      	ldr	r1, [r7, #4]
 8002f70:	3322      	adds	r3, #34	; 0x22
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002f78:	8b7b      	ldrh	r3, [r7, #26]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	837b      	strh	r3, [r7, #26]
 8002f7e:	e7ae      	b.n	8002ede <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x32>
	}

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8002f86:	334c      	adds	r3, #76	; 0x4c
 8002f88:	2200      	movs	r2, #0
 8002f8a:	9200      	str	r2, [sp, #0]
 8002f8c:	f241 7270 	movw	r2, #6000	; 0x1770
 8002f90:	4909      	ldr	r1, [pc, #36]	; (8002fb8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x10c>)
 8002f92:	4805      	ldr	r0, [pc, #20]	; (8002fa8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xfc>)
 8002f94:	f7fe fb36 	bl	8001604 <sd_write_array_float>

}
 8002f98:	bf00      	nop
 8002f9a:	3724      	adds	r7, #36	; 0x24
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd90      	pop	{r4, r7, pc}
 8002fa0:	08017ec8 	.word	0x08017ec8
 8002fa4:	08017ed4 	.word	0x08017ed4
 8002fa8:	08017ebc 	.word	0x08017ebc
 8002fac:	3727c5ac 	.word	0x3727c5ac
 8002fb0:	459c4000 	.word	0x459c4000
 8002fb4:	459c4000 	.word	0x459c4000
 8002fb8:	08017eac 	.word	0x08017eac

08002fbc <_ZN9LineTrace20updateTargetVelocityEv>:

void LineTrace::updateTargetVelocity()
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
	if(velocity_play_flag_ == true){
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002fca:	330c      	adds	r3, #12
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f000 8087 	beq.w	80030e2 <_ZN9LineTrace20updateTargetVelocityEv+0x126>
		//if(encoder_->getTotalDistance() >= ref_distance_){
			while(encoder_->getTotalDistance() >= ref_distance_){
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7fe fa47 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 8002fde:	eeb0 7a40 	vmov.f32	s14, s0
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8002fe8:	3348      	adds	r3, #72	; 0x48
 8002fea:	edd3 7a00 	vldr	s15, [r3]
 8002fee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ff6:	bfac      	ite	ge
 8002ff8:	2301      	movge	r3, #1
 8002ffa:	2300      	movlt	r3, #0
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d025      	beq.n	800304e <_ZN9LineTrace20updateTargetVelocityEv+0x92>
				ref_distance_ += ref_delta_distances_[velocity_table_idx_];
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8003008:	3348      	adds	r3, #72	; 0x48
 800300a:	ed93 7a00 	vldr	s14, [r3]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003014:	330e      	adds	r3, #14
 8003016:	881b      	ldrh	r3, [r3, #0]
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	3322      	adds	r3, #34	; 0x22
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	4413      	add	r3, r2
 8003020:	edd3 7a00 	vldr	s15, [r3]
 8003024:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 800302e:	3348      	adds	r3, #72	; 0x48
 8003030:	edc3 7a00 	vstr	s15, [r3]
				velocity_table_idx_++;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800303a:	330e      	adds	r3, #14
 800303c:	881b      	ldrh	r3, [r3, #0]
 800303e:	3301      	adds	r3, #1
 8003040:	b29a      	uxth	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003048:	330e      	adds	r3, #14
 800304a:	801a      	strh	r2, [r3, #0]
			while(encoder_->getTotalDistance() >= ref_distance_){
 800304c:	e7c2      	b.n	8002fd4 <_ZN9LineTrace20updateTargetVelocityEv+0x18>
			}
		//}

		if(velocity_table_idx_ >= LOG_DATA_SIZE_DIS) velocity_table_idx_ = LOG_DATA_SIZE_DIS - 1;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003054:	330e      	adds	r3, #14
 8003056:	881b      	ldrh	r3, [r3, #0]
 8003058:	f241 726f 	movw	r2, #5999	; 0x176f
 800305c:	4293      	cmp	r3, r2
 800305e:	d906      	bls.n	800306e <_ZN9LineTrace20updateTargetVelocityEv+0xb2>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003066:	330e      	adds	r3, #14
 8003068:	f241 726f 	movw	r2, #5999	; 0x176f
 800306c:	801a      	strh	r2, [r3, #0]

		mon_ref_dis = ref_distance_;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8003074:	3348      	adds	r3, #72	; 0x48
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a1c      	ldr	r2, [pc, #112]	; (80030ec <_ZN9LineTrace20updateTargetVelocityEv+0x130>)
 800307a:	6013      	str	r3, [r2, #0]
		mon_current_dis = encoder_->getTotalDistance();
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	695b      	ldr	r3, [r3, #20]
 8003080:	4618      	mov	r0, r3
 8003082:	f7fe f9f3 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 8003086:	eef0 7a40 	vmov.f32	s15, s0
 800308a:	4b19      	ldr	r3, [pc, #100]	; (80030f0 <_ZN9LineTrace20updateTargetVelocityEv+0x134>)
 800308c:	edc3 7a00 	vstr	s15, [r3]
		mon_vel_idx = velocity_table_idx_;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003096:	330e      	adds	r3, #14
 8003098:	881a      	ldrh	r2, [r3, #0]
 800309a:	4b16      	ldr	r3, [pc, #88]	; (80030f4 <_ZN9LineTrace20updateTargetVelocityEv+0x138>)
 800309c:	801a      	strh	r2, [r3, #0]

		setTargetVelocity(velocity_table_[velocity_table_idx_]);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80030a4:	330e      	adds	r3, #14
 80030a6:	881b      	ldrh	r3, [r3, #0]
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 80030ae:	3312      	adds	r3, #18
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4413      	add	r3, r2
 80030b4:	3304      	adds	r3, #4
 80030b6:	edd3 7a00 	vldr	s15, [r3]
 80030ba:	eeb0 0a67 	vmov.f32	s0, s15
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f937 	bl	8003332 <_ZN9LineTrace17setTargetVelocityEf>

		mon_tar_vel = velocity_table_[velocity_table_idx_];
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80030ca:	330e      	adds	r3, #14
 80030cc:	881b      	ldrh	r3, [r3, #0]
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 80030d4:	3312      	adds	r3, #18
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	4413      	add	r3, r2
 80030da:	3304      	adds	r3, #4
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a06      	ldr	r2, [pc, #24]	; (80030f8 <_ZN9LineTrace20updateTargetVelocityEv+0x13c>)
 80030e0:	6013      	str	r3, [r2, #0]

	}
}
 80030e2:	bf00      	nop
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	20000270 	.word	0x20000270
 80030f0:	20000274 	.word	0x20000274
 80030f4:	20000278 	.word	0x20000278
 80030f8:	2000027c 	.word	0x2000027c

080030fc <_ZN9LineTrace8isStableEv>:

bool LineTrace::isStable()
{
 80030fc:	b590      	push	{r4, r7, lr}
 80030fe:	b087      	sub	sp, #28
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8003104:	2300      	movs	r3, #0
 8003106:	75fb      	strb	r3, [r7, #23]
	static uint16_t cnt = 0;
	float temp_distance = encoder_->getDistance10mm();
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	695b      	ldr	r3, [r3, #20]
 800310c:	4618      	mov	r0, r3
 800310e:	f7fe f99e 	bl	800144e <_ZN7Encoder15getDistance10mmEv>
 8003112:	ed87 0a02 	vstr	s0, [r7, #8]
	float temp_theta = odometry_->getTheta();;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	4618      	mov	r0, r3
 800311c:	f001 f903 	bl	8004326 <_ZN8Odometry8getThetaEv>
 8003120:	ec54 3b10 	vmov	r3, r4, d0
 8003124:	4618      	mov	r0, r3
 8003126:	4621      	mov	r1, r4
 8003128:	f7fd fd76 	bl	8000c18 <__aeabi_d2f>
 800312c:	4603      	mov	r3, r0
 800312e:	613b      	str	r3, [r7, #16]

	if(temp_theta == 0) temp_theta = 0.00001;
 8003130:	edd7 7a04 	vldr	s15, [r7, #16]
 8003134:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800313c:	d101      	bne.n	8003142 <_ZN9LineTrace8isStableEv+0x46>
 800313e:	4b1b      	ldr	r3, [pc, #108]	; (80031ac <_ZN9LineTrace8isStableEv+0xb0>)
 8003140:	613b      	str	r3, [r7, #16]
	float radius = abs(temp_distance / temp_theta);
 8003142:	ed97 7a02 	vldr	s14, [r7, #8]
 8003146:	edd7 7a04 	vldr	s15, [r7, #16]
 800314a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800314e:	eeb0 0a66 	vmov.f32	s0, s13
 8003152:	f7ff fae5 	bl	8002720 <_ZSt3absf>
 8003156:	ed87 0a03 	vstr	s0, [r7, #12]
	if(radius >= 5000) radius = 5000;
 800315a:	edd7 7a03 	vldr	s15, [r7, #12]
 800315e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80031b0 <_ZN9LineTrace8isStableEv+0xb4>
 8003162:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800316a:	db01      	blt.n	8003170 <_ZN9LineTrace8isStableEv+0x74>
 800316c:	4b11      	ldr	r3, [pc, #68]	; (80031b4 <_ZN9LineTrace8isStableEv+0xb8>)
 800316e:	60fb      	str	r3, [r7, #12]

	if(radius >= 200){
 8003170:	edd7 7a03 	vldr	s15, [r7, #12]
 8003174:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80031b8 <_ZN9LineTrace8isStableEv+0xbc>
 8003178:	eef4 7ac7 	vcmpe.f32	s15, s14
 800317c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003180:	db06      	blt.n	8003190 <_ZN9LineTrace8isStableEv+0x94>
		cnt++;
 8003182:	4b0e      	ldr	r3, [pc, #56]	; (80031bc <_ZN9LineTrace8isStableEv+0xc0>)
 8003184:	881b      	ldrh	r3, [r3, #0]
 8003186:	3301      	adds	r3, #1
 8003188:	b29a      	uxth	r2, r3
 800318a:	4b0c      	ldr	r3, [pc, #48]	; (80031bc <_ZN9LineTrace8isStableEv+0xc0>)
 800318c:	801a      	strh	r2, [r3, #0]
 800318e:	e002      	b.n	8003196 <_ZN9LineTrace8isStableEv+0x9a>
	}
	else{
		cnt = 0;
 8003190:	4b0a      	ldr	r3, [pc, #40]	; (80031bc <_ZN9LineTrace8isStableEv+0xc0>)
 8003192:	2200      	movs	r2, #0
 8003194:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 10){ //100mm
 8003196:	4b09      	ldr	r3, [pc, #36]	; (80031bc <_ZN9LineTrace8isStableEv+0xc0>)
 8003198:	881b      	ldrh	r3, [r3, #0]
 800319a:	2b09      	cmp	r3, #9
 800319c:	d901      	bls.n	80031a2 <_ZN9LineTrace8isStableEv+0xa6>
		ret = true;
 800319e:	2301      	movs	r3, #1
 80031a0:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 80031a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	371c      	adds	r7, #28
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd90      	pop	{r4, r7, pc}
 80031ac:	3727c5ac 	.word	0x3727c5ac
 80031b0:	459c4000 	.word	0x459c4000
 80031b4:	459c4000 	.word	0x459c4000
 80031b8:	43480000 	.word	0x43480000
 80031bc:	20000290 	.word	0x20000290

080031c0 <_ZN9LineTrace4initEv>:

// -------public---------- //
void LineTrace::init()
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b088      	sub	sp, #32
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 80031c8:	f107 031c 	add.w	r3, r7, #28
 80031cc:	2201      	movs	r2, #1
 80031ce:	4927      	ldr	r1, [pc, #156]	; (800326c <_ZN9LineTrace4initEv+0xac>)
 80031d0:	4827      	ldr	r0, [pc, #156]	; (8003270 <_ZN9LineTrace4initEv+0xb0>)
 80031d2:	f7fe fa7d 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 80031d6:	f107 0318 	add.w	r3, r7, #24
 80031da:	2201      	movs	r2, #1
 80031dc:	4925      	ldr	r1, [pc, #148]	; (8003274 <_ZN9LineTrace4initEv+0xb4>)
 80031de:	4824      	ldr	r0, [pc, #144]	; (8003270 <_ZN9LineTrace4initEv+0xb0>)
 80031e0:	f7fe fa76 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 80031e4:	f107 0314 	add.w	r3, r7, #20
 80031e8:	2201      	movs	r2, #1
 80031ea:	4923      	ldr	r1, [pc, #140]	; (8003278 <_ZN9LineTrace4initEv+0xb8>)
 80031ec:	4820      	ldr	r0, [pc, #128]	; (8003270 <_ZN9LineTrace4initEv+0xb0>)
 80031ee:	f7fe fa6f 	bl	80016d0 <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 80031f2:	edd7 7a07 	vldr	s15, [r7, #28]
 80031f6:	ed97 7a06 	vldr	s14, [r7, #24]
 80031fa:	edd7 6a05 	vldr	s13, [r7, #20]
 80031fe:	eeb0 1a66 	vmov.f32	s2, s13
 8003202:	eef0 0a47 	vmov.f32	s1, s14
 8003206:	eeb0 0a67 	vmov.f32	s0, s15
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 f83c 	bl	8003288 <_ZN9LineTrace7setGainEfff>

	float temp_velocity, temp_max_velocity, temp_max_velocity2;
	sd_read_array_float("PARAMS", "TARVEL1.TXT", 1, &temp_velocity);
 8003210:	f107 0310 	add.w	r3, r7, #16
 8003214:	2201      	movs	r2, #1
 8003216:	4919      	ldr	r1, [pc, #100]	; (800327c <_ZN9LineTrace4initEv+0xbc>)
 8003218:	4815      	ldr	r0, [pc, #84]	; (8003270 <_ZN9LineTrace4initEv+0xb0>)
 800321a:	f7fe fa59 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL2.TXT", 1, &temp_max_velocity);
 800321e:	f107 030c 	add.w	r3, r7, #12
 8003222:	2201      	movs	r2, #1
 8003224:	4916      	ldr	r1, [pc, #88]	; (8003280 <_ZN9LineTrace4initEv+0xc0>)
 8003226:	4812      	ldr	r0, [pc, #72]	; (8003270 <_ZN9LineTrace4initEv+0xb0>)
 8003228:	f7fe fa52 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL3.TXT", 1, &temp_max_velocity2);
 800322c:	f107 0308 	add.w	r3, r7, #8
 8003230:	2201      	movs	r2, #1
 8003232:	4914      	ldr	r1, [pc, #80]	; (8003284 <_ZN9LineTrace4initEv+0xc4>)
 8003234:	480e      	ldr	r0, [pc, #56]	; (8003270 <_ZN9LineTrace4initEv+0xb0>)
 8003236:	f7fe fa4b 	bl	80016d0 <sd_read_array_float>
	setTargetVelocity(temp_velocity);
 800323a:	edd7 7a04 	vldr	s15, [r7, #16]
 800323e:	eeb0 0a67 	vmov.f32	s0, s15
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 f875 	bl	8003332 <_ZN9LineTrace17setTargetVelocityEf>
	setMaxVelocity(temp_max_velocity);
 8003248:	edd7 7a03 	vldr	s15, [r7, #12]
 800324c:	eeb0 0a67 	vmov.f32	s0, s15
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 f87d 	bl	8003350 <_ZN9LineTrace14setMaxVelocityEf>
	setMaxVelocity2(temp_max_velocity2);
 8003256:	edd7 7a02 	vldr	s15, [r7, #8]
 800325a:	eeb0 0a67 	vmov.f32	s0, s15
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 f885 	bl	800336e <_ZN9LineTrace15setMaxVelocity2Ef>
}
 8003264:	bf00      	nop
 8003266:	3720      	adds	r7, #32
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	08017ee4 	.word	0x08017ee4
 8003270:	08017eec 	.word	0x08017eec
 8003274:	08017ef4 	.word	0x08017ef4
 8003278:	08017efc 	.word	0x08017efc
 800327c:	08017f04 	.word	0x08017f04
 8003280:	08017f10 	.word	0x08017f10
 8003284:	08017f1c 	.word	0x08017f1c

08003288 <_ZN9LineTrace7setGainEfff>:

void LineTrace::setGain(float kp, float ki, float kd)
{
 8003288:	b480      	push	{r7}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	ed87 0a02 	vstr	s0, [r7, #8]
 8003294:	edc7 0a01 	vstr	s1, [r7, #4]
 8003298:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	68ba      	ldr	r2, [r7, #8]
 80032a0:	625a      	str	r2, [r3, #36]	; 0x24
	ki_ = ki;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	62da      	str	r2, [r3, #44]	; 0x2c
	kd_ = kd;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	629a      	str	r2, [r3, #40]	; 0x28
}
 80032ae:	bf00      	nop
 80032b0:	3714      	adds	r7, #20
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr

080032ba <_ZN9LineTrace5getKpEv>:
	ki_velo_ = ki;
	kd_velo_ = kd;
}

float LineTrace::getKp()
{
 80032ba:	b480      	push	{r7}
 80032bc:	b083      	sub	sp, #12
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
	return kp_;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c6:	ee07 3a90 	vmov	s15, r3
}
 80032ca:	eeb0 0a67 	vmov.f32	s0, s15
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
	return ki_;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e4:	ee07 3a90 	vmov	s15, r3
}
 80032e8:	eeb0 0a67 	vmov.f32	s0, s15
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr

080032f6 <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 80032f6:	b480      	push	{r7}
 80032f8:	b083      	sub	sp, #12
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
	return kd_;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003302:	ee07 3a90 	vmov	s15, r3
}
 8003306:	eeb0 0a67 	vmov.f32	s0, s15
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <_ZN9LineTrace14setNormalRatioEf>:
{
	return kd_velo_;
}

void LineTrace::setNormalRatio(float ratio)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003326:	bf00      	nop
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr

08003332 <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8003332:	b480      	push	{r7}
 8003334:	b083      	sub	sp, #12
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
 800333a:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	679a      	str	r2, [r3, #120]	; 0x78
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <_ZN9LineTrace14setMaxVelocityEf>:

void LineTrace::setMaxVelocity(float velocity)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	ed87 0a00 	vstr	s0, [r7]
	max_velocity_ = velocity;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8003362:	bf00      	nop
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr

0800336e <_ZN9LineTrace15setMaxVelocity2Ef>:

void LineTrace::setMaxVelocity2(float velocity)
{
 800336e:	b480      	push	{r7}
 8003370:	b083      	sub	sp, #12
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
 8003376:	ed87 0a00 	vstr	s0, [r7]
	max_velocity2_ = velocity;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8003382:	bf00      	nop
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr

0800338e <_ZN9LineTrace17getTargetVelocityEv>:

float LineTrace::getTargetVelocity()
{
 800338e:	b480      	push	{r7}
 8003390:	b083      	sub	sp, #12
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
	return target_velocity_;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800339a:	ee07 3a90 	vmov	s15, r3
}
 800339e:	eeb0 0a67 	vmov.f32	s0, s15
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <_ZN9LineTrace14getMaxVelocityEv>:

float LineTrace::getMaxVelocity()
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
	return max_velocity_;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033b8:	ee07 3a90 	vmov	s15, r3
}
 80033bc:	eeb0 0a67 	vmov.f32	s0, s15
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr

080033ca <_ZN9LineTrace15getMaxVelocity2Ev>:

float LineTrace::getMaxVelocity2()
{
 80033ca:	b480      	push	{r7}
 80033cc:	b083      	sub	sp, #12
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
	return max_velocity2_;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033d8:	ee07 3a90 	vmov	s15, r3
}
 80033dc:	eeb0 0a67 	vmov.f32	s0, s15
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
	...

080033ec <_ZN9LineTrace4flipEv>:

void LineTrace::flip()
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f000 8083 	beq.w	8003506 <_ZN9LineTrace4flipEv+0x11a>
		// ---- line following processing -----//
		pidTrace();
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f7ff fb05 	bl	8002a10 <_ZN9LineTrace8pidTraceEv>
		//pidAngularVelocityTrace();
		//steeringAngleTrace();


		if(isTargetDistance(10) == true){
 8003406:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 fa22 	bl	8003854 <_ZN9LineTrace16isTargetDistanceEf>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d023      	beq.n	800345e <_ZN9LineTrace4flipEv+0x72>
			// ---- Store Logs ------//
			storeLogs();
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 f980 	bl	800371c <_ZN9LineTrace9storeLogsEv>

			// -------- Detect Robot stabilization ------//
			if(isStable() == true){
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f7ff fe6d 	bl	80030fc <_ZN9LineTrace8isStableEv>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d008      	beq.n	800343a <_ZN9LineTrace4flipEv+0x4e>
				led_.LR(-1, 1);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	330c      	adds	r3, #12
 800342c:	2201      	movs	r2, #1
 800342e:	f04f 31ff 	mov.w	r1, #4294967295
 8003432:	4618      	mov	r0, r3
 8003434:	f7fe fe1e 	bl	8002074 <_ZN3LED2LREaa>
 8003438:	e007      	b.n	800344a <_ZN9LineTrace4flipEv+0x5e>
			}
			else{
				led_.LR(-1, 0);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	330c      	adds	r3, #12
 800343e:	2200      	movs	r2, #0
 8003440:	f04f 31ff 	mov.w	r1, #4294967295
 8003444:	4618      	mov	r0, r3
 8003446:	f7fe fe15 	bl	8002074 <_ZN3LED2LREaa>
			}

			// ---reset total cnt ---//
			encoder_->clearDistance10mm();
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	4618      	mov	r0, r3
 8003450:	f7fe f82a 	bl	80014a8 <_ZN7Encoder17clearDistance10mmEv>
			odometry_->clearPotition();
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	4618      	mov	r0, r3
 800345a:	f000 ff75 	bl	8004348 <_ZN8Odometry13clearPotitionEv>
		}

		// ---- Target Velocity Updata ------//
		updateTargetVelocity();
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f7ff fdac 	bl	8002fbc <_ZN9LineTrace20updateTargetVelocityEv>

		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f7ff fb8b 	bl	8002b80 <_ZN9LineTrace11isCrossLineEv>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d011      	beq.n	8003494 <_ZN9LineTrace4flipEv+0xa8>
			led_.LR(1, -1);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	330c      	adds	r3, #12
 8003474:	f04f 32ff 	mov.w	r2, #4294967295
 8003478:	2101      	movs	r1, #1
 800347a:	4618      	mov	r0, r3
 800347c:	f7fe fdfa 	bl	8002074 <_ZN3LED2LREaa>
			side_sensor_->enableIgnore();
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	4618      	mov	r0, r3
 8003486:	f001 fa09 	bl	800489c <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearCrossLineIgnoreDistance();
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	4618      	mov	r0, r3
 8003490:	f7fe f835 	bl	80014fe <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
		}

		if(side_sensor_->getIgnoreFlag() == true && encoder_->getCrossLineIgnoreDistance() >= 200){
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	4618      	mov	r0, r3
 800349a:	f001 fa19 	bl	80048d0 <_ZN10SideSensor13getIgnoreFlagEv>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00f      	beq.n	80034c4 <_ZN9LineTrace4flipEv+0xd8>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	695b      	ldr	r3, [r3, #20]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7fe f819 	bl	80014e0 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 80034ae:	eeb0 7a40 	vmov.f32	s14, s0
 80034b2:	eddf 7a17 	vldr	s15, [pc, #92]	; 8003510 <_ZN9LineTrace4flipEv+0x124>
 80034b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034be:	db01      	blt.n	80034c4 <_ZN9LineTrace4flipEv+0xd8>
 80034c0:	2301      	movs	r3, #1
 80034c2:	e000      	b.n	80034c6 <_ZN9LineTrace4flipEv+0xda>
 80034c4:	2300      	movs	r3, #0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00c      	beq.n	80034e4 <_ZN9LineTrace4flipEv+0xf8>
			side_sensor_->disableIgnore();
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f001 f9f1 	bl	80048b6 <_ZN10SideSensor13disableIgnoreEv>
			}
			else{
				correctionTotalDistance();
			}
			*/
			led_.LR(0, -1);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	330c      	adds	r3, #12
 80034d8:	f04f 32ff 	mov.w	r2, #4294967295
 80034dc:	2100      	movs	r1, #0
 80034de:	4618      	mov	r0, r3
 80034e0:	f7fe fdc8 	bl	8002074 <_ZN3LED2LREaa>
		}

		// ----- emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff f8c3 	bl	8002674 <_ZN10LineSensor13emergencyStopEv>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d008      	beq.n	8003506 <_ZN9LineTrace4flipEv+0x11a>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	eddf 0a06 	vldr	s1, [pc, #24]	; 8003514 <_ZN9LineTrace4flipEv+0x128>
 80034fc:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8003514 <_ZN9LineTrace4flipEv+0x128>
 8003500:	4618      	mov	r0, r3
 8003502:	f001 fc35 	bl	8004d70 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
		}
		else{
			//led_.LR(0, -1);
		}
	}
}
 8003506:	bf00      	nop
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	43480000 	.word	0x43480000
 8003514:	00000000 	.word	0x00000000

08003518 <_ZN9LineTrace5startEv>:
		odometry_->clearPotition();
	}
}

void LineTrace::start()
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	i_reset_flag_ = true;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	velocity_ctrl_->start();
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	4618      	mov	r0, r3
 8003536:	f001 fc74 	bl	8004e22 <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	4618      	mov	r0, r3
 8003540:	f001 f99c 	bl	800487c <_ZN10SideSensor17resetWhiteLineCntEv>
	crossline_idx_ = 0;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800354a:	3344      	adds	r3, #68	; 0x44
 800354c:	2200      	movs	r2, #0
 800354e:	801a      	strh	r2, [r3, #0]
	sideline_idx_ = 0;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003556:	3346      	adds	r3, #70	; 0x46
 8003558:	2200      	movs	r2, #0
 800355a:	801a      	strh	r2, [r3, #0]
}
 800355c:	bf00      	nop
 800355e:	3708      	adds	r7, #8
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af02      	add	r7, sp, #8
 800356a:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	velocity_ctrl_->stop();
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	4618      	mov	r0, r3
 800357a:	f001 fc65 	bl	8004e48 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	330c      	adds	r3, #12
 8003582:	2201      	movs	r2, #1
 8003584:	f04f 31ff 	mov.w	r1, #4294967295
 8003588:	4618      	mov	r0, r3
 800358a:	f7fe fd73 	bl	8002074 <_ZN3LED2LREaa>
	if(mode_selector_ == FIRST_RUNNING){ //First running
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003594:	3310      	adds	r3, #16
 8003596:	f9b3 3000 	ldrsh.w	r3, [r3]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d107      	bne.n	80035ae <_ZN9LineTrace4stopEv+0x4a>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	69d8      	ldr	r0, [r3, #28]
 80035a2:	4b1d      	ldr	r3, [pc, #116]	; (8003618 <_ZN9LineTrace4stopEv+0xb4>)
 80035a4:	4a1d      	ldr	r2, [pc, #116]	; (800361c <_ZN9LineTrace4stopEv+0xb8>)
 80035a6:	491e      	ldr	r1, [pc, #120]	; (8003620 <_ZN9LineTrace4stopEv+0xbc>)
 80035a8:	f000 fb9c 	bl	8003ce4 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
 80035ac:	e006      	b.n	80035bc <_ZN9LineTrace4stopEv+0x58>
	}
	else{//Secondary run
		logger_->saveDistanceAndTheta2("COURSLOG", "DISTANC2.TXT", "THETA2.TXT");
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	69d8      	ldr	r0, [r3, #28]
 80035b2:	4b1c      	ldr	r3, [pc, #112]	; (8003624 <_ZN9LineTrace4stopEv+0xc0>)
 80035b4:	4a1c      	ldr	r2, [pc, #112]	; (8003628 <_ZN9LineTrace4stopEv+0xc4>)
 80035b6:	491a      	ldr	r1, [pc, #104]	; (8003620 <_ZN9LineTrace4stopEv+0xbc>)
 80035b8:	f000 fbb7 	bl	8003d2a <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>
	}
	sd_write_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_, OVER_WRITE);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80035c2:	3314      	adds	r3, #20
 80035c4:	2200      	movs	r2, #0
 80035c6:	9200      	str	r2, [sp, #0]
 80035c8:	2264      	movs	r2, #100	; 0x64
 80035ca:	4918      	ldr	r1, [pc, #96]	; (800362c <_ZN9LineTrace4stopEv+0xc8>)
 80035cc:	4814      	ldr	r0, [pc, #80]	; (8003620 <_ZN9LineTrace4stopEv+0xbc>)
 80035ce:	f7fe f819 	bl	8001604 <sd_write_array_float>
	sd_write_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_, OVER_WRITE);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 80035d8:	33a4      	adds	r3, #164	; 0xa4
 80035da:	2200      	movs	r2, #0
 80035dc:	9200      	str	r2, [sp, #0]
 80035de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80035e2:	4913      	ldr	r1, [pc, #76]	; (8003630 <_ZN9LineTrace4stopEv+0xcc>)
 80035e4:	480e      	ldr	r0, [pc, #56]	; (8003620 <_ZN9LineTrace4stopEv+0xbc>)
 80035e6:	f7fe f80d 	bl	8001604 <sd_write_array_float>

	led_.LR(-1, 0);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	330c      	adds	r3, #12
 80035ee:	2200      	movs	r2, #0
 80035f0:	f04f 31ff 	mov.w	r1, #4294967295
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7fe fd3d 	bl	8002074 <_ZN3LED2LREaa>

	logger_->resetIdx();
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	69db      	ldr	r3, [r3, #28]
 80035fe:	4618      	mov	r0, r3
 8003600:	f000 fc21 	bl	8003e46 <_ZN6Logger8resetIdxEv>
	logger_->resetLogs2();
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	69db      	ldr	r3, [r3, #28]
 8003608:	4618      	mov	r0, r3
 800360a:	f000 fbcf 	bl	8003dac <_ZN6Logger10resetLogs2Ev>
}
 800360e:	bf00      	nop
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	08017ec8 	.word	0x08017ec8
 800361c:	08017ed4 	.word	0x08017ed4
 8003620:	08017ebc 	.word	0x08017ebc
 8003624:	08017f28 	.word	0x08017f28
 8003628:	08017f34 	.word	0x08017f34
 800362c:	08017f44 	.word	0x08017f44
 8003630:	08017f54 	.word	0x08017f54

08003634 <_ZN9LineTrace7runningEv>:

void LineTrace::running()
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 800363c:	2300      	movs	r3, #0
 800363e:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 8003640:	2300      	movs	r3, #0
 8003642:	737b      	strb	r3, [r7, #13]
	start();
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f7ff ff67 	bl	8003518 <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 800364a:	7b7b      	ldrb	r3, [r7, #13]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d15b      	bne.n	8003708 <_ZN9LineTrace7runningEv+0xd4>
		switch(stage){
 8003650:	89fb      	ldrh	r3, [r7, #14]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d002      	beq.n	800365c <_ZN9LineTrace7runningEv+0x28>
 8003656:	2b0a      	cmp	r3, #10
 8003658:	d030      	beq.n	80036bc <_ZN9LineTrace7runningEv+0x88>
 800365a:	e054      	b.n	8003706 <_ZN9LineTrace7runningEv+0xd2>
		case 0:
			if(side_sensor_->getWhiteLineCntR() == 1){
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	4618      	mov	r0, r3
 8003662:	f001 f8ff 	bl	8004864 <_ZN10SideSensor16getWhiteLineCntREv>
 8003666:	4603      	mov	r3, r0
 8003668:	2b01      	cmp	r3, #1
 800366a:	bf0c      	ite	eq
 800366c:	2301      	moveq	r3, #1
 800366e:	2300      	movne	r3, #0
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d044      	beq.n	8003700 <_ZN9LineTrace7runningEv+0xcc>
				}
				else{ // Other than first running
					startVelocityPlay();
				}
				*/
				loggerStart();
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f7ff fa56 	bl	8002b28 <_ZN9LineTrace11loggerStartEv>
				if(mode_selector_ != FIRST_RUNNING){ // Other than first running
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003682:	3310      	adds	r3, #16
 8003684:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d002      	beq.n	8003692 <_ZN9LineTrace7runningEv+0x5e>
					startVelocityPlay();
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 f89f 	bl	80037d0 <_ZN9LineTrace17startVelocityPlayEv>
				}

				encoder_->clearCrossLineIgnoreDistance();
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	4618      	mov	r0, r3
 8003698:	f7fd ff31 	bl	80014fe <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				encoder_->clearTotalDistance();
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7fd ff0f 	bl	80014c4 <_ZN7Encoder18clearTotalDistanceEv>
				led_.LR(0, -1);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	330c      	adds	r3, #12
 80036aa:	f04f 32ff 	mov.w	r2, #4294967295
 80036ae:	2100      	movs	r1, #0
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7fe fcdf 	bl	8002074 <_ZN3LED2LREaa>
				stage = 10;
 80036b6:	230a      	movs	r3, #10
 80036b8:	81fb      	strh	r3, [r7, #14]
			}

			break;
 80036ba:	e021      	b.n	8003700 <_ZN9LineTrace7runningEv+0xcc>

		case 10:
			if(side_sensor_->getWhiteLineCntR() == 2){
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f001 f8cf 	bl	8004864 <_ZN10SideSensor16getWhiteLineCntREv>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	bf0c      	ite	eq
 80036cc:	2301      	moveq	r3, #1
 80036ce:	2300      	movne	r3, #0
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d016      	beq.n	8003704 <_ZN9LineTrace7runningEv+0xd0>
				loggerStop();
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f7ff fa41 	bl	8002b5e <_ZN9LineTrace10loggerStopEv>
				stopVelocityPlay();
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 f88a 	bl	80037f6 <_ZN9LineTrace16stopVelocityPlayEv>
				HAL_Delay(100); //Run through after the goal
 80036e2:	2064      	movs	r0, #100	; 0x64
 80036e4:	f004 fc3e 	bl	8007f64 <HAL_Delay>

				setTargetVelocity(0);
 80036e8:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8003718 <_ZN9LineTrace7runningEv+0xe4>
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f7ff fe20 	bl	8003332 <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 80036f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80036f6:	f004 fc35 	bl	8007f64 <HAL_Delay>

				goal_flag = true;
 80036fa:	2301      	movs	r3, #1
 80036fc:	737b      	strb	r3, [r7, #13]

			}

			break;
 80036fe:	e001      	b.n	8003704 <_ZN9LineTrace7runningEv+0xd0>
			break;
 8003700:	bf00      	nop
 8003702:	e7a2      	b.n	800364a <_ZN9LineTrace7runningEv+0x16>
			break;
 8003704:	bf00      	nop
	while(goal_flag == false){
 8003706:	e7a0      	b.n	800364a <_ZN9LineTrace7runningEv+0x16>
		}
	}

	stop();
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f7ff ff2b 	bl	8003564 <_ZN9LineTrace4stopEv>
}
 800370e:	bf00      	nop
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	00000000 	.word	0x00000000

0800371c <_ZN9LineTrace9storeLogsEv>:

void LineTrace::storeLogs()
{
 800371c:	b590      	push	{r4, r7, lr}
 800371e:	ed2d 8b02 	vpush	{d8}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true){
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800372e:	2b00      	cmp	r3, #0
 8003730:	d046      	beq.n	80037c0 <_ZN9LineTrace9storeLogsEv+0xa4>
		if(mode_selector_ == FIRST_RUNNING)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003738:	3310      	adds	r3, #16
 800373a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d11c      	bne.n	800377c <_ZN9LineTrace9storeLogsEv+0x60>
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getTheta());
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	69dc      	ldr	r4, [r3, #28]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	4618      	mov	r0, r3
 800374c:	f7fd fe7f 	bl	800144e <_ZN7Encoder15getDistance10mmEv>
 8003750:	eeb0 8a40 	vmov.f32	s16, s0
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	4618      	mov	r0, r3
 800375a:	f000 fde4 	bl	8004326 <_ZN8Odometry8getThetaEv>
 800375e:	ec53 2b10 	vmov	r2, r3, d0
 8003762:	4610      	mov	r0, r2
 8003764:	4619      	mov	r1, r3
 8003766:	f7fd fa57 	bl	8000c18 <__aeabi_d2f>
 800376a:	4603      	mov	r3, r0
 800376c:	ee00 3a90 	vmov	s1, r3
 8003770:	eeb0 0a48 	vmov.f32	s0, s16
 8003774:	4620      	mov	r0, r4
 8003776:	f000 f9e4 	bl	8003b42 <_ZN6Logger21storeDistanceAndThetaEff>
 800377a:	e01b      	b.n	80037b4 <_ZN9LineTrace9storeLogsEv+0x98>
		else
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());
			logger_->storeDistanceAndTheta2(encoder_->getTotalDistance(), odometry_->getTheta());
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	69dc      	ldr	r4, [r3, #28]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	4618      	mov	r0, r3
 8003786:	f7fd fe71 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 800378a:	eeb0 8a40 	vmov.f32	s16, s0
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	4618      	mov	r0, r3
 8003794:	f000 fdc7 	bl	8004326 <_ZN8Odometry8getThetaEv>
 8003798:	ec53 2b10 	vmov	r2, r3, d0
 800379c:	4610      	mov	r0, r2
 800379e:	4619      	mov	r1, r3
 80037a0:	f7fd fa3a 	bl	8000c18 <__aeabi_d2f>
 80037a4:	4603      	mov	r3, r0
 80037a6:	ee00 3a90 	vmov	s1, r3
 80037aa:	eeb0 0a48 	vmov.f32	s0, s16
 80037ae:	4620      	mov	r0, r4
 80037b0:	f000 fa0e 	bl	8003bd0 <_ZN6Logger22storeDistanceAndTheta2Eff>
			//logger_->storeDistanceAndTheta2(getTargetVelocity(), odometry_->getTheta());

		mon_store_cnt++;
 80037b4:	4b05      	ldr	r3, [pc, #20]	; (80037cc <_ZN9LineTrace9storeLogsEv+0xb0>)
 80037b6:	881b      	ldrh	r3, [r3, #0]
 80037b8:	3301      	adds	r3, #1
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	4b03      	ldr	r3, [pc, #12]	; (80037cc <_ZN9LineTrace9storeLogsEv+0xb0>)
 80037be:	801a      	strh	r2, [r3, #0]
	}
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	ecbd 8b02 	vpop	{d8}
 80037ca:	bd90      	pop	{r4, r7, pc}
 80037cc:	20000264 	.word	0x20000264

080037d0 <_ZN9LineTrace17startVelocityPlayEv>:

void LineTrace::startVelocityPlay()
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalDistance();
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	4618      	mov	r0, r3
 80037de:	f7fd fe71 	bl	80014c4 <_ZN7Encoder18clearTotalDistanceEv>
	velocity_play_flag_ = true;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80037e8:	330c      	adds	r3, #12
 80037ea:	2201      	movs	r2, #1
 80037ec:	701a      	strb	r2, [r3, #0]
}
 80037ee:	bf00      	nop
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <_ZN9LineTrace16stopVelocityPlayEv>:

void LineTrace::stopVelocityPlay()
{
 80037f6:	b480      	push	{r7}
 80037f8:	b083      	sub	sp, #12
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
	velocity_play_flag_ = false;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003804:	330c      	adds	r3, #12
 8003806:	2200      	movs	r2, #0
 8003808:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003810:	330e      	adds	r3, #14
 8003812:	2200      	movs	r2, #0
 8003814:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 800381c:	3348      	adds	r3, #72	; 0x48
 800381e:	f04f 0200 	mov.w	r2, #0
 8003822:	601a      	str	r2, [r3, #0]
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <_ZN9LineTrace7setModeEs>:

void LineTrace::setMode(int16_t mode)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	460b      	mov	r3, r1
 800383a:	807b      	strh	r3, [r7, #2]
	mode_selector_ = mode;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003842:	3310      	adds	r3, #16
 8003844:	887a      	ldrh	r2, [r7, #2]
 8003846:	801a      	strh	r2, [r3, #0]
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <_ZN9LineTrace16isTargetDistanceEf>:

bool LineTrace::isTargetDistance(float target_distance)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	ed87 0a00 	vstr	s0, [r7]
	bool ret = false;
 8003860:	2300      	movs	r3, #0
 8003862:	73fb      	strb	r3, [r7, #15]
	if(encoder_->getDistance10mm() >= target_distance){
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	4618      	mov	r0, r3
 800386a:	f7fd fdf0 	bl	800144e <_ZN7Encoder15getDistance10mmEv>
 800386e:	eeb0 7a40 	vmov.f32	s14, s0
 8003872:	edd7 7a00 	vldr	s15, [r7]
 8003876:	eef4 7ac7 	vcmpe.f32	s15, s14
 800387a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800387e:	bf94      	ite	ls
 8003880:	2301      	movls	r3, #1
 8003882:	2300      	movhi	r3, #0
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <_ZN9LineTrace16isTargetDistanceEf+0x3a>
		ret = true;
 800388a:	2301      	movs	r3, #1
 800388c:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 800388e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003890:	4618      	mov	r0, r3
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <_ZN9LineTrace22storeCrossLineDistanceEv>:

void LineTrace::storeCrossLineDistance()
{
 8003898:	b590      	push	{r4, r7, lr}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
	crossline_distance_[crossline_idx_] = encoder_->getTotalDistance();
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	695a      	ldr	r2, [r3, #20]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80038aa:	3344      	adds	r3, #68	; 0x44
 80038ac:	881b      	ldrh	r3, [r3, #0]
 80038ae:	461c      	mov	r4, r3
 80038b0:	4610      	mov	r0, r2
 80038b2:	f7fd fddb 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 80038b6:	eef0 7a40 	vmov.f32	s15, s0
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	f504 533c 	add.w	r3, r4, #12032	; 0x2f00
 80038c0:	3304      	adds	r3, #4
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	4413      	add	r3, r2
 80038c6:	3304      	adds	r3, #4
 80038c8:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx_++;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80038d2:	3344      	adds	r3, #68	; 0x44
 80038d4:	881b      	ldrh	r3, [r3, #0]
 80038d6:	3301      	adds	r3, #1
 80038d8:	b29a      	uxth	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80038e0:	3344      	adds	r3, #68	; 0x44
 80038e2:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80038ea:	3344      	adds	r3, #68	; 0x44
 80038ec:	881b      	ldrh	r3, [r3, #0]
 80038ee:	2b63      	cmp	r3, #99	; 0x63
 80038f0:	d905      	bls.n	80038fe <_ZN9LineTrace22storeCrossLineDistanceEv+0x66>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80038f8:	3344      	adds	r3, #68	; 0x44
 80038fa:	2263      	movs	r2, #99	; 0x63
 80038fc:	801a      	strh	r2, [r3, #0]
}
 80038fe:	bf00      	nop
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	bd90      	pop	{r4, r7, pc}

08003906 <_ZN9LineTrace23correctionTotalDistanceEv>:
	sideline_idx_++;

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
}
void LineTrace::correctionTotalDistance()
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b082      	sub	sp, #8
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
	encoder_->setTotalDistance(crossline_distance_[crossline_idx_]);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6959      	ldr	r1, [r3, #20]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003918:	3344      	adds	r3, #68	; 0x44
 800391a:	881b      	ldrh	r3, [r3, #0]
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8003922:	3304      	adds	r3, #4
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	4413      	add	r3, r2
 8003928:	3304      	adds	r3, #4
 800392a:	edd3 7a00 	vldr	s15, [r3]
 800392e:	eeb0 0a67 	vmov.f32	s0, s15
 8003932:	4608      	mov	r0, r1
 8003934:	f7fd fda9 	bl	800148a <_ZN7Encoder16setTotalDistanceEf>
	crossline_idx_++;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800393e:	3344      	adds	r3, #68	; 0x44
 8003940:	881b      	ldrh	r3, [r3, #0]
 8003942:	3301      	adds	r3, #1
 8003944:	b29a      	uxth	r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800394c:	3344      	adds	r3, #68	; 0x44
 800394e:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003956:	3344      	adds	r3, #68	; 0x44
 8003958:	881b      	ldrh	r3, [r3, #0]
 800395a:	2b63      	cmp	r3, #99	; 0x63
 800395c:	d905      	bls.n	800396a <_ZN9LineTrace23correctionTotalDistanceEv+0x64>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003964:	3344      	adds	r3, #68	; 0x44
 8003966:	2263      	movs	r2, #99	; 0x63
 8003968:	801a      	strh	r2, [r3, #0]

}
 800396a:	bf00      	nop
 800396c:	3708      	adds	r7, #8
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_dis_(0){}
 8003972:	b480      	push	{r7}
 8003974:	b083      	sub	sp, #12
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003980:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003984:	2200      	movs	r2, #0
 8003986:	701a      	strb	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800398e:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8003992:	2200      	movs	r2, #0
 8003994:	801a      	strh	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800399c:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80039a0:	2200      	movs	r2, #0
 80039a2:	801a      	strh	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80039aa:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80039ae:	2200      	movs	r2, #0
 80039b0:	801a      	strh	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4618      	mov	r0, r3
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
	bool ret = false;
 80039c8:	2300      	movs	r3, #0
 80039ca:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 80039cc:	f7fd ff0c 	bl	80017e8 <sd_mount>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	bf0c      	ite	eq
 80039d6:	2301      	moveq	r3, #1
 80039d8:	2300      	movne	r3, #0
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d016      	beq.n	8003a0e <_ZN6Logger10sdCardInitEv+0x4e>
	  //printf("mount success\r\n");

	  lcd_clear();
 80039e0:	f7fd fb5e 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 80039e4:	2100      	movs	r1, #0
 80039e6:	2000      	movs	r0, #0
 80039e8:	f7fd fb6a 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 80039ec:	4815      	ldr	r0, [pc, #84]	; (8003a44 <_ZN6Logger10sdCardInitEv+0x84>)
 80039ee:	f7fd fb91 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 80039f2:	2101      	movs	r1, #1
 80039f4:	2000      	movs	r0, #0
 80039f6:	f7fd fb63 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 80039fa:	4813      	ldr	r0, [pc, #76]	; (8003a48 <_ZN6Logger10sdCardInitEv+0x88>)
 80039fc:	f7fd fb8a 	bl	8001114 <lcd_printf>
	  HAL_Delay(500);
 8003a00:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003a04:	f004 faae 	bl	8007f64 <HAL_Delay>

	  ret = true;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	73fb      	strb	r3, [r7, #15]
 8003a0c:	e015      	b.n	8003a3a <_ZN6Logger10sdCardInitEv+0x7a>
	}
	else{
	  //printf("mount error\r\n");

	  lcd_clear();
 8003a0e:	f7fd fb47 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8003a12:	2100      	movs	r1, #0
 8003a14:	2000      	movs	r0, #0
 8003a16:	f7fd fb53 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8003a1a:	480a      	ldr	r0, [pc, #40]	; (8003a44 <_ZN6Logger10sdCardInitEv+0x84>)
 8003a1c:	f7fd fb7a 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8003a20:	2101      	movs	r1, #1
 8003a22:	2000      	movs	r0, #0
 8003a24:	f7fd fb4c 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 8003a28:	4808      	ldr	r0, [pc, #32]	; (8003a4c <_ZN6Logger10sdCardInitEv+0x8c>)
 8003a2a:	f7fd fb73 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 8003a2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a32:	f004 fa97 	bl	8007f64 <HAL_Delay>

	  ret = false;
 8003a36:	2300      	movs	r3, #0
 8003a38:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 8003a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	08017f60 	.word	0x08017f60
 8003a48:	08017f6c 	.word	0x08017f6c
 8003a4c:	08017f74 	.word	0x08017f74

08003a50 <_ZN6Logger8storeLogEf>:

	}

}
void Logger::storeLog(float data)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003a62:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d027      	beq.n	8003abc <_ZN6Logger8storeLogEf+0x6c>
		store_data_float_[log_index_tim_] = data;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003a72:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8003a76:	881b      	ldrh	r3, [r3, #0]
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	4413      	add	r3, r2
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003a88:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8003a8c:	881b      	ldrh	r3, [r3, #0]
 8003a8e:	3301      	adds	r3, #1
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003a98:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8003a9c:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003aa4:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8003aa8:	881b      	ldrh	r3, [r3, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d006      	beq.n	8003abc <_ZN6Logger8storeLogEf+0x6c>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003ab4:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8003ab8:	2200      	movs	r2, #0
 8003aba:	801a      	strh	r2, [r3, #0]
	}
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <_ZN6Logger9storeLog2Ef>:
void Logger::storeLog2(float data)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003ada:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d028      	beq.n	8003b36 <_ZN6Logger9storeLog2Ef+0x6e>
		store_data_float2_[log_index_tim2_] = data;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003aea:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8003aee:	881b      	ldrh	r3, [r3, #0]
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	4413      	add	r3, r2
 8003af6:	3304      	adds	r3, #4
 8003af8:	683a      	ldr	r2, [r7, #0]
 8003afa:	601a      	str	r2, [r3, #0]

		log_index_tim2_++;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003b02:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8003b06:	881b      	ldrh	r3, [r3, #0]
 8003b08:	3301      	adds	r3, #1
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003b12:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8003b16:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003b1e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8003b22:	881b      	ldrh	r3, [r3, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d006      	beq.n	8003b36 <_ZN6Logger9storeLog2Ef+0x6e>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003b2e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8003b32:	2200      	movs	r2, #0
 8003b34:	801a      	strh	r2, [r3, #0]
	}
}
 8003b36:	bf00      	nop
 8003b38:	370c      	adds	r7, #12
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr

08003b42 <_ZN6Logger21storeDistanceAndThetaEff>:
{

}

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 8003b42:	b480      	push	{r7}
 8003b44:	b085      	sub	sp, #20
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	60f8      	str	r0, [r7, #12]
 8003b4a:	ed87 0a02 	vstr	s0, [r7, #8]
 8003b4e:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003b58:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8003b5c:	881b      	ldrh	r3, [r3, #0]
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	3302      	adds	r3, #2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	4413      	add	r3, r2
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003b70:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8003b74:	881b      	ldrh	r3, [r3, #0]
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8003b7c:	3312      	adds	r3, #18
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	4413      	add	r3, r2
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003b8c:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8003b90:	881b      	ldrh	r3, [r3, #0]
 8003b92:	3301      	adds	r3, #1
 8003b94:	b29a      	uxth	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003b9c:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8003ba0:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003ba8:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8003bac:	881b      	ldrh	r3, [r3, #0]
 8003bae:	f241 726f 	movw	r2, #5999	; 0x176f
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d906      	bls.n	8003bc4 <_ZN6Logger21storeDistanceAndThetaEff+0x82>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003bbc:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	801a      	strh	r2, [r3, #0]
	//}
}
 8003bc4:	bf00      	nop
 8003bc6:	3714      	adds	r7, #20
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <_ZN6Logger22storeDistanceAndTheta2Eff>:

void Logger::storeDistanceAndTheta2(float distance, float theta)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	ed87 0a02 	vstr	s0, [r7, #8]
 8003bdc:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance2_[log_index_dis_] = distance;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003be6:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8003bea:	881b      	ldrh	r3, [r3, #0]
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8003bf2:	3322      	adds	r3, #34	; 0x22
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	4413      	add	r3, r2
 8003bf8:	68ba      	ldr	r2, [r7, #8]
 8003bfa:	601a      	str	r2, [r3, #0]
		store_theta2_[log_index_dis_] = theta;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003c02:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8003c06:	881b      	ldrh	r3, [r3, #0]
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	f503 438c 	add.w	r3, r3, #17920	; 0x4600
 8003c0e:	3352      	adds	r3, #82	; 0x52
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	4413      	add	r3, r2
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003c1e:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8003c22:	881b      	ldrh	r3, [r3, #0]
 8003c24:	3301      	adds	r3, #1
 8003c26:	b29a      	uxth	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003c2e:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8003c32:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003c3a:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8003c3e:	881b      	ldrh	r3, [r3, #0]
 8003c40:	f241 726f 	movw	r2, #5999	; 0x176f
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d906      	bls.n	8003c56 <_ZN6Logger22storeDistanceAndTheta2Eff+0x86>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003c4e:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8003c52:	2200      	movs	r2, #0
 8003c54:	801a      	strh	r2, [r3, #0]
	//}
}
 8003c56:	bf00      	nop
 8003c58:	3714      	adds	r7, #20
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr

08003c62 <_ZN6Logger23getDistanceArrayPointerEv>:
const float *Logger::getDistanceArrayPointer()
{
 8003c62:	b480      	push	{r7}
 8003c64:	b083      	sub	sp, #12
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
	return store_distance_;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	3308      	adds	r3, #8
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr

08003c7a <_ZN6Logger20getThetaArrayPointerEv>:

const float *Logger::getThetaArrayPointer()
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b083      	sub	sp, #12
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
	return store_theta_;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8003c88:	3348      	adds	r3, #72	; 0x48
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr

08003c96 <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b086      	sub	sp, #24
 8003c9a:	af02      	add	r7, sp, #8
 8003c9c:	60f8      	str	r0, [r7, #12]
 8003c9e:	60b9      	str	r1, [r7, #8]
 8003ca0:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	9300      	str	r3, [sp, #0]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	2201      	movs	r2, #1
 8003cac:	6879      	ldr	r1, [r7, #4]
 8003cae:	68b8      	ldr	r0, [r7, #8]
 8003cb0:	f7fd fca8 	bl	8001604 <sd_write_array_float>
}
 8003cb4:	bf00      	nop
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <_ZN6Logger9saveLogs2EPKcS1_>:
void Logger::saveLogs2(const char *folder_name, const char *file_name)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af02      	add	r7, sp, #8
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	1d1a      	adds	r2, r3, #4
 8003ccc:	2300      	movs	r3, #0
 8003cce:	9300      	str	r3, [sp, #0]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	6879      	ldr	r1, [r7, #4]
 8003cd6:	68b8      	ldr	r0, [r7, #8]
 8003cd8:	f7fd fc94 	bl	8001604 <sd_write_array_float>
}
 8003cdc:	bf00      	nop
 8003cde:	3710      	adds	r7, #16
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:

void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af02      	add	r7, sp, #8
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
 8003cf0:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f103 0208 	add.w	r2, r3, #8
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	9300      	str	r3, [sp, #0]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	f241 7270 	movw	r2, #6000	; 0x1770
 8003d02:	6879      	ldr	r1, [r7, #4]
 8003d04:	68b8      	ldr	r0, [r7, #8]
 8003d06:	f7fd fc7d 	bl	8001604 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8003d10:	3348      	adds	r3, #72	; 0x48
 8003d12:	2200      	movs	r2, #0
 8003d14:	9200      	str	r2, [sp, #0]
 8003d16:	f241 7270 	movw	r2, #6000	; 0x1770
 8003d1a:	6839      	ldr	r1, [r7, #0]
 8003d1c:	68b8      	ldr	r0, [r7, #8]
 8003d1e:	f7fd fc71 	bl	8001604 <sd_write_array_float>
}
 8003d22:	bf00      	nop
 8003d24:	3710      	adds	r7, #16
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>:

void Logger::saveDistanceAndTheta2(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b086      	sub	sp, #24
 8003d2e:	af02      	add	r7, sp, #8
 8003d30:	60f8      	str	r0, [r7, #12]
 8003d32:	60b9      	str	r1, [r7, #8]
 8003d34:	607a      	str	r2, [r7, #4]
 8003d36:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance2_, OVER_WRITE); //write
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8003d3e:	3388      	adds	r3, #136	; 0x88
 8003d40:	2200      	movs	r2, #0
 8003d42:	9200      	str	r2, [sp, #0]
 8003d44:	f241 7270 	movw	r2, #6000	; 0x1770
 8003d48:	6879      	ldr	r1, [r7, #4]
 8003d4a:	68b8      	ldr	r0, [r7, #8]
 8003d4c:	f7fd fc5a 	bl	8001604 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta2_, OVER_WRITE); //write
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8003d56:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	9200      	str	r2, [sp, #0]
 8003d5e:	f241 7270 	movw	r2, #6000	; 0x1770
 8003d62:	6839      	ldr	r1, [r7, #0]
 8003d64:	68b8      	ldr	r0, [r7, #8]
 8003d66:	f7fd fc4d 	bl	8001604 <sd_write_array_float>
}
 8003d6a:	bf00      	nop
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>:

void Logger::importDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b084      	sub	sp, #16
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	60f8      	str	r0, [r7, #12]
 8003d7a:	60b9      	str	r1, [r7, #8]
 8003d7c:	607a      	str	r2, [r7, #4]
 8003d7e:	603b      	str	r3, [r7, #0]
	sd_read_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_); //read
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	3308      	adds	r3, #8
 8003d84:	f241 7270 	movw	r2, #6000	; 0x1770
 8003d88:	6879      	ldr	r1, [r7, #4]
 8003d8a:	68b8      	ldr	r0, [r7, #8]
 8003d8c:	f7fd fca0 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_); //read
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8003d96:	3348      	adds	r3, #72	; 0x48
 8003d98:	f241 7270 	movw	r2, #6000	; 0x1770
 8003d9c:	6839      	ldr	r1, [r7, #0]
 8003d9e:	68b8      	ldr	r0, [r7, #8]
 8003da0:	f7fd fc96 	bl	80016d0 <sd_read_array_float>
}
 8003da4:	bf00      	nop
 8003da6:	3710      	adds	r7, #16
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <_ZN6Logger10resetLogs2Ev>:
	log_index_tim_ = 0;
	log_index_dis_ = 0;
}

void Logger::resetLogs2()
{
 8003dac:	b480      	push	{r7}
 8003dae:	b08b      	sub	sp, #44	; 0x2c
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
	for(auto &log : store_distance2_){
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8003dba:	3388      	adds	r3, #136	; 0x88
 8003dbc:	61fb      	str	r3, [r7, #28]
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8003dc8:	3340      	adds	r3, #64	; 0x40
 8003dca:	61bb      	str	r3, [r7, #24]
 8003dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d009      	beq.n	8003de8 <_ZN6Logger10resetLogs2Ev+0x3c>
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd6:	617b      	str	r3, [r7, #20]
		log = 0;
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	f04f 0200 	mov.w	r2, #0
 8003dde:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance2_){
 8003de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de2:	3304      	adds	r3, #4
 8003de4:	627b      	str	r3, [r7, #36]	; 0x24
 8003de6:	e7f1      	b.n	8003dcc <_ZN6Logger10resetLogs2Ev+0x20>
	}
	for(auto &log : store_theta2_){
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8003dee:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8003df2:	613b      	str	r3, [r7, #16]
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	623b      	str	r3, [r7, #32]
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8003dfe:	3340      	adds	r3, #64	; 0x40
 8003e00:	60fb      	str	r3, [r7, #12]
 8003e02:	6a3a      	ldr	r2, [r7, #32]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d009      	beq.n	8003e1e <_ZN6Logger10resetLogs2Ev+0x72>
 8003e0a:	6a3b      	ldr	r3, [r7, #32]
 8003e0c:	60bb      	str	r3, [r7, #8]
		log = 0;
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	f04f 0200 	mov.w	r2, #0
 8003e14:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta2_){
 8003e16:	6a3b      	ldr	r3, [r7, #32]
 8003e18:	3304      	adds	r3, #4
 8003e1a:	623b      	str	r3, [r7, #32]
 8003e1c:	e7f1      	b.n	8003e02 <_ZN6Logger10resetLogs2Ev+0x56>
	}

	log_index_tim_ = 0;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003e24:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8003e28:	2200      	movs	r2, #0
 8003e2a:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003e32:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8003e36:	2200      	movs	r2, #0
 8003e38:	801a      	strh	r2, [r3, #0]
}
 8003e3a:	bf00      	nop
 8003e3c:	372c      	adds	r7, #44	; 0x2c
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <_ZN6Logger8resetIdxEv>:
void Logger::resetIdx()
{
 8003e46:	b480      	push	{r7}
 8003e48:	b083      	sub	sp, #12
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003e54:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8003e58:	2200      	movs	r2, #0
 8003e5a:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003e62:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8003e66:	2200      	movs	r2, #0
 8003e68:	801a      	strh	r2, [r3, #0]
}
 8003e6a:	bf00      	nop
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr

08003e76 <_ZN6Logger5startEv>:

void Logger::start()
{
 8003e76:	b480      	push	{r7}
 8003e78:	b083      	sub	sp, #12
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003e84:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003e88:	2201      	movs	r2, #1
 8003e8a:	701a      	strb	r2, [r3, #0]
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003ea6:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003eaa:	2200      	movs	r2, #0
 8003eac:	701a      	strb	r2, [r3, #0]
}
 8003eae:	bf00      	nop
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr

08003eba <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8003eba:	b480      	push	{r7}
 8003ebc:	b083      	sub	sp, #12
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	801a      	strh	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	805a      	strh	r2, [r3, #2]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <_ZN5Motor4initEv>:

void Motor::init()
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8003ee4:	2108      	movs	r1, #8
 8003ee6:	4805      	ldr	r0, [pc, #20]	; (8003efc <_ZN5Motor4initEv+0x20>)
 8003ee8:	f009 f9ec 	bl	800d2c4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8003eec:	210c      	movs	r1, #12
 8003eee:	4803      	ldr	r0, [pc, #12]	; (8003efc <_ZN5Motor4initEv+0x20>)
 8003ef0:	f009 f9e8 	bl	800d2c4 <HAL_TIM_PWM_Start>

}
 8003ef4:	bf00      	nop
 8003ef6:	3708      	adds	r7, #8
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	2003e8a4 	.word	0x2003e8a4

08003f00 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	da0d      	bge.n	8003f2e <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8003f12:	2200      	movs	r2, #0
 8003f14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f18:	481f      	ldr	r0, [pc, #124]	; (8003f98 <_ZN5Motor9motorCtrlEv+0x98>)
 8003f1a:	f005 fab9 	bl	8009490 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	425b      	negs	r3, r3
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	81fb      	strh	r3, [r7, #14]
 8003f2c:	e00a      	b.n	8003f44 <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f34:	4818      	ldr	r0, [pc, #96]	; (8003f98 <_ZN5Motor9motorCtrlEv+0x98>)
 8003f36:	f005 faab 	bl	8009490 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	da0d      	bge.n	8003f6a <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003f54:	4810      	ldr	r0, [pc, #64]	; (8003f98 <_ZN5Motor9motorCtrlEv+0x98>)
 8003f56:	f005 fa9b 	bl	8009490 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	425b      	negs	r3, r3
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	81bb      	strh	r3, [r7, #12]
 8003f68:	e00a      	b.n	8003f80 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003f70:	4809      	ldr	r0, [pc, #36]	; (8003f98 <_ZN5Motor9motorCtrlEv+0x98>)
 8003f72:	f005 fa8d 	bl	8009490 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8003f80:	89fa      	ldrh	r2, [r7, #14]
 8003f82:	4b06      	ldr	r3, [pc, #24]	; (8003f9c <_ZN5Motor9motorCtrlEv+0x9c>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8003f88:	89ba      	ldrh	r2, [r7, #12]
 8003f8a:	4b04      	ldr	r3, [pc, #16]	; (8003f9c <_ZN5Motor9motorCtrlEv+0x9c>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003f90:	bf00      	nop
 8003f92:	3710      	adds	r7, #16
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	40020c00 	.word	0x40020c00
 8003f9c:	2003e8a4 	.word	0x2003e8a4

08003fa0 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8003fa0:	b590      	push	{r4, r7, lr}
 8003fa2:	b087      	sub	sp, #28
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6178      	str	r0, [r7, #20]
 8003fa8:	ed87 0b02 	vstr	d0, [r7, #8]
 8003fac:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8003fb0:	f04f 0200 	mov.w	r2, #0
 8003fb4:	4b30      	ldr	r3, [pc, #192]	; (8004078 <_ZN5Motor8setRatioEdd+0xd8>)
 8003fb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003fba:	f7fc fdc5 	bl	8000b48 <__aeabi_dcmpgt>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d005      	beq.n	8003fd0 <_ZN5Motor8setRatioEdd+0x30>
 8003fc4:	f04f 0300 	mov.w	r3, #0
 8003fc8:	4c2b      	ldr	r4, [pc, #172]	; (8004078 <_ZN5Motor8setRatioEdd+0xd8>)
 8003fca:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8003fce:	e00e      	b.n	8003fee <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8003fd0:	f04f 0200 	mov.w	r2, #0
 8003fd4:	4b29      	ldr	r3, [pc, #164]	; (800407c <_ZN5Motor8setRatioEdd+0xdc>)
 8003fd6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003fda:	f7fc fd97 	bl	8000b0c <__aeabi_dcmplt>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d004      	beq.n	8003fee <_ZN5Motor8setRatioEdd+0x4e>
 8003fe4:	f04f 0300 	mov.w	r3, #0
 8003fe8:	4c24      	ldr	r4, [pc, #144]	; (800407c <_ZN5Motor8setRatioEdd+0xdc>)
 8003fea:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8003fee:	f04f 0200 	mov.w	r2, #0
 8003ff2:	4b21      	ldr	r3, [pc, #132]	; (8004078 <_ZN5Motor8setRatioEdd+0xd8>)
 8003ff4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003ff8:	f7fc fda6 	bl	8000b48 <__aeabi_dcmpgt>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d005      	beq.n	800400e <_ZN5Motor8setRatioEdd+0x6e>
 8004002:	f04f 0300 	mov.w	r3, #0
 8004006:	4c1c      	ldr	r4, [pc, #112]	; (8004078 <_ZN5Motor8setRatioEdd+0xd8>)
 8004008:	e9c7 3400 	strd	r3, r4, [r7]
 800400c:	e00e      	b.n	800402c <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 800400e:	f04f 0200 	mov.w	r2, #0
 8004012:	4b1a      	ldr	r3, [pc, #104]	; (800407c <_ZN5Motor8setRatioEdd+0xdc>)
 8004014:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004018:	f7fc fd78 	bl	8000b0c <__aeabi_dcmplt>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d004      	beq.n	800402c <_ZN5Motor8setRatioEdd+0x8c>
 8004022:	f04f 0300 	mov.w	r3, #0
 8004026:	4c15      	ldr	r4, [pc, #84]	; (800407c <_ZN5Motor8setRatioEdd+0xdc>)
 8004028:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 800402c:	f04f 0200 	mov.w	r2, #0
 8004030:	4b13      	ldr	r3, [pc, #76]	; (8004080 <_ZN5Motor8setRatioEdd+0xe0>)
 8004032:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004036:	f7fc faf7 	bl	8000628 <__aeabi_dmul>
 800403a:	4603      	mov	r3, r0
 800403c:	460c      	mov	r4, r1
 800403e:	4618      	mov	r0, r3
 8004040:	4621      	mov	r1, r4
 8004042:	f7fc fda1 	bl	8000b88 <__aeabi_d2iz>
 8004046:	4603      	mov	r3, r0
 8004048:	b21a      	sxth	r2, r3
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 800404e:	f04f 0200 	mov.w	r2, #0
 8004052:	4b0b      	ldr	r3, [pc, #44]	; (8004080 <_ZN5Motor8setRatioEdd+0xe0>)
 8004054:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004058:	f7fc fae6 	bl	8000628 <__aeabi_dmul>
 800405c:	4603      	mov	r3, r0
 800405e:	460c      	mov	r4, r1
 8004060:	4618      	mov	r0, r3
 8004062:	4621      	mov	r1, r4
 8004064:	f7fc fd90 	bl	8000b88 <__aeabi_d2iz>
 8004068:	4603      	mov	r3, r0
 800406a:	b21a      	sxth	r2, r3
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	805a      	strh	r2, [r3, #2]

}
 8004070:	bf00      	nop
 8004072:	371c      	adds	r7, #28
 8004074:	46bd      	mov	sp, r7
 8004076:	bd90      	pop	{r4, r7, pc}
 8004078:	3ff00000 	.word	0x3ff00000
 800407c:	bff00000 	.word	0xbff00000
 8004080:	409c2000 	.word	0x409c2000

08004084 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 8004084:	b490      	push	{r4, r7}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]
 8004090:	603b      	str	r3, [r7, #0]
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	f04f 0300 	mov.w	r3, #0
 8004098:	f04f 0400 	mov.w	r4, #0
 800409c:	e9c2 3404 	strd	r3, r4, [r2, #16]
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	f04f 0300 	mov.w	r3, #0
 80040a6:	f04f 0400 	mov.w	r4, #0
 80040aa:	e9c2 3406 	strd	r3, r4, [r2, #24]
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	f04f 0300 	mov.w	r3, #0
 80040b4:	f04f 0400 	mov.w	r4, #0
 80040b8:	e9c2 3408 	strd	r3, r4, [r2, #32]
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	f04f 0300 	mov.w	r3, #0
 80040c2:	f04f 0400 	mov.w	r4, #0
 80040c6:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	f04f 0300 	mov.w	r3, #0
 80040d0:	f04f 0400 	mov.w	r4, #0
 80040d4:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
{
	encoder_ = encoder;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	68ba      	ldr	r2, [r7, #8]
 80040dc:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	683a      	ldr	r2, [r7, #0]
 80040e8:	609a      	str	r2, [r3, #8]
}
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	4618      	mov	r0, r3
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bc90      	pop	{r4, r7}
 80040f4:	4770      	bx	lr
	...

080040f8 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 80040f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040fc:	b086      	sub	sp, #24
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	4618      	mov	r0, r3
 8004108:	f7fd fd36 	bl	8001b78 <_ZN3IMU8getOmegaEv>
 800410c:	ee10 3a10 	vmov	r3, s0
 8004110:	4618      	mov	r0, r3
 8004112:	f7fc fa31 	bl	8000578 <__aeabi_f2d>
 8004116:	4603      	mov	r3, r0
 8004118:	460c      	mov	r4, r1
 800411a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	float distance = encoder_->getDistance();
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4618      	mov	r0, r3
 8004124:	f7fd f984 	bl	8001430 <_ZN7Encoder11getDistanceEv>
 8004128:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 800412c:	a376      	add	r3, pc, #472	; (adr r3, 8004308 <_ZN8Odometry12calcPotitionEv+0x210>)
 800412e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004132:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004136:	f7fc fa77 	bl	8000628 <__aeabi_dmul>
 800413a:	4603      	mov	r3, r0
 800413c:	460c      	mov	r4, r1
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f7fc fa14 	bl	8000578 <__aeabi_f2d>
 8004150:	4682      	mov	sl, r0
 8004152:	468b      	mov	fp, r1
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004160:	f04f 0200 	mov.w	r2, #0
 8004164:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004168:	f7fc fb88 	bl	800087c <__aeabi_ddiv>
 800416c:	4602      	mov	r2, r0
 800416e:	460b      	mov	r3, r1
 8004170:	4640      	mov	r0, r8
 8004172:	4649      	mov	r1, r9
 8004174:	f7fc f8a2 	bl	80002bc <__adddf3>
 8004178:	4602      	mov	r2, r0
 800417a:	460b      	mov	r3, r1
 800417c:	ec43 2b17 	vmov	d7, r2, r3
 8004180:	eeb0 0a47 	vmov.f32	s0, s14
 8004184:	eef0 0a67 	vmov.f32	s1, s15
 8004188:	f00e fbe2 	bl	8012950 <cos>
 800418c:	ec53 2b10 	vmov	r2, r3, d0
 8004190:	4650      	mov	r0, sl
 8004192:	4659      	mov	r1, fp
 8004194:	f7fc fa48 	bl	8000628 <__aeabi_dmul>
 8004198:	4602      	mov	r2, r0
 800419a:	460b      	mov	r3, r1
 800419c:	4620      	mov	r0, r4
 800419e:	4629      	mov	r1, r5
 80041a0:	f7fc f88c 	bl	80002bc <__adddf3>
 80041a4:	4603      	mov	r3, r0
 80041a6:	460c      	mov	r4, r1
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f7fc f9df 	bl	8000578 <__aeabi_f2d>
 80041ba:	4682      	mov	sl, r0
 80041bc:	468b      	mov	fp, r1
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80041ca:	f04f 0200 	mov.w	r2, #0
 80041ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80041d2:	f7fc fb53 	bl	800087c <__aeabi_ddiv>
 80041d6:	4602      	mov	r2, r0
 80041d8:	460b      	mov	r3, r1
 80041da:	4640      	mov	r0, r8
 80041dc:	4649      	mov	r1, r9
 80041de:	f7fc f86d 	bl	80002bc <__adddf3>
 80041e2:	4602      	mov	r2, r0
 80041e4:	460b      	mov	r3, r1
 80041e6:	ec43 2b17 	vmov	d7, r2, r3
 80041ea:	eeb0 0a47 	vmov.f32	s0, s14
 80041ee:	eef0 0a67 	vmov.f32	s1, s15
 80041f2:	f00e fbf1 	bl	80129d8 <sin>
 80041f6:	ec53 2b10 	vmov	r2, r3, d0
 80041fa:	4650      	mov	r0, sl
 80041fc:	4659      	mov	r1, fp
 80041fe:	f7fc fa13 	bl	8000628 <__aeabi_dmul>
 8004202:	4602      	mov	r2, r0
 8004204:	460b      	mov	r3, r1
 8004206:	4620      	mov	r0, r4
 8004208:	4629      	mov	r1, r5
 800420a:	f7fc f857 	bl	80002bc <__adddf3>
 800420e:	4603      	mov	r3, r0
 8004210:	460c      	mov	r4, r1
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_= theta_ + delta_theta_;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8004224:	461a      	mov	r2, r3
 8004226:	4623      	mov	r3, r4
 8004228:	f7fc f848 	bl	80002bc <__adddf3>
 800422c:	4603      	mov	r3, r0
 800422e:	460c      	mov	r4, r1
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	e9c2 3408 	strd	r3, r4, [r2, #32]

	x_sens_ = x_robot_ + SENSOR_LENGTH * cos(theta_); //calculate a sensor position from robot's center position
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	ed93 7b08 	vldr	d7, [r3, #32]
 8004242:	eeb0 0a47 	vmov.f32	s0, s14
 8004246:	eef0 0a67 	vmov.f32	s1, s15
 800424a:	f00e fb81 	bl	8012950 <cos>
 800424e:	ec51 0b10 	vmov	r0, r1, d0
 8004252:	f04f 0200 	mov.w	r2, #0
 8004256:	4b28      	ldr	r3, [pc, #160]	; (80042f8 <_ZN8Odometry12calcPotitionEv+0x200>)
 8004258:	f7fc f9e6 	bl	8000628 <__aeabi_dmul>
 800425c:	4602      	mov	r2, r0
 800425e:	460b      	mov	r3, r1
 8004260:	4620      	mov	r0, r4
 8004262:	4629      	mov	r1, r5
 8004264:	f7fc f82a 	bl	80002bc <__adddf3>
 8004268:	4603      	mov	r3, r0
 800426a:	460c      	mov	r4, r1
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	ed93 7b08 	vldr	d7, [r3, #32]
 800427e:	eeb0 0a47 	vmov.f32	s0, s14
 8004282:	eef0 0a67 	vmov.f32	s1, s15
 8004286:	f00e fba7 	bl	80129d8 <sin>
 800428a:	ec51 0b10 	vmov	r0, r1, d0
 800428e:	f04f 0200 	mov.w	r2, #0
 8004292:	4b19      	ldr	r3, [pc, #100]	; (80042f8 <_ZN8Odometry12calcPotitionEv+0x200>)
 8004294:	f7fc f9c8 	bl	8000628 <__aeabi_dmul>
 8004298:	4602      	mov	r2, r0
 800429a:	460b      	mov	r3, r1
 800429c:	4620      	mov	r0, r4
 800429e:	4629      	mov	r1, r5
 80042a0:	f7fc f80c 	bl	80002bc <__adddf3>
 80042a4:	4603      	mov	r3, r0
 80042a6:	460c      	mov	r4, r1
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

	monitor_x = x_sens_;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 80042b4:	4618      	mov	r0, r3
 80042b6:	4621      	mov	r1, r4
 80042b8:	f7fc fcae 	bl	8000c18 <__aeabi_d2f>
 80042bc:	4602      	mov	r2, r0
 80042be:	4b0f      	ldr	r3, [pc, #60]	; (80042fc <_ZN8Odometry12calcPotitionEv+0x204>)
 80042c0:	601a      	str	r2, [r3, #0]
	monitor_y = y_sens_;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 80042c8:	4618      	mov	r0, r3
 80042ca:	4621      	mov	r1, r4
 80042cc:	f7fc fca4 	bl	8000c18 <__aeabi_d2f>
 80042d0:	4602      	mov	r2, r0
 80042d2:	4b0b      	ldr	r3, [pc, #44]	; (8004300 <_ZN8Odometry12calcPotitionEv+0x208>)
 80042d4:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 80042dc:	4618      	mov	r0, r3
 80042de:	4621      	mov	r1, r4
 80042e0:	f7fc fc9a 	bl	8000c18 <__aeabi_d2f>
 80042e4:	4602      	mov	r2, r0
 80042e6:	4b07      	ldr	r3, [pc, #28]	; (8004304 <_ZN8Odometry12calcPotitionEv+0x20c>)
 80042e8:	601a      	str	r2, [r3, #0]
}
 80042ea:	bf00      	nop
 80042ec:	3718      	adds	r7, #24
 80042ee:	46bd      	mov	sp, r7
 80042f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042f4:	f3af 8000 	nop.w
 80042f8:	405b8000 	.word	0x405b8000
 80042fc:	20000294 	.word	0x20000294
 8004300:	20000298 	.word	0x20000298
 8004304:	2000029c 	.word	0x2000029c
 8004308:	d2f1a9fc 	.word	0xd2f1a9fc
 800430c:	3f50624d 	.word	0x3f50624d

08004310 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
	calcPotition();
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f7ff feed 	bl	80040f8 <_ZN8Odometry12calcPotitionEv>
}
 800431e:	bf00      	nop
 8004320:	3708      	adds	r7, #8
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <_ZN8Odometry8getThetaEv>:
{
	return y_sens_;
}

double Odometry::getTheta()
{
 8004326:	b490      	push	{r4, r7}
 8004328:	b082      	sub	sp, #8
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
	return theta_;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8004334:	ec44 3b17 	vmov	d7, r3, r4
}
 8004338:	eeb0 0a47 	vmov.f32	s0, s14
 800433c:	eef0 0a67 	vmov.f32	s1, s15
 8004340:	3708      	adds	r7, #8
 8004342:	46bd      	mov	sp, r7
 8004344:	bc90      	pop	{r4, r7}
 8004346:	4770      	bx	lr

08004348 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 8004348:	b490      	push	{r4, r7}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	f04f 0300 	mov.w	r3, #0
 8004356:	f04f 0400 	mov.w	r4, #0
 800435a:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = 0;
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	f04f 0300 	mov.w	r3, #0
 8004364:	f04f 0400 	mov.w	r4, #0
 8004368:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	theta_ = 0;
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	f04f 0300 	mov.w	r3, #0
 8004372:	f04f 0400 	mov.w	r4, #0
 8004376:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 800437a:	bf00      	nop
 800437c:	3708      	adds	r7, #8
 800437e:	46bd      	mov	sp, r7
 8004380:	bc90      	pop	{r4, r7}
 8004382:	4770      	bx	lr

08004384 <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 8004384:	b490      	push	{r4, r7}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	701a      	strb	r2, [r3, #0]
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	f04f 0300 	mov.w	r3, #0
 8004398:	f04f 0400 	mov.w	r4, #0
 800439c:	e9c2 3402 	strd	r3, r4, [r2, #8]
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	f04f 0300 	mov.w	r3, #0
 80043a6:	f04f 0400 	mov.w	r4, #0
 80043aa:	e9c2 3404 	strd	r3, r4, [r2, #16]
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	f04f 0300 	mov.w	r3, #0
 80043b4:	f04f 0400 	mov.w	r4, #0
 80043b8:	e9c2 3406 	strd	r3, r4, [r2, #24]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80043c2:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80043c6:	2200      	movs	r2, #0
 80043c8:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 80043ca:	4a29      	ldr	r2, [pc, #164]	; (8004470 <_ZN13PathFollowingC1Ev+0xec>)
 80043cc:	f04f 0300 	mov.w	r3, #0
 80043d0:	f04f 0400 	mov.w	r4, #0
 80043d4:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 80043d8:	4a25      	ldr	r2, [pc, #148]	; (8004470 <_ZN13PathFollowingC1Ev+0xec>)
 80043da:	f04f 0300 	mov.w	r3, #0
 80043de:	f04f 0400 	mov.w	r4, #0
 80043e2:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 80043e6:	4a22      	ldr	r2, [pc, #136]	; (8004470 <_ZN13PathFollowingC1Ev+0xec>)
 80043e8:	f04f 0300 	mov.w	r3, #0
 80043ec:	f04f 0400 	mov.w	r4, #0
 80043f0:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 80043f4:	4a1f      	ldr	r2, [pc, #124]	; (8004474 <_ZN13PathFollowingC1Ev+0xf0>)
 80043f6:	f04f 0300 	mov.w	r3, #0
 80043fa:	f04f 0400 	mov.w	r4, #0
 80043fe:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 8004402:	4a1c      	ldr	r2, [pc, #112]	; (8004474 <_ZN13PathFollowingC1Ev+0xf0>)
 8004404:	f04f 0300 	mov.w	r3, #0
 8004408:	f04f 0400 	mov.w	r4, #0
 800440c:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 8004410:	4a18      	ldr	r2, [pc, #96]	; (8004474 <_ZN13PathFollowingC1Ev+0xf0>)
 8004412:	f04f 0300 	mov.w	r3, #0
 8004416:	f04f 0400 	mov.w	r4, #0
 800441a:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 800441e:	4a15      	ldr	r2, [pc, #84]	; (8004474 <_ZN13PathFollowingC1Ev+0xf0>)
 8004420:	f04f 0300 	mov.w	r3, #0
 8004424:	f04f 0400 	mov.w	r4, #0
 8004428:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 800442c:	4a11      	ldr	r2, [pc, #68]	; (8004474 <_ZN13PathFollowingC1Ev+0xf0>)
 800442e:	f04f 0300 	mov.w	r3, #0
 8004432:	f04f 0400 	mov.w	r4, #0
 8004436:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 800443a:	4a0e      	ldr	r2, [pc, #56]	; (8004474 <_ZN13PathFollowingC1Ev+0xf0>)
 800443c:	f04f 0300 	mov.w	r3, #0
 8004440:	f04f 0400 	mov.w	r4, #0
 8004444:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 8004448:	4a0b      	ldr	r2, [pc, #44]	; (8004478 <_ZN13PathFollowingC1Ev+0xf4>)
 800444a:	f04f 0300 	mov.w	r3, #0
 800444e:	f04f 0400 	mov.w	r4, #0
 8004452:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 8004456:	4a08      	ldr	r2, [pc, #32]	; (8004478 <_ZN13PathFollowingC1Ev+0xf4>)
 8004458:	f04f 0300 	mov.w	r3, #0
 800445c:	f04f 0400 	mov.w	r4, #0
 8004460:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4618      	mov	r0, r3
 8004468:	3708      	adds	r7, #8
 800446a:	46bd      	mov	sp, r7
 800446c:	bc90      	pop	{r4, r7}
 800446e:	4770      	bx	lr
 8004470:	2003eda8 	.word	0x2003eda8
 8004474:	2003ed38 	.word	0x2003ed38
 8004478:	2003ed98 	.word	0x2003ed98

0800447c <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b088      	sub	sp, #32
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 8004484:	f001 fc76 	bl	8005d74 <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 8004488:	f107 0318 	add.w	r3, r7, #24
 800448c:	2201      	movs	r2, #1
 800448e:	4915      	ldr	r1, [pc, #84]	; (80044e4 <_ZN13PathFollowing4initEv+0x68>)
 8004490:	4815      	ldr	r0, [pc, #84]	; (80044e8 <_ZN13PathFollowing4initEv+0x6c>)
 8004492:	f7fd f963 	bl	800175c <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 8004496:	f107 0310 	add.w	r3, r7, #16
 800449a:	2201      	movs	r2, #1
 800449c:	4913      	ldr	r1, [pc, #76]	; (80044ec <_ZN13PathFollowing4initEv+0x70>)
 800449e:	4812      	ldr	r0, [pc, #72]	; (80044e8 <_ZN13PathFollowing4initEv+0x6c>)
 80044a0:	f7fd f95c 	bl	800175c <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 80044a4:	f107 0308 	add.w	r3, r7, #8
 80044a8:	2201      	movs	r2, #1
 80044aa:	4911      	ldr	r1, [pc, #68]	; (80044f0 <_ZN13PathFollowing4initEv+0x74>)
 80044ac:	480e      	ldr	r0, [pc, #56]	; (80044e8 <_ZN13PathFollowing4initEv+0x6c>)
 80044ae:	f7fd f955 	bl	800175c <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 80044b2:	ed97 7b06 	vldr	d7, [r7, #24]
 80044b6:	ed97 6b04 	vldr	d6, [r7, #16]
 80044ba:	ed97 5b02 	vldr	d5, [r7, #8]
 80044be:	eeb0 2a45 	vmov.f32	s4, s10
 80044c2:	eef0 2a65 	vmov.f32	s5, s11
 80044c6:	eeb0 1a46 	vmov.f32	s2, s12
 80044ca:	eef0 1a66 	vmov.f32	s3, s13
 80044ce:	eeb0 0a47 	vmov.f32	s0, s14
 80044d2:	eef0 0a67 	vmov.f32	s1, s15
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 f80c 	bl	80044f4 <_ZN13PathFollowing7setGainEddd>
}
 80044dc:	bf00      	nop
 80044de:	3720      	adds	r7, #32
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	08017f7c 	.word	0x08017f7c
 80044e8:	08017f84 	.word	0x08017f84
 80044ec:	08017f8c 	.word	0x08017f8c
 80044f0:	08017f94 	.word	0x08017f94

080044f4 <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 80044f4:	b490      	push	{r4, r7}
 80044f6:	b088      	sub	sp, #32
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	61f8      	str	r0, [r7, #28]
 80044fc:	ed87 0b04 	vstr	d0, [r7, #16]
 8004500:	ed87 1b02 	vstr	d1, [r7, #8]
 8004504:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 8004508:	4a09      	ldr	r2, [pc, #36]	; (8004530 <_ZN13PathFollowing7setGainEddd+0x3c>)
 800450a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800450e:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 8004512:	4a07      	ldr	r2, [pc, #28]	; (8004530 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8004514:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004518:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 800451c:	4a04      	ldr	r2, [pc, #16]	; (8004530 <_ZN13PathFollowing7setGainEddd+0x3c>)
 800451e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004522:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 8004526:	bf00      	nop
 8004528:	3720      	adds	r7, #32
 800452a:	46bd      	mov	sp, r7
 800452c:	bc90      	pop	{r4, r7}
 800452e:	4770      	bx	lr
 8004530:	2003eda8 	.word	0x2003eda8

08004534 <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 800453c:	2088      	movs	r0, #136	; 0x88
 800453e:	f7fd fc5e 	bl	8001dfe <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 8004542:	2080      	movs	r0, #128	; 0x80
 8004544:	f7fd fc5b 	bl	8001dfe <INA260_init>
}
 8004548:	bf00      	nop
 800454a:	3708      	adds	r7, #8
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 8004550:	b590      	push	{r4, r7, lr}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 8004558:	2188      	movs	r1, #136	; 0x88
 800455a:	2002      	movs	r0, #2
 800455c:	f7fd fbec 	bl	8001d38 <INA260_read>
 8004560:	4603      	mov	r3, r0
 8004562:	4618      	mov	r0, r3
 8004564:	f7fb fff6 	bl	8000554 <__aeabi_i2d>
 8004568:	a30c      	add	r3, pc, #48	; (adr r3, 800459c <_ZN11PowerSensor12updateValuesEv+0x4c>)
 800456a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800456e:	f7fc f85b 	bl	8000628 <__aeabi_dmul>
 8004572:	4603      	mov	r3, r0
 8004574:	460c      	mov	r4, r1
 8004576:	4618      	mov	r0, r3
 8004578:	4621      	mov	r1, r4
 800457a:	f7fc fb4d 	bl	8000c18 <__aeabi_d2f>
 800457e:	4602      	mov	r2, r0
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	4a03      	ldr	r2, [pc, #12]	; (8004598 <_ZN11PowerSensor12updateValuesEv+0x48>)
 800458a:	6013      	str	r3, [r2, #0]
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	bd90      	pop	{r4, r7, pc}
 8004594:	f3af 8000 	nop.w
 8004598:	200002a0 	.word	0x200002a0
 800459c:	47ae147b 	.word	0x47ae147b
 80045a0:	3f547ae1 	.word	0x3f547ae1

080045a4 <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	ee07 3a90 	vmov	s15, r3

}
 80045b4:	eeb0 0a67 	vmov.f32	s0, s15
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
	...

080045c4 <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 80045cc:	2300      	movs	r3, #0
 80045ce:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 80045d0:	2102      	movs	r1, #2
 80045d2:	4822      	ldr	r0, [pc, #136]	; (800465c <_ZN12RotarySwitch8getValueEv+0x98>)
 80045d4:	f004 ff44 	bl	8009460 <HAL_GPIO_ReadPin>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	bf0c      	ite	eq
 80045de:	2301      	moveq	r3, #1
 80045e0:	2300      	movne	r3, #0
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d003      	beq.n	80045f0 <_ZN12RotarySwitch8getValueEv+0x2c>
 80045e8:	89fb      	ldrh	r3, [r7, #14]
 80045ea:	f043 0301 	orr.w	r3, r3, #1
 80045ee:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 80045f0:	2108      	movs	r1, #8
 80045f2:	481a      	ldr	r0, [pc, #104]	; (800465c <_ZN12RotarySwitch8getValueEv+0x98>)
 80045f4:	f004 ff34 	bl	8009460 <HAL_GPIO_ReadPin>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	bf0c      	ite	eq
 80045fe:	2301      	moveq	r3, #1
 8004600:	2300      	movne	r3, #0
 8004602:	b2db      	uxtb	r3, r3
 8004604:	2b00      	cmp	r3, #0
 8004606:	d003      	beq.n	8004610 <_ZN12RotarySwitch8getValueEv+0x4c>
 8004608:	89fb      	ldrh	r3, [r7, #14]
 800460a:	f043 0302 	orr.w	r3, r3, #2
 800460e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8004610:	2110      	movs	r1, #16
 8004612:	4812      	ldr	r0, [pc, #72]	; (800465c <_ZN12RotarySwitch8getValueEv+0x98>)
 8004614:	f004 ff24 	bl	8009460 <HAL_GPIO_ReadPin>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	bf0c      	ite	eq
 800461e:	2301      	moveq	r3, #1
 8004620:	2300      	movne	r3, #0
 8004622:	b2db      	uxtb	r3, r3
 8004624:	2b00      	cmp	r3, #0
 8004626:	d003      	beq.n	8004630 <_ZN12RotarySwitch8getValueEv+0x6c>
 8004628:	89fb      	ldrh	r3, [r7, #14]
 800462a:	f043 0304 	orr.w	r3, r3, #4
 800462e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 8004630:	2180      	movs	r1, #128	; 0x80
 8004632:	480a      	ldr	r0, [pc, #40]	; (800465c <_ZN12RotarySwitch8getValueEv+0x98>)
 8004634:	f004 ff14 	bl	8009460 <HAL_GPIO_ReadPin>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	bf0c      	ite	eq
 800463e:	2301      	moveq	r3, #1
 8004640:	2300      	movne	r3, #0
 8004642:	b2db      	uxtb	r3, r3
 8004644:	2b00      	cmp	r3, #0
 8004646:	d003      	beq.n	8004650 <_ZN12RotarySwitch8getValueEv+0x8c>
 8004648:	89fb      	ldrh	r3, [r7, #14]
 800464a:	f043 0308 	orr.w	r3, r3, #8
 800464e:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8004650:	89fb      	ldrh	r3, [r7, #14]

}
 8004652:	4618      	mov	r0, r3
 8004654:	3710      	adds	r7, #16
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	40020c00 	.word	0x40020c00

08004660 <_ZN10SideSensorC1Ev>:
#include "SideSensor.hpp"

uint16_t mon_status;
uint16_t mon_cnt_l, mon_cnt_r;

SideSensor::SideSensor() : status_(0), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false)
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	801a      	strh	r2, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	805a      	strh	r2, [r3, #2]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	809a      	strh	r2, [r3, #4]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	719a      	strb	r2, [r3, #6]
{

}
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4618      	mov	r0, r3
 8004684:	370c      	adds	r7, #12
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
	...

08004690 <_ZN10SideSensor12updateStatusEv>:
	}

}

void SideSensor::updateStatus()
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
	static bool white_flag1 = false;
	static bool white_flag2 = false;
	static uint16_t cnt_l, cnt_r;

	if(ignore_flag_ == false){
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	799b      	ldrb	r3, [r3, #6]
 800469c:	f083 0301 	eor.w	r3, r3, #1
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	f000 80c7 	beq.w	8004836 <_ZN10SideSensor12updateStatusEv+0x1a6>

		if(white_flag1 == false){
 80046a8:	4b65      	ldr	r3, [pc, #404]	; (8004840 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	f083 0301 	eor.w	r3, r3, #1
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d027      	beq.n	8004706 <_ZN10SideSensor12updateStatusEv+0x76>
			if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 80046b6:	2104      	movs	r1, #4
 80046b8:	4862      	ldr	r0, [pc, #392]	; (8004844 <_ZN10SideSensor12updateStatusEv+0x1b4>)
 80046ba:	f004 fed1 	bl	8009460 <HAL_GPIO_ReadPin>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	bf0c      	ite	eq
 80046c4:	2301      	moveq	r3, #1
 80046c6:	2300      	movne	r3, #0
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d006      	beq.n	80046dc <_ZN10SideSensor12updateStatusEv+0x4c>
				cnt_r++;
 80046ce:	4b5e      	ldr	r3, [pc, #376]	; (8004848 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 80046d0:	881b      	ldrh	r3, [r3, #0]
 80046d2:	3301      	adds	r3, #1
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	4b5c      	ldr	r3, [pc, #368]	; (8004848 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 80046d8:	801a      	strh	r2, [r3, #0]
 80046da:	e002      	b.n	80046e2 <_ZN10SideSensor12updateStatusEv+0x52>
			}
			else{
				cnt_r = 0;
 80046dc:	4b5a      	ldr	r3, [pc, #360]	; (8004848 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 80046de:	2200      	movs	r2, #0
 80046e0:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 80046e2:	4b59      	ldr	r3, [pc, #356]	; (8004848 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 80046e4:	881b      	ldrh	r3, [r3, #0]
 80046e6:	2b04      	cmp	r3, #4
 80046e8:	d93f      	bls.n	800476a <_ZN10SideSensor12updateStatusEv+0xda>
				status_ |= 0x01;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	881b      	ldrh	r3, [r3, #0]
 80046ee:	f043 0301 	orr.w	r3, r3, #1
 80046f2:	b29a      	uxth	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	801a      	strh	r2, [r3, #0]
				white_flag1 = true;
 80046f8:	4b51      	ldr	r3, [pc, #324]	; (8004840 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 80046fa:	2201      	movs	r2, #1
 80046fc:	701a      	strb	r2, [r3, #0]
				cnt_r = 0;
 80046fe:	4b52      	ldr	r3, [pc, #328]	; (8004848 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004700:	2200      	movs	r2, #0
 8004702:	801a      	strh	r2, [r3, #0]
 8004704:	e031      	b.n	800476a <_ZN10SideSensor12updateStatusEv+0xda>
			}

		}
		else if(white_flag1 == true){
 8004706:	4b4e      	ldr	r3, [pc, #312]	; (8004840 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d02d      	beq.n	800476a <_ZN10SideSensor12updateStatusEv+0xda>
			if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 800470e:	2104      	movs	r1, #4
 8004710:	484c      	ldr	r0, [pc, #304]	; (8004844 <_ZN10SideSensor12updateStatusEv+0x1b4>)
 8004712:	f004 fea5 	bl	8009460 <HAL_GPIO_ReadPin>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	bf14      	ite	ne
 800471c:	2301      	movne	r3, #1
 800471e:	2300      	moveq	r3, #0
 8004720:	b2db      	uxtb	r3, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	d006      	beq.n	8004734 <_ZN10SideSensor12updateStatusEv+0xa4>
				cnt_r++;
 8004726:	4b48      	ldr	r3, [pc, #288]	; (8004848 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004728:	881b      	ldrh	r3, [r3, #0]
 800472a:	3301      	adds	r3, #1
 800472c:	b29a      	uxth	r2, r3
 800472e:	4b46      	ldr	r3, [pc, #280]	; (8004848 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004730:	801a      	strh	r2, [r3, #0]
 8004732:	e002      	b.n	800473a <_ZN10SideSensor12updateStatusEv+0xaa>
			}
			else{
				cnt_r = 0;
 8004734:	4b44      	ldr	r3, [pc, #272]	; (8004848 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004736:	2200      	movs	r2, #0
 8004738:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 800473a:	4b43      	ldr	r3, [pc, #268]	; (8004848 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 800473c:	881b      	ldrh	r3, [r3, #0]
 800473e:	2b04      	cmp	r3, #4
 8004740:	d913      	bls.n	800476a <_ZN10SideSensor12updateStatusEv+0xda>
				status_ ^= 0x01;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	881b      	ldrh	r3, [r3, #0]
 8004746:	f083 0301 	eor.w	r3, r3, #1
 800474a:	b29a      	uxth	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	801a      	strh	r2, [r3, #0]
				white_flag1 = false;
 8004750:	4b3b      	ldr	r3, [pc, #236]	; (8004840 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 8004752:	2200      	movs	r2, #0
 8004754:	701a      	strb	r2, [r3, #0]

				white_line_cnt_r_++;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	889b      	ldrh	r3, [r3, #4]
 800475a:	3301      	adds	r3, #1
 800475c:	b29a      	uxth	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	809a      	strh	r2, [r3, #4]
				mon_cnt_r = white_line_cnt_r_;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	889a      	ldrh	r2, [r3, #4]
 8004766:	4b39      	ldr	r3, [pc, #228]	; (800484c <_ZN10SideSensor12updateStatusEv+0x1bc>)
 8004768:	801a      	strh	r2, [r3, #0]
			}
		}


		if(white_flag2 == false){
 800476a:	4b39      	ldr	r3, [pc, #228]	; (8004850 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	f083 0301 	eor.w	r3, r3, #1
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b00      	cmp	r3, #0
 8004776:	d027      	beq.n	80047c8 <_ZN10SideSensor12updateStatusEv+0x138>
			if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 8004778:	f44f 7180 	mov.w	r1, #256	; 0x100
 800477c:	4835      	ldr	r0, [pc, #212]	; (8004854 <_ZN10SideSensor12updateStatusEv+0x1c4>)
 800477e:	f004 fe6f 	bl	8009460 <HAL_GPIO_ReadPin>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	bf0c      	ite	eq
 8004788:	2301      	moveq	r3, #1
 800478a:	2300      	movne	r3, #0
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	d006      	beq.n	80047a0 <_ZN10SideSensor12updateStatusEv+0x110>
				cnt_l++;
 8004792:	4b31      	ldr	r3, [pc, #196]	; (8004858 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004794:	881b      	ldrh	r3, [r3, #0]
 8004796:	3301      	adds	r3, #1
 8004798:	b29a      	uxth	r2, r3
 800479a:	4b2f      	ldr	r3, [pc, #188]	; (8004858 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 800479c:	801a      	strh	r2, [r3, #0]
 800479e:	e002      	b.n	80047a6 <_ZN10SideSensor12updateStatusEv+0x116>
			}
			else{
				cnt_l = 0;
 80047a0:	4b2d      	ldr	r3, [pc, #180]	; (8004858 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 80047a6:	4b2c      	ldr	r3, [pc, #176]	; (8004858 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 80047a8:	881b      	ldrh	r3, [r3, #0]
 80047aa:	2b04      	cmp	r3, #4
 80047ac:	d90c      	bls.n	80047c8 <_ZN10SideSensor12updateStatusEv+0x138>
				status_ |= 0x02;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	881b      	ldrh	r3, [r3, #0]
 80047b2:	f043 0302 	orr.w	r3, r3, #2
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	801a      	strh	r2, [r3, #0]
				white_flag2 = true;
 80047bc:	4b24      	ldr	r3, [pc, #144]	; (8004850 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 80047be:	2201      	movs	r2, #1
 80047c0:	701a      	strb	r2, [r3, #0]
				cnt_l = 0;
 80047c2:	4b25      	ldr	r3, [pc, #148]	; (8004858 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	801a      	strh	r2, [r3, #0]
			}

		}
		if(white_flag2 == true){
 80047c8:	4b21      	ldr	r3, [pc, #132]	; (8004850 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d02e      	beq.n	800482e <_ZN10SideSensor12updateStatusEv+0x19e>
			if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 80047d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80047d4:	481f      	ldr	r0, [pc, #124]	; (8004854 <_ZN10SideSensor12updateStatusEv+0x1c4>)
 80047d6:	f004 fe43 	bl	8009460 <HAL_GPIO_ReadPin>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	bf14      	ite	ne
 80047e0:	2301      	movne	r3, #1
 80047e2:	2300      	moveq	r3, #0
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d006      	beq.n	80047f8 <_ZN10SideSensor12updateStatusEv+0x168>
				cnt_l++;
 80047ea:	4b1b      	ldr	r3, [pc, #108]	; (8004858 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 80047ec:	881b      	ldrh	r3, [r3, #0]
 80047ee:	3301      	adds	r3, #1
 80047f0:	b29a      	uxth	r2, r3
 80047f2:	4b19      	ldr	r3, [pc, #100]	; (8004858 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 80047f4:	801a      	strh	r2, [r3, #0]
 80047f6:	e002      	b.n	80047fe <_ZN10SideSensor12updateStatusEv+0x16e>
			}
			else{
				cnt_l = 0;
 80047f8:	4b17      	ldr	r3, [pc, #92]	; (8004858 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 80047fa:	2200      	movs	r2, #0
 80047fc:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 80047fe:	4b16      	ldr	r3, [pc, #88]	; (8004858 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004800:	881b      	ldrh	r3, [r3, #0]
 8004802:	2b04      	cmp	r3, #4
 8004804:	d913      	bls.n	800482e <_ZN10SideSensor12updateStatusEv+0x19e>
				status_ ^= 0x02;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	881b      	ldrh	r3, [r3, #0]
 800480a:	f083 0302 	eor.w	r3, r3, #2
 800480e:	b29a      	uxth	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	801a      	strh	r2, [r3, #0]
				white_flag2 = false;
 8004814:	4b0e      	ldr	r3, [pc, #56]	; (8004850 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 8004816:	2200      	movs	r2, #0
 8004818:	701a      	strb	r2, [r3, #0]

				white_line_cnt_l_++;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	885b      	ldrh	r3, [r3, #2]
 800481e:	3301      	adds	r3, #1
 8004820:	b29a      	uxth	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	805a      	strh	r2, [r3, #2]
				mon_cnt_l = white_line_cnt_l_;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	885a      	ldrh	r2, [r3, #2]
 800482a:	4b0c      	ldr	r3, [pc, #48]	; (800485c <_ZN10SideSensor12updateStatusEv+0x1cc>)
 800482c:	801a      	strh	r2, [r3, #0]
			}

		}

		mon_status = status_;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	881a      	ldrh	r2, [r3, #0]
 8004832:	4b0b      	ldr	r3, [pc, #44]	; (8004860 <_ZN10SideSensor12updateStatusEv+0x1d0>)
 8004834:	801a      	strh	r2, [r3, #0]
	}

}
 8004836:	bf00      	nop
 8004838:	3708      	adds	r7, #8
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	200002aa 	.word	0x200002aa
 8004844:	40021000 	.word	0x40021000
 8004848:	200002ae 	.word	0x200002ae
 800484c:	200002a8 	.word	0x200002a8
 8004850:	200002ab 	.word	0x200002ab
 8004854:	40020c00 	.word	0x40020c00
 8004858:	200002ac 	.word	0x200002ac
 800485c:	200002a6 	.word	0x200002a6
 8004860:	200002a4 	.word	0x200002a4

08004864 <_ZN10SideSensor16getWhiteLineCntREv>:
{
	return white_line_cnt_l_;
}

uint16_t SideSensor::getWhiteLineCntR()
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
	return white_line_cnt_r_;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	889b      	ldrh	r3, [r3, #4]
}
 8004870:	4618      	mov	r0, r3
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <_ZN10SideSensor17resetWhiteLineCntEv>:

void SideSensor::resetWhiteLineCnt()
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	805a      	strh	r2, [r3, #2]
	white_line_cnt_r_ = 0;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	809a      	strh	r2, [r3, #4]
}
 8004890:	bf00      	nop
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	719a      	strb	r2, [r3, #6]
}
 80048aa:	bf00      	nop
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr

080048b6 <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 80048b6:	b480      	push	{r7}
 80048b8:	b083      	sub	sp, #12
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	719a      	strb	r2, [r3, #6]
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	799b      	ldrb	r3, [r3, #6]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	4a10      	ldr	r2, [pc, #64]	; (8004938 <_ZN20SystemIdentificationC1EP6LoggerP5Motor+0x50>)
 80048f8:	3308      	adds	r3, #8
 80048fa:	4611      	mov	r1, r2
 80048fc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004900:	4618      	mov	r0, r3
 8004902:	f00f f8a5 	bl	8013a50 <memcpy>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f04f 0200 	mov.w	r2, #0
 8004914:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	68ba      	ldr	r2, [r7, #8]
 8004924:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4618      	mov	r0, r3
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	08017fb8 	.word	0x08017fb8

0800493c <_ZN20SystemIdentification13inOutputStoreEf>:
{

}

void SystemIdentification::inOutputStore(float output)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b082      	sub	sp, #8
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	ed87 0a00 	vstr	s0, [r7]
	if(processing_flag_ == true){
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800494e:	2b00      	cmp	r3, #0
 8004950:	d010      	beq.n	8004974 <_ZN20SystemIdentification13inOutputStoreEf+0x38>
		logger_->storeLog(output);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	ed97 0a00 	vldr	s0, [r7]
 800495a:	4618      	mov	r0, r3
 800495c:	f7ff f878 	bl	8003a50 <_ZN6Logger8storeLogEf>
		logger_->storeLog2(inputVal_);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 800496a:	eeb0 0a67 	vmov.f32	s0, s15
 800496e:	4610      	mov	r0, r2
 8004970:	f7ff f8aa 	bl	8003ac8 <_ZN6Logger9storeLog2Ef>
	}

}
 8004974:	bf00      	nop
 8004976:	3708      	adds	r7, #8
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <_ZN20SystemIdentification12inOutputSaveEv>:

void SystemIdentification::inOutputSave()
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
	logger_->saveLogs("sysident", "MSIGRES.txt");
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a07      	ldr	r2, [pc, #28]	; (80049a8 <_ZN20SystemIdentification12inOutputSaveEv+0x2c>)
 800498a:	4908      	ldr	r1, [pc, #32]	; (80049ac <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 800498c:	4618      	mov	r0, r3
 800498e:	f7ff f982 	bl	8003c96 <_ZN6Logger8saveLogsEPKcS1_>
	logger_->saveLogs2("sysident", "INPUT.txt");
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a06      	ldr	r2, [pc, #24]	; (80049b0 <_ZN20SystemIdentification12inOutputSaveEv+0x34>)
 8004998:	4904      	ldr	r1, [pc, #16]	; (80049ac <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 800499a:	4618      	mov	r0, r3
 800499c:	f7ff f98e 	bl	8003cbc <_ZN6Logger9saveLogs2EPKcS1_>
}
 80049a0:	bf00      	nop
 80049a2:	3708      	adds	r7, #8
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	080181ac 	.word	0x080181ac
 80049ac:	080181b8 	.word	0x080181b8
 80049b0:	080181c4 	.word	0x080181c4

080049b4 <_ZN20SystemIdentification10updateMsigEv>:

void SystemIdentification::updateMsig()
{
 80049b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
	if(processing_flag_ == true){
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d046      	beq.n	8004a54 <_ZN20SystemIdentification10updateMsigEv+0xa0>
		inputVal_ = inputRatio_ * msigArray_[msigArrayIdx_];
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	ed93 7a81 	vldr	s14, [r3, #516]	; 0x204
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 80049d2:	461a      	mov	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	3204      	adds	r2, #4
 80049d8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80049dc:	ee07 3a90 	vmov	s15, r3
 80049e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		msigArrayIdx_++;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 80049f4:	3301      	adds	r3, #1
 80049f6:	b29a      	uxth	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
		mon_msig = inputVal_;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004a04:	4a15      	ldr	r2, [pc, #84]	; (8004a5c <_ZN20SystemIdentification10updateMsigEv+0xa8>)
 8004a06:	6013      	str	r3, [r2, #0]

		if(msigArrayIdx_ >= MSIG_SIZE) msigArrayIdx_ = MSIG_SIZE;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8004a0e:	2bf9      	cmp	r3, #249	; 0xf9
 8004a10:	d903      	bls.n	8004a1a <_ZN20SystemIdentification10updateMsigEv+0x66>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	22fa      	movs	r2, #250	; 0xfa
 8004a16:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc

		motor_->setRatio(inputVal_, -inputVal_);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685c      	ldr	r4, [r3, #4]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7fb fda7 	bl	8000578 <__aeabi_f2d>
 8004a2a:	4605      	mov	r5, r0
 8004a2c:	460e      	mov	r6, r1
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 8004a34:	eef1 7a67 	vneg.f32	s15, s15
 8004a38:	ee17 3a90 	vmov	r3, s15
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f7fb fd9b 	bl	8000578 <__aeabi_f2d>
 8004a42:	4602      	mov	r2, r0
 8004a44:	460b      	mov	r3, r1
 8004a46:	ec43 2b11 	vmov	d1, r2, r3
 8004a4a:	ec46 5b10 	vmov	d0, r5, r6
 8004a4e:	4620      	mov	r0, r4
 8004a50:	f7ff faa6 	bl	8003fa0 <_ZN5Motor8setRatioEdd>

	}

}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a5c:	200002b0 	.word	0x200002b0

08004a60 <_ZN20SystemIdentification13setInputRatioEf>:
void SystemIdentification::setInputRatio(float ratio)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	ed87 0a00 	vstr	s0, [r7]
	inputRatio_ = ratio;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <_ZN20SystemIdentification5startEv>:

void SystemIdentification::start()
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
	//logger_->resetLogs();
	logger_->start();
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7ff f9f2 	bl	8003e76 <_ZN6Logger5startEv>
	processing_flag_ = true;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
}
 8004a9a:	bf00      	nop
 8004a9c:	3708      	adds	r7, #8
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	0000      	movs	r0, r0
 8004aa4:	0000      	movs	r0, r0
	...

08004aa8 <_ZN20SystemIdentification4stopEv>:

void SystemIdentification::stop()
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7ff f9ef 	bl	8003e98 <_ZN6Logger4stopEv>
	processing_flag_ = false;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
	msigArrayIdx_ = 0;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
	motor_->setRatio(0, 0);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8004ae8 <_ZN20SystemIdentification4stopEv+0x40>
 8004ad2:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8004ae8 <_ZN20SystemIdentification4stopEv+0x40>
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f7ff fa62 	bl	8003fa0 <_ZN5Motor8setRatioEdd>
}
 8004adc:	bf00      	nop
 8004ade:	3708      	adds	r7, #8
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	f3af 8000 	nop.w
	...

08004af0 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
//#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 8004af0:	b480      	push	{r7}
 8004af2:	b085      	sub	sp, #20
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	607a      	str	r2, [r7, #4]
 8004afc:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f04f 0200 	mov.w	r2, #0
 8004b04:	601a      	str	r2, [r3, #0]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f04f 0200 	mov.w	r2, #0
 8004b0c:	605a      	str	r2, [r3, #4]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f04f 0200 	mov.w	r2, #0
 8004b14:	609a      	str	r2, [r3, #8]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f04f 0200 	mov.w	r2, #0
 8004b1c:	60da      	str	r2, [r3, #12]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f04f 0200 	mov.w	r2, #0
 8004b24:	611a      	str	r2, [r3, #16]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f04f 0200 	mov.w	r2, #0
 8004b2c:	615a      	str	r2, [r3, #20]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f04f 0200 	mov.w	r2, #0
 8004b34:	619a      	str	r2, [r3, #24]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f04f 0200 	mov.w	r2, #0
 8004b3c:	61da      	str	r2, [r3, #28]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f04f 0200 	mov.w	r2, #0
 8004b44:	621a      	str	r2, [r3, #32]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f04f 0200 	mov.w	r2, #0
 8004b4c:	625a      	str	r2, [r3, #36]	; 0x24
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f04f 0200 	mov.w	r2, #0
 8004b64:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	683a      	ldr	r2, [r7, #0]
 8004b76:	639a      	str	r2, [r3, #56]	; 0x38

}
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3714      	adds	r7, #20
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
	...

08004b88 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8004b88:	b590      	push	{r4, r7, lr}
 8004b8a:	b087      	sub	sp, #28
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b94:	f107 020c 	add.w	r2, r7, #12
 8004b98:	f107 0110 	add.w	r1, r7, #16
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7fc fc33 	bl	8001408 <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 8004ba2:	ed97 7a04 	vldr	s14, [r7, #16]
 8004ba6:	edd7 7a03 	vldr	s15, [r7, #12]
 8004baa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004bae:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004bb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004bb6:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 8004bba:	6978      	ldr	r0, [r7, #20]
 8004bbc:	f7fb fcdc 	bl	8000578 <__aeabi_f2d>
 8004bc0:	a30b      	add	r3, pc, #44	; (adr r3, 8004bf0 <_ZN12VelocityCtrl12calcVelocityEv+0x68>)
 8004bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc6:	f7fb fd2f 	bl	8000628 <__aeabi_dmul>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	460c      	mov	r4, r1
 8004bce:	4618      	mov	r0, r3
 8004bd0:	4621      	mov	r1, r4
 8004bd2:	f7fc f821 	bl	8000c18 <__aeabi_d2f>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	ee07 3a90 	vmov	s15, r3
}
 8004be4:	eeb0 0a67 	vmov.f32	s0, s15
 8004be8:	371c      	adds	r7, #28
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd90      	pop	{r4, r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	1ab1d998 	.word	0x1ab1d998
 8004bf4:	3f7830b5 	.word	0x3f7830b5

08004bf8 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 8004bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bfa:	b087      	sub	sp, #28
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	ed93 7a00 	vldr	s14, [r3]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	edd3 7a02 	vldr	s15, [r3, #8]
 8004c0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c10:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d007      	beq.n	8004c2e <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 8004c1e:	4b48      	ldr	r3, [pc, #288]	; (8004d40 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8004c20:	f04f 0200 	mov.w	r2, #0
 8004c24:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	edd3 7a04 	vldr	s15, [r3, #16]
 8004c34:	ed97 7a05 	vldr	s14, [r7, #20]
 8004c38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c3c:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 8004c40:	4b3f      	ldr	r3, [pc, #252]	; (8004d40 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7fb fc97 	bl	8000578 <__aeabi_f2d>
 8004c4a:	4604      	mov	r4, r0
 8004c4c:	460d      	mov	r5, r1
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	ed93 7a06 	vldr	s14, [r3, #24]
 8004c54:	edd7 7a05 	vldr	s15, [r7, #20]
 8004c58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c5c:	ee17 0a90 	vmov	r0, s15
 8004c60:	f7fb fc8a 	bl	8000578 <__aeabi_f2d>
 8004c64:	a334      	add	r3, pc, #208	; (adr r3, 8004d38 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8004c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6a:	f7fb fcdd 	bl	8000628 <__aeabi_dmul>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	460b      	mov	r3, r1
 8004c72:	4620      	mov	r0, r4
 8004c74:	4629      	mov	r1, r5
 8004c76:	f7fb fb21 	bl	80002bc <__adddf3>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	460c      	mov	r4, r1
 8004c7e:	4618      	mov	r0, r3
 8004c80:	4621      	mov	r1, r4
 8004c82:	f7fb ffc9 	bl	8000c18 <__aeabi_d2f>
 8004c86:	4602      	mov	r2, r0
 8004c88:	4b2d      	ldr	r3, [pc, #180]	; (8004d40 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8004c8a:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	ed93 7a05 	vldr	s14, [r3, #20]
 8004c92:	4b2c      	ldr	r3, [pc, #176]	; (8004d44 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8004c94:	edd3 7a00 	vldr	s15, [r3]
 8004c98:	edd7 6a05 	vldr	s13, [r7, #20]
 8004c9c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004ca0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ca4:	ee17 0a90 	vmov	r0, s15
 8004ca8:	f7fb fc66 	bl	8000578 <__aeabi_f2d>
 8004cac:	a322      	add	r3, pc, #136	; (adr r3, 8004d38 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8004cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb2:	f7fb fde3 	bl	800087c <__aeabi_ddiv>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	460c      	mov	r4, r1
 8004cba:	4618      	mov	r0, r3
 8004cbc:	4621      	mov	r1, r4
 8004cbe:	f7fb ffab 	bl	8000c18 <__aeabi_d2f>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 8004cc6:	ed97 7a04 	vldr	s14, [r7, #16]
 8004cca:	edd7 7a03 	vldr	s15, [r7, #12]
 8004cce:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004cd2:	4b1b      	ldr	r3, [pc, #108]	; (8004d40 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8004cd4:	edd3 7a00 	vldr	s15, [r3]
 8004cd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cdc:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8004cea:	edd7 7a02 	vldr	s15, [r7, #8]
 8004cee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cf2:	ee17 0a90 	vmov	r0, s15
 8004cf6:	f7fb fc3f 	bl	8000578 <__aeabi_f2d>
 8004cfa:	4605      	mov	r5, r0
 8004cfc:	460e      	mov	r6, r1
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8004d04:	ed97 7a02 	vldr	s14, [r7, #8]
 8004d08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d0c:	ee17 0a90 	vmov	r0, s15
 8004d10:	f7fb fc32 	bl	8000578 <__aeabi_f2d>
 8004d14:	4602      	mov	r2, r0
 8004d16:	460b      	mov	r3, r1
 8004d18:	ec43 2b11 	vmov	d1, r2, r3
 8004d1c:	ec46 5b10 	vmov	d0, r5, r6
 8004d20:	4620      	mov	r0, r4
 8004d22:	f7ff f93d 	bl	8003fa0 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 8004d26:	4a07      	ldr	r2, [pc, #28]	; (8004d44 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	6013      	str	r3, [r2, #0]
}
 8004d2c:	bf00      	nop
 8004d2e:	371c      	adds	r7, #28
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d34:	f3af 8000 	nop.w
 8004d38:	d2f1a9fc 	.word	0xd2f1a9fc
 8004d3c:	3f50624d 	.word	0x3f50624d
 8004d40:	200002b8 	.word	0x200002b8
 8004d44:	200002b4 	.word	0x200002b4

08004d48 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	ed87 0a02 	vstr	s0, [r7, #8]
 8004d54:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	68ba      	ldr	r2, [r7, #8]
 8004d5c:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	605a      	str	r2, [r3, #4]
}
 8004d64:	bf00      	nop
 8004d66:	3714      	adds	r7, #20
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b085      	sub	sp, #20
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	ed87 0a02 	vstr	s0, [r7, #8]
 8004d7c:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	68ba      	ldr	r2, [r7, #8]
 8004d84:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004d8c:	bf00      	nop
 8004d8e:	3714      	adds	r7, #20
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	ed87 0a02 	vstr	s0, [r7, #8]
 8004da4:	edc7 0a01 	vstr	s1, [r7, #4]
 8004da8:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	68ba      	ldr	r2, [r7, #8]
 8004db0:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	615a      	str	r2, [r3, #20]
}
 8004dbe:	bf00      	nop
 8004dc0:	3714      	adds	r7, #20
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr

08004dca <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 8004dca:	b480      	push	{r7}
 8004dcc:	b085      	sub	sp, #20
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	60f8      	str	r0, [r7, #12]
 8004dd2:	ed87 0a02 	vstr	s0, [r7, #8]
 8004dd6:	edc7 0a01 	vstr	s1, [r7, #4]
 8004dda:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	68ba      	ldr	r2, [r7, #8]
 8004de2:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	683a      	ldr	r2, [r7, #0]
 8004dee:	621a      	str	r2, [r3, #32]
}
 8004df0:	bf00      	nop
 8004df2:	3714      	adds	r7, #20
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
    calcVelocity();
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f7ff febf 	bl	8004b88 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d002      	beq.n	8004e1a <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f7ff feef 	bl	8004bf8 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 8004e1a:	bf00      	nop
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 8004e22:	b480      	push	{r7}
 8004e24:	b083      	sub	sp, #12
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2201      	movs	r2, #1
 8004e36:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 8004e3a:	bf00      	nop
 8004e3c:	370c      	adds	r7, #12
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
	...

08004e48 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5c:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8004e78 <_ZN12VelocityCtrl4stopEv+0x30>
 8004e60:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8004e78 <_ZN12VelocityCtrl4stopEv+0x30>
 8004e64:	4618      	mov	r0, r3
 8004e66:	f7ff f89b 	bl	8003fa0 <_ZN5Motor8setRatioEdd>

}
 8004e6a:	bf00      	nop
 8004e6c:	3708      	adds	r7, #8
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	f3af 8000 	nop.w
	...

08004e80 <HAL_TIM_PeriodElapsedCallback>:
	cppExit(GPIO_Pin);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a1e      	ldr	r2, [pc, #120]	; (8004f08 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d10e      	bne.n	8004eb0 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip100ns();
 8004e92:	f001 fe27 	bl	8006ae4 <cppFlip100ns>

		tim7_timer++;
 8004e96:	4b1d      	ldr	r3, [pc, #116]	; (8004f0c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	4a1b      	ldr	r2, [pc, #108]	; (8004f0c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8004e9e:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8004ea0:	4b1a      	ldr	r3, [pc, #104]	; (8004f0c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a1a      	ldr	r2, [pc, #104]	; (8004f10 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d902      	bls.n	8004eb0 <HAL_TIM_PeriodElapsedCallback+0x30>
 8004eaa:	4b18      	ldr	r3, [pc, #96]	; (8004f0c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8004eac:	2200      	movs	r2, #0
 8004eae:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM6){
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a17      	ldr	r2, [pc, #92]	; (8004f14 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d10e      	bne.n	8004ed8 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip1ms();
 8004eba:	f001 fdc9 	bl	8006a50 <cppFlip1ms>

		tim6_timer++;
 8004ebe:	4b16      	ldr	r3, [pc, #88]	; (8004f18 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	4a14      	ldr	r2, [pc, #80]	; (8004f18 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8004ec6:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8004ec8:	4b13      	ldr	r3, [pc, #76]	; (8004f18 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a10      	ldr	r2, [pc, #64]	; (8004f10 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d902      	bls.n	8004ed8 <HAL_TIM_PeriodElapsedCallback+0x58>
 8004ed2:	4b11      	ldr	r3, [pc, #68]	; (8004f18 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM13){
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a0f      	ldr	r2, [pc, #60]	; (8004f1c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d10e      	bne.n	8004f00 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8004ee2:	f001 fe09 	bl	8006af8 <cppFlip10ms>

		tim13_timer++;
 8004ee6:	4b0e      	ldr	r3, [pc, #56]	; (8004f20 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	3301      	adds	r3, #1
 8004eec:	4a0c      	ldr	r2, [pc, #48]	; (8004f20 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8004eee:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8004ef0:	4b0b      	ldr	r3, [pc, #44]	; (8004f20 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a06      	ldr	r2, [pc, #24]	; (8004f10 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d902      	bls.n	8004f00 <HAL_TIM_PeriodElapsedCallback+0x80>
 8004efa:	4b09      	ldr	r3, [pc, #36]	; (8004f20 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8004efc:	2200      	movs	r2, #0
 8004efe:	601a      	str	r2, [r3, #0]
	}

}
 8004f00:	bf00      	nop
 8004f02:	3708      	adds	r7, #8
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	40001400 	.word	0x40001400
 8004f0c:	2003ea58 	.word	0x2003ea58
 8004f10:	0001869f 	.word	0x0001869f
 8004f14:	40001000 	.word	0x40001000
 8004f18:	2003ea14 	.word	0x2003ea14
 8004f1c:	40001c00 	.word	0x40001c00
 8004f20:	2003ea5c 	.word	0x2003ea5c

08004f24 <init>:

void init()
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004f2e:	4808      	ldr	r0, [pc, #32]	; (8004f50 <init+0x2c>)
 8004f30:	f004 faae 	bl	8009490 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8004f34:	4807      	ldr	r0, [pc, #28]	; (8004f54 <init+0x30>)
 8004f36:	f008 f976 	bl	800d226 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8004f3a:	4807      	ldr	r0, [pc, #28]	; (8004f58 <init+0x34>)
 8004f3c:	f008 f973 	bl	800d226 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8004f40:	4806      	ldr	r0, [pc, #24]	; (8004f5c <init+0x38>)
 8004f42:	f008 f970 	bl	800d226 <HAL_TIM_Base_Start_IT>

	cppInit();
 8004f46:	f001 fce3 	bl	8006910 <cppInit>

	//path_following_initialize();

}
 8004f4a:	bf00      	nop
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	40021000 	.word	0x40021000
 8004f54:	2003eb40 	.word	0x2003eb40
 8004f58:	2003ece4 	.word	0x2003ece4
 8004f5c:	2003ea60 	.word	0x2003ea60

08004f60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004f64:	f002 ff8c 	bl	8007e80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004f68:	f000 f82a 	bl	8004fc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004f6c:	f000 fdbc 	bl	8005ae8 <MX_GPIO_Init>
  MX_DMA_Init();
 8004f70:	f000 fd8a 	bl	8005a88 <MX_DMA_Init>
  MX_I2C2_Init();
 8004f74:	f000 f9e8 	bl	8005348 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8004f78:	f000 fa14 	bl	80053a4 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8004f7c:	f000 fa32 	bl	80053e4 <MX_SPI2_Init>
  MX_TIM1_Init();
 8004f80:	f000 fa66 	bl	8005450 <MX_TIM1_Init>
  MX_TIM4_Init();
 8004f84:	f000 fb70 	bl	8005668 <MX_TIM4_Init>
  MX_TIM8_Init();
 8004f88:	f000 fc3c 	bl	8005804 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8004f8c:	f000 fd52 	bl	8005a34 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8004f90:	f00a f91c 	bl	800f1cc <MX_FATFS_Init>
  MX_TIM6_Init();
 8004f94:	f000 fbcc 	bl	8005730 <MX_TIM6_Init>
  MX_I2C1_Init();
 8004f98:	f000 f9a8 	bl	80052ec <MX_I2C1_Init>
  MX_TIM3_Init();
 8004f9c:	f000 fb00 	bl	80055a0 <MX_TIM3_Init>
  MX_TIM10_Init();
 8004fa0:	f000 fc88 	bl	80058b4 <MX_TIM10_Init>
  MX_TIM11_Init();
 8004fa4:	f000 fcd4 	bl	8005950 <MX_TIM11_Init>
  MX_ADC2_Init();
 8004fa8:	f000 f898 	bl	80050dc <MX_ADC2_Init>
  MX_TIM7_Init();
 8004fac:	f000 fbf6 	bl	800579c <MX_TIM7_Init>
  MX_TIM13_Init();
 8004fb0:	f000 fd1c 	bl	80059ec <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8004fb4:	f7ff ffb6 	bl	8004f24 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8004fb8:	f001 fdbe 	bl	8006b38 <cppLoop>
 8004fbc:	e7fc      	b.n	8004fb8 <main+0x58>
	...

08004fc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b0a4      	sub	sp, #144	; 0x90
 8004fc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004fc6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004fca:	2234      	movs	r2, #52	; 0x34
 8004fcc:	2100      	movs	r1, #0
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f00e fd49 	bl	8013a66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004fd4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004fd8:	2200      	movs	r2, #0
 8004fda:	601a      	str	r2, [r3, #0]
 8004fdc:	605a      	str	r2, [r3, #4]
 8004fde:	609a      	str	r2, [r3, #8]
 8004fe0:	60da      	str	r2, [r3, #12]
 8004fe2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004fe4:	f107 030c 	add.w	r3, r7, #12
 8004fe8:	223c      	movs	r2, #60	; 0x3c
 8004fea:	2100      	movs	r1, #0
 8004fec:	4618      	mov	r0, r3
 8004fee:	f00e fd3a 	bl	8013a66 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	60bb      	str	r3, [r7, #8]
 8004ff6:	4b37      	ldr	r3, [pc, #220]	; (80050d4 <SystemClock_Config+0x114>)
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffa:	4a36      	ldr	r2, [pc, #216]	; (80050d4 <SystemClock_Config+0x114>)
 8004ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005000:	6413      	str	r3, [r2, #64]	; 0x40
 8005002:	4b34      	ldr	r3, [pc, #208]	; (80050d4 <SystemClock_Config+0x114>)
 8005004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800500a:	60bb      	str	r3, [r7, #8]
 800500c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800500e:	2300      	movs	r3, #0
 8005010:	607b      	str	r3, [r7, #4]
 8005012:	4b31      	ldr	r3, [pc, #196]	; (80050d8 <SystemClock_Config+0x118>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a30      	ldr	r2, [pc, #192]	; (80050d8 <SystemClock_Config+0x118>)
 8005018:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800501c:	6013      	str	r3, [r2, #0]
 800501e:	4b2e      	ldr	r3, [pc, #184]	; (80050d8 <SystemClock_Config+0x118>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005026:	607b      	str	r3, [r7, #4]
 8005028:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800502a:	2301      	movs	r3, #1
 800502c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800502e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005032:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005034:	2302      	movs	r3, #2
 8005036:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005038:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800503c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 800503e:	2308      	movs	r3, #8
 8005040:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8005042:	23b4      	movs	r3, #180	; 0xb4
 8005044:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005048:	2302      	movs	r3, #2
 800504a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800504e:	2308      	movs	r3, #8
 8005050:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005054:	2302      	movs	r3, #2
 8005056:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800505a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800505e:	4618      	mov	r0, r3
 8005060:	f005 fe38 	bl	800acd4 <HAL_RCC_OscConfig>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d001      	beq.n	800506e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800506a:	f000 fe7f 	bl	8005d6c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800506e:	f005 f9b3 	bl	800a3d8 <HAL_PWREx_EnableOverDrive>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d001      	beq.n	800507c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8005078:	f000 fe78 	bl	8005d6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800507c:	230f      	movs	r3, #15
 800507e:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005080:	2302      	movs	r3, #2
 8005082:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005084:	2300      	movs	r3, #0
 8005086:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005088:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800508c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800508e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005092:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005094:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005098:	2105      	movs	r1, #5
 800509a:	4618      	mov	r0, r3
 800509c:	f005 f9ec 	bl	800a478 <HAL_RCC_ClockConfig>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d001      	beq.n	80050aa <SystemClock_Config+0xea>
  {
    Error_Handler();
 80050a6:	f000 fe61 	bl	8005d6c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 80050aa:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80050ae:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80050b0:	2300      	movs	r3, #0
 80050b2:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80050b4:	2300      	movs	r3, #0
 80050b6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80050b8:	f107 030c 	add.w	r3, r7, #12
 80050bc:	4618      	mov	r0, r3
 80050be:	f005 fbcb 	bl	800a858 <HAL_RCCEx_PeriphCLKConfig>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d001      	beq.n	80050cc <SystemClock_Config+0x10c>
  {
    Error_Handler();
 80050c8:	f000 fe50 	bl	8005d6c <Error_Handler>
  }
}
 80050cc:	bf00      	nop
 80050ce:	3790      	adds	r7, #144	; 0x90
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	40023800 	.word	0x40023800
 80050d8:	40007000 	.word	0x40007000

080050dc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80050e2:	463b      	mov	r3, r7
 80050e4:	2200      	movs	r2, #0
 80050e6:	601a      	str	r2, [r3, #0]
 80050e8:	605a      	str	r2, [r3, #4]
 80050ea:	609a      	str	r2, [r3, #8]
 80050ec:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80050ee:	4b7c      	ldr	r3, [pc, #496]	; (80052e0 <MX_ADC2_Init+0x204>)
 80050f0:	4a7c      	ldr	r2, [pc, #496]	; (80052e4 <MX_ADC2_Init+0x208>)
 80050f2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80050f4:	4b7a      	ldr	r3, [pc, #488]	; (80052e0 <MX_ADC2_Init+0x204>)
 80050f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80050fa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80050fc:	4b78      	ldr	r3, [pc, #480]	; (80052e0 <MX_ADC2_Init+0x204>)
 80050fe:	2200      	movs	r2, #0
 8005100:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8005102:	4b77      	ldr	r3, [pc, #476]	; (80052e0 <MX_ADC2_Init+0x204>)
 8005104:	2201      	movs	r2, #1
 8005106:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8005108:	4b75      	ldr	r3, [pc, #468]	; (80052e0 <MX_ADC2_Init+0x204>)
 800510a:	2201      	movs	r2, #1
 800510c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800510e:	4b74      	ldr	r3, [pc, #464]	; (80052e0 <MX_ADC2_Init+0x204>)
 8005110:	2200      	movs	r2, #0
 8005112:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005116:	4b72      	ldr	r3, [pc, #456]	; (80052e0 <MX_ADC2_Init+0x204>)
 8005118:	2200      	movs	r2, #0
 800511a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800511c:	4b70      	ldr	r3, [pc, #448]	; (80052e0 <MX_ADC2_Init+0x204>)
 800511e:	4a72      	ldr	r2, [pc, #456]	; (80052e8 <MX_ADC2_Init+0x20c>)
 8005120:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005122:	4b6f      	ldr	r3, [pc, #444]	; (80052e0 <MX_ADC2_Init+0x204>)
 8005124:	2200      	movs	r2, #0
 8005126:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8005128:	4b6d      	ldr	r3, [pc, #436]	; (80052e0 <MX_ADC2_Init+0x204>)
 800512a:	220e      	movs	r2, #14
 800512c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800512e:	4b6c      	ldr	r3, [pc, #432]	; (80052e0 <MX_ADC2_Init+0x204>)
 8005130:	2201      	movs	r2, #1
 8005132:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005136:	4b6a      	ldr	r3, [pc, #424]	; (80052e0 <MX_ADC2_Init+0x204>)
 8005138:	2201      	movs	r2, #1
 800513a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800513c:	4868      	ldr	r0, [pc, #416]	; (80052e0 <MX_ADC2_Init+0x204>)
 800513e:	f002 ff33 	bl	8007fa8 <HAL_ADC_Init>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d001      	beq.n	800514c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8005148:	f000 fe10 	bl	8005d6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800514c:	230a      	movs	r3, #10
 800514e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005150:	2301      	movs	r3, #1
 8005152:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8005154:	2306      	movs	r3, #6
 8005156:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005158:	463b      	mov	r3, r7
 800515a:	4619      	mov	r1, r3
 800515c:	4860      	ldr	r0, [pc, #384]	; (80052e0 <MX_ADC2_Init+0x204>)
 800515e:	f003 f877 	bl	8008250 <HAL_ADC_ConfigChannel>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d001      	beq.n	800516c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8005168:	f000 fe00 	bl	8005d6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800516c:	230b      	movs	r3, #11
 800516e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8005170:	2302      	movs	r3, #2
 8005172:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005174:	463b      	mov	r3, r7
 8005176:	4619      	mov	r1, r3
 8005178:	4859      	ldr	r0, [pc, #356]	; (80052e0 <MX_ADC2_Init+0x204>)
 800517a:	f003 f869 	bl	8008250 <HAL_ADC_ConfigChannel>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d001      	beq.n	8005188 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8005184:	f000 fdf2 	bl	8005d6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8005188:	230c      	movs	r3, #12
 800518a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800518c:	2303      	movs	r3, #3
 800518e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005190:	463b      	mov	r3, r7
 8005192:	4619      	mov	r1, r3
 8005194:	4852      	ldr	r0, [pc, #328]	; (80052e0 <MX_ADC2_Init+0x204>)
 8005196:	f003 f85b 	bl	8008250 <HAL_ADC_ConfigChannel>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d001      	beq.n	80051a4 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80051a0:	f000 fde4 	bl	8005d6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80051a4:	230d      	movs	r3, #13
 80051a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80051a8:	2304      	movs	r3, #4
 80051aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80051ac:	463b      	mov	r3, r7
 80051ae:	4619      	mov	r1, r3
 80051b0:	484b      	ldr	r0, [pc, #300]	; (80052e0 <MX_ADC2_Init+0x204>)
 80051b2:	f003 f84d 	bl	8008250 <HAL_ADC_ConfigChannel>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d001      	beq.n	80051c0 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80051bc:	f000 fdd6 	bl	8005d6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80051c0:	2300      	movs	r3, #0
 80051c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80051c4:	2305      	movs	r3, #5
 80051c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80051c8:	463b      	mov	r3, r7
 80051ca:	4619      	mov	r1, r3
 80051cc:	4844      	ldr	r0, [pc, #272]	; (80052e0 <MX_ADC2_Init+0x204>)
 80051ce:	f003 f83f 	bl	8008250 <HAL_ADC_ConfigChannel>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d001      	beq.n	80051dc <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 80051d8:	f000 fdc8 	bl	8005d6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80051dc:	2301      	movs	r3, #1
 80051de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80051e0:	2306      	movs	r3, #6
 80051e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80051e4:	463b      	mov	r3, r7
 80051e6:	4619      	mov	r1, r3
 80051e8:	483d      	ldr	r0, [pc, #244]	; (80052e0 <MX_ADC2_Init+0x204>)
 80051ea:	f003 f831 	bl	8008250 <HAL_ADC_ConfigChannel>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d001      	beq.n	80051f8 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 80051f4:	f000 fdba 	bl	8005d6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80051f8:	2302      	movs	r3, #2
 80051fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80051fc:	2307      	movs	r3, #7
 80051fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005200:	463b      	mov	r3, r7
 8005202:	4619      	mov	r1, r3
 8005204:	4836      	ldr	r0, [pc, #216]	; (80052e0 <MX_ADC2_Init+0x204>)
 8005206:	f003 f823 	bl	8008250 <HAL_ADC_ConfigChannel>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d001      	beq.n	8005214 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8005210:	f000 fdac 	bl	8005d6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8005214:	2303      	movs	r3, #3
 8005216:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8005218:	2308      	movs	r3, #8
 800521a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800521c:	463b      	mov	r3, r7
 800521e:	4619      	mov	r1, r3
 8005220:	482f      	ldr	r0, [pc, #188]	; (80052e0 <MX_ADC2_Init+0x204>)
 8005222:	f003 f815 	bl	8008250 <HAL_ADC_ConfigChannel>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d001      	beq.n	8005230 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 800522c:	f000 fd9e 	bl	8005d6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8005230:	2304      	movs	r3, #4
 8005232:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8005234:	2309      	movs	r3, #9
 8005236:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005238:	463b      	mov	r3, r7
 800523a:	4619      	mov	r1, r3
 800523c:	4828      	ldr	r0, [pc, #160]	; (80052e0 <MX_ADC2_Init+0x204>)
 800523e:	f003 f807 	bl	8008250 <HAL_ADC_ConfigChannel>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d001      	beq.n	800524c <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8005248:	f000 fd90 	bl	8005d6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800524c:	2305      	movs	r3, #5
 800524e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8005250:	230a      	movs	r3, #10
 8005252:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005254:	463b      	mov	r3, r7
 8005256:	4619      	mov	r1, r3
 8005258:	4821      	ldr	r0, [pc, #132]	; (80052e0 <MX_ADC2_Init+0x204>)
 800525a:	f002 fff9 	bl	8008250 <HAL_ADC_ConfigChannel>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d001      	beq.n	8005268 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8005264:	f000 fd82 	bl	8005d6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8005268:	2306      	movs	r3, #6
 800526a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 800526c:	230b      	movs	r3, #11
 800526e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005270:	463b      	mov	r3, r7
 8005272:	4619      	mov	r1, r3
 8005274:	481a      	ldr	r0, [pc, #104]	; (80052e0 <MX_ADC2_Init+0x204>)
 8005276:	f002 ffeb 	bl	8008250 <HAL_ADC_ConfigChannel>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d001      	beq.n	8005284 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8005280:	f000 fd74 	bl	8005d6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8005284:	2307      	movs	r3, #7
 8005286:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8005288:	230c      	movs	r3, #12
 800528a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800528c:	463b      	mov	r3, r7
 800528e:	4619      	mov	r1, r3
 8005290:	4813      	ldr	r0, [pc, #76]	; (80052e0 <MX_ADC2_Init+0x204>)
 8005292:	f002 ffdd 	bl	8008250 <HAL_ADC_ConfigChannel>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d001      	beq.n	80052a0 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 800529c:	f000 fd66 	bl	8005d6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80052a0:	2308      	movs	r3, #8
 80052a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 80052a4:	230d      	movs	r3, #13
 80052a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80052a8:	463b      	mov	r3, r7
 80052aa:	4619      	mov	r1, r3
 80052ac:	480c      	ldr	r0, [pc, #48]	; (80052e0 <MX_ADC2_Init+0x204>)
 80052ae:	f002 ffcf 	bl	8008250 <HAL_ADC_ConfigChannel>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d001      	beq.n	80052bc <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 80052b8:	f000 fd58 	bl	8005d6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80052bc:	2309      	movs	r3, #9
 80052be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 80052c0:	230e      	movs	r3, #14
 80052c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80052c4:	463b      	mov	r3, r7
 80052c6:	4619      	mov	r1, r3
 80052c8:	4805      	ldr	r0, [pc, #20]	; (80052e0 <MX_ADC2_Init+0x204>)
 80052ca:	f002 ffc1 	bl	8008250 <HAL_ADC_ConfigChannel>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d001      	beq.n	80052d8 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 80052d4:	f000 fd4a 	bl	8005d6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80052d8:	bf00      	nop
 80052da:	3710      	adds	r7, #16
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	2003e8e4 	.word	0x2003e8e4
 80052e4:	40012100 	.word	0x40012100
 80052e8:	0f000001 	.word	0x0f000001

080052ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80052f0:	4b12      	ldr	r3, [pc, #72]	; (800533c <MX_I2C1_Init+0x50>)
 80052f2:	4a13      	ldr	r2, [pc, #76]	; (8005340 <MX_I2C1_Init+0x54>)
 80052f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80052f6:	4b11      	ldr	r3, [pc, #68]	; (800533c <MX_I2C1_Init+0x50>)
 80052f8:	4a12      	ldr	r2, [pc, #72]	; (8005344 <MX_I2C1_Init+0x58>)
 80052fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80052fc:	4b0f      	ldr	r3, [pc, #60]	; (800533c <MX_I2C1_Init+0x50>)
 80052fe:	2200      	movs	r2, #0
 8005300:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005302:	4b0e      	ldr	r3, [pc, #56]	; (800533c <MX_I2C1_Init+0x50>)
 8005304:	2200      	movs	r2, #0
 8005306:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005308:	4b0c      	ldr	r3, [pc, #48]	; (800533c <MX_I2C1_Init+0x50>)
 800530a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800530e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005310:	4b0a      	ldr	r3, [pc, #40]	; (800533c <MX_I2C1_Init+0x50>)
 8005312:	2200      	movs	r2, #0
 8005314:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005316:	4b09      	ldr	r3, [pc, #36]	; (800533c <MX_I2C1_Init+0x50>)
 8005318:	2200      	movs	r2, #0
 800531a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800531c:	4b07      	ldr	r3, [pc, #28]	; (800533c <MX_I2C1_Init+0x50>)
 800531e:	2200      	movs	r2, #0
 8005320:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8005322:	4b06      	ldr	r3, [pc, #24]	; (800533c <MX_I2C1_Init+0x50>)
 8005324:	2280      	movs	r2, #128	; 0x80
 8005326:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005328:	4804      	ldr	r0, [pc, #16]	; (800533c <MX_I2C1_Init+0x50>)
 800532a:	f004 f8cb 	bl	80094c4 <HAL_I2C_Init>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d001      	beq.n	8005338 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005334:	f000 fd1a 	bl	8005d6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005338:	bf00      	nop
 800533a:	bd80      	pop	{r7, pc}
 800533c:	2003e92c 	.word	0x2003e92c
 8005340:	40005400 	.word	0x40005400
 8005344:	000186a0 	.word	0x000186a0

08005348 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800534c:	4b12      	ldr	r3, [pc, #72]	; (8005398 <MX_I2C2_Init+0x50>)
 800534e:	4a13      	ldr	r2, [pc, #76]	; (800539c <MX_I2C2_Init+0x54>)
 8005350:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8005352:	4b11      	ldr	r3, [pc, #68]	; (8005398 <MX_I2C2_Init+0x50>)
 8005354:	4a12      	ldr	r2, [pc, #72]	; (80053a0 <MX_I2C2_Init+0x58>)
 8005356:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005358:	4b0f      	ldr	r3, [pc, #60]	; (8005398 <MX_I2C2_Init+0x50>)
 800535a:	2200      	movs	r2, #0
 800535c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800535e:	4b0e      	ldr	r3, [pc, #56]	; (8005398 <MX_I2C2_Init+0x50>)
 8005360:	2200      	movs	r2, #0
 8005362:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005364:	4b0c      	ldr	r3, [pc, #48]	; (8005398 <MX_I2C2_Init+0x50>)
 8005366:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800536a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800536c:	4b0a      	ldr	r3, [pc, #40]	; (8005398 <MX_I2C2_Init+0x50>)
 800536e:	2200      	movs	r2, #0
 8005370:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8005372:	4b09      	ldr	r3, [pc, #36]	; (8005398 <MX_I2C2_Init+0x50>)
 8005374:	2200      	movs	r2, #0
 8005376:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005378:	4b07      	ldr	r3, [pc, #28]	; (8005398 <MX_I2C2_Init+0x50>)
 800537a:	2200      	movs	r2, #0
 800537c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800537e:	4b06      	ldr	r3, [pc, #24]	; (8005398 <MX_I2C2_Init+0x50>)
 8005380:	2280      	movs	r2, #128	; 0x80
 8005382:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005384:	4804      	ldr	r0, [pc, #16]	; (8005398 <MX_I2C2_Init+0x50>)
 8005386:	f004 f89d 	bl	80094c4 <HAL_I2C_Init>
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d001      	beq.n	8005394 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8005390:	f000 fcec 	bl	8005d6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8005394:	bf00      	nop
 8005396:	bd80      	pop	{r7, pc}
 8005398:	2003e9c0 	.word	0x2003e9c0
 800539c:	40005800 	.word	0x40005800
 80053a0:	000186a0 	.word	0x000186a0

080053a4 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80053a4:	b480      	push	{r7}
 80053a6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80053a8:	4b0c      	ldr	r3, [pc, #48]	; (80053dc <MX_SDIO_SD_Init+0x38>)
 80053aa:	4a0d      	ldr	r2, [pc, #52]	; (80053e0 <MX_SDIO_SD_Init+0x3c>)
 80053ac:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80053ae:	4b0b      	ldr	r3, [pc, #44]	; (80053dc <MX_SDIO_SD_Init+0x38>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80053b4:	4b09      	ldr	r3, [pc, #36]	; (80053dc <MX_SDIO_SD_Init+0x38>)
 80053b6:	2200      	movs	r2, #0
 80053b8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80053ba:	4b08      	ldr	r3, [pc, #32]	; (80053dc <MX_SDIO_SD_Init+0x38>)
 80053bc:	2200      	movs	r2, #0
 80053be:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80053c0:	4b06      	ldr	r3, [pc, #24]	; (80053dc <MX_SDIO_SD_Init+0x38>)
 80053c2:	2200      	movs	r2, #0
 80053c4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80053c6:	4b05      	ldr	r3, [pc, #20]	; (80053dc <MX_SDIO_SD_Init+0x38>)
 80053c8:	2200      	movs	r2, #0
 80053ca:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 80053cc:	4b03      	ldr	r3, [pc, #12]	; (80053dc <MX_SDIO_SD_Init+0x38>)
 80053ce:	2202      	movs	r2, #2
 80053d0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80053d2:	bf00      	nop
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr
 80053dc:	2003ebc0 	.word	0x2003ebc0
 80053e0:	40012c00 	.word	0x40012c00

080053e4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80053e8:	4b17      	ldr	r3, [pc, #92]	; (8005448 <MX_SPI2_Init+0x64>)
 80053ea:	4a18      	ldr	r2, [pc, #96]	; (800544c <MX_SPI2_Init+0x68>)
 80053ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80053ee:	4b16      	ldr	r3, [pc, #88]	; (8005448 <MX_SPI2_Init+0x64>)
 80053f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80053f4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80053f6:	4b14      	ldr	r3, [pc, #80]	; (8005448 <MX_SPI2_Init+0x64>)
 80053f8:	2200      	movs	r2, #0
 80053fa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80053fc:	4b12      	ldr	r3, [pc, #72]	; (8005448 <MX_SPI2_Init+0x64>)
 80053fe:	2200      	movs	r2, #0
 8005400:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8005402:	4b11      	ldr	r3, [pc, #68]	; (8005448 <MX_SPI2_Init+0x64>)
 8005404:	2202      	movs	r2, #2
 8005406:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005408:	4b0f      	ldr	r3, [pc, #60]	; (8005448 <MX_SPI2_Init+0x64>)
 800540a:	2201      	movs	r2, #1
 800540c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800540e:	4b0e      	ldr	r3, [pc, #56]	; (8005448 <MX_SPI2_Init+0x64>)
 8005410:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005414:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8005416:	4b0c      	ldr	r3, [pc, #48]	; (8005448 <MX_SPI2_Init+0x64>)
 8005418:	2228      	movs	r2, #40	; 0x28
 800541a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800541c:	4b0a      	ldr	r3, [pc, #40]	; (8005448 <MX_SPI2_Init+0x64>)
 800541e:	2200      	movs	r2, #0
 8005420:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005422:	4b09      	ldr	r3, [pc, #36]	; (8005448 <MX_SPI2_Init+0x64>)
 8005424:	2200      	movs	r2, #0
 8005426:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005428:	4b07      	ldr	r3, [pc, #28]	; (8005448 <MX_SPI2_Init+0x64>)
 800542a:	2200      	movs	r2, #0
 800542c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800542e:	4b06      	ldr	r3, [pc, #24]	; (8005448 <MX_SPI2_Init+0x64>)
 8005430:	220a      	movs	r2, #10
 8005432:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005434:	4804      	ldr	r0, [pc, #16]	; (8005448 <MX_SPI2_Init+0x64>)
 8005436:	f007 f977 	bl	800c728 <HAL_SPI_Init>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d001      	beq.n	8005444 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8005440:	f000 fc94 	bl	8005d6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005444:	bf00      	nop
 8005446:	bd80      	pop	{r7, pc}
 8005448:	2003e80c 	.word	0x2003e80c
 800544c:	40003800 	.word	0x40003800

08005450 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b09a      	sub	sp, #104	; 0x68
 8005454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005456:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800545a:	2224      	movs	r2, #36	; 0x24
 800545c:	2100      	movs	r1, #0
 800545e:	4618      	mov	r0, r3
 8005460:	f00e fb01 	bl	8013a66 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005464:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005468:	2200      	movs	r2, #0
 800546a:	601a      	str	r2, [r3, #0]
 800546c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800546e:	f107 0320 	add.w	r3, r7, #32
 8005472:	2200      	movs	r2, #0
 8005474:	601a      	str	r2, [r3, #0]
 8005476:	605a      	str	r2, [r3, #4]
 8005478:	609a      	str	r2, [r3, #8]
 800547a:	60da      	str	r2, [r3, #12]
 800547c:	611a      	str	r2, [r3, #16]
 800547e:	615a      	str	r2, [r3, #20]
 8005480:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005482:	463b      	mov	r3, r7
 8005484:	2220      	movs	r2, #32
 8005486:	2100      	movs	r1, #0
 8005488:	4618      	mov	r0, r3
 800548a:	f00e faec 	bl	8013a66 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800548e:	4b42      	ldr	r3, [pc, #264]	; (8005598 <MX_TIM1_Init+0x148>)
 8005490:	4a42      	ldr	r2, [pc, #264]	; (800559c <MX_TIM1_Init+0x14c>)
 8005492:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8005494:	4b40      	ldr	r3, [pc, #256]	; (8005598 <MX_TIM1_Init+0x148>)
 8005496:	2200      	movs	r2, #0
 8005498:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800549a:	4b3f      	ldr	r3, [pc, #252]	; (8005598 <MX_TIM1_Init+0x148>)
 800549c:	2200      	movs	r2, #0
 800549e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80054a0:	4b3d      	ldr	r3, [pc, #244]	; (8005598 <MX_TIM1_Init+0x148>)
 80054a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80054a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80054a8:	4b3b      	ldr	r3, [pc, #236]	; (8005598 <MX_TIM1_Init+0x148>)
 80054aa:	2200      	movs	r2, #0
 80054ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80054ae:	4b3a      	ldr	r3, [pc, #232]	; (8005598 <MX_TIM1_Init+0x148>)
 80054b0:	2200      	movs	r2, #0
 80054b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80054b4:	4b38      	ldr	r3, [pc, #224]	; (8005598 <MX_TIM1_Init+0x148>)
 80054b6:	2200      	movs	r2, #0
 80054b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80054ba:	4837      	ldr	r0, [pc, #220]	; (8005598 <MX_TIM1_Init+0x148>)
 80054bc:	f007 fed7 	bl	800d26e <HAL_TIM_PWM_Init>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d001      	beq.n	80054ca <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80054c6:	f000 fc51 	bl	8005d6c <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80054ca:	2303      	movs	r3, #3
 80054cc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80054ce:	2300      	movs	r3, #0
 80054d0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80054d2:	2301      	movs	r3, #1
 80054d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80054d6:	2300      	movs	r3, #0
 80054d8:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 80054da:	2300      	movs	r3, #0
 80054dc:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80054de:	2300      	movs	r3, #0
 80054e0:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80054e2:	2301      	movs	r3, #1
 80054e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80054e6:	2300      	movs	r3, #0
 80054e8:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 80054ea:	2300      	movs	r3, #0
 80054ec:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80054ee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80054f2:	4619      	mov	r1, r3
 80054f4:	4828      	ldr	r0, [pc, #160]	; (8005598 <MX_TIM1_Init+0x148>)
 80054f6:	f007 ff23 	bl	800d340 <HAL_TIM_Encoder_Init>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d001      	beq.n	8005504 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8005500:	f000 fc34 	bl	8005d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005504:	2300      	movs	r3, #0
 8005506:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005508:	2300      	movs	r3, #0
 800550a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800550c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005510:	4619      	mov	r1, r3
 8005512:	4821      	ldr	r0, [pc, #132]	; (8005598 <MX_TIM1_Init+0x148>)
 8005514:	f008 fc4a 	bl	800ddac <HAL_TIMEx_MasterConfigSynchronization>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d001      	beq.n	8005522 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 800551e:	f000 fc25 	bl	8005d6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005522:	2360      	movs	r3, #96	; 0x60
 8005524:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8005526:	2300      	movs	r3, #0
 8005528:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800552a:	2300      	movs	r3, #0
 800552c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800552e:	2300      	movs	r3, #0
 8005530:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005532:	2300      	movs	r3, #0
 8005534:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005536:	2300      	movs	r3, #0
 8005538:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800553a:	2300      	movs	r3, #0
 800553c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800553e:	f107 0320 	add.w	r3, r7, #32
 8005542:	2208      	movs	r2, #8
 8005544:	4619      	mov	r1, r3
 8005546:	4814      	ldr	r0, [pc, #80]	; (8005598 <MX_TIM1_Init+0x148>)
 8005548:	f008 f8cc 	bl	800d6e4 <HAL_TIM_PWM_ConfigChannel>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d001      	beq.n	8005556 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8005552:	f000 fc0b 	bl	8005d6c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005556:	2300      	movs	r3, #0
 8005558:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800555a:	2300      	movs	r3, #0
 800555c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800555e:	2300      	movs	r3, #0
 8005560:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005562:	2300      	movs	r3, #0
 8005564:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005566:	2300      	movs	r3, #0
 8005568:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800556a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800556e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005570:	2300      	movs	r3, #0
 8005572:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005574:	463b      	mov	r3, r7
 8005576:	4619      	mov	r1, r3
 8005578:	4807      	ldr	r0, [pc, #28]	; (8005598 <MX_TIM1_Init+0x148>)
 800557a:	f008 fc93 	bl	800dea4 <HAL_TIMEx_ConfigBreakDeadTime>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d001      	beq.n	8005588 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8005584:	f000 fbf2 	bl	8005d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005588:	4803      	ldr	r0, [pc, #12]	; (8005598 <MX_TIM1_Init+0x148>)
 800558a:	f000 ffdf 	bl	800654c <HAL_TIM_MspPostInit>

}
 800558e:	bf00      	nop
 8005590:	3768      	adds	r7, #104	; 0x68
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	2003eb80 	.word	0x2003eb80
 800559c:	40010000 	.word	0x40010000

080055a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b08a      	sub	sp, #40	; 0x28
 80055a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80055a6:	f107 0320 	add.w	r3, r7, #32
 80055aa:	2200      	movs	r2, #0
 80055ac:	601a      	str	r2, [r3, #0]
 80055ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80055b0:	1d3b      	adds	r3, r7, #4
 80055b2:	2200      	movs	r2, #0
 80055b4:	601a      	str	r2, [r3, #0]
 80055b6:	605a      	str	r2, [r3, #4]
 80055b8:	609a      	str	r2, [r3, #8]
 80055ba:	60da      	str	r2, [r3, #12]
 80055bc:	611a      	str	r2, [r3, #16]
 80055be:	615a      	str	r2, [r3, #20]
 80055c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80055c2:	4b27      	ldr	r3, [pc, #156]	; (8005660 <MX_TIM3_Init+0xc0>)
 80055c4:	4a27      	ldr	r2, [pc, #156]	; (8005664 <MX_TIM3_Init+0xc4>)
 80055c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80055c8:	4b25      	ldr	r3, [pc, #148]	; (8005660 <MX_TIM3_Init+0xc0>)
 80055ca:	2200      	movs	r2, #0
 80055cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80055ce:	4b24      	ldr	r3, [pc, #144]	; (8005660 <MX_TIM3_Init+0xc0>)
 80055d0:	2200      	movs	r2, #0
 80055d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80055d4:	4b22      	ldr	r3, [pc, #136]	; (8005660 <MX_TIM3_Init+0xc0>)
 80055d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80055dc:	4b20      	ldr	r3, [pc, #128]	; (8005660 <MX_TIM3_Init+0xc0>)
 80055de:	2200      	movs	r2, #0
 80055e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80055e2:	4b1f      	ldr	r3, [pc, #124]	; (8005660 <MX_TIM3_Init+0xc0>)
 80055e4:	2200      	movs	r2, #0
 80055e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80055e8:	481d      	ldr	r0, [pc, #116]	; (8005660 <MX_TIM3_Init+0xc0>)
 80055ea:	f007 fe40 	bl	800d26e <HAL_TIM_PWM_Init>
 80055ee:	4603      	mov	r3, r0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d001      	beq.n	80055f8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80055f4:	f000 fbba 	bl	8005d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80055f8:	2300      	movs	r3, #0
 80055fa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80055fc:	2300      	movs	r3, #0
 80055fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005600:	f107 0320 	add.w	r3, r7, #32
 8005604:	4619      	mov	r1, r3
 8005606:	4816      	ldr	r0, [pc, #88]	; (8005660 <MX_TIM3_Init+0xc0>)
 8005608:	f008 fbd0 	bl	800ddac <HAL_TIMEx_MasterConfigSynchronization>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d001      	beq.n	8005616 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8005612:	f000 fbab 	bl	8005d6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005616:	2360      	movs	r3, #96	; 0x60
 8005618:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800561a:	2300      	movs	r3, #0
 800561c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800561e:	2300      	movs	r3, #0
 8005620:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005622:	2300      	movs	r3, #0
 8005624:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005626:	1d3b      	adds	r3, r7, #4
 8005628:	2200      	movs	r2, #0
 800562a:	4619      	mov	r1, r3
 800562c:	480c      	ldr	r0, [pc, #48]	; (8005660 <MX_TIM3_Init+0xc0>)
 800562e:	f008 f859 	bl	800d6e4 <HAL_TIM_PWM_ConfigChannel>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d001      	beq.n	800563c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8005638:	f000 fb98 	bl	8005d6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800563c:	1d3b      	adds	r3, r7, #4
 800563e:	2204      	movs	r2, #4
 8005640:	4619      	mov	r1, r3
 8005642:	4807      	ldr	r0, [pc, #28]	; (8005660 <MX_TIM3_Init+0xc0>)
 8005644:	f008 f84e 	bl	800d6e4 <HAL_TIM_PWM_ConfigChannel>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d001      	beq.n	8005652 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800564e:	f000 fb8d 	bl	8005d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005652:	4803      	ldr	r0, [pc, #12]	; (8005660 <MX_TIM3_Init+0xc0>)
 8005654:	f000 ff7a 	bl	800654c <HAL_TIM_MspPostInit>

}
 8005658:	bf00      	nop
 800565a:	3728      	adds	r7, #40	; 0x28
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}
 8005660:	2003ea18 	.word	0x2003ea18
 8005664:	40000400 	.word	0x40000400

08005668 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b08a      	sub	sp, #40	; 0x28
 800566c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800566e:	f107 0320 	add.w	r3, r7, #32
 8005672:	2200      	movs	r2, #0
 8005674:	601a      	str	r2, [r3, #0]
 8005676:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005678:	1d3b      	adds	r3, r7, #4
 800567a:	2200      	movs	r2, #0
 800567c:	601a      	str	r2, [r3, #0]
 800567e:	605a      	str	r2, [r3, #4]
 8005680:	609a      	str	r2, [r3, #8]
 8005682:	60da      	str	r2, [r3, #12]
 8005684:	611a      	str	r2, [r3, #16]
 8005686:	615a      	str	r2, [r3, #20]
 8005688:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800568a:	4b27      	ldr	r3, [pc, #156]	; (8005728 <MX_TIM4_Init+0xc0>)
 800568c:	4a27      	ldr	r2, [pc, #156]	; (800572c <MX_TIM4_Init+0xc4>)
 800568e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8005690:	4b25      	ldr	r3, [pc, #148]	; (8005728 <MX_TIM4_Init+0xc0>)
 8005692:	2200      	movs	r2, #0
 8005694:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005696:	4b24      	ldr	r3, [pc, #144]	; (8005728 <MX_TIM4_Init+0xc0>)
 8005698:	2200      	movs	r2, #0
 800569a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 800569c:	4b22      	ldr	r3, [pc, #136]	; (8005728 <MX_TIM4_Init+0xc0>)
 800569e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80056a2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80056a4:	4b20      	ldr	r3, [pc, #128]	; (8005728 <MX_TIM4_Init+0xc0>)
 80056a6:	2200      	movs	r2, #0
 80056a8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80056aa:	4b1f      	ldr	r3, [pc, #124]	; (8005728 <MX_TIM4_Init+0xc0>)
 80056ac:	2200      	movs	r2, #0
 80056ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80056b0:	481d      	ldr	r0, [pc, #116]	; (8005728 <MX_TIM4_Init+0xc0>)
 80056b2:	f007 fddc 	bl	800d26e <HAL_TIM_PWM_Init>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d001      	beq.n	80056c0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80056bc:	f000 fb56 	bl	8005d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80056c0:	2300      	movs	r3, #0
 80056c2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80056c4:	2300      	movs	r3, #0
 80056c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80056c8:	f107 0320 	add.w	r3, r7, #32
 80056cc:	4619      	mov	r1, r3
 80056ce:	4816      	ldr	r0, [pc, #88]	; (8005728 <MX_TIM4_Init+0xc0>)
 80056d0:	f008 fb6c 	bl	800ddac <HAL_TIMEx_MasterConfigSynchronization>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d001      	beq.n	80056de <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80056da:	f000 fb47 	bl	8005d6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80056de:	2360      	movs	r3, #96	; 0x60
 80056e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80056e2:	2300      	movs	r3, #0
 80056e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80056e6:	2300      	movs	r3, #0
 80056e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80056ea:	2300      	movs	r3, #0
 80056ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80056ee:	1d3b      	adds	r3, r7, #4
 80056f0:	2208      	movs	r2, #8
 80056f2:	4619      	mov	r1, r3
 80056f4:	480c      	ldr	r0, [pc, #48]	; (8005728 <MX_TIM4_Init+0xc0>)
 80056f6:	f007 fff5 	bl	800d6e4 <HAL_TIM_PWM_ConfigChannel>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d001      	beq.n	8005704 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8005700:	f000 fb34 	bl	8005d6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005704:	1d3b      	adds	r3, r7, #4
 8005706:	220c      	movs	r2, #12
 8005708:	4619      	mov	r1, r3
 800570a:	4807      	ldr	r0, [pc, #28]	; (8005728 <MX_TIM4_Init+0xc0>)
 800570c:	f007 ffea 	bl	800d6e4 <HAL_TIM_PWM_ConfigChannel>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d001      	beq.n	800571a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8005716:	f000 fb29 	bl	8005d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800571a:	4803      	ldr	r0, [pc, #12]	; (8005728 <MX_TIM4_Init+0xc0>)
 800571c:	f000 ff16 	bl	800654c <HAL_TIM_MspPostInit>

}
 8005720:	bf00      	nop
 8005722:	3728      	adds	r7, #40	; 0x28
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	2003e8a4 	.word	0x2003e8a4
 800572c:	40000800 	.word	0x40000800

08005730 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005736:	463b      	mov	r3, r7
 8005738:	2200      	movs	r2, #0
 800573a:	601a      	str	r2, [r3, #0]
 800573c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800573e:	4b15      	ldr	r3, [pc, #84]	; (8005794 <MX_TIM6_Init+0x64>)
 8005740:	4a15      	ldr	r2, [pc, #84]	; (8005798 <MX_TIM6_Init+0x68>)
 8005742:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8005744:	4b13      	ldr	r3, [pc, #76]	; (8005794 <MX_TIM6_Init+0x64>)
 8005746:	2259      	movs	r2, #89	; 0x59
 8005748:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800574a:	4b12      	ldr	r3, [pc, #72]	; (8005794 <MX_TIM6_Init+0x64>)
 800574c:	2200      	movs	r2, #0
 800574e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8005750:	4b10      	ldr	r3, [pc, #64]	; (8005794 <MX_TIM6_Init+0x64>)
 8005752:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005756:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005758:	4b0e      	ldr	r3, [pc, #56]	; (8005794 <MX_TIM6_Init+0x64>)
 800575a:	2280      	movs	r2, #128	; 0x80
 800575c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800575e:	480d      	ldr	r0, [pc, #52]	; (8005794 <MX_TIM6_Init+0x64>)
 8005760:	f007 fd36 	bl	800d1d0 <HAL_TIM_Base_Init>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d001      	beq.n	800576e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800576a:	f000 faff 	bl	8005d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800576e:	2300      	movs	r3, #0
 8005770:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005772:	2300      	movs	r3, #0
 8005774:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005776:	463b      	mov	r3, r7
 8005778:	4619      	mov	r1, r3
 800577a:	4806      	ldr	r0, [pc, #24]	; (8005794 <MX_TIM6_Init+0x64>)
 800577c:	f008 fb16 	bl	800ddac <HAL_TIMEx_MasterConfigSynchronization>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d001      	beq.n	800578a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8005786:	f000 faf1 	bl	8005d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800578a:	bf00      	nop
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	2003eb40 	.word	0x2003eb40
 8005798:	40001000 	.word	0x40001000

0800579c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b082      	sub	sp, #8
 80057a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80057a2:	463b      	mov	r3, r7
 80057a4:	2200      	movs	r2, #0
 80057a6:	601a      	str	r2, [r3, #0]
 80057a8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80057aa:	4b14      	ldr	r3, [pc, #80]	; (80057fc <MX_TIM7_Init+0x60>)
 80057ac:	4a14      	ldr	r2, [pc, #80]	; (8005800 <MX_TIM7_Init+0x64>)
 80057ae:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 80057b0:	4b12      	ldr	r3, [pc, #72]	; (80057fc <MX_TIM7_Init+0x60>)
 80057b2:	22b3      	movs	r2, #179	; 0xb3
 80057b4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057b6:	4b11      	ldr	r3, [pc, #68]	; (80057fc <MX_TIM7_Init+0x60>)
 80057b8:	2200      	movs	r2, #0
 80057ba:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 80057bc:	4b0f      	ldr	r3, [pc, #60]	; (80057fc <MX_TIM7_Init+0x60>)
 80057be:	2231      	movs	r2, #49	; 0x31
 80057c0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80057c2:	4b0e      	ldr	r3, [pc, #56]	; (80057fc <MX_TIM7_Init+0x60>)
 80057c4:	2280      	movs	r2, #128	; 0x80
 80057c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80057c8:	480c      	ldr	r0, [pc, #48]	; (80057fc <MX_TIM7_Init+0x60>)
 80057ca:	f007 fd01 	bl	800d1d0 <HAL_TIM_Base_Init>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d001      	beq.n	80057d8 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 80057d4:	f000 faca 	bl	8005d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80057d8:	2300      	movs	r3, #0
 80057da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80057dc:	2300      	movs	r3, #0
 80057de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80057e0:	463b      	mov	r3, r7
 80057e2:	4619      	mov	r1, r3
 80057e4:	4805      	ldr	r0, [pc, #20]	; (80057fc <MX_TIM7_Init+0x60>)
 80057e6:	f008 fae1 	bl	800ddac <HAL_TIMEx_MasterConfigSynchronization>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d001      	beq.n	80057f4 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 80057f0:	f000 fabc 	bl	8005d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80057f4:	bf00      	nop
 80057f6:	3708      	adds	r7, #8
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	2003ece4 	.word	0x2003ece4
 8005800:	40001400 	.word	0x40001400

08005804 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b08c      	sub	sp, #48	; 0x30
 8005808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800580a:	f107 030c 	add.w	r3, r7, #12
 800580e:	2224      	movs	r2, #36	; 0x24
 8005810:	2100      	movs	r1, #0
 8005812:	4618      	mov	r0, r3
 8005814:	f00e f927 	bl	8013a66 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005818:	1d3b      	adds	r3, r7, #4
 800581a:	2200      	movs	r2, #0
 800581c:	601a      	str	r2, [r3, #0]
 800581e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8005820:	4b22      	ldr	r3, [pc, #136]	; (80058ac <MX_TIM8_Init+0xa8>)
 8005822:	4a23      	ldr	r2, [pc, #140]	; (80058b0 <MX_TIM8_Init+0xac>)
 8005824:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8005826:	4b21      	ldr	r3, [pc, #132]	; (80058ac <MX_TIM8_Init+0xa8>)
 8005828:	2200      	movs	r2, #0
 800582a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800582c:	4b1f      	ldr	r3, [pc, #124]	; (80058ac <MX_TIM8_Init+0xa8>)
 800582e:	2210      	movs	r2, #16
 8005830:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8005832:	4b1e      	ldr	r3, [pc, #120]	; (80058ac <MX_TIM8_Init+0xa8>)
 8005834:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005838:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800583a:	4b1c      	ldr	r3, [pc, #112]	; (80058ac <MX_TIM8_Init+0xa8>)
 800583c:	2200      	movs	r2, #0
 800583e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8005840:	4b1a      	ldr	r3, [pc, #104]	; (80058ac <MX_TIM8_Init+0xa8>)
 8005842:	2200      	movs	r2, #0
 8005844:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005846:	4b19      	ldr	r3, [pc, #100]	; (80058ac <MX_TIM8_Init+0xa8>)
 8005848:	2200      	movs	r2, #0
 800584a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800584c:	2303      	movs	r3, #3
 800584e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005850:	2300      	movs	r3, #0
 8005852:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005854:	2301      	movs	r3, #1
 8005856:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005858:	2300      	movs	r3, #0
 800585a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800585c:	2300      	movs	r3, #0
 800585e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005860:	2300      	movs	r3, #0
 8005862:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005864:	2301      	movs	r3, #1
 8005866:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005868:	2300      	movs	r3, #0
 800586a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800586c:	2300      	movs	r3, #0
 800586e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8005870:	f107 030c 	add.w	r3, r7, #12
 8005874:	4619      	mov	r1, r3
 8005876:	480d      	ldr	r0, [pc, #52]	; (80058ac <MX_TIM8_Init+0xa8>)
 8005878:	f007 fd62 	bl	800d340 <HAL_TIM_Encoder_Init>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d001      	beq.n	8005886 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8005882:	f000 fa73 	bl	8005d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005886:	2300      	movs	r3, #0
 8005888:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800588a:	2300      	movs	r3, #0
 800588c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800588e:	1d3b      	adds	r3, r7, #4
 8005890:	4619      	mov	r1, r3
 8005892:	4806      	ldr	r0, [pc, #24]	; (80058ac <MX_TIM8_Init+0xa8>)
 8005894:	f008 fa8a 	bl	800ddac <HAL_TIMEx_MasterConfigSynchronization>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d001      	beq.n	80058a2 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800589e:	f000 fa65 	bl	8005d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80058a2:	bf00      	nop
 80058a4:	3730      	adds	r7, #48	; 0x30
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	2003e864 	.word	0x2003e864
 80058b0:	40010400 	.word	0x40010400

080058b4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b088      	sub	sp, #32
 80058b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80058ba:	1d3b      	adds	r3, r7, #4
 80058bc:	2200      	movs	r2, #0
 80058be:	601a      	str	r2, [r3, #0]
 80058c0:	605a      	str	r2, [r3, #4]
 80058c2:	609a      	str	r2, [r3, #8]
 80058c4:	60da      	str	r2, [r3, #12]
 80058c6:	611a      	str	r2, [r3, #16]
 80058c8:	615a      	str	r2, [r3, #20]
 80058ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80058cc:	4b1e      	ldr	r3, [pc, #120]	; (8005948 <MX_TIM10_Init+0x94>)
 80058ce:	4a1f      	ldr	r2, [pc, #124]	; (800594c <MX_TIM10_Init+0x98>)
 80058d0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80058d2:	4b1d      	ldr	r3, [pc, #116]	; (8005948 <MX_TIM10_Init+0x94>)
 80058d4:	2200      	movs	r2, #0
 80058d6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80058d8:	4b1b      	ldr	r3, [pc, #108]	; (8005948 <MX_TIM10_Init+0x94>)
 80058da:	2200      	movs	r2, #0
 80058dc:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80058de:	4b1a      	ldr	r3, [pc, #104]	; (8005948 <MX_TIM10_Init+0x94>)
 80058e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058e4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80058e6:	4b18      	ldr	r3, [pc, #96]	; (8005948 <MX_TIM10_Init+0x94>)
 80058e8:	2200      	movs	r2, #0
 80058ea:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80058ec:	4b16      	ldr	r3, [pc, #88]	; (8005948 <MX_TIM10_Init+0x94>)
 80058ee:	2200      	movs	r2, #0
 80058f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80058f2:	4815      	ldr	r0, [pc, #84]	; (8005948 <MX_TIM10_Init+0x94>)
 80058f4:	f007 fc6c 	bl	800d1d0 <HAL_TIM_Base_Init>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d001      	beq.n	8005902 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80058fe:	f000 fa35 	bl	8005d6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8005902:	4811      	ldr	r0, [pc, #68]	; (8005948 <MX_TIM10_Init+0x94>)
 8005904:	f007 fcb3 	bl	800d26e <HAL_TIM_PWM_Init>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d001      	beq.n	8005912 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800590e:	f000 fa2d 	bl	8005d6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005912:	2360      	movs	r3, #96	; 0x60
 8005914:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005916:	2300      	movs	r3, #0
 8005918:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800591a:	2300      	movs	r3, #0
 800591c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800591e:	2300      	movs	r3, #0
 8005920:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005922:	1d3b      	adds	r3, r7, #4
 8005924:	2200      	movs	r2, #0
 8005926:	4619      	mov	r1, r3
 8005928:	4807      	ldr	r0, [pc, #28]	; (8005948 <MX_TIM10_Init+0x94>)
 800592a:	f007 fedb 	bl	800d6e4 <HAL_TIM_PWM_ConfigChannel>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d001      	beq.n	8005938 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8005934:	f000 fa1a 	bl	8005d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8005938:	4803      	ldr	r0, [pc, #12]	; (8005948 <MX_TIM10_Init+0x94>)
 800593a:	f000 fe07 	bl	800654c <HAL_TIM_MspPostInit>

}
 800593e:	bf00      	nop
 8005940:	3720      	adds	r7, #32
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	2003e980 	.word	0x2003e980
 800594c:	40014400 	.word	0x40014400

08005950 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b088      	sub	sp, #32
 8005954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8005956:	1d3b      	adds	r3, r7, #4
 8005958:	2200      	movs	r2, #0
 800595a:	601a      	str	r2, [r3, #0]
 800595c:	605a      	str	r2, [r3, #4]
 800595e:	609a      	str	r2, [r3, #8]
 8005960:	60da      	str	r2, [r3, #12]
 8005962:	611a      	str	r2, [r3, #16]
 8005964:	615a      	str	r2, [r3, #20]
 8005966:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8005968:	4b1e      	ldr	r3, [pc, #120]	; (80059e4 <MX_TIM11_Init+0x94>)
 800596a:	4a1f      	ldr	r2, [pc, #124]	; (80059e8 <MX_TIM11_Init+0x98>)
 800596c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 800596e:	4b1d      	ldr	r3, [pc, #116]	; (80059e4 <MX_TIM11_Init+0x94>)
 8005970:	2200      	movs	r2, #0
 8005972:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005974:	4b1b      	ldr	r3, [pc, #108]	; (80059e4 <MX_TIM11_Init+0x94>)
 8005976:	2200      	movs	r2, #0
 8005978:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800597a:	4b1a      	ldr	r3, [pc, #104]	; (80059e4 <MX_TIM11_Init+0x94>)
 800597c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005980:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005982:	4b18      	ldr	r3, [pc, #96]	; (80059e4 <MX_TIM11_Init+0x94>)
 8005984:	2200      	movs	r2, #0
 8005986:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005988:	4b16      	ldr	r3, [pc, #88]	; (80059e4 <MX_TIM11_Init+0x94>)
 800598a:	2200      	movs	r2, #0
 800598c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800598e:	4815      	ldr	r0, [pc, #84]	; (80059e4 <MX_TIM11_Init+0x94>)
 8005990:	f007 fc1e 	bl	800d1d0 <HAL_TIM_Base_Init>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d001      	beq.n	800599e <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800599a:	f000 f9e7 	bl	8005d6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800599e:	4811      	ldr	r0, [pc, #68]	; (80059e4 <MX_TIM11_Init+0x94>)
 80059a0:	f007 fc65 	bl	800d26e <HAL_TIM_PWM_Init>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d001      	beq.n	80059ae <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80059aa:	f000 f9df 	bl	8005d6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80059ae:	2360      	movs	r3, #96	; 0x60
 80059b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80059b2:	2300      	movs	r3, #0
 80059b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80059b6:	2300      	movs	r3, #0
 80059b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80059ba:	2300      	movs	r3, #0
 80059bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80059be:	1d3b      	adds	r3, r7, #4
 80059c0:	2200      	movs	r2, #0
 80059c2:	4619      	mov	r1, r3
 80059c4:	4807      	ldr	r0, [pc, #28]	; (80059e4 <MX_TIM11_Init+0x94>)
 80059c6:	f007 fe8d 	bl	800d6e4 <HAL_TIM_PWM_ConfigChannel>
 80059ca:	4603      	mov	r3, r0
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d001      	beq.n	80059d4 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80059d0:	f000 f9cc 	bl	8005d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80059d4:	4803      	ldr	r0, [pc, #12]	; (80059e4 <MX_TIM11_Init+0x94>)
 80059d6:	f000 fdb9 	bl	800654c <HAL_TIM_MspPostInit>

}
 80059da:	bf00      	nop
 80059dc:	3720      	adds	r7, #32
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	2003eaa0 	.word	0x2003eaa0
 80059e8:	40014800 	.word	0x40014800

080059ec <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80059f0:	4b0e      	ldr	r3, [pc, #56]	; (8005a2c <MX_TIM13_Init+0x40>)
 80059f2:	4a0f      	ldr	r2, [pc, #60]	; (8005a30 <MX_TIM13_Init+0x44>)
 80059f4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 80059f6:	4b0d      	ldr	r3, [pc, #52]	; (8005a2c <MX_TIM13_Init+0x40>)
 80059f8:	2259      	movs	r2, #89	; 0x59
 80059fa:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80059fc:	4b0b      	ldr	r3, [pc, #44]	; (8005a2c <MX_TIM13_Init+0x40>)
 80059fe:	2200      	movs	r2, #0
 8005a00:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8005a02:	4b0a      	ldr	r3, [pc, #40]	; (8005a2c <MX_TIM13_Init+0x40>)
 8005a04:	f242 720f 	movw	r2, #9999	; 0x270f
 8005a08:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a0a:	4b08      	ldr	r3, [pc, #32]	; (8005a2c <MX_TIM13_Init+0x40>)
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005a10:	4b06      	ldr	r3, [pc, #24]	; (8005a2c <MX_TIM13_Init+0x40>)
 8005a12:	2280      	movs	r2, #128	; 0x80
 8005a14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8005a16:	4805      	ldr	r0, [pc, #20]	; (8005a2c <MX_TIM13_Init+0x40>)
 8005a18:	f007 fbda 	bl	800d1d0 <HAL_TIM_Base_Init>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d001      	beq.n	8005a26 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8005a22:	f000 f9a3 	bl	8005d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8005a26:	bf00      	nop
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	2003ea60 	.word	0x2003ea60
 8005a30:	40001c00 	.word	0x40001c00

08005a34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005a38:	4b11      	ldr	r3, [pc, #68]	; (8005a80 <MX_USART2_UART_Init+0x4c>)
 8005a3a:	4a12      	ldr	r2, [pc, #72]	; (8005a84 <MX_USART2_UART_Init+0x50>)
 8005a3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005a3e:	4b10      	ldr	r3, [pc, #64]	; (8005a80 <MX_USART2_UART_Init+0x4c>)
 8005a40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005a44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005a46:	4b0e      	ldr	r3, [pc, #56]	; (8005a80 <MX_USART2_UART_Init+0x4c>)
 8005a48:	2200      	movs	r2, #0
 8005a4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005a4c:	4b0c      	ldr	r3, [pc, #48]	; (8005a80 <MX_USART2_UART_Init+0x4c>)
 8005a4e:	2200      	movs	r2, #0
 8005a50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005a52:	4b0b      	ldr	r3, [pc, #44]	; (8005a80 <MX_USART2_UART_Init+0x4c>)
 8005a54:	2200      	movs	r2, #0
 8005a56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005a58:	4b09      	ldr	r3, [pc, #36]	; (8005a80 <MX_USART2_UART_Init+0x4c>)
 8005a5a:	220c      	movs	r2, #12
 8005a5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005a5e:	4b08      	ldr	r3, [pc, #32]	; (8005a80 <MX_USART2_UART_Init+0x4c>)
 8005a60:	2200      	movs	r2, #0
 8005a62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005a64:	4b06      	ldr	r3, [pc, #24]	; (8005a80 <MX_USART2_UART_Init+0x4c>)
 8005a66:	2200      	movs	r2, #0
 8005a68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005a6a:	4805      	ldr	r0, [pc, #20]	; (8005a80 <MX_USART2_UART_Init+0x4c>)
 8005a6c:	f008 fa80 	bl	800df70 <HAL_UART_Init>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d001      	beq.n	8005a7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005a76:	f000 f979 	bl	8005d6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005a7a:	bf00      	nop
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	2003ec44 	.word	0x2003ec44
 8005a84:	40004400 	.word	0x40004400

08005a88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005a8e:	2300      	movs	r3, #0
 8005a90:	607b      	str	r3, [r7, #4]
 8005a92:	4b14      	ldr	r3, [pc, #80]	; (8005ae4 <MX_DMA_Init+0x5c>)
 8005a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a96:	4a13      	ldr	r2, [pc, #76]	; (8005ae4 <MX_DMA_Init+0x5c>)
 8005a98:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8005a9e:	4b11      	ldr	r3, [pc, #68]	; (8005ae4 <MX_DMA_Init+0x5c>)
 8005aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005aa6:	607b      	str	r3, [r7, #4]
 8005aa8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8005aaa:	2200      	movs	r2, #0
 8005aac:	2100      	movs	r1, #0
 8005aae:	203a      	movs	r0, #58	; 0x3a
 8005ab0:	f002 ff59 	bl	8008966 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8005ab4:	203a      	movs	r0, #58	; 0x3a
 8005ab6:	f002 ff72 	bl	800899e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8005aba:	2200      	movs	r2, #0
 8005abc:	2100      	movs	r1, #0
 8005abe:	203b      	movs	r0, #59	; 0x3b
 8005ac0:	f002 ff51 	bl	8008966 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8005ac4:	203b      	movs	r0, #59	; 0x3b
 8005ac6:	f002 ff6a 	bl	800899e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8005aca:	2200      	movs	r2, #0
 8005acc:	2100      	movs	r1, #0
 8005ace:	2045      	movs	r0, #69	; 0x45
 8005ad0:	f002 ff49 	bl	8008966 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8005ad4:	2045      	movs	r0, #69	; 0x45
 8005ad6:	f002 ff62 	bl	800899e <HAL_NVIC_EnableIRQ>

}
 8005ada:	bf00      	nop
 8005adc:	3708      	adds	r7, #8
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	40023800 	.word	0x40023800

08005ae8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b08c      	sub	sp, #48	; 0x30
 8005aec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005aee:	f107 031c 	add.w	r3, r7, #28
 8005af2:	2200      	movs	r2, #0
 8005af4:	601a      	str	r2, [r3, #0]
 8005af6:	605a      	str	r2, [r3, #4]
 8005af8:	609a      	str	r2, [r3, #8]
 8005afa:	60da      	str	r2, [r3, #12]
 8005afc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005afe:	2300      	movs	r3, #0
 8005b00:	61bb      	str	r3, [r7, #24]
 8005b02:	4b94      	ldr	r3, [pc, #592]	; (8005d54 <MX_GPIO_Init+0x26c>)
 8005b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b06:	4a93      	ldr	r2, [pc, #588]	; (8005d54 <MX_GPIO_Init+0x26c>)
 8005b08:	f043 0310 	orr.w	r3, r3, #16
 8005b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8005b0e:	4b91      	ldr	r3, [pc, #580]	; (8005d54 <MX_GPIO_Init+0x26c>)
 8005b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b12:	f003 0310 	and.w	r3, r3, #16
 8005b16:	61bb      	str	r3, [r7, #24]
 8005b18:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	617b      	str	r3, [r7, #20]
 8005b1e:	4b8d      	ldr	r3, [pc, #564]	; (8005d54 <MX_GPIO_Init+0x26c>)
 8005b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b22:	4a8c      	ldr	r2, [pc, #560]	; (8005d54 <MX_GPIO_Init+0x26c>)
 8005b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b28:	6313      	str	r3, [r2, #48]	; 0x30
 8005b2a:	4b8a      	ldr	r3, [pc, #552]	; (8005d54 <MX_GPIO_Init+0x26c>)
 8005b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b32:	617b      	str	r3, [r7, #20]
 8005b34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b36:	2300      	movs	r3, #0
 8005b38:	613b      	str	r3, [r7, #16]
 8005b3a:	4b86      	ldr	r3, [pc, #536]	; (8005d54 <MX_GPIO_Init+0x26c>)
 8005b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b3e:	4a85      	ldr	r2, [pc, #532]	; (8005d54 <MX_GPIO_Init+0x26c>)
 8005b40:	f043 0304 	orr.w	r3, r3, #4
 8005b44:	6313      	str	r3, [r2, #48]	; 0x30
 8005b46:	4b83      	ldr	r3, [pc, #524]	; (8005d54 <MX_GPIO_Init+0x26c>)
 8005b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b4a:	f003 0304 	and.w	r3, r3, #4
 8005b4e:	613b      	str	r3, [r7, #16]
 8005b50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b52:	2300      	movs	r3, #0
 8005b54:	60fb      	str	r3, [r7, #12]
 8005b56:	4b7f      	ldr	r3, [pc, #508]	; (8005d54 <MX_GPIO_Init+0x26c>)
 8005b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b5a:	4a7e      	ldr	r2, [pc, #504]	; (8005d54 <MX_GPIO_Init+0x26c>)
 8005b5c:	f043 0301 	orr.w	r3, r3, #1
 8005b60:	6313      	str	r3, [r2, #48]	; 0x30
 8005b62:	4b7c      	ldr	r3, [pc, #496]	; (8005d54 <MX_GPIO_Init+0x26c>)
 8005b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b66:	f003 0301 	and.w	r3, r3, #1
 8005b6a:	60fb      	str	r3, [r7, #12]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b6e:	2300      	movs	r3, #0
 8005b70:	60bb      	str	r3, [r7, #8]
 8005b72:	4b78      	ldr	r3, [pc, #480]	; (8005d54 <MX_GPIO_Init+0x26c>)
 8005b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b76:	4a77      	ldr	r2, [pc, #476]	; (8005d54 <MX_GPIO_Init+0x26c>)
 8005b78:	f043 0302 	orr.w	r3, r3, #2
 8005b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8005b7e:	4b75      	ldr	r3, [pc, #468]	; (8005d54 <MX_GPIO_Init+0x26c>)
 8005b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b82:	f003 0302 	and.w	r3, r3, #2
 8005b86:	60bb      	str	r3, [r7, #8]
 8005b88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	607b      	str	r3, [r7, #4]
 8005b8e:	4b71      	ldr	r3, [pc, #452]	; (8005d54 <MX_GPIO_Init+0x26c>)
 8005b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b92:	4a70      	ldr	r2, [pc, #448]	; (8005d54 <MX_GPIO_Init+0x26c>)
 8005b94:	f043 0308 	orr.w	r3, r3, #8
 8005b98:	6313      	str	r3, [r2, #48]	; 0x30
 8005b9a:	4b6e      	ldr	r3, [pc, #440]	; (8005d54 <MX_GPIO_Init+0x26c>)
 8005b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9e:	f003 0308 	and.w	r3, r3, #8
 8005ba2:	607b      	str	r3, [r7, #4]
 8005ba4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005bac:	486a      	ldr	r0, [pc, #424]	; (8005d58 <MX_GPIO_Init+0x270>)
 8005bae:	f003 fc6f 	bl	8009490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005bb8:	4868      	ldr	r0, [pc, #416]	; (8005d5c <MX_GPIO_Init+0x274>)
 8005bba:	f003 fc69 	bl	8009490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005bc4:	4866      	ldr	r0, [pc, #408]	; (8005d60 <MX_GPIO_Init+0x278>)
 8005bc6:	f003 fc63 	bl	8009490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8005bd0:	4864      	ldr	r0, [pc, #400]	; (8005d64 <MX_GPIO_Init+0x27c>)
 8005bd2:	f003 fc5d 	bl	8009490 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005bd6:	2304      	movs	r3, #4
 8005bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bde:	2300      	movs	r3, #0
 8005be0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005be2:	f107 031c 	add.w	r3, r7, #28
 8005be6:	4619      	mov	r1, r3
 8005be8:	485b      	ldr	r0, [pc, #364]	; (8005d58 <MX_GPIO_Init+0x270>)
 8005bea:	f003 fa8f 	bl	800910c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8005bee:	230f      	movs	r3, #15
 8005bf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005bfa:	f107 031c 	add.w	r3, r7, #28
 8005bfe:	4619      	mov	r1, r3
 8005c00:	4859      	ldr	r0, [pc, #356]	; (8005d68 <MX_GPIO_Init+0x280>)
 8005c02:	f003 fa83 	bl	800910c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005c06:	23e1      	movs	r3, #225	; 0xe1
 8005c08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c12:	f107 031c 	add.w	r3, r7, #28
 8005c16:	4619      	mov	r1, r3
 8005c18:	4852      	ldr	r0, [pc, #328]	; (8005d64 <MX_GPIO_Init+0x27c>)
 8005c1a:	f003 fa77 	bl	800910c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005c22:	2303      	movs	r3, #3
 8005c24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c26:	2300      	movs	r3, #0
 8005c28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c2a:	f107 031c 	add.w	r3, r7, #28
 8005c2e:	4619      	mov	r1, r3
 8005c30:	484a      	ldr	r0, [pc, #296]	; (8005d5c <MX_GPIO_Init+0x274>)
 8005c32:	f003 fa6b 	bl	800910c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005c36:	2304      	movs	r3, #4
 8005c38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c42:	f107 031c 	add.w	r3, r7, #28
 8005c46:	4619      	mov	r1, r3
 8005c48:	4844      	ldr	r0, [pc, #272]	; (8005d5c <MX_GPIO_Init+0x274>)
 8005c4a:	f003 fa5f 	bl	800910c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8005c4e:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8005c52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005c54:	2300      	movs	r3, #0
 8005c56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005c5c:	f107 031c 	add.w	r3, r7, #28
 8005c60:	4619      	mov	r1, r3
 8005c62:	483d      	ldr	r0, [pc, #244]	; (8005d58 <MX_GPIO_Init+0x270>)
 8005c64:	f003 fa52 	bl	800910c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8005c68:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005c6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c72:	2300      	movs	r3, #0
 8005c74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c76:	2300      	movs	r3, #0
 8005c78:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005c7a:	f107 031c 	add.w	r3, r7, #28
 8005c7e:	4619      	mov	r1, r3
 8005c80:	4835      	ldr	r0, [pc, #212]	; (8005d58 <MX_GPIO_Init+0x270>)
 8005c82:	f003 fa43 	bl	800910c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005c86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c90:	2300      	movs	r3, #0
 8005c92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c94:	2300      	movs	r3, #0
 8005c96:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c98:	f107 031c 	add.w	r3, r7, #28
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	482f      	ldr	r0, [pc, #188]	; (8005d5c <MX_GPIO_Init+0x274>)
 8005ca0:	f003 fa34 	bl	800910c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005ca4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ca8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005caa:	2300      	movs	r3, #0
 8005cac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005cb2:	f107 031c 	add.w	r3, r7, #28
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	4829      	ldr	r0, [pc, #164]	; (8005d60 <MX_GPIO_Init+0x278>)
 8005cba:	f003 fa27 	bl	800910c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005cbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005cc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005cd0:	f107 031c 	add.w	r3, r7, #28
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	4822      	ldr	r0, [pc, #136]	; (8005d60 <MX_GPIO_Init+0x278>)
 8005cd8:	f003 fa18 	bl	800910c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005cdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ce0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cea:	2300      	movs	r3, #0
 8005cec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005cee:	f107 031c 	add.w	r3, r7, #28
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	481a      	ldr	r0, [pc, #104]	; (8005d60 <MX_GPIO_Init+0x278>)
 8005cf6:	f003 fa09 	bl	800910c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8005cfa:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8005cfe:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005d00:	2301      	movs	r3, #1
 8005d02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d04:	2300      	movs	r3, #0
 8005d06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d0c:	f107 031c 	add.w	r3, r7, #28
 8005d10:	4619      	mov	r1, r3
 8005d12:	4814      	ldr	r0, [pc, #80]	; (8005d64 <MX_GPIO_Init+0x27c>)
 8005d14:	f003 f9fa 	bl	800910c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005d18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d22:	2300      	movs	r3, #0
 8005d24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d26:	f107 031c 	add.w	r3, r7, #28
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	480d      	ldr	r0, [pc, #52]	; (8005d64 <MX_GPIO_Init+0x27c>)
 8005d2e:	f003 f9ed 	bl	800910c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8005d32:	239b      	movs	r3, #155	; 0x9b
 8005d34:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005d36:	2300      	movs	r3, #0
 8005d38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005d3e:	f107 031c 	add.w	r3, r7, #28
 8005d42:	4619      	mov	r1, r3
 8005d44:	4806      	ldr	r0, [pc, #24]	; (8005d60 <MX_GPIO_Init+0x278>)
 8005d46:	f003 f9e1 	bl	800910c <HAL_GPIO_Init>

}
 8005d4a:	bf00      	nop
 8005d4c:	3730      	adds	r7, #48	; 0x30
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	40023800 	.word	0x40023800
 8005d58:	40021000 	.word	0x40021000
 8005d5c:	40020400 	.word	0x40020400
 8005d60:	40020c00 	.word	0x40020c00
 8005d64:	40020000 	.word	0x40020000
 8005d68:	40020800 	.word	0x40020800

08005d6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005d70:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005d72:	e7fe      	b.n	8005d72 <Error_Handler+0x6>

08005d74 <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 8005d74:	b480      	push	{r7}
 8005d76:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8005d78:	bf00      	nop
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
	...

08005d84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	607b      	str	r3, [r7, #4]
 8005d8e:	4b10      	ldr	r3, [pc, #64]	; (8005dd0 <HAL_MspInit+0x4c>)
 8005d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d92:	4a0f      	ldr	r2, [pc, #60]	; (8005dd0 <HAL_MspInit+0x4c>)
 8005d94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d98:	6453      	str	r3, [r2, #68]	; 0x44
 8005d9a:	4b0d      	ldr	r3, [pc, #52]	; (8005dd0 <HAL_MspInit+0x4c>)
 8005d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005da2:	607b      	str	r3, [r7, #4]
 8005da4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005da6:	2300      	movs	r3, #0
 8005da8:	603b      	str	r3, [r7, #0]
 8005daa:	4b09      	ldr	r3, [pc, #36]	; (8005dd0 <HAL_MspInit+0x4c>)
 8005dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dae:	4a08      	ldr	r2, [pc, #32]	; (8005dd0 <HAL_MspInit+0x4c>)
 8005db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005db4:	6413      	str	r3, [r2, #64]	; 0x40
 8005db6:	4b06      	ldr	r3, [pc, #24]	; (8005dd0 <HAL_MspInit+0x4c>)
 8005db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dbe:	603b      	str	r3, [r7, #0]
 8005dc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005dc2:	bf00      	nop
 8005dc4:	370c      	adds	r7, #12
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	40023800 	.word	0x40023800

08005dd4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b08c      	sub	sp, #48	; 0x30
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ddc:	f107 031c 	add.w	r3, r7, #28
 8005de0:	2200      	movs	r2, #0
 8005de2:	601a      	str	r2, [r3, #0]
 8005de4:	605a      	str	r2, [r3, #4]
 8005de6:	609a      	str	r2, [r3, #8]
 8005de8:	60da      	str	r2, [r3, #12]
 8005dea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a4a      	ldr	r2, [pc, #296]	; (8005f1c <HAL_ADC_MspInit+0x148>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	f040 808e 	bne.w	8005f14 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005df8:	2300      	movs	r3, #0
 8005dfa:	61bb      	str	r3, [r7, #24]
 8005dfc:	4b48      	ldr	r3, [pc, #288]	; (8005f20 <HAL_ADC_MspInit+0x14c>)
 8005dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e00:	4a47      	ldr	r2, [pc, #284]	; (8005f20 <HAL_ADC_MspInit+0x14c>)
 8005e02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e06:	6453      	str	r3, [r2, #68]	; 0x44
 8005e08:	4b45      	ldr	r3, [pc, #276]	; (8005f20 <HAL_ADC_MspInit+0x14c>)
 8005e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e10:	61bb      	str	r3, [r7, #24]
 8005e12:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e14:	2300      	movs	r3, #0
 8005e16:	617b      	str	r3, [r7, #20]
 8005e18:	4b41      	ldr	r3, [pc, #260]	; (8005f20 <HAL_ADC_MspInit+0x14c>)
 8005e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1c:	4a40      	ldr	r2, [pc, #256]	; (8005f20 <HAL_ADC_MspInit+0x14c>)
 8005e1e:	f043 0304 	orr.w	r3, r3, #4
 8005e22:	6313      	str	r3, [r2, #48]	; 0x30
 8005e24:	4b3e      	ldr	r3, [pc, #248]	; (8005f20 <HAL_ADC_MspInit+0x14c>)
 8005e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e28:	f003 0304 	and.w	r3, r3, #4
 8005e2c:	617b      	str	r3, [r7, #20]
 8005e2e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e30:	2300      	movs	r3, #0
 8005e32:	613b      	str	r3, [r7, #16]
 8005e34:	4b3a      	ldr	r3, [pc, #232]	; (8005f20 <HAL_ADC_MspInit+0x14c>)
 8005e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e38:	4a39      	ldr	r2, [pc, #228]	; (8005f20 <HAL_ADC_MspInit+0x14c>)
 8005e3a:	f043 0301 	orr.w	r3, r3, #1
 8005e3e:	6313      	str	r3, [r2, #48]	; 0x30
 8005e40:	4b37      	ldr	r3, [pc, #220]	; (8005f20 <HAL_ADC_MspInit+0x14c>)
 8005e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e44:	f003 0301 	and.w	r3, r3, #1
 8005e48:	613b      	str	r3, [r7, #16]
 8005e4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	60fb      	str	r3, [r7, #12]
 8005e50:	4b33      	ldr	r3, [pc, #204]	; (8005f20 <HAL_ADC_MspInit+0x14c>)
 8005e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e54:	4a32      	ldr	r2, [pc, #200]	; (8005f20 <HAL_ADC_MspInit+0x14c>)
 8005e56:	f043 0302 	orr.w	r3, r3, #2
 8005e5a:	6313      	str	r3, [r2, #48]	; 0x30
 8005e5c:	4b30      	ldr	r3, [pc, #192]	; (8005f20 <HAL_ADC_MspInit+0x14c>)
 8005e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e60:	f003 0302 	and.w	r3, r3, #2
 8005e64:	60fb      	str	r3, [r7, #12]
 8005e66:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8005e68:	230f      	movs	r3, #15
 8005e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e70:	2300      	movs	r3, #0
 8005e72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005e74:	f107 031c 	add.w	r3, r7, #28
 8005e78:	4619      	mov	r1, r3
 8005e7a:	482a      	ldr	r0, [pc, #168]	; (8005f24 <HAL_ADC_MspInit+0x150>)
 8005e7c:	f003 f946 	bl	800910c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8005e80:	23ff      	movs	r3, #255	; 0xff
 8005e82:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005e84:	2303      	movs	r3, #3
 8005e86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e8c:	f107 031c 	add.w	r3, r7, #28
 8005e90:	4619      	mov	r1, r3
 8005e92:	4825      	ldr	r0, [pc, #148]	; (8005f28 <HAL_ADC_MspInit+0x154>)
 8005e94:	f003 f93a 	bl	800910c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ea4:	f107 031c 	add.w	r3, r7, #28
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	4820      	ldr	r0, [pc, #128]	; (8005f2c <HAL_ADC_MspInit+0x158>)
 8005eac:	f003 f92e 	bl	800910c <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8005eb0:	4b1f      	ldr	r3, [pc, #124]	; (8005f30 <HAL_ADC_MspInit+0x15c>)
 8005eb2:	4a20      	ldr	r2, [pc, #128]	; (8005f34 <HAL_ADC_MspInit+0x160>)
 8005eb4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8005eb6:	4b1e      	ldr	r3, [pc, #120]	; (8005f30 <HAL_ADC_MspInit+0x15c>)
 8005eb8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005ebc:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005ebe:	4b1c      	ldr	r3, [pc, #112]	; (8005f30 <HAL_ADC_MspInit+0x15c>)
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ec4:	4b1a      	ldr	r3, [pc, #104]	; (8005f30 <HAL_ADC_MspInit+0x15c>)
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8005eca:	4b19      	ldr	r3, [pc, #100]	; (8005f30 <HAL_ADC_MspInit+0x15c>)
 8005ecc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ed0:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005ed2:	4b17      	ldr	r3, [pc, #92]	; (8005f30 <HAL_ADC_MspInit+0x15c>)
 8005ed4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ed8:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005eda:	4b15      	ldr	r3, [pc, #84]	; (8005f30 <HAL_ADC_MspInit+0x15c>)
 8005edc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005ee0:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8005ee2:	4b13      	ldr	r3, [pc, #76]	; (8005f30 <HAL_ADC_MspInit+0x15c>)
 8005ee4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ee8:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005eea:	4b11      	ldr	r3, [pc, #68]	; (8005f30 <HAL_ADC_MspInit+0x15c>)
 8005eec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005ef0:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005ef2:	4b0f      	ldr	r3, [pc, #60]	; (8005f30 <HAL_ADC_MspInit+0x15c>)
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8005ef8:	480d      	ldr	r0, [pc, #52]	; (8005f30 <HAL_ADC_MspInit+0x15c>)
 8005efa:	f002 fd6b 	bl	80089d4 <HAL_DMA_Init>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d001      	beq.n	8005f08 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8005f04:	f7ff ff32 	bl	8005d6c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a09      	ldr	r2, [pc, #36]	; (8005f30 <HAL_ADC_MspInit+0x15c>)
 8005f0c:	639a      	str	r2, [r3, #56]	; 0x38
 8005f0e:	4a08      	ldr	r2, [pc, #32]	; (8005f30 <HAL_ADC_MspInit+0x15c>)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8005f14:	bf00      	nop
 8005f16:	3730      	adds	r7, #48	; 0x30
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	40012100 	.word	0x40012100
 8005f20:	40023800 	.word	0x40023800
 8005f24:	40020800 	.word	0x40020800
 8005f28:	40020000 	.word	0x40020000
 8005f2c:	40020400 	.word	0x40020400
 8005f30:	2003ec84 	.word	0x2003ec84
 8005f34:	40026440 	.word	0x40026440

08005f38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b08c      	sub	sp, #48	; 0x30
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f40:	f107 031c 	add.w	r3, r7, #28
 8005f44:	2200      	movs	r2, #0
 8005f46:	601a      	str	r2, [r3, #0]
 8005f48:	605a      	str	r2, [r3, #4]
 8005f4a:	609a      	str	r2, [r3, #8]
 8005f4c:	60da      	str	r2, [r3, #12]
 8005f4e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a32      	ldr	r2, [pc, #200]	; (8006020 <HAL_I2C_MspInit+0xe8>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d12c      	bne.n	8005fb4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	61bb      	str	r3, [r7, #24]
 8005f5e:	4b31      	ldr	r3, [pc, #196]	; (8006024 <HAL_I2C_MspInit+0xec>)
 8005f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f62:	4a30      	ldr	r2, [pc, #192]	; (8006024 <HAL_I2C_MspInit+0xec>)
 8005f64:	f043 0302 	orr.w	r3, r3, #2
 8005f68:	6313      	str	r3, [r2, #48]	; 0x30
 8005f6a:	4b2e      	ldr	r3, [pc, #184]	; (8006024 <HAL_I2C_MspInit+0xec>)
 8005f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f6e:	f003 0302 	and.w	r3, r3, #2
 8005f72:	61bb      	str	r3, [r7, #24]
 8005f74:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005f76:	23c0      	movs	r3, #192	; 0xc0
 8005f78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005f7a:	2312      	movs	r3, #18
 8005f7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f82:	2303      	movs	r3, #3
 8005f84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005f86:	2304      	movs	r3, #4
 8005f88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f8a:	f107 031c 	add.w	r3, r7, #28
 8005f8e:	4619      	mov	r1, r3
 8005f90:	4825      	ldr	r0, [pc, #148]	; (8006028 <HAL_I2C_MspInit+0xf0>)
 8005f92:	f003 f8bb 	bl	800910c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005f96:	2300      	movs	r3, #0
 8005f98:	617b      	str	r3, [r7, #20]
 8005f9a:	4b22      	ldr	r3, [pc, #136]	; (8006024 <HAL_I2C_MspInit+0xec>)
 8005f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9e:	4a21      	ldr	r2, [pc, #132]	; (8006024 <HAL_I2C_MspInit+0xec>)
 8005fa0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8005fa6:	4b1f      	ldr	r3, [pc, #124]	; (8006024 <HAL_I2C_MspInit+0xec>)
 8005fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005faa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fae:	617b      	str	r3, [r7, #20]
 8005fb0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8005fb2:	e031      	b.n	8006018 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a1c      	ldr	r2, [pc, #112]	; (800602c <HAL_I2C_MspInit+0xf4>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d12c      	bne.n	8006018 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	613b      	str	r3, [r7, #16]
 8005fc2:	4b18      	ldr	r3, [pc, #96]	; (8006024 <HAL_I2C_MspInit+0xec>)
 8005fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc6:	4a17      	ldr	r2, [pc, #92]	; (8006024 <HAL_I2C_MspInit+0xec>)
 8005fc8:	f043 0302 	orr.w	r3, r3, #2
 8005fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8005fce:	4b15      	ldr	r3, [pc, #84]	; (8006024 <HAL_I2C_MspInit+0xec>)
 8005fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd2:	f003 0302 	and.w	r3, r3, #2
 8005fd6:	613b      	str	r3, [r7, #16]
 8005fd8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005fda:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005fde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005fe0:	2312      	movs	r3, #18
 8005fe2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fe8:	2303      	movs	r3, #3
 8005fea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005fec:	2304      	movs	r3, #4
 8005fee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ff0:	f107 031c 	add.w	r3, r7, #28
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	480c      	ldr	r0, [pc, #48]	; (8006028 <HAL_I2C_MspInit+0xf0>)
 8005ff8:	f003 f888 	bl	800910c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	60fb      	str	r3, [r7, #12]
 8006000:	4b08      	ldr	r3, [pc, #32]	; (8006024 <HAL_I2C_MspInit+0xec>)
 8006002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006004:	4a07      	ldr	r2, [pc, #28]	; (8006024 <HAL_I2C_MspInit+0xec>)
 8006006:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800600a:	6413      	str	r3, [r2, #64]	; 0x40
 800600c:	4b05      	ldr	r3, [pc, #20]	; (8006024 <HAL_I2C_MspInit+0xec>)
 800600e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006010:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006014:	60fb      	str	r3, [r7, #12]
 8006016:	68fb      	ldr	r3, [r7, #12]
}
 8006018:	bf00      	nop
 800601a:	3730      	adds	r7, #48	; 0x30
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}
 8006020:	40005400 	.word	0x40005400
 8006024:	40023800 	.word	0x40023800
 8006028:	40020400 	.word	0x40020400
 800602c:	40005800 	.word	0x40005800

08006030 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b08a      	sub	sp, #40	; 0x28
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006038:	f107 0314 	add.w	r3, r7, #20
 800603c:	2200      	movs	r2, #0
 800603e:	601a      	str	r2, [r3, #0]
 8006040:	605a      	str	r2, [r3, #4]
 8006042:	609a      	str	r2, [r3, #8]
 8006044:	60da      	str	r2, [r3, #12]
 8006046:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a69      	ldr	r2, [pc, #420]	; (80061f4 <HAL_SD_MspInit+0x1c4>)
 800604e:	4293      	cmp	r3, r2
 8006050:	f040 80cb 	bne.w	80061ea <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8006054:	2300      	movs	r3, #0
 8006056:	613b      	str	r3, [r7, #16]
 8006058:	4b67      	ldr	r3, [pc, #412]	; (80061f8 <HAL_SD_MspInit+0x1c8>)
 800605a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800605c:	4a66      	ldr	r2, [pc, #408]	; (80061f8 <HAL_SD_MspInit+0x1c8>)
 800605e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006062:	6453      	str	r3, [r2, #68]	; 0x44
 8006064:	4b64      	ldr	r3, [pc, #400]	; (80061f8 <HAL_SD_MspInit+0x1c8>)
 8006066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006068:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800606c:	613b      	str	r3, [r7, #16]
 800606e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006070:	2300      	movs	r3, #0
 8006072:	60fb      	str	r3, [r7, #12]
 8006074:	4b60      	ldr	r3, [pc, #384]	; (80061f8 <HAL_SD_MspInit+0x1c8>)
 8006076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006078:	4a5f      	ldr	r2, [pc, #380]	; (80061f8 <HAL_SD_MspInit+0x1c8>)
 800607a:	f043 0304 	orr.w	r3, r3, #4
 800607e:	6313      	str	r3, [r2, #48]	; 0x30
 8006080:	4b5d      	ldr	r3, [pc, #372]	; (80061f8 <HAL_SD_MspInit+0x1c8>)
 8006082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006084:	f003 0304 	and.w	r3, r3, #4
 8006088:	60fb      	str	r3, [r7, #12]
 800608a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800608c:	2300      	movs	r3, #0
 800608e:	60bb      	str	r3, [r7, #8]
 8006090:	4b59      	ldr	r3, [pc, #356]	; (80061f8 <HAL_SD_MspInit+0x1c8>)
 8006092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006094:	4a58      	ldr	r2, [pc, #352]	; (80061f8 <HAL_SD_MspInit+0x1c8>)
 8006096:	f043 0308 	orr.w	r3, r3, #8
 800609a:	6313      	str	r3, [r2, #48]	; 0x30
 800609c:	4b56      	ldr	r3, [pc, #344]	; (80061f8 <HAL_SD_MspInit+0x1c8>)
 800609e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a0:	f003 0308 	and.w	r3, r3, #8
 80060a4:	60bb      	str	r3, [r7, #8]
 80060a6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80060a8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80060ac:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060ae:	2302      	movs	r3, #2
 80060b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060b2:	2300      	movs	r3, #0
 80060b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060b6:	2303      	movs	r3, #3
 80060b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80060ba:	230c      	movs	r3, #12
 80060bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80060be:	f107 0314 	add.w	r3, r7, #20
 80060c2:	4619      	mov	r1, r3
 80060c4:	484d      	ldr	r0, [pc, #308]	; (80061fc <HAL_SD_MspInit+0x1cc>)
 80060c6:	f003 f821 	bl	800910c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80060ca:	2304      	movs	r3, #4
 80060cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060ce:	2302      	movs	r3, #2
 80060d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060d2:	2300      	movs	r3, #0
 80060d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060d6:	2303      	movs	r3, #3
 80060d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80060da:	230c      	movs	r3, #12
 80060dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80060de:	f107 0314 	add.w	r3, r7, #20
 80060e2:	4619      	mov	r1, r3
 80060e4:	4846      	ldr	r0, [pc, #280]	; (8006200 <HAL_SD_MspInit+0x1d0>)
 80060e6:	f003 f811 	bl	800910c <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80060ea:	4b46      	ldr	r3, [pc, #280]	; (8006204 <HAL_SD_MspInit+0x1d4>)
 80060ec:	4a46      	ldr	r2, [pc, #280]	; (8006208 <HAL_SD_MspInit+0x1d8>)
 80060ee:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80060f0:	4b44      	ldr	r3, [pc, #272]	; (8006204 <HAL_SD_MspInit+0x1d4>)
 80060f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80060f6:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80060f8:	4b42      	ldr	r3, [pc, #264]	; (8006204 <HAL_SD_MspInit+0x1d4>)
 80060fa:	2200      	movs	r2, #0
 80060fc:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80060fe:	4b41      	ldr	r3, [pc, #260]	; (8006204 <HAL_SD_MspInit+0x1d4>)
 8006100:	2200      	movs	r2, #0
 8006102:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006104:	4b3f      	ldr	r3, [pc, #252]	; (8006204 <HAL_SD_MspInit+0x1d4>)
 8006106:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800610a:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800610c:	4b3d      	ldr	r3, [pc, #244]	; (8006204 <HAL_SD_MspInit+0x1d4>)
 800610e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006112:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006114:	4b3b      	ldr	r3, [pc, #236]	; (8006204 <HAL_SD_MspInit+0x1d4>)
 8006116:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800611a:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800611c:	4b39      	ldr	r3, [pc, #228]	; (8006204 <HAL_SD_MspInit+0x1d4>)
 800611e:	2220      	movs	r2, #32
 8006120:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006122:	4b38      	ldr	r3, [pc, #224]	; (8006204 <HAL_SD_MspInit+0x1d4>)
 8006124:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006128:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800612a:	4b36      	ldr	r3, [pc, #216]	; (8006204 <HAL_SD_MspInit+0x1d4>)
 800612c:	2204      	movs	r2, #4
 800612e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006130:	4b34      	ldr	r3, [pc, #208]	; (8006204 <HAL_SD_MspInit+0x1d4>)
 8006132:	2203      	movs	r2, #3
 8006134:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8006136:	4b33      	ldr	r3, [pc, #204]	; (8006204 <HAL_SD_MspInit+0x1d4>)
 8006138:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800613c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800613e:	4b31      	ldr	r3, [pc, #196]	; (8006204 <HAL_SD_MspInit+0x1d4>)
 8006140:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006144:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8006146:	482f      	ldr	r0, [pc, #188]	; (8006204 <HAL_SD_MspInit+0x1d4>)
 8006148:	f002 fc44 	bl	80089d4 <HAL_DMA_Init>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d001      	beq.n	8006156 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8006152:	f7ff fe0b 	bl	8005d6c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a2a      	ldr	r2, [pc, #168]	; (8006204 <HAL_SD_MspInit+0x1d4>)
 800615a:	641a      	str	r2, [r3, #64]	; 0x40
 800615c:	4a29      	ldr	r2, [pc, #164]	; (8006204 <HAL_SD_MspInit+0x1d4>)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8006162:	4b2a      	ldr	r3, [pc, #168]	; (800620c <HAL_SD_MspInit+0x1dc>)
 8006164:	4a2a      	ldr	r2, [pc, #168]	; (8006210 <HAL_SD_MspInit+0x1e0>)
 8006166:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8006168:	4b28      	ldr	r3, [pc, #160]	; (800620c <HAL_SD_MspInit+0x1dc>)
 800616a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800616e:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006170:	4b26      	ldr	r3, [pc, #152]	; (800620c <HAL_SD_MspInit+0x1dc>)
 8006172:	2240      	movs	r2, #64	; 0x40
 8006174:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006176:	4b25      	ldr	r3, [pc, #148]	; (800620c <HAL_SD_MspInit+0x1dc>)
 8006178:	2200      	movs	r2, #0
 800617a:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800617c:	4b23      	ldr	r3, [pc, #140]	; (800620c <HAL_SD_MspInit+0x1dc>)
 800617e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006182:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006184:	4b21      	ldr	r3, [pc, #132]	; (800620c <HAL_SD_MspInit+0x1dc>)
 8006186:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800618a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800618c:	4b1f      	ldr	r3, [pc, #124]	; (800620c <HAL_SD_MspInit+0x1dc>)
 800618e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006192:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8006194:	4b1d      	ldr	r3, [pc, #116]	; (800620c <HAL_SD_MspInit+0x1dc>)
 8006196:	2220      	movs	r2, #32
 8006198:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800619a:	4b1c      	ldr	r3, [pc, #112]	; (800620c <HAL_SD_MspInit+0x1dc>)
 800619c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80061a0:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80061a2:	4b1a      	ldr	r3, [pc, #104]	; (800620c <HAL_SD_MspInit+0x1dc>)
 80061a4:	2204      	movs	r2, #4
 80061a6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80061a8:	4b18      	ldr	r3, [pc, #96]	; (800620c <HAL_SD_MspInit+0x1dc>)
 80061aa:	2203      	movs	r2, #3
 80061ac:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80061ae:	4b17      	ldr	r3, [pc, #92]	; (800620c <HAL_SD_MspInit+0x1dc>)
 80061b0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80061b4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80061b6:	4b15      	ldr	r3, [pc, #84]	; (800620c <HAL_SD_MspInit+0x1dc>)
 80061b8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80061bc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80061be:	4813      	ldr	r0, [pc, #76]	; (800620c <HAL_SD_MspInit+0x1dc>)
 80061c0:	f002 fc08 	bl	80089d4 <HAL_DMA_Init>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d001      	beq.n	80061ce <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 80061ca:	f7ff fdcf 	bl	8005d6c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a0e      	ldr	r2, [pc, #56]	; (800620c <HAL_SD_MspInit+0x1dc>)
 80061d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80061d4:	4a0d      	ldr	r2, [pc, #52]	; (800620c <HAL_SD_MspInit+0x1dc>)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80061da:	2200      	movs	r2, #0
 80061dc:	2100      	movs	r1, #0
 80061de:	2031      	movs	r0, #49	; 0x31
 80061e0:	f002 fbc1 	bl	8008966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80061e4:	2031      	movs	r0, #49	; 0x31
 80061e6:	f002 fbda 	bl	800899e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80061ea:	bf00      	nop
 80061ec:	3728      	adds	r7, #40	; 0x28
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	40012c00 	.word	0x40012c00
 80061f8:	40023800 	.word	0x40023800
 80061fc:	40020800 	.word	0x40020800
 8006200:	40020c00 	.word	0x40020c00
 8006204:	2003e7ac 	.word	0x2003e7ac
 8006208:	40026458 	.word	0x40026458
 800620c:	2003eae0 	.word	0x2003eae0
 8006210:	400264a0 	.word	0x400264a0

08006214 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b08a      	sub	sp, #40	; 0x28
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800621c:	f107 0314 	add.w	r3, r7, #20
 8006220:	2200      	movs	r2, #0
 8006222:	601a      	str	r2, [r3, #0]
 8006224:	605a      	str	r2, [r3, #4]
 8006226:	609a      	str	r2, [r3, #8]
 8006228:	60da      	str	r2, [r3, #12]
 800622a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a19      	ldr	r2, [pc, #100]	; (8006298 <HAL_SPI_MspInit+0x84>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d12c      	bne.n	8006290 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006236:	2300      	movs	r3, #0
 8006238:	613b      	str	r3, [r7, #16]
 800623a:	4b18      	ldr	r3, [pc, #96]	; (800629c <HAL_SPI_MspInit+0x88>)
 800623c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623e:	4a17      	ldr	r2, [pc, #92]	; (800629c <HAL_SPI_MspInit+0x88>)
 8006240:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006244:	6413      	str	r3, [r2, #64]	; 0x40
 8006246:	4b15      	ldr	r3, [pc, #84]	; (800629c <HAL_SPI_MspInit+0x88>)
 8006248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800624e:	613b      	str	r3, [r7, #16]
 8006250:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006252:	2300      	movs	r3, #0
 8006254:	60fb      	str	r3, [r7, #12]
 8006256:	4b11      	ldr	r3, [pc, #68]	; (800629c <HAL_SPI_MspInit+0x88>)
 8006258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800625a:	4a10      	ldr	r2, [pc, #64]	; (800629c <HAL_SPI_MspInit+0x88>)
 800625c:	f043 0302 	orr.w	r3, r3, #2
 8006260:	6313      	str	r3, [r2, #48]	; 0x30
 8006262:	4b0e      	ldr	r3, [pc, #56]	; (800629c <HAL_SPI_MspInit+0x88>)
 8006264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006266:	f003 0302 	and.w	r3, r3, #2
 800626a:	60fb      	str	r3, [r7, #12]
 800626c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800626e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8006272:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006274:	2302      	movs	r3, #2
 8006276:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006278:	2300      	movs	r3, #0
 800627a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800627c:	2303      	movs	r3, #3
 800627e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006280:	2305      	movs	r3, #5
 8006282:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006284:	f107 0314 	add.w	r3, r7, #20
 8006288:	4619      	mov	r1, r3
 800628a:	4805      	ldr	r0, [pc, #20]	; (80062a0 <HAL_SPI_MspInit+0x8c>)
 800628c:	f002 ff3e 	bl	800910c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8006290:	bf00      	nop
 8006292:	3728      	adds	r7, #40	; 0x28
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}
 8006298:	40003800 	.word	0x40003800
 800629c:	40023800 	.word	0x40023800
 80062a0:	40020400 	.word	0x40020400

080062a4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b08c      	sub	sp, #48	; 0x30
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062ac:	f107 031c 	add.w	r3, r7, #28
 80062b0:	2200      	movs	r2, #0
 80062b2:	601a      	str	r2, [r3, #0]
 80062b4:	605a      	str	r2, [r3, #4]
 80062b6:	609a      	str	r2, [r3, #8]
 80062b8:	60da      	str	r2, [r3, #12]
 80062ba:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a2d      	ldr	r2, [pc, #180]	; (8006378 <HAL_TIM_PWM_MspInit+0xd4>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d12d      	bne.n	8006322 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80062c6:	2300      	movs	r3, #0
 80062c8:	61bb      	str	r3, [r7, #24]
 80062ca:	4b2c      	ldr	r3, [pc, #176]	; (800637c <HAL_TIM_PWM_MspInit+0xd8>)
 80062cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ce:	4a2b      	ldr	r2, [pc, #172]	; (800637c <HAL_TIM_PWM_MspInit+0xd8>)
 80062d0:	f043 0301 	orr.w	r3, r3, #1
 80062d4:	6453      	str	r3, [r2, #68]	; 0x44
 80062d6:	4b29      	ldr	r3, [pc, #164]	; (800637c <HAL_TIM_PWM_MspInit+0xd8>)
 80062d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062da:	f003 0301 	and.w	r3, r3, #1
 80062de:	61bb      	str	r3, [r7, #24]
 80062e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80062e2:	2300      	movs	r3, #0
 80062e4:	617b      	str	r3, [r7, #20]
 80062e6:	4b25      	ldr	r3, [pc, #148]	; (800637c <HAL_TIM_PWM_MspInit+0xd8>)
 80062e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ea:	4a24      	ldr	r2, [pc, #144]	; (800637c <HAL_TIM_PWM_MspInit+0xd8>)
 80062ec:	f043 0310 	orr.w	r3, r3, #16
 80062f0:	6313      	str	r3, [r2, #48]	; 0x30
 80062f2:	4b22      	ldr	r3, [pc, #136]	; (800637c <HAL_TIM_PWM_MspInit+0xd8>)
 80062f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f6:	f003 0310 	and.w	r3, r3, #16
 80062fa:	617b      	str	r3, [r7, #20]
 80062fc:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80062fe:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8006302:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006304:	2302      	movs	r3, #2
 8006306:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006308:	2300      	movs	r3, #0
 800630a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800630c:	2300      	movs	r3, #0
 800630e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006310:	2301      	movs	r3, #1
 8006312:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006314:	f107 031c 	add.w	r3, r7, #28
 8006318:	4619      	mov	r1, r3
 800631a:	4819      	ldr	r0, [pc, #100]	; (8006380 <HAL_TIM_PWM_MspInit+0xdc>)
 800631c:	f002 fef6 	bl	800910c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8006320:	e026      	b.n	8006370 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a17      	ldr	r2, [pc, #92]	; (8006384 <HAL_TIM_PWM_MspInit+0xe0>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d10e      	bne.n	800634a <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800632c:	2300      	movs	r3, #0
 800632e:	613b      	str	r3, [r7, #16]
 8006330:	4b12      	ldr	r3, [pc, #72]	; (800637c <HAL_TIM_PWM_MspInit+0xd8>)
 8006332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006334:	4a11      	ldr	r2, [pc, #68]	; (800637c <HAL_TIM_PWM_MspInit+0xd8>)
 8006336:	f043 0302 	orr.w	r3, r3, #2
 800633a:	6413      	str	r3, [r2, #64]	; 0x40
 800633c:	4b0f      	ldr	r3, [pc, #60]	; (800637c <HAL_TIM_PWM_MspInit+0xd8>)
 800633e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006340:	f003 0302 	and.w	r3, r3, #2
 8006344:	613b      	str	r3, [r7, #16]
 8006346:	693b      	ldr	r3, [r7, #16]
}
 8006348:	e012      	b.n	8006370 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a0e      	ldr	r2, [pc, #56]	; (8006388 <HAL_TIM_PWM_MspInit+0xe4>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d10d      	bne.n	8006370 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006354:	2300      	movs	r3, #0
 8006356:	60fb      	str	r3, [r7, #12]
 8006358:	4b08      	ldr	r3, [pc, #32]	; (800637c <HAL_TIM_PWM_MspInit+0xd8>)
 800635a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635c:	4a07      	ldr	r2, [pc, #28]	; (800637c <HAL_TIM_PWM_MspInit+0xd8>)
 800635e:	f043 0304 	orr.w	r3, r3, #4
 8006362:	6413      	str	r3, [r2, #64]	; 0x40
 8006364:	4b05      	ldr	r3, [pc, #20]	; (800637c <HAL_TIM_PWM_MspInit+0xd8>)
 8006366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006368:	f003 0304 	and.w	r3, r3, #4
 800636c:	60fb      	str	r3, [r7, #12]
 800636e:	68fb      	ldr	r3, [r7, #12]
}
 8006370:	bf00      	nop
 8006372:	3730      	adds	r7, #48	; 0x30
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}
 8006378:	40010000 	.word	0x40010000
 800637c:	40023800 	.word	0x40023800
 8006380:	40021000 	.word	0x40021000
 8006384:	40000400 	.word	0x40000400
 8006388:	40000800 	.word	0x40000800

0800638c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b088      	sub	sp, #32
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a3e      	ldr	r2, [pc, #248]	; (8006494 <HAL_TIM_Base_MspInit+0x108>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d116      	bne.n	80063cc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800639e:	2300      	movs	r3, #0
 80063a0:	61fb      	str	r3, [r7, #28]
 80063a2:	4b3d      	ldr	r3, [pc, #244]	; (8006498 <HAL_TIM_Base_MspInit+0x10c>)
 80063a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a6:	4a3c      	ldr	r2, [pc, #240]	; (8006498 <HAL_TIM_Base_MspInit+0x10c>)
 80063a8:	f043 0310 	orr.w	r3, r3, #16
 80063ac:	6413      	str	r3, [r2, #64]	; 0x40
 80063ae:	4b3a      	ldr	r3, [pc, #232]	; (8006498 <HAL_TIM_Base_MspInit+0x10c>)
 80063b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b2:	f003 0310 	and.w	r3, r3, #16
 80063b6:	61fb      	str	r3, [r7, #28]
 80063b8:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80063ba:	2200      	movs	r2, #0
 80063bc:	2101      	movs	r1, #1
 80063be:	2036      	movs	r0, #54	; 0x36
 80063c0:	f002 fad1 	bl	8008966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80063c4:	2036      	movs	r0, #54	; 0x36
 80063c6:	f002 faea 	bl	800899e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80063ca:	e05e      	b.n	800648a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a32      	ldr	r2, [pc, #200]	; (800649c <HAL_TIM_Base_MspInit+0x110>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d116      	bne.n	8006404 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80063d6:	2300      	movs	r3, #0
 80063d8:	61bb      	str	r3, [r7, #24]
 80063da:	4b2f      	ldr	r3, [pc, #188]	; (8006498 <HAL_TIM_Base_MspInit+0x10c>)
 80063dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063de:	4a2e      	ldr	r2, [pc, #184]	; (8006498 <HAL_TIM_Base_MspInit+0x10c>)
 80063e0:	f043 0320 	orr.w	r3, r3, #32
 80063e4:	6413      	str	r3, [r2, #64]	; 0x40
 80063e6:	4b2c      	ldr	r3, [pc, #176]	; (8006498 <HAL_TIM_Base_MspInit+0x10c>)
 80063e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ea:	f003 0320 	and.w	r3, r3, #32
 80063ee:	61bb      	str	r3, [r7, #24]
 80063f0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80063f2:	2200      	movs	r2, #0
 80063f4:	2100      	movs	r1, #0
 80063f6:	2037      	movs	r0, #55	; 0x37
 80063f8:	f002 fab5 	bl	8008966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80063fc:	2037      	movs	r0, #55	; 0x37
 80063fe:	f002 face 	bl	800899e <HAL_NVIC_EnableIRQ>
}
 8006402:	e042      	b.n	800648a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a25      	ldr	r2, [pc, #148]	; (80064a0 <HAL_TIM_Base_MspInit+0x114>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d10e      	bne.n	800642c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800640e:	2300      	movs	r3, #0
 8006410:	617b      	str	r3, [r7, #20]
 8006412:	4b21      	ldr	r3, [pc, #132]	; (8006498 <HAL_TIM_Base_MspInit+0x10c>)
 8006414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006416:	4a20      	ldr	r2, [pc, #128]	; (8006498 <HAL_TIM_Base_MspInit+0x10c>)
 8006418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800641c:	6453      	str	r3, [r2, #68]	; 0x44
 800641e:	4b1e      	ldr	r3, [pc, #120]	; (8006498 <HAL_TIM_Base_MspInit+0x10c>)
 8006420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006426:	617b      	str	r3, [r7, #20]
 8006428:	697b      	ldr	r3, [r7, #20]
}
 800642a:	e02e      	b.n	800648a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a1c      	ldr	r2, [pc, #112]	; (80064a4 <HAL_TIM_Base_MspInit+0x118>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d10e      	bne.n	8006454 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8006436:	2300      	movs	r3, #0
 8006438:	613b      	str	r3, [r7, #16]
 800643a:	4b17      	ldr	r3, [pc, #92]	; (8006498 <HAL_TIM_Base_MspInit+0x10c>)
 800643c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800643e:	4a16      	ldr	r2, [pc, #88]	; (8006498 <HAL_TIM_Base_MspInit+0x10c>)
 8006440:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006444:	6453      	str	r3, [r2, #68]	; 0x44
 8006446:	4b14      	ldr	r3, [pc, #80]	; (8006498 <HAL_TIM_Base_MspInit+0x10c>)
 8006448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800644a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800644e:	613b      	str	r3, [r7, #16]
 8006450:	693b      	ldr	r3, [r7, #16]
}
 8006452:	e01a      	b.n	800648a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a13      	ldr	r2, [pc, #76]	; (80064a8 <HAL_TIM_Base_MspInit+0x11c>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d115      	bne.n	800648a <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800645e:	2300      	movs	r3, #0
 8006460:	60fb      	str	r3, [r7, #12]
 8006462:	4b0d      	ldr	r3, [pc, #52]	; (8006498 <HAL_TIM_Base_MspInit+0x10c>)
 8006464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006466:	4a0c      	ldr	r2, [pc, #48]	; (8006498 <HAL_TIM_Base_MspInit+0x10c>)
 8006468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800646c:	6413      	str	r3, [r2, #64]	; 0x40
 800646e:	4b0a      	ldr	r3, [pc, #40]	; (8006498 <HAL_TIM_Base_MspInit+0x10c>)
 8006470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006476:	60fb      	str	r3, [r7, #12]
 8006478:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800647a:	2200      	movs	r2, #0
 800647c:	2100      	movs	r1, #0
 800647e:	202c      	movs	r0, #44	; 0x2c
 8006480:	f002 fa71 	bl	8008966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8006484:	202c      	movs	r0, #44	; 0x2c
 8006486:	f002 fa8a 	bl	800899e <HAL_NVIC_EnableIRQ>
}
 800648a:	bf00      	nop
 800648c:	3720      	adds	r7, #32
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	40001000 	.word	0x40001000
 8006498:	40023800 	.word	0x40023800
 800649c:	40001400 	.word	0x40001400
 80064a0:	40014400 	.word	0x40014400
 80064a4:	40014800 	.word	0x40014800
 80064a8:	40001c00 	.word	0x40001c00

080064ac <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b08a      	sub	sp, #40	; 0x28
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064b4:	f107 0314 	add.w	r3, r7, #20
 80064b8:	2200      	movs	r2, #0
 80064ba:	601a      	str	r2, [r3, #0]
 80064bc:	605a      	str	r2, [r3, #4]
 80064be:	609a      	str	r2, [r3, #8]
 80064c0:	60da      	str	r2, [r3, #12]
 80064c2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a1d      	ldr	r2, [pc, #116]	; (8006540 <HAL_TIM_Encoder_MspInit+0x94>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d133      	bne.n	8006536 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80064ce:	2300      	movs	r3, #0
 80064d0:	613b      	str	r3, [r7, #16]
 80064d2:	4b1c      	ldr	r3, [pc, #112]	; (8006544 <HAL_TIM_Encoder_MspInit+0x98>)
 80064d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064d6:	4a1b      	ldr	r2, [pc, #108]	; (8006544 <HAL_TIM_Encoder_MspInit+0x98>)
 80064d8:	f043 0302 	orr.w	r3, r3, #2
 80064dc:	6453      	str	r3, [r2, #68]	; 0x44
 80064de:	4b19      	ldr	r3, [pc, #100]	; (8006544 <HAL_TIM_Encoder_MspInit+0x98>)
 80064e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064e2:	f003 0302 	and.w	r3, r3, #2
 80064e6:	613b      	str	r3, [r7, #16]
 80064e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80064ea:	2300      	movs	r3, #0
 80064ec:	60fb      	str	r3, [r7, #12]
 80064ee:	4b15      	ldr	r3, [pc, #84]	; (8006544 <HAL_TIM_Encoder_MspInit+0x98>)
 80064f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f2:	4a14      	ldr	r2, [pc, #80]	; (8006544 <HAL_TIM_Encoder_MspInit+0x98>)
 80064f4:	f043 0304 	orr.w	r3, r3, #4
 80064f8:	6313      	str	r3, [r2, #48]	; 0x30
 80064fa:	4b12      	ldr	r3, [pc, #72]	; (8006544 <HAL_TIM_Encoder_MspInit+0x98>)
 80064fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064fe:	f003 0304 	and.w	r3, r3, #4
 8006502:	60fb      	str	r3, [r7, #12]
 8006504:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006506:	23c0      	movs	r3, #192	; 0xc0
 8006508:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800650a:	2302      	movs	r3, #2
 800650c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800650e:	2300      	movs	r3, #0
 8006510:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006512:	2300      	movs	r3, #0
 8006514:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006516:	2303      	movs	r3, #3
 8006518:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800651a:	f107 0314 	add.w	r3, r7, #20
 800651e:	4619      	mov	r1, r3
 8006520:	4809      	ldr	r0, [pc, #36]	; (8006548 <HAL_TIM_Encoder_MspInit+0x9c>)
 8006522:	f002 fdf3 	bl	800910c <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8006526:	2200      	movs	r2, #0
 8006528:	2100      	movs	r1, #0
 800652a:	202c      	movs	r0, #44	; 0x2c
 800652c:	f002 fa1b 	bl	8008966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8006530:	202c      	movs	r0, #44	; 0x2c
 8006532:	f002 fa34 	bl	800899e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8006536:	bf00      	nop
 8006538:	3728      	adds	r7, #40	; 0x28
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	40010400 	.word	0x40010400
 8006544:	40023800 	.word	0x40023800
 8006548:	40020800 	.word	0x40020800

0800654c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b08c      	sub	sp, #48	; 0x30
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006554:	f107 031c 	add.w	r3, r7, #28
 8006558:	2200      	movs	r2, #0
 800655a:	601a      	str	r2, [r3, #0]
 800655c:	605a      	str	r2, [r3, #4]
 800655e:	609a      	str	r2, [r3, #8]
 8006560:	60da      	str	r2, [r3, #12]
 8006562:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a5c      	ldr	r2, [pc, #368]	; (80066dc <HAL_TIM_MspPostInit+0x190>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d11f      	bne.n	80065ae <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800656e:	2300      	movs	r3, #0
 8006570:	61bb      	str	r3, [r7, #24]
 8006572:	4b5b      	ldr	r3, [pc, #364]	; (80066e0 <HAL_TIM_MspPostInit+0x194>)
 8006574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006576:	4a5a      	ldr	r2, [pc, #360]	; (80066e0 <HAL_TIM_MspPostInit+0x194>)
 8006578:	f043 0310 	orr.w	r3, r3, #16
 800657c:	6313      	str	r3, [r2, #48]	; 0x30
 800657e:	4b58      	ldr	r3, [pc, #352]	; (80066e0 <HAL_TIM_MspPostInit+0x194>)
 8006580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006582:	f003 0310 	and.w	r3, r3, #16
 8006586:	61bb      	str	r3, [r7, #24]
 8006588:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800658a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800658e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006590:	2302      	movs	r3, #2
 8006592:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006594:	2300      	movs	r3, #0
 8006596:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006598:	2300      	movs	r3, #0
 800659a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800659c:	2301      	movs	r3, #1
 800659e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80065a0:	f107 031c 	add.w	r3, r7, #28
 80065a4:	4619      	mov	r1, r3
 80065a6:	484f      	ldr	r0, [pc, #316]	; (80066e4 <HAL_TIM_MspPostInit+0x198>)
 80065a8:	f002 fdb0 	bl	800910c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 80065ac:	e091      	b.n	80066d2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a4d      	ldr	r2, [pc, #308]	; (80066e8 <HAL_TIM_MspPostInit+0x19c>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d11e      	bne.n	80065f6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80065b8:	2300      	movs	r3, #0
 80065ba:	617b      	str	r3, [r7, #20]
 80065bc:	4b48      	ldr	r3, [pc, #288]	; (80066e0 <HAL_TIM_MspPostInit+0x194>)
 80065be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c0:	4a47      	ldr	r2, [pc, #284]	; (80066e0 <HAL_TIM_MspPostInit+0x194>)
 80065c2:	f043 0302 	orr.w	r3, r3, #2
 80065c6:	6313      	str	r3, [r2, #48]	; 0x30
 80065c8:	4b45      	ldr	r3, [pc, #276]	; (80066e0 <HAL_TIM_MspPostInit+0x194>)
 80065ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065cc:	f003 0302 	and.w	r3, r3, #2
 80065d0:	617b      	str	r3, [r7, #20]
 80065d2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80065d4:	2330      	movs	r3, #48	; 0x30
 80065d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065d8:	2302      	movs	r3, #2
 80065da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065dc:	2300      	movs	r3, #0
 80065de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065e0:	2300      	movs	r3, #0
 80065e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80065e4:	2302      	movs	r3, #2
 80065e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80065e8:	f107 031c 	add.w	r3, r7, #28
 80065ec:	4619      	mov	r1, r3
 80065ee:	483f      	ldr	r0, [pc, #252]	; (80066ec <HAL_TIM_MspPostInit+0x1a0>)
 80065f0:	f002 fd8c 	bl	800910c <HAL_GPIO_Init>
}
 80065f4:	e06d      	b.n	80066d2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a3d      	ldr	r2, [pc, #244]	; (80066f0 <HAL_TIM_MspPostInit+0x1a4>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d11f      	bne.n	8006640 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006600:	2300      	movs	r3, #0
 8006602:	613b      	str	r3, [r7, #16]
 8006604:	4b36      	ldr	r3, [pc, #216]	; (80066e0 <HAL_TIM_MspPostInit+0x194>)
 8006606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006608:	4a35      	ldr	r2, [pc, #212]	; (80066e0 <HAL_TIM_MspPostInit+0x194>)
 800660a:	f043 0308 	orr.w	r3, r3, #8
 800660e:	6313      	str	r3, [r2, #48]	; 0x30
 8006610:	4b33      	ldr	r3, [pc, #204]	; (80066e0 <HAL_TIM_MspPostInit+0x194>)
 8006612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006614:	f003 0308 	and.w	r3, r3, #8
 8006618:	613b      	str	r3, [r7, #16]
 800661a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800661c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8006620:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006622:	2302      	movs	r3, #2
 8006624:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006626:	2300      	movs	r3, #0
 8006628:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800662a:	2300      	movs	r3, #0
 800662c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800662e:	2302      	movs	r3, #2
 8006630:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006632:	f107 031c 	add.w	r3, r7, #28
 8006636:	4619      	mov	r1, r3
 8006638:	482e      	ldr	r0, [pc, #184]	; (80066f4 <HAL_TIM_MspPostInit+0x1a8>)
 800663a:	f002 fd67 	bl	800910c <HAL_GPIO_Init>
}
 800663e:	e048      	b.n	80066d2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a2c      	ldr	r2, [pc, #176]	; (80066f8 <HAL_TIM_MspPostInit+0x1ac>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d11f      	bne.n	800668a <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800664a:	2300      	movs	r3, #0
 800664c:	60fb      	str	r3, [r7, #12]
 800664e:	4b24      	ldr	r3, [pc, #144]	; (80066e0 <HAL_TIM_MspPostInit+0x194>)
 8006650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006652:	4a23      	ldr	r2, [pc, #140]	; (80066e0 <HAL_TIM_MspPostInit+0x194>)
 8006654:	f043 0302 	orr.w	r3, r3, #2
 8006658:	6313      	str	r3, [r2, #48]	; 0x30
 800665a:	4b21      	ldr	r3, [pc, #132]	; (80066e0 <HAL_TIM_MspPostInit+0x194>)
 800665c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800665e:	f003 0302 	and.w	r3, r3, #2
 8006662:	60fb      	str	r3, [r7, #12]
 8006664:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006666:	f44f 7380 	mov.w	r3, #256	; 0x100
 800666a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800666c:	2302      	movs	r3, #2
 800666e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006670:	2300      	movs	r3, #0
 8006672:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006674:	2300      	movs	r3, #0
 8006676:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8006678:	2303      	movs	r3, #3
 800667a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800667c:	f107 031c 	add.w	r3, r7, #28
 8006680:	4619      	mov	r1, r3
 8006682:	481a      	ldr	r0, [pc, #104]	; (80066ec <HAL_TIM_MspPostInit+0x1a0>)
 8006684:	f002 fd42 	bl	800910c <HAL_GPIO_Init>
}
 8006688:	e023      	b.n	80066d2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a1b      	ldr	r2, [pc, #108]	; (80066fc <HAL_TIM_MspPostInit+0x1b0>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d11e      	bne.n	80066d2 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006694:	2300      	movs	r3, #0
 8006696:	60bb      	str	r3, [r7, #8]
 8006698:	4b11      	ldr	r3, [pc, #68]	; (80066e0 <HAL_TIM_MspPostInit+0x194>)
 800669a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800669c:	4a10      	ldr	r2, [pc, #64]	; (80066e0 <HAL_TIM_MspPostInit+0x194>)
 800669e:	f043 0302 	orr.w	r3, r3, #2
 80066a2:	6313      	str	r3, [r2, #48]	; 0x30
 80066a4:	4b0e      	ldr	r3, [pc, #56]	; (80066e0 <HAL_TIM_MspPostInit+0x194>)
 80066a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a8:	f003 0302 	and.w	r3, r3, #2
 80066ac:	60bb      	str	r3, [r7, #8]
 80066ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80066b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066b6:	2302      	movs	r3, #2
 80066b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066ba:	2300      	movs	r3, #0
 80066bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066be:	2300      	movs	r3, #0
 80066c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80066c2:	2303      	movs	r3, #3
 80066c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80066c6:	f107 031c 	add.w	r3, r7, #28
 80066ca:	4619      	mov	r1, r3
 80066cc:	4807      	ldr	r0, [pc, #28]	; (80066ec <HAL_TIM_MspPostInit+0x1a0>)
 80066ce:	f002 fd1d 	bl	800910c <HAL_GPIO_Init>
}
 80066d2:	bf00      	nop
 80066d4:	3730      	adds	r7, #48	; 0x30
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	40010000 	.word	0x40010000
 80066e0:	40023800 	.word	0x40023800
 80066e4:	40021000 	.word	0x40021000
 80066e8:	40000400 	.word	0x40000400
 80066ec:	40020400 	.word	0x40020400
 80066f0:	40000800 	.word	0x40000800
 80066f4:	40020c00 	.word	0x40020c00
 80066f8:	40014400 	.word	0x40014400
 80066fc:	40014800 	.word	0x40014800

08006700 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b08a      	sub	sp, #40	; 0x28
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006708:	f107 0314 	add.w	r3, r7, #20
 800670c:	2200      	movs	r2, #0
 800670e:	601a      	str	r2, [r3, #0]
 8006710:	605a      	str	r2, [r3, #4]
 8006712:	609a      	str	r2, [r3, #8]
 8006714:	60da      	str	r2, [r3, #12]
 8006716:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a19      	ldr	r2, [pc, #100]	; (8006784 <HAL_UART_MspInit+0x84>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d12b      	bne.n	800677a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006722:	2300      	movs	r3, #0
 8006724:	613b      	str	r3, [r7, #16]
 8006726:	4b18      	ldr	r3, [pc, #96]	; (8006788 <HAL_UART_MspInit+0x88>)
 8006728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672a:	4a17      	ldr	r2, [pc, #92]	; (8006788 <HAL_UART_MspInit+0x88>)
 800672c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006730:	6413      	str	r3, [r2, #64]	; 0x40
 8006732:	4b15      	ldr	r3, [pc, #84]	; (8006788 <HAL_UART_MspInit+0x88>)
 8006734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800673a:	613b      	str	r3, [r7, #16]
 800673c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800673e:	2300      	movs	r3, #0
 8006740:	60fb      	str	r3, [r7, #12]
 8006742:	4b11      	ldr	r3, [pc, #68]	; (8006788 <HAL_UART_MspInit+0x88>)
 8006744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006746:	4a10      	ldr	r2, [pc, #64]	; (8006788 <HAL_UART_MspInit+0x88>)
 8006748:	f043 0308 	orr.w	r3, r3, #8
 800674c:	6313      	str	r3, [r2, #48]	; 0x30
 800674e:	4b0e      	ldr	r3, [pc, #56]	; (8006788 <HAL_UART_MspInit+0x88>)
 8006750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006752:	f003 0308 	and.w	r3, r3, #8
 8006756:	60fb      	str	r3, [r7, #12]
 8006758:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800675a:	2360      	movs	r3, #96	; 0x60
 800675c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800675e:	2302      	movs	r3, #2
 8006760:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006762:	2300      	movs	r3, #0
 8006764:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006766:	2303      	movs	r3, #3
 8006768:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800676a:	2307      	movs	r3, #7
 800676c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800676e:	f107 0314 	add.w	r3, r7, #20
 8006772:	4619      	mov	r1, r3
 8006774:	4805      	ldr	r0, [pc, #20]	; (800678c <HAL_UART_MspInit+0x8c>)
 8006776:	f002 fcc9 	bl	800910c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800677a:	bf00      	nop
 800677c:	3728      	adds	r7, #40	; 0x28
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	40004400 	.word	0x40004400
 8006788:	40023800 	.word	0x40023800
 800678c:	40020c00 	.word	0x40020c00

08006790 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006790:	b480      	push	{r7}
 8006792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006794:	e7fe      	b.n	8006794 <NMI_Handler+0x4>

08006796 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006796:	b480      	push	{r7}
 8006798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800679a:	e7fe      	b.n	800679a <HardFault_Handler+0x4>

0800679c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800679c:	b480      	push	{r7}
 800679e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80067a0:	e7fe      	b.n	80067a0 <MemManage_Handler+0x4>

080067a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80067a2:	b480      	push	{r7}
 80067a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80067a6:	e7fe      	b.n	80067a6 <BusFault_Handler+0x4>

080067a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80067a8:	b480      	push	{r7}
 80067aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80067ac:	e7fe      	b.n	80067ac <UsageFault_Handler+0x4>

080067ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80067ae:	b480      	push	{r7}
 80067b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80067b2:	bf00      	nop
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr

080067bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80067bc:	b480      	push	{r7}
 80067be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80067c0:	bf00      	nop
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr

080067ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80067ca:	b480      	push	{r7}
 80067cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80067ce:	bf00      	nop
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80067dc:	f001 fba2 	bl	8007f24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80067e0:	bf00      	nop
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80067e8:	4803      	ldr	r0, [pc, #12]	; (80067f8 <TIM8_UP_TIM13_IRQHandler+0x14>)
 80067ea:	f006 fe72 	bl	800d4d2 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 80067ee:	4803      	ldr	r0, [pc, #12]	; (80067fc <TIM8_UP_TIM13_IRQHandler+0x18>)
 80067f0:	f006 fe6f 	bl	800d4d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80067f4:	bf00      	nop
 80067f6:	bd80      	pop	{r7, pc}
 80067f8:	2003e864 	.word	0x2003e864
 80067fc:	2003ea60 	.word	0x2003ea60

08006800 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8006804:	4802      	ldr	r0, [pc, #8]	; (8006810 <SDIO_IRQHandler+0x10>)
 8006806:	f004 ff0b 	bl	800b620 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800680a:	bf00      	nop
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	2003ebc0 	.word	0x2003ebc0

08006814 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006818:	4802      	ldr	r0, [pc, #8]	; (8006824 <TIM6_DAC_IRQHandler+0x10>)
 800681a:	f006 fe5a 	bl	800d4d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800681e:	bf00      	nop
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	2003eb40 	.word	0x2003eb40

08006828 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800682c:	4802      	ldr	r0, [pc, #8]	; (8006838 <TIM7_IRQHandler+0x10>)
 800682e:	f006 fe50 	bl	800d4d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8006832:	bf00      	nop
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	2003ece4 	.word	0x2003ece4

0800683c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8006840:	4802      	ldr	r0, [pc, #8]	; (800684c <DMA2_Stream2_IRQHandler+0x10>)
 8006842:	f002 f9ef 	bl	8008c24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8006846:	bf00      	nop
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	2003ec84 	.word	0x2003ec84

08006850 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8006854:	4802      	ldr	r0, [pc, #8]	; (8006860 <DMA2_Stream3_IRQHandler+0x10>)
 8006856:	f002 f9e5 	bl	8008c24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800685a:	bf00      	nop
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	2003e7ac 	.word	0x2003e7ac

08006864 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8006868:	4802      	ldr	r0, [pc, #8]	; (8006874 <DMA2_Stream6_IRQHandler+0x10>)
 800686a:	f002 f9db 	bl	8008c24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800686e:	bf00      	nop
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	2003eae0 	.word	0x2003eae0

08006878 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b086      	sub	sp, #24
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006880:	4a14      	ldr	r2, [pc, #80]	; (80068d4 <_sbrk+0x5c>)
 8006882:	4b15      	ldr	r3, [pc, #84]	; (80068d8 <_sbrk+0x60>)
 8006884:	1ad3      	subs	r3, r2, r3
 8006886:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800688c:	4b13      	ldr	r3, [pc, #76]	; (80068dc <_sbrk+0x64>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d102      	bne.n	800689a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006894:	4b11      	ldr	r3, [pc, #68]	; (80068dc <_sbrk+0x64>)
 8006896:	4a12      	ldr	r2, [pc, #72]	; (80068e0 <_sbrk+0x68>)
 8006898:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800689a:	4b10      	ldr	r3, [pc, #64]	; (80068dc <_sbrk+0x64>)
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4413      	add	r3, r2
 80068a2:	693a      	ldr	r2, [r7, #16]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d207      	bcs.n	80068b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80068a8:	f00d f8a8 	bl	80139fc <__errno>
 80068ac:	4602      	mov	r2, r0
 80068ae:	230c      	movs	r3, #12
 80068b0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80068b2:	f04f 33ff 	mov.w	r3, #4294967295
 80068b6:	e009      	b.n	80068cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80068b8:	4b08      	ldr	r3, [pc, #32]	; (80068dc <_sbrk+0x64>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80068be:	4b07      	ldr	r3, [pc, #28]	; (80068dc <_sbrk+0x64>)
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4413      	add	r3, r2
 80068c6:	4a05      	ldr	r2, [pc, #20]	; (80068dc <_sbrk+0x64>)
 80068c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80068ca:	68fb      	ldr	r3, [r7, #12]
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3718      	adds	r7, #24
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	20050000 	.word	0x20050000
 80068d8:	00000800 	.word	0x00000800
 80068dc:	200002bc 	.word	0x200002bc
 80068e0:	20040e38 	.word	0x20040e38

080068e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80068e4:	b480      	push	{r7}
 80068e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80068e8:	4b08      	ldr	r3, [pc, #32]	; (800690c <SystemInit+0x28>)
 80068ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068ee:	4a07      	ldr	r2, [pc, #28]	; (800690c <SystemInit+0x28>)
 80068f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80068f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80068f8:	4b04      	ldr	r3, [pc, #16]	; (800690c <SystemInit+0x28>)
 80068fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80068fe:	609a      	str	r2, [r3, #8]
#endif
}
 8006900:	bf00      	nop
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr
 800690a:	bf00      	nop
 800690c:	e000ed00 	.word	0xe000ed00

08006910 <cppInit>:
		}
	}
}

void cppInit(void)
{
 8006910:	b598      	push	{r3, r4, r7, lr}
 8006912:	af00      	add	r7, sp, #0
	lcd_init();
 8006914:	f7fa fb80 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 8006918:	483a      	ldr	r0, [pc, #232]	; (8006a04 <cppInit+0xf4>)
 800691a:	f7fd fe0b 	bl	8004534 <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 800691e:	2064      	movs	r0, #100	; 0x64
 8006920:	f001 fb20 	bl	8007f64 <HAL_Delay>
	power_sensor.updateValues();
 8006924:	4837      	ldr	r0, [pc, #220]	; (8006a04 <cppInit+0xf4>)
 8006926:	f7fd fe13 	bl	8004550 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 800692a:	f7fa fbb9 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 800692e:	2100      	movs	r1, #0
 8006930:	2000      	movs	r0, #0
 8006932:	f7fa fbc5 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 8006936:	4834      	ldr	r0, [pc, #208]	; (8006a08 <cppInit+0xf8>)
 8006938:	f7fa fbec 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 800693c:	2101      	movs	r1, #1
 800693e:	2000      	movs	r0, #0
 8006940:	f7fa fbbe 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 8006944:	482f      	ldr	r0, [pc, #188]	; (8006a04 <cppInit+0xf4>)
 8006946:	f7fd fe2d 	bl	80045a4 <_ZN11PowerSensor17getButteryVoltageEv>
 800694a:	ee10 3a10 	vmov	r3, s0
 800694e:	4618      	mov	r0, r3
 8006950:	f7f9 fe12 	bl	8000578 <__aeabi_f2d>
 8006954:	4603      	mov	r3, r0
 8006956:	460c      	mov	r4, r1
 8006958:	461a      	mov	r2, r3
 800695a:	4623      	mov	r3, r4
 800695c:	482b      	ldr	r0, [pc, #172]	; (8006a0c <cppInit+0xfc>)
 800695e:	f7fa fbd9 	bl	8001114 <lcd_printf>
	HAL_Delay(1000);
 8006962:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006966:	f001 fafd 	bl	8007f64 <HAL_Delay>

	//if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 800696a:	4829      	ldr	r0, [pc, #164]	; (8006a10 <cppInit+0x100>)
 800696c:	f7fd f828 	bl	80039c0 <_ZN6Logger10sdCardInitEv>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d007      	beq.n	8006986 <cppInit+0x76>
		led.fullColor('G');
 8006976:	2147      	movs	r1, #71	; 0x47
 8006978:	4826      	ldr	r0, [pc, #152]	; (8006a14 <cppInit+0x104>)
 800697a:	f7fb fabf 	bl	8001efc <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 800697e:	2064      	movs	r0, #100	; 0x64
 8006980:	f001 faf0 	bl	8007f64 <HAL_Delay>
 8006984:	e006      	b.n	8006994 <cppInit+0x84>
	}
	else{ //sd mount fali
		led.fullColor('R');
 8006986:	2152      	movs	r1, #82	; 0x52
 8006988:	4822      	ldr	r0, [pc, #136]	; (8006a14 <cppInit+0x104>)
 800698a:	f7fb fab7 	bl	8001efc <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 800698e:	2064      	movs	r0, #100	; 0x64
 8006990:	f001 fae8 	bl	8007f64 <HAL_Delay>
	}

	line_sensor.ADCStart();
 8006994:	4820      	ldr	r0, [pc, #128]	; (8006a18 <cppInit+0x108>)
 8006996:	f7fb fc0d 	bl	80021b4 <_ZN10LineSensor8ADCStartEv>
	motor.init();
 800699a:	4820      	ldr	r0, [pc, #128]	; (8006a1c <cppInit+0x10c>)
 800699c:	f7fd fa9e 	bl	8003edc <_ZN5Motor4initEv>
	encoder.init();
 80069a0:	481f      	ldr	r0, [pc, #124]	; (8006a20 <cppInit+0x110>)
 80069a2:	f7fa fc03 	bl	80011ac <_ZN7Encoder4initEv>
	imu.init();
 80069a6:	481f      	ldr	r0, [pc, #124]	; (8006a24 <cppInit+0x114>)
 80069a8:	f7fb f866 	bl	8001a78 <_ZN3IMU4initEv>
	line_trace.init();
 80069ac:	481e      	ldr	r0, [pc, #120]	; (8006a28 <cppInit+0x118>)
 80069ae:	f7fc fc07 	bl	80031c0 <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 80069b2:	4819      	ldr	r0, [pc, #100]	; (8006a18 <cppInit+0x108>)
 80069b4:	f7fb fd3e 	bl	8002434 <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 80069b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80069bc:	f001 fad2 	bl	8007f64 <HAL_Delay>

	led.fullColor('M');
 80069c0:	214d      	movs	r1, #77	; 0x4d
 80069c2:	4814      	ldr	r0, [pc, #80]	; (8006a14 <cppInit+0x104>)
 80069c4:	f7fb fa9a 	bl	8001efc <_ZN3LED9fullColorEc>
	imu.calibration();
 80069c8:	4816      	ldr	r0, [pc, #88]	; (8006a24 <cppInit+0x114>)
 80069ca:	f7fb f91f 	bl	8001c0c <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.5, 20, 0);
	velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243);
 80069ce:	ed9f 1a17 	vldr	s2, [pc, #92]	; 8006a2c <cppInit+0x11c>
 80069d2:	eddf 0a17 	vldr	s1, [pc, #92]	; 8006a30 <cppInit+0x120>
 80069d6:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8006a34 <cppInit+0x124>
 80069da:	4817      	ldr	r0, [pc, #92]	; (8006a38 <cppInit+0x128>)
 80069dc:	f7fe f9dc 	bl	8004d98 <_ZN12VelocityCtrl15setVelocityGainEfff>
	//velocity_ctrl.setVelocityGain(1.9842, 22.9078, 0.02079);
	//velocity_ctrl.setOmegaGain(0.5, 5, 0);
	//velocity_ctrl.setOmegaGain(0.05, 7, 0);
	velocity_ctrl.setOmegaGain(0.069793, 0.86816, 0.0014027);
 80069e0:	ed9f 1a16 	vldr	s2, [pc, #88]	; 8006a3c <cppInit+0x12c>
 80069e4:	eddf 0a16 	vldr	s1, [pc, #88]	; 8006a40 <cppInit+0x130>
 80069e8:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8006a44 <cppInit+0x134>
 80069ec:	4812      	ldr	r0, [pc, #72]	; (8006a38 <cppInit+0x128>)
 80069ee:	f7fe f9ec 	bl	8004dca <_ZN12VelocityCtrl12setOmegaGainEfff>
	//velocity_ctrl.setOmegaGain(0.12175, 1.0604, 0.002614);
	//velocity_ctrl.setOmegaGain(0.0, 0, 0);


	//encoder.clearDistance();
	odometry.clearPotition();
 80069f2:	4815      	ldr	r0, [pc, #84]	; (8006a48 <cppInit+0x138>)
 80069f4:	f7fd fca8 	bl	8004348 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 80069f8:	4814      	ldr	r0, [pc, #80]	; (8006a4c <cppInit+0x13c>)
 80069fa:	f7fd fd3f 	bl	800447c <_ZN13PathFollowing4initEv>

}
 80069fe:	bf00      	nop
 8006a00:	bd98      	pop	{r3, r4, r7, pc}
 8006a02:	bf00      	nop
 8006a04:	200005d0 	.word	0x200005d0
 8006a08:	080181dc 	.word	0x080181dc
 8006a0c:	080181e4 	.word	0x080181e4
 8006a10:	200005f0 	.word	0x200005f0
 8006a14:	200005cc 	.word	0x200005cc
 8006a18:	200002c0 	.word	0x200002c0
 8006a1c:	200005c8 	.word	0x200005c8
 8006a20:	20017d00 	.word	0x20017d00
 8006a24:	200005dc 	.word	0x200005dc
 8006a28:	20017da0 	.word	0x20017da0
 8006a2c:	3cceca68 	.word	0x3cceca68
 8006a30:	4180f06f 	.word	0x4180f06f
 8006a34:	3fea2d0e 	.word	0x3fea2d0e
 8006a38:	20017d20 	.word	0x20017d20
 8006a3c:	3ab7dacd 	.word	0x3ab7dacd
 8006a40:	3f5e3fbc 	.word	0x3f5e3fbc
 8006a44:	3d8eefa2 	.word	0x3d8eefa2
 8006a48:	20017d60 	.word	0x20017d60
 8006a4c:	20024cf8 	.word	0x20024cf8

08006a50 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 8006a54:	4819      	ldr	r0, [pc, #100]	; (8006abc <cppFlip1ms+0x6c>)
 8006a56:	f7fb fc0b 	bl	8002270 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 8006a5a:	4819      	ldr	r0, [pc, #100]	; (8006ac0 <cppFlip1ms+0x70>)
 8006a5c:	f7fb f834 	bl	8001ac8 <_ZN3IMU12updateValuesEv>
	encoder.update();
 8006a60:	4818      	ldr	r0, [pc, #96]	; (8006ac4 <cppFlip1ms+0x74>)
 8006a62:	f7fa fbc5 	bl	80011f0 <_ZN7Encoder6updateEv>

	line_trace.flip();
 8006a66:	4818      	ldr	r0, [pc, #96]	; (8006ac8 <cppFlip1ms+0x78>)
 8006a68:	f7fc fcc0 	bl	80033ec <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 8006a6c:	4817      	ldr	r0, [pc, #92]	; (8006acc <cppFlip1ms+0x7c>)
 8006a6e:	f7fe f9c5 	bl	8004dfc <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 8006a72:	4817      	ldr	r0, [pc, #92]	; (8006ad0 <cppFlip1ms+0x80>)
 8006a74:	f7fd fc4c 	bl	8004310 <_ZN8Odometry4flipEv>
	side_sensor.updateStatus();
 8006a78:	4816      	ldr	r0, [pc, #88]	; (8006ad4 <cppFlip1ms+0x84>)
 8006a7a:	f7fd fe09 	bl	8004690 <_ZN10SideSensor12updateStatusEv>

	motor.motorCtrl();
 8006a7e:	4816      	ldr	r0, [pc, #88]	; (8006ad8 <cppFlip1ms+0x88>)
 8006a80:	f7fd fa3e 	bl	8003f00 <_ZN5Motor9motorCtrlEv>

	//logger.storeLog(velocity_ctrl.getCurrentVelocity());
	//logger.storeLog(imu.getOmega());

	static uint16_t twice_cnt;
	twice_cnt++;
 8006a84:	4b15      	ldr	r3, [pc, #84]	; (8006adc <cppFlip1ms+0x8c>)
 8006a86:	881b      	ldrh	r3, [r3, #0]
 8006a88:	3301      	adds	r3, #1
 8006a8a:	b29a      	uxth	r2, r3
 8006a8c:	4b13      	ldr	r3, [pc, #76]	; (8006adc <cppFlip1ms+0x8c>)
 8006a8e:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 2){ //2ms
 8006a90:	4b12      	ldr	r3, [pc, #72]	; (8006adc <cppFlip1ms+0x8c>)
 8006a92:	881b      	ldrh	r3, [r3, #0]
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d90c      	bls.n	8006ab2 <cppFlip1ms+0x62>
		sys_ident.inOutputStore(imu.getOmega());
 8006a98:	4809      	ldr	r0, [pc, #36]	; (8006ac0 <cppFlip1ms+0x70>)
 8006a9a:	f7fb f86d 	bl	8001b78 <_ZN3IMU8getOmegaEv>
 8006a9e:	eef0 7a40 	vmov.f32	s15, s0
 8006aa2:	eeb0 0a67 	vmov.f32	s0, s15
 8006aa6:	480e      	ldr	r0, [pc, #56]	; (8006ae0 <cppFlip1ms+0x90>)
 8006aa8:	f7fd ff48 	bl	800493c <_ZN20SystemIdentification13inOutputStoreEf>
		twice_cnt = 0;
 8006aac:	4b0b      	ldr	r3, [pc, #44]	; (8006adc <cppFlip1ms+0x8c>)
 8006aae:	2200      	movs	r2, #0
 8006ab0:	801a      	strh	r2, [r3, #0]

	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clear();
 8006ab2:	4804      	ldr	r0, [pc, #16]	; (8006ac4 <cppFlip1ms+0x74>)
 8006ab4:	f7fa fc86 	bl	80013c4 <_ZN7Encoder5clearEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8006ab8:	bf00      	nop
 8006aba:	bd80      	pop	{r7, pc}
 8006abc:	200002c0 	.word	0x200002c0
 8006ac0:	200005dc 	.word	0x200005dc
 8006ac4:	20017d00 	.word	0x20017d00
 8006ac8:	20017da0 	.word	0x20017da0
 8006acc:	20017d20 	.word	0x20017d20
 8006ad0:	20017d60 	.word	0x20017d60
 8006ad4:	200005b8 	.word	0x200005b8
 8006ad8:	200005c8 	.word	0x200005c8
 8006adc:	2003c422 	.word	0x2003c422
 8006ae0:	20024aec 	.word	0x20024aec

08006ae4 <cppFlip100ns>:

void cppFlip100ns(void)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 8006ae8:	4802      	ldr	r0, [pc, #8]	; (8006af4 <cppFlip100ns+0x10>)
 8006aea:	f7fb fb73 	bl	80021d4 <_ZN10LineSensor17storeSensorValuesEv>
	//line_trace.flip100ns();
}
 8006aee:	bf00      	nop
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	200002c0 	.word	0x200002c0

08006af8 <cppFlip10ms>:

void cppFlip10ms(void)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	af00      	add	r7, sp, #0
	static uint16_t twice_cnt;
	twice_cnt++;
 8006afc:	4b0a      	ldr	r3, [pc, #40]	; (8006b28 <cppFlip10ms+0x30>)
 8006afe:	881b      	ldrh	r3, [r3, #0]
 8006b00:	3301      	adds	r3, #1
 8006b02:	b29a      	uxth	r2, r3
 8006b04:	4b08      	ldr	r3, [pc, #32]	; (8006b28 <cppFlip10ms+0x30>)
 8006b06:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 7){ //70ms
 8006b08:	4b07      	ldr	r3, [pc, #28]	; (8006b28 <cppFlip10ms+0x30>)
 8006b0a:	881b      	ldrh	r3, [r3, #0]
 8006b0c:	2b06      	cmp	r3, #6
 8006b0e:	d905      	bls.n	8006b1c <cppFlip10ms+0x24>
		sys_ident.updateMsig();
 8006b10:	4806      	ldr	r0, [pc, #24]	; (8006b2c <cppFlip10ms+0x34>)
 8006b12:	f7fd ff4f 	bl	80049b4 <_ZN20SystemIdentification10updateMsigEv>
		twice_cnt = 0;
 8006b16:	4b04      	ldr	r3, [pc, #16]	; (8006b28 <cppFlip10ms+0x30>)
 8006b18:	2200      	movs	r2, #0
 8006b1a:	801a      	strh	r2, [r3, #0]
	}

	mon_cnt = twice_cnt;
 8006b1c:	4b02      	ldr	r3, [pc, #8]	; (8006b28 <cppFlip10ms+0x30>)
 8006b1e:	881a      	ldrh	r2, [r3, #0]
 8006b20:	4b03      	ldr	r3, [pc, #12]	; (8006b30 <cppFlip10ms+0x38>)
 8006b22:	801a      	strh	r2, [r3, #0]
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 8006b24:	bf00      	nop
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	2003c424 	.word	0x2003c424
 8006b2c:	20024aec 	.word	0x20024aec
 8006b30:	2003c420 	.word	0x2003c420
 8006b34:	00000000 	.word	0x00000000

08006b38 <cppLoop>:
{
	//side_sensor.updateStatus(gpio_pin);
}

void cppLoop(void)
{
 8006b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b3a:	b087      	sub	sp, #28
 8006b3c:	af02      	add	r7, sp, #8
	static int16_t selector;

	static float adj_kp = line_trace.getKp();
 8006b3e:	4bbc      	ldr	r3, [pc, #752]	; (8006e30 <cppLoop+0x2f8>)
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	f3bf 8f5b 	dmb	ish
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	f003 0301 	and.w	r3, r3, #1
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	bf0c      	ite	eq
 8006b50:	2301      	moveq	r3, #1
 8006b52:	2300      	movne	r3, #0
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d015      	beq.n	8006b86 <cppLoop+0x4e>
 8006b5a:	48b5      	ldr	r0, [pc, #724]	; (8006e30 <cppLoop+0x2f8>)
 8006b5c:	f00b fee7 	bl	801292e <__cxa_guard_acquire>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	bf14      	ite	ne
 8006b66:	2301      	movne	r3, #1
 8006b68:	2300      	moveq	r3, #0
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d00a      	beq.n	8006b86 <cppLoop+0x4e>
 8006b70:	48b0      	ldr	r0, [pc, #704]	; (8006e34 <cppLoop+0x2fc>)
 8006b72:	f7fc fba2 	bl	80032ba <_ZN9LineTrace5getKpEv>
 8006b76:	eef0 7a40 	vmov.f32	s15, s0
 8006b7a:	4baf      	ldr	r3, [pc, #700]	; (8006e38 <cppLoop+0x300>)
 8006b7c:	edc3 7a00 	vstr	s15, [r3]
 8006b80:	48ab      	ldr	r0, [pc, #684]	; (8006e30 <cppLoop+0x2f8>)
 8006b82:	f00b fee0 	bl	8012946 <__cxa_guard_release>
	static float adj_ki= line_trace.getKi();
 8006b86:	4bad      	ldr	r3, [pc, #692]	; (8006e3c <cppLoop+0x304>)
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	f3bf 8f5b 	dmb	ish
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	f003 0301 	and.w	r3, r3, #1
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	bf0c      	ite	eq
 8006b98:	2301      	moveq	r3, #1
 8006b9a:	2300      	movne	r3, #0
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d015      	beq.n	8006bce <cppLoop+0x96>
 8006ba2:	48a6      	ldr	r0, [pc, #664]	; (8006e3c <cppLoop+0x304>)
 8006ba4:	f00b fec3 	bl	801292e <__cxa_guard_acquire>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	bf14      	ite	ne
 8006bae:	2301      	movne	r3, #1
 8006bb0:	2300      	moveq	r3, #0
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d00a      	beq.n	8006bce <cppLoop+0x96>
 8006bb8:	489e      	ldr	r0, [pc, #632]	; (8006e34 <cppLoop+0x2fc>)
 8006bba:	f7fc fb8d 	bl	80032d8 <_ZN9LineTrace5getKiEv>
 8006bbe:	eef0 7a40 	vmov.f32	s15, s0
 8006bc2:	4b9f      	ldr	r3, [pc, #636]	; (8006e40 <cppLoop+0x308>)
 8006bc4:	edc3 7a00 	vstr	s15, [r3]
 8006bc8:	489c      	ldr	r0, [pc, #624]	; (8006e3c <cppLoop+0x304>)
 8006bca:	f00b febc 	bl	8012946 <__cxa_guard_release>
	static float adj_kd = line_trace.getKd();
 8006bce:	4b9d      	ldr	r3, [pc, #628]	; (8006e44 <cppLoop+0x30c>)
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	f3bf 8f5b 	dmb	ish
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	f003 0301 	and.w	r3, r3, #1
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	bf0c      	ite	eq
 8006be0:	2301      	moveq	r3, #1
 8006be2:	2300      	movne	r3, #0
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d015      	beq.n	8006c16 <cppLoop+0xde>
 8006bea:	4896      	ldr	r0, [pc, #600]	; (8006e44 <cppLoop+0x30c>)
 8006bec:	f00b fe9f 	bl	801292e <__cxa_guard_acquire>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	bf14      	ite	ne
 8006bf6:	2301      	movne	r3, #1
 8006bf8:	2300      	moveq	r3, #0
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d00a      	beq.n	8006c16 <cppLoop+0xde>
 8006c00:	488c      	ldr	r0, [pc, #560]	; (8006e34 <cppLoop+0x2fc>)
 8006c02:	f7fc fb78 	bl	80032f6 <_ZN9LineTrace5getKdEv>
 8006c06:	eef0 7a40 	vmov.f32	s15, s0
 8006c0a:	4b8f      	ldr	r3, [pc, #572]	; (8006e48 <cppLoop+0x310>)
 8006c0c:	edc3 7a00 	vstr	s15, [r3]
 8006c10:	488c      	ldr	r0, [pc, #560]	; (8006e44 <cppLoop+0x30c>)
 8006c12:	f00b fe98 	bl	8012946 <__cxa_guard_release>

	static float adj_velocity = line_trace.getTargetVelocity();
 8006c16:	4b8d      	ldr	r3, [pc, #564]	; (8006e4c <cppLoop+0x314>)
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	f3bf 8f5b 	dmb	ish
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	f003 0301 	and.w	r3, r3, #1
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	bf0c      	ite	eq
 8006c28:	2301      	moveq	r3, #1
 8006c2a:	2300      	movne	r3, #0
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d015      	beq.n	8006c5e <cppLoop+0x126>
 8006c32:	4886      	ldr	r0, [pc, #536]	; (8006e4c <cppLoop+0x314>)
 8006c34:	f00b fe7b 	bl	801292e <__cxa_guard_acquire>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	bf14      	ite	ne
 8006c3e:	2301      	movne	r3, #1
 8006c40:	2300      	moveq	r3, #0
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d00a      	beq.n	8006c5e <cppLoop+0x126>
 8006c48:	487a      	ldr	r0, [pc, #488]	; (8006e34 <cppLoop+0x2fc>)
 8006c4a:	f7fc fba0 	bl	800338e <_ZN9LineTrace17getTargetVelocityEv>
 8006c4e:	eef0 7a40 	vmov.f32	s15, s0
 8006c52:	4b7f      	ldr	r3, [pc, #508]	; (8006e50 <cppLoop+0x318>)
 8006c54:	edc3 7a00 	vstr	s15, [r3]
 8006c58:	487c      	ldr	r0, [pc, #496]	; (8006e4c <cppLoop+0x314>)
 8006c5a:	f00b fe74 	bl	8012946 <__cxa_guard_release>
	static float adj_max_velocity = line_trace.getMaxVelocity();
 8006c5e:	4b7d      	ldr	r3, [pc, #500]	; (8006e54 <cppLoop+0x31c>)
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	f3bf 8f5b 	dmb	ish
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	f003 0301 	and.w	r3, r3, #1
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	bf0c      	ite	eq
 8006c70:	2301      	moveq	r3, #1
 8006c72:	2300      	movne	r3, #0
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d015      	beq.n	8006ca6 <cppLoop+0x16e>
 8006c7a:	4876      	ldr	r0, [pc, #472]	; (8006e54 <cppLoop+0x31c>)
 8006c7c:	f00b fe57 	bl	801292e <__cxa_guard_acquire>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	bf14      	ite	ne
 8006c86:	2301      	movne	r3, #1
 8006c88:	2300      	moveq	r3, #0
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d00a      	beq.n	8006ca6 <cppLoop+0x16e>
 8006c90:	4868      	ldr	r0, [pc, #416]	; (8006e34 <cppLoop+0x2fc>)
 8006c92:	f7fc fb8b 	bl	80033ac <_ZN9LineTrace14getMaxVelocityEv>
 8006c96:	eef0 7a40 	vmov.f32	s15, s0
 8006c9a:	4b6f      	ldr	r3, [pc, #444]	; (8006e58 <cppLoop+0x320>)
 8006c9c:	edc3 7a00 	vstr	s15, [r3]
 8006ca0:	486c      	ldr	r0, [pc, #432]	; (8006e54 <cppLoop+0x31c>)
 8006ca2:	f00b fe50 	bl	8012946 <__cxa_guard_release>
	static float adj_max_velocity2 = line_trace.getMaxVelocity2();
 8006ca6:	4b6d      	ldr	r3, [pc, #436]	; (8006e5c <cppLoop+0x324>)
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	f3bf 8f5b 	dmb	ish
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	f003 0301 	and.w	r3, r3, #1
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	bf0c      	ite	eq
 8006cb8:	2301      	moveq	r3, #1
 8006cba:	2300      	movne	r3, #0
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d015      	beq.n	8006cee <cppLoop+0x1b6>
 8006cc2:	4866      	ldr	r0, [pc, #408]	; (8006e5c <cppLoop+0x324>)
 8006cc4:	f00b fe33 	bl	801292e <__cxa_guard_acquire>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	bf14      	ite	ne
 8006cce:	2301      	movne	r3, #1
 8006cd0:	2300      	moveq	r3, #0
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d00a      	beq.n	8006cee <cppLoop+0x1b6>
 8006cd8:	4856      	ldr	r0, [pc, #344]	; (8006e34 <cppLoop+0x2fc>)
 8006cda:	f7fc fb76 	bl	80033ca <_ZN9LineTrace15getMaxVelocity2Ev>
 8006cde:	eef0 7a40 	vmov.f32	s15, s0
 8006ce2:	4b5f      	ldr	r3, [pc, #380]	; (8006e60 <cppLoop+0x328>)
 8006ce4:	edc3 7a00 	vstr	s15, [r3]
 8006ce8:	485c      	ldr	r0, [pc, #368]	; (8006e5c <cppLoop+0x324>)
 8006cea:	f00b fe2c 	bl	8012946 <__cxa_guard_release>

	switch(rotary_switch.getValue()){
 8006cee:	485d      	ldr	r0, [pc, #372]	; (8006e64 <cppLoop+0x32c>)
 8006cf0:	f7fd fc68 	bl	80045c4 <_ZN12RotarySwitch8getValueEv>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	2b0f      	cmp	r3, #15
 8006cf8:	f200 87f2 	bhi.w	8007ce0 <cppLoop+0x11a8>
 8006cfc:	a201      	add	r2, pc, #4	; (adr r2, 8006d04 <cppLoop+0x1cc>)
 8006cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d02:	bf00      	nop
 8006d04:	08006d45 	.word	0x08006d45
 8006d08:	08007185 	.word	0x08007185
 8006d0c:	08007219 	.word	0x08007219
 8006d10:	0800736b 	.word	0x0800736b
 8006d14:	0800744d 	.word	0x0800744d
 8006d18:	080075a1 	.word	0x080075a1
 8006d1c:	08007649 	.word	0x08007649
 8006d20:	080077cf 	.word	0x080077cf
 8006d24:	080077f9 	.word	0x080077f9
 8006d28:	08007823 	.word	0x08007823
 8006d2c:	080078df 	.word	0x080078df
 8006d30:	0800794f 	.word	0x0800794f
 8006d34:	080079eb 	.word	0x080079eb
 8006d38:	08007b0d 	.word	0x08007b0d
 8006d3c:	08007b93 	.word	0x08007b93
 8006d40:	08007c3b 	.word	0x08007c3b
	case 0:
		led.fullColor('W');
 8006d44:	2157      	movs	r1, #87	; 0x57
 8006d46:	4848      	ldr	r0, [pc, #288]	; (8006e68 <cppLoop+0x330>)
 8006d48:	f7fb f8d8 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8006d4c:	f7fa f9a8 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006d50:	2100      	movs	r1, #0
 8006d52:	2000      	movs	r0, #0
 8006d54:	f7fa f9b4 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", line_trace.getKp()*1000);
 8006d58:	4836      	ldr	r0, [pc, #216]	; (8006e34 <cppLoop+0x2fc>)
 8006d5a:	f7fc faae 	bl	80032ba <_ZN9LineTrace5getKpEv>
 8006d5e:	eeb0 7a40 	vmov.f32	s14, s0
 8006d62:	eddf 7a42 	vldr	s15, [pc, #264]	; 8006e6c <cppLoop+0x334>
 8006d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d6a:	ee17 0a90 	vmov	r0, s15
 8006d6e:	f7f9 fc03 	bl	8000578 <__aeabi_f2d>
 8006d72:	4603      	mov	r3, r0
 8006d74:	460c      	mov	r4, r1
 8006d76:	461a      	mov	r2, r3
 8006d78:	4623      	mov	r3, r4
 8006d7a:	483d      	ldr	r0, [pc, #244]	; (8006e70 <cppLoop+0x338>)
 8006d7c:	f7fa f9ca 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006d80:	2101      	movs	r1, #1
 8006d82:	2000      	movs	r0, #0
 8006d84:	f7fa f99c 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", line_trace.getKi()*100, line_trace.getKd()*10000);
 8006d88:	482a      	ldr	r0, [pc, #168]	; (8006e34 <cppLoop+0x2fc>)
 8006d8a:	f7fc faa5 	bl	80032d8 <_ZN9LineTrace5getKiEv>
 8006d8e:	eeb0 7a40 	vmov.f32	s14, s0
 8006d92:	eddf 7a38 	vldr	s15, [pc, #224]	; 8006e74 <cppLoop+0x33c>
 8006d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d9a:	ee17 0a90 	vmov	r0, s15
 8006d9e:	f7f9 fbeb 	bl	8000578 <__aeabi_f2d>
 8006da2:	4605      	mov	r5, r0
 8006da4:	460e      	mov	r6, r1
 8006da6:	4823      	ldr	r0, [pc, #140]	; (8006e34 <cppLoop+0x2fc>)
 8006da8:	f7fc faa5 	bl	80032f6 <_ZN9LineTrace5getKdEv>
 8006dac:	eeb0 7a40 	vmov.f32	s14, s0
 8006db0:	eddf 7a31 	vldr	s15, [pc, #196]	; 8006e78 <cppLoop+0x340>
 8006db4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006db8:	ee17 0a90 	vmov	r0, s15
 8006dbc:	f7f9 fbdc 	bl	8000578 <__aeabi_f2d>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	460c      	mov	r4, r1
 8006dc4:	e9cd 3400 	strd	r3, r4, [sp]
 8006dc8:	462a      	mov	r2, r5
 8006dca:	4633      	mov	r3, r6
 8006dcc:	482b      	ldr	r0, [pc, #172]	; (8006e7c <cppLoop+0x344>)
 8006dce:	f7fa f9a1 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8006dd2:	482b      	ldr	r0, [pc, #172]	; (8006e80 <cppLoop+0x348>)
 8006dd4:	f7fb f82e 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b08      	cmp	r3, #8
 8006ddc:	bf0c      	ite	eq
 8006dde:	2301      	moveq	r3, #1
 8006de0:	2300      	movne	r3, #0
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d04f      	beq.n	8006e88 <cppLoop+0x350>
			led.LR(-1, 1);
 8006de8:	2201      	movs	r2, #1
 8006dea:	f04f 31ff 	mov.w	r1, #4294967295
 8006dee:	481e      	ldr	r0, [pc, #120]	; (8006e68 <cppLoop+0x330>)
 8006df0:	f7fb f940 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8006df4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006df8:	f001 f8b4 	bl	8007f64 <HAL_Delay>

			selector++;
 8006dfc:	4b21      	ldr	r3, [pc, #132]	; (8006e84 <cppLoop+0x34c>)
 8006dfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	3301      	adds	r3, #1
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	b21a      	sxth	r2, r3
 8006e0a:	4b1e      	ldr	r3, [pc, #120]	; (8006e84 <cppLoop+0x34c>)
 8006e0c:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8006e0e:	4b1d      	ldr	r3, [pc, #116]	; (8006e84 <cppLoop+0x34c>)
 8006e10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e14:	2b02      	cmp	r3, #2
 8006e16:	dd02      	ble.n	8006e1e <cppLoop+0x2e6>
 8006e18:	4b1a      	ldr	r3, [pc, #104]	; (8006e84 <cppLoop+0x34c>)
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f04f 31ff 	mov.w	r1, #4294967295
 8006e24:	4810      	ldr	r0, [pc, #64]	; (8006e68 <cppLoop+0x330>)
 8006e26:	f7fb f925 	bl	8002074 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 8006e2a:	f000 bf5b 	b.w	8007ce4 <cppLoop+0x11ac>
 8006e2e:	bf00      	nop
 8006e30:	2003c42c 	.word	0x2003c42c
 8006e34:	20017da0 	.word	0x20017da0
 8006e38:	2003c428 	.word	0x2003c428
 8006e3c:	2003c434 	.word	0x2003c434
 8006e40:	2003c430 	.word	0x2003c430
 8006e44:	2003c43c 	.word	0x2003c43c
 8006e48:	2003c438 	.word	0x2003c438
 8006e4c:	2003c444 	.word	0x2003c444
 8006e50:	2003c440 	.word	0x2003c440
 8006e54:	2003c44c 	.word	0x2003c44c
 8006e58:	2003c448 	.word	0x2003c448
 8006e5c:	2003c454 	.word	0x2003c454
 8006e60:	2003c450 	.word	0x2003c450
 8006e64:	200005c4 	.word	0x200005c4
 8006e68:	200005cc 	.word	0x200005cc
 8006e6c:	447a0000 	.word	0x447a0000
 8006e70:	080181e8 	.word	0x080181e8
 8006e74:	42c80000 	.word	0x42c80000
 8006e78:	461c4000 	.word	0x461c4000
 8006e7c:	080181f4 	.word	0x080181f4
 8006e80:	200005c0 	.word	0x200005c0
 8006e84:	2003c426 	.word	0x2003c426
		else if(joy_stick.getValue() == JOY_R){
 8006e88:	48b3      	ldr	r0, [pc, #716]	; (8007158 <cppLoop+0x620>)
 8006e8a:	f7fa ffd3 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	2b10      	cmp	r3, #16
 8006e92:	bf0c      	ite	eq
 8006e94:	2301      	moveq	r3, #1
 8006e96:	2300      	movne	r3, #0
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d059      	beq.n	8006f52 <cppLoop+0x41a>
			led.LR(-1, 1);
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8006ea4:	48ad      	ldr	r0, [pc, #692]	; (800715c <cppLoop+0x624>)
 8006ea6:	f7fb f8e5 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8006eaa:	2064      	movs	r0, #100	; 0x64
 8006eac:	f001 f85a 	bl	8007f64 <HAL_Delay>
			if(selector == 0){
 8006eb0:	4bab      	ldr	r3, [pc, #684]	; (8007160 <cppLoop+0x628>)
 8006eb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d113      	bne.n	8006ee2 <cppLoop+0x3aa>
				adj_kp = adj_kp + 0.00001;
 8006eba:	4baa      	ldr	r3, [pc, #680]	; (8007164 <cppLoop+0x62c>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f7f9 fb5a 	bl	8000578 <__aeabi_f2d>
 8006ec4:	a39e      	add	r3, pc, #632	; (adr r3, 8007140 <cppLoop+0x608>)
 8006ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eca:	f7f9 f9f7 	bl	80002bc <__adddf3>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	460c      	mov	r4, r1
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	4621      	mov	r1, r4
 8006ed6:	f7f9 fe9f 	bl	8000c18 <__aeabi_d2f>
 8006eda:	4602      	mov	r2, r0
 8006edc:	4ba1      	ldr	r3, [pc, #644]	; (8007164 <cppLoop+0x62c>)
 8006ede:	601a      	str	r2, [r3, #0]
 8006ee0:	e02b      	b.n	8006f3a <cppLoop+0x402>
			else if(selector == 1){
 8006ee2:	4b9f      	ldr	r3, [pc, #636]	; (8007160 <cppLoop+0x628>)
 8006ee4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d113      	bne.n	8006f14 <cppLoop+0x3dc>
				adj_ki = adj_ki + 0.0001;
 8006eec:	4b9e      	ldr	r3, [pc, #632]	; (8007168 <cppLoop+0x630>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f7f9 fb41 	bl	8000578 <__aeabi_f2d>
 8006ef6:	a394      	add	r3, pc, #592	; (adr r3, 8007148 <cppLoop+0x610>)
 8006ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efc:	f7f9 f9de 	bl	80002bc <__adddf3>
 8006f00:	4603      	mov	r3, r0
 8006f02:	460c      	mov	r4, r1
 8006f04:	4618      	mov	r0, r3
 8006f06:	4621      	mov	r1, r4
 8006f08:	f7f9 fe86 	bl	8000c18 <__aeabi_d2f>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	4b96      	ldr	r3, [pc, #600]	; (8007168 <cppLoop+0x630>)
 8006f10:	601a      	str	r2, [r3, #0]
 8006f12:	e012      	b.n	8006f3a <cppLoop+0x402>
				adj_kd = adj_kd + 0.000001;
 8006f14:	4b95      	ldr	r3, [pc, #596]	; (800716c <cppLoop+0x634>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f7f9 fb2d 	bl	8000578 <__aeabi_f2d>
 8006f1e:	a38c      	add	r3, pc, #560	; (adr r3, 8007150 <cppLoop+0x618>)
 8006f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f24:	f7f9 f9ca 	bl	80002bc <__adddf3>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	460c      	mov	r4, r1
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	4621      	mov	r1, r4
 8006f30:	f7f9 fe72 	bl	8000c18 <__aeabi_d2f>
 8006f34:	4602      	mov	r2, r0
 8006f36:	4b8d      	ldr	r3, [pc, #564]	; (800716c <cppLoop+0x634>)
 8006f38:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8006f3a:	2152      	movs	r1, #82	; 0x52
 8006f3c:	4887      	ldr	r0, [pc, #540]	; (800715c <cppLoop+0x624>)
 8006f3e:	f7fa ffdd 	bl	8001efc <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8006f42:	2200      	movs	r2, #0
 8006f44:	f04f 31ff 	mov.w	r1, #4294967295
 8006f48:	4884      	ldr	r0, [pc, #528]	; (800715c <cppLoop+0x624>)
 8006f4a:	f7fb f893 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8006f4e:	f000 bec9 	b.w	8007ce4 <cppLoop+0x11ac>
		else if(joy_stick.getValue() == JOY_L){
 8006f52:	4881      	ldr	r0, [pc, #516]	; (8007158 <cppLoop+0x620>)
 8006f54:	f7fa ff6e 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	bf0c      	ite	eq
 8006f5e:	2301      	moveq	r3, #1
 8006f60:	2300      	movne	r3, #0
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d059      	beq.n	800701c <cppLoop+0x4e4>
			led.LR(-1, 1);
 8006f68:	2201      	movs	r2, #1
 8006f6a:	f04f 31ff 	mov.w	r1, #4294967295
 8006f6e:	487b      	ldr	r0, [pc, #492]	; (800715c <cppLoop+0x624>)
 8006f70:	f7fb f880 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8006f74:	2064      	movs	r0, #100	; 0x64
 8006f76:	f000 fff5 	bl	8007f64 <HAL_Delay>
			if(selector == 0){
 8006f7a:	4b79      	ldr	r3, [pc, #484]	; (8007160 <cppLoop+0x628>)
 8006f7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d113      	bne.n	8006fac <cppLoop+0x474>
				adj_kp = adj_kp - 0.00001;
 8006f84:	4b77      	ldr	r3, [pc, #476]	; (8007164 <cppLoop+0x62c>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f7f9 faf5 	bl	8000578 <__aeabi_f2d>
 8006f8e:	a36c      	add	r3, pc, #432	; (adr r3, 8007140 <cppLoop+0x608>)
 8006f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f94:	f7f9 f990 	bl	80002b8 <__aeabi_dsub>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	460c      	mov	r4, r1
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	4621      	mov	r1, r4
 8006fa0:	f7f9 fe3a 	bl	8000c18 <__aeabi_d2f>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	4b6f      	ldr	r3, [pc, #444]	; (8007164 <cppLoop+0x62c>)
 8006fa8:	601a      	str	r2, [r3, #0]
 8006faa:	e02b      	b.n	8007004 <cppLoop+0x4cc>
			else if(selector == 1){
 8006fac:	4b6c      	ldr	r3, [pc, #432]	; (8007160 <cppLoop+0x628>)
 8006fae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d113      	bne.n	8006fde <cppLoop+0x4a6>
				adj_ki = adj_ki - 0.0001;
 8006fb6:	4b6c      	ldr	r3, [pc, #432]	; (8007168 <cppLoop+0x630>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f7f9 fadc 	bl	8000578 <__aeabi_f2d>
 8006fc0:	a361      	add	r3, pc, #388	; (adr r3, 8007148 <cppLoop+0x610>)
 8006fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc6:	f7f9 f977 	bl	80002b8 <__aeabi_dsub>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	460c      	mov	r4, r1
 8006fce:	4618      	mov	r0, r3
 8006fd0:	4621      	mov	r1, r4
 8006fd2:	f7f9 fe21 	bl	8000c18 <__aeabi_d2f>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	4b63      	ldr	r3, [pc, #396]	; (8007168 <cppLoop+0x630>)
 8006fda:	601a      	str	r2, [r3, #0]
 8006fdc:	e012      	b.n	8007004 <cppLoop+0x4cc>
				adj_kd = adj_kd - 0.000001;
 8006fde:	4b63      	ldr	r3, [pc, #396]	; (800716c <cppLoop+0x634>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f7f9 fac8 	bl	8000578 <__aeabi_f2d>
 8006fe8:	a359      	add	r3, pc, #356	; (adr r3, 8007150 <cppLoop+0x618>)
 8006fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fee:	f7f9 f963 	bl	80002b8 <__aeabi_dsub>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	460c      	mov	r4, r1
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	4621      	mov	r1, r4
 8006ffa:	f7f9 fe0d 	bl	8000c18 <__aeabi_d2f>
 8006ffe:	4602      	mov	r2, r0
 8007000:	4b5a      	ldr	r3, [pc, #360]	; (800716c <cppLoop+0x634>)
 8007002:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8007004:	2152      	movs	r1, #82	; 0x52
 8007006:	4855      	ldr	r0, [pc, #340]	; (800715c <cppLoop+0x624>)
 8007008:	f7fa ff78 	bl	8001efc <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 800700c:	2200      	movs	r2, #0
 800700e:	f04f 31ff 	mov.w	r1, #4294967295
 8007012:	4852      	ldr	r0, [pc, #328]	; (800715c <cppLoop+0x624>)
 8007014:	f7fb f82e 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8007018:	f000 be64 	b.w	8007ce4 <cppLoop+0x11ac>
		else if(joy_stick.getValue() == JOY_D){
 800701c:	484e      	ldr	r0, [pc, #312]	; (8007158 <cppLoop+0x620>)
 800701e:	f7fa ff09 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007022:	4603      	mov	r3, r0
 8007024:	2b04      	cmp	r3, #4
 8007026:	bf0c      	ite	eq
 8007028:	2301      	moveq	r3, #1
 800702a:	2300      	movne	r3, #0
 800702c:	b2db      	uxtb	r3, r3
 800702e:	2b00      	cmp	r3, #0
 8007030:	d03d      	beq.n	80070ae <cppLoop+0x576>
			led.LR(-1, 1);
 8007032:	2201      	movs	r2, #1
 8007034:	f04f 31ff 	mov.w	r1, #4294967295
 8007038:	4848      	ldr	r0, [pc, #288]	; (800715c <cppLoop+0x624>)
 800703a:	f7fb f81b 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 800703e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007042:	f000 ff8f 	bl	8007f64 <HAL_Delay>
			sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 8007046:	f107 030c 	add.w	r3, r7, #12
 800704a:	2201      	movs	r2, #1
 800704c:	4948      	ldr	r1, [pc, #288]	; (8007170 <cppLoop+0x638>)
 800704e:	4849      	ldr	r0, [pc, #292]	; (8007174 <cppLoop+0x63c>)
 8007050:	f7fa fb3e 	bl	80016d0 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 8007054:	f107 0308 	add.w	r3, r7, #8
 8007058:	2201      	movs	r2, #1
 800705a:	4947      	ldr	r1, [pc, #284]	; (8007178 <cppLoop+0x640>)
 800705c:	4845      	ldr	r0, [pc, #276]	; (8007174 <cppLoop+0x63c>)
 800705e:	f7fa fb37 	bl	80016d0 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8007062:	1d3b      	adds	r3, r7, #4
 8007064:	2201      	movs	r2, #1
 8007066:	4945      	ldr	r1, [pc, #276]	; (800717c <cppLoop+0x644>)
 8007068:	4842      	ldr	r0, [pc, #264]	; (8007174 <cppLoop+0x63c>)
 800706a:	f7fa fb31 	bl	80016d0 <sd_read_array_float>
			line_trace.setGain(temp_kp, temp_ki, temp_kd);
 800706e:	edd7 7a03 	vldr	s15, [r7, #12]
 8007072:	ed97 7a02 	vldr	s14, [r7, #8]
 8007076:	edd7 6a01 	vldr	s13, [r7, #4]
 800707a:	eeb0 1a66 	vmov.f32	s2, s13
 800707e:	eef0 0a47 	vmov.f32	s1, s14
 8007082:	eeb0 0a67 	vmov.f32	s0, s15
 8007086:	483e      	ldr	r0, [pc, #248]	; (8007180 <cppLoop+0x648>)
 8007088:	f7fc f8fe 	bl	8003288 <_ZN9LineTrace7setGainEfff>
			adj_kp = temp_kp;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	4a35      	ldr	r2, [pc, #212]	; (8007164 <cppLoop+0x62c>)
 8007090:	6013      	str	r3, [r2, #0]
			adj_ki = temp_kp;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	4a34      	ldr	r2, [pc, #208]	; (8007168 <cppLoop+0x630>)
 8007096:	6013      	str	r3, [r2, #0]
			adj_kd = temp_kp;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	4a34      	ldr	r2, [pc, #208]	; (800716c <cppLoop+0x634>)
 800709c:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 800709e:	2200      	movs	r2, #0
 80070a0:	f04f 31ff 	mov.w	r1, #4294967295
 80070a4:	482d      	ldr	r0, [pc, #180]	; (800715c <cppLoop+0x624>)
 80070a6:	f7fa ffe5 	bl	8002074 <_ZN3LED2LREaa>
		break;
 80070aa:	f000 be1b 	b.w	8007ce4 <cppLoop+0x11ac>
		else if(joy_stick.getValue() == JOY_C){
 80070ae:	482a      	ldr	r0, [pc, #168]	; (8007158 <cppLoop+0x620>)
 80070b0:	f7fa fec0 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80070b4:	4603      	mov	r3, r0
 80070b6:	2b02      	cmp	r3, #2
 80070b8:	bf0c      	ite	eq
 80070ba:	2301      	moveq	r3, #1
 80070bc:	2300      	movne	r3, #0
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	f000 860f 	beq.w	8007ce4 <cppLoop+0x11ac>
			led.LR(-1, 1);
 80070c6:	2201      	movs	r2, #1
 80070c8:	f04f 31ff 	mov.w	r1, #4294967295
 80070cc:	4823      	ldr	r0, [pc, #140]	; (800715c <cppLoop+0x624>)
 80070ce:	f7fa ffd1 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80070d2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80070d6:	f000 ff45 	bl	8007f64 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 80070da:	2300      	movs	r3, #0
 80070dc:	9300      	str	r3, [sp, #0]
 80070de:	4b21      	ldr	r3, [pc, #132]	; (8007164 <cppLoop+0x62c>)
 80070e0:	2201      	movs	r2, #1
 80070e2:	4923      	ldr	r1, [pc, #140]	; (8007170 <cppLoop+0x638>)
 80070e4:	4823      	ldr	r0, [pc, #140]	; (8007174 <cppLoop+0x63c>)
 80070e6:	f7fa fa8d 	bl	8001604 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 80070ea:	2300      	movs	r3, #0
 80070ec:	9300      	str	r3, [sp, #0]
 80070ee:	4b1e      	ldr	r3, [pc, #120]	; (8007168 <cppLoop+0x630>)
 80070f0:	2201      	movs	r2, #1
 80070f2:	4921      	ldr	r1, [pc, #132]	; (8007178 <cppLoop+0x640>)
 80070f4:	481f      	ldr	r0, [pc, #124]	; (8007174 <cppLoop+0x63c>)
 80070f6:	f7fa fa85 	bl	8001604 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 80070fa:	2300      	movs	r3, #0
 80070fc:	9300      	str	r3, [sp, #0]
 80070fe:	4b1b      	ldr	r3, [pc, #108]	; (800716c <cppLoop+0x634>)
 8007100:	2201      	movs	r2, #1
 8007102:	491e      	ldr	r1, [pc, #120]	; (800717c <cppLoop+0x644>)
 8007104:	481b      	ldr	r0, [pc, #108]	; (8007174 <cppLoop+0x63c>)
 8007106:	f7fa fa7d 	bl	8001604 <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 800710a:	4b16      	ldr	r3, [pc, #88]	; (8007164 <cppLoop+0x62c>)
 800710c:	edd3 7a00 	vldr	s15, [r3]
 8007110:	4b15      	ldr	r3, [pc, #84]	; (8007168 <cppLoop+0x630>)
 8007112:	ed93 7a00 	vldr	s14, [r3]
 8007116:	4b15      	ldr	r3, [pc, #84]	; (800716c <cppLoop+0x634>)
 8007118:	edd3 6a00 	vldr	s13, [r3]
 800711c:	eeb0 1a66 	vmov.f32	s2, s13
 8007120:	eef0 0a47 	vmov.f32	s1, s14
 8007124:	eeb0 0a67 	vmov.f32	s0, s15
 8007128:	4815      	ldr	r0, [pc, #84]	; (8007180 <cppLoop+0x648>)
 800712a:	f7fc f8ad 	bl	8003288 <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 800712e:	2200      	movs	r2, #0
 8007130:	f04f 31ff 	mov.w	r1, #4294967295
 8007134:	4809      	ldr	r0, [pc, #36]	; (800715c <cppLoop+0x624>)
 8007136:	f7fa ff9d 	bl	8002074 <_ZN3LED2LREaa>
		break;
 800713a:	f000 bdd3 	b.w	8007ce4 <cppLoop+0x11ac>
 800713e:	bf00      	nop
 8007140:	88e368f1 	.word	0x88e368f1
 8007144:	3ee4f8b5 	.word	0x3ee4f8b5
 8007148:	eb1c432d 	.word	0xeb1c432d
 800714c:	3f1a36e2 	.word	0x3f1a36e2
 8007150:	a0b5ed8d 	.word	0xa0b5ed8d
 8007154:	3eb0c6f7 	.word	0x3eb0c6f7
 8007158:	200005c0 	.word	0x200005c0
 800715c:	200005cc 	.word	0x200005cc
 8007160:	2003c426 	.word	0x2003c426
 8007164:	2003c428 	.word	0x2003c428
 8007168:	2003c430 	.word	0x2003c430
 800716c:	2003c438 	.word	0x2003c438
 8007170:	08018204 	.word	0x08018204
 8007174:	0801820c 	.word	0x0801820c
 8007178:	08018214 	.word	0x08018214
 800717c:	0801821c 	.word	0x0801821c
 8007180:	20017da0 	.word	0x20017da0

	case 1:
		led.fullColor('C');
 8007184:	2143      	movs	r1, #67	; 0x43
 8007186:	48a6      	ldr	r0, [pc, #664]	; (8007420 <cppLoop+0x8e8>)
 8007188:	f7fa feb8 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 800718c:	f7f9 ff88 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007190:	2100      	movs	r1, #0
 8007192:	2000      	movs	r0, #0
 8007194:	f7f9 ff94 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 8007198:	48a2      	ldr	r0, [pc, #648]	; (8007424 <cppLoop+0x8ec>)
 800719a:	f7f9 ffbb 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800719e:	2101      	movs	r1, #1
 80071a0:	2000      	movs	r0, #0
 80071a2:	f7f9 ff8d 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_velocity);
 80071a6:	4ba0      	ldr	r3, [pc, #640]	; (8007428 <cppLoop+0x8f0>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4618      	mov	r0, r3
 80071ac:	f7f9 f9e4 	bl	8000578 <__aeabi_f2d>
 80071b0:	4603      	mov	r3, r0
 80071b2:	460c      	mov	r4, r1
 80071b4:	461a      	mov	r2, r3
 80071b6:	4623      	mov	r3, r4
 80071b8:	489c      	ldr	r0, [pc, #624]	; (800742c <cppLoop+0x8f4>)
 80071ba:	f7f9 ffab 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80071be:	489c      	ldr	r0, [pc, #624]	; (8007430 <cppLoop+0x8f8>)
 80071c0:	f7fa fe38 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80071c4:	4603      	mov	r3, r0
 80071c6:	2b02      	cmp	r3, #2
 80071c8:	bf0c      	ite	eq
 80071ca:	2301      	moveq	r3, #1
 80071cc:	2300      	movne	r3, #0
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f000 8589 	beq.w	8007ce8 <cppLoop+0x11b0>
			HAL_Delay(500);
 80071d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80071da:	f000 fec3 	bl	8007f64 <HAL_Delay>

			line_trace.setTargetVelocity(adj_velocity);
 80071de:	4b92      	ldr	r3, [pc, #584]	; (8007428 <cppLoop+0x8f0>)
 80071e0:	edd3 7a00 	vldr	s15, [r3]
 80071e4:	eeb0 0a67 	vmov.f32	s0, s15
 80071e8:	4892      	ldr	r0, [pc, #584]	; (8007434 <cppLoop+0x8fc>)
 80071ea:	f7fc f8a2 	bl	8003332 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 80071ee:	f04f 32ff 	mov.w	r2, #4294967295
 80071f2:	2101      	movs	r1, #1
 80071f4:	488a      	ldr	r0, [pc, #552]	; (8007420 <cppLoop+0x8e8>)
 80071f6:	f7fa ff3d 	bl	8002074 <_ZN3LED2LREaa>

			line_trace.setMode(FIRST_RUNNING);
 80071fa:	2100      	movs	r1, #0
 80071fc:	488d      	ldr	r0, [pc, #564]	; (8007434 <cppLoop+0x8fc>)
 80071fe:	f7fc fb17 	bl	8003830 <_ZN9LineTrace7setModeEs>
			line_trace.running();
 8007202:	488c      	ldr	r0, [pc, #560]	; (8007434 <cppLoop+0x8fc>)
 8007204:	f7fc fa16 	bl	8003634 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8007208:	f04f 32ff 	mov.w	r2, #4294967295
 800720c:	2100      	movs	r1, #0
 800720e:	4884      	ldr	r0, [pc, #528]	; (8007420 <cppLoop+0x8e8>)
 8007210:	f7fa ff30 	bl	8002074 <_ZN3LED2LREaa>
		}

		break;
 8007214:	f000 bd68 	b.w	8007ce8 <cppLoop+0x11b0>

	case 2:
		led.fullColor('B');
 8007218:	2142      	movs	r1, #66	; 0x42
 800721a:	4881      	ldr	r0, [pc, #516]	; (8007420 <cppLoop+0x8e8>)
 800721c:	f7fa fe6e 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007220:	f7f9 ff3e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007224:	2100      	movs	r1, #0
 8007226:	2000      	movs	r0, #0
 8007228:	f7f9 ff4a 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 800722c:	487d      	ldr	r0, [pc, #500]	; (8007424 <cppLoop+0x8ec>)
 800722e:	f7f9 ff71 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007232:	2101      	movs	r1, #1
 8007234:	2000      	movs	r0, #0
 8007236:	f7f9 ff43 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", adj_velocity);
 800723a:	4b7b      	ldr	r3, [pc, #492]	; (8007428 <cppLoop+0x8f0>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4618      	mov	r0, r3
 8007240:	f7f9 f99a 	bl	8000578 <__aeabi_f2d>
 8007244:	4603      	mov	r3, r0
 8007246:	460c      	mov	r4, r1
 8007248:	461a      	mov	r2, r3
 800724a:	4623      	mov	r3, r4
 800724c:	487a      	ldr	r0, [pc, #488]	; (8007438 <cppLoop+0x900>)
 800724e:	f7f9 ff61 	bl	8001114 <lcd_printf>


		if(joy_stick.getValue() == JOY_R){
 8007252:	4877      	ldr	r0, [pc, #476]	; (8007430 <cppLoop+0x8f8>)
 8007254:	f7fa fdee 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007258:	4603      	mov	r3, r0
 800725a:	2b10      	cmp	r3, #16
 800725c:	bf0c      	ite	eq
 800725e:	2301      	moveq	r3, #1
 8007260:	2300      	movne	r3, #0
 8007262:	b2db      	uxtb	r3, r3
 8007264:	2b00      	cmp	r3, #0
 8007266:	d023      	beq.n	80072b0 <cppLoop+0x778>
			led.LR(-1, 1);
 8007268:	2201      	movs	r2, #1
 800726a:	f04f 31ff 	mov.w	r1, #4294967295
 800726e:	486c      	ldr	r0, [pc, #432]	; (8007420 <cppLoop+0x8e8>)
 8007270:	f7fa ff00 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007274:	2064      	movs	r0, #100	; 0x64
 8007276:	f000 fe75 	bl	8007f64 <HAL_Delay>

			adj_velocity = adj_velocity + 0.1;
 800727a:	4b6b      	ldr	r3, [pc, #428]	; (8007428 <cppLoop+0x8f0>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4618      	mov	r0, r3
 8007280:	f7f9 f97a 	bl	8000578 <__aeabi_f2d>
 8007284:	a364      	add	r3, pc, #400	; (adr r3, 8007418 <cppLoop+0x8e0>)
 8007286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728a:	f7f9 f817 	bl	80002bc <__adddf3>
 800728e:	4603      	mov	r3, r0
 8007290:	460c      	mov	r4, r1
 8007292:	4618      	mov	r0, r3
 8007294:	4621      	mov	r1, r4
 8007296:	f7f9 fcbf 	bl	8000c18 <__aeabi_d2f>
 800729a:	4602      	mov	r2, r0
 800729c:	4b62      	ldr	r3, [pc, #392]	; (8007428 <cppLoop+0x8f0>)
 800729e:	601a      	str	r2, [r3, #0]

			led.LR(-1, 0);
 80072a0:	2200      	movs	r2, #0
 80072a2:	f04f 31ff 	mov.w	r1, #4294967295
 80072a6:	485e      	ldr	r0, [pc, #376]	; (8007420 <cppLoop+0x8e8>)
 80072a8:	f7fa fee4 	bl	8002074 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
			line_trace.setTargetVelocity(adj_velocity);

			led.LR(-1, 0);
		}
		break;
 80072ac:	f000 bd1e 	b.w	8007cec <cppLoop+0x11b4>
		else if(joy_stick.getValue() == JOY_L){
 80072b0:	485f      	ldr	r0, [pc, #380]	; (8007430 <cppLoop+0x8f8>)
 80072b2:	f7fa fdbf 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	bf0c      	ite	eq
 80072bc:	2301      	moveq	r3, #1
 80072be:	2300      	movne	r3, #0
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d023      	beq.n	800730e <cppLoop+0x7d6>
			led.LR(-1, 1);
 80072c6:	2201      	movs	r2, #1
 80072c8:	f04f 31ff 	mov.w	r1, #4294967295
 80072cc:	4854      	ldr	r0, [pc, #336]	; (8007420 <cppLoop+0x8e8>)
 80072ce:	f7fa fed1 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80072d2:	2064      	movs	r0, #100	; 0x64
 80072d4:	f000 fe46 	bl	8007f64 <HAL_Delay>
			adj_velocity = adj_velocity - 0.1;
 80072d8:	4b53      	ldr	r3, [pc, #332]	; (8007428 <cppLoop+0x8f0>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4618      	mov	r0, r3
 80072de:	f7f9 f94b 	bl	8000578 <__aeabi_f2d>
 80072e2:	a34d      	add	r3, pc, #308	; (adr r3, 8007418 <cppLoop+0x8e0>)
 80072e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e8:	f7f8 ffe6 	bl	80002b8 <__aeabi_dsub>
 80072ec:	4603      	mov	r3, r0
 80072ee:	460c      	mov	r4, r1
 80072f0:	4618      	mov	r0, r3
 80072f2:	4621      	mov	r1, r4
 80072f4:	f7f9 fc90 	bl	8000c18 <__aeabi_d2f>
 80072f8:	4602      	mov	r2, r0
 80072fa:	4b4b      	ldr	r3, [pc, #300]	; (8007428 <cppLoop+0x8f0>)
 80072fc:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80072fe:	2200      	movs	r2, #0
 8007300:	f04f 31ff 	mov.w	r1, #4294967295
 8007304:	4846      	ldr	r0, [pc, #280]	; (8007420 <cppLoop+0x8e8>)
 8007306:	f7fa feb5 	bl	8002074 <_ZN3LED2LREaa>
		break;
 800730a:	f000 bcef 	b.w	8007cec <cppLoop+0x11b4>
		else if(joy_stick.getValue() == JOY_C){
 800730e:	4848      	ldr	r0, [pc, #288]	; (8007430 <cppLoop+0x8f8>)
 8007310:	f7fa fd90 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007314:	4603      	mov	r3, r0
 8007316:	2b02      	cmp	r3, #2
 8007318:	bf0c      	ite	eq
 800731a:	2301      	moveq	r3, #1
 800731c:	2300      	movne	r3, #0
 800731e:	b2db      	uxtb	r3, r3
 8007320:	2b00      	cmp	r3, #0
 8007322:	f000 84e3 	beq.w	8007cec <cppLoop+0x11b4>
			led.LR(-1, 1);
 8007326:	2201      	movs	r2, #1
 8007328:	f04f 31ff 	mov.w	r1, #4294967295
 800732c:	483c      	ldr	r0, [pc, #240]	; (8007420 <cppLoop+0x8e8>)
 800732e:	f7fa fea1 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007332:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007336:	f000 fe15 	bl	8007f64 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
 800733a:	2300      	movs	r3, #0
 800733c:	9300      	str	r3, [sp, #0]
 800733e:	4b3a      	ldr	r3, [pc, #232]	; (8007428 <cppLoop+0x8f0>)
 8007340:	2201      	movs	r2, #1
 8007342:	493e      	ldr	r1, [pc, #248]	; (800743c <cppLoop+0x904>)
 8007344:	483e      	ldr	r0, [pc, #248]	; (8007440 <cppLoop+0x908>)
 8007346:	f7fa f95d 	bl	8001604 <sd_write_array_float>
			line_trace.setTargetVelocity(adj_velocity);
 800734a:	4b37      	ldr	r3, [pc, #220]	; (8007428 <cppLoop+0x8f0>)
 800734c:	edd3 7a00 	vldr	s15, [r3]
 8007350:	eeb0 0a67 	vmov.f32	s0, s15
 8007354:	4837      	ldr	r0, [pc, #220]	; (8007434 <cppLoop+0x8fc>)
 8007356:	f7fb ffec 	bl	8003332 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(-1, 0);
 800735a:	2200      	movs	r2, #0
 800735c:	f04f 31ff 	mov.w	r1, #4294967295
 8007360:	482f      	ldr	r0, [pc, #188]	; (8007420 <cppLoop+0x8e8>)
 8007362:	f7fa fe87 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8007366:	f000 bcc1 	b.w	8007cec <cppLoop+0x11b4>

	case 3:
		led.fullColor('Y');
 800736a:	2159      	movs	r1, #89	; 0x59
 800736c:	482c      	ldr	r0, [pc, #176]	; (8007420 <cppLoop+0x8e8>)
 800736e:	f7fa fdc5 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007372:	f7f9 fe95 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007376:	2100      	movs	r1, #0
 8007378:	2000      	movs	r0, #0
 800737a:	f7f9 fea1 	bl	80010c0 <lcd_locate>
		lcd_printf("SeconRun");
 800737e:	4831      	ldr	r0, [pc, #196]	; (8007444 <cppLoop+0x90c>)
 8007380:	f7f9 fec8 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007384:	2101      	movs	r1, #1
 8007386:	2000      	movs	r0, #0
 8007388:	f7f9 fe9a 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 800738c:	4b2e      	ldr	r3, [pc, #184]	; (8007448 <cppLoop+0x910>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4618      	mov	r0, r3
 8007392:	f7f9 f8f1 	bl	8000578 <__aeabi_f2d>
 8007396:	4603      	mov	r3, r0
 8007398:	460c      	mov	r4, r1
 800739a:	461a      	mov	r2, r3
 800739c:	4623      	mov	r3, r4
 800739e:	4823      	ldr	r0, [pc, #140]	; (800742c <cppLoop+0x8f4>)
 80073a0:	f7f9 feb8 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80073a4:	4822      	ldr	r0, [pc, #136]	; (8007430 <cppLoop+0x8f8>)
 80073a6:	f7fa fd45 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b02      	cmp	r3, #2
 80073ae:	bf0c      	ite	eq
 80073b0:	2301      	moveq	r3, #1
 80073b2:	2300      	movne	r3, #0
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	f000 849a 	beq.w	8007cf0 <cppLoop+0x11b8>
			HAL_Delay(500);
 80073bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80073c0:	f000 fdd0 	bl	8007f64 <HAL_Delay>

			led.LR(1, -1);
 80073c4:	f04f 32ff 	mov.w	r2, #4294967295
 80073c8:	2101      	movs	r1, #1
 80073ca:	4815      	ldr	r0, [pc, #84]	; (8007420 <cppLoop+0x8e8>)
 80073cc:	f7fa fe52 	bl	8002074 <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 80073d0:	2101      	movs	r1, #1
 80073d2:	4818      	ldr	r0, [pc, #96]	; (8007434 <cppLoop+0x8fc>)
 80073d4:	f7fc fa2c 	bl	8003830 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity);
 80073d8:	4b1b      	ldr	r3, [pc, #108]	; (8007448 <cppLoop+0x910>)
 80073da:	edd3 7a00 	vldr	s15, [r3]
 80073de:	eeb0 0a67 	vmov.f32	s0, s15
 80073e2:	4814      	ldr	r0, [pc, #80]	; (8007434 <cppLoop+0x8fc>)
 80073e4:	f7fb ffa5 	bl	8003332 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 80073e8:	4b17      	ldr	r3, [pc, #92]	; (8007448 <cppLoop+0x910>)
 80073ea:	edd3 7a00 	vldr	s15, [r3]
 80073ee:	eeb0 0a67 	vmov.f32	s0, s15
 80073f2:	4810      	ldr	r0, [pc, #64]	; (8007434 <cppLoop+0x8fc>)
 80073f4:	f7fb ffac 	bl	8003350 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.createVelocityTabele();
 80073f8:	480e      	ldr	r0, [pc, #56]	; (8007434 <cppLoop+0x8fc>)
 80073fa:	f7fb fcd9 	bl	8002db0 <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 80073fe:	480d      	ldr	r0, [pc, #52]	; (8007434 <cppLoop+0x8fc>)
 8007400:	f7fc f918 	bl	8003634 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8007404:	f04f 32ff 	mov.w	r2, #4294967295
 8007408:	2100      	movs	r1, #0
 800740a:	4805      	ldr	r0, [pc, #20]	; (8007420 <cppLoop+0x8e8>)
 800740c:	f7fa fe32 	bl	8002074 <_ZN3LED2LREaa>
		}

		break;
 8007410:	f000 bc6e 	b.w	8007cf0 <cppLoop+0x11b8>
 8007414:	f3af 8000 	nop.w
 8007418:	9999999a 	.word	0x9999999a
 800741c:	3fb99999 	.word	0x3fb99999
 8007420:	200005cc 	.word	0x200005cc
 8007424:	08018224 	.word	0x08018224
 8007428:	2003c440 	.word	0x2003c440
 800742c:	08018230 	.word	0x08018230
 8007430:	200005c0 	.word	0x200005c0
 8007434:	20017da0 	.word	0x20017da0
 8007438:	0801823c 	.word	0x0801823c
 800743c:	08018248 	.word	0x08018248
 8007440:	0801820c 	.word	0x0801820c
 8007444:	08018254 	.word	0x08018254
 8007448:	2003c448 	.word	0x2003c448

	case 4:
		led.fullColor('G');
 800744c:	2147      	movs	r1, #71	; 0x47
 800744e:	48be      	ldr	r0, [pc, #760]	; (8007748 <cppLoop+0xc10>)
 8007450:	f7fa fd54 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007454:	f7f9 fe24 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007458:	2100      	movs	r1, #0
 800745a:	2000      	movs	r0, #0
 800745c:	f7f9 fe30 	bl	80010c0 <lcd_locate>
		lcd_printf("SeconRun");
 8007460:	48ba      	ldr	r0, [pc, #744]	; (800774c <cppLoop+0xc14>)
 8007462:	f7f9 fe57 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007466:	2101      	movs	r1, #1
 8007468:	2000      	movs	r0, #0
 800746a:	f7f9 fe29 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMaxVelocity());
 800746e:	48b8      	ldr	r0, [pc, #736]	; (8007750 <cppLoop+0xc18>)
 8007470:	f7fb ff9c 	bl	80033ac <_ZN9LineTrace14getMaxVelocityEv>
 8007474:	ee10 3a10 	vmov	r3, s0
 8007478:	4618      	mov	r0, r3
 800747a:	f7f9 f87d 	bl	8000578 <__aeabi_f2d>
 800747e:	4603      	mov	r3, r0
 8007480:	460c      	mov	r4, r1
 8007482:	461a      	mov	r2, r3
 8007484:	4623      	mov	r3, r4
 8007486:	48b3      	ldr	r0, [pc, #716]	; (8007754 <cppLoop+0xc1c>)
 8007488:	f7f9 fe44 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_R){
 800748c:	48b2      	ldr	r0, [pc, #712]	; (8007758 <cppLoop+0xc20>)
 800748e:	f7fa fcd1 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007492:	4603      	mov	r3, r0
 8007494:	2b10      	cmp	r3, #16
 8007496:	bf0c      	ite	eq
 8007498:	2301      	moveq	r3, #1
 800749a:	2300      	movne	r3, #0
 800749c:	b2db      	uxtb	r3, r3
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d023      	beq.n	80074ea <cppLoop+0x9b2>
			led.LR(-1, 1);
 80074a2:	2201      	movs	r2, #1
 80074a4:	f04f 31ff 	mov.w	r1, #4294967295
 80074a8:	48a7      	ldr	r0, [pc, #668]	; (8007748 <cppLoop+0xc10>)
 80074aa:	f7fa fde3 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80074ae:	2064      	movs	r0, #100	; 0x64
 80074b0:	f000 fd58 	bl	8007f64 <HAL_Delay>

			adj_max_velocity = adj_max_velocity + 0.1;
 80074b4:	4ba9      	ldr	r3, [pc, #676]	; (800775c <cppLoop+0xc24>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4618      	mov	r0, r3
 80074ba:	f7f9 f85d 	bl	8000578 <__aeabi_f2d>
 80074be:	a3a0      	add	r3, pc, #640	; (adr r3, 8007740 <cppLoop+0xc08>)
 80074c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c4:	f7f8 fefa 	bl	80002bc <__adddf3>
 80074c8:	4603      	mov	r3, r0
 80074ca:	460c      	mov	r4, r1
 80074cc:	4618      	mov	r0, r3
 80074ce:	4621      	mov	r1, r4
 80074d0:	f7f9 fba2 	bl	8000c18 <__aeabi_d2f>
 80074d4:	4602      	mov	r2, r0
 80074d6:	4ba1      	ldr	r3, [pc, #644]	; (800775c <cppLoop+0xc24>)
 80074d8:	601a      	str	r2, [r3, #0]

			led.LR(-1, 0);
 80074da:	2200      	movs	r2, #0
 80074dc:	f04f 31ff 	mov.w	r1, #4294967295
 80074e0:	4899      	ldr	r0, [pc, #612]	; (8007748 <cppLoop+0xc10>)
 80074e2:	f7fa fdc7 	bl	8002074 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
			line_trace.setMaxVelocity(adj_max_velocity);

			led.LR(-1, 0);
		}
		break;
 80074e6:	f000 bc05 	b.w	8007cf4 <cppLoop+0x11bc>
		else if(joy_stick.getValue() == JOY_L){
 80074ea:	489b      	ldr	r0, [pc, #620]	; (8007758 <cppLoop+0xc20>)
 80074ec:	f7fa fca2 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	bf0c      	ite	eq
 80074f6:	2301      	moveq	r3, #1
 80074f8:	2300      	movne	r3, #0
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d022      	beq.n	8007546 <cppLoop+0xa0e>
			led.LR(-1, 1);
 8007500:	2201      	movs	r2, #1
 8007502:	f04f 31ff 	mov.w	r1, #4294967295
 8007506:	4890      	ldr	r0, [pc, #576]	; (8007748 <cppLoop+0xc10>)
 8007508:	f7fa fdb4 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 800750c:	2064      	movs	r0, #100	; 0x64
 800750e:	f000 fd29 	bl	8007f64 <HAL_Delay>
			adj_max_velocity = adj_max_velocity - 0.1;
 8007512:	4b92      	ldr	r3, [pc, #584]	; (800775c <cppLoop+0xc24>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4618      	mov	r0, r3
 8007518:	f7f9 f82e 	bl	8000578 <__aeabi_f2d>
 800751c:	a388      	add	r3, pc, #544	; (adr r3, 8007740 <cppLoop+0xc08>)
 800751e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007522:	f7f8 fec9 	bl	80002b8 <__aeabi_dsub>
 8007526:	4603      	mov	r3, r0
 8007528:	460c      	mov	r4, r1
 800752a:	4618      	mov	r0, r3
 800752c:	4621      	mov	r1, r4
 800752e:	f7f9 fb73 	bl	8000c18 <__aeabi_d2f>
 8007532:	4602      	mov	r2, r0
 8007534:	4b89      	ldr	r3, [pc, #548]	; (800775c <cppLoop+0xc24>)
 8007536:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8007538:	2200      	movs	r2, #0
 800753a:	f04f 31ff 	mov.w	r1, #4294967295
 800753e:	4882      	ldr	r0, [pc, #520]	; (8007748 <cppLoop+0xc10>)
 8007540:	f7fa fd98 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8007544:	e3d6      	b.n	8007cf4 <cppLoop+0x11bc>
		else if(joy_stick.getValue() == JOY_C){
 8007546:	4884      	ldr	r0, [pc, #528]	; (8007758 <cppLoop+0xc20>)
 8007548:	f7fa fc74 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 800754c:	4603      	mov	r3, r0
 800754e:	2b02      	cmp	r3, #2
 8007550:	bf0c      	ite	eq
 8007552:	2301      	moveq	r3, #1
 8007554:	2300      	movne	r3, #0
 8007556:	b2db      	uxtb	r3, r3
 8007558:	2b00      	cmp	r3, #0
 800755a:	f000 83cb 	beq.w	8007cf4 <cppLoop+0x11bc>
			led.LR(-1, 1);
 800755e:	2201      	movs	r2, #1
 8007560:	f04f 31ff 	mov.w	r1, #4294967295
 8007564:	4878      	ldr	r0, [pc, #480]	; (8007748 <cppLoop+0xc10>)
 8007566:	f7fa fd85 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 800756a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800756e:	f000 fcf9 	bl	8007f64 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
 8007572:	2300      	movs	r3, #0
 8007574:	9300      	str	r3, [sp, #0]
 8007576:	4b79      	ldr	r3, [pc, #484]	; (800775c <cppLoop+0xc24>)
 8007578:	2201      	movs	r2, #1
 800757a:	4979      	ldr	r1, [pc, #484]	; (8007760 <cppLoop+0xc28>)
 800757c:	4879      	ldr	r0, [pc, #484]	; (8007764 <cppLoop+0xc2c>)
 800757e:	f7fa f841 	bl	8001604 <sd_write_array_float>
			line_trace.setMaxVelocity(adj_max_velocity);
 8007582:	4b76      	ldr	r3, [pc, #472]	; (800775c <cppLoop+0xc24>)
 8007584:	edd3 7a00 	vldr	s15, [r3]
 8007588:	eeb0 0a67 	vmov.f32	s0, s15
 800758c:	4870      	ldr	r0, [pc, #448]	; (8007750 <cppLoop+0xc18>)
 800758e:	f7fb fedf 	bl	8003350 <_ZN9LineTrace14setMaxVelocityEf>
			led.LR(-1, 0);
 8007592:	2200      	movs	r2, #0
 8007594:	f04f 31ff 	mov.w	r1, #4294967295
 8007598:	486b      	ldr	r0, [pc, #428]	; (8007748 <cppLoop+0xc10>)
 800759a:	f7fa fd6b 	bl	8002074 <_ZN3LED2LREaa>
		break;
 800759e:	e3a9      	b.n	8007cf4 <cppLoop+0x11bc>

	case 5:
		led.fullColor('M');
 80075a0:	214d      	movs	r1, #77	; 0x4d
 80075a2:	4869      	ldr	r0, [pc, #420]	; (8007748 <cppLoop+0xc10>)
 80075a4:	f7fa fcaa 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 80075a8:	f7f9 fd7a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80075ac:	2100      	movs	r1, #0
 80075ae:	2000      	movs	r0, #0
 80075b0:	f7f9 fd86 	bl	80010c0 <lcd_locate>
		lcd_printf("ThirdRun");
 80075b4:	486c      	ldr	r0, [pc, #432]	; (8007768 <cppLoop+0xc30>)
 80075b6:	f7f9 fdad 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80075ba:	2101      	movs	r1, #1
 80075bc:	2000      	movs	r0, #0
 80075be:	f7f9 fd7f 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 80075c2:	4b6a      	ldr	r3, [pc, #424]	; (800776c <cppLoop+0xc34>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4618      	mov	r0, r3
 80075c8:	f7f8 ffd6 	bl	8000578 <__aeabi_f2d>
 80075cc:	4603      	mov	r3, r0
 80075ce:	460c      	mov	r4, r1
 80075d0:	461a      	mov	r2, r3
 80075d2:	4623      	mov	r3, r4
 80075d4:	4866      	ldr	r0, [pc, #408]	; (8007770 <cppLoop+0xc38>)
 80075d6:	f7f9 fd9d 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80075da:	485f      	ldr	r0, [pc, #380]	; (8007758 <cppLoop+0xc20>)
 80075dc:	f7fa fc2a 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80075e0:	4603      	mov	r3, r0
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	bf0c      	ite	eq
 80075e6:	2301      	moveq	r3, #1
 80075e8:	2300      	movne	r3, #0
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	f000 8383 	beq.w	8007cf8 <cppLoop+0x11c0>
			HAL_Delay(500);
 80075f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80075f6:	f000 fcb5 	bl	8007f64 <HAL_Delay>

			led.LR(1, -1);
 80075fa:	f04f 32ff 	mov.w	r2, #4294967295
 80075fe:	2101      	movs	r1, #1
 8007600:	4851      	ldr	r0, [pc, #324]	; (8007748 <cppLoop+0xc10>)
 8007602:	f7fa fd37 	bl	8002074 <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 8007606:	2102      	movs	r1, #2
 8007608:	4851      	ldr	r0, [pc, #324]	; (8007750 <cppLoop+0xc18>)
 800760a:	f7fc f911 	bl	8003830 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 800760e:	4b57      	ldr	r3, [pc, #348]	; (800776c <cppLoop+0xc34>)
 8007610:	edd3 7a00 	vldr	s15, [r3]
 8007614:	eeb0 0a67 	vmov.f32	s0, s15
 8007618:	484d      	ldr	r0, [pc, #308]	; (8007750 <cppLoop+0xc18>)
 800761a:	f7fb fe8a 	bl	8003332 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 800761e:	4b53      	ldr	r3, [pc, #332]	; (800776c <cppLoop+0xc34>)
 8007620:	edd3 7a00 	vldr	s15, [r3]
 8007624:	eeb0 0a67 	vmov.f32	s0, s15
 8007628:	4849      	ldr	r0, [pc, #292]	; (8007750 <cppLoop+0xc18>)
 800762a:	f7fb fea0 	bl	800336e <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.createVelocityTabele();
 800762e:	4848      	ldr	r0, [pc, #288]	; (8007750 <cppLoop+0xc18>)
 8007630:	f7fb fbbe 	bl	8002db0 <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 8007634:	4846      	ldr	r0, [pc, #280]	; (8007750 <cppLoop+0xc18>)
 8007636:	f7fb fffd 	bl	8003634 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 800763a:	f04f 32ff 	mov.w	r2, #4294967295
 800763e:	2100      	movs	r1, #0
 8007640:	4841      	ldr	r0, [pc, #260]	; (8007748 <cppLoop+0xc10>)
 8007642:	f7fa fd17 	bl	8002074 <_ZN3LED2LREaa>
		}

		break;
 8007646:	e357      	b.n	8007cf8 <cppLoop+0x11c0>

	case 6:
		led.fullColor('R');
 8007648:	2152      	movs	r1, #82	; 0x52
 800764a:	483f      	ldr	r0, [pc, #252]	; (8007748 <cppLoop+0xc10>)
 800764c:	f7fa fc56 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007650:	f7f9 fd26 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007654:	2100      	movs	r1, #0
 8007656:	2000      	movs	r0, #0
 8007658:	f7f9 fd32 	bl	80010c0 <lcd_locate>
		lcd_printf("ThirdRun");
 800765c:	4842      	ldr	r0, [pc, #264]	; (8007768 <cppLoop+0xc30>)
 800765e:	f7f9 fd59 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007662:	2101      	movs	r1, #1
 8007664:	2000      	movs	r0, #0
 8007666:	f7f9 fd2b 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMaxVelocity2());
 800766a:	4839      	ldr	r0, [pc, #228]	; (8007750 <cppLoop+0xc18>)
 800766c:	f7fb fead 	bl	80033ca <_ZN9LineTrace15getMaxVelocity2Ev>
 8007670:	ee10 3a10 	vmov	r3, s0
 8007674:	4618      	mov	r0, r3
 8007676:	f7f8 ff7f 	bl	8000578 <__aeabi_f2d>
 800767a:	4603      	mov	r3, r0
 800767c:	460c      	mov	r4, r1
 800767e:	461a      	mov	r2, r3
 8007680:	4623      	mov	r3, r4
 8007682:	4834      	ldr	r0, [pc, #208]	; (8007754 <cppLoop+0xc1c>)
 8007684:	f7f9 fd46 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_R){
 8007688:	4833      	ldr	r0, [pc, #204]	; (8007758 <cppLoop+0xc20>)
 800768a:	f7fa fbd3 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 800768e:	4603      	mov	r3, r0
 8007690:	2b10      	cmp	r3, #16
 8007692:	bf0c      	ite	eq
 8007694:	2301      	moveq	r3, #1
 8007696:	2300      	movne	r3, #0
 8007698:	b2db      	uxtb	r3, r3
 800769a:	2b00      	cmp	r3, #0
 800769c:	d022      	beq.n	80076e4 <cppLoop+0xbac>
			led.LR(-1, 1);
 800769e:	2201      	movs	r2, #1
 80076a0:	f04f 31ff 	mov.w	r1, #4294967295
 80076a4:	4828      	ldr	r0, [pc, #160]	; (8007748 <cppLoop+0xc10>)
 80076a6:	f7fa fce5 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80076aa:	2064      	movs	r0, #100	; 0x64
 80076ac:	f000 fc5a 	bl	8007f64 <HAL_Delay>

			adj_max_velocity2 = adj_max_velocity2 + 0.1;
 80076b0:	4b2e      	ldr	r3, [pc, #184]	; (800776c <cppLoop+0xc34>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4618      	mov	r0, r3
 80076b6:	f7f8 ff5f 	bl	8000578 <__aeabi_f2d>
 80076ba:	a321      	add	r3, pc, #132	; (adr r3, 8007740 <cppLoop+0xc08>)
 80076bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c0:	f7f8 fdfc 	bl	80002bc <__adddf3>
 80076c4:	4603      	mov	r3, r0
 80076c6:	460c      	mov	r4, r1
 80076c8:	4618      	mov	r0, r3
 80076ca:	4621      	mov	r1, r4
 80076cc:	f7f9 faa4 	bl	8000c18 <__aeabi_d2f>
 80076d0:	4602      	mov	r2, r0
 80076d2:	4b26      	ldr	r3, [pc, #152]	; (800776c <cppLoop+0xc34>)
 80076d4:	601a      	str	r2, [r3, #0]

			led.LR(-1, 0);
 80076d6:	2200      	movs	r2, #0
 80076d8:	f04f 31ff 	mov.w	r1, #4294967295
 80076dc:	481a      	ldr	r0, [pc, #104]	; (8007748 <cppLoop+0xc10>)
 80076de:	f7fa fcc9 	bl	8002074 <_ZN3LED2LREaa>
			line_trace.setMaxVelocity2(adj_max_velocity2);

			led.LR(-1, 0);
		}

		break;
 80076e2:	e30b      	b.n	8007cfc <cppLoop+0x11c4>
		else if(joy_stick.getValue() == JOY_L){
 80076e4:	481c      	ldr	r0, [pc, #112]	; (8007758 <cppLoop+0xc20>)
 80076e6:	f7fa fba5 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80076ea:	4603      	mov	r3, r0
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	bf0c      	ite	eq
 80076f0:	2301      	moveq	r3, #1
 80076f2:	2300      	movne	r3, #0
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d03c      	beq.n	8007774 <cppLoop+0xc3c>
			led.LR(-1, 1);
 80076fa:	2201      	movs	r2, #1
 80076fc:	f04f 31ff 	mov.w	r1, #4294967295
 8007700:	4811      	ldr	r0, [pc, #68]	; (8007748 <cppLoop+0xc10>)
 8007702:	f7fa fcb7 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007706:	2064      	movs	r0, #100	; 0x64
 8007708:	f000 fc2c 	bl	8007f64 <HAL_Delay>
			adj_max_velocity2 = adj_max_velocity2 - 0.1;
 800770c:	4b17      	ldr	r3, [pc, #92]	; (800776c <cppLoop+0xc34>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4618      	mov	r0, r3
 8007712:	f7f8 ff31 	bl	8000578 <__aeabi_f2d>
 8007716:	a30a      	add	r3, pc, #40	; (adr r3, 8007740 <cppLoop+0xc08>)
 8007718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800771c:	f7f8 fdcc 	bl	80002b8 <__aeabi_dsub>
 8007720:	4603      	mov	r3, r0
 8007722:	460c      	mov	r4, r1
 8007724:	4618      	mov	r0, r3
 8007726:	4621      	mov	r1, r4
 8007728:	f7f9 fa76 	bl	8000c18 <__aeabi_d2f>
 800772c:	4602      	mov	r2, r0
 800772e:	4b0f      	ldr	r3, [pc, #60]	; (800776c <cppLoop+0xc34>)
 8007730:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8007732:	2200      	movs	r2, #0
 8007734:	f04f 31ff 	mov.w	r1, #4294967295
 8007738:	4803      	ldr	r0, [pc, #12]	; (8007748 <cppLoop+0xc10>)
 800773a:	f7fa fc9b 	bl	8002074 <_ZN3LED2LREaa>
		break;
 800773e:	e2dd      	b.n	8007cfc <cppLoop+0x11c4>
 8007740:	9999999a 	.word	0x9999999a
 8007744:	3fb99999 	.word	0x3fb99999
 8007748:	200005cc 	.word	0x200005cc
 800774c:	08018254 	.word	0x08018254
 8007750:	20017da0 	.word	0x20017da0
 8007754:	0801823c 	.word	0x0801823c
 8007758:	200005c0 	.word	0x200005c0
 800775c:	2003c448 	.word	0x2003c448
 8007760:	08018260 	.word	0x08018260
 8007764:	0801820c 	.word	0x0801820c
 8007768:	0801826c 	.word	0x0801826c
 800776c:	2003c450 	.word	0x2003c450
 8007770:	08018230 	.word	0x08018230
		else if(joy_stick.getValue() == JOY_C){
 8007774:	48ca      	ldr	r0, [pc, #808]	; (8007aa0 <cppLoop+0xf68>)
 8007776:	f7fa fb5d 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 800777a:	4603      	mov	r3, r0
 800777c:	2b02      	cmp	r3, #2
 800777e:	bf0c      	ite	eq
 8007780:	2301      	moveq	r3, #1
 8007782:	2300      	movne	r3, #0
 8007784:	b2db      	uxtb	r3, r3
 8007786:	2b00      	cmp	r3, #0
 8007788:	f000 82b8 	beq.w	8007cfc <cppLoop+0x11c4>
			led.LR(-1, 1);
 800778c:	2201      	movs	r2, #1
 800778e:	f04f 31ff 	mov.w	r1, #4294967295
 8007792:	48c4      	ldr	r0, [pc, #784]	; (8007aa4 <cppLoop+0xf6c>)
 8007794:	f7fa fc6e 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007798:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800779c:	f000 fbe2 	bl	8007f64 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL3.TXT", 1, &adj_max_velocity2, OVER_WRITE);
 80077a0:	2300      	movs	r3, #0
 80077a2:	9300      	str	r3, [sp, #0]
 80077a4:	4bc0      	ldr	r3, [pc, #768]	; (8007aa8 <cppLoop+0xf70>)
 80077a6:	2201      	movs	r2, #1
 80077a8:	49c0      	ldr	r1, [pc, #768]	; (8007aac <cppLoop+0xf74>)
 80077aa:	48c1      	ldr	r0, [pc, #772]	; (8007ab0 <cppLoop+0xf78>)
 80077ac:	f7f9 ff2a 	bl	8001604 <sd_write_array_float>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 80077b0:	4bbd      	ldr	r3, [pc, #756]	; (8007aa8 <cppLoop+0xf70>)
 80077b2:	edd3 7a00 	vldr	s15, [r3]
 80077b6:	eeb0 0a67 	vmov.f32	s0, s15
 80077ba:	48be      	ldr	r0, [pc, #760]	; (8007ab4 <cppLoop+0xf7c>)
 80077bc:	f7fb fdd7 	bl	800336e <_ZN9LineTrace15setMaxVelocity2Ef>
			led.LR(-1, 0);
 80077c0:	2200      	movs	r2, #0
 80077c2:	f04f 31ff 	mov.w	r1, #4294967295
 80077c6:	48b7      	ldr	r0, [pc, #732]	; (8007aa4 <cppLoop+0xf6c>)
 80077c8:	f7fa fc54 	bl	8002074 <_ZN3LED2LREaa>
		break;
 80077cc:	e296      	b.n	8007cfc <cppLoop+0x11c4>

	case 7:
		led.fullColor('~');
 80077ce:	217e      	movs	r1, #126	; 0x7e
 80077d0:	48b4      	ldr	r0, [pc, #720]	; (8007aa4 <cppLoop+0xf6c>)
 80077d2:	f7fa fb93 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 80077d6:	f7f9 fc63 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80077da:	2100      	movs	r1, #0
 80077dc:	2000      	movs	r0, #0
 80077de:	f7f9 fc6f 	bl	80010c0 <lcd_locate>
		lcd_printf("07      ");
 80077e2:	48b5      	ldr	r0, [pc, #724]	; (8007ab8 <cppLoop+0xf80>)
 80077e4:	f7f9 fc96 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80077e8:	2101      	movs	r1, #1
 80077ea:	2000      	movs	r0, #0
 80077ec:	f7f9 fc68 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 80077f0:	48b2      	ldr	r0, [pc, #712]	; (8007abc <cppLoop+0xf84>)
 80077f2:	f7f9 fc8f 	bl	8001114 <lcd_printf>
		break;
 80077f6:	e290      	b.n	8007d1a <cppLoop+0x11e2>

	case 8:
		led.fullColor('~');
 80077f8:	217e      	movs	r1, #126	; 0x7e
 80077fa:	48aa      	ldr	r0, [pc, #680]	; (8007aa4 <cppLoop+0xf6c>)
 80077fc:	f7fa fb7e 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007800:	f7f9 fc4e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007804:	2100      	movs	r1, #0
 8007806:	2000      	movs	r0, #0
 8007808:	f7f9 fc5a 	bl	80010c0 <lcd_locate>
		lcd_printf("08      ");
 800780c:	48ac      	ldr	r0, [pc, #688]	; (8007ac0 <cppLoop+0xf88>)
 800780e:	f7f9 fc81 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007812:	2101      	movs	r1, #1
 8007814:	2000      	movs	r0, #0
 8007816:	f7f9 fc53 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 800781a:	48a8      	ldr	r0, [pc, #672]	; (8007abc <cppLoop+0xf84>)
 800781c:	f7f9 fc7a 	bl	8001114 <lcd_printf>

		break;
 8007820:	e27b      	b.n	8007d1a <cppLoop+0x11e2>

	case 9:
		led.fullColor('~');
 8007822:	217e      	movs	r1, #126	; 0x7e
 8007824:	489f      	ldr	r0, [pc, #636]	; (8007aa4 <cppLoop+0xf6c>)
 8007826:	f7fa fb69 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 800782a:	f7f9 fc39 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800782e:	2100      	movs	r1, #0
 8007830:	2000      	movs	r0, #0
 8007832:	f7f9 fc45 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 8007836:	48a3      	ldr	r0, [pc, #652]	; (8007ac4 <cppLoop+0xf8c>)
 8007838:	f7f9 fc6c 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800783c:	2101      	movs	r1, #1
 800783e:	2000      	movs	r0, #0
 8007840:	f7f9 fc3e 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 8007844:	48a0      	ldr	r0, [pc, #640]	; (8007ac8 <cppLoop+0xf90>)
 8007846:	f7f9 fc65 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800784a:	4895      	ldr	r0, [pc, #596]	; (8007aa0 <cppLoop+0xf68>)
 800784c:	f7fa faf2 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007850:	4603      	mov	r3, r0
 8007852:	2b02      	cmp	r3, #2
 8007854:	bf0c      	ite	eq
 8007856:	2301      	moveq	r3, #1
 8007858:	2300      	movne	r3, #0
 800785a:	b2db      	uxtb	r3, r3
 800785c:	2b00      	cmp	r3, #0
 800785e:	f000 824f 	beq.w	8007d00 <cppLoop+0x11c8>
			led.LR(-1, 1);
 8007862:	2201      	movs	r2, #1
 8007864:	f04f 31ff 	mov.w	r1, #4294967295
 8007868:	488e      	ldr	r0, [pc, #568]	; (8007aa4 <cppLoop+0xf6c>)
 800786a:	f7fa fc03 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(500);
 800786e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007872:	f000 fb77 	bl	8007f64 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 8007876:	ed9f 0a95 	vldr	s0, [pc, #596]	; 8007acc <cppLoop+0xf94>
 800787a:	488e      	ldr	r0, [pc, #568]	; (8007ab4 <cppLoop+0xf7c>)
 800787c:	f7fb fd4a 	bl	8003314 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8007880:	488c      	ldr	r0, [pc, #560]	; (8007ab4 <cppLoop+0xf7c>)
 8007882:	f7fb fe49 	bl	8003518 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 8007886:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800788a:	f000 fb6b 	bl	8007f64 <HAL_Delay>

			led.fullColor('R');
 800788e:	2152      	movs	r1, #82	; 0x52
 8007890:	4884      	ldr	r0, [pc, #528]	; (8007aa4 <cppLoop+0xf6c>)
 8007892:	f7fa fb33 	bl	8001efc <_ZN3LED9fullColorEc>
			encoder.clearDistance10mm();
 8007896:	488e      	ldr	r0, [pc, #568]	; (8007ad0 <cppLoop+0xf98>)
 8007898:	f7f9 fe06 	bl	80014a8 <_ZN7Encoder17clearDistance10mmEv>
			//encoder.clearDistance();

			HAL_Delay(10000);
 800789c:	f242 7010 	movw	r0, #10000	; 0x2710
 80078a0:	f000 fb60 	bl	8007f64 <HAL_Delay>

			line_trace.stop();
 80078a4:	4883      	ldr	r0, [pc, #524]	; (8007ab4 <cppLoop+0xf7c>)
 80078a6:	f7fb fe5d 	bl	8003564 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 80078aa:	498a      	ldr	r1, [pc, #552]	; (8007ad4 <cppLoop+0xf9c>)
 80078ac:	488a      	ldr	r0, [pc, #552]	; (8007ad8 <cppLoop+0xfa0>)
 80078ae:	f7f9 fe34 	bl	800151a <user_fopen>
			float d = encoder.getDistance();
 80078b2:	4887      	ldr	r0, [pc, #540]	; (8007ad0 <cppLoop+0xf98>)
 80078b4:	f7f9 fdbc 	bl	8001430 <_ZN7Encoder11getDistanceEv>
 80078b8:	eef0 7a40 	vmov.f32	s15, s0
 80078bc:	edc7 7a00 	vstr	s15, [r7]
			sd_write_float(1, &d, ADD_WRITE);
 80078c0:	463b      	mov	r3, r7
 80078c2:	2201      	movs	r2, #1
 80078c4:	4619      	mov	r1, r3
 80078c6:	2001      	movs	r0, #1
 80078c8:	f7f9 fe4a 	bl	8001560 <sd_write_float>
			user_fclose();
 80078cc:	f7f9 fe38 	bl	8001540 <user_fclose>

			led.LR(-1, 0);
 80078d0:	2200      	movs	r2, #0
 80078d2:	f04f 31ff 	mov.w	r1, #4294967295
 80078d6:	4873      	ldr	r0, [pc, #460]	; (8007aa4 <cppLoop+0xf6c>)
 80078d8:	f7fa fbcc 	bl	8002074 <_ZN3LED2LREaa>
		}
		break;
 80078dc:	e210      	b.n	8007d00 <cppLoop+0x11c8>

	case 10:
		led.fullColor('~');
 80078de:	217e      	movs	r1, #126	; 0x7e
 80078e0:	4870      	ldr	r0, [pc, #448]	; (8007aa4 <cppLoop+0xf6c>)
 80078e2:	f7fa fb0b 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 80078e6:	f7f9 fbdb 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80078ea:	2100      	movs	r1, #0
 80078ec:	2000      	movs	r0, #0
 80078ee:	f7f9 fbe7 	bl	80010c0 <lcd_locate>
		lcd_printf("Create  ");
 80078f2:	487a      	ldr	r0, [pc, #488]	; (8007adc <cppLoop+0xfa4>)
 80078f4:	f7f9 fc0e 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80078f8:	2101      	movs	r1, #1
 80078fa:	2000      	movs	r0, #0
 80078fc:	f7f9 fbe0 	bl	80010c0 <lcd_locate>
		lcd_printf("VelTable");
 8007900:	4877      	ldr	r0, [pc, #476]	; (8007ae0 <cppLoop+0xfa8>)
 8007902:	f7f9 fc07 	bl	8001114 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 8007906:	4866      	ldr	r0, [pc, #408]	; (8007aa0 <cppLoop+0xf68>)
 8007908:	f7fa fa94 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 800790c:	4603      	mov	r3, r0
 800790e:	2b02      	cmp	r3, #2
 8007910:	bf0c      	ite	eq
 8007912:	2301      	moveq	r3, #1
 8007914:	2300      	movne	r3, #0
 8007916:	b2db      	uxtb	r3, r3
 8007918:	2b00      	cmp	r3, #0
 800791a:	f000 81f3 	beq.w	8007d04 <cppLoop+0x11cc>
			HAL_Delay(500);
 800791e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007922:	f000 fb1f 	bl	8007f64 <HAL_Delay>
			led.LR(-1, 1);
 8007926:	2201      	movs	r2, #1
 8007928:	f04f 31ff 	mov.w	r1, #4294967295
 800792c:	485d      	ldr	r0, [pc, #372]	; (8007aa4 <cppLoop+0xf6c>)
 800792e:	f7fa fba1 	bl	8002074 <_ZN3LED2LREaa>

			line_trace.setMode(SECOND_RUNNING);
 8007932:	2101      	movs	r1, #1
 8007934:	485f      	ldr	r0, [pc, #380]	; (8007ab4 <cppLoop+0xf7c>)
 8007936:	f7fb ff7b 	bl	8003830 <_ZN9LineTrace7setModeEs>
			line_trace.createVelocityTabeleFromSD();
 800793a:	485e      	ldr	r0, [pc, #376]	; (8007ab4 <cppLoop+0xf7c>)
 800793c:	f7fb fab6 	bl	8002eac <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			led.LR(-1, 0);
 8007940:	2200      	movs	r2, #0
 8007942:	f04f 31ff 	mov.w	r1, #4294967295
 8007946:	4857      	ldr	r0, [pc, #348]	; (8007aa4 <cppLoop+0xf6c>)
 8007948:	f7fa fb94 	bl	8002074 <_ZN3LED2LREaa>
		}

		break;
 800794c:	e1da      	b.n	8007d04 <cppLoop+0x11cc>

	case 11:
		led.fullColor('~');
 800794e:	217e      	movs	r1, #126	; 0x7e
 8007950:	4854      	ldr	r0, [pc, #336]	; (8007aa4 <cppLoop+0xf6c>)
 8007952:	f7fa fad3 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007956:	f7f9 fba3 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800795a:	2100      	movs	r1, #0
 800795c:	2000      	movs	r0, #0
 800795e:	f7f9 fbaf 	bl	80010c0 <lcd_locate>
		lcd_printf("Step");
 8007962:	4860      	ldr	r0, [pc, #384]	; (8007ae4 <cppLoop+0xfac>)
 8007964:	f7f9 fbd6 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007968:	2101      	movs	r1, #1
 800796a:	2000      	movs	r0, #0
 800796c:	f7f9 fba8 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 8007970:	485d      	ldr	r0, [pc, #372]	; (8007ae8 <cppLoop+0xfb0>)
 8007972:	f7f9 fbcf 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007976:	484a      	ldr	r0, [pc, #296]	; (8007aa0 <cppLoop+0xf68>)
 8007978:	f7fa fa5c 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 800797c:	4603      	mov	r3, r0
 800797e:	2b02      	cmp	r3, #2
 8007980:	bf0c      	ite	eq
 8007982:	2301      	moveq	r3, #1
 8007984:	2300      	movne	r3, #0
 8007986:	b2db      	uxtb	r3, r3
 8007988:	2b00      	cmp	r3, #0
 800798a:	f000 81bd 	beq.w	8007d08 <cppLoop+0x11d0>
			HAL_Delay(1500);
 800798e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8007992:	f000 fae7 	bl	8007f64 <HAL_Delay>
			led.LR(-1, 1);
 8007996:	2201      	movs	r2, #1
 8007998:	f04f 31ff 	mov.w	r1, #4294967295
 800799c:	4841      	ldr	r0, [pc, #260]	; (8007aa4 <cppLoop+0xf6c>)
 800799e:	f7fa fb69 	bl	8002074 <_ZN3LED2LREaa>

			logger.start();
 80079a2:	4852      	ldr	r0, [pc, #328]	; (8007aec <cppLoop+0xfb4>)
 80079a4:	f7fc fa67 	bl	8003e76 <_ZN6Logger5startEv>
			motor.setRatio(0.3, -0.3);
 80079a8:	ed9f 1b37 	vldr	d1, [pc, #220]	; 8007a88 <cppLoop+0xf50>
 80079ac:	ed9f 0b38 	vldr	d0, [pc, #224]	; 8007a90 <cppLoop+0xf58>
 80079b0:	484f      	ldr	r0, [pc, #316]	; (8007af0 <cppLoop+0xfb8>)
 80079b2:	f7fc faf5 	bl	8003fa0 <_ZN5Motor8setRatioEdd>

			HAL_Delay(1000);
 80079b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80079ba:	f000 fad3 	bl	8007f64 <HAL_Delay>

			logger.stop();
 80079be:	484b      	ldr	r0, [pc, #300]	; (8007aec <cppLoop+0xfb4>)
 80079c0:	f7fc fa6a 	bl	8003e98 <_ZN6Logger4stopEv>
			motor.setRatio(0.0, 0.0);
 80079c4:	ed9f 1b34 	vldr	d1, [pc, #208]	; 8007a98 <cppLoop+0xf60>
 80079c8:	ed9f 0b33 	vldr	d0, [pc, #204]	; 8007a98 <cppLoop+0xf60>
 80079cc:	4848      	ldr	r0, [pc, #288]	; (8007af0 <cppLoop+0xfb8>)
 80079ce:	f7fc fae7 	bl	8003fa0 <_ZN5Motor8setRatioEdd>

			logger.saveLogs("SYSIDENT", "STEPRES.txt");
 80079d2:	4a48      	ldr	r2, [pc, #288]	; (8007af4 <cppLoop+0xfbc>)
 80079d4:	4948      	ldr	r1, [pc, #288]	; (8007af8 <cppLoop+0xfc0>)
 80079d6:	4845      	ldr	r0, [pc, #276]	; (8007aec <cppLoop+0xfb4>)
 80079d8:	f7fc f95d 	bl	8003c96 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 80079dc:	2200      	movs	r2, #0
 80079de:	f04f 31ff 	mov.w	r1, #4294967295
 80079e2:	4830      	ldr	r0, [pc, #192]	; (8007aa4 <cppLoop+0xf6c>)
 80079e4:	f7fa fb46 	bl	8002074 <_ZN3LED2LREaa>
		}
		break;
 80079e8:	e18e      	b.n	8007d08 <cppLoop+0x11d0>

	case 12:
		led.fullColor('~');
 80079ea:	217e      	movs	r1, #126	; 0x7e
 80079ec:	482d      	ldr	r0, [pc, #180]	; (8007aa4 <cppLoop+0xf6c>)
 80079ee:	f7fa fa85 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 80079f2:	f7f9 fb55 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80079f6:	2100      	movs	r1, #0
 80079f8:	2000      	movs	r0, #0
 80079fa:	f7f9 fb61 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 80079fe:	483f      	ldr	r0, [pc, #252]	; (8007afc <cppLoop+0xfc4>)
 8007a00:	f7f9 fb88 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007a04:	2101      	movs	r1, #1
 8007a06:	2000      	movs	r0, #0
 8007a08:	f7f9 fb5a 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 8007a0c:	483c      	ldr	r0, [pc, #240]	; (8007b00 <cppLoop+0xfc8>)
 8007a0e:	f7f9 fb81 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007a12:	4823      	ldr	r0, [pc, #140]	; (8007aa0 <cppLoop+0xf68>)
 8007a14:	f7fa fa0e 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2b02      	cmp	r3, #2
 8007a1c:	bf0c      	ite	eq
 8007a1e:	2301      	moveq	r3, #1
 8007a20:	2300      	movne	r3, #0
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	f000 8171 	beq.w	8007d0c <cppLoop+0x11d4>
			HAL_Delay(1500);
 8007a2a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8007a2e:	f000 fa99 	bl	8007f64 <HAL_Delay>
			led.LR(-1, 1);
 8007a32:	2201      	movs	r2, #1
 8007a34:	f04f 31ff 	mov.w	r1, #4294967295
 8007a38:	481a      	ldr	r0, [pc, #104]	; (8007aa4 <cppLoop+0xf6c>)
 8007a3a:	f7fa fb1b 	bl	8002074 <_ZN3LED2LREaa>

			logger.start();
 8007a3e:	482b      	ldr	r0, [pc, #172]	; (8007aec <cppLoop+0xfb4>)
 8007a40:	f7fc fa19 	bl	8003e76 <_ZN6Logger5startEv>
			velocity_ctrl.start();
 8007a44:	482f      	ldr	r0, [pc, #188]	; (8007b04 <cppLoop+0xfcc>)
 8007a46:	f7fd f9ec 	bl	8004e22 <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(1, 0);
 8007a4a:	eddf 0a20 	vldr	s1, [pc, #128]	; 8007acc <cppLoop+0xf94>
 8007a4e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007a52:	482c      	ldr	r0, [pc, #176]	; (8007b04 <cppLoop+0xfcc>)
 8007a54:	f7fd f978 	bl	8004d48 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 8007a58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007a5c:	f000 fa82 	bl	8007f64 <HAL_Delay>

			logger.stop();
 8007a60:	4822      	ldr	r0, [pc, #136]	; (8007aec <cppLoop+0xfb4>)
 8007a62:	f7fc fa19 	bl	8003e98 <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 8007a66:	4827      	ldr	r0, [pc, #156]	; (8007b04 <cppLoop+0xfcc>)
 8007a68:	f7fd f9ee 	bl	8004e48 <_ZN12VelocityCtrl4stopEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 8007a6c:	4a26      	ldr	r2, [pc, #152]	; (8007b08 <cppLoop+0xfd0>)
 8007a6e:	4922      	ldr	r1, [pc, #136]	; (8007af8 <cppLoop+0xfc0>)
 8007a70:	481e      	ldr	r0, [pc, #120]	; (8007aec <cppLoop+0xfb4>)
 8007a72:	f7fc f910 	bl	8003c96 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 8007a76:	2200      	movs	r2, #0
 8007a78:	f04f 31ff 	mov.w	r1, #4294967295
 8007a7c:	4809      	ldr	r0, [pc, #36]	; (8007aa4 <cppLoop+0xf6c>)
 8007a7e:	f7fa faf9 	bl	8002074 <_ZN3LED2LREaa>
		}
		break;
 8007a82:	e143      	b.n	8007d0c <cppLoop+0x11d4>
 8007a84:	f3af 8000 	nop.w
 8007a88:	33333333 	.word	0x33333333
 8007a8c:	bfd33333 	.word	0xbfd33333
 8007a90:	33333333 	.word	0x33333333
 8007a94:	3fd33333 	.word	0x3fd33333
	...
 8007aa0:	200005c0 	.word	0x200005c0
 8007aa4:	200005cc 	.word	0x200005cc
 8007aa8:	2003c450 	.word	0x2003c450
 8007aac:	08018278 	.word	0x08018278
 8007ab0:	0801820c 	.word	0x0801820c
 8007ab4:	20017da0 	.word	0x20017da0
 8007ab8:	08018284 	.word	0x08018284
 8007abc:	08018290 	.word	0x08018290
 8007ac0:	0801829c 	.word	0x0801829c
 8007ac4:	080182a8 	.word	0x080182a8
 8007ac8:	080182b0 	.word	0x080182b0
 8007acc:	00000000 	.word	0x00000000
 8007ad0:	20017d00 	.word	0x20017d00
 8007ad4:	080182bc 	.word	0x080182bc
 8007ad8:	080182c4 	.word	0x080182c4
 8007adc:	080182d0 	.word	0x080182d0
 8007ae0:	080182dc 	.word	0x080182dc
 8007ae4:	080182e8 	.word	0x080182e8
 8007ae8:	080182f0 	.word	0x080182f0
 8007aec:	200005f0 	.word	0x200005f0
 8007af0:	200005c8 	.word	0x200005c8
 8007af4:	080182f8 	.word	0x080182f8
 8007af8:	08018304 	.word	0x08018304
 8007afc:	08018310 	.word	0x08018310
 8007b00:	08018314 	.word	0x08018314
 8007b04:	20017d20 	.word	0x20017d20
 8007b08:	08018320 	.word	0x08018320

	case 13:
		led.fullColor('~');
 8007b0c:	217e      	movs	r1, #126	; 0x7e
 8007b0e:	4886      	ldr	r0, [pc, #536]	; (8007d28 <cppLoop+0x11f0>)
 8007b10:	f7fa f9f4 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007b14:	f7f9 fac4 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007b18:	2100      	movs	r1, #0
 8007b1a:	2000      	movs	r0, #0
 8007b1c:	f7f9 fad0 	bl	80010c0 <lcd_locate>
		lcd_printf("Msig");
 8007b20:	4882      	ldr	r0, [pc, #520]	; (8007d2c <cppLoop+0x11f4>)
 8007b22:	f7f9 faf7 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007b26:	2101      	movs	r1, #1
 8007b28:	2000      	movs	r0, #0
 8007b2a:	f7f9 fac9 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 8007b2e:	4880      	ldr	r0, [pc, #512]	; (8007d30 <cppLoop+0x11f8>)
 8007b30:	f7f9 faf0 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007b34:	487f      	ldr	r0, [pc, #508]	; (8007d34 <cppLoop+0x11fc>)
 8007b36:	f7fa f97d 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	2b02      	cmp	r3, #2
 8007b3e:	bf0c      	ite	eq
 8007b40:	2301      	moveq	r3, #1
 8007b42:	2300      	movne	r3, #0
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	f000 80e2 	beq.w	8007d10 <cppLoop+0x11d8>
			led.LR(-1, 1);
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	f04f 31ff 	mov.w	r1, #4294967295
 8007b52:	4875      	ldr	r0, [pc, #468]	; (8007d28 <cppLoop+0x11f0>)
 8007b54:	f7fa fa8e 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(1500);
 8007b58:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8007b5c:	f000 fa02 	bl	8007f64 <HAL_Delay>

			sys_ident.setInputRatio(0.3);
 8007b60:	ed9f 0a75 	vldr	s0, [pc, #468]	; 8007d38 <cppLoop+0x1200>
 8007b64:	4875      	ldr	r0, [pc, #468]	; (8007d3c <cppLoop+0x1204>)
 8007b66:	f7fc ff7b 	bl	8004a60 <_ZN20SystemIdentification13setInputRatioEf>
			sys_ident.start();
 8007b6a:	4874      	ldr	r0, [pc, #464]	; (8007d3c <cppLoop+0x1204>)
 8007b6c:	f7fc ff88 	bl	8004a80 <_ZN20SystemIdentification5startEv>
			HAL_Delay(17500);
 8007b70:	f244 405c 	movw	r0, #17500	; 0x445c
 8007b74:	f000 f9f6 	bl	8007f64 <HAL_Delay>
			sys_ident.stop();
 8007b78:	4870      	ldr	r0, [pc, #448]	; (8007d3c <cppLoop+0x1204>)
 8007b7a:	f7fc ff95 	bl	8004aa8 <_ZN20SystemIdentification4stopEv>
			sys_ident.inOutputSave();
 8007b7e:	486f      	ldr	r0, [pc, #444]	; (8007d3c <cppLoop+0x1204>)
 8007b80:	f7fc fefc 	bl	800497c <_ZN20SystemIdentification12inOutputSaveEv>

			led.LR(-1, 0);
 8007b84:	2200      	movs	r2, #0
 8007b86:	f04f 31ff 	mov.w	r1, #4294967295
 8007b8a:	4867      	ldr	r0, [pc, #412]	; (8007d28 <cppLoop+0x11f0>)
 8007b8c:	f7fa fa72 	bl	8002074 <_ZN3LED2LREaa>
		}
		break;
 8007b90:	e0be      	b.n	8007d10 <cppLoop+0x11d8>

	case 14:
		led.fullColor('W');
 8007b92:	2157      	movs	r1, #87	; 0x57
 8007b94:	4864      	ldr	r0, [pc, #400]	; (8007d28 <cppLoop+0x11f0>)
 8007b96:	f7fa f9b1 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007b9a:	f7f9 fa81 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007b9e:	2100      	movs	r1, #0
 8007ba0:	2000      	movs	r0, #0
 8007ba2:	f7f9 fa8d 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun2    ");
 8007ba6:	4866      	ldr	r0, [pc, #408]	; (8007d40 <cppLoop+0x1208>)
 8007ba8:	f7f9 fab4 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007bac:	2101      	movs	r1, #1
 8007bae:	2000      	movs	r0, #0
 8007bb0:	f7f9 fa86 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 8007bb4:	4b63      	ldr	r3, [pc, #396]	; (8007d44 <cppLoop+0x120c>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f7f8 fcdd 	bl	8000578 <__aeabi_f2d>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	460c      	mov	r4, r1
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	4623      	mov	r3, r4
 8007bc6:	4860      	ldr	r0, [pc, #384]	; (8007d48 <cppLoop+0x1210>)
 8007bc8:	f7f9 faa4 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007bcc:	4859      	ldr	r0, [pc, #356]	; (8007d34 <cppLoop+0x11fc>)
 8007bce:	f7fa f931 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	2b02      	cmp	r3, #2
 8007bd6:	bf0c      	ite	eq
 8007bd8:	2301      	moveq	r3, #1
 8007bda:	2300      	movne	r3, #0
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	f000 8098 	beq.w	8007d14 <cppLoop+0x11dc>
			HAL_Delay(500);
 8007be4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007be8:	f000 f9bc 	bl	8007f64 <HAL_Delay>

			led.LR(1, -1);
 8007bec:	f04f 32ff 	mov.w	r2, #4294967295
 8007bf0:	2101      	movs	r1, #1
 8007bf2:	484d      	ldr	r0, [pc, #308]	; (8007d28 <cppLoop+0x11f0>)
 8007bf4:	f7fa fa3e 	bl	8002074 <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 8007bf8:	2102      	movs	r1, #2
 8007bfa:	4854      	ldr	r0, [pc, #336]	; (8007d4c <cppLoop+0x1214>)
 8007bfc:	f7fb fe18 	bl	8003830 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 8007c00:	4b50      	ldr	r3, [pc, #320]	; (8007d44 <cppLoop+0x120c>)
 8007c02:	edd3 7a00 	vldr	s15, [r3]
 8007c06:	eeb0 0a67 	vmov.f32	s0, s15
 8007c0a:	4850      	ldr	r0, [pc, #320]	; (8007d4c <cppLoop+0x1214>)
 8007c0c:	f7fb fb91 	bl	8003332 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 8007c10:	4b4c      	ldr	r3, [pc, #304]	; (8007d44 <cppLoop+0x120c>)
 8007c12:	edd3 7a00 	vldr	s15, [r3]
 8007c16:	eeb0 0a67 	vmov.f32	s0, s15
 8007c1a:	484c      	ldr	r0, [pc, #304]	; (8007d4c <cppLoop+0x1214>)
 8007c1c:	f7fb fb98 	bl	8003350 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8007c20:	484a      	ldr	r0, [pc, #296]	; (8007d4c <cppLoop+0x1214>)
 8007c22:	f7fb f943 	bl	8002eac <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			line_trace.running();
 8007c26:	4849      	ldr	r0, [pc, #292]	; (8007d4c <cppLoop+0x1214>)
 8007c28:	f7fb fd04 	bl	8003634 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8007c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8007c30:	2100      	movs	r1, #0
 8007c32:	483d      	ldr	r0, [pc, #244]	; (8007d28 <cppLoop+0x11f0>)
 8007c34:	f7fa fa1e 	bl	8002074 <_ZN3LED2LREaa>
		}

		break;
 8007c38:	e06c      	b.n	8007d14 <cppLoop+0x11dc>

	case 15:
		led.fullColor('W');
 8007c3a:	2157      	movs	r1, #87	; 0x57
 8007c3c:	483a      	ldr	r0, [pc, #232]	; (8007d28 <cppLoop+0x11f0>)
 8007c3e:	f7fa f95d 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007c42:	f7f9 fa2d 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007c46:	2100      	movs	r1, #0
 8007c48:	2000      	movs	r0, #0
 8007c4a:	f7f9 fa39 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun1    ");
 8007c4e:	4840      	ldr	r0, [pc, #256]	; (8007d50 <cppLoop+0x1218>)
 8007c50:	f7f9 fa60 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007c54:	2101      	movs	r1, #1
 8007c56:	2000      	movs	r0, #0
 8007c58:	f7f9 fa32 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 8007c5c:	4b3d      	ldr	r3, [pc, #244]	; (8007d54 <cppLoop+0x121c>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4618      	mov	r0, r3
 8007c62:	f7f8 fc89 	bl	8000578 <__aeabi_f2d>
 8007c66:	4603      	mov	r3, r0
 8007c68:	460c      	mov	r4, r1
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	4623      	mov	r3, r4
 8007c6e:	4836      	ldr	r0, [pc, #216]	; (8007d48 <cppLoop+0x1210>)
 8007c70:	f7f9 fa50 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007c74:	482f      	ldr	r0, [pc, #188]	; (8007d34 <cppLoop+0x11fc>)
 8007c76:	f7fa f8dd 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	2b02      	cmp	r3, #2
 8007c7e:	bf0c      	ite	eq
 8007c80:	2301      	moveq	r3, #1
 8007c82:	2300      	movne	r3, #0
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d046      	beq.n	8007d18 <cppLoop+0x11e0>
			HAL_Delay(500);
 8007c8a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007c8e:	f000 f969 	bl	8007f64 <HAL_Delay>

			led.LR(1, -1);
 8007c92:	f04f 32ff 	mov.w	r2, #4294967295
 8007c96:	2101      	movs	r1, #1
 8007c98:	4823      	ldr	r0, [pc, #140]	; (8007d28 <cppLoop+0x11f0>)
 8007c9a:	f7fa f9eb 	bl	8002074 <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 8007c9e:	2101      	movs	r1, #1
 8007ca0:	482a      	ldr	r0, [pc, #168]	; (8007d4c <cppLoop+0x1214>)
 8007ca2:	f7fb fdc5 	bl	8003830 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity);
 8007ca6:	4b2b      	ldr	r3, [pc, #172]	; (8007d54 <cppLoop+0x121c>)
 8007ca8:	edd3 7a00 	vldr	s15, [r3]
 8007cac:	eeb0 0a67 	vmov.f32	s0, s15
 8007cb0:	4826      	ldr	r0, [pc, #152]	; (8007d4c <cppLoop+0x1214>)
 8007cb2:	f7fb fb3e 	bl	8003332 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8007cb6:	4b27      	ldr	r3, [pc, #156]	; (8007d54 <cppLoop+0x121c>)
 8007cb8:	edd3 7a00 	vldr	s15, [r3]
 8007cbc:	eeb0 0a67 	vmov.f32	s0, s15
 8007cc0:	4822      	ldr	r0, [pc, #136]	; (8007d4c <cppLoop+0x1214>)
 8007cc2:	f7fb fb45 	bl	8003350 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8007cc6:	4821      	ldr	r0, [pc, #132]	; (8007d4c <cppLoop+0x1214>)
 8007cc8:	f7fb f8f0 	bl	8002eac <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			line_trace.running();
 8007ccc:	481f      	ldr	r0, [pc, #124]	; (8007d4c <cppLoop+0x1214>)
 8007cce:	f7fb fcb1 	bl	8003634 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8007cd2:	f04f 32ff 	mov.w	r2, #4294967295
 8007cd6:	2100      	movs	r1, #0
 8007cd8:	4813      	ldr	r0, [pc, #76]	; (8007d28 <cppLoop+0x11f0>)
 8007cda:	f7fa f9cb 	bl	8002074 <_ZN3LED2LREaa>
		}
		break;
 8007cde:	e01b      	b.n	8007d18 <cppLoop+0x11e0>

	default:
		break;
 8007ce0:	bf00      	nop
 8007ce2:	e01a      	b.n	8007d1a <cppLoop+0x11e2>
		break;
 8007ce4:	bf00      	nop
 8007ce6:	e018      	b.n	8007d1a <cppLoop+0x11e2>
		break;
 8007ce8:	bf00      	nop
 8007cea:	e016      	b.n	8007d1a <cppLoop+0x11e2>
		break;
 8007cec:	bf00      	nop
 8007cee:	e014      	b.n	8007d1a <cppLoop+0x11e2>
		break;
 8007cf0:	bf00      	nop
 8007cf2:	e012      	b.n	8007d1a <cppLoop+0x11e2>
		break;
 8007cf4:	bf00      	nop
 8007cf6:	e010      	b.n	8007d1a <cppLoop+0x11e2>
		break;
 8007cf8:	bf00      	nop
 8007cfa:	e00e      	b.n	8007d1a <cppLoop+0x11e2>
		break;
 8007cfc:	bf00      	nop
 8007cfe:	e00c      	b.n	8007d1a <cppLoop+0x11e2>
		break;
 8007d00:	bf00      	nop
 8007d02:	e00a      	b.n	8007d1a <cppLoop+0x11e2>
		break;
 8007d04:	bf00      	nop
 8007d06:	e008      	b.n	8007d1a <cppLoop+0x11e2>
		break;
 8007d08:	bf00      	nop
 8007d0a:	e006      	b.n	8007d1a <cppLoop+0x11e2>
		break;
 8007d0c:	bf00      	nop
 8007d0e:	e004      	b.n	8007d1a <cppLoop+0x11e2>
		break;
 8007d10:	bf00      	nop
 8007d12:	e002      	b.n	8007d1a <cppLoop+0x11e2>
		break;
 8007d14:	bf00      	nop
 8007d16:	e000      	b.n	8007d1a <cppLoop+0x11e2>
		break;
 8007d18:	bf00      	nop

	}

	HAL_Delay(30);
 8007d1a:	201e      	movs	r0, #30
 8007d1c:	f000 f922 	bl	8007f64 <HAL_Delay>

}
 8007d20:	bf00      	nop
 8007d22:	3714      	adds	r7, #20
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d28:	200005cc 	.word	0x200005cc
 8007d2c:	0801832c 	.word	0x0801832c
 8007d30:	080182f0 	.word	0x080182f0
 8007d34:	200005c0 	.word	0x200005c0
 8007d38:	3e99999a 	.word	0x3e99999a
 8007d3c:	20024aec 	.word	0x20024aec
 8007d40:	08018334 	.word	0x08018334
 8007d44:	2003c450 	.word	0x2003c450
 8007d48:	08018230 	.word	0x08018230
 8007d4c:	20017da0 	.word	0x20017da0
 8007d50:	08018340 	.word	0x08018340
 8007d54:	2003c448 	.word	0x2003c448

08007d58 <_Z41__static_initialization_and_destruction_0ii>:

void prameterSttingMode()
{

}
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b088      	sub	sp, #32
 8007d5c:	af06      	add	r7, sp, #24
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d13d      	bne.n	8007de4 <_Z41__static_initialization_and_destruction_0ii+0x8c>
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d138      	bne.n	8007de4 <_Z41__static_initialization_and_destruction_0ii+0x8c>
LineSensor line_sensor;
 8007d72:	481e      	ldr	r0, [pc, #120]	; (8007dec <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8007d74:	f7fa f9b6 	bl	80020e4 <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8007d78:	481d      	ldr	r0, [pc, #116]	; (8007df0 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8007d7a:	f7fc fc71 	bl	8004660 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 8007d7e:	481d      	ldr	r0, [pc, #116]	; (8007df4 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8007d80:	f7fa f84c 	bl	8001e1c <_ZN8JoyStickC1Ev>
Motor motor;
 8007d84:	481c      	ldr	r0, [pc, #112]	; (8007df8 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8007d86:	f7fc f898 	bl	8003eba <_ZN5MotorC1Ev>
IMU imu;
 8007d8a:	481c      	ldr	r0, [pc, #112]	; (8007dfc <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8007d8c:	f7f9 fe52 	bl	8001a34 <_ZN3IMUC1Ev>
Logger logger;
 8007d90:	481b      	ldr	r0, [pc, #108]	; (8007e00 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8007d92:	f7fb fdee 	bl	8003972 <_ZN6LoggerC1Ev>
Encoder encoder;
 8007d96:	481b      	ldr	r0, [pc, #108]	; (8007e04 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8007d98:	f7f9 f9dc 	bl	8001154 <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 8007d9c:	4b17      	ldr	r3, [pc, #92]	; (8007dfc <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8007d9e:	4a19      	ldr	r2, [pc, #100]	; (8007e04 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8007da0:	4915      	ldr	r1, [pc, #84]	; (8007df8 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8007da2:	4819      	ldr	r0, [pc, #100]	; (8007e08 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8007da4:	f7fc fea4 	bl	8004af0 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 8007da8:	4b17      	ldr	r3, [pc, #92]	; (8007e08 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8007daa:	4a14      	ldr	r2, [pc, #80]	; (8007dfc <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8007dac:	4915      	ldr	r1, [pc, #84]	; (8007e04 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8007dae:	4817      	ldr	r0, [pc, #92]	; (8007e0c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8007db0:	f7fc f968 	bl	8004084 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger, &imu);
 8007db4:	4b11      	ldr	r3, [pc, #68]	; (8007dfc <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8007db6:	9304      	str	r3, [sp, #16]
 8007db8:	4b11      	ldr	r3, [pc, #68]	; (8007e00 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8007dba:	9303      	str	r3, [sp, #12]
 8007dbc:	4b13      	ldr	r3, [pc, #76]	; (8007e0c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8007dbe:	9302      	str	r3, [sp, #8]
 8007dc0:	4b10      	ldr	r3, [pc, #64]	; (8007e04 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8007dc2:	9301      	str	r3, [sp, #4]
 8007dc4:	4b0a      	ldr	r3, [pc, #40]	; (8007df0 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8007dc6:	9300      	str	r3, [sp, #0]
 8007dc8:	4b0f      	ldr	r3, [pc, #60]	; (8007e08 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8007dca:	4a08      	ldr	r2, [pc, #32]	; (8007dec <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8007dcc:	490a      	ldr	r1, [pc, #40]	; (8007df8 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8007dce:	4810      	ldr	r0, [pc, #64]	; (8007e10 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8007dd0:	f7fa fcb6 	bl	8002740 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU>
SystemIdentification sys_ident(&logger, &motor);
 8007dd4:	4a08      	ldr	r2, [pc, #32]	; (8007df8 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8007dd6:	490a      	ldr	r1, [pc, #40]	; (8007e00 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8007dd8:	480e      	ldr	r0, [pc, #56]	; (8007e14 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8007dda:	f7fc fd85 	bl	80048e8 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 8007dde:	480e      	ldr	r0, [pc, #56]	; (8007e18 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8007de0:	f7fc fad0 	bl	8004384 <_ZN13PathFollowingC1Ev>
}
 8007de4:	bf00      	nop
 8007de6:	3708      	adds	r7, #8
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	200002c0 	.word	0x200002c0
 8007df0:	200005b8 	.word	0x200005b8
 8007df4:	200005c0 	.word	0x200005c0
 8007df8:	200005c8 	.word	0x200005c8
 8007dfc:	200005dc 	.word	0x200005dc
 8007e00:	200005f0 	.word	0x200005f0
 8007e04:	20017d00 	.word	0x20017d00
 8007e08:	20017d20 	.word	0x20017d20
 8007e0c:	20017d60 	.word	0x20017d60
 8007e10:	20017da0 	.word	0x20017da0
 8007e14:	20024aec 	.word	0x20024aec
 8007e18:	20024cf8 	.word	0x20024cf8

08007e1c <_GLOBAL__sub_I_line_sensor>:
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007e24:	2001      	movs	r0, #1
 8007e26:	f7ff ff97 	bl	8007d58 <_Z41__static_initialization_and_destruction_0ii>
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007e2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007e64 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007e30:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007e32:	e003      	b.n	8007e3c <LoopCopyDataInit>

08007e34 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007e34:	4b0c      	ldr	r3, [pc, #48]	; (8007e68 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007e36:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007e38:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007e3a:	3104      	adds	r1, #4

08007e3c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007e3c:	480b      	ldr	r0, [pc, #44]	; (8007e6c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007e3e:	4b0c      	ldr	r3, [pc, #48]	; (8007e70 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007e40:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007e42:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007e44:	d3f6      	bcc.n	8007e34 <CopyDataInit>
  ldr  r2, =_sbss
 8007e46:	4a0b      	ldr	r2, [pc, #44]	; (8007e74 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007e48:	e002      	b.n	8007e50 <LoopFillZerobss>

08007e4a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007e4a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007e4c:	f842 3b04 	str.w	r3, [r2], #4

08007e50 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007e50:	4b09      	ldr	r3, [pc, #36]	; (8007e78 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007e52:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007e54:	d3f9      	bcc.n	8007e4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007e56:	f7fe fd45 	bl	80068e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007e5a:	f00b fdd5 	bl	8013a08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007e5e:	f7fd f87f 	bl	8004f60 <main>
  bx  lr    
 8007e62:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8007e64:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8007e68:	08018940 	.word	0x08018940
  ldr  r0, =_sdata
 8007e6c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007e70:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8007e74:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8007e78:	20040e38 	.word	0x20040e38

08007e7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007e7c:	e7fe      	b.n	8007e7c <ADC_IRQHandler>
	...

08007e80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007e84:	4b0e      	ldr	r3, [pc, #56]	; (8007ec0 <HAL_Init+0x40>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a0d      	ldr	r2, [pc, #52]	; (8007ec0 <HAL_Init+0x40>)
 8007e8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007e8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007e90:	4b0b      	ldr	r3, [pc, #44]	; (8007ec0 <HAL_Init+0x40>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a0a      	ldr	r2, [pc, #40]	; (8007ec0 <HAL_Init+0x40>)
 8007e96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007e9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007e9c:	4b08      	ldr	r3, [pc, #32]	; (8007ec0 <HAL_Init+0x40>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a07      	ldr	r2, [pc, #28]	; (8007ec0 <HAL_Init+0x40>)
 8007ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ea6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007ea8:	2003      	movs	r0, #3
 8007eaa:	f000 fd51 	bl	8008950 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007eae:	2000      	movs	r0, #0
 8007eb0:	f000 f808 	bl	8007ec4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007eb4:	f7fd ff66 	bl	8005d84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007eb8:	2300      	movs	r3, #0
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop
 8007ec0:	40023c00 	.word	0x40023c00

08007ec4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b082      	sub	sp, #8
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007ecc:	4b12      	ldr	r3, [pc, #72]	; (8007f18 <HAL_InitTick+0x54>)
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	4b12      	ldr	r3, [pc, #72]	; (8007f1c <HAL_InitTick+0x58>)
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007eda:	fbb3 f3f1 	udiv	r3, r3, r1
 8007ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f000 fd69 	bl	80089ba <HAL_SYSTICK_Config>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d001      	beq.n	8007ef2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e00e      	b.n	8007f10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2b0f      	cmp	r3, #15
 8007ef6:	d80a      	bhi.n	8007f0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007ef8:	2200      	movs	r2, #0
 8007efa:	6879      	ldr	r1, [r7, #4]
 8007efc:	f04f 30ff 	mov.w	r0, #4294967295
 8007f00:	f000 fd31 	bl	8008966 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007f04:	4a06      	ldr	r2, [pc, #24]	; (8007f20 <HAL_InitTick+0x5c>)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	e000      	b.n	8007f10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007f0e:	2301      	movs	r3, #1
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3708      	adds	r7, #8
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}
 8007f18:	20000000 	.word	0x20000000
 8007f1c:	20000008 	.word	0x20000008
 8007f20:	20000004 	.word	0x20000004

08007f24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007f24:	b480      	push	{r7}
 8007f26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007f28:	4b06      	ldr	r3, [pc, #24]	; (8007f44 <HAL_IncTick+0x20>)
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	4b06      	ldr	r3, [pc, #24]	; (8007f48 <HAL_IncTick+0x24>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4413      	add	r3, r2
 8007f34:	4a04      	ldr	r2, [pc, #16]	; (8007f48 <HAL_IncTick+0x24>)
 8007f36:	6013      	str	r3, [r2, #0]
}
 8007f38:	bf00      	nop
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr
 8007f42:	bf00      	nop
 8007f44:	20000008 	.word	0x20000008
 8007f48:	2003edc0 	.word	0x2003edc0

08007f4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8007f50:	4b03      	ldr	r3, [pc, #12]	; (8007f60 <HAL_GetTick+0x14>)
 8007f52:	681b      	ldr	r3, [r3, #0]
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr
 8007f5e:	bf00      	nop
 8007f60:	2003edc0 	.word	0x2003edc0

08007f64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b084      	sub	sp, #16
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007f6c:	f7ff ffee 	bl	8007f4c <HAL_GetTick>
 8007f70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f7c:	d005      	beq.n	8007f8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007f7e:	4b09      	ldr	r3, [pc, #36]	; (8007fa4 <HAL_Delay+0x40>)
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	461a      	mov	r2, r3
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	4413      	add	r3, r2
 8007f88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007f8a:	bf00      	nop
 8007f8c:	f7ff ffde 	bl	8007f4c <HAL_GetTick>
 8007f90:	4602      	mov	r2, r0
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	1ad3      	subs	r3, r2, r3
 8007f96:	68fa      	ldr	r2, [r7, #12]
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d8f7      	bhi.n	8007f8c <HAL_Delay+0x28>
  {
  }
}
 8007f9c:	bf00      	nop
 8007f9e:	3710      	adds	r7, #16
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}
 8007fa4:	20000008 	.word	0x20000008

08007fa8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b084      	sub	sp, #16
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d101      	bne.n	8007fbe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	e033      	b.n	8008026 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d109      	bne.n	8007fda <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f7fd ff04 	bl	8005dd4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fde:	f003 0310 	and.w	r3, r3, #16
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d118      	bne.n	8008018 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007fee:	f023 0302 	bic.w	r3, r3, #2
 8007ff2:	f043 0202 	orr.w	r2, r3, #2
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 fa5a 	bl	80084b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2200      	movs	r2, #0
 8008004:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800800a:	f023 0303 	bic.w	r3, r3, #3
 800800e:	f043 0201 	orr.w	r2, r3, #1
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	641a      	str	r2, [r3, #64]	; 0x40
 8008016:	e001      	b.n	800801c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008018:	2301      	movs	r3, #1
 800801a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8008024:	7bfb      	ldrb	r3, [r7, #15]
}
 8008026:	4618      	mov	r0, r3
 8008028:	3710      	adds	r7, #16
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}
	...

08008030 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b086      	sub	sp, #24
 8008034:	af00      	add	r7, sp, #0
 8008036:	60f8      	str	r0, [r7, #12]
 8008038:	60b9      	str	r1, [r7, #8]
 800803a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800803c:	2300      	movs	r3, #0
 800803e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008046:	2b01      	cmp	r3, #1
 8008048:	d101      	bne.n	800804e <HAL_ADC_Start_DMA+0x1e>
 800804a:	2302      	movs	r3, #2
 800804c:	e0cc      	b.n	80081e8 <HAL_ADC_Start_DMA+0x1b8>
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2201      	movs	r2, #1
 8008052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	f003 0301 	and.w	r3, r3, #1
 8008060:	2b01      	cmp	r3, #1
 8008062:	d018      	beq.n	8008096 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	689a      	ldr	r2, [r3, #8]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f042 0201 	orr.w	r2, r2, #1
 8008072:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008074:	4b5e      	ldr	r3, [pc, #376]	; (80081f0 <HAL_ADC_Start_DMA+0x1c0>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a5e      	ldr	r2, [pc, #376]	; (80081f4 <HAL_ADC_Start_DMA+0x1c4>)
 800807a:	fba2 2303 	umull	r2, r3, r2, r3
 800807e:	0c9a      	lsrs	r2, r3, #18
 8008080:	4613      	mov	r3, r2
 8008082:	005b      	lsls	r3, r3, #1
 8008084:	4413      	add	r3, r2
 8008086:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8008088:	e002      	b.n	8008090 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	3b01      	subs	r3, #1
 800808e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d1f9      	bne.n	800808a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	689b      	ldr	r3, [r3, #8]
 800809c:	f003 0301 	and.w	r3, r3, #1
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	f040 80a0 	bne.w	80081e6 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080aa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80080ae:	f023 0301 	bic.w	r3, r3, #1
 80080b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d007      	beq.n	80080d8 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080cc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80080d0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80080e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080e4:	d106      	bne.n	80080f4 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080ea:	f023 0206 	bic.w	r2, r3, #6
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	645a      	str	r2, [r3, #68]	; 0x44
 80080f2:	e002      	b.n	80080fa <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2200      	movs	r2, #0
 80080f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2200      	movs	r2, #0
 80080fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008102:	4b3d      	ldr	r3, [pc, #244]	; (80081f8 <HAL_ADC_Start_DMA+0x1c8>)
 8008104:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800810a:	4a3c      	ldr	r2, [pc, #240]	; (80081fc <HAL_ADC_Start_DMA+0x1cc>)
 800810c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008112:	4a3b      	ldr	r2, [pc, #236]	; (8008200 <HAL_ADC_Start_DMA+0x1d0>)
 8008114:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800811a:	4a3a      	ldr	r2, [pc, #232]	; (8008204 <HAL_ADC_Start_DMA+0x1d4>)
 800811c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8008126:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	685a      	ldr	r2, [r3, #4]
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008136:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	689a      	ldr	r2, [r3, #8]
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008146:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	334c      	adds	r3, #76	; 0x4c
 8008152:	4619      	mov	r1, r3
 8008154:	68ba      	ldr	r2, [r7, #8]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f000 fcea 	bl	8008b30 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	f003 031f 	and.w	r3, r3, #31
 8008164:	2b00      	cmp	r3, #0
 8008166:	d12a      	bne.n	80081be <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a26      	ldr	r2, [pc, #152]	; (8008208 <HAL_ADC_Start_DMA+0x1d8>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d015      	beq.n	800819e <HAL_ADC_Start_DMA+0x16e>
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a25      	ldr	r2, [pc, #148]	; (800820c <HAL_ADC_Start_DMA+0x1dc>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d105      	bne.n	8008188 <HAL_ADC_Start_DMA+0x158>
 800817c:	4b1e      	ldr	r3, [pc, #120]	; (80081f8 <HAL_ADC_Start_DMA+0x1c8>)
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	f003 031f 	and.w	r3, r3, #31
 8008184:	2b00      	cmp	r3, #0
 8008186:	d00a      	beq.n	800819e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a20      	ldr	r2, [pc, #128]	; (8008210 <HAL_ADC_Start_DMA+0x1e0>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d129      	bne.n	80081e6 <HAL_ADC_Start_DMA+0x1b6>
 8008192:	4b19      	ldr	r3, [pc, #100]	; (80081f8 <HAL_ADC_Start_DMA+0x1c8>)
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	f003 031f 	and.w	r3, r3, #31
 800819a:	2b0f      	cmp	r3, #15
 800819c:	d823      	bhi.n	80081e6 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d11c      	bne.n	80081e6 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	689a      	ldr	r2, [r3, #8]
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80081ba:	609a      	str	r2, [r3, #8]
 80081bc:	e013      	b.n	80081e6 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a11      	ldr	r2, [pc, #68]	; (8008208 <HAL_ADC_Start_DMA+0x1d8>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d10e      	bne.n	80081e6 <HAL_ADC_Start_DMA+0x1b6>
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d107      	bne.n	80081e6 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	689a      	ldr	r2, [r3, #8]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80081e4:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80081e6:	2300      	movs	r3, #0
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3718      	adds	r7, #24
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}
 80081f0:	20000000 	.word	0x20000000
 80081f4:	431bde83 	.word	0x431bde83
 80081f8:	40012300 	.word	0x40012300
 80081fc:	080086ad 	.word	0x080086ad
 8008200:	08008767 	.word	0x08008767
 8008204:	08008783 	.word	0x08008783
 8008208:	40012000 	.word	0x40012000
 800820c:	40012100 	.word	0x40012100
 8008210:	40012200 	.word	0x40012200

08008214 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008214:	b480      	push	{r7}
 8008216:	b083      	sub	sp, #12
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800821c:	bf00      	nop
 800821e:	370c      	adds	r7, #12
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr

08008228 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008228:	b480      	push	{r7}
 800822a:	b083      	sub	sp, #12
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8008230:	bf00      	nop
 8008232:	370c      	adds	r7, #12
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr

0800823c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800823c:	b480      	push	{r7}
 800823e:	b083      	sub	sp, #12
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8008244:	bf00      	nop
 8008246:	370c      	adds	r7, #12
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr

08008250 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8008250:	b480      	push	{r7}
 8008252:	b085      	sub	sp, #20
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800825a:	2300      	movs	r3, #0
 800825c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008264:	2b01      	cmp	r3, #1
 8008266:	d101      	bne.n	800826c <HAL_ADC_ConfigChannel+0x1c>
 8008268:	2302      	movs	r3, #2
 800826a:	e113      	b.n	8008494 <HAL_ADC_ConfigChannel+0x244>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2201      	movs	r2, #1
 8008270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	2b09      	cmp	r3, #9
 800827a:	d925      	bls.n	80082c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	68d9      	ldr	r1, [r3, #12]
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	b29b      	uxth	r3, r3
 8008288:	461a      	mov	r2, r3
 800828a:	4613      	mov	r3, r2
 800828c:	005b      	lsls	r3, r3, #1
 800828e:	4413      	add	r3, r2
 8008290:	3b1e      	subs	r3, #30
 8008292:	2207      	movs	r2, #7
 8008294:	fa02 f303 	lsl.w	r3, r2, r3
 8008298:	43da      	mvns	r2, r3
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	400a      	ands	r2, r1
 80082a0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	68d9      	ldr	r1, [r3, #12]
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	689a      	ldr	r2, [r3, #8]
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	4618      	mov	r0, r3
 80082b4:	4603      	mov	r3, r0
 80082b6:	005b      	lsls	r3, r3, #1
 80082b8:	4403      	add	r3, r0
 80082ba:	3b1e      	subs	r3, #30
 80082bc:	409a      	lsls	r2, r3
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	430a      	orrs	r2, r1
 80082c4:	60da      	str	r2, [r3, #12]
 80082c6:	e022      	b.n	800830e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	6919      	ldr	r1, [r3, #16]
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	461a      	mov	r2, r3
 80082d6:	4613      	mov	r3, r2
 80082d8:	005b      	lsls	r3, r3, #1
 80082da:	4413      	add	r3, r2
 80082dc:	2207      	movs	r2, #7
 80082de:	fa02 f303 	lsl.w	r3, r2, r3
 80082e2:	43da      	mvns	r2, r3
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	400a      	ands	r2, r1
 80082ea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	6919      	ldr	r1, [r3, #16]
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	689a      	ldr	r2, [r3, #8]
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	4618      	mov	r0, r3
 80082fe:	4603      	mov	r3, r0
 8008300:	005b      	lsls	r3, r3, #1
 8008302:	4403      	add	r3, r0
 8008304:	409a      	lsls	r2, r3
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	430a      	orrs	r2, r1
 800830c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	2b06      	cmp	r3, #6
 8008314:	d824      	bhi.n	8008360 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	685a      	ldr	r2, [r3, #4]
 8008320:	4613      	mov	r3, r2
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	4413      	add	r3, r2
 8008326:	3b05      	subs	r3, #5
 8008328:	221f      	movs	r2, #31
 800832a:	fa02 f303 	lsl.w	r3, r2, r3
 800832e:	43da      	mvns	r2, r3
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	400a      	ands	r2, r1
 8008336:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	b29b      	uxth	r3, r3
 8008344:	4618      	mov	r0, r3
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	685a      	ldr	r2, [r3, #4]
 800834a:	4613      	mov	r3, r2
 800834c:	009b      	lsls	r3, r3, #2
 800834e:	4413      	add	r3, r2
 8008350:	3b05      	subs	r3, #5
 8008352:	fa00 f203 	lsl.w	r2, r0, r3
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	430a      	orrs	r2, r1
 800835c:	635a      	str	r2, [r3, #52]	; 0x34
 800835e:	e04c      	b.n	80083fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	2b0c      	cmp	r3, #12
 8008366:	d824      	bhi.n	80083b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	685a      	ldr	r2, [r3, #4]
 8008372:	4613      	mov	r3, r2
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	4413      	add	r3, r2
 8008378:	3b23      	subs	r3, #35	; 0x23
 800837a:	221f      	movs	r2, #31
 800837c:	fa02 f303 	lsl.w	r3, r2, r3
 8008380:	43da      	mvns	r2, r3
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	400a      	ands	r2, r1
 8008388:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	b29b      	uxth	r3, r3
 8008396:	4618      	mov	r0, r3
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	685a      	ldr	r2, [r3, #4]
 800839c:	4613      	mov	r3, r2
 800839e:	009b      	lsls	r3, r3, #2
 80083a0:	4413      	add	r3, r2
 80083a2:	3b23      	subs	r3, #35	; 0x23
 80083a4:	fa00 f203 	lsl.w	r2, r0, r3
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	430a      	orrs	r2, r1
 80083ae:	631a      	str	r2, [r3, #48]	; 0x30
 80083b0:	e023      	b.n	80083fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	685a      	ldr	r2, [r3, #4]
 80083bc:	4613      	mov	r3, r2
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	4413      	add	r3, r2
 80083c2:	3b41      	subs	r3, #65	; 0x41
 80083c4:	221f      	movs	r2, #31
 80083c6:	fa02 f303 	lsl.w	r3, r2, r3
 80083ca:	43da      	mvns	r2, r3
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	400a      	ands	r2, r1
 80083d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	b29b      	uxth	r3, r3
 80083e0:	4618      	mov	r0, r3
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	685a      	ldr	r2, [r3, #4]
 80083e6:	4613      	mov	r3, r2
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	4413      	add	r3, r2
 80083ec:	3b41      	subs	r3, #65	; 0x41
 80083ee:	fa00 f203 	lsl.w	r2, r0, r3
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	430a      	orrs	r2, r1
 80083f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80083fa:	4b29      	ldr	r3, [pc, #164]	; (80084a0 <HAL_ADC_ConfigChannel+0x250>)
 80083fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a28      	ldr	r2, [pc, #160]	; (80084a4 <HAL_ADC_ConfigChannel+0x254>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d10f      	bne.n	8008428 <HAL_ADC_ConfigChannel+0x1d8>
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	2b12      	cmp	r3, #18
 800840e:	d10b      	bne.n	8008428 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a1d      	ldr	r2, [pc, #116]	; (80084a4 <HAL_ADC_ConfigChannel+0x254>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d12b      	bne.n	800848a <HAL_ADC_ConfigChannel+0x23a>
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a1c      	ldr	r2, [pc, #112]	; (80084a8 <HAL_ADC_ConfigChannel+0x258>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d003      	beq.n	8008444 <HAL_ADC_ConfigChannel+0x1f4>
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	2b11      	cmp	r3, #17
 8008442:	d122      	bne.n	800848a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a11      	ldr	r2, [pc, #68]	; (80084a8 <HAL_ADC_ConfigChannel+0x258>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d111      	bne.n	800848a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8008466:	4b11      	ldr	r3, [pc, #68]	; (80084ac <HAL_ADC_ConfigChannel+0x25c>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a11      	ldr	r2, [pc, #68]	; (80084b0 <HAL_ADC_ConfigChannel+0x260>)
 800846c:	fba2 2303 	umull	r2, r3, r2, r3
 8008470:	0c9a      	lsrs	r2, r3, #18
 8008472:	4613      	mov	r3, r2
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	4413      	add	r3, r2
 8008478:	005b      	lsls	r3, r3, #1
 800847a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800847c:	e002      	b.n	8008484 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	3b01      	subs	r3, #1
 8008482:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d1f9      	bne.n	800847e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2200      	movs	r2, #0
 800848e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8008492:	2300      	movs	r3, #0
}
 8008494:	4618      	mov	r0, r3
 8008496:	3714      	adds	r7, #20
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr
 80084a0:	40012300 	.word	0x40012300
 80084a4:	40012000 	.word	0x40012000
 80084a8:	10000012 	.word	0x10000012
 80084ac:	20000000 	.word	0x20000000
 80084b0:	431bde83 	.word	0x431bde83

080084b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b085      	sub	sp, #20
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80084bc:	4b79      	ldr	r3, [pc, #484]	; (80086a4 <ADC_Init+0x1f0>)
 80084be:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	685a      	ldr	r2, [r3, #4]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	431a      	orrs	r2, r3
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	685a      	ldr	r2, [r3, #4]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80084e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	6859      	ldr	r1, [r3, #4]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	691b      	ldr	r3, [r3, #16]
 80084f4:	021a      	lsls	r2, r3, #8
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	430a      	orrs	r2, r1
 80084fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	685a      	ldr	r2, [r3, #4]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800850c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	6859      	ldr	r1, [r3, #4]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	689a      	ldr	r2, [r3, #8]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	430a      	orrs	r2, r1
 800851e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	689a      	ldr	r2, [r3, #8]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800852e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	6899      	ldr	r1, [r3, #8]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	68da      	ldr	r2, [r3, #12]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	430a      	orrs	r2, r1
 8008540:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008546:	4a58      	ldr	r2, [pc, #352]	; (80086a8 <ADC_Init+0x1f4>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d022      	beq.n	8008592 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	689a      	ldr	r2, [r3, #8]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800855a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	6899      	ldr	r1, [r3, #8]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	430a      	orrs	r2, r1
 800856c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	689a      	ldr	r2, [r3, #8]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800857c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	6899      	ldr	r1, [r3, #8]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	430a      	orrs	r2, r1
 800858e:	609a      	str	r2, [r3, #8]
 8008590:	e00f      	b.n	80085b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	689a      	ldr	r2, [r3, #8]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80085a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	689a      	ldr	r2, [r3, #8]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80085b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	689a      	ldr	r2, [r3, #8]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f022 0202 	bic.w	r2, r2, #2
 80085c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	6899      	ldr	r1, [r3, #8]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	7e1b      	ldrb	r3, [r3, #24]
 80085cc:	005a      	lsls	r2, r3, #1
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	430a      	orrs	r2, r1
 80085d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d01b      	beq.n	8008618 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	685a      	ldr	r2, [r3, #4]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80085ee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	685a      	ldr	r2, [r3, #4]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80085fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	6859      	ldr	r1, [r3, #4]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800860a:	3b01      	subs	r3, #1
 800860c:	035a      	lsls	r2, r3, #13
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	430a      	orrs	r2, r1
 8008614:	605a      	str	r2, [r3, #4]
 8008616:	e007      	b.n	8008628 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	685a      	ldr	r2, [r3, #4]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008626:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8008636:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	69db      	ldr	r3, [r3, #28]
 8008642:	3b01      	subs	r3, #1
 8008644:	051a      	lsls	r2, r3, #20
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	430a      	orrs	r2, r1
 800864c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	689a      	ldr	r2, [r3, #8]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800865c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	6899      	ldr	r1, [r3, #8]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800866a:	025a      	lsls	r2, r3, #9
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	430a      	orrs	r2, r1
 8008672:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	689a      	ldr	r2, [r3, #8]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008682:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	6899      	ldr	r1, [r3, #8]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	695b      	ldr	r3, [r3, #20]
 800868e:	029a      	lsls	r2, r3, #10
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	430a      	orrs	r2, r1
 8008696:	609a      	str	r2, [r3, #8]
}
 8008698:	bf00      	nop
 800869a:	3714      	adds	r7, #20
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr
 80086a4:	40012300 	.word	0x40012300
 80086a8:	0f000001 	.word	0x0f000001

080086ac <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086b8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086be:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d13c      	bne.n	8008740 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	689b      	ldr	r3, [r3, #8]
 80086d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d12b      	bne.n	8008738 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d127      	bne.n	8008738 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d006      	beq.n	8008704 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	689b      	ldr	r3, [r3, #8]
 80086fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008700:	2b00      	cmp	r3, #0
 8008702:	d119      	bne.n	8008738 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	685a      	ldr	r2, [r3, #4]
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f022 0220 	bic.w	r2, r2, #32
 8008712:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008718:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008724:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008728:	2b00      	cmp	r3, #0
 800872a:	d105      	bne.n	8008738 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008730:	f043 0201 	orr.w	r2, r3, #1
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008738:	68f8      	ldr	r0, [r7, #12]
 800873a:	f7ff fd6b 	bl	8008214 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800873e:	e00e      	b.n	800875e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008744:	f003 0310 	and.w	r3, r3, #16
 8008748:	2b00      	cmp	r3, #0
 800874a:	d003      	beq.n	8008754 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800874c:	68f8      	ldr	r0, [r7, #12]
 800874e:	f7ff fd75 	bl	800823c <HAL_ADC_ErrorCallback>
}
 8008752:	e004      	b.n	800875e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	4798      	blx	r3
}
 800875e:	bf00      	nop
 8008760:	3710      	adds	r7, #16
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}

08008766 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008766:	b580      	push	{r7, lr}
 8008768:	b084      	sub	sp, #16
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008772:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f7ff fd57 	bl	8008228 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800877a:	bf00      	nop
 800877c:	3710      	adds	r7, #16
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}

08008782 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8008782:	b580      	push	{r7, lr}
 8008784:	b084      	sub	sp, #16
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800878e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2240      	movs	r2, #64	; 0x40
 8008794:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800879a:	f043 0204 	orr.w	r2, r3, #4
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80087a2:	68f8      	ldr	r0, [r7, #12]
 80087a4:	f7ff fd4a 	bl	800823c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80087a8:	bf00      	nop
 80087aa:	3710      	adds	r7, #16
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b085      	sub	sp, #20
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f003 0307 	and.w	r3, r3, #7
 80087be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80087c0:	4b0c      	ldr	r3, [pc, #48]	; (80087f4 <__NVIC_SetPriorityGrouping+0x44>)
 80087c2:	68db      	ldr	r3, [r3, #12]
 80087c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80087c6:	68ba      	ldr	r2, [r7, #8]
 80087c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80087cc:	4013      	ands	r3, r2
 80087ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80087d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80087dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80087e2:	4a04      	ldr	r2, [pc, #16]	; (80087f4 <__NVIC_SetPriorityGrouping+0x44>)
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	60d3      	str	r3, [r2, #12]
}
 80087e8:	bf00      	nop
 80087ea:	3714      	adds	r7, #20
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr
 80087f4:	e000ed00 	.word	0xe000ed00

080087f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80087f8:	b480      	push	{r7}
 80087fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80087fc:	4b04      	ldr	r3, [pc, #16]	; (8008810 <__NVIC_GetPriorityGrouping+0x18>)
 80087fe:	68db      	ldr	r3, [r3, #12]
 8008800:	0a1b      	lsrs	r3, r3, #8
 8008802:	f003 0307 	and.w	r3, r3, #7
}
 8008806:	4618      	mov	r0, r3
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr
 8008810:	e000ed00 	.word	0xe000ed00

08008814 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008814:	b480      	push	{r7}
 8008816:	b083      	sub	sp, #12
 8008818:	af00      	add	r7, sp, #0
 800881a:	4603      	mov	r3, r0
 800881c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800881e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008822:	2b00      	cmp	r3, #0
 8008824:	db0b      	blt.n	800883e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008826:	79fb      	ldrb	r3, [r7, #7]
 8008828:	f003 021f 	and.w	r2, r3, #31
 800882c:	4907      	ldr	r1, [pc, #28]	; (800884c <__NVIC_EnableIRQ+0x38>)
 800882e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008832:	095b      	lsrs	r3, r3, #5
 8008834:	2001      	movs	r0, #1
 8008836:	fa00 f202 	lsl.w	r2, r0, r2
 800883a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800883e:	bf00      	nop
 8008840:	370c      	adds	r7, #12
 8008842:	46bd      	mov	sp, r7
 8008844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008848:	4770      	bx	lr
 800884a:	bf00      	nop
 800884c:	e000e100 	.word	0xe000e100

08008850 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008850:	b480      	push	{r7}
 8008852:	b083      	sub	sp, #12
 8008854:	af00      	add	r7, sp, #0
 8008856:	4603      	mov	r3, r0
 8008858:	6039      	str	r1, [r7, #0]
 800885a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800885c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008860:	2b00      	cmp	r3, #0
 8008862:	db0a      	blt.n	800887a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	b2da      	uxtb	r2, r3
 8008868:	490c      	ldr	r1, [pc, #48]	; (800889c <__NVIC_SetPriority+0x4c>)
 800886a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800886e:	0112      	lsls	r2, r2, #4
 8008870:	b2d2      	uxtb	r2, r2
 8008872:	440b      	add	r3, r1
 8008874:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008878:	e00a      	b.n	8008890 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	b2da      	uxtb	r2, r3
 800887e:	4908      	ldr	r1, [pc, #32]	; (80088a0 <__NVIC_SetPriority+0x50>)
 8008880:	79fb      	ldrb	r3, [r7, #7]
 8008882:	f003 030f 	and.w	r3, r3, #15
 8008886:	3b04      	subs	r3, #4
 8008888:	0112      	lsls	r2, r2, #4
 800888a:	b2d2      	uxtb	r2, r2
 800888c:	440b      	add	r3, r1
 800888e:	761a      	strb	r2, [r3, #24]
}
 8008890:	bf00      	nop
 8008892:	370c      	adds	r7, #12
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr
 800889c:	e000e100 	.word	0xe000e100
 80088a0:	e000ed00 	.word	0xe000ed00

080088a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b089      	sub	sp, #36	; 0x24
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	60f8      	str	r0, [r7, #12]
 80088ac:	60b9      	str	r1, [r7, #8]
 80088ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f003 0307 	and.w	r3, r3, #7
 80088b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80088b8:	69fb      	ldr	r3, [r7, #28]
 80088ba:	f1c3 0307 	rsb	r3, r3, #7
 80088be:	2b04      	cmp	r3, #4
 80088c0:	bf28      	it	cs
 80088c2:	2304      	movcs	r3, #4
 80088c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80088c6:	69fb      	ldr	r3, [r7, #28]
 80088c8:	3304      	adds	r3, #4
 80088ca:	2b06      	cmp	r3, #6
 80088cc:	d902      	bls.n	80088d4 <NVIC_EncodePriority+0x30>
 80088ce:	69fb      	ldr	r3, [r7, #28]
 80088d0:	3b03      	subs	r3, #3
 80088d2:	e000      	b.n	80088d6 <NVIC_EncodePriority+0x32>
 80088d4:	2300      	movs	r3, #0
 80088d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80088d8:	f04f 32ff 	mov.w	r2, #4294967295
 80088dc:	69bb      	ldr	r3, [r7, #24]
 80088de:	fa02 f303 	lsl.w	r3, r2, r3
 80088e2:	43da      	mvns	r2, r3
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	401a      	ands	r2, r3
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80088ec:	f04f 31ff 	mov.w	r1, #4294967295
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	fa01 f303 	lsl.w	r3, r1, r3
 80088f6:	43d9      	mvns	r1, r3
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80088fc:	4313      	orrs	r3, r2
         );
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3724      	adds	r7, #36	; 0x24
 8008902:	46bd      	mov	sp, r7
 8008904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008908:	4770      	bx	lr
	...

0800890c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b082      	sub	sp, #8
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	3b01      	subs	r3, #1
 8008918:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800891c:	d301      	bcc.n	8008922 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800891e:	2301      	movs	r3, #1
 8008920:	e00f      	b.n	8008942 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008922:	4a0a      	ldr	r2, [pc, #40]	; (800894c <SysTick_Config+0x40>)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	3b01      	subs	r3, #1
 8008928:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800892a:	210f      	movs	r1, #15
 800892c:	f04f 30ff 	mov.w	r0, #4294967295
 8008930:	f7ff ff8e 	bl	8008850 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008934:	4b05      	ldr	r3, [pc, #20]	; (800894c <SysTick_Config+0x40>)
 8008936:	2200      	movs	r2, #0
 8008938:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800893a:	4b04      	ldr	r3, [pc, #16]	; (800894c <SysTick_Config+0x40>)
 800893c:	2207      	movs	r2, #7
 800893e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008940:	2300      	movs	r3, #0
}
 8008942:	4618      	mov	r0, r3
 8008944:	3708      	adds	r7, #8
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
 800894a:	bf00      	nop
 800894c:	e000e010 	.word	0xe000e010

08008950 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b082      	sub	sp, #8
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f7ff ff29 	bl	80087b0 <__NVIC_SetPriorityGrouping>
}
 800895e:	bf00      	nop
 8008960:	3708      	adds	r7, #8
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}

08008966 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008966:	b580      	push	{r7, lr}
 8008968:	b086      	sub	sp, #24
 800896a:	af00      	add	r7, sp, #0
 800896c:	4603      	mov	r3, r0
 800896e:	60b9      	str	r1, [r7, #8]
 8008970:	607a      	str	r2, [r7, #4]
 8008972:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008974:	2300      	movs	r3, #0
 8008976:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008978:	f7ff ff3e 	bl	80087f8 <__NVIC_GetPriorityGrouping>
 800897c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	68b9      	ldr	r1, [r7, #8]
 8008982:	6978      	ldr	r0, [r7, #20]
 8008984:	f7ff ff8e 	bl	80088a4 <NVIC_EncodePriority>
 8008988:	4602      	mov	r2, r0
 800898a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800898e:	4611      	mov	r1, r2
 8008990:	4618      	mov	r0, r3
 8008992:	f7ff ff5d 	bl	8008850 <__NVIC_SetPriority>
}
 8008996:	bf00      	nop
 8008998:	3718      	adds	r7, #24
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}

0800899e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800899e:	b580      	push	{r7, lr}
 80089a0:	b082      	sub	sp, #8
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	4603      	mov	r3, r0
 80089a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80089a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089ac:	4618      	mov	r0, r3
 80089ae:	f7ff ff31 	bl	8008814 <__NVIC_EnableIRQ>
}
 80089b2:	bf00      	nop
 80089b4:	3708      	adds	r7, #8
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}

080089ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b082      	sub	sp, #8
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f7ff ffa2 	bl	800890c <SysTick_Config>
 80089c8:	4603      	mov	r3, r0
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3708      	adds	r7, #8
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
	...

080089d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b086      	sub	sp, #24
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80089dc:	2300      	movs	r3, #0
 80089de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80089e0:	f7ff fab4 	bl	8007f4c <HAL_GetTick>
 80089e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d101      	bne.n	80089f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80089ec:	2301      	movs	r3, #1
 80089ee:	e099      	b.n	8008b24 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2200      	movs	r2, #0
 80089f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2202      	movs	r2, #2
 80089fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f022 0201 	bic.w	r2, r2, #1
 8008a0e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008a10:	e00f      	b.n	8008a32 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008a12:	f7ff fa9b 	bl	8007f4c <HAL_GetTick>
 8008a16:	4602      	mov	r2, r0
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	1ad3      	subs	r3, r2, r3
 8008a1c:	2b05      	cmp	r3, #5
 8008a1e:	d908      	bls.n	8008a32 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2220      	movs	r2, #32
 8008a24:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2203      	movs	r2, #3
 8008a2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8008a2e:	2303      	movs	r3, #3
 8008a30:	e078      	b.n	8008b24 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f003 0301 	and.w	r3, r3, #1
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d1e8      	bne.n	8008a12 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008a48:	697a      	ldr	r2, [r7, #20]
 8008a4a:	4b38      	ldr	r3, [pc, #224]	; (8008b2c <HAL_DMA_Init+0x158>)
 8008a4c:	4013      	ands	r3, r2
 8008a4e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	685a      	ldr	r2, [r3, #4]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	689b      	ldr	r3, [r3, #8]
 8008a58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008a5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	691b      	ldr	r3, [r3, #16]
 8008a64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008a6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	699b      	ldr	r3, [r3, #24]
 8008a70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008a76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6a1b      	ldr	r3, [r3, #32]
 8008a7c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008a7e:	697a      	ldr	r2, [r7, #20]
 8008a80:	4313      	orrs	r3, r2
 8008a82:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a88:	2b04      	cmp	r3, #4
 8008a8a:	d107      	bne.n	8008a9c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a94:	4313      	orrs	r3, r2
 8008a96:	697a      	ldr	r2, [r7, #20]
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	697a      	ldr	r2, [r7, #20]
 8008aa2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	695b      	ldr	r3, [r3, #20]
 8008aaa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	f023 0307 	bic.w	r3, r3, #7
 8008ab2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab8:	697a      	ldr	r2, [r7, #20]
 8008aba:	4313      	orrs	r3, r2
 8008abc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac2:	2b04      	cmp	r3, #4
 8008ac4:	d117      	bne.n	8008af6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aca:	697a      	ldr	r2, [r7, #20]
 8008acc:	4313      	orrs	r3, r2
 8008ace:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d00e      	beq.n	8008af6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f000 fa9d 	bl	8009018 <DMA_CheckFifoParam>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d008      	beq.n	8008af6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2240      	movs	r2, #64	; 0x40
 8008ae8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2201      	movs	r2, #1
 8008aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8008af2:	2301      	movs	r3, #1
 8008af4:	e016      	b.n	8008b24 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	697a      	ldr	r2, [r7, #20]
 8008afc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 fa54 	bl	8008fac <DMA_CalcBaseAndBitshift>
 8008b04:	4603      	mov	r3, r0
 8008b06:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b0c:	223f      	movs	r2, #63	; 0x3f
 8008b0e:	409a      	lsls	r2, r3
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2200      	movs	r2, #0
 8008b18:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008b22:	2300      	movs	r3, #0
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3718      	adds	r7, #24
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}
 8008b2c:	f010803f 	.word	0xf010803f

08008b30 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b086      	sub	sp, #24
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	60b9      	str	r1, [r7, #8]
 8008b3a:	607a      	str	r2, [r7, #4]
 8008b3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b46:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008b4e:	2b01      	cmp	r3, #1
 8008b50:	d101      	bne.n	8008b56 <HAL_DMA_Start_IT+0x26>
 8008b52:	2302      	movs	r3, #2
 8008b54:	e040      	b.n	8008bd8 <HAL_DMA_Start_IT+0xa8>
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2201      	movs	r2, #1
 8008b5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	2b01      	cmp	r3, #1
 8008b68:	d12f      	bne.n	8008bca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2202      	movs	r2, #2
 8008b6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2200      	movs	r2, #0
 8008b76:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	687a      	ldr	r2, [r7, #4]
 8008b7c:	68b9      	ldr	r1, [r7, #8]
 8008b7e:	68f8      	ldr	r0, [r7, #12]
 8008b80:	f000 f9e6 	bl	8008f50 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b88:	223f      	movs	r2, #63	; 0x3f
 8008b8a:	409a      	lsls	r2, r3
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	681a      	ldr	r2, [r3, #0]
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f042 0216 	orr.w	r2, r2, #22
 8008b9e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d007      	beq.n	8008bb8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	681a      	ldr	r2, [r3, #0]
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f042 0208 	orr.w	r2, r2, #8
 8008bb6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	681a      	ldr	r2, [r3, #0]
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f042 0201 	orr.w	r2, r2, #1
 8008bc6:	601a      	str	r2, [r3, #0]
 8008bc8:	e005      	b.n	8008bd6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008bd2:	2302      	movs	r3, #2
 8008bd4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008bd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3718      	adds	r7, #24
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b083      	sub	sp, #12
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008bee:	b2db      	uxtb	r3, r3
 8008bf0:	2b02      	cmp	r3, #2
 8008bf2:	d004      	beq.n	8008bfe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2280      	movs	r2, #128	; 0x80
 8008bf8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	e00c      	b.n	8008c18 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2205      	movs	r2, #5
 8008c02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	681a      	ldr	r2, [r3, #0]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f022 0201 	bic.w	r2, r2, #1
 8008c14:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008c16:	2300      	movs	r3, #0
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	370c      	adds	r7, #12
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr

08008c24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b086      	sub	sp, #24
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008c30:	4b92      	ldr	r3, [pc, #584]	; (8008e7c <HAL_DMA_IRQHandler+0x258>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a92      	ldr	r2, [pc, #584]	; (8008e80 <HAL_DMA_IRQHandler+0x25c>)
 8008c36:	fba2 2303 	umull	r2, r3, r2, r3
 8008c3a:	0a9b      	lsrs	r3, r3, #10
 8008c3c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c42:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c4e:	2208      	movs	r2, #8
 8008c50:	409a      	lsls	r2, r3
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	4013      	ands	r3, r2
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d01a      	beq.n	8008c90 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f003 0304 	and.w	r3, r3, #4
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d013      	beq.n	8008c90 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	681a      	ldr	r2, [r3, #0]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f022 0204 	bic.w	r2, r2, #4
 8008c76:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c7c:	2208      	movs	r2, #8
 8008c7e:	409a      	lsls	r2, r3
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c88:	f043 0201 	orr.w	r2, r3, #1
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c94:	2201      	movs	r2, #1
 8008c96:	409a      	lsls	r2, r3
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	4013      	ands	r3, r2
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d012      	beq.n	8008cc6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	695b      	ldr	r3, [r3, #20]
 8008ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d00b      	beq.n	8008cc6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	409a      	lsls	r2, r3
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cbe:	f043 0202 	orr.w	r2, r3, #2
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cca:	2204      	movs	r2, #4
 8008ccc:	409a      	lsls	r2, r3
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	4013      	ands	r3, r2
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d012      	beq.n	8008cfc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f003 0302 	and.w	r3, r3, #2
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d00b      	beq.n	8008cfc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ce8:	2204      	movs	r2, #4
 8008cea:	409a      	lsls	r2, r3
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cf4:	f043 0204 	orr.w	r2, r3, #4
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d00:	2210      	movs	r2, #16
 8008d02:	409a      	lsls	r2, r3
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	4013      	ands	r3, r2
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d043      	beq.n	8008d94 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f003 0308 	and.w	r3, r3, #8
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d03c      	beq.n	8008d94 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d1e:	2210      	movs	r2, #16
 8008d20:	409a      	lsls	r2, r3
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d018      	beq.n	8008d66 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d108      	bne.n	8008d54 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d024      	beq.n	8008d94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	4798      	blx	r3
 8008d52:	e01f      	b.n	8008d94 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d01b      	beq.n	8008d94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	4798      	blx	r3
 8008d64:	e016      	b.n	8008d94 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d107      	bne.n	8008d84 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	681a      	ldr	r2, [r3, #0]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f022 0208 	bic.w	r2, r2, #8
 8008d82:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d003      	beq.n	8008d94 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d98:	2220      	movs	r2, #32
 8008d9a:	409a      	lsls	r2, r3
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	4013      	ands	r3, r2
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	f000 808e 	beq.w	8008ec2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f003 0310 	and.w	r3, r3, #16
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	f000 8086 	beq.w	8008ec2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dba:	2220      	movs	r2, #32
 8008dbc:	409a      	lsls	r2, r3
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008dc8:	b2db      	uxtb	r3, r3
 8008dca:	2b05      	cmp	r3, #5
 8008dcc:	d136      	bne.n	8008e3c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f022 0216 	bic.w	r2, r2, #22
 8008ddc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	695a      	ldr	r2, [r3, #20]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008dec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d103      	bne.n	8008dfe <HAL_DMA_IRQHandler+0x1da>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d007      	beq.n	8008e0e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	681a      	ldr	r2, [r3, #0]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f022 0208 	bic.w	r2, r2, #8
 8008e0c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e12:	223f      	movs	r2, #63	; 0x3f
 8008e14:	409a      	lsls	r2, r3
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2201      	movs	r2, #1
 8008e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d07d      	beq.n	8008f2e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	4798      	blx	r3
        }
        return;
 8008e3a:	e078      	b.n	8008f2e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d01c      	beq.n	8008e84 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d108      	bne.n	8008e6a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d030      	beq.n	8008ec2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	4798      	blx	r3
 8008e68:	e02b      	b.n	8008ec2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d027      	beq.n	8008ec2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	4798      	blx	r3
 8008e7a:	e022      	b.n	8008ec2 <HAL_DMA_IRQHandler+0x29e>
 8008e7c:	20000000 	.word	0x20000000
 8008e80:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d10f      	bne.n	8008eb2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	681a      	ldr	r2, [r3, #0]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f022 0210 	bic.w	r2, r2, #16
 8008ea0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2201      	movs	r2, #1
 8008eae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d003      	beq.n	8008ec2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d032      	beq.n	8008f30 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ece:	f003 0301 	and.w	r3, r3, #1
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d022      	beq.n	8008f1c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2205      	movs	r2, #5
 8008eda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	681a      	ldr	r2, [r3, #0]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f022 0201 	bic.w	r2, r2, #1
 8008eec:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	3301      	adds	r3, #1
 8008ef2:	60bb      	str	r3, [r7, #8]
 8008ef4:	697a      	ldr	r2, [r7, #20]
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d307      	bcc.n	8008f0a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f003 0301 	and.w	r3, r3, #1
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d1f2      	bne.n	8008eee <HAL_DMA_IRQHandler+0x2ca>
 8008f08:	e000      	b.n	8008f0c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8008f0a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2201      	movs	r2, #1
 8008f18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d005      	beq.n	8008f30 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	4798      	blx	r3
 8008f2c:	e000      	b.n	8008f30 <HAL_DMA_IRQHandler+0x30c>
        return;
 8008f2e:	bf00      	nop
    }
  }
}
 8008f30:	3718      	adds	r7, #24
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
 8008f36:	bf00      	nop

08008f38 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b083      	sub	sp, #12
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	370c      	adds	r7, #12
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr

08008f50 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b085      	sub	sp, #20
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	60f8      	str	r0, [r7, #12]
 8008f58:	60b9      	str	r1, [r7, #8]
 8008f5a:	607a      	str	r2, [r7, #4]
 8008f5c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	681a      	ldr	r2, [r3, #0]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008f6c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	683a      	ldr	r2, [r7, #0]
 8008f74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	689b      	ldr	r3, [r3, #8]
 8008f7a:	2b40      	cmp	r3, #64	; 0x40
 8008f7c:	d108      	bne.n	8008f90 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	687a      	ldr	r2, [r7, #4]
 8008f84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	68ba      	ldr	r2, [r7, #8]
 8008f8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008f8e:	e007      	b.n	8008fa0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	68ba      	ldr	r2, [r7, #8]
 8008f96:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	687a      	ldr	r2, [r7, #4]
 8008f9e:	60da      	str	r2, [r3, #12]
}
 8008fa0:	bf00      	nop
 8008fa2:	3714      	adds	r7, #20
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr

08008fac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b085      	sub	sp, #20
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	b2db      	uxtb	r3, r3
 8008fba:	3b10      	subs	r3, #16
 8008fbc:	4a14      	ldr	r2, [pc, #80]	; (8009010 <DMA_CalcBaseAndBitshift+0x64>)
 8008fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8008fc2:	091b      	lsrs	r3, r3, #4
 8008fc4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008fc6:	4a13      	ldr	r2, [pc, #76]	; (8009014 <DMA_CalcBaseAndBitshift+0x68>)
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	4413      	add	r3, r2
 8008fcc:	781b      	ldrb	r3, [r3, #0]
 8008fce:	461a      	mov	r2, r3
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2b03      	cmp	r3, #3
 8008fd8:	d909      	bls.n	8008fee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008fe2:	f023 0303 	bic.w	r3, r3, #3
 8008fe6:	1d1a      	adds	r2, r3, #4
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	659a      	str	r2, [r3, #88]	; 0x58
 8008fec:	e007      	b.n	8008ffe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008ff6:	f023 0303 	bic.w	r3, r3, #3
 8008ffa:	687a      	ldr	r2, [r7, #4]
 8008ffc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009002:	4618      	mov	r0, r3
 8009004:	3714      	adds	r7, #20
 8009006:	46bd      	mov	sp, r7
 8009008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900c:	4770      	bx	lr
 800900e:	bf00      	nop
 8009010:	aaaaaaab 	.word	0xaaaaaaab
 8009014:	08018380 	.word	0x08018380

08009018 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009018:	b480      	push	{r7}
 800901a:	b085      	sub	sp, #20
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009020:	2300      	movs	r3, #0
 8009022:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009028:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	699b      	ldr	r3, [r3, #24]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d11f      	bne.n	8009072 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	2b03      	cmp	r3, #3
 8009036:	d855      	bhi.n	80090e4 <DMA_CheckFifoParam+0xcc>
 8009038:	a201      	add	r2, pc, #4	; (adr r2, 8009040 <DMA_CheckFifoParam+0x28>)
 800903a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800903e:	bf00      	nop
 8009040:	08009051 	.word	0x08009051
 8009044:	08009063 	.word	0x08009063
 8009048:	08009051 	.word	0x08009051
 800904c:	080090e5 	.word	0x080090e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009054:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009058:	2b00      	cmp	r3, #0
 800905a:	d045      	beq.n	80090e8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800905c:	2301      	movs	r3, #1
 800905e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009060:	e042      	b.n	80090e8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009066:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800906a:	d13f      	bne.n	80090ec <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800906c:	2301      	movs	r3, #1
 800906e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009070:	e03c      	b.n	80090ec <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	699b      	ldr	r3, [r3, #24]
 8009076:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800907a:	d121      	bne.n	80090c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	2b03      	cmp	r3, #3
 8009080:	d836      	bhi.n	80090f0 <DMA_CheckFifoParam+0xd8>
 8009082:	a201      	add	r2, pc, #4	; (adr r2, 8009088 <DMA_CheckFifoParam+0x70>)
 8009084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009088:	08009099 	.word	0x08009099
 800908c:	0800909f 	.word	0x0800909f
 8009090:	08009099 	.word	0x08009099
 8009094:	080090b1 	.word	0x080090b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8009098:	2301      	movs	r3, #1
 800909a:	73fb      	strb	r3, [r7, #15]
      break;
 800909c:	e02f      	b.n	80090fe <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d024      	beq.n	80090f4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80090aa:	2301      	movs	r3, #1
 80090ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80090ae:	e021      	b.n	80090f4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80090b8:	d11e      	bne.n	80090f8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80090ba:	2301      	movs	r3, #1
 80090bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80090be:	e01b      	b.n	80090f8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	2b02      	cmp	r3, #2
 80090c4:	d902      	bls.n	80090cc <DMA_CheckFifoParam+0xb4>
 80090c6:	2b03      	cmp	r3, #3
 80090c8:	d003      	beq.n	80090d2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80090ca:	e018      	b.n	80090fe <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80090cc:	2301      	movs	r3, #1
 80090ce:	73fb      	strb	r3, [r7, #15]
      break;
 80090d0:	e015      	b.n	80090fe <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d00e      	beq.n	80090fc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80090de:	2301      	movs	r3, #1
 80090e0:	73fb      	strb	r3, [r7, #15]
      break;
 80090e2:	e00b      	b.n	80090fc <DMA_CheckFifoParam+0xe4>
      break;
 80090e4:	bf00      	nop
 80090e6:	e00a      	b.n	80090fe <DMA_CheckFifoParam+0xe6>
      break;
 80090e8:	bf00      	nop
 80090ea:	e008      	b.n	80090fe <DMA_CheckFifoParam+0xe6>
      break;
 80090ec:	bf00      	nop
 80090ee:	e006      	b.n	80090fe <DMA_CheckFifoParam+0xe6>
      break;
 80090f0:	bf00      	nop
 80090f2:	e004      	b.n	80090fe <DMA_CheckFifoParam+0xe6>
      break;
 80090f4:	bf00      	nop
 80090f6:	e002      	b.n	80090fe <DMA_CheckFifoParam+0xe6>
      break;   
 80090f8:	bf00      	nop
 80090fa:	e000      	b.n	80090fe <DMA_CheckFifoParam+0xe6>
      break;
 80090fc:	bf00      	nop
    }
  } 
  
  return status; 
 80090fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009100:	4618      	mov	r0, r3
 8009102:	3714      	adds	r7, #20
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr

0800910c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800910c:	b480      	push	{r7}
 800910e:	b089      	sub	sp, #36	; 0x24
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009116:	2300      	movs	r3, #0
 8009118:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800911a:	2300      	movs	r3, #0
 800911c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800911e:	2300      	movs	r3, #0
 8009120:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009122:	2300      	movs	r3, #0
 8009124:	61fb      	str	r3, [r7, #28]
 8009126:	e177      	b.n	8009418 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009128:	2201      	movs	r2, #1
 800912a:	69fb      	ldr	r3, [r7, #28]
 800912c:	fa02 f303 	lsl.w	r3, r2, r3
 8009130:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	697a      	ldr	r2, [r7, #20]
 8009138:	4013      	ands	r3, r2
 800913a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800913c:	693a      	ldr	r2, [r7, #16]
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	429a      	cmp	r2, r3
 8009142:	f040 8166 	bne.w	8009412 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	2b01      	cmp	r3, #1
 800914c:	d00b      	beq.n	8009166 <HAL_GPIO_Init+0x5a>
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	685b      	ldr	r3, [r3, #4]
 8009152:	2b02      	cmp	r3, #2
 8009154:	d007      	beq.n	8009166 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800915a:	2b11      	cmp	r3, #17
 800915c:	d003      	beq.n	8009166 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	2b12      	cmp	r3, #18
 8009164:	d130      	bne.n	80091c8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	689b      	ldr	r3, [r3, #8]
 800916a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800916c:	69fb      	ldr	r3, [r7, #28]
 800916e:	005b      	lsls	r3, r3, #1
 8009170:	2203      	movs	r2, #3
 8009172:	fa02 f303 	lsl.w	r3, r2, r3
 8009176:	43db      	mvns	r3, r3
 8009178:	69ba      	ldr	r2, [r7, #24]
 800917a:	4013      	ands	r3, r2
 800917c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	68da      	ldr	r2, [r3, #12]
 8009182:	69fb      	ldr	r3, [r7, #28]
 8009184:	005b      	lsls	r3, r3, #1
 8009186:	fa02 f303 	lsl.w	r3, r2, r3
 800918a:	69ba      	ldr	r2, [r7, #24]
 800918c:	4313      	orrs	r3, r2
 800918e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	69ba      	ldr	r2, [r7, #24]
 8009194:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	685b      	ldr	r3, [r3, #4]
 800919a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800919c:	2201      	movs	r2, #1
 800919e:	69fb      	ldr	r3, [r7, #28]
 80091a0:	fa02 f303 	lsl.w	r3, r2, r3
 80091a4:	43db      	mvns	r3, r3
 80091a6:	69ba      	ldr	r2, [r7, #24]
 80091a8:	4013      	ands	r3, r2
 80091aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	091b      	lsrs	r3, r3, #4
 80091b2:	f003 0201 	and.w	r2, r3, #1
 80091b6:	69fb      	ldr	r3, [r7, #28]
 80091b8:	fa02 f303 	lsl.w	r3, r2, r3
 80091bc:	69ba      	ldr	r2, [r7, #24]
 80091be:	4313      	orrs	r3, r2
 80091c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	69ba      	ldr	r2, [r7, #24]
 80091c6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	68db      	ldr	r3, [r3, #12]
 80091cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80091ce:	69fb      	ldr	r3, [r7, #28]
 80091d0:	005b      	lsls	r3, r3, #1
 80091d2:	2203      	movs	r2, #3
 80091d4:	fa02 f303 	lsl.w	r3, r2, r3
 80091d8:	43db      	mvns	r3, r3
 80091da:	69ba      	ldr	r2, [r7, #24]
 80091dc:	4013      	ands	r3, r2
 80091de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	689a      	ldr	r2, [r3, #8]
 80091e4:	69fb      	ldr	r3, [r7, #28]
 80091e6:	005b      	lsls	r3, r3, #1
 80091e8:	fa02 f303 	lsl.w	r3, r2, r3
 80091ec:	69ba      	ldr	r2, [r7, #24]
 80091ee:	4313      	orrs	r3, r2
 80091f0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	69ba      	ldr	r2, [r7, #24]
 80091f6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	2b02      	cmp	r3, #2
 80091fe:	d003      	beq.n	8009208 <HAL_GPIO_Init+0xfc>
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	685b      	ldr	r3, [r3, #4]
 8009204:	2b12      	cmp	r3, #18
 8009206:	d123      	bne.n	8009250 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009208:	69fb      	ldr	r3, [r7, #28]
 800920a:	08da      	lsrs	r2, r3, #3
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	3208      	adds	r2, #8
 8009210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009214:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009216:	69fb      	ldr	r3, [r7, #28]
 8009218:	f003 0307 	and.w	r3, r3, #7
 800921c:	009b      	lsls	r3, r3, #2
 800921e:	220f      	movs	r2, #15
 8009220:	fa02 f303 	lsl.w	r3, r2, r3
 8009224:	43db      	mvns	r3, r3
 8009226:	69ba      	ldr	r2, [r7, #24]
 8009228:	4013      	ands	r3, r2
 800922a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	691a      	ldr	r2, [r3, #16]
 8009230:	69fb      	ldr	r3, [r7, #28]
 8009232:	f003 0307 	and.w	r3, r3, #7
 8009236:	009b      	lsls	r3, r3, #2
 8009238:	fa02 f303 	lsl.w	r3, r2, r3
 800923c:	69ba      	ldr	r2, [r7, #24]
 800923e:	4313      	orrs	r3, r2
 8009240:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009242:	69fb      	ldr	r3, [r7, #28]
 8009244:	08da      	lsrs	r2, r3, #3
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	3208      	adds	r2, #8
 800924a:	69b9      	ldr	r1, [r7, #24]
 800924c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009256:	69fb      	ldr	r3, [r7, #28]
 8009258:	005b      	lsls	r3, r3, #1
 800925a:	2203      	movs	r2, #3
 800925c:	fa02 f303 	lsl.w	r3, r2, r3
 8009260:	43db      	mvns	r3, r3
 8009262:	69ba      	ldr	r2, [r7, #24]
 8009264:	4013      	ands	r3, r2
 8009266:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	685b      	ldr	r3, [r3, #4]
 800926c:	f003 0203 	and.w	r2, r3, #3
 8009270:	69fb      	ldr	r3, [r7, #28]
 8009272:	005b      	lsls	r3, r3, #1
 8009274:	fa02 f303 	lsl.w	r3, r2, r3
 8009278:	69ba      	ldr	r2, [r7, #24]
 800927a:	4313      	orrs	r3, r2
 800927c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	69ba      	ldr	r2, [r7, #24]
 8009282:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800928c:	2b00      	cmp	r3, #0
 800928e:	f000 80c0 	beq.w	8009412 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009292:	2300      	movs	r3, #0
 8009294:	60fb      	str	r3, [r7, #12]
 8009296:	4b65      	ldr	r3, [pc, #404]	; (800942c <HAL_GPIO_Init+0x320>)
 8009298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800929a:	4a64      	ldr	r2, [pc, #400]	; (800942c <HAL_GPIO_Init+0x320>)
 800929c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80092a0:	6453      	str	r3, [r2, #68]	; 0x44
 80092a2:	4b62      	ldr	r3, [pc, #392]	; (800942c <HAL_GPIO_Init+0x320>)
 80092a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092aa:	60fb      	str	r3, [r7, #12]
 80092ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80092ae:	4a60      	ldr	r2, [pc, #384]	; (8009430 <HAL_GPIO_Init+0x324>)
 80092b0:	69fb      	ldr	r3, [r7, #28]
 80092b2:	089b      	lsrs	r3, r3, #2
 80092b4:	3302      	adds	r3, #2
 80092b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80092bc:	69fb      	ldr	r3, [r7, #28]
 80092be:	f003 0303 	and.w	r3, r3, #3
 80092c2:	009b      	lsls	r3, r3, #2
 80092c4:	220f      	movs	r2, #15
 80092c6:	fa02 f303 	lsl.w	r3, r2, r3
 80092ca:	43db      	mvns	r3, r3
 80092cc:	69ba      	ldr	r2, [r7, #24]
 80092ce:	4013      	ands	r3, r2
 80092d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	4a57      	ldr	r2, [pc, #348]	; (8009434 <HAL_GPIO_Init+0x328>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d037      	beq.n	800934a <HAL_GPIO_Init+0x23e>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	4a56      	ldr	r2, [pc, #344]	; (8009438 <HAL_GPIO_Init+0x32c>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d031      	beq.n	8009346 <HAL_GPIO_Init+0x23a>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	4a55      	ldr	r2, [pc, #340]	; (800943c <HAL_GPIO_Init+0x330>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d02b      	beq.n	8009342 <HAL_GPIO_Init+0x236>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	4a54      	ldr	r2, [pc, #336]	; (8009440 <HAL_GPIO_Init+0x334>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d025      	beq.n	800933e <HAL_GPIO_Init+0x232>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	4a53      	ldr	r2, [pc, #332]	; (8009444 <HAL_GPIO_Init+0x338>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d01f      	beq.n	800933a <HAL_GPIO_Init+0x22e>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	4a52      	ldr	r2, [pc, #328]	; (8009448 <HAL_GPIO_Init+0x33c>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d019      	beq.n	8009336 <HAL_GPIO_Init+0x22a>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	4a51      	ldr	r2, [pc, #324]	; (800944c <HAL_GPIO_Init+0x340>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d013      	beq.n	8009332 <HAL_GPIO_Init+0x226>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	4a50      	ldr	r2, [pc, #320]	; (8009450 <HAL_GPIO_Init+0x344>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d00d      	beq.n	800932e <HAL_GPIO_Init+0x222>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	4a4f      	ldr	r2, [pc, #316]	; (8009454 <HAL_GPIO_Init+0x348>)
 8009316:	4293      	cmp	r3, r2
 8009318:	d007      	beq.n	800932a <HAL_GPIO_Init+0x21e>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	4a4e      	ldr	r2, [pc, #312]	; (8009458 <HAL_GPIO_Init+0x34c>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d101      	bne.n	8009326 <HAL_GPIO_Init+0x21a>
 8009322:	2309      	movs	r3, #9
 8009324:	e012      	b.n	800934c <HAL_GPIO_Init+0x240>
 8009326:	230a      	movs	r3, #10
 8009328:	e010      	b.n	800934c <HAL_GPIO_Init+0x240>
 800932a:	2308      	movs	r3, #8
 800932c:	e00e      	b.n	800934c <HAL_GPIO_Init+0x240>
 800932e:	2307      	movs	r3, #7
 8009330:	e00c      	b.n	800934c <HAL_GPIO_Init+0x240>
 8009332:	2306      	movs	r3, #6
 8009334:	e00a      	b.n	800934c <HAL_GPIO_Init+0x240>
 8009336:	2305      	movs	r3, #5
 8009338:	e008      	b.n	800934c <HAL_GPIO_Init+0x240>
 800933a:	2304      	movs	r3, #4
 800933c:	e006      	b.n	800934c <HAL_GPIO_Init+0x240>
 800933e:	2303      	movs	r3, #3
 8009340:	e004      	b.n	800934c <HAL_GPIO_Init+0x240>
 8009342:	2302      	movs	r3, #2
 8009344:	e002      	b.n	800934c <HAL_GPIO_Init+0x240>
 8009346:	2301      	movs	r3, #1
 8009348:	e000      	b.n	800934c <HAL_GPIO_Init+0x240>
 800934a:	2300      	movs	r3, #0
 800934c:	69fa      	ldr	r2, [r7, #28]
 800934e:	f002 0203 	and.w	r2, r2, #3
 8009352:	0092      	lsls	r2, r2, #2
 8009354:	4093      	lsls	r3, r2
 8009356:	69ba      	ldr	r2, [r7, #24]
 8009358:	4313      	orrs	r3, r2
 800935a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800935c:	4934      	ldr	r1, [pc, #208]	; (8009430 <HAL_GPIO_Init+0x324>)
 800935e:	69fb      	ldr	r3, [r7, #28]
 8009360:	089b      	lsrs	r3, r3, #2
 8009362:	3302      	adds	r3, #2
 8009364:	69ba      	ldr	r2, [r7, #24]
 8009366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800936a:	4b3c      	ldr	r3, [pc, #240]	; (800945c <HAL_GPIO_Init+0x350>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	43db      	mvns	r3, r3
 8009374:	69ba      	ldr	r2, [r7, #24]
 8009376:	4013      	ands	r3, r2
 8009378:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	685b      	ldr	r3, [r3, #4]
 800937e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009382:	2b00      	cmp	r3, #0
 8009384:	d003      	beq.n	800938e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8009386:	69ba      	ldr	r2, [r7, #24]
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	4313      	orrs	r3, r2
 800938c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800938e:	4a33      	ldr	r2, [pc, #204]	; (800945c <HAL_GPIO_Init+0x350>)
 8009390:	69bb      	ldr	r3, [r7, #24]
 8009392:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8009394:	4b31      	ldr	r3, [pc, #196]	; (800945c <HAL_GPIO_Init+0x350>)
 8009396:	685b      	ldr	r3, [r3, #4]
 8009398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	43db      	mvns	r3, r3
 800939e:	69ba      	ldr	r2, [r7, #24]
 80093a0:	4013      	ands	r3, r2
 80093a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d003      	beq.n	80093b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80093b0:	69ba      	ldr	r2, [r7, #24]
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	4313      	orrs	r3, r2
 80093b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80093b8:	4a28      	ldr	r2, [pc, #160]	; (800945c <HAL_GPIO_Init+0x350>)
 80093ba:	69bb      	ldr	r3, [r7, #24]
 80093bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80093be:	4b27      	ldr	r3, [pc, #156]	; (800945c <HAL_GPIO_Init+0x350>)
 80093c0:	689b      	ldr	r3, [r3, #8]
 80093c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	43db      	mvns	r3, r3
 80093c8:	69ba      	ldr	r2, [r7, #24]
 80093ca:	4013      	ands	r3, r2
 80093cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d003      	beq.n	80093e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80093da:	69ba      	ldr	r2, [r7, #24]
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	4313      	orrs	r3, r2
 80093e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80093e2:	4a1e      	ldr	r2, [pc, #120]	; (800945c <HAL_GPIO_Init+0x350>)
 80093e4:	69bb      	ldr	r3, [r7, #24]
 80093e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80093e8:	4b1c      	ldr	r3, [pc, #112]	; (800945c <HAL_GPIO_Init+0x350>)
 80093ea:	68db      	ldr	r3, [r3, #12]
 80093ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	43db      	mvns	r3, r3
 80093f2:	69ba      	ldr	r2, [r7, #24]
 80093f4:	4013      	ands	r3, r2
 80093f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	685b      	ldr	r3, [r3, #4]
 80093fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009400:	2b00      	cmp	r3, #0
 8009402:	d003      	beq.n	800940c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8009404:	69ba      	ldr	r2, [r7, #24]
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	4313      	orrs	r3, r2
 800940a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800940c:	4a13      	ldr	r2, [pc, #76]	; (800945c <HAL_GPIO_Init+0x350>)
 800940e:	69bb      	ldr	r3, [r7, #24]
 8009410:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009412:	69fb      	ldr	r3, [r7, #28]
 8009414:	3301      	adds	r3, #1
 8009416:	61fb      	str	r3, [r7, #28]
 8009418:	69fb      	ldr	r3, [r7, #28]
 800941a:	2b0f      	cmp	r3, #15
 800941c:	f67f ae84 	bls.w	8009128 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009420:	bf00      	nop
 8009422:	3724      	adds	r7, #36	; 0x24
 8009424:	46bd      	mov	sp, r7
 8009426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942a:	4770      	bx	lr
 800942c:	40023800 	.word	0x40023800
 8009430:	40013800 	.word	0x40013800
 8009434:	40020000 	.word	0x40020000
 8009438:	40020400 	.word	0x40020400
 800943c:	40020800 	.word	0x40020800
 8009440:	40020c00 	.word	0x40020c00
 8009444:	40021000 	.word	0x40021000
 8009448:	40021400 	.word	0x40021400
 800944c:	40021800 	.word	0x40021800
 8009450:	40021c00 	.word	0x40021c00
 8009454:	40022000 	.word	0x40022000
 8009458:	40022400 	.word	0x40022400
 800945c:	40013c00 	.word	0x40013c00

08009460 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009460:	b480      	push	{r7}
 8009462:	b085      	sub	sp, #20
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
 8009468:	460b      	mov	r3, r1
 800946a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	691a      	ldr	r2, [r3, #16]
 8009470:	887b      	ldrh	r3, [r7, #2]
 8009472:	4013      	ands	r3, r2
 8009474:	2b00      	cmp	r3, #0
 8009476:	d002      	beq.n	800947e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009478:	2301      	movs	r3, #1
 800947a:	73fb      	strb	r3, [r7, #15]
 800947c:	e001      	b.n	8009482 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800947e:	2300      	movs	r3, #0
 8009480:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009482:	7bfb      	ldrb	r3, [r7, #15]
}
 8009484:	4618      	mov	r0, r3
 8009486:	3714      	adds	r7, #20
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr

08009490 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009490:	b480      	push	{r7}
 8009492:	b083      	sub	sp, #12
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	460b      	mov	r3, r1
 800949a:	807b      	strh	r3, [r7, #2]
 800949c:	4613      	mov	r3, r2
 800949e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80094a0:	787b      	ldrb	r3, [r7, #1]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d003      	beq.n	80094ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80094a6:	887a      	ldrh	r2, [r7, #2]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80094ac:	e003      	b.n	80094b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80094ae:	887b      	ldrh	r3, [r7, #2]
 80094b0:	041a      	lsls	r2, r3, #16
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	619a      	str	r2, [r3, #24]
}
 80094b6:	bf00      	nop
 80094b8:	370c      	adds	r7, #12
 80094ba:	46bd      	mov	sp, r7
 80094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c0:	4770      	bx	lr
	...

080094c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b084      	sub	sp, #16
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d101      	bne.n	80094d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80094d2:	2301      	movs	r3, #1
 80094d4:	e11f      	b.n	8009716 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094dc:	b2db      	uxtb	r3, r3
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d106      	bne.n	80094f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2200      	movs	r2, #0
 80094e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f7fc fd24 	bl	8005f38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2224      	movs	r2, #36	; 0x24
 80094f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	681a      	ldr	r2, [r3, #0]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f022 0201 	bic.w	r2, r2, #1
 8009506:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	681a      	ldr	r2, [r3, #0]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009516:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009526:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009528:	f001 f96e 	bl	800a808 <HAL_RCC_GetPCLK1Freq>
 800952c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	685b      	ldr	r3, [r3, #4]
 8009532:	4a7b      	ldr	r2, [pc, #492]	; (8009720 <HAL_I2C_Init+0x25c>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d807      	bhi.n	8009548 <HAL_I2C_Init+0x84>
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	4a7a      	ldr	r2, [pc, #488]	; (8009724 <HAL_I2C_Init+0x260>)
 800953c:	4293      	cmp	r3, r2
 800953e:	bf94      	ite	ls
 8009540:	2301      	movls	r3, #1
 8009542:	2300      	movhi	r3, #0
 8009544:	b2db      	uxtb	r3, r3
 8009546:	e006      	b.n	8009556 <HAL_I2C_Init+0x92>
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	4a77      	ldr	r2, [pc, #476]	; (8009728 <HAL_I2C_Init+0x264>)
 800954c:	4293      	cmp	r3, r2
 800954e:	bf94      	ite	ls
 8009550:	2301      	movls	r3, #1
 8009552:	2300      	movhi	r3, #0
 8009554:	b2db      	uxtb	r3, r3
 8009556:	2b00      	cmp	r3, #0
 8009558:	d001      	beq.n	800955e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800955a:	2301      	movs	r3, #1
 800955c:	e0db      	b.n	8009716 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	4a72      	ldr	r2, [pc, #456]	; (800972c <HAL_I2C_Init+0x268>)
 8009562:	fba2 2303 	umull	r2, r3, r2, r3
 8009566:	0c9b      	lsrs	r3, r3, #18
 8009568:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	68ba      	ldr	r2, [r7, #8]
 800957a:	430a      	orrs	r2, r1
 800957c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	6a1b      	ldr	r3, [r3, #32]
 8009584:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	685b      	ldr	r3, [r3, #4]
 800958c:	4a64      	ldr	r2, [pc, #400]	; (8009720 <HAL_I2C_Init+0x25c>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d802      	bhi.n	8009598 <HAL_I2C_Init+0xd4>
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	3301      	adds	r3, #1
 8009596:	e009      	b.n	80095ac <HAL_I2C_Init+0xe8>
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800959e:	fb02 f303 	mul.w	r3, r2, r3
 80095a2:	4a63      	ldr	r2, [pc, #396]	; (8009730 <HAL_I2C_Init+0x26c>)
 80095a4:	fba2 2303 	umull	r2, r3, r2, r3
 80095a8:	099b      	lsrs	r3, r3, #6
 80095aa:	3301      	adds	r3, #1
 80095ac:	687a      	ldr	r2, [r7, #4]
 80095ae:	6812      	ldr	r2, [r2, #0]
 80095b0:	430b      	orrs	r3, r1
 80095b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	69db      	ldr	r3, [r3, #28]
 80095ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80095be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	685b      	ldr	r3, [r3, #4]
 80095c6:	4956      	ldr	r1, [pc, #344]	; (8009720 <HAL_I2C_Init+0x25c>)
 80095c8:	428b      	cmp	r3, r1
 80095ca:	d80d      	bhi.n	80095e8 <HAL_I2C_Init+0x124>
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	1e59      	subs	r1, r3, #1
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	005b      	lsls	r3, r3, #1
 80095d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80095da:	3301      	adds	r3, #1
 80095dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095e0:	2b04      	cmp	r3, #4
 80095e2:	bf38      	it	cc
 80095e4:	2304      	movcc	r3, #4
 80095e6:	e04f      	b.n	8009688 <HAL_I2C_Init+0x1c4>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	689b      	ldr	r3, [r3, #8]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d111      	bne.n	8009614 <HAL_I2C_Init+0x150>
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	1e58      	subs	r0, r3, #1
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6859      	ldr	r1, [r3, #4]
 80095f8:	460b      	mov	r3, r1
 80095fa:	005b      	lsls	r3, r3, #1
 80095fc:	440b      	add	r3, r1
 80095fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8009602:	3301      	adds	r3, #1
 8009604:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009608:	2b00      	cmp	r3, #0
 800960a:	bf0c      	ite	eq
 800960c:	2301      	moveq	r3, #1
 800960e:	2300      	movne	r3, #0
 8009610:	b2db      	uxtb	r3, r3
 8009612:	e012      	b.n	800963a <HAL_I2C_Init+0x176>
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	1e58      	subs	r0, r3, #1
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6859      	ldr	r1, [r3, #4]
 800961c:	460b      	mov	r3, r1
 800961e:	009b      	lsls	r3, r3, #2
 8009620:	440b      	add	r3, r1
 8009622:	0099      	lsls	r1, r3, #2
 8009624:	440b      	add	r3, r1
 8009626:	fbb0 f3f3 	udiv	r3, r0, r3
 800962a:	3301      	adds	r3, #1
 800962c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009630:	2b00      	cmp	r3, #0
 8009632:	bf0c      	ite	eq
 8009634:	2301      	moveq	r3, #1
 8009636:	2300      	movne	r3, #0
 8009638:	b2db      	uxtb	r3, r3
 800963a:	2b00      	cmp	r3, #0
 800963c:	d001      	beq.n	8009642 <HAL_I2C_Init+0x17e>
 800963e:	2301      	movs	r3, #1
 8009640:	e022      	b.n	8009688 <HAL_I2C_Init+0x1c4>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	689b      	ldr	r3, [r3, #8]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d10e      	bne.n	8009668 <HAL_I2C_Init+0x1a4>
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	1e58      	subs	r0, r3, #1
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6859      	ldr	r1, [r3, #4]
 8009652:	460b      	mov	r3, r1
 8009654:	005b      	lsls	r3, r3, #1
 8009656:	440b      	add	r3, r1
 8009658:	fbb0 f3f3 	udiv	r3, r0, r3
 800965c:	3301      	adds	r3, #1
 800965e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009662:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009666:	e00f      	b.n	8009688 <HAL_I2C_Init+0x1c4>
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	1e58      	subs	r0, r3, #1
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6859      	ldr	r1, [r3, #4]
 8009670:	460b      	mov	r3, r1
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	440b      	add	r3, r1
 8009676:	0099      	lsls	r1, r3, #2
 8009678:	440b      	add	r3, r1
 800967a:	fbb0 f3f3 	udiv	r3, r0, r3
 800967e:	3301      	adds	r3, #1
 8009680:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009684:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009688:	6879      	ldr	r1, [r7, #4]
 800968a:	6809      	ldr	r1, [r1, #0]
 800968c:	4313      	orrs	r3, r2
 800968e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	69da      	ldr	r2, [r3, #28]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6a1b      	ldr	r3, [r3, #32]
 80096a2:	431a      	orrs	r2, r3
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	430a      	orrs	r2, r1
 80096aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	689b      	ldr	r3, [r3, #8]
 80096b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80096b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80096ba:	687a      	ldr	r2, [r7, #4]
 80096bc:	6911      	ldr	r1, [r2, #16]
 80096be:	687a      	ldr	r2, [r7, #4]
 80096c0:	68d2      	ldr	r2, [r2, #12]
 80096c2:	4311      	orrs	r1, r2
 80096c4:	687a      	ldr	r2, [r7, #4]
 80096c6:	6812      	ldr	r2, [r2, #0]
 80096c8:	430b      	orrs	r3, r1
 80096ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	68db      	ldr	r3, [r3, #12]
 80096d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	695a      	ldr	r2, [r3, #20]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	699b      	ldr	r3, [r3, #24]
 80096de:	431a      	orrs	r2, r3
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	430a      	orrs	r2, r1
 80096e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	681a      	ldr	r2, [r3, #0]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f042 0201 	orr.w	r2, r2, #1
 80096f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2200      	movs	r2, #0
 80096fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2220      	movs	r2, #32
 8009702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2200      	movs	r2, #0
 800970a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2200      	movs	r2, #0
 8009710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009714:	2300      	movs	r3, #0
}
 8009716:	4618      	mov	r0, r3
 8009718:	3710      	adds	r7, #16
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
 800971e:	bf00      	nop
 8009720:	000186a0 	.word	0x000186a0
 8009724:	001e847f 	.word	0x001e847f
 8009728:	003d08ff 	.word	0x003d08ff
 800972c:	431bde83 	.word	0x431bde83
 8009730:	10624dd3 	.word	0x10624dd3

08009734 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b088      	sub	sp, #32
 8009738:	af02      	add	r7, sp, #8
 800973a:	60f8      	str	r0, [r7, #12]
 800973c:	607a      	str	r2, [r7, #4]
 800973e:	461a      	mov	r2, r3
 8009740:	460b      	mov	r3, r1
 8009742:	817b      	strh	r3, [r7, #10]
 8009744:	4613      	mov	r3, r2
 8009746:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009748:	f7fe fc00 	bl	8007f4c <HAL_GetTick>
 800974c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009754:	b2db      	uxtb	r3, r3
 8009756:	2b20      	cmp	r3, #32
 8009758:	f040 80e0 	bne.w	800991c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	9300      	str	r3, [sp, #0]
 8009760:	2319      	movs	r3, #25
 8009762:	2201      	movs	r2, #1
 8009764:	4970      	ldr	r1, [pc, #448]	; (8009928 <HAL_I2C_Master_Transmit+0x1f4>)
 8009766:	68f8      	ldr	r0, [r7, #12]
 8009768:	f000 fc58 	bl	800a01c <I2C_WaitOnFlagUntilTimeout>
 800976c:	4603      	mov	r3, r0
 800976e:	2b00      	cmp	r3, #0
 8009770:	d001      	beq.n	8009776 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8009772:	2302      	movs	r3, #2
 8009774:	e0d3      	b.n	800991e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800977c:	2b01      	cmp	r3, #1
 800977e:	d101      	bne.n	8009784 <HAL_I2C_Master_Transmit+0x50>
 8009780:	2302      	movs	r3, #2
 8009782:	e0cc      	b.n	800991e <HAL_I2C_Master_Transmit+0x1ea>
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	2201      	movs	r2, #1
 8009788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f003 0301 	and.w	r3, r3, #1
 8009796:	2b01      	cmp	r3, #1
 8009798:	d007      	beq.n	80097aa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	681a      	ldr	r2, [r3, #0]
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f042 0201 	orr.w	r2, r2, #1
 80097a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	681a      	ldr	r2, [r3, #0]
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80097b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	2221      	movs	r2, #33	; 0x21
 80097be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	2210      	movs	r2, #16
 80097c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	2200      	movs	r2, #0
 80097ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	687a      	ldr	r2, [r7, #4]
 80097d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	893a      	ldrh	r2, [r7, #8]
 80097da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097e0:	b29a      	uxth	r2, r3
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	4a50      	ldr	r2, [pc, #320]	; (800992c <HAL_I2C_Master_Transmit+0x1f8>)
 80097ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80097ec:	8979      	ldrh	r1, [r7, #10]
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	6a3a      	ldr	r2, [r7, #32]
 80097f2:	68f8      	ldr	r0, [r7, #12]
 80097f4:	f000 fac2 	bl	8009d7c <I2C_MasterRequestWrite>
 80097f8:	4603      	mov	r3, r0
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d001      	beq.n	8009802 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80097fe:	2301      	movs	r3, #1
 8009800:	e08d      	b.n	800991e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009802:	2300      	movs	r3, #0
 8009804:	613b      	str	r3, [r7, #16]
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	695b      	ldr	r3, [r3, #20]
 800980c:	613b      	str	r3, [r7, #16]
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	699b      	ldr	r3, [r3, #24]
 8009814:	613b      	str	r3, [r7, #16]
 8009816:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009818:	e066      	b.n	80098e8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800981a:	697a      	ldr	r2, [r7, #20]
 800981c:	6a39      	ldr	r1, [r7, #32]
 800981e:	68f8      	ldr	r0, [r7, #12]
 8009820:	f000 fcd2 	bl	800a1c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8009824:	4603      	mov	r3, r0
 8009826:	2b00      	cmp	r3, #0
 8009828:	d00d      	beq.n	8009846 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800982e:	2b04      	cmp	r3, #4
 8009830:	d107      	bne.n	8009842 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	681a      	ldr	r2, [r3, #0]
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009840:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009842:	2301      	movs	r3, #1
 8009844:	e06b      	b.n	800991e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800984a:	781a      	ldrb	r2, [r3, #0]
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009856:	1c5a      	adds	r2, r3, #1
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009860:	b29b      	uxth	r3, r3
 8009862:	3b01      	subs	r3, #1
 8009864:	b29a      	uxth	r2, r3
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800986e:	3b01      	subs	r3, #1
 8009870:	b29a      	uxth	r2, r3
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	695b      	ldr	r3, [r3, #20]
 800987c:	f003 0304 	and.w	r3, r3, #4
 8009880:	2b04      	cmp	r3, #4
 8009882:	d11b      	bne.n	80098bc <HAL_I2C_Master_Transmit+0x188>
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009888:	2b00      	cmp	r3, #0
 800988a:	d017      	beq.n	80098bc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009890:	781a      	ldrb	r2, [r3, #0]
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800989c:	1c5a      	adds	r2, r3, #1
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	3b01      	subs	r3, #1
 80098aa:	b29a      	uxth	r2, r3
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098b4:	3b01      	subs	r3, #1
 80098b6:	b29a      	uxth	r2, r3
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80098bc:	697a      	ldr	r2, [r7, #20]
 80098be:	6a39      	ldr	r1, [r7, #32]
 80098c0:	68f8      	ldr	r0, [r7, #12]
 80098c2:	f000 fcc2 	bl	800a24a <I2C_WaitOnBTFFlagUntilTimeout>
 80098c6:	4603      	mov	r3, r0
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d00d      	beq.n	80098e8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098d0:	2b04      	cmp	r3, #4
 80098d2:	d107      	bne.n	80098e4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	681a      	ldr	r2, [r3, #0]
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098e2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80098e4:	2301      	movs	r3, #1
 80098e6:	e01a      	b.n	800991e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d194      	bne.n	800981a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	681a      	ldr	r2, [r3, #0]
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2220      	movs	r2, #32
 8009904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2200      	movs	r2, #0
 800990c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	2200      	movs	r2, #0
 8009914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009918:	2300      	movs	r3, #0
 800991a:	e000      	b.n	800991e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800991c:	2302      	movs	r3, #2
  }
}
 800991e:	4618      	mov	r0, r3
 8009920:	3718      	adds	r7, #24
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
 8009926:	bf00      	nop
 8009928:	00100002 	.word	0x00100002
 800992c:	ffff0000 	.word	0xffff0000

08009930 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b08c      	sub	sp, #48	; 0x30
 8009934:	af02      	add	r7, sp, #8
 8009936:	60f8      	str	r0, [r7, #12]
 8009938:	607a      	str	r2, [r7, #4]
 800993a:	461a      	mov	r2, r3
 800993c:	460b      	mov	r3, r1
 800993e:	817b      	strh	r3, [r7, #10]
 8009940:	4613      	mov	r3, r2
 8009942:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009944:	f7fe fb02 	bl	8007f4c <HAL_GetTick>
 8009948:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009950:	b2db      	uxtb	r3, r3
 8009952:	2b20      	cmp	r3, #32
 8009954:	f040 820b 	bne.w	8009d6e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995a:	9300      	str	r3, [sp, #0]
 800995c:	2319      	movs	r3, #25
 800995e:	2201      	movs	r2, #1
 8009960:	497c      	ldr	r1, [pc, #496]	; (8009b54 <HAL_I2C_Master_Receive+0x224>)
 8009962:	68f8      	ldr	r0, [r7, #12]
 8009964:	f000 fb5a 	bl	800a01c <I2C_WaitOnFlagUntilTimeout>
 8009968:	4603      	mov	r3, r0
 800996a:	2b00      	cmp	r3, #0
 800996c:	d001      	beq.n	8009972 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800996e:	2302      	movs	r3, #2
 8009970:	e1fe      	b.n	8009d70 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009978:	2b01      	cmp	r3, #1
 800997a:	d101      	bne.n	8009980 <HAL_I2C_Master_Receive+0x50>
 800997c:	2302      	movs	r3, #2
 800997e:	e1f7      	b.n	8009d70 <HAL_I2C_Master_Receive+0x440>
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2201      	movs	r2, #1
 8009984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f003 0301 	and.w	r3, r3, #1
 8009992:	2b01      	cmp	r3, #1
 8009994:	d007      	beq.n	80099a6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	681a      	ldr	r2, [r3, #0]
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f042 0201 	orr.w	r2, r2, #1
 80099a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	681a      	ldr	r2, [r3, #0]
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80099b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	2222      	movs	r2, #34	; 0x22
 80099ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	2210      	movs	r2, #16
 80099c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	2200      	movs	r2, #0
 80099ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	687a      	ldr	r2, [r7, #4]
 80099d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	893a      	ldrh	r2, [r7, #8]
 80099d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099dc:	b29a      	uxth	r2, r3
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	4a5c      	ldr	r2, [pc, #368]	; (8009b58 <HAL_I2C_Master_Receive+0x228>)
 80099e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80099e8:	8979      	ldrh	r1, [r7, #10]
 80099ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099ee:	68f8      	ldr	r0, [r7, #12]
 80099f0:	f000 fa46 	bl	8009e80 <I2C_MasterRequestRead>
 80099f4:	4603      	mov	r3, r0
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d001      	beq.n	80099fe <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80099fa:	2301      	movs	r3, #1
 80099fc:	e1b8      	b.n	8009d70 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d113      	bne.n	8009a2e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a06:	2300      	movs	r3, #0
 8009a08:	623b      	str	r3, [r7, #32]
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	695b      	ldr	r3, [r3, #20]
 8009a10:	623b      	str	r3, [r7, #32]
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	699b      	ldr	r3, [r3, #24]
 8009a18:	623b      	str	r3, [r7, #32]
 8009a1a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	681a      	ldr	r2, [r3, #0]
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a2a:	601a      	str	r2, [r3, #0]
 8009a2c:	e18c      	b.n	8009d48 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a32:	2b01      	cmp	r3, #1
 8009a34:	d11b      	bne.n	8009a6e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	681a      	ldr	r2, [r3, #0]
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a46:	2300      	movs	r3, #0
 8009a48:	61fb      	str	r3, [r7, #28]
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	695b      	ldr	r3, [r3, #20]
 8009a50:	61fb      	str	r3, [r7, #28]
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	699b      	ldr	r3, [r3, #24]
 8009a58:	61fb      	str	r3, [r7, #28]
 8009a5a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	681a      	ldr	r2, [r3, #0]
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a6a:	601a      	str	r2, [r3, #0]
 8009a6c:	e16c      	b.n	8009d48 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a72:	2b02      	cmp	r3, #2
 8009a74:	d11b      	bne.n	8009aae <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	681a      	ldr	r2, [r3, #0]
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a84:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	681a      	ldr	r2, [r3, #0]
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009a94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a96:	2300      	movs	r3, #0
 8009a98:	61bb      	str	r3, [r7, #24]
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	695b      	ldr	r3, [r3, #20]
 8009aa0:	61bb      	str	r3, [r7, #24]
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	699b      	ldr	r3, [r3, #24]
 8009aa8:	61bb      	str	r3, [r7, #24]
 8009aaa:	69bb      	ldr	r3, [r7, #24]
 8009aac:	e14c      	b.n	8009d48 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	681a      	ldr	r2, [r3, #0]
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009abc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009abe:	2300      	movs	r3, #0
 8009ac0:	617b      	str	r3, [r7, #20]
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	695b      	ldr	r3, [r3, #20]
 8009ac8:	617b      	str	r3, [r7, #20]
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	699b      	ldr	r3, [r3, #24]
 8009ad0:	617b      	str	r3, [r7, #20]
 8009ad2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009ad4:	e138      	b.n	8009d48 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ada:	2b03      	cmp	r3, #3
 8009adc:	f200 80f1 	bhi.w	8009cc2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d123      	bne.n	8009b30 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009aea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009aec:	68f8      	ldr	r0, [r7, #12]
 8009aee:	f000 fbed 	bl	800a2cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8009af2:	4603      	mov	r3, r0
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d001      	beq.n	8009afc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8009af8:	2301      	movs	r3, #1
 8009afa:	e139      	b.n	8009d70 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	691a      	ldr	r2, [r3, #16]
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b06:	b2d2      	uxtb	r2, r2
 8009b08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b0e:	1c5a      	adds	r2, r3, #1
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b18:	3b01      	subs	r3, #1
 8009b1a:	b29a      	uxth	r2, r3
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	3b01      	subs	r3, #1
 8009b28:	b29a      	uxth	r2, r3
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009b2e:	e10b      	b.n	8009d48 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b34:	2b02      	cmp	r3, #2
 8009b36:	d14e      	bne.n	8009bd6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b3a:	9300      	str	r3, [sp, #0]
 8009b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b3e:	2200      	movs	r2, #0
 8009b40:	4906      	ldr	r1, [pc, #24]	; (8009b5c <HAL_I2C_Master_Receive+0x22c>)
 8009b42:	68f8      	ldr	r0, [r7, #12]
 8009b44:	f000 fa6a 	bl	800a01c <I2C_WaitOnFlagUntilTimeout>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d008      	beq.n	8009b60 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8009b4e:	2301      	movs	r3, #1
 8009b50:	e10e      	b.n	8009d70 <HAL_I2C_Master_Receive+0x440>
 8009b52:	bf00      	nop
 8009b54:	00100002 	.word	0x00100002
 8009b58:	ffff0000 	.word	0xffff0000
 8009b5c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	681a      	ldr	r2, [r3, #0]
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	691a      	ldr	r2, [r3, #16]
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b7a:	b2d2      	uxtb	r2, r2
 8009b7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b82:	1c5a      	adds	r2, r3, #1
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b8c:	3b01      	subs	r3, #1
 8009b8e:	b29a      	uxth	r2, r3
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b98:	b29b      	uxth	r3, r3
 8009b9a:	3b01      	subs	r3, #1
 8009b9c:	b29a      	uxth	r2, r3
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	691a      	ldr	r2, [r3, #16]
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bac:	b2d2      	uxtb	r2, r2
 8009bae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bb4:	1c5a      	adds	r2, r3, #1
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bbe:	3b01      	subs	r3, #1
 8009bc0:	b29a      	uxth	r2, r3
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bca:	b29b      	uxth	r3, r3
 8009bcc:	3b01      	subs	r3, #1
 8009bce:	b29a      	uxth	r2, r3
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009bd4:	e0b8      	b.n	8009d48 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd8:	9300      	str	r3, [sp, #0]
 8009bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bdc:	2200      	movs	r2, #0
 8009bde:	4966      	ldr	r1, [pc, #408]	; (8009d78 <HAL_I2C_Master_Receive+0x448>)
 8009be0:	68f8      	ldr	r0, [r7, #12]
 8009be2:	f000 fa1b 	bl	800a01c <I2C_WaitOnFlagUntilTimeout>
 8009be6:	4603      	mov	r3, r0
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d001      	beq.n	8009bf0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8009bec:	2301      	movs	r3, #1
 8009bee:	e0bf      	b.n	8009d70 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	681a      	ldr	r2, [r3, #0]
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009bfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	691a      	ldr	r2, [r3, #16]
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c0a:	b2d2      	uxtb	r2, r2
 8009c0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c12:	1c5a      	adds	r2, r3, #1
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c1c:	3b01      	subs	r3, #1
 8009c1e:	b29a      	uxth	r2, r3
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c28:	b29b      	uxth	r3, r3
 8009c2a:	3b01      	subs	r3, #1
 8009c2c:	b29a      	uxth	r2, r3
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c34:	9300      	str	r3, [sp, #0]
 8009c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c38:	2200      	movs	r2, #0
 8009c3a:	494f      	ldr	r1, [pc, #316]	; (8009d78 <HAL_I2C_Master_Receive+0x448>)
 8009c3c:	68f8      	ldr	r0, [r7, #12]
 8009c3e:	f000 f9ed 	bl	800a01c <I2C_WaitOnFlagUntilTimeout>
 8009c42:	4603      	mov	r3, r0
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d001      	beq.n	8009c4c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	e091      	b.n	8009d70 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	681a      	ldr	r2, [r3, #0]
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	691a      	ldr	r2, [r3, #16]
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c66:	b2d2      	uxtb	r2, r2
 8009c68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c6e:	1c5a      	adds	r2, r3, #1
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c78:	3b01      	subs	r3, #1
 8009c7a:	b29a      	uxth	r2, r3
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c84:	b29b      	uxth	r3, r3
 8009c86:	3b01      	subs	r3, #1
 8009c88:	b29a      	uxth	r2, r3
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	691a      	ldr	r2, [r3, #16]
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c98:	b2d2      	uxtb	r2, r2
 8009c9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca0:	1c5a      	adds	r2, r3, #1
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009caa:	3b01      	subs	r3, #1
 8009cac:	b29a      	uxth	r2, r3
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	3b01      	subs	r3, #1
 8009cba:	b29a      	uxth	r2, r3
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009cc0:	e042      	b.n	8009d48 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009cc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cc4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009cc6:	68f8      	ldr	r0, [r7, #12]
 8009cc8:	f000 fb00 	bl	800a2cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d001      	beq.n	8009cd6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	e04c      	b.n	8009d70 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	691a      	ldr	r2, [r3, #16]
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ce0:	b2d2      	uxtb	r2, r2
 8009ce2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ce8:	1c5a      	adds	r2, r3, #1
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cf2:	3b01      	subs	r3, #1
 8009cf4:	b29a      	uxth	r2, r3
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	3b01      	subs	r3, #1
 8009d02:	b29a      	uxth	r2, r3
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	695b      	ldr	r3, [r3, #20]
 8009d0e:	f003 0304 	and.w	r3, r3, #4
 8009d12:	2b04      	cmp	r3, #4
 8009d14:	d118      	bne.n	8009d48 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	691a      	ldr	r2, [r3, #16]
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d20:	b2d2      	uxtb	r2, r2
 8009d22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d28:	1c5a      	adds	r2, r3, #1
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d32:	3b01      	subs	r3, #1
 8009d34:	b29a      	uxth	r2, r3
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d3e:	b29b      	uxth	r3, r3
 8009d40:	3b01      	subs	r3, #1
 8009d42:	b29a      	uxth	r2, r3
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	f47f aec2 	bne.w	8009ad6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	2220      	movs	r2, #32
 8009d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	2200      	movs	r2, #0
 8009d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	e000      	b.n	8009d70 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8009d6e:	2302      	movs	r3, #2
  }
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	3728      	adds	r7, #40	; 0x28
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd80      	pop	{r7, pc}
 8009d78:	00010004 	.word	0x00010004

08009d7c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b088      	sub	sp, #32
 8009d80:	af02      	add	r7, sp, #8
 8009d82:	60f8      	str	r0, [r7, #12]
 8009d84:	607a      	str	r2, [r7, #4]
 8009d86:	603b      	str	r3, [r7, #0]
 8009d88:	460b      	mov	r3, r1
 8009d8a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d90:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	2b08      	cmp	r3, #8
 8009d96:	d006      	beq.n	8009da6 <I2C_MasterRequestWrite+0x2a>
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	d003      	beq.n	8009da6 <I2C_MasterRequestWrite+0x2a>
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009da4:	d108      	bne.n	8009db8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	681a      	ldr	r2, [r3, #0]
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009db4:	601a      	str	r2, [r3, #0]
 8009db6:	e00b      	b.n	8009dd0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dbc:	2b12      	cmp	r3, #18
 8009dbe:	d107      	bne.n	8009dd0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	681a      	ldr	r2, [r3, #0]
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009dce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	9300      	str	r3, [sp, #0]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009ddc:	68f8      	ldr	r0, [r7, #12]
 8009dde:	f000 f91d 	bl	800a01c <I2C_WaitOnFlagUntilTimeout>
 8009de2:	4603      	mov	r3, r0
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d00d      	beq.n	8009e04 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009df2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009df6:	d103      	bne.n	8009e00 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009dfe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009e00:	2303      	movs	r3, #3
 8009e02:	e035      	b.n	8009e70 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	691b      	ldr	r3, [r3, #16]
 8009e08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e0c:	d108      	bne.n	8009e20 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009e0e:	897b      	ldrh	r3, [r7, #10]
 8009e10:	b2db      	uxtb	r3, r3
 8009e12:	461a      	mov	r2, r3
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009e1c:	611a      	str	r2, [r3, #16]
 8009e1e:	e01b      	b.n	8009e58 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009e20:	897b      	ldrh	r3, [r7, #10]
 8009e22:	11db      	asrs	r3, r3, #7
 8009e24:	b2db      	uxtb	r3, r3
 8009e26:	f003 0306 	and.w	r3, r3, #6
 8009e2a:	b2db      	uxtb	r3, r3
 8009e2c:	f063 030f 	orn	r3, r3, #15
 8009e30:	b2da      	uxtb	r2, r3
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	687a      	ldr	r2, [r7, #4]
 8009e3c:	490e      	ldr	r1, [pc, #56]	; (8009e78 <I2C_MasterRequestWrite+0xfc>)
 8009e3e:	68f8      	ldr	r0, [r7, #12]
 8009e40:	f000 f943 	bl	800a0ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009e44:	4603      	mov	r3, r0
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d001      	beq.n	8009e4e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	e010      	b.n	8009e70 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009e4e:	897b      	ldrh	r3, [r7, #10]
 8009e50:	b2da      	uxtb	r2, r3
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	687a      	ldr	r2, [r7, #4]
 8009e5c:	4907      	ldr	r1, [pc, #28]	; (8009e7c <I2C_MasterRequestWrite+0x100>)
 8009e5e:	68f8      	ldr	r0, [r7, #12]
 8009e60:	f000 f933 	bl	800a0ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009e64:	4603      	mov	r3, r0
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d001      	beq.n	8009e6e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	e000      	b.n	8009e70 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009e6e:	2300      	movs	r3, #0
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3718      	adds	r7, #24
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}
 8009e78:	00010008 	.word	0x00010008
 8009e7c:	00010002 	.word	0x00010002

08009e80 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b088      	sub	sp, #32
 8009e84:	af02      	add	r7, sp, #8
 8009e86:	60f8      	str	r0, [r7, #12]
 8009e88:	607a      	str	r2, [r7, #4]
 8009e8a:	603b      	str	r3, [r7, #0]
 8009e8c:	460b      	mov	r3, r1
 8009e8e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e94:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	681a      	ldr	r2, [r3, #0]
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009ea4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	2b08      	cmp	r3, #8
 8009eaa:	d006      	beq.n	8009eba <I2C_MasterRequestRead+0x3a>
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	2b01      	cmp	r3, #1
 8009eb0:	d003      	beq.n	8009eba <I2C_MasterRequestRead+0x3a>
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009eb8:	d108      	bne.n	8009ecc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	681a      	ldr	r2, [r3, #0]
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ec8:	601a      	str	r2, [r3, #0]
 8009eca:	e00b      	b.n	8009ee4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ed0:	2b11      	cmp	r3, #17
 8009ed2:	d107      	bne.n	8009ee4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	681a      	ldr	r2, [r3, #0]
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ee2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	9300      	str	r3, [sp, #0]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2200      	movs	r2, #0
 8009eec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009ef0:	68f8      	ldr	r0, [r7, #12]
 8009ef2:	f000 f893 	bl	800a01c <I2C_WaitOnFlagUntilTimeout>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d00d      	beq.n	8009f18 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f0a:	d103      	bne.n	8009f14 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f12:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009f14:	2303      	movs	r3, #3
 8009f16:	e079      	b.n	800a00c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	691b      	ldr	r3, [r3, #16]
 8009f1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009f20:	d108      	bne.n	8009f34 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009f22:	897b      	ldrh	r3, [r7, #10]
 8009f24:	b2db      	uxtb	r3, r3
 8009f26:	f043 0301 	orr.w	r3, r3, #1
 8009f2a:	b2da      	uxtb	r2, r3
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	611a      	str	r2, [r3, #16]
 8009f32:	e05f      	b.n	8009ff4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009f34:	897b      	ldrh	r3, [r7, #10]
 8009f36:	11db      	asrs	r3, r3, #7
 8009f38:	b2db      	uxtb	r3, r3
 8009f3a:	f003 0306 	and.w	r3, r3, #6
 8009f3e:	b2db      	uxtb	r3, r3
 8009f40:	f063 030f 	orn	r3, r3, #15
 8009f44:	b2da      	uxtb	r2, r3
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	4930      	ldr	r1, [pc, #192]	; (800a014 <I2C_MasterRequestRead+0x194>)
 8009f52:	68f8      	ldr	r0, [r7, #12]
 8009f54:	f000 f8b9 	bl	800a0ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d001      	beq.n	8009f62 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8009f5e:	2301      	movs	r3, #1
 8009f60:	e054      	b.n	800a00c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009f62:	897b      	ldrh	r3, [r7, #10]
 8009f64:	b2da      	uxtb	r2, r3
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	687a      	ldr	r2, [r7, #4]
 8009f70:	4929      	ldr	r1, [pc, #164]	; (800a018 <I2C_MasterRequestRead+0x198>)
 8009f72:	68f8      	ldr	r0, [r7, #12]
 8009f74:	f000 f8a9 	bl	800a0ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d001      	beq.n	8009f82 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8009f7e:	2301      	movs	r3, #1
 8009f80:	e044      	b.n	800a00c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009f82:	2300      	movs	r3, #0
 8009f84:	613b      	str	r3, [r7, #16]
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	695b      	ldr	r3, [r3, #20]
 8009f8c:	613b      	str	r3, [r7, #16]
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	699b      	ldr	r3, [r3, #24]
 8009f94:	613b      	str	r3, [r7, #16]
 8009f96:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	681a      	ldr	r2, [r3, #0]
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009fa6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	9300      	str	r3, [sp, #0]
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009fb4:	68f8      	ldr	r0, [r7, #12]
 8009fb6:	f000 f831 	bl	800a01c <I2C_WaitOnFlagUntilTimeout>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d00d      	beq.n	8009fdc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fce:	d103      	bne.n	8009fd8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009fd6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8009fd8:	2303      	movs	r3, #3
 8009fda:	e017      	b.n	800a00c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8009fdc:	897b      	ldrh	r3, [r7, #10]
 8009fde:	11db      	asrs	r3, r3, #7
 8009fe0:	b2db      	uxtb	r3, r3
 8009fe2:	f003 0306 	and.w	r3, r3, #6
 8009fe6:	b2db      	uxtb	r3, r3
 8009fe8:	f063 030e 	orn	r3, r3, #14
 8009fec:	b2da      	uxtb	r2, r3
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	687a      	ldr	r2, [r7, #4]
 8009ff8:	4907      	ldr	r1, [pc, #28]	; (800a018 <I2C_MasterRequestRead+0x198>)
 8009ffa:	68f8      	ldr	r0, [r7, #12]
 8009ffc:	f000 f865 	bl	800a0ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a000:	4603      	mov	r3, r0
 800a002:	2b00      	cmp	r3, #0
 800a004:	d001      	beq.n	800a00a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800a006:	2301      	movs	r3, #1
 800a008:	e000      	b.n	800a00c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800a00a:	2300      	movs	r3, #0
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3718      	adds	r7, #24
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}
 800a014:	00010008 	.word	0x00010008
 800a018:	00010002 	.word	0x00010002

0800a01c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b084      	sub	sp, #16
 800a020:	af00      	add	r7, sp, #0
 800a022:	60f8      	str	r0, [r7, #12]
 800a024:	60b9      	str	r1, [r7, #8]
 800a026:	603b      	str	r3, [r7, #0]
 800a028:	4613      	mov	r3, r2
 800a02a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a02c:	e025      	b.n	800a07a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a034:	d021      	beq.n	800a07a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a036:	f7fd ff89 	bl	8007f4c <HAL_GetTick>
 800a03a:	4602      	mov	r2, r0
 800a03c:	69bb      	ldr	r3, [r7, #24]
 800a03e:	1ad3      	subs	r3, r2, r3
 800a040:	683a      	ldr	r2, [r7, #0]
 800a042:	429a      	cmp	r2, r3
 800a044:	d302      	bcc.n	800a04c <I2C_WaitOnFlagUntilTimeout+0x30>
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d116      	bne.n	800a07a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	2200      	movs	r2, #0
 800a050:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2220      	movs	r2, #32
 800a056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	2200      	movs	r2, #0
 800a05e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a066:	f043 0220 	orr.w	r2, r3, #32
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	2200      	movs	r2, #0
 800a072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a076:	2301      	movs	r3, #1
 800a078:	e023      	b.n	800a0c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	0c1b      	lsrs	r3, r3, #16
 800a07e:	b2db      	uxtb	r3, r3
 800a080:	2b01      	cmp	r3, #1
 800a082:	d10d      	bne.n	800a0a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	695b      	ldr	r3, [r3, #20]
 800a08a:	43da      	mvns	r2, r3
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	4013      	ands	r3, r2
 800a090:	b29b      	uxth	r3, r3
 800a092:	2b00      	cmp	r3, #0
 800a094:	bf0c      	ite	eq
 800a096:	2301      	moveq	r3, #1
 800a098:	2300      	movne	r3, #0
 800a09a:	b2db      	uxtb	r3, r3
 800a09c:	461a      	mov	r2, r3
 800a09e:	e00c      	b.n	800a0ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	699b      	ldr	r3, [r3, #24]
 800a0a6:	43da      	mvns	r2, r3
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	4013      	ands	r3, r2
 800a0ac:	b29b      	uxth	r3, r3
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	bf0c      	ite	eq
 800a0b2:	2301      	moveq	r3, #1
 800a0b4:	2300      	movne	r3, #0
 800a0b6:	b2db      	uxtb	r3, r3
 800a0b8:	461a      	mov	r2, r3
 800a0ba:	79fb      	ldrb	r3, [r7, #7]
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	d0b6      	beq.n	800a02e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a0c0:	2300      	movs	r3, #0
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3710      	adds	r7, #16
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}

0800a0ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a0ca:	b580      	push	{r7, lr}
 800a0cc:	b084      	sub	sp, #16
 800a0ce:	af00      	add	r7, sp, #0
 800a0d0:	60f8      	str	r0, [r7, #12]
 800a0d2:	60b9      	str	r1, [r7, #8]
 800a0d4:	607a      	str	r2, [r7, #4]
 800a0d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a0d8:	e051      	b.n	800a17e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	695b      	ldr	r3, [r3, #20]
 800a0e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a0e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0e8:	d123      	bne.n	800a132 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	681a      	ldr	r2, [r3, #0]
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a0f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a102:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2200      	movs	r2, #0
 800a108:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	2220      	movs	r2, #32
 800a10e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2200      	movs	r2, #0
 800a116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a11e:	f043 0204 	orr.w	r2, r3, #4
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2200      	movs	r2, #0
 800a12a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a12e:	2301      	movs	r3, #1
 800a130:	e046      	b.n	800a1c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a138:	d021      	beq.n	800a17e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a13a:	f7fd ff07 	bl	8007f4c <HAL_GetTick>
 800a13e:	4602      	mov	r2, r0
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	1ad3      	subs	r3, r2, r3
 800a144:	687a      	ldr	r2, [r7, #4]
 800a146:	429a      	cmp	r2, r3
 800a148:	d302      	bcc.n	800a150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d116      	bne.n	800a17e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	2200      	movs	r2, #0
 800a154:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	2220      	movs	r2, #32
 800a15a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2200      	movs	r2, #0
 800a162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a16a:	f043 0220 	orr.w	r2, r3, #32
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	2200      	movs	r2, #0
 800a176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a17a:	2301      	movs	r3, #1
 800a17c:	e020      	b.n	800a1c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	0c1b      	lsrs	r3, r3, #16
 800a182:	b2db      	uxtb	r3, r3
 800a184:	2b01      	cmp	r3, #1
 800a186:	d10c      	bne.n	800a1a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	695b      	ldr	r3, [r3, #20]
 800a18e:	43da      	mvns	r2, r3
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	4013      	ands	r3, r2
 800a194:	b29b      	uxth	r3, r3
 800a196:	2b00      	cmp	r3, #0
 800a198:	bf14      	ite	ne
 800a19a:	2301      	movne	r3, #1
 800a19c:	2300      	moveq	r3, #0
 800a19e:	b2db      	uxtb	r3, r3
 800a1a0:	e00b      	b.n	800a1ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	699b      	ldr	r3, [r3, #24]
 800a1a8:	43da      	mvns	r2, r3
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	4013      	ands	r3, r2
 800a1ae:	b29b      	uxth	r3, r3
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	bf14      	ite	ne
 800a1b4:	2301      	movne	r3, #1
 800a1b6:	2300      	moveq	r3, #0
 800a1b8:	b2db      	uxtb	r3, r3
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d18d      	bne.n	800a0da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800a1be:	2300      	movs	r3, #0
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	3710      	adds	r7, #16
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}

0800a1c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b084      	sub	sp, #16
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	60f8      	str	r0, [r7, #12]
 800a1d0:	60b9      	str	r1, [r7, #8]
 800a1d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a1d4:	e02d      	b.n	800a232 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a1d6:	68f8      	ldr	r0, [r7, #12]
 800a1d8:	f000 f8ce 	bl	800a378 <I2C_IsAcknowledgeFailed>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d001      	beq.n	800a1e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	e02d      	b.n	800a242 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1ec:	d021      	beq.n	800a232 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a1ee:	f7fd fead 	bl	8007f4c <HAL_GetTick>
 800a1f2:	4602      	mov	r2, r0
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	1ad3      	subs	r3, r2, r3
 800a1f8:	68ba      	ldr	r2, [r7, #8]
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d302      	bcc.n	800a204 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d116      	bne.n	800a232 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2200      	movs	r2, #0
 800a208:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	2220      	movs	r2, #32
 800a20e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	2200      	movs	r2, #0
 800a216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a21e:	f043 0220 	orr.w	r2, r3, #32
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	2200      	movs	r2, #0
 800a22a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a22e:	2301      	movs	r3, #1
 800a230:	e007      	b.n	800a242 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	695b      	ldr	r3, [r3, #20]
 800a238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a23c:	2b80      	cmp	r3, #128	; 0x80
 800a23e:	d1ca      	bne.n	800a1d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a240:	2300      	movs	r3, #0
}
 800a242:	4618      	mov	r0, r3
 800a244:	3710      	adds	r7, #16
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}

0800a24a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a24a:	b580      	push	{r7, lr}
 800a24c:	b084      	sub	sp, #16
 800a24e:	af00      	add	r7, sp, #0
 800a250:	60f8      	str	r0, [r7, #12]
 800a252:	60b9      	str	r1, [r7, #8]
 800a254:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a256:	e02d      	b.n	800a2b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a258:	68f8      	ldr	r0, [r7, #12]
 800a25a:	f000 f88d 	bl	800a378 <I2C_IsAcknowledgeFailed>
 800a25e:	4603      	mov	r3, r0
 800a260:	2b00      	cmp	r3, #0
 800a262:	d001      	beq.n	800a268 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a264:	2301      	movs	r3, #1
 800a266:	e02d      	b.n	800a2c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a26e:	d021      	beq.n	800a2b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a270:	f7fd fe6c 	bl	8007f4c <HAL_GetTick>
 800a274:	4602      	mov	r2, r0
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	1ad3      	subs	r3, r2, r3
 800a27a:	68ba      	ldr	r2, [r7, #8]
 800a27c:	429a      	cmp	r2, r3
 800a27e:	d302      	bcc.n	800a286 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d116      	bne.n	800a2b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	2200      	movs	r2, #0
 800a28a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	2220      	movs	r2, #32
 800a290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	2200      	movs	r2, #0
 800a298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2a0:	f043 0220 	orr.w	r2, r3, #32
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	e007      	b.n	800a2c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	695b      	ldr	r3, [r3, #20]
 800a2ba:	f003 0304 	and.w	r3, r3, #4
 800a2be:	2b04      	cmp	r3, #4
 800a2c0:	d1ca      	bne.n	800a258 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a2c2:	2300      	movs	r3, #0
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3710      	adds	r7, #16
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}

0800a2cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b084      	sub	sp, #16
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	60f8      	str	r0, [r7, #12]
 800a2d4:	60b9      	str	r1, [r7, #8]
 800a2d6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a2d8:	e042      	b.n	800a360 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	695b      	ldr	r3, [r3, #20]
 800a2e0:	f003 0310 	and.w	r3, r3, #16
 800a2e4:	2b10      	cmp	r3, #16
 800a2e6:	d119      	bne.n	800a31c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f06f 0210 	mvn.w	r2, #16
 800a2f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	2220      	movs	r2, #32
 800a2fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2200      	movs	r2, #0
 800a304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	2200      	movs	r2, #0
 800a314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a318:	2301      	movs	r3, #1
 800a31a:	e029      	b.n	800a370 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a31c:	f7fd fe16 	bl	8007f4c <HAL_GetTick>
 800a320:	4602      	mov	r2, r0
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	1ad3      	subs	r3, r2, r3
 800a326:	68ba      	ldr	r2, [r7, #8]
 800a328:	429a      	cmp	r2, r3
 800a32a:	d302      	bcc.n	800a332 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d116      	bne.n	800a360 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	2200      	movs	r2, #0
 800a336:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	2220      	movs	r2, #32
 800a33c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	2200      	movs	r2, #0
 800a344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a34c:	f043 0220 	orr.w	r2, r3, #32
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2200      	movs	r2, #0
 800a358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a35c:	2301      	movs	r3, #1
 800a35e:	e007      	b.n	800a370 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	695b      	ldr	r3, [r3, #20]
 800a366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a36a:	2b40      	cmp	r3, #64	; 0x40
 800a36c:	d1b5      	bne.n	800a2da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a36e:	2300      	movs	r3, #0
}
 800a370:	4618      	mov	r0, r3
 800a372:	3710      	adds	r7, #16
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a378:	b480      	push	{r7}
 800a37a:	b083      	sub	sp, #12
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	695b      	ldr	r3, [r3, #20]
 800a386:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a38a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a38e:	d11b      	bne.n	800a3c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a398:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2200      	movs	r2, #0
 800a39e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2220      	movs	r2, #32
 800a3a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3b4:	f043 0204 	orr.w	r2, r3, #4
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2200      	movs	r2, #0
 800a3c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	e000      	b.n	800a3ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a3c8:	2300      	movs	r3, #0
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	370c      	adds	r7, #12
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d4:	4770      	bx	lr
	...

0800a3d8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b082      	sub	sp, #8
 800a3dc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	603b      	str	r3, [r7, #0]
 800a3e6:	4b20      	ldr	r3, [pc, #128]	; (800a468 <HAL_PWREx_EnableOverDrive+0x90>)
 800a3e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3ea:	4a1f      	ldr	r2, [pc, #124]	; (800a468 <HAL_PWREx_EnableOverDrive+0x90>)
 800a3ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a3f0:	6413      	str	r3, [r2, #64]	; 0x40
 800a3f2:	4b1d      	ldr	r3, [pc, #116]	; (800a468 <HAL_PWREx_EnableOverDrive+0x90>)
 800a3f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a3fa:	603b      	str	r3, [r7, #0]
 800a3fc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800a3fe:	4b1b      	ldr	r3, [pc, #108]	; (800a46c <HAL_PWREx_EnableOverDrive+0x94>)
 800a400:	2201      	movs	r2, #1
 800a402:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a404:	f7fd fda2 	bl	8007f4c <HAL_GetTick>
 800a408:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a40a:	e009      	b.n	800a420 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a40c:	f7fd fd9e 	bl	8007f4c <HAL_GetTick>
 800a410:	4602      	mov	r2, r0
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	1ad3      	subs	r3, r2, r3
 800a416:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a41a:	d901      	bls.n	800a420 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800a41c:	2303      	movs	r3, #3
 800a41e:	e01f      	b.n	800a460 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a420:	4b13      	ldr	r3, [pc, #76]	; (800a470 <HAL_PWREx_EnableOverDrive+0x98>)
 800a422:	685b      	ldr	r3, [r3, #4]
 800a424:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a42c:	d1ee      	bne.n	800a40c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800a42e:	4b11      	ldr	r3, [pc, #68]	; (800a474 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a430:	2201      	movs	r2, #1
 800a432:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a434:	f7fd fd8a 	bl	8007f4c <HAL_GetTick>
 800a438:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a43a:	e009      	b.n	800a450 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a43c:	f7fd fd86 	bl	8007f4c <HAL_GetTick>
 800a440:	4602      	mov	r2, r0
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	1ad3      	subs	r3, r2, r3
 800a446:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a44a:	d901      	bls.n	800a450 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800a44c:	2303      	movs	r3, #3
 800a44e:	e007      	b.n	800a460 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a450:	4b07      	ldr	r3, [pc, #28]	; (800a470 <HAL_PWREx_EnableOverDrive+0x98>)
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a458:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a45c:	d1ee      	bne.n	800a43c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800a45e:	2300      	movs	r3, #0
}
 800a460:	4618      	mov	r0, r3
 800a462:	3708      	adds	r7, #8
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}
 800a468:	40023800 	.word	0x40023800
 800a46c:	420e0040 	.word	0x420e0040
 800a470:	40007000 	.word	0x40007000
 800a474:	420e0044 	.word	0x420e0044

0800a478 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b084      	sub	sp, #16
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d101      	bne.n	800a48c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a488:	2301      	movs	r3, #1
 800a48a:	e0cc      	b.n	800a626 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a48c:	4b68      	ldr	r3, [pc, #416]	; (800a630 <HAL_RCC_ClockConfig+0x1b8>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f003 030f 	and.w	r3, r3, #15
 800a494:	683a      	ldr	r2, [r7, #0]
 800a496:	429a      	cmp	r2, r3
 800a498:	d90c      	bls.n	800a4b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a49a:	4b65      	ldr	r3, [pc, #404]	; (800a630 <HAL_RCC_ClockConfig+0x1b8>)
 800a49c:	683a      	ldr	r2, [r7, #0]
 800a49e:	b2d2      	uxtb	r2, r2
 800a4a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a4a2:	4b63      	ldr	r3, [pc, #396]	; (800a630 <HAL_RCC_ClockConfig+0x1b8>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f003 030f 	and.w	r3, r3, #15
 800a4aa:	683a      	ldr	r2, [r7, #0]
 800a4ac:	429a      	cmp	r2, r3
 800a4ae:	d001      	beq.n	800a4b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	e0b8      	b.n	800a626 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f003 0302 	and.w	r3, r3, #2
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d020      	beq.n	800a502 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f003 0304 	and.w	r3, r3, #4
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d005      	beq.n	800a4d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a4cc:	4b59      	ldr	r3, [pc, #356]	; (800a634 <HAL_RCC_ClockConfig+0x1bc>)
 800a4ce:	689b      	ldr	r3, [r3, #8]
 800a4d0:	4a58      	ldr	r2, [pc, #352]	; (800a634 <HAL_RCC_ClockConfig+0x1bc>)
 800a4d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a4d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f003 0308 	and.w	r3, r3, #8
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d005      	beq.n	800a4f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a4e4:	4b53      	ldr	r3, [pc, #332]	; (800a634 <HAL_RCC_ClockConfig+0x1bc>)
 800a4e6:	689b      	ldr	r3, [r3, #8]
 800a4e8:	4a52      	ldr	r2, [pc, #328]	; (800a634 <HAL_RCC_ClockConfig+0x1bc>)
 800a4ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a4ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a4f0:	4b50      	ldr	r3, [pc, #320]	; (800a634 <HAL_RCC_ClockConfig+0x1bc>)
 800a4f2:	689b      	ldr	r3, [r3, #8]
 800a4f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	689b      	ldr	r3, [r3, #8]
 800a4fc:	494d      	ldr	r1, [pc, #308]	; (800a634 <HAL_RCC_ClockConfig+0x1bc>)
 800a4fe:	4313      	orrs	r3, r2
 800a500:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f003 0301 	and.w	r3, r3, #1
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d044      	beq.n	800a598 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	685b      	ldr	r3, [r3, #4]
 800a512:	2b01      	cmp	r3, #1
 800a514:	d107      	bne.n	800a526 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a516:	4b47      	ldr	r3, [pc, #284]	; (800a634 <HAL_RCC_ClockConfig+0x1bc>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d119      	bne.n	800a556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a522:	2301      	movs	r3, #1
 800a524:	e07f      	b.n	800a626 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	685b      	ldr	r3, [r3, #4]
 800a52a:	2b02      	cmp	r3, #2
 800a52c:	d003      	beq.n	800a536 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a532:	2b03      	cmp	r3, #3
 800a534:	d107      	bne.n	800a546 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a536:	4b3f      	ldr	r3, [pc, #252]	; (800a634 <HAL_RCC_ClockConfig+0x1bc>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d109      	bne.n	800a556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a542:	2301      	movs	r3, #1
 800a544:	e06f      	b.n	800a626 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a546:	4b3b      	ldr	r3, [pc, #236]	; (800a634 <HAL_RCC_ClockConfig+0x1bc>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f003 0302 	and.w	r3, r3, #2
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d101      	bne.n	800a556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a552:	2301      	movs	r3, #1
 800a554:	e067      	b.n	800a626 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a556:	4b37      	ldr	r3, [pc, #220]	; (800a634 <HAL_RCC_ClockConfig+0x1bc>)
 800a558:	689b      	ldr	r3, [r3, #8]
 800a55a:	f023 0203 	bic.w	r2, r3, #3
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	685b      	ldr	r3, [r3, #4]
 800a562:	4934      	ldr	r1, [pc, #208]	; (800a634 <HAL_RCC_ClockConfig+0x1bc>)
 800a564:	4313      	orrs	r3, r2
 800a566:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a568:	f7fd fcf0 	bl	8007f4c <HAL_GetTick>
 800a56c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a56e:	e00a      	b.n	800a586 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a570:	f7fd fcec 	bl	8007f4c <HAL_GetTick>
 800a574:	4602      	mov	r2, r0
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	1ad3      	subs	r3, r2, r3
 800a57a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a57e:	4293      	cmp	r3, r2
 800a580:	d901      	bls.n	800a586 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a582:	2303      	movs	r3, #3
 800a584:	e04f      	b.n	800a626 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a586:	4b2b      	ldr	r3, [pc, #172]	; (800a634 <HAL_RCC_ClockConfig+0x1bc>)
 800a588:	689b      	ldr	r3, [r3, #8]
 800a58a:	f003 020c 	and.w	r2, r3, #12
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	685b      	ldr	r3, [r3, #4]
 800a592:	009b      	lsls	r3, r3, #2
 800a594:	429a      	cmp	r2, r3
 800a596:	d1eb      	bne.n	800a570 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a598:	4b25      	ldr	r3, [pc, #148]	; (800a630 <HAL_RCC_ClockConfig+0x1b8>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f003 030f 	and.w	r3, r3, #15
 800a5a0:	683a      	ldr	r2, [r7, #0]
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d20c      	bcs.n	800a5c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a5a6:	4b22      	ldr	r3, [pc, #136]	; (800a630 <HAL_RCC_ClockConfig+0x1b8>)
 800a5a8:	683a      	ldr	r2, [r7, #0]
 800a5aa:	b2d2      	uxtb	r2, r2
 800a5ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a5ae:	4b20      	ldr	r3, [pc, #128]	; (800a630 <HAL_RCC_ClockConfig+0x1b8>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f003 030f 	and.w	r3, r3, #15
 800a5b6:	683a      	ldr	r2, [r7, #0]
 800a5b8:	429a      	cmp	r2, r3
 800a5ba:	d001      	beq.n	800a5c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a5bc:	2301      	movs	r3, #1
 800a5be:	e032      	b.n	800a626 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f003 0304 	and.w	r3, r3, #4
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d008      	beq.n	800a5de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a5cc:	4b19      	ldr	r3, [pc, #100]	; (800a634 <HAL_RCC_ClockConfig+0x1bc>)
 800a5ce:	689b      	ldr	r3, [r3, #8]
 800a5d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	68db      	ldr	r3, [r3, #12]
 800a5d8:	4916      	ldr	r1, [pc, #88]	; (800a634 <HAL_RCC_ClockConfig+0x1bc>)
 800a5da:	4313      	orrs	r3, r2
 800a5dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f003 0308 	and.w	r3, r3, #8
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d009      	beq.n	800a5fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a5ea:	4b12      	ldr	r3, [pc, #72]	; (800a634 <HAL_RCC_ClockConfig+0x1bc>)
 800a5ec:	689b      	ldr	r3, [r3, #8]
 800a5ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	691b      	ldr	r3, [r3, #16]
 800a5f6:	00db      	lsls	r3, r3, #3
 800a5f8:	490e      	ldr	r1, [pc, #56]	; (800a634 <HAL_RCC_ClockConfig+0x1bc>)
 800a5fa:	4313      	orrs	r3, r2
 800a5fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a5fe:	f000 f821 	bl	800a644 <HAL_RCC_GetSysClockFreq>
 800a602:	4601      	mov	r1, r0
 800a604:	4b0b      	ldr	r3, [pc, #44]	; (800a634 <HAL_RCC_ClockConfig+0x1bc>)
 800a606:	689b      	ldr	r3, [r3, #8]
 800a608:	091b      	lsrs	r3, r3, #4
 800a60a:	f003 030f 	and.w	r3, r3, #15
 800a60e:	4a0a      	ldr	r2, [pc, #40]	; (800a638 <HAL_RCC_ClockConfig+0x1c0>)
 800a610:	5cd3      	ldrb	r3, [r2, r3]
 800a612:	fa21 f303 	lsr.w	r3, r1, r3
 800a616:	4a09      	ldr	r2, [pc, #36]	; (800a63c <HAL_RCC_ClockConfig+0x1c4>)
 800a618:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a61a:	4b09      	ldr	r3, [pc, #36]	; (800a640 <HAL_RCC_ClockConfig+0x1c8>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	4618      	mov	r0, r3
 800a620:	f7fd fc50 	bl	8007ec4 <HAL_InitTick>

  return HAL_OK;
 800a624:	2300      	movs	r3, #0
}
 800a626:	4618      	mov	r0, r3
 800a628:	3710      	adds	r7, #16
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}
 800a62e:	bf00      	nop
 800a630:	40023c00 	.word	0x40023c00
 800a634:	40023800 	.word	0x40023800
 800a638:	08018368 	.word	0x08018368
 800a63c:	20000000 	.word	0x20000000
 800a640:	20000004 	.word	0x20000004

0800a644 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a644:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a646:	b085      	sub	sp, #20
 800a648:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a64a:	2300      	movs	r3, #0
 800a64c:	607b      	str	r3, [r7, #4]
 800a64e:	2300      	movs	r3, #0
 800a650:	60fb      	str	r3, [r7, #12]
 800a652:	2300      	movs	r3, #0
 800a654:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800a656:	2300      	movs	r3, #0
 800a658:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a65a:	4b63      	ldr	r3, [pc, #396]	; (800a7e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a65c:	689b      	ldr	r3, [r3, #8]
 800a65e:	f003 030c 	and.w	r3, r3, #12
 800a662:	2b04      	cmp	r3, #4
 800a664:	d007      	beq.n	800a676 <HAL_RCC_GetSysClockFreq+0x32>
 800a666:	2b08      	cmp	r3, #8
 800a668:	d008      	beq.n	800a67c <HAL_RCC_GetSysClockFreq+0x38>
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	f040 80b4 	bne.w	800a7d8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a670:	4b5e      	ldr	r3, [pc, #376]	; (800a7ec <HAL_RCC_GetSysClockFreq+0x1a8>)
 800a672:	60bb      	str	r3, [r7, #8]
       break;
 800a674:	e0b3      	b.n	800a7de <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a676:	4b5d      	ldr	r3, [pc, #372]	; (800a7ec <HAL_RCC_GetSysClockFreq+0x1a8>)
 800a678:	60bb      	str	r3, [r7, #8]
      break;
 800a67a:	e0b0      	b.n	800a7de <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a67c:	4b5a      	ldr	r3, [pc, #360]	; (800a7e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a67e:	685b      	ldr	r3, [r3, #4]
 800a680:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a684:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a686:	4b58      	ldr	r3, [pc, #352]	; (800a7e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a688:	685b      	ldr	r3, [r3, #4]
 800a68a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d04a      	beq.n	800a728 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a692:	4b55      	ldr	r3, [pc, #340]	; (800a7e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	099b      	lsrs	r3, r3, #6
 800a698:	f04f 0400 	mov.w	r4, #0
 800a69c:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a6a0:	f04f 0200 	mov.w	r2, #0
 800a6a4:	ea03 0501 	and.w	r5, r3, r1
 800a6a8:	ea04 0602 	and.w	r6, r4, r2
 800a6ac:	4629      	mov	r1, r5
 800a6ae:	4632      	mov	r2, r6
 800a6b0:	f04f 0300 	mov.w	r3, #0
 800a6b4:	f04f 0400 	mov.w	r4, #0
 800a6b8:	0154      	lsls	r4, r2, #5
 800a6ba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a6be:	014b      	lsls	r3, r1, #5
 800a6c0:	4619      	mov	r1, r3
 800a6c2:	4622      	mov	r2, r4
 800a6c4:	1b49      	subs	r1, r1, r5
 800a6c6:	eb62 0206 	sbc.w	r2, r2, r6
 800a6ca:	f04f 0300 	mov.w	r3, #0
 800a6ce:	f04f 0400 	mov.w	r4, #0
 800a6d2:	0194      	lsls	r4, r2, #6
 800a6d4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a6d8:	018b      	lsls	r3, r1, #6
 800a6da:	1a5b      	subs	r3, r3, r1
 800a6dc:	eb64 0402 	sbc.w	r4, r4, r2
 800a6e0:	f04f 0100 	mov.w	r1, #0
 800a6e4:	f04f 0200 	mov.w	r2, #0
 800a6e8:	00e2      	lsls	r2, r4, #3
 800a6ea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a6ee:	00d9      	lsls	r1, r3, #3
 800a6f0:	460b      	mov	r3, r1
 800a6f2:	4614      	mov	r4, r2
 800a6f4:	195b      	adds	r3, r3, r5
 800a6f6:	eb44 0406 	adc.w	r4, r4, r6
 800a6fa:	f04f 0100 	mov.w	r1, #0
 800a6fe:	f04f 0200 	mov.w	r2, #0
 800a702:	02a2      	lsls	r2, r4, #10
 800a704:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800a708:	0299      	lsls	r1, r3, #10
 800a70a:	460b      	mov	r3, r1
 800a70c:	4614      	mov	r4, r2
 800a70e:	4618      	mov	r0, r3
 800a710:	4621      	mov	r1, r4
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f04f 0400 	mov.w	r4, #0
 800a718:	461a      	mov	r2, r3
 800a71a:	4623      	mov	r3, r4
 800a71c:	f7f6 facc 	bl	8000cb8 <__aeabi_uldivmod>
 800a720:	4603      	mov	r3, r0
 800a722:	460c      	mov	r4, r1
 800a724:	60fb      	str	r3, [r7, #12]
 800a726:	e049      	b.n	800a7bc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a728:	4b2f      	ldr	r3, [pc, #188]	; (800a7e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a72a:	685b      	ldr	r3, [r3, #4]
 800a72c:	099b      	lsrs	r3, r3, #6
 800a72e:	f04f 0400 	mov.w	r4, #0
 800a732:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a736:	f04f 0200 	mov.w	r2, #0
 800a73a:	ea03 0501 	and.w	r5, r3, r1
 800a73e:	ea04 0602 	and.w	r6, r4, r2
 800a742:	4629      	mov	r1, r5
 800a744:	4632      	mov	r2, r6
 800a746:	f04f 0300 	mov.w	r3, #0
 800a74a:	f04f 0400 	mov.w	r4, #0
 800a74e:	0154      	lsls	r4, r2, #5
 800a750:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a754:	014b      	lsls	r3, r1, #5
 800a756:	4619      	mov	r1, r3
 800a758:	4622      	mov	r2, r4
 800a75a:	1b49      	subs	r1, r1, r5
 800a75c:	eb62 0206 	sbc.w	r2, r2, r6
 800a760:	f04f 0300 	mov.w	r3, #0
 800a764:	f04f 0400 	mov.w	r4, #0
 800a768:	0194      	lsls	r4, r2, #6
 800a76a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a76e:	018b      	lsls	r3, r1, #6
 800a770:	1a5b      	subs	r3, r3, r1
 800a772:	eb64 0402 	sbc.w	r4, r4, r2
 800a776:	f04f 0100 	mov.w	r1, #0
 800a77a:	f04f 0200 	mov.w	r2, #0
 800a77e:	00e2      	lsls	r2, r4, #3
 800a780:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a784:	00d9      	lsls	r1, r3, #3
 800a786:	460b      	mov	r3, r1
 800a788:	4614      	mov	r4, r2
 800a78a:	195b      	adds	r3, r3, r5
 800a78c:	eb44 0406 	adc.w	r4, r4, r6
 800a790:	f04f 0100 	mov.w	r1, #0
 800a794:	f04f 0200 	mov.w	r2, #0
 800a798:	02a2      	lsls	r2, r4, #10
 800a79a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800a79e:	0299      	lsls	r1, r3, #10
 800a7a0:	460b      	mov	r3, r1
 800a7a2:	4614      	mov	r4, r2
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	4621      	mov	r1, r4
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f04f 0400 	mov.w	r4, #0
 800a7ae:	461a      	mov	r2, r3
 800a7b0:	4623      	mov	r3, r4
 800a7b2:	f7f6 fa81 	bl	8000cb8 <__aeabi_uldivmod>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	460c      	mov	r4, r1
 800a7ba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a7bc:	4b0a      	ldr	r3, [pc, #40]	; (800a7e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a7be:	685b      	ldr	r3, [r3, #4]
 800a7c0:	0c1b      	lsrs	r3, r3, #16
 800a7c2:	f003 0303 	and.w	r3, r3, #3
 800a7c6:	3301      	adds	r3, #1
 800a7c8:	005b      	lsls	r3, r3, #1
 800a7ca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800a7cc:	68fa      	ldr	r2, [r7, #12]
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7d4:	60bb      	str	r3, [r7, #8]
      break;
 800a7d6:	e002      	b.n	800a7de <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a7d8:	4b04      	ldr	r3, [pc, #16]	; (800a7ec <HAL_RCC_GetSysClockFreq+0x1a8>)
 800a7da:	60bb      	str	r3, [r7, #8]
      break;
 800a7dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a7de:	68bb      	ldr	r3, [r7, #8]
}
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	3714      	adds	r7, #20
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7e8:	40023800 	.word	0x40023800
 800a7ec:	00f42400 	.word	0x00f42400

0800a7f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a7f4:	4b03      	ldr	r3, [pc, #12]	; (800a804 <HAL_RCC_GetHCLKFreq+0x14>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a800:	4770      	bx	lr
 800a802:	bf00      	nop
 800a804:	20000000 	.word	0x20000000

0800a808 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a80c:	f7ff fff0 	bl	800a7f0 <HAL_RCC_GetHCLKFreq>
 800a810:	4601      	mov	r1, r0
 800a812:	4b05      	ldr	r3, [pc, #20]	; (800a828 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a814:	689b      	ldr	r3, [r3, #8]
 800a816:	0a9b      	lsrs	r3, r3, #10
 800a818:	f003 0307 	and.w	r3, r3, #7
 800a81c:	4a03      	ldr	r2, [pc, #12]	; (800a82c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a81e:	5cd3      	ldrb	r3, [r2, r3]
 800a820:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a824:	4618      	mov	r0, r3
 800a826:	bd80      	pop	{r7, pc}
 800a828:	40023800 	.word	0x40023800
 800a82c:	08018378 	.word	0x08018378

0800a830 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a834:	f7ff ffdc 	bl	800a7f0 <HAL_RCC_GetHCLKFreq>
 800a838:	4601      	mov	r1, r0
 800a83a:	4b05      	ldr	r3, [pc, #20]	; (800a850 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a83c:	689b      	ldr	r3, [r3, #8]
 800a83e:	0b5b      	lsrs	r3, r3, #13
 800a840:	f003 0307 	and.w	r3, r3, #7
 800a844:	4a03      	ldr	r2, [pc, #12]	; (800a854 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a846:	5cd3      	ldrb	r3, [r2, r3]
 800a848:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	bd80      	pop	{r7, pc}
 800a850:	40023800 	.word	0x40023800
 800a854:	08018378 	.word	0x08018378

0800a858 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b088      	sub	sp, #32
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a860:	2300      	movs	r3, #0
 800a862:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800a864:	2300      	movs	r3, #0
 800a866:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800a868:	2300      	movs	r3, #0
 800a86a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800a86c:	2300      	movs	r3, #0
 800a86e:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800a870:	2300      	movs	r3, #0
 800a872:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d00a      	beq.n	800a896 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800a880:	4b66      	ldr	r3, [pc, #408]	; (800aa1c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a882:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a886:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a88e:	4963      	ldr	r1, [pc, #396]	; (800aa1c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a890:	4313      	orrs	r3, r2
 800a892:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d00a      	beq.n	800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800a8a2:	4b5e      	ldr	r3, [pc, #376]	; (800aa1c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a8a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a8a8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8b0:	495a      	ldr	r1, [pc, #360]	; (800aa1c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a8b2:	4313      	orrs	r3, r2
 800a8b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f003 0301 	and.w	r3, r3, #1
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d10b      	bne.n	800a8dc <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d105      	bne.n	800a8dc <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d075      	beq.n	800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a8dc:	4b50      	ldr	r3, [pc, #320]	; (800aa20 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800a8de:	2200      	movs	r2, #0
 800a8e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a8e2:	f7fd fb33 	bl	8007f4c <HAL_GetTick>
 800a8e6:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a8e8:	e008      	b.n	800a8fc <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a8ea:	f7fd fb2f 	bl	8007f4c <HAL_GetTick>
 800a8ee:	4602      	mov	r2, r0
 800a8f0:	69fb      	ldr	r3, [r7, #28]
 800a8f2:	1ad3      	subs	r3, r2, r3
 800a8f4:	2b02      	cmp	r3, #2
 800a8f6:	d901      	bls.n	800a8fc <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a8f8:	2303      	movs	r3, #3
 800a8fa:	e1dc      	b.n	800acb6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a8fc:	4b47      	ldr	r3, [pc, #284]	; (800aa1c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a904:	2b00      	cmp	r3, #0
 800a906:	d1f0      	bne.n	800a8ea <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f003 0301 	and.w	r3, r3, #1
 800a910:	2b00      	cmp	r3, #0
 800a912:	d009      	beq.n	800a928 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	685b      	ldr	r3, [r3, #4]
 800a918:	019a      	lsls	r2, r3, #6
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	689b      	ldr	r3, [r3, #8]
 800a91e:	071b      	lsls	r3, r3, #28
 800a920:	493e      	ldr	r1, [pc, #248]	; (800aa1c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a922:	4313      	orrs	r3, r2
 800a924:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f003 0302 	and.w	r3, r3, #2
 800a930:	2b00      	cmp	r3, #0
 800a932:	d01f      	beq.n	800a974 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a934:	4b39      	ldr	r3, [pc, #228]	; (800aa1c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a936:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a93a:	0f1b      	lsrs	r3, r3, #28
 800a93c:	f003 0307 	and.w	r3, r3, #7
 800a940:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	685b      	ldr	r3, [r3, #4]
 800a946:	019a      	lsls	r2, r3, #6
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	68db      	ldr	r3, [r3, #12]
 800a94c:	061b      	lsls	r3, r3, #24
 800a94e:	431a      	orrs	r2, r3
 800a950:	69bb      	ldr	r3, [r7, #24]
 800a952:	071b      	lsls	r3, r3, #28
 800a954:	4931      	ldr	r1, [pc, #196]	; (800aa1c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a956:	4313      	orrs	r3, r2
 800a958:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a95c:	4b2f      	ldr	r3, [pc, #188]	; (800aa1c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a95e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a962:	f023 021f 	bic.w	r2, r3, #31
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6a1b      	ldr	r3, [r3, #32]
 800a96a:	3b01      	subs	r3, #1
 800a96c:	492b      	ldr	r1, [pc, #172]	; (800aa1c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a96e:	4313      	orrs	r3, r2
 800a970:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d00d      	beq.n	800a99c <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	685b      	ldr	r3, [r3, #4]
 800a984:	019a      	lsls	r2, r3, #6
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	68db      	ldr	r3, [r3, #12]
 800a98a:	061b      	lsls	r3, r3, #24
 800a98c:	431a      	orrs	r2, r3
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	689b      	ldr	r3, [r3, #8]
 800a992:	071b      	lsls	r3, r3, #28
 800a994:	4921      	ldr	r1, [pc, #132]	; (800aa1c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a996:	4313      	orrs	r3, r2
 800a998:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a99c:	4b20      	ldr	r3, [pc, #128]	; (800aa20 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800a99e:	2201      	movs	r2, #1
 800a9a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a9a2:	f7fd fad3 	bl	8007f4c <HAL_GetTick>
 800a9a6:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a9a8:	e008      	b.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a9aa:	f7fd facf 	bl	8007f4c <HAL_GetTick>
 800a9ae:	4602      	mov	r2, r0
 800a9b0:	69fb      	ldr	r3, [r7, #28]
 800a9b2:	1ad3      	subs	r3, r2, r3
 800a9b4:	2b02      	cmp	r3, #2
 800a9b6:	d901      	bls.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a9b8:	2303      	movs	r3, #3
 800a9ba:	e17c      	b.n	800acb6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a9bc:	4b17      	ldr	r3, [pc, #92]	; (800aa1c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d0f0      	beq.n	800a9aa <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f003 0304 	and.w	r3, r3, #4
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d112      	bne.n	800a9fa <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d10c      	bne.n	800a9fa <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	f000 80ce 	beq.w	800ab8a <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800a9f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a9f6:	f040 80c8 	bne.w	800ab8a <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a9fa:	4b0a      	ldr	r3, [pc, #40]	; (800aa24 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800aa00:	f7fd faa4 	bl	8007f4c <HAL_GetTick>
 800aa04:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800aa06:	e00f      	b.n	800aa28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800aa08:	f7fd faa0 	bl	8007f4c <HAL_GetTick>
 800aa0c:	4602      	mov	r2, r0
 800aa0e:	69fb      	ldr	r3, [r7, #28]
 800aa10:	1ad3      	subs	r3, r2, r3
 800aa12:	2b02      	cmp	r3, #2
 800aa14:	d908      	bls.n	800aa28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800aa16:	2303      	movs	r3, #3
 800aa18:	e14d      	b.n	800acb6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800aa1a:	bf00      	nop
 800aa1c:	40023800 	.word	0x40023800
 800aa20:	42470068 	.word	0x42470068
 800aa24:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800aa28:	4ba5      	ldr	r3, [pc, #660]	; (800acc0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aa30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa34:	d0e8      	beq.n	800aa08 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f003 0304 	and.w	r3, r3, #4
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d02e      	beq.n	800aaa0 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800aa42:	4b9f      	ldr	r3, [pc, #636]	; (800acc0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800aa44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa48:	0c1b      	lsrs	r3, r3, #16
 800aa4a:	f003 0303 	and.w	r3, r3, #3
 800aa4e:	3301      	adds	r3, #1
 800aa50:	005b      	lsls	r3, r3, #1
 800aa52:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800aa54:	4b9a      	ldr	r3, [pc, #616]	; (800acc0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800aa56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa5a:	0f1b      	lsrs	r3, r3, #28
 800aa5c:	f003 0307 	and.w	r3, r3, #7
 800aa60:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	691b      	ldr	r3, [r3, #16]
 800aa66:	019a      	lsls	r2, r3, #6
 800aa68:	697b      	ldr	r3, [r7, #20]
 800aa6a:	085b      	lsrs	r3, r3, #1
 800aa6c:	3b01      	subs	r3, #1
 800aa6e:	041b      	lsls	r3, r3, #16
 800aa70:	431a      	orrs	r2, r3
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	699b      	ldr	r3, [r3, #24]
 800aa76:	061b      	lsls	r3, r3, #24
 800aa78:	431a      	orrs	r2, r3
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	071b      	lsls	r3, r3, #28
 800aa7e:	4990      	ldr	r1, [pc, #576]	; (800acc0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800aa80:	4313      	orrs	r3, r2
 800aa82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800aa86:	4b8e      	ldr	r3, [pc, #568]	; (800acc0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800aa88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa8c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa94:	3b01      	subs	r3, #1
 800aa96:	021b      	lsls	r3, r3, #8
 800aa98:	4989      	ldr	r1, [pc, #548]	; (800acc0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800aa9a:	4313      	orrs	r3, r2
 800aa9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f003 0308 	and.w	r3, r3, #8
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d02c      	beq.n	800ab06 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800aaac:	4b84      	ldr	r3, [pc, #528]	; (800acc0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800aaae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aab2:	0c1b      	lsrs	r3, r3, #16
 800aab4:	f003 0303 	and.w	r3, r3, #3
 800aab8:	3301      	adds	r3, #1
 800aaba:	005b      	lsls	r3, r3, #1
 800aabc:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800aabe:	4b80      	ldr	r3, [pc, #512]	; (800acc0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800aac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aac4:	0e1b      	lsrs	r3, r3, #24
 800aac6:	f003 030f 	and.w	r3, r3, #15
 800aaca:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	691b      	ldr	r3, [r3, #16]
 800aad0:	019a      	lsls	r2, r3, #6
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	085b      	lsrs	r3, r3, #1
 800aad6:	3b01      	subs	r3, #1
 800aad8:	041b      	lsls	r3, r3, #16
 800aada:	431a      	orrs	r2, r3
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	061b      	lsls	r3, r3, #24
 800aae0:	431a      	orrs	r2, r3
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	69db      	ldr	r3, [r3, #28]
 800aae6:	071b      	lsls	r3, r3, #28
 800aae8:	4975      	ldr	r1, [pc, #468]	; (800acc0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800aaea:	4313      	orrs	r3, r2
 800aaec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800aaf0:	4b73      	ldr	r3, [pc, #460]	; (800acc0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800aaf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aaf6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aafe:	4970      	ldr	r1, [pc, #448]	; (800acc0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ab00:	4313      	orrs	r3, r2
 800ab02:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d024      	beq.n	800ab5c <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800ab16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ab1a:	d11f      	bne.n	800ab5c <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800ab1c:	4b68      	ldr	r3, [pc, #416]	; (800acc0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ab1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab22:	0e1b      	lsrs	r3, r3, #24
 800ab24:	f003 030f 	and.w	r3, r3, #15
 800ab28:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800ab2a:	4b65      	ldr	r3, [pc, #404]	; (800acc0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ab2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab30:	0f1b      	lsrs	r3, r3, #28
 800ab32:	f003 0307 	and.w	r3, r3, #7
 800ab36:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	691b      	ldr	r3, [r3, #16]
 800ab3c:	019a      	lsls	r2, r3, #6
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	695b      	ldr	r3, [r3, #20]
 800ab42:	085b      	lsrs	r3, r3, #1
 800ab44:	3b01      	subs	r3, #1
 800ab46:	041b      	lsls	r3, r3, #16
 800ab48:	431a      	orrs	r2, r3
 800ab4a:	693b      	ldr	r3, [r7, #16]
 800ab4c:	061b      	lsls	r3, r3, #24
 800ab4e:	431a      	orrs	r2, r3
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	071b      	lsls	r3, r3, #28
 800ab54:	495a      	ldr	r1, [pc, #360]	; (800acc0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ab56:	4313      	orrs	r3, r2
 800ab58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800ab5c:	4b59      	ldr	r3, [pc, #356]	; (800acc4 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800ab5e:	2201      	movs	r2, #1
 800ab60:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800ab62:	f7fd f9f3 	bl	8007f4c <HAL_GetTick>
 800ab66:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800ab68:	e008      	b.n	800ab7c <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800ab6a:	f7fd f9ef 	bl	8007f4c <HAL_GetTick>
 800ab6e:	4602      	mov	r2, r0
 800ab70:	69fb      	ldr	r3, [r7, #28]
 800ab72:	1ad3      	subs	r3, r2, r3
 800ab74:	2b02      	cmp	r3, #2
 800ab76:	d901      	bls.n	800ab7c <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ab78:	2303      	movs	r3, #3
 800ab7a:	e09c      	b.n	800acb6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800ab7c:	4b50      	ldr	r3, [pc, #320]	; (800acc0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab88:	d1ef      	bne.n	800ab6a <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f003 0320 	and.w	r3, r3, #32
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	f000 8083 	beq.w	800ac9e <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800ab98:	2300      	movs	r3, #0
 800ab9a:	60bb      	str	r3, [r7, #8]
 800ab9c:	4b48      	ldr	r3, [pc, #288]	; (800acc0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ab9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aba0:	4a47      	ldr	r2, [pc, #284]	; (800acc0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800aba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aba6:	6413      	str	r3, [r2, #64]	; 0x40
 800aba8:	4b45      	ldr	r3, [pc, #276]	; (800acc0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800abaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800abb0:	60bb      	str	r3, [r7, #8]
 800abb2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800abb4:	4b44      	ldr	r3, [pc, #272]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	4a43      	ldr	r2, [pc, #268]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800abba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800abbe:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800abc0:	f7fd f9c4 	bl	8007f4c <HAL_GetTick>
 800abc4:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800abc6:	e008      	b.n	800abda <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800abc8:	f7fd f9c0 	bl	8007f4c <HAL_GetTick>
 800abcc:	4602      	mov	r2, r0
 800abce:	69fb      	ldr	r3, [r7, #28]
 800abd0:	1ad3      	subs	r3, r2, r3
 800abd2:	2b02      	cmp	r3, #2
 800abd4:	d901      	bls.n	800abda <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800abd6:	2303      	movs	r3, #3
 800abd8:	e06d      	b.n	800acb6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800abda:	4b3b      	ldr	r3, [pc, #236]	; (800acc8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d0f0      	beq.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800abe6:	4b36      	ldr	r3, [pc, #216]	; (800acc0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800abe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800abee:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800abf0:	69bb      	ldr	r3, [r7, #24]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d02f      	beq.n	800ac56 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800abfe:	69ba      	ldr	r2, [r7, #24]
 800ac00:	429a      	cmp	r2, r3
 800ac02:	d028      	beq.n	800ac56 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ac04:	4b2e      	ldr	r3, [pc, #184]	; (800acc0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ac06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac0c:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800ac0e:	4b2f      	ldr	r3, [pc, #188]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800ac10:	2201      	movs	r2, #1
 800ac12:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800ac14:	4b2d      	ldr	r3, [pc, #180]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800ac16:	2200      	movs	r2, #0
 800ac18:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800ac1a:	4a29      	ldr	r2, [pc, #164]	; (800acc0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ac1c:	69bb      	ldr	r3, [r7, #24]
 800ac1e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800ac20:	4b27      	ldr	r3, [pc, #156]	; (800acc0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ac22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac24:	f003 0301 	and.w	r3, r3, #1
 800ac28:	2b01      	cmp	r3, #1
 800ac2a:	d114      	bne.n	800ac56 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800ac2c:	f7fd f98e 	bl	8007f4c <HAL_GetTick>
 800ac30:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ac32:	e00a      	b.n	800ac4a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ac34:	f7fd f98a 	bl	8007f4c <HAL_GetTick>
 800ac38:	4602      	mov	r2, r0
 800ac3a:	69fb      	ldr	r3, [r7, #28]
 800ac3c:	1ad3      	subs	r3, r2, r3
 800ac3e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac42:	4293      	cmp	r3, r2
 800ac44:	d901      	bls.n	800ac4a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800ac46:	2303      	movs	r3, #3
 800ac48:	e035      	b.n	800acb6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ac4a:	4b1d      	ldr	r3, [pc, #116]	; (800acc0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ac4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac4e:	f003 0302 	and.w	r3, r3, #2
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d0ee      	beq.n	800ac34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac62:	d10d      	bne.n	800ac80 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800ac64:	4b16      	ldr	r3, [pc, #88]	; (800acc0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ac66:	689b      	ldr	r3, [r3, #8]
 800ac68:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac70:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ac74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac78:	4911      	ldr	r1, [pc, #68]	; (800acc0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ac7a:	4313      	orrs	r3, r2
 800ac7c:	608b      	str	r3, [r1, #8]
 800ac7e:	e005      	b.n	800ac8c <HAL_RCCEx_PeriphCLKConfig+0x434>
 800ac80:	4b0f      	ldr	r3, [pc, #60]	; (800acc0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ac82:	689b      	ldr	r3, [r3, #8]
 800ac84:	4a0e      	ldr	r2, [pc, #56]	; (800acc0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ac86:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800ac8a:	6093      	str	r3, [r2, #8]
 800ac8c:	4b0c      	ldr	r3, [pc, #48]	; (800acc0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ac8e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ac98:	4909      	ldr	r1, [pc, #36]	; (800acc0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ac9a:	4313      	orrs	r3, r2
 800ac9c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f003 0310 	and.w	r3, r3, #16
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d004      	beq.n	800acb4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800acb0:	4b07      	ldr	r3, [pc, #28]	; (800acd0 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800acb2:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800acb4:	2300      	movs	r3, #0
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	3720      	adds	r7, #32
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}
 800acbe:	bf00      	nop
 800acc0:	40023800 	.word	0x40023800
 800acc4:	42470070 	.word	0x42470070
 800acc8:	40007000 	.word	0x40007000
 800accc:	42470e40 	.word	0x42470e40
 800acd0:	424711e0 	.word	0x424711e0

0800acd4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b086      	sub	sp, #24
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800acdc:	2300      	movs	r3, #0
 800acde:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	f003 0301 	and.w	r3, r3, #1
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d075      	beq.n	800add8 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800acec:	4ba2      	ldr	r3, [pc, #648]	; (800af78 <HAL_RCC_OscConfig+0x2a4>)
 800acee:	689b      	ldr	r3, [r3, #8]
 800acf0:	f003 030c 	and.w	r3, r3, #12
 800acf4:	2b04      	cmp	r3, #4
 800acf6:	d00c      	beq.n	800ad12 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800acf8:	4b9f      	ldr	r3, [pc, #636]	; (800af78 <HAL_RCC_OscConfig+0x2a4>)
 800acfa:	689b      	ldr	r3, [r3, #8]
 800acfc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800ad00:	2b08      	cmp	r3, #8
 800ad02:	d112      	bne.n	800ad2a <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ad04:	4b9c      	ldr	r3, [pc, #624]	; (800af78 <HAL_RCC_OscConfig+0x2a4>)
 800ad06:	685b      	ldr	r3, [r3, #4]
 800ad08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ad0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ad10:	d10b      	bne.n	800ad2a <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ad12:	4b99      	ldr	r3, [pc, #612]	; (800af78 <HAL_RCC_OscConfig+0x2a4>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d05b      	beq.n	800add6 <HAL_RCC_OscConfig+0x102>
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	685b      	ldr	r3, [r3, #4]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d157      	bne.n	800add6 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800ad26:	2301      	movs	r3, #1
 800ad28:	e20b      	b.n	800b142 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	685b      	ldr	r3, [r3, #4]
 800ad2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad32:	d106      	bne.n	800ad42 <HAL_RCC_OscConfig+0x6e>
 800ad34:	4b90      	ldr	r3, [pc, #576]	; (800af78 <HAL_RCC_OscConfig+0x2a4>)
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	4a8f      	ldr	r2, [pc, #572]	; (800af78 <HAL_RCC_OscConfig+0x2a4>)
 800ad3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ad3e:	6013      	str	r3, [r2, #0]
 800ad40:	e01d      	b.n	800ad7e <HAL_RCC_OscConfig+0xaa>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	685b      	ldr	r3, [r3, #4]
 800ad46:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ad4a:	d10c      	bne.n	800ad66 <HAL_RCC_OscConfig+0x92>
 800ad4c:	4b8a      	ldr	r3, [pc, #552]	; (800af78 <HAL_RCC_OscConfig+0x2a4>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	4a89      	ldr	r2, [pc, #548]	; (800af78 <HAL_RCC_OscConfig+0x2a4>)
 800ad52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ad56:	6013      	str	r3, [r2, #0]
 800ad58:	4b87      	ldr	r3, [pc, #540]	; (800af78 <HAL_RCC_OscConfig+0x2a4>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	4a86      	ldr	r2, [pc, #536]	; (800af78 <HAL_RCC_OscConfig+0x2a4>)
 800ad5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ad62:	6013      	str	r3, [r2, #0]
 800ad64:	e00b      	b.n	800ad7e <HAL_RCC_OscConfig+0xaa>
 800ad66:	4b84      	ldr	r3, [pc, #528]	; (800af78 <HAL_RCC_OscConfig+0x2a4>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	4a83      	ldr	r2, [pc, #524]	; (800af78 <HAL_RCC_OscConfig+0x2a4>)
 800ad6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad70:	6013      	str	r3, [r2, #0]
 800ad72:	4b81      	ldr	r3, [pc, #516]	; (800af78 <HAL_RCC_OscConfig+0x2a4>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	4a80      	ldr	r2, [pc, #512]	; (800af78 <HAL_RCC_OscConfig+0x2a4>)
 800ad78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ad7c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	685b      	ldr	r3, [r3, #4]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d013      	beq.n	800adae <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad86:	f7fd f8e1 	bl	8007f4c <HAL_GetTick>
 800ad8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ad8c:	e008      	b.n	800ada0 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ad8e:	f7fd f8dd 	bl	8007f4c <HAL_GetTick>
 800ad92:	4602      	mov	r2, r0
 800ad94:	693b      	ldr	r3, [r7, #16]
 800ad96:	1ad3      	subs	r3, r2, r3
 800ad98:	2b64      	cmp	r3, #100	; 0x64
 800ad9a:	d901      	bls.n	800ada0 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800ad9c:	2303      	movs	r3, #3
 800ad9e:	e1d0      	b.n	800b142 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ada0:	4b75      	ldr	r3, [pc, #468]	; (800af78 <HAL_RCC_OscConfig+0x2a4>)
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d0f0      	beq.n	800ad8e <HAL_RCC_OscConfig+0xba>
 800adac:	e014      	b.n	800add8 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800adae:	f7fd f8cd 	bl	8007f4c <HAL_GetTick>
 800adb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800adb4:	e008      	b.n	800adc8 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800adb6:	f7fd f8c9 	bl	8007f4c <HAL_GetTick>
 800adba:	4602      	mov	r2, r0
 800adbc:	693b      	ldr	r3, [r7, #16]
 800adbe:	1ad3      	subs	r3, r2, r3
 800adc0:	2b64      	cmp	r3, #100	; 0x64
 800adc2:	d901      	bls.n	800adc8 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800adc4:	2303      	movs	r3, #3
 800adc6:	e1bc      	b.n	800b142 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800adc8:	4b6b      	ldr	r3, [pc, #428]	; (800af78 <HAL_RCC_OscConfig+0x2a4>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800add0:	2b00      	cmp	r3, #0
 800add2:	d1f0      	bne.n	800adb6 <HAL_RCC_OscConfig+0xe2>
 800add4:	e000      	b.n	800add8 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800add6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f003 0302 	and.w	r3, r3, #2
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d063      	beq.n	800aeac <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800ade4:	4b64      	ldr	r3, [pc, #400]	; (800af78 <HAL_RCC_OscConfig+0x2a4>)
 800ade6:	689b      	ldr	r3, [r3, #8]
 800ade8:	f003 030c 	and.w	r3, r3, #12
 800adec:	2b00      	cmp	r3, #0
 800adee:	d00b      	beq.n	800ae08 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800adf0:	4b61      	ldr	r3, [pc, #388]	; (800af78 <HAL_RCC_OscConfig+0x2a4>)
 800adf2:	689b      	ldr	r3, [r3, #8]
 800adf4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800adf8:	2b08      	cmp	r3, #8
 800adfa:	d11c      	bne.n	800ae36 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800adfc:	4b5e      	ldr	r3, [pc, #376]	; (800af78 <HAL_RCC_OscConfig+0x2a4>)
 800adfe:	685b      	ldr	r3, [r3, #4]
 800ae00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d116      	bne.n	800ae36 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ae08:	4b5b      	ldr	r3, [pc, #364]	; (800af78 <HAL_RCC_OscConfig+0x2a4>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f003 0302 	and.w	r3, r3, #2
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d005      	beq.n	800ae20 <HAL_RCC_OscConfig+0x14c>
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	68db      	ldr	r3, [r3, #12]
 800ae18:	2b01      	cmp	r3, #1
 800ae1a:	d001      	beq.n	800ae20 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	e190      	b.n	800b142 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ae20:	4b55      	ldr	r3, [pc, #340]	; (800af78 <HAL_RCC_OscConfig+0x2a4>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	691b      	ldr	r3, [r3, #16]
 800ae2c:	00db      	lsls	r3, r3, #3
 800ae2e:	4952      	ldr	r1, [pc, #328]	; (800af78 <HAL_RCC_OscConfig+0x2a4>)
 800ae30:	4313      	orrs	r3, r2
 800ae32:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ae34:	e03a      	b.n	800aeac <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	68db      	ldr	r3, [r3, #12]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d020      	beq.n	800ae80 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ae3e:	4b4f      	ldr	r3, [pc, #316]	; (800af7c <HAL_RCC_OscConfig+0x2a8>)
 800ae40:	2201      	movs	r2, #1
 800ae42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae44:	f7fd f882 	bl	8007f4c <HAL_GetTick>
 800ae48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ae4a:	e008      	b.n	800ae5e <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ae4c:	f7fd f87e 	bl	8007f4c <HAL_GetTick>
 800ae50:	4602      	mov	r2, r0
 800ae52:	693b      	ldr	r3, [r7, #16]
 800ae54:	1ad3      	subs	r3, r2, r3
 800ae56:	2b02      	cmp	r3, #2
 800ae58:	d901      	bls.n	800ae5e <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800ae5a:	2303      	movs	r3, #3
 800ae5c:	e171      	b.n	800b142 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ae5e:	4b46      	ldr	r3, [pc, #280]	; (800af78 <HAL_RCC_OscConfig+0x2a4>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f003 0302 	and.w	r3, r3, #2
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d0f0      	beq.n	800ae4c <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ae6a:	4b43      	ldr	r3, [pc, #268]	; (800af78 <HAL_RCC_OscConfig+0x2a4>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	691b      	ldr	r3, [r3, #16]
 800ae76:	00db      	lsls	r3, r3, #3
 800ae78:	493f      	ldr	r1, [pc, #252]	; (800af78 <HAL_RCC_OscConfig+0x2a4>)
 800ae7a:	4313      	orrs	r3, r2
 800ae7c:	600b      	str	r3, [r1, #0]
 800ae7e:	e015      	b.n	800aeac <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ae80:	4b3e      	ldr	r3, [pc, #248]	; (800af7c <HAL_RCC_OscConfig+0x2a8>)
 800ae82:	2200      	movs	r2, #0
 800ae84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae86:	f7fd f861 	bl	8007f4c <HAL_GetTick>
 800ae8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ae8c:	e008      	b.n	800aea0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ae8e:	f7fd f85d 	bl	8007f4c <HAL_GetTick>
 800ae92:	4602      	mov	r2, r0
 800ae94:	693b      	ldr	r3, [r7, #16]
 800ae96:	1ad3      	subs	r3, r2, r3
 800ae98:	2b02      	cmp	r3, #2
 800ae9a:	d901      	bls.n	800aea0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800ae9c:	2303      	movs	r3, #3
 800ae9e:	e150      	b.n	800b142 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aea0:	4b35      	ldr	r3, [pc, #212]	; (800af78 <HAL_RCC_OscConfig+0x2a4>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f003 0302 	and.w	r3, r3, #2
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d1f0      	bne.n	800ae8e <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	f003 0308 	and.w	r3, r3, #8
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d030      	beq.n	800af1a <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	695b      	ldr	r3, [r3, #20]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d016      	beq.n	800aeee <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aec0:	4b2f      	ldr	r3, [pc, #188]	; (800af80 <HAL_RCC_OscConfig+0x2ac>)
 800aec2:	2201      	movs	r2, #1
 800aec4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aec6:	f7fd f841 	bl	8007f4c <HAL_GetTick>
 800aeca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aecc:	e008      	b.n	800aee0 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800aece:	f7fd f83d 	bl	8007f4c <HAL_GetTick>
 800aed2:	4602      	mov	r2, r0
 800aed4:	693b      	ldr	r3, [r7, #16]
 800aed6:	1ad3      	subs	r3, r2, r3
 800aed8:	2b02      	cmp	r3, #2
 800aeda:	d901      	bls.n	800aee0 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800aedc:	2303      	movs	r3, #3
 800aede:	e130      	b.n	800b142 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aee0:	4b25      	ldr	r3, [pc, #148]	; (800af78 <HAL_RCC_OscConfig+0x2a4>)
 800aee2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aee4:	f003 0302 	and.w	r3, r3, #2
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d0f0      	beq.n	800aece <HAL_RCC_OscConfig+0x1fa>
 800aeec:	e015      	b.n	800af1a <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aeee:	4b24      	ldr	r3, [pc, #144]	; (800af80 <HAL_RCC_OscConfig+0x2ac>)
 800aef0:	2200      	movs	r2, #0
 800aef2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aef4:	f7fd f82a 	bl	8007f4c <HAL_GetTick>
 800aef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aefa:	e008      	b.n	800af0e <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800aefc:	f7fd f826 	bl	8007f4c <HAL_GetTick>
 800af00:	4602      	mov	r2, r0
 800af02:	693b      	ldr	r3, [r7, #16]
 800af04:	1ad3      	subs	r3, r2, r3
 800af06:	2b02      	cmp	r3, #2
 800af08:	d901      	bls.n	800af0e <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800af0a:	2303      	movs	r3, #3
 800af0c:	e119      	b.n	800b142 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800af0e:	4b1a      	ldr	r3, [pc, #104]	; (800af78 <HAL_RCC_OscConfig+0x2a4>)
 800af10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af12:	f003 0302 	and.w	r3, r3, #2
 800af16:	2b00      	cmp	r3, #0
 800af18:	d1f0      	bne.n	800aefc <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	f003 0304 	and.w	r3, r3, #4
 800af22:	2b00      	cmp	r3, #0
 800af24:	f000 809f 	beq.w	800b066 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800af28:	2300      	movs	r3, #0
 800af2a:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800af2c:	4b12      	ldr	r3, [pc, #72]	; (800af78 <HAL_RCC_OscConfig+0x2a4>)
 800af2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af34:	2b00      	cmp	r3, #0
 800af36:	d10f      	bne.n	800af58 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800af38:	2300      	movs	r3, #0
 800af3a:	60fb      	str	r3, [r7, #12]
 800af3c:	4b0e      	ldr	r3, [pc, #56]	; (800af78 <HAL_RCC_OscConfig+0x2a4>)
 800af3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af40:	4a0d      	ldr	r2, [pc, #52]	; (800af78 <HAL_RCC_OscConfig+0x2a4>)
 800af42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af46:	6413      	str	r3, [r2, #64]	; 0x40
 800af48:	4b0b      	ldr	r3, [pc, #44]	; (800af78 <HAL_RCC_OscConfig+0x2a4>)
 800af4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af50:	60fb      	str	r3, [r7, #12]
 800af52:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800af54:	2301      	movs	r3, #1
 800af56:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800af58:	4b0a      	ldr	r3, [pc, #40]	; (800af84 <HAL_RCC_OscConfig+0x2b0>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af60:	2b00      	cmp	r3, #0
 800af62:	d120      	bne.n	800afa6 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800af64:	4b07      	ldr	r3, [pc, #28]	; (800af84 <HAL_RCC_OscConfig+0x2b0>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	4a06      	ldr	r2, [pc, #24]	; (800af84 <HAL_RCC_OscConfig+0x2b0>)
 800af6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800af70:	f7fc ffec 	bl	8007f4c <HAL_GetTick>
 800af74:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800af76:	e010      	b.n	800af9a <HAL_RCC_OscConfig+0x2c6>
 800af78:	40023800 	.word	0x40023800
 800af7c:	42470000 	.word	0x42470000
 800af80:	42470e80 	.word	0x42470e80
 800af84:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800af88:	f7fc ffe0 	bl	8007f4c <HAL_GetTick>
 800af8c:	4602      	mov	r2, r0
 800af8e:	693b      	ldr	r3, [r7, #16]
 800af90:	1ad3      	subs	r3, r2, r3
 800af92:	2b02      	cmp	r3, #2
 800af94:	d901      	bls.n	800af9a <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800af96:	2303      	movs	r3, #3
 800af98:	e0d3      	b.n	800b142 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800af9a:	4b6c      	ldr	r3, [pc, #432]	; (800b14c <HAL_RCC_OscConfig+0x478>)
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d0f0      	beq.n	800af88 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	689b      	ldr	r3, [r3, #8]
 800afaa:	2b01      	cmp	r3, #1
 800afac:	d106      	bne.n	800afbc <HAL_RCC_OscConfig+0x2e8>
 800afae:	4b68      	ldr	r3, [pc, #416]	; (800b150 <HAL_RCC_OscConfig+0x47c>)
 800afb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afb2:	4a67      	ldr	r2, [pc, #412]	; (800b150 <HAL_RCC_OscConfig+0x47c>)
 800afb4:	f043 0301 	orr.w	r3, r3, #1
 800afb8:	6713      	str	r3, [r2, #112]	; 0x70
 800afba:	e01c      	b.n	800aff6 <HAL_RCC_OscConfig+0x322>
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	689b      	ldr	r3, [r3, #8]
 800afc0:	2b05      	cmp	r3, #5
 800afc2:	d10c      	bne.n	800afde <HAL_RCC_OscConfig+0x30a>
 800afc4:	4b62      	ldr	r3, [pc, #392]	; (800b150 <HAL_RCC_OscConfig+0x47c>)
 800afc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afc8:	4a61      	ldr	r2, [pc, #388]	; (800b150 <HAL_RCC_OscConfig+0x47c>)
 800afca:	f043 0304 	orr.w	r3, r3, #4
 800afce:	6713      	str	r3, [r2, #112]	; 0x70
 800afd0:	4b5f      	ldr	r3, [pc, #380]	; (800b150 <HAL_RCC_OscConfig+0x47c>)
 800afd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afd4:	4a5e      	ldr	r2, [pc, #376]	; (800b150 <HAL_RCC_OscConfig+0x47c>)
 800afd6:	f043 0301 	orr.w	r3, r3, #1
 800afda:	6713      	str	r3, [r2, #112]	; 0x70
 800afdc:	e00b      	b.n	800aff6 <HAL_RCC_OscConfig+0x322>
 800afde:	4b5c      	ldr	r3, [pc, #368]	; (800b150 <HAL_RCC_OscConfig+0x47c>)
 800afe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afe2:	4a5b      	ldr	r2, [pc, #364]	; (800b150 <HAL_RCC_OscConfig+0x47c>)
 800afe4:	f023 0301 	bic.w	r3, r3, #1
 800afe8:	6713      	str	r3, [r2, #112]	; 0x70
 800afea:	4b59      	ldr	r3, [pc, #356]	; (800b150 <HAL_RCC_OscConfig+0x47c>)
 800afec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afee:	4a58      	ldr	r2, [pc, #352]	; (800b150 <HAL_RCC_OscConfig+0x47c>)
 800aff0:	f023 0304 	bic.w	r3, r3, #4
 800aff4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	689b      	ldr	r3, [r3, #8]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d015      	beq.n	800b02a <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800affe:	f7fc ffa5 	bl	8007f4c <HAL_GetTick>
 800b002:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b004:	e00a      	b.n	800b01c <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b006:	f7fc ffa1 	bl	8007f4c <HAL_GetTick>
 800b00a:	4602      	mov	r2, r0
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	1ad3      	subs	r3, r2, r3
 800b010:	f241 3288 	movw	r2, #5000	; 0x1388
 800b014:	4293      	cmp	r3, r2
 800b016:	d901      	bls.n	800b01c <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800b018:	2303      	movs	r3, #3
 800b01a:	e092      	b.n	800b142 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b01c:	4b4c      	ldr	r3, [pc, #304]	; (800b150 <HAL_RCC_OscConfig+0x47c>)
 800b01e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b020:	f003 0302 	and.w	r3, r3, #2
 800b024:	2b00      	cmp	r3, #0
 800b026:	d0ee      	beq.n	800b006 <HAL_RCC_OscConfig+0x332>
 800b028:	e014      	b.n	800b054 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b02a:	f7fc ff8f 	bl	8007f4c <HAL_GetTick>
 800b02e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b030:	e00a      	b.n	800b048 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b032:	f7fc ff8b 	bl	8007f4c <HAL_GetTick>
 800b036:	4602      	mov	r2, r0
 800b038:	693b      	ldr	r3, [r7, #16]
 800b03a:	1ad3      	subs	r3, r2, r3
 800b03c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b040:	4293      	cmp	r3, r2
 800b042:	d901      	bls.n	800b048 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800b044:	2303      	movs	r3, #3
 800b046:	e07c      	b.n	800b142 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b048:	4b41      	ldr	r3, [pc, #260]	; (800b150 <HAL_RCC_OscConfig+0x47c>)
 800b04a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b04c:	f003 0302 	and.w	r3, r3, #2
 800b050:	2b00      	cmp	r3, #0
 800b052:	d1ee      	bne.n	800b032 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b054:	7dfb      	ldrb	r3, [r7, #23]
 800b056:	2b01      	cmp	r3, #1
 800b058:	d105      	bne.n	800b066 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b05a:	4b3d      	ldr	r3, [pc, #244]	; (800b150 <HAL_RCC_OscConfig+0x47c>)
 800b05c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b05e:	4a3c      	ldr	r2, [pc, #240]	; (800b150 <HAL_RCC_OscConfig+0x47c>)
 800b060:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b064:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	699b      	ldr	r3, [r3, #24]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d068      	beq.n	800b140 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b06e:	4b38      	ldr	r3, [pc, #224]	; (800b150 <HAL_RCC_OscConfig+0x47c>)
 800b070:	689b      	ldr	r3, [r3, #8]
 800b072:	f003 030c 	and.w	r3, r3, #12
 800b076:	2b08      	cmp	r3, #8
 800b078:	d060      	beq.n	800b13c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	699b      	ldr	r3, [r3, #24]
 800b07e:	2b02      	cmp	r3, #2
 800b080:	d145      	bne.n	800b10e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b082:	4b34      	ldr	r3, [pc, #208]	; (800b154 <HAL_RCC_OscConfig+0x480>)
 800b084:	2200      	movs	r2, #0
 800b086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b088:	f7fc ff60 	bl	8007f4c <HAL_GetTick>
 800b08c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b08e:	e008      	b.n	800b0a2 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b090:	f7fc ff5c 	bl	8007f4c <HAL_GetTick>
 800b094:	4602      	mov	r2, r0
 800b096:	693b      	ldr	r3, [r7, #16]
 800b098:	1ad3      	subs	r3, r2, r3
 800b09a:	2b02      	cmp	r3, #2
 800b09c:	d901      	bls.n	800b0a2 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800b09e:	2303      	movs	r3, #3
 800b0a0:	e04f      	b.n	800b142 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b0a2:	4b2b      	ldr	r3, [pc, #172]	; (800b150 <HAL_RCC_OscConfig+0x47c>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d1f0      	bne.n	800b090 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	69da      	ldr	r2, [r3, #28]
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6a1b      	ldr	r3, [r3, #32]
 800b0b6:	431a      	orrs	r2, r3
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0bc:	019b      	lsls	r3, r3, #6
 800b0be:	431a      	orrs	r2, r3
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0c4:	085b      	lsrs	r3, r3, #1
 800b0c6:	3b01      	subs	r3, #1
 800b0c8:	041b      	lsls	r3, r3, #16
 800b0ca:	431a      	orrs	r2, r3
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0d0:	061b      	lsls	r3, r3, #24
 800b0d2:	431a      	orrs	r2, r3
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0d8:	071b      	lsls	r3, r3, #28
 800b0da:	491d      	ldr	r1, [pc, #116]	; (800b150 <HAL_RCC_OscConfig+0x47c>)
 800b0dc:	4313      	orrs	r3, r2
 800b0de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b0e0:	4b1c      	ldr	r3, [pc, #112]	; (800b154 <HAL_RCC_OscConfig+0x480>)
 800b0e2:	2201      	movs	r2, #1
 800b0e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0e6:	f7fc ff31 	bl	8007f4c <HAL_GetTick>
 800b0ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b0ec:	e008      	b.n	800b100 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b0ee:	f7fc ff2d 	bl	8007f4c <HAL_GetTick>
 800b0f2:	4602      	mov	r2, r0
 800b0f4:	693b      	ldr	r3, [r7, #16]
 800b0f6:	1ad3      	subs	r3, r2, r3
 800b0f8:	2b02      	cmp	r3, #2
 800b0fa:	d901      	bls.n	800b100 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800b0fc:	2303      	movs	r3, #3
 800b0fe:	e020      	b.n	800b142 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b100:	4b13      	ldr	r3, [pc, #76]	; (800b150 <HAL_RCC_OscConfig+0x47c>)
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d0f0      	beq.n	800b0ee <HAL_RCC_OscConfig+0x41a>
 800b10c:	e018      	b.n	800b140 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b10e:	4b11      	ldr	r3, [pc, #68]	; (800b154 <HAL_RCC_OscConfig+0x480>)
 800b110:	2200      	movs	r2, #0
 800b112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b114:	f7fc ff1a 	bl	8007f4c <HAL_GetTick>
 800b118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b11a:	e008      	b.n	800b12e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b11c:	f7fc ff16 	bl	8007f4c <HAL_GetTick>
 800b120:	4602      	mov	r2, r0
 800b122:	693b      	ldr	r3, [r7, #16]
 800b124:	1ad3      	subs	r3, r2, r3
 800b126:	2b02      	cmp	r3, #2
 800b128:	d901      	bls.n	800b12e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800b12a:	2303      	movs	r3, #3
 800b12c:	e009      	b.n	800b142 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b12e:	4b08      	ldr	r3, [pc, #32]	; (800b150 <HAL_RCC_OscConfig+0x47c>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b136:	2b00      	cmp	r3, #0
 800b138:	d1f0      	bne.n	800b11c <HAL_RCC_OscConfig+0x448>
 800b13a:	e001      	b.n	800b140 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800b13c:	2301      	movs	r3, #1
 800b13e:	e000      	b.n	800b142 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800b140:	2300      	movs	r3, #0
}
 800b142:	4618      	mov	r0, r3
 800b144:	3718      	adds	r7, #24
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}
 800b14a:	bf00      	nop
 800b14c:	40007000 	.word	0x40007000
 800b150:	40023800 	.word	0x40023800
 800b154:	42470060 	.word	0x42470060

0800b158 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b082      	sub	sp, #8
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d101      	bne.n	800b16a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800b166:	2301      	movs	r3, #1
 800b168:	e022      	b.n	800b1b0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b170:	b2db      	uxtb	r3, r3
 800b172:	2b00      	cmp	r3, #0
 800b174:	d105      	bne.n	800b182 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2200      	movs	r2, #0
 800b17a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f7fa ff57 	bl	8006030 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2203      	movs	r2, #3
 800b186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f000 f814 	bl	800b1b8 <HAL_SD_InitCard>
 800b190:	4603      	mov	r3, r0
 800b192:	2b00      	cmp	r3, #0
 800b194:	d001      	beq.n	800b19a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800b196:	2301      	movs	r3, #1
 800b198:	e00a      	b.n	800b1b0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2200      	movs	r2, #0
 800b19e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2201      	movs	r2, #1
 800b1aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b1ae:	2300      	movs	r3, #0
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	3708      	adds	r7, #8
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}

0800b1b8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b1b8:	b5b0      	push	{r4, r5, r7, lr}
 800b1ba:	b08e      	sub	sp, #56	; 0x38
 800b1bc:	af04      	add	r7, sp, #16
 800b1be:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800b1d4:	2376      	movs	r3, #118	; 0x76
 800b1d6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681d      	ldr	r5, [r3, #0]
 800b1dc:	466c      	mov	r4, sp
 800b1de:	f107 0314 	add.w	r3, r7, #20
 800b1e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b1e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b1ea:	f107 0308 	add.w	r3, r7, #8
 800b1ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b1f0:	4628      	mov	r0, r5
 800b1f2:	f003 fa87 	bl	800e704 <SDIO_Init>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800b1fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b200:	2b00      	cmp	r3, #0
 800b202:	d001      	beq.n	800b208 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800b204:	2301      	movs	r3, #1
 800b206:	e031      	b.n	800b26c <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800b208:	4b1a      	ldr	r3, [pc, #104]	; (800b274 <HAL_SD_InitCard+0xbc>)
 800b20a:	2200      	movs	r2, #0
 800b20c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	4618      	mov	r0, r3
 800b214:	f003 fabf 	bl	800e796 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800b218:	4b16      	ldr	r3, [pc, #88]	; (800b274 <HAL_SD_InitCard+0xbc>)
 800b21a:	2201      	movs	r2, #1
 800b21c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f000 ffc6 	bl	800c1b0 <SD_PowerON>
 800b224:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b226:	6a3b      	ldr	r3, [r7, #32]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d00b      	beq.n	800b244 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2201      	movs	r2, #1
 800b230:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b238:	6a3b      	ldr	r3, [r7, #32]
 800b23a:	431a      	orrs	r2, r3
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b240:	2301      	movs	r3, #1
 800b242:	e013      	b.n	800b26c <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800b244:	6878      	ldr	r0, [r7, #4]
 800b246:	f000 fee5 	bl	800c014 <SD_InitCard>
 800b24a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b24c:	6a3b      	ldr	r3, [r7, #32]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d00b      	beq.n	800b26a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	2201      	movs	r2, #1
 800b256:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b25e:	6a3b      	ldr	r3, [r7, #32]
 800b260:	431a      	orrs	r2, r3
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b266:	2301      	movs	r3, #1
 800b268:	e000      	b.n	800b26c <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800b26a:	2300      	movs	r3, #0
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	3728      	adds	r7, #40	; 0x28
 800b270:	46bd      	mov	sp, r7
 800b272:	bdb0      	pop	{r4, r5, r7, pc}
 800b274:	422580a0 	.word	0x422580a0

0800b278 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b08c      	sub	sp, #48	; 0x30
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	60f8      	str	r0, [r7, #12]
 800b280:	60b9      	str	r1, [r7, #8]
 800b282:	607a      	str	r2, [r7, #4]
 800b284:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800b28a:	68bb      	ldr	r3, [r7, #8]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d107      	bne.n	800b2a0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b294:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b29c:	2301      	movs	r3, #1
 800b29e:	e0c7      	b.n	800b430 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b2a6:	b2db      	uxtb	r3, r3
 800b2a8:	2b01      	cmp	r3, #1
 800b2aa:	f040 80c0 	bne.w	800b42e <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b2b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	441a      	add	r2, r3
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2be:	429a      	cmp	r2, r3
 800b2c0:	d907      	bls.n	800b2d2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2c6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b2ce:	2301      	movs	r3, #1
 800b2d0:	e0ae      	b.n	800b430 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	2203      	movs	r2, #3
 800b2d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800b2f0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2f6:	4a50      	ldr	r2, [pc, #320]	; (800b438 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800b2f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2fe:	4a4f      	ldr	r2, [pc, #316]	; (800b43c <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800b300:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b306:	2200      	movs	r2, #0
 800b308:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	3380      	adds	r3, #128	; 0x80
 800b314:	4619      	mov	r1, r3
 800b316:	68ba      	ldr	r2, [r7, #8]
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	025b      	lsls	r3, r3, #9
 800b31c:	089b      	lsrs	r3, r3, #2
 800b31e:	f7fd fc07 	bl	8008b30 <HAL_DMA_Start_IT>
 800b322:	4603      	mov	r3, r0
 800b324:	2b00      	cmp	r3, #0
 800b326:	d017      	beq.n	800b358 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800b336:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	4a40      	ldr	r2, [pc, #256]	; (800b440 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800b33e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b344:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	2201      	movs	r2, #1
 800b350:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800b354:	2301      	movs	r3, #1
 800b356:	e06b      	b.n	800b430 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800b358:	4b3a      	ldr	r3, [pc, #232]	; (800b444 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800b35a:	2201      	movs	r2, #1
 800b35c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b362:	2b01      	cmp	r3, #1
 800b364:	d002      	beq.n	800b36c <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800b366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b368:	025b      	lsls	r3, r3, #9
 800b36a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b374:	4618      	mov	r0, r3
 800b376:	f003 faa1 	bl	800e8bc <SDMMC_CmdBlockLength>
 800b37a:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800b37c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d00f      	beq.n	800b3a2 <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	4a2e      	ldr	r2, [pc, #184]	; (800b440 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800b388:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b390:	431a      	orrs	r2, r3
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	2201      	movs	r2, #1
 800b39a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800b39e:	2301      	movs	r3, #1
 800b3a0:	e046      	b.n	800b430 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b3a2:	f04f 33ff 	mov.w	r3, #4294967295
 800b3a6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	025b      	lsls	r3, r3, #9
 800b3ac:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800b3ae:	2390      	movs	r3, #144	; 0x90
 800b3b0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800b3b2:	2302      	movs	r3, #2
 800b3b4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	f107 0210 	add.w	r2, r7, #16
 800b3c6:	4611      	mov	r1, r2
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	f003 fa4b 	bl	800e864 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	2b01      	cmp	r3, #1
 800b3d2:	d90a      	bls.n	800b3ea <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	2282      	movs	r2, #130	; 0x82
 800b3d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f003 faaf 	bl	800e944 <SDMMC_CmdReadMultiBlock>
 800b3e6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b3e8:	e009      	b.n	800b3fe <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	2281      	movs	r2, #129	; 0x81
 800b3ee:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f003 fa82 	bl	800e900 <SDMMC_CmdReadSingleBlock>
 800b3fc:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800b3fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b400:	2b00      	cmp	r3, #0
 800b402:	d012      	beq.n	800b42a <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	4a0d      	ldr	r2, [pc, #52]	; (800b440 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800b40a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b412:	431a      	orrs	r2, r3
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	2201      	movs	r2, #1
 800b41c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	2200      	movs	r2, #0
 800b424:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800b426:	2301      	movs	r3, #1
 800b428:	e002      	b.n	800b430 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800b42a:	2300      	movs	r3, #0
 800b42c:	e000      	b.n	800b430 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800b42e:	2302      	movs	r3, #2
  }
}
 800b430:	4618      	mov	r0, r3
 800b432:	3730      	adds	r7, #48	; 0x30
 800b434:	46bd      	mov	sp, r7
 800b436:	bd80      	pop	{r7, pc}
 800b438:	0800be23 	.word	0x0800be23
 800b43c:	0800be95 	.word	0x0800be95
 800b440:	004005ff 	.word	0x004005ff
 800b444:	4225858c 	.word	0x4225858c

0800b448 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b08c      	sub	sp, #48	; 0x30
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	60f8      	str	r0, [r7, #12]
 800b450:	60b9      	str	r1, [r7, #8]
 800b452:	607a      	str	r2, [r7, #4]
 800b454:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d107      	bne.n	800b470 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b464:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b46c:	2301      	movs	r3, #1
 800b46e:	e0ca      	b.n	800b606 <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b476:	b2db      	uxtb	r3, r3
 800b478:	2b01      	cmp	r3, #1
 800b47a:	f040 80c3 	bne.w	800b604 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	2200      	movs	r2, #0
 800b482:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b484:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	441a      	add	r2, r3
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b48e:	429a      	cmp	r2, r3
 800b490:	d907      	bls.n	800b4a2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b496:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b49e:	2301      	movs	r3, #1
 800b4a0:	e0b1      	b.n	800b606 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	2203      	movs	r2, #3
 800b4a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	f042 021a 	orr.w	r2, r2, #26
 800b4c0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4c6:	4a52      	ldr	r2, [pc, #328]	; (800b610 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800b4c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4ce:	4a51      	ldr	r2, [pc, #324]	; (800b614 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800b4d0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4de:	2b01      	cmp	r3, #1
 800b4e0:	d002      	beq.n	800b4e8 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800b4e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4e4:	025b      	lsls	r3, r3, #9
 800b4e6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f003 f9e3 	bl	800e8bc <SDMMC_CmdBlockLength>
 800b4f6:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b4f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d00f      	beq.n	800b51e <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	4a45      	ldr	r2, [pc, #276]	; (800b618 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800b504:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b50c:	431a      	orrs	r2, r3
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	2201      	movs	r2, #1
 800b516:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800b51a:	2301      	movs	r3, #1
 800b51c:	e073      	b.n	800b606 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	2b01      	cmp	r3, #1
 800b522:	d90a      	bls.n	800b53a <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	22a0      	movs	r2, #160	; 0xa0
 800b528:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b530:	4618      	mov	r0, r3
 800b532:	f003 fa4b 	bl	800e9cc <SDMMC_CmdWriteMultiBlock>
 800b536:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b538:	e009      	b.n	800b54e <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	2290      	movs	r2, #144	; 0x90
 800b53e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b546:	4618      	mov	r0, r3
 800b548:	f003 fa1e 	bl	800e988 <SDMMC_CmdWriteSingleBlock>
 800b54c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800b54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b550:	2b00      	cmp	r3, #0
 800b552:	d012      	beq.n	800b57a <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	4a2f      	ldr	r2, [pc, #188]	; (800b618 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800b55a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b562:	431a      	orrs	r2, r3
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	2201      	movs	r2, #1
 800b56c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	2200      	movs	r2, #0
 800b574:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b576:	2301      	movs	r3, #1
 800b578:	e045      	b.n	800b606 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800b57a:	4b28      	ldr	r3, [pc, #160]	; (800b61c <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800b57c:	2201      	movs	r2, #1
 800b57e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b584:	68b9      	ldr	r1, [r7, #8]
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	3380      	adds	r3, #128	; 0x80
 800b58c:	461a      	mov	r2, r3
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	025b      	lsls	r3, r3, #9
 800b592:	089b      	lsrs	r3, r3, #2
 800b594:	f7fd facc 	bl	8008b30 <HAL_DMA_Start_IT>
 800b598:	4603      	mov	r3, r0
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d01a      	beq.n	800b5d4 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	f022 021a 	bic.w	r2, r2, #26
 800b5ac:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	4a19      	ldr	r2, [pc, #100]	; (800b618 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800b5b4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5ba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	2201      	movs	r2, #1
 800b5c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	e018      	b.n	800b606 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b5d4:	f04f 33ff 	mov.w	r3, #4294967295
 800b5d8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	025b      	lsls	r3, r3, #9
 800b5de:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800b5e0:	2390      	movs	r3, #144	; 0x90
 800b5e2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800b5ec:	2301      	movs	r3, #1
 800b5ee:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	f107 0210 	add.w	r2, r7, #16
 800b5f8:	4611      	mov	r1, r2
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f003 f932 	bl	800e864 <SDIO_ConfigData>

      return HAL_OK;
 800b600:	2300      	movs	r3, #0
 800b602:	e000      	b.n	800b606 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800b604:	2302      	movs	r3, #2
  }
}
 800b606:	4618      	mov	r0, r3
 800b608:	3730      	adds	r7, #48	; 0x30
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}
 800b60e:	bf00      	nop
 800b610:	0800bdf9 	.word	0x0800bdf9
 800b614:	0800be95 	.word	0x0800be95
 800b618:	004005ff 	.word	0x004005ff
 800b61c:	4225858c 	.word	0x4225858c

0800b620 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b084      	sub	sp, #16
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b62c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b634:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d008      	beq.n	800b64e <HAL_SD_IRQHandler+0x2e>
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	f003 0308 	and.w	r3, r3, #8
 800b642:	2b00      	cmp	r3, #0
 800b644:	d003      	beq.n	800b64e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f000 ffc8 	bl	800c5dc <SD_Read_IT>
 800b64c:	e155      	b.n	800b8fa <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b658:	2b00      	cmp	r3, #0
 800b65a:	f000 808f 	beq.w	800b77c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b666:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b66e:	687a      	ldr	r2, [r7, #4]
 800b670:	6812      	ldr	r2, [r2, #0]
 800b672:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800b676:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800b67a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	f022 0201 	bic.w	r2, r2, #1
 800b68a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	f003 0308 	and.w	r3, r3, #8
 800b692:	2b00      	cmp	r3, #0
 800b694:	d039      	beq.n	800b70a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	f003 0302 	and.w	r3, r3, #2
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d104      	bne.n	800b6aa <HAL_SD_IRQHandler+0x8a>
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	f003 0320 	and.w	r3, r3, #32
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d011      	beq.n	800b6ce <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f003 f9ae 	bl	800ea10 <SDMMC_CmdStopTransfer>
 800b6b4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800b6b6:	68bb      	ldr	r3, [r7, #8]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d008      	beq.n	800b6ce <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	431a      	orrs	r2, r3
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f000 f91f 	bl	800b90c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	f240 523a 	movw	r2, #1338	; 0x53a
 800b6d6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2201      	movs	r2, #1
 800b6dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	f003 0301 	and.w	r3, r3, #1
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d104      	bne.n	800b6fa <HAL_SD_IRQHandler+0xda>
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	f003 0302 	and.w	r3, r3, #2
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d003      	beq.n	800b702 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f003 fe04 	bl	800f308 <HAL_SD_RxCpltCallback>
 800b700:	e0fb      	b.n	800b8fa <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f003 fdf6 	bl	800f2f4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800b708:	e0f7      	b.n	800b8fa <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b710:	2b00      	cmp	r3, #0
 800b712:	f000 80f2 	beq.w	800b8fa <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	f003 0320 	and.w	r3, r3, #32
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d011      	beq.n	800b744 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	4618      	mov	r0, r3
 800b726:	f003 f973 	bl	800ea10 <SDMMC_CmdStopTransfer>
 800b72a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d008      	beq.n	800b744 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	431a      	orrs	r2, r3
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	f000 f8e4 	bl	800b90c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	f003 0301 	and.w	r3, r3, #1
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	f040 80d5 	bne.w	800b8fa <HAL_SD_IRQHandler+0x2da>
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	f003 0302 	and.w	r3, r3, #2
 800b756:	2b00      	cmp	r3, #0
 800b758:	f040 80cf 	bne.w	800b8fa <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	f022 0208 	bic.w	r2, r2, #8
 800b76a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2201      	movs	r2, #1
 800b770:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f003 fdbd 	bl	800f2f4 <HAL_SD_TxCpltCallback>
}
 800b77a:	e0be      	b.n	800b8fa <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b786:	2b00      	cmp	r3, #0
 800b788:	d008      	beq.n	800b79c <HAL_SD_IRQHandler+0x17c>
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	f003 0308 	and.w	r3, r3, #8
 800b790:	2b00      	cmp	r3, #0
 800b792:	d003      	beq.n	800b79c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f000 ff72 	bl	800c67e <SD_Write_IT>
 800b79a:	e0ae      	b.n	800b8fa <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7a2:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	f000 80a7 	beq.w	800b8fa <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7b2:	f003 0302 	and.w	r3, r3, #2
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d005      	beq.n	800b7c6 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7be:	f043 0202 	orr.w	r2, r3, #2
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7cc:	f003 0308 	and.w	r3, r3, #8
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d005      	beq.n	800b7e0 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7d8:	f043 0208 	orr.w	r2, r3, #8
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7e6:	f003 0320 	and.w	r3, r3, #32
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d005      	beq.n	800b7fa <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7f2:	f043 0220 	orr.w	r2, r3, #32
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b800:	f003 0310 	and.w	r3, r3, #16
 800b804:	2b00      	cmp	r3, #0
 800b806:	d005      	beq.n	800b814 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b80c:	f043 0210 	orr.w	r2, r3, #16
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f240 523a 	movw	r2, #1338	; 0x53a
 800b81c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800b82c:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	4618      	mov	r0, r3
 800b834:	f003 f8ec 	bl	800ea10 <SDMMC_CmdStopTransfer>
 800b838:	4602      	mov	r2, r0
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b83e:	431a      	orrs	r2, r3
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	f003 0308 	and.w	r3, r3, #8
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d00a      	beq.n	800b864 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2201      	movs	r2, #1
 800b852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2200      	movs	r2, #0
 800b85a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f000 f855 	bl	800b90c <HAL_SD_ErrorCallback>
}
 800b862:	e04a      	b.n	800b8fa <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d045      	beq.n	800b8fa <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	f003 0310 	and.w	r3, r3, #16
 800b874:	2b00      	cmp	r3, #0
 800b876:	d104      	bne.n	800b882 <HAL_SD_IRQHandler+0x262>
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	f003 0320 	and.w	r3, r3, #32
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d011      	beq.n	800b8a6 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b886:	4a1f      	ldr	r2, [pc, #124]	; (800b904 <HAL_SD_IRQHandler+0x2e4>)
 800b888:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b88e:	4618      	mov	r0, r3
 800b890:	f7fd f9a6 	bl	8008be0 <HAL_DMA_Abort_IT>
 800b894:	4603      	mov	r3, r0
 800b896:	2b00      	cmp	r3, #0
 800b898:	d02f      	beq.n	800b8fa <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b89e:	4618      	mov	r0, r3
 800b8a0:	f000 fb4a 	bl	800bf38 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800b8a4:	e029      	b.n	800b8fa <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	f003 0301 	and.w	r3, r3, #1
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d104      	bne.n	800b8ba <HAL_SD_IRQHandler+0x29a>
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	f003 0302 	and.w	r3, r3, #2
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d011      	beq.n	800b8de <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8be:	4a12      	ldr	r2, [pc, #72]	; (800b908 <HAL_SD_IRQHandler+0x2e8>)
 800b8c0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f7fd f98a 	bl	8008be0 <HAL_DMA_Abort_IT>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d013      	beq.n	800b8fa <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f000 fb65 	bl	800bfa6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800b8dc:	e00d      	b.n	800b8fa <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2201      	movs	r2, #1
 800b8e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f003 fcf4 	bl	800f2e0 <HAL_SD_AbortCallback>
}
 800b8f8:	e7ff      	b.n	800b8fa <HAL_SD_IRQHandler+0x2da>
 800b8fa:	bf00      	nop
 800b8fc:	3710      	adds	r7, #16
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}
 800b902:	bf00      	nop
 800b904:	0800bf39 	.word	0x0800bf39
 800b908:	0800bfa7 	.word	0x0800bfa7

0800b90c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800b90c:	b480      	push	{r7}
 800b90e:	b083      	sub	sp, #12
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800b914:	bf00      	nop
 800b916:	370c      	adds	r7, #12
 800b918:	46bd      	mov	sp, r7
 800b91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91e:	4770      	bx	lr

0800b920 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800b920:	b480      	push	{r7}
 800b922:	b083      	sub	sp, #12
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
 800b928:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b92e:	0f9b      	lsrs	r3, r3, #30
 800b930:	b2da      	uxtb	r2, r3
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b93a:	0e9b      	lsrs	r3, r3, #26
 800b93c:	b2db      	uxtb	r3, r3
 800b93e:	f003 030f 	and.w	r3, r3, #15
 800b942:	b2da      	uxtb	r2, r3
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b94c:	0e1b      	lsrs	r3, r3, #24
 800b94e:	b2db      	uxtb	r3, r3
 800b950:	f003 0303 	and.w	r3, r3, #3
 800b954:	b2da      	uxtb	r2, r3
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b95e:	0c1b      	lsrs	r3, r3, #16
 800b960:	b2da      	uxtb	r2, r3
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b96a:	0a1b      	lsrs	r3, r3, #8
 800b96c:	b2da      	uxtb	r2, r3
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b976:	b2da      	uxtb	r2, r3
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b980:	0d1b      	lsrs	r3, r3, #20
 800b982:	b29a      	uxth	r2, r3
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b98c:	0c1b      	lsrs	r3, r3, #16
 800b98e:	b2db      	uxtb	r3, r3
 800b990:	f003 030f 	and.w	r3, r3, #15
 800b994:	b2da      	uxtb	r2, r3
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b99e:	0bdb      	lsrs	r3, r3, #15
 800b9a0:	b2db      	uxtb	r3, r3
 800b9a2:	f003 0301 	and.w	r3, r3, #1
 800b9a6:	b2da      	uxtb	r2, r3
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b9b0:	0b9b      	lsrs	r3, r3, #14
 800b9b2:	b2db      	uxtb	r3, r3
 800b9b4:	f003 0301 	and.w	r3, r3, #1
 800b9b8:	b2da      	uxtb	r2, r3
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b9c2:	0b5b      	lsrs	r3, r3, #13
 800b9c4:	b2db      	uxtb	r3, r3
 800b9c6:	f003 0301 	and.w	r3, r3, #1
 800b9ca:	b2da      	uxtb	r2, r3
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b9d4:	0b1b      	lsrs	r3, r3, #12
 800b9d6:	b2db      	uxtb	r3, r3
 800b9d8:	f003 0301 	and.w	r3, r3, #1
 800b9dc:	b2da      	uxtb	r2, r3
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d163      	bne.n	800bab8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b9f4:	009a      	lsls	r2, r3, #2
 800b9f6:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b9fa:	4013      	ands	r3, r2
 800b9fc:	687a      	ldr	r2, [r7, #4]
 800b9fe:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800ba00:	0f92      	lsrs	r2, r2, #30
 800ba02:	431a      	orrs	r2, r3
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba0c:	0edb      	lsrs	r3, r3, #27
 800ba0e:	b2db      	uxtb	r3, r3
 800ba10:	f003 0307 	and.w	r3, r3, #7
 800ba14:	b2da      	uxtb	r2, r3
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba1e:	0e1b      	lsrs	r3, r3, #24
 800ba20:	b2db      	uxtb	r3, r3
 800ba22:	f003 0307 	and.w	r3, r3, #7
 800ba26:	b2da      	uxtb	r2, r3
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba30:	0d5b      	lsrs	r3, r3, #21
 800ba32:	b2db      	uxtb	r3, r3
 800ba34:	f003 0307 	and.w	r3, r3, #7
 800ba38:	b2da      	uxtb	r2, r3
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba42:	0c9b      	lsrs	r3, r3, #18
 800ba44:	b2db      	uxtb	r3, r3
 800ba46:	f003 0307 	and.w	r3, r3, #7
 800ba4a:	b2da      	uxtb	r2, r3
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba54:	0bdb      	lsrs	r3, r3, #15
 800ba56:	b2db      	uxtb	r3, r3
 800ba58:	f003 0307 	and.w	r3, r3, #7
 800ba5c:	b2da      	uxtb	r2, r3
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	691b      	ldr	r3, [r3, #16]
 800ba66:	1c5a      	adds	r2, r3, #1
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	7e1b      	ldrb	r3, [r3, #24]
 800ba70:	b2db      	uxtb	r3, r3
 800ba72:	f003 0307 	and.w	r3, r3, #7
 800ba76:	3302      	adds	r3, #2
 800ba78:	2201      	movs	r2, #1
 800ba7a:	fa02 f303 	lsl.w	r3, r2, r3
 800ba7e:	687a      	ldr	r2, [r7, #4]
 800ba80:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800ba82:	fb02 f203 	mul.w	r2, r2, r3
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	7a1b      	ldrb	r3, [r3, #8]
 800ba8e:	b2db      	uxtb	r3, r3
 800ba90:	f003 030f 	and.w	r3, r3, #15
 800ba94:	2201      	movs	r2, #1
 800ba96:	409a      	lsls	r2, r3
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800baa0:	687a      	ldr	r2, [r7, #4]
 800baa2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800baa4:	0a52      	lsrs	r2, r2, #9
 800baa6:	fb02 f203 	mul.w	r2, r2, r3
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bab4:	661a      	str	r2, [r3, #96]	; 0x60
 800bab6:	e031      	b.n	800bb1c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800babc:	2b01      	cmp	r3, #1
 800babe:	d11d      	bne.n	800bafc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bac4:	041b      	lsls	r3, r3, #16
 800bac6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bace:	0c1b      	lsrs	r3, r3, #16
 800bad0:	431a      	orrs	r2, r3
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	691b      	ldr	r3, [r3, #16]
 800bada:	3301      	adds	r3, #1
 800badc:	029a      	lsls	r2, r3, #10
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	f44f 7200 	mov.w	r2, #512	; 0x200
 800baf0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	661a      	str	r2, [r3, #96]	; 0x60
 800bafa:	e00f      	b.n	800bb1c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	4a58      	ldr	r2, [pc, #352]	; (800bc64 <HAL_SD_GetCardCSD+0x344>)
 800bb02:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb08:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2201      	movs	r2, #1
 800bb14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800bb18:	2301      	movs	r3, #1
 800bb1a:	e09d      	b.n	800bc58 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb20:	0b9b      	lsrs	r3, r3, #14
 800bb22:	b2db      	uxtb	r3, r3
 800bb24:	f003 0301 	and.w	r3, r3, #1
 800bb28:	b2da      	uxtb	r2, r3
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb32:	09db      	lsrs	r3, r3, #7
 800bb34:	b2db      	uxtb	r3, r3
 800bb36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb3a:	b2da      	uxtb	r2, r3
 800bb3c:	683b      	ldr	r3, [r7, #0]
 800bb3e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb44:	b2db      	uxtb	r3, r3
 800bb46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb4a:	b2da      	uxtb	r2, r3
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb54:	0fdb      	lsrs	r3, r3, #31
 800bb56:	b2da      	uxtb	r2, r3
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb60:	0f5b      	lsrs	r3, r3, #29
 800bb62:	b2db      	uxtb	r3, r3
 800bb64:	f003 0303 	and.w	r3, r3, #3
 800bb68:	b2da      	uxtb	r2, r3
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb72:	0e9b      	lsrs	r3, r3, #26
 800bb74:	b2db      	uxtb	r3, r3
 800bb76:	f003 0307 	and.w	r3, r3, #7
 800bb7a:	b2da      	uxtb	r2, r3
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb84:	0d9b      	lsrs	r3, r3, #22
 800bb86:	b2db      	uxtb	r3, r3
 800bb88:	f003 030f 	and.w	r3, r3, #15
 800bb8c:	b2da      	uxtb	r2, r3
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb96:	0d5b      	lsrs	r3, r3, #21
 800bb98:	b2db      	uxtb	r3, r3
 800bb9a:	f003 0301 	and.w	r3, r3, #1
 800bb9e:	b2da      	uxtb	r2, r3
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	2200      	movs	r2, #0
 800bbaa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbb2:	0c1b      	lsrs	r3, r3, #16
 800bbb4:	b2db      	uxtb	r3, r3
 800bbb6:	f003 0301 	and.w	r3, r3, #1
 800bbba:	b2da      	uxtb	r2, r3
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbc6:	0bdb      	lsrs	r3, r3, #15
 800bbc8:	b2db      	uxtb	r3, r3
 800bbca:	f003 0301 	and.w	r3, r3, #1
 800bbce:	b2da      	uxtb	r2, r3
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbda:	0b9b      	lsrs	r3, r3, #14
 800bbdc:	b2db      	uxtb	r3, r3
 800bbde:	f003 0301 	and.w	r3, r3, #1
 800bbe2:	b2da      	uxtb	r2, r3
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbee:	0b5b      	lsrs	r3, r3, #13
 800bbf0:	b2db      	uxtb	r3, r3
 800bbf2:	f003 0301 	and.w	r3, r3, #1
 800bbf6:	b2da      	uxtb	r2, r3
 800bbf8:	683b      	ldr	r3, [r7, #0]
 800bbfa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc02:	0b1b      	lsrs	r3, r3, #12
 800bc04:	b2db      	uxtb	r3, r3
 800bc06:	f003 0301 	and.w	r3, r3, #1
 800bc0a:	b2da      	uxtb	r2, r3
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc16:	0a9b      	lsrs	r3, r3, #10
 800bc18:	b2db      	uxtb	r3, r3
 800bc1a:	f003 0303 	and.w	r3, r3, #3
 800bc1e:	b2da      	uxtb	r2, r3
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc2a:	0a1b      	lsrs	r3, r3, #8
 800bc2c:	b2db      	uxtb	r3, r3
 800bc2e:	f003 0303 	and.w	r3, r3, #3
 800bc32:	b2da      	uxtb	r2, r3
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc3e:	085b      	lsrs	r3, r3, #1
 800bc40:	b2db      	uxtb	r3, r3
 800bc42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc46:	b2da      	uxtb	r2, r3
 800bc48:	683b      	ldr	r3, [r7, #0]
 800bc4a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	2201      	movs	r2, #1
 800bc52:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800bc56:	2300      	movs	r3, #0
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	370c      	adds	r7, #12
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc62:	4770      	bx	lr
 800bc64:	004005ff 	.word	0x004005ff

0800bc68 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800bc68:	b480      	push	{r7}
 800bc6a:	b083      	sub	sp, #12
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
 800bc70:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800bcb2:	2300      	movs	r3, #0
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	370c      	adds	r7, #12
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbe:	4770      	bx	lr

0800bcc0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800bcc0:	b5b0      	push	{r4, r5, r7, lr}
 800bcc2:	b08e      	sub	sp, #56	; 0x38
 800bcc4:	af04      	add	r7, sp, #16
 800bcc6:	6078      	str	r0, [r7, #4]
 800bcc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2203      	movs	r2, #3
 800bcce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcd6:	2b03      	cmp	r3, #3
 800bcd8:	d02e      	beq.n	800bd38 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bce0:	d106      	bne.n	800bcf0 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bce6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	639a      	str	r2, [r3, #56]	; 0x38
 800bcee:	e029      	b.n	800bd44 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bcf6:	d10a      	bne.n	800bd0e <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f000 fb0f 	bl	800c31c <SD_WideBus_Enable>
 800bcfe:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd06:	431a      	orrs	r2, r3
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	639a      	str	r2, [r3, #56]	; 0x38
 800bd0c:	e01a      	b.n	800bd44 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d10a      	bne.n	800bd2a <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800bd14:	6878      	ldr	r0, [r7, #4]
 800bd16:	f000 fb4c 	bl	800c3b2 <SD_WideBus_Disable>
 800bd1a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd22:	431a      	orrs	r2, r3
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	639a      	str	r2, [r3, #56]	; 0x38
 800bd28:	e00c      	b.n	800bd44 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd2e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	639a      	str	r2, [r3, #56]	; 0x38
 800bd36:	e005      	b.n	800bd44 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd3c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d009      	beq.n	800bd60 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	4a18      	ldr	r2, [pc, #96]	; (800bdb4 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800bd52:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2201      	movs	r2, #1
 800bd58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800bd5c:	2301      	movs	r3, #1
 800bd5e:	e024      	b.n	800bdaa <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	685b      	ldr	r3, [r3, #4]
 800bd64:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	689b      	ldr	r3, [r3, #8]
 800bd6a:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	68db      	ldr	r3, [r3, #12]
 800bd70:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	695b      	ldr	r3, [r3, #20]
 800bd7a:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	699b      	ldr	r3, [r3, #24]
 800bd80:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681d      	ldr	r5, [r3, #0]
 800bd86:	466c      	mov	r4, sp
 800bd88:	f107 0318 	add.w	r3, r7, #24
 800bd8c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bd90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bd94:	f107 030c 	add.w	r3, r7, #12
 800bd98:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bd9a:	4628      	mov	r0, r5
 800bd9c:	f002 fcb2 	bl	800e704 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2201      	movs	r2, #1
 800bda4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800bda8:	2300      	movs	r3, #0
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3728      	adds	r7, #40	; 0x28
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bdb0      	pop	{r4, r5, r7, pc}
 800bdb2:	bf00      	nop
 800bdb4:	004005ff 	.word	0x004005ff

0800bdb8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b086      	sub	sp, #24
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800bdc4:	f107 030c 	add.w	r3, r7, #12
 800bdc8:	4619      	mov	r1, r3
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	f000 fa7e 	bl	800c2cc <SD_SendStatus>
 800bdd0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bdd2:	697b      	ldr	r3, [r7, #20]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d005      	beq.n	800bde4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bddc:	697b      	ldr	r3, [r7, #20]
 800bdde:	431a      	orrs	r2, r3
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	0a5b      	lsrs	r3, r3, #9
 800bde8:	f003 030f 	and.w	r3, r3, #15
 800bdec:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800bdee:	693b      	ldr	r3, [r7, #16]
}
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	3718      	adds	r7, #24
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd80      	pop	{r7, pc}

0800bdf8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bdf8:	b480      	push	{r7}
 800bdfa:	b085      	sub	sp, #20
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be04:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800be14:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800be16:	bf00      	nop
 800be18:	3714      	adds	r7, #20
 800be1a:	46bd      	mov	sp, r7
 800be1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be20:	4770      	bx	lr

0800be22 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800be22:	b580      	push	{r7, lr}
 800be24:	b084      	sub	sp, #16
 800be26:	af00      	add	r7, sp, #0
 800be28:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be2e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be34:	2b82      	cmp	r3, #130	; 0x82
 800be36:	d111      	bne.n	800be5c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	4618      	mov	r0, r3
 800be3e:	f002 fde7 	bl	800ea10 <SDMMC_CmdStopTransfer>
 800be42:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d008      	beq.n	800be5c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be4e:	68bb      	ldr	r3, [r7, #8]
 800be50:	431a      	orrs	r2, r3
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800be56:	68f8      	ldr	r0, [r7, #12]
 800be58:	f7ff fd58 	bl	800b90c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	f022 0208 	bic.w	r2, r2, #8
 800be6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	f240 523a 	movw	r2, #1338	; 0x53a
 800be74:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	2201      	movs	r2, #1
 800be7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	2200      	movs	r2, #0
 800be82:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800be84:	68f8      	ldr	r0, [r7, #12]
 800be86:	f003 fa3f 	bl	800f308 <HAL_SD_RxCpltCallback>
#endif
}
 800be8a:	bf00      	nop
 800be8c:	3710      	adds	r7, #16
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}
	...

0800be94 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b086      	sub	sp, #24
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bea0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f7fd f848 	bl	8008f38 <HAL_DMA_GetError>
 800bea8:	4603      	mov	r3, r0
 800beaa:	2b02      	cmp	r3, #2
 800beac:	d03e      	beq.n	800bf2c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800beb4:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800beb6:	697b      	ldr	r3, [r7, #20]
 800beb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800beba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bebc:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800bebe:	693b      	ldr	r3, [r7, #16]
 800bec0:	2b01      	cmp	r3, #1
 800bec2:	d002      	beq.n	800beca <SD_DMAError+0x36>
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	2b01      	cmp	r3, #1
 800bec8:	d12d      	bne.n	800bf26 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800beca:	697b      	ldr	r3, [r7, #20]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	4a19      	ldr	r2, [pc, #100]	; (800bf34 <SD_DMAError+0xa0>)
 800bed0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800bed2:	697b      	ldr	r3, [r7, #20]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bed8:	697b      	ldr	r3, [r7, #20]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800bee0:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800bee2:	697b      	ldr	r3, [r7, #20]
 800bee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bee6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800beea:	697b      	ldr	r3, [r7, #20]
 800beec:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800beee:	6978      	ldr	r0, [r7, #20]
 800bef0:	f7ff ff62 	bl	800bdb8 <HAL_SD_GetCardState>
 800bef4:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800bef6:	68bb      	ldr	r3, [r7, #8]
 800bef8:	2b06      	cmp	r3, #6
 800befa:	d002      	beq.n	800bf02 <SD_DMAError+0x6e>
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	2b05      	cmp	r3, #5
 800bf00:	d10a      	bne.n	800bf18 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800bf02:	697b      	ldr	r3, [r7, #20]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	4618      	mov	r0, r3
 800bf08:	f002 fd82 	bl	800ea10 <SDMMC_CmdStopTransfer>
 800bf0c:	4602      	mov	r2, r0
 800bf0e:	697b      	ldr	r3, [r7, #20]
 800bf10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf12:	431a      	orrs	r2, r3
 800bf14:	697b      	ldr	r3, [r7, #20]
 800bf16:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800bf18:	697b      	ldr	r3, [r7, #20]
 800bf1a:	2201      	movs	r2, #1
 800bf1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bf20:	697b      	ldr	r3, [r7, #20]
 800bf22:	2200      	movs	r2, #0
 800bf24:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800bf26:	6978      	ldr	r0, [r7, #20]
 800bf28:	f7ff fcf0 	bl	800b90c <HAL_SD_ErrorCallback>
#endif
  }
}
 800bf2c:	bf00      	nop
 800bf2e:	3718      	adds	r7, #24
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bd80      	pop	{r7, pc}
 800bf34:	004005ff 	.word	0x004005ff

0800bf38 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b084      	sub	sp, #16
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf44:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	f240 523a 	movw	r2, #1338	; 0x53a
 800bf4e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800bf50:	68f8      	ldr	r0, [r7, #12]
 800bf52:	f7ff ff31 	bl	800bdb8 <HAL_SD_GetCardState>
 800bf56:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	2201      	movs	r2, #1
 800bf5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	2200      	movs	r2, #0
 800bf64:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	2b06      	cmp	r3, #6
 800bf6a:	d002      	beq.n	800bf72 <SD_DMATxAbort+0x3a>
 800bf6c:	68bb      	ldr	r3, [r7, #8]
 800bf6e:	2b05      	cmp	r3, #5
 800bf70:	d10a      	bne.n	800bf88 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	4618      	mov	r0, r3
 800bf78:	f002 fd4a 	bl	800ea10 <SDMMC_CmdStopTransfer>
 800bf7c:	4602      	mov	r2, r0
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf82:	431a      	orrs	r2, r3
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d103      	bne.n	800bf98 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800bf90:	68f8      	ldr	r0, [r7, #12]
 800bf92:	f003 f9a5 	bl	800f2e0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800bf96:	e002      	b.n	800bf9e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800bf98:	68f8      	ldr	r0, [r7, #12]
 800bf9a:	f7ff fcb7 	bl	800b90c <HAL_SD_ErrorCallback>
}
 800bf9e:	bf00      	nop
 800bfa0:	3710      	adds	r7, #16
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bd80      	pop	{r7, pc}

0800bfa6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800bfa6:	b580      	push	{r7, lr}
 800bfa8:	b084      	sub	sp, #16
 800bfaa:	af00      	add	r7, sp, #0
 800bfac:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfb2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	f240 523a 	movw	r2, #1338	; 0x53a
 800bfbc:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800bfbe:	68f8      	ldr	r0, [r7, #12]
 800bfc0:	f7ff fefa 	bl	800bdb8 <HAL_SD_GetCardState>
 800bfc4:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	2201      	movs	r2, #1
 800bfca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	2b06      	cmp	r3, #6
 800bfd8:	d002      	beq.n	800bfe0 <SD_DMARxAbort+0x3a>
 800bfda:	68bb      	ldr	r3, [r7, #8]
 800bfdc:	2b05      	cmp	r3, #5
 800bfde:	d10a      	bne.n	800bff6 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	f002 fd13 	bl	800ea10 <SDMMC_CmdStopTransfer>
 800bfea:	4602      	mov	r2, r0
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bff0:	431a      	orrs	r2, r3
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d103      	bne.n	800c006 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800bffe:	68f8      	ldr	r0, [r7, #12]
 800c000:	f003 f96e 	bl	800f2e0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800c004:	e002      	b.n	800c00c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800c006:	68f8      	ldr	r0, [r7, #12]
 800c008:	f7ff fc80 	bl	800b90c <HAL_SD_ErrorCallback>
}
 800c00c:	bf00      	nop
 800c00e:	3710      	adds	r7, #16
 800c010:	46bd      	mov	sp, r7
 800c012:	bd80      	pop	{r7, pc}

0800c014 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c014:	b5b0      	push	{r4, r5, r7, lr}
 800c016:	b094      	sub	sp, #80	; 0x50
 800c018:	af04      	add	r7, sp, #16
 800c01a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800c01c:	2301      	movs	r3, #1
 800c01e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	4618      	mov	r0, r3
 800c026:	f002 fbc5 	bl	800e7b4 <SDIO_GetPowerState>
 800c02a:	4603      	mov	r3, r0
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d102      	bne.n	800c036 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c030:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800c034:	e0b7      	b.n	800c1a6 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c03a:	2b03      	cmp	r3, #3
 800c03c:	d02f      	beq.n	800c09e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	4618      	mov	r0, r3
 800c044:	f002 fdee 	bl	800ec24 <SDMMC_CmdSendCID>
 800c048:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c04a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d001      	beq.n	800c054 <SD_InitCard+0x40>
    {
      return errorstate;
 800c050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c052:	e0a8      	b.n	800c1a6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	2100      	movs	r1, #0
 800c05a:	4618      	mov	r0, r3
 800c05c:	f002 fbef 	bl	800e83e <SDIO_GetResponse>
 800c060:	4602      	mov	r2, r0
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	2104      	movs	r1, #4
 800c06c:	4618      	mov	r0, r3
 800c06e:	f002 fbe6 	bl	800e83e <SDIO_GetResponse>
 800c072:	4602      	mov	r2, r0
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	2108      	movs	r1, #8
 800c07e:	4618      	mov	r0, r3
 800c080:	f002 fbdd 	bl	800e83e <SDIO_GetResponse>
 800c084:	4602      	mov	r2, r0
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	210c      	movs	r1, #12
 800c090:	4618      	mov	r0, r3
 800c092:	f002 fbd4 	bl	800e83e <SDIO_GetResponse>
 800c096:	4602      	mov	r2, r0
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0a2:	2b03      	cmp	r3, #3
 800c0a4:	d00d      	beq.n	800c0c2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	f107 020e 	add.w	r2, r7, #14
 800c0ae:	4611      	mov	r1, r2
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	f002 fdf4 	bl	800ec9e <SDMMC_CmdSetRelAdd>
 800c0b6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c0b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d001      	beq.n	800c0c2 <SD_InitCard+0xae>
    {
      return errorstate;
 800c0be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0c0:	e071      	b.n	800c1a6 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0c6:	2b03      	cmp	r3, #3
 800c0c8:	d036      	beq.n	800c138 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800c0ca:	89fb      	ldrh	r3, [r7, #14]
 800c0cc:	461a      	mov	r2, r3
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681a      	ldr	r2, [r3, #0]
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0da:	041b      	lsls	r3, r3, #16
 800c0dc:	4619      	mov	r1, r3
 800c0de:	4610      	mov	r0, r2
 800c0e0:	f002 fdbe 	bl	800ec60 <SDMMC_CmdSendCSD>
 800c0e4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c0e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d001      	beq.n	800c0f0 <SD_InitCard+0xdc>
    {
      return errorstate;
 800c0ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0ee:	e05a      	b.n	800c1a6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	2100      	movs	r1, #0
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	f002 fba1 	bl	800e83e <SDIO_GetResponse>
 800c0fc:	4602      	mov	r2, r0
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	2104      	movs	r1, #4
 800c108:	4618      	mov	r0, r3
 800c10a:	f002 fb98 	bl	800e83e <SDIO_GetResponse>
 800c10e:	4602      	mov	r2, r0
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	2108      	movs	r1, #8
 800c11a:	4618      	mov	r0, r3
 800c11c:	f002 fb8f 	bl	800e83e <SDIO_GetResponse>
 800c120:	4602      	mov	r2, r0
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	210c      	movs	r1, #12
 800c12c:	4618      	mov	r0, r3
 800c12e:	f002 fb86 	bl	800e83e <SDIO_GetResponse>
 800c132:	4602      	mov	r2, r0
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	2104      	movs	r1, #4
 800c13e:	4618      	mov	r0, r3
 800c140:	f002 fb7d 	bl	800e83e <SDIO_GetResponse>
 800c144:	4603      	mov	r3, r0
 800c146:	0d1a      	lsrs	r2, r3, #20
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800c14c:	f107 0310 	add.w	r3, r7, #16
 800c150:	4619      	mov	r1, r3
 800c152:	6878      	ldr	r0, [r7, #4]
 800c154:	f7ff fbe4 	bl	800b920 <HAL_SD_GetCardCSD>
 800c158:	4603      	mov	r3, r0
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d002      	beq.n	800c164 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c15e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c162:	e020      	b.n	800c1a6 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	6819      	ldr	r1, [r3, #0]
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c16c:	041b      	lsls	r3, r3, #16
 800c16e:	f04f 0400 	mov.w	r4, #0
 800c172:	461a      	mov	r2, r3
 800c174:	4623      	mov	r3, r4
 800c176:	4608      	mov	r0, r1
 800c178:	f002 fc6c 	bl	800ea54 <SDMMC_CmdSelDesel>
 800c17c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800c17e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c180:	2b00      	cmp	r3, #0
 800c182:	d001      	beq.n	800c188 <SD_InitCard+0x174>
  {
    return errorstate;
 800c184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c186:	e00e      	b.n	800c1a6 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681d      	ldr	r5, [r3, #0]
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	466c      	mov	r4, sp
 800c190:	f103 0210 	add.w	r2, r3, #16
 800c194:	ca07      	ldmia	r2, {r0, r1, r2}
 800c196:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c19a:	3304      	adds	r3, #4
 800c19c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c19e:	4628      	mov	r0, r5
 800c1a0:	f002 fab0 	bl	800e704 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800c1a4:	2300      	movs	r3, #0
}
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	3740      	adds	r7, #64	; 0x40
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800c1b0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b086      	sub	sp, #24
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800c1bc:	2300      	movs	r3, #0
 800c1be:	617b      	str	r3, [r7, #20]
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	f002 fc66 	bl	800ea9a <SDMMC_CmdGoIdleState>
 800c1ce:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d001      	beq.n	800c1da <SD_PowerON+0x2a>
  {
    return errorstate;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	e072      	b.n	800c2c0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f002 fc79 	bl	800ead6 <SDMMC_CmdOperCond>
 800c1e4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d00d      	beq.n	800c208 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f002 fc4f 	bl	800ea9a <SDMMC_CmdGoIdleState>
 800c1fc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d004      	beq.n	800c20e <SD_PowerON+0x5e>
    {
      return errorstate;
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	e05b      	b.n	800c2c0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2201      	movs	r2, #1
 800c20c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c212:	2b01      	cmp	r3, #1
 800c214:	d137      	bne.n	800c286 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	2100      	movs	r1, #0
 800c21c:	4618      	mov	r0, r3
 800c21e:	f002 fc79 	bl	800eb14 <SDMMC_CmdAppCommand>
 800c222:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d02d      	beq.n	800c286 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c22a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c22e:	e047      	b.n	800c2c0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	2100      	movs	r1, #0
 800c236:	4618      	mov	r0, r3
 800c238:	f002 fc6c 	bl	800eb14 <SDMMC_CmdAppCommand>
 800c23c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d001      	beq.n	800c248 <SD_PowerON+0x98>
    {
      return errorstate;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	e03b      	b.n	800c2c0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	491e      	ldr	r1, [pc, #120]	; (800c2c8 <SD_PowerON+0x118>)
 800c24e:	4618      	mov	r0, r3
 800c250:	f002 fc82 	bl	800eb58 <SDMMC_CmdAppOperCommand>
 800c254:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d002      	beq.n	800c262 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c25c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c260:	e02e      	b.n	800c2c0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	2100      	movs	r1, #0
 800c268:	4618      	mov	r0, r3
 800c26a:	f002 fae8 	bl	800e83e <SDIO_GetResponse>
 800c26e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800c270:	697b      	ldr	r3, [r7, #20]
 800c272:	0fdb      	lsrs	r3, r3, #31
 800c274:	2b01      	cmp	r3, #1
 800c276:	d101      	bne.n	800c27c <SD_PowerON+0xcc>
 800c278:	2301      	movs	r3, #1
 800c27a:	e000      	b.n	800c27e <SD_PowerON+0xce>
 800c27c:	2300      	movs	r3, #0
 800c27e:	613b      	str	r3, [r7, #16]

    count++;
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	3301      	adds	r3, #1
 800c284:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c28c:	4293      	cmp	r3, r2
 800c28e:	d802      	bhi.n	800c296 <SD_PowerON+0xe6>
 800c290:	693b      	ldr	r3, [r7, #16]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d0cc      	beq.n	800c230 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800c296:	68bb      	ldr	r3, [r7, #8]
 800c298:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c29c:	4293      	cmp	r3, r2
 800c29e:	d902      	bls.n	800c2a6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800c2a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c2a4:	e00c      	b.n	800c2c0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d003      	beq.n	800c2b8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2201      	movs	r2, #1
 800c2b4:	645a      	str	r2, [r3, #68]	; 0x44
 800c2b6:	e002      	b.n	800c2be <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800c2be:	2300      	movs	r3, #0
}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	3718      	adds	r7, #24
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}
 800c2c8:	c1100000 	.word	0xc1100000

0800c2cc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b084      	sub	sp, #16
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
 800c2d4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d102      	bne.n	800c2e2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800c2dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c2e0:	e018      	b.n	800c314 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681a      	ldr	r2, [r3, #0]
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2ea:	041b      	lsls	r3, r3, #16
 800c2ec:	4619      	mov	r1, r3
 800c2ee:	4610      	mov	r0, r2
 800c2f0:	f002 fcf6 	bl	800ece0 <SDMMC_CmdSendStatus>
 800c2f4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d001      	beq.n	800c300 <SD_SendStatus+0x34>
  {
    return errorstate;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	e009      	b.n	800c314 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	2100      	movs	r1, #0
 800c306:	4618      	mov	r0, r3
 800c308:	f002 fa99 	bl	800e83e <SDIO_GetResponse>
 800c30c:	4602      	mov	r2, r0
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800c312:	2300      	movs	r3, #0
}
 800c314:	4618      	mov	r0, r3
 800c316:	3710      	adds	r7, #16
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}

0800c31c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b086      	sub	sp, #24
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800c324:	2300      	movs	r3, #0
 800c326:	60fb      	str	r3, [r7, #12]
 800c328:	2300      	movs	r3, #0
 800c32a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	2100      	movs	r1, #0
 800c332:	4618      	mov	r0, r3
 800c334:	f002 fa83 	bl	800e83e <SDIO_GetResponse>
 800c338:	4603      	mov	r3, r0
 800c33a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c33e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c342:	d102      	bne.n	800c34a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c344:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c348:	e02f      	b.n	800c3aa <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800c34a:	f107 030c 	add.w	r3, r7, #12
 800c34e:	4619      	mov	r1, r3
 800c350:	6878      	ldr	r0, [r7, #4]
 800c352:	f000 f879 	bl	800c448 <SD_FindSCR>
 800c356:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c358:	697b      	ldr	r3, [r7, #20]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d001      	beq.n	800c362 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800c35e:	697b      	ldr	r3, [r7, #20]
 800c360:	e023      	b.n	800c3aa <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800c362:	693b      	ldr	r3, [r7, #16]
 800c364:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d01c      	beq.n	800c3a6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681a      	ldr	r2, [r3, #0]
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c374:	041b      	lsls	r3, r3, #16
 800c376:	4619      	mov	r1, r3
 800c378:	4610      	mov	r0, r2
 800c37a:	f002 fbcb 	bl	800eb14 <SDMMC_CmdAppCommand>
 800c37e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c380:	697b      	ldr	r3, [r7, #20]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d001      	beq.n	800c38a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800c386:	697b      	ldr	r3, [r7, #20]
 800c388:	e00f      	b.n	800c3aa <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	2102      	movs	r1, #2
 800c390:	4618      	mov	r0, r3
 800c392:	f002 fc04 	bl	800eb9e <SDMMC_CmdBusWidth>
 800c396:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c398:	697b      	ldr	r3, [r7, #20]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d001      	beq.n	800c3a2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800c39e:	697b      	ldr	r3, [r7, #20]
 800c3a0:	e003      	b.n	800c3aa <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	e001      	b.n	800c3aa <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c3a6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	3718      	adds	r7, #24
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	bd80      	pop	{r7, pc}

0800c3b2 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800c3b2:	b580      	push	{r7, lr}
 800c3b4:	b086      	sub	sp, #24
 800c3b6:	af00      	add	r7, sp, #0
 800c3b8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	60fb      	str	r3, [r7, #12]
 800c3be:	2300      	movs	r3, #0
 800c3c0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	2100      	movs	r1, #0
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	f002 fa38 	bl	800e83e <SDIO_GetResponse>
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c3d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c3d8:	d102      	bne.n	800c3e0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c3da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c3de:	e02f      	b.n	800c440 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800c3e0:	f107 030c 	add.w	r3, r7, #12
 800c3e4:	4619      	mov	r1, r3
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f000 f82e 	bl	800c448 <SD_FindSCR>
 800c3ec:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d001      	beq.n	800c3f8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800c3f4:	697b      	ldr	r3, [r7, #20]
 800c3f6:	e023      	b.n	800c440 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800c3f8:	693b      	ldr	r3, [r7, #16]
 800c3fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d01c      	beq.n	800c43c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681a      	ldr	r2, [r3, #0]
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c40a:	041b      	lsls	r3, r3, #16
 800c40c:	4619      	mov	r1, r3
 800c40e:	4610      	mov	r0, r2
 800c410:	f002 fb80 	bl	800eb14 <SDMMC_CmdAppCommand>
 800c414:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c416:	697b      	ldr	r3, [r7, #20]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d001      	beq.n	800c420 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800c41c:	697b      	ldr	r3, [r7, #20]
 800c41e:	e00f      	b.n	800c440 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	2100      	movs	r1, #0
 800c426:	4618      	mov	r0, r3
 800c428:	f002 fbb9 	bl	800eb9e <SDMMC_CmdBusWidth>
 800c42c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c42e:	697b      	ldr	r3, [r7, #20]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d001      	beq.n	800c438 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800c434:	697b      	ldr	r3, [r7, #20]
 800c436:	e003      	b.n	800c440 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800c438:	2300      	movs	r3, #0
 800c43a:	e001      	b.n	800c440 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c43c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800c440:	4618      	mov	r0, r3
 800c442:	3718      	adds	r7, #24
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}

0800c448 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800c448:	b590      	push	{r4, r7, lr}
 800c44a:	b08f      	sub	sp, #60	; 0x3c
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
 800c450:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c452:	f7fb fd7b 	bl	8007f4c <HAL_GetTick>
 800c456:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800c458:	2300      	movs	r3, #0
 800c45a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800c45c:	2300      	movs	r3, #0
 800c45e:	60bb      	str	r3, [r7, #8]
 800c460:	2300      	movs	r3, #0
 800c462:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	2108      	movs	r1, #8
 800c46e:	4618      	mov	r0, r3
 800c470:	f002 fa24 	bl	800e8bc <SDMMC_CmdBlockLength>
 800c474:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d001      	beq.n	800c480 <SD_FindSCR+0x38>
  {
    return errorstate;
 800c47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c47e:	e0a9      	b.n	800c5d4 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681a      	ldr	r2, [r3, #0]
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c488:	041b      	lsls	r3, r3, #16
 800c48a:	4619      	mov	r1, r3
 800c48c:	4610      	mov	r0, r2
 800c48e:	f002 fb41 	bl	800eb14 <SDMMC_CmdAppCommand>
 800c492:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c496:	2b00      	cmp	r3, #0
 800c498:	d001      	beq.n	800c49e <SD_FindSCR+0x56>
  {
    return errorstate;
 800c49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c49c:	e09a      	b.n	800c5d4 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c49e:	f04f 33ff 	mov.w	r3, #4294967295
 800c4a2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800c4a4:	2308      	movs	r3, #8
 800c4a6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800c4a8:	2330      	movs	r3, #48	; 0x30
 800c4aa:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800c4ac:	2302      	movs	r3, #2
 800c4ae:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800c4b4:	2301      	movs	r3, #1
 800c4b6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	f107 0210 	add.w	r2, r7, #16
 800c4c0:	4611      	mov	r1, r2
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f002 f9ce 	bl	800e864 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	f002 fb88 	bl	800ebe2 <SDMMC_CmdSendSCR>
 800c4d2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d022      	beq.n	800c520 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800c4da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4dc:	e07a      	b.n	800c5d4 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d00e      	beq.n	800c50a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	6819      	ldr	r1, [r3, #0]
 800c4f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4f2:	009b      	lsls	r3, r3, #2
 800c4f4:	f107 0208 	add.w	r2, r7, #8
 800c4f8:	18d4      	adds	r4, r2, r3
 800c4fa:	4608      	mov	r0, r1
 800c4fc:	f002 f92d 	bl	800e75a <SDIO_ReadFIFO>
 800c500:	4603      	mov	r3, r0
 800c502:	6023      	str	r3, [r4, #0]
      index++;
 800c504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c506:	3301      	adds	r3, #1
 800c508:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c50a:	f7fb fd1f 	bl	8007f4c <HAL_GetTick>
 800c50e:	4602      	mov	r2, r0
 800c510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c512:	1ad3      	subs	r3, r2, r3
 800c514:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c518:	d102      	bne.n	800c520 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800c51a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c51e:	e059      	b.n	800c5d4 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c526:	f240 432a 	movw	r3, #1066	; 0x42a
 800c52a:	4013      	ands	r3, r2
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d0d6      	beq.n	800c4de <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c536:	f003 0308 	and.w	r3, r3, #8
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d005      	beq.n	800c54a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	2208      	movs	r2, #8
 800c544:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800c546:	2308      	movs	r3, #8
 800c548:	e044      	b.n	800c5d4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c550:	f003 0302 	and.w	r3, r3, #2
 800c554:	2b00      	cmp	r3, #0
 800c556:	d005      	beq.n	800c564 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	2202      	movs	r2, #2
 800c55e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800c560:	2302      	movs	r3, #2
 800c562:	e037      	b.n	800c5d4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c56a:	f003 0320 	and.w	r3, r3, #32
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d005      	beq.n	800c57e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	2220      	movs	r2, #32
 800c578:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800c57a:	2320      	movs	r3, #32
 800c57c:	e02a      	b.n	800c5d4 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	f240 523a 	movw	r2, #1338	; 0x53a
 800c586:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	061a      	lsls	r2, r3, #24
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	021b      	lsls	r3, r3, #8
 800c590:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c594:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	0a1b      	lsrs	r3, r3, #8
 800c59a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c59e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	0e1b      	lsrs	r3, r3, #24
 800c5a4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c5a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5a8:	601a      	str	r2, [r3, #0]
    scr++;
 800c5aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ac:	3304      	adds	r3, #4
 800c5ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	061a      	lsls	r2, r3, #24
 800c5b4:	68bb      	ldr	r3, [r7, #8]
 800c5b6:	021b      	lsls	r3, r3, #8
 800c5b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c5bc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c5be:	68bb      	ldr	r3, [r7, #8]
 800c5c0:	0a1b      	lsrs	r3, r3, #8
 800c5c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c5c6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	0e1b      	lsrs	r3, r3, #24
 800c5cc:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5d0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800c5d2:	2300      	movs	r3, #0
}
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	373c      	adds	r7, #60	; 0x3c
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd90      	pop	{r4, r7, pc}

0800c5dc <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b086      	sub	sp, #24
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5e8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5ee:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800c5f0:	693b      	ldr	r3, [r7, #16]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d03f      	beq.n	800c676 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	617b      	str	r3, [r7, #20]
 800c5fa:	e033      	b.n	800c664 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	4618      	mov	r0, r3
 800c602:	f002 f8aa 	bl	800e75a <SDIO_ReadFIFO>
 800c606:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800c608:	68bb      	ldr	r3, [r7, #8]
 800c60a:	b2da      	uxtb	r2, r3
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	3301      	adds	r3, #1
 800c614:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c616:	693b      	ldr	r3, [r7, #16]
 800c618:	3b01      	subs	r3, #1
 800c61a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	0a1b      	lsrs	r3, r3, #8
 800c620:	b2da      	uxtb	r2, r3
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	3301      	adds	r3, #1
 800c62a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c62c:	693b      	ldr	r3, [r7, #16]
 800c62e:	3b01      	subs	r3, #1
 800c630:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	0c1b      	lsrs	r3, r3, #16
 800c636:	b2da      	uxtb	r2, r3
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	3301      	adds	r3, #1
 800c640:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c642:	693b      	ldr	r3, [r7, #16]
 800c644:	3b01      	subs	r3, #1
 800c646:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800c648:	68bb      	ldr	r3, [r7, #8]
 800c64a:	0e1b      	lsrs	r3, r3, #24
 800c64c:	b2da      	uxtb	r2, r3
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	3301      	adds	r3, #1
 800c656:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c658:	693b      	ldr	r3, [r7, #16]
 800c65a:	3b01      	subs	r3, #1
 800c65c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800c65e:	697b      	ldr	r3, [r7, #20]
 800c660:	3301      	adds	r3, #1
 800c662:	617b      	str	r3, [r7, #20]
 800c664:	697b      	ldr	r3, [r7, #20]
 800c666:	2b07      	cmp	r3, #7
 800c668:	d9c8      	bls.n	800c5fc <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	68fa      	ldr	r2, [r7, #12]
 800c66e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	693a      	ldr	r2, [r7, #16]
 800c674:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800c676:	bf00      	nop
 800c678:	3718      	adds	r7, #24
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}

0800c67e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800c67e:	b580      	push	{r7, lr}
 800c680:	b086      	sub	sp, #24
 800c682:	af00      	add	r7, sp, #0
 800c684:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6a1b      	ldr	r3, [r3, #32]
 800c68a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c690:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800c692:	693b      	ldr	r3, [r7, #16]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d043      	beq.n	800c720 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800c698:	2300      	movs	r3, #0
 800c69a:	617b      	str	r3, [r7, #20]
 800c69c:	e037      	b.n	800c70e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	781b      	ldrb	r3, [r3, #0]
 800c6a2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	3301      	adds	r3, #1
 800c6a8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c6aa:	693b      	ldr	r3, [r7, #16]
 800c6ac:	3b01      	subs	r3, #1
 800c6ae:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	781b      	ldrb	r3, [r3, #0]
 800c6b4:	021a      	lsls	r2, r3, #8
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	4313      	orrs	r3, r2
 800c6ba:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	3301      	adds	r3, #1
 800c6c0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c6c2:	693b      	ldr	r3, [r7, #16]
 800c6c4:	3b01      	subs	r3, #1
 800c6c6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	781b      	ldrb	r3, [r3, #0]
 800c6cc:	041a      	lsls	r2, r3, #16
 800c6ce:	68bb      	ldr	r3, [r7, #8]
 800c6d0:	4313      	orrs	r3, r2
 800c6d2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	3301      	adds	r3, #1
 800c6d8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c6da:	693b      	ldr	r3, [r7, #16]
 800c6dc:	3b01      	subs	r3, #1
 800c6de:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	781b      	ldrb	r3, [r3, #0]
 800c6e4:	061a      	lsls	r2, r3, #24
 800c6e6:	68bb      	ldr	r3, [r7, #8]
 800c6e8:	4313      	orrs	r3, r2
 800c6ea:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	3301      	adds	r3, #1
 800c6f0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c6f2:	693b      	ldr	r3, [r7, #16]
 800c6f4:	3b01      	subs	r3, #1
 800c6f6:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	f107 0208 	add.w	r2, r7, #8
 800c700:	4611      	mov	r1, r2
 800c702:	4618      	mov	r0, r3
 800c704:	f002 f836 	bl	800e774 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800c708:	697b      	ldr	r3, [r7, #20]
 800c70a:	3301      	adds	r3, #1
 800c70c:	617b      	str	r3, [r7, #20]
 800c70e:	697b      	ldr	r3, [r7, #20]
 800c710:	2b07      	cmp	r3, #7
 800c712:	d9c4      	bls.n	800c69e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	68fa      	ldr	r2, [r7, #12]
 800c718:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	693a      	ldr	r2, [r7, #16]
 800c71e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800c720:	bf00      	nop
 800c722:	3718      	adds	r7, #24
 800c724:	46bd      	mov	sp, r7
 800c726:	bd80      	pop	{r7, pc}

0800c728 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b082      	sub	sp, #8
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d101      	bne.n	800c73a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c736:	2301      	movs	r3, #1
 800c738:	e056      	b.n	800c7e8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2200      	movs	r2, #0
 800c73e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c746:	b2db      	uxtb	r3, r3
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d106      	bne.n	800c75a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2200      	movs	r2, #0
 800c750:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c754:	6878      	ldr	r0, [r7, #4]
 800c756:	f7f9 fd5d 	bl	8006214 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2202      	movs	r2, #2
 800c75e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	681a      	ldr	r2, [r3, #0]
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c770:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	685a      	ldr	r2, [r3, #4]
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	689b      	ldr	r3, [r3, #8]
 800c77a:	431a      	orrs	r2, r3
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	68db      	ldr	r3, [r3, #12]
 800c780:	431a      	orrs	r2, r3
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	691b      	ldr	r3, [r3, #16]
 800c786:	431a      	orrs	r2, r3
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	695b      	ldr	r3, [r3, #20]
 800c78c:	431a      	orrs	r2, r3
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	699b      	ldr	r3, [r3, #24]
 800c792:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c796:	431a      	orrs	r2, r3
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	69db      	ldr	r3, [r3, #28]
 800c79c:	431a      	orrs	r2, r3
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	6a1b      	ldr	r3, [r3, #32]
 800c7a2:	ea42 0103 	orr.w	r1, r2, r3
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	430a      	orrs	r2, r1
 800c7b0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	699b      	ldr	r3, [r3, #24]
 800c7b6:	0c1b      	lsrs	r3, r3, #16
 800c7b8:	f003 0104 	and.w	r1, r3, #4
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	430a      	orrs	r2, r1
 800c7c6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	69da      	ldr	r2, [r3, #28]
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c7d6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2200      	movs	r2, #0
 800c7dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2201      	movs	r2, #1
 800c7e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800c7e6:	2300      	movs	r3, #0
}
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	3708      	adds	r7, #8
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}

0800c7f0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b088      	sub	sp, #32
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	60f8      	str	r0, [r7, #12]
 800c7f8:	60b9      	str	r1, [r7, #8]
 800c7fa:	603b      	str	r3, [r7, #0]
 800c7fc:	4613      	mov	r3, r2
 800c7fe:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c800:	2300      	movs	r3, #0
 800c802:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c80a:	2b01      	cmp	r3, #1
 800c80c:	d101      	bne.n	800c812 <HAL_SPI_Transmit+0x22>
 800c80e:	2302      	movs	r3, #2
 800c810:	e11e      	b.n	800ca50 <HAL_SPI_Transmit+0x260>
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	2201      	movs	r2, #1
 800c816:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c81a:	f7fb fb97 	bl	8007f4c <HAL_GetTick>
 800c81e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800c820:	88fb      	ldrh	r3, [r7, #6]
 800c822:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c82a:	b2db      	uxtb	r3, r3
 800c82c:	2b01      	cmp	r3, #1
 800c82e:	d002      	beq.n	800c836 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800c830:	2302      	movs	r3, #2
 800c832:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c834:	e103      	b.n	800ca3e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800c836:	68bb      	ldr	r3, [r7, #8]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d002      	beq.n	800c842 <HAL_SPI_Transmit+0x52>
 800c83c:	88fb      	ldrh	r3, [r7, #6]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d102      	bne.n	800c848 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800c842:	2301      	movs	r3, #1
 800c844:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c846:	e0fa      	b.n	800ca3e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	2203      	movs	r2, #3
 800c84c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	2200      	movs	r2, #0
 800c854:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	68ba      	ldr	r2, [r7, #8]
 800c85a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	88fa      	ldrh	r2, [r7, #6]
 800c860:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	88fa      	ldrh	r2, [r7, #6]
 800c866:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	2200      	movs	r2, #0
 800c86c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	2200      	movs	r2, #0
 800c872:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	2200      	movs	r2, #0
 800c878:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	2200      	movs	r2, #0
 800c87e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	2200      	movs	r2, #0
 800c884:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	689b      	ldr	r3, [r3, #8]
 800c88a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c88e:	d107      	bne.n	800c8a0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	681a      	ldr	r2, [r3, #0]
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c89e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8aa:	2b40      	cmp	r3, #64	; 0x40
 800c8ac:	d007      	beq.n	800c8be <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	681a      	ldr	r2, [r3, #0]
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c8bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	68db      	ldr	r3, [r3, #12]
 800c8c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c8c6:	d14b      	bne.n	800c960 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	685b      	ldr	r3, [r3, #4]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d002      	beq.n	800c8d6 <HAL_SPI_Transmit+0xe6>
 800c8d0:	8afb      	ldrh	r3, [r7, #22]
 800c8d2:	2b01      	cmp	r3, #1
 800c8d4:	d13e      	bne.n	800c954 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8da:	881a      	ldrh	r2, [r3, #0]
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8e6:	1c9a      	adds	r2, r3, #2
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c8f0:	b29b      	uxth	r3, r3
 800c8f2:	3b01      	subs	r3, #1
 800c8f4:	b29a      	uxth	r2, r3
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800c8fa:	e02b      	b.n	800c954 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	689b      	ldr	r3, [r3, #8]
 800c902:	f003 0302 	and.w	r3, r3, #2
 800c906:	2b02      	cmp	r3, #2
 800c908:	d112      	bne.n	800c930 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c90e:	881a      	ldrh	r2, [r3, #0]
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c91a:	1c9a      	adds	r2, r3, #2
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c924:	b29b      	uxth	r3, r3
 800c926:	3b01      	subs	r3, #1
 800c928:	b29a      	uxth	r2, r3
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	86da      	strh	r2, [r3, #54]	; 0x36
 800c92e:	e011      	b.n	800c954 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c930:	f7fb fb0c 	bl	8007f4c <HAL_GetTick>
 800c934:	4602      	mov	r2, r0
 800c936:	69bb      	ldr	r3, [r7, #24]
 800c938:	1ad3      	subs	r3, r2, r3
 800c93a:	683a      	ldr	r2, [r7, #0]
 800c93c:	429a      	cmp	r2, r3
 800c93e:	d803      	bhi.n	800c948 <HAL_SPI_Transmit+0x158>
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c946:	d102      	bne.n	800c94e <HAL_SPI_Transmit+0x15e>
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d102      	bne.n	800c954 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800c94e:	2303      	movs	r3, #3
 800c950:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c952:	e074      	b.n	800ca3e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c958:	b29b      	uxth	r3, r3
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d1ce      	bne.n	800c8fc <HAL_SPI_Transmit+0x10c>
 800c95e:	e04c      	b.n	800c9fa <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	685b      	ldr	r3, [r3, #4]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d002      	beq.n	800c96e <HAL_SPI_Transmit+0x17e>
 800c968:	8afb      	ldrh	r3, [r7, #22]
 800c96a:	2b01      	cmp	r3, #1
 800c96c:	d140      	bne.n	800c9f0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	330c      	adds	r3, #12
 800c978:	7812      	ldrb	r2, [r2, #0]
 800c97a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c980:	1c5a      	adds	r2, r3, #1
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c98a:	b29b      	uxth	r3, r3
 800c98c:	3b01      	subs	r3, #1
 800c98e:	b29a      	uxth	r2, r3
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800c994:	e02c      	b.n	800c9f0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	689b      	ldr	r3, [r3, #8]
 800c99c:	f003 0302 	and.w	r3, r3, #2
 800c9a0:	2b02      	cmp	r3, #2
 800c9a2:	d113      	bne.n	800c9cc <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	330c      	adds	r3, #12
 800c9ae:	7812      	ldrb	r2, [r2, #0]
 800c9b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9b6:	1c5a      	adds	r2, r3, #1
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c9c0:	b29b      	uxth	r3, r3
 800c9c2:	3b01      	subs	r3, #1
 800c9c4:	b29a      	uxth	r2, r3
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	86da      	strh	r2, [r3, #54]	; 0x36
 800c9ca:	e011      	b.n	800c9f0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c9cc:	f7fb fabe 	bl	8007f4c <HAL_GetTick>
 800c9d0:	4602      	mov	r2, r0
 800c9d2:	69bb      	ldr	r3, [r7, #24]
 800c9d4:	1ad3      	subs	r3, r2, r3
 800c9d6:	683a      	ldr	r2, [r7, #0]
 800c9d8:	429a      	cmp	r2, r3
 800c9da:	d803      	bhi.n	800c9e4 <HAL_SPI_Transmit+0x1f4>
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9e2:	d102      	bne.n	800c9ea <HAL_SPI_Transmit+0x1fa>
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d102      	bne.n	800c9f0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800c9ea:	2303      	movs	r3, #3
 800c9ec:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c9ee:	e026      	b.n	800ca3e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c9f4:	b29b      	uxth	r3, r3
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d1cd      	bne.n	800c996 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c9fa:	69ba      	ldr	r2, [r7, #24]
 800c9fc:	6839      	ldr	r1, [r7, #0]
 800c9fe:	68f8      	ldr	r0, [r7, #12]
 800ca00:	f000 fba4 	bl	800d14c <SPI_EndRxTxTransaction>
 800ca04:	4603      	mov	r3, r0
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d002      	beq.n	800ca10 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	2220      	movs	r2, #32
 800ca0e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	689b      	ldr	r3, [r3, #8]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d10a      	bne.n	800ca2e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ca18:	2300      	movs	r3, #0
 800ca1a:	613b      	str	r3, [r7, #16]
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	68db      	ldr	r3, [r3, #12]
 800ca22:	613b      	str	r3, [r7, #16]
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	689b      	ldr	r3, [r3, #8]
 800ca2a:	613b      	str	r3, [r7, #16]
 800ca2c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d002      	beq.n	800ca3c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800ca36:	2301      	movs	r3, #1
 800ca38:	77fb      	strb	r3, [r7, #31]
 800ca3a:	e000      	b.n	800ca3e <HAL_SPI_Transmit+0x24e>
  }

error:
 800ca3c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	2201      	movs	r2, #1
 800ca42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	2200      	movs	r2, #0
 800ca4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ca4e:	7ffb      	ldrb	r3, [r7, #31]
}
 800ca50:	4618      	mov	r0, r3
 800ca52:	3720      	adds	r7, #32
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bd80      	pop	{r7, pc}

0800ca58 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b088      	sub	sp, #32
 800ca5c:	af02      	add	r7, sp, #8
 800ca5e:	60f8      	str	r0, [r7, #12]
 800ca60:	60b9      	str	r1, [r7, #8]
 800ca62:	603b      	str	r3, [r7, #0]
 800ca64:	4613      	mov	r3, r2
 800ca66:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ca68:	2300      	movs	r3, #0
 800ca6a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	685b      	ldr	r3, [r3, #4]
 800ca70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ca74:	d112      	bne.n	800ca9c <HAL_SPI_Receive+0x44>
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	689b      	ldr	r3, [r3, #8]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d10e      	bne.n	800ca9c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	2204      	movs	r2, #4
 800ca82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ca86:	88fa      	ldrh	r2, [r7, #6]
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	9300      	str	r3, [sp, #0]
 800ca8c:	4613      	mov	r3, r2
 800ca8e:	68ba      	ldr	r2, [r7, #8]
 800ca90:	68b9      	ldr	r1, [r7, #8]
 800ca92:	68f8      	ldr	r0, [r7, #12]
 800ca94:	f000 f8e9 	bl	800cc6a <HAL_SPI_TransmitReceive>
 800ca98:	4603      	mov	r3, r0
 800ca9a:	e0e2      	b.n	800cc62 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800caa2:	2b01      	cmp	r3, #1
 800caa4:	d101      	bne.n	800caaa <HAL_SPI_Receive+0x52>
 800caa6:	2302      	movs	r3, #2
 800caa8:	e0db      	b.n	800cc62 <HAL_SPI_Receive+0x20a>
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	2201      	movs	r2, #1
 800caae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cab2:	f7fb fa4b 	bl	8007f4c <HAL_GetTick>
 800cab6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cabe:	b2db      	uxtb	r3, r3
 800cac0:	2b01      	cmp	r3, #1
 800cac2:	d002      	beq.n	800caca <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800cac4:	2302      	movs	r3, #2
 800cac6:	75fb      	strb	r3, [r7, #23]
    goto error;
 800cac8:	e0c2      	b.n	800cc50 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800caca:	68bb      	ldr	r3, [r7, #8]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d002      	beq.n	800cad6 <HAL_SPI_Receive+0x7e>
 800cad0:	88fb      	ldrh	r3, [r7, #6]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d102      	bne.n	800cadc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800cad6:	2301      	movs	r3, #1
 800cad8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800cada:	e0b9      	b.n	800cc50 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	2204      	movs	r2, #4
 800cae0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	2200      	movs	r2, #0
 800cae8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	68ba      	ldr	r2, [r7, #8]
 800caee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	88fa      	ldrh	r2, [r7, #6]
 800caf4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	88fa      	ldrh	r2, [r7, #6]
 800cafa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	2200      	movs	r2, #0
 800cb00:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	2200      	movs	r2, #0
 800cb06:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	2200      	movs	r2, #0
 800cb12:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	2200      	movs	r2, #0
 800cb18:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	689b      	ldr	r3, [r3, #8]
 800cb1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cb22:	d107      	bne.n	800cb34 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	681a      	ldr	r2, [r3, #0]
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cb32:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb3e:	2b40      	cmp	r3, #64	; 0x40
 800cb40:	d007      	beq.n	800cb52 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	681a      	ldr	r2, [r3, #0]
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cb50:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	68db      	ldr	r3, [r3, #12]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d162      	bne.n	800cc20 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800cb5a:	e02e      	b.n	800cbba <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	689b      	ldr	r3, [r3, #8]
 800cb62:	f003 0301 	and.w	r3, r3, #1
 800cb66:	2b01      	cmp	r3, #1
 800cb68:	d115      	bne.n	800cb96 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	f103 020c 	add.w	r2, r3, #12
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb76:	7812      	ldrb	r2, [r2, #0]
 800cb78:	b2d2      	uxtb	r2, r2
 800cb7a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb80:	1c5a      	adds	r2, r3, #1
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cb8a:	b29b      	uxth	r3, r3
 800cb8c:	3b01      	subs	r3, #1
 800cb8e:	b29a      	uxth	r2, r3
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	87da      	strh	r2, [r3, #62]	; 0x3e
 800cb94:	e011      	b.n	800cbba <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cb96:	f7fb f9d9 	bl	8007f4c <HAL_GetTick>
 800cb9a:	4602      	mov	r2, r0
 800cb9c:	693b      	ldr	r3, [r7, #16]
 800cb9e:	1ad3      	subs	r3, r2, r3
 800cba0:	683a      	ldr	r2, [r7, #0]
 800cba2:	429a      	cmp	r2, r3
 800cba4:	d803      	bhi.n	800cbae <HAL_SPI_Receive+0x156>
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbac:	d102      	bne.n	800cbb4 <HAL_SPI_Receive+0x15c>
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d102      	bne.n	800cbba <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800cbb4:	2303      	movs	r3, #3
 800cbb6:	75fb      	strb	r3, [r7, #23]
          goto error;
 800cbb8:	e04a      	b.n	800cc50 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cbbe:	b29b      	uxth	r3, r3
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d1cb      	bne.n	800cb5c <HAL_SPI_Receive+0x104>
 800cbc4:	e031      	b.n	800cc2a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	689b      	ldr	r3, [r3, #8]
 800cbcc:	f003 0301 	and.w	r3, r3, #1
 800cbd0:	2b01      	cmp	r3, #1
 800cbd2:	d113      	bne.n	800cbfc <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	68da      	ldr	r2, [r3, #12]
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbde:	b292      	uxth	r2, r2
 800cbe0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbe6:	1c9a      	adds	r2, r3, #2
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cbf0:	b29b      	uxth	r3, r3
 800cbf2:	3b01      	subs	r3, #1
 800cbf4:	b29a      	uxth	r2, r3
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800cbfa:	e011      	b.n	800cc20 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cbfc:	f7fb f9a6 	bl	8007f4c <HAL_GetTick>
 800cc00:	4602      	mov	r2, r0
 800cc02:	693b      	ldr	r3, [r7, #16]
 800cc04:	1ad3      	subs	r3, r2, r3
 800cc06:	683a      	ldr	r2, [r7, #0]
 800cc08:	429a      	cmp	r2, r3
 800cc0a:	d803      	bhi.n	800cc14 <HAL_SPI_Receive+0x1bc>
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc12:	d102      	bne.n	800cc1a <HAL_SPI_Receive+0x1c2>
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d102      	bne.n	800cc20 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800cc1a:	2303      	movs	r3, #3
 800cc1c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800cc1e:	e017      	b.n	800cc50 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cc24:	b29b      	uxth	r3, r3
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d1cd      	bne.n	800cbc6 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800cc2a:	693a      	ldr	r2, [r7, #16]
 800cc2c:	6839      	ldr	r1, [r7, #0]
 800cc2e:	68f8      	ldr	r0, [r7, #12]
 800cc30:	f000 fa27 	bl	800d082 <SPI_EndRxTransaction>
 800cc34:	4603      	mov	r3, r0
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d002      	beq.n	800cc40 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	2220      	movs	r2, #32
 800cc3e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d002      	beq.n	800cc4e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800cc48:	2301      	movs	r3, #1
 800cc4a:	75fb      	strb	r3, [r7, #23]
 800cc4c:	e000      	b.n	800cc50 <HAL_SPI_Receive+0x1f8>
  }

error :
 800cc4e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	2201      	movs	r2, #1
 800cc54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800cc60:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc62:	4618      	mov	r0, r3
 800cc64:	3718      	adds	r7, #24
 800cc66:	46bd      	mov	sp, r7
 800cc68:	bd80      	pop	{r7, pc}

0800cc6a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800cc6a:	b580      	push	{r7, lr}
 800cc6c:	b08c      	sub	sp, #48	; 0x30
 800cc6e:	af00      	add	r7, sp, #0
 800cc70:	60f8      	str	r0, [r7, #12]
 800cc72:	60b9      	str	r1, [r7, #8]
 800cc74:	607a      	str	r2, [r7, #4]
 800cc76:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800cc78:	2301      	movs	r3, #1
 800cc7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800cc88:	2b01      	cmp	r3, #1
 800cc8a:	d101      	bne.n	800cc90 <HAL_SPI_TransmitReceive+0x26>
 800cc8c:	2302      	movs	r3, #2
 800cc8e:	e18a      	b.n	800cfa6 <HAL_SPI_TransmitReceive+0x33c>
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	2201      	movs	r2, #1
 800cc94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cc98:	f7fb f958 	bl	8007f4c <HAL_GetTick>
 800cc9c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cca4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	685b      	ldr	r3, [r3, #4]
 800ccac:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800ccae:	887b      	ldrh	r3, [r7, #2]
 800ccb0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ccb2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ccb6:	2b01      	cmp	r3, #1
 800ccb8:	d00f      	beq.n	800ccda <HAL_SPI_TransmitReceive+0x70>
 800ccba:	69fb      	ldr	r3, [r7, #28]
 800ccbc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ccc0:	d107      	bne.n	800ccd2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	689b      	ldr	r3, [r3, #8]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d103      	bne.n	800ccd2 <HAL_SPI_TransmitReceive+0x68>
 800ccca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ccce:	2b04      	cmp	r3, #4
 800ccd0:	d003      	beq.n	800ccda <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800ccd2:	2302      	movs	r3, #2
 800ccd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ccd8:	e15b      	b.n	800cf92 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ccda:	68bb      	ldr	r3, [r7, #8]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d005      	beq.n	800ccec <HAL_SPI_TransmitReceive+0x82>
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d002      	beq.n	800ccec <HAL_SPI_TransmitReceive+0x82>
 800cce6:	887b      	ldrh	r3, [r7, #2]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d103      	bne.n	800ccf4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800ccec:	2301      	movs	r3, #1
 800ccee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ccf2:	e14e      	b.n	800cf92 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ccfa:	b2db      	uxtb	r3, r3
 800ccfc:	2b04      	cmp	r3, #4
 800ccfe:	d003      	beq.n	800cd08 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	2205      	movs	r2, #5
 800cd04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	687a      	ldr	r2, [r7, #4]
 800cd12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	887a      	ldrh	r2, [r7, #2]
 800cd18:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	887a      	ldrh	r2, [r7, #2]
 800cd1e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	68ba      	ldr	r2, [r7, #8]
 800cd24:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	887a      	ldrh	r2, [r7, #2]
 800cd2a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	887a      	ldrh	r2, [r7, #2]
 800cd30:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	2200      	movs	r2, #0
 800cd36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd48:	2b40      	cmp	r3, #64	; 0x40
 800cd4a:	d007      	beq.n	800cd5c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	681a      	ldr	r2, [r3, #0]
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cd5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	68db      	ldr	r3, [r3, #12]
 800cd60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cd64:	d178      	bne.n	800ce58 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	685b      	ldr	r3, [r3, #4]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d002      	beq.n	800cd74 <HAL_SPI_TransmitReceive+0x10a>
 800cd6e:	8b7b      	ldrh	r3, [r7, #26]
 800cd70:	2b01      	cmp	r3, #1
 800cd72:	d166      	bne.n	800ce42 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd78:	881a      	ldrh	r2, [r3, #0]
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd84:	1c9a      	adds	r2, r3, #2
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cd8e:	b29b      	uxth	r3, r3
 800cd90:	3b01      	subs	r3, #1
 800cd92:	b29a      	uxth	r2, r3
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cd98:	e053      	b.n	800ce42 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	689b      	ldr	r3, [r3, #8]
 800cda0:	f003 0302 	and.w	r3, r3, #2
 800cda4:	2b02      	cmp	r3, #2
 800cda6:	d11b      	bne.n	800cde0 <HAL_SPI_TransmitReceive+0x176>
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cdac:	b29b      	uxth	r3, r3
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d016      	beq.n	800cde0 <HAL_SPI_TransmitReceive+0x176>
 800cdb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdb4:	2b01      	cmp	r3, #1
 800cdb6:	d113      	bne.n	800cde0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdbc:	881a      	ldrh	r2, [r3, #0]
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdc8:	1c9a      	adds	r2, r3, #2
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cdd2:	b29b      	uxth	r3, r3
 800cdd4:	3b01      	subs	r3, #1
 800cdd6:	b29a      	uxth	r2, r3
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800cddc:	2300      	movs	r3, #0
 800cdde:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	689b      	ldr	r3, [r3, #8]
 800cde6:	f003 0301 	and.w	r3, r3, #1
 800cdea:	2b01      	cmp	r3, #1
 800cdec:	d119      	bne.n	800ce22 <HAL_SPI_TransmitReceive+0x1b8>
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cdf2:	b29b      	uxth	r3, r3
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d014      	beq.n	800ce22 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	68da      	ldr	r2, [r3, #12]
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce02:	b292      	uxth	r2, r2
 800ce04:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce0a:	1c9a      	adds	r2, r3, #2
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ce14:	b29b      	uxth	r3, r3
 800ce16:	3b01      	subs	r3, #1
 800ce18:	b29a      	uxth	r2, r3
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ce1e:	2301      	movs	r3, #1
 800ce20:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ce22:	f7fb f893 	bl	8007f4c <HAL_GetTick>
 800ce26:	4602      	mov	r2, r0
 800ce28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce2a:	1ad3      	subs	r3, r2, r3
 800ce2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce2e:	429a      	cmp	r2, r3
 800ce30:	d807      	bhi.n	800ce42 <HAL_SPI_TransmitReceive+0x1d8>
 800ce32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce38:	d003      	beq.n	800ce42 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800ce3a:	2303      	movs	r3, #3
 800ce3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ce40:	e0a7      	b.n	800cf92 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ce46:	b29b      	uxth	r3, r3
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d1a6      	bne.n	800cd9a <HAL_SPI_TransmitReceive+0x130>
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ce50:	b29b      	uxth	r3, r3
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d1a1      	bne.n	800cd9a <HAL_SPI_TransmitReceive+0x130>
 800ce56:	e07c      	b.n	800cf52 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	685b      	ldr	r3, [r3, #4]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d002      	beq.n	800ce66 <HAL_SPI_TransmitReceive+0x1fc>
 800ce60:	8b7b      	ldrh	r3, [r7, #26]
 800ce62:	2b01      	cmp	r3, #1
 800ce64:	d16b      	bne.n	800cf3e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	330c      	adds	r3, #12
 800ce70:	7812      	ldrb	r2, [r2, #0]
 800ce72:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce78:	1c5a      	adds	r2, r3, #1
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ce82:	b29b      	uxth	r3, r3
 800ce84:	3b01      	subs	r3, #1
 800ce86:	b29a      	uxth	r2, r3
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ce8c:	e057      	b.n	800cf3e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	689b      	ldr	r3, [r3, #8]
 800ce94:	f003 0302 	and.w	r3, r3, #2
 800ce98:	2b02      	cmp	r3, #2
 800ce9a:	d11c      	bne.n	800ced6 <HAL_SPI_TransmitReceive+0x26c>
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cea0:	b29b      	uxth	r3, r3
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d017      	beq.n	800ced6 <HAL_SPI_TransmitReceive+0x26c>
 800cea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cea8:	2b01      	cmp	r3, #1
 800ceaa:	d114      	bne.n	800ced6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	330c      	adds	r3, #12
 800ceb6:	7812      	ldrb	r2, [r2, #0]
 800ceb8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cebe:	1c5a      	adds	r2, r3, #1
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cec8:	b29b      	uxth	r3, r3
 800ceca:	3b01      	subs	r3, #1
 800cecc:	b29a      	uxth	r2, r3
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ced2:	2300      	movs	r3, #0
 800ced4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	689b      	ldr	r3, [r3, #8]
 800cedc:	f003 0301 	and.w	r3, r3, #1
 800cee0:	2b01      	cmp	r3, #1
 800cee2:	d119      	bne.n	800cf18 <HAL_SPI_TransmitReceive+0x2ae>
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cee8:	b29b      	uxth	r3, r3
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d014      	beq.n	800cf18 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	68da      	ldr	r2, [r3, #12]
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cef8:	b2d2      	uxtb	r2, r2
 800cefa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf00:	1c5a      	adds	r2, r3, #1
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cf0a:	b29b      	uxth	r3, r3
 800cf0c:	3b01      	subs	r3, #1
 800cf0e:	b29a      	uxth	r2, r3
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800cf14:	2301      	movs	r3, #1
 800cf16:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800cf18:	f7fb f818 	bl	8007f4c <HAL_GetTick>
 800cf1c:	4602      	mov	r2, r0
 800cf1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf20:	1ad3      	subs	r3, r2, r3
 800cf22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cf24:	429a      	cmp	r2, r3
 800cf26:	d803      	bhi.n	800cf30 <HAL_SPI_TransmitReceive+0x2c6>
 800cf28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf2e:	d102      	bne.n	800cf36 <HAL_SPI_TransmitReceive+0x2cc>
 800cf30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d103      	bne.n	800cf3e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800cf36:	2303      	movs	r3, #3
 800cf38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800cf3c:	e029      	b.n	800cf92 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cf42:	b29b      	uxth	r3, r3
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d1a2      	bne.n	800ce8e <HAL_SPI_TransmitReceive+0x224>
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cf4c:	b29b      	uxth	r3, r3
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d19d      	bne.n	800ce8e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800cf52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf54:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cf56:	68f8      	ldr	r0, [r7, #12]
 800cf58:	f000 f8f8 	bl	800d14c <SPI_EndRxTxTransaction>
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d006      	beq.n	800cf70 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800cf62:	2301      	movs	r3, #1
 800cf64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	2220      	movs	r2, #32
 800cf6c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800cf6e:	e010      	b.n	800cf92 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	689b      	ldr	r3, [r3, #8]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d10b      	bne.n	800cf90 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cf78:	2300      	movs	r3, #0
 800cf7a:	617b      	str	r3, [r7, #20]
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	68db      	ldr	r3, [r3, #12]
 800cf82:	617b      	str	r3, [r7, #20]
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	689b      	ldr	r3, [r3, #8]
 800cf8a:	617b      	str	r3, [r7, #20]
 800cf8c:	697b      	ldr	r3, [r7, #20]
 800cf8e:	e000      	b.n	800cf92 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800cf90:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	2201      	movs	r2, #1
 800cf96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800cfa2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	3730      	adds	r7, #48	; 0x30
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	bd80      	pop	{r7, pc}

0800cfae <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800cfae:	b580      	push	{r7, lr}
 800cfb0:	b084      	sub	sp, #16
 800cfb2:	af00      	add	r7, sp, #0
 800cfb4:	60f8      	str	r0, [r7, #12]
 800cfb6:	60b9      	str	r1, [r7, #8]
 800cfb8:	603b      	str	r3, [r7, #0]
 800cfba:	4613      	mov	r3, r2
 800cfbc:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cfbe:	e04c      	b.n	800d05a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800cfc0:	683b      	ldr	r3, [r7, #0]
 800cfc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfc6:	d048      	beq.n	800d05a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800cfc8:	f7fa ffc0 	bl	8007f4c <HAL_GetTick>
 800cfcc:	4602      	mov	r2, r0
 800cfce:	69bb      	ldr	r3, [r7, #24]
 800cfd0:	1ad3      	subs	r3, r2, r3
 800cfd2:	683a      	ldr	r2, [r7, #0]
 800cfd4:	429a      	cmp	r2, r3
 800cfd6:	d902      	bls.n	800cfde <SPI_WaitFlagStateUntilTimeout+0x30>
 800cfd8:	683b      	ldr	r3, [r7, #0]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d13d      	bne.n	800d05a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	685a      	ldr	r2, [r3, #4]
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800cfec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	685b      	ldr	r3, [r3, #4]
 800cff2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cff6:	d111      	bne.n	800d01c <SPI_WaitFlagStateUntilTimeout+0x6e>
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	689b      	ldr	r3, [r3, #8]
 800cffc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d000:	d004      	beq.n	800d00c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	689b      	ldr	r3, [r3, #8]
 800d006:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d00a:	d107      	bne.n	800d01c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	681a      	ldr	r2, [r3, #0]
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d01a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d020:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d024:	d10f      	bne.n	800d046 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	681a      	ldr	r2, [r3, #0]
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d034:	601a      	str	r2, [r3, #0]
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	681a      	ldr	r2, [r3, #0]
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d044:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	2201      	movs	r2, #1
 800d04a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	2200      	movs	r2, #0
 800d052:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800d056:	2303      	movs	r3, #3
 800d058:	e00f      	b.n	800d07a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	689a      	ldr	r2, [r3, #8]
 800d060:	68bb      	ldr	r3, [r7, #8]
 800d062:	4013      	ands	r3, r2
 800d064:	68ba      	ldr	r2, [r7, #8]
 800d066:	429a      	cmp	r2, r3
 800d068:	bf0c      	ite	eq
 800d06a:	2301      	moveq	r3, #1
 800d06c:	2300      	movne	r3, #0
 800d06e:	b2db      	uxtb	r3, r3
 800d070:	461a      	mov	r2, r3
 800d072:	79fb      	ldrb	r3, [r7, #7]
 800d074:	429a      	cmp	r2, r3
 800d076:	d1a3      	bne.n	800cfc0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800d078:	2300      	movs	r3, #0
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	3710      	adds	r7, #16
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}

0800d082 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800d082:	b580      	push	{r7, lr}
 800d084:	b086      	sub	sp, #24
 800d086:	af02      	add	r7, sp, #8
 800d088:	60f8      	str	r0, [r7, #12]
 800d08a:	60b9      	str	r1, [r7, #8]
 800d08c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	685b      	ldr	r3, [r3, #4]
 800d092:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d096:	d111      	bne.n	800d0bc <SPI_EndRxTransaction+0x3a>
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	689b      	ldr	r3, [r3, #8]
 800d09c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d0a0:	d004      	beq.n	800d0ac <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	689b      	ldr	r3, [r3, #8]
 800d0a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d0aa:	d107      	bne.n	800d0bc <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	681a      	ldr	r2, [r3, #0]
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d0ba:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	685b      	ldr	r3, [r3, #4]
 800d0c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d0c4:	d12a      	bne.n	800d11c <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	689b      	ldr	r3, [r3, #8]
 800d0ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d0ce:	d012      	beq.n	800d0f6 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	9300      	str	r3, [sp, #0]
 800d0d4:	68bb      	ldr	r3, [r7, #8]
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	2180      	movs	r1, #128	; 0x80
 800d0da:	68f8      	ldr	r0, [r7, #12]
 800d0dc:	f7ff ff67 	bl	800cfae <SPI_WaitFlagStateUntilTimeout>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d02d      	beq.n	800d142 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d0ea:	f043 0220 	orr.w	r2, r3, #32
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800d0f2:	2303      	movs	r3, #3
 800d0f4:	e026      	b.n	800d144 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	9300      	str	r3, [sp, #0]
 800d0fa:	68bb      	ldr	r3, [r7, #8]
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	2101      	movs	r1, #1
 800d100:	68f8      	ldr	r0, [r7, #12]
 800d102:	f7ff ff54 	bl	800cfae <SPI_WaitFlagStateUntilTimeout>
 800d106:	4603      	mov	r3, r0
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d01a      	beq.n	800d142 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d110:	f043 0220 	orr.w	r2, r3, #32
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800d118:	2303      	movs	r3, #3
 800d11a:	e013      	b.n	800d144 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	9300      	str	r3, [sp, #0]
 800d120:	68bb      	ldr	r3, [r7, #8]
 800d122:	2200      	movs	r2, #0
 800d124:	2101      	movs	r1, #1
 800d126:	68f8      	ldr	r0, [r7, #12]
 800d128:	f7ff ff41 	bl	800cfae <SPI_WaitFlagStateUntilTimeout>
 800d12c:	4603      	mov	r3, r0
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d007      	beq.n	800d142 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d136:	f043 0220 	orr.w	r2, r3, #32
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800d13e:	2303      	movs	r3, #3
 800d140:	e000      	b.n	800d144 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800d142:	2300      	movs	r3, #0
}
 800d144:	4618      	mov	r0, r3
 800d146:	3710      	adds	r7, #16
 800d148:	46bd      	mov	sp, r7
 800d14a:	bd80      	pop	{r7, pc}

0800d14c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b088      	sub	sp, #32
 800d150:	af02      	add	r7, sp, #8
 800d152:	60f8      	str	r0, [r7, #12]
 800d154:	60b9      	str	r1, [r7, #8]
 800d156:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800d158:	4b1b      	ldr	r3, [pc, #108]	; (800d1c8 <SPI_EndRxTxTransaction+0x7c>)
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	4a1b      	ldr	r2, [pc, #108]	; (800d1cc <SPI_EndRxTxTransaction+0x80>)
 800d15e:	fba2 2303 	umull	r2, r3, r2, r3
 800d162:	0d5b      	lsrs	r3, r3, #21
 800d164:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d168:	fb02 f303 	mul.w	r3, r2, r3
 800d16c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	685b      	ldr	r3, [r3, #4]
 800d172:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d176:	d112      	bne.n	800d19e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	9300      	str	r3, [sp, #0]
 800d17c:	68bb      	ldr	r3, [r7, #8]
 800d17e:	2200      	movs	r2, #0
 800d180:	2180      	movs	r1, #128	; 0x80
 800d182:	68f8      	ldr	r0, [r7, #12]
 800d184:	f7ff ff13 	bl	800cfae <SPI_WaitFlagStateUntilTimeout>
 800d188:	4603      	mov	r3, r0
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d016      	beq.n	800d1bc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d192:	f043 0220 	orr.w	r2, r3, #32
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800d19a:	2303      	movs	r3, #3
 800d19c:	e00f      	b.n	800d1be <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800d19e:	697b      	ldr	r3, [r7, #20]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d00a      	beq.n	800d1ba <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800d1a4:	697b      	ldr	r3, [r7, #20]
 800d1a6:	3b01      	subs	r3, #1
 800d1a8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	689b      	ldr	r3, [r3, #8]
 800d1b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1b4:	2b80      	cmp	r3, #128	; 0x80
 800d1b6:	d0f2      	beq.n	800d19e <SPI_EndRxTxTransaction+0x52>
 800d1b8:	e000      	b.n	800d1bc <SPI_EndRxTxTransaction+0x70>
        break;
 800d1ba:	bf00      	nop
  }

  return HAL_OK;
 800d1bc:	2300      	movs	r3, #0
}
 800d1be:	4618      	mov	r0, r3
 800d1c0:	3718      	adds	r7, #24
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	bd80      	pop	{r7, pc}
 800d1c6:	bf00      	nop
 800d1c8:	20000000 	.word	0x20000000
 800d1cc:	165e9f81 	.word	0x165e9f81

0800d1d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b082      	sub	sp, #8
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d101      	bne.n	800d1e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d1de:	2301      	movs	r3, #1
 800d1e0:	e01d      	b.n	800d21e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d1e8:	b2db      	uxtb	r3, r3
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d106      	bne.n	800d1fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d1f6:	6878      	ldr	r0, [r7, #4]
 800d1f8:	f7f9 f8c8 	bl	800638c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	2202      	movs	r2, #2
 800d200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681a      	ldr	r2, [r3, #0]
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	3304      	adds	r3, #4
 800d20c:	4619      	mov	r1, r3
 800d20e:	4610      	mov	r0, r2
 800d210:	f000 fb56 	bl	800d8c0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	2201      	movs	r2, #1
 800d218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d21c:	2300      	movs	r3, #0
}
 800d21e:	4618      	mov	r0, r3
 800d220:	3708      	adds	r7, #8
 800d222:	46bd      	mov	sp, r7
 800d224:	bd80      	pop	{r7, pc}

0800d226 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d226:	b480      	push	{r7}
 800d228:	b085      	sub	sp, #20
 800d22a:	af00      	add	r7, sp, #0
 800d22c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	68da      	ldr	r2, [r3, #12]
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	f042 0201 	orr.w	r2, r2, #1
 800d23c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	689b      	ldr	r3, [r3, #8]
 800d244:	f003 0307 	and.w	r3, r3, #7
 800d248:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	2b06      	cmp	r3, #6
 800d24e:	d007      	beq.n	800d260 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	681a      	ldr	r2, [r3, #0]
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	f042 0201 	orr.w	r2, r2, #1
 800d25e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d260:	2300      	movs	r3, #0
}
 800d262:	4618      	mov	r0, r3
 800d264:	3714      	adds	r7, #20
 800d266:	46bd      	mov	sp, r7
 800d268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26c:	4770      	bx	lr

0800d26e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d26e:	b580      	push	{r7, lr}
 800d270:	b082      	sub	sp, #8
 800d272:	af00      	add	r7, sp, #0
 800d274:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d101      	bne.n	800d280 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d27c:	2301      	movs	r3, #1
 800d27e:	e01d      	b.n	800d2bc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d286:	b2db      	uxtb	r3, r3
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d106      	bne.n	800d29a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	2200      	movs	r2, #0
 800d290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d294:	6878      	ldr	r0, [r7, #4]
 800d296:	f7f9 f805 	bl	80062a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	2202      	movs	r2, #2
 800d29e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681a      	ldr	r2, [r3, #0]
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	3304      	adds	r3, #4
 800d2aa:	4619      	mov	r1, r3
 800d2ac:	4610      	mov	r0, r2
 800d2ae:	f000 fb07 	bl	800d8c0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	2201      	movs	r2, #1
 800d2b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d2ba:	2300      	movs	r3, #0
}
 800d2bc:	4618      	mov	r0, r3
 800d2be:	3708      	adds	r7, #8
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	bd80      	pop	{r7, pc}

0800d2c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b084      	sub	sp, #16
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
 800d2cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	2201      	movs	r2, #1
 800d2d4:	6839      	ldr	r1, [r7, #0]
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	f000 fd42 	bl	800dd60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	4a15      	ldr	r2, [pc, #84]	; (800d338 <HAL_TIM_PWM_Start+0x74>)
 800d2e2:	4293      	cmp	r3, r2
 800d2e4:	d004      	beq.n	800d2f0 <HAL_TIM_PWM_Start+0x2c>
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	4a14      	ldr	r2, [pc, #80]	; (800d33c <HAL_TIM_PWM_Start+0x78>)
 800d2ec:	4293      	cmp	r3, r2
 800d2ee:	d101      	bne.n	800d2f4 <HAL_TIM_PWM_Start+0x30>
 800d2f0:	2301      	movs	r3, #1
 800d2f2:	e000      	b.n	800d2f6 <HAL_TIM_PWM_Start+0x32>
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d007      	beq.n	800d30a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d308:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	689b      	ldr	r3, [r3, #8]
 800d310:	f003 0307 	and.w	r3, r3, #7
 800d314:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	2b06      	cmp	r3, #6
 800d31a:	d007      	beq.n	800d32c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	681a      	ldr	r2, [r3, #0]
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	f042 0201 	orr.w	r2, r2, #1
 800d32a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d32c:	2300      	movs	r3, #0
}
 800d32e:	4618      	mov	r0, r3
 800d330:	3710      	adds	r7, #16
 800d332:	46bd      	mov	sp, r7
 800d334:	bd80      	pop	{r7, pc}
 800d336:	bf00      	nop
 800d338:	40010000 	.word	0x40010000
 800d33c:	40010400 	.word	0x40010400

0800d340 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b086      	sub	sp, #24
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
 800d348:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d101      	bne.n	800d354 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800d350:	2301      	movs	r3, #1
 800d352:	e083      	b.n	800d45c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d35a:	b2db      	uxtb	r3, r3
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d106      	bne.n	800d36e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	2200      	movs	r2, #0
 800d364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800d368:	6878      	ldr	r0, [r7, #4]
 800d36a:	f7f9 f89f 	bl	80064ac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	2202      	movs	r2, #2
 800d372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	689b      	ldr	r3, [r3, #8]
 800d37c:	687a      	ldr	r2, [r7, #4]
 800d37e:	6812      	ldr	r2, [r2, #0]
 800d380:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d384:	f023 0307 	bic.w	r3, r3, #7
 800d388:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681a      	ldr	r2, [r3, #0]
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	3304      	adds	r3, #4
 800d392:	4619      	mov	r1, r3
 800d394:	4610      	mov	r0, r2
 800d396:	f000 fa93 	bl	800d8c0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	689b      	ldr	r3, [r3, #8]
 800d3a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	699b      	ldr	r3, [r3, #24]
 800d3a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	6a1b      	ldr	r3, [r3, #32]
 800d3b0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	697a      	ldr	r2, [r7, #20]
 800d3b8:	4313      	orrs	r3, r2
 800d3ba:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800d3bc:	693b      	ldr	r3, [r7, #16]
 800d3be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d3c2:	f023 0303 	bic.w	r3, r3, #3
 800d3c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800d3c8:	683b      	ldr	r3, [r7, #0]
 800d3ca:	689a      	ldr	r2, [r3, #8]
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	699b      	ldr	r3, [r3, #24]
 800d3d0:	021b      	lsls	r3, r3, #8
 800d3d2:	4313      	orrs	r3, r2
 800d3d4:	693a      	ldr	r2, [r7, #16]
 800d3d6:	4313      	orrs	r3, r2
 800d3d8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800d3da:	693b      	ldr	r3, [r7, #16]
 800d3dc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800d3e0:	f023 030c 	bic.w	r3, r3, #12
 800d3e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800d3e6:	693b      	ldr	r3, [r7, #16]
 800d3e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d3ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d3f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	68da      	ldr	r2, [r3, #12]
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	69db      	ldr	r3, [r3, #28]
 800d3fa:	021b      	lsls	r3, r3, #8
 800d3fc:	4313      	orrs	r3, r2
 800d3fe:	693a      	ldr	r2, [r7, #16]
 800d400:	4313      	orrs	r3, r2
 800d402:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d404:	683b      	ldr	r3, [r7, #0]
 800d406:	691b      	ldr	r3, [r3, #16]
 800d408:	011a      	lsls	r2, r3, #4
 800d40a:	683b      	ldr	r3, [r7, #0]
 800d40c:	6a1b      	ldr	r3, [r3, #32]
 800d40e:	031b      	lsls	r3, r3, #12
 800d410:	4313      	orrs	r3, r2
 800d412:	693a      	ldr	r2, [r7, #16]
 800d414:	4313      	orrs	r3, r2
 800d416:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800d41e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800d426:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800d428:	683b      	ldr	r3, [r7, #0]
 800d42a:	685a      	ldr	r2, [r3, #4]
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	695b      	ldr	r3, [r3, #20]
 800d430:	011b      	lsls	r3, r3, #4
 800d432:	4313      	orrs	r3, r2
 800d434:	68fa      	ldr	r2, [r7, #12]
 800d436:	4313      	orrs	r3, r2
 800d438:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	697a      	ldr	r2, [r7, #20]
 800d440:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	693a      	ldr	r2, [r7, #16]
 800d448:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	68fa      	ldr	r2, [r7, #12]
 800d450:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	2201      	movs	r2, #1
 800d456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d45a:	2300      	movs	r3, #0
}
 800d45c:	4618      	mov	r0, r3
 800d45e:	3718      	adds	r7, #24
 800d460:	46bd      	mov	sp, r7
 800d462:	bd80      	pop	{r7, pc}

0800d464 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b082      	sub	sp, #8
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
 800d46c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800d46e:	683b      	ldr	r3, [r7, #0]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d002      	beq.n	800d47a <HAL_TIM_Encoder_Start+0x16>
 800d474:	2b04      	cmp	r3, #4
 800d476:	d008      	beq.n	800d48a <HAL_TIM_Encoder_Start+0x26>
 800d478:	e00f      	b.n	800d49a <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	2201      	movs	r2, #1
 800d480:	2100      	movs	r1, #0
 800d482:	4618      	mov	r0, r3
 800d484:	f000 fc6c 	bl	800dd60 <TIM_CCxChannelCmd>
      break;
 800d488:	e016      	b.n	800d4b8 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	2201      	movs	r2, #1
 800d490:	2104      	movs	r1, #4
 800d492:	4618      	mov	r0, r3
 800d494:	f000 fc64 	bl	800dd60 <TIM_CCxChannelCmd>
      break;
 800d498:	e00e      	b.n	800d4b8 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	2201      	movs	r2, #1
 800d4a0:	2100      	movs	r1, #0
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	f000 fc5c 	bl	800dd60 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	2201      	movs	r2, #1
 800d4ae:	2104      	movs	r1, #4
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	f000 fc55 	bl	800dd60 <TIM_CCxChannelCmd>
      break;
 800d4b6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	681a      	ldr	r2, [r3, #0]
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	f042 0201 	orr.w	r2, r2, #1
 800d4c6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800d4c8:	2300      	movs	r3, #0
}
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	3708      	adds	r7, #8
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bd80      	pop	{r7, pc}

0800d4d2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d4d2:	b580      	push	{r7, lr}
 800d4d4:	b082      	sub	sp, #8
 800d4d6:	af00      	add	r7, sp, #0
 800d4d8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	691b      	ldr	r3, [r3, #16]
 800d4e0:	f003 0302 	and.w	r3, r3, #2
 800d4e4:	2b02      	cmp	r3, #2
 800d4e6:	d122      	bne.n	800d52e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	68db      	ldr	r3, [r3, #12]
 800d4ee:	f003 0302 	and.w	r3, r3, #2
 800d4f2:	2b02      	cmp	r3, #2
 800d4f4:	d11b      	bne.n	800d52e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	f06f 0202 	mvn.w	r2, #2
 800d4fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2201      	movs	r2, #1
 800d504:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	699b      	ldr	r3, [r3, #24]
 800d50c:	f003 0303 	and.w	r3, r3, #3
 800d510:	2b00      	cmp	r3, #0
 800d512:	d003      	beq.n	800d51c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d514:	6878      	ldr	r0, [r7, #4]
 800d516:	f000 f9b5 	bl	800d884 <HAL_TIM_IC_CaptureCallback>
 800d51a:	e005      	b.n	800d528 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d51c:	6878      	ldr	r0, [r7, #4]
 800d51e:	f000 f9a7 	bl	800d870 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d522:	6878      	ldr	r0, [r7, #4]
 800d524:	f000 f9b8 	bl	800d898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	2200      	movs	r2, #0
 800d52c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	691b      	ldr	r3, [r3, #16]
 800d534:	f003 0304 	and.w	r3, r3, #4
 800d538:	2b04      	cmp	r3, #4
 800d53a:	d122      	bne.n	800d582 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	68db      	ldr	r3, [r3, #12]
 800d542:	f003 0304 	and.w	r3, r3, #4
 800d546:	2b04      	cmp	r3, #4
 800d548:	d11b      	bne.n	800d582 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	f06f 0204 	mvn.w	r2, #4
 800d552:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2202      	movs	r2, #2
 800d558:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	699b      	ldr	r3, [r3, #24]
 800d560:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d564:	2b00      	cmp	r3, #0
 800d566:	d003      	beq.n	800d570 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d568:	6878      	ldr	r0, [r7, #4]
 800d56a:	f000 f98b 	bl	800d884 <HAL_TIM_IC_CaptureCallback>
 800d56e:	e005      	b.n	800d57c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d570:	6878      	ldr	r0, [r7, #4]
 800d572:	f000 f97d 	bl	800d870 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d576:	6878      	ldr	r0, [r7, #4]
 800d578:	f000 f98e 	bl	800d898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2200      	movs	r2, #0
 800d580:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	691b      	ldr	r3, [r3, #16]
 800d588:	f003 0308 	and.w	r3, r3, #8
 800d58c:	2b08      	cmp	r3, #8
 800d58e:	d122      	bne.n	800d5d6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	68db      	ldr	r3, [r3, #12]
 800d596:	f003 0308 	and.w	r3, r3, #8
 800d59a:	2b08      	cmp	r3, #8
 800d59c:	d11b      	bne.n	800d5d6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	f06f 0208 	mvn.w	r2, #8
 800d5a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	2204      	movs	r2, #4
 800d5ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	69db      	ldr	r3, [r3, #28]
 800d5b4:	f003 0303 	and.w	r3, r3, #3
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d003      	beq.n	800d5c4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d5bc:	6878      	ldr	r0, [r7, #4]
 800d5be:	f000 f961 	bl	800d884 <HAL_TIM_IC_CaptureCallback>
 800d5c2:	e005      	b.n	800d5d0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d5c4:	6878      	ldr	r0, [r7, #4]
 800d5c6:	f000 f953 	bl	800d870 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d5ca:	6878      	ldr	r0, [r7, #4]
 800d5cc:	f000 f964 	bl	800d898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	691b      	ldr	r3, [r3, #16]
 800d5dc:	f003 0310 	and.w	r3, r3, #16
 800d5e0:	2b10      	cmp	r3, #16
 800d5e2:	d122      	bne.n	800d62a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	68db      	ldr	r3, [r3, #12]
 800d5ea:	f003 0310 	and.w	r3, r3, #16
 800d5ee:	2b10      	cmp	r3, #16
 800d5f0:	d11b      	bne.n	800d62a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	f06f 0210 	mvn.w	r2, #16
 800d5fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2208      	movs	r2, #8
 800d600:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	69db      	ldr	r3, [r3, #28]
 800d608:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d003      	beq.n	800d618 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d610:	6878      	ldr	r0, [r7, #4]
 800d612:	f000 f937 	bl	800d884 <HAL_TIM_IC_CaptureCallback>
 800d616:	e005      	b.n	800d624 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d618:	6878      	ldr	r0, [r7, #4]
 800d61a:	f000 f929 	bl	800d870 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d61e:	6878      	ldr	r0, [r7, #4]
 800d620:	f000 f93a 	bl	800d898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2200      	movs	r2, #0
 800d628:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	691b      	ldr	r3, [r3, #16]
 800d630:	f003 0301 	and.w	r3, r3, #1
 800d634:	2b01      	cmp	r3, #1
 800d636:	d10e      	bne.n	800d656 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	68db      	ldr	r3, [r3, #12]
 800d63e:	f003 0301 	and.w	r3, r3, #1
 800d642:	2b01      	cmp	r3, #1
 800d644:	d107      	bne.n	800d656 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	f06f 0201 	mvn.w	r2, #1
 800d64e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d650:	6878      	ldr	r0, [r7, #4]
 800d652:	f7f7 fc15 	bl	8004e80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	691b      	ldr	r3, [r3, #16]
 800d65c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d660:	2b80      	cmp	r3, #128	; 0x80
 800d662:	d10e      	bne.n	800d682 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	68db      	ldr	r3, [r3, #12]
 800d66a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d66e:	2b80      	cmp	r3, #128	; 0x80
 800d670:	d107      	bne.n	800d682 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d67a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d67c:	6878      	ldr	r0, [r7, #4]
 800d67e:	f000 fc6d 	bl	800df5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	691b      	ldr	r3, [r3, #16]
 800d688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d68c:	2b40      	cmp	r3, #64	; 0x40
 800d68e:	d10e      	bne.n	800d6ae <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	68db      	ldr	r3, [r3, #12]
 800d696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d69a:	2b40      	cmp	r3, #64	; 0x40
 800d69c:	d107      	bne.n	800d6ae <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d6a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d6a8:	6878      	ldr	r0, [r7, #4]
 800d6aa:	f000 f8ff 	bl	800d8ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	691b      	ldr	r3, [r3, #16]
 800d6b4:	f003 0320 	and.w	r3, r3, #32
 800d6b8:	2b20      	cmp	r3, #32
 800d6ba:	d10e      	bne.n	800d6da <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	68db      	ldr	r3, [r3, #12]
 800d6c2:	f003 0320 	and.w	r3, r3, #32
 800d6c6:	2b20      	cmp	r3, #32
 800d6c8:	d107      	bne.n	800d6da <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	f06f 0220 	mvn.w	r2, #32
 800d6d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d6d4:	6878      	ldr	r0, [r7, #4]
 800d6d6:	f000 fc37 	bl	800df48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d6da:	bf00      	nop
 800d6dc:	3708      	adds	r7, #8
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	bd80      	pop	{r7, pc}
	...

0800d6e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b084      	sub	sp, #16
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	60f8      	str	r0, [r7, #12]
 800d6ec:	60b9      	str	r1, [r7, #8]
 800d6ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d6f6:	2b01      	cmp	r3, #1
 800d6f8:	d101      	bne.n	800d6fe <HAL_TIM_PWM_ConfigChannel+0x1a>
 800d6fa:	2302      	movs	r3, #2
 800d6fc:	e0b4      	b.n	800d868 <HAL_TIM_PWM_ConfigChannel+0x184>
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	2201      	movs	r2, #1
 800d702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	2202      	movs	r2, #2
 800d70a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	2b0c      	cmp	r3, #12
 800d712:	f200 809f 	bhi.w	800d854 <HAL_TIM_PWM_ConfigChannel+0x170>
 800d716:	a201      	add	r2, pc, #4	; (adr r2, 800d71c <HAL_TIM_PWM_ConfigChannel+0x38>)
 800d718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d71c:	0800d751 	.word	0x0800d751
 800d720:	0800d855 	.word	0x0800d855
 800d724:	0800d855 	.word	0x0800d855
 800d728:	0800d855 	.word	0x0800d855
 800d72c:	0800d791 	.word	0x0800d791
 800d730:	0800d855 	.word	0x0800d855
 800d734:	0800d855 	.word	0x0800d855
 800d738:	0800d855 	.word	0x0800d855
 800d73c:	0800d7d3 	.word	0x0800d7d3
 800d740:	0800d855 	.word	0x0800d855
 800d744:	0800d855 	.word	0x0800d855
 800d748:	0800d855 	.word	0x0800d855
 800d74c:	0800d813 	.word	0x0800d813
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	68b9      	ldr	r1, [r7, #8]
 800d756:	4618      	mov	r0, r3
 800d758:	f000 f952 	bl	800da00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	699a      	ldr	r2, [r3, #24]
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	f042 0208 	orr.w	r2, r2, #8
 800d76a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	699a      	ldr	r2, [r3, #24]
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	f022 0204 	bic.w	r2, r2, #4
 800d77a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	6999      	ldr	r1, [r3, #24]
 800d782:	68bb      	ldr	r3, [r7, #8]
 800d784:	691a      	ldr	r2, [r3, #16]
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	430a      	orrs	r2, r1
 800d78c:	619a      	str	r2, [r3, #24]
      break;
 800d78e:	e062      	b.n	800d856 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	68b9      	ldr	r1, [r7, #8]
 800d796:	4618      	mov	r0, r3
 800d798:	f000 f9a2 	bl	800dae0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	699a      	ldr	r2, [r3, #24]
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d7aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	699a      	ldr	r2, [r3, #24]
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d7ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	6999      	ldr	r1, [r3, #24]
 800d7c2:	68bb      	ldr	r3, [r7, #8]
 800d7c4:	691b      	ldr	r3, [r3, #16]
 800d7c6:	021a      	lsls	r2, r3, #8
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	430a      	orrs	r2, r1
 800d7ce:	619a      	str	r2, [r3, #24]
      break;
 800d7d0:	e041      	b.n	800d856 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	68b9      	ldr	r1, [r7, #8]
 800d7d8:	4618      	mov	r0, r3
 800d7da:	f000 f9f7 	bl	800dbcc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	69da      	ldr	r2, [r3, #28]
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	f042 0208 	orr.w	r2, r2, #8
 800d7ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	69da      	ldr	r2, [r3, #28]
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	f022 0204 	bic.w	r2, r2, #4
 800d7fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	69d9      	ldr	r1, [r3, #28]
 800d804:	68bb      	ldr	r3, [r7, #8]
 800d806:	691a      	ldr	r2, [r3, #16]
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	430a      	orrs	r2, r1
 800d80e:	61da      	str	r2, [r3, #28]
      break;
 800d810:	e021      	b.n	800d856 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	68b9      	ldr	r1, [r7, #8]
 800d818:	4618      	mov	r0, r3
 800d81a:	f000 fa4b 	bl	800dcb4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	69da      	ldr	r2, [r3, #28]
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d82c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	69da      	ldr	r2, [r3, #28]
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d83c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	69d9      	ldr	r1, [r3, #28]
 800d844:	68bb      	ldr	r3, [r7, #8]
 800d846:	691b      	ldr	r3, [r3, #16]
 800d848:	021a      	lsls	r2, r3, #8
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	430a      	orrs	r2, r1
 800d850:	61da      	str	r2, [r3, #28]
      break;
 800d852:	e000      	b.n	800d856 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800d854:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	2201      	movs	r2, #1
 800d85a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	2200      	movs	r2, #0
 800d862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d866:	2300      	movs	r3, #0
}
 800d868:	4618      	mov	r0, r3
 800d86a:	3710      	adds	r7, #16
 800d86c:	46bd      	mov	sp, r7
 800d86e:	bd80      	pop	{r7, pc}

0800d870 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d870:	b480      	push	{r7}
 800d872:	b083      	sub	sp, #12
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d878:	bf00      	nop
 800d87a:	370c      	adds	r7, #12
 800d87c:	46bd      	mov	sp, r7
 800d87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d882:	4770      	bx	lr

0800d884 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d884:	b480      	push	{r7}
 800d886:	b083      	sub	sp, #12
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d88c:	bf00      	nop
 800d88e:	370c      	adds	r7, #12
 800d890:	46bd      	mov	sp, r7
 800d892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d896:	4770      	bx	lr

0800d898 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d898:	b480      	push	{r7}
 800d89a:	b083      	sub	sp, #12
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d8a0:	bf00      	nop
 800d8a2:	370c      	adds	r7, #12
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8aa:	4770      	bx	lr

0800d8ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d8ac:	b480      	push	{r7}
 800d8ae:	b083      	sub	sp, #12
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d8b4:	bf00      	nop
 800d8b6:	370c      	adds	r7, #12
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8be:	4770      	bx	lr

0800d8c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d8c0:	b480      	push	{r7}
 800d8c2:	b085      	sub	sp, #20
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
 800d8c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	4a40      	ldr	r2, [pc, #256]	; (800d9d4 <TIM_Base_SetConfig+0x114>)
 800d8d4:	4293      	cmp	r3, r2
 800d8d6:	d013      	beq.n	800d900 <TIM_Base_SetConfig+0x40>
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d8de:	d00f      	beq.n	800d900 <TIM_Base_SetConfig+0x40>
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	4a3d      	ldr	r2, [pc, #244]	; (800d9d8 <TIM_Base_SetConfig+0x118>)
 800d8e4:	4293      	cmp	r3, r2
 800d8e6:	d00b      	beq.n	800d900 <TIM_Base_SetConfig+0x40>
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	4a3c      	ldr	r2, [pc, #240]	; (800d9dc <TIM_Base_SetConfig+0x11c>)
 800d8ec:	4293      	cmp	r3, r2
 800d8ee:	d007      	beq.n	800d900 <TIM_Base_SetConfig+0x40>
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	4a3b      	ldr	r2, [pc, #236]	; (800d9e0 <TIM_Base_SetConfig+0x120>)
 800d8f4:	4293      	cmp	r3, r2
 800d8f6:	d003      	beq.n	800d900 <TIM_Base_SetConfig+0x40>
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	4a3a      	ldr	r2, [pc, #232]	; (800d9e4 <TIM_Base_SetConfig+0x124>)
 800d8fc:	4293      	cmp	r3, r2
 800d8fe:	d108      	bne.n	800d912 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d906:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d908:	683b      	ldr	r3, [r7, #0]
 800d90a:	685b      	ldr	r3, [r3, #4]
 800d90c:	68fa      	ldr	r2, [r7, #12]
 800d90e:	4313      	orrs	r3, r2
 800d910:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	4a2f      	ldr	r2, [pc, #188]	; (800d9d4 <TIM_Base_SetConfig+0x114>)
 800d916:	4293      	cmp	r3, r2
 800d918:	d02b      	beq.n	800d972 <TIM_Base_SetConfig+0xb2>
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d920:	d027      	beq.n	800d972 <TIM_Base_SetConfig+0xb2>
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	4a2c      	ldr	r2, [pc, #176]	; (800d9d8 <TIM_Base_SetConfig+0x118>)
 800d926:	4293      	cmp	r3, r2
 800d928:	d023      	beq.n	800d972 <TIM_Base_SetConfig+0xb2>
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	4a2b      	ldr	r2, [pc, #172]	; (800d9dc <TIM_Base_SetConfig+0x11c>)
 800d92e:	4293      	cmp	r3, r2
 800d930:	d01f      	beq.n	800d972 <TIM_Base_SetConfig+0xb2>
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	4a2a      	ldr	r2, [pc, #168]	; (800d9e0 <TIM_Base_SetConfig+0x120>)
 800d936:	4293      	cmp	r3, r2
 800d938:	d01b      	beq.n	800d972 <TIM_Base_SetConfig+0xb2>
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	4a29      	ldr	r2, [pc, #164]	; (800d9e4 <TIM_Base_SetConfig+0x124>)
 800d93e:	4293      	cmp	r3, r2
 800d940:	d017      	beq.n	800d972 <TIM_Base_SetConfig+0xb2>
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	4a28      	ldr	r2, [pc, #160]	; (800d9e8 <TIM_Base_SetConfig+0x128>)
 800d946:	4293      	cmp	r3, r2
 800d948:	d013      	beq.n	800d972 <TIM_Base_SetConfig+0xb2>
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	4a27      	ldr	r2, [pc, #156]	; (800d9ec <TIM_Base_SetConfig+0x12c>)
 800d94e:	4293      	cmp	r3, r2
 800d950:	d00f      	beq.n	800d972 <TIM_Base_SetConfig+0xb2>
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	4a26      	ldr	r2, [pc, #152]	; (800d9f0 <TIM_Base_SetConfig+0x130>)
 800d956:	4293      	cmp	r3, r2
 800d958:	d00b      	beq.n	800d972 <TIM_Base_SetConfig+0xb2>
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	4a25      	ldr	r2, [pc, #148]	; (800d9f4 <TIM_Base_SetConfig+0x134>)
 800d95e:	4293      	cmp	r3, r2
 800d960:	d007      	beq.n	800d972 <TIM_Base_SetConfig+0xb2>
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	4a24      	ldr	r2, [pc, #144]	; (800d9f8 <TIM_Base_SetConfig+0x138>)
 800d966:	4293      	cmp	r3, r2
 800d968:	d003      	beq.n	800d972 <TIM_Base_SetConfig+0xb2>
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	4a23      	ldr	r2, [pc, #140]	; (800d9fc <TIM_Base_SetConfig+0x13c>)
 800d96e:	4293      	cmp	r3, r2
 800d970:	d108      	bne.n	800d984 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d978:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d97a:	683b      	ldr	r3, [r7, #0]
 800d97c:	68db      	ldr	r3, [r3, #12]
 800d97e:	68fa      	ldr	r2, [r7, #12]
 800d980:	4313      	orrs	r3, r2
 800d982:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	695b      	ldr	r3, [r3, #20]
 800d98e:	4313      	orrs	r3, r2
 800d990:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	68fa      	ldr	r2, [r7, #12]
 800d996:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d998:	683b      	ldr	r3, [r7, #0]
 800d99a:	689a      	ldr	r2, [r3, #8]
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d9a0:	683b      	ldr	r3, [r7, #0]
 800d9a2:	681a      	ldr	r2, [r3, #0]
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	4a0a      	ldr	r2, [pc, #40]	; (800d9d4 <TIM_Base_SetConfig+0x114>)
 800d9ac:	4293      	cmp	r3, r2
 800d9ae:	d003      	beq.n	800d9b8 <TIM_Base_SetConfig+0xf8>
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	4a0c      	ldr	r2, [pc, #48]	; (800d9e4 <TIM_Base_SetConfig+0x124>)
 800d9b4:	4293      	cmp	r3, r2
 800d9b6:	d103      	bne.n	800d9c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d9b8:	683b      	ldr	r3, [r7, #0]
 800d9ba:	691a      	ldr	r2, [r3, #16]
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	2201      	movs	r2, #1
 800d9c4:	615a      	str	r2, [r3, #20]
}
 800d9c6:	bf00      	nop
 800d9c8:	3714      	adds	r7, #20
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d0:	4770      	bx	lr
 800d9d2:	bf00      	nop
 800d9d4:	40010000 	.word	0x40010000
 800d9d8:	40000400 	.word	0x40000400
 800d9dc:	40000800 	.word	0x40000800
 800d9e0:	40000c00 	.word	0x40000c00
 800d9e4:	40010400 	.word	0x40010400
 800d9e8:	40014000 	.word	0x40014000
 800d9ec:	40014400 	.word	0x40014400
 800d9f0:	40014800 	.word	0x40014800
 800d9f4:	40001800 	.word	0x40001800
 800d9f8:	40001c00 	.word	0x40001c00
 800d9fc:	40002000 	.word	0x40002000

0800da00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800da00:	b480      	push	{r7}
 800da02:	b087      	sub	sp, #28
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
 800da08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	6a1b      	ldr	r3, [r3, #32]
 800da0e:	f023 0201 	bic.w	r2, r3, #1
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	6a1b      	ldr	r3, [r3, #32]
 800da1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	685b      	ldr	r3, [r3, #4]
 800da20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	699b      	ldr	r3, [r3, #24]
 800da26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800da2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	f023 0303 	bic.w	r3, r3, #3
 800da36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	68fa      	ldr	r2, [r7, #12]
 800da3e:	4313      	orrs	r3, r2
 800da40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800da42:	697b      	ldr	r3, [r7, #20]
 800da44:	f023 0302 	bic.w	r3, r3, #2
 800da48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	689b      	ldr	r3, [r3, #8]
 800da4e:	697a      	ldr	r2, [r7, #20]
 800da50:	4313      	orrs	r3, r2
 800da52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	4a20      	ldr	r2, [pc, #128]	; (800dad8 <TIM_OC1_SetConfig+0xd8>)
 800da58:	4293      	cmp	r3, r2
 800da5a:	d003      	beq.n	800da64 <TIM_OC1_SetConfig+0x64>
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	4a1f      	ldr	r2, [pc, #124]	; (800dadc <TIM_OC1_SetConfig+0xdc>)
 800da60:	4293      	cmp	r3, r2
 800da62:	d10c      	bne.n	800da7e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800da64:	697b      	ldr	r3, [r7, #20]
 800da66:	f023 0308 	bic.w	r3, r3, #8
 800da6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800da6c:	683b      	ldr	r3, [r7, #0]
 800da6e:	68db      	ldr	r3, [r3, #12]
 800da70:	697a      	ldr	r2, [r7, #20]
 800da72:	4313      	orrs	r3, r2
 800da74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800da76:	697b      	ldr	r3, [r7, #20]
 800da78:	f023 0304 	bic.w	r3, r3, #4
 800da7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	4a15      	ldr	r2, [pc, #84]	; (800dad8 <TIM_OC1_SetConfig+0xd8>)
 800da82:	4293      	cmp	r3, r2
 800da84:	d003      	beq.n	800da8e <TIM_OC1_SetConfig+0x8e>
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	4a14      	ldr	r2, [pc, #80]	; (800dadc <TIM_OC1_SetConfig+0xdc>)
 800da8a:	4293      	cmp	r3, r2
 800da8c:	d111      	bne.n	800dab2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800da8e:	693b      	ldr	r3, [r7, #16]
 800da90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800da94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800da96:	693b      	ldr	r3, [r7, #16]
 800da98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800da9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	695b      	ldr	r3, [r3, #20]
 800daa2:	693a      	ldr	r2, [r7, #16]
 800daa4:	4313      	orrs	r3, r2
 800daa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800daa8:	683b      	ldr	r3, [r7, #0]
 800daaa:	699b      	ldr	r3, [r3, #24]
 800daac:	693a      	ldr	r2, [r7, #16]
 800daae:	4313      	orrs	r3, r2
 800dab0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	693a      	ldr	r2, [r7, #16]
 800dab6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	68fa      	ldr	r2, [r7, #12]
 800dabc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800dabe:	683b      	ldr	r3, [r7, #0]
 800dac0:	685a      	ldr	r2, [r3, #4]
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	697a      	ldr	r2, [r7, #20]
 800daca:	621a      	str	r2, [r3, #32]
}
 800dacc:	bf00      	nop
 800dace:	371c      	adds	r7, #28
 800dad0:	46bd      	mov	sp, r7
 800dad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad6:	4770      	bx	lr
 800dad8:	40010000 	.word	0x40010000
 800dadc:	40010400 	.word	0x40010400

0800dae0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dae0:	b480      	push	{r7}
 800dae2:	b087      	sub	sp, #28
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
 800dae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	6a1b      	ldr	r3, [r3, #32]
 800daee:	f023 0210 	bic.w	r2, r3, #16
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	6a1b      	ldr	r3, [r3, #32]
 800dafa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	685b      	ldr	r3, [r3, #4]
 800db00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	699b      	ldr	r3, [r3, #24]
 800db06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800db0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800db16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	021b      	lsls	r3, r3, #8
 800db1e:	68fa      	ldr	r2, [r7, #12]
 800db20:	4313      	orrs	r3, r2
 800db22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800db24:	697b      	ldr	r3, [r7, #20]
 800db26:	f023 0320 	bic.w	r3, r3, #32
 800db2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800db2c:	683b      	ldr	r3, [r7, #0]
 800db2e:	689b      	ldr	r3, [r3, #8]
 800db30:	011b      	lsls	r3, r3, #4
 800db32:	697a      	ldr	r2, [r7, #20]
 800db34:	4313      	orrs	r3, r2
 800db36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	4a22      	ldr	r2, [pc, #136]	; (800dbc4 <TIM_OC2_SetConfig+0xe4>)
 800db3c:	4293      	cmp	r3, r2
 800db3e:	d003      	beq.n	800db48 <TIM_OC2_SetConfig+0x68>
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	4a21      	ldr	r2, [pc, #132]	; (800dbc8 <TIM_OC2_SetConfig+0xe8>)
 800db44:	4293      	cmp	r3, r2
 800db46:	d10d      	bne.n	800db64 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800db48:	697b      	ldr	r3, [r7, #20]
 800db4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800db4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800db50:	683b      	ldr	r3, [r7, #0]
 800db52:	68db      	ldr	r3, [r3, #12]
 800db54:	011b      	lsls	r3, r3, #4
 800db56:	697a      	ldr	r2, [r7, #20]
 800db58:	4313      	orrs	r3, r2
 800db5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800db5c:	697b      	ldr	r3, [r7, #20]
 800db5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800db62:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	4a17      	ldr	r2, [pc, #92]	; (800dbc4 <TIM_OC2_SetConfig+0xe4>)
 800db68:	4293      	cmp	r3, r2
 800db6a:	d003      	beq.n	800db74 <TIM_OC2_SetConfig+0x94>
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	4a16      	ldr	r2, [pc, #88]	; (800dbc8 <TIM_OC2_SetConfig+0xe8>)
 800db70:	4293      	cmp	r3, r2
 800db72:	d113      	bne.n	800db9c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800db74:	693b      	ldr	r3, [r7, #16]
 800db76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800db7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800db7c:	693b      	ldr	r3, [r7, #16]
 800db7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800db82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800db84:	683b      	ldr	r3, [r7, #0]
 800db86:	695b      	ldr	r3, [r3, #20]
 800db88:	009b      	lsls	r3, r3, #2
 800db8a:	693a      	ldr	r2, [r7, #16]
 800db8c:	4313      	orrs	r3, r2
 800db8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800db90:	683b      	ldr	r3, [r7, #0]
 800db92:	699b      	ldr	r3, [r3, #24]
 800db94:	009b      	lsls	r3, r3, #2
 800db96:	693a      	ldr	r2, [r7, #16]
 800db98:	4313      	orrs	r3, r2
 800db9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	693a      	ldr	r2, [r7, #16]
 800dba0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	68fa      	ldr	r2, [r7, #12]
 800dba6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800dba8:	683b      	ldr	r3, [r7, #0]
 800dbaa:	685a      	ldr	r2, [r3, #4]
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	697a      	ldr	r2, [r7, #20]
 800dbb4:	621a      	str	r2, [r3, #32]
}
 800dbb6:	bf00      	nop
 800dbb8:	371c      	adds	r7, #28
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc0:	4770      	bx	lr
 800dbc2:	bf00      	nop
 800dbc4:	40010000 	.word	0x40010000
 800dbc8:	40010400 	.word	0x40010400

0800dbcc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dbcc:	b480      	push	{r7}
 800dbce:	b087      	sub	sp, #28
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
 800dbd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	6a1b      	ldr	r3, [r3, #32]
 800dbda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	6a1b      	ldr	r3, [r3, #32]
 800dbe6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	685b      	ldr	r3, [r3, #4]
 800dbec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	69db      	ldr	r3, [r3, #28]
 800dbf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dbfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	f023 0303 	bic.w	r3, r3, #3
 800dc02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dc04:	683b      	ldr	r3, [r7, #0]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	68fa      	ldr	r2, [r7, #12]
 800dc0a:	4313      	orrs	r3, r2
 800dc0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800dc0e:	697b      	ldr	r3, [r7, #20]
 800dc10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dc14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800dc16:	683b      	ldr	r3, [r7, #0]
 800dc18:	689b      	ldr	r3, [r3, #8]
 800dc1a:	021b      	lsls	r3, r3, #8
 800dc1c:	697a      	ldr	r2, [r7, #20]
 800dc1e:	4313      	orrs	r3, r2
 800dc20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	4a21      	ldr	r2, [pc, #132]	; (800dcac <TIM_OC3_SetConfig+0xe0>)
 800dc26:	4293      	cmp	r3, r2
 800dc28:	d003      	beq.n	800dc32 <TIM_OC3_SetConfig+0x66>
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	4a20      	ldr	r2, [pc, #128]	; (800dcb0 <TIM_OC3_SetConfig+0xe4>)
 800dc2e:	4293      	cmp	r3, r2
 800dc30:	d10d      	bne.n	800dc4e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800dc32:	697b      	ldr	r3, [r7, #20]
 800dc34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dc38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800dc3a:	683b      	ldr	r3, [r7, #0]
 800dc3c:	68db      	ldr	r3, [r3, #12]
 800dc3e:	021b      	lsls	r3, r3, #8
 800dc40:	697a      	ldr	r2, [r7, #20]
 800dc42:	4313      	orrs	r3, r2
 800dc44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800dc46:	697b      	ldr	r3, [r7, #20]
 800dc48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dc4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	4a16      	ldr	r2, [pc, #88]	; (800dcac <TIM_OC3_SetConfig+0xe0>)
 800dc52:	4293      	cmp	r3, r2
 800dc54:	d003      	beq.n	800dc5e <TIM_OC3_SetConfig+0x92>
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	4a15      	ldr	r2, [pc, #84]	; (800dcb0 <TIM_OC3_SetConfig+0xe4>)
 800dc5a:	4293      	cmp	r3, r2
 800dc5c:	d113      	bne.n	800dc86 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800dc5e:	693b      	ldr	r3, [r7, #16]
 800dc60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dc64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800dc66:	693b      	ldr	r3, [r7, #16]
 800dc68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dc6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800dc6e:	683b      	ldr	r3, [r7, #0]
 800dc70:	695b      	ldr	r3, [r3, #20]
 800dc72:	011b      	lsls	r3, r3, #4
 800dc74:	693a      	ldr	r2, [r7, #16]
 800dc76:	4313      	orrs	r3, r2
 800dc78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800dc7a:	683b      	ldr	r3, [r7, #0]
 800dc7c:	699b      	ldr	r3, [r3, #24]
 800dc7e:	011b      	lsls	r3, r3, #4
 800dc80:	693a      	ldr	r2, [r7, #16]
 800dc82:	4313      	orrs	r3, r2
 800dc84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	693a      	ldr	r2, [r7, #16]
 800dc8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	68fa      	ldr	r2, [r7, #12]
 800dc90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	685a      	ldr	r2, [r3, #4]
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	697a      	ldr	r2, [r7, #20]
 800dc9e:	621a      	str	r2, [r3, #32]
}
 800dca0:	bf00      	nop
 800dca2:	371c      	adds	r7, #28
 800dca4:	46bd      	mov	sp, r7
 800dca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcaa:	4770      	bx	lr
 800dcac:	40010000 	.word	0x40010000
 800dcb0:	40010400 	.word	0x40010400

0800dcb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dcb4:	b480      	push	{r7}
 800dcb6:	b087      	sub	sp, #28
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]
 800dcbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	6a1b      	ldr	r3, [r3, #32]
 800dcc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	6a1b      	ldr	r3, [r3, #32]
 800dcce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	685b      	ldr	r3, [r3, #4]
 800dcd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	69db      	ldr	r3, [r3, #28]
 800dcda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dcea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dcec:	683b      	ldr	r3, [r7, #0]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	021b      	lsls	r3, r3, #8
 800dcf2:	68fa      	ldr	r2, [r7, #12]
 800dcf4:	4313      	orrs	r3, r2
 800dcf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800dcf8:	693b      	ldr	r3, [r7, #16]
 800dcfa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dcfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800dd00:	683b      	ldr	r3, [r7, #0]
 800dd02:	689b      	ldr	r3, [r3, #8]
 800dd04:	031b      	lsls	r3, r3, #12
 800dd06:	693a      	ldr	r2, [r7, #16]
 800dd08:	4313      	orrs	r3, r2
 800dd0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	4a12      	ldr	r2, [pc, #72]	; (800dd58 <TIM_OC4_SetConfig+0xa4>)
 800dd10:	4293      	cmp	r3, r2
 800dd12:	d003      	beq.n	800dd1c <TIM_OC4_SetConfig+0x68>
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	4a11      	ldr	r2, [pc, #68]	; (800dd5c <TIM_OC4_SetConfig+0xa8>)
 800dd18:	4293      	cmp	r3, r2
 800dd1a:	d109      	bne.n	800dd30 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800dd1c:	697b      	ldr	r3, [r7, #20]
 800dd1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dd22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800dd24:	683b      	ldr	r3, [r7, #0]
 800dd26:	695b      	ldr	r3, [r3, #20]
 800dd28:	019b      	lsls	r3, r3, #6
 800dd2a:	697a      	ldr	r2, [r7, #20]
 800dd2c:	4313      	orrs	r3, r2
 800dd2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	697a      	ldr	r2, [r7, #20]
 800dd34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	68fa      	ldr	r2, [r7, #12]
 800dd3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800dd3c:	683b      	ldr	r3, [r7, #0]
 800dd3e:	685a      	ldr	r2, [r3, #4]
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	693a      	ldr	r2, [r7, #16]
 800dd48:	621a      	str	r2, [r3, #32]
}
 800dd4a:	bf00      	nop
 800dd4c:	371c      	adds	r7, #28
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd54:	4770      	bx	lr
 800dd56:	bf00      	nop
 800dd58:	40010000 	.word	0x40010000
 800dd5c:	40010400 	.word	0x40010400

0800dd60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800dd60:	b480      	push	{r7}
 800dd62:	b087      	sub	sp, #28
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	60f8      	str	r0, [r7, #12]
 800dd68:	60b9      	str	r1, [r7, #8]
 800dd6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800dd6c:	68bb      	ldr	r3, [r7, #8]
 800dd6e:	f003 031f 	and.w	r3, r3, #31
 800dd72:	2201      	movs	r2, #1
 800dd74:	fa02 f303 	lsl.w	r3, r2, r3
 800dd78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	6a1a      	ldr	r2, [r3, #32]
 800dd7e:	697b      	ldr	r3, [r7, #20]
 800dd80:	43db      	mvns	r3, r3
 800dd82:	401a      	ands	r2, r3
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	6a1a      	ldr	r2, [r3, #32]
 800dd8c:	68bb      	ldr	r3, [r7, #8]
 800dd8e:	f003 031f 	and.w	r3, r3, #31
 800dd92:	6879      	ldr	r1, [r7, #4]
 800dd94:	fa01 f303 	lsl.w	r3, r1, r3
 800dd98:	431a      	orrs	r2, r3
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	621a      	str	r2, [r3, #32]
}
 800dd9e:	bf00      	nop
 800dda0:	371c      	adds	r7, #28
 800dda2:	46bd      	mov	sp, r7
 800dda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda8:	4770      	bx	lr
	...

0800ddac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ddac:	b480      	push	{r7}
 800ddae:	b085      	sub	sp, #20
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
 800ddb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ddbc:	2b01      	cmp	r3, #1
 800ddbe:	d101      	bne.n	800ddc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ddc0:	2302      	movs	r3, #2
 800ddc2:	e05a      	b.n	800de7a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	2201      	movs	r2, #1
 800ddc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	2202      	movs	r2, #2
 800ddd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	685b      	ldr	r3, [r3, #4]
 800ddda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	689b      	ldr	r3, [r3, #8]
 800dde2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ddea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ddec:	683b      	ldr	r3, [r7, #0]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	68fa      	ldr	r2, [r7, #12]
 800ddf2:	4313      	orrs	r3, r2
 800ddf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	68fa      	ldr	r2, [r7, #12]
 800ddfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	4a21      	ldr	r2, [pc, #132]	; (800de88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800de04:	4293      	cmp	r3, r2
 800de06:	d022      	beq.n	800de4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800de10:	d01d      	beq.n	800de4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	4a1d      	ldr	r2, [pc, #116]	; (800de8c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800de18:	4293      	cmp	r3, r2
 800de1a:	d018      	beq.n	800de4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	4a1b      	ldr	r2, [pc, #108]	; (800de90 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800de22:	4293      	cmp	r3, r2
 800de24:	d013      	beq.n	800de4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	4a1a      	ldr	r2, [pc, #104]	; (800de94 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800de2c:	4293      	cmp	r3, r2
 800de2e:	d00e      	beq.n	800de4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	4a18      	ldr	r2, [pc, #96]	; (800de98 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800de36:	4293      	cmp	r3, r2
 800de38:	d009      	beq.n	800de4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	4a17      	ldr	r2, [pc, #92]	; (800de9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800de40:	4293      	cmp	r3, r2
 800de42:	d004      	beq.n	800de4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	4a15      	ldr	r2, [pc, #84]	; (800dea0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800de4a:	4293      	cmp	r3, r2
 800de4c:	d10c      	bne.n	800de68 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800de4e:	68bb      	ldr	r3, [r7, #8]
 800de50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800de54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800de56:	683b      	ldr	r3, [r7, #0]
 800de58:	685b      	ldr	r3, [r3, #4]
 800de5a:	68ba      	ldr	r2, [r7, #8]
 800de5c:	4313      	orrs	r3, r2
 800de5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	68ba      	ldr	r2, [r7, #8]
 800de66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	2201      	movs	r2, #1
 800de6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	2200      	movs	r2, #0
 800de74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800de78:	2300      	movs	r3, #0
}
 800de7a:	4618      	mov	r0, r3
 800de7c:	3714      	adds	r7, #20
 800de7e:	46bd      	mov	sp, r7
 800de80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de84:	4770      	bx	lr
 800de86:	bf00      	nop
 800de88:	40010000 	.word	0x40010000
 800de8c:	40000400 	.word	0x40000400
 800de90:	40000800 	.word	0x40000800
 800de94:	40000c00 	.word	0x40000c00
 800de98:	40010400 	.word	0x40010400
 800de9c:	40014000 	.word	0x40014000
 800dea0:	40001800 	.word	0x40001800

0800dea4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800dea4:	b480      	push	{r7}
 800dea6:	b085      	sub	sp, #20
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
 800deac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800deae:	2300      	movs	r3, #0
 800deb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800deb8:	2b01      	cmp	r3, #1
 800deba:	d101      	bne.n	800dec0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800debc:	2302      	movs	r3, #2
 800debe:	e03d      	b.n	800df3c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	2201      	movs	r2, #1
 800dec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800dece:	683b      	ldr	r3, [r7, #0]
 800ded0:	68db      	ldr	r3, [r3, #12]
 800ded2:	4313      	orrs	r3, r2
 800ded4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800dedc:	683b      	ldr	r3, [r7, #0]
 800dede:	689b      	ldr	r3, [r3, #8]
 800dee0:	4313      	orrs	r3, r2
 800dee2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800deea:	683b      	ldr	r3, [r7, #0]
 800deec:	685b      	ldr	r3, [r3, #4]
 800deee:	4313      	orrs	r3, r2
 800def0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800def8:	683b      	ldr	r3, [r7, #0]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	4313      	orrs	r3, r2
 800defe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800df06:	683b      	ldr	r3, [r7, #0]
 800df08:	691b      	ldr	r3, [r3, #16]
 800df0a:	4313      	orrs	r3, r2
 800df0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800df14:	683b      	ldr	r3, [r7, #0]
 800df16:	695b      	ldr	r3, [r3, #20]
 800df18:	4313      	orrs	r3, r2
 800df1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800df22:	683b      	ldr	r3, [r7, #0]
 800df24:	69db      	ldr	r3, [r3, #28]
 800df26:	4313      	orrs	r3, r2
 800df28:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	68fa      	ldr	r2, [r7, #12]
 800df30:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	2200      	movs	r2, #0
 800df36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800df3a:	2300      	movs	r3, #0
}
 800df3c:	4618      	mov	r0, r3
 800df3e:	3714      	adds	r7, #20
 800df40:	46bd      	mov	sp, r7
 800df42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df46:	4770      	bx	lr

0800df48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800df48:	b480      	push	{r7}
 800df4a:	b083      	sub	sp, #12
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800df50:	bf00      	nop
 800df52:	370c      	adds	r7, #12
 800df54:	46bd      	mov	sp, r7
 800df56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5a:	4770      	bx	lr

0800df5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800df5c:	b480      	push	{r7}
 800df5e:	b083      	sub	sp, #12
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800df64:	bf00      	nop
 800df66:	370c      	adds	r7, #12
 800df68:	46bd      	mov	sp, r7
 800df6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6e:	4770      	bx	lr

0800df70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800df70:	b580      	push	{r7, lr}
 800df72:	b082      	sub	sp, #8
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d101      	bne.n	800df82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800df7e:	2301      	movs	r3, #1
 800df80:	e03f      	b.n	800e002 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800df88:	b2db      	uxtb	r3, r3
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d106      	bne.n	800df9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	2200      	movs	r2, #0
 800df92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800df96:	6878      	ldr	r0, [r7, #4]
 800df98:	f7f8 fbb2 	bl	8006700 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	2224      	movs	r2, #36	; 0x24
 800dfa0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	68da      	ldr	r2, [r3, #12]
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800dfb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800dfb4:	6878      	ldr	r0, [r7, #4]
 800dfb6:	f000 f829 	bl	800e00c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	691a      	ldr	r2, [r3, #16]
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800dfc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	695a      	ldr	r2, [r3, #20]
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800dfd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	68da      	ldr	r2, [r3, #12]
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800dfe8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	2200      	movs	r2, #0
 800dfee:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	2220      	movs	r2, #32
 800dff4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	2220      	movs	r2, #32
 800dffc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800e000:	2300      	movs	r3, #0
}
 800e002:	4618      	mov	r0, r3
 800e004:	3708      	adds	r7, #8
 800e006:	46bd      	mov	sp, r7
 800e008:	bd80      	pop	{r7, pc}
	...

0800e00c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e010:	b085      	sub	sp, #20
 800e012:	af00      	add	r7, sp, #0
 800e014:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	691b      	ldr	r3, [r3, #16]
 800e01c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	68da      	ldr	r2, [r3, #12]
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	430a      	orrs	r2, r1
 800e02a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	689a      	ldr	r2, [r3, #8]
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	691b      	ldr	r3, [r3, #16]
 800e034:	431a      	orrs	r2, r3
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	695b      	ldr	r3, [r3, #20]
 800e03a:	431a      	orrs	r2, r3
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	69db      	ldr	r3, [r3, #28]
 800e040:	4313      	orrs	r3, r2
 800e042:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	68db      	ldr	r3, [r3, #12]
 800e04a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800e04e:	f023 030c 	bic.w	r3, r3, #12
 800e052:	687a      	ldr	r2, [r7, #4]
 800e054:	6812      	ldr	r2, [r2, #0]
 800e056:	68f9      	ldr	r1, [r7, #12]
 800e058:	430b      	orrs	r3, r1
 800e05a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	695b      	ldr	r3, [r3, #20]
 800e062:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	699a      	ldr	r2, [r3, #24]
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	430a      	orrs	r2, r1
 800e070:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	69db      	ldr	r3, [r3, #28]
 800e076:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e07a:	f040 818b 	bne.w	800e394 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	4ac1      	ldr	r2, [pc, #772]	; (800e388 <UART_SetConfig+0x37c>)
 800e084:	4293      	cmp	r3, r2
 800e086:	d005      	beq.n	800e094 <UART_SetConfig+0x88>
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	4abf      	ldr	r2, [pc, #764]	; (800e38c <UART_SetConfig+0x380>)
 800e08e:	4293      	cmp	r3, r2
 800e090:	f040 80bd 	bne.w	800e20e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800e094:	f7fc fbcc 	bl	800a830 <HAL_RCC_GetPCLK2Freq>
 800e098:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e09a:	68bb      	ldr	r3, [r7, #8]
 800e09c:	461d      	mov	r5, r3
 800e09e:	f04f 0600 	mov.w	r6, #0
 800e0a2:	46a8      	mov	r8, r5
 800e0a4:	46b1      	mov	r9, r6
 800e0a6:	eb18 0308 	adds.w	r3, r8, r8
 800e0aa:	eb49 0409 	adc.w	r4, r9, r9
 800e0ae:	4698      	mov	r8, r3
 800e0b0:	46a1      	mov	r9, r4
 800e0b2:	eb18 0805 	adds.w	r8, r8, r5
 800e0b6:	eb49 0906 	adc.w	r9, r9, r6
 800e0ba:	f04f 0100 	mov.w	r1, #0
 800e0be:	f04f 0200 	mov.w	r2, #0
 800e0c2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800e0c6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800e0ca:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800e0ce:	4688      	mov	r8, r1
 800e0d0:	4691      	mov	r9, r2
 800e0d2:	eb18 0005 	adds.w	r0, r8, r5
 800e0d6:	eb49 0106 	adc.w	r1, r9, r6
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	685b      	ldr	r3, [r3, #4]
 800e0de:	461d      	mov	r5, r3
 800e0e0:	f04f 0600 	mov.w	r6, #0
 800e0e4:	196b      	adds	r3, r5, r5
 800e0e6:	eb46 0406 	adc.w	r4, r6, r6
 800e0ea:	461a      	mov	r2, r3
 800e0ec:	4623      	mov	r3, r4
 800e0ee:	f7f2 fde3 	bl	8000cb8 <__aeabi_uldivmod>
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	460c      	mov	r4, r1
 800e0f6:	461a      	mov	r2, r3
 800e0f8:	4ba5      	ldr	r3, [pc, #660]	; (800e390 <UART_SetConfig+0x384>)
 800e0fa:	fba3 2302 	umull	r2, r3, r3, r2
 800e0fe:	095b      	lsrs	r3, r3, #5
 800e100:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800e104:	68bb      	ldr	r3, [r7, #8]
 800e106:	461d      	mov	r5, r3
 800e108:	f04f 0600 	mov.w	r6, #0
 800e10c:	46a9      	mov	r9, r5
 800e10e:	46b2      	mov	sl, r6
 800e110:	eb19 0309 	adds.w	r3, r9, r9
 800e114:	eb4a 040a 	adc.w	r4, sl, sl
 800e118:	4699      	mov	r9, r3
 800e11a:	46a2      	mov	sl, r4
 800e11c:	eb19 0905 	adds.w	r9, r9, r5
 800e120:	eb4a 0a06 	adc.w	sl, sl, r6
 800e124:	f04f 0100 	mov.w	r1, #0
 800e128:	f04f 0200 	mov.w	r2, #0
 800e12c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e130:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e134:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e138:	4689      	mov	r9, r1
 800e13a:	4692      	mov	sl, r2
 800e13c:	eb19 0005 	adds.w	r0, r9, r5
 800e140:	eb4a 0106 	adc.w	r1, sl, r6
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	685b      	ldr	r3, [r3, #4]
 800e148:	461d      	mov	r5, r3
 800e14a:	f04f 0600 	mov.w	r6, #0
 800e14e:	196b      	adds	r3, r5, r5
 800e150:	eb46 0406 	adc.w	r4, r6, r6
 800e154:	461a      	mov	r2, r3
 800e156:	4623      	mov	r3, r4
 800e158:	f7f2 fdae 	bl	8000cb8 <__aeabi_uldivmod>
 800e15c:	4603      	mov	r3, r0
 800e15e:	460c      	mov	r4, r1
 800e160:	461a      	mov	r2, r3
 800e162:	4b8b      	ldr	r3, [pc, #556]	; (800e390 <UART_SetConfig+0x384>)
 800e164:	fba3 1302 	umull	r1, r3, r3, r2
 800e168:	095b      	lsrs	r3, r3, #5
 800e16a:	2164      	movs	r1, #100	; 0x64
 800e16c:	fb01 f303 	mul.w	r3, r1, r3
 800e170:	1ad3      	subs	r3, r2, r3
 800e172:	00db      	lsls	r3, r3, #3
 800e174:	3332      	adds	r3, #50	; 0x32
 800e176:	4a86      	ldr	r2, [pc, #536]	; (800e390 <UART_SetConfig+0x384>)
 800e178:	fba2 2303 	umull	r2, r3, r2, r3
 800e17c:	095b      	lsrs	r3, r3, #5
 800e17e:	005b      	lsls	r3, r3, #1
 800e180:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e184:	4498      	add	r8, r3
 800e186:	68bb      	ldr	r3, [r7, #8]
 800e188:	461d      	mov	r5, r3
 800e18a:	f04f 0600 	mov.w	r6, #0
 800e18e:	46a9      	mov	r9, r5
 800e190:	46b2      	mov	sl, r6
 800e192:	eb19 0309 	adds.w	r3, r9, r9
 800e196:	eb4a 040a 	adc.w	r4, sl, sl
 800e19a:	4699      	mov	r9, r3
 800e19c:	46a2      	mov	sl, r4
 800e19e:	eb19 0905 	adds.w	r9, r9, r5
 800e1a2:	eb4a 0a06 	adc.w	sl, sl, r6
 800e1a6:	f04f 0100 	mov.w	r1, #0
 800e1aa:	f04f 0200 	mov.w	r2, #0
 800e1ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e1b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e1b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e1ba:	4689      	mov	r9, r1
 800e1bc:	4692      	mov	sl, r2
 800e1be:	eb19 0005 	adds.w	r0, r9, r5
 800e1c2:	eb4a 0106 	adc.w	r1, sl, r6
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	685b      	ldr	r3, [r3, #4]
 800e1ca:	461d      	mov	r5, r3
 800e1cc:	f04f 0600 	mov.w	r6, #0
 800e1d0:	196b      	adds	r3, r5, r5
 800e1d2:	eb46 0406 	adc.w	r4, r6, r6
 800e1d6:	461a      	mov	r2, r3
 800e1d8:	4623      	mov	r3, r4
 800e1da:	f7f2 fd6d 	bl	8000cb8 <__aeabi_uldivmod>
 800e1de:	4603      	mov	r3, r0
 800e1e0:	460c      	mov	r4, r1
 800e1e2:	461a      	mov	r2, r3
 800e1e4:	4b6a      	ldr	r3, [pc, #424]	; (800e390 <UART_SetConfig+0x384>)
 800e1e6:	fba3 1302 	umull	r1, r3, r3, r2
 800e1ea:	095b      	lsrs	r3, r3, #5
 800e1ec:	2164      	movs	r1, #100	; 0x64
 800e1ee:	fb01 f303 	mul.w	r3, r1, r3
 800e1f2:	1ad3      	subs	r3, r2, r3
 800e1f4:	00db      	lsls	r3, r3, #3
 800e1f6:	3332      	adds	r3, #50	; 0x32
 800e1f8:	4a65      	ldr	r2, [pc, #404]	; (800e390 <UART_SetConfig+0x384>)
 800e1fa:	fba2 2303 	umull	r2, r3, r2, r3
 800e1fe:	095b      	lsrs	r3, r3, #5
 800e200:	f003 0207 	and.w	r2, r3, #7
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	4442      	add	r2, r8
 800e20a:	609a      	str	r2, [r3, #8]
 800e20c:	e26f      	b.n	800e6ee <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800e20e:	f7fc fafb 	bl	800a808 <HAL_RCC_GetPCLK1Freq>
 800e212:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e214:	68bb      	ldr	r3, [r7, #8]
 800e216:	461d      	mov	r5, r3
 800e218:	f04f 0600 	mov.w	r6, #0
 800e21c:	46a8      	mov	r8, r5
 800e21e:	46b1      	mov	r9, r6
 800e220:	eb18 0308 	adds.w	r3, r8, r8
 800e224:	eb49 0409 	adc.w	r4, r9, r9
 800e228:	4698      	mov	r8, r3
 800e22a:	46a1      	mov	r9, r4
 800e22c:	eb18 0805 	adds.w	r8, r8, r5
 800e230:	eb49 0906 	adc.w	r9, r9, r6
 800e234:	f04f 0100 	mov.w	r1, #0
 800e238:	f04f 0200 	mov.w	r2, #0
 800e23c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800e240:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800e244:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800e248:	4688      	mov	r8, r1
 800e24a:	4691      	mov	r9, r2
 800e24c:	eb18 0005 	adds.w	r0, r8, r5
 800e250:	eb49 0106 	adc.w	r1, r9, r6
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	685b      	ldr	r3, [r3, #4]
 800e258:	461d      	mov	r5, r3
 800e25a:	f04f 0600 	mov.w	r6, #0
 800e25e:	196b      	adds	r3, r5, r5
 800e260:	eb46 0406 	adc.w	r4, r6, r6
 800e264:	461a      	mov	r2, r3
 800e266:	4623      	mov	r3, r4
 800e268:	f7f2 fd26 	bl	8000cb8 <__aeabi_uldivmod>
 800e26c:	4603      	mov	r3, r0
 800e26e:	460c      	mov	r4, r1
 800e270:	461a      	mov	r2, r3
 800e272:	4b47      	ldr	r3, [pc, #284]	; (800e390 <UART_SetConfig+0x384>)
 800e274:	fba3 2302 	umull	r2, r3, r3, r2
 800e278:	095b      	lsrs	r3, r3, #5
 800e27a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800e27e:	68bb      	ldr	r3, [r7, #8]
 800e280:	461d      	mov	r5, r3
 800e282:	f04f 0600 	mov.w	r6, #0
 800e286:	46a9      	mov	r9, r5
 800e288:	46b2      	mov	sl, r6
 800e28a:	eb19 0309 	adds.w	r3, r9, r9
 800e28e:	eb4a 040a 	adc.w	r4, sl, sl
 800e292:	4699      	mov	r9, r3
 800e294:	46a2      	mov	sl, r4
 800e296:	eb19 0905 	adds.w	r9, r9, r5
 800e29a:	eb4a 0a06 	adc.w	sl, sl, r6
 800e29e:	f04f 0100 	mov.w	r1, #0
 800e2a2:	f04f 0200 	mov.w	r2, #0
 800e2a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e2aa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e2ae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e2b2:	4689      	mov	r9, r1
 800e2b4:	4692      	mov	sl, r2
 800e2b6:	eb19 0005 	adds.w	r0, r9, r5
 800e2ba:	eb4a 0106 	adc.w	r1, sl, r6
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	685b      	ldr	r3, [r3, #4]
 800e2c2:	461d      	mov	r5, r3
 800e2c4:	f04f 0600 	mov.w	r6, #0
 800e2c8:	196b      	adds	r3, r5, r5
 800e2ca:	eb46 0406 	adc.w	r4, r6, r6
 800e2ce:	461a      	mov	r2, r3
 800e2d0:	4623      	mov	r3, r4
 800e2d2:	f7f2 fcf1 	bl	8000cb8 <__aeabi_uldivmod>
 800e2d6:	4603      	mov	r3, r0
 800e2d8:	460c      	mov	r4, r1
 800e2da:	461a      	mov	r2, r3
 800e2dc:	4b2c      	ldr	r3, [pc, #176]	; (800e390 <UART_SetConfig+0x384>)
 800e2de:	fba3 1302 	umull	r1, r3, r3, r2
 800e2e2:	095b      	lsrs	r3, r3, #5
 800e2e4:	2164      	movs	r1, #100	; 0x64
 800e2e6:	fb01 f303 	mul.w	r3, r1, r3
 800e2ea:	1ad3      	subs	r3, r2, r3
 800e2ec:	00db      	lsls	r3, r3, #3
 800e2ee:	3332      	adds	r3, #50	; 0x32
 800e2f0:	4a27      	ldr	r2, [pc, #156]	; (800e390 <UART_SetConfig+0x384>)
 800e2f2:	fba2 2303 	umull	r2, r3, r2, r3
 800e2f6:	095b      	lsrs	r3, r3, #5
 800e2f8:	005b      	lsls	r3, r3, #1
 800e2fa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e2fe:	4498      	add	r8, r3
 800e300:	68bb      	ldr	r3, [r7, #8]
 800e302:	461d      	mov	r5, r3
 800e304:	f04f 0600 	mov.w	r6, #0
 800e308:	46a9      	mov	r9, r5
 800e30a:	46b2      	mov	sl, r6
 800e30c:	eb19 0309 	adds.w	r3, r9, r9
 800e310:	eb4a 040a 	adc.w	r4, sl, sl
 800e314:	4699      	mov	r9, r3
 800e316:	46a2      	mov	sl, r4
 800e318:	eb19 0905 	adds.w	r9, r9, r5
 800e31c:	eb4a 0a06 	adc.w	sl, sl, r6
 800e320:	f04f 0100 	mov.w	r1, #0
 800e324:	f04f 0200 	mov.w	r2, #0
 800e328:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e32c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e330:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e334:	4689      	mov	r9, r1
 800e336:	4692      	mov	sl, r2
 800e338:	eb19 0005 	adds.w	r0, r9, r5
 800e33c:	eb4a 0106 	adc.w	r1, sl, r6
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	685b      	ldr	r3, [r3, #4]
 800e344:	461d      	mov	r5, r3
 800e346:	f04f 0600 	mov.w	r6, #0
 800e34a:	196b      	adds	r3, r5, r5
 800e34c:	eb46 0406 	adc.w	r4, r6, r6
 800e350:	461a      	mov	r2, r3
 800e352:	4623      	mov	r3, r4
 800e354:	f7f2 fcb0 	bl	8000cb8 <__aeabi_uldivmod>
 800e358:	4603      	mov	r3, r0
 800e35a:	460c      	mov	r4, r1
 800e35c:	461a      	mov	r2, r3
 800e35e:	4b0c      	ldr	r3, [pc, #48]	; (800e390 <UART_SetConfig+0x384>)
 800e360:	fba3 1302 	umull	r1, r3, r3, r2
 800e364:	095b      	lsrs	r3, r3, #5
 800e366:	2164      	movs	r1, #100	; 0x64
 800e368:	fb01 f303 	mul.w	r3, r1, r3
 800e36c:	1ad3      	subs	r3, r2, r3
 800e36e:	00db      	lsls	r3, r3, #3
 800e370:	3332      	adds	r3, #50	; 0x32
 800e372:	4a07      	ldr	r2, [pc, #28]	; (800e390 <UART_SetConfig+0x384>)
 800e374:	fba2 2303 	umull	r2, r3, r2, r3
 800e378:	095b      	lsrs	r3, r3, #5
 800e37a:	f003 0207 	and.w	r2, r3, #7
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	4442      	add	r2, r8
 800e384:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800e386:	e1b2      	b.n	800e6ee <UART_SetConfig+0x6e2>
 800e388:	40011000 	.word	0x40011000
 800e38c:	40011400 	.word	0x40011400
 800e390:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	4ad7      	ldr	r2, [pc, #860]	; (800e6f8 <UART_SetConfig+0x6ec>)
 800e39a:	4293      	cmp	r3, r2
 800e39c:	d005      	beq.n	800e3aa <UART_SetConfig+0x39e>
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	4ad6      	ldr	r2, [pc, #856]	; (800e6fc <UART_SetConfig+0x6f0>)
 800e3a4:	4293      	cmp	r3, r2
 800e3a6:	f040 80d1 	bne.w	800e54c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800e3aa:	f7fc fa41 	bl	800a830 <HAL_RCC_GetPCLK2Freq>
 800e3ae:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e3b0:	68bb      	ldr	r3, [r7, #8]
 800e3b2:	469a      	mov	sl, r3
 800e3b4:	f04f 0b00 	mov.w	fp, #0
 800e3b8:	46d0      	mov	r8, sl
 800e3ba:	46d9      	mov	r9, fp
 800e3bc:	eb18 0308 	adds.w	r3, r8, r8
 800e3c0:	eb49 0409 	adc.w	r4, r9, r9
 800e3c4:	4698      	mov	r8, r3
 800e3c6:	46a1      	mov	r9, r4
 800e3c8:	eb18 080a 	adds.w	r8, r8, sl
 800e3cc:	eb49 090b 	adc.w	r9, r9, fp
 800e3d0:	f04f 0100 	mov.w	r1, #0
 800e3d4:	f04f 0200 	mov.w	r2, #0
 800e3d8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800e3dc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800e3e0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800e3e4:	4688      	mov	r8, r1
 800e3e6:	4691      	mov	r9, r2
 800e3e8:	eb1a 0508 	adds.w	r5, sl, r8
 800e3ec:	eb4b 0609 	adc.w	r6, fp, r9
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	685b      	ldr	r3, [r3, #4]
 800e3f4:	4619      	mov	r1, r3
 800e3f6:	f04f 0200 	mov.w	r2, #0
 800e3fa:	f04f 0300 	mov.w	r3, #0
 800e3fe:	f04f 0400 	mov.w	r4, #0
 800e402:	0094      	lsls	r4, r2, #2
 800e404:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e408:	008b      	lsls	r3, r1, #2
 800e40a:	461a      	mov	r2, r3
 800e40c:	4623      	mov	r3, r4
 800e40e:	4628      	mov	r0, r5
 800e410:	4631      	mov	r1, r6
 800e412:	f7f2 fc51 	bl	8000cb8 <__aeabi_uldivmod>
 800e416:	4603      	mov	r3, r0
 800e418:	460c      	mov	r4, r1
 800e41a:	461a      	mov	r2, r3
 800e41c:	4bb8      	ldr	r3, [pc, #736]	; (800e700 <UART_SetConfig+0x6f4>)
 800e41e:	fba3 2302 	umull	r2, r3, r3, r2
 800e422:	095b      	lsrs	r3, r3, #5
 800e424:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800e428:	68bb      	ldr	r3, [r7, #8]
 800e42a:	469b      	mov	fp, r3
 800e42c:	f04f 0c00 	mov.w	ip, #0
 800e430:	46d9      	mov	r9, fp
 800e432:	46e2      	mov	sl, ip
 800e434:	eb19 0309 	adds.w	r3, r9, r9
 800e438:	eb4a 040a 	adc.w	r4, sl, sl
 800e43c:	4699      	mov	r9, r3
 800e43e:	46a2      	mov	sl, r4
 800e440:	eb19 090b 	adds.w	r9, r9, fp
 800e444:	eb4a 0a0c 	adc.w	sl, sl, ip
 800e448:	f04f 0100 	mov.w	r1, #0
 800e44c:	f04f 0200 	mov.w	r2, #0
 800e450:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e454:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e458:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e45c:	4689      	mov	r9, r1
 800e45e:	4692      	mov	sl, r2
 800e460:	eb1b 0509 	adds.w	r5, fp, r9
 800e464:	eb4c 060a 	adc.w	r6, ip, sl
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	685b      	ldr	r3, [r3, #4]
 800e46c:	4619      	mov	r1, r3
 800e46e:	f04f 0200 	mov.w	r2, #0
 800e472:	f04f 0300 	mov.w	r3, #0
 800e476:	f04f 0400 	mov.w	r4, #0
 800e47a:	0094      	lsls	r4, r2, #2
 800e47c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e480:	008b      	lsls	r3, r1, #2
 800e482:	461a      	mov	r2, r3
 800e484:	4623      	mov	r3, r4
 800e486:	4628      	mov	r0, r5
 800e488:	4631      	mov	r1, r6
 800e48a:	f7f2 fc15 	bl	8000cb8 <__aeabi_uldivmod>
 800e48e:	4603      	mov	r3, r0
 800e490:	460c      	mov	r4, r1
 800e492:	461a      	mov	r2, r3
 800e494:	4b9a      	ldr	r3, [pc, #616]	; (800e700 <UART_SetConfig+0x6f4>)
 800e496:	fba3 1302 	umull	r1, r3, r3, r2
 800e49a:	095b      	lsrs	r3, r3, #5
 800e49c:	2164      	movs	r1, #100	; 0x64
 800e49e:	fb01 f303 	mul.w	r3, r1, r3
 800e4a2:	1ad3      	subs	r3, r2, r3
 800e4a4:	011b      	lsls	r3, r3, #4
 800e4a6:	3332      	adds	r3, #50	; 0x32
 800e4a8:	4a95      	ldr	r2, [pc, #596]	; (800e700 <UART_SetConfig+0x6f4>)
 800e4aa:	fba2 2303 	umull	r2, r3, r2, r3
 800e4ae:	095b      	lsrs	r3, r3, #5
 800e4b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e4b4:	4498      	add	r8, r3
 800e4b6:	68bb      	ldr	r3, [r7, #8]
 800e4b8:	469b      	mov	fp, r3
 800e4ba:	f04f 0c00 	mov.w	ip, #0
 800e4be:	46d9      	mov	r9, fp
 800e4c0:	46e2      	mov	sl, ip
 800e4c2:	eb19 0309 	adds.w	r3, r9, r9
 800e4c6:	eb4a 040a 	adc.w	r4, sl, sl
 800e4ca:	4699      	mov	r9, r3
 800e4cc:	46a2      	mov	sl, r4
 800e4ce:	eb19 090b 	adds.w	r9, r9, fp
 800e4d2:	eb4a 0a0c 	adc.w	sl, sl, ip
 800e4d6:	f04f 0100 	mov.w	r1, #0
 800e4da:	f04f 0200 	mov.w	r2, #0
 800e4de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e4e2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e4e6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e4ea:	4689      	mov	r9, r1
 800e4ec:	4692      	mov	sl, r2
 800e4ee:	eb1b 0509 	adds.w	r5, fp, r9
 800e4f2:	eb4c 060a 	adc.w	r6, ip, sl
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	685b      	ldr	r3, [r3, #4]
 800e4fa:	4619      	mov	r1, r3
 800e4fc:	f04f 0200 	mov.w	r2, #0
 800e500:	f04f 0300 	mov.w	r3, #0
 800e504:	f04f 0400 	mov.w	r4, #0
 800e508:	0094      	lsls	r4, r2, #2
 800e50a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e50e:	008b      	lsls	r3, r1, #2
 800e510:	461a      	mov	r2, r3
 800e512:	4623      	mov	r3, r4
 800e514:	4628      	mov	r0, r5
 800e516:	4631      	mov	r1, r6
 800e518:	f7f2 fbce 	bl	8000cb8 <__aeabi_uldivmod>
 800e51c:	4603      	mov	r3, r0
 800e51e:	460c      	mov	r4, r1
 800e520:	461a      	mov	r2, r3
 800e522:	4b77      	ldr	r3, [pc, #476]	; (800e700 <UART_SetConfig+0x6f4>)
 800e524:	fba3 1302 	umull	r1, r3, r3, r2
 800e528:	095b      	lsrs	r3, r3, #5
 800e52a:	2164      	movs	r1, #100	; 0x64
 800e52c:	fb01 f303 	mul.w	r3, r1, r3
 800e530:	1ad3      	subs	r3, r2, r3
 800e532:	011b      	lsls	r3, r3, #4
 800e534:	3332      	adds	r3, #50	; 0x32
 800e536:	4a72      	ldr	r2, [pc, #456]	; (800e700 <UART_SetConfig+0x6f4>)
 800e538:	fba2 2303 	umull	r2, r3, r2, r3
 800e53c:	095b      	lsrs	r3, r3, #5
 800e53e:	f003 020f 	and.w	r2, r3, #15
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	4442      	add	r2, r8
 800e548:	609a      	str	r2, [r3, #8]
 800e54a:	e0d0      	b.n	800e6ee <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800e54c:	f7fc f95c 	bl	800a808 <HAL_RCC_GetPCLK1Freq>
 800e550:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e552:	68bb      	ldr	r3, [r7, #8]
 800e554:	469a      	mov	sl, r3
 800e556:	f04f 0b00 	mov.w	fp, #0
 800e55a:	46d0      	mov	r8, sl
 800e55c:	46d9      	mov	r9, fp
 800e55e:	eb18 0308 	adds.w	r3, r8, r8
 800e562:	eb49 0409 	adc.w	r4, r9, r9
 800e566:	4698      	mov	r8, r3
 800e568:	46a1      	mov	r9, r4
 800e56a:	eb18 080a 	adds.w	r8, r8, sl
 800e56e:	eb49 090b 	adc.w	r9, r9, fp
 800e572:	f04f 0100 	mov.w	r1, #0
 800e576:	f04f 0200 	mov.w	r2, #0
 800e57a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800e57e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800e582:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800e586:	4688      	mov	r8, r1
 800e588:	4691      	mov	r9, r2
 800e58a:	eb1a 0508 	adds.w	r5, sl, r8
 800e58e:	eb4b 0609 	adc.w	r6, fp, r9
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	685b      	ldr	r3, [r3, #4]
 800e596:	4619      	mov	r1, r3
 800e598:	f04f 0200 	mov.w	r2, #0
 800e59c:	f04f 0300 	mov.w	r3, #0
 800e5a0:	f04f 0400 	mov.w	r4, #0
 800e5a4:	0094      	lsls	r4, r2, #2
 800e5a6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e5aa:	008b      	lsls	r3, r1, #2
 800e5ac:	461a      	mov	r2, r3
 800e5ae:	4623      	mov	r3, r4
 800e5b0:	4628      	mov	r0, r5
 800e5b2:	4631      	mov	r1, r6
 800e5b4:	f7f2 fb80 	bl	8000cb8 <__aeabi_uldivmod>
 800e5b8:	4603      	mov	r3, r0
 800e5ba:	460c      	mov	r4, r1
 800e5bc:	461a      	mov	r2, r3
 800e5be:	4b50      	ldr	r3, [pc, #320]	; (800e700 <UART_SetConfig+0x6f4>)
 800e5c0:	fba3 2302 	umull	r2, r3, r3, r2
 800e5c4:	095b      	lsrs	r3, r3, #5
 800e5c6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800e5ca:	68bb      	ldr	r3, [r7, #8]
 800e5cc:	469b      	mov	fp, r3
 800e5ce:	f04f 0c00 	mov.w	ip, #0
 800e5d2:	46d9      	mov	r9, fp
 800e5d4:	46e2      	mov	sl, ip
 800e5d6:	eb19 0309 	adds.w	r3, r9, r9
 800e5da:	eb4a 040a 	adc.w	r4, sl, sl
 800e5de:	4699      	mov	r9, r3
 800e5e0:	46a2      	mov	sl, r4
 800e5e2:	eb19 090b 	adds.w	r9, r9, fp
 800e5e6:	eb4a 0a0c 	adc.w	sl, sl, ip
 800e5ea:	f04f 0100 	mov.w	r1, #0
 800e5ee:	f04f 0200 	mov.w	r2, #0
 800e5f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e5f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e5fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e5fe:	4689      	mov	r9, r1
 800e600:	4692      	mov	sl, r2
 800e602:	eb1b 0509 	adds.w	r5, fp, r9
 800e606:	eb4c 060a 	adc.w	r6, ip, sl
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	685b      	ldr	r3, [r3, #4]
 800e60e:	4619      	mov	r1, r3
 800e610:	f04f 0200 	mov.w	r2, #0
 800e614:	f04f 0300 	mov.w	r3, #0
 800e618:	f04f 0400 	mov.w	r4, #0
 800e61c:	0094      	lsls	r4, r2, #2
 800e61e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e622:	008b      	lsls	r3, r1, #2
 800e624:	461a      	mov	r2, r3
 800e626:	4623      	mov	r3, r4
 800e628:	4628      	mov	r0, r5
 800e62a:	4631      	mov	r1, r6
 800e62c:	f7f2 fb44 	bl	8000cb8 <__aeabi_uldivmod>
 800e630:	4603      	mov	r3, r0
 800e632:	460c      	mov	r4, r1
 800e634:	461a      	mov	r2, r3
 800e636:	4b32      	ldr	r3, [pc, #200]	; (800e700 <UART_SetConfig+0x6f4>)
 800e638:	fba3 1302 	umull	r1, r3, r3, r2
 800e63c:	095b      	lsrs	r3, r3, #5
 800e63e:	2164      	movs	r1, #100	; 0x64
 800e640:	fb01 f303 	mul.w	r3, r1, r3
 800e644:	1ad3      	subs	r3, r2, r3
 800e646:	011b      	lsls	r3, r3, #4
 800e648:	3332      	adds	r3, #50	; 0x32
 800e64a:	4a2d      	ldr	r2, [pc, #180]	; (800e700 <UART_SetConfig+0x6f4>)
 800e64c:	fba2 2303 	umull	r2, r3, r2, r3
 800e650:	095b      	lsrs	r3, r3, #5
 800e652:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e656:	4498      	add	r8, r3
 800e658:	68bb      	ldr	r3, [r7, #8]
 800e65a:	469b      	mov	fp, r3
 800e65c:	f04f 0c00 	mov.w	ip, #0
 800e660:	46d9      	mov	r9, fp
 800e662:	46e2      	mov	sl, ip
 800e664:	eb19 0309 	adds.w	r3, r9, r9
 800e668:	eb4a 040a 	adc.w	r4, sl, sl
 800e66c:	4699      	mov	r9, r3
 800e66e:	46a2      	mov	sl, r4
 800e670:	eb19 090b 	adds.w	r9, r9, fp
 800e674:	eb4a 0a0c 	adc.w	sl, sl, ip
 800e678:	f04f 0100 	mov.w	r1, #0
 800e67c:	f04f 0200 	mov.w	r2, #0
 800e680:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e684:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e688:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e68c:	4689      	mov	r9, r1
 800e68e:	4692      	mov	sl, r2
 800e690:	eb1b 0509 	adds.w	r5, fp, r9
 800e694:	eb4c 060a 	adc.w	r6, ip, sl
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	685b      	ldr	r3, [r3, #4]
 800e69c:	4619      	mov	r1, r3
 800e69e:	f04f 0200 	mov.w	r2, #0
 800e6a2:	f04f 0300 	mov.w	r3, #0
 800e6a6:	f04f 0400 	mov.w	r4, #0
 800e6aa:	0094      	lsls	r4, r2, #2
 800e6ac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e6b0:	008b      	lsls	r3, r1, #2
 800e6b2:	461a      	mov	r2, r3
 800e6b4:	4623      	mov	r3, r4
 800e6b6:	4628      	mov	r0, r5
 800e6b8:	4631      	mov	r1, r6
 800e6ba:	f7f2 fafd 	bl	8000cb8 <__aeabi_uldivmod>
 800e6be:	4603      	mov	r3, r0
 800e6c0:	460c      	mov	r4, r1
 800e6c2:	461a      	mov	r2, r3
 800e6c4:	4b0e      	ldr	r3, [pc, #56]	; (800e700 <UART_SetConfig+0x6f4>)
 800e6c6:	fba3 1302 	umull	r1, r3, r3, r2
 800e6ca:	095b      	lsrs	r3, r3, #5
 800e6cc:	2164      	movs	r1, #100	; 0x64
 800e6ce:	fb01 f303 	mul.w	r3, r1, r3
 800e6d2:	1ad3      	subs	r3, r2, r3
 800e6d4:	011b      	lsls	r3, r3, #4
 800e6d6:	3332      	adds	r3, #50	; 0x32
 800e6d8:	4a09      	ldr	r2, [pc, #36]	; (800e700 <UART_SetConfig+0x6f4>)
 800e6da:	fba2 2303 	umull	r2, r3, r2, r3
 800e6de:	095b      	lsrs	r3, r3, #5
 800e6e0:	f003 020f 	and.w	r2, r3, #15
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	4442      	add	r2, r8
 800e6ea:	609a      	str	r2, [r3, #8]
}
 800e6ec:	e7ff      	b.n	800e6ee <UART_SetConfig+0x6e2>
 800e6ee:	bf00      	nop
 800e6f0:	3714      	adds	r7, #20
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6f8:	40011000 	.word	0x40011000
 800e6fc:	40011400 	.word	0x40011400
 800e700:	51eb851f 	.word	0x51eb851f

0800e704 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800e704:	b084      	sub	sp, #16
 800e706:	b480      	push	{r7}
 800e708:	b085      	sub	sp, #20
 800e70a:	af00      	add	r7, sp, #0
 800e70c:	6078      	str	r0, [r7, #4]
 800e70e:	f107 001c 	add.w	r0, r7, #28
 800e712:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800e716:	2300      	movs	r3, #0
 800e718:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800e71a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800e71c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800e71e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800e720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800e722:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800e724:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800e726:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800e728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800e72a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800e72c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800e72e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800e730:	68fa      	ldr	r2, [r7, #12]
 800e732:	4313      	orrs	r3, r2
 800e734:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	685b      	ldr	r3, [r3, #4]
 800e73a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800e73e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e742:	68fa      	ldr	r2, [r7, #12]
 800e744:	431a      	orrs	r2, r3
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e74a:	2300      	movs	r3, #0
}
 800e74c:	4618      	mov	r0, r3
 800e74e:	3714      	adds	r7, #20
 800e750:	46bd      	mov	sp, r7
 800e752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e756:	b004      	add	sp, #16
 800e758:	4770      	bx	lr

0800e75a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800e75a:	b480      	push	{r7}
 800e75c:	b083      	sub	sp, #12
 800e75e:	af00      	add	r7, sp, #0
 800e760:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800e768:	4618      	mov	r0, r3
 800e76a:	370c      	adds	r7, #12
 800e76c:	46bd      	mov	sp, r7
 800e76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e772:	4770      	bx	lr

0800e774 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800e774:	b480      	push	{r7}
 800e776:	b083      	sub	sp, #12
 800e778:	af00      	add	r7, sp, #0
 800e77a:	6078      	str	r0, [r7, #4]
 800e77c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800e77e:	683b      	ldr	r3, [r7, #0]
 800e780:	681a      	ldr	r2, [r3, #0]
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e788:	2300      	movs	r3, #0
}
 800e78a:	4618      	mov	r0, r3
 800e78c:	370c      	adds	r7, #12
 800e78e:	46bd      	mov	sp, r7
 800e790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e794:	4770      	bx	lr

0800e796 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800e796:	b580      	push	{r7, lr}
 800e798:	b082      	sub	sp, #8
 800e79a:	af00      	add	r7, sp, #0
 800e79c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	2203      	movs	r2, #3
 800e7a2:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800e7a4:	2002      	movs	r0, #2
 800e7a6:	f7f9 fbdd 	bl	8007f64 <HAL_Delay>
  
  return HAL_OK;
 800e7aa:	2300      	movs	r3, #0
}
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	3708      	adds	r7, #8
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	bd80      	pop	{r7, pc}

0800e7b4 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800e7b4:	b480      	push	{r7}
 800e7b6:	b083      	sub	sp, #12
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	f003 0303 	and.w	r3, r3, #3
}
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	370c      	adds	r7, #12
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ce:	4770      	bx	lr

0800e7d0 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800e7d0:	b480      	push	{r7}
 800e7d2:	b085      	sub	sp, #20
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	6078      	str	r0, [r7, #4]
 800e7d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e7da:	2300      	movs	r3, #0
 800e7dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800e7de:	683b      	ldr	r3, [r7, #0]
 800e7e0:	681a      	ldr	r2, [r3, #0]
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e7e6:	683b      	ldr	r3, [r7, #0]
 800e7e8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800e7ea:	683b      	ldr	r3, [r7, #0]
 800e7ec:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e7ee:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800e7f0:	683b      	ldr	r3, [r7, #0]
 800e7f2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800e7f4:	431a      	orrs	r2, r3
                       Command->CPSM);
 800e7f6:	683b      	ldr	r3, [r7, #0]
 800e7f8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800e7fa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e7fc:	68fa      	ldr	r2, [r7, #12]
 800e7fe:	4313      	orrs	r3, r2
 800e800:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	68db      	ldr	r3, [r3, #12]
 800e806:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800e80a:	f023 030f 	bic.w	r3, r3, #15
 800e80e:	68fa      	ldr	r2, [r7, #12]
 800e810:	431a      	orrs	r2, r3
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800e816:	2300      	movs	r3, #0
}
 800e818:	4618      	mov	r0, r3
 800e81a:	3714      	adds	r7, #20
 800e81c:	46bd      	mov	sp, r7
 800e81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e822:	4770      	bx	lr

0800e824 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800e824:	b480      	push	{r7}
 800e826:	b083      	sub	sp, #12
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	691b      	ldr	r3, [r3, #16]
 800e830:	b2db      	uxtb	r3, r3
}
 800e832:	4618      	mov	r0, r3
 800e834:	370c      	adds	r7, #12
 800e836:	46bd      	mov	sp, r7
 800e838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e83c:	4770      	bx	lr

0800e83e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800e83e:	b480      	push	{r7}
 800e840:	b085      	sub	sp, #20
 800e842:	af00      	add	r7, sp, #0
 800e844:	6078      	str	r0, [r7, #4]
 800e846:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	3314      	adds	r3, #20
 800e84c:	461a      	mov	r2, r3
 800e84e:	683b      	ldr	r3, [r7, #0]
 800e850:	4413      	add	r3, r2
 800e852:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	681b      	ldr	r3, [r3, #0]
}  
 800e858:	4618      	mov	r0, r3
 800e85a:	3714      	adds	r7, #20
 800e85c:	46bd      	mov	sp, r7
 800e85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e862:	4770      	bx	lr

0800e864 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800e864:	b480      	push	{r7}
 800e866:	b085      	sub	sp, #20
 800e868:	af00      	add	r7, sp, #0
 800e86a:	6078      	str	r0, [r7, #4]
 800e86c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e86e:	2300      	movs	r3, #0
 800e870:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800e872:	683b      	ldr	r3, [r7, #0]
 800e874:	681a      	ldr	r2, [r3, #0]
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800e87a:	683b      	ldr	r3, [r7, #0]
 800e87c:	685a      	ldr	r2, [r3, #4]
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e882:	683b      	ldr	r3, [r7, #0]
 800e884:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800e886:	683b      	ldr	r3, [r7, #0]
 800e888:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e88a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800e88c:	683b      	ldr	r3, [r7, #0]
 800e88e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800e890:	431a      	orrs	r2, r3
                       Data->DPSM);
 800e892:	683b      	ldr	r3, [r7, #0]
 800e894:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800e896:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e898:	68fa      	ldr	r2, [r7, #12]
 800e89a:	4313      	orrs	r3, r2
 800e89c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8a2:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	431a      	orrs	r2, r3
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800e8ae:	2300      	movs	r3, #0

}
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	3714      	adds	r7, #20
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ba:	4770      	bx	lr

0800e8bc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b088      	sub	sp, #32
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
 800e8c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800e8c6:	683b      	ldr	r3, [r7, #0]
 800e8c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800e8ca:	2310      	movs	r3, #16
 800e8cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e8ce:	2340      	movs	r3, #64	; 0x40
 800e8d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e8d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e8da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e8dc:	f107 0308 	add.w	r3, r7, #8
 800e8e0:	4619      	mov	r1, r3
 800e8e2:	6878      	ldr	r0, [r7, #4]
 800e8e4:	f7ff ff74 	bl	800e7d0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800e8e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800e8ec:	2110      	movs	r1, #16
 800e8ee:	6878      	ldr	r0, [r7, #4]
 800e8f0:	f000 fa40 	bl	800ed74 <SDMMC_GetCmdResp1>
 800e8f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e8f6:	69fb      	ldr	r3, [r7, #28]
}
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	3720      	adds	r7, #32
 800e8fc:	46bd      	mov	sp, r7
 800e8fe:	bd80      	pop	{r7, pc}

0800e900 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800e900:	b580      	push	{r7, lr}
 800e902:	b088      	sub	sp, #32
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
 800e908:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e90a:	683b      	ldr	r3, [r7, #0]
 800e90c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800e90e:	2311      	movs	r3, #17
 800e910:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e912:	2340      	movs	r3, #64	; 0x40
 800e914:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e916:	2300      	movs	r3, #0
 800e918:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e91a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e91e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e920:	f107 0308 	add.w	r3, r7, #8
 800e924:	4619      	mov	r1, r3
 800e926:	6878      	ldr	r0, [r7, #4]
 800e928:	f7ff ff52 	bl	800e7d0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800e92c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e930:	2111      	movs	r1, #17
 800e932:	6878      	ldr	r0, [r7, #4]
 800e934:	f000 fa1e 	bl	800ed74 <SDMMC_GetCmdResp1>
 800e938:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e93a:	69fb      	ldr	r3, [r7, #28]
}
 800e93c:	4618      	mov	r0, r3
 800e93e:	3720      	adds	r7, #32
 800e940:	46bd      	mov	sp, r7
 800e942:	bd80      	pop	{r7, pc}

0800e944 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800e944:	b580      	push	{r7, lr}
 800e946:	b088      	sub	sp, #32
 800e948:	af00      	add	r7, sp, #0
 800e94a:	6078      	str	r0, [r7, #4]
 800e94c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e94e:	683b      	ldr	r3, [r7, #0]
 800e950:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800e952:	2312      	movs	r3, #18
 800e954:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e956:	2340      	movs	r3, #64	; 0x40
 800e958:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e95a:	2300      	movs	r3, #0
 800e95c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e95e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e962:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e964:	f107 0308 	add.w	r3, r7, #8
 800e968:	4619      	mov	r1, r3
 800e96a:	6878      	ldr	r0, [r7, #4]
 800e96c:	f7ff ff30 	bl	800e7d0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800e970:	f241 3288 	movw	r2, #5000	; 0x1388
 800e974:	2112      	movs	r1, #18
 800e976:	6878      	ldr	r0, [r7, #4]
 800e978:	f000 f9fc 	bl	800ed74 <SDMMC_GetCmdResp1>
 800e97c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e97e:	69fb      	ldr	r3, [r7, #28]
}
 800e980:	4618      	mov	r0, r3
 800e982:	3720      	adds	r7, #32
 800e984:	46bd      	mov	sp, r7
 800e986:	bd80      	pop	{r7, pc}

0800e988 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800e988:	b580      	push	{r7, lr}
 800e98a:	b088      	sub	sp, #32
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	6078      	str	r0, [r7, #4]
 800e990:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e992:	683b      	ldr	r3, [r7, #0]
 800e994:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800e996:	2318      	movs	r3, #24
 800e998:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e99a:	2340      	movs	r3, #64	; 0x40
 800e99c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e99e:	2300      	movs	r3, #0
 800e9a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e9a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e9a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e9a8:	f107 0308 	add.w	r3, r7, #8
 800e9ac:	4619      	mov	r1, r3
 800e9ae:	6878      	ldr	r0, [r7, #4]
 800e9b0:	f7ff ff0e 	bl	800e7d0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800e9b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800e9b8:	2118      	movs	r1, #24
 800e9ba:	6878      	ldr	r0, [r7, #4]
 800e9bc:	f000 f9da 	bl	800ed74 <SDMMC_GetCmdResp1>
 800e9c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e9c2:	69fb      	ldr	r3, [r7, #28]
}
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	3720      	adds	r7, #32
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	bd80      	pop	{r7, pc}

0800e9cc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b088      	sub	sp, #32
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
 800e9d4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e9d6:	683b      	ldr	r3, [r7, #0]
 800e9d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800e9da:	2319      	movs	r3, #25
 800e9dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e9de:	2340      	movs	r3, #64	; 0x40
 800e9e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e9e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e9ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e9ec:	f107 0308 	add.w	r3, r7, #8
 800e9f0:	4619      	mov	r1, r3
 800e9f2:	6878      	ldr	r0, [r7, #4]
 800e9f4:	f7ff feec 	bl	800e7d0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800e9f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800e9fc:	2119      	movs	r1, #25
 800e9fe:	6878      	ldr	r0, [r7, #4]
 800ea00:	f000 f9b8 	bl	800ed74 <SDMMC_GetCmdResp1>
 800ea04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ea06:	69fb      	ldr	r3, [r7, #28]
}
 800ea08:	4618      	mov	r0, r3
 800ea0a:	3720      	adds	r7, #32
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	bd80      	pop	{r7, pc}

0800ea10 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800ea10:	b580      	push	{r7, lr}
 800ea12:	b088      	sub	sp, #32
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ea18:	2300      	movs	r3, #0
 800ea1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ea1c:	230c      	movs	r3, #12
 800ea1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ea20:	2340      	movs	r3, #64	; 0x40
 800ea22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ea24:	2300      	movs	r3, #0
 800ea26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ea28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ea2c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ea2e:	f107 0308 	add.w	r3, r7, #8
 800ea32:	4619      	mov	r1, r3
 800ea34:	6878      	ldr	r0, [r7, #4]
 800ea36:	f7ff fecb 	bl	800e7d0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800ea3a:	4a05      	ldr	r2, [pc, #20]	; (800ea50 <SDMMC_CmdStopTransfer+0x40>)
 800ea3c:	210c      	movs	r1, #12
 800ea3e:	6878      	ldr	r0, [r7, #4]
 800ea40:	f000 f998 	bl	800ed74 <SDMMC_GetCmdResp1>
 800ea44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ea46:	69fb      	ldr	r3, [r7, #28]
}
 800ea48:	4618      	mov	r0, r3
 800ea4a:	3720      	adds	r7, #32
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	bd80      	pop	{r7, pc}
 800ea50:	05f5e100 	.word	0x05f5e100

0800ea54 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b08a      	sub	sp, #40	; 0x28
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	60f8      	str	r0, [r7, #12]
 800ea5c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ea60:	683b      	ldr	r3, [r7, #0]
 800ea62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ea64:	2307      	movs	r3, #7
 800ea66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ea68:	2340      	movs	r3, #64	; 0x40
 800ea6a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ea70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ea74:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ea76:	f107 0310 	add.w	r3, r7, #16
 800ea7a:	4619      	mov	r1, r3
 800ea7c:	68f8      	ldr	r0, [r7, #12]
 800ea7e:	f7ff fea7 	bl	800e7d0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800ea82:	f241 3288 	movw	r2, #5000	; 0x1388
 800ea86:	2107      	movs	r1, #7
 800ea88:	68f8      	ldr	r0, [r7, #12]
 800ea8a:	f000 f973 	bl	800ed74 <SDMMC_GetCmdResp1>
 800ea8e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ea90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ea92:	4618      	mov	r0, r3
 800ea94:	3728      	adds	r7, #40	; 0x28
 800ea96:	46bd      	mov	sp, r7
 800ea98:	bd80      	pop	{r7, pc}

0800ea9a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800ea9a:	b580      	push	{r7, lr}
 800ea9c:	b088      	sub	sp, #32
 800ea9e:	af00      	add	r7, sp, #0
 800eaa0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800eaaa:	2300      	movs	r3, #0
 800eaac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800eaae:	2300      	movs	r3, #0
 800eab0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800eab2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eab6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800eab8:	f107 0308 	add.w	r3, r7, #8
 800eabc:	4619      	mov	r1, r3
 800eabe:	6878      	ldr	r0, [r7, #4]
 800eac0:	f7ff fe86 	bl	800e7d0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800eac4:	6878      	ldr	r0, [r7, #4]
 800eac6:	f000 f92d 	bl	800ed24 <SDMMC_GetCmdError>
 800eaca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eacc:	69fb      	ldr	r3, [r7, #28]
}
 800eace:	4618      	mov	r0, r3
 800ead0:	3720      	adds	r7, #32
 800ead2:	46bd      	mov	sp, r7
 800ead4:	bd80      	pop	{r7, pc}

0800ead6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800ead6:	b580      	push	{r7, lr}
 800ead8:	b088      	sub	sp, #32
 800eada:	af00      	add	r7, sp, #0
 800eadc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800eade:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800eae2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800eae4:	2308      	movs	r3, #8
 800eae6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800eae8:	2340      	movs	r3, #64	; 0x40
 800eaea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800eaec:	2300      	movs	r3, #0
 800eaee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800eaf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eaf4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800eaf6:	f107 0308 	add.w	r3, r7, #8
 800eafa:	4619      	mov	r1, r3
 800eafc:	6878      	ldr	r0, [r7, #4]
 800eafe:	f7ff fe67 	bl	800e7d0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800eb02:	6878      	ldr	r0, [r7, #4]
 800eb04:	f000 fb16 	bl	800f134 <SDMMC_GetCmdResp7>
 800eb08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eb0a:	69fb      	ldr	r3, [r7, #28]
}
 800eb0c:	4618      	mov	r0, r3
 800eb0e:	3720      	adds	r7, #32
 800eb10:	46bd      	mov	sp, r7
 800eb12:	bd80      	pop	{r7, pc}

0800eb14 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b088      	sub	sp, #32
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
 800eb1c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800eb1e:	683b      	ldr	r3, [r7, #0]
 800eb20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800eb22:	2337      	movs	r3, #55	; 0x37
 800eb24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800eb26:	2340      	movs	r3, #64	; 0x40
 800eb28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800eb2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eb32:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800eb34:	f107 0308 	add.w	r3, r7, #8
 800eb38:	4619      	mov	r1, r3
 800eb3a:	6878      	ldr	r0, [r7, #4]
 800eb3c:	f7ff fe48 	bl	800e7d0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800eb40:	f241 3288 	movw	r2, #5000	; 0x1388
 800eb44:	2137      	movs	r1, #55	; 0x37
 800eb46:	6878      	ldr	r0, [r7, #4]
 800eb48:	f000 f914 	bl	800ed74 <SDMMC_GetCmdResp1>
 800eb4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eb4e:	69fb      	ldr	r3, [r7, #28]
}
 800eb50:	4618      	mov	r0, r3
 800eb52:	3720      	adds	r7, #32
 800eb54:	46bd      	mov	sp, r7
 800eb56:	bd80      	pop	{r7, pc}

0800eb58 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b088      	sub	sp, #32
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
 800eb60:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800eb62:	683b      	ldr	r3, [r7, #0]
 800eb64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800eb68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800eb6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800eb6e:	2329      	movs	r3, #41	; 0x29
 800eb70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800eb72:	2340      	movs	r3, #64	; 0x40
 800eb74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800eb76:	2300      	movs	r3, #0
 800eb78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800eb7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eb7e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800eb80:	f107 0308 	add.w	r3, r7, #8
 800eb84:	4619      	mov	r1, r3
 800eb86:	6878      	ldr	r0, [r7, #4]
 800eb88:	f7ff fe22 	bl	800e7d0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800eb8c:	6878      	ldr	r0, [r7, #4]
 800eb8e:	f000 fa23 	bl	800efd8 <SDMMC_GetCmdResp3>
 800eb92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eb94:	69fb      	ldr	r3, [r7, #28]
}
 800eb96:	4618      	mov	r0, r3
 800eb98:	3720      	adds	r7, #32
 800eb9a:	46bd      	mov	sp, r7
 800eb9c:	bd80      	pop	{r7, pc}

0800eb9e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800eb9e:	b580      	push	{r7, lr}
 800eba0:	b088      	sub	sp, #32
 800eba2:	af00      	add	r7, sp, #0
 800eba4:	6078      	str	r0, [r7, #4]
 800eba6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800eba8:	683b      	ldr	r3, [r7, #0]
 800ebaa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ebac:	2306      	movs	r3, #6
 800ebae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ebb0:	2340      	movs	r3, #64	; 0x40
 800ebb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ebb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ebbc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ebbe:	f107 0308 	add.w	r3, r7, #8
 800ebc2:	4619      	mov	r1, r3
 800ebc4:	6878      	ldr	r0, [r7, #4]
 800ebc6:	f7ff fe03 	bl	800e7d0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800ebca:	f241 3288 	movw	r2, #5000	; 0x1388
 800ebce:	2106      	movs	r1, #6
 800ebd0:	6878      	ldr	r0, [r7, #4]
 800ebd2:	f000 f8cf 	bl	800ed74 <SDMMC_GetCmdResp1>
 800ebd6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ebd8:	69fb      	ldr	r3, [r7, #28]
}
 800ebda:	4618      	mov	r0, r3
 800ebdc:	3720      	adds	r7, #32
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	bd80      	pop	{r7, pc}

0800ebe2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800ebe2:	b580      	push	{r7, lr}
 800ebe4:	b088      	sub	sp, #32
 800ebe6:	af00      	add	r7, sp, #0
 800ebe8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800ebea:	2300      	movs	r3, #0
 800ebec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ebee:	2333      	movs	r3, #51	; 0x33
 800ebf0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ebf2:	2340      	movs	r3, #64	; 0x40
 800ebf4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ebfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ebfe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ec00:	f107 0308 	add.w	r3, r7, #8
 800ec04:	4619      	mov	r1, r3
 800ec06:	6878      	ldr	r0, [r7, #4]
 800ec08:	f7ff fde2 	bl	800e7d0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800ec0c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ec10:	2133      	movs	r1, #51	; 0x33
 800ec12:	6878      	ldr	r0, [r7, #4]
 800ec14:	f000 f8ae 	bl	800ed74 <SDMMC_GetCmdResp1>
 800ec18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ec1a:	69fb      	ldr	r3, [r7, #28]
}
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	3720      	adds	r7, #32
 800ec20:	46bd      	mov	sp, r7
 800ec22:	bd80      	pop	{r7, pc}

0800ec24 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800ec24:	b580      	push	{r7, lr}
 800ec26:	b088      	sub	sp, #32
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ec30:	2302      	movs	r3, #2
 800ec32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800ec34:	23c0      	movs	r3, #192	; 0xc0
 800ec36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ec38:	2300      	movs	r3, #0
 800ec3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ec3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ec40:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ec42:	f107 0308 	add.w	r3, r7, #8
 800ec46:	4619      	mov	r1, r3
 800ec48:	6878      	ldr	r0, [r7, #4]
 800ec4a:	f7ff fdc1 	bl	800e7d0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800ec4e:	6878      	ldr	r0, [r7, #4]
 800ec50:	f000 f97c 	bl	800ef4c <SDMMC_GetCmdResp2>
 800ec54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ec56:	69fb      	ldr	r3, [r7, #28]
}
 800ec58:	4618      	mov	r0, r3
 800ec5a:	3720      	adds	r7, #32
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	bd80      	pop	{r7, pc}

0800ec60 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b088      	sub	sp, #32
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	6078      	str	r0, [r7, #4]
 800ec68:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ec6a:	683b      	ldr	r3, [r7, #0]
 800ec6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ec6e:	2309      	movs	r3, #9
 800ec70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800ec72:	23c0      	movs	r3, #192	; 0xc0
 800ec74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ec76:	2300      	movs	r3, #0
 800ec78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ec7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ec7e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ec80:	f107 0308 	add.w	r3, r7, #8
 800ec84:	4619      	mov	r1, r3
 800ec86:	6878      	ldr	r0, [r7, #4]
 800ec88:	f7ff fda2 	bl	800e7d0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800ec8c:	6878      	ldr	r0, [r7, #4]
 800ec8e:	f000 f95d 	bl	800ef4c <SDMMC_GetCmdResp2>
 800ec92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ec94:	69fb      	ldr	r3, [r7, #28]
}
 800ec96:	4618      	mov	r0, r3
 800ec98:	3720      	adds	r7, #32
 800ec9a:	46bd      	mov	sp, r7
 800ec9c:	bd80      	pop	{r7, pc}

0800ec9e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800ec9e:	b580      	push	{r7, lr}
 800eca0:	b088      	sub	sp, #32
 800eca2:	af00      	add	r7, sp, #0
 800eca4:	6078      	str	r0, [r7, #4]
 800eca6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800eca8:	2300      	movs	r3, #0
 800ecaa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ecac:	2303      	movs	r3, #3
 800ecae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ecb0:	2340      	movs	r3, #64	; 0x40
 800ecb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ecb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ecbc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ecbe:	f107 0308 	add.w	r3, r7, #8
 800ecc2:	4619      	mov	r1, r3
 800ecc4:	6878      	ldr	r0, [r7, #4]
 800ecc6:	f7ff fd83 	bl	800e7d0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ecca:	683a      	ldr	r2, [r7, #0]
 800eccc:	2103      	movs	r1, #3
 800ecce:	6878      	ldr	r0, [r7, #4]
 800ecd0:	f000 f9bc 	bl	800f04c <SDMMC_GetCmdResp6>
 800ecd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ecd6:	69fb      	ldr	r3, [r7, #28]
}
 800ecd8:	4618      	mov	r0, r3
 800ecda:	3720      	adds	r7, #32
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	bd80      	pop	{r7, pc}

0800ece0 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b088      	sub	sp, #32
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]
 800ece8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800ecea:	683b      	ldr	r3, [r7, #0]
 800ecec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ecee:	230d      	movs	r3, #13
 800ecf0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ecf2:	2340      	movs	r3, #64	; 0x40
 800ecf4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ecfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ecfe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ed00:	f107 0308 	add.w	r3, r7, #8
 800ed04:	4619      	mov	r1, r3
 800ed06:	6878      	ldr	r0, [r7, #4]
 800ed08:	f7ff fd62 	bl	800e7d0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800ed0c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ed10:	210d      	movs	r1, #13
 800ed12:	6878      	ldr	r0, [r7, #4]
 800ed14:	f000 f82e 	bl	800ed74 <SDMMC_GetCmdResp1>
 800ed18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ed1a:	69fb      	ldr	r3, [r7, #28]
}
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	3720      	adds	r7, #32
 800ed20:	46bd      	mov	sp, r7
 800ed22:	bd80      	pop	{r7, pc}

0800ed24 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800ed24:	b490      	push	{r4, r7}
 800ed26:	b082      	sub	sp, #8
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ed2c:	4b0f      	ldr	r3, [pc, #60]	; (800ed6c <SDMMC_GetCmdError+0x48>)
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	4a0f      	ldr	r2, [pc, #60]	; (800ed70 <SDMMC_GetCmdError+0x4c>)
 800ed32:	fba2 2303 	umull	r2, r3, r2, r3
 800ed36:	0a5b      	lsrs	r3, r3, #9
 800ed38:	f241 3288 	movw	r2, #5000	; 0x1388
 800ed3c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ed40:	4623      	mov	r3, r4
 800ed42:	1e5c      	subs	r4, r3, #1
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d102      	bne.n	800ed4e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ed48:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ed4c:	e009      	b.n	800ed62 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d0f2      	beq.n	800ed40 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	22c5      	movs	r2, #197	; 0xc5
 800ed5e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800ed60:	2300      	movs	r3, #0
}
 800ed62:	4618      	mov	r0, r3
 800ed64:	3708      	adds	r7, #8
 800ed66:	46bd      	mov	sp, r7
 800ed68:	bc90      	pop	{r4, r7}
 800ed6a:	4770      	bx	lr
 800ed6c:	20000000 	.word	0x20000000
 800ed70:	10624dd3 	.word	0x10624dd3

0800ed74 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ed74:	b590      	push	{r4, r7, lr}
 800ed76:	b087      	sub	sp, #28
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	60f8      	str	r0, [r7, #12]
 800ed7c:	460b      	mov	r3, r1
 800ed7e:	607a      	str	r2, [r7, #4]
 800ed80:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ed82:	4b6f      	ldr	r3, [pc, #444]	; (800ef40 <SDMMC_GetCmdResp1+0x1cc>)
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	4a6f      	ldr	r2, [pc, #444]	; (800ef44 <SDMMC_GetCmdResp1+0x1d0>)
 800ed88:	fba2 2303 	umull	r2, r3, r2, r3
 800ed8c:	0a5b      	lsrs	r3, r3, #9
 800ed8e:	687a      	ldr	r2, [r7, #4]
 800ed90:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ed94:	4623      	mov	r3, r4
 800ed96:	1e5c      	subs	r4, r3, #1
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d102      	bne.n	800eda2 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ed9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800eda0:	e0c9      	b.n	800ef36 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eda6:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800eda8:	697b      	ldr	r3, [r7, #20]
 800edaa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d0f0      	beq.n	800ed94 <SDMMC_GetCmdResp1+0x20>
 800edb2:	697b      	ldr	r3, [r7, #20]
 800edb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d1eb      	bne.n	800ed94 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800edc0:	f003 0304 	and.w	r3, r3, #4
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d004      	beq.n	800edd2 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	2204      	movs	r2, #4
 800edcc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800edce:	2304      	movs	r3, #4
 800edd0:	e0b1      	b.n	800ef36 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800edd6:	f003 0301 	and.w	r3, r3, #1
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d004      	beq.n	800ede8 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	2201      	movs	r2, #1
 800ede2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ede4:	2301      	movs	r3, #1
 800ede6:	e0a6      	b.n	800ef36 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	22c5      	movs	r2, #197	; 0xc5
 800edec:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800edee:	68f8      	ldr	r0, [r7, #12]
 800edf0:	f7ff fd18 	bl	800e824 <SDIO_GetCommandResponse>
 800edf4:	4603      	mov	r3, r0
 800edf6:	461a      	mov	r2, r3
 800edf8:	7afb      	ldrb	r3, [r7, #11]
 800edfa:	4293      	cmp	r3, r2
 800edfc:	d001      	beq.n	800ee02 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800edfe:	2301      	movs	r3, #1
 800ee00:	e099      	b.n	800ef36 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ee02:	2100      	movs	r1, #0
 800ee04:	68f8      	ldr	r0, [r7, #12]
 800ee06:	f7ff fd1a 	bl	800e83e <SDIO_GetResponse>
 800ee0a:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ee0c:	693a      	ldr	r2, [r7, #16]
 800ee0e:	4b4e      	ldr	r3, [pc, #312]	; (800ef48 <SDMMC_GetCmdResp1+0x1d4>)
 800ee10:	4013      	ands	r3, r2
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d101      	bne.n	800ee1a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800ee16:	2300      	movs	r3, #0
 800ee18:	e08d      	b.n	800ef36 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ee1a:	693b      	ldr	r3, [r7, #16]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	da02      	bge.n	800ee26 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ee20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ee24:	e087      	b.n	800ef36 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ee26:	693b      	ldr	r3, [r7, #16]
 800ee28:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d001      	beq.n	800ee34 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ee30:	2340      	movs	r3, #64	; 0x40
 800ee32:	e080      	b.n	800ef36 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ee34:	693b      	ldr	r3, [r7, #16]
 800ee36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d001      	beq.n	800ee42 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ee3e:	2380      	movs	r3, #128	; 0x80
 800ee40:	e079      	b.n	800ef36 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ee42:	693b      	ldr	r3, [r7, #16]
 800ee44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d002      	beq.n	800ee52 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ee4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ee50:	e071      	b.n	800ef36 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ee52:	693b      	ldr	r3, [r7, #16]
 800ee54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d002      	beq.n	800ee62 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ee5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ee60:	e069      	b.n	800ef36 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ee62:	693b      	ldr	r3, [r7, #16]
 800ee64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d002      	beq.n	800ee72 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ee6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ee70:	e061      	b.n	800ef36 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ee72:	693b      	ldr	r3, [r7, #16]
 800ee74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d002      	beq.n	800ee82 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ee7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ee80:	e059      	b.n	800ef36 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ee82:	693b      	ldr	r3, [r7, #16]
 800ee84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d002      	beq.n	800ee92 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ee8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ee90:	e051      	b.n	800ef36 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ee92:	693b      	ldr	r3, [r7, #16]
 800ee94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d002      	beq.n	800eea2 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ee9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800eea0:	e049      	b.n	800ef36 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800eea2:	693b      	ldr	r3, [r7, #16]
 800eea4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d002      	beq.n	800eeb2 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800eeac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800eeb0:	e041      	b.n	800ef36 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800eeb2:	693b      	ldr	r3, [r7, #16]
 800eeb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d002      	beq.n	800eec2 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800eebc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eec0:	e039      	b.n	800ef36 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800eec2:	693b      	ldr	r3, [r7, #16]
 800eec4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d002      	beq.n	800eed2 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800eecc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800eed0:	e031      	b.n	800ef36 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800eed2:	693b      	ldr	r3, [r7, #16]
 800eed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d002      	beq.n	800eee2 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800eedc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800eee0:	e029      	b.n	800ef36 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800eee2:	693b      	ldr	r3, [r7, #16]
 800eee4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d002      	beq.n	800eef2 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800eeec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800eef0:	e021      	b.n	800ef36 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800eef2:	693b      	ldr	r3, [r7, #16]
 800eef4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d002      	beq.n	800ef02 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800eefc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ef00:	e019      	b.n	800ef36 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ef02:	693b      	ldr	r3, [r7, #16]
 800ef04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d002      	beq.n	800ef12 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ef0c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ef10:	e011      	b.n	800ef36 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ef12:	693b      	ldr	r3, [r7, #16]
 800ef14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d002      	beq.n	800ef22 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ef1c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ef20:	e009      	b.n	800ef36 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ef22:	693b      	ldr	r3, [r7, #16]
 800ef24:	f003 0308 	and.w	r3, r3, #8
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d002      	beq.n	800ef32 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ef2c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ef30:	e001      	b.n	800ef36 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ef32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ef36:	4618      	mov	r0, r3
 800ef38:	371c      	adds	r7, #28
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	bd90      	pop	{r4, r7, pc}
 800ef3e:	bf00      	nop
 800ef40:	20000000 	.word	0x20000000
 800ef44:	10624dd3 	.word	0x10624dd3
 800ef48:	fdffe008 	.word	0xfdffe008

0800ef4c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800ef4c:	b490      	push	{r4, r7}
 800ef4e:	b084      	sub	sp, #16
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ef54:	4b1e      	ldr	r3, [pc, #120]	; (800efd0 <SDMMC_GetCmdResp2+0x84>)
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	4a1e      	ldr	r2, [pc, #120]	; (800efd4 <SDMMC_GetCmdResp2+0x88>)
 800ef5a:	fba2 2303 	umull	r2, r3, r2, r3
 800ef5e:	0a5b      	lsrs	r3, r3, #9
 800ef60:	f241 3288 	movw	r2, #5000	; 0x1388
 800ef64:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ef68:	4623      	mov	r3, r4
 800ef6a:	1e5c      	subs	r4, r3, #1
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d102      	bne.n	800ef76 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ef70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ef74:	e026      	b.n	800efc4 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef7a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d0f0      	beq.n	800ef68 <SDMMC_GetCmdResp2+0x1c>
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d1eb      	bne.n	800ef68 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef94:	f003 0304 	and.w	r3, r3, #4
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d004      	beq.n	800efa6 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	2204      	movs	r2, #4
 800efa0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800efa2:	2304      	movs	r3, #4
 800efa4:	e00e      	b.n	800efc4 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800efaa:	f003 0301 	and.w	r3, r3, #1
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d004      	beq.n	800efbc <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	2201      	movs	r2, #1
 800efb6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800efb8:	2301      	movs	r3, #1
 800efba:	e003      	b.n	800efc4 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	22c5      	movs	r2, #197	; 0xc5
 800efc0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800efc2:	2300      	movs	r3, #0
}
 800efc4:	4618      	mov	r0, r3
 800efc6:	3710      	adds	r7, #16
 800efc8:	46bd      	mov	sp, r7
 800efca:	bc90      	pop	{r4, r7}
 800efcc:	4770      	bx	lr
 800efce:	bf00      	nop
 800efd0:	20000000 	.word	0x20000000
 800efd4:	10624dd3 	.word	0x10624dd3

0800efd8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800efd8:	b490      	push	{r4, r7}
 800efda:	b084      	sub	sp, #16
 800efdc:	af00      	add	r7, sp, #0
 800efde:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800efe0:	4b18      	ldr	r3, [pc, #96]	; (800f044 <SDMMC_GetCmdResp3+0x6c>)
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	4a18      	ldr	r2, [pc, #96]	; (800f048 <SDMMC_GetCmdResp3+0x70>)
 800efe6:	fba2 2303 	umull	r2, r3, r2, r3
 800efea:	0a5b      	lsrs	r3, r3, #9
 800efec:	f241 3288 	movw	r2, #5000	; 0x1388
 800eff0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800eff4:	4623      	mov	r3, r4
 800eff6:	1e5c      	subs	r4, r3, #1
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d102      	bne.n	800f002 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800effc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f000:	e01b      	b.n	800f03a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f006:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d0f0      	beq.n	800eff4 <SDMMC_GetCmdResp3+0x1c>
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d1eb      	bne.n	800eff4 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f020:	f003 0304 	and.w	r3, r3, #4
 800f024:	2b00      	cmp	r3, #0
 800f026:	d004      	beq.n	800f032 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	2204      	movs	r2, #4
 800f02c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f02e:	2304      	movs	r3, #4
 800f030:	e003      	b.n	800f03a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	22c5      	movs	r2, #197	; 0xc5
 800f036:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800f038:	2300      	movs	r3, #0
}
 800f03a:	4618      	mov	r0, r3
 800f03c:	3710      	adds	r7, #16
 800f03e:	46bd      	mov	sp, r7
 800f040:	bc90      	pop	{r4, r7}
 800f042:	4770      	bx	lr
 800f044:	20000000 	.word	0x20000000
 800f048:	10624dd3 	.word	0x10624dd3

0800f04c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800f04c:	b590      	push	{r4, r7, lr}
 800f04e:	b087      	sub	sp, #28
 800f050:	af00      	add	r7, sp, #0
 800f052:	60f8      	str	r0, [r7, #12]
 800f054:	460b      	mov	r3, r1
 800f056:	607a      	str	r2, [r7, #4]
 800f058:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f05a:	4b34      	ldr	r3, [pc, #208]	; (800f12c <SDMMC_GetCmdResp6+0xe0>)
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	4a34      	ldr	r2, [pc, #208]	; (800f130 <SDMMC_GetCmdResp6+0xe4>)
 800f060:	fba2 2303 	umull	r2, r3, r2, r3
 800f064:	0a5b      	lsrs	r3, r3, #9
 800f066:	f241 3288 	movw	r2, #5000	; 0x1388
 800f06a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800f06e:	4623      	mov	r3, r4
 800f070:	1e5c      	subs	r4, r3, #1
 800f072:	2b00      	cmp	r3, #0
 800f074:	d102      	bne.n	800f07c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f076:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f07a:	e052      	b.n	800f122 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f080:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f082:	697b      	ldr	r3, [r7, #20]
 800f084:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d0f0      	beq.n	800f06e <SDMMC_GetCmdResp6+0x22>
 800f08c:	697b      	ldr	r3, [r7, #20]
 800f08e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f092:	2b00      	cmp	r3, #0
 800f094:	d1eb      	bne.n	800f06e <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f09a:	f003 0304 	and.w	r3, r3, #4
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d004      	beq.n	800f0ac <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	2204      	movs	r2, #4
 800f0a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f0a8:	2304      	movs	r3, #4
 800f0aa:	e03a      	b.n	800f122 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f0b0:	f003 0301 	and.w	r3, r3, #1
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d004      	beq.n	800f0c2 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	2201      	movs	r2, #1
 800f0bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f0be:	2301      	movs	r3, #1
 800f0c0:	e02f      	b.n	800f122 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800f0c2:	68f8      	ldr	r0, [r7, #12]
 800f0c4:	f7ff fbae 	bl	800e824 <SDIO_GetCommandResponse>
 800f0c8:	4603      	mov	r3, r0
 800f0ca:	461a      	mov	r2, r3
 800f0cc:	7afb      	ldrb	r3, [r7, #11]
 800f0ce:	4293      	cmp	r3, r2
 800f0d0:	d001      	beq.n	800f0d6 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f0d2:	2301      	movs	r3, #1
 800f0d4:	e025      	b.n	800f122 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	22c5      	movs	r2, #197	; 0xc5
 800f0da:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800f0dc:	2100      	movs	r1, #0
 800f0de:	68f8      	ldr	r0, [r7, #12]
 800f0e0:	f7ff fbad 	bl	800e83e <SDIO_GetResponse>
 800f0e4:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800f0e6:	693b      	ldr	r3, [r7, #16]
 800f0e8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d106      	bne.n	800f0fe <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800f0f0:	693b      	ldr	r3, [r7, #16]
 800f0f2:	0c1b      	lsrs	r3, r3, #16
 800f0f4:	b29a      	uxth	r2, r3
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	e011      	b.n	800f122 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800f0fe:	693b      	ldr	r3, [r7, #16]
 800f100:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f104:	2b00      	cmp	r3, #0
 800f106:	d002      	beq.n	800f10e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f108:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f10c:	e009      	b.n	800f122 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800f10e:	693b      	ldr	r3, [r7, #16]
 800f110:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f114:	2b00      	cmp	r3, #0
 800f116:	d002      	beq.n	800f11e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f118:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f11c:	e001      	b.n	800f122 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f11e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800f122:	4618      	mov	r0, r3
 800f124:	371c      	adds	r7, #28
 800f126:	46bd      	mov	sp, r7
 800f128:	bd90      	pop	{r4, r7, pc}
 800f12a:	bf00      	nop
 800f12c:	20000000 	.word	0x20000000
 800f130:	10624dd3 	.word	0x10624dd3

0800f134 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800f134:	b490      	push	{r4, r7}
 800f136:	b084      	sub	sp, #16
 800f138:	af00      	add	r7, sp, #0
 800f13a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f13c:	4b21      	ldr	r3, [pc, #132]	; (800f1c4 <SDMMC_GetCmdResp7+0x90>)
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	4a21      	ldr	r2, [pc, #132]	; (800f1c8 <SDMMC_GetCmdResp7+0x94>)
 800f142:	fba2 2303 	umull	r2, r3, r2, r3
 800f146:	0a5b      	lsrs	r3, r3, #9
 800f148:	f241 3288 	movw	r2, #5000	; 0x1388
 800f14c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800f150:	4623      	mov	r3, r4
 800f152:	1e5c      	subs	r4, r3, #1
 800f154:	2b00      	cmp	r3, #0
 800f156:	d102      	bne.n	800f15e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f158:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f15c:	e02c      	b.n	800f1b8 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f162:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d0f0      	beq.n	800f150 <SDMMC_GetCmdResp7+0x1c>
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f174:	2b00      	cmp	r3, #0
 800f176:	d1eb      	bne.n	800f150 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f17c:	f003 0304 	and.w	r3, r3, #4
 800f180:	2b00      	cmp	r3, #0
 800f182:	d004      	beq.n	800f18e <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	2204      	movs	r2, #4
 800f188:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f18a:	2304      	movs	r3, #4
 800f18c:	e014      	b.n	800f1b8 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f192:	f003 0301 	and.w	r3, r3, #1
 800f196:	2b00      	cmp	r3, #0
 800f198:	d004      	beq.n	800f1a4 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	2201      	movs	r2, #1
 800f19e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f1a0:	2301      	movs	r3, #1
 800f1a2:	e009      	b.n	800f1b8 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d002      	beq.n	800f1b6 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	2240      	movs	r2, #64	; 0x40
 800f1b4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800f1b6:	2300      	movs	r3, #0
  
}
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	3710      	adds	r7, #16
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	bc90      	pop	{r4, r7}
 800f1c0:	4770      	bx	lr
 800f1c2:	bf00      	nop
 800f1c4:	20000000 	.word	0x20000000
 800f1c8:	10624dd3 	.word	0x10624dd3

0800f1cc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800f1cc:	b580      	push	{r7, lr}
 800f1ce:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800f1d0:	4904      	ldr	r1, [pc, #16]	; (800f1e4 <MX_FATFS_Init+0x18>)
 800f1d2:	4805      	ldr	r0, [pc, #20]	; (800f1e8 <MX_FATFS_Init+0x1c>)
 800f1d4:	f003 fb9c 	bl	8012910 <FATFS_LinkDriver>
 800f1d8:	4603      	mov	r3, r0
 800f1da:	461a      	mov	r2, r3
 800f1dc:	4b03      	ldr	r3, [pc, #12]	; (800f1ec <MX_FATFS_Init+0x20>)
 800f1de:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800f1e0:	bf00      	nop
 800f1e2:	bd80      	pop	{r7, pc}
 800f1e4:	2003edc8 	.word	0x2003edc8
 800f1e8:	08018388 	.word	0x08018388
 800f1ec:	2003edc4 	.word	0x2003edc4

0800f1f0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b082      	sub	sp, #8
 800f1f4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800f1fa:	f000 f896 	bl	800f32a <BSP_SD_IsDetected>
 800f1fe:	4603      	mov	r3, r0
 800f200:	2b01      	cmp	r3, #1
 800f202:	d001      	beq.n	800f208 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800f204:	2301      	movs	r3, #1
 800f206:	e012      	b.n	800f22e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800f208:	480b      	ldr	r0, [pc, #44]	; (800f238 <BSP_SD_Init+0x48>)
 800f20a:	f7fb ffa5 	bl	800b158 <HAL_SD_Init>
 800f20e:	4603      	mov	r3, r0
 800f210:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800f212:	79fb      	ldrb	r3, [r7, #7]
 800f214:	2b00      	cmp	r3, #0
 800f216:	d109      	bne.n	800f22c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800f218:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800f21c:	4806      	ldr	r0, [pc, #24]	; (800f238 <BSP_SD_Init+0x48>)
 800f21e:	f7fc fd4f 	bl	800bcc0 <HAL_SD_ConfigWideBusOperation>
 800f222:	4603      	mov	r3, r0
 800f224:	2b00      	cmp	r3, #0
 800f226:	d001      	beq.n	800f22c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800f228:	2301      	movs	r3, #1
 800f22a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800f22c:	79fb      	ldrb	r3, [r7, #7]
}
 800f22e:	4618      	mov	r0, r3
 800f230:	3708      	adds	r7, #8
 800f232:	46bd      	mov	sp, r7
 800f234:	bd80      	pop	{r7, pc}
 800f236:	bf00      	nop
 800f238:	2003ebc0 	.word	0x2003ebc0

0800f23c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b086      	sub	sp, #24
 800f240:	af00      	add	r7, sp, #0
 800f242:	60f8      	str	r0, [r7, #12]
 800f244:	60b9      	str	r1, [r7, #8]
 800f246:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800f248:	2300      	movs	r3, #0
 800f24a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	68ba      	ldr	r2, [r7, #8]
 800f250:	68f9      	ldr	r1, [r7, #12]
 800f252:	4806      	ldr	r0, [pc, #24]	; (800f26c <BSP_SD_ReadBlocks_DMA+0x30>)
 800f254:	f7fc f810 	bl	800b278 <HAL_SD_ReadBlocks_DMA>
 800f258:	4603      	mov	r3, r0
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d001      	beq.n	800f262 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800f25e:	2301      	movs	r3, #1
 800f260:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f262:	7dfb      	ldrb	r3, [r7, #23]
}
 800f264:	4618      	mov	r0, r3
 800f266:	3718      	adds	r7, #24
 800f268:	46bd      	mov	sp, r7
 800f26a:	bd80      	pop	{r7, pc}
 800f26c:	2003ebc0 	.word	0x2003ebc0

0800f270 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800f270:	b580      	push	{r7, lr}
 800f272:	b086      	sub	sp, #24
 800f274:	af00      	add	r7, sp, #0
 800f276:	60f8      	str	r0, [r7, #12]
 800f278:	60b9      	str	r1, [r7, #8]
 800f27a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800f27c:	2300      	movs	r3, #0
 800f27e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	68ba      	ldr	r2, [r7, #8]
 800f284:	68f9      	ldr	r1, [r7, #12]
 800f286:	4806      	ldr	r0, [pc, #24]	; (800f2a0 <BSP_SD_WriteBlocks_DMA+0x30>)
 800f288:	f7fc f8de 	bl	800b448 <HAL_SD_WriteBlocks_DMA>
 800f28c:	4603      	mov	r3, r0
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d001      	beq.n	800f296 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800f292:	2301      	movs	r3, #1
 800f294:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f296:	7dfb      	ldrb	r3, [r7, #23]
}
 800f298:	4618      	mov	r0, r3
 800f29a:	3718      	adds	r7, #24
 800f29c:	46bd      	mov	sp, r7
 800f29e:	bd80      	pop	{r7, pc}
 800f2a0:	2003ebc0 	.word	0x2003ebc0

0800f2a4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800f2a4:	b580      	push	{r7, lr}
 800f2a6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800f2a8:	4805      	ldr	r0, [pc, #20]	; (800f2c0 <BSP_SD_GetCardState+0x1c>)
 800f2aa:	f7fc fd85 	bl	800bdb8 <HAL_SD_GetCardState>
 800f2ae:	4603      	mov	r3, r0
 800f2b0:	2b04      	cmp	r3, #4
 800f2b2:	bf14      	ite	ne
 800f2b4:	2301      	movne	r3, #1
 800f2b6:	2300      	moveq	r3, #0
 800f2b8:	b2db      	uxtb	r3, r3
}
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	bd80      	pop	{r7, pc}
 800f2be:	bf00      	nop
 800f2c0:	2003ebc0 	.word	0x2003ebc0

0800f2c4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800f2c4:	b580      	push	{r7, lr}
 800f2c6:	b082      	sub	sp, #8
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800f2cc:	6879      	ldr	r1, [r7, #4]
 800f2ce:	4803      	ldr	r0, [pc, #12]	; (800f2dc <BSP_SD_GetCardInfo+0x18>)
 800f2d0:	f7fc fcca 	bl	800bc68 <HAL_SD_GetCardInfo>
}
 800f2d4:	bf00      	nop
 800f2d6:	3708      	adds	r7, #8
 800f2d8:	46bd      	mov	sp, r7
 800f2da:	bd80      	pop	{r7, pc}
 800f2dc:	2003ebc0 	.word	0x2003ebc0

0800f2e0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800f2e0:	b580      	push	{r7, lr}
 800f2e2:	b082      	sub	sp, #8
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800f2e8:	f000 f818 	bl	800f31c <BSP_SD_AbortCallback>
}
 800f2ec:	bf00      	nop
 800f2ee:	3708      	adds	r7, #8
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	bd80      	pop	{r7, pc}

0800f2f4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800f2f4:	b580      	push	{r7, lr}
 800f2f6:	b082      	sub	sp, #8
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800f2fc:	f000 f9a8 	bl	800f650 <BSP_SD_WriteCpltCallback>
}
 800f300:	bf00      	nop
 800f302:	3708      	adds	r7, #8
 800f304:	46bd      	mov	sp, r7
 800f306:	bd80      	pop	{r7, pc}

0800f308 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800f308:	b580      	push	{r7, lr}
 800f30a:	b082      	sub	sp, #8
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800f310:	f000 f9aa 	bl	800f668 <BSP_SD_ReadCpltCallback>
}
 800f314:	bf00      	nop
 800f316:	3708      	adds	r7, #8
 800f318:	46bd      	mov	sp, r7
 800f31a:	bd80      	pop	{r7, pc}

0800f31c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800f31c:	b480      	push	{r7}
 800f31e:	af00      	add	r7, sp, #0

}
 800f320:	bf00      	nop
 800f322:	46bd      	mov	sp, r7
 800f324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f328:	4770      	bx	lr

0800f32a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800f32a:	b580      	push	{r7, lr}
 800f32c:	b082      	sub	sp, #8
 800f32e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800f330:	2301      	movs	r3, #1
 800f332:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800f334:	f000 f80c 	bl	800f350 <BSP_PlatformIsDetected>
 800f338:	4603      	mov	r3, r0
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d101      	bne.n	800f342 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800f33e:	2300      	movs	r3, #0
 800f340:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800f342:	79fb      	ldrb	r3, [r7, #7]
 800f344:	b2db      	uxtb	r3, r3
}
 800f346:	4618      	mov	r0, r3
 800f348:	3708      	adds	r7, #8
 800f34a:	46bd      	mov	sp, r7
 800f34c:	bd80      	pop	{r7, pc}
	...

0800f350 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800f350:	b580      	push	{r7, lr}
 800f352:	b082      	sub	sp, #8
 800f354:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800f356:	2301      	movs	r3, #1
 800f358:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800f35a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800f35e:	4806      	ldr	r0, [pc, #24]	; (800f378 <BSP_PlatformIsDetected+0x28>)
 800f360:	f7fa f87e 	bl	8009460 <HAL_GPIO_ReadPin>
 800f364:	4603      	mov	r3, r0
 800f366:	2b00      	cmp	r3, #0
 800f368:	d001      	beq.n	800f36e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800f36a:	2300      	movs	r3, #0
 800f36c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800f36e:	79fb      	ldrb	r3, [r7, #7]
}
 800f370:	4618      	mov	r0, r3
 800f372:	3708      	adds	r7, #8
 800f374:	46bd      	mov	sp, r7
 800f376:	bd80      	pop	{r7, pc}
 800f378:	40020000 	.word	0x40020000

0800f37c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b084      	sub	sp, #16
 800f380:	af00      	add	r7, sp, #0
 800f382:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800f384:	f7f8 fde2 	bl	8007f4c <HAL_GetTick>
 800f388:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800f38a:	e006      	b.n	800f39a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f38c:	f7ff ff8a 	bl	800f2a4 <BSP_SD_GetCardState>
 800f390:	4603      	mov	r3, r0
 800f392:	2b00      	cmp	r3, #0
 800f394:	d101      	bne.n	800f39a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800f396:	2300      	movs	r3, #0
 800f398:	e009      	b.n	800f3ae <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800f39a:	f7f8 fdd7 	bl	8007f4c <HAL_GetTick>
 800f39e:	4602      	mov	r2, r0
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	1ad3      	subs	r3, r2, r3
 800f3a4:	687a      	ldr	r2, [r7, #4]
 800f3a6:	429a      	cmp	r2, r3
 800f3a8:	d8f0      	bhi.n	800f38c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800f3aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	3710      	adds	r7, #16
 800f3b2:	46bd      	mov	sp, r7
 800f3b4:	bd80      	pop	{r7, pc}
	...

0800f3b8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800f3b8:	b580      	push	{r7, lr}
 800f3ba:	b082      	sub	sp, #8
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	4603      	mov	r3, r0
 800f3c0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800f3c2:	4b0b      	ldr	r3, [pc, #44]	; (800f3f0 <SD_CheckStatus+0x38>)
 800f3c4:	2201      	movs	r2, #1
 800f3c6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800f3c8:	f7ff ff6c 	bl	800f2a4 <BSP_SD_GetCardState>
 800f3cc:	4603      	mov	r3, r0
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d107      	bne.n	800f3e2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800f3d2:	4b07      	ldr	r3, [pc, #28]	; (800f3f0 <SD_CheckStatus+0x38>)
 800f3d4:	781b      	ldrb	r3, [r3, #0]
 800f3d6:	b2db      	uxtb	r3, r3
 800f3d8:	f023 0301 	bic.w	r3, r3, #1
 800f3dc:	b2da      	uxtb	r2, r3
 800f3de:	4b04      	ldr	r3, [pc, #16]	; (800f3f0 <SD_CheckStatus+0x38>)
 800f3e0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800f3e2:	4b03      	ldr	r3, [pc, #12]	; (800f3f0 <SD_CheckStatus+0x38>)
 800f3e4:	781b      	ldrb	r3, [r3, #0]
 800f3e6:	b2db      	uxtb	r3, r3
}
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	3708      	adds	r7, #8
 800f3ec:	46bd      	mov	sp, r7
 800f3ee:	bd80      	pop	{r7, pc}
 800f3f0:	20000009 	.word	0x20000009

0800f3f4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800f3f4:	b580      	push	{r7, lr}
 800f3f6:	b082      	sub	sp, #8
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	4603      	mov	r3, r0
 800f3fc:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800f3fe:	f7ff fef7 	bl	800f1f0 <BSP_SD_Init>
 800f402:	4603      	mov	r3, r0
 800f404:	2b00      	cmp	r3, #0
 800f406:	d107      	bne.n	800f418 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800f408:	79fb      	ldrb	r3, [r7, #7]
 800f40a:	4618      	mov	r0, r3
 800f40c:	f7ff ffd4 	bl	800f3b8 <SD_CheckStatus>
 800f410:	4603      	mov	r3, r0
 800f412:	461a      	mov	r2, r3
 800f414:	4b04      	ldr	r3, [pc, #16]	; (800f428 <SD_initialize+0x34>)
 800f416:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800f418:	4b03      	ldr	r3, [pc, #12]	; (800f428 <SD_initialize+0x34>)
 800f41a:	781b      	ldrb	r3, [r3, #0]
 800f41c:	b2db      	uxtb	r3, r3
}
 800f41e:	4618      	mov	r0, r3
 800f420:	3708      	adds	r7, #8
 800f422:	46bd      	mov	sp, r7
 800f424:	bd80      	pop	{r7, pc}
 800f426:	bf00      	nop
 800f428:	20000009 	.word	0x20000009

0800f42c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800f42c:	b580      	push	{r7, lr}
 800f42e:	b082      	sub	sp, #8
 800f430:	af00      	add	r7, sp, #0
 800f432:	4603      	mov	r3, r0
 800f434:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800f436:	79fb      	ldrb	r3, [r7, #7]
 800f438:	4618      	mov	r0, r3
 800f43a:	f7ff ffbd 	bl	800f3b8 <SD_CheckStatus>
 800f43e:	4603      	mov	r3, r0
}
 800f440:	4618      	mov	r0, r3
 800f442:	3708      	adds	r7, #8
 800f444:	46bd      	mov	sp, r7
 800f446:	bd80      	pop	{r7, pc}

0800f448 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800f448:	b580      	push	{r7, lr}
 800f44a:	b086      	sub	sp, #24
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	60b9      	str	r1, [r7, #8]
 800f450:	607a      	str	r2, [r7, #4]
 800f452:	603b      	str	r3, [r7, #0]
 800f454:	4603      	mov	r3, r0
 800f456:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f458:	2301      	movs	r3, #1
 800f45a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800f45c:	f247 5030 	movw	r0, #30000	; 0x7530
 800f460:	f7ff ff8c 	bl	800f37c <SD_CheckStatusWithTimeout>
 800f464:	4603      	mov	r3, r0
 800f466:	2b00      	cmp	r3, #0
 800f468:	da01      	bge.n	800f46e <SD_read+0x26>
  {
    return res;
 800f46a:	7dfb      	ldrb	r3, [r7, #23]
 800f46c:	e03b      	b.n	800f4e6 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800f46e:	683a      	ldr	r2, [r7, #0]
 800f470:	6879      	ldr	r1, [r7, #4]
 800f472:	68b8      	ldr	r0, [r7, #8]
 800f474:	f7ff fee2 	bl	800f23c <BSP_SD_ReadBlocks_DMA>
 800f478:	4603      	mov	r3, r0
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d132      	bne.n	800f4e4 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800f47e:	4b1c      	ldr	r3, [pc, #112]	; (800f4f0 <SD_read+0xa8>)
 800f480:	2200      	movs	r2, #0
 800f482:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800f484:	f7f8 fd62 	bl	8007f4c <HAL_GetTick>
 800f488:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800f48a:	bf00      	nop
 800f48c:	4b18      	ldr	r3, [pc, #96]	; (800f4f0 <SD_read+0xa8>)
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	2b00      	cmp	r3, #0
 800f492:	d108      	bne.n	800f4a6 <SD_read+0x5e>
 800f494:	f7f8 fd5a 	bl	8007f4c <HAL_GetTick>
 800f498:	4602      	mov	r2, r0
 800f49a:	693b      	ldr	r3, [r7, #16]
 800f49c:	1ad3      	subs	r3, r2, r3
 800f49e:	f247 522f 	movw	r2, #29999	; 0x752f
 800f4a2:	4293      	cmp	r3, r2
 800f4a4:	d9f2      	bls.n	800f48c <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800f4a6:	4b12      	ldr	r3, [pc, #72]	; (800f4f0 <SD_read+0xa8>)
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d102      	bne.n	800f4b4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800f4ae:	2301      	movs	r3, #1
 800f4b0:	75fb      	strb	r3, [r7, #23]
 800f4b2:	e017      	b.n	800f4e4 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800f4b4:	4b0e      	ldr	r3, [pc, #56]	; (800f4f0 <SD_read+0xa8>)
 800f4b6:	2200      	movs	r2, #0
 800f4b8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800f4ba:	f7f8 fd47 	bl	8007f4c <HAL_GetTick>
 800f4be:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800f4c0:	e007      	b.n	800f4d2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f4c2:	f7ff feef 	bl	800f2a4 <BSP_SD_GetCardState>
 800f4c6:	4603      	mov	r3, r0
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d102      	bne.n	800f4d2 <SD_read+0x8a>
          {
            res = RES_OK;
 800f4cc:	2300      	movs	r3, #0
 800f4ce:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800f4d0:	e008      	b.n	800f4e4 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800f4d2:	f7f8 fd3b 	bl	8007f4c <HAL_GetTick>
 800f4d6:	4602      	mov	r2, r0
 800f4d8:	693b      	ldr	r3, [r7, #16]
 800f4da:	1ad3      	subs	r3, r2, r3
 800f4dc:	f247 522f 	movw	r2, #29999	; 0x752f
 800f4e0:	4293      	cmp	r3, r2
 800f4e2:	d9ee      	bls.n	800f4c2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800f4e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	3718      	adds	r7, #24
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	bd80      	pop	{r7, pc}
 800f4ee:	bf00      	nop
 800f4f0:	2003c45c 	.word	0x2003c45c

0800f4f4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800f4f4:	b580      	push	{r7, lr}
 800f4f6:	b086      	sub	sp, #24
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	60b9      	str	r1, [r7, #8]
 800f4fc:	607a      	str	r2, [r7, #4]
 800f4fe:	603b      	str	r3, [r7, #0]
 800f500:	4603      	mov	r3, r0
 800f502:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f504:	2301      	movs	r3, #1
 800f506:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800f508:	4b24      	ldr	r3, [pc, #144]	; (800f59c <SD_write+0xa8>)
 800f50a:	2200      	movs	r2, #0
 800f50c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800f50e:	f247 5030 	movw	r0, #30000	; 0x7530
 800f512:	f7ff ff33 	bl	800f37c <SD_CheckStatusWithTimeout>
 800f516:	4603      	mov	r3, r0
 800f518:	2b00      	cmp	r3, #0
 800f51a:	da01      	bge.n	800f520 <SD_write+0x2c>
  {
    return res;
 800f51c:	7dfb      	ldrb	r3, [r7, #23]
 800f51e:	e038      	b.n	800f592 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800f520:	683a      	ldr	r2, [r7, #0]
 800f522:	6879      	ldr	r1, [r7, #4]
 800f524:	68b8      	ldr	r0, [r7, #8]
 800f526:	f7ff fea3 	bl	800f270 <BSP_SD_WriteBlocks_DMA>
 800f52a:	4603      	mov	r3, r0
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d12f      	bne.n	800f590 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800f530:	f7f8 fd0c 	bl	8007f4c <HAL_GetTick>
 800f534:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800f536:	bf00      	nop
 800f538:	4b18      	ldr	r3, [pc, #96]	; (800f59c <SD_write+0xa8>)
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d108      	bne.n	800f552 <SD_write+0x5e>
 800f540:	f7f8 fd04 	bl	8007f4c <HAL_GetTick>
 800f544:	4602      	mov	r2, r0
 800f546:	693b      	ldr	r3, [r7, #16]
 800f548:	1ad3      	subs	r3, r2, r3
 800f54a:	f247 522f 	movw	r2, #29999	; 0x752f
 800f54e:	4293      	cmp	r3, r2
 800f550:	d9f2      	bls.n	800f538 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800f552:	4b12      	ldr	r3, [pc, #72]	; (800f59c <SD_write+0xa8>)
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d102      	bne.n	800f560 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800f55a:	2301      	movs	r3, #1
 800f55c:	75fb      	strb	r3, [r7, #23]
 800f55e:	e017      	b.n	800f590 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800f560:	4b0e      	ldr	r3, [pc, #56]	; (800f59c <SD_write+0xa8>)
 800f562:	2200      	movs	r2, #0
 800f564:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800f566:	f7f8 fcf1 	bl	8007f4c <HAL_GetTick>
 800f56a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800f56c:	e007      	b.n	800f57e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f56e:	f7ff fe99 	bl	800f2a4 <BSP_SD_GetCardState>
 800f572:	4603      	mov	r3, r0
 800f574:	2b00      	cmp	r3, #0
 800f576:	d102      	bne.n	800f57e <SD_write+0x8a>
          {
            res = RES_OK;
 800f578:	2300      	movs	r3, #0
 800f57a:	75fb      	strb	r3, [r7, #23]
            break;
 800f57c:	e008      	b.n	800f590 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800f57e:	f7f8 fce5 	bl	8007f4c <HAL_GetTick>
 800f582:	4602      	mov	r2, r0
 800f584:	693b      	ldr	r3, [r7, #16]
 800f586:	1ad3      	subs	r3, r2, r3
 800f588:	f247 522f 	movw	r2, #29999	; 0x752f
 800f58c:	4293      	cmp	r3, r2
 800f58e:	d9ee      	bls.n	800f56e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800f590:	7dfb      	ldrb	r3, [r7, #23]
}
 800f592:	4618      	mov	r0, r3
 800f594:	3718      	adds	r7, #24
 800f596:	46bd      	mov	sp, r7
 800f598:	bd80      	pop	{r7, pc}
 800f59a:	bf00      	nop
 800f59c:	2003c458 	.word	0x2003c458

0800f5a0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800f5a0:	b580      	push	{r7, lr}
 800f5a2:	b08c      	sub	sp, #48	; 0x30
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	4603      	mov	r3, r0
 800f5a8:	603a      	str	r2, [r7, #0]
 800f5aa:	71fb      	strb	r3, [r7, #7]
 800f5ac:	460b      	mov	r3, r1
 800f5ae:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800f5b0:	2301      	movs	r3, #1
 800f5b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f5b6:	4b25      	ldr	r3, [pc, #148]	; (800f64c <SD_ioctl+0xac>)
 800f5b8:	781b      	ldrb	r3, [r3, #0]
 800f5ba:	b2db      	uxtb	r3, r3
 800f5bc:	f003 0301 	and.w	r3, r3, #1
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d001      	beq.n	800f5c8 <SD_ioctl+0x28>
 800f5c4:	2303      	movs	r3, #3
 800f5c6:	e03c      	b.n	800f642 <SD_ioctl+0xa2>

  switch (cmd)
 800f5c8:	79bb      	ldrb	r3, [r7, #6]
 800f5ca:	2b03      	cmp	r3, #3
 800f5cc:	d834      	bhi.n	800f638 <SD_ioctl+0x98>
 800f5ce:	a201      	add	r2, pc, #4	; (adr r2, 800f5d4 <SD_ioctl+0x34>)
 800f5d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5d4:	0800f5e5 	.word	0x0800f5e5
 800f5d8:	0800f5ed 	.word	0x0800f5ed
 800f5dc:	0800f605 	.word	0x0800f605
 800f5e0:	0800f61f 	.word	0x0800f61f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f5ea:	e028      	b.n	800f63e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800f5ec:	f107 030c 	add.w	r3, r7, #12
 800f5f0:	4618      	mov	r0, r3
 800f5f2:	f7ff fe67 	bl	800f2c4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800f5f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5f8:	683b      	ldr	r3, [r7, #0]
 800f5fa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f5fc:	2300      	movs	r3, #0
 800f5fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f602:	e01c      	b.n	800f63e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f604:	f107 030c 	add.w	r3, r7, #12
 800f608:	4618      	mov	r0, r3
 800f60a:	f7ff fe5b 	bl	800f2c4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800f60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f610:	b29a      	uxth	r2, r3
 800f612:	683b      	ldr	r3, [r7, #0]
 800f614:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800f616:	2300      	movs	r3, #0
 800f618:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f61c:	e00f      	b.n	800f63e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f61e:	f107 030c 	add.w	r3, r7, #12
 800f622:	4618      	mov	r0, r3
 800f624:	f7ff fe4e 	bl	800f2c4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800f628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f62a:	0a5a      	lsrs	r2, r3, #9
 800f62c:	683b      	ldr	r3, [r7, #0]
 800f62e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f630:	2300      	movs	r3, #0
 800f632:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f636:	e002      	b.n	800f63e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800f638:	2304      	movs	r3, #4
 800f63a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800f63e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f642:	4618      	mov	r0, r3
 800f644:	3730      	adds	r7, #48	; 0x30
 800f646:	46bd      	mov	sp, r7
 800f648:	bd80      	pop	{r7, pc}
 800f64a:	bf00      	nop
 800f64c:	20000009 	.word	0x20000009

0800f650 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800f650:	b480      	push	{r7}
 800f652:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800f654:	4b03      	ldr	r3, [pc, #12]	; (800f664 <BSP_SD_WriteCpltCallback+0x14>)
 800f656:	2201      	movs	r2, #1
 800f658:	601a      	str	r2, [r3, #0]
}
 800f65a:	bf00      	nop
 800f65c:	46bd      	mov	sp, r7
 800f65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f662:	4770      	bx	lr
 800f664:	2003c458 	.word	0x2003c458

0800f668 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800f668:	b480      	push	{r7}
 800f66a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800f66c:	4b03      	ldr	r3, [pc, #12]	; (800f67c <BSP_SD_ReadCpltCallback+0x14>)
 800f66e:	2201      	movs	r2, #1
 800f670:	601a      	str	r2, [r3, #0]
}
 800f672:	bf00      	nop
 800f674:	46bd      	mov	sp, r7
 800f676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f67a:	4770      	bx	lr
 800f67c:	2003c45c 	.word	0x2003c45c

0800f680 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b084      	sub	sp, #16
 800f684:	af00      	add	r7, sp, #0
 800f686:	4603      	mov	r3, r0
 800f688:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f68a:	79fb      	ldrb	r3, [r7, #7]
 800f68c:	4a08      	ldr	r2, [pc, #32]	; (800f6b0 <disk_status+0x30>)
 800f68e:	009b      	lsls	r3, r3, #2
 800f690:	4413      	add	r3, r2
 800f692:	685b      	ldr	r3, [r3, #4]
 800f694:	685b      	ldr	r3, [r3, #4]
 800f696:	79fa      	ldrb	r2, [r7, #7]
 800f698:	4905      	ldr	r1, [pc, #20]	; (800f6b0 <disk_status+0x30>)
 800f69a:	440a      	add	r2, r1
 800f69c:	7a12      	ldrb	r2, [r2, #8]
 800f69e:	4610      	mov	r0, r2
 800f6a0:	4798      	blx	r3
 800f6a2:	4603      	mov	r3, r0
 800f6a4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f6a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	3710      	adds	r7, #16
 800f6ac:	46bd      	mov	sp, r7
 800f6ae:	bd80      	pop	{r7, pc}
 800f6b0:	2003c488 	.word	0x2003c488

0800f6b4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f6b4:	b580      	push	{r7, lr}
 800f6b6:	b084      	sub	sp, #16
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	4603      	mov	r3, r0
 800f6bc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f6be:	2300      	movs	r3, #0
 800f6c0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800f6c2:	79fb      	ldrb	r3, [r7, #7]
 800f6c4:	4a0d      	ldr	r2, [pc, #52]	; (800f6fc <disk_initialize+0x48>)
 800f6c6:	5cd3      	ldrb	r3, [r2, r3]
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d111      	bne.n	800f6f0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800f6cc:	79fb      	ldrb	r3, [r7, #7]
 800f6ce:	4a0b      	ldr	r2, [pc, #44]	; (800f6fc <disk_initialize+0x48>)
 800f6d0:	2101      	movs	r1, #1
 800f6d2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f6d4:	79fb      	ldrb	r3, [r7, #7]
 800f6d6:	4a09      	ldr	r2, [pc, #36]	; (800f6fc <disk_initialize+0x48>)
 800f6d8:	009b      	lsls	r3, r3, #2
 800f6da:	4413      	add	r3, r2
 800f6dc:	685b      	ldr	r3, [r3, #4]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	79fa      	ldrb	r2, [r7, #7]
 800f6e2:	4906      	ldr	r1, [pc, #24]	; (800f6fc <disk_initialize+0x48>)
 800f6e4:	440a      	add	r2, r1
 800f6e6:	7a12      	ldrb	r2, [r2, #8]
 800f6e8:	4610      	mov	r0, r2
 800f6ea:	4798      	blx	r3
 800f6ec:	4603      	mov	r3, r0
 800f6ee:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800f6f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6f2:	4618      	mov	r0, r3
 800f6f4:	3710      	adds	r7, #16
 800f6f6:	46bd      	mov	sp, r7
 800f6f8:	bd80      	pop	{r7, pc}
 800f6fa:	bf00      	nop
 800f6fc:	2003c488 	.word	0x2003c488

0800f700 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f700:	b590      	push	{r4, r7, lr}
 800f702:	b087      	sub	sp, #28
 800f704:	af00      	add	r7, sp, #0
 800f706:	60b9      	str	r1, [r7, #8]
 800f708:	607a      	str	r2, [r7, #4]
 800f70a:	603b      	str	r3, [r7, #0]
 800f70c:	4603      	mov	r3, r0
 800f70e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f710:	7bfb      	ldrb	r3, [r7, #15]
 800f712:	4a0a      	ldr	r2, [pc, #40]	; (800f73c <disk_read+0x3c>)
 800f714:	009b      	lsls	r3, r3, #2
 800f716:	4413      	add	r3, r2
 800f718:	685b      	ldr	r3, [r3, #4]
 800f71a:	689c      	ldr	r4, [r3, #8]
 800f71c:	7bfb      	ldrb	r3, [r7, #15]
 800f71e:	4a07      	ldr	r2, [pc, #28]	; (800f73c <disk_read+0x3c>)
 800f720:	4413      	add	r3, r2
 800f722:	7a18      	ldrb	r0, [r3, #8]
 800f724:	683b      	ldr	r3, [r7, #0]
 800f726:	687a      	ldr	r2, [r7, #4]
 800f728:	68b9      	ldr	r1, [r7, #8]
 800f72a:	47a0      	blx	r4
 800f72c:	4603      	mov	r3, r0
 800f72e:	75fb      	strb	r3, [r7, #23]
  return res;
 800f730:	7dfb      	ldrb	r3, [r7, #23]
}
 800f732:	4618      	mov	r0, r3
 800f734:	371c      	adds	r7, #28
 800f736:	46bd      	mov	sp, r7
 800f738:	bd90      	pop	{r4, r7, pc}
 800f73a:	bf00      	nop
 800f73c:	2003c488 	.word	0x2003c488

0800f740 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f740:	b590      	push	{r4, r7, lr}
 800f742:	b087      	sub	sp, #28
 800f744:	af00      	add	r7, sp, #0
 800f746:	60b9      	str	r1, [r7, #8]
 800f748:	607a      	str	r2, [r7, #4]
 800f74a:	603b      	str	r3, [r7, #0]
 800f74c:	4603      	mov	r3, r0
 800f74e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f750:	7bfb      	ldrb	r3, [r7, #15]
 800f752:	4a0a      	ldr	r2, [pc, #40]	; (800f77c <disk_write+0x3c>)
 800f754:	009b      	lsls	r3, r3, #2
 800f756:	4413      	add	r3, r2
 800f758:	685b      	ldr	r3, [r3, #4]
 800f75a:	68dc      	ldr	r4, [r3, #12]
 800f75c:	7bfb      	ldrb	r3, [r7, #15]
 800f75e:	4a07      	ldr	r2, [pc, #28]	; (800f77c <disk_write+0x3c>)
 800f760:	4413      	add	r3, r2
 800f762:	7a18      	ldrb	r0, [r3, #8]
 800f764:	683b      	ldr	r3, [r7, #0]
 800f766:	687a      	ldr	r2, [r7, #4]
 800f768:	68b9      	ldr	r1, [r7, #8]
 800f76a:	47a0      	blx	r4
 800f76c:	4603      	mov	r3, r0
 800f76e:	75fb      	strb	r3, [r7, #23]
  return res;
 800f770:	7dfb      	ldrb	r3, [r7, #23]
}
 800f772:	4618      	mov	r0, r3
 800f774:	371c      	adds	r7, #28
 800f776:	46bd      	mov	sp, r7
 800f778:	bd90      	pop	{r4, r7, pc}
 800f77a:	bf00      	nop
 800f77c:	2003c488 	.word	0x2003c488

0800f780 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800f780:	b580      	push	{r7, lr}
 800f782:	b084      	sub	sp, #16
 800f784:	af00      	add	r7, sp, #0
 800f786:	4603      	mov	r3, r0
 800f788:	603a      	str	r2, [r7, #0]
 800f78a:	71fb      	strb	r3, [r7, #7]
 800f78c:	460b      	mov	r3, r1
 800f78e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800f790:	79fb      	ldrb	r3, [r7, #7]
 800f792:	4a09      	ldr	r2, [pc, #36]	; (800f7b8 <disk_ioctl+0x38>)
 800f794:	009b      	lsls	r3, r3, #2
 800f796:	4413      	add	r3, r2
 800f798:	685b      	ldr	r3, [r3, #4]
 800f79a:	691b      	ldr	r3, [r3, #16]
 800f79c:	79fa      	ldrb	r2, [r7, #7]
 800f79e:	4906      	ldr	r1, [pc, #24]	; (800f7b8 <disk_ioctl+0x38>)
 800f7a0:	440a      	add	r2, r1
 800f7a2:	7a10      	ldrb	r0, [r2, #8]
 800f7a4:	79b9      	ldrb	r1, [r7, #6]
 800f7a6:	683a      	ldr	r2, [r7, #0]
 800f7a8:	4798      	blx	r3
 800f7aa:	4603      	mov	r3, r0
 800f7ac:	73fb      	strb	r3, [r7, #15]
  return res;
 800f7ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	3710      	adds	r7, #16
 800f7b4:	46bd      	mov	sp, r7
 800f7b6:	bd80      	pop	{r7, pc}
 800f7b8:	2003c488 	.word	0x2003c488

0800f7bc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800f7bc:	b480      	push	{r7}
 800f7be:	b085      	sub	sp, #20
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	3301      	adds	r3, #1
 800f7c8:	781b      	ldrb	r3, [r3, #0]
 800f7ca:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800f7cc:	89fb      	ldrh	r3, [r7, #14]
 800f7ce:	021b      	lsls	r3, r3, #8
 800f7d0:	b21a      	sxth	r2, r3
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	781b      	ldrb	r3, [r3, #0]
 800f7d6:	b21b      	sxth	r3, r3
 800f7d8:	4313      	orrs	r3, r2
 800f7da:	b21b      	sxth	r3, r3
 800f7dc:	81fb      	strh	r3, [r7, #14]
	return rv;
 800f7de:	89fb      	ldrh	r3, [r7, #14]
}
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	3714      	adds	r7, #20
 800f7e4:	46bd      	mov	sp, r7
 800f7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ea:	4770      	bx	lr

0800f7ec <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800f7ec:	b480      	push	{r7}
 800f7ee:	b085      	sub	sp, #20
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	3303      	adds	r3, #3
 800f7f8:	781b      	ldrb	r3, [r3, #0]
 800f7fa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	021b      	lsls	r3, r3, #8
 800f800:	687a      	ldr	r2, [r7, #4]
 800f802:	3202      	adds	r2, #2
 800f804:	7812      	ldrb	r2, [r2, #0]
 800f806:	4313      	orrs	r3, r2
 800f808:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	021b      	lsls	r3, r3, #8
 800f80e:	687a      	ldr	r2, [r7, #4]
 800f810:	3201      	adds	r2, #1
 800f812:	7812      	ldrb	r2, [r2, #0]
 800f814:	4313      	orrs	r3, r2
 800f816:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	021b      	lsls	r3, r3, #8
 800f81c:	687a      	ldr	r2, [r7, #4]
 800f81e:	7812      	ldrb	r2, [r2, #0]
 800f820:	4313      	orrs	r3, r2
 800f822:	60fb      	str	r3, [r7, #12]
	return rv;
 800f824:	68fb      	ldr	r3, [r7, #12]
}
 800f826:	4618      	mov	r0, r3
 800f828:	3714      	adds	r7, #20
 800f82a:	46bd      	mov	sp, r7
 800f82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f830:	4770      	bx	lr

0800f832 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800f832:	b480      	push	{r7}
 800f834:	b083      	sub	sp, #12
 800f836:	af00      	add	r7, sp, #0
 800f838:	6078      	str	r0, [r7, #4]
 800f83a:	460b      	mov	r3, r1
 800f83c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	1c5a      	adds	r2, r3, #1
 800f842:	607a      	str	r2, [r7, #4]
 800f844:	887a      	ldrh	r2, [r7, #2]
 800f846:	b2d2      	uxtb	r2, r2
 800f848:	701a      	strb	r2, [r3, #0]
 800f84a:	887b      	ldrh	r3, [r7, #2]
 800f84c:	0a1b      	lsrs	r3, r3, #8
 800f84e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	1c5a      	adds	r2, r3, #1
 800f854:	607a      	str	r2, [r7, #4]
 800f856:	887a      	ldrh	r2, [r7, #2]
 800f858:	b2d2      	uxtb	r2, r2
 800f85a:	701a      	strb	r2, [r3, #0]
}
 800f85c:	bf00      	nop
 800f85e:	370c      	adds	r7, #12
 800f860:	46bd      	mov	sp, r7
 800f862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f866:	4770      	bx	lr

0800f868 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800f868:	b480      	push	{r7}
 800f86a:	b083      	sub	sp, #12
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	6078      	str	r0, [r7, #4]
 800f870:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	1c5a      	adds	r2, r3, #1
 800f876:	607a      	str	r2, [r7, #4]
 800f878:	683a      	ldr	r2, [r7, #0]
 800f87a:	b2d2      	uxtb	r2, r2
 800f87c:	701a      	strb	r2, [r3, #0]
 800f87e:	683b      	ldr	r3, [r7, #0]
 800f880:	0a1b      	lsrs	r3, r3, #8
 800f882:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	1c5a      	adds	r2, r3, #1
 800f888:	607a      	str	r2, [r7, #4]
 800f88a:	683a      	ldr	r2, [r7, #0]
 800f88c:	b2d2      	uxtb	r2, r2
 800f88e:	701a      	strb	r2, [r3, #0]
 800f890:	683b      	ldr	r3, [r7, #0]
 800f892:	0a1b      	lsrs	r3, r3, #8
 800f894:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	1c5a      	adds	r2, r3, #1
 800f89a:	607a      	str	r2, [r7, #4]
 800f89c:	683a      	ldr	r2, [r7, #0]
 800f89e:	b2d2      	uxtb	r2, r2
 800f8a0:	701a      	strb	r2, [r3, #0]
 800f8a2:	683b      	ldr	r3, [r7, #0]
 800f8a4:	0a1b      	lsrs	r3, r3, #8
 800f8a6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	1c5a      	adds	r2, r3, #1
 800f8ac:	607a      	str	r2, [r7, #4]
 800f8ae:	683a      	ldr	r2, [r7, #0]
 800f8b0:	b2d2      	uxtb	r2, r2
 800f8b2:	701a      	strb	r2, [r3, #0]
}
 800f8b4:	bf00      	nop
 800f8b6:	370c      	adds	r7, #12
 800f8b8:	46bd      	mov	sp, r7
 800f8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8be:	4770      	bx	lr

0800f8c0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f8c0:	b480      	push	{r7}
 800f8c2:	b087      	sub	sp, #28
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	60f8      	str	r0, [r7, #12]
 800f8c8:	60b9      	str	r1, [r7, #8]
 800f8ca:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800f8d0:	68bb      	ldr	r3, [r7, #8]
 800f8d2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d00d      	beq.n	800f8f6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800f8da:	693a      	ldr	r2, [r7, #16]
 800f8dc:	1c53      	adds	r3, r2, #1
 800f8de:	613b      	str	r3, [r7, #16]
 800f8e0:	697b      	ldr	r3, [r7, #20]
 800f8e2:	1c59      	adds	r1, r3, #1
 800f8e4:	6179      	str	r1, [r7, #20]
 800f8e6:	7812      	ldrb	r2, [r2, #0]
 800f8e8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	3b01      	subs	r3, #1
 800f8ee:	607b      	str	r3, [r7, #4]
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d1f1      	bne.n	800f8da <mem_cpy+0x1a>
	}
}
 800f8f6:	bf00      	nop
 800f8f8:	371c      	adds	r7, #28
 800f8fa:	46bd      	mov	sp, r7
 800f8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f900:	4770      	bx	lr

0800f902 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800f902:	b480      	push	{r7}
 800f904:	b087      	sub	sp, #28
 800f906:	af00      	add	r7, sp, #0
 800f908:	60f8      	str	r0, [r7, #12]
 800f90a:	60b9      	str	r1, [r7, #8]
 800f90c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800f912:	697b      	ldr	r3, [r7, #20]
 800f914:	1c5a      	adds	r2, r3, #1
 800f916:	617a      	str	r2, [r7, #20]
 800f918:	68ba      	ldr	r2, [r7, #8]
 800f91a:	b2d2      	uxtb	r2, r2
 800f91c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	3b01      	subs	r3, #1
 800f922:	607b      	str	r3, [r7, #4]
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d1f3      	bne.n	800f912 <mem_set+0x10>
}
 800f92a:	bf00      	nop
 800f92c:	371c      	adds	r7, #28
 800f92e:	46bd      	mov	sp, r7
 800f930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f934:	4770      	bx	lr

0800f936 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800f936:	b480      	push	{r7}
 800f938:	b089      	sub	sp, #36	; 0x24
 800f93a:	af00      	add	r7, sp, #0
 800f93c:	60f8      	str	r0, [r7, #12]
 800f93e:	60b9      	str	r1, [r7, #8]
 800f940:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	61fb      	str	r3, [r7, #28]
 800f946:	68bb      	ldr	r3, [r7, #8]
 800f948:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800f94a:	2300      	movs	r3, #0
 800f94c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800f94e:	69fb      	ldr	r3, [r7, #28]
 800f950:	1c5a      	adds	r2, r3, #1
 800f952:	61fa      	str	r2, [r7, #28]
 800f954:	781b      	ldrb	r3, [r3, #0]
 800f956:	4619      	mov	r1, r3
 800f958:	69bb      	ldr	r3, [r7, #24]
 800f95a:	1c5a      	adds	r2, r3, #1
 800f95c:	61ba      	str	r2, [r7, #24]
 800f95e:	781b      	ldrb	r3, [r3, #0]
 800f960:	1acb      	subs	r3, r1, r3
 800f962:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	3b01      	subs	r3, #1
 800f968:	607b      	str	r3, [r7, #4]
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d002      	beq.n	800f976 <mem_cmp+0x40>
 800f970:	697b      	ldr	r3, [r7, #20]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d0eb      	beq.n	800f94e <mem_cmp+0x18>

	return r;
 800f976:	697b      	ldr	r3, [r7, #20]
}
 800f978:	4618      	mov	r0, r3
 800f97a:	3724      	adds	r7, #36	; 0x24
 800f97c:	46bd      	mov	sp, r7
 800f97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f982:	4770      	bx	lr

0800f984 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800f984:	b480      	push	{r7}
 800f986:	b083      	sub	sp, #12
 800f988:	af00      	add	r7, sp, #0
 800f98a:	6078      	str	r0, [r7, #4]
 800f98c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800f98e:	e002      	b.n	800f996 <chk_chr+0x12>
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	3301      	adds	r3, #1
 800f994:	607b      	str	r3, [r7, #4]
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	781b      	ldrb	r3, [r3, #0]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d005      	beq.n	800f9aa <chk_chr+0x26>
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	781b      	ldrb	r3, [r3, #0]
 800f9a2:	461a      	mov	r2, r3
 800f9a4:	683b      	ldr	r3, [r7, #0]
 800f9a6:	4293      	cmp	r3, r2
 800f9a8:	d1f2      	bne.n	800f990 <chk_chr+0xc>
	return *str;
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	781b      	ldrb	r3, [r3, #0]
}
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	370c      	adds	r7, #12
 800f9b2:	46bd      	mov	sp, r7
 800f9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b8:	4770      	bx	lr
	...

0800f9bc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f9bc:	b480      	push	{r7}
 800f9be:	b085      	sub	sp, #20
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	6078      	str	r0, [r7, #4]
 800f9c4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f9c6:	2300      	movs	r3, #0
 800f9c8:	60bb      	str	r3, [r7, #8]
 800f9ca:	68bb      	ldr	r3, [r7, #8]
 800f9cc:	60fb      	str	r3, [r7, #12]
 800f9ce:	e029      	b.n	800fa24 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800f9d0:	4a27      	ldr	r2, [pc, #156]	; (800fa70 <chk_lock+0xb4>)
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	011b      	lsls	r3, r3, #4
 800f9d6:	4413      	add	r3, r2
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d01d      	beq.n	800fa1a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f9de:	4a24      	ldr	r2, [pc, #144]	; (800fa70 <chk_lock+0xb4>)
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	011b      	lsls	r3, r3, #4
 800f9e4:	4413      	add	r3, r2
 800f9e6:	681a      	ldr	r2, [r3, #0]
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	429a      	cmp	r2, r3
 800f9ee:	d116      	bne.n	800fa1e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800f9f0:	4a1f      	ldr	r2, [pc, #124]	; (800fa70 <chk_lock+0xb4>)
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	011b      	lsls	r3, r3, #4
 800f9f6:	4413      	add	r3, r2
 800f9f8:	3304      	adds	r3, #4
 800f9fa:	681a      	ldr	r2, [r3, #0]
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800fa00:	429a      	cmp	r2, r3
 800fa02:	d10c      	bne.n	800fa1e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800fa04:	4a1a      	ldr	r2, [pc, #104]	; (800fa70 <chk_lock+0xb4>)
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	011b      	lsls	r3, r3, #4
 800fa0a:	4413      	add	r3, r2
 800fa0c:	3308      	adds	r3, #8
 800fa0e:	681a      	ldr	r2, [r3, #0]
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800fa14:	429a      	cmp	r2, r3
 800fa16:	d102      	bne.n	800fa1e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800fa18:	e007      	b.n	800fa2a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800fa1a:	2301      	movs	r3, #1
 800fa1c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	3301      	adds	r3, #1
 800fa22:	60fb      	str	r3, [r7, #12]
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	2b01      	cmp	r3, #1
 800fa28:	d9d2      	bls.n	800f9d0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	2b02      	cmp	r3, #2
 800fa2e:	d109      	bne.n	800fa44 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800fa30:	68bb      	ldr	r3, [r7, #8]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d102      	bne.n	800fa3c <chk_lock+0x80>
 800fa36:	683b      	ldr	r3, [r7, #0]
 800fa38:	2b02      	cmp	r3, #2
 800fa3a:	d101      	bne.n	800fa40 <chk_lock+0x84>
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	e010      	b.n	800fa62 <chk_lock+0xa6>
 800fa40:	2312      	movs	r3, #18
 800fa42:	e00e      	b.n	800fa62 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800fa44:	683b      	ldr	r3, [r7, #0]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d108      	bne.n	800fa5c <chk_lock+0xa0>
 800fa4a:	4a09      	ldr	r2, [pc, #36]	; (800fa70 <chk_lock+0xb4>)
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	011b      	lsls	r3, r3, #4
 800fa50:	4413      	add	r3, r2
 800fa52:	330c      	adds	r3, #12
 800fa54:	881b      	ldrh	r3, [r3, #0]
 800fa56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fa5a:	d101      	bne.n	800fa60 <chk_lock+0xa4>
 800fa5c:	2310      	movs	r3, #16
 800fa5e:	e000      	b.n	800fa62 <chk_lock+0xa6>
 800fa60:	2300      	movs	r3, #0
}
 800fa62:	4618      	mov	r0, r3
 800fa64:	3714      	adds	r7, #20
 800fa66:	46bd      	mov	sp, r7
 800fa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6c:	4770      	bx	lr
 800fa6e:	bf00      	nop
 800fa70:	2003c468 	.word	0x2003c468

0800fa74 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800fa74:	b480      	push	{r7}
 800fa76:	b083      	sub	sp, #12
 800fa78:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	607b      	str	r3, [r7, #4]
 800fa7e:	e002      	b.n	800fa86 <enq_lock+0x12>
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	3301      	adds	r3, #1
 800fa84:	607b      	str	r3, [r7, #4]
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	2b01      	cmp	r3, #1
 800fa8a:	d806      	bhi.n	800fa9a <enq_lock+0x26>
 800fa8c:	4a09      	ldr	r2, [pc, #36]	; (800fab4 <enq_lock+0x40>)
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	011b      	lsls	r3, r3, #4
 800fa92:	4413      	add	r3, r2
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d1f2      	bne.n	800fa80 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	2b02      	cmp	r3, #2
 800fa9e:	bf14      	ite	ne
 800faa0:	2301      	movne	r3, #1
 800faa2:	2300      	moveq	r3, #0
 800faa4:	b2db      	uxtb	r3, r3
}
 800faa6:	4618      	mov	r0, r3
 800faa8:	370c      	adds	r7, #12
 800faaa:	46bd      	mov	sp, r7
 800faac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab0:	4770      	bx	lr
 800fab2:	bf00      	nop
 800fab4:	2003c468 	.word	0x2003c468

0800fab8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800fab8:	b480      	push	{r7}
 800faba:	b085      	sub	sp, #20
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	6078      	str	r0, [r7, #4]
 800fac0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800fac2:	2300      	movs	r3, #0
 800fac4:	60fb      	str	r3, [r7, #12]
 800fac6:	e01f      	b.n	800fb08 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800fac8:	4a41      	ldr	r2, [pc, #260]	; (800fbd0 <inc_lock+0x118>)
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	011b      	lsls	r3, r3, #4
 800face:	4413      	add	r3, r2
 800fad0:	681a      	ldr	r2, [r3, #0]
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	429a      	cmp	r2, r3
 800fad8:	d113      	bne.n	800fb02 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800fada:	4a3d      	ldr	r2, [pc, #244]	; (800fbd0 <inc_lock+0x118>)
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	011b      	lsls	r3, r3, #4
 800fae0:	4413      	add	r3, r2
 800fae2:	3304      	adds	r3, #4
 800fae4:	681a      	ldr	r2, [r3, #0]
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800faea:	429a      	cmp	r2, r3
 800faec:	d109      	bne.n	800fb02 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800faee:	4a38      	ldr	r2, [pc, #224]	; (800fbd0 <inc_lock+0x118>)
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	011b      	lsls	r3, r3, #4
 800faf4:	4413      	add	r3, r2
 800faf6:	3308      	adds	r3, #8
 800faf8:	681a      	ldr	r2, [r3, #0]
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800fafe:	429a      	cmp	r2, r3
 800fb00:	d006      	beq.n	800fb10 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	3301      	adds	r3, #1
 800fb06:	60fb      	str	r3, [r7, #12]
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	2b01      	cmp	r3, #1
 800fb0c:	d9dc      	bls.n	800fac8 <inc_lock+0x10>
 800fb0e:	e000      	b.n	800fb12 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800fb10:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	2b02      	cmp	r3, #2
 800fb16:	d132      	bne.n	800fb7e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800fb18:	2300      	movs	r3, #0
 800fb1a:	60fb      	str	r3, [r7, #12]
 800fb1c:	e002      	b.n	800fb24 <inc_lock+0x6c>
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	3301      	adds	r3, #1
 800fb22:	60fb      	str	r3, [r7, #12]
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	2b01      	cmp	r3, #1
 800fb28:	d806      	bhi.n	800fb38 <inc_lock+0x80>
 800fb2a:	4a29      	ldr	r2, [pc, #164]	; (800fbd0 <inc_lock+0x118>)
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	011b      	lsls	r3, r3, #4
 800fb30:	4413      	add	r3, r2
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d1f2      	bne.n	800fb1e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	2b02      	cmp	r3, #2
 800fb3c:	d101      	bne.n	800fb42 <inc_lock+0x8a>
 800fb3e:	2300      	movs	r3, #0
 800fb40:	e040      	b.n	800fbc4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	681a      	ldr	r2, [r3, #0]
 800fb46:	4922      	ldr	r1, [pc, #136]	; (800fbd0 <inc_lock+0x118>)
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	011b      	lsls	r3, r3, #4
 800fb4c:	440b      	add	r3, r1
 800fb4e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	689a      	ldr	r2, [r3, #8]
 800fb54:	491e      	ldr	r1, [pc, #120]	; (800fbd0 <inc_lock+0x118>)
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	011b      	lsls	r3, r3, #4
 800fb5a:	440b      	add	r3, r1
 800fb5c:	3304      	adds	r3, #4
 800fb5e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	695a      	ldr	r2, [r3, #20]
 800fb64:	491a      	ldr	r1, [pc, #104]	; (800fbd0 <inc_lock+0x118>)
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	011b      	lsls	r3, r3, #4
 800fb6a:	440b      	add	r3, r1
 800fb6c:	3308      	adds	r3, #8
 800fb6e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800fb70:	4a17      	ldr	r2, [pc, #92]	; (800fbd0 <inc_lock+0x118>)
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	011b      	lsls	r3, r3, #4
 800fb76:	4413      	add	r3, r2
 800fb78:	330c      	adds	r3, #12
 800fb7a:	2200      	movs	r2, #0
 800fb7c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800fb7e:	683b      	ldr	r3, [r7, #0]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d009      	beq.n	800fb98 <inc_lock+0xe0>
 800fb84:	4a12      	ldr	r2, [pc, #72]	; (800fbd0 <inc_lock+0x118>)
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	011b      	lsls	r3, r3, #4
 800fb8a:	4413      	add	r3, r2
 800fb8c:	330c      	adds	r3, #12
 800fb8e:	881b      	ldrh	r3, [r3, #0]
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d001      	beq.n	800fb98 <inc_lock+0xe0>
 800fb94:	2300      	movs	r3, #0
 800fb96:	e015      	b.n	800fbc4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800fb98:	683b      	ldr	r3, [r7, #0]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d108      	bne.n	800fbb0 <inc_lock+0xf8>
 800fb9e:	4a0c      	ldr	r2, [pc, #48]	; (800fbd0 <inc_lock+0x118>)
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	011b      	lsls	r3, r3, #4
 800fba4:	4413      	add	r3, r2
 800fba6:	330c      	adds	r3, #12
 800fba8:	881b      	ldrh	r3, [r3, #0]
 800fbaa:	3301      	adds	r3, #1
 800fbac:	b29a      	uxth	r2, r3
 800fbae:	e001      	b.n	800fbb4 <inc_lock+0xfc>
 800fbb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fbb4:	4906      	ldr	r1, [pc, #24]	; (800fbd0 <inc_lock+0x118>)
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	011b      	lsls	r3, r3, #4
 800fbba:	440b      	add	r3, r1
 800fbbc:	330c      	adds	r3, #12
 800fbbe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	3301      	adds	r3, #1
}
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	3714      	adds	r7, #20
 800fbc8:	46bd      	mov	sp, r7
 800fbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbce:	4770      	bx	lr
 800fbd0:	2003c468 	.word	0x2003c468

0800fbd4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800fbd4:	b480      	push	{r7}
 800fbd6:	b085      	sub	sp, #20
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	3b01      	subs	r3, #1
 800fbe0:	607b      	str	r3, [r7, #4]
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	2b01      	cmp	r3, #1
 800fbe6:	d825      	bhi.n	800fc34 <dec_lock+0x60>
		n = Files[i].ctr;
 800fbe8:	4a17      	ldr	r2, [pc, #92]	; (800fc48 <dec_lock+0x74>)
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	011b      	lsls	r3, r3, #4
 800fbee:	4413      	add	r3, r2
 800fbf0:	330c      	adds	r3, #12
 800fbf2:	881b      	ldrh	r3, [r3, #0]
 800fbf4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800fbf6:	89fb      	ldrh	r3, [r7, #14]
 800fbf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fbfc:	d101      	bne.n	800fc02 <dec_lock+0x2e>
 800fbfe:	2300      	movs	r3, #0
 800fc00:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800fc02:	89fb      	ldrh	r3, [r7, #14]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d002      	beq.n	800fc0e <dec_lock+0x3a>
 800fc08:	89fb      	ldrh	r3, [r7, #14]
 800fc0a:	3b01      	subs	r3, #1
 800fc0c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800fc0e:	4a0e      	ldr	r2, [pc, #56]	; (800fc48 <dec_lock+0x74>)
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	011b      	lsls	r3, r3, #4
 800fc14:	4413      	add	r3, r2
 800fc16:	330c      	adds	r3, #12
 800fc18:	89fa      	ldrh	r2, [r7, #14]
 800fc1a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800fc1c:	89fb      	ldrh	r3, [r7, #14]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d105      	bne.n	800fc2e <dec_lock+0x5a>
 800fc22:	4a09      	ldr	r2, [pc, #36]	; (800fc48 <dec_lock+0x74>)
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	011b      	lsls	r3, r3, #4
 800fc28:	4413      	add	r3, r2
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800fc2e:	2300      	movs	r3, #0
 800fc30:	737b      	strb	r3, [r7, #13]
 800fc32:	e001      	b.n	800fc38 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800fc34:	2302      	movs	r3, #2
 800fc36:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800fc38:	7b7b      	ldrb	r3, [r7, #13]
}
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	3714      	adds	r7, #20
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc44:	4770      	bx	lr
 800fc46:	bf00      	nop
 800fc48:	2003c468 	.word	0x2003c468

0800fc4c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800fc4c:	b480      	push	{r7}
 800fc4e:	b085      	sub	sp, #20
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800fc54:	2300      	movs	r3, #0
 800fc56:	60fb      	str	r3, [r7, #12]
 800fc58:	e010      	b.n	800fc7c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800fc5a:	4a0d      	ldr	r2, [pc, #52]	; (800fc90 <clear_lock+0x44>)
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	011b      	lsls	r3, r3, #4
 800fc60:	4413      	add	r3, r2
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	687a      	ldr	r2, [r7, #4]
 800fc66:	429a      	cmp	r2, r3
 800fc68:	d105      	bne.n	800fc76 <clear_lock+0x2a>
 800fc6a:	4a09      	ldr	r2, [pc, #36]	; (800fc90 <clear_lock+0x44>)
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	011b      	lsls	r3, r3, #4
 800fc70:	4413      	add	r3, r2
 800fc72:	2200      	movs	r2, #0
 800fc74:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	3301      	adds	r3, #1
 800fc7a:	60fb      	str	r3, [r7, #12]
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	2b01      	cmp	r3, #1
 800fc80:	d9eb      	bls.n	800fc5a <clear_lock+0xe>
	}
}
 800fc82:	bf00      	nop
 800fc84:	3714      	adds	r7, #20
 800fc86:	46bd      	mov	sp, r7
 800fc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc8c:	4770      	bx	lr
 800fc8e:	bf00      	nop
 800fc90:	2003c468 	.word	0x2003c468

0800fc94 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b086      	sub	sp, #24
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	78db      	ldrb	r3, [r3, #3]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d034      	beq.n	800fd12 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fcac:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	7858      	ldrb	r0, [r3, #1]
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fcb8:	2301      	movs	r3, #1
 800fcba:	697a      	ldr	r2, [r7, #20]
 800fcbc:	f7ff fd40 	bl	800f740 <disk_write>
 800fcc0:	4603      	mov	r3, r0
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d002      	beq.n	800fccc <sync_window+0x38>
			res = FR_DISK_ERR;
 800fcc6:	2301      	movs	r3, #1
 800fcc8:	73fb      	strb	r3, [r7, #15]
 800fcca:	e022      	b.n	800fd12 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	2200      	movs	r2, #0
 800fcd0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcd6:	697a      	ldr	r2, [r7, #20]
 800fcd8:	1ad2      	subs	r2, r2, r3
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	6a1b      	ldr	r3, [r3, #32]
 800fcde:	429a      	cmp	r2, r3
 800fce0:	d217      	bcs.n	800fd12 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	789b      	ldrb	r3, [r3, #2]
 800fce6:	613b      	str	r3, [r7, #16]
 800fce8:	e010      	b.n	800fd0c <sync_window+0x78>
					wsect += fs->fsize;
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	6a1b      	ldr	r3, [r3, #32]
 800fcee:	697a      	ldr	r2, [r7, #20]
 800fcf0:	4413      	add	r3, r2
 800fcf2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	7858      	ldrb	r0, [r3, #1]
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fcfe:	2301      	movs	r3, #1
 800fd00:	697a      	ldr	r2, [r7, #20]
 800fd02:	f7ff fd1d 	bl	800f740 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fd06:	693b      	ldr	r3, [r7, #16]
 800fd08:	3b01      	subs	r3, #1
 800fd0a:	613b      	str	r3, [r7, #16]
 800fd0c:	693b      	ldr	r3, [r7, #16]
 800fd0e:	2b01      	cmp	r3, #1
 800fd10:	d8eb      	bhi.n	800fcea <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800fd12:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd14:	4618      	mov	r0, r3
 800fd16:	3718      	adds	r7, #24
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	bd80      	pop	{r7, pc}

0800fd1c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800fd1c:	b580      	push	{r7, lr}
 800fd1e:	b084      	sub	sp, #16
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	6078      	str	r0, [r7, #4]
 800fd24:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800fd26:	2300      	movs	r3, #0
 800fd28:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd2e:	683a      	ldr	r2, [r7, #0]
 800fd30:	429a      	cmp	r2, r3
 800fd32:	d01b      	beq.n	800fd6c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800fd34:	6878      	ldr	r0, [r7, #4]
 800fd36:	f7ff ffad 	bl	800fc94 <sync_window>
 800fd3a:	4603      	mov	r3, r0
 800fd3c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800fd3e:	7bfb      	ldrb	r3, [r7, #15]
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d113      	bne.n	800fd6c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	7858      	ldrb	r0, [r3, #1]
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fd4e:	2301      	movs	r3, #1
 800fd50:	683a      	ldr	r2, [r7, #0]
 800fd52:	f7ff fcd5 	bl	800f700 <disk_read>
 800fd56:	4603      	mov	r3, r0
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d004      	beq.n	800fd66 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800fd5c:	f04f 33ff 	mov.w	r3, #4294967295
 800fd60:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800fd62:	2301      	movs	r3, #1
 800fd64:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	683a      	ldr	r2, [r7, #0]
 800fd6a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800fd6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd6e:	4618      	mov	r0, r3
 800fd70:	3710      	adds	r7, #16
 800fd72:	46bd      	mov	sp, r7
 800fd74:	bd80      	pop	{r7, pc}
	...

0800fd78 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b084      	sub	sp, #16
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800fd80:	6878      	ldr	r0, [r7, #4]
 800fd82:	f7ff ff87 	bl	800fc94 <sync_window>
 800fd86:	4603      	mov	r3, r0
 800fd88:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800fd8a:	7bfb      	ldrb	r3, [r7, #15]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d159      	bne.n	800fe44 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	781b      	ldrb	r3, [r3, #0]
 800fd94:	2b03      	cmp	r3, #3
 800fd96:	d149      	bne.n	800fe2c <sync_fs+0xb4>
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	791b      	ldrb	r3, [r3, #4]
 800fd9c:	2b01      	cmp	r3, #1
 800fd9e:	d145      	bne.n	800fe2c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	899b      	ldrh	r3, [r3, #12]
 800fdaa:	461a      	mov	r2, r3
 800fdac:	2100      	movs	r1, #0
 800fdae:	f7ff fda8 	bl	800f902 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	3338      	adds	r3, #56	; 0x38
 800fdb6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fdba:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	f7ff fd37 	bl	800f832 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	3338      	adds	r3, #56	; 0x38
 800fdc8:	4921      	ldr	r1, [pc, #132]	; (800fe50 <sync_fs+0xd8>)
 800fdca:	4618      	mov	r0, r3
 800fdcc:	f7ff fd4c 	bl	800f868 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	3338      	adds	r3, #56	; 0x38
 800fdd4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800fdd8:	491e      	ldr	r1, [pc, #120]	; (800fe54 <sync_fs+0xdc>)
 800fdda:	4618      	mov	r0, r3
 800fddc:	f7ff fd44 	bl	800f868 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	3338      	adds	r3, #56	; 0x38
 800fde4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	695b      	ldr	r3, [r3, #20]
 800fdec:	4619      	mov	r1, r3
 800fdee:	4610      	mov	r0, r2
 800fdf0:	f7ff fd3a 	bl	800f868 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	3338      	adds	r3, #56	; 0x38
 800fdf8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	691b      	ldr	r3, [r3, #16]
 800fe00:	4619      	mov	r1, r3
 800fe02:	4610      	mov	r0, r2
 800fe04:	f7ff fd30 	bl	800f868 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe0c:	1c5a      	adds	r2, r3, #1
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	7858      	ldrb	r0, [r3, #1]
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fe20:	2301      	movs	r3, #1
 800fe22:	f7ff fc8d 	bl	800f740 <disk_write>
			fs->fsi_flag = 0;
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	2200      	movs	r2, #0
 800fe2a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	785b      	ldrb	r3, [r3, #1]
 800fe30:	2200      	movs	r2, #0
 800fe32:	2100      	movs	r1, #0
 800fe34:	4618      	mov	r0, r3
 800fe36:	f7ff fca3 	bl	800f780 <disk_ioctl>
 800fe3a:	4603      	mov	r3, r0
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d001      	beq.n	800fe44 <sync_fs+0xcc>
 800fe40:	2301      	movs	r3, #1
 800fe42:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800fe44:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe46:	4618      	mov	r0, r3
 800fe48:	3710      	adds	r7, #16
 800fe4a:	46bd      	mov	sp, r7
 800fe4c:	bd80      	pop	{r7, pc}
 800fe4e:	bf00      	nop
 800fe50:	41615252 	.word	0x41615252
 800fe54:	61417272 	.word	0x61417272

0800fe58 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800fe58:	b480      	push	{r7}
 800fe5a:	b083      	sub	sp, #12
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	6078      	str	r0, [r7, #4]
 800fe60:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800fe62:	683b      	ldr	r3, [r7, #0]
 800fe64:	3b02      	subs	r3, #2
 800fe66:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	69db      	ldr	r3, [r3, #28]
 800fe6c:	3b02      	subs	r3, #2
 800fe6e:	683a      	ldr	r2, [r7, #0]
 800fe70:	429a      	cmp	r2, r3
 800fe72:	d301      	bcc.n	800fe78 <clust2sect+0x20>
 800fe74:	2300      	movs	r3, #0
 800fe76:	e008      	b.n	800fe8a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	895b      	ldrh	r3, [r3, #10]
 800fe7c:	461a      	mov	r2, r3
 800fe7e:	683b      	ldr	r3, [r7, #0]
 800fe80:	fb03 f202 	mul.w	r2, r3, r2
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe88:	4413      	add	r3, r2
}
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	370c      	adds	r7, #12
 800fe8e:	46bd      	mov	sp, r7
 800fe90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe94:	4770      	bx	lr

0800fe96 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800fe96:	b580      	push	{r7, lr}
 800fe98:	b086      	sub	sp, #24
 800fe9a:	af00      	add	r7, sp, #0
 800fe9c:	6078      	str	r0, [r7, #4]
 800fe9e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800fea6:	683b      	ldr	r3, [r7, #0]
 800fea8:	2b01      	cmp	r3, #1
 800feaa:	d904      	bls.n	800feb6 <get_fat+0x20>
 800feac:	693b      	ldr	r3, [r7, #16]
 800feae:	69db      	ldr	r3, [r3, #28]
 800feb0:	683a      	ldr	r2, [r7, #0]
 800feb2:	429a      	cmp	r2, r3
 800feb4:	d302      	bcc.n	800febc <get_fat+0x26>
		val = 1;	/* Internal error */
 800feb6:	2301      	movs	r3, #1
 800feb8:	617b      	str	r3, [r7, #20]
 800feba:	e0b7      	b.n	801002c <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800febc:	f04f 33ff 	mov.w	r3, #4294967295
 800fec0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800fec2:	693b      	ldr	r3, [r7, #16]
 800fec4:	781b      	ldrb	r3, [r3, #0]
 800fec6:	2b02      	cmp	r3, #2
 800fec8:	d05a      	beq.n	800ff80 <get_fat+0xea>
 800feca:	2b03      	cmp	r3, #3
 800fecc:	d07d      	beq.n	800ffca <get_fat+0x134>
 800fece:	2b01      	cmp	r3, #1
 800fed0:	f040 80a2 	bne.w	8010018 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800fed4:	683b      	ldr	r3, [r7, #0]
 800fed6:	60fb      	str	r3, [r7, #12]
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	085b      	lsrs	r3, r3, #1
 800fedc:	68fa      	ldr	r2, [r7, #12]
 800fede:	4413      	add	r3, r2
 800fee0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fee2:	693b      	ldr	r3, [r7, #16]
 800fee4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fee6:	693b      	ldr	r3, [r7, #16]
 800fee8:	899b      	ldrh	r3, [r3, #12]
 800feea:	4619      	mov	r1, r3
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	fbb3 f3f1 	udiv	r3, r3, r1
 800fef2:	4413      	add	r3, r2
 800fef4:	4619      	mov	r1, r3
 800fef6:	6938      	ldr	r0, [r7, #16]
 800fef8:	f7ff ff10 	bl	800fd1c <move_window>
 800fefc:	4603      	mov	r3, r0
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	f040 808d 	bne.w	801001e <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	1c5a      	adds	r2, r3, #1
 800ff08:	60fa      	str	r2, [r7, #12]
 800ff0a:	693a      	ldr	r2, [r7, #16]
 800ff0c:	8992      	ldrh	r2, [r2, #12]
 800ff0e:	fbb3 f1f2 	udiv	r1, r3, r2
 800ff12:	fb02 f201 	mul.w	r2, r2, r1
 800ff16:	1a9b      	subs	r3, r3, r2
 800ff18:	693a      	ldr	r2, [r7, #16]
 800ff1a:	4413      	add	r3, r2
 800ff1c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ff20:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ff22:	693b      	ldr	r3, [r7, #16]
 800ff24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ff26:	693b      	ldr	r3, [r7, #16]
 800ff28:	899b      	ldrh	r3, [r3, #12]
 800ff2a:	4619      	mov	r1, r3
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	fbb3 f3f1 	udiv	r3, r3, r1
 800ff32:	4413      	add	r3, r2
 800ff34:	4619      	mov	r1, r3
 800ff36:	6938      	ldr	r0, [r7, #16]
 800ff38:	f7ff fef0 	bl	800fd1c <move_window>
 800ff3c:	4603      	mov	r3, r0
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d16f      	bne.n	8010022 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ff42:	693b      	ldr	r3, [r7, #16]
 800ff44:	899b      	ldrh	r3, [r3, #12]
 800ff46:	461a      	mov	r2, r3
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	fbb3 f1f2 	udiv	r1, r3, r2
 800ff4e:	fb02 f201 	mul.w	r2, r2, r1
 800ff52:	1a9b      	subs	r3, r3, r2
 800ff54:	693a      	ldr	r2, [r7, #16]
 800ff56:	4413      	add	r3, r2
 800ff58:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ff5c:	021b      	lsls	r3, r3, #8
 800ff5e:	461a      	mov	r2, r3
 800ff60:	68bb      	ldr	r3, [r7, #8]
 800ff62:	4313      	orrs	r3, r2
 800ff64:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ff66:	683b      	ldr	r3, [r7, #0]
 800ff68:	f003 0301 	and.w	r3, r3, #1
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d002      	beq.n	800ff76 <get_fat+0xe0>
 800ff70:	68bb      	ldr	r3, [r7, #8]
 800ff72:	091b      	lsrs	r3, r3, #4
 800ff74:	e002      	b.n	800ff7c <get_fat+0xe6>
 800ff76:	68bb      	ldr	r3, [r7, #8]
 800ff78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ff7c:	617b      	str	r3, [r7, #20]
			break;
 800ff7e:	e055      	b.n	801002c <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ff80:	693b      	ldr	r3, [r7, #16]
 800ff82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ff84:	693b      	ldr	r3, [r7, #16]
 800ff86:	899b      	ldrh	r3, [r3, #12]
 800ff88:	085b      	lsrs	r3, r3, #1
 800ff8a:	b29b      	uxth	r3, r3
 800ff8c:	4619      	mov	r1, r3
 800ff8e:	683b      	ldr	r3, [r7, #0]
 800ff90:	fbb3 f3f1 	udiv	r3, r3, r1
 800ff94:	4413      	add	r3, r2
 800ff96:	4619      	mov	r1, r3
 800ff98:	6938      	ldr	r0, [r7, #16]
 800ff9a:	f7ff febf 	bl	800fd1c <move_window>
 800ff9e:	4603      	mov	r3, r0
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d140      	bne.n	8010026 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ffa4:	693b      	ldr	r3, [r7, #16]
 800ffa6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ffaa:	683b      	ldr	r3, [r7, #0]
 800ffac:	005b      	lsls	r3, r3, #1
 800ffae:	693a      	ldr	r2, [r7, #16]
 800ffb0:	8992      	ldrh	r2, [r2, #12]
 800ffb2:	fbb3 f0f2 	udiv	r0, r3, r2
 800ffb6:	fb02 f200 	mul.w	r2, r2, r0
 800ffba:	1a9b      	subs	r3, r3, r2
 800ffbc:	440b      	add	r3, r1
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	f7ff fbfc 	bl	800f7bc <ld_word>
 800ffc4:	4603      	mov	r3, r0
 800ffc6:	617b      	str	r3, [r7, #20]
			break;
 800ffc8:	e030      	b.n	801002c <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ffca:	693b      	ldr	r3, [r7, #16]
 800ffcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ffce:	693b      	ldr	r3, [r7, #16]
 800ffd0:	899b      	ldrh	r3, [r3, #12]
 800ffd2:	089b      	lsrs	r3, r3, #2
 800ffd4:	b29b      	uxth	r3, r3
 800ffd6:	4619      	mov	r1, r3
 800ffd8:	683b      	ldr	r3, [r7, #0]
 800ffda:	fbb3 f3f1 	udiv	r3, r3, r1
 800ffde:	4413      	add	r3, r2
 800ffe0:	4619      	mov	r1, r3
 800ffe2:	6938      	ldr	r0, [r7, #16]
 800ffe4:	f7ff fe9a 	bl	800fd1c <move_window>
 800ffe8:	4603      	mov	r3, r0
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d11d      	bne.n	801002a <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ffee:	693b      	ldr	r3, [r7, #16]
 800fff0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fff4:	683b      	ldr	r3, [r7, #0]
 800fff6:	009b      	lsls	r3, r3, #2
 800fff8:	693a      	ldr	r2, [r7, #16]
 800fffa:	8992      	ldrh	r2, [r2, #12]
 800fffc:	fbb3 f0f2 	udiv	r0, r3, r2
 8010000:	fb02 f200 	mul.w	r2, r2, r0
 8010004:	1a9b      	subs	r3, r3, r2
 8010006:	440b      	add	r3, r1
 8010008:	4618      	mov	r0, r3
 801000a:	f7ff fbef 	bl	800f7ec <ld_dword>
 801000e:	4603      	mov	r3, r0
 8010010:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8010014:	617b      	str	r3, [r7, #20]
			break;
 8010016:	e009      	b.n	801002c <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8010018:	2301      	movs	r3, #1
 801001a:	617b      	str	r3, [r7, #20]
 801001c:	e006      	b.n	801002c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801001e:	bf00      	nop
 8010020:	e004      	b.n	801002c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010022:	bf00      	nop
 8010024:	e002      	b.n	801002c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010026:	bf00      	nop
 8010028:	e000      	b.n	801002c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801002a:	bf00      	nop
		}
	}

	return val;
 801002c:	697b      	ldr	r3, [r7, #20]
}
 801002e:	4618      	mov	r0, r3
 8010030:	3718      	adds	r7, #24
 8010032:	46bd      	mov	sp, r7
 8010034:	bd80      	pop	{r7, pc}

08010036 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8010036:	b590      	push	{r4, r7, lr}
 8010038:	b089      	sub	sp, #36	; 0x24
 801003a:	af00      	add	r7, sp, #0
 801003c:	60f8      	str	r0, [r7, #12]
 801003e:	60b9      	str	r1, [r7, #8]
 8010040:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8010042:	2302      	movs	r3, #2
 8010044:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8010046:	68bb      	ldr	r3, [r7, #8]
 8010048:	2b01      	cmp	r3, #1
 801004a:	f240 8106 	bls.w	801025a <put_fat+0x224>
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	69db      	ldr	r3, [r3, #28]
 8010052:	68ba      	ldr	r2, [r7, #8]
 8010054:	429a      	cmp	r2, r3
 8010056:	f080 8100 	bcs.w	801025a <put_fat+0x224>
		switch (fs->fs_type) {
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	781b      	ldrb	r3, [r3, #0]
 801005e:	2b02      	cmp	r3, #2
 8010060:	f000 8088 	beq.w	8010174 <put_fat+0x13e>
 8010064:	2b03      	cmp	r3, #3
 8010066:	f000 80b0 	beq.w	80101ca <put_fat+0x194>
 801006a:	2b01      	cmp	r3, #1
 801006c:	f040 80f5 	bne.w	801025a <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8010070:	68bb      	ldr	r3, [r7, #8]
 8010072:	61bb      	str	r3, [r7, #24]
 8010074:	69bb      	ldr	r3, [r7, #24]
 8010076:	085b      	lsrs	r3, r3, #1
 8010078:	69ba      	ldr	r2, [r7, #24]
 801007a:	4413      	add	r3, r2
 801007c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	899b      	ldrh	r3, [r3, #12]
 8010086:	4619      	mov	r1, r3
 8010088:	69bb      	ldr	r3, [r7, #24]
 801008a:	fbb3 f3f1 	udiv	r3, r3, r1
 801008e:	4413      	add	r3, r2
 8010090:	4619      	mov	r1, r3
 8010092:	68f8      	ldr	r0, [r7, #12]
 8010094:	f7ff fe42 	bl	800fd1c <move_window>
 8010098:	4603      	mov	r3, r0
 801009a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801009c:	7ffb      	ldrb	r3, [r7, #31]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	f040 80d4 	bne.w	801024c <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80100aa:	69bb      	ldr	r3, [r7, #24]
 80100ac:	1c5a      	adds	r2, r3, #1
 80100ae:	61ba      	str	r2, [r7, #24]
 80100b0:	68fa      	ldr	r2, [r7, #12]
 80100b2:	8992      	ldrh	r2, [r2, #12]
 80100b4:	fbb3 f0f2 	udiv	r0, r3, r2
 80100b8:	fb02 f200 	mul.w	r2, r2, r0
 80100bc:	1a9b      	subs	r3, r3, r2
 80100be:	440b      	add	r3, r1
 80100c0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80100c2:	68bb      	ldr	r3, [r7, #8]
 80100c4:	f003 0301 	and.w	r3, r3, #1
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d00d      	beq.n	80100e8 <put_fat+0xb2>
 80100cc:	697b      	ldr	r3, [r7, #20]
 80100ce:	781b      	ldrb	r3, [r3, #0]
 80100d0:	b25b      	sxtb	r3, r3
 80100d2:	f003 030f 	and.w	r3, r3, #15
 80100d6:	b25a      	sxtb	r2, r3
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	b2db      	uxtb	r3, r3
 80100dc:	011b      	lsls	r3, r3, #4
 80100de:	b25b      	sxtb	r3, r3
 80100e0:	4313      	orrs	r3, r2
 80100e2:	b25b      	sxtb	r3, r3
 80100e4:	b2db      	uxtb	r3, r3
 80100e6:	e001      	b.n	80100ec <put_fat+0xb6>
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	b2db      	uxtb	r3, r3
 80100ec:	697a      	ldr	r2, [r7, #20]
 80100ee:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	2201      	movs	r2, #1
 80100f4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	899b      	ldrh	r3, [r3, #12]
 80100fe:	4619      	mov	r1, r3
 8010100:	69bb      	ldr	r3, [r7, #24]
 8010102:	fbb3 f3f1 	udiv	r3, r3, r1
 8010106:	4413      	add	r3, r2
 8010108:	4619      	mov	r1, r3
 801010a:	68f8      	ldr	r0, [r7, #12]
 801010c:	f7ff fe06 	bl	800fd1c <move_window>
 8010110:	4603      	mov	r3, r0
 8010112:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010114:	7ffb      	ldrb	r3, [r7, #31]
 8010116:	2b00      	cmp	r3, #0
 8010118:	f040 809a 	bne.w	8010250 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	899b      	ldrh	r3, [r3, #12]
 8010126:	461a      	mov	r2, r3
 8010128:	69bb      	ldr	r3, [r7, #24]
 801012a:	fbb3 f0f2 	udiv	r0, r3, r2
 801012e:	fb02 f200 	mul.w	r2, r2, r0
 8010132:	1a9b      	subs	r3, r3, r2
 8010134:	440b      	add	r3, r1
 8010136:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8010138:	68bb      	ldr	r3, [r7, #8]
 801013a:	f003 0301 	and.w	r3, r3, #1
 801013e:	2b00      	cmp	r3, #0
 8010140:	d003      	beq.n	801014a <put_fat+0x114>
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	091b      	lsrs	r3, r3, #4
 8010146:	b2db      	uxtb	r3, r3
 8010148:	e00e      	b.n	8010168 <put_fat+0x132>
 801014a:	697b      	ldr	r3, [r7, #20]
 801014c:	781b      	ldrb	r3, [r3, #0]
 801014e:	b25b      	sxtb	r3, r3
 8010150:	f023 030f 	bic.w	r3, r3, #15
 8010154:	b25a      	sxtb	r2, r3
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	0a1b      	lsrs	r3, r3, #8
 801015a:	b25b      	sxtb	r3, r3
 801015c:	f003 030f 	and.w	r3, r3, #15
 8010160:	b25b      	sxtb	r3, r3
 8010162:	4313      	orrs	r3, r2
 8010164:	b25b      	sxtb	r3, r3
 8010166:	b2db      	uxtb	r3, r3
 8010168:	697a      	ldr	r2, [r7, #20]
 801016a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	2201      	movs	r2, #1
 8010170:	70da      	strb	r2, [r3, #3]
			break;
 8010172:	e072      	b.n	801025a <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	899b      	ldrh	r3, [r3, #12]
 801017c:	085b      	lsrs	r3, r3, #1
 801017e:	b29b      	uxth	r3, r3
 8010180:	4619      	mov	r1, r3
 8010182:	68bb      	ldr	r3, [r7, #8]
 8010184:	fbb3 f3f1 	udiv	r3, r3, r1
 8010188:	4413      	add	r3, r2
 801018a:	4619      	mov	r1, r3
 801018c:	68f8      	ldr	r0, [r7, #12]
 801018e:	f7ff fdc5 	bl	800fd1c <move_window>
 8010192:	4603      	mov	r3, r0
 8010194:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010196:	7ffb      	ldrb	r3, [r7, #31]
 8010198:	2b00      	cmp	r3, #0
 801019a:	d15b      	bne.n	8010254 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80101a2:	68bb      	ldr	r3, [r7, #8]
 80101a4:	005b      	lsls	r3, r3, #1
 80101a6:	68fa      	ldr	r2, [r7, #12]
 80101a8:	8992      	ldrh	r2, [r2, #12]
 80101aa:	fbb3 f0f2 	udiv	r0, r3, r2
 80101ae:	fb02 f200 	mul.w	r2, r2, r0
 80101b2:	1a9b      	subs	r3, r3, r2
 80101b4:	440b      	add	r3, r1
 80101b6:	687a      	ldr	r2, [r7, #4]
 80101b8:	b292      	uxth	r2, r2
 80101ba:	4611      	mov	r1, r2
 80101bc:	4618      	mov	r0, r3
 80101be:	f7ff fb38 	bl	800f832 <st_word>
			fs->wflag = 1;
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	2201      	movs	r2, #1
 80101c6:	70da      	strb	r2, [r3, #3]
			break;
 80101c8:	e047      	b.n	801025a <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	899b      	ldrh	r3, [r3, #12]
 80101d2:	089b      	lsrs	r3, r3, #2
 80101d4:	b29b      	uxth	r3, r3
 80101d6:	4619      	mov	r1, r3
 80101d8:	68bb      	ldr	r3, [r7, #8]
 80101da:	fbb3 f3f1 	udiv	r3, r3, r1
 80101de:	4413      	add	r3, r2
 80101e0:	4619      	mov	r1, r3
 80101e2:	68f8      	ldr	r0, [r7, #12]
 80101e4:	f7ff fd9a 	bl	800fd1c <move_window>
 80101e8:	4603      	mov	r3, r0
 80101ea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80101ec:	7ffb      	ldrb	r3, [r7, #31]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d132      	bne.n	8010258 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80101fe:	68bb      	ldr	r3, [r7, #8]
 8010200:	009b      	lsls	r3, r3, #2
 8010202:	68fa      	ldr	r2, [r7, #12]
 8010204:	8992      	ldrh	r2, [r2, #12]
 8010206:	fbb3 f0f2 	udiv	r0, r3, r2
 801020a:	fb02 f200 	mul.w	r2, r2, r0
 801020e:	1a9b      	subs	r3, r3, r2
 8010210:	440b      	add	r3, r1
 8010212:	4618      	mov	r0, r3
 8010214:	f7ff faea 	bl	800f7ec <ld_dword>
 8010218:	4603      	mov	r3, r0
 801021a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801021e:	4323      	orrs	r3, r4
 8010220:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010228:	68bb      	ldr	r3, [r7, #8]
 801022a:	009b      	lsls	r3, r3, #2
 801022c:	68fa      	ldr	r2, [r7, #12]
 801022e:	8992      	ldrh	r2, [r2, #12]
 8010230:	fbb3 f0f2 	udiv	r0, r3, r2
 8010234:	fb02 f200 	mul.w	r2, r2, r0
 8010238:	1a9b      	subs	r3, r3, r2
 801023a:	440b      	add	r3, r1
 801023c:	6879      	ldr	r1, [r7, #4]
 801023e:	4618      	mov	r0, r3
 8010240:	f7ff fb12 	bl	800f868 <st_dword>
			fs->wflag = 1;
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	2201      	movs	r2, #1
 8010248:	70da      	strb	r2, [r3, #3]
			break;
 801024a:	e006      	b.n	801025a <put_fat+0x224>
			if (res != FR_OK) break;
 801024c:	bf00      	nop
 801024e:	e004      	b.n	801025a <put_fat+0x224>
			if (res != FR_OK) break;
 8010250:	bf00      	nop
 8010252:	e002      	b.n	801025a <put_fat+0x224>
			if (res != FR_OK) break;
 8010254:	bf00      	nop
 8010256:	e000      	b.n	801025a <put_fat+0x224>
			if (res != FR_OK) break;
 8010258:	bf00      	nop
		}
	}
	return res;
 801025a:	7ffb      	ldrb	r3, [r7, #31]
}
 801025c:	4618      	mov	r0, r3
 801025e:	3724      	adds	r7, #36	; 0x24
 8010260:	46bd      	mov	sp, r7
 8010262:	bd90      	pop	{r4, r7, pc}

08010264 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8010264:	b580      	push	{r7, lr}
 8010266:	b088      	sub	sp, #32
 8010268:	af00      	add	r7, sp, #0
 801026a:	60f8      	str	r0, [r7, #12]
 801026c:	60b9      	str	r1, [r7, #8]
 801026e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8010270:	2300      	movs	r3, #0
 8010272:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801027a:	68bb      	ldr	r3, [r7, #8]
 801027c:	2b01      	cmp	r3, #1
 801027e:	d904      	bls.n	801028a <remove_chain+0x26>
 8010280:	69bb      	ldr	r3, [r7, #24]
 8010282:	69db      	ldr	r3, [r3, #28]
 8010284:	68ba      	ldr	r2, [r7, #8]
 8010286:	429a      	cmp	r2, r3
 8010288:	d301      	bcc.n	801028e <remove_chain+0x2a>
 801028a:	2302      	movs	r3, #2
 801028c:	e04b      	b.n	8010326 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	2b00      	cmp	r3, #0
 8010292:	d00c      	beq.n	80102ae <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8010294:	f04f 32ff 	mov.w	r2, #4294967295
 8010298:	6879      	ldr	r1, [r7, #4]
 801029a:	69b8      	ldr	r0, [r7, #24]
 801029c:	f7ff fecb 	bl	8010036 <put_fat>
 80102a0:	4603      	mov	r3, r0
 80102a2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80102a4:	7ffb      	ldrb	r3, [r7, #31]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d001      	beq.n	80102ae <remove_chain+0x4a>
 80102aa:	7ffb      	ldrb	r3, [r7, #31]
 80102ac:	e03b      	b.n	8010326 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80102ae:	68b9      	ldr	r1, [r7, #8]
 80102b0:	68f8      	ldr	r0, [r7, #12]
 80102b2:	f7ff fdf0 	bl	800fe96 <get_fat>
 80102b6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80102b8:	697b      	ldr	r3, [r7, #20]
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d031      	beq.n	8010322 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80102be:	697b      	ldr	r3, [r7, #20]
 80102c0:	2b01      	cmp	r3, #1
 80102c2:	d101      	bne.n	80102c8 <remove_chain+0x64>
 80102c4:	2302      	movs	r3, #2
 80102c6:	e02e      	b.n	8010326 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80102c8:	697b      	ldr	r3, [r7, #20]
 80102ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102ce:	d101      	bne.n	80102d4 <remove_chain+0x70>
 80102d0:	2301      	movs	r3, #1
 80102d2:	e028      	b.n	8010326 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80102d4:	2200      	movs	r2, #0
 80102d6:	68b9      	ldr	r1, [r7, #8]
 80102d8:	69b8      	ldr	r0, [r7, #24]
 80102da:	f7ff feac 	bl	8010036 <put_fat>
 80102de:	4603      	mov	r3, r0
 80102e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80102e2:	7ffb      	ldrb	r3, [r7, #31]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d001      	beq.n	80102ec <remove_chain+0x88>
 80102e8:	7ffb      	ldrb	r3, [r7, #31]
 80102ea:	e01c      	b.n	8010326 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80102ec:	69bb      	ldr	r3, [r7, #24]
 80102ee:	695a      	ldr	r2, [r3, #20]
 80102f0:	69bb      	ldr	r3, [r7, #24]
 80102f2:	69db      	ldr	r3, [r3, #28]
 80102f4:	3b02      	subs	r3, #2
 80102f6:	429a      	cmp	r2, r3
 80102f8:	d20b      	bcs.n	8010312 <remove_chain+0xae>
			fs->free_clst++;
 80102fa:	69bb      	ldr	r3, [r7, #24]
 80102fc:	695b      	ldr	r3, [r3, #20]
 80102fe:	1c5a      	adds	r2, r3, #1
 8010300:	69bb      	ldr	r3, [r7, #24]
 8010302:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8010304:	69bb      	ldr	r3, [r7, #24]
 8010306:	791b      	ldrb	r3, [r3, #4]
 8010308:	f043 0301 	orr.w	r3, r3, #1
 801030c:	b2da      	uxtb	r2, r3
 801030e:	69bb      	ldr	r3, [r7, #24]
 8010310:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8010312:	697b      	ldr	r3, [r7, #20]
 8010314:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8010316:	69bb      	ldr	r3, [r7, #24]
 8010318:	69db      	ldr	r3, [r3, #28]
 801031a:	68ba      	ldr	r2, [r7, #8]
 801031c:	429a      	cmp	r2, r3
 801031e:	d3c6      	bcc.n	80102ae <remove_chain+0x4a>
 8010320:	e000      	b.n	8010324 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8010322:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8010324:	2300      	movs	r3, #0
}
 8010326:	4618      	mov	r0, r3
 8010328:	3720      	adds	r7, #32
 801032a:	46bd      	mov	sp, r7
 801032c:	bd80      	pop	{r7, pc}

0801032e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801032e:	b580      	push	{r7, lr}
 8010330:	b088      	sub	sp, #32
 8010332:	af00      	add	r7, sp, #0
 8010334:	6078      	str	r0, [r7, #4]
 8010336:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801033e:	683b      	ldr	r3, [r7, #0]
 8010340:	2b00      	cmp	r3, #0
 8010342:	d10d      	bne.n	8010360 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8010344:	693b      	ldr	r3, [r7, #16]
 8010346:	691b      	ldr	r3, [r3, #16]
 8010348:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801034a:	69bb      	ldr	r3, [r7, #24]
 801034c:	2b00      	cmp	r3, #0
 801034e:	d004      	beq.n	801035a <create_chain+0x2c>
 8010350:	693b      	ldr	r3, [r7, #16]
 8010352:	69db      	ldr	r3, [r3, #28]
 8010354:	69ba      	ldr	r2, [r7, #24]
 8010356:	429a      	cmp	r2, r3
 8010358:	d31b      	bcc.n	8010392 <create_chain+0x64>
 801035a:	2301      	movs	r3, #1
 801035c:	61bb      	str	r3, [r7, #24]
 801035e:	e018      	b.n	8010392 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8010360:	6839      	ldr	r1, [r7, #0]
 8010362:	6878      	ldr	r0, [r7, #4]
 8010364:	f7ff fd97 	bl	800fe96 <get_fat>
 8010368:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	2b01      	cmp	r3, #1
 801036e:	d801      	bhi.n	8010374 <create_chain+0x46>
 8010370:	2301      	movs	r3, #1
 8010372:	e070      	b.n	8010456 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	f1b3 3fff 	cmp.w	r3, #4294967295
 801037a:	d101      	bne.n	8010380 <create_chain+0x52>
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	e06a      	b.n	8010456 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8010380:	693b      	ldr	r3, [r7, #16]
 8010382:	69db      	ldr	r3, [r3, #28]
 8010384:	68fa      	ldr	r2, [r7, #12]
 8010386:	429a      	cmp	r2, r3
 8010388:	d201      	bcs.n	801038e <create_chain+0x60>
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	e063      	b.n	8010456 <create_chain+0x128>
		scl = clst;
 801038e:	683b      	ldr	r3, [r7, #0]
 8010390:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8010392:	69bb      	ldr	r3, [r7, #24]
 8010394:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8010396:	69fb      	ldr	r3, [r7, #28]
 8010398:	3301      	adds	r3, #1
 801039a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801039c:	693b      	ldr	r3, [r7, #16]
 801039e:	69db      	ldr	r3, [r3, #28]
 80103a0:	69fa      	ldr	r2, [r7, #28]
 80103a2:	429a      	cmp	r2, r3
 80103a4:	d307      	bcc.n	80103b6 <create_chain+0x88>
				ncl = 2;
 80103a6:	2302      	movs	r3, #2
 80103a8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80103aa:	69fa      	ldr	r2, [r7, #28]
 80103ac:	69bb      	ldr	r3, [r7, #24]
 80103ae:	429a      	cmp	r2, r3
 80103b0:	d901      	bls.n	80103b6 <create_chain+0x88>
 80103b2:	2300      	movs	r3, #0
 80103b4:	e04f      	b.n	8010456 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80103b6:	69f9      	ldr	r1, [r7, #28]
 80103b8:	6878      	ldr	r0, [r7, #4]
 80103ba:	f7ff fd6c 	bl	800fe96 <get_fat>
 80103be:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d00e      	beq.n	80103e4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	2b01      	cmp	r3, #1
 80103ca:	d003      	beq.n	80103d4 <create_chain+0xa6>
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103d2:	d101      	bne.n	80103d8 <create_chain+0xaa>
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	e03e      	b.n	8010456 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80103d8:	69fa      	ldr	r2, [r7, #28]
 80103da:	69bb      	ldr	r3, [r7, #24]
 80103dc:	429a      	cmp	r2, r3
 80103de:	d1da      	bne.n	8010396 <create_chain+0x68>
 80103e0:	2300      	movs	r3, #0
 80103e2:	e038      	b.n	8010456 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80103e4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80103e6:	f04f 32ff 	mov.w	r2, #4294967295
 80103ea:	69f9      	ldr	r1, [r7, #28]
 80103ec:	6938      	ldr	r0, [r7, #16]
 80103ee:	f7ff fe22 	bl	8010036 <put_fat>
 80103f2:	4603      	mov	r3, r0
 80103f4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80103f6:	7dfb      	ldrb	r3, [r7, #23]
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d109      	bne.n	8010410 <create_chain+0xe2>
 80103fc:	683b      	ldr	r3, [r7, #0]
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d006      	beq.n	8010410 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8010402:	69fa      	ldr	r2, [r7, #28]
 8010404:	6839      	ldr	r1, [r7, #0]
 8010406:	6938      	ldr	r0, [r7, #16]
 8010408:	f7ff fe15 	bl	8010036 <put_fat>
 801040c:	4603      	mov	r3, r0
 801040e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8010410:	7dfb      	ldrb	r3, [r7, #23]
 8010412:	2b00      	cmp	r3, #0
 8010414:	d116      	bne.n	8010444 <create_chain+0x116>
		fs->last_clst = ncl;
 8010416:	693b      	ldr	r3, [r7, #16]
 8010418:	69fa      	ldr	r2, [r7, #28]
 801041a:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801041c:	693b      	ldr	r3, [r7, #16]
 801041e:	695a      	ldr	r2, [r3, #20]
 8010420:	693b      	ldr	r3, [r7, #16]
 8010422:	69db      	ldr	r3, [r3, #28]
 8010424:	3b02      	subs	r3, #2
 8010426:	429a      	cmp	r2, r3
 8010428:	d804      	bhi.n	8010434 <create_chain+0x106>
 801042a:	693b      	ldr	r3, [r7, #16]
 801042c:	695b      	ldr	r3, [r3, #20]
 801042e:	1e5a      	subs	r2, r3, #1
 8010430:	693b      	ldr	r3, [r7, #16]
 8010432:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8010434:	693b      	ldr	r3, [r7, #16]
 8010436:	791b      	ldrb	r3, [r3, #4]
 8010438:	f043 0301 	orr.w	r3, r3, #1
 801043c:	b2da      	uxtb	r2, r3
 801043e:	693b      	ldr	r3, [r7, #16]
 8010440:	711a      	strb	r2, [r3, #4]
 8010442:	e007      	b.n	8010454 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8010444:	7dfb      	ldrb	r3, [r7, #23]
 8010446:	2b01      	cmp	r3, #1
 8010448:	d102      	bne.n	8010450 <create_chain+0x122>
 801044a:	f04f 33ff 	mov.w	r3, #4294967295
 801044e:	e000      	b.n	8010452 <create_chain+0x124>
 8010450:	2301      	movs	r3, #1
 8010452:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8010454:	69fb      	ldr	r3, [r7, #28]
}
 8010456:	4618      	mov	r0, r3
 8010458:	3720      	adds	r7, #32
 801045a:	46bd      	mov	sp, r7
 801045c:	bd80      	pop	{r7, pc}

0801045e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801045e:	b480      	push	{r7}
 8010460:	b087      	sub	sp, #28
 8010462:	af00      	add	r7, sp, #0
 8010464:	6078      	str	r0, [r7, #4]
 8010466:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010472:	3304      	adds	r3, #4
 8010474:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	899b      	ldrh	r3, [r3, #12]
 801047a:	461a      	mov	r2, r3
 801047c:	683b      	ldr	r3, [r7, #0]
 801047e:	fbb3 f3f2 	udiv	r3, r3, r2
 8010482:	68fa      	ldr	r2, [r7, #12]
 8010484:	8952      	ldrh	r2, [r2, #10]
 8010486:	fbb3 f3f2 	udiv	r3, r3, r2
 801048a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801048c:	693b      	ldr	r3, [r7, #16]
 801048e:	1d1a      	adds	r2, r3, #4
 8010490:	613a      	str	r2, [r7, #16]
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8010496:	68bb      	ldr	r3, [r7, #8]
 8010498:	2b00      	cmp	r3, #0
 801049a:	d101      	bne.n	80104a0 <clmt_clust+0x42>
 801049c:	2300      	movs	r3, #0
 801049e:	e010      	b.n	80104c2 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80104a0:	697a      	ldr	r2, [r7, #20]
 80104a2:	68bb      	ldr	r3, [r7, #8]
 80104a4:	429a      	cmp	r2, r3
 80104a6:	d307      	bcc.n	80104b8 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80104a8:	697a      	ldr	r2, [r7, #20]
 80104aa:	68bb      	ldr	r3, [r7, #8]
 80104ac:	1ad3      	subs	r3, r2, r3
 80104ae:	617b      	str	r3, [r7, #20]
 80104b0:	693b      	ldr	r3, [r7, #16]
 80104b2:	3304      	adds	r3, #4
 80104b4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80104b6:	e7e9      	b.n	801048c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80104b8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80104ba:	693b      	ldr	r3, [r7, #16]
 80104bc:	681a      	ldr	r2, [r3, #0]
 80104be:	697b      	ldr	r3, [r7, #20]
 80104c0:	4413      	add	r3, r2
}
 80104c2:	4618      	mov	r0, r3
 80104c4:	371c      	adds	r7, #28
 80104c6:	46bd      	mov	sp, r7
 80104c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104cc:	4770      	bx	lr

080104ce <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80104ce:	b580      	push	{r7, lr}
 80104d0:	b086      	sub	sp, #24
 80104d2:	af00      	add	r7, sp, #0
 80104d4:	6078      	str	r0, [r7, #4]
 80104d6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80104de:	683b      	ldr	r3, [r7, #0]
 80104e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80104e4:	d204      	bcs.n	80104f0 <dir_sdi+0x22>
 80104e6:	683b      	ldr	r3, [r7, #0]
 80104e8:	f003 031f 	and.w	r3, r3, #31
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d001      	beq.n	80104f4 <dir_sdi+0x26>
		return FR_INT_ERR;
 80104f0:	2302      	movs	r3, #2
 80104f2:	e071      	b.n	80105d8 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	683a      	ldr	r2, [r7, #0]
 80104f8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	689b      	ldr	r3, [r3, #8]
 80104fe:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8010500:	697b      	ldr	r3, [r7, #20]
 8010502:	2b00      	cmp	r3, #0
 8010504:	d106      	bne.n	8010514 <dir_sdi+0x46>
 8010506:	693b      	ldr	r3, [r7, #16]
 8010508:	781b      	ldrb	r3, [r3, #0]
 801050a:	2b02      	cmp	r3, #2
 801050c:	d902      	bls.n	8010514 <dir_sdi+0x46>
		clst = fs->dirbase;
 801050e:	693b      	ldr	r3, [r7, #16]
 8010510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010512:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8010514:	697b      	ldr	r3, [r7, #20]
 8010516:	2b00      	cmp	r3, #0
 8010518:	d10c      	bne.n	8010534 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801051a:	683b      	ldr	r3, [r7, #0]
 801051c:	095b      	lsrs	r3, r3, #5
 801051e:	693a      	ldr	r2, [r7, #16]
 8010520:	8912      	ldrh	r2, [r2, #8]
 8010522:	4293      	cmp	r3, r2
 8010524:	d301      	bcc.n	801052a <dir_sdi+0x5c>
 8010526:	2302      	movs	r3, #2
 8010528:	e056      	b.n	80105d8 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 801052a:	693b      	ldr	r3, [r7, #16]
 801052c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	61da      	str	r2, [r3, #28]
 8010532:	e02d      	b.n	8010590 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8010534:	693b      	ldr	r3, [r7, #16]
 8010536:	895b      	ldrh	r3, [r3, #10]
 8010538:	461a      	mov	r2, r3
 801053a:	693b      	ldr	r3, [r7, #16]
 801053c:	899b      	ldrh	r3, [r3, #12]
 801053e:	fb03 f302 	mul.w	r3, r3, r2
 8010542:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010544:	e019      	b.n	801057a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	6979      	ldr	r1, [r7, #20]
 801054a:	4618      	mov	r0, r3
 801054c:	f7ff fca3 	bl	800fe96 <get_fat>
 8010550:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010552:	697b      	ldr	r3, [r7, #20]
 8010554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010558:	d101      	bne.n	801055e <dir_sdi+0x90>
 801055a:	2301      	movs	r3, #1
 801055c:	e03c      	b.n	80105d8 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801055e:	697b      	ldr	r3, [r7, #20]
 8010560:	2b01      	cmp	r3, #1
 8010562:	d904      	bls.n	801056e <dir_sdi+0xa0>
 8010564:	693b      	ldr	r3, [r7, #16]
 8010566:	69db      	ldr	r3, [r3, #28]
 8010568:	697a      	ldr	r2, [r7, #20]
 801056a:	429a      	cmp	r2, r3
 801056c:	d301      	bcc.n	8010572 <dir_sdi+0xa4>
 801056e:	2302      	movs	r3, #2
 8010570:	e032      	b.n	80105d8 <dir_sdi+0x10a>
			ofs -= csz;
 8010572:	683a      	ldr	r2, [r7, #0]
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	1ad3      	subs	r3, r2, r3
 8010578:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801057a:	683a      	ldr	r2, [r7, #0]
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	429a      	cmp	r2, r3
 8010580:	d2e1      	bcs.n	8010546 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8010582:	6979      	ldr	r1, [r7, #20]
 8010584:	6938      	ldr	r0, [r7, #16]
 8010586:	f7ff fc67 	bl	800fe58 <clust2sect>
 801058a:	4602      	mov	r2, r0
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	697a      	ldr	r2, [r7, #20]
 8010594:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	69db      	ldr	r3, [r3, #28]
 801059a:	2b00      	cmp	r3, #0
 801059c:	d101      	bne.n	80105a2 <dir_sdi+0xd4>
 801059e:	2302      	movs	r3, #2
 80105a0:	e01a      	b.n	80105d8 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	69da      	ldr	r2, [r3, #28]
 80105a6:	693b      	ldr	r3, [r7, #16]
 80105a8:	899b      	ldrh	r3, [r3, #12]
 80105aa:	4619      	mov	r1, r3
 80105ac:	683b      	ldr	r3, [r7, #0]
 80105ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80105b2:	441a      	add	r2, r3
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80105b8:	693b      	ldr	r3, [r7, #16]
 80105ba:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80105be:	693b      	ldr	r3, [r7, #16]
 80105c0:	899b      	ldrh	r3, [r3, #12]
 80105c2:	461a      	mov	r2, r3
 80105c4:	683b      	ldr	r3, [r7, #0]
 80105c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80105ca:	fb02 f200 	mul.w	r2, r2, r0
 80105ce:	1a9b      	subs	r3, r3, r2
 80105d0:	18ca      	adds	r2, r1, r3
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80105d6:	2300      	movs	r3, #0
}
 80105d8:	4618      	mov	r0, r3
 80105da:	3718      	adds	r7, #24
 80105dc:	46bd      	mov	sp, r7
 80105de:	bd80      	pop	{r7, pc}

080105e0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80105e0:	b580      	push	{r7, lr}
 80105e2:	b086      	sub	sp, #24
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	6078      	str	r0, [r7, #4]
 80105e8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	695b      	ldr	r3, [r3, #20]
 80105f4:	3320      	adds	r3, #32
 80105f6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	69db      	ldr	r3, [r3, #28]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d003      	beq.n	8010608 <dir_next+0x28>
 8010600:	68bb      	ldr	r3, [r7, #8]
 8010602:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010606:	d301      	bcc.n	801060c <dir_next+0x2c>
 8010608:	2304      	movs	r3, #4
 801060a:	e0bb      	b.n	8010784 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	899b      	ldrh	r3, [r3, #12]
 8010610:	461a      	mov	r2, r3
 8010612:	68bb      	ldr	r3, [r7, #8]
 8010614:	fbb3 f1f2 	udiv	r1, r3, r2
 8010618:	fb02 f201 	mul.w	r2, r2, r1
 801061c:	1a9b      	subs	r3, r3, r2
 801061e:	2b00      	cmp	r3, #0
 8010620:	f040 809d 	bne.w	801075e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	69db      	ldr	r3, [r3, #28]
 8010628:	1c5a      	adds	r2, r3, #1
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	699b      	ldr	r3, [r3, #24]
 8010632:	2b00      	cmp	r3, #0
 8010634:	d10b      	bne.n	801064e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8010636:	68bb      	ldr	r3, [r7, #8]
 8010638:	095b      	lsrs	r3, r3, #5
 801063a:	68fa      	ldr	r2, [r7, #12]
 801063c:	8912      	ldrh	r2, [r2, #8]
 801063e:	4293      	cmp	r3, r2
 8010640:	f0c0 808d 	bcc.w	801075e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	2200      	movs	r2, #0
 8010648:	61da      	str	r2, [r3, #28]
 801064a:	2304      	movs	r3, #4
 801064c:	e09a      	b.n	8010784 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	899b      	ldrh	r3, [r3, #12]
 8010652:	461a      	mov	r2, r3
 8010654:	68bb      	ldr	r3, [r7, #8]
 8010656:	fbb3 f3f2 	udiv	r3, r3, r2
 801065a:	68fa      	ldr	r2, [r7, #12]
 801065c:	8952      	ldrh	r2, [r2, #10]
 801065e:	3a01      	subs	r2, #1
 8010660:	4013      	ands	r3, r2
 8010662:	2b00      	cmp	r3, #0
 8010664:	d17b      	bne.n	801075e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8010666:	687a      	ldr	r2, [r7, #4]
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	699b      	ldr	r3, [r3, #24]
 801066c:	4619      	mov	r1, r3
 801066e:	4610      	mov	r0, r2
 8010670:	f7ff fc11 	bl	800fe96 <get_fat>
 8010674:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8010676:	697b      	ldr	r3, [r7, #20]
 8010678:	2b01      	cmp	r3, #1
 801067a:	d801      	bhi.n	8010680 <dir_next+0xa0>
 801067c:	2302      	movs	r3, #2
 801067e:	e081      	b.n	8010784 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8010680:	697b      	ldr	r3, [r7, #20]
 8010682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010686:	d101      	bne.n	801068c <dir_next+0xac>
 8010688:	2301      	movs	r3, #1
 801068a:	e07b      	b.n	8010784 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	69db      	ldr	r3, [r3, #28]
 8010690:	697a      	ldr	r2, [r7, #20]
 8010692:	429a      	cmp	r2, r3
 8010694:	d359      	bcc.n	801074a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8010696:	683b      	ldr	r3, [r7, #0]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d104      	bne.n	80106a6 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	2200      	movs	r2, #0
 80106a0:	61da      	str	r2, [r3, #28]
 80106a2:	2304      	movs	r3, #4
 80106a4:	e06e      	b.n	8010784 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80106a6:	687a      	ldr	r2, [r7, #4]
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	699b      	ldr	r3, [r3, #24]
 80106ac:	4619      	mov	r1, r3
 80106ae:	4610      	mov	r0, r2
 80106b0:	f7ff fe3d 	bl	801032e <create_chain>
 80106b4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80106b6:	697b      	ldr	r3, [r7, #20]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d101      	bne.n	80106c0 <dir_next+0xe0>
 80106bc:	2307      	movs	r3, #7
 80106be:	e061      	b.n	8010784 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80106c0:	697b      	ldr	r3, [r7, #20]
 80106c2:	2b01      	cmp	r3, #1
 80106c4:	d101      	bne.n	80106ca <dir_next+0xea>
 80106c6:	2302      	movs	r3, #2
 80106c8:	e05c      	b.n	8010784 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80106ca:	697b      	ldr	r3, [r7, #20]
 80106cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106d0:	d101      	bne.n	80106d6 <dir_next+0xf6>
 80106d2:	2301      	movs	r3, #1
 80106d4:	e056      	b.n	8010784 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80106d6:	68f8      	ldr	r0, [r7, #12]
 80106d8:	f7ff fadc 	bl	800fc94 <sync_window>
 80106dc:	4603      	mov	r3, r0
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d001      	beq.n	80106e6 <dir_next+0x106>
 80106e2:	2301      	movs	r3, #1
 80106e4:	e04e      	b.n	8010784 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	899b      	ldrh	r3, [r3, #12]
 80106f0:	461a      	mov	r2, r3
 80106f2:	2100      	movs	r1, #0
 80106f4:	f7ff f905 	bl	800f902 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80106f8:	2300      	movs	r3, #0
 80106fa:	613b      	str	r3, [r7, #16]
 80106fc:	6979      	ldr	r1, [r7, #20]
 80106fe:	68f8      	ldr	r0, [r7, #12]
 8010700:	f7ff fbaa 	bl	800fe58 <clust2sect>
 8010704:	4602      	mov	r2, r0
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	635a      	str	r2, [r3, #52]	; 0x34
 801070a:	e012      	b.n	8010732 <dir_next+0x152>
						fs->wflag = 1;
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	2201      	movs	r2, #1
 8010710:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8010712:	68f8      	ldr	r0, [r7, #12]
 8010714:	f7ff fabe 	bl	800fc94 <sync_window>
 8010718:	4603      	mov	r3, r0
 801071a:	2b00      	cmp	r3, #0
 801071c:	d001      	beq.n	8010722 <dir_next+0x142>
 801071e:	2301      	movs	r3, #1
 8010720:	e030      	b.n	8010784 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010722:	693b      	ldr	r3, [r7, #16]
 8010724:	3301      	adds	r3, #1
 8010726:	613b      	str	r3, [r7, #16]
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801072c:	1c5a      	adds	r2, r3, #1
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	635a      	str	r2, [r3, #52]	; 0x34
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	895b      	ldrh	r3, [r3, #10]
 8010736:	461a      	mov	r2, r3
 8010738:	693b      	ldr	r3, [r7, #16]
 801073a:	4293      	cmp	r3, r2
 801073c:	d3e6      	bcc.n	801070c <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010742:	693b      	ldr	r3, [r7, #16]
 8010744:	1ad2      	subs	r2, r2, r3
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	697a      	ldr	r2, [r7, #20]
 801074e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8010750:	6979      	ldr	r1, [r7, #20]
 8010752:	68f8      	ldr	r0, [r7, #12]
 8010754:	f7ff fb80 	bl	800fe58 <clust2sect>
 8010758:	4602      	mov	r2, r0
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	68ba      	ldr	r2, [r7, #8]
 8010762:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	899b      	ldrh	r3, [r3, #12]
 801076e:	461a      	mov	r2, r3
 8010770:	68bb      	ldr	r3, [r7, #8]
 8010772:	fbb3 f0f2 	udiv	r0, r3, r2
 8010776:	fb02 f200 	mul.w	r2, r2, r0
 801077a:	1a9b      	subs	r3, r3, r2
 801077c:	18ca      	adds	r2, r1, r3
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010782:	2300      	movs	r3, #0
}
 8010784:	4618      	mov	r0, r3
 8010786:	3718      	adds	r7, #24
 8010788:	46bd      	mov	sp, r7
 801078a:	bd80      	pop	{r7, pc}

0801078c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801078c:	b580      	push	{r7, lr}
 801078e:	b086      	sub	sp, #24
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]
 8010794:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801079c:	2100      	movs	r1, #0
 801079e:	6878      	ldr	r0, [r7, #4]
 80107a0:	f7ff fe95 	bl	80104ce <dir_sdi>
 80107a4:	4603      	mov	r3, r0
 80107a6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80107a8:	7dfb      	ldrb	r3, [r7, #23]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d12b      	bne.n	8010806 <dir_alloc+0x7a>
		n = 0;
 80107ae:	2300      	movs	r3, #0
 80107b0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	69db      	ldr	r3, [r3, #28]
 80107b6:	4619      	mov	r1, r3
 80107b8:	68f8      	ldr	r0, [r7, #12]
 80107ba:	f7ff faaf 	bl	800fd1c <move_window>
 80107be:	4603      	mov	r3, r0
 80107c0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80107c2:	7dfb      	ldrb	r3, [r7, #23]
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d11d      	bne.n	8010804 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	6a1b      	ldr	r3, [r3, #32]
 80107cc:	781b      	ldrb	r3, [r3, #0]
 80107ce:	2be5      	cmp	r3, #229	; 0xe5
 80107d0:	d004      	beq.n	80107dc <dir_alloc+0x50>
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	6a1b      	ldr	r3, [r3, #32]
 80107d6:	781b      	ldrb	r3, [r3, #0]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d107      	bne.n	80107ec <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80107dc:	693b      	ldr	r3, [r7, #16]
 80107de:	3301      	adds	r3, #1
 80107e0:	613b      	str	r3, [r7, #16]
 80107e2:	693a      	ldr	r2, [r7, #16]
 80107e4:	683b      	ldr	r3, [r7, #0]
 80107e6:	429a      	cmp	r2, r3
 80107e8:	d102      	bne.n	80107f0 <dir_alloc+0x64>
 80107ea:	e00c      	b.n	8010806 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80107ec:	2300      	movs	r3, #0
 80107ee:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80107f0:	2101      	movs	r1, #1
 80107f2:	6878      	ldr	r0, [r7, #4]
 80107f4:	f7ff fef4 	bl	80105e0 <dir_next>
 80107f8:	4603      	mov	r3, r0
 80107fa:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80107fc:	7dfb      	ldrb	r3, [r7, #23]
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d0d7      	beq.n	80107b2 <dir_alloc+0x26>
 8010802:	e000      	b.n	8010806 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8010804:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8010806:	7dfb      	ldrb	r3, [r7, #23]
 8010808:	2b04      	cmp	r3, #4
 801080a:	d101      	bne.n	8010810 <dir_alloc+0x84>
 801080c:	2307      	movs	r3, #7
 801080e:	75fb      	strb	r3, [r7, #23]
	return res;
 8010810:	7dfb      	ldrb	r3, [r7, #23]
}
 8010812:	4618      	mov	r0, r3
 8010814:	3718      	adds	r7, #24
 8010816:	46bd      	mov	sp, r7
 8010818:	bd80      	pop	{r7, pc}

0801081a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801081a:	b580      	push	{r7, lr}
 801081c:	b084      	sub	sp, #16
 801081e:	af00      	add	r7, sp, #0
 8010820:	6078      	str	r0, [r7, #4]
 8010822:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8010824:	683b      	ldr	r3, [r7, #0]
 8010826:	331a      	adds	r3, #26
 8010828:	4618      	mov	r0, r3
 801082a:	f7fe ffc7 	bl	800f7bc <ld_word>
 801082e:	4603      	mov	r3, r0
 8010830:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	781b      	ldrb	r3, [r3, #0]
 8010836:	2b03      	cmp	r3, #3
 8010838:	d109      	bne.n	801084e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801083a:	683b      	ldr	r3, [r7, #0]
 801083c:	3314      	adds	r3, #20
 801083e:	4618      	mov	r0, r3
 8010840:	f7fe ffbc 	bl	800f7bc <ld_word>
 8010844:	4603      	mov	r3, r0
 8010846:	041b      	lsls	r3, r3, #16
 8010848:	68fa      	ldr	r2, [r7, #12]
 801084a:	4313      	orrs	r3, r2
 801084c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801084e:	68fb      	ldr	r3, [r7, #12]
}
 8010850:	4618      	mov	r0, r3
 8010852:	3710      	adds	r7, #16
 8010854:	46bd      	mov	sp, r7
 8010856:	bd80      	pop	{r7, pc}

08010858 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8010858:	b580      	push	{r7, lr}
 801085a:	b084      	sub	sp, #16
 801085c:	af00      	add	r7, sp, #0
 801085e:	60f8      	str	r0, [r7, #12]
 8010860:	60b9      	str	r1, [r7, #8]
 8010862:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8010864:	68bb      	ldr	r3, [r7, #8]
 8010866:	331a      	adds	r3, #26
 8010868:	687a      	ldr	r2, [r7, #4]
 801086a:	b292      	uxth	r2, r2
 801086c:	4611      	mov	r1, r2
 801086e:	4618      	mov	r0, r3
 8010870:	f7fe ffdf 	bl	800f832 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	781b      	ldrb	r3, [r3, #0]
 8010878:	2b03      	cmp	r3, #3
 801087a:	d109      	bne.n	8010890 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801087c:	68bb      	ldr	r3, [r7, #8]
 801087e:	f103 0214 	add.w	r2, r3, #20
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	0c1b      	lsrs	r3, r3, #16
 8010886:	b29b      	uxth	r3, r3
 8010888:	4619      	mov	r1, r3
 801088a:	4610      	mov	r0, r2
 801088c:	f7fe ffd1 	bl	800f832 <st_word>
	}
}
 8010890:	bf00      	nop
 8010892:	3710      	adds	r7, #16
 8010894:	46bd      	mov	sp, r7
 8010896:	bd80      	pop	{r7, pc}

08010898 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8010898:	b580      	push	{r7, lr}
 801089a:	b086      	sub	sp, #24
 801089c:	af00      	add	r7, sp, #0
 801089e:	6078      	str	r0, [r7, #4]
 80108a0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80108a2:	2304      	movs	r3, #4
 80108a4:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80108ac:	e03c      	b.n	8010928 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	69db      	ldr	r3, [r3, #28]
 80108b2:	4619      	mov	r1, r3
 80108b4:	6938      	ldr	r0, [r7, #16]
 80108b6:	f7ff fa31 	bl	800fd1c <move_window>
 80108ba:	4603      	mov	r3, r0
 80108bc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80108be:	7dfb      	ldrb	r3, [r7, #23]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d136      	bne.n	8010932 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	6a1b      	ldr	r3, [r3, #32]
 80108c8:	781b      	ldrb	r3, [r3, #0]
 80108ca:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80108cc:	7bfb      	ldrb	r3, [r7, #15]
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d102      	bne.n	80108d8 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80108d2:	2304      	movs	r3, #4
 80108d4:	75fb      	strb	r3, [r7, #23]
 80108d6:	e031      	b.n	801093c <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	6a1b      	ldr	r3, [r3, #32]
 80108dc:	330b      	adds	r3, #11
 80108de:	781b      	ldrb	r3, [r3, #0]
 80108e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80108e4:	73bb      	strb	r3, [r7, #14]
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	7bba      	ldrb	r2, [r7, #14]
 80108ea:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 80108ec:	7bfb      	ldrb	r3, [r7, #15]
 80108ee:	2be5      	cmp	r3, #229	; 0xe5
 80108f0:	d011      	beq.n	8010916 <dir_read+0x7e>
 80108f2:	7bfb      	ldrb	r3, [r7, #15]
 80108f4:	2b2e      	cmp	r3, #46	; 0x2e
 80108f6:	d00e      	beq.n	8010916 <dir_read+0x7e>
 80108f8:	7bbb      	ldrb	r3, [r7, #14]
 80108fa:	2b0f      	cmp	r3, #15
 80108fc:	d00b      	beq.n	8010916 <dir_read+0x7e>
 80108fe:	7bbb      	ldrb	r3, [r7, #14]
 8010900:	f023 0320 	bic.w	r3, r3, #32
 8010904:	2b08      	cmp	r3, #8
 8010906:	bf0c      	ite	eq
 8010908:	2301      	moveq	r3, #1
 801090a:	2300      	movne	r3, #0
 801090c:	b2db      	uxtb	r3, r3
 801090e:	461a      	mov	r2, r3
 8010910:	683b      	ldr	r3, [r7, #0]
 8010912:	4293      	cmp	r3, r2
 8010914:	d00f      	beq.n	8010936 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8010916:	2100      	movs	r1, #0
 8010918:	6878      	ldr	r0, [r7, #4]
 801091a:	f7ff fe61 	bl	80105e0 <dir_next>
 801091e:	4603      	mov	r3, r0
 8010920:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010922:	7dfb      	ldrb	r3, [r7, #23]
 8010924:	2b00      	cmp	r3, #0
 8010926:	d108      	bne.n	801093a <dir_read+0xa2>
	while (dp->sect) {
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	69db      	ldr	r3, [r3, #28]
 801092c:	2b00      	cmp	r3, #0
 801092e:	d1be      	bne.n	80108ae <dir_read+0x16>
 8010930:	e004      	b.n	801093c <dir_read+0xa4>
		if (res != FR_OK) break;
 8010932:	bf00      	nop
 8010934:	e002      	b.n	801093c <dir_read+0xa4>
				break;
 8010936:	bf00      	nop
 8010938:	e000      	b.n	801093c <dir_read+0xa4>
		if (res != FR_OK) break;
 801093a:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 801093c:	7dfb      	ldrb	r3, [r7, #23]
 801093e:	2b00      	cmp	r3, #0
 8010940:	d002      	beq.n	8010948 <dir_read+0xb0>
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	2200      	movs	r2, #0
 8010946:	61da      	str	r2, [r3, #28]
	return res;
 8010948:	7dfb      	ldrb	r3, [r7, #23]
}
 801094a:	4618      	mov	r0, r3
 801094c:	3718      	adds	r7, #24
 801094e:	46bd      	mov	sp, r7
 8010950:	bd80      	pop	{r7, pc}

08010952 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8010952:	b580      	push	{r7, lr}
 8010954:	b086      	sub	sp, #24
 8010956:	af00      	add	r7, sp, #0
 8010958:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8010960:	2100      	movs	r1, #0
 8010962:	6878      	ldr	r0, [r7, #4]
 8010964:	f7ff fdb3 	bl	80104ce <dir_sdi>
 8010968:	4603      	mov	r3, r0
 801096a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801096c:	7dfb      	ldrb	r3, [r7, #23]
 801096e:	2b00      	cmp	r3, #0
 8010970:	d001      	beq.n	8010976 <dir_find+0x24>
 8010972:	7dfb      	ldrb	r3, [r7, #23]
 8010974:	e03e      	b.n	80109f4 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	69db      	ldr	r3, [r3, #28]
 801097a:	4619      	mov	r1, r3
 801097c:	6938      	ldr	r0, [r7, #16]
 801097e:	f7ff f9cd 	bl	800fd1c <move_window>
 8010982:	4603      	mov	r3, r0
 8010984:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010986:	7dfb      	ldrb	r3, [r7, #23]
 8010988:	2b00      	cmp	r3, #0
 801098a:	d12f      	bne.n	80109ec <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	6a1b      	ldr	r3, [r3, #32]
 8010990:	781b      	ldrb	r3, [r3, #0]
 8010992:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8010994:	7bfb      	ldrb	r3, [r7, #15]
 8010996:	2b00      	cmp	r3, #0
 8010998:	d102      	bne.n	80109a0 <dir_find+0x4e>
 801099a:	2304      	movs	r3, #4
 801099c:	75fb      	strb	r3, [r7, #23]
 801099e:	e028      	b.n	80109f2 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	6a1b      	ldr	r3, [r3, #32]
 80109a4:	330b      	adds	r3, #11
 80109a6:	781b      	ldrb	r3, [r3, #0]
 80109a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80109ac:	b2da      	uxtb	r2, r3
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	6a1b      	ldr	r3, [r3, #32]
 80109b6:	330b      	adds	r3, #11
 80109b8:	781b      	ldrb	r3, [r3, #0]
 80109ba:	f003 0308 	and.w	r3, r3, #8
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d10a      	bne.n	80109d8 <dir_find+0x86>
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	6a18      	ldr	r0, [r3, #32]
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	3324      	adds	r3, #36	; 0x24
 80109ca:	220b      	movs	r2, #11
 80109cc:	4619      	mov	r1, r3
 80109ce:	f7fe ffb2 	bl	800f936 <mem_cmp>
 80109d2:	4603      	mov	r3, r0
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d00b      	beq.n	80109f0 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80109d8:	2100      	movs	r1, #0
 80109da:	6878      	ldr	r0, [r7, #4]
 80109dc:	f7ff fe00 	bl	80105e0 <dir_next>
 80109e0:	4603      	mov	r3, r0
 80109e2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80109e4:	7dfb      	ldrb	r3, [r7, #23]
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d0c5      	beq.n	8010976 <dir_find+0x24>
 80109ea:	e002      	b.n	80109f2 <dir_find+0xa0>
		if (res != FR_OK) break;
 80109ec:	bf00      	nop
 80109ee:	e000      	b.n	80109f2 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80109f0:	bf00      	nop

	return res;
 80109f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80109f4:	4618      	mov	r0, r3
 80109f6:	3718      	adds	r7, #24
 80109f8:	46bd      	mov	sp, r7
 80109fa:	bd80      	pop	{r7, pc}

080109fc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80109fc:	b580      	push	{r7, lr}
 80109fe:	b084      	sub	sp, #16
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8010a0a:	2101      	movs	r1, #1
 8010a0c:	6878      	ldr	r0, [r7, #4]
 8010a0e:	f7ff febd 	bl	801078c <dir_alloc>
 8010a12:	4603      	mov	r3, r0
 8010a14:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010a16:	7bfb      	ldrb	r3, [r7, #15]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d11c      	bne.n	8010a56 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	69db      	ldr	r3, [r3, #28]
 8010a20:	4619      	mov	r1, r3
 8010a22:	68b8      	ldr	r0, [r7, #8]
 8010a24:	f7ff f97a 	bl	800fd1c <move_window>
 8010a28:	4603      	mov	r3, r0
 8010a2a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010a2c:	7bfb      	ldrb	r3, [r7, #15]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d111      	bne.n	8010a56 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	6a1b      	ldr	r3, [r3, #32]
 8010a36:	2220      	movs	r2, #32
 8010a38:	2100      	movs	r1, #0
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	f7fe ff61 	bl	800f902 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	6a18      	ldr	r0, [r3, #32]
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	3324      	adds	r3, #36	; 0x24
 8010a48:	220b      	movs	r2, #11
 8010a4a:	4619      	mov	r1, r3
 8010a4c:	f7fe ff38 	bl	800f8c0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8010a50:	68bb      	ldr	r3, [r7, #8]
 8010a52:	2201      	movs	r2, #1
 8010a54:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8010a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a58:	4618      	mov	r0, r3
 8010a5a:	3710      	adds	r7, #16
 8010a5c:	46bd      	mov	sp, r7
 8010a5e:	bd80      	pop	{r7, pc}

08010a60 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8010a60:	b580      	push	{r7, lr}
 8010a62:	b084      	sub	sp, #16
 8010a64:	af00      	add	r7, sp, #0
 8010a66:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	69db      	ldr	r3, [r3, #28]
 8010a72:	4619      	mov	r1, r3
 8010a74:	68f8      	ldr	r0, [r7, #12]
 8010a76:	f7ff f951 	bl	800fd1c <move_window>
 8010a7a:	4603      	mov	r3, r0
 8010a7c:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8010a7e:	7afb      	ldrb	r3, [r7, #11]
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d106      	bne.n	8010a92 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	6a1b      	ldr	r3, [r3, #32]
 8010a88:	22e5      	movs	r2, #229	; 0xe5
 8010a8a:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	2201      	movs	r2, #1
 8010a90:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8010a92:	7afb      	ldrb	r3, [r7, #11]
}
 8010a94:	4618      	mov	r0, r3
 8010a96:	3710      	adds	r7, #16
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	bd80      	pop	{r7, pc}

08010a9c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8010a9c:	b580      	push	{r7, lr}
 8010a9e:	b088      	sub	sp, #32
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	6078      	str	r0, [r7, #4]
 8010aa4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8010aa6:	683b      	ldr	r3, [r7, #0]
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	60fb      	str	r3, [r7, #12]
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	3324      	adds	r3, #36	; 0x24
 8010ab0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8010ab2:	220b      	movs	r2, #11
 8010ab4:	2120      	movs	r1, #32
 8010ab6:	68b8      	ldr	r0, [r7, #8]
 8010ab8:	f7fe ff23 	bl	800f902 <mem_set>
	si = i = 0; ni = 8;
 8010abc:	2300      	movs	r3, #0
 8010abe:	613b      	str	r3, [r7, #16]
 8010ac0:	693b      	ldr	r3, [r7, #16]
 8010ac2:	617b      	str	r3, [r7, #20]
 8010ac4:	2308      	movs	r3, #8
 8010ac6:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 8010ac8:	68fa      	ldr	r2, [r7, #12]
 8010aca:	697b      	ldr	r3, [r7, #20]
 8010acc:	4413      	add	r3, r2
 8010ace:	781b      	ldrb	r3, [r3, #0]
 8010ad0:	2b2e      	cmp	r3, #46	; 0x2e
 8010ad2:	d12f      	bne.n	8010b34 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 8010ad4:	697b      	ldr	r3, [r7, #20]
 8010ad6:	1c5a      	adds	r2, r3, #1
 8010ad8:	617a      	str	r2, [r7, #20]
 8010ada:	68fa      	ldr	r2, [r7, #12]
 8010adc:	4413      	add	r3, r2
 8010ade:	781b      	ldrb	r3, [r3, #0]
 8010ae0:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 8010ae2:	7ffb      	ldrb	r3, [r7, #31]
 8010ae4:	2b2e      	cmp	r3, #46	; 0x2e
 8010ae6:	d10a      	bne.n	8010afe <create_name+0x62>
 8010ae8:	697b      	ldr	r3, [r7, #20]
 8010aea:	2b02      	cmp	r3, #2
 8010aec:	d807      	bhi.n	8010afe <create_name+0x62>
			sfn[i++] = c;
 8010aee:	693b      	ldr	r3, [r7, #16]
 8010af0:	1c5a      	adds	r2, r3, #1
 8010af2:	613a      	str	r2, [r7, #16]
 8010af4:	68ba      	ldr	r2, [r7, #8]
 8010af6:	4413      	add	r3, r2
 8010af8:	7ffa      	ldrb	r2, [r7, #31]
 8010afa:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 8010afc:	e7ea      	b.n	8010ad4 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 8010afe:	7ffb      	ldrb	r3, [r7, #31]
 8010b00:	2b2f      	cmp	r3, #47	; 0x2f
 8010b02:	d007      	beq.n	8010b14 <create_name+0x78>
 8010b04:	7ffb      	ldrb	r3, [r7, #31]
 8010b06:	2b5c      	cmp	r3, #92	; 0x5c
 8010b08:	d004      	beq.n	8010b14 <create_name+0x78>
 8010b0a:	7ffb      	ldrb	r3, [r7, #31]
 8010b0c:	2b20      	cmp	r3, #32
 8010b0e:	d901      	bls.n	8010b14 <create_name+0x78>
 8010b10:	2306      	movs	r3, #6
 8010b12:	e084      	b.n	8010c1e <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 8010b14:	68fa      	ldr	r2, [r7, #12]
 8010b16:	697b      	ldr	r3, [r7, #20]
 8010b18:	441a      	add	r2, r3
 8010b1a:	683b      	ldr	r3, [r7, #0]
 8010b1c:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 8010b1e:	7ffb      	ldrb	r3, [r7, #31]
 8010b20:	2b20      	cmp	r3, #32
 8010b22:	d801      	bhi.n	8010b28 <create_name+0x8c>
 8010b24:	2224      	movs	r2, #36	; 0x24
 8010b26:	e000      	b.n	8010b2a <create_name+0x8e>
 8010b28:	2220      	movs	r2, #32
 8010b2a:	68bb      	ldr	r3, [r7, #8]
 8010b2c:	330b      	adds	r3, #11
 8010b2e:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8010b30:	2300      	movs	r3, #0
 8010b32:	e074      	b.n	8010c1e <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8010b34:	697b      	ldr	r3, [r7, #20]
 8010b36:	1c5a      	adds	r2, r3, #1
 8010b38:	617a      	str	r2, [r7, #20]
 8010b3a:	68fa      	ldr	r2, [r7, #12]
 8010b3c:	4413      	add	r3, r2
 8010b3e:	781b      	ldrb	r3, [r3, #0]
 8010b40:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010b42:	7ffb      	ldrb	r3, [r7, #31]
 8010b44:	2b20      	cmp	r3, #32
 8010b46:	d94e      	bls.n	8010be6 <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8010b48:	7ffb      	ldrb	r3, [r7, #31]
 8010b4a:	2b2f      	cmp	r3, #47	; 0x2f
 8010b4c:	d006      	beq.n	8010b5c <create_name+0xc0>
 8010b4e:	7ffb      	ldrb	r3, [r7, #31]
 8010b50:	2b5c      	cmp	r3, #92	; 0x5c
 8010b52:	d110      	bne.n	8010b76 <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8010b54:	e002      	b.n	8010b5c <create_name+0xc0>
 8010b56:	697b      	ldr	r3, [r7, #20]
 8010b58:	3301      	adds	r3, #1
 8010b5a:	617b      	str	r3, [r7, #20]
 8010b5c:	68fa      	ldr	r2, [r7, #12]
 8010b5e:	697b      	ldr	r3, [r7, #20]
 8010b60:	4413      	add	r3, r2
 8010b62:	781b      	ldrb	r3, [r3, #0]
 8010b64:	2b2f      	cmp	r3, #47	; 0x2f
 8010b66:	d0f6      	beq.n	8010b56 <create_name+0xba>
 8010b68:	68fa      	ldr	r2, [r7, #12]
 8010b6a:	697b      	ldr	r3, [r7, #20]
 8010b6c:	4413      	add	r3, r2
 8010b6e:	781b      	ldrb	r3, [r3, #0]
 8010b70:	2b5c      	cmp	r3, #92	; 0x5c
 8010b72:	d0f0      	beq.n	8010b56 <create_name+0xba>
			break;
 8010b74:	e038      	b.n	8010be8 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8010b76:	7ffb      	ldrb	r3, [r7, #31]
 8010b78:	2b2e      	cmp	r3, #46	; 0x2e
 8010b7a:	d003      	beq.n	8010b84 <create_name+0xe8>
 8010b7c:	693a      	ldr	r2, [r7, #16]
 8010b7e:	69bb      	ldr	r3, [r7, #24]
 8010b80:	429a      	cmp	r2, r3
 8010b82:	d30c      	bcc.n	8010b9e <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8010b84:	69bb      	ldr	r3, [r7, #24]
 8010b86:	2b0b      	cmp	r3, #11
 8010b88:	d002      	beq.n	8010b90 <create_name+0xf4>
 8010b8a:	7ffb      	ldrb	r3, [r7, #31]
 8010b8c:	2b2e      	cmp	r3, #46	; 0x2e
 8010b8e:	d001      	beq.n	8010b94 <create_name+0xf8>
 8010b90:	2306      	movs	r3, #6
 8010b92:	e044      	b.n	8010c1e <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 8010b94:	2308      	movs	r3, #8
 8010b96:	613b      	str	r3, [r7, #16]
 8010b98:	230b      	movs	r3, #11
 8010b9a:	61bb      	str	r3, [r7, #24]
			continue;
 8010b9c:	e022      	b.n	8010be4 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 8010b9e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	da04      	bge.n	8010bb0 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8010ba6:	7ffb      	ldrb	r3, [r7, #31]
 8010ba8:	3b80      	subs	r3, #128	; 0x80
 8010baa:	4a1f      	ldr	r2, [pc, #124]	; (8010c28 <create_name+0x18c>)
 8010bac:	5cd3      	ldrb	r3, [r2, r3]
 8010bae:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8010bb0:	7ffb      	ldrb	r3, [r7, #31]
 8010bb2:	4619      	mov	r1, r3
 8010bb4:	481d      	ldr	r0, [pc, #116]	; (8010c2c <create_name+0x190>)
 8010bb6:	f7fe fee5 	bl	800f984 <chk_chr>
 8010bba:	4603      	mov	r3, r0
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d001      	beq.n	8010bc4 <create_name+0x128>
 8010bc0:	2306      	movs	r3, #6
 8010bc2:	e02c      	b.n	8010c1e <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8010bc4:	7ffb      	ldrb	r3, [r7, #31]
 8010bc6:	2b60      	cmp	r3, #96	; 0x60
 8010bc8:	d905      	bls.n	8010bd6 <create_name+0x13a>
 8010bca:	7ffb      	ldrb	r3, [r7, #31]
 8010bcc:	2b7a      	cmp	r3, #122	; 0x7a
 8010bce:	d802      	bhi.n	8010bd6 <create_name+0x13a>
 8010bd0:	7ffb      	ldrb	r3, [r7, #31]
 8010bd2:	3b20      	subs	r3, #32
 8010bd4:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8010bd6:	693b      	ldr	r3, [r7, #16]
 8010bd8:	1c5a      	adds	r2, r3, #1
 8010bda:	613a      	str	r2, [r7, #16]
 8010bdc:	68ba      	ldr	r2, [r7, #8]
 8010bde:	4413      	add	r3, r2
 8010be0:	7ffa      	ldrb	r2, [r7, #31]
 8010be2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8010be4:	e7a6      	b.n	8010b34 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010be6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8010be8:	68fa      	ldr	r2, [r7, #12]
 8010bea:	697b      	ldr	r3, [r7, #20]
 8010bec:	441a      	add	r2, r3
 8010bee:	683b      	ldr	r3, [r7, #0]
 8010bf0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8010bf2:	693b      	ldr	r3, [r7, #16]
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d101      	bne.n	8010bfc <create_name+0x160>
 8010bf8:	2306      	movs	r3, #6
 8010bfa:	e010      	b.n	8010c1e <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8010bfc:	68bb      	ldr	r3, [r7, #8]
 8010bfe:	781b      	ldrb	r3, [r3, #0]
 8010c00:	2be5      	cmp	r3, #229	; 0xe5
 8010c02:	d102      	bne.n	8010c0a <create_name+0x16e>
 8010c04:	68bb      	ldr	r3, [r7, #8]
 8010c06:	2205      	movs	r2, #5
 8010c08:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8010c0a:	7ffb      	ldrb	r3, [r7, #31]
 8010c0c:	2b20      	cmp	r3, #32
 8010c0e:	d801      	bhi.n	8010c14 <create_name+0x178>
 8010c10:	2204      	movs	r2, #4
 8010c12:	e000      	b.n	8010c16 <create_name+0x17a>
 8010c14:	2200      	movs	r2, #0
 8010c16:	68bb      	ldr	r3, [r7, #8]
 8010c18:	330b      	adds	r3, #11
 8010c1a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8010c1c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8010c1e:	4618      	mov	r0, r3
 8010c20:	3720      	adds	r7, #32
 8010c22:	46bd      	mov	sp, r7
 8010c24:	bd80      	pop	{r7, pc}
 8010c26:	bf00      	nop
 8010c28:	0801839c 	.word	0x0801839c
 8010c2c:	0801834c 	.word	0x0801834c

08010c30 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8010c30:	b580      	push	{r7, lr}
 8010c32:	b086      	sub	sp, #24
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	6078      	str	r0, [r7, #4]
 8010c38:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8010c3e:	693b      	ldr	r3, [r7, #16]
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8010c44:	683b      	ldr	r3, [r7, #0]
 8010c46:	781b      	ldrb	r3, [r3, #0]
 8010c48:	2b2f      	cmp	r3, #47	; 0x2f
 8010c4a:	d00b      	beq.n	8010c64 <follow_path+0x34>
 8010c4c:	683b      	ldr	r3, [r7, #0]
 8010c4e:	781b      	ldrb	r3, [r3, #0]
 8010c50:	2b5c      	cmp	r3, #92	; 0x5c
 8010c52:	d007      	beq.n	8010c64 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	699a      	ldr	r2, [r3, #24]
 8010c58:	693b      	ldr	r3, [r7, #16]
 8010c5a:	609a      	str	r2, [r3, #8]
 8010c5c:	e00d      	b.n	8010c7a <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8010c5e:	683b      	ldr	r3, [r7, #0]
 8010c60:	3301      	adds	r3, #1
 8010c62:	603b      	str	r3, [r7, #0]
 8010c64:	683b      	ldr	r3, [r7, #0]
 8010c66:	781b      	ldrb	r3, [r3, #0]
 8010c68:	2b2f      	cmp	r3, #47	; 0x2f
 8010c6a:	d0f8      	beq.n	8010c5e <follow_path+0x2e>
 8010c6c:	683b      	ldr	r3, [r7, #0]
 8010c6e:	781b      	ldrb	r3, [r3, #0]
 8010c70:	2b5c      	cmp	r3, #92	; 0x5c
 8010c72:	d0f4      	beq.n	8010c5e <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8010c74:	693b      	ldr	r3, [r7, #16]
 8010c76:	2200      	movs	r2, #0
 8010c78:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8010c7a:	683b      	ldr	r3, [r7, #0]
 8010c7c:	781b      	ldrb	r3, [r3, #0]
 8010c7e:	2b1f      	cmp	r3, #31
 8010c80:	d80a      	bhi.n	8010c98 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	2280      	movs	r2, #128	; 0x80
 8010c86:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8010c8a:	2100      	movs	r1, #0
 8010c8c:	6878      	ldr	r0, [r7, #4]
 8010c8e:	f7ff fc1e 	bl	80104ce <dir_sdi>
 8010c92:	4603      	mov	r3, r0
 8010c94:	75fb      	strb	r3, [r7, #23]
 8010c96:	e05b      	b.n	8010d50 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010c98:	463b      	mov	r3, r7
 8010c9a:	4619      	mov	r1, r3
 8010c9c:	6878      	ldr	r0, [r7, #4]
 8010c9e:	f7ff fefd 	bl	8010a9c <create_name>
 8010ca2:	4603      	mov	r3, r0
 8010ca4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010ca6:	7dfb      	ldrb	r3, [r7, #23]
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d14c      	bne.n	8010d46 <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 8010cac:	6878      	ldr	r0, [r7, #4]
 8010cae:	f7ff fe50 	bl	8010952 <dir_find>
 8010cb2:	4603      	mov	r3, r0
 8010cb4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010cbc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8010cbe:	7dfb      	ldrb	r3, [r7, #23]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d01b      	beq.n	8010cfc <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8010cc4:	7dfb      	ldrb	r3, [r7, #23]
 8010cc6:	2b04      	cmp	r3, #4
 8010cc8:	d13f      	bne.n	8010d4a <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8010cca:	7afb      	ldrb	r3, [r7, #11]
 8010ccc:	f003 0320 	and.w	r3, r3, #32
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d00b      	beq.n	8010cec <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8010cd4:	7afb      	ldrb	r3, [r7, #11]
 8010cd6:	f003 0304 	and.w	r3, r3, #4
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d031      	beq.n	8010d42 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	2280      	movs	r2, #128	; 0x80
 8010ce2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 8010ce6:	2300      	movs	r3, #0
 8010ce8:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8010cea:	e02e      	b.n	8010d4a <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8010cec:	7afb      	ldrb	r3, [r7, #11]
 8010cee:	f003 0304 	and.w	r3, r3, #4
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d129      	bne.n	8010d4a <follow_path+0x11a>
 8010cf6:	2305      	movs	r3, #5
 8010cf8:	75fb      	strb	r3, [r7, #23]
				break;
 8010cfa:	e026      	b.n	8010d4a <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010cfc:	7afb      	ldrb	r3, [r7, #11]
 8010cfe:	f003 0304 	and.w	r3, r3, #4
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d123      	bne.n	8010d4e <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8010d06:	693b      	ldr	r3, [r7, #16]
 8010d08:	799b      	ldrb	r3, [r3, #6]
 8010d0a:	f003 0310 	and.w	r3, r3, #16
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d102      	bne.n	8010d18 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 8010d12:	2305      	movs	r3, #5
 8010d14:	75fb      	strb	r3, [r7, #23]
 8010d16:	e01b      	b.n	8010d50 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	695b      	ldr	r3, [r3, #20]
 8010d22:	68fa      	ldr	r2, [r7, #12]
 8010d24:	8992      	ldrh	r2, [r2, #12]
 8010d26:	fbb3 f0f2 	udiv	r0, r3, r2
 8010d2a:	fb02 f200 	mul.w	r2, r2, r0
 8010d2e:	1a9b      	subs	r3, r3, r2
 8010d30:	440b      	add	r3, r1
 8010d32:	4619      	mov	r1, r3
 8010d34:	68f8      	ldr	r0, [r7, #12]
 8010d36:	f7ff fd70 	bl	801081a <ld_clust>
 8010d3a:	4602      	mov	r2, r0
 8010d3c:	693b      	ldr	r3, [r7, #16]
 8010d3e:	609a      	str	r2, [r3, #8]
 8010d40:	e7aa      	b.n	8010c98 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8010d42:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010d44:	e7a8      	b.n	8010c98 <follow_path+0x68>
			if (res != FR_OK) break;
 8010d46:	bf00      	nop
 8010d48:	e002      	b.n	8010d50 <follow_path+0x120>
				break;
 8010d4a:	bf00      	nop
 8010d4c:	e000      	b.n	8010d50 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010d4e:	bf00      	nop
			}
		}
	}

	return res;
 8010d50:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d52:	4618      	mov	r0, r3
 8010d54:	3718      	adds	r7, #24
 8010d56:	46bd      	mov	sp, r7
 8010d58:	bd80      	pop	{r7, pc}

08010d5a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8010d5a:	b480      	push	{r7}
 8010d5c:	b087      	sub	sp, #28
 8010d5e:	af00      	add	r7, sp, #0
 8010d60:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010d62:	f04f 33ff 	mov.w	r3, #4294967295
 8010d66:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d031      	beq.n	8010dd4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	617b      	str	r3, [r7, #20]
 8010d76:	e002      	b.n	8010d7e <get_ldnumber+0x24>
 8010d78:	697b      	ldr	r3, [r7, #20]
 8010d7a:	3301      	adds	r3, #1
 8010d7c:	617b      	str	r3, [r7, #20]
 8010d7e:	697b      	ldr	r3, [r7, #20]
 8010d80:	781b      	ldrb	r3, [r3, #0]
 8010d82:	2b20      	cmp	r3, #32
 8010d84:	d903      	bls.n	8010d8e <get_ldnumber+0x34>
 8010d86:	697b      	ldr	r3, [r7, #20]
 8010d88:	781b      	ldrb	r3, [r3, #0]
 8010d8a:	2b3a      	cmp	r3, #58	; 0x3a
 8010d8c:	d1f4      	bne.n	8010d78 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8010d8e:	697b      	ldr	r3, [r7, #20]
 8010d90:	781b      	ldrb	r3, [r3, #0]
 8010d92:	2b3a      	cmp	r3, #58	; 0x3a
 8010d94:	d11c      	bne.n	8010dd0 <get_ldnumber+0x76>
			tp = *path;
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	1c5a      	adds	r2, r3, #1
 8010da0:	60fa      	str	r2, [r7, #12]
 8010da2:	781b      	ldrb	r3, [r3, #0]
 8010da4:	3b30      	subs	r3, #48	; 0x30
 8010da6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010da8:	68bb      	ldr	r3, [r7, #8]
 8010daa:	2b09      	cmp	r3, #9
 8010dac:	d80e      	bhi.n	8010dcc <get_ldnumber+0x72>
 8010dae:	68fa      	ldr	r2, [r7, #12]
 8010db0:	697b      	ldr	r3, [r7, #20]
 8010db2:	429a      	cmp	r2, r3
 8010db4:	d10a      	bne.n	8010dcc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010db6:	68bb      	ldr	r3, [r7, #8]
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d107      	bne.n	8010dcc <get_ldnumber+0x72>
					vol = (int)i;
 8010dbc:	68bb      	ldr	r3, [r7, #8]
 8010dbe:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010dc0:	697b      	ldr	r3, [r7, #20]
 8010dc2:	3301      	adds	r3, #1
 8010dc4:	617b      	str	r3, [r7, #20]
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	697a      	ldr	r2, [r7, #20]
 8010dca:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010dcc:	693b      	ldr	r3, [r7, #16]
 8010dce:	e002      	b.n	8010dd6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010dd0:	2300      	movs	r3, #0
 8010dd2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8010dd4:	693b      	ldr	r3, [r7, #16]
}
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	371c      	adds	r7, #28
 8010dda:	46bd      	mov	sp, r7
 8010ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de0:	4770      	bx	lr
	...

08010de4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010de4:	b580      	push	{r7, lr}
 8010de6:	b082      	sub	sp, #8
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	6078      	str	r0, [r7, #4]
 8010dec:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	2200      	movs	r2, #0
 8010df2:	70da      	strb	r2, [r3, #3]
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	f04f 32ff 	mov.w	r2, #4294967295
 8010dfa:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8010dfc:	6839      	ldr	r1, [r7, #0]
 8010dfe:	6878      	ldr	r0, [r7, #4]
 8010e00:	f7fe ff8c 	bl	800fd1c <move_window>
 8010e04:	4603      	mov	r3, r0
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d001      	beq.n	8010e0e <check_fs+0x2a>
 8010e0a:	2304      	movs	r3, #4
 8010e0c:	e038      	b.n	8010e80 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	3338      	adds	r3, #56	; 0x38
 8010e12:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010e16:	4618      	mov	r0, r3
 8010e18:	f7fe fcd0 	bl	800f7bc <ld_word>
 8010e1c:	4603      	mov	r3, r0
 8010e1e:	461a      	mov	r2, r3
 8010e20:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010e24:	429a      	cmp	r2, r3
 8010e26:	d001      	beq.n	8010e2c <check_fs+0x48>
 8010e28:	2303      	movs	r3, #3
 8010e2a:	e029      	b.n	8010e80 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010e32:	2be9      	cmp	r3, #233	; 0xe9
 8010e34:	d009      	beq.n	8010e4a <check_fs+0x66>
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010e3c:	2beb      	cmp	r3, #235	; 0xeb
 8010e3e:	d11e      	bne.n	8010e7e <check_fs+0x9a>
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010e46:	2b90      	cmp	r3, #144	; 0x90
 8010e48:	d119      	bne.n	8010e7e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	3338      	adds	r3, #56	; 0x38
 8010e4e:	3336      	adds	r3, #54	; 0x36
 8010e50:	4618      	mov	r0, r3
 8010e52:	f7fe fccb 	bl	800f7ec <ld_dword>
 8010e56:	4603      	mov	r3, r0
 8010e58:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010e5c:	4a0a      	ldr	r2, [pc, #40]	; (8010e88 <check_fs+0xa4>)
 8010e5e:	4293      	cmp	r3, r2
 8010e60:	d101      	bne.n	8010e66 <check_fs+0x82>
 8010e62:	2300      	movs	r3, #0
 8010e64:	e00c      	b.n	8010e80 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	3338      	adds	r3, #56	; 0x38
 8010e6a:	3352      	adds	r3, #82	; 0x52
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	f7fe fcbd 	bl	800f7ec <ld_dword>
 8010e72:	4602      	mov	r2, r0
 8010e74:	4b05      	ldr	r3, [pc, #20]	; (8010e8c <check_fs+0xa8>)
 8010e76:	429a      	cmp	r2, r3
 8010e78:	d101      	bne.n	8010e7e <check_fs+0x9a>
 8010e7a:	2300      	movs	r3, #0
 8010e7c:	e000      	b.n	8010e80 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8010e7e:	2302      	movs	r3, #2
}
 8010e80:	4618      	mov	r0, r3
 8010e82:	3708      	adds	r7, #8
 8010e84:	46bd      	mov	sp, r7
 8010e86:	bd80      	pop	{r7, pc}
 8010e88:	00544146 	.word	0x00544146
 8010e8c:	33544146 	.word	0x33544146

08010e90 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010e90:	b580      	push	{r7, lr}
 8010e92:	b096      	sub	sp, #88	; 0x58
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	60f8      	str	r0, [r7, #12]
 8010e98:	60b9      	str	r1, [r7, #8]
 8010e9a:	4613      	mov	r3, r2
 8010e9c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8010e9e:	68bb      	ldr	r3, [r7, #8]
 8010ea0:	2200      	movs	r2, #0
 8010ea2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010ea4:	68f8      	ldr	r0, [r7, #12]
 8010ea6:	f7ff ff58 	bl	8010d5a <get_ldnumber>
 8010eaa:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010eac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	da01      	bge.n	8010eb6 <find_volume+0x26>
 8010eb2:	230b      	movs	r3, #11
 8010eb4:	e268      	b.n	8011388 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010eb6:	4ab0      	ldr	r2, [pc, #704]	; (8011178 <find_volume+0x2e8>)
 8010eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010ebe:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d101      	bne.n	8010eca <find_volume+0x3a>
 8010ec6:	230c      	movs	r3, #12
 8010ec8:	e25e      	b.n	8011388 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8010eca:	68bb      	ldr	r3, [r7, #8]
 8010ecc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010ece:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010ed0:	79fb      	ldrb	r3, [r7, #7]
 8010ed2:	f023 0301 	bic.w	r3, r3, #1
 8010ed6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010eda:	781b      	ldrb	r3, [r3, #0]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d01a      	beq.n	8010f16 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8010ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ee2:	785b      	ldrb	r3, [r3, #1]
 8010ee4:	4618      	mov	r0, r3
 8010ee6:	f7fe fbcb 	bl	800f680 <disk_status>
 8010eea:	4603      	mov	r3, r0
 8010eec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010ef0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010ef4:	f003 0301 	and.w	r3, r3, #1
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d10c      	bne.n	8010f16 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010efc:	79fb      	ldrb	r3, [r7, #7]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d007      	beq.n	8010f12 <find_volume+0x82>
 8010f02:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010f06:	f003 0304 	and.w	r3, r3, #4
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d001      	beq.n	8010f12 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8010f0e:	230a      	movs	r3, #10
 8010f10:	e23a      	b.n	8011388 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8010f12:	2300      	movs	r3, #0
 8010f14:	e238      	b.n	8011388 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8010f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f18:	2200      	movs	r2, #0
 8010f1a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8010f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f1e:	b2da      	uxtb	r2, r3
 8010f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f22:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f26:	785b      	ldrb	r3, [r3, #1]
 8010f28:	4618      	mov	r0, r3
 8010f2a:	f7fe fbc3 	bl	800f6b4 <disk_initialize>
 8010f2e:	4603      	mov	r3, r0
 8010f30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010f34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010f38:	f003 0301 	and.w	r3, r3, #1
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d001      	beq.n	8010f44 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010f40:	2303      	movs	r3, #3
 8010f42:	e221      	b.n	8011388 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010f44:	79fb      	ldrb	r3, [r7, #7]
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d007      	beq.n	8010f5a <find_volume+0xca>
 8010f4a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010f4e:	f003 0304 	and.w	r3, r3, #4
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d001      	beq.n	8010f5a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8010f56:	230a      	movs	r3, #10
 8010f58:	e216      	b.n	8011388 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8010f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f5c:	7858      	ldrb	r0, [r3, #1]
 8010f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f60:	330c      	adds	r3, #12
 8010f62:	461a      	mov	r2, r3
 8010f64:	2102      	movs	r1, #2
 8010f66:	f7fe fc0b 	bl	800f780 <disk_ioctl>
 8010f6a:	4603      	mov	r3, r0
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d001      	beq.n	8010f74 <find_volume+0xe4>
 8010f70:	2301      	movs	r3, #1
 8010f72:	e209      	b.n	8011388 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8010f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f76:	899b      	ldrh	r3, [r3, #12]
 8010f78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010f7c:	d80d      	bhi.n	8010f9a <find_volume+0x10a>
 8010f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f80:	899b      	ldrh	r3, [r3, #12]
 8010f82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010f86:	d308      	bcc.n	8010f9a <find_volume+0x10a>
 8010f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f8a:	899b      	ldrh	r3, [r3, #12]
 8010f8c:	461a      	mov	r2, r3
 8010f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f90:	899b      	ldrh	r3, [r3, #12]
 8010f92:	3b01      	subs	r3, #1
 8010f94:	4013      	ands	r3, r2
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d001      	beq.n	8010f9e <find_volume+0x10e>
 8010f9a:	2301      	movs	r3, #1
 8010f9c:	e1f4      	b.n	8011388 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8010f9e:	2300      	movs	r3, #0
 8010fa0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8010fa2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010fa4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010fa6:	f7ff ff1d 	bl	8010de4 <check_fs>
 8010faa:	4603      	mov	r3, r0
 8010fac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010fb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010fb4:	2b02      	cmp	r3, #2
 8010fb6:	d14b      	bne.n	8011050 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010fb8:	2300      	movs	r3, #0
 8010fba:	643b      	str	r3, [r7, #64]	; 0x40
 8010fbc:	e01f      	b.n	8010ffe <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fc0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8010fc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010fc6:	011b      	lsls	r3, r3, #4
 8010fc8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8010fcc:	4413      	add	r3, r2
 8010fce:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fd2:	3304      	adds	r3, #4
 8010fd4:	781b      	ldrb	r3, [r3, #0]
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d006      	beq.n	8010fe8 <find_volume+0x158>
 8010fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fdc:	3308      	adds	r3, #8
 8010fde:	4618      	mov	r0, r3
 8010fe0:	f7fe fc04 	bl	800f7ec <ld_dword>
 8010fe4:	4602      	mov	r2, r0
 8010fe6:	e000      	b.n	8010fea <find_volume+0x15a>
 8010fe8:	2200      	movs	r2, #0
 8010fea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010fec:	009b      	lsls	r3, r3, #2
 8010fee:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8010ff2:	440b      	add	r3, r1
 8010ff4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010ff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010ffa:	3301      	adds	r3, #1
 8010ffc:	643b      	str	r3, [r7, #64]	; 0x40
 8010ffe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011000:	2b03      	cmp	r3, #3
 8011002:	d9dc      	bls.n	8010fbe <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8011004:	2300      	movs	r3, #0
 8011006:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8011008:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801100a:	2b00      	cmp	r3, #0
 801100c:	d002      	beq.n	8011014 <find_volume+0x184>
 801100e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011010:	3b01      	subs	r3, #1
 8011012:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8011014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011016:	009b      	lsls	r3, r3, #2
 8011018:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801101c:	4413      	add	r3, r2
 801101e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8011022:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8011024:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011026:	2b00      	cmp	r3, #0
 8011028:	d005      	beq.n	8011036 <find_volume+0x1a6>
 801102a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801102c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801102e:	f7ff fed9 	bl	8010de4 <check_fs>
 8011032:	4603      	mov	r3, r0
 8011034:	e000      	b.n	8011038 <find_volume+0x1a8>
 8011036:	2303      	movs	r3, #3
 8011038:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801103c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011040:	2b01      	cmp	r3, #1
 8011042:	d905      	bls.n	8011050 <find_volume+0x1c0>
 8011044:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011046:	3301      	adds	r3, #1
 8011048:	643b      	str	r3, [r7, #64]	; 0x40
 801104a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801104c:	2b03      	cmp	r3, #3
 801104e:	d9e1      	bls.n	8011014 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011050:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011054:	2b04      	cmp	r3, #4
 8011056:	d101      	bne.n	801105c <find_volume+0x1cc>
 8011058:	2301      	movs	r3, #1
 801105a:	e195      	b.n	8011388 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801105c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011060:	2b01      	cmp	r3, #1
 8011062:	d901      	bls.n	8011068 <find_volume+0x1d8>
 8011064:	230d      	movs	r3, #13
 8011066:	e18f      	b.n	8011388 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8011068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801106a:	3338      	adds	r3, #56	; 0x38
 801106c:	330b      	adds	r3, #11
 801106e:	4618      	mov	r0, r3
 8011070:	f7fe fba4 	bl	800f7bc <ld_word>
 8011074:	4603      	mov	r3, r0
 8011076:	461a      	mov	r2, r3
 8011078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801107a:	899b      	ldrh	r3, [r3, #12]
 801107c:	429a      	cmp	r2, r3
 801107e:	d001      	beq.n	8011084 <find_volume+0x1f4>
 8011080:	230d      	movs	r3, #13
 8011082:	e181      	b.n	8011388 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8011084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011086:	3338      	adds	r3, #56	; 0x38
 8011088:	3316      	adds	r3, #22
 801108a:	4618      	mov	r0, r3
 801108c:	f7fe fb96 	bl	800f7bc <ld_word>
 8011090:	4603      	mov	r3, r0
 8011092:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8011094:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011096:	2b00      	cmp	r3, #0
 8011098:	d106      	bne.n	80110a8 <find_volume+0x218>
 801109a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801109c:	3338      	adds	r3, #56	; 0x38
 801109e:	3324      	adds	r3, #36	; 0x24
 80110a0:	4618      	mov	r0, r3
 80110a2:	f7fe fba3 	bl	800f7ec <ld_dword>
 80110a6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80110a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80110ac:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80110ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110b0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80110b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110b6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80110b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110ba:	789b      	ldrb	r3, [r3, #2]
 80110bc:	2b01      	cmp	r3, #1
 80110be:	d005      	beq.n	80110cc <find_volume+0x23c>
 80110c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110c2:	789b      	ldrb	r3, [r3, #2]
 80110c4:	2b02      	cmp	r3, #2
 80110c6:	d001      	beq.n	80110cc <find_volume+0x23c>
 80110c8:	230d      	movs	r3, #13
 80110ca:	e15d      	b.n	8011388 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80110cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110ce:	789b      	ldrb	r3, [r3, #2]
 80110d0:	461a      	mov	r2, r3
 80110d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110d4:	fb02 f303 	mul.w	r3, r2, r3
 80110d8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80110da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80110e0:	b29a      	uxth	r2, r3
 80110e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110e4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80110e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110e8:	895b      	ldrh	r3, [r3, #10]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d008      	beq.n	8011100 <find_volume+0x270>
 80110ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110f0:	895b      	ldrh	r3, [r3, #10]
 80110f2:	461a      	mov	r2, r3
 80110f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110f6:	895b      	ldrh	r3, [r3, #10]
 80110f8:	3b01      	subs	r3, #1
 80110fa:	4013      	ands	r3, r2
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d001      	beq.n	8011104 <find_volume+0x274>
 8011100:	230d      	movs	r3, #13
 8011102:	e141      	b.n	8011388 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8011104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011106:	3338      	adds	r3, #56	; 0x38
 8011108:	3311      	adds	r3, #17
 801110a:	4618      	mov	r0, r3
 801110c:	f7fe fb56 	bl	800f7bc <ld_word>
 8011110:	4603      	mov	r3, r0
 8011112:	461a      	mov	r2, r3
 8011114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011116:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8011118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801111a:	891b      	ldrh	r3, [r3, #8]
 801111c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801111e:	8992      	ldrh	r2, [r2, #12]
 8011120:	0952      	lsrs	r2, r2, #5
 8011122:	b292      	uxth	r2, r2
 8011124:	fbb3 f1f2 	udiv	r1, r3, r2
 8011128:	fb02 f201 	mul.w	r2, r2, r1
 801112c:	1a9b      	subs	r3, r3, r2
 801112e:	b29b      	uxth	r3, r3
 8011130:	2b00      	cmp	r3, #0
 8011132:	d001      	beq.n	8011138 <find_volume+0x2a8>
 8011134:	230d      	movs	r3, #13
 8011136:	e127      	b.n	8011388 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8011138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801113a:	3338      	adds	r3, #56	; 0x38
 801113c:	3313      	adds	r3, #19
 801113e:	4618      	mov	r0, r3
 8011140:	f7fe fb3c 	bl	800f7bc <ld_word>
 8011144:	4603      	mov	r3, r0
 8011146:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8011148:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801114a:	2b00      	cmp	r3, #0
 801114c:	d106      	bne.n	801115c <find_volume+0x2cc>
 801114e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011150:	3338      	adds	r3, #56	; 0x38
 8011152:	3320      	adds	r3, #32
 8011154:	4618      	mov	r0, r3
 8011156:	f7fe fb49 	bl	800f7ec <ld_dword>
 801115a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801115c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801115e:	3338      	adds	r3, #56	; 0x38
 8011160:	330e      	adds	r3, #14
 8011162:	4618      	mov	r0, r3
 8011164:	f7fe fb2a 	bl	800f7bc <ld_word>
 8011168:	4603      	mov	r3, r0
 801116a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801116c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801116e:	2b00      	cmp	r3, #0
 8011170:	d104      	bne.n	801117c <find_volume+0x2ec>
 8011172:	230d      	movs	r3, #13
 8011174:	e108      	b.n	8011388 <find_volume+0x4f8>
 8011176:	bf00      	nop
 8011178:	2003c460 	.word	0x2003c460

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801117c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801117e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011180:	4413      	add	r3, r2
 8011182:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011184:	8911      	ldrh	r1, [r2, #8]
 8011186:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011188:	8992      	ldrh	r2, [r2, #12]
 801118a:	0952      	lsrs	r2, r2, #5
 801118c:	b292      	uxth	r2, r2
 801118e:	fbb1 f2f2 	udiv	r2, r1, r2
 8011192:	b292      	uxth	r2, r2
 8011194:	4413      	add	r3, r2
 8011196:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8011198:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801119a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801119c:	429a      	cmp	r2, r3
 801119e:	d201      	bcs.n	80111a4 <find_volume+0x314>
 80111a0:	230d      	movs	r3, #13
 80111a2:	e0f1      	b.n	8011388 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80111a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80111a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111a8:	1ad3      	subs	r3, r2, r3
 80111aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80111ac:	8952      	ldrh	r2, [r2, #10]
 80111ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80111b2:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80111b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d101      	bne.n	80111be <find_volume+0x32e>
 80111ba:	230d      	movs	r3, #13
 80111bc:	e0e4      	b.n	8011388 <find_volume+0x4f8>
		fmt = FS_FAT32;
 80111be:	2303      	movs	r3, #3
 80111c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80111c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111c6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80111ca:	4293      	cmp	r3, r2
 80111cc:	d802      	bhi.n	80111d4 <find_volume+0x344>
 80111ce:	2302      	movs	r3, #2
 80111d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80111d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111d6:	f640 72f5 	movw	r2, #4085	; 0xff5
 80111da:	4293      	cmp	r3, r2
 80111dc:	d802      	bhi.n	80111e4 <find_volume+0x354>
 80111de:	2301      	movs	r3, #1
 80111e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80111e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111e6:	1c9a      	adds	r2, r3, #2
 80111e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111ea:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80111ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80111f0:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80111f2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80111f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80111f6:	441a      	add	r2, r3
 80111f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111fa:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80111fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80111fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011200:	441a      	add	r2, r3
 8011202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011204:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8011206:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801120a:	2b03      	cmp	r3, #3
 801120c:	d11e      	bne.n	801124c <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801120e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011210:	3338      	adds	r3, #56	; 0x38
 8011212:	332a      	adds	r3, #42	; 0x2a
 8011214:	4618      	mov	r0, r3
 8011216:	f7fe fad1 	bl	800f7bc <ld_word>
 801121a:	4603      	mov	r3, r0
 801121c:	2b00      	cmp	r3, #0
 801121e:	d001      	beq.n	8011224 <find_volume+0x394>
 8011220:	230d      	movs	r3, #13
 8011222:	e0b1      	b.n	8011388 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8011224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011226:	891b      	ldrh	r3, [r3, #8]
 8011228:	2b00      	cmp	r3, #0
 801122a:	d001      	beq.n	8011230 <find_volume+0x3a0>
 801122c:	230d      	movs	r3, #13
 801122e:	e0ab      	b.n	8011388 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8011230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011232:	3338      	adds	r3, #56	; 0x38
 8011234:	332c      	adds	r3, #44	; 0x2c
 8011236:	4618      	mov	r0, r3
 8011238:	f7fe fad8 	bl	800f7ec <ld_dword>
 801123c:	4602      	mov	r2, r0
 801123e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011240:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8011242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011244:	69db      	ldr	r3, [r3, #28]
 8011246:	009b      	lsls	r3, r3, #2
 8011248:	647b      	str	r3, [r7, #68]	; 0x44
 801124a:	e01f      	b.n	801128c <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801124c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801124e:	891b      	ldrh	r3, [r3, #8]
 8011250:	2b00      	cmp	r3, #0
 8011252:	d101      	bne.n	8011258 <find_volume+0x3c8>
 8011254:	230d      	movs	r3, #13
 8011256:	e097      	b.n	8011388 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8011258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801125a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801125c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801125e:	441a      	add	r2, r3
 8011260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011262:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8011264:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011268:	2b02      	cmp	r3, #2
 801126a:	d103      	bne.n	8011274 <find_volume+0x3e4>
 801126c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801126e:	69db      	ldr	r3, [r3, #28]
 8011270:	005b      	lsls	r3, r3, #1
 8011272:	e00a      	b.n	801128a <find_volume+0x3fa>
 8011274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011276:	69da      	ldr	r2, [r3, #28]
 8011278:	4613      	mov	r3, r2
 801127a:	005b      	lsls	r3, r3, #1
 801127c:	4413      	add	r3, r2
 801127e:	085a      	lsrs	r2, r3, #1
 8011280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011282:	69db      	ldr	r3, [r3, #28]
 8011284:	f003 0301 	and.w	r3, r3, #1
 8011288:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801128a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801128c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801128e:	6a1a      	ldr	r2, [r3, #32]
 8011290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011292:	899b      	ldrh	r3, [r3, #12]
 8011294:	4619      	mov	r1, r3
 8011296:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011298:	440b      	add	r3, r1
 801129a:	3b01      	subs	r3, #1
 801129c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801129e:	8989      	ldrh	r1, [r1, #12]
 80112a0:	fbb3 f3f1 	udiv	r3, r3, r1
 80112a4:	429a      	cmp	r2, r3
 80112a6:	d201      	bcs.n	80112ac <find_volume+0x41c>
 80112a8:	230d      	movs	r3, #13
 80112aa:	e06d      	b.n	8011388 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80112ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112ae:	f04f 32ff 	mov.w	r2, #4294967295
 80112b2:	615a      	str	r2, [r3, #20]
 80112b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112b6:	695a      	ldr	r2, [r3, #20]
 80112b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112ba:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80112bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112be:	2280      	movs	r2, #128	; 0x80
 80112c0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80112c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80112c6:	2b03      	cmp	r3, #3
 80112c8:	d149      	bne.n	801135e <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80112ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112cc:	3338      	adds	r3, #56	; 0x38
 80112ce:	3330      	adds	r3, #48	; 0x30
 80112d0:	4618      	mov	r0, r3
 80112d2:	f7fe fa73 	bl	800f7bc <ld_word>
 80112d6:	4603      	mov	r3, r0
 80112d8:	2b01      	cmp	r3, #1
 80112da:	d140      	bne.n	801135e <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 80112dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80112de:	3301      	adds	r3, #1
 80112e0:	4619      	mov	r1, r3
 80112e2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80112e4:	f7fe fd1a 	bl	800fd1c <move_window>
 80112e8:	4603      	mov	r3, r0
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d137      	bne.n	801135e <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 80112ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112f0:	2200      	movs	r2, #0
 80112f2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80112f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112f6:	3338      	adds	r3, #56	; 0x38
 80112f8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80112fc:	4618      	mov	r0, r3
 80112fe:	f7fe fa5d 	bl	800f7bc <ld_word>
 8011302:	4603      	mov	r3, r0
 8011304:	461a      	mov	r2, r3
 8011306:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801130a:	429a      	cmp	r2, r3
 801130c:	d127      	bne.n	801135e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801130e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011310:	3338      	adds	r3, #56	; 0x38
 8011312:	4618      	mov	r0, r3
 8011314:	f7fe fa6a 	bl	800f7ec <ld_dword>
 8011318:	4602      	mov	r2, r0
 801131a:	4b1d      	ldr	r3, [pc, #116]	; (8011390 <find_volume+0x500>)
 801131c:	429a      	cmp	r2, r3
 801131e:	d11e      	bne.n	801135e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8011320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011322:	3338      	adds	r3, #56	; 0x38
 8011324:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011328:	4618      	mov	r0, r3
 801132a:	f7fe fa5f 	bl	800f7ec <ld_dword>
 801132e:	4602      	mov	r2, r0
 8011330:	4b18      	ldr	r3, [pc, #96]	; (8011394 <find_volume+0x504>)
 8011332:	429a      	cmp	r2, r3
 8011334:	d113      	bne.n	801135e <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8011336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011338:	3338      	adds	r3, #56	; 0x38
 801133a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801133e:	4618      	mov	r0, r3
 8011340:	f7fe fa54 	bl	800f7ec <ld_dword>
 8011344:	4602      	mov	r2, r0
 8011346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011348:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801134a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801134c:	3338      	adds	r3, #56	; 0x38
 801134e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8011352:	4618      	mov	r0, r3
 8011354:	f7fe fa4a 	bl	800f7ec <ld_dword>
 8011358:	4602      	mov	r2, r0
 801135a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801135c:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801135e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011360:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8011364:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8011366:	4b0c      	ldr	r3, [pc, #48]	; (8011398 <find_volume+0x508>)
 8011368:	881b      	ldrh	r3, [r3, #0]
 801136a:	3301      	adds	r3, #1
 801136c:	b29a      	uxth	r2, r3
 801136e:	4b0a      	ldr	r3, [pc, #40]	; (8011398 <find_volume+0x508>)
 8011370:	801a      	strh	r2, [r3, #0]
 8011372:	4b09      	ldr	r3, [pc, #36]	; (8011398 <find_volume+0x508>)
 8011374:	881a      	ldrh	r2, [r3, #0]
 8011376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011378:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 801137a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801137c:	2200      	movs	r2, #0
 801137e:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8011380:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011382:	f7fe fc63 	bl	800fc4c <clear_lock>
#endif
	return FR_OK;
 8011386:	2300      	movs	r3, #0
}
 8011388:	4618      	mov	r0, r3
 801138a:	3758      	adds	r7, #88	; 0x58
 801138c:	46bd      	mov	sp, r7
 801138e:	bd80      	pop	{r7, pc}
 8011390:	41615252 	.word	0x41615252
 8011394:	61417272 	.word	0x61417272
 8011398:	2003c464 	.word	0x2003c464

0801139c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801139c:	b580      	push	{r7, lr}
 801139e:	b084      	sub	sp, #16
 80113a0:	af00      	add	r7, sp, #0
 80113a2:	6078      	str	r0, [r7, #4]
 80113a4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80113a6:	2309      	movs	r3, #9
 80113a8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d01c      	beq.n	80113ea <validate+0x4e>
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d018      	beq.n	80113ea <validate+0x4e>
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	781b      	ldrb	r3, [r3, #0]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d013      	beq.n	80113ea <validate+0x4e>
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	889a      	ldrh	r2, [r3, #4]
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	88db      	ldrh	r3, [r3, #6]
 80113cc:	429a      	cmp	r2, r3
 80113ce:	d10c      	bne.n	80113ea <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	785b      	ldrb	r3, [r3, #1]
 80113d6:	4618      	mov	r0, r3
 80113d8:	f7fe f952 	bl	800f680 <disk_status>
 80113dc:	4603      	mov	r3, r0
 80113de:	f003 0301 	and.w	r3, r3, #1
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d101      	bne.n	80113ea <validate+0x4e>
			res = FR_OK;
 80113e6:	2300      	movs	r3, #0
 80113e8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80113ea:	7bfb      	ldrb	r3, [r7, #15]
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d102      	bne.n	80113f6 <validate+0x5a>
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	e000      	b.n	80113f8 <validate+0x5c>
 80113f6:	2300      	movs	r3, #0
 80113f8:	683a      	ldr	r2, [r7, #0]
 80113fa:	6013      	str	r3, [r2, #0]
	return res;
 80113fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80113fe:	4618      	mov	r0, r3
 8011400:	3710      	adds	r7, #16
 8011402:	46bd      	mov	sp, r7
 8011404:	bd80      	pop	{r7, pc}
	...

08011408 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8011408:	b580      	push	{r7, lr}
 801140a:	b088      	sub	sp, #32
 801140c:	af00      	add	r7, sp, #0
 801140e:	60f8      	str	r0, [r7, #12]
 8011410:	60b9      	str	r1, [r7, #8]
 8011412:	4613      	mov	r3, r2
 8011414:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8011416:	68bb      	ldr	r3, [r7, #8]
 8011418:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801141a:	f107 0310 	add.w	r3, r7, #16
 801141e:	4618      	mov	r0, r3
 8011420:	f7ff fc9b 	bl	8010d5a <get_ldnumber>
 8011424:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8011426:	69fb      	ldr	r3, [r7, #28]
 8011428:	2b00      	cmp	r3, #0
 801142a:	da01      	bge.n	8011430 <f_mount+0x28>
 801142c:	230b      	movs	r3, #11
 801142e:	e02b      	b.n	8011488 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8011430:	4a17      	ldr	r2, [pc, #92]	; (8011490 <f_mount+0x88>)
 8011432:	69fb      	ldr	r3, [r7, #28]
 8011434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011438:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801143a:	69bb      	ldr	r3, [r7, #24]
 801143c:	2b00      	cmp	r3, #0
 801143e:	d005      	beq.n	801144c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8011440:	69b8      	ldr	r0, [r7, #24]
 8011442:	f7fe fc03 	bl	800fc4c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8011446:	69bb      	ldr	r3, [r7, #24]
 8011448:	2200      	movs	r2, #0
 801144a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801144c:	68fb      	ldr	r3, [r7, #12]
 801144e:	2b00      	cmp	r3, #0
 8011450:	d002      	beq.n	8011458 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	2200      	movs	r2, #0
 8011456:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8011458:	68fa      	ldr	r2, [r7, #12]
 801145a:	490d      	ldr	r1, [pc, #52]	; (8011490 <f_mount+0x88>)
 801145c:	69fb      	ldr	r3, [r7, #28]
 801145e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	2b00      	cmp	r3, #0
 8011466:	d002      	beq.n	801146e <f_mount+0x66>
 8011468:	79fb      	ldrb	r3, [r7, #7]
 801146a:	2b01      	cmp	r3, #1
 801146c:	d001      	beq.n	8011472 <f_mount+0x6a>
 801146e:	2300      	movs	r3, #0
 8011470:	e00a      	b.n	8011488 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8011472:	f107 010c 	add.w	r1, r7, #12
 8011476:	f107 0308 	add.w	r3, r7, #8
 801147a:	2200      	movs	r2, #0
 801147c:	4618      	mov	r0, r3
 801147e:	f7ff fd07 	bl	8010e90 <find_volume>
 8011482:	4603      	mov	r3, r0
 8011484:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8011486:	7dfb      	ldrb	r3, [r7, #23]
}
 8011488:	4618      	mov	r0, r3
 801148a:	3720      	adds	r7, #32
 801148c:	46bd      	mov	sp, r7
 801148e:	bd80      	pop	{r7, pc}
 8011490:	2003c460 	.word	0x2003c460

08011494 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8011494:	b580      	push	{r7, lr}
 8011496:	b098      	sub	sp, #96	; 0x60
 8011498:	af00      	add	r7, sp, #0
 801149a:	60f8      	str	r0, [r7, #12]
 801149c:	60b9      	str	r1, [r7, #8]
 801149e:	4613      	mov	r3, r2
 80114a0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d101      	bne.n	80114ac <f_open+0x18>
 80114a8:	2309      	movs	r3, #9
 80114aa:	e1ba      	b.n	8011822 <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80114ac:	79fb      	ldrb	r3, [r7, #7]
 80114ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80114b2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80114b4:	79fa      	ldrb	r2, [r7, #7]
 80114b6:	f107 0110 	add.w	r1, r7, #16
 80114ba:	f107 0308 	add.w	r3, r7, #8
 80114be:	4618      	mov	r0, r3
 80114c0:	f7ff fce6 	bl	8010e90 <find_volume>
 80114c4:	4603      	mov	r3, r0
 80114c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80114ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	f040 819e 	bne.w	8011810 <f_open+0x37c>
		dj.obj.fs = fs;
 80114d4:	693b      	ldr	r3, [r7, #16]
 80114d6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80114d8:	68ba      	ldr	r2, [r7, #8]
 80114da:	f107 0314 	add.w	r3, r7, #20
 80114de:	4611      	mov	r1, r2
 80114e0:	4618      	mov	r0, r3
 80114e2:	f7ff fba5 	bl	8010c30 <follow_path>
 80114e6:	4603      	mov	r3, r0
 80114e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80114ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d11a      	bne.n	801152a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80114f4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80114f8:	b25b      	sxtb	r3, r3
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	da03      	bge.n	8011506 <f_open+0x72>
				res = FR_INVALID_NAME;
 80114fe:	2306      	movs	r3, #6
 8011500:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011504:	e011      	b.n	801152a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011506:	79fb      	ldrb	r3, [r7, #7]
 8011508:	f023 0301 	bic.w	r3, r3, #1
 801150c:	2b00      	cmp	r3, #0
 801150e:	bf14      	ite	ne
 8011510:	2301      	movne	r3, #1
 8011512:	2300      	moveq	r3, #0
 8011514:	b2db      	uxtb	r3, r3
 8011516:	461a      	mov	r2, r3
 8011518:	f107 0314 	add.w	r3, r7, #20
 801151c:	4611      	mov	r1, r2
 801151e:	4618      	mov	r0, r3
 8011520:	f7fe fa4c 	bl	800f9bc <chk_lock>
 8011524:	4603      	mov	r3, r0
 8011526:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801152a:	79fb      	ldrb	r3, [r7, #7]
 801152c:	f003 031c 	and.w	r3, r3, #28
 8011530:	2b00      	cmp	r3, #0
 8011532:	d07e      	beq.n	8011632 <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8011534:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011538:	2b00      	cmp	r3, #0
 801153a:	d017      	beq.n	801156c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801153c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011540:	2b04      	cmp	r3, #4
 8011542:	d10e      	bne.n	8011562 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8011544:	f7fe fa96 	bl	800fa74 <enq_lock>
 8011548:	4603      	mov	r3, r0
 801154a:	2b00      	cmp	r3, #0
 801154c:	d006      	beq.n	801155c <f_open+0xc8>
 801154e:	f107 0314 	add.w	r3, r7, #20
 8011552:	4618      	mov	r0, r3
 8011554:	f7ff fa52 	bl	80109fc <dir_register>
 8011558:	4603      	mov	r3, r0
 801155a:	e000      	b.n	801155e <f_open+0xca>
 801155c:	2312      	movs	r3, #18
 801155e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8011562:	79fb      	ldrb	r3, [r7, #7]
 8011564:	f043 0308 	orr.w	r3, r3, #8
 8011568:	71fb      	strb	r3, [r7, #7]
 801156a:	e010      	b.n	801158e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801156c:	7ebb      	ldrb	r3, [r7, #26]
 801156e:	f003 0311 	and.w	r3, r3, #17
 8011572:	2b00      	cmp	r3, #0
 8011574:	d003      	beq.n	801157e <f_open+0xea>
					res = FR_DENIED;
 8011576:	2307      	movs	r3, #7
 8011578:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801157c:	e007      	b.n	801158e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801157e:	79fb      	ldrb	r3, [r7, #7]
 8011580:	f003 0304 	and.w	r3, r3, #4
 8011584:	2b00      	cmp	r3, #0
 8011586:	d002      	beq.n	801158e <f_open+0xfa>
 8011588:	2308      	movs	r3, #8
 801158a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801158e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011592:	2b00      	cmp	r3, #0
 8011594:	d167      	bne.n	8011666 <f_open+0x1d2>
 8011596:	79fb      	ldrb	r3, [r7, #7]
 8011598:	f003 0308 	and.w	r3, r3, #8
 801159c:	2b00      	cmp	r3, #0
 801159e:	d062      	beq.n	8011666 <f_open+0x1d2>
				dw = GET_FATTIME();
 80115a0:	4ba2      	ldr	r3, [pc, #648]	; (801182c <f_open+0x398>)
 80115a2:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80115a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115a6:	330e      	adds	r3, #14
 80115a8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80115aa:	4618      	mov	r0, r3
 80115ac:	f7fe f95c 	bl	800f868 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80115b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115b2:	3316      	adds	r3, #22
 80115b4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80115b6:	4618      	mov	r0, r3
 80115b8:	f7fe f956 	bl	800f868 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80115bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115be:	330b      	adds	r3, #11
 80115c0:	2220      	movs	r2, #32
 80115c2:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80115c4:	693b      	ldr	r3, [r7, #16]
 80115c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80115c8:	4611      	mov	r1, r2
 80115ca:	4618      	mov	r0, r3
 80115cc:	f7ff f925 	bl	801081a <ld_clust>
 80115d0:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80115d2:	693b      	ldr	r3, [r7, #16]
 80115d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80115d6:	2200      	movs	r2, #0
 80115d8:	4618      	mov	r0, r3
 80115da:	f7ff f93d 	bl	8010858 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80115de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115e0:	331c      	adds	r3, #28
 80115e2:	2100      	movs	r1, #0
 80115e4:	4618      	mov	r0, r3
 80115e6:	f7fe f93f 	bl	800f868 <st_dword>
					fs->wflag = 1;
 80115ea:	693b      	ldr	r3, [r7, #16]
 80115ec:	2201      	movs	r2, #1
 80115ee:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80115f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d037      	beq.n	8011666 <f_open+0x1d2>
						dw = fs->winsect;
 80115f6:	693b      	ldr	r3, [r7, #16]
 80115f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80115fa:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80115fc:	f107 0314 	add.w	r3, r7, #20
 8011600:	2200      	movs	r2, #0
 8011602:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8011604:	4618      	mov	r0, r3
 8011606:	f7fe fe2d 	bl	8010264 <remove_chain>
 801160a:	4603      	mov	r3, r0
 801160c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8011610:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011614:	2b00      	cmp	r3, #0
 8011616:	d126      	bne.n	8011666 <f_open+0x1d2>
							res = move_window(fs, dw);
 8011618:	693b      	ldr	r3, [r7, #16]
 801161a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801161c:	4618      	mov	r0, r3
 801161e:	f7fe fb7d 	bl	800fd1c <move_window>
 8011622:	4603      	mov	r3, r0
 8011624:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8011628:	693b      	ldr	r3, [r7, #16]
 801162a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801162c:	3a01      	subs	r2, #1
 801162e:	611a      	str	r2, [r3, #16]
 8011630:	e019      	b.n	8011666 <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8011632:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011636:	2b00      	cmp	r3, #0
 8011638:	d115      	bne.n	8011666 <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801163a:	7ebb      	ldrb	r3, [r7, #26]
 801163c:	f003 0310 	and.w	r3, r3, #16
 8011640:	2b00      	cmp	r3, #0
 8011642:	d003      	beq.n	801164c <f_open+0x1b8>
					res = FR_NO_FILE;
 8011644:	2304      	movs	r3, #4
 8011646:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801164a:	e00c      	b.n	8011666 <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801164c:	79fb      	ldrb	r3, [r7, #7]
 801164e:	f003 0302 	and.w	r3, r3, #2
 8011652:	2b00      	cmp	r3, #0
 8011654:	d007      	beq.n	8011666 <f_open+0x1d2>
 8011656:	7ebb      	ldrb	r3, [r7, #26]
 8011658:	f003 0301 	and.w	r3, r3, #1
 801165c:	2b00      	cmp	r3, #0
 801165e:	d002      	beq.n	8011666 <f_open+0x1d2>
						res = FR_DENIED;
 8011660:	2307      	movs	r3, #7
 8011662:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8011666:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801166a:	2b00      	cmp	r3, #0
 801166c:	d128      	bne.n	80116c0 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801166e:	79fb      	ldrb	r3, [r7, #7]
 8011670:	f003 0308 	and.w	r3, r3, #8
 8011674:	2b00      	cmp	r3, #0
 8011676:	d003      	beq.n	8011680 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 8011678:	79fb      	ldrb	r3, [r7, #7]
 801167a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801167e:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8011680:	693b      	ldr	r3, [r7, #16]
 8011682:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8011688:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801168e:	79fb      	ldrb	r3, [r7, #7]
 8011690:	f023 0301 	bic.w	r3, r3, #1
 8011694:	2b00      	cmp	r3, #0
 8011696:	bf14      	ite	ne
 8011698:	2301      	movne	r3, #1
 801169a:	2300      	moveq	r3, #0
 801169c:	b2db      	uxtb	r3, r3
 801169e:	461a      	mov	r2, r3
 80116a0:	f107 0314 	add.w	r3, r7, #20
 80116a4:	4611      	mov	r1, r2
 80116a6:	4618      	mov	r0, r3
 80116a8:	f7fe fa06 	bl	800fab8 <inc_lock>
 80116ac:	4602      	mov	r2, r0
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	691b      	ldr	r3, [r3, #16]
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d102      	bne.n	80116c0 <f_open+0x22c>
 80116ba:	2302      	movs	r3, #2
 80116bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80116c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	f040 80a3 	bne.w	8011810 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80116ca:	693b      	ldr	r3, [r7, #16]
 80116cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80116ce:	4611      	mov	r1, r2
 80116d0:	4618      	mov	r0, r3
 80116d2:	f7ff f8a2 	bl	801081a <ld_clust>
 80116d6:	4602      	mov	r2, r0
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80116dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116de:	331c      	adds	r3, #28
 80116e0:	4618      	mov	r0, r3
 80116e2:	f7fe f883 	bl	800f7ec <ld_dword>
 80116e6:	4602      	mov	r2, r0
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	2200      	movs	r2, #0
 80116f0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80116f2:	693a      	ldr	r2, [r7, #16]
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80116f8:	693b      	ldr	r3, [r7, #16]
 80116fa:	88da      	ldrh	r2, [r3, #6]
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	79fa      	ldrb	r2, [r7, #7]
 8011704:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	2200      	movs	r2, #0
 801170a:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	2200      	movs	r2, #0
 8011710:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	2200      	movs	r2, #0
 8011716:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	3330      	adds	r3, #48	; 0x30
 801171c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011720:	2100      	movs	r1, #0
 8011722:	4618      	mov	r0, r3
 8011724:	f7fe f8ed 	bl	800f902 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8011728:	79fb      	ldrb	r3, [r7, #7]
 801172a:	f003 0320 	and.w	r3, r3, #32
 801172e:	2b00      	cmp	r3, #0
 8011730:	d06e      	beq.n	8011810 <f_open+0x37c>
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	68db      	ldr	r3, [r3, #12]
 8011736:	2b00      	cmp	r3, #0
 8011738:	d06a      	beq.n	8011810 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	68da      	ldr	r2, [r3, #12]
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8011742:	693b      	ldr	r3, [r7, #16]
 8011744:	895b      	ldrh	r3, [r3, #10]
 8011746:	461a      	mov	r2, r3
 8011748:	693b      	ldr	r3, [r7, #16]
 801174a:	899b      	ldrh	r3, [r3, #12]
 801174c:	fb03 f302 	mul.w	r3, r3, r2
 8011750:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	689b      	ldr	r3, [r3, #8]
 8011756:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	68db      	ldr	r3, [r3, #12]
 801175c:	657b      	str	r3, [r7, #84]	; 0x54
 801175e:	e016      	b.n	801178e <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011764:	4618      	mov	r0, r3
 8011766:	f7fe fb96 	bl	800fe96 <get_fat>
 801176a:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801176c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801176e:	2b01      	cmp	r3, #1
 8011770:	d802      	bhi.n	8011778 <f_open+0x2e4>
 8011772:	2302      	movs	r3, #2
 8011774:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011778:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801177a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801177e:	d102      	bne.n	8011786 <f_open+0x2f2>
 8011780:	2301      	movs	r3, #1
 8011782:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011786:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011788:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801178a:	1ad3      	subs	r3, r2, r3
 801178c:	657b      	str	r3, [r7, #84]	; 0x54
 801178e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011792:	2b00      	cmp	r3, #0
 8011794:	d103      	bne.n	801179e <f_open+0x30a>
 8011796:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011798:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801179a:	429a      	cmp	r2, r3
 801179c:	d8e0      	bhi.n	8011760 <f_open+0x2cc>
				}
				fp->clust = clst;
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80117a2:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80117a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d131      	bne.n	8011810 <f_open+0x37c>
 80117ac:	693b      	ldr	r3, [r7, #16]
 80117ae:	899b      	ldrh	r3, [r3, #12]
 80117b0:	461a      	mov	r2, r3
 80117b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80117b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80117b8:	fb02 f201 	mul.w	r2, r2, r1
 80117bc:	1a9b      	subs	r3, r3, r2
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d026      	beq.n	8011810 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80117c2:	693b      	ldr	r3, [r7, #16]
 80117c4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80117c6:	4618      	mov	r0, r3
 80117c8:	f7fe fb46 	bl	800fe58 <clust2sect>
 80117cc:	6478      	str	r0, [r7, #68]	; 0x44
 80117ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d103      	bne.n	80117dc <f_open+0x348>
						res = FR_INT_ERR;
 80117d4:	2302      	movs	r3, #2
 80117d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80117da:	e019      	b.n	8011810 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80117dc:	693b      	ldr	r3, [r7, #16]
 80117de:	899b      	ldrh	r3, [r3, #12]
 80117e0:	461a      	mov	r2, r3
 80117e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80117e4:	fbb3 f2f2 	udiv	r2, r3, r2
 80117e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80117ea:	441a      	add	r2, r3
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80117f0:	693b      	ldr	r3, [r7, #16]
 80117f2:	7858      	ldrb	r0, [r3, #1]
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	6a1a      	ldr	r2, [r3, #32]
 80117fe:	2301      	movs	r3, #1
 8011800:	f7fd ff7e 	bl	800f700 <disk_read>
 8011804:	4603      	mov	r3, r0
 8011806:	2b00      	cmp	r3, #0
 8011808:	d002      	beq.n	8011810 <f_open+0x37c>
 801180a:	2301      	movs	r3, #1
 801180c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8011810:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011814:	2b00      	cmp	r3, #0
 8011816:	d002      	beq.n	801181e <f_open+0x38a>
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	2200      	movs	r2, #0
 801181c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801181e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8011822:	4618      	mov	r0, r3
 8011824:	3760      	adds	r7, #96	; 0x60
 8011826:	46bd      	mov	sp, r7
 8011828:	bd80      	pop	{r7, pc}
 801182a:	bf00      	nop
 801182c:	274a0000 	.word	0x274a0000

08011830 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8011830:	b580      	push	{r7, lr}
 8011832:	b08e      	sub	sp, #56	; 0x38
 8011834:	af00      	add	r7, sp, #0
 8011836:	60f8      	str	r0, [r7, #12]
 8011838:	60b9      	str	r1, [r7, #8]
 801183a:	607a      	str	r2, [r7, #4]
 801183c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801183e:	68bb      	ldr	r3, [r7, #8]
 8011840:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8011842:	683b      	ldr	r3, [r7, #0]
 8011844:	2200      	movs	r2, #0
 8011846:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	f107 0214 	add.w	r2, r7, #20
 801184e:	4611      	mov	r1, r2
 8011850:	4618      	mov	r0, r3
 8011852:	f7ff fda3 	bl	801139c <validate>
 8011856:	4603      	mov	r3, r0
 8011858:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801185c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011860:	2b00      	cmp	r3, #0
 8011862:	d107      	bne.n	8011874 <f_read+0x44>
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	7d5b      	ldrb	r3, [r3, #21]
 8011868:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801186c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011870:	2b00      	cmp	r3, #0
 8011872:	d002      	beq.n	801187a <f_read+0x4a>
 8011874:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011878:	e135      	b.n	8011ae6 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	7d1b      	ldrb	r3, [r3, #20]
 801187e:	f003 0301 	and.w	r3, r3, #1
 8011882:	2b00      	cmp	r3, #0
 8011884:	d101      	bne.n	801188a <f_read+0x5a>
 8011886:	2307      	movs	r3, #7
 8011888:	e12d      	b.n	8011ae6 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	68da      	ldr	r2, [r3, #12]
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	699b      	ldr	r3, [r3, #24]
 8011892:	1ad3      	subs	r3, r2, r3
 8011894:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8011896:	687a      	ldr	r2, [r7, #4]
 8011898:	6a3b      	ldr	r3, [r7, #32]
 801189a:	429a      	cmp	r2, r3
 801189c:	f240 811e 	bls.w	8011adc <f_read+0x2ac>
 80118a0:	6a3b      	ldr	r3, [r7, #32]
 80118a2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80118a4:	e11a      	b.n	8011adc <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	699b      	ldr	r3, [r3, #24]
 80118aa:	697a      	ldr	r2, [r7, #20]
 80118ac:	8992      	ldrh	r2, [r2, #12]
 80118ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80118b2:	fb02 f201 	mul.w	r2, r2, r1
 80118b6:	1a9b      	subs	r3, r3, r2
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	f040 80d5 	bne.w	8011a68 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	699b      	ldr	r3, [r3, #24]
 80118c2:	697a      	ldr	r2, [r7, #20]
 80118c4:	8992      	ldrh	r2, [r2, #12]
 80118c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80118ca:	697a      	ldr	r2, [r7, #20]
 80118cc:	8952      	ldrh	r2, [r2, #10]
 80118ce:	3a01      	subs	r2, #1
 80118d0:	4013      	ands	r3, r2
 80118d2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80118d4:	69fb      	ldr	r3, [r7, #28]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d12f      	bne.n	801193a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	699b      	ldr	r3, [r3, #24]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d103      	bne.n	80118ea <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80118e2:	68fb      	ldr	r3, [r7, #12]
 80118e4:	689b      	ldr	r3, [r3, #8]
 80118e6:	633b      	str	r3, [r7, #48]	; 0x30
 80118e8:	e013      	b.n	8011912 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d007      	beq.n	8011902 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	699b      	ldr	r3, [r3, #24]
 80118f6:	4619      	mov	r1, r3
 80118f8:	68f8      	ldr	r0, [r7, #12]
 80118fa:	f7fe fdb0 	bl	801045e <clmt_clust>
 80118fe:	6338      	str	r0, [r7, #48]	; 0x30
 8011900:	e007      	b.n	8011912 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8011902:	68fa      	ldr	r2, [r7, #12]
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	69db      	ldr	r3, [r3, #28]
 8011908:	4619      	mov	r1, r3
 801190a:	4610      	mov	r0, r2
 801190c:	f7fe fac3 	bl	800fe96 <get_fat>
 8011910:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8011912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011914:	2b01      	cmp	r3, #1
 8011916:	d804      	bhi.n	8011922 <f_read+0xf2>
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	2202      	movs	r2, #2
 801191c:	755a      	strb	r2, [r3, #21]
 801191e:	2302      	movs	r3, #2
 8011920:	e0e1      	b.n	8011ae6 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011928:	d104      	bne.n	8011934 <f_read+0x104>
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	2201      	movs	r2, #1
 801192e:	755a      	strb	r2, [r3, #21]
 8011930:	2301      	movs	r3, #1
 8011932:	e0d8      	b.n	8011ae6 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011938:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801193a:	697a      	ldr	r2, [r7, #20]
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	69db      	ldr	r3, [r3, #28]
 8011940:	4619      	mov	r1, r3
 8011942:	4610      	mov	r0, r2
 8011944:	f7fe fa88 	bl	800fe58 <clust2sect>
 8011948:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801194a:	69bb      	ldr	r3, [r7, #24]
 801194c:	2b00      	cmp	r3, #0
 801194e:	d104      	bne.n	801195a <f_read+0x12a>
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	2202      	movs	r2, #2
 8011954:	755a      	strb	r2, [r3, #21]
 8011956:	2302      	movs	r3, #2
 8011958:	e0c5      	b.n	8011ae6 <f_read+0x2b6>
			sect += csect;
 801195a:	69ba      	ldr	r2, [r7, #24]
 801195c:	69fb      	ldr	r3, [r7, #28]
 801195e:	4413      	add	r3, r2
 8011960:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8011962:	697b      	ldr	r3, [r7, #20]
 8011964:	899b      	ldrh	r3, [r3, #12]
 8011966:	461a      	mov	r2, r3
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	fbb3 f3f2 	udiv	r3, r3, r2
 801196e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8011970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011972:	2b00      	cmp	r3, #0
 8011974:	d041      	beq.n	80119fa <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011976:	69fa      	ldr	r2, [r7, #28]
 8011978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801197a:	4413      	add	r3, r2
 801197c:	697a      	ldr	r2, [r7, #20]
 801197e:	8952      	ldrh	r2, [r2, #10]
 8011980:	4293      	cmp	r3, r2
 8011982:	d905      	bls.n	8011990 <f_read+0x160>
					cc = fs->csize - csect;
 8011984:	697b      	ldr	r3, [r7, #20]
 8011986:	895b      	ldrh	r3, [r3, #10]
 8011988:	461a      	mov	r2, r3
 801198a:	69fb      	ldr	r3, [r7, #28]
 801198c:	1ad3      	subs	r3, r2, r3
 801198e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011990:	697b      	ldr	r3, [r7, #20]
 8011992:	7858      	ldrb	r0, [r3, #1]
 8011994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011996:	69ba      	ldr	r2, [r7, #24]
 8011998:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801199a:	f7fd feb1 	bl	800f700 <disk_read>
 801199e:	4603      	mov	r3, r0
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d004      	beq.n	80119ae <f_read+0x17e>
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	2201      	movs	r2, #1
 80119a8:	755a      	strb	r2, [r3, #21]
 80119aa:	2301      	movs	r3, #1
 80119ac:	e09b      	b.n	8011ae6 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	7d1b      	ldrb	r3, [r3, #20]
 80119b2:	b25b      	sxtb	r3, r3
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	da18      	bge.n	80119ea <f_read+0x1ba>
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	6a1a      	ldr	r2, [r3, #32]
 80119bc:	69bb      	ldr	r3, [r7, #24]
 80119be:	1ad3      	subs	r3, r2, r3
 80119c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80119c2:	429a      	cmp	r2, r3
 80119c4:	d911      	bls.n	80119ea <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	6a1a      	ldr	r2, [r3, #32]
 80119ca:	69bb      	ldr	r3, [r7, #24]
 80119cc:	1ad3      	subs	r3, r2, r3
 80119ce:	697a      	ldr	r2, [r7, #20]
 80119d0:	8992      	ldrh	r2, [r2, #12]
 80119d2:	fb02 f303 	mul.w	r3, r2, r3
 80119d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80119d8:	18d0      	adds	r0, r2, r3
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80119e0:	697b      	ldr	r3, [r7, #20]
 80119e2:	899b      	ldrh	r3, [r3, #12]
 80119e4:	461a      	mov	r2, r3
 80119e6:	f7fd ff6b 	bl	800f8c0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80119ea:	697b      	ldr	r3, [r7, #20]
 80119ec:	899b      	ldrh	r3, [r3, #12]
 80119ee:	461a      	mov	r2, r3
 80119f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119f2:	fb02 f303 	mul.w	r3, r2, r3
 80119f6:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80119f8:	e05c      	b.n	8011ab4 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	6a1b      	ldr	r3, [r3, #32]
 80119fe:	69ba      	ldr	r2, [r7, #24]
 8011a00:	429a      	cmp	r2, r3
 8011a02:	d02e      	beq.n	8011a62 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011a04:	68fb      	ldr	r3, [r7, #12]
 8011a06:	7d1b      	ldrb	r3, [r3, #20]
 8011a08:	b25b      	sxtb	r3, r3
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	da18      	bge.n	8011a40 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011a0e:	697b      	ldr	r3, [r7, #20]
 8011a10:	7858      	ldrb	r0, [r3, #1]
 8011a12:	68fb      	ldr	r3, [r7, #12]
 8011a14:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011a18:	68fb      	ldr	r3, [r7, #12]
 8011a1a:	6a1a      	ldr	r2, [r3, #32]
 8011a1c:	2301      	movs	r3, #1
 8011a1e:	f7fd fe8f 	bl	800f740 <disk_write>
 8011a22:	4603      	mov	r3, r0
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d004      	beq.n	8011a32 <f_read+0x202>
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	2201      	movs	r2, #1
 8011a2c:	755a      	strb	r2, [r3, #21]
 8011a2e:	2301      	movs	r3, #1
 8011a30:	e059      	b.n	8011ae6 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011a32:	68fb      	ldr	r3, [r7, #12]
 8011a34:	7d1b      	ldrb	r3, [r3, #20]
 8011a36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011a3a:	b2da      	uxtb	r2, r3
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011a40:	697b      	ldr	r3, [r7, #20]
 8011a42:	7858      	ldrb	r0, [r3, #1]
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011a4a:	2301      	movs	r3, #1
 8011a4c:	69ba      	ldr	r2, [r7, #24]
 8011a4e:	f7fd fe57 	bl	800f700 <disk_read>
 8011a52:	4603      	mov	r3, r0
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d004      	beq.n	8011a62 <f_read+0x232>
 8011a58:	68fb      	ldr	r3, [r7, #12]
 8011a5a:	2201      	movs	r2, #1
 8011a5c:	755a      	strb	r2, [r3, #21]
 8011a5e:	2301      	movs	r3, #1
 8011a60:	e041      	b.n	8011ae6 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	69ba      	ldr	r2, [r7, #24]
 8011a66:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011a68:	697b      	ldr	r3, [r7, #20]
 8011a6a:	899b      	ldrh	r3, [r3, #12]
 8011a6c:	4618      	mov	r0, r3
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	699b      	ldr	r3, [r3, #24]
 8011a72:	697a      	ldr	r2, [r7, #20]
 8011a74:	8992      	ldrh	r2, [r2, #12]
 8011a76:	fbb3 f1f2 	udiv	r1, r3, r2
 8011a7a:	fb02 f201 	mul.w	r2, r2, r1
 8011a7e:	1a9b      	subs	r3, r3, r2
 8011a80:	1ac3      	subs	r3, r0, r3
 8011a82:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8011a84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	429a      	cmp	r2, r3
 8011a8a:	d901      	bls.n	8011a90 <f_read+0x260>
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011a96:	68fb      	ldr	r3, [r7, #12]
 8011a98:	699b      	ldr	r3, [r3, #24]
 8011a9a:	697a      	ldr	r2, [r7, #20]
 8011a9c:	8992      	ldrh	r2, [r2, #12]
 8011a9e:	fbb3 f0f2 	udiv	r0, r3, r2
 8011aa2:	fb02 f200 	mul.w	r2, r2, r0
 8011aa6:	1a9b      	subs	r3, r3, r2
 8011aa8:	440b      	add	r3, r1
 8011aaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011aac:	4619      	mov	r1, r3
 8011aae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011ab0:	f7fd ff06 	bl	800f8c0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8011ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ab8:	4413      	add	r3, r2
 8011aba:	627b      	str	r3, [r7, #36]	; 0x24
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	699a      	ldr	r2, [r3, #24]
 8011ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ac2:	441a      	add	r2, r3
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	619a      	str	r2, [r3, #24]
 8011ac8:	683b      	ldr	r3, [r7, #0]
 8011aca:	681a      	ldr	r2, [r3, #0]
 8011acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ace:	441a      	add	r2, r3
 8011ad0:	683b      	ldr	r3, [r7, #0]
 8011ad2:	601a      	str	r2, [r3, #0]
 8011ad4:	687a      	ldr	r2, [r7, #4]
 8011ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ad8:	1ad3      	subs	r3, r2, r3
 8011ada:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	f47f aee1 	bne.w	80118a6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8011ae4:	2300      	movs	r3, #0
}
 8011ae6:	4618      	mov	r0, r3
 8011ae8:	3738      	adds	r7, #56	; 0x38
 8011aea:	46bd      	mov	sp, r7
 8011aec:	bd80      	pop	{r7, pc}

08011aee <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8011aee:	b580      	push	{r7, lr}
 8011af0:	b08c      	sub	sp, #48	; 0x30
 8011af2:	af00      	add	r7, sp, #0
 8011af4:	60f8      	str	r0, [r7, #12]
 8011af6:	60b9      	str	r1, [r7, #8]
 8011af8:	607a      	str	r2, [r7, #4]
 8011afa:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8011afc:	68bb      	ldr	r3, [r7, #8]
 8011afe:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8011b00:	683b      	ldr	r3, [r7, #0]
 8011b02:	2200      	movs	r2, #0
 8011b04:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	f107 0210 	add.w	r2, r7, #16
 8011b0c:	4611      	mov	r1, r2
 8011b0e:	4618      	mov	r0, r3
 8011b10:	f7ff fc44 	bl	801139c <validate>
 8011b14:	4603      	mov	r3, r0
 8011b16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011b1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d107      	bne.n	8011b32 <f_write+0x44>
 8011b22:	68fb      	ldr	r3, [r7, #12]
 8011b24:	7d5b      	ldrb	r3, [r3, #21]
 8011b26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011b2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d002      	beq.n	8011b38 <f_write+0x4a>
 8011b32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011b36:	e16a      	b.n	8011e0e <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	7d1b      	ldrb	r3, [r3, #20]
 8011b3c:	f003 0302 	and.w	r3, r3, #2
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d101      	bne.n	8011b48 <f_write+0x5a>
 8011b44:	2307      	movs	r3, #7
 8011b46:	e162      	b.n	8011e0e <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	699a      	ldr	r2, [r3, #24]
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	441a      	add	r2, r3
 8011b50:	68fb      	ldr	r3, [r7, #12]
 8011b52:	699b      	ldr	r3, [r3, #24]
 8011b54:	429a      	cmp	r2, r3
 8011b56:	f080 814c 	bcs.w	8011df2 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	699b      	ldr	r3, [r3, #24]
 8011b5e:	43db      	mvns	r3, r3
 8011b60:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8011b62:	e146      	b.n	8011df2 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	699b      	ldr	r3, [r3, #24]
 8011b68:	693a      	ldr	r2, [r7, #16]
 8011b6a:	8992      	ldrh	r2, [r2, #12]
 8011b6c:	fbb3 f1f2 	udiv	r1, r3, r2
 8011b70:	fb02 f201 	mul.w	r2, r2, r1
 8011b74:	1a9b      	subs	r3, r3, r2
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	f040 80f1 	bne.w	8011d5e <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	699b      	ldr	r3, [r3, #24]
 8011b80:	693a      	ldr	r2, [r7, #16]
 8011b82:	8992      	ldrh	r2, [r2, #12]
 8011b84:	fbb3 f3f2 	udiv	r3, r3, r2
 8011b88:	693a      	ldr	r2, [r7, #16]
 8011b8a:	8952      	ldrh	r2, [r2, #10]
 8011b8c:	3a01      	subs	r2, #1
 8011b8e:	4013      	ands	r3, r2
 8011b90:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8011b92:	69bb      	ldr	r3, [r7, #24]
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d143      	bne.n	8011c20 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	699b      	ldr	r3, [r3, #24]
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d10c      	bne.n	8011bba <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8011ba0:	68fb      	ldr	r3, [r7, #12]
 8011ba2:	689b      	ldr	r3, [r3, #8]
 8011ba4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8011ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d11a      	bne.n	8011be2 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8011bac:	68fb      	ldr	r3, [r7, #12]
 8011bae:	2100      	movs	r1, #0
 8011bb0:	4618      	mov	r0, r3
 8011bb2:	f7fe fbbc 	bl	801032e <create_chain>
 8011bb6:	62b8      	str	r0, [r7, #40]	; 0x28
 8011bb8:	e013      	b.n	8011be2 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d007      	beq.n	8011bd2 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011bc2:	68fb      	ldr	r3, [r7, #12]
 8011bc4:	699b      	ldr	r3, [r3, #24]
 8011bc6:	4619      	mov	r1, r3
 8011bc8:	68f8      	ldr	r0, [r7, #12]
 8011bca:	f7fe fc48 	bl	801045e <clmt_clust>
 8011bce:	62b8      	str	r0, [r7, #40]	; 0x28
 8011bd0:	e007      	b.n	8011be2 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8011bd2:	68fa      	ldr	r2, [r7, #12]
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	69db      	ldr	r3, [r3, #28]
 8011bd8:	4619      	mov	r1, r3
 8011bda:	4610      	mov	r0, r2
 8011bdc:	f7fe fba7 	bl	801032e <create_chain>
 8011be0:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	f000 8109 	beq.w	8011dfc <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bec:	2b01      	cmp	r3, #1
 8011bee:	d104      	bne.n	8011bfa <f_write+0x10c>
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	2202      	movs	r2, #2
 8011bf4:	755a      	strb	r2, [r3, #21]
 8011bf6:	2302      	movs	r3, #2
 8011bf8:	e109      	b.n	8011e0e <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c00:	d104      	bne.n	8011c0c <f_write+0x11e>
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	2201      	movs	r2, #1
 8011c06:	755a      	strb	r2, [r3, #21]
 8011c08:	2301      	movs	r3, #1
 8011c0a:	e100      	b.n	8011e0e <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011c10:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	689b      	ldr	r3, [r3, #8]
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d102      	bne.n	8011c20 <f_write+0x132>
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011c1e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	7d1b      	ldrb	r3, [r3, #20]
 8011c24:	b25b      	sxtb	r3, r3
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	da18      	bge.n	8011c5c <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011c2a:	693b      	ldr	r3, [r7, #16]
 8011c2c:	7858      	ldrb	r0, [r3, #1]
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	6a1a      	ldr	r2, [r3, #32]
 8011c38:	2301      	movs	r3, #1
 8011c3a:	f7fd fd81 	bl	800f740 <disk_write>
 8011c3e:	4603      	mov	r3, r0
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d004      	beq.n	8011c4e <f_write+0x160>
 8011c44:	68fb      	ldr	r3, [r7, #12]
 8011c46:	2201      	movs	r2, #1
 8011c48:	755a      	strb	r2, [r3, #21]
 8011c4a:	2301      	movs	r3, #1
 8011c4c:	e0df      	b.n	8011e0e <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	7d1b      	ldrb	r3, [r3, #20]
 8011c52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011c56:	b2da      	uxtb	r2, r3
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011c5c:	693a      	ldr	r2, [r7, #16]
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	69db      	ldr	r3, [r3, #28]
 8011c62:	4619      	mov	r1, r3
 8011c64:	4610      	mov	r0, r2
 8011c66:	f7fe f8f7 	bl	800fe58 <clust2sect>
 8011c6a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011c6c:	697b      	ldr	r3, [r7, #20]
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d104      	bne.n	8011c7c <f_write+0x18e>
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	2202      	movs	r2, #2
 8011c76:	755a      	strb	r2, [r3, #21]
 8011c78:	2302      	movs	r3, #2
 8011c7a:	e0c8      	b.n	8011e0e <f_write+0x320>
			sect += csect;
 8011c7c:	697a      	ldr	r2, [r7, #20]
 8011c7e:	69bb      	ldr	r3, [r7, #24]
 8011c80:	4413      	add	r3, r2
 8011c82:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8011c84:	693b      	ldr	r3, [r7, #16]
 8011c86:	899b      	ldrh	r3, [r3, #12]
 8011c88:	461a      	mov	r2, r3
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011c90:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011c92:	6a3b      	ldr	r3, [r7, #32]
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d043      	beq.n	8011d20 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011c98:	69ba      	ldr	r2, [r7, #24]
 8011c9a:	6a3b      	ldr	r3, [r7, #32]
 8011c9c:	4413      	add	r3, r2
 8011c9e:	693a      	ldr	r2, [r7, #16]
 8011ca0:	8952      	ldrh	r2, [r2, #10]
 8011ca2:	4293      	cmp	r3, r2
 8011ca4:	d905      	bls.n	8011cb2 <f_write+0x1c4>
					cc = fs->csize - csect;
 8011ca6:	693b      	ldr	r3, [r7, #16]
 8011ca8:	895b      	ldrh	r3, [r3, #10]
 8011caa:	461a      	mov	r2, r3
 8011cac:	69bb      	ldr	r3, [r7, #24]
 8011cae:	1ad3      	subs	r3, r2, r3
 8011cb0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011cb2:	693b      	ldr	r3, [r7, #16]
 8011cb4:	7858      	ldrb	r0, [r3, #1]
 8011cb6:	6a3b      	ldr	r3, [r7, #32]
 8011cb8:	697a      	ldr	r2, [r7, #20]
 8011cba:	69f9      	ldr	r1, [r7, #28]
 8011cbc:	f7fd fd40 	bl	800f740 <disk_write>
 8011cc0:	4603      	mov	r3, r0
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d004      	beq.n	8011cd0 <f_write+0x1e2>
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	2201      	movs	r2, #1
 8011cca:	755a      	strb	r2, [r3, #21]
 8011ccc:	2301      	movs	r3, #1
 8011cce:	e09e      	b.n	8011e0e <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	6a1a      	ldr	r2, [r3, #32]
 8011cd4:	697b      	ldr	r3, [r7, #20]
 8011cd6:	1ad3      	subs	r3, r2, r3
 8011cd8:	6a3a      	ldr	r2, [r7, #32]
 8011cda:	429a      	cmp	r2, r3
 8011cdc:	d918      	bls.n	8011d10 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	6a1a      	ldr	r2, [r3, #32]
 8011ce8:	697b      	ldr	r3, [r7, #20]
 8011cea:	1ad3      	subs	r3, r2, r3
 8011cec:	693a      	ldr	r2, [r7, #16]
 8011cee:	8992      	ldrh	r2, [r2, #12]
 8011cf0:	fb02 f303 	mul.w	r3, r2, r3
 8011cf4:	69fa      	ldr	r2, [r7, #28]
 8011cf6:	18d1      	adds	r1, r2, r3
 8011cf8:	693b      	ldr	r3, [r7, #16]
 8011cfa:	899b      	ldrh	r3, [r3, #12]
 8011cfc:	461a      	mov	r2, r3
 8011cfe:	f7fd fddf 	bl	800f8c0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	7d1b      	ldrb	r3, [r3, #20]
 8011d06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011d0a:	b2da      	uxtb	r2, r3
 8011d0c:	68fb      	ldr	r3, [r7, #12]
 8011d0e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8011d10:	693b      	ldr	r3, [r7, #16]
 8011d12:	899b      	ldrh	r3, [r3, #12]
 8011d14:	461a      	mov	r2, r3
 8011d16:	6a3b      	ldr	r3, [r7, #32]
 8011d18:	fb02 f303 	mul.w	r3, r2, r3
 8011d1c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8011d1e:	e04b      	b.n	8011db8 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	6a1b      	ldr	r3, [r3, #32]
 8011d24:	697a      	ldr	r2, [r7, #20]
 8011d26:	429a      	cmp	r2, r3
 8011d28:	d016      	beq.n	8011d58 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	699a      	ldr	r2, [r3, #24]
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011d32:	429a      	cmp	r2, r3
 8011d34:	d210      	bcs.n	8011d58 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8011d36:	693b      	ldr	r3, [r7, #16]
 8011d38:	7858      	ldrb	r0, [r3, #1]
 8011d3a:	68fb      	ldr	r3, [r7, #12]
 8011d3c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011d40:	2301      	movs	r3, #1
 8011d42:	697a      	ldr	r2, [r7, #20]
 8011d44:	f7fd fcdc 	bl	800f700 <disk_read>
 8011d48:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d004      	beq.n	8011d58 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	2201      	movs	r2, #1
 8011d52:	755a      	strb	r2, [r3, #21]
 8011d54:	2301      	movs	r3, #1
 8011d56:	e05a      	b.n	8011e0e <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	697a      	ldr	r2, [r7, #20]
 8011d5c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011d5e:	693b      	ldr	r3, [r7, #16]
 8011d60:	899b      	ldrh	r3, [r3, #12]
 8011d62:	4618      	mov	r0, r3
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	699b      	ldr	r3, [r3, #24]
 8011d68:	693a      	ldr	r2, [r7, #16]
 8011d6a:	8992      	ldrh	r2, [r2, #12]
 8011d6c:	fbb3 f1f2 	udiv	r1, r3, r2
 8011d70:	fb02 f201 	mul.w	r2, r2, r1
 8011d74:	1a9b      	subs	r3, r3, r2
 8011d76:	1ac3      	subs	r3, r0, r3
 8011d78:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8011d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	429a      	cmp	r2, r3
 8011d80:	d901      	bls.n	8011d86 <f_write+0x298>
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	699b      	ldr	r3, [r3, #24]
 8011d90:	693a      	ldr	r2, [r7, #16]
 8011d92:	8992      	ldrh	r2, [r2, #12]
 8011d94:	fbb3 f0f2 	udiv	r0, r3, r2
 8011d98:	fb02 f200 	mul.w	r2, r2, r0
 8011d9c:	1a9b      	subs	r3, r3, r2
 8011d9e:	440b      	add	r3, r1
 8011da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011da2:	69f9      	ldr	r1, [r7, #28]
 8011da4:	4618      	mov	r0, r3
 8011da6:	f7fd fd8b 	bl	800f8c0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	7d1b      	ldrb	r3, [r3, #20]
 8011dae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011db2:	b2da      	uxtb	r2, r3
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8011db8:	69fa      	ldr	r2, [r7, #28]
 8011dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dbc:	4413      	add	r3, r2
 8011dbe:	61fb      	str	r3, [r7, #28]
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	699a      	ldr	r2, [r3, #24]
 8011dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dc6:	441a      	add	r2, r3
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	619a      	str	r2, [r3, #24]
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	68da      	ldr	r2, [r3, #12]
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	699b      	ldr	r3, [r3, #24]
 8011dd4:	429a      	cmp	r2, r3
 8011dd6:	bf38      	it	cc
 8011dd8:	461a      	movcc	r2, r3
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	60da      	str	r2, [r3, #12]
 8011dde:	683b      	ldr	r3, [r7, #0]
 8011de0:	681a      	ldr	r2, [r3, #0]
 8011de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011de4:	441a      	add	r2, r3
 8011de6:	683b      	ldr	r3, [r7, #0]
 8011de8:	601a      	str	r2, [r3, #0]
 8011dea:	687a      	ldr	r2, [r7, #4]
 8011dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dee:	1ad3      	subs	r3, r2, r3
 8011df0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	f47f aeb5 	bne.w	8011b64 <f_write+0x76>
 8011dfa:	e000      	b.n	8011dfe <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011dfc:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	7d1b      	ldrb	r3, [r3, #20]
 8011e02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e06:	b2da      	uxtb	r2, r3
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8011e0c:	2300      	movs	r3, #0
}
 8011e0e:	4618      	mov	r0, r3
 8011e10:	3730      	adds	r7, #48	; 0x30
 8011e12:	46bd      	mov	sp, r7
 8011e14:	bd80      	pop	{r7, pc}
	...

08011e18 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011e18:	b580      	push	{r7, lr}
 8011e1a:	b086      	sub	sp, #24
 8011e1c:	af00      	add	r7, sp, #0
 8011e1e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	f107 0208 	add.w	r2, r7, #8
 8011e26:	4611      	mov	r1, r2
 8011e28:	4618      	mov	r0, r3
 8011e2a:	f7ff fab7 	bl	801139c <validate>
 8011e2e:	4603      	mov	r3, r0
 8011e30:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011e32:	7dfb      	ldrb	r3, [r7, #23]
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d167      	bne.n	8011f08 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	7d1b      	ldrb	r3, [r3, #20]
 8011e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d061      	beq.n	8011f08 <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	7d1b      	ldrb	r3, [r3, #20]
 8011e48:	b25b      	sxtb	r3, r3
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	da15      	bge.n	8011e7a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011e4e:	68bb      	ldr	r3, [r7, #8]
 8011e50:	7858      	ldrb	r0, [r3, #1]
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	6a1a      	ldr	r2, [r3, #32]
 8011e5c:	2301      	movs	r3, #1
 8011e5e:	f7fd fc6f 	bl	800f740 <disk_write>
 8011e62:	4603      	mov	r3, r0
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d001      	beq.n	8011e6c <f_sync+0x54>
 8011e68:	2301      	movs	r3, #1
 8011e6a:	e04e      	b.n	8011f0a <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	7d1b      	ldrb	r3, [r3, #20]
 8011e70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011e74:	b2da      	uxtb	r2, r3
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8011e7a:	4b26      	ldr	r3, [pc, #152]	; (8011f14 <f_sync+0xfc>)
 8011e7c:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8011e7e:	68ba      	ldr	r2, [r7, #8]
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e84:	4619      	mov	r1, r3
 8011e86:	4610      	mov	r0, r2
 8011e88:	f7fd ff48 	bl	800fd1c <move_window>
 8011e8c:	4603      	mov	r3, r0
 8011e8e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8011e90:	7dfb      	ldrb	r3, [r7, #23]
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d138      	bne.n	8011f08 <f_sync+0xf0>
					dir = fp->dir_ptr;
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e9a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	330b      	adds	r3, #11
 8011ea0:	781a      	ldrb	r2, [r3, #0]
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	330b      	adds	r3, #11
 8011ea6:	f042 0220 	orr.w	r2, r2, #32
 8011eaa:	b2d2      	uxtb	r2, r2
 8011eac:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	6818      	ldr	r0, [r3, #0]
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	689b      	ldr	r3, [r3, #8]
 8011eb6:	461a      	mov	r2, r3
 8011eb8:	68f9      	ldr	r1, [r7, #12]
 8011eba:	f7fe fccd 	bl	8010858 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	f103 021c 	add.w	r2, r3, #28
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	68db      	ldr	r3, [r3, #12]
 8011ec8:	4619      	mov	r1, r3
 8011eca:	4610      	mov	r0, r2
 8011ecc:	f7fd fccc 	bl	800f868 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	3316      	adds	r3, #22
 8011ed4:	6939      	ldr	r1, [r7, #16]
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	f7fd fcc6 	bl	800f868 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011edc:	68fb      	ldr	r3, [r7, #12]
 8011ede:	3312      	adds	r3, #18
 8011ee0:	2100      	movs	r1, #0
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	f7fd fca5 	bl	800f832 <st_word>
					fs->wflag = 1;
 8011ee8:	68bb      	ldr	r3, [r7, #8]
 8011eea:	2201      	movs	r2, #1
 8011eec:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011eee:	68bb      	ldr	r3, [r7, #8]
 8011ef0:	4618      	mov	r0, r3
 8011ef2:	f7fd ff41 	bl	800fd78 <sync_fs>
 8011ef6:	4603      	mov	r3, r0
 8011ef8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	7d1b      	ldrb	r3, [r3, #20]
 8011efe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011f02:	b2da      	uxtb	r2, r3
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011f08:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f0a:	4618      	mov	r0, r3
 8011f0c:	3718      	adds	r7, #24
 8011f0e:	46bd      	mov	sp, r7
 8011f10:	bd80      	pop	{r7, pc}
 8011f12:	bf00      	nop
 8011f14:	274a0000 	.word	0x274a0000

08011f18 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8011f18:	b580      	push	{r7, lr}
 8011f1a:	b084      	sub	sp, #16
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8011f20:	6878      	ldr	r0, [r7, #4]
 8011f22:	f7ff ff79 	bl	8011e18 <f_sync>
 8011f26:	4603      	mov	r3, r0
 8011f28:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8011f2a:	7bfb      	ldrb	r3, [r7, #15]
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d118      	bne.n	8011f62 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	f107 0208 	add.w	r2, r7, #8
 8011f36:	4611      	mov	r1, r2
 8011f38:	4618      	mov	r0, r3
 8011f3a:	f7ff fa2f 	bl	801139c <validate>
 8011f3e:	4603      	mov	r3, r0
 8011f40:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011f42:	7bfb      	ldrb	r3, [r7, #15]
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d10c      	bne.n	8011f62 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	691b      	ldr	r3, [r3, #16]
 8011f4c:	4618      	mov	r0, r3
 8011f4e:	f7fd fe41 	bl	800fbd4 <dec_lock>
 8011f52:	4603      	mov	r3, r0
 8011f54:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8011f56:	7bfb      	ldrb	r3, [r7, #15]
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d102      	bne.n	8011f62 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	2200      	movs	r2, #0
 8011f60:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8011f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f64:	4618      	mov	r0, r3
 8011f66:	3710      	adds	r7, #16
 8011f68:	46bd      	mov	sp, r7
 8011f6a:	bd80      	pop	{r7, pc}

08011f6c <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8011f6c:	b590      	push	{r4, r7, lr}
 8011f6e:	b091      	sub	sp, #68	; 0x44
 8011f70:	af00      	add	r7, sp, #0
 8011f72:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8011f74:	f107 0108 	add.w	r1, r7, #8
 8011f78:	1d3b      	adds	r3, r7, #4
 8011f7a:	2200      	movs	r2, #0
 8011f7c:	4618      	mov	r0, r3
 8011f7e:	f7fe ff87 	bl	8010e90 <find_volume>
 8011f82:	4603      	mov	r3, r0
 8011f84:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8011f88:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d131      	bne.n	8011ff4 <f_chdir+0x88>
		dj.obj.fs = fs;
 8011f90:	68bb      	ldr	r3, [r7, #8]
 8011f92:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8011f94:	687a      	ldr	r2, [r7, #4]
 8011f96:	f107 030c 	add.w	r3, r7, #12
 8011f9a:	4611      	mov	r1, r2
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	f7fe fe47 	bl	8010c30 <follow_path>
 8011fa2:	4603      	mov	r3, r0
 8011fa4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 8011fa8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d11a      	bne.n	8011fe6 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8011fb0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8011fb4:	b25b      	sxtb	r3, r3
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	da03      	bge.n	8011fc2 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8011fba:	68bb      	ldr	r3, [r7, #8]
 8011fbc:	697a      	ldr	r2, [r7, #20]
 8011fbe:	619a      	str	r2, [r3, #24]
 8011fc0:	e011      	b.n	8011fe6 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8011fc2:	7cbb      	ldrb	r3, [r7, #18]
 8011fc4:	f003 0310 	and.w	r3, r3, #16
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d009      	beq.n	8011fe0 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8011fcc:	68bb      	ldr	r3, [r7, #8]
 8011fce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011fd0:	68bc      	ldr	r4, [r7, #8]
 8011fd2:	4611      	mov	r1, r2
 8011fd4:	4618      	mov	r0, r3
 8011fd6:	f7fe fc20 	bl	801081a <ld_clust>
 8011fda:	4603      	mov	r3, r0
 8011fdc:	61a3      	str	r3, [r4, #24]
 8011fde:	e002      	b.n	8011fe6 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8011fe0:	2305      	movs	r3, #5
 8011fe2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8011fe6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011fea:	2b04      	cmp	r3, #4
 8011fec:	d102      	bne.n	8011ff4 <f_chdir+0x88>
 8011fee:	2305      	movs	r3, #5
 8011ff0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 8011ff4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8011ff8:	4618      	mov	r0, r3
 8011ffa:	3744      	adds	r7, #68	; 0x44
 8011ffc:	46bd      	mov	sp, r7
 8011ffe:	bd90      	pop	{r4, r7, pc}

08012000 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8012000:	b580      	push	{r7, lr}
 8012002:	b090      	sub	sp, #64	; 0x40
 8012004:	af00      	add	r7, sp, #0
 8012006:	6078      	str	r0, [r7, #4]
 8012008:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	f107 0208 	add.w	r2, r7, #8
 8012010:	4611      	mov	r1, r2
 8012012:	4618      	mov	r0, r3
 8012014:	f7ff f9c2 	bl	801139c <validate>
 8012018:	4603      	mov	r3, r0
 801201a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 801201e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012022:	2b00      	cmp	r3, #0
 8012024:	d103      	bne.n	801202e <f_lseek+0x2e>
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	7d5b      	ldrb	r3, [r3, #21]
 801202a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 801202e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012032:	2b00      	cmp	r3, #0
 8012034:	d002      	beq.n	801203c <f_lseek+0x3c>
 8012036:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801203a:	e201      	b.n	8012440 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012040:	2b00      	cmp	r3, #0
 8012042:	f000 80d9 	beq.w	80121f8 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8012046:	683b      	ldr	r3, [r7, #0]
 8012048:	f1b3 3fff 	cmp.w	r3, #4294967295
 801204c:	d15a      	bne.n	8012104 <f_lseek+0x104>
			tbl = fp->cltbl;
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012052:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8012054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012056:	1d1a      	adds	r2, r3, #4
 8012058:	627a      	str	r2, [r7, #36]	; 0x24
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	617b      	str	r3, [r7, #20]
 801205e:	2302      	movs	r3, #2
 8012060:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	689b      	ldr	r3, [r3, #8]
 8012066:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8012068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801206a:	2b00      	cmp	r3, #0
 801206c:	d03a      	beq.n	80120e4 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801206e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012070:	613b      	str	r3, [r7, #16]
 8012072:	2300      	movs	r3, #0
 8012074:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012078:	3302      	adds	r3, #2
 801207a:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 801207c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801207e:	60fb      	str	r3, [r7, #12]
 8012080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012082:	3301      	adds	r3, #1
 8012084:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801208a:	4618      	mov	r0, r3
 801208c:	f7fd ff03 	bl	800fe96 <get_fat>
 8012090:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8012092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012094:	2b01      	cmp	r3, #1
 8012096:	d804      	bhi.n	80120a2 <f_lseek+0xa2>
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	2202      	movs	r2, #2
 801209c:	755a      	strb	r2, [r3, #21]
 801209e:	2302      	movs	r3, #2
 80120a0:	e1ce      	b.n	8012440 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80120a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120a8:	d104      	bne.n	80120b4 <f_lseek+0xb4>
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	2201      	movs	r2, #1
 80120ae:	755a      	strb	r2, [r3, #21]
 80120b0:	2301      	movs	r3, #1
 80120b2:	e1c5      	b.n	8012440 <f_lseek+0x440>
					} while (cl == pcl + 1);
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	3301      	adds	r3, #1
 80120b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80120ba:	429a      	cmp	r2, r3
 80120bc:	d0de      	beq.n	801207c <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80120be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80120c0:	697b      	ldr	r3, [r7, #20]
 80120c2:	429a      	cmp	r2, r3
 80120c4:	d809      	bhi.n	80120da <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80120c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120c8:	1d1a      	adds	r2, r3, #4
 80120ca:	627a      	str	r2, [r7, #36]	; 0x24
 80120cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80120ce:	601a      	str	r2, [r3, #0]
 80120d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120d2:	1d1a      	adds	r2, r3, #4
 80120d4:	627a      	str	r2, [r7, #36]	; 0x24
 80120d6:	693a      	ldr	r2, [r7, #16]
 80120d8:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80120da:	68bb      	ldr	r3, [r7, #8]
 80120dc:	69db      	ldr	r3, [r3, #28]
 80120de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80120e0:	429a      	cmp	r2, r3
 80120e2:	d3c4      	bcc.n	801206e <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80120ea:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80120ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80120ee:	697b      	ldr	r3, [r7, #20]
 80120f0:	429a      	cmp	r2, r3
 80120f2:	d803      	bhi.n	80120fc <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80120f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120f6:	2200      	movs	r2, #0
 80120f8:	601a      	str	r2, [r3, #0]
 80120fa:	e19f      	b.n	801243c <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80120fc:	2311      	movs	r3, #17
 80120fe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8012102:	e19b      	b.n	801243c <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	68db      	ldr	r3, [r3, #12]
 8012108:	683a      	ldr	r2, [r7, #0]
 801210a:	429a      	cmp	r2, r3
 801210c:	d902      	bls.n	8012114 <f_lseek+0x114>
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	68db      	ldr	r3, [r3, #12]
 8012112:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	683a      	ldr	r2, [r7, #0]
 8012118:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801211a:	683b      	ldr	r3, [r7, #0]
 801211c:	2b00      	cmp	r3, #0
 801211e:	f000 818d 	beq.w	801243c <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8012122:	683b      	ldr	r3, [r7, #0]
 8012124:	3b01      	subs	r3, #1
 8012126:	4619      	mov	r1, r3
 8012128:	6878      	ldr	r0, [r7, #4]
 801212a:	f7fe f998 	bl	801045e <clmt_clust>
 801212e:	4602      	mov	r2, r0
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8012134:	68ba      	ldr	r2, [r7, #8]
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	69db      	ldr	r3, [r3, #28]
 801213a:	4619      	mov	r1, r3
 801213c:	4610      	mov	r0, r2
 801213e:	f7fd fe8b 	bl	800fe58 <clust2sect>
 8012142:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8012144:	69bb      	ldr	r3, [r7, #24]
 8012146:	2b00      	cmp	r3, #0
 8012148:	d104      	bne.n	8012154 <f_lseek+0x154>
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	2202      	movs	r2, #2
 801214e:	755a      	strb	r2, [r3, #21]
 8012150:	2302      	movs	r3, #2
 8012152:	e175      	b.n	8012440 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8012154:	683b      	ldr	r3, [r7, #0]
 8012156:	3b01      	subs	r3, #1
 8012158:	68ba      	ldr	r2, [r7, #8]
 801215a:	8992      	ldrh	r2, [r2, #12]
 801215c:	fbb3 f3f2 	udiv	r3, r3, r2
 8012160:	68ba      	ldr	r2, [r7, #8]
 8012162:	8952      	ldrh	r2, [r2, #10]
 8012164:	3a01      	subs	r2, #1
 8012166:	4013      	ands	r3, r2
 8012168:	69ba      	ldr	r2, [r7, #24]
 801216a:	4413      	add	r3, r2
 801216c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	699b      	ldr	r3, [r3, #24]
 8012172:	68ba      	ldr	r2, [r7, #8]
 8012174:	8992      	ldrh	r2, [r2, #12]
 8012176:	fbb3 f1f2 	udiv	r1, r3, r2
 801217a:	fb02 f201 	mul.w	r2, r2, r1
 801217e:	1a9b      	subs	r3, r3, r2
 8012180:	2b00      	cmp	r3, #0
 8012182:	f000 815b 	beq.w	801243c <f_lseek+0x43c>
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	6a1b      	ldr	r3, [r3, #32]
 801218a:	69ba      	ldr	r2, [r7, #24]
 801218c:	429a      	cmp	r2, r3
 801218e:	f000 8155 	beq.w	801243c <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	7d1b      	ldrb	r3, [r3, #20]
 8012196:	b25b      	sxtb	r3, r3
 8012198:	2b00      	cmp	r3, #0
 801219a:	da18      	bge.n	80121ce <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801219c:	68bb      	ldr	r3, [r7, #8]
 801219e:	7858      	ldrb	r0, [r3, #1]
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	6a1a      	ldr	r2, [r3, #32]
 80121aa:	2301      	movs	r3, #1
 80121ac:	f7fd fac8 	bl	800f740 <disk_write>
 80121b0:	4603      	mov	r3, r0
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d004      	beq.n	80121c0 <f_lseek+0x1c0>
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	2201      	movs	r2, #1
 80121ba:	755a      	strb	r2, [r3, #21]
 80121bc:	2301      	movs	r3, #1
 80121be:	e13f      	b.n	8012440 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	7d1b      	ldrb	r3, [r3, #20]
 80121c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80121c8:	b2da      	uxtb	r2, r3
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80121ce:	68bb      	ldr	r3, [r7, #8]
 80121d0:	7858      	ldrb	r0, [r3, #1]
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80121d8:	2301      	movs	r3, #1
 80121da:	69ba      	ldr	r2, [r7, #24]
 80121dc:	f7fd fa90 	bl	800f700 <disk_read>
 80121e0:	4603      	mov	r3, r0
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d004      	beq.n	80121f0 <f_lseek+0x1f0>
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	2201      	movs	r2, #1
 80121ea:	755a      	strb	r2, [r3, #21]
 80121ec:	2301      	movs	r3, #1
 80121ee:	e127      	b.n	8012440 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	69ba      	ldr	r2, [r7, #24]
 80121f4:	621a      	str	r2, [r3, #32]
 80121f6:	e121      	b.n	801243c <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	68db      	ldr	r3, [r3, #12]
 80121fc:	683a      	ldr	r2, [r7, #0]
 80121fe:	429a      	cmp	r2, r3
 8012200:	d908      	bls.n	8012214 <f_lseek+0x214>
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	7d1b      	ldrb	r3, [r3, #20]
 8012206:	f003 0302 	and.w	r3, r3, #2
 801220a:	2b00      	cmp	r3, #0
 801220c:	d102      	bne.n	8012214 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	68db      	ldr	r3, [r3, #12]
 8012212:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	699b      	ldr	r3, [r3, #24]
 8012218:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 801221a:	2300      	movs	r3, #0
 801221c:	637b      	str	r3, [r7, #52]	; 0x34
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012222:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8012224:	683b      	ldr	r3, [r7, #0]
 8012226:	2b00      	cmp	r3, #0
 8012228:	f000 80b5 	beq.w	8012396 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 801222c:	68bb      	ldr	r3, [r7, #8]
 801222e:	895b      	ldrh	r3, [r3, #10]
 8012230:	461a      	mov	r2, r3
 8012232:	68bb      	ldr	r3, [r7, #8]
 8012234:	899b      	ldrh	r3, [r3, #12]
 8012236:	fb03 f302 	mul.w	r3, r3, r2
 801223a:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 801223c:	6a3b      	ldr	r3, [r7, #32]
 801223e:	2b00      	cmp	r3, #0
 8012240:	d01b      	beq.n	801227a <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8012242:	683b      	ldr	r3, [r7, #0]
 8012244:	1e5a      	subs	r2, r3, #1
 8012246:	69fb      	ldr	r3, [r7, #28]
 8012248:	fbb2 f2f3 	udiv	r2, r2, r3
 801224c:	6a3b      	ldr	r3, [r7, #32]
 801224e:	1e59      	subs	r1, r3, #1
 8012250:	69fb      	ldr	r3, [r7, #28]
 8012252:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8012256:	429a      	cmp	r2, r3
 8012258:	d30f      	bcc.n	801227a <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801225a:	6a3b      	ldr	r3, [r7, #32]
 801225c:	1e5a      	subs	r2, r3, #1
 801225e:	69fb      	ldr	r3, [r7, #28]
 8012260:	425b      	negs	r3, r3
 8012262:	401a      	ands	r2, r3
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	699b      	ldr	r3, [r3, #24]
 801226c:	683a      	ldr	r2, [r7, #0]
 801226e:	1ad3      	subs	r3, r2, r3
 8012270:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	69db      	ldr	r3, [r3, #28]
 8012276:	63bb      	str	r3, [r7, #56]	; 0x38
 8012278:	e022      	b.n	80122c0 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	689b      	ldr	r3, [r3, #8]
 801227e:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8012280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012282:	2b00      	cmp	r3, #0
 8012284:	d119      	bne.n	80122ba <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	2100      	movs	r1, #0
 801228a:	4618      	mov	r0, r3
 801228c:	f7fe f84f 	bl	801032e <create_chain>
 8012290:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8012292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012294:	2b01      	cmp	r3, #1
 8012296:	d104      	bne.n	80122a2 <f_lseek+0x2a2>
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	2202      	movs	r2, #2
 801229c:	755a      	strb	r2, [r3, #21]
 801229e:	2302      	movs	r3, #2
 80122a0:	e0ce      	b.n	8012440 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80122a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122a8:	d104      	bne.n	80122b4 <f_lseek+0x2b4>
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	2201      	movs	r2, #1
 80122ae:	755a      	strb	r2, [r3, #21]
 80122b0:	2301      	movs	r3, #1
 80122b2:	e0c5      	b.n	8012440 <f_lseek+0x440>
					fp->obj.sclust = clst;
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80122b8:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80122be:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80122c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d067      	beq.n	8012396 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 80122c6:	e03a      	b.n	801233e <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 80122c8:	683a      	ldr	r2, [r7, #0]
 80122ca:	69fb      	ldr	r3, [r7, #28]
 80122cc:	1ad3      	subs	r3, r2, r3
 80122ce:	603b      	str	r3, [r7, #0]
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	699a      	ldr	r2, [r3, #24]
 80122d4:	69fb      	ldr	r3, [r7, #28]
 80122d6:	441a      	add	r2, r3
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	7d1b      	ldrb	r3, [r3, #20]
 80122e0:	f003 0302 	and.w	r3, r3, #2
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d00b      	beq.n	8012300 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80122ec:	4618      	mov	r0, r3
 80122ee:	f7fe f81e 	bl	801032e <create_chain>
 80122f2:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80122f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d108      	bne.n	801230c <f_lseek+0x30c>
							ofs = 0; break;
 80122fa:	2300      	movs	r3, #0
 80122fc:	603b      	str	r3, [r7, #0]
 80122fe:	e022      	b.n	8012346 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012304:	4618      	mov	r0, r3
 8012306:	f7fd fdc6 	bl	800fe96 <get_fat>
 801230a:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801230c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801230e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012312:	d104      	bne.n	801231e <f_lseek+0x31e>
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	2201      	movs	r2, #1
 8012318:	755a      	strb	r2, [r3, #21]
 801231a:	2301      	movs	r3, #1
 801231c:	e090      	b.n	8012440 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 801231e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012320:	2b01      	cmp	r3, #1
 8012322:	d904      	bls.n	801232e <f_lseek+0x32e>
 8012324:	68bb      	ldr	r3, [r7, #8]
 8012326:	69db      	ldr	r3, [r3, #28]
 8012328:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801232a:	429a      	cmp	r2, r3
 801232c:	d304      	bcc.n	8012338 <f_lseek+0x338>
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	2202      	movs	r2, #2
 8012332:	755a      	strb	r2, [r3, #21]
 8012334:	2302      	movs	r3, #2
 8012336:	e083      	b.n	8012440 <f_lseek+0x440>
					fp->clust = clst;
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801233c:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 801233e:	683a      	ldr	r2, [r7, #0]
 8012340:	69fb      	ldr	r3, [r7, #28]
 8012342:	429a      	cmp	r2, r3
 8012344:	d8c0      	bhi.n	80122c8 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	699a      	ldr	r2, [r3, #24]
 801234a:	683b      	ldr	r3, [r7, #0]
 801234c:	441a      	add	r2, r3
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8012352:	68bb      	ldr	r3, [r7, #8]
 8012354:	899b      	ldrh	r3, [r3, #12]
 8012356:	461a      	mov	r2, r3
 8012358:	683b      	ldr	r3, [r7, #0]
 801235a:	fbb3 f1f2 	udiv	r1, r3, r2
 801235e:	fb02 f201 	mul.w	r2, r2, r1
 8012362:	1a9b      	subs	r3, r3, r2
 8012364:	2b00      	cmp	r3, #0
 8012366:	d016      	beq.n	8012396 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8012368:	68bb      	ldr	r3, [r7, #8]
 801236a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801236c:	4618      	mov	r0, r3
 801236e:	f7fd fd73 	bl	800fe58 <clust2sect>
 8012372:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8012374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012376:	2b00      	cmp	r3, #0
 8012378:	d104      	bne.n	8012384 <f_lseek+0x384>
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	2202      	movs	r2, #2
 801237e:	755a      	strb	r2, [r3, #21]
 8012380:	2302      	movs	r3, #2
 8012382:	e05d      	b.n	8012440 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8012384:	68bb      	ldr	r3, [r7, #8]
 8012386:	899b      	ldrh	r3, [r3, #12]
 8012388:	461a      	mov	r2, r3
 801238a:	683b      	ldr	r3, [r7, #0]
 801238c:	fbb3 f3f2 	udiv	r3, r3, r2
 8012390:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012392:	4413      	add	r3, r2
 8012394:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	699a      	ldr	r2, [r3, #24]
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	68db      	ldr	r3, [r3, #12]
 801239e:	429a      	cmp	r2, r3
 80123a0:	d90a      	bls.n	80123b8 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	699a      	ldr	r2, [r3, #24]
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	7d1b      	ldrb	r3, [r3, #20]
 80123ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80123b2:	b2da      	uxtb	r2, r3
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	699b      	ldr	r3, [r3, #24]
 80123bc:	68ba      	ldr	r2, [r7, #8]
 80123be:	8992      	ldrh	r2, [r2, #12]
 80123c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80123c4:	fb02 f201 	mul.w	r2, r2, r1
 80123c8:	1a9b      	subs	r3, r3, r2
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d036      	beq.n	801243c <f_lseek+0x43c>
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	6a1b      	ldr	r3, [r3, #32]
 80123d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80123d4:	429a      	cmp	r2, r3
 80123d6:	d031      	beq.n	801243c <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	7d1b      	ldrb	r3, [r3, #20]
 80123dc:	b25b      	sxtb	r3, r3
 80123de:	2b00      	cmp	r3, #0
 80123e0:	da18      	bge.n	8012414 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80123e2:	68bb      	ldr	r3, [r7, #8]
 80123e4:	7858      	ldrb	r0, [r3, #1]
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	6a1a      	ldr	r2, [r3, #32]
 80123f0:	2301      	movs	r3, #1
 80123f2:	f7fd f9a5 	bl	800f740 <disk_write>
 80123f6:	4603      	mov	r3, r0
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d004      	beq.n	8012406 <f_lseek+0x406>
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	2201      	movs	r2, #1
 8012400:	755a      	strb	r2, [r3, #21]
 8012402:	2301      	movs	r3, #1
 8012404:	e01c      	b.n	8012440 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	7d1b      	ldrb	r3, [r3, #20]
 801240a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801240e:	b2da      	uxtb	r2, r3
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8012414:	68bb      	ldr	r3, [r7, #8]
 8012416:	7858      	ldrb	r0, [r3, #1]
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801241e:	2301      	movs	r3, #1
 8012420:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012422:	f7fd f96d 	bl	800f700 <disk_read>
 8012426:	4603      	mov	r3, r0
 8012428:	2b00      	cmp	r3, #0
 801242a:	d004      	beq.n	8012436 <f_lseek+0x436>
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	2201      	movs	r2, #1
 8012430:	755a      	strb	r2, [r3, #21]
 8012432:	2301      	movs	r3, #1
 8012434:	e004      	b.n	8012440 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801243a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 801243c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8012440:	4618      	mov	r0, r3
 8012442:	3740      	adds	r7, #64	; 0x40
 8012444:	46bd      	mov	sp, r7
 8012446:	bd80      	pop	{r7, pc}

08012448 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8012448:	b580      	push	{r7, lr}
 801244a:	b09e      	sub	sp, #120	; 0x78
 801244c:	af00      	add	r7, sp, #0
 801244e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8012450:	2300      	movs	r3, #0
 8012452:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8012454:	f107 010c 	add.w	r1, r7, #12
 8012458:	1d3b      	adds	r3, r7, #4
 801245a:	2202      	movs	r2, #2
 801245c:	4618      	mov	r0, r3
 801245e:	f7fe fd17 	bl	8010e90 <find_volume>
 8012462:	4603      	mov	r3, r0
 8012464:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 801246c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012470:	2b00      	cmp	r3, #0
 8012472:	f040 80a4 	bne.w	80125be <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8012476:	687a      	ldr	r2, [r7, #4]
 8012478:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801247c:	4611      	mov	r1, r2
 801247e:	4618      	mov	r0, r3
 8012480:	f7fe fbd6 	bl	8010c30 <follow_path>
 8012484:	4603      	mov	r3, r0
 8012486:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 801248a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801248e:	2b00      	cmp	r3, #0
 8012490:	d108      	bne.n	80124a4 <f_unlink+0x5c>
 8012492:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8012496:	f003 0320 	and.w	r3, r3, #32
 801249a:	2b00      	cmp	r3, #0
 801249c:	d002      	beq.n	80124a4 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 801249e:	2306      	movs	r3, #6
 80124a0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 80124a4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d108      	bne.n	80124be <f_unlink+0x76>
 80124ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80124b0:	2102      	movs	r1, #2
 80124b2:	4618      	mov	r0, r3
 80124b4:	f7fd fa82 	bl	800f9bc <chk_lock>
 80124b8:	4603      	mov	r3, r0
 80124ba:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 80124be:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d17b      	bne.n	80125be <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80124c6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80124ca:	b25b      	sxtb	r3, r3
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	da03      	bge.n	80124d8 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80124d0:	2306      	movs	r3, #6
 80124d2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80124d6:	e008      	b.n	80124ea <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 80124d8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80124dc:	f003 0301 	and.w	r3, r3, #1
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d002      	beq.n	80124ea <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80124e4:	2307      	movs	r3, #7
 80124e6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 80124ea:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d13d      	bne.n	801256e <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80124f6:	4611      	mov	r1, r2
 80124f8:	4618      	mov	r0, r3
 80124fa:	f7fe f98e 	bl	801081a <ld_clust>
 80124fe:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8012500:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8012504:	f003 0310 	and.w	r3, r3, #16
 8012508:	2b00      	cmp	r3, #0
 801250a:	d030      	beq.n	801256e <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	699b      	ldr	r3, [r3, #24]
 8012510:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012512:	429a      	cmp	r2, r3
 8012514:	d103      	bne.n	801251e <f_unlink+0xd6>
						res = FR_DENIED;
 8012516:	2307      	movs	r3, #7
 8012518:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 801251c:	e027      	b.n	801256e <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8012522:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012524:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8012526:	f107 0310 	add.w	r3, r7, #16
 801252a:	2100      	movs	r1, #0
 801252c:	4618      	mov	r0, r3
 801252e:	f7fd ffce 	bl	80104ce <dir_sdi>
 8012532:	4603      	mov	r3, r0
 8012534:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8012538:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801253c:	2b00      	cmp	r3, #0
 801253e:	d116      	bne.n	801256e <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8012540:	f107 0310 	add.w	r3, r7, #16
 8012544:	2100      	movs	r1, #0
 8012546:	4618      	mov	r0, r3
 8012548:	f7fe f9a6 	bl	8010898 <dir_read>
 801254c:	4603      	mov	r3, r0
 801254e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8012552:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012556:	2b00      	cmp	r3, #0
 8012558:	d102      	bne.n	8012560 <f_unlink+0x118>
 801255a:	2307      	movs	r3, #7
 801255c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8012560:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012564:	2b04      	cmp	r3, #4
 8012566:	d102      	bne.n	801256e <f_unlink+0x126>
 8012568:	2300      	movs	r3, #0
 801256a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 801256e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012572:	2b00      	cmp	r3, #0
 8012574:	d123      	bne.n	80125be <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8012576:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801257a:	4618      	mov	r0, r3
 801257c:	f7fe fa70 	bl	8010a60 <dir_remove>
 8012580:	4603      	mov	r3, r0
 8012582:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8012586:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801258a:	2b00      	cmp	r3, #0
 801258c:	d10c      	bne.n	80125a8 <f_unlink+0x160>
 801258e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012590:	2b00      	cmp	r3, #0
 8012592:	d009      	beq.n	80125a8 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8012594:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012598:	2200      	movs	r2, #0
 801259a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801259c:	4618      	mov	r0, r3
 801259e:	f7fd fe61 	bl	8010264 <remove_chain>
 80125a2:	4603      	mov	r3, r0
 80125a4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 80125a8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d106      	bne.n	80125be <f_unlink+0x176>
 80125b0:	68fb      	ldr	r3, [r7, #12]
 80125b2:	4618      	mov	r0, r3
 80125b4:	f7fd fbe0 	bl	800fd78 <sync_fs>
 80125b8:	4603      	mov	r3, r0
 80125ba:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80125be:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80125c2:	4618      	mov	r0, r3
 80125c4:	3778      	adds	r7, #120	; 0x78
 80125c6:	46bd      	mov	sp, r7
 80125c8:	bd80      	pop	{r7, pc}
	...

080125cc <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 80125cc:	b580      	push	{r7, lr}
 80125ce:	b096      	sub	sp, #88	; 0x58
 80125d0:	af00      	add	r7, sp, #0
 80125d2:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80125d4:	f107 0108 	add.w	r1, r7, #8
 80125d8:	1d3b      	adds	r3, r7, #4
 80125da:	2202      	movs	r2, #2
 80125dc:	4618      	mov	r0, r3
 80125de:	f7fe fc57 	bl	8010e90 <find_volume>
 80125e2:	4603      	mov	r3, r0
 80125e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 80125e8:	68bb      	ldr	r3, [r7, #8]
 80125ea:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 80125ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	f040 80fe 	bne.w	80127f2 <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 80125f6:	687a      	ldr	r2, [r7, #4]
 80125f8:	f107 030c 	add.w	r3, r7, #12
 80125fc:	4611      	mov	r1, r2
 80125fe:	4618      	mov	r0, r3
 8012600:	f7fe fb16 	bl	8010c30 <follow_path>
 8012604:	4603      	mov	r3, r0
 8012606:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 801260a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801260e:	2b00      	cmp	r3, #0
 8012610:	d102      	bne.n	8012618 <f_mkdir+0x4c>
 8012612:	2308      	movs	r3, #8
 8012614:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8012618:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801261c:	2b04      	cmp	r3, #4
 801261e:	d108      	bne.n	8012632 <f_mkdir+0x66>
 8012620:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8012624:	f003 0320 	and.w	r3, r3, #32
 8012628:	2b00      	cmp	r3, #0
 801262a:	d002      	beq.n	8012632 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 801262c:	2306      	movs	r3, #6
 801262e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8012632:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012636:	2b04      	cmp	r3, #4
 8012638:	f040 80db 	bne.w	80127f2 <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 801263c:	f107 030c 	add.w	r3, r7, #12
 8012640:	2100      	movs	r1, #0
 8012642:	4618      	mov	r0, r3
 8012644:	f7fd fe73 	bl	801032e <create_chain>
 8012648:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 801264a:	68bb      	ldr	r3, [r7, #8]
 801264c:	895b      	ldrh	r3, [r3, #10]
 801264e:	461a      	mov	r2, r3
 8012650:	68bb      	ldr	r3, [r7, #8]
 8012652:	899b      	ldrh	r3, [r3, #12]
 8012654:	fb03 f302 	mul.w	r3, r3, r2
 8012658:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 801265a:	2300      	movs	r3, #0
 801265c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8012660:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012662:	2b00      	cmp	r3, #0
 8012664:	d102      	bne.n	801266c <f_mkdir+0xa0>
 8012666:	2307      	movs	r3, #7
 8012668:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 801266c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801266e:	2b01      	cmp	r3, #1
 8012670:	d102      	bne.n	8012678 <f_mkdir+0xac>
 8012672:	2302      	movs	r3, #2
 8012674:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012678:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801267a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801267e:	d102      	bne.n	8012686 <f_mkdir+0xba>
 8012680:	2301      	movs	r3, #1
 8012682:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8012686:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801268a:	2b00      	cmp	r3, #0
 801268c:	d106      	bne.n	801269c <f_mkdir+0xd0>
 801268e:	68bb      	ldr	r3, [r7, #8]
 8012690:	4618      	mov	r0, r3
 8012692:	f7fd faff 	bl	800fc94 <sync_window>
 8012696:	4603      	mov	r3, r0
 8012698:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 801269c:	4b58      	ldr	r3, [pc, #352]	; (8012800 <f_mkdir+0x234>)
 801269e:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 80126a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d16c      	bne.n	8012782 <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 80126a8:	68bb      	ldr	r3, [r7, #8]
 80126aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80126ac:	4618      	mov	r0, r3
 80126ae:	f7fd fbd3 	bl	800fe58 <clust2sect>
 80126b2:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 80126b4:	68bb      	ldr	r3, [r7, #8]
 80126b6:	3338      	adds	r3, #56	; 0x38
 80126b8:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 80126ba:	68bb      	ldr	r3, [r7, #8]
 80126bc:	899b      	ldrh	r3, [r3, #12]
 80126be:	461a      	mov	r2, r3
 80126c0:	2100      	movs	r1, #0
 80126c2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80126c4:	f7fd f91d 	bl	800f902 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 80126c8:	220b      	movs	r2, #11
 80126ca:	2120      	movs	r1, #32
 80126cc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80126ce:	f7fd f918 	bl	800f902 <mem_set>
					dir[DIR_Name] = '.';
 80126d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126d4:	222e      	movs	r2, #46	; 0x2e
 80126d6:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 80126d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126da:	330b      	adds	r3, #11
 80126dc:	2210      	movs	r2, #16
 80126de:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 80126e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126e2:	3316      	adds	r3, #22
 80126e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80126e6:	4618      	mov	r0, r3
 80126e8:	f7fd f8be 	bl	800f868 <st_dword>
					st_clust(fs, dir, dcl);
 80126ec:	68bb      	ldr	r3, [r7, #8]
 80126ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80126f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80126f2:	4618      	mov	r0, r3
 80126f4:	f7fe f8b0 	bl	8010858 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80126f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126fa:	3320      	adds	r3, #32
 80126fc:	2220      	movs	r2, #32
 80126fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012700:	4618      	mov	r0, r3
 8012702:	f7fd f8dd 	bl	800f8c0 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8012706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012708:	3321      	adds	r3, #33	; 0x21
 801270a:	222e      	movs	r2, #46	; 0x2e
 801270c:	701a      	strb	r2, [r3, #0]
 801270e:	697b      	ldr	r3, [r7, #20]
 8012710:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8012712:	68bb      	ldr	r3, [r7, #8]
 8012714:	781b      	ldrb	r3, [r3, #0]
 8012716:	2b03      	cmp	r3, #3
 8012718:	d106      	bne.n	8012728 <f_mkdir+0x15c>
 801271a:	68bb      	ldr	r3, [r7, #8]
 801271c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801271e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012720:	429a      	cmp	r2, r3
 8012722:	d101      	bne.n	8012728 <f_mkdir+0x15c>
 8012724:	2300      	movs	r3, #0
 8012726:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8012728:	68b8      	ldr	r0, [r7, #8]
 801272a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801272c:	3320      	adds	r3, #32
 801272e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012730:	4619      	mov	r1, r3
 8012732:	f7fe f891 	bl	8010858 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8012736:	68bb      	ldr	r3, [r7, #8]
 8012738:	895b      	ldrh	r3, [r3, #10]
 801273a:	653b      	str	r3, [r7, #80]	; 0x50
 801273c:	e01c      	b.n	8012778 <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 801273e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012740:	1c5a      	adds	r2, r3, #1
 8012742:	64fa      	str	r2, [r7, #76]	; 0x4c
 8012744:	68ba      	ldr	r2, [r7, #8]
 8012746:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8012748:	68bb      	ldr	r3, [r7, #8]
 801274a:	2201      	movs	r2, #1
 801274c:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 801274e:	68bb      	ldr	r3, [r7, #8]
 8012750:	4618      	mov	r0, r3
 8012752:	f7fd fa9f 	bl	800fc94 <sync_window>
 8012756:	4603      	mov	r3, r0
 8012758:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 801275c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012760:	2b00      	cmp	r3, #0
 8012762:	d10d      	bne.n	8012780 <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 8012764:	68bb      	ldr	r3, [r7, #8]
 8012766:	899b      	ldrh	r3, [r3, #12]
 8012768:	461a      	mov	r2, r3
 801276a:	2100      	movs	r1, #0
 801276c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801276e:	f7fd f8c8 	bl	800f902 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8012772:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012774:	3b01      	subs	r3, #1
 8012776:	653b      	str	r3, [r7, #80]	; 0x50
 8012778:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801277a:	2b00      	cmp	r3, #0
 801277c:	d1df      	bne.n	801273e <f_mkdir+0x172>
 801277e:	e000      	b.n	8012782 <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 8012780:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8012782:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012786:	2b00      	cmp	r3, #0
 8012788:	d107      	bne.n	801279a <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 801278a:	f107 030c 	add.w	r3, r7, #12
 801278e:	4618      	mov	r0, r3
 8012790:	f7fe f934 	bl	80109fc <dir_register>
 8012794:	4603      	mov	r3, r0
 8012796:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 801279a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d120      	bne.n	80127e4 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 80127a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127a4:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 80127a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80127a8:	3316      	adds	r3, #22
 80127aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80127ac:	4618      	mov	r0, r3
 80127ae:	f7fd f85b 	bl	800f868 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 80127b2:	68bb      	ldr	r3, [r7, #8]
 80127b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80127b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80127b8:	4618      	mov	r0, r3
 80127ba:	f7fe f84d 	bl	8010858 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 80127be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80127c0:	330b      	adds	r3, #11
 80127c2:	2210      	movs	r2, #16
 80127c4:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 80127c6:	68bb      	ldr	r3, [r7, #8]
 80127c8:	2201      	movs	r2, #1
 80127ca:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 80127cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d10e      	bne.n	80127f2 <f_mkdir+0x226>
					res = sync_fs(fs);
 80127d4:	68bb      	ldr	r3, [r7, #8]
 80127d6:	4618      	mov	r0, r3
 80127d8:	f7fd face 	bl	800fd78 <sync_fs>
 80127dc:	4603      	mov	r3, r0
 80127de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80127e2:	e006      	b.n	80127f2 <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 80127e4:	f107 030c 	add.w	r3, r7, #12
 80127e8:	2200      	movs	r2, #0
 80127ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80127ec:	4618      	mov	r0, r3
 80127ee:	f7fd fd39 	bl	8010264 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80127f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 80127f6:	4618      	mov	r0, r3
 80127f8:	3758      	adds	r7, #88	; 0x58
 80127fa:	46bd      	mov	sp, r7
 80127fc:	bd80      	pop	{r7, pc}
 80127fe:	bf00      	nop
 8012800:	274a0000 	.word	0x274a0000

08012804 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8012804:	b580      	push	{r7, lr}
 8012806:	b088      	sub	sp, #32
 8012808:	af00      	add	r7, sp, #0
 801280a:	60f8      	str	r0, [r7, #12]
 801280c:	60b9      	str	r1, [r7, #8]
 801280e:	607a      	str	r2, [r7, #4]
	int n = 0;
 8012810:	2300      	movs	r3, #0
 8012812:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8012814:	68fb      	ldr	r3, [r7, #12]
 8012816:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8012818:	e017      	b.n	801284a <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 801281a:	f107 0310 	add.w	r3, r7, #16
 801281e:	f107 0114 	add.w	r1, r7, #20
 8012822:	2201      	movs	r2, #1
 8012824:	6878      	ldr	r0, [r7, #4]
 8012826:	f7ff f803 	bl	8011830 <f_read>
		if (rc != 1) break;
 801282a:	693b      	ldr	r3, [r7, #16]
 801282c:	2b01      	cmp	r3, #1
 801282e:	d112      	bne.n	8012856 <f_gets+0x52>
		c = s[0];
 8012830:	7d3b      	ldrb	r3, [r7, #20]
 8012832:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 8012834:	69bb      	ldr	r3, [r7, #24]
 8012836:	1c5a      	adds	r2, r3, #1
 8012838:	61ba      	str	r2, [r7, #24]
 801283a:	7dfa      	ldrb	r2, [r7, #23]
 801283c:	701a      	strb	r2, [r3, #0]
		n++;
 801283e:	69fb      	ldr	r3, [r7, #28]
 8012840:	3301      	adds	r3, #1
 8012842:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8012844:	7dfb      	ldrb	r3, [r7, #23]
 8012846:	2b0a      	cmp	r3, #10
 8012848:	d007      	beq.n	801285a <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 801284a:	68bb      	ldr	r3, [r7, #8]
 801284c:	3b01      	subs	r3, #1
 801284e:	69fa      	ldr	r2, [r7, #28]
 8012850:	429a      	cmp	r2, r3
 8012852:	dbe2      	blt.n	801281a <f_gets+0x16>
 8012854:	e002      	b.n	801285c <f_gets+0x58>
		if (rc != 1) break;
 8012856:	bf00      	nop
 8012858:	e000      	b.n	801285c <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 801285a:	bf00      	nop
	}
	*p = 0;
 801285c:	69bb      	ldr	r3, [r7, #24]
 801285e:	2200      	movs	r2, #0
 8012860:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8012862:	69fb      	ldr	r3, [r7, #28]
 8012864:	2b00      	cmp	r3, #0
 8012866:	d001      	beq.n	801286c <f_gets+0x68>
 8012868:	68fb      	ldr	r3, [r7, #12]
 801286a:	e000      	b.n	801286e <f_gets+0x6a>
 801286c:	2300      	movs	r3, #0
}
 801286e:	4618      	mov	r0, r3
 8012870:	3720      	adds	r7, #32
 8012872:	46bd      	mov	sp, r7
 8012874:	bd80      	pop	{r7, pc}
	...

08012878 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012878:	b480      	push	{r7}
 801287a:	b087      	sub	sp, #28
 801287c:	af00      	add	r7, sp, #0
 801287e:	60f8      	str	r0, [r7, #12]
 8012880:	60b9      	str	r1, [r7, #8]
 8012882:	4613      	mov	r3, r2
 8012884:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8012886:	2301      	movs	r3, #1
 8012888:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801288a:	2300      	movs	r3, #0
 801288c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801288e:	4b1f      	ldr	r3, [pc, #124]	; (801290c <FATFS_LinkDriverEx+0x94>)
 8012890:	7a5b      	ldrb	r3, [r3, #9]
 8012892:	b2db      	uxtb	r3, r3
 8012894:	2b00      	cmp	r3, #0
 8012896:	d131      	bne.n	80128fc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012898:	4b1c      	ldr	r3, [pc, #112]	; (801290c <FATFS_LinkDriverEx+0x94>)
 801289a:	7a5b      	ldrb	r3, [r3, #9]
 801289c:	b2db      	uxtb	r3, r3
 801289e:	461a      	mov	r2, r3
 80128a0:	4b1a      	ldr	r3, [pc, #104]	; (801290c <FATFS_LinkDriverEx+0x94>)
 80128a2:	2100      	movs	r1, #0
 80128a4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80128a6:	4b19      	ldr	r3, [pc, #100]	; (801290c <FATFS_LinkDriverEx+0x94>)
 80128a8:	7a5b      	ldrb	r3, [r3, #9]
 80128aa:	b2db      	uxtb	r3, r3
 80128ac:	4a17      	ldr	r2, [pc, #92]	; (801290c <FATFS_LinkDriverEx+0x94>)
 80128ae:	009b      	lsls	r3, r3, #2
 80128b0:	4413      	add	r3, r2
 80128b2:	68fa      	ldr	r2, [r7, #12]
 80128b4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80128b6:	4b15      	ldr	r3, [pc, #84]	; (801290c <FATFS_LinkDriverEx+0x94>)
 80128b8:	7a5b      	ldrb	r3, [r3, #9]
 80128ba:	b2db      	uxtb	r3, r3
 80128bc:	461a      	mov	r2, r3
 80128be:	4b13      	ldr	r3, [pc, #76]	; (801290c <FATFS_LinkDriverEx+0x94>)
 80128c0:	4413      	add	r3, r2
 80128c2:	79fa      	ldrb	r2, [r7, #7]
 80128c4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80128c6:	4b11      	ldr	r3, [pc, #68]	; (801290c <FATFS_LinkDriverEx+0x94>)
 80128c8:	7a5b      	ldrb	r3, [r3, #9]
 80128ca:	b2db      	uxtb	r3, r3
 80128cc:	1c5a      	adds	r2, r3, #1
 80128ce:	b2d1      	uxtb	r1, r2
 80128d0:	4a0e      	ldr	r2, [pc, #56]	; (801290c <FATFS_LinkDriverEx+0x94>)
 80128d2:	7251      	strb	r1, [r2, #9]
 80128d4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80128d6:	7dbb      	ldrb	r3, [r7, #22]
 80128d8:	3330      	adds	r3, #48	; 0x30
 80128da:	b2da      	uxtb	r2, r3
 80128dc:	68bb      	ldr	r3, [r7, #8]
 80128de:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80128e0:	68bb      	ldr	r3, [r7, #8]
 80128e2:	3301      	adds	r3, #1
 80128e4:	223a      	movs	r2, #58	; 0x3a
 80128e6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80128e8:	68bb      	ldr	r3, [r7, #8]
 80128ea:	3302      	adds	r3, #2
 80128ec:	222f      	movs	r2, #47	; 0x2f
 80128ee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80128f0:	68bb      	ldr	r3, [r7, #8]
 80128f2:	3303      	adds	r3, #3
 80128f4:	2200      	movs	r2, #0
 80128f6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80128f8:	2300      	movs	r3, #0
 80128fa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80128fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80128fe:	4618      	mov	r0, r3
 8012900:	371c      	adds	r7, #28
 8012902:	46bd      	mov	sp, r7
 8012904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012908:	4770      	bx	lr
 801290a:	bf00      	nop
 801290c:	2003c488 	.word	0x2003c488

08012910 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012910:	b580      	push	{r7, lr}
 8012912:	b082      	sub	sp, #8
 8012914:	af00      	add	r7, sp, #0
 8012916:	6078      	str	r0, [r7, #4]
 8012918:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801291a:	2200      	movs	r2, #0
 801291c:	6839      	ldr	r1, [r7, #0]
 801291e:	6878      	ldr	r0, [r7, #4]
 8012920:	f7ff ffaa 	bl	8012878 <FATFS_LinkDriverEx>
 8012924:	4603      	mov	r3, r0
}
 8012926:	4618      	mov	r0, r3
 8012928:	3708      	adds	r7, #8
 801292a:	46bd      	mov	sp, r7
 801292c:	bd80      	pop	{r7, pc}

0801292e <__cxa_guard_acquire>:
 801292e:	6803      	ldr	r3, [r0, #0]
 8012930:	07db      	lsls	r3, r3, #31
 8012932:	d406      	bmi.n	8012942 <__cxa_guard_acquire+0x14>
 8012934:	7843      	ldrb	r3, [r0, #1]
 8012936:	b103      	cbz	r3, 801293a <__cxa_guard_acquire+0xc>
 8012938:	deff      	udf	#255	; 0xff
 801293a:	2301      	movs	r3, #1
 801293c:	7043      	strb	r3, [r0, #1]
 801293e:	4618      	mov	r0, r3
 8012940:	4770      	bx	lr
 8012942:	2000      	movs	r0, #0
 8012944:	4770      	bx	lr

08012946 <__cxa_guard_release>:
 8012946:	2301      	movs	r3, #1
 8012948:	6003      	str	r3, [r0, #0]
 801294a:	4770      	bx	lr
 801294c:	0000      	movs	r0, r0
	...

08012950 <cos>:
 8012950:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012952:	ec51 0b10 	vmov	r0, r1, d0
 8012956:	4a1e      	ldr	r2, [pc, #120]	; (80129d0 <cos+0x80>)
 8012958:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801295c:	4293      	cmp	r3, r2
 801295e:	dc06      	bgt.n	801296e <cos+0x1e>
 8012960:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80129c8 <cos+0x78>
 8012964:	f000 fa74 	bl	8012e50 <__kernel_cos>
 8012968:	ec51 0b10 	vmov	r0, r1, d0
 801296c:	e007      	b.n	801297e <cos+0x2e>
 801296e:	4a19      	ldr	r2, [pc, #100]	; (80129d4 <cos+0x84>)
 8012970:	4293      	cmp	r3, r2
 8012972:	dd09      	ble.n	8012988 <cos+0x38>
 8012974:	ee10 2a10 	vmov	r2, s0
 8012978:	460b      	mov	r3, r1
 801297a:	f7ed fc9d 	bl	80002b8 <__aeabi_dsub>
 801297e:	ec41 0b10 	vmov	d0, r0, r1
 8012982:	b005      	add	sp, #20
 8012984:	f85d fb04 	ldr.w	pc, [sp], #4
 8012988:	4668      	mov	r0, sp
 801298a:	f000 f86d 	bl	8012a68 <__ieee754_rem_pio2>
 801298e:	f000 0003 	and.w	r0, r0, #3
 8012992:	2801      	cmp	r0, #1
 8012994:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012998:	ed9d 0b00 	vldr	d0, [sp]
 801299c:	d007      	beq.n	80129ae <cos+0x5e>
 801299e:	2802      	cmp	r0, #2
 80129a0:	d00e      	beq.n	80129c0 <cos+0x70>
 80129a2:	2800      	cmp	r0, #0
 80129a4:	d0de      	beq.n	8012964 <cos+0x14>
 80129a6:	2001      	movs	r0, #1
 80129a8:	f000 fe5a 	bl	8013660 <__kernel_sin>
 80129ac:	e7dc      	b.n	8012968 <cos+0x18>
 80129ae:	f000 fe57 	bl	8013660 <__kernel_sin>
 80129b2:	ec53 2b10 	vmov	r2, r3, d0
 80129b6:	ee10 0a10 	vmov	r0, s0
 80129ba:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80129be:	e7de      	b.n	801297e <cos+0x2e>
 80129c0:	f000 fa46 	bl	8012e50 <__kernel_cos>
 80129c4:	e7f5      	b.n	80129b2 <cos+0x62>
 80129c6:	bf00      	nop
	...
 80129d0:	3fe921fb 	.word	0x3fe921fb
 80129d4:	7fefffff 	.word	0x7fefffff

080129d8 <sin>:
 80129d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80129da:	ec51 0b10 	vmov	r0, r1, d0
 80129de:	4a20      	ldr	r2, [pc, #128]	; (8012a60 <sin+0x88>)
 80129e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80129e4:	4293      	cmp	r3, r2
 80129e6:	dc07      	bgt.n	80129f8 <sin+0x20>
 80129e8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8012a58 <sin+0x80>
 80129ec:	2000      	movs	r0, #0
 80129ee:	f000 fe37 	bl	8013660 <__kernel_sin>
 80129f2:	ec51 0b10 	vmov	r0, r1, d0
 80129f6:	e007      	b.n	8012a08 <sin+0x30>
 80129f8:	4a1a      	ldr	r2, [pc, #104]	; (8012a64 <sin+0x8c>)
 80129fa:	4293      	cmp	r3, r2
 80129fc:	dd09      	ble.n	8012a12 <sin+0x3a>
 80129fe:	ee10 2a10 	vmov	r2, s0
 8012a02:	460b      	mov	r3, r1
 8012a04:	f7ed fc58 	bl	80002b8 <__aeabi_dsub>
 8012a08:	ec41 0b10 	vmov	d0, r0, r1
 8012a0c:	b005      	add	sp, #20
 8012a0e:	f85d fb04 	ldr.w	pc, [sp], #4
 8012a12:	4668      	mov	r0, sp
 8012a14:	f000 f828 	bl	8012a68 <__ieee754_rem_pio2>
 8012a18:	f000 0003 	and.w	r0, r0, #3
 8012a1c:	2801      	cmp	r0, #1
 8012a1e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012a22:	ed9d 0b00 	vldr	d0, [sp]
 8012a26:	d004      	beq.n	8012a32 <sin+0x5a>
 8012a28:	2802      	cmp	r0, #2
 8012a2a:	d005      	beq.n	8012a38 <sin+0x60>
 8012a2c:	b970      	cbnz	r0, 8012a4c <sin+0x74>
 8012a2e:	2001      	movs	r0, #1
 8012a30:	e7dd      	b.n	80129ee <sin+0x16>
 8012a32:	f000 fa0d 	bl	8012e50 <__kernel_cos>
 8012a36:	e7dc      	b.n	80129f2 <sin+0x1a>
 8012a38:	2001      	movs	r0, #1
 8012a3a:	f000 fe11 	bl	8013660 <__kernel_sin>
 8012a3e:	ec53 2b10 	vmov	r2, r3, d0
 8012a42:	ee10 0a10 	vmov	r0, s0
 8012a46:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8012a4a:	e7dd      	b.n	8012a08 <sin+0x30>
 8012a4c:	f000 fa00 	bl	8012e50 <__kernel_cos>
 8012a50:	e7f5      	b.n	8012a3e <sin+0x66>
 8012a52:	bf00      	nop
 8012a54:	f3af 8000 	nop.w
	...
 8012a60:	3fe921fb 	.word	0x3fe921fb
 8012a64:	7fefffff 	.word	0x7fefffff

08012a68 <__ieee754_rem_pio2>:
 8012a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a6c:	ec57 6b10 	vmov	r6, r7, d0
 8012a70:	4bc3      	ldr	r3, [pc, #780]	; (8012d80 <__ieee754_rem_pio2+0x318>)
 8012a72:	b08d      	sub	sp, #52	; 0x34
 8012a74:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8012a78:	4598      	cmp	r8, r3
 8012a7a:	4604      	mov	r4, r0
 8012a7c:	9704      	str	r7, [sp, #16]
 8012a7e:	dc07      	bgt.n	8012a90 <__ieee754_rem_pio2+0x28>
 8012a80:	2200      	movs	r2, #0
 8012a82:	2300      	movs	r3, #0
 8012a84:	ed84 0b00 	vstr	d0, [r4]
 8012a88:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8012a8c:	2500      	movs	r5, #0
 8012a8e:	e027      	b.n	8012ae0 <__ieee754_rem_pio2+0x78>
 8012a90:	4bbc      	ldr	r3, [pc, #752]	; (8012d84 <__ieee754_rem_pio2+0x31c>)
 8012a92:	4598      	cmp	r8, r3
 8012a94:	dc75      	bgt.n	8012b82 <__ieee754_rem_pio2+0x11a>
 8012a96:	9b04      	ldr	r3, [sp, #16]
 8012a98:	4dbb      	ldr	r5, [pc, #748]	; (8012d88 <__ieee754_rem_pio2+0x320>)
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	ee10 0a10 	vmov	r0, s0
 8012aa0:	a3a9      	add	r3, pc, #676	; (adr r3, 8012d48 <__ieee754_rem_pio2+0x2e0>)
 8012aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aa6:	4639      	mov	r1, r7
 8012aa8:	dd36      	ble.n	8012b18 <__ieee754_rem_pio2+0xb0>
 8012aaa:	f7ed fc05 	bl	80002b8 <__aeabi_dsub>
 8012aae:	45a8      	cmp	r8, r5
 8012ab0:	4606      	mov	r6, r0
 8012ab2:	460f      	mov	r7, r1
 8012ab4:	d018      	beq.n	8012ae8 <__ieee754_rem_pio2+0x80>
 8012ab6:	a3a6      	add	r3, pc, #664	; (adr r3, 8012d50 <__ieee754_rem_pio2+0x2e8>)
 8012ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012abc:	f7ed fbfc 	bl	80002b8 <__aeabi_dsub>
 8012ac0:	4602      	mov	r2, r0
 8012ac2:	460b      	mov	r3, r1
 8012ac4:	e9c4 2300 	strd	r2, r3, [r4]
 8012ac8:	4630      	mov	r0, r6
 8012aca:	4639      	mov	r1, r7
 8012acc:	f7ed fbf4 	bl	80002b8 <__aeabi_dsub>
 8012ad0:	a39f      	add	r3, pc, #636	; (adr r3, 8012d50 <__ieee754_rem_pio2+0x2e8>)
 8012ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ad6:	f7ed fbef 	bl	80002b8 <__aeabi_dsub>
 8012ada:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012ade:	2501      	movs	r5, #1
 8012ae0:	4628      	mov	r0, r5
 8012ae2:	b00d      	add	sp, #52	; 0x34
 8012ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ae8:	a39b      	add	r3, pc, #620	; (adr r3, 8012d58 <__ieee754_rem_pio2+0x2f0>)
 8012aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aee:	f7ed fbe3 	bl	80002b8 <__aeabi_dsub>
 8012af2:	a39b      	add	r3, pc, #620	; (adr r3, 8012d60 <__ieee754_rem_pio2+0x2f8>)
 8012af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012af8:	4606      	mov	r6, r0
 8012afa:	460f      	mov	r7, r1
 8012afc:	f7ed fbdc 	bl	80002b8 <__aeabi_dsub>
 8012b00:	4602      	mov	r2, r0
 8012b02:	460b      	mov	r3, r1
 8012b04:	e9c4 2300 	strd	r2, r3, [r4]
 8012b08:	4630      	mov	r0, r6
 8012b0a:	4639      	mov	r1, r7
 8012b0c:	f7ed fbd4 	bl	80002b8 <__aeabi_dsub>
 8012b10:	a393      	add	r3, pc, #588	; (adr r3, 8012d60 <__ieee754_rem_pio2+0x2f8>)
 8012b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b16:	e7de      	b.n	8012ad6 <__ieee754_rem_pio2+0x6e>
 8012b18:	f7ed fbd0 	bl	80002bc <__adddf3>
 8012b1c:	45a8      	cmp	r8, r5
 8012b1e:	4606      	mov	r6, r0
 8012b20:	460f      	mov	r7, r1
 8012b22:	d016      	beq.n	8012b52 <__ieee754_rem_pio2+0xea>
 8012b24:	a38a      	add	r3, pc, #552	; (adr r3, 8012d50 <__ieee754_rem_pio2+0x2e8>)
 8012b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b2a:	f7ed fbc7 	bl	80002bc <__adddf3>
 8012b2e:	4602      	mov	r2, r0
 8012b30:	460b      	mov	r3, r1
 8012b32:	e9c4 2300 	strd	r2, r3, [r4]
 8012b36:	4630      	mov	r0, r6
 8012b38:	4639      	mov	r1, r7
 8012b3a:	f7ed fbbd 	bl	80002b8 <__aeabi_dsub>
 8012b3e:	a384      	add	r3, pc, #528	; (adr r3, 8012d50 <__ieee754_rem_pio2+0x2e8>)
 8012b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b44:	f7ed fbba 	bl	80002bc <__adddf3>
 8012b48:	f04f 35ff 	mov.w	r5, #4294967295
 8012b4c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012b50:	e7c6      	b.n	8012ae0 <__ieee754_rem_pio2+0x78>
 8012b52:	a381      	add	r3, pc, #516	; (adr r3, 8012d58 <__ieee754_rem_pio2+0x2f0>)
 8012b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b58:	f7ed fbb0 	bl	80002bc <__adddf3>
 8012b5c:	a380      	add	r3, pc, #512	; (adr r3, 8012d60 <__ieee754_rem_pio2+0x2f8>)
 8012b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b62:	4606      	mov	r6, r0
 8012b64:	460f      	mov	r7, r1
 8012b66:	f7ed fba9 	bl	80002bc <__adddf3>
 8012b6a:	4602      	mov	r2, r0
 8012b6c:	460b      	mov	r3, r1
 8012b6e:	e9c4 2300 	strd	r2, r3, [r4]
 8012b72:	4630      	mov	r0, r6
 8012b74:	4639      	mov	r1, r7
 8012b76:	f7ed fb9f 	bl	80002b8 <__aeabi_dsub>
 8012b7a:	a379      	add	r3, pc, #484	; (adr r3, 8012d60 <__ieee754_rem_pio2+0x2f8>)
 8012b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b80:	e7e0      	b.n	8012b44 <__ieee754_rem_pio2+0xdc>
 8012b82:	4b82      	ldr	r3, [pc, #520]	; (8012d8c <__ieee754_rem_pio2+0x324>)
 8012b84:	4598      	cmp	r8, r3
 8012b86:	f300 80d0 	bgt.w	8012d2a <__ieee754_rem_pio2+0x2c2>
 8012b8a:	f000 fe23 	bl	80137d4 <fabs>
 8012b8e:	ec57 6b10 	vmov	r6, r7, d0
 8012b92:	ee10 0a10 	vmov	r0, s0
 8012b96:	a374      	add	r3, pc, #464	; (adr r3, 8012d68 <__ieee754_rem_pio2+0x300>)
 8012b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b9c:	4639      	mov	r1, r7
 8012b9e:	f7ed fd43 	bl	8000628 <__aeabi_dmul>
 8012ba2:	2200      	movs	r2, #0
 8012ba4:	4b7a      	ldr	r3, [pc, #488]	; (8012d90 <__ieee754_rem_pio2+0x328>)
 8012ba6:	f7ed fb89 	bl	80002bc <__adddf3>
 8012baa:	f7ed ffed 	bl	8000b88 <__aeabi_d2iz>
 8012bae:	4605      	mov	r5, r0
 8012bb0:	f7ed fcd0 	bl	8000554 <__aeabi_i2d>
 8012bb4:	a364      	add	r3, pc, #400	; (adr r3, 8012d48 <__ieee754_rem_pio2+0x2e0>)
 8012bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012bbe:	f7ed fd33 	bl	8000628 <__aeabi_dmul>
 8012bc2:	4602      	mov	r2, r0
 8012bc4:	460b      	mov	r3, r1
 8012bc6:	4630      	mov	r0, r6
 8012bc8:	4639      	mov	r1, r7
 8012bca:	f7ed fb75 	bl	80002b8 <__aeabi_dsub>
 8012bce:	a360      	add	r3, pc, #384	; (adr r3, 8012d50 <__ieee754_rem_pio2+0x2e8>)
 8012bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bd4:	4682      	mov	sl, r0
 8012bd6:	468b      	mov	fp, r1
 8012bd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012bdc:	f7ed fd24 	bl	8000628 <__aeabi_dmul>
 8012be0:	2d1f      	cmp	r5, #31
 8012be2:	4606      	mov	r6, r0
 8012be4:	460f      	mov	r7, r1
 8012be6:	dc0c      	bgt.n	8012c02 <__ieee754_rem_pio2+0x19a>
 8012be8:	1e6a      	subs	r2, r5, #1
 8012bea:	4b6a      	ldr	r3, [pc, #424]	; (8012d94 <__ieee754_rem_pio2+0x32c>)
 8012bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012bf0:	4543      	cmp	r3, r8
 8012bf2:	d006      	beq.n	8012c02 <__ieee754_rem_pio2+0x19a>
 8012bf4:	4632      	mov	r2, r6
 8012bf6:	463b      	mov	r3, r7
 8012bf8:	4650      	mov	r0, sl
 8012bfa:	4659      	mov	r1, fp
 8012bfc:	f7ed fb5c 	bl	80002b8 <__aeabi_dsub>
 8012c00:	e00e      	b.n	8012c20 <__ieee754_rem_pio2+0x1b8>
 8012c02:	4632      	mov	r2, r6
 8012c04:	463b      	mov	r3, r7
 8012c06:	4650      	mov	r0, sl
 8012c08:	4659      	mov	r1, fp
 8012c0a:	f7ed fb55 	bl	80002b8 <__aeabi_dsub>
 8012c0e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012c12:	9305      	str	r3, [sp, #20]
 8012c14:	9a05      	ldr	r2, [sp, #20]
 8012c16:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012c1a:	1ad3      	subs	r3, r2, r3
 8012c1c:	2b10      	cmp	r3, #16
 8012c1e:	dc02      	bgt.n	8012c26 <__ieee754_rem_pio2+0x1be>
 8012c20:	e9c4 0100 	strd	r0, r1, [r4]
 8012c24:	e039      	b.n	8012c9a <__ieee754_rem_pio2+0x232>
 8012c26:	a34c      	add	r3, pc, #304	; (adr r3, 8012d58 <__ieee754_rem_pio2+0x2f0>)
 8012c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012c30:	f7ed fcfa 	bl	8000628 <__aeabi_dmul>
 8012c34:	4606      	mov	r6, r0
 8012c36:	460f      	mov	r7, r1
 8012c38:	4602      	mov	r2, r0
 8012c3a:	460b      	mov	r3, r1
 8012c3c:	4650      	mov	r0, sl
 8012c3e:	4659      	mov	r1, fp
 8012c40:	f7ed fb3a 	bl	80002b8 <__aeabi_dsub>
 8012c44:	4602      	mov	r2, r0
 8012c46:	460b      	mov	r3, r1
 8012c48:	4680      	mov	r8, r0
 8012c4a:	4689      	mov	r9, r1
 8012c4c:	4650      	mov	r0, sl
 8012c4e:	4659      	mov	r1, fp
 8012c50:	f7ed fb32 	bl	80002b8 <__aeabi_dsub>
 8012c54:	4632      	mov	r2, r6
 8012c56:	463b      	mov	r3, r7
 8012c58:	f7ed fb2e 	bl	80002b8 <__aeabi_dsub>
 8012c5c:	a340      	add	r3, pc, #256	; (adr r3, 8012d60 <__ieee754_rem_pio2+0x2f8>)
 8012c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c62:	4606      	mov	r6, r0
 8012c64:	460f      	mov	r7, r1
 8012c66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012c6a:	f7ed fcdd 	bl	8000628 <__aeabi_dmul>
 8012c6e:	4632      	mov	r2, r6
 8012c70:	463b      	mov	r3, r7
 8012c72:	f7ed fb21 	bl	80002b8 <__aeabi_dsub>
 8012c76:	4602      	mov	r2, r0
 8012c78:	460b      	mov	r3, r1
 8012c7a:	4606      	mov	r6, r0
 8012c7c:	460f      	mov	r7, r1
 8012c7e:	4640      	mov	r0, r8
 8012c80:	4649      	mov	r1, r9
 8012c82:	f7ed fb19 	bl	80002b8 <__aeabi_dsub>
 8012c86:	9a05      	ldr	r2, [sp, #20]
 8012c88:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012c8c:	1ad3      	subs	r3, r2, r3
 8012c8e:	2b31      	cmp	r3, #49	; 0x31
 8012c90:	dc20      	bgt.n	8012cd4 <__ieee754_rem_pio2+0x26c>
 8012c92:	e9c4 0100 	strd	r0, r1, [r4]
 8012c96:	46c2      	mov	sl, r8
 8012c98:	46cb      	mov	fp, r9
 8012c9a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8012c9e:	4650      	mov	r0, sl
 8012ca0:	4642      	mov	r2, r8
 8012ca2:	464b      	mov	r3, r9
 8012ca4:	4659      	mov	r1, fp
 8012ca6:	f7ed fb07 	bl	80002b8 <__aeabi_dsub>
 8012caa:	463b      	mov	r3, r7
 8012cac:	4632      	mov	r2, r6
 8012cae:	f7ed fb03 	bl	80002b8 <__aeabi_dsub>
 8012cb2:	9b04      	ldr	r3, [sp, #16]
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012cba:	f6bf af11 	bge.w	8012ae0 <__ieee754_rem_pio2+0x78>
 8012cbe:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8012cc2:	6063      	str	r3, [r4, #4]
 8012cc4:	f8c4 8000 	str.w	r8, [r4]
 8012cc8:	60a0      	str	r0, [r4, #8]
 8012cca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012cce:	60e3      	str	r3, [r4, #12]
 8012cd0:	426d      	negs	r5, r5
 8012cd2:	e705      	b.n	8012ae0 <__ieee754_rem_pio2+0x78>
 8012cd4:	a326      	add	r3, pc, #152	; (adr r3, 8012d70 <__ieee754_rem_pio2+0x308>)
 8012cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012cde:	f7ed fca3 	bl	8000628 <__aeabi_dmul>
 8012ce2:	4606      	mov	r6, r0
 8012ce4:	460f      	mov	r7, r1
 8012ce6:	4602      	mov	r2, r0
 8012ce8:	460b      	mov	r3, r1
 8012cea:	4640      	mov	r0, r8
 8012cec:	4649      	mov	r1, r9
 8012cee:	f7ed fae3 	bl	80002b8 <__aeabi_dsub>
 8012cf2:	4602      	mov	r2, r0
 8012cf4:	460b      	mov	r3, r1
 8012cf6:	4682      	mov	sl, r0
 8012cf8:	468b      	mov	fp, r1
 8012cfa:	4640      	mov	r0, r8
 8012cfc:	4649      	mov	r1, r9
 8012cfe:	f7ed fadb 	bl	80002b8 <__aeabi_dsub>
 8012d02:	4632      	mov	r2, r6
 8012d04:	463b      	mov	r3, r7
 8012d06:	f7ed fad7 	bl	80002b8 <__aeabi_dsub>
 8012d0a:	a31b      	add	r3, pc, #108	; (adr r3, 8012d78 <__ieee754_rem_pio2+0x310>)
 8012d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d10:	4606      	mov	r6, r0
 8012d12:	460f      	mov	r7, r1
 8012d14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012d18:	f7ed fc86 	bl	8000628 <__aeabi_dmul>
 8012d1c:	4632      	mov	r2, r6
 8012d1e:	463b      	mov	r3, r7
 8012d20:	f7ed faca 	bl	80002b8 <__aeabi_dsub>
 8012d24:	4606      	mov	r6, r0
 8012d26:	460f      	mov	r7, r1
 8012d28:	e764      	b.n	8012bf4 <__ieee754_rem_pio2+0x18c>
 8012d2a:	4b1b      	ldr	r3, [pc, #108]	; (8012d98 <__ieee754_rem_pio2+0x330>)
 8012d2c:	4598      	cmp	r8, r3
 8012d2e:	dd35      	ble.n	8012d9c <__ieee754_rem_pio2+0x334>
 8012d30:	ee10 2a10 	vmov	r2, s0
 8012d34:	463b      	mov	r3, r7
 8012d36:	4630      	mov	r0, r6
 8012d38:	4639      	mov	r1, r7
 8012d3a:	f7ed fabd 	bl	80002b8 <__aeabi_dsub>
 8012d3e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012d42:	e9c4 0100 	strd	r0, r1, [r4]
 8012d46:	e6a1      	b.n	8012a8c <__ieee754_rem_pio2+0x24>
 8012d48:	54400000 	.word	0x54400000
 8012d4c:	3ff921fb 	.word	0x3ff921fb
 8012d50:	1a626331 	.word	0x1a626331
 8012d54:	3dd0b461 	.word	0x3dd0b461
 8012d58:	1a600000 	.word	0x1a600000
 8012d5c:	3dd0b461 	.word	0x3dd0b461
 8012d60:	2e037073 	.word	0x2e037073
 8012d64:	3ba3198a 	.word	0x3ba3198a
 8012d68:	6dc9c883 	.word	0x6dc9c883
 8012d6c:	3fe45f30 	.word	0x3fe45f30
 8012d70:	2e000000 	.word	0x2e000000
 8012d74:	3ba3198a 	.word	0x3ba3198a
 8012d78:	252049c1 	.word	0x252049c1
 8012d7c:	397b839a 	.word	0x397b839a
 8012d80:	3fe921fb 	.word	0x3fe921fb
 8012d84:	4002d97b 	.word	0x4002d97b
 8012d88:	3ff921fb 	.word	0x3ff921fb
 8012d8c:	413921fb 	.word	0x413921fb
 8012d90:	3fe00000 	.word	0x3fe00000
 8012d94:	0801841c 	.word	0x0801841c
 8012d98:	7fefffff 	.word	0x7fefffff
 8012d9c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8012da0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8012da4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8012da8:	4630      	mov	r0, r6
 8012daa:	460f      	mov	r7, r1
 8012dac:	f7ed feec 	bl	8000b88 <__aeabi_d2iz>
 8012db0:	f7ed fbd0 	bl	8000554 <__aeabi_i2d>
 8012db4:	4602      	mov	r2, r0
 8012db6:	460b      	mov	r3, r1
 8012db8:	4630      	mov	r0, r6
 8012dba:	4639      	mov	r1, r7
 8012dbc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012dc0:	f7ed fa7a 	bl	80002b8 <__aeabi_dsub>
 8012dc4:	2200      	movs	r2, #0
 8012dc6:	4b1f      	ldr	r3, [pc, #124]	; (8012e44 <__ieee754_rem_pio2+0x3dc>)
 8012dc8:	f7ed fc2e 	bl	8000628 <__aeabi_dmul>
 8012dcc:	460f      	mov	r7, r1
 8012dce:	4606      	mov	r6, r0
 8012dd0:	f7ed feda 	bl	8000b88 <__aeabi_d2iz>
 8012dd4:	f7ed fbbe 	bl	8000554 <__aeabi_i2d>
 8012dd8:	4602      	mov	r2, r0
 8012dda:	460b      	mov	r3, r1
 8012ddc:	4630      	mov	r0, r6
 8012dde:	4639      	mov	r1, r7
 8012de0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012de4:	f7ed fa68 	bl	80002b8 <__aeabi_dsub>
 8012de8:	2200      	movs	r2, #0
 8012dea:	4b16      	ldr	r3, [pc, #88]	; (8012e44 <__ieee754_rem_pio2+0x3dc>)
 8012dec:	f7ed fc1c 	bl	8000628 <__aeabi_dmul>
 8012df0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8012df4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8012df8:	f04f 0803 	mov.w	r8, #3
 8012dfc:	2600      	movs	r6, #0
 8012dfe:	2700      	movs	r7, #0
 8012e00:	4632      	mov	r2, r6
 8012e02:	463b      	mov	r3, r7
 8012e04:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8012e08:	f108 3aff 	add.w	sl, r8, #4294967295
 8012e0c:	f7ed fe74 	bl	8000af8 <__aeabi_dcmpeq>
 8012e10:	b9b0      	cbnz	r0, 8012e40 <__ieee754_rem_pio2+0x3d8>
 8012e12:	4b0d      	ldr	r3, [pc, #52]	; (8012e48 <__ieee754_rem_pio2+0x3e0>)
 8012e14:	9301      	str	r3, [sp, #4]
 8012e16:	2302      	movs	r3, #2
 8012e18:	9300      	str	r3, [sp, #0]
 8012e1a:	462a      	mov	r2, r5
 8012e1c:	4643      	mov	r3, r8
 8012e1e:	4621      	mov	r1, r4
 8012e20:	a806      	add	r0, sp, #24
 8012e22:	f000 f8dd 	bl	8012fe0 <__kernel_rem_pio2>
 8012e26:	9b04      	ldr	r3, [sp, #16]
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	4605      	mov	r5, r0
 8012e2c:	f6bf ae58 	bge.w	8012ae0 <__ieee754_rem_pio2+0x78>
 8012e30:	6863      	ldr	r3, [r4, #4]
 8012e32:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012e36:	6063      	str	r3, [r4, #4]
 8012e38:	68e3      	ldr	r3, [r4, #12]
 8012e3a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012e3e:	e746      	b.n	8012cce <__ieee754_rem_pio2+0x266>
 8012e40:	46d0      	mov	r8, sl
 8012e42:	e7dd      	b.n	8012e00 <__ieee754_rem_pio2+0x398>
 8012e44:	41700000 	.word	0x41700000
 8012e48:	0801849c 	.word	0x0801849c
 8012e4c:	00000000 	.word	0x00000000

08012e50 <__kernel_cos>:
 8012e50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e54:	ec59 8b10 	vmov	r8, r9, d0
 8012e58:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8012e5c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8012e60:	ed2d 8b02 	vpush	{d8}
 8012e64:	eeb0 8a41 	vmov.f32	s16, s2
 8012e68:	eef0 8a61 	vmov.f32	s17, s3
 8012e6c:	da07      	bge.n	8012e7e <__kernel_cos+0x2e>
 8012e6e:	ee10 0a10 	vmov	r0, s0
 8012e72:	4649      	mov	r1, r9
 8012e74:	f7ed fe88 	bl	8000b88 <__aeabi_d2iz>
 8012e78:	2800      	cmp	r0, #0
 8012e7a:	f000 8089 	beq.w	8012f90 <__kernel_cos+0x140>
 8012e7e:	4642      	mov	r2, r8
 8012e80:	464b      	mov	r3, r9
 8012e82:	4640      	mov	r0, r8
 8012e84:	4649      	mov	r1, r9
 8012e86:	f7ed fbcf 	bl	8000628 <__aeabi_dmul>
 8012e8a:	2200      	movs	r2, #0
 8012e8c:	4b4e      	ldr	r3, [pc, #312]	; (8012fc8 <__kernel_cos+0x178>)
 8012e8e:	4604      	mov	r4, r0
 8012e90:	460d      	mov	r5, r1
 8012e92:	f7ed fbc9 	bl	8000628 <__aeabi_dmul>
 8012e96:	a340      	add	r3, pc, #256	; (adr r3, 8012f98 <__kernel_cos+0x148>)
 8012e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e9c:	4682      	mov	sl, r0
 8012e9e:	468b      	mov	fp, r1
 8012ea0:	4620      	mov	r0, r4
 8012ea2:	4629      	mov	r1, r5
 8012ea4:	f7ed fbc0 	bl	8000628 <__aeabi_dmul>
 8012ea8:	a33d      	add	r3, pc, #244	; (adr r3, 8012fa0 <__kernel_cos+0x150>)
 8012eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eae:	f7ed fa05 	bl	80002bc <__adddf3>
 8012eb2:	4622      	mov	r2, r4
 8012eb4:	462b      	mov	r3, r5
 8012eb6:	f7ed fbb7 	bl	8000628 <__aeabi_dmul>
 8012eba:	a33b      	add	r3, pc, #236	; (adr r3, 8012fa8 <__kernel_cos+0x158>)
 8012ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ec0:	f7ed f9fa 	bl	80002b8 <__aeabi_dsub>
 8012ec4:	4622      	mov	r2, r4
 8012ec6:	462b      	mov	r3, r5
 8012ec8:	f7ed fbae 	bl	8000628 <__aeabi_dmul>
 8012ecc:	a338      	add	r3, pc, #224	; (adr r3, 8012fb0 <__kernel_cos+0x160>)
 8012ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ed2:	f7ed f9f3 	bl	80002bc <__adddf3>
 8012ed6:	4622      	mov	r2, r4
 8012ed8:	462b      	mov	r3, r5
 8012eda:	f7ed fba5 	bl	8000628 <__aeabi_dmul>
 8012ede:	a336      	add	r3, pc, #216	; (adr r3, 8012fb8 <__kernel_cos+0x168>)
 8012ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ee4:	f7ed f9e8 	bl	80002b8 <__aeabi_dsub>
 8012ee8:	4622      	mov	r2, r4
 8012eea:	462b      	mov	r3, r5
 8012eec:	f7ed fb9c 	bl	8000628 <__aeabi_dmul>
 8012ef0:	a333      	add	r3, pc, #204	; (adr r3, 8012fc0 <__kernel_cos+0x170>)
 8012ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ef6:	f7ed f9e1 	bl	80002bc <__adddf3>
 8012efa:	4622      	mov	r2, r4
 8012efc:	462b      	mov	r3, r5
 8012efe:	f7ed fb93 	bl	8000628 <__aeabi_dmul>
 8012f02:	4622      	mov	r2, r4
 8012f04:	462b      	mov	r3, r5
 8012f06:	f7ed fb8f 	bl	8000628 <__aeabi_dmul>
 8012f0a:	ec53 2b18 	vmov	r2, r3, d8
 8012f0e:	4604      	mov	r4, r0
 8012f10:	460d      	mov	r5, r1
 8012f12:	4640      	mov	r0, r8
 8012f14:	4649      	mov	r1, r9
 8012f16:	f7ed fb87 	bl	8000628 <__aeabi_dmul>
 8012f1a:	460b      	mov	r3, r1
 8012f1c:	4602      	mov	r2, r0
 8012f1e:	4629      	mov	r1, r5
 8012f20:	4620      	mov	r0, r4
 8012f22:	f7ed f9c9 	bl	80002b8 <__aeabi_dsub>
 8012f26:	4b29      	ldr	r3, [pc, #164]	; (8012fcc <__kernel_cos+0x17c>)
 8012f28:	429e      	cmp	r6, r3
 8012f2a:	4680      	mov	r8, r0
 8012f2c:	4689      	mov	r9, r1
 8012f2e:	dc11      	bgt.n	8012f54 <__kernel_cos+0x104>
 8012f30:	4602      	mov	r2, r0
 8012f32:	460b      	mov	r3, r1
 8012f34:	4650      	mov	r0, sl
 8012f36:	4659      	mov	r1, fp
 8012f38:	f7ed f9be 	bl	80002b8 <__aeabi_dsub>
 8012f3c:	460b      	mov	r3, r1
 8012f3e:	4924      	ldr	r1, [pc, #144]	; (8012fd0 <__kernel_cos+0x180>)
 8012f40:	4602      	mov	r2, r0
 8012f42:	2000      	movs	r0, #0
 8012f44:	f7ed f9b8 	bl	80002b8 <__aeabi_dsub>
 8012f48:	ecbd 8b02 	vpop	{d8}
 8012f4c:	ec41 0b10 	vmov	d0, r0, r1
 8012f50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f54:	4b1f      	ldr	r3, [pc, #124]	; (8012fd4 <__kernel_cos+0x184>)
 8012f56:	491e      	ldr	r1, [pc, #120]	; (8012fd0 <__kernel_cos+0x180>)
 8012f58:	429e      	cmp	r6, r3
 8012f5a:	bfcc      	ite	gt
 8012f5c:	4d1e      	ldrgt	r5, [pc, #120]	; (8012fd8 <__kernel_cos+0x188>)
 8012f5e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8012f62:	2400      	movs	r4, #0
 8012f64:	4622      	mov	r2, r4
 8012f66:	462b      	mov	r3, r5
 8012f68:	2000      	movs	r0, #0
 8012f6a:	f7ed f9a5 	bl	80002b8 <__aeabi_dsub>
 8012f6e:	4622      	mov	r2, r4
 8012f70:	4606      	mov	r6, r0
 8012f72:	460f      	mov	r7, r1
 8012f74:	462b      	mov	r3, r5
 8012f76:	4650      	mov	r0, sl
 8012f78:	4659      	mov	r1, fp
 8012f7a:	f7ed f99d 	bl	80002b8 <__aeabi_dsub>
 8012f7e:	4642      	mov	r2, r8
 8012f80:	464b      	mov	r3, r9
 8012f82:	f7ed f999 	bl	80002b8 <__aeabi_dsub>
 8012f86:	4602      	mov	r2, r0
 8012f88:	460b      	mov	r3, r1
 8012f8a:	4630      	mov	r0, r6
 8012f8c:	4639      	mov	r1, r7
 8012f8e:	e7d9      	b.n	8012f44 <__kernel_cos+0xf4>
 8012f90:	2000      	movs	r0, #0
 8012f92:	490f      	ldr	r1, [pc, #60]	; (8012fd0 <__kernel_cos+0x180>)
 8012f94:	e7d8      	b.n	8012f48 <__kernel_cos+0xf8>
 8012f96:	bf00      	nop
 8012f98:	be8838d4 	.word	0xbe8838d4
 8012f9c:	bda8fae9 	.word	0xbda8fae9
 8012fa0:	bdb4b1c4 	.word	0xbdb4b1c4
 8012fa4:	3e21ee9e 	.word	0x3e21ee9e
 8012fa8:	809c52ad 	.word	0x809c52ad
 8012fac:	3e927e4f 	.word	0x3e927e4f
 8012fb0:	19cb1590 	.word	0x19cb1590
 8012fb4:	3efa01a0 	.word	0x3efa01a0
 8012fb8:	16c15177 	.word	0x16c15177
 8012fbc:	3f56c16c 	.word	0x3f56c16c
 8012fc0:	5555554c 	.word	0x5555554c
 8012fc4:	3fa55555 	.word	0x3fa55555
 8012fc8:	3fe00000 	.word	0x3fe00000
 8012fcc:	3fd33332 	.word	0x3fd33332
 8012fd0:	3ff00000 	.word	0x3ff00000
 8012fd4:	3fe90000 	.word	0x3fe90000
 8012fd8:	3fd20000 	.word	0x3fd20000
 8012fdc:	00000000 	.word	0x00000000

08012fe0 <__kernel_rem_pio2>:
 8012fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fe4:	ed2d 8b02 	vpush	{d8}
 8012fe8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8012fec:	1ed4      	subs	r4, r2, #3
 8012fee:	9308      	str	r3, [sp, #32]
 8012ff0:	9101      	str	r1, [sp, #4]
 8012ff2:	4bc5      	ldr	r3, [pc, #788]	; (8013308 <__kernel_rem_pio2+0x328>)
 8012ff4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8012ff6:	9009      	str	r0, [sp, #36]	; 0x24
 8012ff8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012ffc:	9304      	str	r3, [sp, #16]
 8012ffe:	9b08      	ldr	r3, [sp, #32]
 8013000:	3b01      	subs	r3, #1
 8013002:	9307      	str	r3, [sp, #28]
 8013004:	2318      	movs	r3, #24
 8013006:	fb94 f4f3 	sdiv	r4, r4, r3
 801300a:	f06f 0317 	mvn.w	r3, #23
 801300e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8013012:	fb04 3303 	mla	r3, r4, r3, r3
 8013016:	eb03 0a02 	add.w	sl, r3, r2
 801301a:	9b04      	ldr	r3, [sp, #16]
 801301c:	9a07      	ldr	r2, [sp, #28]
 801301e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80132f8 <__kernel_rem_pio2+0x318>
 8013022:	eb03 0802 	add.w	r8, r3, r2
 8013026:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8013028:	1aa7      	subs	r7, r4, r2
 801302a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801302e:	ae22      	add	r6, sp, #136	; 0x88
 8013030:	2500      	movs	r5, #0
 8013032:	4545      	cmp	r5, r8
 8013034:	dd13      	ble.n	801305e <__kernel_rem_pio2+0x7e>
 8013036:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 80132f8 <__kernel_rem_pio2+0x318>
 801303a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801303e:	2600      	movs	r6, #0
 8013040:	9b04      	ldr	r3, [sp, #16]
 8013042:	429e      	cmp	r6, r3
 8013044:	dc32      	bgt.n	80130ac <__kernel_rem_pio2+0xcc>
 8013046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013048:	9302      	str	r3, [sp, #8]
 801304a:	9b08      	ldr	r3, [sp, #32]
 801304c:	199d      	adds	r5, r3, r6
 801304e:	ab22      	add	r3, sp, #136	; 0x88
 8013050:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8013054:	9306      	str	r3, [sp, #24]
 8013056:	ec59 8b18 	vmov	r8, r9, d8
 801305a:	2700      	movs	r7, #0
 801305c:	e01f      	b.n	801309e <__kernel_rem_pio2+0xbe>
 801305e:	42ef      	cmn	r7, r5
 8013060:	d407      	bmi.n	8013072 <__kernel_rem_pio2+0x92>
 8013062:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8013066:	f7ed fa75 	bl	8000554 <__aeabi_i2d>
 801306a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801306e:	3501      	adds	r5, #1
 8013070:	e7df      	b.n	8013032 <__kernel_rem_pio2+0x52>
 8013072:	ec51 0b18 	vmov	r0, r1, d8
 8013076:	e7f8      	b.n	801306a <__kernel_rem_pio2+0x8a>
 8013078:	9906      	ldr	r1, [sp, #24]
 801307a:	9d02      	ldr	r5, [sp, #8]
 801307c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8013080:	9106      	str	r1, [sp, #24]
 8013082:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8013086:	9502      	str	r5, [sp, #8]
 8013088:	f7ed face 	bl	8000628 <__aeabi_dmul>
 801308c:	4602      	mov	r2, r0
 801308e:	460b      	mov	r3, r1
 8013090:	4640      	mov	r0, r8
 8013092:	4649      	mov	r1, r9
 8013094:	f7ed f912 	bl	80002bc <__adddf3>
 8013098:	3701      	adds	r7, #1
 801309a:	4680      	mov	r8, r0
 801309c:	4689      	mov	r9, r1
 801309e:	9b07      	ldr	r3, [sp, #28]
 80130a0:	429f      	cmp	r7, r3
 80130a2:	dde9      	ble.n	8013078 <__kernel_rem_pio2+0x98>
 80130a4:	e8eb 8902 	strd	r8, r9, [fp], #8
 80130a8:	3601      	adds	r6, #1
 80130aa:	e7c9      	b.n	8013040 <__kernel_rem_pio2+0x60>
 80130ac:	9b04      	ldr	r3, [sp, #16]
 80130ae:	aa0e      	add	r2, sp, #56	; 0x38
 80130b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80130b4:	930c      	str	r3, [sp, #48]	; 0x30
 80130b6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80130b8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80130bc:	9c04      	ldr	r4, [sp, #16]
 80130be:	930b      	str	r3, [sp, #44]	; 0x2c
 80130c0:	ab9a      	add	r3, sp, #616	; 0x268
 80130c2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 80130c6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80130ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 80130ce:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80130d2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80130d6:	ab9a      	add	r3, sp, #616	; 0x268
 80130d8:	445b      	add	r3, fp
 80130da:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 80130de:	2500      	movs	r5, #0
 80130e0:	1b63      	subs	r3, r4, r5
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	dc78      	bgt.n	80131d8 <__kernel_rem_pio2+0x1f8>
 80130e6:	4650      	mov	r0, sl
 80130e8:	ec49 8b10 	vmov	d0, r8, r9
 80130ec:	f000 fc00 	bl	80138f0 <scalbn>
 80130f0:	ec57 6b10 	vmov	r6, r7, d0
 80130f4:	2200      	movs	r2, #0
 80130f6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80130fa:	ee10 0a10 	vmov	r0, s0
 80130fe:	4639      	mov	r1, r7
 8013100:	f7ed fa92 	bl	8000628 <__aeabi_dmul>
 8013104:	ec41 0b10 	vmov	d0, r0, r1
 8013108:	f000 fb6e 	bl	80137e8 <floor>
 801310c:	2200      	movs	r2, #0
 801310e:	ec51 0b10 	vmov	r0, r1, d0
 8013112:	4b7e      	ldr	r3, [pc, #504]	; (801330c <__kernel_rem_pio2+0x32c>)
 8013114:	f7ed fa88 	bl	8000628 <__aeabi_dmul>
 8013118:	4602      	mov	r2, r0
 801311a:	460b      	mov	r3, r1
 801311c:	4630      	mov	r0, r6
 801311e:	4639      	mov	r1, r7
 8013120:	f7ed f8ca 	bl	80002b8 <__aeabi_dsub>
 8013124:	460f      	mov	r7, r1
 8013126:	4606      	mov	r6, r0
 8013128:	f7ed fd2e 	bl	8000b88 <__aeabi_d2iz>
 801312c:	9006      	str	r0, [sp, #24]
 801312e:	f7ed fa11 	bl	8000554 <__aeabi_i2d>
 8013132:	4602      	mov	r2, r0
 8013134:	460b      	mov	r3, r1
 8013136:	4630      	mov	r0, r6
 8013138:	4639      	mov	r1, r7
 801313a:	f7ed f8bd 	bl	80002b8 <__aeabi_dsub>
 801313e:	f1ba 0f00 	cmp.w	sl, #0
 8013142:	4606      	mov	r6, r0
 8013144:	460f      	mov	r7, r1
 8013146:	dd6c      	ble.n	8013222 <__kernel_rem_pio2+0x242>
 8013148:	1e62      	subs	r2, r4, #1
 801314a:	ab0e      	add	r3, sp, #56	; 0x38
 801314c:	f1ca 0118 	rsb	r1, sl, #24
 8013150:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8013154:	9d06      	ldr	r5, [sp, #24]
 8013156:	fa40 f301 	asr.w	r3, r0, r1
 801315a:	441d      	add	r5, r3
 801315c:	408b      	lsls	r3, r1
 801315e:	1ac0      	subs	r0, r0, r3
 8013160:	ab0e      	add	r3, sp, #56	; 0x38
 8013162:	9506      	str	r5, [sp, #24]
 8013164:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8013168:	f1ca 0317 	rsb	r3, sl, #23
 801316c:	fa40 f303 	asr.w	r3, r0, r3
 8013170:	9302      	str	r3, [sp, #8]
 8013172:	9b02      	ldr	r3, [sp, #8]
 8013174:	2b00      	cmp	r3, #0
 8013176:	dd62      	ble.n	801323e <__kernel_rem_pio2+0x25e>
 8013178:	9b06      	ldr	r3, [sp, #24]
 801317a:	2200      	movs	r2, #0
 801317c:	3301      	adds	r3, #1
 801317e:	9306      	str	r3, [sp, #24]
 8013180:	4615      	mov	r5, r2
 8013182:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8013186:	4294      	cmp	r4, r2
 8013188:	f300 8095 	bgt.w	80132b6 <__kernel_rem_pio2+0x2d6>
 801318c:	f1ba 0f00 	cmp.w	sl, #0
 8013190:	dd07      	ble.n	80131a2 <__kernel_rem_pio2+0x1c2>
 8013192:	f1ba 0f01 	cmp.w	sl, #1
 8013196:	f000 80a2 	beq.w	80132de <__kernel_rem_pio2+0x2fe>
 801319a:	f1ba 0f02 	cmp.w	sl, #2
 801319e:	f000 80c1 	beq.w	8013324 <__kernel_rem_pio2+0x344>
 80131a2:	9b02      	ldr	r3, [sp, #8]
 80131a4:	2b02      	cmp	r3, #2
 80131a6:	d14a      	bne.n	801323e <__kernel_rem_pio2+0x25e>
 80131a8:	4632      	mov	r2, r6
 80131aa:	463b      	mov	r3, r7
 80131ac:	2000      	movs	r0, #0
 80131ae:	4958      	ldr	r1, [pc, #352]	; (8013310 <__kernel_rem_pio2+0x330>)
 80131b0:	f7ed f882 	bl	80002b8 <__aeabi_dsub>
 80131b4:	4606      	mov	r6, r0
 80131b6:	460f      	mov	r7, r1
 80131b8:	2d00      	cmp	r5, #0
 80131ba:	d040      	beq.n	801323e <__kernel_rem_pio2+0x25e>
 80131bc:	4650      	mov	r0, sl
 80131be:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8013300 <__kernel_rem_pio2+0x320>
 80131c2:	f000 fb95 	bl	80138f0 <scalbn>
 80131c6:	4630      	mov	r0, r6
 80131c8:	4639      	mov	r1, r7
 80131ca:	ec53 2b10 	vmov	r2, r3, d0
 80131ce:	f7ed f873 	bl	80002b8 <__aeabi_dsub>
 80131d2:	4606      	mov	r6, r0
 80131d4:	460f      	mov	r7, r1
 80131d6:	e032      	b.n	801323e <__kernel_rem_pio2+0x25e>
 80131d8:	2200      	movs	r2, #0
 80131da:	4b4e      	ldr	r3, [pc, #312]	; (8013314 <__kernel_rem_pio2+0x334>)
 80131dc:	4640      	mov	r0, r8
 80131de:	4649      	mov	r1, r9
 80131e0:	f7ed fa22 	bl	8000628 <__aeabi_dmul>
 80131e4:	f7ed fcd0 	bl	8000b88 <__aeabi_d2iz>
 80131e8:	f7ed f9b4 	bl	8000554 <__aeabi_i2d>
 80131ec:	2200      	movs	r2, #0
 80131ee:	4b4a      	ldr	r3, [pc, #296]	; (8013318 <__kernel_rem_pio2+0x338>)
 80131f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80131f4:	f7ed fa18 	bl	8000628 <__aeabi_dmul>
 80131f8:	4602      	mov	r2, r0
 80131fa:	460b      	mov	r3, r1
 80131fc:	4640      	mov	r0, r8
 80131fe:	4649      	mov	r1, r9
 8013200:	f7ed f85a 	bl	80002b8 <__aeabi_dsub>
 8013204:	f7ed fcc0 	bl	8000b88 <__aeabi_d2iz>
 8013208:	ab0e      	add	r3, sp, #56	; 0x38
 801320a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 801320e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8013212:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013216:	f7ed f851 	bl	80002bc <__adddf3>
 801321a:	3501      	adds	r5, #1
 801321c:	4680      	mov	r8, r0
 801321e:	4689      	mov	r9, r1
 8013220:	e75e      	b.n	80130e0 <__kernel_rem_pio2+0x100>
 8013222:	d105      	bne.n	8013230 <__kernel_rem_pio2+0x250>
 8013224:	1e63      	subs	r3, r4, #1
 8013226:	aa0e      	add	r2, sp, #56	; 0x38
 8013228:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801322c:	15c3      	asrs	r3, r0, #23
 801322e:	e79f      	b.n	8013170 <__kernel_rem_pio2+0x190>
 8013230:	2200      	movs	r2, #0
 8013232:	4b3a      	ldr	r3, [pc, #232]	; (801331c <__kernel_rem_pio2+0x33c>)
 8013234:	f7ed fc7e 	bl	8000b34 <__aeabi_dcmpge>
 8013238:	2800      	cmp	r0, #0
 801323a:	d139      	bne.n	80132b0 <__kernel_rem_pio2+0x2d0>
 801323c:	9002      	str	r0, [sp, #8]
 801323e:	2200      	movs	r2, #0
 8013240:	2300      	movs	r3, #0
 8013242:	4630      	mov	r0, r6
 8013244:	4639      	mov	r1, r7
 8013246:	f7ed fc57 	bl	8000af8 <__aeabi_dcmpeq>
 801324a:	2800      	cmp	r0, #0
 801324c:	f000 80c7 	beq.w	80133de <__kernel_rem_pio2+0x3fe>
 8013250:	1e65      	subs	r5, r4, #1
 8013252:	462b      	mov	r3, r5
 8013254:	2200      	movs	r2, #0
 8013256:	9904      	ldr	r1, [sp, #16]
 8013258:	428b      	cmp	r3, r1
 801325a:	da6a      	bge.n	8013332 <__kernel_rem_pio2+0x352>
 801325c:	2a00      	cmp	r2, #0
 801325e:	f000 8088 	beq.w	8013372 <__kernel_rem_pio2+0x392>
 8013262:	ab0e      	add	r3, sp, #56	; 0x38
 8013264:	f1aa 0a18 	sub.w	sl, sl, #24
 8013268:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801326c:	2b00      	cmp	r3, #0
 801326e:	f000 80b4 	beq.w	80133da <__kernel_rem_pio2+0x3fa>
 8013272:	4650      	mov	r0, sl
 8013274:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8013300 <__kernel_rem_pio2+0x320>
 8013278:	f000 fb3a 	bl	80138f0 <scalbn>
 801327c:	00ec      	lsls	r4, r5, #3
 801327e:	ab72      	add	r3, sp, #456	; 0x1c8
 8013280:	191e      	adds	r6, r3, r4
 8013282:	ec59 8b10 	vmov	r8, r9, d0
 8013286:	f106 0a08 	add.w	sl, r6, #8
 801328a:	462f      	mov	r7, r5
 801328c:	2f00      	cmp	r7, #0
 801328e:	f280 80df 	bge.w	8013450 <__kernel_rem_pio2+0x470>
 8013292:	ed9f 8b19 	vldr	d8, [pc, #100]	; 80132f8 <__kernel_rem_pio2+0x318>
 8013296:	f04f 0a00 	mov.w	sl, #0
 801329a:	eba5 030a 	sub.w	r3, r5, sl
 801329e:	2b00      	cmp	r3, #0
 80132a0:	f2c0 810a 	blt.w	80134b8 <__kernel_rem_pio2+0x4d8>
 80132a4:	f8df b078 	ldr.w	fp, [pc, #120]	; 8013320 <__kernel_rem_pio2+0x340>
 80132a8:	ec59 8b18 	vmov	r8, r9, d8
 80132ac:	2700      	movs	r7, #0
 80132ae:	e0f5      	b.n	801349c <__kernel_rem_pio2+0x4bc>
 80132b0:	2302      	movs	r3, #2
 80132b2:	9302      	str	r3, [sp, #8]
 80132b4:	e760      	b.n	8013178 <__kernel_rem_pio2+0x198>
 80132b6:	ab0e      	add	r3, sp, #56	; 0x38
 80132b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80132bc:	b94d      	cbnz	r5, 80132d2 <__kernel_rem_pio2+0x2f2>
 80132be:	b12b      	cbz	r3, 80132cc <__kernel_rem_pio2+0x2ec>
 80132c0:	a80e      	add	r0, sp, #56	; 0x38
 80132c2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80132c6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80132ca:	2301      	movs	r3, #1
 80132cc:	3201      	adds	r2, #1
 80132ce:	461d      	mov	r5, r3
 80132d0:	e759      	b.n	8013186 <__kernel_rem_pio2+0x1a6>
 80132d2:	a80e      	add	r0, sp, #56	; 0x38
 80132d4:	1acb      	subs	r3, r1, r3
 80132d6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80132da:	462b      	mov	r3, r5
 80132dc:	e7f6      	b.n	80132cc <__kernel_rem_pio2+0x2ec>
 80132de:	1e62      	subs	r2, r4, #1
 80132e0:	ab0e      	add	r3, sp, #56	; 0x38
 80132e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80132e6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80132ea:	a90e      	add	r1, sp, #56	; 0x38
 80132ec:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80132f0:	e757      	b.n	80131a2 <__kernel_rem_pio2+0x1c2>
 80132f2:	bf00      	nop
 80132f4:	f3af 8000 	nop.w
	...
 8013304:	3ff00000 	.word	0x3ff00000
 8013308:	080185e8 	.word	0x080185e8
 801330c:	40200000 	.word	0x40200000
 8013310:	3ff00000 	.word	0x3ff00000
 8013314:	3e700000 	.word	0x3e700000
 8013318:	41700000 	.word	0x41700000
 801331c:	3fe00000 	.word	0x3fe00000
 8013320:	080185a8 	.word	0x080185a8
 8013324:	1e62      	subs	r2, r4, #1
 8013326:	ab0e      	add	r3, sp, #56	; 0x38
 8013328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801332c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8013330:	e7db      	b.n	80132ea <__kernel_rem_pio2+0x30a>
 8013332:	a90e      	add	r1, sp, #56	; 0x38
 8013334:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8013338:	3b01      	subs	r3, #1
 801333a:	430a      	orrs	r2, r1
 801333c:	e78b      	b.n	8013256 <__kernel_rem_pio2+0x276>
 801333e:	3301      	adds	r3, #1
 8013340:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8013344:	2900      	cmp	r1, #0
 8013346:	d0fa      	beq.n	801333e <__kernel_rem_pio2+0x35e>
 8013348:	9a08      	ldr	r2, [sp, #32]
 801334a:	4422      	add	r2, r4
 801334c:	00d2      	lsls	r2, r2, #3
 801334e:	a922      	add	r1, sp, #136	; 0x88
 8013350:	18e3      	adds	r3, r4, r3
 8013352:	9206      	str	r2, [sp, #24]
 8013354:	440a      	add	r2, r1
 8013356:	9302      	str	r3, [sp, #8]
 8013358:	f10b 0108 	add.w	r1, fp, #8
 801335c:	f102 0308 	add.w	r3, r2, #8
 8013360:	1c66      	adds	r6, r4, #1
 8013362:	910a      	str	r1, [sp, #40]	; 0x28
 8013364:	2500      	movs	r5, #0
 8013366:	930d      	str	r3, [sp, #52]	; 0x34
 8013368:	9b02      	ldr	r3, [sp, #8]
 801336a:	42b3      	cmp	r3, r6
 801336c:	da04      	bge.n	8013378 <__kernel_rem_pio2+0x398>
 801336e:	461c      	mov	r4, r3
 8013370:	e6a6      	b.n	80130c0 <__kernel_rem_pio2+0xe0>
 8013372:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013374:	2301      	movs	r3, #1
 8013376:	e7e3      	b.n	8013340 <__kernel_rem_pio2+0x360>
 8013378:	9b06      	ldr	r3, [sp, #24]
 801337a:	18ef      	adds	r7, r5, r3
 801337c:	ab22      	add	r3, sp, #136	; 0x88
 801337e:	441f      	add	r7, r3
 8013380:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013382:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8013386:	f7ed f8e5 	bl	8000554 <__aeabi_i2d>
 801338a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801338c:	461c      	mov	r4, r3
 801338e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013390:	e9c7 0100 	strd	r0, r1, [r7]
 8013394:	eb03 0b05 	add.w	fp, r3, r5
 8013398:	2700      	movs	r7, #0
 801339a:	f04f 0800 	mov.w	r8, #0
 801339e:	f04f 0900 	mov.w	r9, #0
 80133a2:	9b07      	ldr	r3, [sp, #28]
 80133a4:	429f      	cmp	r7, r3
 80133a6:	dd08      	ble.n	80133ba <__kernel_rem_pio2+0x3da>
 80133a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80133aa:	aa72      	add	r2, sp, #456	; 0x1c8
 80133ac:	18eb      	adds	r3, r5, r3
 80133ae:	4413      	add	r3, r2
 80133b0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 80133b4:	3601      	adds	r6, #1
 80133b6:	3508      	adds	r5, #8
 80133b8:	e7d6      	b.n	8013368 <__kernel_rem_pio2+0x388>
 80133ba:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80133be:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80133c2:	f7ed f931 	bl	8000628 <__aeabi_dmul>
 80133c6:	4602      	mov	r2, r0
 80133c8:	460b      	mov	r3, r1
 80133ca:	4640      	mov	r0, r8
 80133cc:	4649      	mov	r1, r9
 80133ce:	f7ec ff75 	bl	80002bc <__adddf3>
 80133d2:	3701      	adds	r7, #1
 80133d4:	4680      	mov	r8, r0
 80133d6:	4689      	mov	r9, r1
 80133d8:	e7e3      	b.n	80133a2 <__kernel_rem_pio2+0x3c2>
 80133da:	3d01      	subs	r5, #1
 80133dc:	e741      	b.n	8013262 <__kernel_rem_pio2+0x282>
 80133de:	f1ca 0000 	rsb	r0, sl, #0
 80133e2:	ec47 6b10 	vmov	d0, r6, r7
 80133e6:	f000 fa83 	bl	80138f0 <scalbn>
 80133ea:	ec57 6b10 	vmov	r6, r7, d0
 80133ee:	2200      	movs	r2, #0
 80133f0:	4b99      	ldr	r3, [pc, #612]	; (8013658 <__kernel_rem_pio2+0x678>)
 80133f2:	ee10 0a10 	vmov	r0, s0
 80133f6:	4639      	mov	r1, r7
 80133f8:	f7ed fb9c 	bl	8000b34 <__aeabi_dcmpge>
 80133fc:	b1f8      	cbz	r0, 801343e <__kernel_rem_pio2+0x45e>
 80133fe:	2200      	movs	r2, #0
 8013400:	4b96      	ldr	r3, [pc, #600]	; (801365c <__kernel_rem_pio2+0x67c>)
 8013402:	4630      	mov	r0, r6
 8013404:	4639      	mov	r1, r7
 8013406:	f7ed f90f 	bl	8000628 <__aeabi_dmul>
 801340a:	f7ed fbbd 	bl	8000b88 <__aeabi_d2iz>
 801340e:	4680      	mov	r8, r0
 8013410:	f7ed f8a0 	bl	8000554 <__aeabi_i2d>
 8013414:	2200      	movs	r2, #0
 8013416:	4b90      	ldr	r3, [pc, #576]	; (8013658 <__kernel_rem_pio2+0x678>)
 8013418:	f7ed f906 	bl	8000628 <__aeabi_dmul>
 801341c:	460b      	mov	r3, r1
 801341e:	4602      	mov	r2, r0
 8013420:	4639      	mov	r1, r7
 8013422:	4630      	mov	r0, r6
 8013424:	f7ec ff48 	bl	80002b8 <__aeabi_dsub>
 8013428:	f7ed fbae 	bl	8000b88 <__aeabi_d2iz>
 801342c:	1c65      	adds	r5, r4, #1
 801342e:	ab0e      	add	r3, sp, #56	; 0x38
 8013430:	f10a 0a18 	add.w	sl, sl, #24
 8013434:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8013438:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801343c:	e719      	b.n	8013272 <__kernel_rem_pio2+0x292>
 801343e:	4630      	mov	r0, r6
 8013440:	4639      	mov	r1, r7
 8013442:	f7ed fba1 	bl	8000b88 <__aeabi_d2iz>
 8013446:	ab0e      	add	r3, sp, #56	; 0x38
 8013448:	4625      	mov	r5, r4
 801344a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801344e:	e710      	b.n	8013272 <__kernel_rem_pio2+0x292>
 8013450:	ab0e      	add	r3, sp, #56	; 0x38
 8013452:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8013456:	f7ed f87d 	bl	8000554 <__aeabi_i2d>
 801345a:	4642      	mov	r2, r8
 801345c:	464b      	mov	r3, r9
 801345e:	f7ed f8e3 	bl	8000628 <__aeabi_dmul>
 8013462:	2200      	movs	r2, #0
 8013464:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8013468:	4b7c      	ldr	r3, [pc, #496]	; (801365c <__kernel_rem_pio2+0x67c>)
 801346a:	4640      	mov	r0, r8
 801346c:	4649      	mov	r1, r9
 801346e:	f7ed f8db 	bl	8000628 <__aeabi_dmul>
 8013472:	3f01      	subs	r7, #1
 8013474:	4680      	mov	r8, r0
 8013476:	4689      	mov	r9, r1
 8013478:	e708      	b.n	801328c <__kernel_rem_pio2+0x2ac>
 801347a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 801347e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013482:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8013486:	f7ed f8cf 	bl	8000628 <__aeabi_dmul>
 801348a:	4602      	mov	r2, r0
 801348c:	460b      	mov	r3, r1
 801348e:	4640      	mov	r0, r8
 8013490:	4649      	mov	r1, r9
 8013492:	f7ec ff13 	bl	80002bc <__adddf3>
 8013496:	3701      	adds	r7, #1
 8013498:	4680      	mov	r8, r0
 801349a:	4689      	mov	r9, r1
 801349c:	9b04      	ldr	r3, [sp, #16]
 801349e:	429f      	cmp	r7, r3
 80134a0:	dc01      	bgt.n	80134a6 <__kernel_rem_pio2+0x4c6>
 80134a2:	45ba      	cmp	sl, r7
 80134a4:	dae9      	bge.n	801347a <__kernel_rem_pio2+0x49a>
 80134a6:	ab4a      	add	r3, sp, #296	; 0x128
 80134a8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80134ac:	e9c3 8900 	strd	r8, r9, [r3]
 80134b0:	f10a 0a01 	add.w	sl, sl, #1
 80134b4:	3e08      	subs	r6, #8
 80134b6:	e6f0      	b.n	801329a <__kernel_rem_pio2+0x2ba>
 80134b8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80134ba:	2b03      	cmp	r3, #3
 80134bc:	d85b      	bhi.n	8013576 <__kernel_rem_pio2+0x596>
 80134be:	e8df f003 	tbb	[pc, r3]
 80134c2:	264a      	.short	0x264a
 80134c4:	0226      	.short	0x0226
 80134c6:	ab9a      	add	r3, sp, #616	; 0x268
 80134c8:	441c      	add	r4, r3
 80134ca:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80134ce:	46a2      	mov	sl, r4
 80134d0:	46ab      	mov	fp, r5
 80134d2:	f1bb 0f00 	cmp.w	fp, #0
 80134d6:	dc6c      	bgt.n	80135b2 <__kernel_rem_pio2+0x5d2>
 80134d8:	46a2      	mov	sl, r4
 80134da:	46ab      	mov	fp, r5
 80134dc:	f1bb 0f01 	cmp.w	fp, #1
 80134e0:	f300 8086 	bgt.w	80135f0 <__kernel_rem_pio2+0x610>
 80134e4:	2000      	movs	r0, #0
 80134e6:	2100      	movs	r1, #0
 80134e8:	2d01      	cmp	r5, #1
 80134ea:	f300 80a0 	bgt.w	801362e <__kernel_rem_pio2+0x64e>
 80134ee:	9b02      	ldr	r3, [sp, #8]
 80134f0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80134f4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	f040 809e 	bne.w	801363a <__kernel_rem_pio2+0x65a>
 80134fe:	9b01      	ldr	r3, [sp, #4]
 8013500:	e9c3 7800 	strd	r7, r8, [r3]
 8013504:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8013508:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801350c:	e033      	b.n	8013576 <__kernel_rem_pio2+0x596>
 801350e:	3408      	adds	r4, #8
 8013510:	ab4a      	add	r3, sp, #296	; 0x128
 8013512:	441c      	add	r4, r3
 8013514:	462e      	mov	r6, r5
 8013516:	2000      	movs	r0, #0
 8013518:	2100      	movs	r1, #0
 801351a:	2e00      	cmp	r6, #0
 801351c:	da3a      	bge.n	8013594 <__kernel_rem_pio2+0x5b4>
 801351e:	9b02      	ldr	r3, [sp, #8]
 8013520:	2b00      	cmp	r3, #0
 8013522:	d03d      	beq.n	80135a0 <__kernel_rem_pio2+0x5c0>
 8013524:	4602      	mov	r2, r0
 8013526:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801352a:	9c01      	ldr	r4, [sp, #4]
 801352c:	e9c4 2300 	strd	r2, r3, [r4]
 8013530:	4602      	mov	r2, r0
 8013532:	460b      	mov	r3, r1
 8013534:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8013538:	f7ec febe 	bl	80002b8 <__aeabi_dsub>
 801353c:	ae4c      	add	r6, sp, #304	; 0x130
 801353e:	2401      	movs	r4, #1
 8013540:	42a5      	cmp	r5, r4
 8013542:	da30      	bge.n	80135a6 <__kernel_rem_pio2+0x5c6>
 8013544:	9b02      	ldr	r3, [sp, #8]
 8013546:	b113      	cbz	r3, 801354e <__kernel_rem_pio2+0x56e>
 8013548:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801354c:	4619      	mov	r1, r3
 801354e:	9b01      	ldr	r3, [sp, #4]
 8013550:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8013554:	e00f      	b.n	8013576 <__kernel_rem_pio2+0x596>
 8013556:	ab9a      	add	r3, sp, #616	; 0x268
 8013558:	441c      	add	r4, r3
 801355a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801355e:	2000      	movs	r0, #0
 8013560:	2100      	movs	r1, #0
 8013562:	2d00      	cmp	r5, #0
 8013564:	da10      	bge.n	8013588 <__kernel_rem_pio2+0x5a8>
 8013566:	9b02      	ldr	r3, [sp, #8]
 8013568:	b113      	cbz	r3, 8013570 <__kernel_rem_pio2+0x590>
 801356a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801356e:	4619      	mov	r1, r3
 8013570:	9b01      	ldr	r3, [sp, #4]
 8013572:	e9c3 0100 	strd	r0, r1, [r3]
 8013576:	9b06      	ldr	r3, [sp, #24]
 8013578:	f003 0007 	and.w	r0, r3, #7
 801357c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8013580:	ecbd 8b02 	vpop	{d8}
 8013584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013588:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801358c:	f7ec fe96 	bl	80002bc <__adddf3>
 8013590:	3d01      	subs	r5, #1
 8013592:	e7e6      	b.n	8013562 <__kernel_rem_pio2+0x582>
 8013594:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013598:	f7ec fe90 	bl	80002bc <__adddf3>
 801359c:	3e01      	subs	r6, #1
 801359e:	e7bc      	b.n	801351a <__kernel_rem_pio2+0x53a>
 80135a0:	4602      	mov	r2, r0
 80135a2:	460b      	mov	r3, r1
 80135a4:	e7c1      	b.n	801352a <__kernel_rem_pio2+0x54a>
 80135a6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80135aa:	f7ec fe87 	bl	80002bc <__adddf3>
 80135ae:	3401      	adds	r4, #1
 80135b0:	e7c6      	b.n	8013540 <__kernel_rem_pio2+0x560>
 80135b2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 80135b6:	ed3a 7b02 	vldmdb	sl!, {d7}
 80135ba:	4640      	mov	r0, r8
 80135bc:	ec53 2b17 	vmov	r2, r3, d7
 80135c0:	4649      	mov	r1, r9
 80135c2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80135c6:	f7ec fe79 	bl	80002bc <__adddf3>
 80135ca:	4602      	mov	r2, r0
 80135cc:	460b      	mov	r3, r1
 80135ce:	4606      	mov	r6, r0
 80135d0:	460f      	mov	r7, r1
 80135d2:	4640      	mov	r0, r8
 80135d4:	4649      	mov	r1, r9
 80135d6:	f7ec fe6f 	bl	80002b8 <__aeabi_dsub>
 80135da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80135de:	f7ec fe6d 	bl	80002bc <__adddf3>
 80135e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80135e6:	e9ca 0100 	strd	r0, r1, [sl]
 80135ea:	e94a 6702 	strd	r6, r7, [sl, #-8]
 80135ee:	e770      	b.n	80134d2 <__kernel_rem_pio2+0x4f2>
 80135f0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 80135f4:	ed3a 7b02 	vldmdb	sl!, {d7}
 80135f8:	4630      	mov	r0, r6
 80135fa:	ec53 2b17 	vmov	r2, r3, d7
 80135fe:	4639      	mov	r1, r7
 8013600:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013604:	f7ec fe5a 	bl	80002bc <__adddf3>
 8013608:	4602      	mov	r2, r0
 801360a:	460b      	mov	r3, r1
 801360c:	4680      	mov	r8, r0
 801360e:	4689      	mov	r9, r1
 8013610:	4630      	mov	r0, r6
 8013612:	4639      	mov	r1, r7
 8013614:	f7ec fe50 	bl	80002b8 <__aeabi_dsub>
 8013618:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801361c:	f7ec fe4e 	bl	80002bc <__adddf3>
 8013620:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013624:	e9ca 0100 	strd	r0, r1, [sl]
 8013628:	e94a 8902 	strd	r8, r9, [sl, #-8]
 801362c:	e756      	b.n	80134dc <__kernel_rem_pio2+0x4fc>
 801362e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013632:	f7ec fe43 	bl	80002bc <__adddf3>
 8013636:	3d01      	subs	r5, #1
 8013638:	e756      	b.n	80134e8 <__kernel_rem_pio2+0x508>
 801363a:	9b01      	ldr	r3, [sp, #4]
 801363c:	9a01      	ldr	r2, [sp, #4]
 801363e:	601f      	str	r7, [r3, #0]
 8013640:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8013644:	605c      	str	r4, [r3, #4]
 8013646:	609d      	str	r5, [r3, #8]
 8013648:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801364c:	60d3      	str	r3, [r2, #12]
 801364e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013652:	6110      	str	r0, [r2, #16]
 8013654:	6153      	str	r3, [r2, #20]
 8013656:	e78e      	b.n	8013576 <__kernel_rem_pio2+0x596>
 8013658:	41700000 	.word	0x41700000
 801365c:	3e700000 	.word	0x3e700000

08013660 <__kernel_sin>:
 8013660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013664:	ec55 4b10 	vmov	r4, r5, d0
 8013668:	b085      	sub	sp, #20
 801366a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801366e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8013672:	ed8d 1b00 	vstr	d1, [sp]
 8013676:	9002      	str	r0, [sp, #8]
 8013678:	da06      	bge.n	8013688 <__kernel_sin+0x28>
 801367a:	ee10 0a10 	vmov	r0, s0
 801367e:	4629      	mov	r1, r5
 8013680:	f7ed fa82 	bl	8000b88 <__aeabi_d2iz>
 8013684:	2800      	cmp	r0, #0
 8013686:	d051      	beq.n	801372c <__kernel_sin+0xcc>
 8013688:	4622      	mov	r2, r4
 801368a:	462b      	mov	r3, r5
 801368c:	4620      	mov	r0, r4
 801368e:	4629      	mov	r1, r5
 8013690:	f7ec ffca 	bl	8000628 <__aeabi_dmul>
 8013694:	4682      	mov	sl, r0
 8013696:	468b      	mov	fp, r1
 8013698:	4602      	mov	r2, r0
 801369a:	460b      	mov	r3, r1
 801369c:	4620      	mov	r0, r4
 801369e:	4629      	mov	r1, r5
 80136a0:	f7ec ffc2 	bl	8000628 <__aeabi_dmul>
 80136a4:	a341      	add	r3, pc, #260	; (adr r3, 80137ac <__kernel_sin+0x14c>)
 80136a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136aa:	4680      	mov	r8, r0
 80136ac:	4689      	mov	r9, r1
 80136ae:	4650      	mov	r0, sl
 80136b0:	4659      	mov	r1, fp
 80136b2:	f7ec ffb9 	bl	8000628 <__aeabi_dmul>
 80136b6:	a33f      	add	r3, pc, #252	; (adr r3, 80137b4 <__kernel_sin+0x154>)
 80136b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136bc:	f7ec fdfc 	bl	80002b8 <__aeabi_dsub>
 80136c0:	4652      	mov	r2, sl
 80136c2:	465b      	mov	r3, fp
 80136c4:	f7ec ffb0 	bl	8000628 <__aeabi_dmul>
 80136c8:	a33c      	add	r3, pc, #240	; (adr r3, 80137bc <__kernel_sin+0x15c>)
 80136ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136ce:	f7ec fdf5 	bl	80002bc <__adddf3>
 80136d2:	4652      	mov	r2, sl
 80136d4:	465b      	mov	r3, fp
 80136d6:	f7ec ffa7 	bl	8000628 <__aeabi_dmul>
 80136da:	a33a      	add	r3, pc, #232	; (adr r3, 80137c4 <__kernel_sin+0x164>)
 80136dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136e0:	f7ec fdea 	bl	80002b8 <__aeabi_dsub>
 80136e4:	4652      	mov	r2, sl
 80136e6:	465b      	mov	r3, fp
 80136e8:	f7ec ff9e 	bl	8000628 <__aeabi_dmul>
 80136ec:	a337      	add	r3, pc, #220	; (adr r3, 80137cc <__kernel_sin+0x16c>)
 80136ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136f2:	f7ec fde3 	bl	80002bc <__adddf3>
 80136f6:	9b02      	ldr	r3, [sp, #8]
 80136f8:	4606      	mov	r6, r0
 80136fa:	460f      	mov	r7, r1
 80136fc:	b9db      	cbnz	r3, 8013736 <__kernel_sin+0xd6>
 80136fe:	4602      	mov	r2, r0
 8013700:	460b      	mov	r3, r1
 8013702:	4650      	mov	r0, sl
 8013704:	4659      	mov	r1, fp
 8013706:	f7ec ff8f 	bl	8000628 <__aeabi_dmul>
 801370a:	a325      	add	r3, pc, #148	; (adr r3, 80137a0 <__kernel_sin+0x140>)
 801370c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013710:	f7ec fdd2 	bl	80002b8 <__aeabi_dsub>
 8013714:	4642      	mov	r2, r8
 8013716:	464b      	mov	r3, r9
 8013718:	f7ec ff86 	bl	8000628 <__aeabi_dmul>
 801371c:	4602      	mov	r2, r0
 801371e:	460b      	mov	r3, r1
 8013720:	4620      	mov	r0, r4
 8013722:	4629      	mov	r1, r5
 8013724:	f7ec fdca 	bl	80002bc <__adddf3>
 8013728:	4604      	mov	r4, r0
 801372a:	460d      	mov	r5, r1
 801372c:	ec45 4b10 	vmov	d0, r4, r5
 8013730:	b005      	add	sp, #20
 8013732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013736:	2200      	movs	r2, #0
 8013738:	4b1b      	ldr	r3, [pc, #108]	; (80137a8 <__kernel_sin+0x148>)
 801373a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801373e:	f7ec ff73 	bl	8000628 <__aeabi_dmul>
 8013742:	4632      	mov	r2, r6
 8013744:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013748:	463b      	mov	r3, r7
 801374a:	4640      	mov	r0, r8
 801374c:	4649      	mov	r1, r9
 801374e:	f7ec ff6b 	bl	8000628 <__aeabi_dmul>
 8013752:	4602      	mov	r2, r0
 8013754:	460b      	mov	r3, r1
 8013756:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801375a:	f7ec fdad 	bl	80002b8 <__aeabi_dsub>
 801375e:	4652      	mov	r2, sl
 8013760:	465b      	mov	r3, fp
 8013762:	f7ec ff61 	bl	8000628 <__aeabi_dmul>
 8013766:	e9dd 2300 	ldrd	r2, r3, [sp]
 801376a:	f7ec fda5 	bl	80002b8 <__aeabi_dsub>
 801376e:	a30c      	add	r3, pc, #48	; (adr r3, 80137a0 <__kernel_sin+0x140>)
 8013770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013774:	4606      	mov	r6, r0
 8013776:	460f      	mov	r7, r1
 8013778:	4640      	mov	r0, r8
 801377a:	4649      	mov	r1, r9
 801377c:	f7ec ff54 	bl	8000628 <__aeabi_dmul>
 8013780:	4602      	mov	r2, r0
 8013782:	460b      	mov	r3, r1
 8013784:	4630      	mov	r0, r6
 8013786:	4639      	mov	r1, r7
 8013788:	f7ec fd98 	bl	80002bc <__adddf3>
 801378c:	4602      	mov	r2, r0
 801378e:	460b      	mov	r3, r1
 8013790:	4620      	mov	r0, r4
 8013792:	4629      	mov	r1, r5
 8013794:	f7ec fd90 	bl	80002b8 <__aeabi_dsub>
 8013798:	e7c6      	b.n	8013728 <__kernel_sin+0xc8>
 801379a:	bf00      	nop
 801379c:	f3af 8000 	nop.w
 80137a0:	55555549 	.word	0x55555549
 80137a4:	3fc55555 	.word	0x3fc55555
 80137a8:	3fe00000 	.word	0x3fe00000
 80137ac:	5acfd57c 	.word	0x5acfd57c
 80137b0:	3de5d93a 	.word	0x3de5d93a
 80137b4:	8a2b9ceb 	.word	0x8a2b9ceb
 80137b8:	3e5ae5e6 	.word	0x3e5ae5e6
 80137bc:	57b1fe7d 	.word	0x57b1fe7d
 80137c0:	3ec71de3 	.word	0x3ec71de3
 80137c4:	19c161d5 	.word	0x19c161d5
 80137c8:	3f2a01a0 	.word	0x3f2a01a0
 80137cc:	1110f8a6 	.word	0x1110f8a6
 80137d0:	3f811111 	.word	0x3f811111

080137d4 <fabs>:
 80137d4:	ec51 0b10 	vmov	r0, r1, d0
 80137d8:	ee10 2a10 	vmov	r2, s0
 80137dc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80137e0:	ec43 2b10 	vmov	d0, r2, r3
 80137e4:	4770      	bx	lr
	...

080137e8 <floor>:
 80137e8:	ec51 0b10 	vmov	r0, r1, d0
 80137ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137f0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80137f4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80137f8:	2e13      	cmp	r6, #19
 80137fa:	460c      	mov	r4, r1
 80137fc:	ee10 5a10 	vmov	r5, s0
 8013800:	4680      	mov	r8, r0
 8013802:	dc34      	bgt.n	801386e <floor+0x86>
 8013804:	2e00      	cmp	r6, #0
 8013806:	da16      	bge.n	8013836 <floor+0x4e>
 8013808:	a335      	add	r3, pc, #212	; (adr r3, 80138e0 <floor+0xf8>)
 801380a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801380e:	f7ec fd55 	bl	80002bc <__adddf3>
 8013812:	2200      	movs	r2, #0
 8013814:	2300      	movs	r3, #0
 8013816:	f7ed f997 	bl	8000b48 <__aeabi_dcmpgt>
 801381a:	b148      	cbz	r0, 8013830 <floor+0x48>
 801381c:	2c00      	cmp	r4, #0
 801381e:	da59      	bge.n	80138d4 <floor+0xec>
 8013820:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8013824:	4a30      	ldr	r2, [pc, #192]	; (80138e8 <floor+0x100>)
 8013826:	432b      	orrs	r3, r5
 8013828:	2500      	movs	r5, #0
 801382a:	42ab      	cmp	r3, r5
 801382c:	bf18      	it	ne
 801382e:	4614      	movne	r4, r2
 8013830:	4621      	mov	r1, r4
 8013832:	4628      	mov	r0, r5
 8013834:	e025      	b.n	8013882 <floor+0x9a>
 8013836:	4f2d      	ldr	r7, [pc, #180]	; (80138ec <floor+0x104>)
 8013838:	4137      	asrs	r7, r6
 801383a:	ea01 0307 	and.w	r3, r1, r7
 801383e:	4303      	orrs	r3, r0
 8013840:	d01f      	beq.n	8013882 <floor+0x9a>
 8013842:	a327      	add	r3, pc, #156	; (adr r3, 80138e0 <floor+0xf8>)
 8013844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013848:	f7ec fd38 	bl	80002bc <__adddf3>
 801384c:	2200      	movs	r2, #0
 801384e:	2300      	movs	r3, #0
 8013850:	f7ed f97a 	bl	8000b48 <__aeabi_dcmpgt>
 8013854:	2800      	cmp	r0, #0
 8013856:	d0eb      	beq.n	8013830 <floor+0x48>
 8013858:	2c00      	cmp	r4, #0
 801385a:	bfbe      	ittt	lt
 801385c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8013860:	fa43 f606 	asrlt.w	r6, r3, r6
 8013864:	19a4      	addlt	r4, r4, r6
 8013866:	ea24 0407 	bic.w	r4, r4, r7
 801386a:	2500      	movs	r5, #0
 801386c:	e7e0      	b.n	8013830 <floor+0x48>
 801386e:	2e33      	cmp	r6, #51	; 0x33
 8013870:	dd0b      	ble.n	801388a <floor+0xa2>
 8013872:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8013876:	d104      	bne.n	8013882 <floor+0x9a>
 8013878:	ee10 2a10 	vmov	r2, s0
 801387c:	460b      	mov	r3, r1
 801387e:	f7ec fd1d 	bl	80002bc <__adddf3>
 8013882:	ec41 0b10 	vmov	d0, r0, r1
 8013886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801388a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801388e:	f04f 33ff 	mov.w	r3, #4294967295
 8013892:	fa23 f707 	lsr.w	r7, r3, r7
 8013896:	4207      	tst	r7, r0
 8013898:	d0f3      	beq.n	8013882 <floor+0x9a>
 801389a:	a311      	add	r3, pc, #68	; (adr r3, 80138e0 <floor+0xf8>)
 801389c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138a0:	f7ec fd0c 	bl	80002bc <__adddf3>
 80138a4:	2200      	movs	r2, #0
 80138a6:	2300      	movs	r3, #0
 80138a8:	f7ed f94e 	bl	8000b48 <__aeabi_dcmpgt>
 80138ac:	2800      	cmp	r0, #0
 80138ae:	d0bf      	beq.n	8013830 <floor+0x48>
 80138b0:	2c00      	cmp	r4, #0
 80138b2:	da02      	bge.n	80138ba <floor+0xd2>
 80138b4:	2e14      	cmp	r6, #20
 80138b6:	d103      	bne.n	80138c0 <floor+0xd8>
 80138b8:	3401      	adds	r4, #1
 80138ba:	ea25 0507 	bic.w	r5, r5, r7
 80138be:	e7b7      	b.n	8013830 <floor+0x48>
 80138c0:	2301      	movs	r3, #1
 80138c2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80138c6:	fa03 f606 	lsl.w	r6, r3, r6
 80138ca:	4435      	add	r5, r6
 80138cc:	4545      	cmp	r5, r8
 80138ce:	bf38      	it	cc
 80138d0:	18e4      	addcc	r4, r4, r3
 80138d2:	e7f2      	b.n	80138ba <floor+0xd2>
 80138d4:	2500      	movs	r5, #0
 80138d6:	462c      	mov	r4, r5
 80138d8:	e7aa      	b.n	8013830 <floor+0x48>
 80138da:	bf00      	nop
 80138dc:	f3af 8000 	nop.w
 80138e0:	8800759c 	.word	0x8800759c
 80138e4:	7e37e43c 	.word	0x7e37e43c
 80138e8:	bff00000 	.word	0xbff00000
 80138ec:	000fffff 	.word	0x000fffff

080138f0 <scalbn>:
 80138f0:	b570      	push	{r4, r5, r6, lr}
 80138f2:	ec55 4b10 	vmov	r4, r5, d0
 80138f6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80138fa:	4606      	mov	r6, r0
 80138fc:	462b      	mov	r3, r5
 80138fe:	b9aa      	cbnz	r2, 801392c <scalbn+0x3c>
 8013900:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013904:	4323      	orrs	r3, r4
 8013906:	d03b      	beq.n	8013980 <scalbn+0x90>
 8013908:	4b31      	ldr	r3, [pc, #196]	; (80139d0 <scalbn+0xe0>)
 801390a:	4629      	mov	r1, r5
 801390c:	2200      	movs	r2, #0
 801390e:	ee10 0a10 	vmov	r0, s0
 8013912:	f7ec fe89 	bl	8000628 <__aeabi_dmul>
 8013916:	4b2f      	ldr	r3, [pc, #188]	; (80139d4 <scalbn+0xe4>)
 8013918:	429e      	cmp	r6, r3
 801391a:	4604      	mov	r4, r0
 801391c:	460d      	mov	r5, r1
 801391e:	da12      	bge.n	8013946 <scalbn+0x56>
 8013920:	a327      	add	r3, pc, #156	; (adr r3, 80139c0 <scalbn+0xd0>)
 8013922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013926:	f7ec fe7f 	bl	8000628 <__aeabi_dmul>
 801392a:	e009      	b.n	8013940 <scalbn+0x50>
 801392c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8013930:	428a      	cmp	r2, r1
 8013932:	d10c      	bne.n	801394e <scalbn+0x5e>
 8013934:	ee10 2a10 	vmov	r2, s0
 8013938:	4620      	mov	r0, r4
 801393a:	4629      	mov	r1, r5
 801393c:	f7ec fcbe 	bl	80002bc <__adddf3>
 8013940:	4604      	mov	r4, r0
 8013942:	460d      	mov	r5, r1
 8013944:	e01c      	b.n	8013980 <scalbn+0x90>
 8013946:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801394a:	460b      	mov	r3, r1
 801394c:	3a36      	subs	r2, #54	; 0x36
 801394e:	4432      	add	r2, r6
 8013950:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8013954:	428a      	cmp	r2, r1
 8013956:	dd0b      	ble.n	8013970 <scalbn+0x80>
 8013958:	ec45 4b11 	vmov	d1, r4, r5
 801395c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80139c8 <scalbn+0xd8>
 8013960:	f000 f83c 	bl	80139dc <copysign>
 8013964:	a318      	add	r3, pc, #96	; (adr r3, 80139c8 <scalbn+0xd8>)
 8013966:	e9d3 2300 	ldrd	r2, r3, [r3]
 801396a:	ec51 0b10 	vmov	r0, r1, d0
 801396e:	e7da      	b.n	8013926 <scalbn+0x36>
 8013970:	2a00      	cmp	r2, #0
 8013972:	dd08      	ble.n	8013986 <scalbn+0x96>
 8013974:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013978:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801397c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013980:	ec45 4b10 	vmov	d0, r4, r5
 8013984:	bd70      	pop	{r4, r5, r6, pc}
 8013986:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801398a:	da0d      	bge.n	80139a8 <scalbn+0xb8>
 801398c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013990:	429e      	cmp	r6, r3
 8013992:	ec45 4b11 	vmov	d1, r4, r5
 8013996:	dce1      	bgt.n	801395c <scalbn+0x6c>
 8013998:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80139c0 <scalbn+0xd0>
 801399c:	f000 f81e 	bl	80139dc <copysign>
 80139a0:	a307      	add	r3, pc, #28	; (adr r3, 80139c0 <scalbn+0xd0>)
 80139a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139a6:	e7e0      	b.n	801396a <scalbn+0x7a>
 80139a8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80139ac:	3236      	adds	r2, #54	; 0x36
 80139ae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80139b2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80139b6:	4620      	mov	r0, r4
 80139b8:	4629      	mov	r1, r5
 80139ba:	2200      	movs	r2, #0
 80139bc:	4b06      	ldr	r3, [pc, #24]	; (80139d8 <scalbn+0xe8>)
 80139be:	e7b2      	b.n	8013926 <scalbn+0x36>
 80139c0:	c2f8f359 	.word	0xc2f8f359
 80139c4:	01a56e1f 	.word	0x01a56e1f
 80139c8:	8800759c 	.word	0x8800759c
 80139cc:	7e37e43c 	.word	0x7e37e43c
 80139d0:	43500000 	.word	0x43500000
 80139d4:	ffff3cb0 	.word	0xffff3cb0
 80139d8:	3c900000 	.word	0x3c900000

080139dc <copysign>:
 80139dc:	ec51 0b10 	vmov	r0, r1, d0
 80139e0:	ee11 0a90 	vmov	r0, s3
 80139e4:	ee10 2a10 	vmov	r2, s0
 80139e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80139ec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80139f0:	ea41 0300 	orr.w	r3, r1, r0
 80139f4:	ec43 2b10 	vmov	d0, r2, r3
 80139f8:	4770      	bx	lr
	...

080139fc <__errno>:
 80139fc:	4b01      	ldr	r3, [pc, #4]	; (8013a04 <__errno+0x8>)
 80139fe:	6818      	ldr	r0, [r3, #0]
 8013a00:	4770      	bx	lr
 8013a02:	bf00      	nop
 8013a04:	2000000c 	.word	0x2000000c

08013a08 <__libc_init_array>:
 8013a08:	b570      	push	{r4, r5, r6, lr}
 8013a0a:	4e0d      	ldr	r6, [pc, #52]	; (8013a40 <__libc_init_array+0x38>)
 8013a0c:	4c0d      	ldr	r4, [pc, #52]	; (8013a44 <__libc_init_array+0x3c>)
 8013a0e:	1ba4      	subs	r4, r4, r6
 8013a10:	10a4      	asrs	r4, r4, #2
 8013a12:	2500      	movs	r5, #0
 8013a14:	42a5      	cmp	r5, r4
 8013a16:	d109      	bne.n	8013a2c <__libc_init_array+0x24>
 8013a18:	4e0b      	ldr	r6, [pc, #44]	; (8013a48 <__libc_init_array+0x40>)
 8013a1a:	4c0c      	ldr	r4, [pc, #48]	; (8013a4c <__libc_init_array+0x44>)
 8013a1c:	f004 f9e8 	bl	8017df0 <_init>
 8013a20:	1ba4      	subs	r4, r4, r6
 8013a22:	10a4      	asrs	r4, r4, #2
 8013a24:	2500      	movs	r5, #0
 8013a26:	42a5      	cmp	r5, r4
 8013a28:	d105      	bne.n	8013a36 <__libc_init_array+0x2e>
 8013a2a:	bd70      	pop	{r4, r5, r6, pc}
 8013a2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013a30:	4798      	blx	r3
 8013a32:	3501      	adds	r5, #1
 8013a34:	e7ee      	b.n	8013a14 <__libc_init_array+0xc>
 8013a36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013a3a:	4798      	blx	r3
 8013a3c:	3501      	adds	r5, #1
 8013a3e:	e7f2      	b.n	8013a26 <__libc_init_array+0x1e>
 8013a40:	08018934 	.word	0x08018934
 8013a44:	08018934 	.word	0x08018934
 8013a48:	08018934 	.word	0x08018934
 8013a4c:	0801893c 	.word	0x0801893c

08013a50 <memcpy>:
 8013a50:	b510      	push	{r4, lr}
 8013a52:	1e43      	subs	r3, r0, #1
 8013a54:	440a      	add	r2, r1
 8013a56:	4291      	cmp	r1, r2
 8013a58:	d100      	bne.n	8013a5c <memcpy+0xc>
 8013a5a:	bd10      	pop	{r4, pc}
 8013a5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013a60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013a64:	e7f7      	b.n	8013a56 <memcpy+0x6>

08013a66 <memset>:
 8013a66:	4402      	add	r2, r0
 8013a68:	4603      	mov	r3, r0
 8013a6a:	4293      	cmp	r3, r2
 8013a6c:	d100      	bne.n	8013a70 <memset+0xa>
 8013a6e:	4770      	bx	lr
 8013a70:	f803 1b01 	strb.w	r1, [r3], #1
 8013a74:	e7f9      	b.n	8013a6a <memset+0x4>

08013a76 <__cvt>:
 8013a76:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013a7a:	ec55 4b10 	vmov	r4, r5, d0
 8013a7e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8013a80:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8013a84:	2d00      	cmp	r5, #0
 8013a86:	460e      	mov	r6, r1
 8013a88:	4691      	mov	r9, r2
 8013a8a:	4619      	mov	r1, r3
 8013a8c:	bfb8      	it	lt
 8013a8e:	4622      	movlt	r2, r4
 8013a90:	462b      	mov	r3, r5
 8013a92:	f027 0720 	bic.w	r7, r7, #32
 8013a96:	bfbb      	ittet	lt
 8013a98:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8013a9c:	461d      	movlt	r5, r3
 8013a9e:	2300      	movge	r3, #0
 8013aa0:	232d      	movlt	r3, #45	; 0x2d
 8013aa2:	bfb8      	it	lt
 8013aa4:	4614      	movlt	r4, r2
 8013aa6:	2f46      	cmp	r7, #70	; 0x46
 8013aa8:	700b      	strb	r3, [r1, #0]
 8013aaa:	d004      	beq.n	8013ab6 <__cvt+0x40>
 8013aac:	2f45      	cmp	r7, #69	; 0x45
 8013aae:	d100      	bne.n	8013ab2 <__cvt+0x3c>
 8013ab0:	3601      	adds	r6, #1
 8013ab2:	2102      	movs	r1, #2
 8013ab4:	e000      	b.n	8013ab8 <__cvt+0x42>
 8013ab6:	2103      	movs	r1, #3
 8013ab8:	ab03      	add	r3, sp, #12
 8013aba:	9301      	str	r3, [sp, #4]
 8013abc:	ab02      	add	r3, sp, #8
 8013abe:	9300      	str	r3, [sp, #0]
 8013ac0:	4632      	mov	r2, r6
 8013ac2:	4653      	mov	r3, sl
 8013ac4:	ec45 4b10 	vmov	d0, r4, r5
 8013ac8:	f001 fdfe 	bl	80156c8 <_dtoa_r>
 8013acc:	2f47      	cmp	r7, #71	; 0x47
 8013ace:	4680      	mov	r8, r0
 8013ad0:	d102      	bne.n	8013ad8 <__cvt+0x62>
 8013ad2:	f019 0f01 	tst.w	r9, #1
 8013ad6:	d026      	beq.n	8013b26 <__cvt+0xb0>
 8013ad8:	2f46      	cmp	r7, #70	; 0x46
 8013ada:	eb08 0906 	add.w	r9, r8, r6
 8013ade:	d111      	bne.n	8013b04 <__cvt+0x8e>
 8013ae0:	f898 3000 	ldrb.w	r3, [r8]
 8013ae4:	2b30      	cmp	r3, #48	; 0x30
 8013ae6:	d10a      	bne.n	8013afe <__cvt+0x88>
 8013ae8:	2200      	movs	r2, #0
 8013aea:	2300      	movs	r3, #0
 8013aec:	4620      	mov	r0, r4
 8013aee:	4629      	mov	r1, r5
 8013af0:	f7ed f802 	bl	8000af8 <__aeabi_dcmpeq>
 8013af4:	b918      	cbnz	r0, 8013afe <__cvt+0x88>
 8013af6:	f1c6 0601 	rsb	r6, r6, #1
 8013afa:	f8ca 6000 	str.w	r6, [sl]
 8013afe:	f8da 3000 	ldr.w	r3, [sl]
 8013b02:	4499      	add	r9, r3
 8013b04:	2200      	movs	r2, #0
 8013b06:	2300      	movs	r3, #0
 8013b08:	4620      	mov	r0, r4
 8013b0a:	4629      	mov	r1, r5
 8013b0c:	f7ec fff4 	bl	8000af8 <__aeabi_dcmpeq>
 8013b10:	b938      	cbnz	r0, 8013b22 <__cvt+0xac>
 8013b12:	2230      	movs	r2, #48	; 0x30
 8013b14:	9b03      	ldr	r3, [sp, #12]
 8013b16:	454b      	cmp	r3, r9
 8013b18:	d205      	bcs.n	8013b26 <__cvt+0xb0>
 8013b1a:	1c59      	adds	r1, r3, #1
 8013b1c:	9103      	str	r1, [sp, #12]
 8013b1e:	701a      	strb	r2, [r3, #0]
 8013b20:	e7f8      	b.n	8013b14 <__cvt+0x9e>
 8013b22:	f8cd 900c 	str.w	r9, [sp, #12]
 8013b26:	9b03      	ldr	r3, [sp, #12]
 8013b28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013b2a:	eba3 0308 	sub.w	r3, r3, r8
 8013b2e:	4640      	mov	r0, r8
 8013b30:	6013      	str	r3, [r2, #0]
 8013b32:	b004      	add	sp, #16
 8013b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08013b38 <__exponent>:
 8013b38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013b3a:	2900      	cmp	r1, #0
 8013b3c:	4604      	mov	r4, r0
 8013b3e:	bfba      	itte	lt
 8013b40:	4249      	neglt	r1, r1
 8013b42:	232d      	movlt	r3, #45	; 0x2d
 8013b44:	232b      	movge	r3, #43	; 0x2b
 8013b46:	2909      	cmp	r1, #9
 8013b48:	f804 2b02 	strb.w	r2, [r4], #2
 8013b4c:	7043      	strb	r3, [r0, #1]
 8013b4e:	dd20      	ble.n	8013b92 <__exponent+0x5a>
 8013b50:	f10d 0307 	add.w	r3, sp, #7
 8013b54:	461f      	mov	r7, r3
 8013b56:	260a      	movs	r6, #10
 8013b58:	fb91 f5f6 	sdiv	r5, r1, r6
 8013b5c:	fb06 1115 	mls	r1, r6, r5, r1
 8013b60:	3130      	adds	r1, #48	; 0x30
 8013b62:	2d09      	cmp	r5, #9
 8013b64:	f803 1c01 	strb.w	r1, [r3, #-1]
 8013b68:	f103 32ff 	add.w	r2, r3, #4294967295
 8013b6c:	4629      	mov	r1, r5
 8013b6e:	dc09      	bgt.n	8013b84 <__exponent+0x4c>
 8013b70:	3130      	adds	r1, #48	; 0x30
 8013b72:	3b02      	subs	r3, #2
 8013b74:	f802 1c01 	strb.w	r1, [r2, #-1]
 8013b78:	42bb      	cmp	r3, r7
 8013b7a:	4622      	mov	r2, r4
 8013b7c:	d304      	bcc.n	8013b88 <__exponent+0x50>
 8013b7e:	1a10      	subs	r0, r2, r0
 8013b80:	b003      	add	sp, #12
 8013b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b84:	4613      	mov	r3, r2
 8013b86:	e7e7      	b.n	8013b58 <__exponent+0x20>
 8013b88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013b8c:	f804 2b01 	strb.w	r2, [r4], #1
 8013b90:	e7f2      	b.n	8013b78 <__exponent+0x40>
 8013b92:	2330      	movs	r3, #48	; 0x30
 8013b94:	4419      	add	r1, r3
 8013b96:	7083      	strb	r3, [r0, #2]
 8013b98:	1d02      	adds	r2, r0, #4
 8013b9a:	70c1      	strb	r1, [r0, #3]
 8013b9c:	e7ef      	b.n	8013b7e <__exponent+0x46>
	...

08013ba0 <_printf_float>:
 8013ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ba4:	b08d      	sub	sp, #52	; 0x34
 8013ba6:	460c      	mov	r4, r1
 8013ba8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8013bac:	4616      	mov	r6, r2
 8013bae:	461f      	mov	r7, r3
 8013bb0:	4605      	mov	r5, r0
 8013bb2:	f002 fe7b 	bl	80168ac <_localeconv_r>
 8013bb6:	6803      	ldr	r3, [r0, #0]
 8013bb8:	9304      	str	r3, [sp, #16]
 8013bba:	4618      	mov	r0, r3
 8013bbc:	f7ec fb20 	bl	8000200 <strlen>
 8013bc0:	2300      	movs	r3, #0
 8013bc2:	930a      	str	r3, [sp, #40]	; 0x28
 8013bc4:	f8d8 3000 	ldr.w	r3, [r8]
 8013bc8:	9005      	str	r0, [sp, #20]
 8013bca:	3307      	adds	r3, #7
 8013bcc:	f023 0307 	bic.w	r3, r3, #7
 8013bd0:	f103 0208 	add.w	r2, r3, #8
 8013bd4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8013bd8:	f8d4 b000 	ldr.w	fp, [r4]
 8013bdc:	f8c8 2000 	str.w	r2, [r8]
 8013be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013be4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8013be8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8013bec:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013bf0:	9307      	str	r3, [sp, #28]
 8013bf2:	f8cd 8018 	str.w	r8, [sp, #24]
 8013bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8013bfa:	4ba7      	ldr	r3, [pc, #668]	; (8013e98 <_printf_float+0x2f8>)
 8013bfc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013c00:	f7ec ffac 	bl	8000b5c <__aeabi_dcmpun>
 8013c04:	bb70      	cbnz	r0, 8013c64 <_printf_float+0xc4>
 8013c06:	f04f 32ff 	mov.w	r2, #4294967295
 8013c0a:	4ba3      	ldr	r3, [pc, #652]	; (8013e98 <_printf_float+0x2f8>)
 8013c0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013c10:	f7ec ff86 	bl	8000b20 <__aeabi_dcmple>
 8013c14:	bb30      	cbnz	r0, 8013c64 <_printf_float+0xc4>
 8013c16:	2200      	movs	r2, #0
 8013c18:	2300      	movs	r3, #0
 8013c1a:	4640      	mov	r0, r8
 8013c1c:	4649      	mov	r1, r9
 8013c1e:	f7ec ff75 	bl	8000b0c <__aeabi_dcmplt>
 8013c22:	b110      	cbz	r0, 8013c2a <_printf_float+0x8a>
 8013c24:	232d      	movs	r3, #45	; 0x2d
 8013c26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013c2a:	4a9c      	ldr	r2, [pc, #624]	; (8013e9c <_printf_float+0x2fc>)
 8013c2c:	4b9c      	ldr	r3, [pc, #624]	; (8013ea0 <_printf_float+0x300>)
 8013c2e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8013c32:	bf8c      	ite	hi
 8013c34:	4690      	movhi	r8, r2
 8013c36:	4698      	movls	r8, r3
 8013c38:	2303      	movs	r3, #3
 8013c3a:	f02b 0204 	bic.w	r2, fp, #4
 8013c3e:	6123      	str	r3, [r4, #16]
 8013c40:	6022      	str	r2, [r4, #0]
 8013c42:	f04f 0900 	mov.w	r9, #0
 8013c46:	9700      	str	r7, [sp, #0]
 8013c48:	4633      	mov	r3, r6
 8013c4a:	aa0b      	add	r2, sp, #44	; 0x2c
 8013c4c:	4621      	mov	r1, r4
 8013c4e:	4628      	mov	r0, r5
 8013c50:	f000 f9e6 	bl	8014020 <_printf_common>
 8013c54:	3001      	adds	r0, #1
 8013c56:	f040 808d 	bne.w	8013d74 <_printf_float+0x1d4>
 8013c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8013c5e:	b00d      	add	sp, #52	; 0x34
 8013c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c64:	4642      	mov	r2, r8
 8013c66:	464b      	mov	r3, r9
 8013c68:	4640      	mov	r0, r8
 8013c6a:	4649      	mov	r1, r9
 8013c6c:	f7ec ff76 	bl	8000b5c <__aeabi_dcmpun>
 8013c70:	b110      	cbz	r0, 8013c78 <_printf_float+0xd8>
 8013c72:	4a8c      	ldr	r2, [pc, #560]	; (8013ea4 <_printf_float+0x304>)
 8013c74:	4b8c      	ldr	r3, [pc, #560]	; (8013ea8 <_printf_float+0x308>)
 8013c76:	e7da      	b.n	8013c2e <_printf_float+0x8e>
 8013c78:	6861      	ldr	r1, [r4, #4]
 8013c7a:	1c4b      	adds	r3, r1, #1
 8013c7c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8013c80:	a80a      	add	r0, sp, #40	; 0x28
 8013c82:	d13e      	bne.n	8013d02 <_printf_float+0x162>
 8013c84:	2306      	movs	r3, #6
 8013c86:	6063      	str	r3, [r4, #4]
 8013c88:	2300      	movs	r3, #0
 8013c8a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8013c8e:	ab09      	add	r3, sp, #36	; 0x24
 8013c90:	9300      	str	r3, [sp, #0]
 8013c92:	ec49 8b10 	vmov	d0, r8, r9
 8013c96:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013c9a:	6022      	str	r2, [r4, #0]
 8013c9c:	f8cd a004 	str.w	sl, [sp, #4]
 8013ca0:	6861      	ldr	r1, [r4, #4]
 8013ca2:	4628      	mov	r0, r5
 8013ca4:	f7ff fee7 	bl	8013a76 <__cvt>
 8013ca8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8013cac:	2b47      	cmp	r3, #71	; 0x47
 8013cae:	4680      	mov	r8, r0
 8013cb0:	d109      	bne.n	8013cc6 <_printf_float+0x126>
 8013cb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013cb4:	1cd8      	adds	r0, r3, #3
 8013cb6:	db02      	blt.n	8013cbe <_printf_float+0x11e>
 8013cb8:	6862      	ldr	r2, [r4, #4]
 8013cba:	4293      	cmp	r3, r2
 8013cbc:	dd47      	ble.n	8013d4e <_printf_float+0x1ae>
 8013cbe:	f1aa 0a02 	sub.w	sl, sl, #2
 8013cc2:	fa5f fa8a 	uxtb.w	sl, sl
 8013cc6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8013cca:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013ccc:	d824      	bhi.n	8013d18 <_printf_float+0x178>
 8013cce:	3901      	subs	r1, #1
 8013cd0:	4652      	mov	r2, sl
 8013cd2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013cd6:	9109      	str	r1, [sp, #36]	; 0x24
 8013cd8:	f7ff ff2e 	bl	8013b38 <__exponent>
 8013cdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013cde:	1813      	adds	r3, r2, r0
 8013ce0:	2a01      	cmp	r2, #1
 8013ce2:	4681      	mov	r9, r0
 8013ce4:	6123      	str	r3, [r4, #16]
 8013ce6:	dc02      	bgt.n	8013cee <_printf_float+0x14e>
 8013ce8:	6822      	ldr	r2, [r4, #0]
 8013cea:	07d1      	lsls	r1, r2, #31
 8013cec:	d501      	bpl.n	8013cf2 <_printf_float+0x152>
 8013cee:	3301      	adds	r3, #1
 8013cf0:	6123      	str	r3, [r4, #16]
 8013cf2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	d0a5      	beq.n	8013c46 <_printf_float+0xa6>
 8013cfa:	232d      	movs	r3, #45	; 0x2d
 8013cfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013d00:	e7a1      	b.n	8013c46 <_printf_float+0xa6>
 8013d02:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8013d06:	f000 8177 	beq.w	8013ff8 <_printf_float+0x458>
 8013d0a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8013d0e:	d1bb      	bne.n	8013c88 <_printf_float+0xe8>
 8013d10:	2900      	cmp	r1, #0
 8013d12:	d1b9      	bne.n	8013c88 <_printf_float+0xe8>
 8013d14:	2301      	movs	r3, #1
 8013d16:	e7b6      	b.n	8013c86 <_printf_float+0xe6>
 8013d18:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8013d1c:	d119      	bne.n	8013d52 <_printf_float+0x1b2>
 8013d1e:	2900      	cmp	r1, #0
 8013d20:	6863      	ldr	r3, [r4, #4]
 8013d22:	dd0c      	ble.n	8013d3e <_printf_float+0x19e>
 8013d24:	6121      	str	r1, [r4, #16]
 8013d26:	b913      	cbnz	r3, 8013d2e <_printf_float+0x18e>
 8013d28:	6822      	ldr	r2, [r4, #0]
 8013d2a:	07d2      	lsls	r2, r2, #31
 8013d2c:	d502      	bpl.n	8013d34 <_printf_float+0x194>
 8013d2e:	3301      	adds	r3, #1
 8013d30:	440b      	add	r3, r1
 8013d32:	6123      	str	r3, [r4, #16]
 8013d34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d36:	65a3      	str	r3, [r4, #88]	; 0x58
 8013d38:	f04f 0900 	mov.w	r9, #0
 8013d3c:	e7d9      	b.n	8013cf2 <_printf_float+0x152>
 8013d3e:	b913      	cbnz	r3, 8013d46 <_printf_float+0x1a6>
 8013d40:	6822      	ldr	r2, [r4, #0]
 8013d42:	07d0      	lsls	r0, r2, #31
 8013d44:	d501      	bpl.n	8013d4a <_printf_float+0x1aa>
 8013d46:	3302      	adds	r3, #2
 8013d48:	e7f3      	b.n	8013d32 <_printf_float+0x192>
 8013d4a:	2301      	movs	r3, #1
 8013d4c:	e7f1      	b.n	8013d32 <_printf_float+0x192>
 8013d4e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8013d52:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8013d56:	4293      	cmp	r3, r2
 8013d58:	db05      	blt.n	8013d66 <_printf_float+0x1c6>
 8013d5a:	6822      	ldr	r2, [r4, #0]
 8013d5c:	6123      	str	r3, [r4, #16]
 8013d5e:	07d1      	lsls	r1, r2, #31
 8013d60:	d5e8      	bpl.n	8013d34 <_printf_float+0x194>
 8013d62:	3301      	adds	r3, #1
 8013d64:	e7e5      	b.n	8013d32 <_printf_float+0x192>
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	bfd4      	ite	le
 8013d6a:	f1c3 0302 	rsble	r3, r3, #2
 8013d6e:	2301      	movgt	r3, #1
 8013d70:	4413      	add	r3, r2
 8013d72:	e7de      	b.n	8013d32 <_printf_float+0x192>
 8013d74:	6823      	ldr	r3, [r4, #0]
 8013d76:	055a      	lsls	r2, r3, #21
 8013d78:	d407      	bmi.n	8013d8a <_printf_float+0x1ea>
 8013d7a:	6923      	ldr	r3, [r4, #16]
 8013d7c:	4642      	mov	r2, r8
 8013d7e:	4631      	mov	r1, r6
 8013d80:	4628      	mov	r0, r5
 8013d82:	47b8      	blx	r7
 8013d84:	3001      	adds	r0, #1
 8013d86:	d12b      	bne.n	8013de0 <_printf_float+0x240>
 8013d88:	e767      	b.n	8013c5a <_printf_float+0xba>
 8013d8a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8013d8e:	f240 80dc 	bls.w	8013f4a <_printf_float+0x3aa>
 8013d92:	2200      	movs	r2, #0
 8013d94:	2300      	movs	r3, #0
 8013d96:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013d9a:	f7ec fead 	bl	8000af8 <__aeabi_dcmpeq>
 8013d9e:	2800      	cmp	r0, #0
 8013da0:	d033      	beq.n	8013e0a <_printf_float+0x26a>
 8013da2:	2301      	movs	r3, #1
 8013da4:	4a41      	ldr	r2, [pc, #260]	; (8013eac <_printf_float+0x30c>)
 8013da6:	4631      	mov	r1, r6
 8013da8:	4628      	mov	r0, r5
 8013daa:	47b8      	blx	r7
 8013dac:	3001      	adds	r0, #1
 8013dae:	f43f af54 	beq.w	8013c5a <_printf_float+0xba>
 8013db2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013db6:	429a      	cmp	r2, r3
 8013db8:	db02      	blt.n	8013dc0 <_printf_float+0x220>
 8013dba:	6823      	ldr	r3, [r4, #0]
 8013dbc:	07d8      	lsls	r0, r3, #31
 8013dbe:	d50f      	bpl.n	8013de0 <_printf_float+0x240>
 8013dc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013dc4:	4631      	mov	r1, r6
 8013dc6:	4628      	mov	r0, r5
 8013dc8:	47b8      	blx	r7
 8013dca:	3001      	adds	r0, #1
 8013dcc:	f43f af45 	beq.w	8013c5a <_printf_float+0xba>
 8013dd0:	f04f 0800 	mov.w	r8, #0
 8013dd4:	f104 091a 	add.w	r9, r4, #26
 8013dd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013dda:	3b01      	subs	r3, #1
 8013ddc:	4543      	cmp	r3, r8
 8013dde:	dc09      	bgt.n	8013df4 <_printf_float+0x254>
 8013de0:	6823      	ldr	r3, [r4, #0]
 8013de2:	079b      	lsls	r3, r3, #30
 8013de4:	f100 8103 	bmi.w	8013fee <_printf_float+0x44e>
 8013de8:	68e0      	ldr	r0, [r4, #12]
 8013dea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013dec:	4298      	cmp	r0, r3
 8013dee:	bfb8      	it	lt
 8013df0:	4618      	movlt	r0, r3
 8013df2:	e734      	b.n	8013c5e <_printf_float+0xbe>
 8013df4:	2301      	movs	r3, #1
 8013df6:	464a      	mov	r2, r9
 8013df8:	4631      	mov	r1, r6
 8013dfa:	4628      	mov	r0, r5
 8013dfc:	47b8      	blx	r7
 8013dfe:	3001      	adds	r0, #1
 8013e00:	f43f af2b 	beq.w	8013c5a <_printf_float+0xba>
 8013e04:	f108 0801 	add.w	r8, r8, #1
 8013e08:	e7e6      	b.n	8013dd8 <_printf_float+0x238>
 8013e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	dc2b      	bgt.n	8013e68 <_printf_float+0x2c8>
 8013e10:	2301      	movs	r3, #1
 8013e12:	4a26      	ldr	r2, [pc, #152]	; (8013eac <_printf_float+0x30c>)
 8013e14:	4631      	mov	r1, r6
 8013e16:	4628      	mov	r0, r5
 8013e18:	47b8      	blx	r7
 8013e1a:	3001      	adds	r0, #1
 8013e1c:	f43f af1d 	beq.w	8013c5a <_printf_float+0xba>
 8013e20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e22:	b923      	cbnz	r3, 8013e2e <_printf_float+0x28e>
 8013e24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013e26:	b913      	cbnz	r3, 8013e2e <_printf_float+0x28e>
 8013e28:	6823      	ldr	r3, [r4, #0]
 8013e2a:	07d9      	lsls	r1, r3, #31
 8013e2c:	d5d8      	bpl.n	8013de0 <_printf_float+0x240>
 8013e2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013e32:	4631      	mov	r1, r6
 8013e34:	4628      	mov	r0, r5
 8013e36:	47b8      	blx	r7
 8013e38:	3001      	adds	r0, #1
 8013e3a:	f43f af0e 	beq.w	8013c5a <_printf_float+0xba>
 8013e3e:	f04f 0900 	mov.w	r9, #0
 8013e42:	f104 0a1a 	add.w	sl, r4, #26
 8013e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e48:	425b      	negs	r3, r3
 8013e4a:	454b      	cmp	r3, r9
 8013e4c:	dc01      	bgt.n	8013e52 <_printf_float+0x2b2>
 8013e4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013e50:	e794      	b.n	8013d7c <_printf_float+0x1dc>
 8013e52:	2301      	movs	r3, #1
 8013e54:	4652      	mov	r2, sl
 8013e56:	4631      	mov	r1, r6
 8013e58:	4628      	mov	r0, r5
 8013e5a:	47b8      	blx	r7
 8013e5c:	3001      	adds	r0, #1
 8013e5e:	f43f aefc 	beq.w	8013c5a <_printf_float+0xba>
 8013e62:	f109 0901 	add.w	r9, r9, #1
 8013e66:	e7ee      	b.n	8013e46 <_printf_float+0x2a6>
 8013e68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013e6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013e6c:	429a      	cmp	r2, r3
 8013e6e:	bfa8      	it	ge
 8013e70:	461a      	movge	r2, r3
 8013e72:	2a00      	cmp	r2, #0
 8013e74:	4691      	mov	r9, r2
 8013e76:	dd07      	ble.n	8013e88 <_printf_float+0x2e8>
 8013e78:	4613      	mov	r3, r2
 8013e7a:	4631      	mov	r1, r6
 8013e7c:	4642      	mov	r2, r8
 8013e7e:	4628      	mov	r0, r5
 8013e80:	47b8      	blx	r7
 8013e82:	3001      	adds	r0, #1
 8013e84:	f43f aee9 	beq.w	8013c5a <_printf_float+0xba>
 8013e88:	f104 031a 	add.w	r3, r4, #26
 8013e8c:	f04f 0b00 	mov.w	fp, #0
 8013e90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013e94:	9306      	str	r3, [sp, #24]
 8013e96:	e015      	b.n	8013ec4 <_printf_float+0x324>
 8013e98:	7fefffff 	.word	0x7fefffff
 8013e9c:	080185fc 	.word	0x080185fc
 8013ea0:	080185f8 	.word	0x080185f8
 8013ea4:	08018604 	.word	0x08018604
 8013ea8:	08018600 	.word	0x08018600
 8013eac:	08018823 	.word	0x08018823
 8013eb0:	2301      	movs	r3, #1
 8013eb2:	9a06      	ldr	r2, [sp, #24]
 8013eb4:	4631      	mov	r1, r6
 8013eb6:	4628      	mov	r0, r5
 8013eb8:	47b8      	blx	r7
 8013eba:	3001      	adds	r0, #1
 8013ebc:	f43f aecd 	beq.w	8013c5a <_printf_float+0xba>
 8013ec0:	f10b 0b01 	add.w	fp, fp, #1
 8013ec4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8013ec8:	ebaa 0309 	sub.w	r3, sl, r9
 8013ecc:	455b      	cmp	r3, fp
 8013ece:	dcef      	bgt.n	8013eb0 <_printf_float+0x310>
 8013ed0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013ed4:	429a      	cmp	r2, r3
 8013ed6:	44d0      	add	r8, sl
 8013ed8:	db15      	blt.n	8013f06 <_printf_float+0x366>
 8013eda:	6823      	ldr	r3, [r4, #0]
 8013edc:	07da      	lsls	r2, r3, #31
 8013ede:	d412      	bmi.n	8013f06 <_printf_float+0x366>
 8013ee0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ee2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013ee4:	eba3 020a 	sub.w	r2, r3, sl
 8013ee8:	eba3 0a01 	sub.w	sl, r3, r1
 8013eec:	4592      	cmp	sl, r2
 8013eee:	bfa8      	it	ge
 8013ef0:	4692      	movge	sl, r2
 8013ef2:	f1ba 0f00 	cmp.w	sl, #0
 8013ef6:	dc0e      	bgt.n	8013f16 <_printf_float+0x376>
 8013ef8:	f04f 0800 	mov.w	r8, #0
 8013efc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013f00:	f104 091a 	add.w	r9, r4, #26
 8013f04:	e019      	b.n	8013f3a <_printf_float+0x39a>
 8013f06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013f0a:	4631      	mov	r1, r6
 8013f0c:	4628      	mov	r0, r5
 8013f0e:	47b8      	blx	r7
 8013f10:	3001      	adds	r0, #1
 8013f12:	d1e5      	bne.n	8013ee0 <_printf_float+0x340>
 8013f14:	e6a1      	b.n	8013c5a <_printf_float+0xba>
 8013f16:	4653      	mov	r3, sl
 8013f18:	4642      	mov	r2, r8
 8013f1a:	4631      	mov	r1, r6
 8013f1c:	4628      	mov	r0, r5
 8013f1e:	47b8      	blx	r7
 8013f20:	3001      	adds	r0, #1
 8013f22:	d1e9      	bne.n	8013ef8 <_printf_float+0x358>
 8013f24:	e699      	b.n	8013c5a <_printf_float+0xba>
 8013f26:	2301      	movs	r3, #1
 8013f28:	464a      	mov	r2, r9
 8013f2a:	4631      	mov	r1, r6
 8013f2c:	4628      	mov	r0, r5
 8013f2e:	47b8      	blx	r7
 8013f30:	3001      	adds	r0, #1
 8013f32:	f43f ae92 	beq.w	8013c5a <_printf_float+0xba>
 8013f36:	f108 0801 	add.w	r8, r8, #1
 8013f3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013f3e:	1a9b      	subs	r3, r3, r2
 8013f40:	eba3 030a 	sub.w	r3, r3, sl
 8013f44:	4543      	cmp	r3, r8
 8013f46:	dcee      	bgt.n	8013f26 <_printf_float+0x386>
 8013f48:	e74a      	b.n	8013de0 <_printf_float+0x240>
 8013f4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013f4c:	2a01      	cmp	r2, #1
 8013f4e:	dc01      	bgt.n	8013f54 <_printf_float+0x3b4>
 8013f50:	07db      	lsls	r3, r3, #31
 8013f52:	d53a      	bpl.n	8013fca <_printf_float+0x42a>
 8013f54:	2301      	movs	r3, #1
 8013f56:	4642      	mov	r2, r8
 8013f58:	4631      	mov	r1, r6
 8013f5a:	4628      	mov	r0, r5
 8013f5c:	47b8      	blx	r7
 8013f5e:	3001      	adds	r0, #1
 8013f60:	f43f ae7b 	beq.w	8013c5a <_printf_float+0xba>
 8013f64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013f68:	4631      	mov	r1, r6
 8013f6a:	4628      	mov	r0, r5
 8013f6c:	47b8      	blx	r7
 8013f6e:	3001      	adds	r0, #1
 8013f70:	f108 0801 	add.w	r8, r8, #1
 8013f74:	f43f ae71 	beq.w	8013c5a <_printf_float+0xba>
 8013f78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013f7a:	2200      	movs	r2, #0
 8013f7c:	f103 3aff 	add.w	sl, r3, #4294967295
 8013f80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013f84:	2300      	movs	r3, #0
 8013f86:	f7ec fdb7 	bl	8000af8 <__aeabi_dcmpeq>
 8013f8a:	b9c8      	cbnz	r0, 8013fc0 <_printf_float+0x420>
 8013f8c:	4653      	mov	r3, sl
 8013f8e:	4642      	mov	r2, r8
 8013f90:	4631      	mov	r1, r6
 8013f92:	4628      	mov	r0, r5
 8013f94:	47b8      	blx	r7
 8013f96:	3001      	adds	r0, #1
 8013f98:	d10e      	bne.n	8013fb8 <_printf_float+0x418>
 8013f9a:	e65e      	b.n	8013c5a <_printf_float+0xba>
 8013f9c:	2301      	movs	r3, #1
 8013f9e:	4652      	mov	r2, sl
 8013fa0:	4631      	mov	r1, r6
 8013fa2:	4628      	mov	r0, r5
 8013fa4:	47b8      	blx	r7
 8013fa6:	3001      	adds	r0, #1
 8013fa8:	f43f ae57 	beq.w	8013c5a <_printf_float+0xba>
 8013fac:	f108 0801 	add.w	r8, r8, #1
 8013fb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013fb2:	3b01      	subs	r3, #1
 8013fb4:	4543      	cmp	r3, r8
 8013fb6:	dcf1      	bgt.n	8013f9c <_printf_float+0x3fc>
 8013fb8:	464b      	mov	r3, r9
 8013fba:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013fbe:	e6de      	b.n	8013d7e <_printf_float+0x1de>
 8013fc0:	f04f 0800 	mov.w	r8, #0
 8013fc4:	f104 0a1a 	add.w	sl, r4, #26
 8013fc8:	e7f2      	b.n	8013fb0 <_printf_float+0x410>
 8013fca:	2301      	movs	r3, #1
 8013fcc:	e7df      	b.n	8013f8e <_printf_float+0x3ee>
 8013fce:	2301      	movs	r3, #1
 8013fd0:	464a      	mov	r2, r9
 8013fd2:	4631      	mov	r1, r6
 8013fd4:	4628      	mov	r0, r5
 8013fd6:	47b8      	blx	r7
 8013fd8:	3001      	adds	r0, #1
 8013fda:	f43f ae3e 	beq.w	8013c5a <_printf_float+0xba>
 8013fde:	f108 0801 	add.w	r8, r8, #1
 8013fe2:	68e3      	ldr	r3, [r4, #12]
 8013fe4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013fe6:	1a9b      	subs	r3, r3, r2
 8013fe8:	4543      	cmp	r3, r8
 8013fea:	dcf0      	bgt.n	8013fce <_printf_float+0x42e>
 8013fec:	e6fc      	b.n	8013de8 <_printf_float+0x248>
 8013fee:	f04f 0800 	mov.w	r8, #0
 8013ff2:	f104 0919 	add.w	r9, r4, #25
 8013ff6:	e7f4      	b.n	8013fe2 <_printf_float+0x442>
 8013ff8:	2900      	cmp	r1, #0
 8013ffa:	f43f ae8b 	beq.w	8013d14 <_printf_float+0x174>
 8013ffe:	2300      	movs	r3, #0
 8014000:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8014004:	ab09      	add	r3, sp, #36	; 0x24
 8014006:	9300      	str	r3, [sp, #0]
 8014008:	ec49 8b10 	vmov	d0, r8, r9
 801400c:	6022      	str	r2, [r4, #0]
 801400e:	f8cd a004 	str.w	sl, [sp, #4]
 8014012:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014016:	4628      	mov	r0, r5
 8014018:	f7ff fd2d 	bl	8013a76 <__cvt>
 801401c:	4680      	mov	r8, r0
 801401e:	e648      	b.n	8013cb2 <_printf_float+0x112>

08014020 <_printf_common>:
 8014020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014024:	4691      	mov	r9, r2
 8014026:	461f      	mov	r7, r3
 8014028:	688a      	ldr	r2, [r1, #8]
 801402a:	690b      	ldr	r3, [r1, #16]
 801402c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014030:	4293      	cmp	r3, r2
 8014032:	bfb8      	it	lt
 8014034:	4613      	movlt	r3, r2
 8014036:	f8c9 3000 	str.w	r3, [r9]
 801403a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801403e:	4606      	mov	r6, r0
 8014040:	460c      	mov	r4, r1
 8014042:	b112      	cbz	r2, 801404a <_printf_common+0x2a>
 8014044:	3301      	adds	r3, #1
 8014046:	f8c9 3000 	str.w	r3, [r9]
 801404a:	6823      	ldr	r3, [r4, #0]
 801404c:	0699      	lsls	r1, r3, #26
 801404e:	bf42      	ittt	mi
 8014050:	f8d9 3000 	ldrmi.w	r3, [r9]
 8014054:	3302      	addmi	r3, #2
 8014056:	f8c9 3000 	strmi.w	r3, [r9]
 801405a:	6825      	ldr	r5, [r4, #0]
 801405c:	f015 0506 	ands.w	r5, r5, #6
 8014060:	d107      	bne.n	8014072 <_printf_common+0x52>
 8014062:	f104 0a19 	add.w	sl, r4, #25
 8014066:	68e3      	ldr	r3, [r4, #12]
 8014068:	f8d9 2000 	ldr.w	r2, [r9]
 801406c:	1a9b      	subs	r3, r3, r2
 801406e:	42ab      	cmp	r3, r5
 8014070:	dc28      	bgt.n	80140c4 <_printf_common+0xa4>
 8014072:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8014076:	6822      	ldr	r2, [r4, #0]
 8014078:	3300      	adds	r3, #0
 801407a:	bf18      	it	ne
 801407c:	2301      	movne	r3, #1
 801407e:	0692      	lsls	r2, r2, #26
 8014080:	d42d      	bmi.n	80140de <_printf_common+0xbe>
 8014082:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014086:	4639      	mov	r1, r7
 8014088:	4630      	mov	r0, r6
 801408a:	47c0      	blx	r8
 801408c:	3001      	adds	r0, #1
 801408e:	d020      	beq.n	80140d2 <_printf_common+0xb2>
 8014090:	6823      	ldr	r3, [r4, #0]
 8014092:	68e5      	ldr	r5, [r4, #12]
 8014094:	f8d9 2000 	ldr.w	r2, [r9]
 8014098:	f003 0306 	and.w	r3, r3, #6
 801409c:	2b04      	cmp	r3, #4
 801409e:	bf08      	it	eq
 80140a0:	1aad      	subeq	r5, r5, r2
 80140a2:	68a3      	ldr	r3, [r4, #8]
 80140a4:	6922      	ldr	r2, [r4, #16]
 80140a6:	bf0c      	ite	eq
 80140a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80140ac:	2500      	movne	r5, #0
 80140ae:	4293      	cmp	r3, r2
 80140b0:	bfc4      	itt	gt
 80140b2:	1a9b      	subgt	r3, r3, r2
 80140b4:	18ed      	addgt	r5, r5, r3
 80140b6:	f04f 0900 	mov.w	r9, #0
 80140ba:	341a      	adds	r4, #26
 80140bc:	454d      	cmp	r5, r9
 80140be:	d11a      	bne.n	80140f6 <_printf_common+0xd6>
 80140c0:	2000      	movs	r0, #0
 80140c2:	e008      	b.n	80140d6 <_printf_common+0xb6>
 80140c4:	2301      	movs	r3, #1
 80140c6:	4652      	mov	r2, sl
 80140c8:	4639      	mov	r1, r7
 80140ca:	4630      	mov	r0, r6
 80140cc:	47c0      	blx	r8
 80140ce:	3001      	adds	r0, #1
 80140d0:	d103      	bne.n	80140da <_printf_common+0xba>
 80140d2:	f04f 30ff 	mov.w	r0, #4294967295
 80140d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80140da:	3501      	adds	r5, #1
 80140dc:	e7c3      	b.n	8014066 <_printf_common+0x46>
 80140de:	18e1      	adds	r1, r4, r3
 80140e0:	1c5a      	adds	r2, r3, #1
 80140e2:	2030      	movs	r0, #48	; 0x30
 80140e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80140e8:	4422      	add	r2, r4
 80140ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80140ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80140f2:	3302      	adds	r3, #2
 80140f4:	e7c5      	b.n	8014082 <_printf_common+0x62>
 80140f6:	2301      	movs	r3, #1
 80140f8:	4622      	mov	r2, r4
 80140fa:	4639      	mov	r1, r7
 80140fc:	4630      	mov	r0, r6
 80140fe:	47c0      	blx	r8
 8014100:	3001      	adds	r0, #1
 8014102:	d0e6      	beq.n	80140d2 <_printf_common+0xb2>
 8014104:	f109 0901 	add.w	r9, r9, #1
 8014108:	e7d8      	b.n	80140bc <_printf_common+0x9c>
	...

0801410c <_printf_i>:
 801410c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014110:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8014114:	460c      	mov	r4, r1
 8014116:	7e09      	ldrb	r1, [r1, #24]
 8014118:	b085      	sub	sp, #20
 801411a:	296e      	cmp	r1, #110	; 0x6e
 801411c:	4617      	mov	r7, r2
 801411e:	4606      	mov	r6, r0
 8014120:	4698      	mov	r8, r3
 8014122:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014124:	f000 80b3 	beq.w	801428e <_printf_i+0x182>
 8014128:	d822      	bhi.n	8014170 <_printf_i+0x64>
 801412a:	2963      	cmp	r1, #99	; 0x63
 801412c:	d036      	beq.n	801419c <_printf_i+0x90>
 801412e:	d80a      	bhi.n	8014146 <_printf_i+0x3a>
 8014130:	2900      	cmp	r1, #0
 8014132:	f000 80b9 	beq.w	80142a8 <_printf_i+0x19c>
 8014136:	2958      	cmp	r1, #88	; 0x58
 8014138:	f000 8083 	beq.w	8014242 <_printf_i+0x136>
 801413c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014140:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8014144:	e032      	b.n	80141ac <_printf_i+0xa0>
 8014146:	2964      	cmp	r1, #100	; 0x64
 8014148:	d001      	beq.n	801414e <_printf_i+0x42>
 801414a:	2969      	cmp	r1, #105	; 0x69
 801414c:	d1f6      	bne.n	801413c <_printf_i+0x30>
 801414e:	6820      	ldr	r0, [r4, #0]
 8014150:	6813      	ldr	r3, [r2, #0]
 8014152:	0605      	lsls	r5, r0, #24
 8014154:	f103 0104 	add.w	r1, r3, #4
 8014158:	d52a      	bpl.n	80141b0 <_printf_i+0xa4>
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	6011      	str	r1, [r2, #0]
 801415e:	2b00      	cmp	r3, #0
 8014160:	da03      	bge.n	801416a <_printf_i+0x5e>
 8014162:	222d      	movs	r2, #45	; 0x2d
 8014164:	425b      	negs	r3, r3
 8014166:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801416a:	486f      	ldr	r0, [pc, #444]	; (8014328 <_printf_i+0x21c>)
 801416c:	220a      	movs	r2, #10
 801416e:	e039      	b.n	80141e4 <_printf_i+0xd8>
 8014170:	2973      	cmp	r1, #115	; 0x73
 8014172:	f000 809d 	beq.w	80142b0 <_printf_i+0x1a4>
 8014176:	d808      	bhi.n	801418a <_printf_i+0x7e>
 8014178:	296f      	cmp	r1, #111	; 0x6f
 801417a:	d020      	beq.n	80141be <_printf_i+0xb2>
 801417c:	2970      	cmp	r1, #112	; 0x70
 801417e:	d1dd      	bne.n	801413c <_printf_i+0x30>
 8014180:	6823      	ldr	r3, [r4, #0]
 8014182:	f043 0320 	orr.w	r3, r3, #32
 8014186:	6023      	str	r3, [r4, #0]
 8014188:	e003      	b.n	8014192 <_printf_i+0x86>
 801418a:	2975      	cmp	r1, #117	; 0x75
 801418c:	d017      	beq.n	80141be <_printf_i+0xb2>
 801418e:	2978      	cmp	r1, #120	; 0x78
 8014190:	d1d4      	bne.n	801413c <_printf_i+0x30>
 8014192:	2378      	movs	r3, #120	; 0x78
 8014194:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014198:	4864      	ldr	r0, [pc, #400]	; (801432c <_printf_i+0x220>)
 801419a:	e055      	b.n	8014248 <_printf_i+0x13c>
 801419c:	6813      	ldr	r3, [r2, #0]
 801419e:	1d19      	adds	r1, r3, #4
 80141a0:	681b      	ldr	r3, [r3, #0]
 80141a2:	6011      	str	r1, [r2, #0]
 80141a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80141a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80141ac:	2301      	movs	r3, #1
 80141ae:	e08c      	b.n	80142ca <_printf_i+0x1be>
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	6011      	str	r1, [r2, #0]
 80141b4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80141b8:	bf18      	it	ne
 80141ba:	b21b      	sxthne	r3, r3
 80141bc:	e7cf      	b.n	801415e <_printf_i+0x52>
 80141be:	6813      	ldr	r3, [r2, #0]
 80141c0:	6825      	ldr	r5, [r4, #0]
 80141c2:	1d18      	adds	r0, r3, #4
 80141c4:	6010      	str	r0, [r2, #0]
 80141c6:	0628      	lsls	r0, r5, #24
 80141c8:	d501      	bpl.n	80141ce <_printf_i+0xc2>
 80141ca:	681b      	ldr	r3, [r3, #0]
 80141cc:	e002      	b.n	80141d4 <_printf_i+0xc8>
 80141ce:	0668      	lsls	r0, r5, #25
 80141d0:	d5fb      	bpl.n	80141ca <_printf_i+0xbe>
 80141d2:	881b      	ldrh	r3, [r3, #0]
 80141d4:	4854      	ldr	r0, [pc, #336]	; (8014328 <_printf_i+0x21c>)
 80141d6:	296f      	cmp	r1, #111	; 0x6f
 80141d8:	bf14      	ite	ne
 80141da:	220a      	movne	r2, #10
 80141dc:	2208      	moveq	r2, #8
 80141de:	2100      	movs	r1, #0
 80141e0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80141e4:	6865      	ldr	r5, [r4, #4]
 80141e6:	60a5      	str	r5, [r4, #8]
 80141e8:	2d00      	cmp	r5, #0
 80141ea:	f2c0 8095 	blt.w	8014318 <_printf_i+0x20c>
 80141ee:	6821      	ldr	r1, [r4, #0]
 80141f0:	f021 0104 	bic.w	r1, r1, #4
 80141f4:	6021      	str	r1, [r4, #0]
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d13d      	bne.n	8014276 <_printf_i+0x16a>
 80141fa:	2d00      	cmp	r5, #0
 80141fc:	f040 808e 	bne.w	801431c <_printf_i+0x210>
 8014200:	4665      	mov	r5, ip
 8014202:	2a08      	cmp	r2, #8
 8014204:	d10b      	bne.n	801421e <_printf_i+0x112>
 8014206:	6823      	ldr	r3, [r4, #0]
 8014208:	07db      	lsls	r3, r3, #31
 801420a:	d508      	bpl.n	801421e <_printf_i+0x112>
 801420c:	6923      	ldr	r3, [r4, #16]
 801420e:	6862      	ldr	r2, [r4, #4]
 8014210:	429a      	cmp	r2, r3
 8014212:	bfde      	ittt	le
 8014214:	2330      	movle	r3, #48	; 0x30
 8014216:	f805 3c01 	strble.w	r3, [r5, #-1]
 801421a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801421e:	ebac 0305 	sub.w	r3, ip, r5
 8014222:	6123      	str	r3, [r4, #16]
 8014224:	f8cd 8000 	str.w	r8, [sp]
 8014228:	463b      	mov	r3, r7
 801422a:	aa03      	add	r2, sp, #12
 801422c:	4621      	mov	r1, r4
 801422e:	4630      	mov	r0, r6
 8014230:	f7ff fef6 	bl	8014020 <_printf_common>
 8014234:	3001      	adds	r0, #1
 8014236:	d14d      	bne.n	80142d4 <_printf_i+0x1c8>
 8014238:	f04f 30ff 	mov.w	r0, #4294967295
 801423c:	b005      	add	sp, #20
 801423e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014242:	4839      	ldr	r0, [pc, #228]	; (8014328 <_printf_i+0x21c>)
 8014244:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8014248:	6813      	ldr	r3, [r2, #0]
 801424a:	6821      	ldr	r1, [r4, #0]
 801424c:	1d1d      	adds	r5, r3, #4
 801424e:	681b      	ldr	r3, [r3, #0]
 8014250:	6015      	str	r5, [r2, #0]
 8014252:	060a      	lsls	r2, r1, #24
 8014254:	d50b      	bpl.n	801426e <_printf_i+0x162>
 8014256:	07ca      	lsls	r2, r1, #31
 8014258:	bf44      	itt	mi
 801425a:	f041 0120 	orrmi.w	r1, r1, #32
 801425e:	6021      	strmi	r1, [r4, #0]
 8014260:	b91b      	cbnz	r3, 801426a <_printf_i+0x15e>
 8014262:	6822      	ldr	r2, [r4, #0]
 8014264:	f022 0220 	bic.w	r2, r2, #32
 8014268:	6022      	str	r2, [r4, #0]
 801426a:	2210      	movs	r2, #16
 801426c:	e7b7      	b.n	80141de <_printf_i+0xd2>
 801426e:	064d      	lsls	r5, r1, #25
 8014270:	bf48      	it	mi
 8014272:	b29b      	uxthmi	r3, r3
 8014274:	e7ef      	b.n	8014256 <_printf_i+0x14a>
 8014276:	4665      	mov	r5, ip
 8014278:	fbb3 f1f2 	udiv	r1, r3, r2
 801427c:	fb02 3311 	mls	r3, r2, r1, r3
 8014280:	5cc3      	ldrb	r3, [r0, r3]
 8014282:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8014286:	460b      	mov	r3, r1
 8014288:	2900      	cmp	r1, #0
 801428a:	d1f5      	bne.n	8014278 <_printf_i+0x16c>
 801428c:	e7b9      	b.n	8014202 <_printf_i+0xf6>
 801428e:	6813      	ldr	r3, [r2, #0]
 8014290:	6825      	ldr	r5, [r4, #0]
 8014292:	6961      	ldr	r1, [r4, #20]
 8014294:	1d18      	adds	r0, r3, #4
 8014296:	6010      	str	r0, [r2, #0]
 8014298:	0628      	lsls	r0, r5, #24
 801429a:	681b      	ldr	r3, [r3, #0]
 801429c:	d501      	bpl.n	80142a2 <_printf_i+0x196>
 801429e:	6019      	str	r1, [r3, #0]
 80142a0:	e002      	b.n	80142a8 <_printf_i+0x19c>
 80142a2:	066a      	lsls	r2, r5, #25
 80142a4:	d5fb      	bpl.n	801429e <_printf_i+0x192>
 80142a6:	8019      	strh	r1, [r3, #0]
 80142a8:	2300      	movs	r3, #0
 80142aa:	6123      	str	r3, [r4, #16]
 80142ac:	4665      	mov	r5, ip
 80142ae:	e7b9      	b.n	8014224 <_printf_i+0x118>
 80142b0:	6813      	ldr	r3, [r2, #0]
 80142b2:	1d19      	adds	r1, r3, #4
 80142b4:	6011      	str	r1, [r2, #0]
 80142b6:	681d      	ldr	r5, [r3, #0]
 80142b8:	6862      	ldr	r2, [r4, #4]
 80142ba:	2100      	movs	r1, #0
 80142bc:	4628      	mov	r0, r5
 80142be:	f7eb ffa7 	bl	8000210 <memchr>
 80142c2:	b108      	cbz	r0, 80142c8 <_printf_i+0x1bc>
 80142c4:	1b40      	subs	r0, r0, r5
 80142c6:	6060      	str	r0, [r4, #4]
 80142c8:	6863      	ldr	r3, [r4, #4]
 80142ca:	6123      	str	r3, [r4, #16]
 80142cc:	2300      	movs	r3, #0
 80142ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80142d2:	e7a7      	b.n	8014224 <_printf_i+0x118>
 80142d4:	6923      	ldr	r3, [r4, #16]
 80142d6:	462a      	mov	r2, r5
 80142d8:	4639      	mov	r1, r7
 80142da:	4630      	mov	r0, r6
 80142dc:	47c0      	blx	r8
 80142de:	3001      	adds	r0, #1
 80142e0:	d0aa      	beq.n	8014238 <_printf_i+0x12c>
 80142e2:	6823      	ldr	r3, [r4, #0]
 80142e4:	079b      	lsls	r3, r3, #30
 80142e6:	d413      	bmi.n	8014310 <_printf_i+0x204>
 80142e8:	68e0      	ldr	r0, [r4, #12]
 80142ea:	9b03      	ldr	r3, [sp, #12]
 80142ec:	4298      	cmp	r0, r3
 80142ee:	bfb8      	it	lt
 80142f0:	4618      	movlt	r0, r3
 80142f2:	e7a3      	b.n	801423c <_printf_i+0x130>
 80142f4:	2301      	movs	r3, #1
 80142f6:	464a      	mov	r2, r9
 80142f8:	4639      	mov	r1, r7
 80142fa:	4630      	mov	r0, r6
 80142fc:	47c0      	blx	r8
 80142fe:	3001      	adds	r0, #1
 8014300:	d09a      	beq.n	8014238 <_printf_i+0x12c>
 8014302:	3501      	adds	r5, #1
 8014304:	68e3      	ldr	r3, [r4, #12]
 8014306:	9a03      	ldr	r2, [sp, #12]
 8014308:	1a9b      	subs	r3, r3, r2
 801430a:	42ab      	cmp	r3, r5
 801430c:	dcf2      	bgt.n	80142f4 <_printf_i+0x1e8>
 801430e:	e7eb      	b.n	80142e8 <_printf_i+0x1dc>
 8014310:	2500      	movs	r5, #0
 8014312:	f104 0919 	add.w	r9, r4, #25
 8014316:	e7f5      	b.n	8014304 <_printf_i+0x1f8>
 8014318:	2b00      	cmp	r3, #0
 801431a:	d1ac      	bne.n	8014276 <_printf_i+0x16a>
 801431c:	7803      	ldrb	r3, [r0, #0]
 801431e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014322:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014326:	e76c      	b.n	8014202 <_printf_i+0xf6>
 8014328:	08018608 	.word	0x08018608
 801432c:	08018619 	.word	0x08018619

08014330 <_scanf_float>:
 8014330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014334:	469a      	mov	sl, r3
 8014336:	688b      	ldr	r3, [r1, #8]
 8014338:	4616      	mov	r6, r2
 801433a:	1e5a      	subs	r2, r3, #1
 801433c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8014340:	b087      	sub	sp, #28
 8014342:	bf83      	ittte	hi
 8014344:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8014348:	189b      	addhi	r3, r3, r2
 801434a:	9301      	strhi	r3, [sp, #4]
 801434c:	2300      	movls	r3, #0
 801434e:	bf86      	itte	hi
 8014350:	f240 135d 	movwhi	r3, #349	; 0x15d
 8014354:	608b      	strhi	r3, [r1, #8]
 8014356:	9301      	strls	r3, [sp, #4]
 8014358:	680b      	ldr	r3, [r1, #0]
 801435a:	4688      	mov	r8, r1
 801435c:	f04f 0b00 	mov.w	fp, #0
 8014360:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8014364:	f848 3b1c 	str.w	r3, [r8], #28
 8014368:	e9cd bb03 	strd	fp, fp, [sp, #12]
 801436c:	4607      	mov	r7, r0
 801436e:	460c      	mov	r4, r1
 8014370:	4645      	mov	r5, r8
 8014372:	465a      	mov	r2, fp
 8014374:	46d9      	mov	r9, fp
 8014376:	f8cd b008 	str.w	fp, [sp, #8]
 801437a:	68a1      	ldr	r1, [r4, #8]
 801437c:	b181      	cbz	r1, 80143a0 <_scanf_float+0x70>
 801437e:	6833      	ldr	r3, [r6, #0]
 8014380:	781b      	ldrb	r3, [r3, #0]
 8014382:	2b49      	cmp	r3, #73	; 0x49
 8014384:	d071      	beq.n	801446a <_scanf_float+0x13a>
 8014386:	d84d      	bhi.n	8014424 <_scanf_float+0xf4>
 8014388:	2b39      	cmp	r3, #57	; 0x39
 801438a:	d840      	bhi.n	801440e <_scanf_float+0xde>
 801438c:	2b31      	cmp	r3, #49	; 0x31
 801438e:	f080 8088 	bcs.w	80144a2 <_scanf_float+0x172>
 8014392:	2b2d      	cmp	r3, #45	; 0x2d
 8014394:	f000 8090 	beq.w	80144b8 <_scanf_float+0x188>
 8014398:	d815      	bhi.n	80143c6 <_scanf_float+0x96>
 801439a:	2b2b      	cmp	r3, #43	; 0x2b
 801439c:	f000 808c 	beq.w	80144b8 <_scanf_float+0x188>
 80143a0:	f1b9 0f00 	cmp.w	r9, #0
 80143a4:	d003      	beq.n	80143ae <_scanf_float+0x7e>
 80143a6:	6823      	ldr	r3, [r4, #0]
 80143a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80143ac:	6023      	str	r3, [r4, #0]
 80143ae:	3a01      	subs	r2, #1
 80143b0:	2a01      	cmp	r2, #1
 80143b2:	f200 80ea 	bhi.w	801458a <_scanf_float+0x25a>
 80143b6:	4545      	cmp	r5, r8
 80143b8:	f200 80dc 	bhi.w	8014574 <_scanf_float+0x244>
 80143bc:	2601      	movs	r6, #1
 80143be:	4630      	mov	r0, r6
 80143c0:	b007      	add	sp, #28
 80143c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143c6:	2b2e      	cmp	r3, #46	; 0x2e
 80143c8:	f000 809f 	beq.w	801450a <_scanf_float+0x1da>
 80143cc:	2b30      	cmp	r3, #48	; 0x30
 80143ce:	d1e7      	bne.n	80143a0 <_scanf_float+0x70>
 80143d0:	6820      	ldr	r0, [r4, #0]
 80143d2:	f410 7f80 	tst.w	r0, #256	; 0x100
 80143d6:	d064      	beq.n	80144a2 <_scanf_float+0x172>
 80143d8:	9b01      	ldr	r3, [sp, #4]
 80143da:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80143de:	6020      	str	r0, [r4, #0]
 80143e0:	f109 0901 	add.w	r9, r9, #1
 80143e4:	b11b      	cbz	r3, 80143ee <_scanf_float+0xbe>
 80143e6:	3b01      	subs	r3, #1
 80143e8:	3101      	adds	r1, #1
 80143ea:	9301      	str	r3, [sp, #4]
 80143ec:	60a1      	str	r1, [r4, #8]
 80143ee:	68a3      	ldr	r3, [r4, #8]
 80143f0:	3b01      	subs	r3, #1
 80143f2:	60a3      	str	r3, [r4, #8]
 80143f4:	6923      	ldr	r3, [r4, #16]
 80143f6:	3301      	adds	r3, #1
 80143f8:	6123      	str	r3, [r4, #16]
 80143fa:	6873      	ldr	r3, [r6, #4]
 80143fc:	3b01      	subs	r3, #1
 80143fe:	2b00      	cmp	r3, #0
 8014400:	6073      	str	r3, [r6, #4]
 8014402:	f340 80ac 	ble.w	801455e <_scanf_float+0x22e>
 8014406:	6833      	ldr	r3, [r6, #0]
 8014408:	3301      	adds	r3, #1
 801440a:	6033      	str	r3, [r6, #0]
 801440c:	e7b5      	b.n	801437a <_scanf_float+0x4a>
 801440e:	2b45      	cmp	r3, #69	; 0x45
 8014410:	f000 8085 	beq.w	801451e <_scanf_float+0x1ee>
 8014414:	2b46      	cmp	r3, #70	; 0x46
 8014416:	d06a      	beq.n	80144ee <_scanf_float+0x1be>
 8014418:	2b41      	cmp	r3, #65	; 0x41
 801441a:	d1c1      	bne.n	80143a0 <_scanf_float+0x70>
 801441c:	2a01      	cmp	r2, #1
 801441e:	d1bf      	bne.n	80143a0 <_scanf_float+0x70>
 8014420:	2202      	movs	r2, #2
 8014422:	e046      	b.n	80144b2 <_scanf_float+0x182>
 8014424:	2b65      	cmp	r3, #101	; 0x65
 8014426:	d07a      	beq.n	801451e <_scanf_float+0x1ee>
 8014428:	d818      	bhi.n	801445c <_scanf_float+0x12c>
 801442a:	2b54      	cmp	r3, #84	; 0x54
 801442c:	d066      	beq.n	80144fc <_scanf_float+0x1cc>
 801442e:	d811      	bhi.n	8014454 <_scanf_float+0x124>
 8014430:	2b4e      	cmp	r3, #78	; 0x4e
 8014432:	d1b5      	bne.n	80143a0 <_scanf_float+0x70>
 8014434:	2a00      	cmp	r2, #0
 8014436:	d146      	bne.n	80144c6 <_scanf_float+0x196>
 8014438:	f1b9 0f00 	cmp.w	r9, #0
 801443c:	d145      	bne.n	80144ca <_scanf_float+0x19a>
 801443e:	6821      	ldr	r1, [r4, #0]
 8014440:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8014444:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8014448:	d13f      	bne.n	80144ca <_scanf_float+0x19a>
 801444a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801444e:	6021      	str	r1, [r4, #0]
 8014450:	2201      	movs	r2, #1
 8014452:	e02e      	b.n	80144b2 <_scanf_float+0x182>
 8014454:	2b59      	cmp	r3, #89	; 0x59
 8014456:	d01e      	beq.n	8014496 <_scanf_float+0x166>
 8014458:	2b61      	cmp	r3, #97	; 0x61
 801445a:	e7de      	b.n	801441a <_scanf_float+0xea>
 801445c:	2b6e      	cmp	r3, #110	; 0x6e
 801445e:	d0e9      	beq.n	8014434 <_scanf_float+0x104>
 8014460:	d815      	bhi.n	801448e <_scanf_float+0x15e>
 8014462:	2b66      	cmp	r3, #102	; 0x66
 8014464:	d043      	beq.n	80144ee <_scanf_float+0x1be>
 8014466:	2b69      	cmp	r3, #105	; 0x69
 8014468:	d19a      	bne.n	80143a0 <_scanf_float+0x70>
 801446a:	f1bb 0f00 	cmp.w	fp, #0
 801446e:	d138      	bne.n	80144e2 <_scanf_float+0x1b2>
 8014470:	f1b9 0f00 	cmp.w	r9, #0
 8014474:	d197      	bne.n	80143a6 <_scanf_float+0x76>
 8014476:	6821      	ldr	r1, [r4, #0]
 8014478:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801447c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8014480:	d195      	bne.n	80143ae <_scanf_float+0x7e>
 8014482:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8014486:	6021      	str	r1, [r4, #0]
 8014488:	f04f 0b01 	mov.w	fp, #1
 801448c:	e011      	b.n	80144b2 <_scanf_float+0x182>
 801448e:	2b74      	cmp	r3, #116	; 0x74
 8014490:	d034      	beq.n	80144fc <_scanf_float+0x1cc>
 8014492:	2b79      	cmp	r3, #121	; 0x79
 8014494:	d184      	bne.n	80143a0 <_scanf_float+0x70>
 8014496:	f1bb 0f07 	cmp.w	fp, #7
 801449a:	d181      	bne.n	80143a0 <_scanf_float+0x70>
 801449c:	f04f 0b08 	mov.w	fp, #8
 80144a0:	e007      	b.n	80144b2 <_scanf_float+0x182>
 80144a2:	eb12 0f0b 	cmn.w	r2, fp
 80144a6:	f47f af7b 	bne.w	80143a0 <_scanf_float+0x70>
 80144aa:	6821      	ldr	r1, [r4, #0]
 80144ac:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80144b0:	6021      	str	r1, [r4, #0]
 80144b2:	702b      	strb	r3, [r5, #0]
 80144b4:	3501      	adds	r5, #1
 80144b6:	e79a      	b.n	80143ee <_scanf_float+0xbe>
 80144b8:	6821      	ldr	r1, [r4, #0]
 80144ba:	0608      	lsls	r0, r1, #24
 80144bc:	f57f af70 	bpl.w	80143a0 <_scanf_float+0x70>
 80144c0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80144c4:	e7f4      	b.n	80144b0 <_scanf_float+0x180>
 80144c6:	2a02      	cmp	r2, #2
 80144c8:	d047      	beq.n	801455a <_scanf_float+0x22a>
 80144ca:	f1bb 0f01 	cmp.w	fp, #1
 80144ce:	d003      	beq.n	80144d8 <_scanf_float+0x1a8>
 80144d0:	f1bb 0f04 	cmp.w	fp, #4
 80144d4:	f47f af64 	bne.w	80143a0 <_scanf_float+0x70>
 80144d8:	f10b 0b01 	add.w	fp, fp, #1
 80144dc:	fa5f fb8b 	uxtb.w	fp, fp
 80144e0:	e7e7      	b.n	80144b2 <_scanf_float+0x182>
 80144e2:	f1bb 0f03 	cmp.w	fp, #3
 80144e6:	d0f7      	beq.n	80144d8 <_scanf_float+0x1a8>
 80144e8:	f1bb 0f05 	cmp.w	fp, #5
 80144ec:	e7f2      	b.n	80144d4 <_scanf_float+0x1a4>
 80144ee:	f1bb 0f02 	cmp.w	fp, #2
 80144f2:	f47f af55 	bne.w	80143a0 <_scanf_float+0x70>
 80144f6:	f04f 0b03 	mov.w	fp, #3
 80144fa:	e7da      	b.n	80144b2 <_scanf_float+0x182>
 80144fc:	f1bb 0f06 	cmp.w	fp, #6
 8014500:	f47f af4e 	bne.w	80143a0 <_scanf_float+0x70>
 8014504:	f04f 0b07 	mov.w	fp, #7
 8014508:	e7d3      	b.n	80144b2 <_scanf_float+0x182>
 801450a:	6821      	ldr	r1, [r4, #0]
 801450c:	0588      	lsls	r0, r1, #22
 801450e:	f57f af47 	bpl.w	80143a0 <_scanf_float+0x70>
 8014512:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8014516:	6021      	str	r1, [r4, #0]
 8014518:	f8cd 9008 	str.w	r9, [sp, #8]
 801451c:	e7c9      	b.n	80144b2 <_scanf_float+0x182>
 801451e:	6821      	ldr	r1, [r4, #0]
 8014520:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8014524:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8014528:	d006      	beq.n	8014538 <_scanf_float+0x208>
 801452a:	0548      	lsls	r0, r1, #21
 801452c:	f57f af38 	bpl.w	80143a0 <_scanf_float+0x70>
 8014530:	f1b9 0f00 	cmp.w	r9, #0
 8014534:	f43f af3b 	beq.w	80143ae <_scanf_float+0x7e>
 8014538:	0588      	lsls	r0, r1, #22
 801453a:	bf58      	it	pl
 801453c:	9802      	ldrpl	r0, [sp, #8]
 801453e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8014542:	bf58      	it	pl
 8014544:	eba9 0000 	subpl.w	r0, r9, r0
 8014548:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 801454c:	bf58      	it	pl
 801454e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8014552:	6021      	str	r1, [r4, #0]
 8014554:	f04f 0900 	mov.w	r9, #0
 8014558:	e7ab      	b.n	80144b2 <_scanf_float+0x182>
 801455a:	2203      	movs	r2, #3
 801455c:	e7a9      	b.n	80144b2 <_scanf_float+0x182>
 801455e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014562:	9205      	str	r2, [sp, #20]
 8014564:	4631      	mov	r1, r6
 8014566:	4638      	mov	r0, r7
 8014568:	4798      	blx	r3
 801456a:	9a05      	ldr	r2, [sp, #20]
 801456c:	2800      	cmp	r0, #0
 801456e:	f43f af04 	beq.w	801437a <_scanf_float+0x4a>
 8014572:	e715      	b.n	80143a0 <_scanf_float+0x70>
 8014574:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014578:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801457c:	4632      	mov	r2, r6
 801457e:	4638      	mov	r0, r7
 8014580:	4798      	blx	r3
 8014582:	6923      	ldr	r3, [r4, #16]
 8014584:	3b01      	subs	r3, #1
 8014586:	6123      	str	r3, [r4, #16]
 8014588:	e715      	b.n	80143b6 <_scanf_float+0x86>
 801458a:	f10b 33ff 	add.w	r3, fp, #4294967295
 801458e:	2b06      	cmp	r3, #6
 8014590:	d80a      	bhi.n	80145a8 <_scanf_float+0x278>
 8014592:	f1bb 0f02 	cmp.w	fp, #2
 8014596:	d968      	bls.n	801466a <_scanf_float+0x33a>
 8014598:	f1ab 0b03 	sub.w	fp, fp, #3
 801459c:	fa5f fb8b 	uxtb.w	fp, fp
 80145a0:	eba5 0b0b 	sub.w	fp, r5, fp
 80145a4:	455d      	cmp	r5, fp
 80145a6:	d14b      	bne.n	8014640 <_scanf_float+0x310>
 80145a8:	6823      	ldr	r3, [r4, #0]
 80145aa:	05da      	lsls	r2, r3, #23
 80145ac:	d51f      	bpl.n	80145ee <_scanf_float+0x2be>
 80145ae:	055b      	lsls	r3, r3, #21
 80145b0:	d468      	bmi.n	8014684 <_scanf_float+0x354>
 80145b2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80145b6:	6923      	ldr	r3, [r4, #16]
 80145b8:	2965      	cmp	r1, #101	; 0x65
 80145ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80145be:	f105 3bff 	add.w	fp, r5, #4294967295
 80145c2:	6123      	str	r3, [r4, #16]
 80145c4:	d00d      	beq.n	80145e2 <_scanf_float+0x2b2>
 80145c6:	2945      	cmp	r1, #69	; 0x45
 80145c8:	d00b      	beq.n	80145e2 <_scanf_float+0x2b2>
 80145ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80145ce:	4632      	mov	r2, r6
 80145d0:	4638      	mov	r0, r7
 80145d2:	4798      	blx	r3
 80145d4:	6923      	ldr	r3, [r4, #16]
 80145d6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80145da:	3b01      	subs	r3, #1
 80145dc:	f1a5 0b02 	sub.w	fp, r5, #2
 80145e0:	6123      	str	r3, [r4, #16]
 80145e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80145e6:	4632      	mov	r2, r6
 80145e8:	4638      	mov	r0, r7
 80145ea:	4798      	blx	r3
 80145ec:	465d      	mov	r5, fp
 80145ee:	6826      	ldr	r6, [r4, #0]
 80145f0:	f016 0610 	ands.w	r6, r6, #16
 80145f4:	d17a      	bne.n	80146ec <_scanf_float+0x3bc>
 80145f6:	702e      	strb	r6, [r5, #0]
 80145f8:	6823      	ldr	r3, [r4, #0]
 80145fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80145fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014602:	d142      	bne.n	801468a <_scanf_float+0x35a>
 8014604:	9b02      	ldr	r3, [sp, #8]
 8014606:	eba9 0303 	sub.w	r3, r9, r3
 801460a:	425a      	negs	r2, r3
 801460c:	2b00      	cmp	r3, #0
 801460e:	d149      	bne.n	80146a4 <_scanf_float+0x374>
 8014610:	2200      	movs	r2, #0
 8014612:	4641      	mov	r1, r8
 8014614:	4638      	mov	r0, r7
 8014616:	f000 ff0b 	bl	8015430 <_strtod_r>
 801461a:	6825      	ldr	r5, [r4, #0]
 801461c:	f8da 3000 	ldr.w	r3, [sl]
 8014620:	f015 0f02 	tst.w	r5, #2
 8014624:	f103 0204 	add.w	r2, r3, #4
 8014628:	ec59 8b10 	vmov	r8, r9, d0
 801462c:	f8ca 2000 	str.w	r2, [sl]
 8014630:	d043      	beq.n	80146ba <_scanf_float+0x38a>
 8014632:	681b      	ldr	r3, [r3, #0]
 8014634:	e9c3 8900 	strd	r8, r9, [r3]
 8014638:	68e3      	ldr	r3, [r4, #12]
 801463a:	3301      	adds	r3, #1
 801463c:	60e3      	str	r3, [r4, #12]
 801463e:	e6be      	b.n	80143be <_scanf_float+0x8e>
 8014640:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014644:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8014648:	4632      	mov	r2, r6
 801464a:	4638      	mov	r0, r7
 801464c:	4798      	blx	r3
 801464e:	6923      	ldr	r3, [r4, #16]
 8014650:	3b01      	subs	r3, #1
 8014652:	6123      	str	r3, [r4, #16]
 8014654:	e7a6      	b.n	80145a4 <_scanf_float+0x274>
 8014656:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801465a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801465e:	4632      	mov	r2, r6
 8014660:	4638      	mov	r0, r7
 8014662:	4798      	blx	r3
 8014664:	6923      	ldr	r3, [r4, #16]
 8014666:	3b01      	subs	r3, #1
 8014668:	6123      	str	r3, [r4, #16]
 801466a:	4545      	cmp	r5, r8
 801466c:	d8f3      	bhi.n	8014656 <_scanf_float+0x326>
 801466e:	e6a5      	b.n	80143bc <_scanf_float+0x8c>
 8014670:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014674:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8014678:	4632      	mov	r2, r6
 801467a:	4638      	mov	r0, r7
 801467c:	4798      	blx	r3
 801467e:	6923      	ldr	r3, [r4, #16]
 8014680:	3b01      	subs	r3, #1
 8014682:	6123      	str	r3, [r4, #16]
 8014684:	4545      	cmp	r5, r8
 8014686:	d8f3      	bhi.n	8014670 <_scanf_float+0x340>
 8014688:	e698      	b.n	80143bc <_scanf_float+0x8c>
 801468a:	9b03      	ldr	r3, [sp, #12]
 801468c:	2b00      	cmp	r3, #0
 801468e:	d0bf      	beq.n	8014610 <_scanf_float+0x2e0>
 8014690:	9904      	ldr	r1, [sp, #16]
 8014692:	230a      	movs	r3, #10
 8014694:	4632      	mov	r2, r6
 8014696:	3101      	adds	r1, #1
 8014698:	4638      	mov	r0, r7
 801469a:	f000 ff55 	bl	8015548 <_strtol_r>
 801469e:	9b03      	ldr	r3, [sp, #12]
 80146a0:	9d04      	ldr	r5, [sp, #16]
 80146a2:	1ac2      	subs	r2, r0, r3
 80146a4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80146a8:	429d      	cmp	r5, r3
 80146aa:	bf28      	it	cs
 80146ac:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80146b0:	490f      	ldr	r1, [pc, #60]	; (80146f0 <_scanf_float+0x3c0>)
 80146b2:	4628      	mov	r0, r5
 80146b4:	f000 f858 	bl	8014768 <siprintf>
 80146b8:	e7aa      	b.n	8014610 <_scanf_float+0x2e0>
 80146ba:	f015 0504 	ands.w	r5, r5, #4
 80146be:	d1b8      	bne.n	8014632 <_scanf_float+0x302>
 80146c0:	681f      	ldr	r7, [r3, #0]
 80146c2:	ee10 2a10 	vmov	r2, s0
 80146c6:	464b      	mov	r3, r9
 80146c8:	ee10 0a10 	vmov	r0, s0
 80146cc:	4649      	mov	r1, r9
 80146ce:	f7ec fa45 	bl	8000b5c <__aeabi_dcmpun>
 80146d2:	b128      	cbz	r0, 80146e0 <_scanf_float+0x3b0>
 80146d4:	4628      	mov	r0, r5
 80146d6:	f000 f80d 	bl	80146f4 <nanf>
 80146da:	ed87 0a00 	vstr	s0, [r7]
 80146de:	e7ab      	b.n	8014638 <_scanf_float+0x308>
 80146e0:	4640      	mov	r0, r8
 80146e2:	4649      	mov	r1, r9
 80146e4:	f7ec fa98 	bl	8000c18 <__aeabi_d2f>
 80146e8:	6038      	str	r0, [r7, #0]
 80146ea:	e7a5      	b.n	8014638 <_scanf_float+0x308>
 80146ec:	2600      	movs	r6, #0
 80146ee:	e666      	b.n	80143be <_scanf_float+0x8e>
 80146f0:	0801862a 	.word	0x0801862a

080146f4 <nanf>:
 80146f4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80146fc <nanf+0x8>
 80146f8:	4770      	bx	lr
 80146fa:	bf00      	nop
 80146fc:	7fc00000 	.word	0x7fc00000

08014700 <sniprintf>:
 8014700:	b40c      	push	{r2, r3}
 8014702:	b530      	push	{r4, r5, lr}
 8014704:	4b17      	ldr	r3, [pc, #92]	; (8014764 <sniprintf+0x64>)
 8014706:	1e0c      	subs	r4, r1, #0
 8014708:	b09d      	sub	sp, #116	; 0x74
 801470a:	681d      	ldr	r5, [r3, #0]
 801470c:	da08      	bge.n	8014720 <sniprintf+0x20>
 801470e:	238b      	movs	r3, #139	; 0x8b
 8014710:	602b      	str	r3, [r5, #0]
 8014712:	f04f 30ff 	mov.w	r0, #4294967295
 8014716:	b01d      	add	sp, #116	; 0x74
 8014718:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801471c:	b002      	add	sp, #8
 801471e:	4770      	bx	lr
 8014720:	f44f 7302 	mov.w	r3, #520	; 0x208
 8014724:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014728:	bf14      	ite	ne
 801472a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801472e:	4623      	moveq	r3, r4
 8014730:	9304      	str	r3, [sp, #16]
 8014732:	9307      	str	r3, [sp, #28]
 8014734:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014738:	9002      	str	r0, [sp, #8]
 801473a:	9006      	str	r0, [sp, #24]
 801473c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014740:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014742:	ab21      	add	r3, sp, #132	; 0x84
 8014744:	a902      	add	r1, sp, #8
 8014746:	4628      	mov	r0, r5
 8014748:	9301      	str	r3, [sp, #4]
 801474a:	f002 fde7 	bl	801731c <_svfiprintf_r>
 801474e:	1c43      	adds	r3, r0, #1
 8014750:	bfbc      	itt	lt
 8014752:	238b      	movlt	r3, #139	; 0x8b
 8014754:	602b      	strlt	r3, [r5, #0]
 8014756:	2c00      	cmp	r4, #0
 8014758:	d0dd      	beq.n	8014716 <sniprintf+0x16>
 801475a:	9b02      	ldr	r3, [sp, #8]
 801475c:	2200      	movs	r2, #0
 801475e:	701a      	strb	r2, [r3, #0]
 8014760:	e7d9      	b.n	8014716 <sniprintf+0x16>
 8014762:	bf00      	nop
 8014764:	2000000c 	.word	0x2000000c

08014768 <siprintf>:
 8014768:	b40e      	push	{r1, r2, r3}
 801476a:	b500      	push	{lr}
 801476c:	b09c      	sub	sp, #112	; 0x70
 801476e:	ab1d      	add	r3, sp, #116	; 0x74
 8014770:	9002      	str	r0, [sp, #8]
 8014772:	9006      	str	r0, [sp, #24]
 8014774:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014778:	4809      	ldr	r0, [pc, #36]	; (80147a0 <siprintf+0x38>)
 801477a:	9107      	str	r1, [sp, #28]
 801477c:	9104      	str	r1, [sp, #16]
 801477e:	4909      	ldr	r1, [pc, #36]	; (80147a4 <siprintf+0x3c>)
 8014780:	f853 2b04 	ldr.w	r2, [r3], #4
 8014784:	9105      	str	r1, [sp, #20]
 8014786:	6800      	ldr	r0, [r0, #0]
 8014788:	9301      	str	r3, [sp, #4]
 801478a:	a902      	add	r1, sp, #8
 801478c:	f002 fdc6 	bl	801731c <_svfiprintf_r>
 8014790:	9b02      	ldr	r3, [sp, #8]
 8014792:	2200      	movs	r2, #0
 8014794:	701a      	strb	r2, [r3, #0]
 8014796:	b01c      	add	sp, #112	; 0x70
 8014798:	f85d eb04 	ldr.w	lr, [sp], #4
 801479c:	b003      	add	sp, #12
 801479e:	4770      	bx	lr
 80147a0:	2000000c 	.word	0x2000000c
 80147a4:	ffff0208 	.word	0xffff0208

080147a8 <siscanf>:
 80147a8:	b40e      	push	{r1, r2, r3}
 80147aa:	b530      	push	{r4, r5, lr}
 80147ac:	b09c      	sub	sp, #112	; 0x70
 80147ae:	ac1f      	add	r4, sp, #124	; 0x7c
 80147b0:	f44f 7201 	mov.w	r2, #516	; 0x204
 80147b4:	f854 5b04 	ldr.w	r5, [r4], #4
 80147b8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80147bc:	9002      	str	r0, [sp, #8]
 80147be:	9006      	str	r0, [sp, #24]
 80147c0:	f7eb fd1e 	bl	8000200 <strlen>
 80147c4:	4b0b      	ldr	r3, [pc, #44]	; (80147f4 <siscanf+0x4c>)
 80147c6:	9003      	str	r0, [sp, #12]
 80147c8:	9007      	str	r0, [sp, #28]
 80147ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80147cc:	480a      	ldr	r0, [pc, #40]	; (80147f8 <siscanf+0x50>)
 80147ce:	9401      	str	r4, [sp, #4]
 80147d0:	2300      	movs	r3, #0
 80147d2:	930f      	str	r3, [sp, #60]	; 0x3c
 80147d4:	9314      	str	r3, [sp, #80]	; 0x50
 80147d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80147da:	f8ad 3016 	strh.w	r3, [sp, #22]
 80147de:	462a      	mov	r2, r5
 80147e0:	4623      	mov	r3, r4
 80147e2:	a902      	add	r1, sp, #8
 80147e4:	6800      	ldr	r0, [r0, #0]
 80147e6:	f002 feeb 	bl	80175c0 <__ssvfiscanf_r>
 80147ea:	b01c      	add	sp, #112	; 0x70
 80147ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80147f0:	b003      	add	sp, #12
 80147f2:	4770      	bx	lr
 80147f4:	080147fd 	.word	0x080147fd
 80147f8:	2000000c 	.word	0x2000000c

080147fc <__seofread>:
 80147fc:	2000      	movs	r0, #0
 80147fe:	4770      	bx	lr

08014800 <strcpy>:
 8014800:	4603      	mov	r3, r0
 8014802:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014806:	f803 2b01 	strb.w	r2, [r3], #1
 801480a:	2a00      	cmp	r2, #0
 801480c:	d1f9      	bne.n	8014802 <strcpy+0x2>
 801480e:	4770      	bx	lr

08014810 <sulp>:
 8014810:	b570      	push	{r4, r5, r6, lr}
 8014812:	4604      	mov	r4, r0
 8014814:	460d      	mov	r5, r1
 8014816:	ec45 4b10 	vmov	d0, r4, r5
 801481a:	4616      	mov	r6, r2
 801481c:	f002 fb3a 	bl	8016e94 <__ulp>
 8014820:	ec51 0b10 	vmov	r0, r1, d0
 8014824:	b17e      	cbz	r6, 8014846 <sulp+0x36>
 8014826:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801482a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801482e:	2b00      	cmp	r3, #0
 8014830:	dd09      	ble.n	8014846 <sulp+0x36>
 8014832:	051b      	lsls	r3, r3, #20
 8014834:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8014838:	2400      	movs	r4, #0
 801483a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801483e:	4622      	mov	r2, r4
 8014840:	462b      	mov	r3, r5
 8014842:	f7eb fef1 	bl	8000628 <__aeabi_dmul>
 8014846:	bd70      	pop	{r4, r5, r6, pc}

08014848 <_strtod_l>:
 8014848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801484c:	461f      	mov	r7, r3
 801484e:	b0a1      	sub	sp, #132	; 0x84
 8014850:	2300      	movs	r3, #0
 8014852:	4681      	mov	r9, r0
 8014854:	4638      	mov	r0, r7
 8014856:	460e      	mov	r6, r1
 8014858:	9217      	str	r2, [sp, #92]	; 0x5c
 801485a:	931c      	str	r3, [sp, #112]	; 0x70
 801485c:	f002 f824 	bl	80168a8 <__localeconv_l>
 8014860:	4680      	mov	r8, r0
 8014862:	6800      	ldr	r0, [r0, #0]
 8014864:	f7eb fccc 	bl	8000200 <strlen>
 8014868:	f04f 0a00 	mov.w	sl, #0
 801486c:	4604      	mov	r4, r0
 801486e:	f04f 0b00 	mov.w	fp, #0
 8014872:	961b      	str	r6, [sp, #108]	; 0x6c
 8014874:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014876:	781a      	ldrb	r2, [r3, #0]
 8014878:	2a0d      	cmp	r2, #13
 801487a:	d832      	bhi.n	80148e2 <_strtod_l+0x9a>
 801487c:	2a09      	cmp	r2, #9
 801487e:	d236      	bcs.n	80148ee <_strtod_l+0xa6>
 8014880:	2a00      	cmp	r2, #0
 8014882:	d03e      	beq.n	8014902 <_strtod_l+0xba>
 8014884:	2300      	movs	r3, #0
 8014886:	930d      	str	r3, [sp, #52]	; 0x34
 8014888:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801488a:	782b      	ldrb	r3, [r5, #0]
 801488c:	2b30      	cmp	r3, #48	; 0x30
 801488e:	f040 80ac 	bne.w	80149ea <_strtod_l+0x1a2>
 8014892:	786b      	ldrb	r3, [r5, #1]
 8014894:	2b58      	cmp	r3, #88	; 0x58
 8014896:	d001      	beq.n	801489c <_strtod_l+0x54>
 8014898:	2b78      	cmp	r3, #120	; 0x78
 801489a:	d167      	bne.n	801496c <_strtod_l+0x124>
 801489c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801489e:	9301      	str	r3, [sp, #4]
 80148a0:	ab1c      	add	r3, sp, #112	; 0x70
 80148a2:	9300      	str	r3, [sp, #0]
 80148a4:	9702      	str	r7, [sp, #8]
 80148a6:	ab1d      	add	r3, sp, #116	; 0x74
 80148a8:	4a88      	ldr	r2, [pc, #544]	; (8014acc <_strtod_l+0x284>)
 80148aa:	a91b      	add	r1, sp, #108	; 0x6c
 80148ac:	4648      	mov	r0, r9
 80148ae:	f001 fd12 	bl	80162d6 <__gethex>
 80148b2:	f010 0407 	ands.w	r4, r0, #7
 80148b6:	4606      	mov	r6, r0
 80148b8:	d005      	beq.n	80148c6 <_strtod_l+0x7e>
 80148ba:	2c06      	cmp	r4, #6
 80148bc:	d12b      	bne.n	8014916 <_strtod_l+0xce>
 80148be:	3501      	adds	r5, #1
 80148c0:	2300      	movs	r3, #0
 80148c2:	951b      	str	r5, [sp, #108]	; 0x6c
 80148c4:	930d      	str	r3, [sp, #52]	; 0x34
 80148c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	f040 859a 	bne.w	8015402 <_strtod_l+0xbba>
 80148ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80148d0:	b1e3      	cbz	r3, 801490c <_strtod_l+0xc4>
 80148d2:	4652      	mov	r2, sl
 80148d4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80148d8:	ec43 2b10 	vmov	d0, r2, r3
 80148dc:	b021      	add	sp, #132	; 0x84
 80148de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148e2:	2a2b      	cmp	r2, #43	; 0x2b
 80148e4:	d015      	beq.n	8014912 <_strtod_l+0xca>
 80148e6:	2a2d      	cmp	r2, #45	; 0x2d
 80148e8:	d004      	beq.n	80148f4 <_strtod_l+0xac>
 80148ea:	2a20      	cmp	r2, #32
 80148ec:	d1ca      	bne.n	8014884 <_strtod_l+0x3c>
 80148ee:	3301      	adds	r3, #1
 80148f0:	931b      	str	r3, [sp, #108]	; 0x6c
 80148f2:	e7bf      	b.n	8014874 <_strtod_l+0x2c>
 80148f4:	2201      	movs	r2, #1
 80148f6:	920d      	str	r2, [sp, #52]	; 0x34
 80148f8:	1c5a      	adds	r2, r3, #1
 80148fa:	921b      	str	r2, [sp, #108]	; 0x6c
 80148fc:	785b      	ldrb	r3, [r3, #1]
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d1c2      	bne.n	8014888 <_strtod_l+0x40>
 8014902:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014904:	961b      	str	r6, [sp, #108]	; 0x6c
 8014906:	2b00      	cmp	r3, #0
 8014908:	f040 8579 	bne.w	80153fe <_strtod_l+0xbb6>
 801490c:	4652      	mov	r2, sl
 801490e:	465b      	mov	r3, fp
 8014910:	e7e2      	b.n	80148d8 <_strtod_l+0x90>
 8014912:	2200      	movs	r2, #0
 8014914:	e7ef      	b.n	80148f6 <_strtod_l+0xae>
 8014916:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014918:	b13a      	cbz	r2, 801492a <_strtod_l+0xe2>
 801491a:	2135      	movs	r1, #53	; 0x35
 801491c:	a81e      	add	r0, sp, #120	; 0x78
 801491e:	f002 fbb1 	bl	8017084 <__copybits>
 8014922:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014924:	4648      	mov	r0, r9
 8014926:	f002 f81d 	bl	8016964 <_Bfree>
 801492a:	3c01      	subs	r4, #1
 801492c:	2c04      	cmp	r4, #4
 801492e:	d806      	bhi.n	801493e <_strtod_l+0xf6>
 8014930:	e8df f004 	tbb	[pc, r4]
 8014934:	1714030a 	.word	0x1714030a
 8014938:	0a          	.byte	0x0a
 8014939:	00          	.byte	0x00
 801493a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 801493e:	0730      	lsls	r0, r6, #28
 8014940:	d5c1      	bpl.n	80148c6 <_strtod_l+0x7e>
 8014942:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8014946:	e7be      	b.n	80148c6 <_strtod_l+0x7e>
 8014948:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 801494c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801494e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8014952:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8014956:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801495a:	e7f0      	b.n	801493e <_strtod_l+0xf6>
 801495c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8014ad0 <_strtod_l+0x288>
 8014960:	e7ed      	b.n	801493e <_strtod_l+0xf6>
 8014962:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8014966:	f04f 3aff 	mov.w	sl, #4294967295
 801496a:	e7e8      	b.n	801493e <_strtod_l+0xf6>
 801496c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801496e:	1c5a      	adds	r2, r3, #1
 8014970:	921b      	str	r2, [sp, #108]	; 0x6c
 8014972:	785b      	ldrb	r3, [r3, #1]
 8014974:	2b30      	cmp	r3, #48	; 0x30
 8014976:	d0f9      	beq.n	801496c <_strtod_l+0x124>
 8014978:	2b00      	cmp	r3, #0
 801497a:	d0a4      	beq.n	80148c6 <_strtod_l+0x7e>
 801497c:	2301      	movs	r3, #1
 801497e:	2500      	movs	r5, #0
 8014980:	9306      	str	r3, [sp, #24]
 8014982:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014984:	9308      	str	r3, [sp, #32]
 8014986:	9507      	str	r5, [sp, #28]
 8014988:	9505      	str	r5, [sp, #20]
 801498a:	220a      	movs	r2, #10
 801498c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801498e:	7807      	ldrb	r7, [r0, #0]
 8014990:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8014994:	b2d9      	uxtb	r1, r3
 8014996:	2909      	cmp	r1, #9
 8014998:	d929      	bls.n	80149ee <_strtod_l+0x1a6>
 801499a:	4622      	mov	r2, r4
 801499c:	f8d8 1000 	ldr.w	r1, [r8]
 80149a0:	f003 f8f8 	bl	8017b94 <strncmp>
 80149a4:	2800      	cmp	r0, #0
 80149a6:	d031      	beq.n	8014a0c <_strtod_l+0x1c4>
 80149a8:	2000      	movs	r0, #0
 80149aa:	9c05      	ldr	r4, [sp, #20]
 80149ac:	9004      	str	r0, [sp, #16]
 80149ae:	463b      	mov	r3, r7
 80149b0:	4602      	mov	r2, r0
 80149b2:	2b65      	cmp	r3, #101	; 0x65
 80149b4:	d001      	beq.n	80149ba <_strtod_l+0x172>
 80149b6:	2b45      	cmp	r3, #69	; 0x45
 80149b8:	d114      	bne.n	80149e4 <_strtod_l+0x19c>
 80149ba:	b924      	cbnz	r4, 80149c6 <_strtod_l+0x17e>
 80149bc:	b910      	cbnz	r0, 80149c4 <_strtod_l+0x17c>
 80149be:	9b06      	ldr	r3, [sp, #24]
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d09e      	beq.n	8014902 <_strtod_l+0xba>
 80149c4:	2400      	movs	r4, #0
 80149c6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80149c8:	1c73      	adds	r3, r6, #1
 80149ca:	931b      	str	r3, [sp, #108]	; 0x6c
 80149cc:	7873      	ldrb	r3, [r6, #1]
 80149ce:	2b2b      	cmp	r3, #43	; 0x2b
 80149d0:	d078      	beq.n	8014ac4 <_strtod_l+0x27c>
 80149d2:	2b2d      	cmp	r3, #45	; 0x2d
 80149d4:	d070      	beq.n	8014ab8 <_strtod_l+0x270>
 80149d6:	f04f 0c00 	mov.w	ip, #0
 80149da:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80149de:	2f09      	cmp	r7, #9
 80149e0:	d97c      	bls.n	8014adc <_strtod_l+0x294>
 80149e2:	961b      	str	r6, [sp, #108]	; 0x6c
 80149e4:	f04f 0e00 	mov.w	lr, #0
 80149e8:	e09a      	b.n	8014b20 <_strtod_l+0x2d8>
 80149ea:	2300      	movs	r3, #0
 80149ec:	e7c7      	b.n	801497e <_strtod_l+0x136>
 80149ee:	9905      	ldr	r1, [sp, #20]
 80149f0:	2908      	cmp	r1, #8
 80149f2:	bfdd      	ittte	le
 80149f4:	9907      	ldrle	r1, [sp, #28]
 80149f6:	fb02 3301 	mlale	r3, r2, r1, r3
 80149fa:	9307      	strle	r3, [sp, #28]
 80149fc:	fb02 3505 	mlagt	r5, r2, r5, r3
 8014a00:	9b05      	ldr	r3, [sp, #20]
 8014a02:	3001      	adds	r0, #1
 8014a04:	3301      	adds	r3, #1
 8014a06:	9305      	str	r3, [sp, #20]
 8014a08:	901b      	str	r0, [sp, #108]	; 0x6c
 8014a0a:	e7bf      	b.n	801498c <_strtod_l+0x144>
 8014a0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014a0e:	191a      	adds	r2, r3, r4
 8014a10:	921b      	str	r2, [sp, #108]	; 0x6c
 8014a12:	9a05      	ldr	r2, [sp, #20]
 8014a14:	5d1b      	ldrb	r3, [r3, r4]
 8014a16:	2a00      	cmp	r2, #0
 8014a18:	d037      	beq.n	8014a8a <_strtod_l+0x242>
 8014a1a:	9c05      	ldr	r4, [sp, #20]
 8014a1c:	4602      	mov	r2, r0
 8014a1e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8014a22:	2909      	cmp	r1, #9
 8014a24:	d913      	bls.n	8014a4e <_strtod_l+0x206>
 8014a26:	2101      	movs	r1, #1
 8014a28:	9104      	str	r1, [sp, #16]
 8014a2a:	e7c2      	b.n	80149b2 <_strtod_l+0x16a>
 8014a2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014a2e:	1c5a      	adds	r2, r3, #1
 8014a30:	921b      	str	r2, [sp, #108]	; 0x6c
 8014a32:	785b      	ldrb	r3, [r3, #1]
 8014a34:	3001      	adds	r0, #1
 8014a36:	2b30      	cmp	r3, #48	; 0x30
 8014a38:	d0f8      	beq.n	8014a2c <_strtod_l+0x1e4>
 8014a3a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8014a3e:	2a08      	cmp	r2, #8
 8014a40:	f200 84e4 	bhi.w	801540c <_strtod_l+0xbc4>
 8014a44:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014a46:	9208      	str	r2, [sp, #32]
 8014a48:	4602      	mov	r2, r0
 8014a4a:	2000      	movs	r0, #0
 8014a4c:	4604      	mov	r4, r0
 8014a4e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8014a52:	f100 0101 	add.w	r1, r0, #1
 8014a56:	d012      	beq.n	8014a7e <_strtod_l+0x236>
 8014a58:	440a      	add	r2, r1
 8014a5a:	eb00 0c04 	add.w	ip, r0, r4
 8014a5e:	4621      	mov	r1, r4
 8014a60:	270a      	movs	r7, #10
 8014a62:	458c      	cmp	ip, r1
 8014a64:	d113      	bne.n	8014a8e <_strtod_l+0x246>
 8014a66:	1821      	adds	r1, r4, r0
 8014a68:	2908      	cmp	r1, #8
 8014a6a:	f104 0401 	add.w	r4, r4, #1
 8014a6e:	4404      	add	r4, r0
 8014a70:	dc19      	bgt.n	8014aa6 <_strtod_l+0x25e>
 8014a72:	9b07      	ldr	r3, [sp, #28]
 8014a74:	210a      	movs	r1, #10
 8014a76:	fb01 e303 	mla	r3, r1, r3, lr
 8014a7a:	9307      	str	r3, [sp, #28]
 8014a7c:	2100      	movs	r1, #0
 8014a7e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014a80:	1c58      	adds	r0, r3, #1
 8014a82:	901b      	str	r0, [sp, #108]	; 0x6c
 8014a84:	785b      	ldrb	r3, [r3, #1]
 8014a86:	4608      	mov	r0, r1
 8014a88:	e7c9      	b.n	8014a1e <_strtod_l+0x1d6>
 8014a8a:	9805      	ldr	r0, [sp, #20]
 8014a8c:	e7d3      	b.n	8014a36 <_strtod_l+0x1ee>
 8014a8e:	2908      	cmp	r1, #8
 8014a90:	f101 0101 	add.w	r1, r1, #1
 8014a94:	dc03      	bgt.n	8014a9e <_strtod_l+0x256>
 8014a96:	9b07      	ldr	r3, [sp, #28]
 8014a98:	437b      	muls	r3, r7
 8014a9a:	9307      	str	r3, [sp, #28]
 8014a9c:	e7e1      	b.n	8014a62 <_strtod_l+0x21a>
 8014a9e:	2910      	cmp	r1, #16
 8014aa0:	bfd8      	it	le
 8014aa2:	437d      	mulle	r5, r7
 8014aa4:	e7dd      	b.n	8014a62 <_strtod_l+0x21a>
 8014aa6:	2c10      	cmp	r4, #16
 8014aa8:	bfdc      	itt	le
 8014aaa:	210a      	movle	r1, #10
 8014aac:	fb01 e505 	mlale	r5, r1, r5, lr
 8014ab0:	e7e4      	b.n	8014a7c <_strtod_l+0x234>
 8014ab2:	2301      	movs	r3, #1
 8014ab4:	9304      	str	r3, [sp, #16]
 8014ab6:	e781      	b.n	80149bc <_strtod_l+0x174>
 8014ab8:	f04f 0c01 	mov.w	ip, #1
 8014abc:	1cb3      	adds	r3, r6, #2
 8014abe:	931b      	str	r3, [sp, #108]	; 0x6c
 8014ac0:	78b3      	ldrb	r3, [r6, #2]
 8014ac2:	e78a      	b.n	80149da <_strtod_l+0x192>
 8014ac4:	f04f 0c00 	mov.w	ip, #0
 8014ac8:	e7f8      	b.n	8014abc <_strtod_l+0x274>
 8014aca:	bf00      	nop
 8014acc:	08018630 	.word	0x08018630
 8014ad0:	7ff00000 	.word	0x7ff00000
 8014ad4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014ad6:	1c5f      	adds	r7, r3, #1
 8014ad8:	971b      	str	r7, [sp, #108]	; 0x6c
 8014ada:	785b      	ldrb	r3, [r3, #1]
 8014adc:	2b30      	cmp	r3, #48	; 0x30
 8014ade:	d0f9      	beq.n	8014ad4 <_strtod_l+0x28c>
 8014ae0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8014ae4:	2f08      	cmp	r7, #8
 8014ae6:	f63f af7d 	bhi.w	80149e4 <_strtod_l+0x19c>
 8014aea:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8014aee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014af0:	930a      	str	r3, [sp, #40]	; 0x28
 8014af2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014af4:	1c5f      	adds	r7, r3, #1
 8014af6:	971b      	str	r7, [sp, #108]	; 0x6c
 8014af8:	785b      	ldrb	r3, [r3, #1]
 8014afa:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8014afe:	f1b8 0f09 	cmp.w	r8, #9
 8014b02:	d937      	bls.n	8014b74 <_strtod_l+0x32c>
 8014b04:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014b06:	1a7f      	subs	r7, r7, r1
 8014b08:	2f08      	cmp	r7, #8
 8014b0a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8014b0e:	dc37      	bgt.n	8014b80 <_strtod_l+0x338>
 8014b10:	45be      	cmp	lr, r7
 8014b12:	bfa8      	it	ge
 8014b14:	46be      	movge	lr, r7
 8014b16:	f1bc 0f00 	cmp.w	ip, #0
 8014b1a:	d001      	beq.n	8014b20 <_strtod_l+0x2d8>
 8014b1c:	f1ce 0e00 	rsb	lr, lr, #0
 8014b20:	2c00      	cmp	r4, #0
 8014b22:	d151      	bne.n	8014bc8 <_strtod_l+0x380>
 8014b24:	2800      	cmp	r0, #0
 8014b26:	f47f aece 	bne.w	80148c6 <_strtod_l+0x7e>
 8014b2a:	9a06      	ldr	r2, [sp, #24]
 8014b2c:	2a00      	cmp	r2, #0
 8014b2e:	f47f aeca 	bne.w	80148c6 <_strtod_l+0x7e>
 8014b32:	9a04      	ldr	r2, [sp, #16]
 8014b34:	2a00      	cmp	r2, #0
 8014b36:	f47f aee4 	bne.w	8014902 <_strtod_l+0xba>
 8014b3a:	2b4e      	cmp	r3, #78	; 0x4e
 8014b3c:	d027      	beq.n	8014b8e <_strtod_l+0x346>
 8014b3e:	dc21      	bgt.n	8014b84 <_strtod_l+0x33c>
 8014b40:	2b49      	cmp	r3, #73	; 0x49
 8014b42:	f47f aede 	bne.w	8014902 <_strtod_l+0xba>
 8014b46:	49a0      	ldr	r1, [pc, #640]	; (8014dc8 <_strtod_l+0x580>)
 8014b48:	a81b      	add	r0, sp, #108	; 0x6c
 8014b4a:	f001 fdf7 	bl	801673c <__match>
 8014b4e:	2800      	cmp	r0, #0
 8014b50:	f43f aed7 	beq.w	8014902 <_strtod_l+0xba>
 8014b54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014b56:	499d      	ldr	r1, [pc, #628]	; (8014dcc <_strtod_l+0x584>)
 8014b58:	3b01      	subs	r3, #1
 8014b5a:	a81b      	add	r0, sp, #108	; 0x6c
 8014b5c:	931b      	str	r3, [sp, #108]	; 0x6c
 8014b5e:	f001 fded 	bl	801673c <__match>
 8014b62:	b910      	cbnz	r0, 8014b6a <_strtod_l+0x322>
 8014b64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014b66:	3301      	adds	r3, #1
 8014b68:	931b      	str	r3, [sp, #108]	; 0x6c
 8014b6a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8014de0 <_strtod_l+0x598>
 8014b6e:	f04f 0a00 	mov.w	sl, #0
 8014b72:	e6a8      	b.n	80148c6 <_strtod_l+0x7e>
 8014b74:	210a      	movs	r1, #10
 8014b76:	fb01 3e0e 	mla	lr, r1, lr, r3
 8014b7a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8014b7e:	e7b8      	b.n	8014af2 <_strtod_l+0x2aa>
 8014b80:	46be      	mov	lr, r7
 8014b82:	e7c8      	b.n	8014b16 <_strtod_l+0x2ce>
 8014b84:	2b69      	cmp	r3, #105	; 0x69
 8014b86:	d0de      	beq.n	8014b46 <_strtod_l+0x2fe>
 8014b88:	2b6e      	cmp	r3, #110	; 0x6e
 8014b8a:	f47f aeba 	bne.w	8014902 <_strtod_l+0xba>
 8014b8e:	4990      	ldr	r1, [pc, #576]	; (8014dd0 <_strtod_l+0x588>)
 8014b90:	a81b      	add	r0, sp, #108	; 0x6c
 8014b92:	f001 fdd3 	bl	801673c <__match>
 8014b96:	2800      	cmp	r0, #0
 8014b98:	f43f aeb3 	beq.w	8014902 <_strtod_l+0xba>
 8014b9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014b9e:	781b      	ldrb	r3, [r3, #0]
 8014ba0:	2b28      	cmp	r3, #40	; 0x28
 8014ba2:	d10e      	bne.n	8014bc2 <_strtod_l+0x37a>
 8014ba4:	aa1e      	add	r2, sp, #120	; 0x78
 8014ba6:	498b      	ldr	r1, [pc, #556]	; (8014dd4 <_strtod_l+0x58c>)
 8014ba8:	a81b      	add	r0, sp, #108	; 0x6c
 8014baa:	f001 fddb 	bl	8016764 <__hexnan>
 8014bae:	2805      	cmp	r0, #5
 8014bb0:	d107      	bne.n	8014bc2 <_strtod_l+0x37a>
 8014bb2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014bb4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8014bb8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8014bbc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8014bc0:	e681      	b.n	80148c6 <_strtod_l+0x7e>
 8014bc2:	f8df b224 	ldr.w	fp, [pc, #548]	; 8014de8 <_strtod_l+0x5a0>
 8014bc6:	e7d2      	b.n	8014b6e <_strtod_l+0x326>
 8014bc8:	ebae 0302 	sub.w	r3, lr, r2
 8014bcc:	9306      	str	r3, [sp, #24]
 8014bce:	9b05      	ldr	r3, [sp, #20]
 8014bd0:	9807      	ldr	r0, [sp, #28]
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	bf08      	it	eq
 8014bd6:	4623      	moveq	r3, r4
 8014bd8:	2c10      	cmp	r4, #16
 8014bda:	9305      	str	r3, [sp, #20]
 8014bdc:	46a0      	mov	r8, r4
 8014bde:	bfa8      	it	ge
 8014be0:	f04f 0810 	movge.w	r8, #16
 8014be4:	f7eb fca6 	bl	8000534 <__aeabi_ui2d>
 8014be8:	2c09      	cmp	r4, #9
 8014bea:	4682      	mov	sl, r0
 8014bec:	468b      	mov	fp, r1
 8014bee:	dc13      	bgt.n	8014c18 <_strtod_l+0x3d0>
 8014bf0:	9b06      	ldr	r3, [sp, #24]
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	f43f ae67 	beq.w	80148c6 <_strtod_l+0x7e>
 8014bf8:	9b06      	ldr	r3, [sp, #24]
 8014bfa:	dd7a      	ble.n	8014cf2 <_strtod_l+0x4aa>
 8014bfc:	2b16      	cmp	r3, #22
 8014bfe:	dc61      	bgt.n	8014cc4 <_strtod_l+0x47c>
 8014c00:	4a75      	ldr	r2, [pc, #468]	; (8014dd8 <_strtod_l+0x590>)
 8014c02:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8014c06:	e9de 0100 	ldrd	r0, r1, [lr]
 8014c0a:	4652      	mov	r2, sl
 8014c0c:	465b      	mov	r3, fp
 8014c0e:	f7eb fd0b 	bl	8000628 <__aeabi_dmul>
 8014c12:	4682      	mov	sl, r0
 8014c14:	468b      	mov	fp, r1
 8014c16:	e656      	b.n	80148c6 <_strtod_l+0x7e>
 8014c18:	4b6f      	ldr	r3, [pc, #444]	; (8014dd8 <_strtod_l+0x590>)
 8014c1a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8014c1e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8014c22:	f7eb fd01 	bl	8000628 <__aeabi_dmul>
 8014c26:	4606      	mov	r6, r0
 8014c28:	4628      	mov	r0, r5
 8014c2a:	460f      	mov	r7, r1
 8014c2c:	f7eb fc82 	bl	8000534 <__aeabi_ui2d>
 8014c30:	4602      	mov	r2, r0
 8014c32:	460b      	mov	r3, r1
 8014c34:	4630      	mov	r0, r6
 8014c36:	4639      	mov	r1, r7
 8014c38:	f7eb fb40 	bl	80002bc <__adddf3>
 8014c3c:	2c0f      	cmp	r4, #15
 8014c3e:	4682      	mov	sl, r0
 8014c40:	468b      	mov	fp, r1
 8014c42:	ddd5      	ble.n	8014bf0 <_strtod_l+0x3a8>
 8014c44:	9b06      	ldr	r3, [sp, #24]
 8014c46:	eba4 0808 	sub.w	r8, r4, r8
 8014c4a:	4498      	add	r8, r3
 8014c4c:	f1b8 0f00 	cmp.w	r8, #0
 8014c50:	f340 8096 	ble.w	8014d80 <_strtod_l+0x538>
 8014c54:	f018 030f 	ands.w	r3, r8, #15
 8014c58:	d00a      	beq.n	8014c70 <_strtod_l+0x428>
 8014c5a:	495f      	ldr	r1, [pc, #380]	; (8014dd8 <_strtod_l+0x590>)
 8014c5c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014c60:	4652      	mov	r2, sl
 8014c62:	465b      	mov	r3, fp
 8014c64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014c68:	f7eb fcde 	bl	8000628 <__aeabi_dmul>
 8014c6c:	4682      	mov	sl, r0
 8014c6e:	468b      	mov	fp, r1
 8014c70:	f038 080f 	bics.w	r8, r8, #15
 8014c74:	d073      	beq.n	8014d5e <_strtod_l+0x516>
 8014c76:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8014c7a:	dd47      	ble.n	8014d0c <_strtod_l+0x4c4>
 8014c7c:	2400      	movs	r4, #0
 8014c7e:	46a0      	mov	r8, r4
 8014c80:	9407      	str	r4, [sp, #28]
 8014c82:	9405      	str	r4, [sp, #20]
 8014c84:	2322      	movs	r3, #34	; 0x22
 8014c86:	f8df b158 	ldr.w	fp, [pc, #344]	; 8014de0 <_strtod_l+0x598>
 8014c8a:	f8c9 3000 	str.w	r3, [r9]
 8014c8e:	f04f 0a00 	mov.w	sl, #0
 8014c92:	9b07      	ldr	r3, [sp, #28]
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	f43f ae16 	beq.w	80148c6 <_strtod_l+0x7e>
 8014c9a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014c9c:	4648      	mov	r0, r9
 8014c9e:	f001 fe61 	bl	8016964 <_Bfree>
 8014ca2:	9905      	ldr	r1, [sp, #20]
 8014ca4:	4648      	mov	r0, r9
 8014ca6:	f001 fe5d 	bl	8016964 <_Bfree>
 8014caa:	4641      	mov	r1, r8
 8014cac:	4648      	mov	r0, r9
 8014cae:	f001 fe59 	bl	8016964 <_Bfree>
 8014cb2:	9907      	ldr	r1, [sp, #28]
 8014cb4:	4648      	mov	r0, r9
 8014cb6:	f001 fe55 	bl	8016964 <_Bfree>
 8014cba:	4621      	mov	r1, r4
 8014cbc:	4648      	mov	r0, r9
 8014cbe:	f001 fe51 	bl	8016964 <_Bfree>
 8014cc2:	e600      	b.n	80148c6 <_strtod_l+0x7e>
 8014cc4:	9a06      	ldr	r2, [sp, #24]
 8014cc6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8014cca:	4293      	cmp	r3, r2
 8014ccc:	dbba      	blt.n	8014c44 <_strtod_l+0x3fc>
 8014cce:	4d42      	ldr	r5, [pc, #264]	; (8014dd8 <_strtod_l+0x590>)
 8014cd0:	f1c4 040f 	rsb	r4, r4, #15
 8014cd4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8014cd8:	4652      	mov	r2, sl
 8014cda:	465b      	mov	r3, fp
 8014cdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014ce0:	f7eb fca2 	bl	8000628 <__aeabi_dmul>
 8014ce4:	9b06      	ldr	r3, [sp, #24]
 8014ce6:	1b1c      	subs	r4, r3, r4
 8014ce8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8014cec:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014cf0:	e78d      	b.n	8014c0e <_strtod_l+0x3c6>
 8014cf2:	f113 0f16 	cmn.w	r3, #22
 8014cf6:	dba5      	blt.n	8014c44 <_strtod_l+0x3fc>
 8014cf8:	4a37      	ldr	r2, [pc, #220]	; (8014dd8 <_strtod_l+0x590>)
 8014cfa:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8014cfe:	e9d2 2300 	ldrd	r2, r3, [r2]
 8014d02:	4650      	mov	r0, sl
 8014d04:	4659      	mov	r1, fp
 8014d06:	f7eb fdb9 	bl	800087c <__aeabi_ddiv>
 8014d0a:	e782      	b.n	8014c12 <_strtod_l+0x3ca>
 8014d0c:	2300      	movs	r3, #0
 8014d0e:	4e33      	ldr	r6, [pc, #204]	; (8014ddc <_strtod_l+0x594>)
 8014d10:	ea4f 1828 	mov.w	r8, r8, asr #4
 8014d14:	4650      	mov	r0, sl
 8014d16:	4659      	mov	r1, fp
 8014d18:	461d      	mov	r5, r3
 8014d1a:	f1b8 0f01 	cmp.w	r8, #1
 8014d1e:	dc21      	bgt.n	8014d64 <_strtod_l+0x51c>
 8014d20:	b10b      	cbz	r3, 8014d26 <_strtod_l+0x4de>
 8014d22:	4682      	mov	sl, r0
 8014d24:	468b      	mov	fp, r1
 8014d26:	4b2d      	ldr	r3, [pc, #180]	; (8014ddc <_strtod_l+0x594>)
 8014d28:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8014d2c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8014d30:	4652      	mov	r2, sl
 8014d32:	465b      	mov	r3, fp
 8014d34:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014d38:	f7eb fc76 	bl	8000628 <__aeabi_dmul>
 8014d3c:	4b28      	ldr	r3, [pc, #160]	; (8014de0 <_strtod_l+0x598>)
 8014d3e:	460a      	mov	r2, r1
 8014d40:	400b      	ands	r3, r1
 8014d42:	4928      	ldr	r1, [pc, #160]	; (8014de4 <_strtod_l+0x59c>)
 8014d44:	428b      	cmp	r3, r1
 8014d46:	4682      	mov	sl, r0
 8014d48:	d898      	bhi.n	8014c7c <_strtod_l+0x434>
 8014d4a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8014d4e:	428b      	cmp	r3, r1
 8014d50:	bf86      	itte	hi
 8014d52:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8014dec <_strtod_l+0x5a4>
 8014d56:	f04f 3aff 	movhi.w	sl, #4294967295
 8014d5a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8014d5e:	2300      	movs	r3, #0
 8014d60:	9304      	str	r3, [sp, #16]
 8014d62:	e077      	b.n	8014e54 <_strtod_l+0x60c>
 8014d64:	f018 0f01 	tst.w	r8, #1
 8014d68:	d006      	beq.n	8014d78 <_strtod_l+0x530>
 8014d6a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8014d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d72:	f7eb fc59 	bl	8000628 <__aeabi_dmul>
 8014d76:	2301      	movs	r3, #1
 8014d78:	3501      	adds	r5, #1
 8014d7a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8014d7e:	e7cc      	b.n	8014d1a <_strtod_l+0x4d2>
 8014d80:	d0ed      	beq.n	8014d5e <_strtod_l+0x516>
 8014d82:	f1c8 0800 	rsb	r8, r8, #0
 8014d86:	f018 020f 	ands.w	r2, r8, #15
 8014d8a:	d00a      	beq.n	8014da2 <_strtod_l+0x55a>
 8014d8c:	4b12      	ldr	r3, [pc, #72]	; (8014dd8 <_strtod_l+0x590>)
 8014d8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014d92:	4650      	mov	r0, sl
 8014d94:	4659      	mov	r1, fp
 8014d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d9a:	f7eb fd6f 	bl	800087c <__aeabi_ddiv>
 8014d9e:	4682      	mov	sl, r0
 8014da0:	468b      	mov	fp, r1
 8014da2:	ea5f 1828 	movs.w	r8, r8, asr #4
 8014da6:	d0da      	beq.n	8014d5e <_strtod_l+0x516>
 8014da8:	f1b8 0f1f 	cmp.w	r8, #31
 8014dac:	dd20      	ble.n	8014df0 <_strtod_l+0x5a8>
 8014dae:	2400      	movs	r4, #0
 8014db0:	46a0      	mov	r8, r4
 8014db2:	9407      	str	r4, [sp, #28]
 8014db4:	9405      	str	r4, [sp, #20]
 8014db6:	2322      	movs	r3, #34	; 0x22
 8014db8:	f04f 0a00 	mov.w	sl, #0
 8014dbc:	f04f 0b00 	mov.w	fp, #0
 8014dc0:	f8c9 3000 	str.w	r3, [r9]
 8014dc4:	e765      	b.n	8014c92 <_strtod_l+0x44a>
 8014dc6:	bf00      	nop
 8014dc8:	080185fd 	.word	0x080185fd
 8014dcc:	08018683 	.word	0x08018683
 8014dd0:	08018605 	.word	0x08018605
 8014dd4:	08018644 	.word	0x08018644
 8014dd8:	08018728 	.word	0x08018728
 8014ddc:	08018700 	.word	0x08018700
 8014de0:	7ff00000 	.word	0x7ff00000
 8014de4:	7ca00000 	.word	0x7ca00000
 8014de8:	fff80000 	.word	0xfff80000
 8014dec:	7fefffff 	.word	0x7fefffff
 8014df0:	f018 0310 	ands.w	r3, r8, #16
 8014df4:	bf18      	it	ne
 8014df6:	236a      	movne	r3, #106	; 0x6a
 8014df8:	4da0      	ldr	r5, [pc, #640]	; (801507c <_strtod_l+0x834>)
 8014dfa:	9304      	str	r3, [sp, #16]
 8014dfc:	4650      	mov	r0, sl
 8014dfe:	4659      	mov	r1, fp
 8014e00:	2300      	movs	r3, #0
 8014e02:	f1b8 0f00 	cmp.w	r8, #0
 8014e06:	f300 810a 	bgt.w	801501e <_strtod_l+0x7d6>
 8014e0a:	b10b      	cbz	r3, 8014e10 <_strtod_l+0x5c8>
 8014e0c:	4682      	mov	sl, r0
 8014e0e:	468b      	mov	fp, r1
 8014e10:	9b04      	ldr	r3, [sp, #16]
 8014e12:	b1bb      	cbz	r3, 8014e44 <_strtod_l+0x5fc>
 8014e14:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8014e18:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	4659      	mov	r1, fp
 8014e20:	dd10      	ble.n	8014e44 <_strtod_l+0x5fc>
 8014e22:	2b1f      	cmp	r3, #31
 8014e24:	f340 8107 	ble.w	8015036 <_strtod_l+0x7ee>
 8014e28:	2b34      	cmp	r3, #52	; 0x34
 8014e2a:	bfde      	ittt	le
 8014e2c:	3b20      	suble	r3, #32
 8014e2e:	f04f 32ff 	movle.w	r2, #4294967295
 8014e32:	fa02 f303 	lslle.w	r3, r2, r3
 8014e36:	f04f 0a00 	mov.w	sl, #0
 8014e3a:	bfcc      	ite	gt
 8014e3c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8014e40:	ea03 0b01 	andle.w	fp, r3, r1
 8014e44:	2200      	movs	r2, #0
 8014e46:	2300      	movs	r3, #0
 8014e48:	4650      	mov	r0, sl
 8014e4a:	4659      	mov	r1, fp
 8014e4c:	f7eb fe54 	bl	8000af8 <__aeabi_dcmpeq>
 8014e50:	2800      	cmp	r0, #0
 8014e52:	d1ac      	bne.n	8014dae <_strtod_l+0x566>
 8014e54:	9b07      	ldr	r3, [sp, #28]
 8014e56:	9300      	str	r3, [sp, #0]
 8014e58:	9a05      	ldr	r2, [sp, #20]
 8014e5a:	9908      	ldr	r1, [sp, #32]
 8014e5c:	4623      	mov	r3, r4
 8014e5e:	4648      	mov	r0, r9
 8014e60:	f001 fdd2 	bl	8016a08 <__s2b>
 8014e64:	9007      	str	r0, [sp, #28]
 8014e66:	2800      	cmp	r0, #0
 8014e68:	f43f af08 	beq.w	8014c7c <_strtod_l+0x434>
 8014e6c:	9a06      	ldr	r2, [sp, #24]
 8014e6e:	9b06      	ldr	r3, [sp, #24]
 8014e70:	2a00      	cmp	r2, #0
 8014e72:	f1c3 0300 	rsb	r3, r3, #0
 8014e76:	bfa8      	it	ge
 8014e78:	2300      	movge	r3, #0
 8014e7a:	930e      	str	r3, [sp, #56]	; 0x38
 8014e7c:	2400      	movs	r4, #0
 8014e7e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8014e82:	9316      	str	r3, [sp, #88]	; 0x58
 8014e84:	46a0      	mov	r8, r4
 8014e86:	9b07      	ldr	r3, [sp, #28]
 8014e88:	4648      	mov	r0, r9
 8014e8a:	6859      	ldr	r1, [r3, #4]
 8014e8c:	f001 fd36 	bl	80168fc <_Balloc>
 8014e90:	9005      	str	r0, [sp, #20]
 8014e92:	2800      	cmp	r0, #0
 8014e94:	f43f aef6 	beq.w	8014c84 <_strtod_l+0x43c>
 8014e98:	9b07      	ldr	r3, [sp, #28]
 8014e9a:	691a      	ldr	r2, [r3, #16]
 8014e9c:	3202      	adds	r2, #2
 8014e9e:	f103 010c 	add.w	r1, r3, #12
 8014ea2:	0092      	lsls	r2, r2, #2
 8014ea4:	300c      	adds	r0, #12
 8014ea6:	f7fe fdd3 	bl	8013a50 <memcpy>
 8014eaa:	aa1e      	add	r2, sp, #120	; 0x78
 8014eac:	a91d      	add	r1, sp, #116	; 0x74
 8014eae:	ec4b ab10 	vmov	d0, sl, fp
 8014eb2:	4648      	mov	r0, r9
 8014eb4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8014eb8:	f002 f862 	bl	8016f80 <__d2b>
 8014ebc:	901c      	str	r0, [sp, #112]	; 0x70
 8014ebe:	2800      	cmp	r0, #0
 8014ec0:	f43f aee0 	beq.w	8014c84 <_strtod_l+0x43c>
 8014ec4:	2101      	movs	r1, #1
 8014ec6:	4648      	mov	r0, r9
 8014ec8:	f001 fe2a 	bl	8016b20 <__i2b>
 8014ecc:	4680      	mov	r8, r0
 8014ece:	2800      	cmp	r0, #0
 8014ed0:	f43f aed8 	beq.w	8014c84 <_strtod_l+0x43c>
 8014ed4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8014ed6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014ed8:	2e00      	cmp	r6, #0
 8014eda:	bfab      	itete	ge
 8014edc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8014ede:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8014ee0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8014ee2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8014ee4:	bfac      	ite	ge
 8014ee6:	18f7      	addge	r7, r6, r3
 8014ee8:	1b9d      	sublt	r5, r3, r6
 8014eea:	9b04      	ldr	r3, [sp, #16]
 8014eec:	1af6      	subs	r6, r6, r3
 8014eee:	4416      	add	r6, r2
 8014ef0:	4b63      	ldr	r3, [pc, #396]	; (8015080 <_strtod_l+0x838>)
 8014ef2:	3e01      	subs	r6, #1
 8014ef4:	429e      	cmp	r6, r3
 8014ef6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8014efa:	f280 80af 	bge.w	801505c <_strtod_l+0x814>
 8014efe:	1b9b      	subs	r3, r3, r6
 8014f00:	2b1f      	cmp	r3, #31
 8014f02:	eba2 0203 	sub.w	r2, r2, r3
 8014f06:	f04f 0101 	mov.w	r1, #1
 8014f0a:	f300 809b 	bgt.w	8015044 <_strtod_l+0x7fc>
 8014f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8014f12:	930f      	str	r3, [sp, #60]	; 0x3c
 8014f14:	2300      	movs	r3, #0
 8014f16:	930a      	str	r3, [sp, #40]	; 0x28
 8014f18:	18be      	adds	r6, r7, r2
 8014f1a:	9b04      	ldr	r3, [sp, #16]
 8014f1c:	42b7      	cmp	r7, r6
 8014f1e:	4415      	add	r5, r2
 8014f20:	441d      	add	r5, r3
 8014f22:	463b      	mov	r3, r7
 8014f24:	bfa8      	it	ge
 8014f26:	4633      	movge	r3, r6
 8014f28:	42ab      	cmp	r3, r5
 8014f2a:	bfa8      	it	ge
 8014f2c:	462b      	movge	r3, r5
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	bfc2      	ittt	gt
 8014f32:	1af6      	subgt	r6, r6, r3
 8014f34:	1aed      	subgt	r5, r5, r3
 8014f36:	1aff      	subgt	r7, r7, r3
 8014f38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014f3a:	b1bb      	cbz	r3, 8014f6c <_strtod_l+0x724>
 8014f3c:	4641      	mov	r1, r8
 8014f3e:	461a      	mov	r2, r3
 8014f40:	4648      	mov	r0, r9
 8014f42:	f001 fe8d 	bl	8016c60 <__pow5mult>
 8014f46:	4680      	mov	r8, r0
 8014f48:	2800      	cmp	r0, #0
 8014f4a:	f43f ae9b 	beq.w	8014c84 <_strtod_l+0x43c>
 8014f4e:	4601      	mov	r1, r0
 8014f50:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014f52:	4648      	mov	r0, r9
 8014f54:	f001 fded 	bl	8016b32 <__multiply>
 8014f58:	900c      	str	r0, [sp, #48]	; 0x30
 8014f5a:	2800      	cmp	r0, #0
 8014f5c:	f43f ae92 	beq.w	8014c84 <_strtod_l+0x43c>
 8014f60:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014f62:	4648      	mov	r0, r9
 8014f64:	f001 fcfe 	bl	8016964 <_Bfree>
 8014f68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014f6a:	931c      	str	r3, [sp, #112]	; 0x70
 8014f6c:	2e00      	cmp	r6, #0
 8014f6e:	dc7a      	bgt.n	8015066 <_strtod_l+0x81e>
 8014f70:	9b06      	ldr	r3, [sp, #24]
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	dd08      	ble.n	8014f88 <_strtod_l+0x740>
 8014f76:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014f78:	9905      	ldr	r1, [sp, #20]
 8014f7a:	4648      	mov	r0, r9
 8014f7c:	f001 fe70 	bl	8016c60 <__pow5mult>
 8014f80:	9005      	str	r0, [sp, #20]
 8014f82:	2800      	cmp	r0, #0
 8014f84:	f43f ae7e 	beq.w	8014c84 <_strtod_l+0x43c>
 8014f88:	2d00      	cmp	r5, #0
 8014f8a:	dd08      	ble.n	8014f9e <_strtod_l+0x756>
 8014f8c:	462a      	mov	r2, r5
 8014f8e:	9905      	ldr	r1, [sp, #20]
 8014f90:	4648      	mov	r0, r9
 8014f92:	f001 feb3 	bl	8016cfc <__lshift>
 8014f96:	9005      	str	r0, [sp, #20]
 8014f98:	2800      	cmp	r0, #0
 8014f9a:	f43f ae73 	beq.w	8014c84 <_strtod_l+0x43c>
 8014f9e:	2f00      	cmp	r7, #0
 8014fa0:	dd08      	ble.n	8014fb4 <_strtod_l+0x76c>
 8014fa2:	4641      	mov	r1, r8
 8014fa4:	463a      	mov	r2, r7
 8014fa6:	4648      	mov	r0, r9
 8014fa8:	f001 fea8 	bl	8016cfc <__lshift>
 8014fac:	4680      	mov	r8, r0
 8014fae:	2800      	cmp	r0, #0
 8014fb0:	f43f ae68 	beq.w	8014c84 <_strtod_l+0x43c>
 8014fb4:	9a05      	ldr	r2, [sp, #20]
 8014fb6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014fb8:	4648      	mov	r0, r9
 8014fba:	f001 ff0d 	bl	8016dd8 <__mdiff>
 8014fbe:	4604      	mov	r4, r0
 8014fc0:	2800      	cmp	r0, #0
 8014fc2:	f43f ae5f 	beq.w	8014c84 <_strtod_l+0x43c>
 8014fc6:	68c3      	ldr	r3, [r0, #12]
 8014fc8:	930c      	str	r3, [sp, #48]	; 0x30
 8014fca:	2300      	movs	r3, #0
 8014fcc:	60c3      	str	r3, [r0, #12]
 8014fce:	4641      	mov	r1, r8
 8014fd0:	f001 fee8 	bl	8016da4 <__mcmp>
 8014fd4:	2800      	cmp	r0, #0
 8014fd6:	da55      	bge.n	8015084 <_strtod_l+0x83c>
 8014fd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014fda:	b9e3      	cbnz	r3, 8015016 <_strtod_l+0x7ce>
 8014fdc:	f1ba 0f00 	cmp.w	sl, #0
 8014fe0:	d119      	bne.n	8015016 <_strtod_l+0x7ce>
 8014fe2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014fe6:	b9b3      	cbnz	r3, 8015016 <_strtod_l+0x7ce>
 8014fe8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014fec:	0d1b      	lsrs	r3, r3, #20
 8014fee:	051b      	lsls	r3, r3, #20
 8014ff0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8014ff4:	d90f      	bls.n	8015016 <_strtod_l+0x7ce>
 8014ff6:	6963      	ldr	r3, [r4, #20]
 8014ff8:	b913      	cbnz	r3, 8015000 <_strtod_l+0x7b8>
 8014ffa:	6923      	ldr	r3, [r4, #16]
 8014ffc:	2b01      	cmp	r3, #1
 8014ffe:	dd0a      	ble.n	8015016 <_strtod_l+0x7ce>
 8015000:	4621      	mov	r1, r4
 8015002:	2201      	movs	r2, #1
 8015004:	4648      	mov	r0, r9
 8015006:	f001 fe79 	bl	8016cfc <__lshift>
 801500a:	4641      	mov	r1, r8
 801500c:	4604      	mov	r4, r0
 801500e:	f001 fec9 	bl	8016da4 <__mcmp>
 8015012:	2800      	cmp	r0, #0
 8015014:	dc67      	bgt.n	80150e6 <_strtod_l+0x89e>
 8015016:	9b04      	ldr	r3, [sp, #16]
 8015018:	2b00      	cmp	r3, #0
 801501a:	d171      	bne.n	8015100 <_strtod_l+0x8b8>
 801501c:	e63d      	b.n	8014c9a <_strtod_l+0x452>
 801501e:	f018 0f01 	tst.w	r8, #1
 8015022:	d004      	beq.n	801502e <_strtod_l+0x7e6>
 8015024:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015028:	f7eb fafe 	bl	8000628 <__aeabi_dmul>
 801502c:	2301      	movs	r3, #1
 801502e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8015032:	3508      	adds	r5, #8
 8015034:	e6e5      	b.n	8014e02 <_strtod_l+0x5ba>
 8015036:	f04f 32ff 	mov.w	r2, #4294967295
 801503a:	fa02 f303 	lsl.w	r3, r2, r3
 801503e:	ea03 0a0a 	and.w	sl, r3, sl
 8015042:	e6ff      	b.n	8014e44 <_strtod_l+0x5fc>
 8015044:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8015048:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801504c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8015050:	36e2      	adds	r6, #226	; 0xe2
 8015052:	fa01 f306 	lsl.w	r3, r1, r6
 8015056:	930a      	str	r3, [sp, #40]	; 0x28
 8015058:	910f      	str	r1, [sp, #60]	; 0x3c
 801505a:	e75d      	b.n	8014f18 <_strtod_l+0x6d0>
 801505c:	2300      	movs	r3, #0
 801505e:	930a      	str	r3, [sp, #40]	; 0x28
 8015060:	2301      	movs	r3, #1
 8015062:	930f      	str	r3, [sp, #60]	; 0x3c
 8015064:	e758      	b.n	8014f18 <_strtod_l+0x6d0>
 8015066:	4632      	mov	r2, r6
 8015068:	991c      	ldr	r1, [sp, #112]	; 0x70
 801506a:	4648      	mov	r0, r9
 801506c:	f001 fe46 	bl	8016cfc <__lshift>
 8015070:	901c      	str	r0, [sp, #112]	; 0x70
 8015072:	2800      	cmp	r0, #0
 8015074:	f47f af7c 	bne.w	8014f70 <_strtod_l+0x728>
 8015078:	e604      	b.n	8014c84 <_strtod_l+0x43c>
 801507a:	bf00      	nop
 801507c:	08018658 	.word	0x08018658
 8015080:	fffffc02 	.word	0xfffffc02
 8015084:	465d      	mov	r5, fp
 8015086:	f040 8086 	bne.w	8015196 <_strtod_l+0x94e>
 801508a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801508c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015090:	b32a      	cbz	r2, 80150de <_strtod_l+0x896>
 8015092:	4aaf      	ldr	r2, [pc, #700]	; (8015350 <_strtod_l+0xb08>)
 8015094:	4293      	cmp	r3, r2
 8015096:	d153      	bne.n	8015140 <_strtod_l+0x8f8>
 8015098:	9b04      	ldr	r3, [sp, #16]
 801509a:	4650      	mov	r0, sl
 801509c:	b1d3      	cbz	r3, 80150d4 <_strtod_l+0x88c>
 801509e:	4aad      	ldr	r2, [pc, #692]	; (8015354 <_strtod_l+0xb0c>)
 80150a0:	402a      	ands	r2, r5
 80150a2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80150a6:	f04f 31ff 	mov.w	r1, #4294967295
 80150aa:	d816      	bhi.n	80150da <_strtod_l+0x892>
 80150ac:	0d12      	lsrs	r2, r2, #20
 80150ae:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80150b2:	fa01 f303 	lsl.w	r3, r1, r3
 80150b6:	4298      	cmp	r0, r3
 80150b8:	d142      	bne.n	8015140 <_strtod_l+0x8f8>
 80150ba:	4ba7      	ldr	r3, [pc, #668]	; (8015358 <_strtod_l+0xb10>)
 80150bc:	429d      	cmp	r5, r3
 80150be:	d102      	bne.n	80150c6 <_strtod_l+0x87e>
 80150c0:	3001      	adds	r0, #1
 80150c2:	f43f addf 	beq.w	8014c84 <_strtod_l+0x43c>
 80150c6:	4ba3      	ldr	r3, [pc, #652]	; (8015354 <_strtod_l+0xb0c>)
 80150c8:	402b      	ands	r3, r5
 80150ca:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80150ce:	f04f 0a00 	mov.w	sl, #0
 80150d2:	e7a0      	b.n	8015016 <_strtod_l+0x7ce>
 80150d4:	f04f 33ff 	mov.w	r3, #4294967295
 80150d8:	e7ed      	b.n	80150b6 <_strtod_l+0x86e>
 80150da:	460b      	mov	r3, r1
 80150dc:	e7eb      	b.n	80150b6 <_strtod_l+0x86e>
 80150de:	bb7b      	cbnz	r3, 8015140 <_strtod_l+0x8f8>
 80150e0:	f1ba 0f00 	cmp.w	sl, #0
 80150e4:	d12c      	bne.n	8015140 <_strtod_l+0x8f8>
 80150e6:	9904      	ldr	r1, [sp, #16]
 80150e8:	4a9a      	ldr	r2, [pc, #616]	; (8015354 <_strtod_l+0xb0c>)
 80150ea:	465b      	mov	r3, fp
 80150ec:	b1f1      	cbz	r1, 801512c <_strtod_l+0x8e4>
 80150ee:	ea02 010b 	and.w	r1, r2, fp
 80150f2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80150f6:	dc19      	bgt.n	801512c <_strtod_l+0x8e4>
 80150f8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80150fc:	f77f ae5b 	ble.w	8014db6 <_strtod_l+0x56e>
 8015100:	4a96      	ldr	r2, [pc, #600]	; (801535c <_strtod_l+0xb14>)
 8015102:	2300      	movs	r3, #0
 8015104:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8015108:	4650      	mov	r0, sl
 801510a:	4659      	mov	r1, fp
 801510c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8015110:	f7eb fa8a 	bl	8000628 <__aeabi_dmul>
 8015114:	4682      	mov	sl, r0
 8015116:	468b      	mov	fp, r1
 8015118:	2900      	cmp	r1, #0
 801511a:	f47f adbe 	bne.w	8014c9a <_strtod_l+0x452>
 801511e:	2800      	cmp	r0, #0
 8015120:	f47f adbb 	bne.w	8014c9a <_strtod_l+0x452>
 8015124:	2322      	movs	r3, #34	; 0x22
 8015126:	f8c9 3000 	str.w	r3, [r9]
 801512a:	e5b6      	b.n	8014c9a <_strtod_l+0x452>
 801512c:	4013      	ands	r3, r2
 801512e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8015132:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8015136:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801513a:	f04f 3aff 	mov.w	sl, #4294967295
 801513e:	e76a      	b.n	8015016 <_strtod_l+0x7ce>
 8015140:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015142:	b193      	cbz	r3, 801516a <_strtod_l+0x922>
 8015144:	422b      	tst	r3, r5
 8015146:	f43f af66 	beq.w	8015016 <_strtod_l+0x7ce>
 801514a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801514c:	9a04      	ldr	r2, [sp, #16]
 801514e:	4650      	mov	r0, sl
 8015150:	4659      	mov	r1, fp
 8015152:	b173      	cbz	r3, 8015172 <_strtod_l+0x92a>
 8015154:	f7ff fb5c 	bl	8014810 <sulp>
 8015158:	4602      	mov	r2, r0
 801515a:	460b      	mov	r3, r1
 801515c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015160:	f7eb f8ac 	bl	80002bc <__adddf3>
 8015164:	4682      	mov	sl, r0
 8015166:	468b      	mov	fp, r1
 8015168:	e755      	b.n	8015016 <_strtod_l+0x7ce>
 801516a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801516c:	ea13 0f0a 	tst.w	r3, sl
 8015170:	e7e9      	b.n	8015146 <_strtod_l+0x8fe>
 8015172:	f7ff fb4d 	bl	8014810 <sulp>
 8015176:	4602      	mov	r2, r0
 8015178:	460b      	mov	r3, r1
 801517a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801517e:	f7eb f89b 	bl	80002b8 <__aeabi_dsub>
 8015182:	2200      	movs	r2, #0
 8015184:	2300      	movs	r3, #0
 8015186:	4682      	mov	sl, r0
 8015188:	468b      	mov	fp, r1
 801518a:	f7eb fcb5 	bl	8000af8 <__aeabi_dcmpeq>
 801518e:	2800      	cmp	r0, #0
 8015190:	f47f ae11 	bne.w	8014db6 <_strtod_l+0x56e>
 8015194:	e73f      	b.n	8015016 <_strtod_l+0x7ce>
 8015196:	4641      	mov	r1, r8
 8015198:	4620      	mov	r0, r4
 801519a:	f001 ff40 	bl	801701e <__ratio>
 801519e:	ec57 6b10 	vmov	r6, r7, d0
 80151a2:	2200      	movs	r2, #0
 80151a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80151a8:	ee10 0a10 	vmov	r0, s0
 80151ac:	4639      	mov	r1, r7
 80151ae:	f7eb fcb7 	bl	8000b20 <__aeabi_dcmple>
 80151b2:	2800      	cmp	r0, #0
 80151b4:	d077      	beq.n	80152a6 <_strtod_l+0xa5e>
 80151b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d04a      	beq.n	8015252 <_strtod_l+0xa0a>
 80151bc:	4b68      	ldr	r3, [pc, #416]	; (8015360 <_strtod_l+0xb18>)
 80151be:	2200      	movs	r2, #0
 80151c0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80151c4:	4f66      	ldr	r7, [pc, #408]	; (8015360 <_strtod_l+0xb18>)
 80151c6:	2600      	movs	r6, #0
 80151c8:	4b62      	ldr	r3, [pc, #392]	; (8015354 <_strtod_l+0xb0c>)
 80151ca:	402b      	ands	r3, r5
 80151cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80151ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80151d0:	4b64      	ldr	r3, [pc, #400]	; (8015364 <_strtod_l+0xb1c>)
 80151d2:	429a      	cmp	r2, r3
 80151d4:	f040 80ce 	bne.w	8015374 <_strtod_l+0xb2c>
 80151d8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80151dc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80151e0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80151e4:	ec4b ab10 	vmov	d0, sl, fp
 80151e8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80151ec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80151f0:	f001 fe50 	bl	8016e94 <__ulp>
 80151f4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80151f8:	ec53 2b10 	vmov	r2, r3, d0
 80151fc:	f7eb fa14 	bl	8000628 <__aeabi_dmul>
 8015200:	4652      	mov	r2, sl
 8015202:	465b      	mov	r3, fp
 8015204:	f7eb f85a 	bl	80002bc <__adddf3>
 8015208:	460b      	mov	r3, r1
 801520a:	4952      	ldr	r1, [pc, #328]	; (8015354 <_strtod_l+0xb0c>)
 801520c:	4a56      	ldr	r2, [pc, #344]	; (8015368 <_strtod_l+0xb20>)
 801520e:	4019      	ands	r1, r3
 8015210:	4291      	cmp	r1, r2
 8015212:	4682      	mov	sl, r0
 8015214:	d95b      	bls.n	80152ce <_strtod_l+0xa86>
 8015216:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015218:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801521c:	4293      	cmp	r3, r2
 801521e:	d103      	bne.n	8015228 <_strtod_l+0x9e0>
 8015220:	9b08      	ldr	r3, [sp, #32]
 8015222:	3301      	adds	r3, #1
 8015224:	f43f ad2e 	beq.w	8014c84 <_strtod_l+0x43c>
 8015228:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8015358 <_strtod_l+0xb10>
 801522c:	f04f 3aff 	mov.w	sl, #4294967295
 8015230:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015232:	4648      	mov	r0, r9
 8015234:	f001 fb96 	bl	8016964 <_Bfree>
 8015238:	9905      	ldr	r1, [sp, #20]
 801523a:	4648      	mov	r0, r9
 801523c:	f001 fb92 	bl	8016964 <_Bfree>
 8015240:	4641      	mov	r1, r8
 8015242:	4648      	mov	r0, r9
 8015244:	f001 fb8e 	bl	8016964 <_Bfree>
 8015248:	4621      	mov	r1, r4
 801524a:	4648      	mov	r0, r9
 801524c:	f001 fb8a 	bl	8016964 <_Bfree>
 8015250:	e619      	b.n	8014e86 <_strtod_l+0x63e>
 8015252:	f1ba 0f00 	cmp.w	sl, #0
 8015256:	d11a      	bne.n	801528e <_strtod_l+0xa46>
 8015258:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801525c:	b9eb      	cbnz	r3, 801529a <_strtod_l+0xa52>
 801525e:	2200      	movs	r2, #0
 8015260:	4b3f      	ldr	r3, [pc, #252]	; (8015360 <_strtod_l+0xb18>)
 8015262:	4630      	mov	r0, r6
 8015264:	4639      	mov	r1, r7
 8015266:	f7eb fc51 	bl	8000b0c <__aeabi_dcmplt>
 801526a:	b9c8      	cbnz	r0, 80152a0 <_strtod_l+0xa58>
 801526c:	4630      	mov	r0, r6
 801526e:	4639      	mov	r1, r7
 8015270:	2200      	movs	r2, #0
 8015272:	4b3e      	ldr	r3, [pc, #248]	; (801536c <_strtod_l+0xb24>)
 8015274:	f7eb f9d8 	bl	8000628 <__aeabi_dmul>
 8015278:	4606      	mov	r6, r0
 801527a:	460f      	mov	r7, r1
 801527c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8015280:	9618      	str	r6, [sp, #96]	; 0x60
 8015282:	9319      	str	r3, [sp, #100]	; 0x64
 8015284:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8015288:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801528c:	e79c      	b.n	80151c8 <_strtod_l+0x980>
 801528e:	f1ba 0f01 	cmp.w	sl, #1
 8015292:	d102      	bne.n	801529a <_strtod_l+0xa52>
 8015294:	2d00      	cmp	r5, #0
 8015296:	f43f ad8e 	beq.w	8014db6 <_strtod_l+0x56e>
 801529a:	2200      	movs	r2, #0
 801529c:	4b34      	ldr	r3, [pc, #208]	; (8015370 <_strtod_l+0xb28>)
 801529e:	e78f      	b.n	80151c0 <_strtod_l+0x978>
 80152a0:	2600      	movs	r6, #0
 80152a2:	4f32      	ldr	r7, [pc, #200]	; (801536c <_strtod_l+0xb24>)
 80152a4:	e7ea      	b.n	801527c <_strtod_l+0xa34>
 80152a6:	4b31      	ldr	r3, [pc, #196]	; (801536c <_strtod_l+0xb24>)
 80152a8:	4630      	mov	r0, r6
 80152aa:	4639      	mov	r1, r7
 80152ac:	2200      	movs	r2, #0
 80152ae:	f7eb f9bb 	bl	8000628 <__aeabi_dmul>
 80152b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80152b4:	4606      	mov	r6, r0
 80152b6:	460f      	mov	r7, r1
 80152b8:	b933      	cbnz	r3, 80152c8 <_strtod_l+0xa80>
 80152ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80152be:	9010      	str	r0, [sp, #64]	; 0x40
 80152c0:	9311      	str	r3, [sp, #68]	; 0x44
 80152c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80152c6:	e7df      	b.n	8015288 <_strtod_l+0xa40>
 80152c8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80152cc:	e7f9      	b.n	80152c2 <_strtod_l+0xa7a>
 80152ce:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80152d2:	9b04      	ldr	r3, [sp, #16]
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d1ab      	bne.n	8015230 <_strtod_l+0x9e8>
 80152d8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80152dc:	0d1b      	lsrs	r3, r3, #20
 80152de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80152e0:	051b      	lsls	r3, r3, #20
 80152e2:	429a      	cmp	r2, r3
 80152e4:	465d      	mov	r5, fp
 80152e6:	d1a3      	bne.n	8015230 <_strtod_l+0x9e8>
 80152e8:	4639      	mov	r1, r7
 80152ea:	4630      	mov	r0, r6
 80152ec:	f7eb fc4c 	bl	8000b88 <__aeabi_d2iz>
 80152f0:	f7eb f930 	bl	8000554 <__aeabi_i2d>
 80152f4:	460b      	mov	r3, r1
 80152f6:	4602      	mov	r2, r0
 80152f8:	4639      	mov	r1, r7
 80152fa:	4630      	mov	r0, r6
 80152fc:	f7ea ffdc 	bl	80002b8 <__aeabi_dsub>
 8015300:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015302:	4606      	mov	r6, r0
 8015304:	460f      	mov	r7, r1
 8015306:	b933      	cbnz	r3, 8015316 <_strtod_l+0xace>
 8015308:	f1ba 0f00 	cmp.w	sl, #0
 801530c:	d103      	bne.n	8015316 <_strtod_l+0xace>
 801530e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8015312:	2d00      	cmp	r5, #0
 8015314:	d06d      	beq.n	80153f2 <_strtod_l+0xbaa>
 8015316:	a30a      	add	r3, pc, #40	; (adr r3, 8015340 <_strtod_l+0xaf8>)
 8015318:	e9d3 2300 	ldrd	r2, r3, [r3]
 801531c:	4630      	mov	r0, r6
 801531e:	4639      	mov	r1, r7
 8015320:	f7eb fbf4 	bl	8000b0c <__aeabi_dcmplt>
 8015324:	2800      	cmp	r0, #0
 8015326:	f47f acb8 	bne.w	8014c9a <_strtod_l+0x452>
 801532a:	a307      	add	r3, pc, #28	; (adr r3, 8015348 <_strtod_l+0xb00>)
 801532c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015330:	4630      	mov	r0, r6
 8015332:	4639      	mov	r1, r7
 8015334:	f7eb fc08 	bl	8000b48 <__aeabi_dcmpgt>
 8015338:	2800      	cmp	r0, #0
 801533a:	f43f af79 	beq.w	8015230 <_strtod_l+0x9e8>
 801533e:	e4ac      	b.n	8014c9a <_strtod_l+0x452>
 8015340:	94a03595 	.word	0x94a03595
 8015344:	3fdfffff 	.word	0x3fdfffff
 8015348:	35afe535 	.word	0x35afe535
 801534c:	3fe00000 	.word	0x3fe00000
 8015350:	000fffff 	.word	0x000fffff
 8015354:	7ff00000 	.word	0x7ff00000
 8015358:	7fefffff 	.word	0x7fefffff
 801535c:	39500000 	.word	0x39500000
 8015360:	3ff00000 	.word	0x3ff00000
 8015364:	7fe00000 	.word	0x7fe00000
 8015368:	7c9fffff 	.word	0x7c9fffff
 801536c:	3fe00000 	.word	0x3fe00000
 8015370:	bff00000 	.word	0xbff00000
 8015374:	9b04      	ldr	r3, [sp, #16]
 8015376:	b333      	cbz	r3, 80153c6 <_strtod_l+0xb7e>
 8015378:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801537a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801537e:	d822      	bhi.n	80153c6 <_strtod_l+0xb7e>
 8015380:	a327      	add	r3, pc, #156	; (adr r3, 8015420 <_strtod_l+0xbd8>)
 8015382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015386:	4630      	mov	r0, r6
 8015388:	4639      	mov	r1, r7
 801538a:	f7eb fbc9 	bl	8000b20 <__aeabi_dcmple>
 801538e:	b1a0      	cbz	r0, 80153ba <_strtod_l+0xb72>
 8015390:	4639      	mov	r1, r7
 8015392:	4630      	mov	r0, r6
 8015394:	f7eb fc20 	bl	8000bd8 <__aeabi_d2uiz>
 8015398:	2800      	cmp	r0, #0
 801539a:	bf08      	it	eq
 801539c:	2001      	moveq	r0, #1
 801539e:	f7eb f8c9 	bl	8000534 <__aeabi_ui2d>
 80153a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80153a4:	4606      	mov	r6, r0
 80153a6:	460f      	mov	r7, r1
 80153a8:	bb03      	cbnz	r3, 80153ec <_strtod_l+0xba4>
 80153aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80153ae:	9012      	str	r0, [sp, #72]	; 0x48
 80153b0:	9313      	str	r3, [sp, #76]	; 0x4c
 80153b2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80153b6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80153ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80153bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80153be:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80153c2:	1a9b      	subs	r3, r3, r2
 80153c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80153c6:	ed9d 0b08 	vldr	d0, [sp, #32]
 80153ca:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80153ce:	f001 fd61 	bl	8016e94 <__ulp>
 80153d2:	4650      	mov	r0, sl
 80153d4:	ec53 2b10 	vmov	r2, r3, d0
 80153d8:	4659      	mov	r1, fp
 80153da:	f7eb f925 	bl	8000628 <__aeabi_dmul>
 80153de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80153e2:	f7ea ff6b 	bl	80002bc <__adddf3>
 80153e6:	4682      	mov	sl, r0
 80153e8:	468b      	mov	fp, r1
 80153ea:	e772      	b.n	80152d2 <_strtod_l+0xa8a>
 80153ec:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80153f0:	e7df      	b.n	80153b2 <_strtod_l+0xb6a>
 80153f2:	a30d      	add	r3, pc, #52	; (adr r3, 8015428 <_strtod_l+0xbe0>)
 80153f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153f8:	f7eb fb88 	bl	8000b0c <__aeabi_dcmplt>
 80153fc:	e79c      	b.n	8015338 <_strtod_l+0xaf0>
 80153fe:	2300      	movs	r3, #0
 8015400:	930d      	str	r3, [sp, #52]	; 0x34
 8015402:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015404:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015406:	6013      	str	r3, [r2, #0]
 8015408:	f7ff ba61 	b.w	80148ce <_strtod_l+0x86>
 801540c:	2b65      	cmp	r3, #101	; 0x65
 801540e:	f04f 0200 	mov.w	r2, #0
 8015412:	f43f ab4e 	beq.w	8014ab2 <_strtod_l+0x26a>
 8015416:	2101      	movs	r1, #1
 8015418:	4614      	mov	r4, r2
 801541a:	9104      	str	r1, [sp, #16]
 801541c:	f7ff bacb 	b.w	80149b6 <_strtod_l+0x16e>
 8015420:	ffc00000 	.word	0xffc00000
 8015424:	41dfffff 	.word	0x41dfffff
 8015428:	94a03595 	.word	0x94a03595
 801542c:	3fcfffff 	.word	0x3fcfffff

08015430 <_strtod_r>:
 8015430:	4b05      	ldr	r3, [pc, #20]	; (8015448 <_strtod_r+0x18>)
 8015432:	681b      	ldr	r3, [r3, #0]
 8015434:	b410      	push	{r4}
 8015436:	6a1b      	ldr	r3, [r3, #32]
 8015438:	4c04      	ldr	r4, [pc, #16]	; (801544c <_strtod_r+0x1c>)
 801543a:	2b00      	cmp	r3, #0
 801543c:	bf08      	it	eq
 801543e:	4623      	moveq	r3, r4
 8015440:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015444:	f7ff ba00 	b.w	8014848 <_strtod_l>
 8015448:	2000000c 	.word	0x2000000c
 801544c:	20000070 	.word	0x20000070

08015450 <_strtol_l.isra.0>:
 8015450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015454:	4680      	mov	r8, r0
 8015456:	4689      	mov	r9, r1
 8015458:	4692      	mov	sl, r2
 801545a:	461e      	mov	r6, r3
 801545c:	460f      	mov	r7, r1
 801545e:	463d      	mov	r5, r7
 8015460:	9808      	ldr	r0, [sp, #32]
 8015462:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015466:	f001 fa0d 	bl	8016884 <__locale_ctype_ptr_l>
 801546a:	4420      	add	r0, r4
 801546c:	7843      	ldrb	r3, [r0, #1]
 801546e:	f013 0308 	ands.w	r3, r3, #8
 8015472:	d132      	bne.n	80154da <_strtol_l.isra.0+0x8a>
 8015474:	2c2d      	cmp	r4, #45	; 0x2d
 8015476:	d132      	bne.n	80154de <_strtol_l.isra.0+0x8e>
 8015478:	787c      	ldrb	r4, [r7, #1]
 801547a:	1cbd      	adds	r5, r7, #2
 801547c:	2201      	movs	r2, #1
 801547e:	2e00      	cmp	r6, #0
 8015480:	d05d      	beq.n	801553e <_strtol_l.isra.0+0xee>
 8015482:	2e10      	cmp	r6, #16
 8015484:	d109      	bne.n	801549a <_strtol_l.isra.0+0x4a>
 8015486:	2c30      	cmp	r4, #48	; 0x30
 8015488:	d107      	bne.n	801549a <_strtol_l.isra.0+0x4a>
 801548a:	782b      	ldrb	r3, [r5, #0]
 801548c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8015490:	2b58      	cmp	r3, #88	; 0x58
 8015492:	d14f      	bne.n	8015534 <_strtol_l.isra.0+0xe4>
 8015494:	786c      	ldrb	r4, [r5, #1]
 8015496:	2610      	movs	r6, #16
 8015498:	3502      	adds	r5, #2
 801549a:	2a00      	cmp	r2, #0
 801549c:	bf14      	ite	ne
 801549e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80154a2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80154a6:	2700      	movs	r7, #0
 80154a8:	fbb1 fcf6 	udiv	ip, r1, r6
 80154ac:	4638      	mov	r0, r7
 80154ae:	fb06 1e1c 	mls	lr, r6, ip, r1
 80154b2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80154b6:	2b09      	cmp	r3, #9
 80154b8:	d817      	bhi.n	80154ea <_strtol_l.isra.0+0x9a>
 80154ba:	461c      	mov	r4, r3
 80154bc:	42a6      	cmp	r6, r4
 80154be:	dd23      	ble.n	8015508 <_strtol_l.isra.0+0xb8>
 80154c0:	1c7b      	adds	r3, r7, #1
 80154c2:	d007      	beq.n	80154d4 <_strtol_l.isra.0+0x84>
 80154c4:	4584      	cmp	ip, r0
 80154c6:	d31c      	bcc.n	8015502 <_strtol_l.isra.0+0xb2>
 80154c8:	d101      	bne.n	80154ce <_strtol_l.isra.0+0x7e>
 80154ca:	45a6      	cmp	lr, r4
 80154cc:	db19      	blt.n	8015502 <_strtol_l.isra.0+0xb2>
 80154ce:	fb00 4006 	mla	r0, r0, r6, r4
 80154d2:	2701      	movs	r7, #1
 80154d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80154d8:	e7eb      	b.n	80154b2 <_strtol_l.isra.0+0x62>
 80154da:	462f      	mov	r7, r5
 80154dc:	e7bf      	b.n	801545e <_strtol_l.isra.0+0xe>
 80154de:	2c2b      	cmp	r4, #43	; 0x2b
 80154e0:	bf04      	itt	eq
 80154e2:	1cbd      	addeq	r5, r7, #2
 80154e4:	787c      	ldrbeq	r4, [r7, #1]
 80154e6:	461a      	mov	r2, r3
 80154e8:	e7c9      	b.n	801547e <_strtol_l.isra.0+0x2e>
 80154ea:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80154ee:	2b19      	cmp	r3, #25
 80154f0:	d801      	bhi.n	80154f6 <_strtol_l.isra.0+0xa6>
 80154f2:	3c37      	subs	r4, #55	; 0x37
 80154f4:	e7e2      	b.n	80154bc <_strtol_l.isra.0+0x6c>
 80154f6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80154fa:	2b19      	cmp	r3, #25
 80154fc:	d804      	bhi.n	8015508 <_strtol_l.isra.0+0xb8>
 80154fe:	3c57      	subs	r4, #87	; 0x57
 8015500:	e7dc      	b.n	80154bc <_strtol_l.isra.0+0x6c>
 8015502:	f04f 37ff 	mov.w	r7, #4294967295
 8015506:	e7e5      	b.n	80154d4 <_strtol_l.isra.0+0x84>
 8015508:	1c7b      	adds	r3, r7, #1
 801550a:	d108      	bne.n	801551e <_strtol_l.isra.0+0xce>
 801550c:	2322      	movs	r3, #34	; 0x22
 801550e:	f8c8 3000 	str.w	r3, [r8]
 8015512:	4608      	mov	r0, r1
 8015514:	f1ba 0f00 	cmp.w	sl, #0
 8015518:	d107      	bne.n	801552a <_strtol_l.isra.0+0xda>
 801551a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801551e:	b102      	cbz	r2, 8015522 <_strtol_l.isra.0+0xd2>
 8015520:	4240      	negs	r0, r0
 8015522:	f1ba 0f00 	cmp.w	sl, #0
 8015526:	d0f8      	beq.n	801551a <_strtol_l.isra.0+0xca>
 8015528:	b10f      	cbz	r7, 801552e <_strtol_l.isra.0+0xde>
 801552a:	f105 39ff 	add.w	r9, r5, #4294967295
 801552e:	f8ca 9000 	str.w	r9, [sl]
 8015532:	e7f2      	b.n	801551a <_strtol_l.isra.0+0xca>
 8015534:	2430      	movs	r4, #48	; 0x30
 8015536:	2e00      	cmp	r6, #0
 8015538:	d1af      	bne.n	801549a <_strtol_l.isra.0+0x4a>
 801553a:	2608      	movs	r6, #8
 801553c:	e7ad      	b.n	801549a <_strtol_l.isra.0+0x4a>
 801553e:	2c30      	cmp	r4, #48	; 0x30
 8015540:	d0a3      	beq.n	801548a <_strtol_l.isra.0+0x3a>
 8015542:	260a      	movs	r6, #10
 8015544:	e7a9      	b.n	801549a <_strtol_l.isra.0+0x4a>
	...

08015548 <_strtol_r>:
 8015548:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801554a:	4c06      	ldr	r4, [pc, #24]	; (8015564 <_strtol_r+0x1c>)
 801554c:	4d06      	ldr	r5, [pc, #24]	; (8015568 <_strtol_r+0x20>)
 801554e:	6824      	ldr	r4, [r4, #0]
 8015550:	6a24      	ldr	r4, [r4, #32]
 8015552:	2c00      	cmp	r4, #0
 8015554:	bf08      	it	eq
 8015556:	462c      	moveq	r4, r5
 8015558:	9400      	str	r4, [sp, #0]
 801555a:	f7ff ff79 	bl	8015450 <_strtol_l.isra.0>
 801555e:	b003      	add	sp, #12
 8015560:	bd30      	pop	{r4, r5, pc}
 8015562:	bf00      	nop
 8015564:	2000000c 	.word	0x2000000c
 8015568:	20000070 	.word	0x20000070

0801556c <_vsiprintf_r>:
 801556c:	b500      	push	{lr}
 801556e:	b09b      	sub	sp, #108	; 0x6c
 8015570:	9100      	str	r1, [sp, #0]
 8015572:	9104      	str	r1, [sp, #16]
 8015574:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015578:	9105      	str	r1, [sp, #20]
 801557a:	9102      	str	r1, [sp, #8]
 801557c:	4905      	ldr	r1, [pc, #20]	; (8015594 <_vsiprintf_r+0x28>)
 801557e:	9103      	str	r1, [sp, #12]
 8015580:	4669      	mov	r1, sp
 8015582:	f001 fecb 	bl	801731c <_svfiprintf_r>
 8015586:	9b00      	ldr	r3, [sp, #0]
 8015588:	2200      	movs	r2, #0
 801558a:	701a      	strb	r2, [r3, #0]
 801558c:	b01b      	add	sp, #108	; 0x6c
 801558e:	f85d fb04 	ldr.w	pc, [sp], #4
 8015592:	bf00      	nop
 8015594:	ffff0208 	.word	0xffff0208

08015598 <vsiprintf>:
 8015598:	4613      	mov	r3, r2
 801559a:	460a      	mov	r2, r1
 801559c:	4601      	mov	r1, r0
 801559e:	4802      	ldr	r0, [pc, #8]	; (80155a8 <vsiprintf+0x10>)
 80155a0:	6800      	ldr	r0, [r0, #0]
 80155a2:	f7ff bfe3 	b.w	801556c <_vsiprintf_r>
 80155a6:	bf00      	nop
 80155a8:	2000000c 	.word	0x2000000c

080155ac <quorem>:
 80155ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155b0:	6903      	ldr	r3, [r0, #16]
 80155b2:	690c      	ldr	r4, [r1, #16]
 80155b4:	42a3      	cmp	r3, r4
 80155b6:	4680      	mov	r8, r0
 80155b8:	f2c0 8082 	blt.w	80156c0 <quorem+0x114>
 80155bc:	3c01      	subs	r4, #1
 80155be:	f101 0714 	add.w	r7, r1, #20
 80155c2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80155c6:	f100 0614 	add.w	r6, r0, #20
 80155ca:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80155ce:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80155d2:	eb06 030c 	add.w	r3, r6, ip
 80155d6:	3501      	adds	r5, #1
 80155d8:	eb07 090c 	add.w	r9, r7, ip
 80155dc:	9301      	str	r3, [sp, #4]
 80155de:	fbb0 f5f5 	udiv	r5, r0, r5
 80155e2:	b395      	cbz	r5, 801564a <quorem+0x9e>
 80155e4:	f04f 0a00 	mov.w	sl, #0
 80155e8:	4638      	mov	r0, r7
 80155ea:	46b6      	mov	lr, r6
 80155ec:	46d3      	mov	fp, sl
 80155ee:	f850 2b04 	ldr.w	r2, [r0], #4
 80155f2:	b293      	uxth	r3, r2
 80155f4:	fb05 a303 	mla	r3, r5, r3, sl
 80155f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80155fc:	b29b      	uxth	r3, r3
 80155fe:	ebab 0303 	sub.w	r3, fp, r3
 8015602:	0c12      	lsrs	r2, r2, #16
 8015604:	f8de b000 	ldr.w	fp, [lr]
 8015608:	fb05 a202 	mla	r2, r5, r2, sl
 801560c:	fa13 f38b 	uxtah	r3, r3, fp
 8015610:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8015614:	fa1f fb82 	uxth.w	fp, r2
 8015618:	f8de 2000 	ldr.w	r2, [lr]
 801561c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8015620:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015624:	b29b      	uxth	r3, r3
 8015626:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801562a:	4581      	cmp	r9, r0
 801562c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8015630:	f84e 3b04 	str.w	r3, [lr], #4
 8015634:	d2db      	bcs.n	80155ee <quorem+0x42>
 8015636:	f856 300c 	ldr.w	r3, [r6, ip]
 801563a:	b933      	cbnz	r3, 801564a <quorem+0x9e>
 801563c:	9b01      	ldr	r3, [sp, #4]
 801563e:	3b04      	subs	r3, #4
 8015640:	429e      	cmp	r6, r3
 8015642:	461a      	mov	r2, r3
 8015644:	d330      	bcc.n	80156a8 <quorem+0xfc>
 8015646:	f8c8 4010 	str.w	r4, [r8, #16]
 801564a:	4640      	mov	r0, r8
 801564c:	f001 fbaa 	bl	8016da4 <__mcmp>
 8015650:	2800      	cmp	r0, #0
 8015652:	db25      	blt.n	80156a0 <quorem+0xf4>
 8015654:	3501      	adds	r5, #1
 8015656:	4630      	mov	r0, r6
 8015658:	f04f 0c00 	mov.w	ip, #0
 801565c:	f857 2b04 	ldr.w	r2, [r7], #4
 8015660:	f8d0 e000 	ldr.w	lr, [r0]
 8015664:	b293      	uxth	r3, r2
 8015666:	ebac 0303 	sub.w	r3, ip, r3
 801566a:	0c12      	lsrs	r2, r2, #16
 801566c:	fa13 f38e 	uxtah	r3, r3, lr
 8015670:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8015674:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015678:	b29b      	uxth	r3, r3
 801567a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801567e:	45b9      	cmp	r9, r7
 8015680:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8015684:	f840 3b04 	str.w	r3, [r0], #4
 8015688:	d2e8      	bcs.n	801565c <quorem+0xb0>
 801568a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801568e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8015692:	b92a      	cbnz	r2, 80156a0 <quorem+0xf4>
 8015694:	3b04      	subs	r3, #4
 8015696:	429e      	cmp	r6, r3
 8015698:	461a      	mov	r2, r3
 801569a:	d30b      	bcc.n	80156b4 <quorem+0x108>
 801569c:	f8c8 4010 	str.w	r4, [r8, #16]
 80156a0:	4628      	mov	r0, r5
 80156a2:	b003      	add	sp, #12
 80156a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156a8:	6812      	ldr	r2, [r2, #0]
 80156aa:	3b04      	subs	r3, #4
 80156ac:	2a00      	cmp	r2, #0
 80156ae:	d1ca      	bne.n	8015646 <quorem+0x9a>
 80156b0:	3c01      	subs	r4, #1
 80156b2:	e7c5      	b.n	8015640 <quorem+0x94>
 80156b4:	6812      	ldr	r2, [r2, #0]
 80156b6:	3b04      	subs	r3, #4
 80156b8:	2a00      	cmp	r2, #0
 80156ba:	d1ef      	bne.n	801569c <quorem+0xf0>
 80156bc:	3c01      	subs	r4, #1
 80156be:	e7ea      	b.n	8015696 <quorem+0xea>
 80156c0:	2000      	movs	r0, #0
 80156c2:	e7ee      	b.n	80156a2 <quorem+0xf6>
 80156c4:	0000      	movs	r0, r0
	...

080156c8 <_dtoa_r>:
 80156c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156cc:	ec57 6b10 	vmov	r6, r7, d0
 80156d0:	b097      	sub	sp, #92	; 0x5c
 80156d2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80156d4:	9106      	str	r1, [sp, #24]
 80156d6:	4604      	mov	r4, r0
 80156d8:	920b      	str	r2, [sp, #44]	; 0x2c
 80156da:	9312      	str	r3, [sp, #72]	; 0x48
 80156dc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80156e0:	e9cd 6700 	strd	r6, r7, [sp]
 80156e4:	b93d      	cbnz	r5, 80156f6 <_dtoa_r+0x2e>
 80156e6:	2010      	movs	r0, #16
 80156e8:	f001 f8ee 	bl	80168c8 <malloc>
 80156ec:	6260      	str	r0, [r4, #36]	; 0x24
 80156ee:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80156f2:	6005      	str	r5, [r0, #0]
 80156f4:	60c5      	str	r5, [r0, #12]
 80156f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80156f8:	6819      	ldr	r1, [r3, #0]
 80156fa:	b151      	cbz	r1, 8015712 <_dtoa_r+0x4a>
 80156fc:	685a      	ldr	r2, [r3, #4]
 80156fe:	604a      	str	r2, [r1, #4]
 8015700:	2301      	movs	r3, #1
 8015702:	4093      	lsls	r3, r2
 8015704:	608b      	str	r3, [r1, #8]
 8015706:	4620      	mov	r0, r4
 8015708:	f001 f92c 	bl	8016964 <_Bfree>
 801570c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801570e:	2200      	movs	r2, #0
 8015710:	601a      	str	r2, [r3, #0]
 8015712:	1e3b      	subs	r3, r7, #0
 8015714:	bfbb      	ittet	lt
 8015716:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801571a:	9301      	strlt	r3, [sp, #4]
 801571c:	2300      	movge	r3, #0
 801571e:	2201      	movlt	r2, #1
 8015720:	bfac      	ite	ge
 8015722:	f8c8 3000 	strge.w	r3, [r8]
 8015726:	f8c8 2000 	strlt.w	r2, [r8]
 801572a:	4baf      	ldr	r3, [pc, #700]	; (80159e8 <_dtoa_r+0x320>)
 801572c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015730:	ea33 0308 	bics.w	r3, r3, r8
 8015734:	d114      	bne.n	8015760 <_dtoa_r+0x98>
 8015736:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015738:	f242 730f 	movw	r3, #9999	; 0x270f
 801573c:	6013      	str	r3, [r2, #0]
 801573e:	9b00      	ldr	r3, [sp, #0]
 8015740:	b923      	cbnz	r3, 801574c <_dtoa_r+0x84>
 8015742:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8015746:	2800      	cmp	r0, #0
 8015748:	f000 8542 	beq.w	80161d0 <_dtoa_r+0xb08>
 801574c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801574e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80159fc <_dtoa_r+0x334>
 8015752:	2b00      	cmp	r3, #0
 8015754:	f000 8544 	beq.w	80161e0 <_dtoa_r+0xb18>
 8015758:	f10b 0303 	add.w	r3, fp, #3
 801575c:	f000 bd3e 	b.w	80161dc <_dtoa_r+0xb14>
 8015760:	e9dd 6700 	ldrd	r6, r7, [sp]
 8015764:	2200      	movs	r2, #0
 8015766:	2300      	movs	r3, #0
 8015768:	4630      	mov	r0, r6
 801576a:	4639      	mov	r1, r7
 801576c:	f7eb f9c4 	bl	8000af8 <__aeabi_dcmpeq>
 8015770:	4681      	mov	r9, r0
 8015772:	b168      	cbz	r0, 8015790 <_dtoa_r+0xc8>
 8015774:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015776:	2301      	movs	r3, #1
 8015778:	6013      	str	r3, [r2, #0]
 801577a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801577c:	2b00      	cmp	r3, #0
 801577e:	f000 8524 	beq.w	80161ca <_dtoa_r+0xb02>
 8015782:	4b9a      	ldr	r3, [pc, #616]	; (80159ec <_dtoa_r+0x324>)
 8015784:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015786:	f103 3bff 	add.w	fp, r3, #4294967295
 801578a:	6013      	str	r3, [r2, #0]
 801578c:	f000 bd28 	b.w	80161e0 <_dtoa_r+0xb18>
 8015790:	aa14      	add	r2, sp, #80	; 0x50
 8015792:	a915      	add	r1, sp, #84	; 0x54
 8015794:	ec47 6b10 	vmov	d0, r6, r7
 8015798:	4620      	mov	r0, r4
 801579a:	f001 fbf1 	bl	8016f80 <__d2b>
 801579e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80157a2:	9004      	str	r0, [sp, #16]
 80157a4:	2d00      	cmp	r5, #0
 80157a6:	d07c      	beq.n	80158a2 <_dtoa_r+0x1da>
 80157a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80157ac:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80157b0:	46b2      	mov	sl, r6
 80157b2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80157b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80157ba:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80157be:	2200      	movs	r2, #0
 80157c0:	4b8b      	ldr	r3, [pc, #556]	; (80159f0 <_dtoa_r+0x328>)
 80157c2:	4650      	mov	r0, sl
 80157c4:	4659      	mov	r1, fp
 80157c6:	f7ea fd77 	bl	80002b8 <__aeabi_dsub>
 80157ca:	a381      	add	r3, pc, #516	; (adr r3, 80159d0 <_dtoa_r+0x308>)
 80157cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157d0:	f7ea ff2a 	bl	8000628 <__aeabi_dmul>
 80157d4:	a380      	add	r3, pc, #512	; (adr r3, 80159d8 <_dtoa_r+0x310>)
 80157d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157da:	f7ea fd6f 	bl	80002bc <__adddf3>
 80157de:	4606      	mov	r6, r0
 80157e0:	4628      	mov	r0, r5
 80157e2:	460f      	mov	r7, r1
 80157e4:	f7ea feb6 	bl	8000554 <__aeabi_i2d>
 80157e8:	a37d      	add	r3, pc, #500	; (adr r3, 80159e0 <_dtoa_r+0x318>)
 80157ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157ee:	f7ea ff1b 	bl	8000628 <__aeabi_dmul>
 80157f2:	4602      	mov	r2, r0
 80157f4:	460b      	mov	r3, r1
 80157f6:	4630      	mov	r0, r6
 80157f8:	4639      	mov	r1, r7
 80157fa:	f7ea fd5f 	bl	80002bc <__adddf3>
 80157fe:	4606      	mov	r6, r0
 8015800:	460f      	mov	r7, r1
 8015802:	f7eb f9c1 	bl	8000b88 <__aeabi_d2iz>
 8015806:	2200      	movs	r2, #0
 8015808:	4682      	mov	sl, r0
 801580a:	2300      	movs	r3, #0
 801580c:	4630      	mov	r0, r6
 801580e:	4639      	mov	r1, r7
 8015810:	f7eb f97c 	bl	8000b0c <__aeabi_dcmplt>
 8015814:	b148      	cbz	r0, 801582a <_dtoa_r+0x162>
 8015816:	4650      	mov	r0, sl
 8015818:	f7ea fe9c 	bl	8000554 <__aeabi_i2d>
 801581c:	4632      	mov	r2, r6
 801581e:	463b      	mov	r3, r7
 8015820:	f7eb f96a 	bl	8000af8 <__aeabi_dcmpeq>
 8015824:	b908      	cbnz	r0, 801582a <_dtoa_r+0x162>
 8015826:	f10a 3aff 	add.w	sl, sl, #4294967295
 801582a:	f1ba 0f16 	cmp.w	sl, #22
 801582e:	d859      	bhi.n	80158e4 <_dtoa_r+0x21c>
 8015830:	4970      	ldr	r1, [pc, #448]	; (80159f4 <_dtoa_r+0x32c>)
 8015832:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8015836:	e9dd 2300 	ldrd	r2, r3, [sp]
 801583a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801583e:	f7eb f983 	bl	8000b48 <__aeabi_dcmpgt>
 8015842:	2800      	cmp	r0, #0
 8015844:	d050      	beq.n	80158e8 <_dtoa_r+0x220>
 8015846:	f10a 3aff 	add.w	sl, sl, #4294967295
 801584a:	2300      	movs	r3, #0
 801584c:	930f      	str	r3, [sp, #60]	; 0x3c
 801584e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015850:	1b5d      	subs	r5, r3, r5
 8015852:	f1b5 0801 	subs.w	r8, r5, #1
 8015856:	bf49      	itett	mi
 8015858:	f1c5 0301 	rsbmi	r3, r5, #1
 801585c:	2300      	movpl	r3, #0
 801585e:	9305      	strmi	r3, [sp, #20]
 8015860:	f04f 0800 	movmi.w	r8, #0
 8015864:	bf58      	it	pl
 8015866:	9305      	strpl	r3, [sp, #20]
 8015868:	f1ba 0f00 	cmp.w	sl, #0
 801586c:	db3e      	blt.n	80158ec <_dtoa_r+0x224>
 801586e:	2300      	movs	r3, #0
 8015870:	44d0      	add	r8, sl
 8015872:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8015876:	9307      	str	r3, [sp, #28]
 8015878:	9b06      	ldr	r3, [sp, #24]
 801587a:	2b09      	cmp	r3, #9
 801587c:	f200 8090 	bhi.w	80159a0 <_dtoa_r+0x2d8>
 8015880:	2b05      	cmp	r3, #5
 8015882:	bfc4      	itt	gt
 8015884:	3b04      	subgt	r3, #4
 8015886:	9306      	strgt	r3, [sp, #24]
 8015888:	9b06      	ldr	r3, [sp, #24]
 801588a:	f1a3 0302 	sub.w	r3, r3, #2
 801588e:	bfcc      	ite	gt
 8015890:	2500      	movgt	r5, #0
 8015892:	2501      	movle	r5, #1
 8015894:	2b03      	cmp	r3, #3
 8015896:	f200 808f 	bhi.w	80159b8 <_dtoa_r+0x2f0>
 801589a:	e8df f003 	tbb	[pc, r3]
 801589e:	7f7d      	.short	0x7f7d
 80158a0:	7131      	.short	0x7131
 80158a2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80158a6:	441d      	add	r5, r3
 80158a8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80158ac:	2820      	cmp	r0, #32
 80158ae:	dd13      	ble.n	80158d8 <_dtoa_r+0x210>
 80158b0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80158b4:	9b00      	ldr	r3, [sp, #0]
 80158b6:	fa08 f800 	lsl.w	r8, r8, r0
 80158ba:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80158be:	fa23 f000 	lsr.w	r0, r3, r0
 80158c2:	ea48 0000 	orr.w	r0, r8, r0
 80158c6:	f7ea fe35 	bl	8000534 <__aeabi_ui2d>
 80158ca:	2301      	movs	r3, #1
 80158cc:	4682      	mov	sl, r0
 80158ce:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80158d2:	3d01      	subs	r5, #1
 80158d4:	9313      	str	r3, [sp, #76]	; 0x4c
 80158d6:	e772      	b.n	80157be <_dtoa_r+0xf6>
 80158d8:	9b00      	ldr	r3, [sp, #0]
 80158da:	f1c0 0020 	rsb	r0, r0, #32
 80158de:	fa03 f000 	lsl.w	r0, r3, r0
 80158e2:	e7f0      	b.n	80158c6 <_dtoa_r+0x1fe>
 80158e4:	2301      	movs	r3, #1
 80158e6:	e7b1      	b.n	801584c <_dtoa_r+0x184>
 80158e8:	900f      	str	r0, [sp, #60]	; 0x3c
 80158ea:	e7b0      	b.n	801584e <_dtoa_r+0x186>
 80158ec:	9b05      	ldr	r3, [sp, #20]
 80158ee:	eba3 030a 	sub.w	r3, r3, sl
 80158f2:	9305      	str	r3, [sp, #20]
 80158f4:	f1ca 0300 	rsb	r3, sl, #0
 80158f8:	9307      	str	r3, [sp, #28]
 80158fa:	2300      	movs	r3, #0
 80158fc:	930e      	str	r3, [sp, #56]	; 0x38
 80158fe:	e7bb      	b.n	8015878 <_dtoa_r+0x1b0>
 8015900:	2301      	movs	r3, #1
 8015902:	930a      	str	r3, [sp, #40]	; 0x28
 8015904:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015906:	2b00      	cmp	r3, #0
 8015908:	dd59      	ble.n	80159be <_dtoa_r+0x2f6>
 801590a:	9302      	str	r3, [sp, #8]
 801590c:	4699      	mov	r9, r3
 801590e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015910:	2200      	movs	r2, #0
 8015912:	6072      	str	r2, [r6, #4]
 8015914:	2204      	movs	r2, #4
 8015916:	f102 0014 	add.w	r0, r2, #20
 801591a:	4298      	cmp	r0, r3
 801591c:	6871      	ldr	r1, [r6, #4]
 801591e:	d953      	bls.n	80159c8 <_dtoa_r+0x300>
 8015920:	4620      	mov	r0, r4
 8015922:	f000 ffeb 	bl	80168fc <_Balloc>
 8015926:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015928:	6030      	str	r0, [r6, #0]
 801592a:	f1b9 0f0e 	cmp.w	r9, #14
 801592e:	f8d3 b000 	ldr.w	fp, [r3]
 8015932:	f200 80e6 	bhi.w	8015b02 <_dtoa_r+0x43a>
 8015936:	2d00      	cmp	r5, #0
 8015938:	f000 80e3 	beq.w	8015b02 <_dtoa_r+0x43a>
 801593c:	ed9d 7b00 	vldr	d7, [sp]
 8015940:	f1ba 0f00 	cmp.w	sl, #0
 8015944:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8015948:	dd74      	ble.n	8015a34 <_dtoa_r+0x36c>
 801594a:	4a2a      	ldr	r2, [pc, #168]	; (80159f4 <_dtoa_r+0x32c>)
 801594c:	f00a 030f 	and.w	r3, sl, #15
 8015950:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8015954:	ed93 7b00 	vldr	d7, [r3]
 8015958:	ea4f 162a 	mov.w	r6, sl, asr #4
 801595c:	06f0      	lsls	r0, r6, #27
 801595e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8015962:	d565      	bpl.n	8015a30 <_dtoa_r+0x368>
 8015964:	4b24      	ldr	r3, [pc, #144]	; (80159f8 <_dtoa_r+0x330>)
 8015966:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801596a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801596e:	f7ea ff85 	bl	800087c <__aeabi_ddiv>
 8015972:	e9cd 0100 	strd	r0, r1, [sp]
 8015976:	f006 060f 	and.w	r6, r6, #15
 801597a:	2503      	movs	r5, #3
 801597c:	4f1e      	ldr	r7, [pc, #120]	; (80159f8 <_dtoa_r+0x330>)
 801597e:	e04c      	b.n	8015a1a <_dtoa_r+0x352>
 8015980:	2301      	movs	r3, #1
 8015982:	930a      	str	r3, [sp, #40]	; 0x28
 8015984:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015986:	4453      	add	r3, sl
 8015988:	f103 0901 	add.w	r9, r3, #1
 801598c:	9302      	str	r3, [sp, #8]
 801598e:	464b      	mov	r3, r9
 8015990:	2b01      	cmp	r3, #1
 8015992:	bfb8      	it	lt
 8015994:	2301      	movlt	r3, #1
 8015996:	e7ba      	b.n	801590e <_dtoa_r+0x246>
 8015998:	2300      	movs	r3, #0
 801599a:	e7b2      	b.n	8015902 <_dtoa_r+0x23a>
 801599c:	2300      	movs	r3, #0
 801599e:	e7f0      	b.n	8015982 <_dtoa_r+0x2ba>
 80159a0:	2501      	movs	r5, #1
 80159a2:	2300      	movs	r3, #0
 80159a4:	9306      	str	r3, [sp, #24]
 80159a6:	950a      	str	r5, [sp, #40]	; 0x28
 80159a8:	f04f 33ff 	mov.w	r3, #4294967295
 80159ac:	9302      	str	r3, [sp, #8]
 80159ae:	4699      	mov	r9, r3
 80159b0:	2200      	movs	r2, #0
 80159b2:	2312      	movs	r3, #18
 80159b4:	920b      	str	r2, [sp, #44]	; 0x2c
 80159b6:	e7aa      	b.n	801590e <_dtoa_r+0x246>
 80159b8:	2301      	movs	r3, #1
 80159ba:	930a      	str	r3, [sp, #40]	; 0x28
 80159bc:	e7f4      	b.n	80159a8 <_dtoa_r+0x2e0>
 80159be:	2301      	movs	r3, #1
 80159c0:	9302      	str	r3, [sp, #8]
 80159c2:	4699      	mov	r9, r3
 80159c4:	461a      	mov	r2, r3
 80159c6:	e7f5      	b.n	80159b4 <_dtoa_r+0x2ec>
 80159c8:	3101      	adds	r1, #1
 80159ca:	6071      	str	r1, [r6, #4]
 80159cc:	0052      	lsls	r2, r2, #1
 80159ce:	e7a2      	b.n	8015916 <_dtoa_r+0x24e>
 80159d0:	636f4361 	.word	0x636f4361
 80159d4:	3fd287a7 	.word	0x3fd287a7
 80159d8:	8b60c8b3 	.word	0x8b60c8b3
 80159dc:	3fc68a28 	.word	0x3fc68a28
 80159e0:	509f79fb 	.word	0x509f79fb
 80159e4:	3fd34413 	.word	0x3fd34413
 80159e8:	7ff00000 	.word	0x7ff00000
 80159ec:	08018824 	.word	0x08018824
 80159f0:	3ff80000 	.word	0x3ff80000
 80159f4:	08018728 	.word	0x08018728
 80159f8:	08018700 	.word	0x08018700
 80159fc:	08018689 	.word	0x08018689
 8015a00:	07f1      	lsls	r1, r6, #31
 8015a02:	d508      	bpl.n	8015a16 <_dtoa_r+0x34e>
 8015a04:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015a08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015a0c:	f7ea fe0c 	bl	8000628 <__aeabi_dmul>
 8015a10:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015a14:	3501      	adds	r5, #1
 8015a16:	1076      	asrs	r6, r6, #1
 8015a18:	3708      	adds	r7, #8
 8015a1a:	2e00      	cmp	r6, #0
 8015a1c:	d1f0      	bne.n	8015a00 <_dtoa_r+0x338>
 8015a1e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015a22:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015a26:	f7ea ff29 	bl	800087c <__aeabi_ddiv>
 8015a2a:	e9cd 0100 	strd	r0, r1, [sp]
 8015a2e:	e01a      	b.n	8015a66 <_dtoa_r+0x39e>
 8015a30:	2502      	movs	r5, #2
 8015a32:	e7a3      	b.n	801597c <_dtoa_r+0x2b4>
 8015a34:	f000 80a0 	beq.w	8015b78 <_dtoa_r+0x4b0>
 8015a38:	f1ca 0600 	rsb	r6, sl, #0
 8015a3c:	4b9f      	ldr	r3, [pc, #636]	; (8015cbc <_dtoa_r+0x5f4>)
 8015a3e:	4fa0      	ldr	r7, [pc, #640]	; (8015cc0 <_dtoa_r+0x5f8>)
 8015a40:	f006 020f 	and.w	r2, r6, #15
 8015a44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a4c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8015a50:	f7ea fdea 	bl	8000628 <__aeabi_dmul>
 8015a54:	e9cd 0100 	strd	r0, r1, [sp]
 8015a58:	1136      	asrs	r6, r6, #4
 8015a5a:	2300      	movs	r3, #0
 8015a5c:	2502      	movs	r5, #2
 8015a5e:	2e00      	cmp	r6, #0
 8015a60:	d17f      	bne.n	8015b62 <_dtoa_r+0x49a>
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d1e1      	bne.n	8015a2a <_dtoa_r+0x362>
 8015a66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	f000 8087 	beq.w	8015b7c <_dtoa_r+0x4b4>
 8015a6e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8015a72:	2200      	movs	r2, #0
 8015a74:	4b93      	ldr	r3, [pc, #588]	; (8015cc4 <_dtoa_r+0x5fc>)
 8015a76:	4630      	mov	r0, r6
 8015a78:	4639      	mov	r1, r7
 8015a7a:	f7eb f847 	bl	8000b0c <__aeabi_dcmplt>
 8015a7e:	2800      	cmp	r0, #0
 8015a80:	d07c      	beq.n	8015b7c <_dtoa_r+0x4b4>
 8015a82:	f1b9 0f00 	cmp.w	r9, #0
 8015a86:	d079      	beq.n	8015b7c <_dtoa_r+0x4b4>
 8015a88:	9b02      	ldr	r3, [sp, #8]
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	dd35      	ble.n	8015afa <_dtoa_r+0x432>
 8015a8e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8015a92:	9308      	str	r3, [sp, #32]
 8015a94:	4639      	mov	r1, r7
 8015a96:	2200      	movs	r2, #0
 8015a98:	4b8b      	ldr	r3, [pc, #556]	; (8015cc8 <_dtoa_r+0x600>)
 8015a9a:	4630      	mov	r0, r6
 8015a9c:	f7ea fdc4 	bl	8000628 <__aeabi_dmul>
 8015aa0:	e9cd 0100 	strd	r0, r1, [sp]
 8015aa4:	9f02      	ldr	r7, [sp, #8]
 8015aa6:	3501      	adds	r5, #1
 8015aa8:	4628      	mov	r0, r5
 8015aaa:	f7ea fd53 	bl	8000554 <__aeabi_i2d>
 8015aae:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015ab2:	f7ea fdb9 	bl	8000628 <__aeabi_dmul>
 8015ab6:	2200      	movs	r2, #0
 8015ab8:	4b84      	ldr	r3, [pc, #528]	; (8015ccc <_dtoa_r+0x604>)
 8015aba:	f7ea fbff 	bl	80002bc <__adddf3>
 8015abe:	4605      	mov	r5, r0
 8015ac0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8015ac4:	2f00      	cmp	r7, #0
 8015ac6:	d15d      	bne.n	8015b84 <_dtoa_r+0x4bc>
 8015ac8:	2200      	movs	r2, #0
 8015aca:	4b81      	ldr	r3, [pc, #516]	; (8015cd0 <_dtoa_r+0x608>)
 8015acc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015ad0:	f7ea fbf2 	bl	80002b8 <__aeabi_dsub>
 8015ad4:	462a      	mov	r2, r5
 8015ad6:	4633      	mov	r3, r6
 8015ad8:	e9cd 0100 	strd	r0, r1, [sp]
 8015adc:	f7eb f834 	bl	8000b48 <__aeabi_dcmpgt>
 8015ae0:	2800      	cmp	r0, #0
 8015ae2:	f040 8288 	bne.w	8015ff6 <_dtoa_r+0x92e>
 8015ae6:	462a      	mov	r2, r5
 8015ae8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8015aec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015af0:	f7eb f80c 	bl	8000b0c <__aeabi_dcmplt>
 8015af4:	2800      	cmp	r0, #0
 8015af6:	f040 827c 	bne.w	8015ff2 <_dtoa_r+0x92a>
 8015afa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8015afe:	e9cd 2300 	strd	r2, r3, [sp]
 8015b02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015b04:	2b00      	cmp	r3, #0
 8015b06:	f2c0 8150 	blt.w	8015daa <_dtoa_r+0x6e2>
 8015b0a:	f1ba 0f0e 	cmp.w	sl, #14
 8015b0e:	f300 814c 	bgt.w	8015daa <_dtoa_r+0x6e2>
 8015b12:	4b6a      	ldr	r3, [pc, #424]	; (8015cbc <_dtoa_r+0x5f4>)
 8015b14:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8015b18:	ed93 7b00 	vldr	d7, [r3]
 8015b1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015b24:	f280 80d8 	bge.w	8015cd8 <_dtoa_r+0x610>
 8015b28:	f1b9 0f00 	cmp.w	r9, #0
 8015b2c:	f300 80d4 	bgt.w	8015cd8 <_dtoa_r+0x610>
 8015b30:	f040 825e 	bne.w	8015ff0 <_dtoa_r+0x928>
 8015b34:	2200      	movs	r2, #0
 8015b36:	4b66      	ldr	r3, [pc, #408]	; (8015cd0 <_dtoa_r+0x608>)
 8015b38:	ec51 0b17 	vmov	r0, r1, d7
 8015b3c:	f7ea fd74 	bl	8000628 <__aeabi_dmul>
 8015b40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015b44:	f7ea fff6 	bl	8000b34 <__aeabi_dcmpge>
 8015b48:	464f      	mov	r7, r9
 8015b4a:	464e      	mov	r6, r9
 8015b4c:	2800      	cmp	r0, #0
 8015b4e:	f040 8234 	bne.w	8015fba <_dtoa_r+0x8f2>
 8015b52:	2331      	movs	r3, #49	; 0x31
 8015b54:	f10b 0501 	add.w	r5, fp, #1
 8015b58:	f88b 3000 	strb.w	r3, [fp]
 8015b5c:	f10a 0a01 	add.w	sl, sl, #1
 8015b60:	e22f      	b.n	8015fc2 <_dtoa_r+0x8fa>
 8015b62:	07f2      	lsls	r2, r6, #31
 8015b64:	d505      	bpl.n	8015b72 <_dtoa_r+0x4aa>
 8015b66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015b6a:	f7ea fd5d 	bl	8000628 <__aeabi_dmul>
 8015b6e:	3501      	adds	r5, #1
 8015b70:	2301      	movs	r3, #1
 8015b72:	1076      	asrs	r6, r6, #1
 8015b74:	3708      	adds	r7, #8
 8015b76:	e772      	b.n	8015a5e <_dtoa_r+0x396>
 8015b78:	2502      	movs	r5, #2
 8015b7a:	e774      	b.n	8015a66 <_dtoa_r+0x39e>
 8015b7c:	f8cd a020 	str.w	sl, [sp, #32]
 8015b80:	464f      	mov	r7, r9
 8015b82:	e791      	b.n	8015aa8 <_dtoa_r+0x3e0>
 8015b84:	4b4d      	ldr	r3, [pc, #308]	; (8015cbc <_dtoa_r+0x5f4>)
 8015b86:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8015b8a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8015b8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	d047      	beq.n	8015c24 <_dtoa_r+0x55c>
 8015b94:	4602      	mov	r2, r0
 8015b96:	460b      	mov	r3, r1
 8015b98:	2000      	movs	r0, #0
 8015b9a:	494e      	ldr	r1, [pc, #312]	; (8015cd4 <_dtoa_r+0x60c>)
 8015b9c:	f7ea fe6e 	bl	800087c <__aeabi_ddiv>
 8015ba0:	462a      	mov	r2, r5
 8015ba2:	4633      	mov	r3, r6
 8015ba4:	f7ea fb88 	bl	80002b8 <__aeabi_dsub>
 8015ba8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015bac:	465d      	mov	r5, fp
 8015bae:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015bb2:	f7ea ffe9 	bl	8000b88 <__aeabi_d2iz>
 8015bb6:	4606      	mov	r6, r0
 8015bb8:	f7ea fccc 	bl	8000554 <__aeabi_i2d>
 8015bbc:	4602      	mov	r2, r0
 8015bbe:	460b      	mov	r3, r1
 8015bc0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015bc4:	f7ea fb78 	bl	80002b8 <__aeabi_dsub>
 8015bc8:	3630      	adds	r6, #48	; 0x30
 8015bca:	f805 6b01 	strb.w	r6, [r5], #1
 8015bce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015bd2:	e9cd 0100 	strd	r0, r1, [sp]
 8015bd6:	f7ea ff99 	bl	8000b0c <__aeabi_dcmplt>
 8015bda:	2800      	cmp	r0, #0
 8015bdc:	d163      	bne.n	8015ca6 <_dtoa_r+0x5de>
 8015bde:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015be2:	2000      	movs	r0, #0
 8015be4:	4937      	ldr	r1, [pc, #220]	; (8015cc4 <_dtoa_r+0x5fc>)
 8015be6:	f7ea fb67 	bl	80002b8 <__aeabi_dsub>
 8015bea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015bee:	f7ea ff8d 	bl	8000b0c <__aeabi_dcmplt>
 8015bf2:	2800      	cmp	r0, #0
 8015bf4:	f040 80b7 	bne.w	8015d66 <_dtoa_r+0x69e>
 8015bf8:	eba5 030b 	sub.w	r3, r5, fp
 8015bfc:	429f      	cmp	r7, r3
 8015bfe:	f77f af7c 	ble.w	8015afa <_dtoa_r+0x432>
 8015c02:	2200      	movs	r2, #0
 8015c04:	4b30      	ldr	r3, [pc, #192]	; (8015cc8 <_dtoa_r+0x600>)
 8015c06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015c0a:	f7ea fd0d 	bl	8000628 <__aeabi_dmul>
 8015c0e:	2200      	movs	r2, #0
 8015c10:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015c14:	4b2c      	ldr	r3, [pc, #176]	; (8015cc8 <_dtoa_r+0x600>)
 8015c16:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015c1a:	f7ea fd05 	bl	8000628 <__aeabi_dmul>
 8015c1e:	e9cd 0100 	strd	r0, r1, [sp]
 8015c22:	e7c4      	b.n	8015bae <_dtoa_r+0x4e6>
 8015c24:	462a      	mov	r2, r5
 8015c26:	4633      	mov	r3, r6
 8015c28:	f7ea fcfe 	bl	8000628 <__aeabi_dmul>
 8015c2c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015c30:	eb0b 0507 	add.w	r5, fp, r7
 8015c34:	465e      	mov	r6, fp
 8015c36:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015c3a:	f7ea ffa5 	bl	8000b88 <__aeabi_d2iz>
 8015c3e:	4607      	mov	r7, r0
 8015c40:	f7ea fc88 	bl	8000554 <__aeabi_i2d>
 8015c44:	3730      	adds	r7, #48	; 0x30
 8015c46:	4602      	mov	r2, r0
 8015c48:	460b      	mov	r3, r1
 8015c4a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015c4e:	f7ea fb33 	bl	80002b8 <__aeabi_dsub>
 8015c52:	f806 7b01 	strb.w	r7, [r6], #1
 8015c56:	42ae      	cmp	r6, r5
 8015c58:	e9cd 0100 	strd	r0, r1, [sp]
 8015c5c:	f04f 0200 	mov.w	r2, #0
 8015c60:	d126      	bne.n	8015cb0 <_dtoa_r+0x5e8>
 8015c62:	4b1c      	ldr	r3, [pc, #112]	; (8015cd4 <_dtoa_r+0x60c>)
 8015c64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015c68:	f7ea fb28 	bl	80002bc <__adddf3>
 8015c6c:	4602      	mov	r2, r0
 8015c6e:	460b      	mov	r3, r1
 8015c70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015c74:	f7ea ff68 	bl	8000b48 <__aeabi_dcmpgt>
 8015c78:	2800      	cmp	r0, #0
 8015c7a:	d174      	bne.n	8015d66 <_dtoa_r+0x69e>
 8015c7c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015c80:	2000      	movs	r0, #0
 8015c82:	4914      	ldr	r1, [pc, #80]	; (8015cd4 <_dtoa_r+0x60c>)
 8015c84:	f7ea fb18 	bl	80002b8 <__aeabi_dsub>
 8015c88:	4602      	mov	r2, r0
 8015c8a:	460b      	mov	r3, r1
 8015c8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015c90:	f7ea ff3c 	bl	8000b0c <__aeabi_dcmplt>
 8015c94:	2800      	cmp	r0, #0
 8015c96:	f43f af30 	beq.w	8015afa <_dtoa_r+0x432>
 8015c9a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015c9e:	2b30      	cmp	r3, #48	; 0x30
 8015ca0:	f105 32ff 	add.w	r2, r5, #4294967295
 8015ca4:	d002      	beq.n	8015cac <_dtoa_r+0x5e4>
 8015ca6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8015caa:	e04a      	b.n	8015d42 <_dtoa_r+0x67a>
 8015cac:	4615      	mov	r5, r2
 8015cae:	e7f4      	b.n	8015c9a <_dtoa_r+0x5d2>
 8015cb0:	4b05      	ldr	r3, [pc, #20]	; (8015cc8 <_dtoa_r+0x600>)
 8015cb2:	f7ea fcb9 	bl	8000628 <__aeabi_dmul>
 8015cb6:	e9cd 0100 	strd	r0, r1, [sp]
 8015cba:	e7bc      	b.n	8015c36 <_dtoa_r+0x56e>
 8015cbc:	08018728 	.word	0x08018728
 8015cc0:	08018700 	.word	0x08018700
 8015cc4:	3ff00000 	.word	0x3ff00000
 8015cc8:	40240000 	.word	0x40240000
 8015ccc:	401c0000 	.word	0x401c0000
 8015cd0:	40140000 	.word	0x40140000
 8015cd4:	3fe00000 	.word	0x3fe00000
 8015cd8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8015cdc:	465d      	mov	r5, fp
 8015cde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015ce2:	4630      	mov	r0, r6
 8015ce4:	4639      	mov	r1, r7
 8015ce6:	f7ea fdc9 	bl	800087c <__aeabi_ddiv>
 8015cea:	f7ea ff4d 	bl	8000b88 <__aeabi_d2iz>
 8015cee:	4680      	mov	r8, r0
 8015cf0:	f7ea fc30 	bl	8000554 <__aeabi_i2d>
 8015cf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015cf8:	f7ea fc96 	bl	8000628 <__aeabi_dmul>
 8015cfc:	4602      	mov	r2, r0
 8015cfe:	460b      	mov	r3, r1
 8015d00:	4630      	mov	r0, r6
 8015d02:	4639      	mov	r1, r7
 8015d04:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8015d08:	f7ea fad6 	bl	80002b8 <__aeabi_dsub>
 8015d0c:	f805 6b01 	strb.w	r6, [r5], #1
 8015d10:	eba5 060b 	sub.w	r6, r5, fp
 8015d14:	45b1      	cmp	r9, r6
 8015d16:	4602      	mov	r2, r0
 8015d18:	460b      	mov	r3, r1
 8015d1a:	d139      	bne.n	8015d90 <_dtoa_r+0x6c8>
 8015d1c:	f7ea face 	bl	80002bc <__adddf3>
 8015d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015d24:	4606      	mov	r6, r0
 8015d26:	460f      	mov	r7, r1
 8015d28:	f7ea ff0e 	bl	8000b48 <__aeabi_dcmpgt>
 8015d2c:	b9c8      	cbnz	r0, 8015d62 <_dtoa_r+0x69a>
 8015d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015d32:	4630      	mov	r0, r6
 8015d34:	4639      	mov	r1, r7
 8015d36:	f7ea fedf 	bl	8000af8 <__aeabi_dcmpeq>
 8015d3a:	b110      	cbz	r0, 8015d42 <_dtoa_r+0x67a>
 8015d3c:	f018 0f01 	tst.w	r8, #1
 8015d40:	d10f      	bne.n	8015d62 <_dtoa_r+0x69a>
 8015d42:	9904      	ldr	r1, [sp, #16]
 8015d44:	4620      	mov	r0, r4
 8015d46:	f000 fe0d 	bl	8016964 <_Bfree>
 8015d4a:	2300      	movs	r3, #0
 8015d4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015d4e:	702b      	strb	r3, [r5, #0]
 8015d50:	f10a 0301 	add.w	r3, sl, #1
 8015d54:	6013      	str	r3, [r2, #0]
 8015d56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	f000 8241 	beq.w	80161e0 <_dtoa_r+0xb18>
 8015d5e:	601d      	str	r5, [r3, #0]
 8015d60:	e23e      	b.n	80161e0 <_dtoa_r+0xb18>
 8015d62:	f8cd a020 	str.w	sl, [sp, #32]
 8015d66:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8015d6a:	2a39      	cmp	r2, #57	; 0x39
 8015d6c:	f105 33ff 	add.w	r3, r5, #4294967295
 8015d70:	d108      	bne.n	8015d84 <_dtoa_r+0x6bc>
 8015d72:	459b      	cmp	fp, r3
 8015d74:	d10a      	bne.n	8015d8c <_dtoa_r+0x6c4>
 8015d76:	9b08      	ldr	r3, [sp, #32]
 8015d78:	3301      	adds	r3, #1
 8015d7a:	9308      	str	r3, [sp, #32]
 8015d7c:	2330      	movs	r3, #48	; 0x30
 8015d7e:	f88b 3000 	strb.w	r3, [fp]
 8015d82:	465b      	mov	r3, fp
 8015d84:	781a      	ldrb	r2, [r3, #0]
 8015d86:	3201      	adds	r2, #1
 8015d88:	701a      	strb	r2, [r3, #0]
 8015d8a:	e78c      	b.n	8015ca6 <_dtoa_r+0x5de>
 8015d8c:	461d      	mov	r5, r3
 8015d8e:	e7ea      	b.n	8015d66 <_dtoa_r+0x69e>
 8015d90:	2200      	movs	r2, #0
 8015d92:	4b9b      	ldr	r3, [pc, #620]	; (8016000 <_dtoa_r+0x938>)
 8015d94:	f7ea fc48 	bl	8000628 <__aeabi_dmul>
 8015d98:	2200      	movs	r2, #0
 8015d9a:	2300      	movs	r3, #0
 8015d9c:	4606      	mov	r6, r0
 8015d9e:	460f      	mov	r7, r1
 8015da0:	f7ea feaa 	bl	8000af8 <__aeabi_dcmpeq>
 8015da4:	2800      	cmp	r0, #0
 8015da6:	d09a      	beq.n	8015cde <_dtoa_r+0x616>
 8015da8:	e7cb      	b.n	8015d42 <_dtoa_r+0x67a>
 8015daa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015dac:	2a00      	cmp	r2, #0
 8015dae:	f000 808b 	beq.w	8015ec8 <_dtoa_r+0x800>
 8015db2:	9a06      	ldr	r2, [sp, #24]
 8015db4:	2a01      	cmp	r2, #1
 8015db6:	dc6e      	bgt.n	8015e96 <_dtoa_r+0x7ce>
 8015db8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015dba:	2a00      	cmp	r2, #0
 8015dbc:	d067      	beq.n	8015e8e <_dtoa_r+0x7c6>
 8015dbe:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015dc2:	9f07      	ldr	r7, [sp, #28]
 8015dc4:	9d05      	ldr	r5, [sp, #20]
 8015dc6:	9a05      	ldr	r2, [sp, #20]
 8015dc8:	2101      	movs	r1, #1
 8015dca:	441a      	add	r2, r3
 8015dcc:	4620      	mov	r0, r4
 8015dce:	9205      	str	r2, [sp, #20]
 8015dd0:	4498      	add	r8, r3
 8015dd2:	f000 fea5 	bl	8016b20 <__i2b>
 8015dd6:	4606      	mov	r6, r0
 8015dd8:	2d00      	cmp	r5, #0
 8015dda:	dd0c      	ble.n	8015df6 <_dtoa_r+0x72e>
 8015ddc:	f1b8 0f00 	cmp.w	r8, #0
 8015de0:	dd09      	ble.n	8015df6 <_dtoa_r+0x72e>
 8015de2:	4545      	cmp	r5, r8
 8015de4:	9a05      	ldr	r2, [sp, #20]
 8015de6:	462b      	mov	r3, r5
 8015de8:	bfa8      	it	ge
 8015dea:	4643      	movge	r3, r8
 8015dec:	1ad2      	subs	r2, r2, r3
 8015dee:	9205      	str	r2, [sp, #20]
 8015df0:	1aed      	subs	r5, r5, r3
 8015df2:	eba8 0803 	sub.w	r8, r8, r3
 8015df6:	9b07      	ldr	r3, [sp, #28]
 8015df8:	b1eb      	cbz	r3, 8015e36 <_dtoa_r+0x76e>
 8015dfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	d067      	beq.n	8015ed0 <_dtoa_r+0x808>
 8015e00:	b18f      	cbz	r7, 8015e26 <_dtoa_r+0x75e>
 8015e02:	4631      	mov	r1, r6
 8015e04:	463a      	mov	r2, r7
 8015e06:	4620      	mov	r0, r4
 8015e08:	f000 ff2a 	bl	8016c60 <__pow5mult>
 8015e0c:	9a04      	ldr	r2, [sp, #16]
 8015e0e:	4601      	mov	r1, r0
 8015e10:	4606      	mov	r6, r0
 8015e12:	4620      	mov	r0, r4
 8015e14:	f000 fe8d 	bl	8016b32 <__multiply>
 8015e18:	9904      	ldr	r1, [sp, #16]
 8015e1a:	9008      	str	r0, [sp, #32]
 8015e1c:	4620      	mov	r0, r4
 8015e1e:	f000 fda1 	bl	8016964 <_Bfree>
 8015e22:	9b08      	ldr	r3, [sp, #32]
 8015e24:	9304      	str	r3, [sp, #16]
 8015e26:	9b07      	ldr	r3, [sp, #28]
 8015e28:	1bda      	subs	r2, r3, r7
 8015e2a:	d004      	beq.n	8015e36 <_dtoa_r+0x76e>
 8015e2c:	9904      	ldr	r1, [sp, #16]
 8015e2e:	4620      	mov	r0, r4
 8015e30:	f000 ff16 	bl	8016c60 <__pow5mult>
 8015e34:	9004      	str	r0, [sp, #16]
 8015e36:	2101      	movs	r1, #1
 8015e38:	4620      	mov	r0, r4
 8015e3a:	f000 fe71 	bl	8016b20 <__i2b>
 8015e3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015e40:	4607      	mov	r7, r0
 8015e42:	2b00      	cmp	r3, #0
 8015e44:	f000 81d0 	beq.w	80161e8 <_dtoa_r+0xb20>
 8015e48:	461a      	mov	r2, r3
 8015e4a:	4601      	mov	r1, r0
 8015e4c:	4620      	mov	r0, r4
 8015e4e:	f000 ff07 	bl	8016c60 <__pow5mult>
 8015e52:	9b06      	ldr	r3, [sp, #24]
 8015e54:	2b01      	cmp	r3, #1
 8015e56:	4607      	mov	r7, r0
 8015e58:	dc40      	bgt.n	8015edc <_dtoa_r+0x814>
 8015e5a:	9b00      	ldr	r3, [sp, #0]
 8015e5c:	2b00      	cmp	r3, #0
 8015e5e:	d139      	bne.n	8015ed4 <_dtoa_r+0x80c>
 8015e60:	9b01      	ldr	r3, [sp, #4]
 8015e62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	d136      	bne.n	8015ed8 <_dtoa_r+0x810>
 8015e6a:	9b01      	ldr	r3, [sp, #4]
 8015e6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015e70:	0d1b      	lsrs	r3, r3, #20
 8015e72:	051b      	lsls	r3, r3, #20
 8015e74:	b12b      	cbz	r3, 8015e82 <_dtoa_r+0x7ba>
 8015e76:	9b05      	ldr	r3, [sp, #20]
 8015e78:	3301      	adds	r3, #1
 8015e7a:	9305      	str	r3, [sp, #20]
 8015e7c:	f108 0801 	add.w	r8, r8, #1
 8015e80:	2301      	movs	r3, #1
 8015e82:	9307      	str	r3, [sp, #28]
 8015e84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d12a      	bne.n	8015ee0 <_dtoa_r+0x818>
 8015e8a:	2001      	movs	r0, #1
 8015e8c:	e030      	b.n	8015ef0 <_dtoa_r+0x828>
 8015e8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015e90:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8015e94:	e795      	b.n	8015dc2 <_dtoa_r+0x6fa>
 8015e96:	9b07      	ldr	r3, [sp, #28]
 8015e98:	f109 37ff 	add.w	r7, r9, #4294967295
 8015e9c:	42bb      	cmp	r3, r7
 8015e9e:	bfbf      	itttt	lt
 8015ea0:	9b07      	ldrlt	r3, [sp, #28]
 8015ea2:	9707      	strlt	r7, [sp, #28]
 8015ea4:	1afa      	sublt	r2, r7, r3
 8015ea6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8015ea8:	bfbb      	ittet	lt
 8015eaa:	189b      	addlt	r3, r3, r2
 8015eac:	930e      	strlt	r3, [sp, #56]	; 0x38
 8015eae:	1bdf      	subge	r7, r3, r7
 8015eb0:	2700      	movlt	r7, #0
 8015eb2:	f1b9 0f00 	cmp.w	r9, #0
 8015eb6:	bfb5      	itete	lt
 8015eb8:	9b05      	ldrlt	r3, [sp, #20]
 8015eba:	9d05      	ldrge	r5, [sp, #20]
 8015ebc:	eba3 0509 	sublt.w	r5, r3, r9
 8015ec0:	464b      	movge	r3, r9
 8015ec2:	bfb8      	it	lt
 8015ec4:	2300      	movlt	r3, #0
 8015ec6:	e77e      	b.n	8015dc6 <_dtoa_r+0x6fe>
 8015ec8:	9f07      	ldr	r7, [sp, #28]
 8015eca:	9d05      	ldr	r5, [sp, #20]
 8015ecc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8015ece:	e783      	b.n	8015dd8 <_dtoa_r+0x710>
 8015ed0:	9a07      	ldr	r2, [sp, #28]
 8015ed2:	e7ab      	b.n	8015e2c <_dtoa_r+0x764>
 8015ed4:	2300      	movs	r3, #0
 8015ed6:	e7d4      	b.n	8015e82 <_dtoa_r+0x7ba>
 8015ed8:	9b00      	ldr	r3, [sp, #0]
 8015eda:	e7d2      	b.n	8015e82 <_dtoa_r+0x7ba>
 8015edc:	2300      	movs	r3, #0
 8015ede:	9307      	str	r3, [sp, #28]
 8015ee0:	693b      	ldr	r3, [r7, #16]
 8015ee2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8015ee6:	6918      	ldr	r0, [r3, #16]
 8015ee8:	f000 fdcc 	bl	8016a84 <__hi0bits>
 8015eec:	f1c0 0020 	rsb	r0, r0, #32
 8015ef0:	4440      	add	r0, r8
 8015ef2:	f010 001f 	ands.w	r0, r0, #31
 8015ef6:	d047      	beq.n	8015f88 <_dtoa_r+0x8c0>
 8015ef8:	f1c0 0320 	rsb	r3, r0, #32
 8015efc:	2b04      	cmp	r3, #4
 8015efe:	dd3b      	ble.n	8015f78 <_dtoa_r+0x8b0>
 8015f00:	9b05      	ldr	r3, [sp, #20]
 8015f02:	f1c0 001c 	rsb	r0, r0, #28
 8015f06:	4403      	add	r3, r0
 8015f08:	9305      	str	r3, [sp, #20]
 8015f0a:	4405      	add	r5, r0
 8015f0c:	4480      	add	r8, r0
 8015f0e:	9b05      	ldr	r3, [sp, #20]
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	dd05      	ble.n	8015f20 <_dtoa_r+0x858>
 8015f14:	461a      	mov	r2, r3
 8015f16:	9904      	ldr	r1, [sp, #16]
 8015f18:	4620      	mov	r0, r4
 8015f1a:	f000 feef 	bl	8016cfc <__lshift>
 8015f1e:	9004      	str	r0, [sp, #16]
 8015f20:	f1b8 0f00 	cmp.w	r8, #0
 8015f24:	dd05      	ble.n	8015f32 <_dtoa_r+0x86a>
 8015f26:	4639      	mov	r1, r7
 8015f28:	4642      	mov	r2, r8
 8015f2a:	4620      	mov	r0, r4
 8015f2c:	f000 fee6 	bl	8016cfc <__lshift>
 8015f30:	4607      	mov	r7, r0
 8015f32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015f34:	b353      	cbz	r3, 8015f8c <_dtoa_r+0x8c4>
 8015f36:	4639      	mov	r1, r7
 8015f38:	9804      	ldr	r0, [sp, #16]
 8015f3a:	f000 ff33 	bl	8016da4 <__mcmp>
 8015f3e:	2800      	cmp	r0, #0
 8015f40:	da24      	bge.n	8015f8c <_dtoa_r+0x8c4>
 8015f42:	2300      	movs	r3, #0
 8015f44:	220a      	movs	r2, #10
 8015f46:	9904      	ldr	r1, [sp, #16]
 8015f48:	4620      	mov	r0, r4
 8015f4a:	f000 fd22 	bl	8016992 <__multadd>
 8015f4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015f50:	9004      	str	r0, [sp, #16]
 8015f52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	f000 814d 	beq.w	80161f6 <_dtoa_r+0xb2e>
 8015f5c:	2300      	movs	r3, #0
 8015f5e:	4631      	mov	r1, r6
 8015f60:	220a      	movs	r2, #10
 8015f62:	4620      	mov	r0, r4
 8015f64:	f000 fd15 	bl	8016992 <__multadd>
 8015f68:	9b02      	ldr	r3, [sp, #8]
 8015f6a:	2b00      	cmp	r3, #0
 8015f6c:	4606      	mov	r6, r0
 8015f6e:	dc4f      	bgt.n	8016010 <_dtoa_r+0x948>
 8015f70:	9b06      	ldr	r3, [sp, #24]
 8015f72:	2b02      	cmp	r3, #2
 8015f74:	dd4c      	ble.n	8016010 <_dtoa_r+0x948>
 8015f76:	e011      	b.n	8015f9c <_dtoa_r+0x8d4>
 8015f78:	d0c9      	beq.n	8015f0e <_dtoa_r+0x846>
 8015f7a:	9a05      	ldr	r2, [sp, #20]
 8015f7c:	331c      	adds	r3, #28
 8015f7e:	441a      	add	r2, r3
 8015f80:	9205      	str	r2, [sp, #20]
 8015f82:	441d      	add	r5, r3
 8015f84:	4498      	add	r8, r3
 8015f86:	e7c2      	b.n	8015f0e <_dtoa_r+0x846>
 8015f88:	4603      	mov	r3, r0
 8015f8a:	e7f6      	b.n	8015f7a <_dtoa_r+0x8b2>
 8015f8c:	f1b9 0f00 	cmp.w	r9, #0
 8015f90:	dc38      	bgt.n	8016004 <_dtoa_r+0x93c>
 8015f92:	9b06      	ldr	r3, [sp, #24]
 8015f94:	2b02      	cmp	r3, #2
 8015f96:	dd35      	ble.n	8016004 <_dtoa_r+0x93c>
 8015f98:	f8cd 9008 	str.w	r9, [sp, #8]
 8015f9c:	9b02      	ldr	r3, [sp, #8]
 8015f9e:	b963      	cbnz	r3, 8015fba <_dtoa_r+0x8f2>
 8015fa0:	4639      	mov	r1, r7
 8015fa2:	2205      	movs	r2, #5
 8015fa4:	4620      	mov	r0, r4
 8015fa6:	f000 fcf4 	bl	8016992 <__multadd>
 8015faa:	4601      	mov	r1, r0
 8015fac:	4607      	mov	r7, r0
 8015fae:	9804      	ldr	r0, [sp, #16]
 8015fb0:	f000 fef8 	bl	8016da4 <__mcmp>
 8015fb4:	2800      	cmp	r0, #0
 8015fb6:	f73f adcc 	bgt.w	8015b52 <_dtoa_r+0x48a>
 8015fba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015fbc:	465d      	mov	r5, fp
 8015fbe:	ea6f 0a03 	mvn.w	sl, r3
 8015fc2:	f04f 0900 	mov.w	r9, #0
 8015fc6:	4639      	mov	r1, r7
 8015fc8:	4620      	mov	r0, r4
 8015fca:	f000 fccb 	bl	8016964 <_Bfree>
 8015fce:	2e00      	cmp	r6, #0
 8015fd0:	f43f aeb7 	beq.w	8015d42 <_dtoa_r+0x67a>
 8015fd4:	f1b9 0f00 	cmp.w	r9, #0
 8015fd8:	d005      	beq.n	8015fe6 <_dtoa_r+0x91e>
 8015fda:	45b1      	cmp	r9, r6
 8015fdc:	d003      	beq.n	8015fe6 <_dtoa_r+0x91e>
 8015fde:	4649      	mov	r1, r9
 8015fe0:	4620      	mov	r0, r4
 8015fe2:	f000 fcbf 	bl	8016964 <_Bfree>
 8015fe6:	4631      	mov	r1, r6
 8015fe8:	4620      	mov	r0, r4
 8015fea:	f000 fcbb 	bl	8016964 <_Bfree>
 8015fee:	e6a8      	b.n	8015d42 <_dtoa_r+0x67a>
 8015ff0:	2700      	movs	r7, #0
 8015ff2:	463e      	mov	r6, r7
 8015ff4:	e7e1      	b.n	8015fba <_dtoa_r+0x8f2>
 8015ff6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8015ffa:	463e      	mov	r6, r7
 8015ffc:	e5a9      	b.n	8015b52 <_dtoa_r+0x48a>
 8015ffe:	bf00      	nop
 8016000:	40240000 	.word	0x40240000
 8016004:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016006:	f8cd 9008 	str.w	r9, [sp, #8]
 801600a:	2b00      	cmp	r3, #0
 801600c:	f000 80fa 	beq.w	8016204 <_dtoa_r+0xb3c>
 8016010:	2d00      	cmp	r5, #0
 8016012:	dd05      	ble.n	8016020 <_dtoa_r+0x958>
 8016014:	4631      	mov	r1, r6
 8016016:	462a      	mov	r2, r5
 8016018:	4620      	mov	r0, r4
 801601a:	f000 fe6f 	bl	8016cfc <__lshift>
 801601e:	4606      	mov	r6, r0
 8016020:	9b07      	ldr	r3, [sp, #28]
 8016022:	2b00      	cmp	r3, #0
 8016024:	d04c      	beq.n	80160c0 <_dtoa_r+0x9f8>
 8016026:	6871      	ldr	r1, [r6, #4]
 8016028:	4620      	mov	r0, r4
 801602a:	f000 fc67 	bl	80168fc <_Balloc>
 801602e:	6932      	ldr	r2, [r6, #16]
 8016030:	3202      	adds	r2, #2
 8016032:	4605      	mov	r5, r0
 8016034:	0092      	lsls	r2, r2, #2
 8016036:	f106 010c 	add.w	r1, r6, #12
 801603a:	300c      	adds	r0, #12
 801603c:	f7fd fd08 	bl	8013a50 <memcpy>
 8016040:	2201      	movs	r2, #1
 8016042:	4629      	mov	r1, r5
 8016044:	4620      	mov	r0, r4
 8016046:	f000 fe59 	bl	8016cfc <__lshift>
 801604a:	9b00      	ldr	r3, [sp, #0]
 801604c:	f8cd b014 	str.w	fp, [sp, #20]
 8016050:	f003 0301 	and.w	r3, r3, #1
 8016054:	46b1      	mov	r9, r6
 8016056:	9307      	str	r3, [sp, #28]
 8016058:	4606      	mov	r6, r0
 801605a:	4639      	mov	r1, r7
 801605c:	9804      	ldr	r0, [sp, #16]
 801605e:	f7ff faa5 	bl	80155ac <quorem>
 8016062:	4649      	mov	r1, r9
 8016064:	4605      	mov	r5, r0
 8016066:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801606a:	9804      	ldr	r0, [sp, #16]
 801606c:	f000 fe9a 	bl	8016da4 <__mcmp>
 8016070:	4632      	mov	r2, r6
 8016072:	9000      	str	r0, [sp, #0]
 8016074:	4639      	mov	r1, r7
 8016076:	4620      	mov	r0, r4
 8016078:	f000 feae 	bl	8016dd8 <__mdiff>
 801607c:	68c3      	ldr	r3, [r0, #12]
 801607e:	4602      	mov	r2, r0
 8016080:	bb03      	cbnz	r3, 80160c4 <_dtoa_r+0x9fc>
 8016082:	4601      	mov	r1, r0
 8016084:	9008      	str	r0, [sp, #32]
 8016086:	9804      	ldr	r0, [sp, #16]
 8016088:	f000 fe8c 	bl	8016da4 <__mcmp>
 801608c:	9a08      	ldr	r2, [sp, #32]
 801608e:	4603      	mov	r3, r0
 8016090:	4611      	mov	r1, r2
 8016092:	4620      	mov	r0, r4
 8016094:	9308      	str	r3, [sp, #32]
 8016096:	f000 fc65 	bl	8016964 <_Bfree>
 801609a:	9b08      	ldr	r3, [sp, #32]
 801609c:	b9a3      	cbnz	r3, 80160c8 <_dtoa_r+0xa00>
 801609e:	9a06      	ldr	r2, [sp, #24]
 80160a0:	b992      	cbnz	r2, 80160c8 <_dtoa_r+0xa00>
 80160a2:	9a07      	ldr	r2, [sp, #28]
 80160a4:	b982      	cbnz	r2, 80160c8 <_dtoa_r+0xa00>
 80160a6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80160aa:	d029      	beq.n	8016100 <_dtoa_r+0xa38>
 80160ac:	9b00      	ldr	r3, [sp, #0]
 80160ae:	2b00      	cmp	r3, #0
 80160b0:	dd01      	ble.n	80160b6 <_dtoa_r+0x9ee>
 80160b2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80160b6:	9b05      	ldr	r3, [sp, #20]
 80160b8:	1c5d      	adds	r5, r3, #1
 80160ba:	f883 8000 	strb.w	r8, [r3]
 80160be:	e782      	b.n	8015fc6 <_dtoa_r+0x8fe>
 80160c0:	4630      	mov	r0, r6
 80160c2:	e7c2      	b.n	801604a <_dtoa_r+0x982>
 80160c4:	2301      	movs	r3, #1
 80160c6:	e7e3      	b.n	8016090 <_dtoa_r+0x9c8>
 80160c8:	9a00      	ldr	r2, [sp, #0]
 80160ca:	2a00      	cmp	r2, #0
 80160cc:	db04      	blt.n	80160d8 <_dtoa_r+0xa10>
 80160ce:	d125      	bne.n	801611c <_dtoa_r+0xa54>
 80160d0:	9a06      	ldr	r2, [sp, #24]
 80160d2:	bb1a      	cbnz	r2, 801611c <_dtoa_r+0xa54>
 80160d4:	9a07      	ldr	r2, [sp, #28]
 80160d6:	bb0a      	cbnz	r2, 801611c <_dtoa_r+0xa54>
 80160d8:	2b00      	cmp	r3, #0
 80160da:	ddec      	ble.n	80160b6 <_dtoa_r+0x9ee>
 80160dc:	2201      	movs	r2, #1
 80160de:	9904      	ldr	r1, [sp, #16]
 80160e0:	4620      	mov	r0, r4
 80160e2:	f000 fe0b 	bl	8016cfc <__lshift>
 80160e6:	4639      	mov	r1, r7
 80160e8:	9004      	str	r0, [sp, #16]
 80160ea:	f000 fe5b 	bl	8016da4 <__mcmp>
 80160ee:	2800      	cmp	r0, #0
 80160f0:	dc03      	bgt.n	80160fa <_dtoa_r+0xa32>
 80160f2:	d1e0      	bne.n	80160b6 <_dtoa_r+0x9ee>
 80160f4:	f018 0f01 	tst.w	r8, #1
 80160f8:	d0dd      	beq.n	80160b6 <_dtoa_r+0x9ee>
 80160fa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80160fe:	d1d8      	bne.n	80160b2 <_dtoa_r+0x9ea>
 8016100:	9b05      	ldr	r3, [sp, #20]
 8016102:	9a05      	ldr	r2, [sp, #20]
 8016104:	1c5d      	adds	r5, r3, #1
 8016106:	2339      	movs	r3, #57	; 0x39
 8016108:	7013      	strb	r3, [r2, #0]
 801610a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801610e:	2b39      	cmp	r3, #57	; 0x39
 8016110:	f105 32ff 	add.w	r2, r5, #4294967295
 8016114:	d04f      	beq.n	80161b6 <_dtoa_r+0xaee>
 8016116:	3301      	adds	r3, #1
 8016118:	7013      	strb	r3, [r2, #0]
 801611a:	e754      	b.n	8015fc6 <_dtoa_r+0x8fe>
 801611c:	9a05      	ldr	r2, [sp, #20]
 801611e:	2b00      	cmp	r3, #0
 8016120:	f102 0501 	add.w	r5, r2, #1
 8016124:	dd06      	ble.n	8016134 <_dtoa_r+0xa6c>
 8016126:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801612a:	d0e9      	beq.n	8016100 <_dtoa_r+0xa38>
 801612c:	f108 0801 	add.w	r8, r8, #1
 8016130:	9b05      	ldr	r3, [sp, #20]
 8016132:	e7c2      	b.n	80160ba <_dtoa_r+0x9f2>
 8016134:	9a02      	ldr	r2, [sp, #8]
 8016136:	f805 8c01 	strb.w	r8, [r5, #-1]
 801613a:	eba5 030b 	sub.w	r3, r5, fp
 801613e:	4293      	cmp	r3, r2
 8016140:	d021      	beq.n	8016186 <_dtoa_r+0xabe>
 8016142:	2300      	movs	r3, #0
 8016144:	220a      	movs	r2, #10
 8016146:	9904      	ldr	r1, [sp, #16]
 8016148:	4620      	mov	r0, r4
 801614a:	f000 fc22 	bl	8016992 <__multadd>
 801614e:	45b1      	cmp	r9, r6
 8016150:	9004      	str	r0, [sp, #16]
 8016152:	f04f 0300 	mov.w	r3, #0
 8016156:	f04f 020a 	mov.w	r2, #10
 801615a:	4649      	mov	r1, r9
 801615c:	4620      	mov	r0, r4
 801615e:	d105      	bne.n	801616c <_dtoa_r+0xaa4>
 8016160:	f000 fc17 	bl	8016992 <__multadd>
 8016164:	4681      	mov	r9, r0
 8016166:	4606      	mov	r6, r0
 8016168:	9505      	str	r5, [sp, #20]
 801616a:	e776      	b.n	801605a <_dtoa_r+0x992>
 801616c:	f000 fc11 	bl	8016992 <__multadd>
 8016170:	4631      	mov	r1, r6
 8016172:	4681      	mov	r9, r0
 8016174:	2300      	movs	r3, #0
 8016176:	220a      	movs	r2, #10
 8016178:	4620      	mov	r0, r4
 801617a:	f000 fc0a 	bl	8016992 <__multadd>
 801617e:	4606      	mov	r6, r0
 8016180:	e7f2      	b.n	8016168 <_dtoa_r+0xaa0>
 8016182:	f04f 0900 	mov.w	r9, #0
 8016186:	2201      	movs	r2, #1
 8016188:	9904      	ldr	r1, [sp, #16]
 801618a:	4620      	mov	r0, r4
 801618c:	f000 fdb6 	bl	8016cfc <__lshift>
 8016190:	4639      	mov	r1, r7
 8016192:	9004      	str	r0, [sp, #16]
 8016194:	f000 fe06 	bl	8016da4 <__mcmp>
 8016198:	2800      	cmp	r0, #0
 801619a:	dcb6      	bgt.n	801610a <_dtoa_r+0xa42>
 801619c:	d102      	bne.n	80161a4 <_dtoa_r+0xadc>
 801619e:	f018 0f01 	tst.w	r8, #1
 80161a2:	d1b2      	bne.n	801610a <_dtoa_r+0xa42>
 80161a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80161a8:	2b30      	cmp	r3, #48	; 0x30
 80161aa:	f105 32ff 	add.w	r2, r5, #4294967295
 80161ae:	f47f af0a 	bne.w	8015fc6 <_dtoa_r+0x8fe>
 80161b2:	4615      	mov	r5, r2
 80161b4:	e7f6      	b.n	80161a4 <_dtoa_r+0xadc>
 80161b6:	4593      	cmp	fp, r2
 80161b8:	d105      	bne.n	80161c6 <_dtoa_r+0xafe>
 80161ba:	2331      	movs	r3, #49	; 0x31
 80161bc:	f10a 0a01 	add.w	sl, sl, #1
 80161c0:	f88b 3000 	strb.w	r3, [fp]
 80161c4:	e6ff      	b.n	8015fc6 <_dtoa_r+0x8fe>
 80161c6:	4615      	mov	r5, r2
 80161c8:	e79f      	b.n	801610a <_dtoa_r+0xa42>
 80161ca:	f8df b064 	ldr.w	fp, [pc, #100]	; 8016230 <_dtoa_r+0xb68>
 80161ce:	e007      	b.n	80161e0 <_dtoa_r+0xb18>
 80161d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80161d2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8016234 <_dtoa_r+0xb6c>
 80161d6:	b11b      	cbz	r3, 80161e0 <_dtoa_r+0xb18>
 80161d8:	f10b 0308 	add.w	r3, fp, #8
 80161dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80161de:	6013      	str	r3, [r2, #0]
 80161e0:	4658      	mov	r0, fp
 80161e2:	b017      	add	sp, #92	; 0x5c
 80161e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161e8:	9b06      	ldr	r3, [sp, #24]
 80161ea:	2b01      	cmp	r3, #1
 80161ec:	f77f ae35 	ble.w	8015e5a <_dtoa_r+0x792>
 80161f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80161f2:	9307      	str	r3, [sp, #28]
 80161f4:	e649      	b.n	8015e8a <_dtoa_r+0x7c2>
 80161f6:	9b02      	ldr	r3, [sp, #8]
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	dc03      	bgt.n	8016204 <_dtoa_r+0xb3c>
 80161fc:	9b06      	ldr	r3, [sp, #24]
 80161fe:	2b02      	cmp	r3, #2
 8016200:	f73f aecc 	bgt.w	8015f9c <_dtoa_r+0x8d4>
 8016204:	465d      	mov	r5, fp
 8016206:	4639      	mov	r1, r7
 8016208:	9804      	ldr	r0, [sp, #16]
 801620a:	f7ff f9cf 	bl	80155ac <quorem>
 801620e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8016212:	f805 8b01 	strb.w	r8, [r5], #1
 8016216:	9a02      	ldr	r2, [sp, #8]
 8016218:	eba5 030b 	sub.w	r3, r5, fp
 801621c:	429a      	cmp	r2, r3
 801621e:	ddb0      	ble.n	8016182 <_dtoa_r+0xaba>
 8016220:	2300      	movs	r3, #0
 8016222:	220a      	movs	r2, #10
 8016224:	9904      	ldr	r1, [sp, #16]
 8016226:	4620      	mov	r0, r4
 8016228:	f000 fbb3 	bl	8016992 <__multadd>
 801622c:	9004      	str	r0, [sp, #16]
 801622e:	e7ea      	b.n	8016206 <_dtoa_r+0xb3e>
 8016230:	08018823 	.word	0x08018823
 8016234:	08018680 	.word	0x08018680

08016238 <rshift>:
 8016238:	b5f0      	push	{r4, r5, r6, r7, lr}
 801623a:	6906      	ldr	r6, [r0, #16]
 801623c:	114b      	asrs	r3, r1, #5
 801623e:	429e      	cmp	r6, r3
 8016240:	f100 0414 	add.w	r4, r0, #20
 8016244:	dd30      	ble.n	80162a8 <rshift+0x70>
 8016246:	f011 011f 	ands.w	r1, r1, #31
 801624a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801624e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8016252:	d108      	bne.n	8016266 <rshift+0x2e>
 8016254:	4621      	mov	r1, r4
 8016256:	42b2      	cmp	r2, r6
 8016258:	460b      	mov	r3, r1
 801625a:	d211      	bcs.n	8016280 <rshift+0x48>
 801625c:	f852 3b04 	ldr.w	r3, [r2], #4
 8016260:	f841 3b04 	str.w	r3, [r1], #4
 8016264:	e7f7      	b.n	8016256 <rshift+0x1e>
 8016266:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801626a:	f1c1 0c20 	rsb	ip, r1, #32
 801626e:	40cd      	lsrs	r5, r1
 8016270:	3204      	adds	r2, #4
 8016272:	4623      	mov	r3, r4
 8016274:	42b2      	cmp	r2, r6
 8016276:	4617      	mov	r7, r2
 8016278:	d30c      	bcc.n	8016294 <rshift+0x5c>
 801627a:	601d      	str	r5, [r3, #0]
 801627c:	b105      	cbz	r5, 8016280 <rshift+0x48>
 801627e:	3304      	adds	r3, #4
 8016280:	1b1a      	subs	r2, r3, r4
 8016282:	42a3      	cmp	r3, r4
 8016284:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8016288:	bf08      	it	eq
 801628a:	2300      	moveq	r3, #0
 801628c:	6102      	str	r2, [r0, #16]
 801628e:	bf08      	it	eq
 8016290:	6143      	streq	r3, [r0, #20]
 8016292:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016294:	683f      	ldr	r7, [r7, #0]
 8016296:	fa07 f70c 	lsl.w	r7, r7, ip
 801629a:	433d      	orrs	r5, r7
 801629c:	f843 5b04 	str.w	r5, [r3], #4
 80162a0:	f852 5b04 	ldr.w	r5, [r2], #4
 80162a4:	40cd      	lsrs	r5, r1
 80162a6:	e7e5      	b.n	8016274 <rshift+0x3c>
 80162a8:	4623      	mov	r3, r4
 80162aa:	e7e9      	b.n	8016280 <rshift+0x48>

080162ac <__hexdig_fun>:
 80162ac:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80162b0:	2b09      	cmp	r3, #9
 80162b2:	d802      	bhi.n	80162ba <__hexdig_fun+0xe>
 80162b4:	3820      	subs	r0, #32
 80162b6:	b2c0      	uxtb	r0, r0
 80162b8:	4770      	bx	lr
 80162ba:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80162be:	2b05      	cmp	r3, #5
 80162c0:	d801      	bhi.n	80162c6 <__hexdig_fun+0x1a>
 80162c2:	3847      	subs	r0, #71	; 0x47
 80162c4:	e7f7      	b.n	80162b6 <__hexdig_fun+0xa>
 80162c6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80162ca:	2b05      	cmp	r3, #5
 80162cc:	d801      	bhi.n	80162d2 <__hexdig_fun+0x26>
 80162ce:	3827      	subs	r0, #39	; 0x27
 80162d0:	e7f1      	b.n	80162b6 <__hexdig_fun+0xa>
 80162d2:	2000      	movs	r0, #0
 80162d4:	4770      	bx	lr

080162d6 <__gethex>:
 80162d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162da:	b08b      	sub	sp, #44	; 0x2c
 80162dc:	468a      	mov	sl, r1
 80162de:	9002      	str	r0, [sp, #8]
 80162e0:	9816      	ldr	r0, [sp, #88]	; 0x58
 80162e2:	9306      	str	r3, [sp, #24]
 80162e4:	4690      	mov	r8, r2
 80162e6:	f000 fadf 	bl	80168a8 <__localeconv_l>
 80162ea:	6803      	ldr	r3, [r0, #0]
 80162ec:	9303      	str	r3, [sp, #12]
 80162ee:	4618      	mov	r0, r3
 80162f0:	f7e9 ff86 	bl	8000200 <strlen>
 80162f4:	9b03      	ldr	r3, [sp, #12]
 80162f6:	9001      	str	r0, [sp, #4]
 80162f8:	4403      	add	r3, r0
 80162fa:	f04f 0b00 	mov.w	fp, #0
 80162fe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8016302:	9307      	str	r3, [sp, #28]
 8016304:	f8da 3000 	ldr.w	r3, [sl]
 8016308:	3302      	adds	r3, #2
 801630a:	461f      	mov	r7, r3
 801630c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8016310:	2830      	cmp	r0, #48	; 0x30
 8016312:	d06c      	beq.n	80163ee <__gethex+0x118>
 8016314:	f7ff ffca 	bl	80162ac <__hexdig_fun>
 8016318:	4604      	mov	r4, r0
 801631a:	2800      	cmp	r0, #0
 801631c:	d16a      	bne.n	80163f4 <__gethex+0x11e>
 801631e:	9a01      	ldr	r2, [sp, #4]
 8016320:	9903      	ldr	r1, [sp, #12]
 8016322:	4638      	mov	r0, r7
 8016324:	f001 fc36 	bl	8017b94 <strncmp>
 8016328:	2800      	cmp	r0, #0
 801632a:	d166      	bne.n	80163fa <__gethex+0x124>
 801632c:	9b01      	ldr	r3, [sp, #4]
 801632e:	5cf8      	ldrb	r0, [r7, r3]
 8016330:	18fe      	adds	r6, r7, r3
 8016332:	f7ff ffbb 	bl	80162ac <__hexdig_fun>
 8016336:	2800      	cmp	r0, #0
 8016338:	d062      	beq.n	8016400 <__gethex+0x12a>
 801633a:	4633      	mov	r3, r6
 801633c:	7818      	ldrb	r0, [r3, #0]
 801633e:	2830      	cmp	r0, #48	; 0x30
 8016340:	461f      	mov	r7, r3
 8016342:	f103 0301 	add.w	r3, r3, #1
 8016346:	d0f9      	beq.n	801633c <__gethex+0x66>
 8016348:	f7ff ffb0 	bl	80162ac <__hexdig_fun>
 801634c:	fab0 f580 	clz	r5, r0
 8016350:	096d      	lsrs	r5, r5, #5
 8016352:	4634      	mov	r4, r6
 8016354:	f04f 0b01 	mov.w	fp, #1
 8016358:	463a      	mov	r2, r7
 801635a:	4616      	mov	r6, r2
 801635c:	3201      	adds	r2, #1
 801635e:	7830      	ldrb	r0, [r6, #0]
 8016360:	f7ff ffa4 	bl	80162ac <__hexdig_fun>
 8016364:	2800      	cmp	r0, #0
 8016366:	d1f8      	bne.n	801635a <__gethex+0x84>
 8016368:	9a01      	ldr	r2, [sp, #4]
 801636a:	9903      	ldr	r1, [sp, #12]
 801636c:	4630      	mov	r0, r6
 801636e:	f001 fc11 	bl	8017b94 <strncmp>
 8016372:	b950      	cbnz	r0, 801638a <__gethex+0xb4>
 8016374:	b954      	cbnz	r4, 801638c <__gethex+0xb6>
 8016376:	9b01      	ldr	r3, [sp, #4]
 8016378:	18f4      	adds	r4, r6, r3
 801637a:	4622      	mov	r2, r4
 801637c:	4616      	mov	r6, r2
 801637e:	3201      	adds	r2, #1
 8016380:	7830      	ldrb	r0, [r6, #0]
 8016382:	f7ff ff93 	bl	80162ac <__hexdig_fun>
 8016386:	2800      	cmp	r0, #0
 8016388:	d1f8      	bne.n	801637c <__gethex+0xa6>
 801638a:	b10c      	cbz	r4, 8016390 <__gethex+0xba>
 801638c:	1ba4      	subs	r4, r4, r6
 801638e:	00a4      	lsls	r4, r4, #2
 8016390:	7833      	ldrb	r3, [r6, #0]
 8016392:	2b50      	cmp	r3, #80	; 0x50
 8016394:	d001      	beq.n	801639a <__gethex+0xc4>
 8016396:	2b70      	cmp	r3, #112	; 0x70
 8016398:	d140      	bne.n	801641c <__gethex+0x146>
 801639a:	7873      	ldrb	r3, [r6, #1]
 801639c:	2b2b      	cmp	r3, #43	; 0x2b
 801639e:	d031      	beq.n	8016404 <__gethex+0x12e>
 80163a0:	2b2d      	cmp	r3, #45	; 0x2d
 80163a2:	d033      	beq.n	801640c <__gethex+0x136>
 80163a4:	1c71      	adds	r1, r6, #1
 80163a6:	f04f 0900 	mov.w	r9, #0
 80163aa:	7808      	ldrb	r0, [r1, #0]
 80163ac:	f7ff ff7e 	bl	80162ac <__hexdig_fun>
 80163b0:	1e43      	subs	r3, r0, #1
 80163b2:	b2db      	uxtb	r3, r3
 80163b4:	2b18      	cmp	r3, #24
 80163b6:	d831      	bhi.n	801641c <__gethex+0x146>
 80163b8:	f1a0 0210 	sub.w	r2, r0, #16
 80163bc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80163c0:	f7ff ff74 	bl	80162ac <__hexdig_fun>
 80163c4:	1e43      	subs	r3, r0, #1
 80163c6:	b2db      	uxtb	r3, r3
 80163c8:	2b18      	cmp	r3, #24
 80163ca:	d922      	bls.n	8016412 <__gethex+0x13c>
 80163cc:	f1b9 0f00 	cmp.w	r9, #0
 80163d0:	d000      	beq.n	80163d4 <__gethex+0xfe>
 80163d2:	4252      	negs	r2, r2
 80163d4:	4414      	add	r4, r2
 80163d6:	f8ca 1000 	str.w	r1, [sl]
 80163da:	b30d      	cbz	r5, 8016420 <__gethex+0x14a>
 80163dc:	f1bb 0f00 	cmp.w	fp, #0
 80163e0:	bf0c      	ite	eq
 80163e2:	2706      	moveq	r7, #6
 80163e4:	2700      	movne	r7, #0
 80163e6:	4638      	mov	r0, r7
 80163e8:	b00b      	add	sp, #44	; 0x2c
 80163ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163ee:	f10b 0b01 	add.w	fp, fp, #1
 80163f2:	e78a      	b.n	801630a <__gethex+0x34>
 80163f4:	2500      	movs	r5, #0
 80163f6:	462c      	mov	r4, r5
 80163f8:	e7ae      	b.n	8016358 <__gethex+0x82>
 80163fa:	463e      	mov	r6, r7
 80163fc:	2501      	movs	r5, #1
 80163fe:	e7c7      	b.n	8016390 <__gethex+0xba>
 8016400:	4604      	mov	r4, r0
 8016402:	e7fb      	b.n	80163fc <__gethex+0x126>
 8016404:	f04f 0900 	mov.w	r9, #0
 8016408:	1cb1      	adds	r1, r6, #2
 801640a:	e7ce      	b.n	80163aa <__gethex+0xd4>
 801640c:	f04f 0901 	mov.w	r9, #1
 8016410:	e7fa      	b.n	8016408 <__gethex+0x132>
 8016412:	230a      	movs	r3, #10
 8016414:	fb03 0202 	mla	r2, r3, r2, r0
 8016418:	3a10      	subs	r2, #16
 801641a:	e7cf      	b.n	80163bc <__gethex+0xe6>
 801641c:	4631      	mov	r1, r6
 801641e:	e7da      	b.n	80163d6 <__gethex+0x100>
 8016420:	1bf3      	subs	r3, r6, r7
 8016422:	3b01      	subs	r3, #1
 8016424:	4629      	mov	r1, r5
 8016426:	2b07      	cmp	r3, #7
 8016428:	dc49      	bgt.n	80164be <__gethex+0x1e8>
 801642a:	9802      	ldr	r0, [sp, #8]
 801642c:	f000 fa66 	bl	80168fc <_Balloc>
 8016430:	9b01      	ldr	r3, [sp, #4]
 8016432:	f100 0914 	add.w	r9, r0, #20
 8016436:	f04f 0b00 	mov.w	fp, #0
 801643a:	f1c3 0301 	rsb	r3, r3, #1
 801643e:	4605      	mov	r5, r0
 8016440:	f8cd 9010 	str.w	r9, [sp, #16]
 8016444:	46da      	mov	sl, fp
 8016446:	9308      	str	r3, [sp, #32]
 8016448:	42b7      	cmp	r7, r6
 801644a:	d33b      	bcc.n	80164c4 <__gethex+0x1ee>
 801644c:	9804      	ldr	r0, [sp, #16]
 801644e:	f840 ab04 	str.w	sl, [r0], #4
 8016452:	eba0 0009 	sub.w	r0, r0, r9
 8016456:	1080      	asrs	r0, r0, #2
 8016458:	6128      	str	r0, [r5, #16]
 801645a:	0147      	lsls	r7, r0, #5
 801645c:	4650      	mov	r0, sl
 801645e:	f000 fb11 	bl	8016a84 <__hi0bits>
 8016462:	f8d8 6000 	ldr.w	r6, [r8]
 8016466:	1a3f      	subs	r7, r7, r0
 8016468:	42b7      	cmp	r7, r6
 801646a:	dd64      	ble.n	8016536 <__gethex+0x260>
 801646c:	1bbf      	subs	r7, r7, r6
 801646e:	4639      	mov	r1, r7
 8016470:	4628      	mov	r0, r5
 8016472:	f000 fe21 	bl	80170b8 <__any_on>
 8016476:	4682      	mov	sl, r0
 8016478:	b178      	cbz	r0, 801649a <__gethex+0x1c4>
 801647a:	1e7b      	subs	r3, r7, #1
 801647c:	1159      	asrs	r1, r3, #5
 801647e:	f003 021f 	and.w	r2, r3, #31
 8016482:	f04f 0a01 	mov.w	sl, #1
 8016486:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801648a:	fa0a f202 	lsl.w	r2, sl, r2
 801648e:	420a      	tst	r2, r1
 8016490:	d003      	beq.n	801649a <__gethex+0x1c4>
 8016492:	4553      	cmp	r3, sl
 8016494:	dc46      	bgt.n	8016524 <__gethex+0x24e>
 8016496:	f04f 0a02 	mov.w	sl, #2
 801649a:	4639      	mov	r1, r7
 801649c:	4628      	mov	r0, r5
 801649e:	f7ff fecb 	bl	8016238 <rshift>
 80164a2:	443c      	add	r4, r7
 80164a4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80164a8:	42a3      	cmp	r3, r4
 80164aa:	da52      	bge.n	8016552 <__gethex+0x27c>
 80164ac:	4629      	mov	r1, r5
 80164ae:	9802      	ldr	r0, [sp, #8]
 80164b0:	f000 fa58 	bl	8016964 <_Bfree>
 80164b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80164b6:	2300      	movs	r3, #0
 80164b8:	6013      	str	r3, [r2, #0]
 80164ba:	27a3      	movs	r7, #163	; 0xa3
 80164bc:	e793      	b.n	80163e6 <__gethex+0x110>
 80164be:	3101      	adds	r1, #1
 80164c0:	105b      	asrs	r3, r3, #1
 80164c2:	e7b0      	b.n	8016426 <__gethex+0x150>
 80164c4:	1e73      	subs	r3, r6, #1
 80164c6:	9305      	str	r3, [sp, #20]
 80164c8:	9a07      	ldr	r2, [sp, #28]
 80164ca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80164ce:	4293      	cmp	r3, r2
 80164d0:	d018      	beq.n	8016504 <__gethex+0x22e>
 80164d2:	f1bb 0f20 	cmp.w	fp, #32
 80164d6:	d107      	bne.n	80164e8 <__gethex+0x212>
 80164d8:	9b04      	ldr	r3, [sp, #16]
 80164da:	f8c3 a000 	str.w	sl, [r3]
 80164de:	3304      	adds	r3, #4
 80164e0:	f04f 0a00 	mov.w	sl, #0
 80164e4:	9304      	str	r3, [sp, #16]
 80164e6:	46d3      	mov	fp, sl
 80164e8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80164ec:	f7ff fede 	bl	80162ac <__hexdig_fun>
 80164f0:	f000 000f 	and.w	r0, r0, #15
 80164f4:	fa00 f00b 	lsl.w	r0, r0, fp
 80164f8:	ea4a 0a00 	orr.w	sl, sl, r0
 80164fc:	f10b 0b04 	add.w	fp, fp, #4
 8016500:	9b05      	ldr	r3, [sp, #20]
 8016502:	e00d      	b.n	8016520 <__gethex+0x24a>
 8016504:	9b05      	ldr	r3, [sp, #20]
 8016506:	9a08      	ldr	r2, [sp, #32]
 8016508:	4413      	add	r3, r2
 801650a:	42bb      	cmp	r3, r7
 801650c:	d3e1      	bcc.n	80164d2 <__gethex+0x1fc>
 801650e:	4618      	mov	r0, r3
 8016510:	9a01      	ldr	r2, [sp, #4]
 8016512:	9903      	ldr	r1, [sp, #12]
 8016514:	9309      	str	r3, [sp, #36]	; 0x24
 8016516:	f001 fb3d 	bl	8017b94 <strncmp>
 801651a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801651c:	2800      	cmp	r0, #0
 801651e:	d1d8      	bne.n	80164d2 <__gethex+0x1fc>
 8016520:	461e      	mov	r6, r3
 8016522:	e791      	b.n	8016448 <__gethex+0x172>
 8016524:	1eb9      	subs	r1, r7, #2
 8016526:	4628      	mov	r0, r5
 8016528:	f000 fdc6 	bl	80170b8 <__any_on>
 801652c:	2800      	cmp	r0, #0
 801652e:	d0b2      	beq.n	8016496 <__gethex+0x1c0>
 8016530:	f04f 0a03 	mov.w	sl, #3
 8016534:	e7b1      	b.n	801649a <__gethex+0x1c4>
 8016536:	da09      	bge.n	801654c <__gethex+0x276>
 8016538:	1bf7      	subs	r7, r6, r7
 801653a:	4629      	mov	r1, r5
 801653c:	463a      	mov	r2, r7
 801653e:	9802      	ldr	r0, [sp, #8]
 8016540:	f000 fbdc 	bl	8016cfc <__lshift>
 8016544:	1be4      	subs	r4, r4, r7
 8016546:	4605      	mov	r5, r0
 8016548:	f100 0914 	add.w	r9, r0, #20
 801654c:	f04f 0a00 	mov.w	sl, #0
 8016550:	e7a8      	b.n	80164a4 <__gethex+0x1ce>
 8016552:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8016556:	42a0      	cmp	r0, r4
 8016558:	dd6a      	ble.n	8016630 <__gethex+0x35a>
 801655a:	1b04      	subs	r4, r0, r4
 801655c:	42a6      	cmp	r6, r4
 801655e:	dc2e      	bgt.n	80165be <__gethex+0x2e8>
 8016560:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016564:	2b02      	cmp	r3, #2
 8016566:	d022      	beq.n	80165ae <__gethex+0x2d8>
 8016568:	2b03      	cmp	r3, #3
 801656a:	d024      	beq.n	80165b6 <__gethex+0x2e0>
 801656c:	2b01      	cmp	r3, #1
 801656e:	d115      	bne.n	801659c <__gethex+0x2c6>
 8016570:	42a6      	cmp	r6, r4
 8016572:	d113      	bne.n	801659c <__gethex+0x2c6>
 8016574:	2e01      	cmp	r6, #1
 8016576:	dc0b      	bgt.n	8016590 <__gethex+0x2ba>
 8016578:	9a06      	ldr	r2, [sp, #24]
 801657a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801657e:	6013      	str	r3, [r2, #0]
 8016580:	2301      	movs	r3, #1
 8016582:	612b      	str	r3, [r5, #16]
 8016584:	f8c9 3000 	str.w	r3, [r9]
 8016588:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801658a:	2762      	movs	r7, #98	; 0x62
 801658c:	601d      	str	r5, [r3, #0]
 801658e:	e72a      	b.n	80163e6 <__gethex+0x110>
 8016590:	1e71      	subs	r1, r6, #1
 8016592:	4628      	mov	r0, r5
 8016594:	f000 fd90 	bl	80170b8 <__any_on>
 8016598:	2800      	cmp	r0, #0
 801659a:	d1ed      	bne.n	8016578 <__gethex+0x2a2>
 801659c:	4629      	mov	r1, r5
 801659e:	9802      	ldr	r0, [sp, #8]
 80165a0:	f000 f9e0 	bl	8016964 <_Bfree>
 80165a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80165a6:	2300      	movs	r3, #0
 80165a8:	6013      	str	r3, [r2, #0]
 80165aa:	2750      	movs	r7, #80	; 0x50
 80165ac:	e71b      	b.n	80163e6 <__gethex+0x110>
 80165ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80165b0:	2b00      	cmp	r3, #0
 80165b2:	d0e1      	beq.n	8016578 <__gethex+0x2a2>
 80165b4:	e7f2      	b.n	801659c <__gethex+0x2c6>
 80165b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80165b8:	2b00      	cmp	r3, #0
 80165ba:	d1dd      	bne.n	8016578 <__gethex+0x2a2>
 80165bc:	e7ee      	b.n	801659c <__gethex+0x2c6>
 80165be:	1e67      	subs	r7, r4, #1
 80165c0:	f1ba 0f00 	cmp.w	sl, #0
 80165c4:	d131      	bne.n	801662a <__gethex+0x354>
 80165c6:	b127      	cbz	r7, 80165d2 <__gethex+0x2fc>
 80165c8:	4639      	mov	r1, r7
 80165ca:	4628      	mov	r0, r5
 80165cc:	f000 fd74 	bl	80170b8 <__any_on>
 80165d0:	4682      	mov	sl, r0
 80165d2:	117a      	asrs	r2, r7, #5
 80165d4:	2301      	movs	r3, #1
 80165d6:	f007 071f 	and.w	r7, r7, #31
 80165da:	fa03 f707 	lsl.w	r7, r3, r7
 80165de:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80165e2:	4621      	mov	r1, r4
 80165e4:	421f      	tst	r7, r3
 80165e6:	4628      	mov	r0, r5
 80165e8:	bf18      	it	ne
 80165ea:	f04a 0a02 	orrne.w	sl, sl, #2
 80165ee:	1b36      	subs	r6, r6, r4
 80165f0:	f7ff fe22 	bl	8016238 <rshift>
 80165f4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80165f8:	2702      	movs	r7, #2
 80165fa:	f1ba 0f00 	cmp.w	sl, #0
 80165fe:	d048      	beq.n	8016692 <__gethex+0x3bc>
 8016600:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016604:	2b02      	cmp	r3, #2
 8016606:	d015      	beq.n	8016634 <__gethex+0x35e>
 8016608:	2b03      	cmp	r3, #3
 801660a:	d017      	beq.n	801663c <__gethex+0x366>
 801660c:	2b01      	cmp	r3, #1
 801660e:	d109      	bne.n	8016624 <__gethex+0x34e>
 8016610:	f01a 0f02 	tst.w	sl, #2
 8016614:	d006      	beq.n	8016624 <__gethex+0x34e>
 8016616:	f8d9 3000 	ldr.w	r3, [r9]
 801661a:	ea4a 0a03 	orr.w	sl, sl, r3
 801661e:	f01a 0f01 	tst.w	sl, #1
 8016622:	d10e      	bne.n	8016642 <__gethex+0x36c>
 8016624:	f047 0710 	orr.w	r7, r7, #16
 8016628:	e033      	b.n	8016692 <__gethex+0x3bc>
 801662a:	f04f 0a01 	mov.w	sl, #1
 801662e:	e7d0      	b.n	80165d2 <__gethex+0x2fc>
 8016630:	2701      	movs	r7, #1
 8016632:	e7e2      	b.n	80165fa <__gethex+0x324>
 8016634:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016636:	f1c3 0301 	rsb	r3, r3, #1
 801663a:	9315      	str	r3, [sp, #84]	; 0x54
 801663c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801663e:	2b00      	cmp	r3, #0
 8016640:	d0f0      	beq.n	8016624 <__gethex+0x34e>
 8016642:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8016646:	f105 0314 	add.w	r3, r5, #20
 801664a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801664e:	eb03 010a 	add.w	r1, r3, sl
 8016652:	f04f 0c00 	mov.w	ip, #0
 8016656:	4618      	mov	r0, r3
 8016658:	f853 2b04 	ldr.w	r2, [r3], #4
 801665c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8016660:	d01c      	beq.n	801669c <__gethex+0x3c6>
 8016662:	3201      	adds	r2, #1
 8016664:	6002      	str	r2, [r0, #0]
 8016666:	2f02      	cmp	r7, #2
 8016668:	f105 0314 	add.w	r3, r5, #20
 801666c:	d138      	bne.n	80166e0 <__gethex+0x40a>
 801666e:	f8d8 2000 	ldr.w	r2, [r8]
 8016672:	3a01      	subs	r2, #1
 8016674:	42b2      	cmp	r2, r6
 8016676:	d10a      	bne.n	801668e <__gethex+0x3b8>
 8016678:	1171      	asrs	r1, r6, #5
 801667a:	2201      	movs	r2, #1
 801667c:	f006 061f 	and.w	r6, r6, #31
 8016680:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016684:	fa02 f606 	lsl.w	r6, r2, r6
 8016688:	421e      	tst	r6, r3
 801668a:	bf18      	it	ne
 801668c:	4617      	movne	r7, r2
 801668e:	f047 0720 	orr.w	r7, r7, #32
 8016692:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016694:	601d      	str	r5, [r3, #0]
 8016696:	9b06      	ldr	r3, [sp, #24]
 8016698:	601c      	str	r4, [r3, #0]
 801669a:	e6a4      	b.n	80163e6 <__gethex+0x110>
 801669c:	4299      	cmp	r1, r3
 801669e:	f843 cc04 	str.w	ip, [r3, #-4]
 80166a2:	d8d8      	bhi.n	8016656 <__gethex+0x380>
 80166a4:	68ab      	ldr	r3, [r5, #8]
 80166a6:	4599      	cmp	r9, r3
 80166a8:	db12      	blt.n	80166d0 <__gethex+0x3fa>
 80166aa:	6869      	ldr	r1, [r5, #4]
 80166ac:	9802      	ldr	r0, [sp, #8]
 80166ae:	3101      	adds	r1, #1
 80166b0:	f000 f924 	bl	80168fc <_Balloc>
 80166b4:	692a      	ldr	r2, [r5, #16]
 80166b6:	3202      	adds	r2, #2
 80166b8:	f105 010c 	add.w	r1, r5, #12
 80166bc:	4683      	mov	fp, r0
 80166be:	0092      	lsls	r2, r2, #2
 80166c0:	300c      	adds	r0, #12
 80166c2:	f7fd f9c5 	bl	8013a50 <memcpy>
 80166c6:	4629      	mov	r1, r5
 80166c8:	9802      	ldr	r0, [sp, #8]
 80166ca:	f000 f94b 	bl	8016964 <_Bfree>
 80166ce:	465d      	mov	r5, fp
 80166d0:	692b      	ldr	r3, [r5, #16]
 80166d2:	1c5a      	adds	r2, r3, #1
 80166d4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80166d8:	612a      	str	r2, [r5, #16]
 80166da:	2201      	movs	r2, #1
 80166dc:	615a      	str	r2, [r3, #20]
 80166de:	e7c2      	b.n	8016666 <__gethex+0x390>
 80166e0:	692a      	ldr	r2, [r5, #16]
 80166e2:	454a      	cmp	r2, r9
 80166e4:	dd0b      	ble.n	80166fe <__gethex+0x428>
 80166e6:	2101      	movs	r1, #1
 80166e8:	4628      	mov	r0, r5
 80166ea:	f7ff fda5 	bl	8016238 <rshift>
 80166ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80166f2:	3401      	adds	r4, #1
 80166f4:	42a3      	cmp	r3, r4
 80166f6:	f6ff aed9 	blt.w	80164ac <__gethex+0x1d6>
 80166fa:	2701      	movs	r7, #1
 80166fc:	e7c7      	b.n	801668e <__gethex+0x3b8>
 80166fe:	f016 061f 	ands.w	r6, r6, #31
 8016702:	d0fa      	beq.n	80166fa <__gethex+0x424>
 8016704:	449a      	add	sl, r3
 8016706:	f1c6 0620 	rsb	r6, r6, #32
 801670a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801670e:	f000 f9b9 	bl	8016a84 <__hi0bits>
 8016712:	42b0      	cmp	r0, r6
 8016714:	dbe7      	blt.n	80166e6 <__gethex+0x410>
 8016716:	e7f0      	b.n	80166fa <__gethex+0x424>

08016718 <L_shift>:
 8016718:	f1c2 0208 	rsb	r2, r2, #8
 801671c:	0092      	lsls	r2, r2, #2
 801671e:	b570      	push	{r4, r5, r6, lr}
 8016720:	f1c2 0620 	rsb	r6, r2, #32
 8016724:	6843      	ldr	r3, [r0, #4]
 8016726:	6804      	ldr	r4, [r0, #0]
 8016728:	fa03 f506 	lsl.w	r5, r3, r6
 801672c:	432c      	orrs	r4, r5
 801672e:	40d3      	lsrs	r3, r2
 8016730:	6004      	str	r4, [r0, #0]
 8016732:	f840 3f04 	str.w	r3, [r0, #4]!
 8016736:	4288      	cmp	r0, r1
 8016738:	d3f4      	bcc.n	8016724 <L_shift+0xc>
 801673a:	bd70      	pop	{r4, r5, r6, pc}

0801673c <__match>:
 801673c:	b530      	push	{r4, r5, lr}
 801673e:	6803      	ldr	r3, [r0, #0]
 8016740:	3301      	adds	r3, #1
 8016742:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016746:	b914      	cbnz	r4, 801674e <__match+0x12>
 8016748:	6003      	str	r3, [r0, #0]
 801674a:	2001      	movs	r0, #1
 801674c:	bd30      	pop	{r4, r5, pc}
 801674e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016752:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8016756:	2d19      	cmp	r5, #25
 8016758:	bf98      	it	ls
 801675a:	3220      	addls	r2, #32
 801675c:	42a2      	cmp	r2, r4
 801675e:	d0f0      	beq.n	8016742 <__match+0x6>
 8016760:	2000      	movs	r0, #0
 8016762:	e7f3      	b.n	801674c <__match+0x10>

08016764 <__hexnan>:
 8016764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016768:	680b      	ldr	r3, [r1, #0]
 801676a:	6801      	ldr	r1, [r0, #0]
 801676c:	115f      	asrs	r7, r3, #5
 801676e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8016772:	f013 031f 	ands.w	r3, r3, #31
 8016776:	b087      	sub	sp, #28
 8016778:	bf18      	it	ne
 801677a:	3704      	addne	r7, #4
 801677c:	2500      	movs	r5, #0
 801677e:	1f3e      	subs	r6, r7, #4
 8016780:	4682      	mov	sl, r0
 8016782:	4690      	mov	r8, r2
 8016784:	9301      	str	r3, [sp, #4]
 8016786:	f847 5c04 	str.w	r5, [r7, #-4]
 801678a:	46b1      	mov	r9, r6
 801678c:	4634      	mov	r4, r6
 801678e:	9502      	str	r5, [sp, #8]
 8016790:	46ab      	mov	fp, r5
 8016792:	784a      	ldrb	r2, [r1, #1]
 8016794:	1c4b      	adds	r3, r1, #1
 8016796:	9303      	str	r3, [sp, #12]
 8016798:	b342      	cbz	r2, 80167ec <__hexnan+0x88>
 801679a:	4610      	mov	r0, r2
 801679c:	9105      	str	r1, [sp, #20]
 801679e:	9204      	str	r2, [sp, #16]
 80167a0:	f7ff fd84 	bl	80162ac <__hexdig_fun>
 80167a4:	2800      	cmp	r0, #0
 80167a6:	d143      	bne.n	8016830 <__hexnan+0xcc>
 80167a8:	9a04      	ldr	r2, [sp, #16]
 80167aa:	9905      	ldr	r1, [sp, #20]
 80167ac:	2a20      	cmp	r2, #32
 80167ae:	d818      	bhi.n	80167e2 <__hexnan+0x7e>
 80167b0:	9b02      	ldr	r3, [sp, #8]
 80167b2:	459b      	cmp	fp, r3
 80167b4:	dd13      	ble.n	80167de <__hexnan+0x7a>
 80167b6:	454c      	cmp	r4, r9
 80167b8:	d206      	bcs.n	80167c8 <__hexnan+0x64>
 80167ba:	2d07      	cmp	r5, #7
 80167bc:	dc04      	bgt.n	80167c8 <__hexnan+0x64>
 80167be:	462a      	mov	r2, r5
 80167c0:	4649      	mov	r1, r9
 80167c2:	4620      	mov	r0, r4
 80167c4:	f7ff ffa8 	bl	8016718 <L_shift>
 80167c8:	4544      	cmp	r4, r8
 80167ca:	d944      	bls.n	8016856 <__hexnan+0xf2>
 80167cc:	2300      	movs	r3, #0
 80167ce:	f1a4 0904 	sub.w	r9, r4, #4
 80167d2:	f844 3c04 	str.w	r3, [r4, #-4]
 80167d6:	f8cd b008 	str.w	fp, [sp, #8]
 80167da:	464c      	mov	r4, r9
 80167dc:	461d      	mov	r5, r3
 80167de:	9903      	ldr	r1, [sp, #12]
 80167e0:	e7d7      	b.n	8016792 <__hexnan+0x2e>
 80167e2:	2a29      	cmp	r2, #41	; 0x29
 80167e4:	d14a      	bne.n	801687c <__hexnan+0x118>
 80167e6:	3102      	adds	r1, #2
 80167e8:	f8ca 1000 	str.w	r1, [sl]
 80167ec:	f1bb 0f00 	cmp.w	fp, #0
 80167f0:	d044      	beq.n	801687c <__hexnan+0x118>
 80167f2:	454c      	cmp	r4, r9
 80167f4:	d206      	bcs.n	8016804 <__hexnan+0xa0>
 80167f6:	2d07      	cmp	r5, #7
 80167f8:	dc04      	bgt.n	8016804 <__hexnan+0xa0>
 80167fa:	462a      	mov	r2, r5
 80167fc:	4649      	mov	r1, r9
 80167fe:	4620      	mov	r0, r4
 8016800:	f7ff ff8a 	bl	8016718 <L_shift>
 8016804:	4544      	cmp	r4, r8
 8016806:	d928      	bls.n	801685a <__hexnan+0xf6>
 8016808:	4643      	mov	r3, r8
 801680a:	f854 2b04 	ldr.w	r2, [r4], #4
 801680e:	f843 2b04 	str.w	r2, [r3], #4
 8016812:	42a6      	cmp	r6, r4
 8016814:	d2f9      	bcs.n	801680a <__hexnan+0xa6>
 8016816:	2200      	movs	r2, #0
 8016818:	f843 2b04 	str.w	r2, [r3], #4
 801681c:	429e      	cmp	r6, r3
 801681e:	d2fb      	bcs.n	8016818 <__hexnan+0xb4>
 8016820:	6833      	ldr	r3, [r6, #0]
 8016822:	b91b      	cbnz	r3, 801682c <__hexnan+0xc8>
 8016824:	4546      	cmp	r6, r8
 8016826:	d127      	bne.n	8016878 <__hexnan+0x114>
 8016828:	2301      	movs	r3, #1
 801682a:	6033      	str	r3, [r6, #0]
 801682c:	2005      	movs	r0, #5
 801682e:	e026      	b.n	801687e <__hexnan+0x11a>
 8016830:	3501      	adds	r5, #1
 8016832:	2d08      	cmp	r5, #8
 8016834:	f10b 0b01 	add.w	fp, fp, #1
 8016838:	dd06      	ble.n	8016848 <__hexnan+0xe4>
 801683a:	4544      	cmp	r4, r8
 801683c:	d9cf      	bls.n	80167de <__hexnan+0x7a>
 801683e:	2300      	movs	r3, #0
 8016840:	f844 3c04 	str.w	r3, [r4, #-4]
 8016844:	2501      	movs	r5, #1
 8016846:	3c04      	subs	r4, #4
 8016848:	6822      	ldr	r2, [r4, #0]
 801684a:	f000 000f 	and.w	r0, r0, #15
 801684e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8016852:	6020      	str	r0, [r4, #0]
 8016854:	e7c3      	b.n	80167de <__hexnan+0x7a>
 8016856:	2508      	movs	r5, #8
 8016858:	e7c1      	b.n	80167de <__hexnan+0x7a>
 801685a:	9b01      	ldr	r3, [sp, #4]
 801685c:	2b00      	cmp	r3, #0
 801685e:	d0df      	beq.n	8016820 <__hexnan+0xbc>
 8016860:	f04f 32ff 	mov.w	r2, #4294967295
 8016864:	f1c3 0320 	rsb	r3, r3, #32
 8016868:	fa22 f303 	lsr.w	r3, r2, r3
 801686c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8016870:	401a      	ands	r2, r3
 8016872:	f847 2c04 	str.w	r2, [r7, #-4]
 8016876:	e7d3      	b.n	8016820 <__hexnan+0xbc>
 8016878:	3e04      	subs	r6, #4
 801687a:	e7d1      	b.n	8016820 <__hexnan+0xbc>
 801687c:	2004      	movs	r0, #4
 801687e:	b007      	add	sp, #28
 8016880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016884 <__locale_ctype_ptr_l>:
 8016884:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8016888:	4770      	bx	lr
	...

0801688c <__locale_ctype_ptr>:
 801688c:	4b04      	ldr	r3, [pc, #16]	; (80168a0 <__locale_ctype_ptr+0x14>)
 801688e:	4a05      	ldr	r2, [pc, #20]	; (80168a4 <__locale_ctype_ptr+0x18>)
 8016890:	681b      	ldr	r3, [r3, #0]
 8016892:	6a1b      	ldr	r3, [r3, #32]
 8016894:	2b00      	cmp	r3, #0
 8016896:	bf08      	it	eq
 8016898:	4613      	moveq	r3, r2
 801689a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801689e:	4770      	bx	lr
 80168a0:	2000000c 	.word	0x2000000c
 80168a4:	20000070 	.word	0x20000070

080168a8 <__localeconv_l>:
 80168a8:	30f0      	adds	r0, #240	; 0xf0
 80168aa:	4770      	bx	lr

080168ac <_localeconv_r>:
 80168ac:	4b04      	ldr	r3, [pc, #16]	; (80168c0 <_localeconv_r+0x14>)
 80168ae:	681b      	ldr	r3, [r3, #0]
 80168b0:	6a18      	ldr	r0, [r3, #32]
 80168b2:	4b04      	ldr	r3, [pc, #16]	; (80168c4 <_localeconv_r+0x18>)
 80168b4:	2800      	cmp	r0, #0
 80168b6:	bf08      	it	eq
 80168b8:	4618      	moveq	r0, r3
 80168ba:	30f0      	adds	r0, #240	; 0xf0
 80168bc:	4770      	bx	lr
 80168be:	bf00      	nop
 80168c0:	2000000c 	.word	0x2000000c
 80168c4:	20000070 	.word	0x20000070

080168c8 <malloc>:
 80168c8:	4b02      	ldr	r3, [pc, #8]	; (80168d4 <malloc+0xc>)
 80168ca:	4601      	mov	r1, r0
 80168cc:	6818      	ldr	r0, [r3, #0]
 80168ce:	f000 bc71 	b.w	80171b4 <_malloc_r>
 80168d2:	bf00      	nop
 80168d4:	2000000c 	.word	0x2000000c

080168d8 <__ascii_mbtowc>:
 80168d8:	b082      	sub	sp, #8
 80168da:	b901      	cbnz	r1, 80168de <__ascii_mbtowc+0x6>
 80168dc:	a901      	add	r1, sp, #4
 80168de:	b142      	cbz	r2, 80168f2 <__ascii_mbtowc+0x1a>
 80168e0:	b14b      	cbz	r3, 80168f6 <__ascii_mbtowc+0x1e>
 80168e2:	7813      	ldrb	r3, [r2, #0]
 80168e4:	600b      	str	r3, [r1, #0]
 80168e6:	7812      	ldrb	r2, [r2, #0]
 80168e8:	1c10      	adds	r0, r2, #0
 80168ea:	bf18      	it	ne
 80168ec:	2001      	movne	r0, #1
 80168ee:	b002      	add	sp, #8
 80168f0:	4770      	bx	lr
 80168f2:	4610      	mov	r0, r2
 80168f4:	e7fb      	b.n	80168ee <__ascii_mbtowc+0x16>
 80168f6:	f06f 0001 	mvn.w	r0, #1
 80168fa:	e7f8      	b.n	80168ee <__ascii_mbtowc+0x16>

080168fc <_Balloc>:
 80168fc:	b570      	push	{r4, r5, r6, lr}
 80168fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016900:	4604      	mov	r4, r0
 8016902:	460e      	mov	r6, r1
 8016904:	b93d      	cbnz	r5, 8016916 <_Balloc+0x1a>
 8016906:	2010      	movs	r0, #16
 8016908:	f7ff ffde 	bl	80168c8 <malloc>
 801690c:	6260      	str	r0, [r4, #36]	; 0x24
 801690e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016912:	6005      	str	r5, [r0, #0]
 8016914:	60c5      	str	r5, [r0, #12]
 8016916:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8016918:	68eb      	ldr	r3, [r5, #12]
 801691a:	b183      	cbz	r3, 801693e <_Balloc+0x42>
 801691c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801691e:	68db      	ldr	r3, [r3, #12]
 8016920:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8016924:	b9b8      	cbnz	r0, 8016956 <_Balloc+0x5a>
 8016926:	2101      	movs	r1, #1
 8016928:	fa01 f506 	lsl.w	r5, r1, r6
 801692c:	1d6a      	adds	r2, r5, #5
 801692e:	0092      	lsls	r2, r2, #2
 8016930:	4620      	mov	r0, r4
 8016932:	f000 fbe2 	bl	80170fa <_calloc_r>
 8016936:	b160      	cbz	r0, 8016952 <_Balloc+0x56>
 8016938:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801693c:	e00e      	b.n	801695c <_Balloc+0x60>
 801693e:	2221      	movs	r2, #33	; 0x21
 8016940:	2104      	movs	r1, #4
 8016942:	4620      	mov	r0, r4
 8016944:	f000 fbd9 	bl	80170fa <_calloc_r>
 8016948:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801694a:	60e8      	str	r0, [r5, #12]
 801694c:	68db      	ldr	r3, [r3, #12]
 801694e:	2b00      	cmp	r3, #0
 8016950:	d1e4      	bne.n	801691c <_Balloc+0x20>
 8016952:	2000      	movs	r0, #0
 8016954:	bd70      	pop	{r4, r5, r6, pc}
 8016956:	6802      	ldr	r2, [r0, #0]
 8016958:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801695c:	2300      	movs	r3, #0
 801695e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016962:	e7f7      	b.n	8016954 <_Balloc+0x58>

08016964 <_Bfree>:
 8016964:	b570      	push	{r4, r5, r6, lr}
 8016966:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8016968:	4606      	mov	r6, r0
 801696a:	460d      	mov	r5, r1
 801696c:	b93c      	cbnz	r4, 801697e <_Bfree+0x1a>
 801696e:	2010      	movs	r0, #16
 8016970:	f7ff ffaa 	bl	80168c8 <malloc>
 8016974:	6270      	str	r0, [r6, #36]	; 0x24
 8016976:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801697a:	6004      	str	r4, [r0, #0]
 801697c:	60c4      	str	r4, [r0, #12]
 801697e:	b13d      	cbz	r5, 8016990 <_Bfree+0x2c>
 8016980:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8016982:	686a      	ldr	r2, [r5, #4]
 8016984:	68db      	ldr	r3, [r3, #12]
 8016986:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801698a:	6029      	str	r1, [r5, #0]
 801698c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8016990:	bd70      	pop	{r4, r5, r6, pc}

08016992 <__multadd>:
 8016992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016996:	690d      	ldr	r5, [r1, #16]
 8016998:	461f      	mov	r7, r3
 801699a:	4606      	mov	r6, r0
 801699c:	460c      	mov	r4, r1
 801699e:	f101 0c14 	add.w	ip, r1, #20
 80169a2:	2300      	movs	r3, #0
 80169a4:	f8dc 0000 	ldr.w	r0, [ip]
 80169a8:	b281      	uxth	r1, r0
 80169aa:	fb02 7101 	mla	r1, r2, r1, r7
 80169ae:	0c0f      	lsrs	r7, r1, #16
 80169b0:	0c00      	lsrs	r0, r0, #16
 80169b2:	fb02 7000 	mla	r0, r2, r0, r7
 80169b6:	b289      	uxth	r1, r1
 80169b8:	3301      	adds	r3, #1
 80169ba:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80169be:	429d      	cmp	r5, r3
 80169c0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80169c4:	f84c 1b04 	str.w	r1, [ip], #4
 80169c8:	dcec      	bgt.n	80169a4 <__multadd+0x12>
 80169ca:	b1d7      	cbz	r7, 8016a02 <__multadd+0x70>
 80169cc:	68a3      	ldr	r3, [r4, #8]
 80169ce:	42ab      	cmp	r3, r5
 80169d0:	dc12      	bgt.n	80169f8 <__multadd+0x66>
 80169d2:	6861      	ldr	r1, [r4, #4]
 80169d4:	4630      	mov	r0, r6
 80169d6:	3101      	adds	r1, #1
 80169d8:	f7ff ff90 	bl	80168fc <_Balloc>
 80169dc:	6922      	ldr	r2, [r4, #16]
 80169de:	3202      	adds	r2, #2
 80169e0:	f104 010c 	add.w	r1, r4, #12
 80169e4:	4680      	mov	r8, r0
 80169e6:	0092      	lsls	r2, r2, #2
 80169e8:	300c      	adds	r0, #12
 80169ea:	f7fd f831 	bl	8013a50 <memcpy>
 80169ee:	4621      	mov	r1, r4
 80169f0:	4630      	mov	r0, r6
 80169f2:	f7ff ffb7 	bl	8016964 <_Bfree>
 80169f6:	4644      	mov	r4, r8
 80169f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80169fc:	3501      	adds	r5, #1
 80169fe:	615f      	str	r7, [r3, #20]
 8016a00:	6125      	str	r5, [r4, #16]
 8016a02:	4620      	mov	r0, r4
 8016a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016a08 <__s2b>:
 8016a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016a0c:	460c      	mov	r4, r1
 8016a0e:	4615      	mov	r5, r2
 8016a10:	461f      	mov	r7, r3
 8016a12:	2209      	movs	r2, #9
 8016a14:	3308      	adds	r3, #8
 8016a16:	4606      	mov	r6, r0
 8016a18:	fb93 f3f2 	sdiv	r3, r3, r2
 8016a1c:	2100      	movs	r1, #0
 8016a1e:	2201      	movs	r2, #1
 8016a20:	429a      	cmp	r2, r3
 8016a22:	db20      	blt.n	8016a66 <__s2b+0x5e>
 8016a24:	4630      	mov	r0, r6
 8016a26:	f7ff ff69 	bl	80168fc <_Balloc>
 8016a2a:	9b08      	ldr	r3, [sp, #32]
 8016a2c:	6143      	str	r3, [r0, #20]
 8016a2e:	2d09      	cmp	r5, #9
 8016a30:	f04f 0301 	mov.w	r3, #1
 8016a34:	6103      	str	r3, [r0, #16]
 8016a36:	dd19      	ble.n	8016a6c <__s2b+0x64>
 8016a38:	f104 0809 	add.w	r8, r4, #9
 8016a3c:	46c1      	mov	r9, r8
 8016a3e:	442c      	add	r4, r5
 8016a40:	f819 3b01 	ldrb.w	r3, [r9], #1
 8016a44:	4601      	mov	r1, r0
 8016a46:	3b30      	subs	r3, #48	; 0x30
 8016a48:	220a      	movs	r2, #10
 8016a4a:	4630      	mov	r0, r6
 8016a4c:	f7ff ffa1 	bl	8016992 <__multadd>
 8016a50:	45a1      	cmp	r9, r4
 8016a52:	d1f5      	bne.n	8016a40 <__s2b+0x38>
 8016a54:	eb08 0405 	add.w	r4, r8, r5
 8016a58:	3c08      	subs	r4, #8
 8016a5a:	1b2d      	subs	r5, r5, r4
 8016a5c:	1963      	adds	r3, r4, r5
 8016a5e:	42bb      	cmp	r3, r7
 8016a60:	db07      	blt.n	8016a72 <__s2b+0x6a>
 8016a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016a66:	0052      	lsls	r2, r2, #1
 8016a68:	3101      	adds	r1, #1
 8016a6a:	e7d9      	b.n	8016a20 <__s2b+0x18>
 8016a6c:	340a      	adds	r4, #10
 8016a6e:	2509      	movs	r5, #9
 8016a70:	e7f3      	b.n	8016a5a <__s2b+0x52>
 8016a72:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016a76:	4601      	mov	r1, r0
 8016a78:	3b30      	subs	r3, #48	; 0x30
 8016a7a:	220a      	movs	r2, #10
 8016a7c:	4630      	mov	r0, r6
 8016a7e:	f7ff ff88 	bl	8016992 <__multadd>
 8016a82:	e7eb      	b.n	8016a5c <__s2b+0x54>

08016a84 <__hi0bits>:
 8016a84:	0c02      	lsrs	r2, r0, #16
 8016a86:	0412      	lsls	r2, r2, #16
 8016a88:	4603      	mov	r3, r0
 8016a8a:	b9b2      	cbnz	r2, 8016aba <__hi0bits+0x36>
 8016a8c:	0403      	lsls	r3, r0, #16
 8016a8e:	2010      	movs	r0, #16
 8016a90:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8016a94:	bf04      	itt	eq
 8016a96:	021b      	lsleq	r3, r3, #8
 8016a98:	3008      	addeq	r0, #8
 8016a9a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8016a9e:	bf04      	itt	eq
 8016aa0:	011b      	lsleq	r3, r3, #4
 8016aa2:	3004      	addeq	r0, #4
 8016aa4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8016aa8:	bf04      	itt	eq
 8016aaa:	009b      	lsleq	r3, r3, #2
 8016aac:	3002      	addeq	r0, #2
 8016aae:	2b00      	cmp	r3, #0
 8016ab0:	db06      	blt.n	8016ac0 <__hi0bits+0x3c>
 8016ab2:	005b      	lsls	r3, r3, #1
 8016ab4:	d503      	bpl.n	8016abe <__hi0bits+0x3a>
 8016ab6:	3001      	adds	r0, #1
 8016ab8:	4770      	bx	lr
 8016aba:	2000      	movs	r0, #0
 8016abc:	e7e8      	b.n	8016a90 <__hi0bits+0xc>
 8016abe:	2020      	movs	r0, #32
 8016ac0:	4770      	bx	lr

08016ac2 <__lo0bits>:
 8016ac2:	6803      	ldr	r3, [r0, #0]
 8016ac4:	f013 0207 	ands.w	r2, r3, #7
 8016ac8:	4601      	mov	r1, r0
 8016aca:	d00b      	beq.n	8016ae4 <__lo0bits+0x22>
 8016acc:	07da      	lsls	r2, r3, #31
 8016ace:	d423      	bmi.n	8016b18 <__lo0bits+0x56>
 8016ad0:	0798      	lsls	r0, r3, #30
 8016ad2:	bf49      	itett	mi
 8016ad4:	085b      	lsrmi	r3, r3, #1
 8016ad6:	089b      	lsrpl	r3, r3, #2
 8016ad8:	2001      	movmi	r0, #1
 8016ada:	600b      	strmi	r3, [r1, #0]
 8016adc:	bf5c      	itt	pl
 8016ade:	600b      	strpl	r3, [r1, #0]
 8016ae0:	2002      	movpl	r0, #2
 8016ae2:	4770      	bx	lr
 8016ae4:	b298      	uxth	r0, r3
 8016ae6:	b9a8      	cbnz	r0, 8016b14 <__lo0bits+0x52>
 8016ae8:	0c1b      	lsrs	r3, r3, #16
 8016aea:	2010      	movs	r0, #16
 8016aec:	f013 0fff 	tst.w	r3, #255	; 0xff
 8016af0:	bf04      	itt	eq
 8016af2:	0a1b      	lsreq	r3, r3, #8
 8016af4:	3008      	addeq	r0, #8
 8016af6:	071a      	lsls	r2, r3, #28
 8016af8:	bf04      	itt	eq
 8016afa:	091b      	lsreq	r3, r3, #4
 8016afc:	3004      	addeq	r0, #4
 8016afe:	079a      	lsls	r2, r3, #30
 8016b00:	bf04      	itt	eq
 8016b02:	089b      	lsreq	r3, r3, #2
 8016b04:	3002      	addeq	r0, #2
 8016b06:	07da      	lsls	r2, r3, #31
 8016b08:	d402      	bmi.n	8016b10 <__lo0bits+0x4e>
 8016b0a:	085b      	lsrs	r3, r3, #1
 8016b0c:	d006      	beq.n	8016b1c <__lo0bits+0x5a>
 8016b0e:	3001      	adds	r0, #1
 8016b10:	600b      	str	r3, [r1, #0]
 8016b12:	4770      	bx	lr
 8016b14:	4610      	mov	r0, r2
 8016b16:	e7e9      	b.n	8016aec <__lo0bits+0x2a>
 8016b18:	2000      	movs	r0, #0
 8016b1a:	4770      	bx	lr
 8016b1c:	2020      	movs	r0, #32
 8016b1e:	4770      	bx	lr

08016b20 <__i2b>:
 8016b20:	b510      	push	{r4, lr}
 8016b22:	460c      	mov	r4, r1
 8016b24:	2101      	movs	r1, #1
 8016b26:	f7ff fee9 	bl	80168fc <_Balloc>
 8016b2a:	2201      	movs	r2, #1
 8016b2c:	6144      	str	r4, [r0, #20]
 8016b2e:	6102      	str	r2, [r0, #16]
 8016b30:	bd10      	pop	{r4, pc}

08016b32 <__multiply>:
 8016b32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b36:	4614      	mov	r4, r2
 8016b38:	690a      	ldr	r2, [r1, #16]
 8016b3a:	6923      	ldr	r3, [r4, #16]
 8016b3c:	429a      	cmp	r2, r3
 8016b3e:	bfb8      	it	lt
 8016b40:	460b      	movlt	r3, r1
 8016b42:	4688      	mov	r8, r1
 8016b44:	bfbc      	itt	lt
 8016b46:	46a0      	movlt	r8, r4
 8016b48:	461c      	movlt	r4, r3
 8016b4a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8016b4e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8016b52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016b56:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8016b5a:	eb07 0609 	add.w	r6, r7, r9
 8016b5e:	42b3      	cmp	r3, r6
 8016b60:	bfb8      	it	lt
 8016b62:	3101      	addlt	r1, #1
 8016b64:	f7ff feca 	bl	80168fc <_Balloc>
 8016b68:	f100 0514 	add.w	r5, r0, #20
 8016b6c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8016b70:	462b      	mov	r3, r5
 8016b72:	2200      	movs	r2, #0
 8016b74:	4573      	cmp	r3, lr
 8016b76:	d316      	bcc.n	8016ba6 <__multiply+0x74>
 8016b78:	f104 0214 	add.w	r2, r4, #20
 8016b7c:	f108 0114 	add.w	r1, r8, #20
 8016b80:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8016b84:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8016b88:	9300      	str	r3, [sp, #0]
 8016b8a:	9b00      	ldr	r3, [sp, #0]
 8016b8c:	9201      	str	r2, [sp, #4]
 8016b8e:	4293      	cmp	r3, r2
 8016b90:	d80c      	bhi.n	8016bac <__multiply+0x7a>
 8016b92:	2e00      	cmp	r6, #0
 8016b94:	dd03      	ble.n	8016b9e <__multiply+0x6c>
 8016b96:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8016b9a:	2b00      	cmp	r3, #0
 8016b9c:	d05d      	beq.n	8016c5a <__multiply+0x128>
 8016b9e:	6106      	str	r6, [r0, #16]
 8016ba0:	b003      	add	sp, #12
 8016ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ba6:	f843 2b04 	str.w	r2, [r3], #4
 8016baa:	e7e3      	b.n	8016b74 <__multiply+0x42>
 8016bac:	f8b2 b000 	ldrh.w	fp, [r2]
 8016bb0:	f1bb 0f00 	cmp.w	fp, #0
 8016bb4:	d023      	beq.n	8016bfe <__multiply+0xcc>
 8016bb6:	4689      	mov	r9, r1
 8016bb8:	46ac      	mov	ip, r5
 8016bba:	f04f 0800 	mov.w	r8, #0
 8016bbe:	f859 4b04 	ldr.w	r4, [r9], #4
 8016bc2:	f8dc a000 	ldr.w	sl, [ip]
 8016bc6:	b2a3      	uxth	r3, r4
 8016bc8:	fa1f fa8a 	uxth.w	sl, sl
 8016bcc:	fb0b a303 	mla	r3, fp, r3, sl
 8016bd0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8016bd4:	f8dc 4000 	ldr.w	r4, [ip]
 8016bd8:	4443      	add	r3, r8
 8016bda:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8016bde:	fb0b 840a 	mla	r4, fp, sl, r8
 8016be2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8016be6:	46e2      	mov	sl, ip
 8016be8:	b29b      	uxth	r3, r3
 8016bea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8016bee:	454f      	cmp	r7, r9
 8016bf0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8016bf4:	f84a 3b04 	str.w	r3, [sl], #4
 8016bf8:	d82b      	bhi.n	8016c52 <__multiply+0x120>
 8016bfa:	f8cc 8004 	str.w	r8, [ip, #4]
 8016bfe:	9b01      	ldr	r3, [sp, #4]
 8016c00:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8016c04:	3204      	adds	r2, #4
 8016c06:	f1ba 0f00 	cmp.w	sl, #0
 8016c0a:	d020      	beq.n	8016c4e <__multiply+0x11c>
 8016c0c:	682b      	ldr	r3, [r5, #0]
 8016c0e:	4689      	mov	r9, r1
 8016c10:	46a8      	mov	r8, r5
 8016c12:	f04f 0b00 	mov.w	fp, #0
 8016c16:	f8b9 c000 	ldrh.w	ip, [r9]
 8016c1a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8016c1e:	fb0a 440c 	mla	r4, sl, ip, r4
 8016c22:	445c      	add	r4, fp
 8016c24:	46c4      	mov	ip, r8
 8016c26:	b29b      	uxth	r3, r3
 8016c28:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8016c2c:	f84c 3b04 	str.w	r3, [ip], #4
 8016c30:	f859 3b04 	ldr.w	r3, [r9], #4
 8016c34:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8016c38:	0c1b      	lsrs	r3, r3, #16
 8016c3a:	fb0a b303 	mla	r3, sl, r3, fp
 8016c3e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8016c42:	454f      	cmp	r7, r9
 8016c44:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8016c48:	d805      	bhi.n	8016c56 <__multiply+0x124>
 8016c4a:	f8c8 3004 	str.w	r3, [r8, #4]
 8016c4e:	3504      	adds	r5, #4
 8016c50:	e79b      	b.n	8016b8a <__multiply+0x58>
 8016c52:	46d4      	mov	ip, sl
 8016c54:	e7b3      	b.n	8016bbe <__multiply+0x8c>
 8016c56:	46e0      	mov	r8, ip
 8016c58:	e7dd      	b.n	8016c16 <__multiply+0xe4>
 8016c5a:	3e01      	subs	r6, #1
 8016c5c:	e799      	b.n	8016b92 <__multiply+0x60>
	...

08016c60 <__pow5mult>:
 8016c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016c64:	4615      	mov	r5, r2
 8016c66:	f012 0203 	ands.w	r2, r2, #3
 8016c6a:	4606      	mov	r6, r0
 8016c6c:	460f      	mov	r7, r1
 8016c6e:	d007      	beq.n	8016c80 <__pow5mult+0x20>
 8016c70:	3a01      	subs	r2, #1
 8016c72:	4c21      	ldr	r4, [pc, #132]	; (8016cf8 <__pow5mult+0x98>)
 8016c74:	2300      	movs	r3, #0
 8016c76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016c7a:	f7ff fe8a 	bl	8016992 <__multadd>
 8016c7e:	4607      	mov	r7, r0
 8016c80:	10ad      	asrs	r5, r5, #2
 8016c82:	d035      	beq.n	8016cf0 <__pow5mult+0x90>
 8016c84:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8016c86:	b93c      	cbnz	r4, 8016c98 <__pow5mult+0x38>
 8016c88:	2010      	movs	r0, #16
 8016c8a:	f7ff fe1d 	bl	80168c8 <malloc>
 8016c8e:	6270      	str	r0, [r6, #36]	; 0x24
 8016c90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016c94:	6004      	str	r4, [r0, #0]
 8016c96:	60c4      	str	r4, [r0, #12]
 8016c98:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8016c9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016ca0:	b94c      	cbnz	r4, 8016cb6 <__pow5mult+0x56>
 8016ca2:	f240 2171 	movw	r1, #625	; 0x271
 8016ca6:	4630      	mov	r0, r6
 8016ca8:	f7ff ff3a 	bl	8016b20 <__i2b>
 8016cac:	2300      	movs	r3, #0
 8016cae:	f8c8 0008 	str.w	r0, [r8, #8]
 8016cb2:	4604      	mov	r4, r0
 8016cb4:	6003      	str	r3, [r0, #0]
 8016cb6:	f04f 0800 	mov.w	r8, #0
 8016cba:	07eb      	lsls	r3, r5, #31
 8016cbc:	d50a      	bpl.n	8016cd4 <__pow5mult+0x74>
 8016cbe:	4639      	mov	r1, r7
 8016cc0:	4622      	mov	r2, r4
 8016cc2:	4630      	mov	r0, r6
 8016cc4:	f7ff ff35 	bl	8016b32 <__multiply>
 8016cc8:	4639      	mov	r1, r7
 8016cca:	4681      	mov	r9, r0
 8016ccc:	4630      	mov	r0, r6
 8016cce:	f7ff fe49 	bl	8016964 <_Bfree>
 8016cd2:	464f      	mov	r7, r9
 8016cd4:	106d      	asrs	r5, r5, #1
 8016cd6:	d00b      	beq.n	8016cf0 <__pow5mult+0x90>
 8016cd8:	6820      	ldr	r0, [r4, #0]
 8016cda:	b938      	cbnz	r0, 8016cec <__pow5mult+0x8c>
 8016cdc:	4622      	mov	r2, r4
 8016cde:	4621      	mov	r1, r4
 8016ce0:	4630      	mov	r0, r6
 8016ce2:	f7ff ff26 	bl	8016b32 <__multiply>
 8016ce6:	6020      	str	r0, [r4, #0]
 8016ce8:	f8c0 8000 	str.w	r8, [r0]
 8016cec:	4604      	mov	r4, r0
 8016cee:	e7e4      	b.n	8016cba <__pow5mult+0x5a>
 8016cf0:	4638      	mov	r0, r7
 8016cf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016cf6:	bf00      	nop
 8016cf8:	080187f0 	.word	0x080187f0

08016cfc <__lshift>:
 8016cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016d00:	460c      	mov	r4, r1
 8016d02:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016d06:	6923      	ldr	r3, [r4, #16]
 8016d08:	6849      	ldr	r1, [r1, #4]
 8016d0a:	eb0a 0903 	add.w	r9, sl, r3
 8016d0e:	68a3      	ldr	r3, [r4, #8]
 8016d10:	4607      	mov	r7, r0
 8016d12:	4616      	mov	r6, r2
 8016d14:	f109 0501 	add.w	r5, r9, #1
 8016d18:	42ab      	cmp	r3, r5
 8016d1a:	db32      	blt.n	8016d82 <__lshift+0x86>
 8016d1c:	4638      	mov	r0, r7
 8016d1e:	f7ff fded 	bl	80168fc <_Balloc>
 8016d22:	2300      	movs	r3, #0
 8016d24:	4680      	mov	r8, r0
 8016d26:	f100 0114 	add.w	r1, r0, #20
 8016d2a:	461a      	mov	r2, r3
 8016d2c:	4553      	cmp	r3, sl
 8016d2e:	db2b      	blt.n	8016d88 <__lshift+0x8c>
 8016d30:	6920      	ldr	r0, [r4, #16]
 8016d32:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016d36:	f104 0314 	add.w	r3, r4, #20
 8016d3a:	f016 021f 	ands.w	r2, r6, #31
 8016d3e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016d42:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016d46:	d025      	beq.n	8016d94 <__lshift+0x98>
 8016d48:	f1c2 0e20 	rsb	lr, r2, #32
 8016d4c:	2000      	movs	r0, #0
 8016d4e:	681e      	ldr	r6, [r3, #0]
 8016d50:	468a      	mov	sl, r1
 8016d52:	4096      	lsls	r6, r2
 8016d54:	4330      	orrs	r0, r6
 8016d56:	f84a 0b04 	str.w	r0, [sl], #4
 8016d5a:	f853 0b04 	ldr.w	r0, [r3], #4
 8016d5e:	459c      	cmp	ip, r3
 8016d60:	fa20 f00e 	lsr.w	r0, r0, lr
 8016d64:	d814      	bhi.n	8016d90 <__lshift+0x94>
 8016d66:	6048      	str	r0, [r1, #4]
 8016d68:	b108      	cbz	r0, 8016d6e <__lshift+0x72>
 8016d6a:	f109 0502 	add.w	r5, r9, #2
 8016d6e:	3d01      	subs	r5, #1
 8016d70:	4638      	mov	r0, r7
 8016d72:	f8c8 5010 	str.w	r5, [r8, #16]
 8016d76:	4621      	mov	r1, r4
 8016d78:	f7ff fdf4 	bl	8016964 <_Bfree>
 8016d7c:	4640      	mov	r0, r8
 8016d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d82:	3101      	adds	r1, #1
 8016d84:	005b      	lsls	r3, r3, #1
 8016d86:	e7c7      	b.n	8016d18 <__lshift+0x1c>
 8016d88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8016d8c:	3301      	adds	r3, #1
 8016d8e:	e7cd      	b.n	8016d2c <__lshift+0x30>
 8016d90:	4651      	mov	r1, sl
 8016d92:	e7dc      	b.n	8016d4e <__lshift+0x52>
 8016d94:	3904      	subs	r1, #4
 8016d96:	f853 2b04 	ldr.w	r2, [r3], #4
 8016d9a:	f841 2f04 	str.w	r2, [r1, #4]!
 8016d9e:	459c      	cmp	ip, r3
 8016da0:	d8f9      	bhi.n	8016d96 <__lshift+0x9a>
 8016da2:	e7e4      	b.n	8016d6e <__lshift+0x72>

08016da4 <__mcmp>:
 8016da4:	6903      	ldr	r3, [r0, #16]
 8016da6:	690a      	ldr	r2, [r1, #16]
 8016da8:	1a9b      	subs	r3, r3, r2
 8016daa:	b530      	push	{r4, r5, lr}
 8016dac:	d10c      	bne.n	8016dc8 <__mcmp+0x24>
 8016dae:	0092      	lsls	r2, r2, #2
 8016db0:	3014      	adds	r0, #20
 8016db2:	3114      	adds	r1, #20
 8016db4:	1884      	adds	r4, r0, r2
 8016db6:	4411      	add	r1, r2
 8016db8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8016dbc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016dc0:	4295      	cmp	r5, r2
 8016dc2:	d003      	beq.n	8016dcc <__mcmp+0x28>
 8016dc4:	d305      	bcc.n	8016dd2 <__mcmp+0x2e>
 8016dc6:	2301      	movs	r3, #1
 8016dc8:	4618      	mov	r0, r3
 8016dca:	bd30      	pop	{r4, r5, pc}
 8016dcc:	42a0      	cmp	r0, r4
 8016dce:	d3f3      	bcc.n	8016db8 <__mcmp+0x14>
 8016dd0:	e7fa      	b.n	8016dc8 <__mcmp+0x24>
 8016dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8016dd6:	e7f7      	b.n	8016dc8 <__mcmp+0x24>

08016dd8 <__mdiff>:
 8016dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016ddc:	460d      	mov	r5, r1
 8016dde:	4607      	mov	r7, r0
 8016de0:	4611      	mov	r1, r2
 8016de2:	4628      	mov	r0, r5
 8016de4:	4614      	mov	r4, r2
 8016de6:	f7ff ffdd 	bl	8016da4 <__mcmp>
 8016dea:	1e06      	subs	r6, r0, #0
 8016dec:	d108      	bne.n	8016e00 <__mdiff+0x28>
 8016dee:	4631      	mov	r1, r6
 8016df0:	4638      	mov	r0, r7
 8016df2:	f7ff fd83 	bl	80168fc <_Balloc>
 8016df6:	2301      	movs	r3, #1
 8016df8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8016dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016e00:	bfa4      	itt	ge
 8016e02:	4623      	movge	r3, r4
 8016e04:	462c      	movge	r4, r5
 8016e06:	4638      	mov	r0, r7
 8016e08:	6861      	ldr	r1, [r4, #4]
 8016e0a:	bfa6      	itte	ge
 8016e0c:	461d      	movge	r5, r3
 8016e0e:	2600      	movge	r6, #0
 8016e10:	2601      	movlt	r6, #1
 8016e12:	f7ff fd73 	bl	80168fc <_Balloc>
 8016e16:	692b      	ldr	r3, [r5, #16]
 8016e18:	60c6      	str	r6, [r0, #12]
 8016e1a:	6926      	ldr	r6, [r4, #16]
 8016e1c:	f105 0914 	add.w	r9, r5, #20
 8016e20:	f104 0214 	add.w	r2, r4, #20
 8016e24:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8016e28:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8016e2c:	f100 0514 	add.w	r5, r0, #20
 8016e30:	f04f 0e00 	mov.w	lr, #0
 8016e34:	f852 ab04 	ldr.w	sl, [r2], #4
 8016e38:	f859 4b04 	ldr.w	r4, [r9], #4
 8016e3c:	fa1e f18a 	uxtah	r1, lr, sl
 8016e40:	b2a3      	uxth	r3, r4
 8016e42:	1ac9      	subs	r1, r1, r3
 8016e44:	0c23      	lsrs	r3, r4, #16
 8016e46:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8016e4a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8016e4e:	b289      	uxth	r1, r1
 8016e50:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8016e54:	45c8      	cmp	r8, r9
 8016e56:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8016e5a:	4694      	mov	ip, r2
 8016e5c:	f845 3b04 	str.w	r3, [r5], #4
 8016e60:	d8e8      	bhi.n	8016e34 <__mdiff+0x5c>
 8016e62:	45bc      	cmp	ip, r7
 8016e64:	d304      	bcc.n	8016e70 <__mdiff+0x98>
 8016e66:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8016e6a:	b183      	cbz	r3, 8016e8e <__mdiff+0xb6>
 8016e6c:	6106      	str	r6, [r0, #16]
 8016e6e:	e7c5      	b.n	8016dfc <__mdiff+0x24>
 8016e70:	f85c 1b04 	ldr.w	r1, [ip], #4
 8016e74:	fa1e f381 	uxtah	r3, lr, r1
 8016e78:	141a      	asrs	r2, r3, #16
 8016e7a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8016e7e:	b29b      	uxth	r3, r3
 8016e80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016e84:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8016e88:	f845 3b04 	str.w	r3, [r5], #4
 8016e8c:	e7e9      	b.n	8016e62 <__mdiff+0x8a>
 8016e8e:	3e01      	subs	r6, #1
 8016e90:	e7e9      	b.n	8016e66 <__mdiff+0x8e>
	...

08016e94 <__ulp>:
 8016e94:	4b12      	ldr	r3, [pc, #72]	; (8016ee0 <__ulp+0x4c>)
 8016e96:	ee10 2a90 	vmov	r2, s1
 8016e9a:	401a      	ands	r2, r3
 8016e9c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8016ea0:	2b00      	cmp	r3, #0
 8016ea2:	dd04      	ble.n	8016eae <__ulp+0x1a>
 8016ea4:	2000      	movs	r0, #0
 8016ea6:	4619      	mov	r1, r3
 8016ea8:	ec41 0b10 	vmov	d0, r0, r1
 8016eac:	4770      	bx	lr
 8016eae:	425b      	negs	r3, r3
 8016eb0:	151b      	asrs	r3, r3, #20
 8016eb2:	2b13      	cmp	r3, #19
 8016eb4:	f04f 0000 	mov.w	r0, #0
 8016eb8:	f04f 0100 	mov.w	r1, #0
 8016ebc:	dc04      	bgt.n	8016ec8 <__ulp+0x34>
 8016ebe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8016ec2:	fa42 f103 	asr.w	r1, r2, r3
 8016ec6:	e7ef      	b.n	8016ea8 <__ulp+0x14>
 8016ec8:	3b14      	subs	r3, #20
 8016eca:	2b1e      	cmp	r3, #30
 8016ecc:	f04f 0201 	mov.w	r2, #1
 8016ed0:	bfda      	itte	le
 8016ed2:	f1c3 031f 	rsble	r3, r3, #31
 8016ed6:	fa02 f303 	lslle.w	r3, r2, r3
 8016eda:	4613      	movgt	r3, r2
 8016edc:	4618      	mov	r0, r3
 8016ede:	e7e3      	b.n	8016ea8 <__ulp+0x14>
 8016ee0:	7ff00000 	.word	0x7ff00000

08016ee4 <__b2d>:
 8016ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ee6:	6905      	ldr	r5, [r0, #16]
 8016ee8:	f100 0714 	add.w	r7, r0, #20
 8016eec:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8016ef0:	1f2e      	subs	r6, r5, #4
 8016ef2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8016ef6:	4620      	mov	r0, r4
 8016ef8:	f7ff fdc4 	bl	8016a84 <__hi0bits>
 8016efc:	f1c0 0320 	rsb	r3, r0, #32
 8016f00:	280a      	cmp	r0, #10
 8016f02:	600b      	str	r3, [r1, #0]
 8016f04:	f8df c074 	ldr.w	ip, [pc, #116]	; 8016f7c <__b2d+0x98>
 8016f08:	dc14      	bgt.n	8016f34 <__b2d+0x50>
 8016f0a:	f1c0 0e0b 	rsb	lr, r0, #11
 8016f0e:	fa24 f10e 	lsr.w	r1, r4, lr
 8016f12:	42b7      	cmp	r7, r6
 8016f14:	ea41 030c 	orr.w	r3, r1, ip
 8016f18:	bf34      	ite	cc
 8016f1a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016f1e:	2100      	movcs	r1, #0
 8016f20:	3015      	adds	r0, #21
 8016f22:	fa04 f000 	lsl.w	r0, r4, r0
 8016f26:	fa21 f10e 	lsr.w	r1, r1, lr
 8016f2a:	ea40 0201 	orr.w	r2, r0, r1
 8016f2e:	ec43 2b10 	vmov	d0, r2, r3
 8016f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016f34:	42b7      	cmp	r7, r6
 8016f36:	bf3a      	itte	cc
 8016f38:	f1a5 0608 	subcc.w	r6, r5, #8
 8016f3c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016f40:	2100      	movcs	r1, #0
 8016f42:	380b      	subs	r0, #11
 8016f44:	d015      	beq.n	8016f72 <__b2d+0x8e>
 8016f46:	4084      	lsls	r4, r0
 8016f48:	f1c0 0520 	rsb	r5, r0, #32
 8016f4c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8016f50:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8016f54:	42be      	cmp	r6, r7
 8016f56:	fa21 fc05 	lsr.w	ip, r1, r5
 8016f5a:	ea44 030c 	orr.w	r3, r4, ip
 8016f5e:	bf8c      	ite	hi
 8016f60:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8016f64:	2400      	movls	r4, #0
 8016f66:	fa01 f000 	lsl.w	r0, r1, r0
 8016f6a:	40ec      	lsrs	r4, r5
 8016f6c:	ea40 0204 	orr.w	r2, r0, r4
 8016f70:	e7dd      	b.n	8016f2e <__b2d+0x4a>
 8016f72:	ea44 030c 	orr.w	r3, r4, ip
 8016f76:	460a      	mov	r2, r1
 8016f78:	e7d9      	b.n	8016f2e <__b2d+0x4a>
 8016f7a:	bf00      	nop
 8016f7c:	3ff00000 	.word	0x3ff00000

08016f80 <__d2b>:
 8016f80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016f84:	460e      	mov	r6, r1
 8016f86:	2101      	movs	r1, #1
 8016f88:	ec59 8b10 	vmov	r8, r9, d0
 8016f8c:	4615      	mov	r5, r2
 8016f8e:	f7ff fcb5 	bl	80168fc <_Balloc>
 8016f92:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8016f96:	4607      	mov	r7, r0
 8016f98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016f9c:	bb34      	cbnz	r4, 8016fec <__d2b+0x6c>
 8016f9e:	9301      	str	r3, [sp, #4]
 8016fa0:	f1b8 0300 	subs.w	r3, r8, #0
 8016fa4:	d027      	beq.n	8016ff6 <__d2b+0x76>
 8016fa6:	a802      	add	r0, sp, #8
 8016fa8:	f840 3d08 	str.w	r3, [r0, #-8]!
 8016fac:	f7ff fd89 	bl	8016ac2 <__lo0bits>
 8016fb0:	9900      	ldr	r1, [sp, #0]
 8016fb2:	b1f0      	cbz	r0, 8016ff2 <__d2b+0x72>
 8016fb4:	9a01      	ldr	r2, [sp, #4]
 8016fb6:	f1c0 0320 	rsb	r3, r0, #32
 8016fba:	fa02 f303 	lsl.w	r3, r2, r3
 8016fbe:	430b      	orrs	r3, r1
 8016fc0:	40c2      	lsrs	r2, r0
 8016fc2:	617b      	str	r3, [r7, #20]
 8016fc4:	9201      	str	r2, [sp, #4]
 8016fc6:	9b01      	ldr	r3, [sp, #4]
 8016fc8:	61bb      	str	r3, [r7, #24]
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	bf14      	ite	ne
 8016fce:	2102      	movne	r1, #2
 8016fd0:	2101      	moveq	r1, #1
 8016fd2:	6139      	str	r1, [r7, #16]
 8016fd4:	b1c4      	cbz	r4, 8017008 <__d2b+0x88>
 8016fd6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8016fda:	4404      	add	r4, r0
 8016fdc:	6034      	str	r4, [r6, #0]
 8016fde:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016fe2:	6028      	str	r0, [r5, #0]
 8016fe4:	4638      	mov	r0, r7
 8016fe6:	b003      	add	sp, #12
 8016fe8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016fec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016ff0:	e7d5      	b.n	8016f9e <__d2b+0x1e>
 8016ff2:	6179      	str	r1, [r7, #20]
 8016ff4:	e7e7      	b.n	8016fc6 <__d2b+0x46>
 8016ff6:	a801      	add	r0, sp, #4
 8016ff8:	f7ff fd63 	bl	8016ac2 <__lo0bits>
 8016ffc:	9b01      	ldr	r3, [sp, #4]
 8016ffe:	617b      	str	r3, [r7, #20]
 8017000:	2101      	movs	r1, #1
 8017002:	6139      	str	r1, [r7, #16]
 8017004:	3020      	adds	r0, #32
 8017006:	e7e5      	b.n	8016fd4 <__d2b+0x54>
 8017008:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801700c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8017010:	6030      	str	r0, [r6, #0]
 8017012:	6918      	ldr	r0, [r3, #16]
 8017014:	f7ff fd36 	bl	8016a84 <__hi0bits>
 8017018:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801701c:	e7e1      	b.n	8016fe2 <__d2b+0x62>

0801701e <__ratio>:
 801701e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017022:	4688      	mov	r8, r1
 8017024:	4669      	mov	r1, sp
 8017026:	4681      	mov	r9, r0
 8017028:	f7ff ff5c 	bl	8016ee4 <__b2d>
 801702c:	a901      	add	r1, sp, #4
 801702e:	4640      	mov	r0, r8
 8017030:	ec57 6b10 	vmov	r6, r7, d0
 8017034:	f7ff ff56 	bl	8016ee4 <__b2d>
 8017038:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801703c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8017040:	eba3 0c02 	sub.w	ip, r3, r2
 8017044:	e9dd 3200 	ldrd	r3, r2, [sp]
 8017048:	1a9b      	subs	r3, r3, r2
 801704a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801704e:	ec5b ab10 	vmov	sl, fp, d0
 8017052:	2b00      	cmp	r3, #0
 8017054:	bfce      	itee	gt
 8017056:	463a      	movgt	r2, r7
 8017058:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801705c:	465a      	movle	r2, fp
 801705e:	4659      	mov	r1, fp
 8017060:	463d      	mov	r5, r7
 8017062:	bfd4      	ite	le
 8017064:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8017068:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 801706c:	4630      	mov	r0, r6
 801706e:	ee10 2a10 	vmov	r2, s0
 8017072:	460b      	mov	r3, r1
 8017074:	4629      	mov	r1, r5
 8017076:	f7e9 fc01 	bl	800087c <__aeabi_ddiv>
 801707a:	ec41 0b10 	vmov	d0, r0, r1
 801707e:	b003      	add	sp, #12
 8017080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017084 <__copybits>:
 8017084:	3901      	subs	r1, #1
 8017086:	b510      	push	{r4, lr}
 8017088:	1149      	asrs	r1, r1, #5
 801708a:	6914      	ldr	r4, [r2, #16]
 801708c:	3101      	adds	r1, #1
 801708e:	f102 0314 	add.w	r3, r2, #20
 8017092:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017096:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801709a:	42a3      	cmp	r3, r4
 801709c:	4602      	mov	r2, r0
 801709e:	d303      	bcc.n	80170a8 <__copybits+0x24>
 80170a0:	2300      	movs	r3, #0
 80170a2:	428a      	cmp	r2, r1
 80170a4:	d305      	bcc.n	80170b2 <__copybits+0x2e>
 80170a6:	bd10      	pop	{r4, pc}
 80170a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80170ac:	f840 2b04 	str.w	r2, [r0], #4
 80170b0:	e7f3      	b.n	801709a <__copybits+0x16>
 80170b2:	f842 3b04 	str.w	r3, [r2], #4
 80170b6:	e7f4      	b.n	80170a2 <__copybits+0x1e>

080170b8 <__any_on>:
 80170b8:	f100 0214 	add.w	r2, r0, #20
 80170bc:	6900      	ldr	r0, [r0, #16]
 80170be:	114b      	asrs	r3, r1, #5
 80170c0:	4298      	cmp	r0, r3
 80170c2:	b510      	push	{r4, lr}
 80170c4:	db11      	blt.n	80170ea <__any_on+0x32>
 80170c6:	dd0a      	ble.n	80170de <__any_on+0x26>
 80170c8:	f011 011f 	ands.w	r1, r1, #31
 80170cc:	d007      	beq.n	80170de <__any_on+0x26>
 80170ce:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80170d2:	fa24 f001 	lsr.w	r0, r4, r1
 80170d6:	fa00 f101 	lsl.w	r1, r0, r1
 80170da:	428c      	cmp	r4, r1
 80170dc:	d10b      	bne.n	80170f6 <__any_on+0x3e>
 80170de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80170e2:	4293      	cmp	r3, r2
 80170e4:	d803      	bhi.n	80170ee <__any_on+0x36>
 80170e6:	2000      	movs	r0, #0
 80170e8:	bd10      	pop	{r4, pc}
 80170ea:	4603      	mov	r3, r0
 80170ec:	e7f7      	b.n	80170de <__any_on+0x26>
 80170ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80170f2:	2900      	cmp	r1, #0
 80170f4:	d0f5      	beq.n	80170e2 <__any_on+0x2a>
 80170f6:	2001      	movs	r0, #1
 80170f8:	e7f6      	b.n	80170e8 <__any_on+0x30>

080170fa <_calloc_r>:
 80170fa:	b538      	push	{r3, r4, r5, lr}
 80170fc:	fb02 f401 	mul.w	r4, r2, r1
 8017100:	4621      	mov	r1, r4
 8017102:	f000 f857 	bl	80171b4 <_malloc_r>
 8017106:	4605      	mov	r5, r0
 8017108:	b118      	cbz	r0, 8017112 <_calloc_r+0x18>
 801710a:	4622      	mov	r2, r4
 801710c:	2100      	movs	r1, #0
 801710e:	f7fc fcaa 	bl	8013a66 <memset>
 8017112:	4628      	mov	r0, r5
 8017114:	bd38      	pop	{r3, r4, r5, pc}
	...

08017118 <_free_r>:
 8017118:	b538      	push	{r3, r4, r5, lr}
 801711a:	4605      	mov	r5, r0
 801711c:	2900      	cmp	r1, #0
 801711e:	d045      	beq.n	80171ac <_free_r+0x94>
 8017120:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017124:	1f0c      	subs	r4, r1, #4
 8017126:	2b00      	cmp	r3, #0
 8017128:	bfb8      	it	lt
 801712a:	18e4      	addlt	r4, r4, r3
 801712c:	f000 fe30 	bl	8017d90 <__malloc_lock>
 8017130:	4a1f      	ldr	r2, [pc, #124]	; (80171b0 <_free_r+0x98>)
 8017132:	6813      	ldr	r3, [r2, #0]
 8017134:	4610      	mov	r0, r2
 8017136:	b933      	cbnz	r3, 8017146 <_free_r+0x2e>
 8017138:	6063      	str	r3, [r4, #4]
 801713a:	6014      	str	r4, [r2, #0]
 801713c:	4628      	mov	r0, r5
 801713e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017142:	f000 be26 	b.w	8017d92 <__malloc_unlock>
 8017146:	42a3      	cmp	r3, r4
 8017148:	d90c      	bls.n	8017164 <_free_r+0x4c>
 801714a:	6821      	ldr	r1, [r4, #0]
 801714c:	1862      	adds	r2, r4, r1
 801714e:	4293      	cmp	r3, r2
 8017150:	bf04      	itt	eq
 8017152:	681a      	ldreq	r2, [r3, #0]
 8017154:	685b      	ldreq	r3, [r3, #4]
 8017156:	6063      	str	r3, [r4, #4]
 8017158:	bf04      	itt	eq
 801715a:	1852      	addeq	r2, r2, r1
 801715c:	6022      	streq	r2, [r4, #0]
 801715e:	6004      	str	r4, [r0, #0]
 8017160:	e7ec      	b.n	801713c <_free_r+0x24>
 8017162:	4613      	mov	r3, r2
 8017164:	685a      	ldr	r2, [r3, #4]
 8017166:	b10a      	cbz	r2, 801716c <_free_r+0x54>
 8017168:	42a2      	cmp	r2, r4
 801716a:	d9fa      	bls.n	8017162 <_free_r+0x4a>
 801716c:	6819      	ldr	r1, [r3, #0]
 801716e:	1858      	adds	r0, r3, r1
 8017170:	42a0      	cmp	r0, r4
 8017172:	d10b      	bne.n	801718c <_free_r+0x74>
 8017174:	6820      	ldr	r0, [r4, #0]
 8017176:	4401      	add	r1, r0
 8017178:	1858      	adds	r0, r3, r1
 801717a:	4282      	cmp	r2, r0
 801717c:	6019      	str	r1, [r3, #0]
 801717e:	d1dd      	bne.n	801713c <_free_r+0x24>
 8017180:	6810      	ldr	r0, [r2, #0]
 8017182:	6852      	ldr	r2, [r2, #4]
 8017184:	605a      	str	r2, [r3, #4]
 8017186:	4401      	add	r1, r0
 8017188:	6019      	str	r1, [r3, #0]
 801718a:	e7d7      	b.n	801713c <_free_r+0x24>
 801718c:	d902      	bls.n	8017194 <_free_r+0x7c>
 801718e:	230c      	movs	r3, #12
 8017190:	602b      	str	r3, [r5, #0]
 8017192:	e7d3      	b.n	801713c <_free_r+0x24>
 8017194:	6820      	ldr	r0, [r4, #0]
 8017196:	1821      	adds	r1, r4, r0
 8017198:	428a      	cmp	r2, r1
 801719a:	bf04      	itt	eq
 801719c:	6811      	ldreq	r1, [r2, #0]
 801719e:	6852      	ldreq	r2, [r2, #4]
 80171a0:	6062      	str	r2, [r4, #4]
 80171a2:	bf04      	itt	eq
 80171a4:	1809      	addeq	r1, r1, r0
 80171a6:	6021      	streq	r1, [r4, #0]
 80171a8:	605c      	str	r4, [r3, #4]
 80171aa:	e7c7      	b.n	801713c <_free_r+0x24>
 80171ac:	bd38      	pop	{r3, r4, r5, pc}
 80171ae:	bf00      	nop
 80171b0:	2003c494 	.word	0x2003c494

080171b4 <_malloc_r>:
 80171b4:	b570      	push	{r4, r5, r6, lr}
 80171b6:	1ccd      	adds	r5, r1, #3
 80171b8:	f025 0503 	bic.w	r5, r5, #3
 80171bc:	3508      	adds	r5, #8
 80171be:	2d0c      	cmp	r5, #12
 80171c0:	bf38      	it	cc
 80171c2:	250c      	movcc	r5, #12
 80171c4:	2d00      	cmp	r5, #0
 80171c6:	4606      	mov	r6, r0
 80171c8:	db01      	blt.n	80171ce <_malloc_r+0x1a>
 80171ca:	42a9      	cmp	r1, r5
 80171cc:	d903      	bls.n	80171d6 <_malloc_r+0x22>
 80171ce:	230c      	movs	r3, #12
 80171d0:	6033      	str	r3, [r6, #0]
 80171d2:	2000      	movs	r0, #0
 80171d4:	bd70      	pop	{r4, r5, r6, pc}
 80171d6:	f000 fddb 	bl	8017d90 <__malloc_lock>
 80171da:	4a21      	ldr	r2, [pc, #132]	; (8017260 <_malloc_r+0xac>)
 80171dc:	6814      	ldr	r4, [r2, #0]
 80171de:	4621      	mov	r1, r4
 80171e0:	b991      	cbnz	r1, 8017208 <_malloc_r+0x54>
 80171e2:	4c20      	ldr	r4, [pc, #128]	; (8017264 <_malloc_r+0xb0>)
 80171e4:	6823      	ldr	r3, [r4, #0]
 80171e6:	b91b      	cbnz	r3, 80171f0 <_malloc_r+0x3c>
 80171e8:	4630      	mov	r0, r6
 80171ea:	f000 fc91 	bl	8017b10 <_sbrk_r>
 80171ee:	6020      	str	r0, [r4, #0]
 80171f0:	4629      	mov	r1, r5
 80171f2:	4630      	mov	r0, r6
 80171f4:	f000 fc8c 	bl	8017b10 <_sbrk_r>
 80171f8:	1c43      	adds	r3, r0, #1
 80171fa:	d124      	bne.n	8017246 <_malloc_r+0x92>
 80171fc:	230c      	movs	r3, #12
 80171fe:	6033      	str	r3, [r6, #0]
 8017200:	4630      	mov	r0, r6
 8017202:	f000 fdc6 	bl	8017d92 <__malloc_unlock>
 8017206:	e7e4      	b.n	80171d2 <_malloc_r+0x1e>
 8017208:	680b      	ldr	r3, [r1, #0]
 801720a:	1b5b      	subs	r3, r3, r5
 801720c:	d418      	bmi.n	8017240 <_malloc_r+0x8c>
 801720e:	2b0b      	cmp	r3, #11
 8017210:	d90f      	bls.n	8017232 <_malloc_r+0x7e>
 8017212:	600b      	str	r3, [r1, #0]
 8017214:	50cd      	str	r5, [r1, r3]
 8017216:	18cc      	adds	r4, r1, r3
 8017218:	4630      	mov	r0, r6
 801721a:	f000 fdba 	bl	8017d92 <__malloc_unlock>
 801721e:	f104 000b 	add.w	r0, r4, #11
 8017222:	1d23      	adds	r3, r4, #4
 8017224:	f020 0007 	bic.w	r0, r0, #7
 8017228:	1ac3      	subs	r3, r0, r3
 801722a:	d0d3      	beq.n	80171d4 <_malloc_r+0x20>
 801722c:	425a      	negs	r2, r3
 801722e:	50e2      	str	r2, [r4, r3]
 8017230:	e7d0      	b.n	80171d4 <_malloc_r+0x20>
 8017232:	428c      	cmp	r4, r1
 8017234:	684b      	ldr	r3, [r1, #4]
 8017236:	bf16      	itet	ne
 8017238:	6063      	strne	r3, [r4, #4]
 801723a:	6013      	streq	r3, [r2, #0]
 801723c:	460c      	movne	r4, r1
 801723e:	e7eb      	b.n	8017218 <_malloc_r+0x64>
 8017240:	460c      	mov	r4, r1
 8017242:	6849      	ldr	r1, [r1, #4]
 8017244:	e7cc      	b.n	80171e0 <_malloc_r+0x2c>
 8017246:	1cc4      	adds	r4, r0, #3
 8017248:	f024 0403 	bic.w	r4, r4, #3
 801724c:	42a0      	cmp	r0, r4
 801724e:	d005      	beq.n	801725c <_malloc_r+0xa8>
 8017250:	1a21      	subs	r1, r4, r0
 8017252:	4630      	mov	r0, r6
 8017254:	f000 fc5c 	bl	8017b10 <_sbrk_r>
 8017258:	3001      	adds	r0, #1
 801725a:	d0cf      	beq.n	80171fc <_malloc_r+0x48>
 801725c:	6025      	str	r5, [r4, #0]
 801725e:	e7db      	b.n	8017218 <_malloc_r+0x64>
 8017260:	2003c494 	.word	0x2003c494
 8017264:	2003c498 	.word	0x2003c498

08017268 <__ssputs_r>:
 8017268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801726c:	688e      	ldr	r6, [r1, #8]
 801726e:	429e      	cmp	r6, r3
 8017270:	4682      	mov	sl, r0
 8017272:	460c      	mov	r4, r1
 8017274:	4690      	mov	r8, r2
 8017276:	4699      	mov	r9, r3
 8017278:	d837      	bhi.n	80172ea <__ssputs_r+0x82>
 801727a:	898a      	ldrh	r2, [r1, #12]
 801727c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017280:	d031      	beq.n	80172e6 <__ssputs_r+0x7e>
 8017282:	6825      	ldr	r5, [r4, #0]
 8017284:	6909      	ldr	r1, [r1, #16]
 8017286:	1a6f      	subs	r7, r5, r1
 8017288:	6965      	ldr	r5, [r4, #20]
 801728a:	2302      	movs	r3, #2
 801728c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017290:	fb95 f5f3 	sdiv	r5, r5, r3
 8017294:	f109 0301 	add.w	r3, r9, #1
 8017298:	443b      	add	r3, r7
 801729a:	429d      	cmp	r5, r3
 801729c:	bf38      	it	cc
 801729e:	461d      	movcc	r5, r3
 80172a0:	0553      	lsls	r3, r2, #21
 80172a2:	d530      	bpl.n	8017306 <__ssputs_r+0x9e>
 80172a4:	4629      	mov	r1, r5
 80172a6:	f7ff ff85 	bl	80171b4 <_malloc_r>
 80172aa:	4606      	mov	r6, r0
 80172ac:	b950      	cbnz	r0, 80172c4 <__ssputs_r+0x5c>
 80172ae:	230c      	movs	r3, #12
 80172b0:	f8ca 3000 	str.w	r3, [sl]
 80172b4:	89a3      	ldrh	r3, [r4, #12]
 80172b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80172ba:	81a3      	strh	r3, [r4, #12]
 80172bc:	f04f 30ff 	mov.w	r0, #4294967295
 80172c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80172c4:	463a      	mov	r2, r7
 80172c6:	6921      	ldr	r1, [r4, #16]
 80172c8:	f7fc fbc2 	bl	8013a50 <memcpy>
 80172cc:	89a3      	ldrh	r3, [r4, #12]
 80172ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80172d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80172d6:	81a3      	strh	r3, [r4, #12]
 80172d8:	6126      	str	r6, [r4, #16]
 80172da:	6165      	str	r5, [r4, #20]
 80172dc:	443e      	add	r6, r7
 80172de:	1bed      	subs	r5, r5, r7
 80172e0:	6026      	str	r6, [r4, #0]
 80172e2:	60a5      	str	r5, [r4, #8]
 80172e4:	464e      	mov	r6, r9
 80172e6:	454e      	cmp	r6, r9
 80172e8:	d900      	bls.n	80172ec <__ssputs_r+0x84>
 80172ea:	464e      	mov	r6, r9
 80172ec:	4632      	mov	r2, r6
 80172ee:	4641      	mov	r1, r8
 80172f0:	6820      	ldr	r0, [r4, #0]
 80172f2:	f000 fd34 	bl	8017d5e <memmove>
 80172f6:	68a3      	ldr	r3, [r4, #8]
 80172f8:	1b9b      	subs	r3, r3, r6
 80172fa:	60a3      	str	r3, [r4, #8]
 80172fc:	6823      	ldr	r3, [r4, #0]
 80172fe:	441e      	add	r6, r3
 8017300:	6026      	str	r6, [r4, #0]
 8017302:	2000      	movs	r0, #0
 8017304:	e7dc      	b.n	80172c0 <__ssputs_r+0x58>
 8017306:	462a      	mov	r2, r5
 8017308:	f000 fd44 	bl	8017d94 <_realloc_r>
 801730c:	4606      	mov	r6, r0
 801730e:	2800      	cmp	r0, #0
 8017310:	d1e2      	bne.n	80172d8 <__ssputs_r+0x70>
 8017312:	6921      	ldr	r1, [r4, #16]
 8017314:	4650      	mov	r0, sl
 8017316:	f7ff feff 	bl	8017118 <_free_r>
 801731a:	e7c8      	b.n	80172ae <__ssputs_r+0x46>

0801731c <_svfiprintf_r>:
 801731c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017320:	461d      	mov	r5, r3
 8017322:	898b      	ldrh	r3, [r1, #12]
 8017324:	061f      	lsls	r7, r3, #24
 8017326:	b09d      	sub	sp, #116	; 0x74
 8017328:	4680      	mov	r8, r0
 801732a:	460c      	mov	r4, r1
 801732c:	4616      	mov	r6, r2
 801732e:	d50f      	bpl.n	8017350 <_svfiprintf_r+0x34>
 8017330:	690b      	ldr	r3, [r1, #16]
 8017332:	b96b      	cbnz	r3, 8017350 <_svfiprintf_r+0x34>
 8017334:	2140      	movs	r1, #64	; 0x40
 8017336:	f7ff ff3d 	bl	80171b4 <_malloc_r>
 801733a:	6020      	str	r0, [r4, #0]
 801733c:	6120      	str	r0, [r4, #16]
 801733e:	b928      	cbnz	r0, 801734c <_svfiprintf_r+0x30>
 8017340:	230c      	movs	r3, #12
 8017342:	f8c8 3000 	str.w	r3, [r8]
 8017346:	f04f 30ff 	mov.w	r0, #4294967295
 801734a:	e0c8      	b.n	80174de <_svfiprintf_r+0x1c2>
 801734c:	2340      	movs	r3, #64	; 0x40
 801734e:	6163      	str	r3, [r4, #20]
 8017350:	2300      	movs	r3, #0
 8017352:	9309      	str	r3, [sp, #36]	; 0x24
 8017354:	2320      	movs	r3, #32
 8017356:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801735a:	2330      	movs	r3, #48	; 0x30
 801735c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017360:	9503      	str	r5, [sp, #12]
 8017362:	f04f 0b01 	mov.w	fp, #1
 8017366:	4637      	mov	r7, r6
 8017368:	463d      	mov	r5, r7
 801736a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801736e:	b10b      	cbz	r3, 8017374 <_svfiprintf_r+0x58>
 8017370:	2b25      	cmp	r3, #37	; 0x25
 8017372:	d13e      	bne.n	80173f2 <_svfiprintf_r+0xd6>
 8017374:	ebb7 0a06 	subs.w	sl, r7, r6
 8017378:	d00b      	beq.n	8017392 <_svfiprintf_r+0x76>
 801737a:	4653      	mov	r3, sl
 801737c:	4632      	mov	r2, r6
 801737e:	4621      	mov	r1, r4
 8017380:	4640      	mov	r0, r8
 8017382:	f7ff ff71 	bl	8017268 <__ssputs_r>
 8017386:	3001      	adds	r0, #1
 8017388:	f000 80a4 	beq.w	80174d4 <_svfiprintf_r+0x1b8>
 801738c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801738e:	4453      	add	r3, sl
 8017390:	9309      	str	r3, [sp, #36]	; 0x24
 8017392:	783b      	ldrb	r3, [r7, #0]
 8017394:	2b00      	cmp	r3, #0
 8017396:	f000 809d 	beq.w	80174d4 <_svfiprintf_r+0x1b8>
 801739a:	2300      	movs	r3, #0
 801739c:	f04f 32ff 	mov.w	r2, #4294967295
 80173a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80173a4:	9304      	str	r3, [sp, #16]
 80173a6:	9307      	str	r3, [sp, #28]
 80173a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80173ac:	931a      	str	r3, [sp, #104]	; 0x68
 80173ae:	462f      	mov	r7, r5
 80173b0:	2205      	movs	r2, #5
 80173b2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80173b6:	4850      	ldr	r0, [pc, #320]	; (80174f8 <_svfiprintf_r+0x1dc>)
 80173b8:	f7e8 ff2a 	bl	8000210 <memchr>
 80173bc:	9b04      	ldr	r3, [sp, #16]
 80173be:	b9d0      	cbnz	r0, 80173f6 <_svfiprintf_r+0xda>
 80173c0:	06d9      	lsls	r1, r3, #27
 80173c2:	bf44      	itt	mi
 80173c4:	2220      	movmi	r2, #32
 80173c6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80173ca:	071a      	lsls	r2, r3, #28
 80173cc:	bf44      	itt	mi
 80173ce:	222b      	movmi	r2, #43	; 0x2b
 80173d0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80173d4:	782a      	ldrb	r2, [r5, #0]
 80173d6:	2a2a      	cmp	r2, #42	; 0x2a
 80173d8:	d015      	beq.n	8017406 <_svfiprintf_r+0xea>
 80173da:	9a07      	ldr	r2, [sp, #28]
 80173dc:	462f      	mov	r7, r5
 80173de:	2000      	movs	r0, #0
 80173e0:	250a      	movs	r5, #10
 80173e2:	4639      	mov	r1, r7
 80173e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80173e8:	3b30      	subs	r3, #48	; 0x30
 80173ea:	2b09      	cmp	r3, #9
 80173ec:	d94d      	bls.n	801748a <_svfiprintf_r+0x16e>
 80173ee:	b1b8      	cbz	r0, 8017420 <_svfiprintf_r+0x104>
 80173f0:	e00f      	b.n	8017412 <_svfiprintf_r+0xf6>
 80173f2:	462f      	mov	r7, r5
 80173f4:	e7b8      	b.n	8017368 <_svfiprintf_r+0x4c>
 80173f6:	4a40      	ldr	r2, [pc, #256]	; (80174f8 <_svfiprintf_r+0x1dc>)
 80173f8:	1a80      	subs	r0, r0, r2
 80173fa:	fa0b f000 	lsl.w	r0, fp, r0
 80173fe:	4318      	orrs	r0, r3
 8017400:	9004      	str	r0, [sp, #16]
 8017402:	463d      	mov	r5, r7
 8017404:	e7d3      	b.n	80173ae <_svfiprintf_r+0x92>
 8017406:	9a03      	ldr	r2, [sp, #12]
 8017408:	1d11      	adds	r1, r2, #4
 801740a:	6812      	ldr	r2, [r2, #0]
 801740c:	9103      	str	r1, [sp, #12]
 801740e:	2a00      	cmp	r2, #0
 8017410:	db01      	blt.n	8017416 <_svfiprintf_r+0xfa>
 8017412:	9207      	str	r2, [sp, #28]
 8017414:	e004      	b.n	8017420 <_svfiprintf_r+0x104>
 8017416:	4252      	negs	r2, r2
 8017418:	f043 0302 	orr.w	r3, r3, #2
 801741c:	9207      	str	r2, [sp, #28]
 801741e:	9304      	str	r3, [sp, #16]
 8017420:	783b      	ldrb	r3, [r7, #0]
 8017422:	2b2e      	cmp	r3, #46	; 0x2e
 8017424:	d10c      	bne.n	8017440 <_svfiprintf_r+0x124>
 8017426:	787b      	ldrb	r3, [r7, #1]
 8017428:	2b2a      	cmp	r3, #42	; 0x2a
 801742a:	d133      	bne.n	8017494 <_svfiprintf_r+0x178>
 801742c:	9b03      	ldr	r3, [sp, #12]
 801742e:	1d1a      	adds	r2, r3, #4
 8017430:	681b      	ldr	r3, [r3, #0]
 8017432:	9203      	str	r2, [sp, #12]
 8017434:	2b00      	cmp	r3, #0
 8017436:	bfb8      	it	lt
 8017438:	f04f 33ff 	movlt.w	r3, #4294967295
 801743c:	3702      	adds	r7, #2
 801743e:	9305      	str	r3, [sp, #20]
 8017440:	4d2e      	ldr	r5, [pc, #184]	; (80174fc <_svfiprintf_r+0x1e0>)
 8017442:	7839      	ldrb	r1, [r7, #0]
 8017444:	2203      	movs	r2, #3
 8017446:	4628      	mov	r0, r5
 8017448:	f7e8 fee2 	bl	8000210 <memchr>
 801744c:	b138      	cbz	r0, 801745e <_svfiprintf_r+0x142>
 801744e:	2340      	movs	r3, #64	; 0x40
 8017450:	1b40      	subs	r0, r0, r5
 8017452:	fa03 f000 	lsl.w	r0, r3, r0
 8017456:	9b04      	ldr	r3, [sp, #16]
 8017458:	4303      	orrs	r3, r0
 801745a:	3701      	adds	r7, #1
 801745c:	9304      	str	r3, [sp, #16]
 801745e:	7839      	ldrb	r1, [r7, #0]
 8017460:	4827      	ldr	r0, [pc, #156]	; (8017500 <_svfiprintf_r+0x1e4>)
 8017462:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017466:	2206      	movs	r2, #6
 8017468:	1c7e      	adds	r6, r7, #1
 801746a:	f7e8 fed1 	bl	8000210 <memchr>
 801746e:	2800      	cmp	r0, #0
 8017470:	d038      	beq.n	80174e4 <_svfiprintf_r+0x1c8>
 8017472:	4b24      	ldr	r3, [pc, #144]	; (8017504 <_svfiprintf_r+0x1e8>)
 8017474:	bb13      	cbnz	r3, 80174bc <_svfiprintf_r+0x1a0>
 8017476:	9b03      	ldr	r3, [sp, #12]
 8017478:	3307      	adds	r3, #7
 801747a:	f023 0307 	bic.w	r3, r3, #7
 801747e:	3308      	adds	r3, #8
 8017480:	9303      	str	r3, [sp, #12]
 8017482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017484:	444b      	add	r3, r9
 8017486:	9309      	str	r3, [sp, #36]	; 0x24
 8017488:	e76d      	b.n	8017366 <_svfiprintf_r+0x4a>
 801748a:	fb05 3202 	mla	r2, r5, r2, r3
 801748e:	2001      	movs	r0, #1
 8017490:	460f      	mov	r7, r1
 8017492:	e7a6      	b.n	80173e2 <_svfiprintf_r+0xc6>
 8017494:	2300      	movs	r3, #0
 8017496:	3701      	adds	r7, #1
 8017498:	9305      	str	r3, [sp, #20]
 801749a:	4619      	mov	r1, r3
 801749c:	250a      	movs	r5, #10
 801749e:	4638      	mov	r0, r7
 80174a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80174a4:	3a30      	subs	r2, #48	; 0x30
 80174a6:	2a09      	cmp	r2, #9
 80174a8:	d903      	bls.n	80174b2 <_svfiprintf_r+0x196>
 80174aa:	2b00      	cmp	r3, #0
 80174ac:	d0c8      	beq.n	8017440 <_svfiprintf_r+0x124>
 80174ae:	9105      	str	r1, [sp, #20]
 80174b0:	e7c6      	b.n	8017440 <_svfiprintf_r+0x124>
 80174b2:	fb05 2101 	mla	r1, r5, r1, r2
 80174b6:	2301      	movs	r3, #1
 80174b8:	4607      	mov	r7, r0
 80174ba:	e7f0      	b.n	801749e <_svfiprintf_r+0x182>
 80174bc:	ab03      	add	r3, sp, #12
 80174be:	9300      	str	r3, [sp, #0]
 80174c0:	4622      	mov	r2, r4
 80174c2:	4b11      	ldr	r3, [pc, #68]	; (8017508 <_svfiprintf_r+0x1ec>)
 80174c4:	a904      	add	r1, sp, #16
 80174c6:	4640      	mov	r0, r8
 80174c8:	f7fc fb6a 	bl	8013ba0 <_printf_float>
 80174cc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80174d0:	4681      	mov	r9, r0
 80174d2:	d1d6      	bne.n	8017482 <_svfiprintf_r+0x166>
 80174d4:	89a3      	ldrh	r3, [r4, #12]
 80174d6:	065b      	lsls	r3, r3, #25
 80174d8:	f53f af35 	bmi.w	8017346 <_svfiprintf_r+0x2a>
 80174dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80174de:	b01d      	add	sp, #116	; 0x74
 80174e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174e4:	ab03      	add	r3, sp, #12
 80174e6:	9300      	str	r3, [sp, #0]
 80174e8:	4622      	mov	r2, r4
 80174ea:	4b07      	ldr	r3, [pc, #28]	; (8017508 <_svfiprintf_r+0x1ec>)
 80174ec:	a904      	add	r1, sp, #16
 80174ee:	4640      	mov	r0, r8
 80174f0:	f7fc fe0c 	bl	801410c <_printf_i>
 80174f4:	e7ea      	b.n	80174cc <_svfiprintf_r+0x1b0>
 80174f6:	bf00      	nop
 80174f8:	080187fc 	.word	0x080187fc
 80174fc:	08018802 	.word	0x08018802
 8017500:	08018806 	.word	0x08018806
 8017504:	08013ba1 	.word	0x08013ba1
 8017508:	08017269 	.word	0x08017269

0801750c <_sungetc_r>:
 801750c:	b538      	push	{r3, r4, r5, lr}
 801750e:	1c4b      	adds	r3, r1, #1
 8017510:	4614      	mov	r4, r2
 8017512:	d103      	bne.n	801751c <_sungetc_r+0x10>
 8017514:	f04f 35ff 	mov.w	r5, #4294967295
 8017518:	4628      	mov	r0, r5
 801751a:	bd38      	pop	{r3, r4, r5, pc}
 801751c:	8993      	ldrh	r3, [r2, #12]
 801751e:	f023 0320 	bic.w	r3, r3, #32
 8017522:	8193      	strh	r3, [r2, #12]
 8017524:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017526:	6852      	ldr	r2, [r2, #4]
 8017528:	b2cd      	uxtb	r5, r1
 801752a:	b18b      	cbz	r3, 8017550 <_sungetc_r+0x44>
 801752c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801752e:	4293      	cmp	r3, r2
 8017530:	dd08      	ble.n	8017544 <_sungetc_r+0x38>
 8017532:	6823      	ldr	r3, [r4, #0]
 8017534:	1e5a      	subs	r2, r3, #1
 8017536:	6022      	str	r2, [r4, #0]
 8017538:	f803 5c01 	strb.w	r5, [r3, #-1]
 801753c:	6863      	ldr	r3, [r4, #4]
 801753e:	3301      	adds	r3, #1
 8017540:	6063      	str	r3, [r4, #4]
 8017542:	e7e9      	b.n	8017518 <_sungetc_r+0xc>
 8017544:	4621      	mov	r1, r4
 8017546:	f000 fbc3 	bl	8017cd0 <__submore>
 801754a:	2800      	cmp	r0, #0
 801754c:	d0f1      	beq.n	8017532 <_sungetc_r+0x26>
 801754e:	e7e1      	b.n	8017514 <_sungetc_r+0x8>
 8017550:	6921      	ldr	r1, [r4, #16]
 8017552:	6823      	ldr	r3, [r4, #0]
 8017554:	b151      	cbz	r1, 801756c <_sungetc_r+0x60>
 8017556:	4299      	cmp	r1, r3
 8017558:	d208      	bcs.n	801756c <_sungetc_r+0x60>
 801755a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801755e:	42a9      	cmp	r1, r5
 8017560:	d104      	bne.n	801756c <_sungetc_r+0x60>
 8017562:	3b01      	subs	r3, #1
 8017564:	3201      	adds	r2, #1
 8017566:	6023      	str	r3, [r4, #0]
 8017568:	6062      	str	r2, [r4, #4]
 801756a:	e7d5      	b.n	8017518 <_sungetc_r+0xc>
 801756c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8017570:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017574:	6363      	str	r3, [r4, #52]	; 0x34
 8017576:	2303      	movs	r3, #3
 8017578:	63a3      	str	r3, [r4, #56]	; 0x38
 801757a:	4623      	mov	r3, r4
 801757c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8017580:	6023      	str	r3, [r4, #0]
 8017582:	2301      	movs	r3, #1
 8017584:	e7dc      	b.n	8017540 <_sungetc_r+0x34>

08017586 <__ssrefill_r>:
 8017586:	b510      	push	{r4, lr}
 8017588:	460c      	mov	r4, r1
 801758a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801758c:	b169      	cbz	r1, 80175aa <__ssrefill_r+0x24>
 801758e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017592:	4299      	cmp	r1, r3
 8017594:	d001      	beq.n	801759a <__ssrefill_r+0x14>
 8017596:	f7ff fdbf 	bl	8017118 <_free_r>
 801759a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801759c:	6063      	str	r3, [r4, #4]
 801759e:	2000      	movs	r0, #0
 80175a0:	6360      	str	r0, [r4, #52]	; 0x34
 80175a2:	b113      	cbz	r3, 80175aa <__ssrefill_r+0x24>
 80175a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80175a6:	6023      	str	r3, [r4, #0]
 80175a8:	bd10      	pop	{r4, pc}
 80175aa:	6923      	ldr	r3, [r4, #16]
 80175ac:	6023      	str	r3, [r4, #0]
 80175ae:	2300      	movs	r3, #0
 80175b0:	6063      	str	r3, [r4, #4]
 80175b2:	89a3      	ldrh	r3, [r4, #12]
 80175b4:	f043 0320 	orr.w	r3, r3, #32
 80175b8:	81a3      	strh	r3, [r4, #12]
 80175ba:	f04f 30ff 	mov.w	r0, #4294967295
 80175be:	e7f3      	b.n	80175a8 <__ssrefill_r+0x22>

080175c0 <__ssvfiscanf_r>:
 80175c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175c4:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80175c8:	460c      	mov	r4, r1
 80175ca:	2100      	movs	r1, #0
 80175cc:	9144      	str	r1, [sp, #272]	; 0x110
 80175ce:	9145      	str	r1, [sp, #276]	; 0x114
 80175d0:	499f      	ldr	r1, [pc, #636]	; (8017850 <__ssvfiscanf_r+0x290>)
 80175d2:	91a0      	str	r1, [sp, #640]	; 0x280
 80175d4:	f10d 0804 	add.w	r8, sp, #4
 80175d8:	499e      	ldr	r1, [pc, #632]	; (8017854 <__ssvfiscanf_r+0x294>)
 80175da:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8017858 <__ssvfiscanf_r+0x298>
 80175de:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80175e2:	4606      	mov	r6, r0
 80175e4:	4692      	mov	sl, r2
 80175e6:	91a1      	str	r1, [sp, #644]	; 0x284
 80175e8:	9300      	str	r3, [sp, #0]
 80175ea:	270a      	movs	r7, #10
 80175ec:	f89a 3000 	ldrb.w	r3, [sl]
 80175f0:	2b00      	cmp	r3, #0
 80175f2:	f000 812a 	beq.w	801784a <__ssvfiscanf_r+0x28a>
 80175f6:	4655      	mov	r5, sl
 80175f8:	f7ff f948 	bl	801688c <__locale_ctype_ptr>
 80175fc:	f815 bb01 	ldrb.w	fp, [r5], #1
 8017600:	4458      	add	r0, fp
 8017602:	7843      	ldrb	r3, [r0, #1]
 8017604:	f013 0308 	ands.w	r3, r3, #8
 8017608:	d01c      	beq.n	8017644 <__ssvfiscanf_r+0x84>
 801760a:	6863      	ldr	r3, [r4, #4]
 801760c:	2b00      	cmp	r3, #0
 801760e:	dd12      	ble.n	8017636 <__ssvfiscanf_r+0x76>
 8017610:	f7ff f93c 	bl	801688c <__locale_ctype_ptr>
 8017614:	6823      	ldr	r3, [r4, #0]
 8017616:	781a      	ldrb	r2, [r3, #0]
 8017618:	4410      	add	r0, r2
 801761a:	7842      	ldrb	r2, [r0, #1]
 801761c:	0712      	lsls	r2, r2, #28
 801761e:	d401      	bmi.n	8017624 <__ssvfiscanf_r+0x64>
 8017620:	46aa      	mov	sl, r5
 8017622:	e7e3      	b.n	80175ec <__ssvfiscanf_r+0x2c>
 8017624:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017626:	3201      	adds	r2, #1
 8017628:	9245      	str	r2, [sp, #276]	; 0x114
 801762a:	6862      	ldr	r2, [r4, #4]
 801762c:	3301      	adds	r3, #1
 801762e:	3a01      	subs	r2, #1
 8017630:	6062      	str	r2, [r4, #4]
 8017632:	6023      	str	r3, [r4, #0]
 8017634:	e7e9      	b.n	801760a <__ssvfiscanf_r+0x4a>
 8017636:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017638:	4621      	mov	r1, r4
 801763a:	4630      	mov	r0, r6
 801763c:	4798      	blx	r3
 801763e:	2800      	cmp	r0, #0
 8017640:	d0e6      	beq.n	8017610 <__ssvfiscanf_r+0x50>
 8017642:	e7ed      	b.n	8017620 <__ssvfiscanf_r+0x60>
 8017644:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8017648:	f040 8082 	bne.w	8017750 <__ssvfiscanf_r+0x190>
 801764c:	9343      	str	r3, [sp, #268]	; 0x10c
 801764e:	9341      	str	r3, [sp, #260]	; 0x104
 8017650:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8017654:	2b2a      	cmp	r3, #42	; 0x2a
 8017656:	d103      	bne.n	8017660 <__ssvfiscanf_r+0xa0>
 8017658:	2310      	movs	r3, #16
 801765a:	9341      	str	r3, [sp, #260]	; 0x104
 801765c:	f10a 0502 	add.w	r5, sl, #2
 8017660:	46aa      	mov	sl, r5
 8017662:	f815 1b01 	ldrb.w	r1, [r5], #1
 8017666:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801766a:	2a09      	cmp	r2, #9
 801766c:	d922      	bls.n	80176b4 <__ssvfiscanf_r+0xf4>
 801766e:	2203      	movs	r2, #3
 8017670:	4879      	ldr	r0, [pc, #484]	; (8017858 <__ssvfiscanf_r+0x298>)
 8017672:	f7e8 fdcd 	bl	8000210 <memchr>
 8017676:	b138      	cbz	r0, 8017688 <__ssvfiscanf_r+0xc8>
 8017678:	eba0 0309 	sub.w	r3, r0, r9
 801767c:	2001      	movs	r0, #1
 801767e:	4098      	lsls	r0, r3
 8017680:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017682:	4318      	orrs	r0, r3
 8017684:	9041      	str	r0, [sp, #260]	; 0x104
 8017686:	46aa      	mov	sl, r5
 8017688:	f89a 3000 	ldrb.w	r3, [sl]
 801768c:	2b67      	cmp	r3, #103	; 0x67
 801768e:	f10a 0501 	add.w	r5, sl, #1
 8017692:	d82b      	bhi.n	80176ec <__ssvfiscanf_r+0x12c>
 8017694:	2b65      	cmp	r3, #101	; 0x65
 8017696:	f080 809f 	bcs.w	80177d8 <__ssvfiscanf_r+0x218>
 801769a:	2b47      	cmp	r3, #71	; 0x47
 801769c:	d810      	bhi.n	80176c0 <__ssvfiscanf_r+0x100>
 801769e:	2b45      	cmp	r3, #69	; 0x45
 80176a0:	f080 809a 	bcs.w	80177d8 <__ssvfiscanf_r+0x218>
 80176a4:	2b00      	cmp	r3, #0
 80176a6:	d06c      	beq.n	8017782 <__ssvfiscanf_r+0x1c2>
 80176a8:	2b25      	cmp	r3, #37	; 0x25
 80176aa:	d051      	beq.n	8017750 <__ssvfiscanf_r+0x190>
 80176ac:	2303      	movs	r3, #3
 80176ae:	9347      	str	r3, [sp, #284]	; 0x11c
 80176b0:	9742      	str	r7, [sp, #264]	; 0x108
 80176b2:	e027      	b.n	8017704 <__ssvfiscanf_r+0x144>
 80176b4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80176b6:	fb07 1303 	mla	r3, r7, r3, r1
 80176ba:	3b30      	subs	r3, #48	; 0x30
 80176bc:	9343      	str	r3, [sp, #268]	; 0x10c
 80176be:	e7cf      	b.n	8017660 <__ssvfiscanf_r+0xa0>
 80176c0:	2b5b      	cmp	r3, #91	; 0x5b
 80176c2:	d06a      	beq.n	801779a <__ssvfiscanf_r+0x1da>
 80176c4:	d80c      	bhi.n	80176e0 <__ssvfiscanf_r+0x120>
 80176c6:	2b58      	cmp	r3, #88	; 0x58
 80176c8:	d1f0      	bne.n	80176ac <__ssvfiscanf_r+0xec>
 80176ca:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80176cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80176d0:	9241      	str	r2, [sp, #260]	; 0x104
 80176d2:	2210      	movs	r2, #16
 80176d4:	9242      	str	r2, [sp, #264]	; 0x108
 80176d6:	2b6e      	cmp	r3, #110	; 0x6e
 80176d8:	bf8c      	ite	hi
 80176da:	2304      	movhi	r3, #4
 80176dc:	2303      	movls	r3, #3
 80176de:	e010      	b.n	8017702 <__ssvfiscanf_r+0x142>
 80176e0:	2b63      	cmp	r3, #99	; 0x63
 80176e2:	d065      	beq.n	80177b0 <__ssvfiscanf_r+0x1f0>
 80176e4:	2b64      	cmp	r3, #100	; 0x64
 80176e6:	d1e1      	bne.n	80176ac <__ssvfiscanf_r+0xec>
 80176e8:	9742      	str	r7, [sp, #264]	; 0x108
 80176ea:	e7f4      	b.n	80176d6 <__ssvfiscanf_r+0x116>
 80176ec:	2b70      	cmp	r3, #112	; 0x70
 80176ee:	d04b      	beq.n	8017788 <__ssvfiscanf_r+0x1c8>
 80176f0:	d826      	bhi.n	8017740 <__ssvfiscanf_r+0x180>
 80176f2:	2b6e      	cmp	r3, #110	; 0x6e
 80176f4:	d062      	beq.n	80177bc <__ssvfiscanf_r+0x1fc>
 80176f6:	d84c      	bhi.n	8017792 <__ssvfiscanf_r+0x1d2>
 80176f8:	2b69      	cmp	r3, #105	; 0x69
 80176fa:	d1d7      	bne.n	80176ac <__ssvfiscanf_r+0xec>
 80176fc:	2300      	movs	r3, #0
 80176fe:	9342      	str	r3, [sp, #264]	; 0x108
 8017700:	2303      	movs	r3, #3
 8017702:	9347      	str	r3, [sp, #284]	; 0x11c
 8017704:	6863      	ldr	r3, [r4, #4]
 8017706:	2b00      	cmp	r3, #0
 8017708:	dd68      	ble.n	80177dc <__ssvfiscanf_r+0x21c>
 801770a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801770c:	0659      	lsls	r1, r3, #25
 801770e:	d407      	bmi.n	8017720 <__ssvfiscanf_r+0x160>
 8017710:	f7ff f8bc 	bl	801688c <__locale_ctype_ptr>
 8017714:	6823      	ldr	r3, [r4, #0]
 8017716:	781a      	ldrb	r2, [r3, #0]
 8017718:	4410      	add	r0, r2
 801771a:	7842      	ldrb	r2, [r0, #1]
 801771c:	0712      	lsls	r2, r2, #28
 801771e:	d464      	bmi.n	80177ea <__ssvfiscanf_r+0x22a>
 8017720:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8017722:	2b02      	cmp	r3, #2
 8017724:	dc73      	bgt.n	801780e <__ssvfiscanf_r+0x24e>
 8017726:	466b      	mov	r3, sp
 8017728:	4622      	mov	r2, r4
 801772a:	a941      	add	r1, sp, #260	; 0x104
 801772c:	4630      	mov	r0, r6
 801772e:	f000 f897 	bl	8017860 <_scanf_chars>
 8017732:	2801      	cmp	r0, #1
 8017734:	f000 8089 	beq.w	801784a <__ssvfiscanf_r+0x28a>
 8017738:	2802      	cmp	r0, #2
 801773a:	f47f af71 	bne.w	8017620 <__ssvfiscanf_r+0x60>
 801773e:	e01d      	b.n	801777c <__ssvfiscanf_r+0x1bc>
 8017740:	2b75      	cmp	r3, #117	; 0x75
 8017742:	d0d1      	beq.n	80176e8 <__ssvfiscanf_r+0x128>
 8017744:	2b78      	cmp	r3, #120	; 0x78
 8017746:	d0c0      	beq.n	80176ca <__ssvfiscanf_r+0x10a>
 8017748:	2b73      	cmp	r3, #115	; 0x73
 801774a:	d1af      	bne.n	80176ac <__ssvfiscanf_r+0xec>
 801774c:	2302      	movs	r3, #2
 801774e:	e7d8      	b.n	8017702 <__ssvfiscanf_r+0x142>
 8017750:	6863      	ldr	r3, [r4, #4]
 8017752:	2b00      	cmp	r3, #0
 8017754:	dd0c      	ble.n	8017770 <__ssvfiscanf_r+0x1b0>
 8017756:	6823      	ldr	r3, [r4, #0]
 8017758:	781a      	ldrb	r2, [r3, #0]
 801775a:	455a      	cmp	r2, fp
 801775c:	d175      	bne.n	801784a <__ssvfiscanf_r+0x28a>
 801775e:	3301      	adds	r3, #1
 8017760:	6862      	ldr	r2, [r4, #4]
 8017762:	6023      	str	r3, [r4, #0]
 8017764:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8017766:	3a01      	subs	r2, #1
 8017768:	3301      	adds	r3, #1
 801776a:	6062      	str	r2, [r4, #4]
 801776c:	9345      	str	r3, [sp, #276]	; 0x114
 801776e:	e757      	b.n	8017620 <__ssvfiscanf_r+0x60>
 8017770:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017772:	4621      	mov	r1, r4
 8017774:	4630      	mov	r0, r6
 8017776:	4798      	blx	r3
 8017778:	2800      	cmp	r0, #0
 801777a:	d0ec      	beq.n	8017756 <__ssvfiscanf_r+0x196>
 801777c:	9844      	ldr	r0, [sp, #272]	; 0x110
 801777e:	2800      	cmp	r0, #0
 8017780:	d159      	bne.n	8017836 <__ssvfiscanf_r+0x276>
 8017782:	f04f 30ff 	mov.w	r0, #4294967295
 8017786:	e05c      	b.n	8017842 <__ssvfiscanf_r+0x282>
 8017788:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801778a:	f042 0220 	orr.w	r2, r2, #32
 801778e:	9241      	str	r2, [sp, #260]	; 0x104
 8017790:	e79b      	b.n	80176ca <__ssvfiscanf_r+0x10a>
 8017792:	2308      	movs	r3, #8
 8017794:	9342      	str	r3, [sp, #264]	; 0x108
 8017796:	2304      	movs	r3, #4
 8017798:	e7b3      	b.n	8017702 <__ssvfiscanf_r+0x142>
 801779a:	4629      	mov	r1, r5
 801779c:	4640      	mov	r0, r8
 801779e:	f000 f9c7 	bl	8017b30 <__sccl>
 80177a2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80177a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80177a8:	9341      	str	r3, [sp, #260]	; 0x104
 80177aa:	4605      	mov	r5, r0
 80177ac:	2301      	movs	r3, #1
 80177ae:	e7a8      	b.n	8017702 <__ssvfiscanf_r+0x142>
 80177b0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80177b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80177b6:	9341      	str	r3, [sp, #260]	; 0x104
 80177b8:	2300      	movs	r3, #0
 80177ba:	e7a2      	b.n	8017702 <__ssvfiscanf_r+0x142>
 80177bc:	9841      	ldr	r0, [sp, #260]	; 0x104
 80177be:	06c3      	lsls	r3, r0, #27
 80177c0:	f53f af2e 	bmi.w	8017620 <__ssvfiscanf_r+0x60>
 80177c4:	9b00      	ldr	r3, [sp, #0]
 80177c6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80177c8:	1d19      	adds	r1, r3, #4
 80177ca:	9100      	str	r1, [sp, #0]
 80177cc:	681b      	ldr	r3, [r3, #0]
 80177ce:	07c0      	lsls	r0, r0, #31
 80177d0:	bf4c      	ite	mi
 80177d2:	801a      	strhmi	r2, [r3, #0]
 80177d4:	601a      	strpl	r2, [r3, #0]
 80177d6:	e723      	b.n	8017620 <__ssvfiscanf_r+0x60>
 80177d8:	2305      	movs	r3, #5
 80177da:	e792      	b.n	8017702 <__ssvfiscanf_r+0x142>
 80177dc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80177de:	4621      	mov	r1, r4
 80177e0:	4630      	mov	r0, r6
 80177e2:	4798      	blx	r3
 80177e4:	2800      	cmp	r0, #0
 80177e6:	d090      	beq.n	801770a <__ssvfiscanf_r+0x14a>
 80177e8:	e7c8      	b.n	801777c <__ssvfiscanf_r+0x1bc>
 80177ea:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80177ec:	3201      	adds	r2, #1
 80177ee:	9245      	str	r2, [sp, #276]	; 0x114
 80177f0:	6862      	ldr	r2, [r4, #4]
 80177f2:	3a01      	subs	r2, #1
 80177f4:	2a00      	cmp	r2, #0
 80177f6:	6062      	str	r2, [r4, #4]
 80177f8:	dd02      	ble.n	8017800 <__ssvfiscanf_r+0x240>
 80177fa:	3301      	adds	r3, #1
 80177fc:	6023      	str	r3, [r4, #0]
 80177fe:	e787      	b.n	8017710 <__ssvfiscanf_r+0x150>
 8017800:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017802:	4621      	mov	r1, r4
 8017804:	4630      	mov	r0, r6
 8017806:	4798      	blx	r3
 8017808:	2800      	cmp	r0, #0
 801780a:	d081      	beq.n	8017710 <__ssvfiscanf_r+0x150>
 801780c:	e7b6      	b.n	801777c <__ssvfiscanf_r+0x1bc>
 801780e:	2b04      	cmp	r3, #4
 8017810:	dc06      	bgt.n	8017820 <__ssvfiscanf_r+0x260>
 8017812:	466b      	mov	r3, sp
 8017814:	4622      	mov	r2, r4
 8017816:	a941      	add	r1, sp, #260	; 0x104
 8017818:	4630      	mov	r0, r6
 801781a:	f000 f885 	bl	8017928 <_scanf_i>
 801781e:	e788      	b.n	8017732 <__ssvfiscanf_r+0x172>
 8017820:	4b0e      	ldr	r3, [pc, #56]	; (801785c <__ssvfiscanf_r+0x29c>)
 8017822:	2b00      	cmp	r3, #0
 8017824:	f43f aefc 	beq.w	8017620 <__ssvfiscanf_r+0x60>
 8017828:	466b      	mov	r3, sp
 801782a:	4622      	mov	r2, r4
 801782c:	a941      	add	r1, sp, #260	; 0x104
 801782e:	4630      	mov	r0, r6
 8017830:	f7fc fd7e 	bl	8014330 <_scanf_float>
 8017834:	e77d      	b.n	8017732 <__ssvfiscanf_r+0x172>
 8017836:	89a3      	ldrh	r3, [r4, #12]
 8017838:	f013 0f40 	tst.w	r3, #64	; 0x40
 801783c:	bf18      	it	ne
 801783e:	f04f 30ff 	movne.w	r0, #4294967295
 8017842:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8017846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801784a:	9844      	ldr	r0, [sp, #272]	; 0x110
 801784c:	e7f9      	b.n	8017842 <__ssvfiscanf_r+0x282>
 801784e:	bf00      	nop
 8017850:	0801750d 	.word	0x0801750d
 8017854:	08017587 	.word	0x08017587
 8017858:	08018802 	.word	0x08018802
 801785c:	08014331 	.word	0x08014331

08017860 <_scanf_chars>:
 8017860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017864:	4615      	mov	r5, r2
 8017866:	688a      	ldr	r2, [r1, #8]
 8017868:	4680      	mov	r8, r0
 801786a:	460c      	mov	r4, r1
 801786c:	b932      	cbnz	r2, 801787c <_scanf_chars+0x1c>
 801786e:	698a      	ldr	r2, [r1, #24]
 8017870:	2a00      	cmp	r2, #0
 8017872:	bf14      	ite	ne
 8017874:	f04f 32ff 	movne.w	r2, #4294967295
 8017878:	2201      	moveq	r2, #1
 801787a:	608a      	str	r2, [r1, #8]
 801787c:	6822      	ldr	r2, [r4, #0]
 801787e:	06d1      	lsls	r1, r2, #27
 8017880:	bf5f      	itttt	pl
 8017882:	681a      	ldrpl	r2, [r3, #0]
 8017884:	1d11      	addpl	r1, r2, #4
 8017886:	6019      	strpl	r1, [r3, #0]
 8017888:	6817      	ldrpl	r7, [r2, #0]
 801788a:	2600      	movs	r6, #0
 801788c:	69a3      	ldr	r3, [r4, #24]
 801788e:	b1db      	cbz	r3, 80178c8 <_scanf_chars+0x68>
 8017890:	2b01      	cmp	r3, #1
 8017892:	d107      	bne.n	80178a4 <_scanf_chars+0x44>
 8017894:	682b      	ldr	r3, [r5, #0]
 8017896:	6962      	ldr	r2, [r4, #20]
 8017898:	781b      	ldrb	r3, [r3, #0]
 801789a:	5cd3      	ldrb	r3, [r2, r3]
 801789c:	b9a3      	cbnz	r3, 80178c8 <_scanf_chars+0x68>
 801789e:	2e00      	cmp	r6, #0
 80178a0:	d132      	bne.n	8017908 <_scanf_chars+0xa8>
 80178a2:	e006      	b.n	80178b2 <_scanf_chars+0x52>
 80178a4:	2b02      	cmp	r3, #2
 80178a6:	d007      	beq.n	80178b8 <_scanf_chars+0x58>
 80178a8:	2e00      	cmp	r6, #0
 80178aa:	d12d      	bne.n	8017908 <_scanf_chars+0xa8>
 80178ac:	69a3      	ldr	r3, [r4, #24]
 80178ae:	2b01      	cmp	r3, #1
 80178b0:	d12a      	bne.n	8017908 <_scanf_chars+0xa8>
 80178b2:	2001      	movs	r0, #1
 80178b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80178b8:	f7fe ffe8 	bl	801688c <__locale_ctype_ptr>
 80178bc:	682b      	ldr	r3, [r5, #0]
 80178be:	781b      	ldrb	r3, [r3, #0]
 80178c0:	4418      	add	r0, r3
 80178c2:	7843      	ldrb	r3, [r0, #1]
 80178c4:	071b      	lsls	r3, r3, #28
 80178c6:	d4ef      	bmi.n	80178a8 <_scanf_chars+0x48>
 80178c8:	6823      	ldr	r3, [r4, #0]
 80178ca:	06da      	lsls	r2, r3, #27
 80178cc:	bf5e      	ittt	pl
 80178ce:	682b      	ldrpl	r3, [r5, #0]
 80178d0:	781b      	ldrbpl	r3, [r3, #0]
 80178d2:	703b      	strbpl	r3, [r7, #0]
 80178d4:	682a      	ldr	r2, [r5, #0]
 80178d6:	686b      	ldr	r3, [r5, #4]
 80178d8:	f102 0201 	add.w	r2, r2, #1
 80178dc:	602a      	str	r2, [r5, #0]
 80178de:	68a2      	ldr	r2, [r4, #8]
 80178e0:	f103 33ff 	add.w	r3, r3, #4294967295
 80178e4:	f102 32ff 	add.w	r2, r2, #4294967295
 80178e8:	606b      	str	r3, [r5, #4]
 80178ea:	f106 0601 	add.w	r6, r6, #1
 80178ee:	bf58      	it	pl
 80178f0:	3701      	addpl	r7, #1
 80178f2:	60a2      	str	r2, [r4, #8]
 80178f4:	b142      	cbz	r2, 8017908 <_scanf_chars+0xa8>
 80178f6:	2b00      	cmp	r3, #0
 80178f8:	dcc8      	bgt.n	801788c <_scanf_chars+0x2c>
 80178fa:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80178fe:	4629      	mov	r1, r5
 8017900:	4640      	mov	r0, r8
 8017902:	4798      	blx	r3
 8017904:	2800      	cmp	r0, #0
 8017906:	d0c1      	beq.n	801788c <_scanf_chars+0x2c>
 8017908:	6823      	ldr	r3, [r4, #0]
 801790a:	f013 0310 	ands.w	r3, r3, #16
 801790e:	d105      	bne.n	801791c <_scanf_chars+0xbc>
 8017910:	68e2      	ldr	r2, [r4, #12]
 8017912:	3201      	adds	r2, #1
 8017914:	60e2      	str	r2, [r4, #12]
 8017916:	69a2      	ldr	r2, [r4, #24]
 8017918:	b102      	cbz	r2, 801791c <_scanf_chars+0xbc>
 801791a:	703b      	strb	r3, [r7, #0]
 801791c:	6923      	ldr	r3, [r4, #16]
 801791e:	441e      	add	r6, r3
 8017920:	6126      	str	r6, [r4, #16]
 8017922:	2000      	movs	r0, #0
 8017924:	e7c6      	b.n	80178b4 <_scanf_chars+0x54>
	...

08017928 <_scanf_i>:
 8017928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801792c:	469a      	mov	sl, r3
 801792e:	4b74      	ldr	r3, [pc, #464]	; (8017b00 <_scanf_i+0x1d8>)
 8017930:	460c      	mov	r4, r1
 8017932:	4683      	mov	fp, r0
 8017934:	4616      	mov	r6, r2
 8017936:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801793a:	b087      	sub	sp, #28
 801793c:	ab03      	add	r3, sp, #12
 801793e:	68a7      	ldr	r7, [r4, #8]
 8017940:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8017944:	4b6f      	ldr	r3, [pc, #444]	; (8017b04 <_scanf_i+0x1dc>)
 8017946:	69a1      	ldr	r1, [r4, #24]
 8017948:	4a6f      	ldr	r2, [pc, #444]	; (8017b08 <_scanf_i+0x1e0>)
 801794a:	2903      	cmp	r1, #3
 801794c:	bf08      	it	eq
 801794e:	461a      	moveq	r2, r3
 8017950:	1e7b      	subs	r3, r7, #1
 8017952:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8017956:	bf84      	itt	hi
 8017958:	f240 135d 	movwhi	r3, #349	; 0x15d
 801795c:	60a3      	strhi	r3, [r4, #8]
 801795e:	6823      	ldr	r3, [r4, #0]
 8017960:	9200      	str	r2, [sp, #0]
 8017962:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8017966:	bf88      	it	hi
 8017968:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801796c:	f104 091c 	add.w	r9, r4, #28
 8017970:	6023      	str	r3, [r4, #0]
 8017972:	bf8c      	ite	hi
 8017974:	197f      	addhi	r7, r7, r5
 8017976:	2700      	movls	r7, #0
 8017978:	464b      	mov	r3, r9
 801797a:	f04f 0800 	mov.w	r8, #0
 801797e:	9301      	str	r3, [sp, #4]
 8017980:	6831      	ldr	r1, [r6, #0]
 8017982:	ab03      	add	r3, sp, #12
 8017984:	2202      	movs	r2, #2
 8017986:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801798a:	7809      	ldrb	r1, [r1, #0]
 801798c:	f7e8 fc40 	bl	8000210 <memchr>
 8017990:	9b01      	ldr	r3, [sp, #4]
 8017992:	b330      	cbz	r0, 80179e2 <_scanf_i+0xba>
 8017994:	f1b8 0f01 	cmp.w	r8, #1
 8017998:	d15a      	bne.n	8017a50 <_scanf_i+0x128>
 801799a:	6862      	ldr	r2, [r4, #4]
 801799c:	b92a      	cbnz	r2, 80179aa <_scanf_i+0x82>
 801799e:	6822      	ldr	r2, [r4, #0]
 80179a0:	2108      	movs	r1, #8
 80179a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80179a6:	6061      	str	r1, [r4, #4]
 80179a8:	6022      	str	r2, [r4, #0]
 80179aa:	6822      	ldr	r2, [r4, #0]
 80179ac:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80179b0:	6022      	str	r2, [r4, #0]
 80179b2:	68a2      	ldr	r2, [r4, #8]
 80179b4:	1e51      	subs	r1, r2, #1
 80179b6:	60a1      	str	r1, [r4, #8]
 80179b8:	b19a      	cbz	r2, 80179e2 <_scanf_i+0xba>
 80179ba:	6832      	ldr	r2, [r6, #0]
 80179bc:	1c51      	adds	r1, r2, #1
 80179be:	6031      	str	r1, [r6, #0]
 80179c0:	7812      	ldrb	r2, [r2, #0]
 80179c2:	701a      	strb	r2, [r3, #0]
 80179c4:	1c5d      	adds	r5, r3, #1
 80179c6:	6873      	ldr	r3, [r6, #4]
 80179c8:	3b01      	subs	r3, #1
 80179ca:	2b00      	cmp	r3, #0
 80179cc:	6073      	str	r3, [r6, #4]
 80179ce:	dc07      	bgt.n	80179e0 <_scanf_i+0xb8>
 80179d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80179d4:	4631      	mov	r1, r6
 80179d6:	4658      	mov	r0, fp
 80179d8:	4798      	blx	r3
 80179da:	2800      	cmp	r0, #0
 80179dc:	f040 8086 	bne.w	8017aec <_scanf_i+0x1c4>
 80179e0:	462b      	mov	r3, r5
 80179e2:	f108 0801 	add.w	r8, r8, #1
 80179e6:	f1b8 0f03 	cmp.w	r8, #3
 80179ea:	d1c8      	bne.n	801797e <_scanf_i+0x56>
 80179ec:	6862      	ldr	r2, [r4, #4]
 80179ee:	b90a      	cbnz	r2, 80179f4 <_scanf_i+0xcc>
 80179f0:	220a      	movs	r2, #10
 80179f2:	6062      	str	r2, [r4, #4]
 80179f4:	6862      	ldr	r2, [r4, #4]
 80179f6:	4945      	ldr	r1, [pc, #276]	; (8017b0c <_scanf_i+0x1e4>)
 80179f8:	6960      	ldr	r0, [r4, #20]
 80179fa:	9301      	str	r3, [sp, #4]
 80179fc:	1a89      	subs	r1, r1, r2
 80179fe:	f000 f897 	bl	8017b30 <__sccl>
 8017a02:	9b01      	ldr	r3, [sp, #4]
 8017a04:	f04f 0800 	mov.w	r8, #0
 8017a08:	461d      	mov	r5, r3
 8017a0a:	68a3      	ldr	r3, [r4, #8]
 8017a0c:	6822      	ldr	r2, [r4, #0]
 8017a0e:	2b00      	cmp	r3, #0
 8017a10:	d03a      	beq.n	8017a88 <_scanf_i+0x160>
 8017a12:	6831      	ldr	r1, [r6, #0]
 8017a14:	6960      	ldr	r0, [r4, #20]
 8017a16:	f891 c000 	ldrb.w	ip, [r1]
 8017a1a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8017a1e:	2800      	cmp	r0, #0
 8017a20:	d032      	beq.n	8017a88 <_scanf_i+0x160>
 8017a22:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8017a26:	d121      	bne.n	8017a6c <_scanf_i+0x144>
 8017a28:	0510      	lsls	r0, r2, #20
 8017a2a:	d51f      	bpl.n	8017a6c <_scanf_i+0x144>
 8017a2c:	f108 0801 	add.w	r8, r8, #1
 8017a30:	b117      	cbz	r7, 8017a38 <_scanf_i+0x110>
 8017a32:	3301      	adds	r3, #1
 8017a34:	3f01      	subs	r7, #1
 8017a36:	60a3      	str	r3, [r4, #8]
 8017a38:	6873      	ldr	r3, [r6, #4]
 8017a3a:	3b01      	subs	r3, #1
 8017a3c:	2b00      	cmp	r3, #0
 8017a3e:	6073      	str	r3, [r6, #4]
 8017a40:	dd1b      	ble.n	8017a7a <_scanf_i+0x152>
 8017a42:	6833      	ldr	r3, [r6, #0]
 8017a44:	3301      	adds	r3, #1
 8017a46:	6033      	str	r3, [r6, #0]
 8017a48:	68a3      	ldr	r3, [r4, #8]
 8017a4a:	3b01      	subs	r3, #1
 8017a4c:	60a3      	str	r3, [r4, #8]
 8017a4e:	e7dc      	b.n	8017a0a <_scanf_i+0xe2>
 8017a50:	f1b8 0f02 	cmp.w	r8, #2
 8017a54:	d1ad      	bne.n	80179b2 <_scanf_i+0x8a>
 8017a56:	6822      	ldr	r2, [r4, #0]
 8017a58:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8017a5c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8017a60:	d1bf      	bne.n	80179e2 <_scanf_i+0xba>
 8017a62:	2110      	movs	r1, #16
 8017a64:	6061      	str	r1, [r4, #4]
 8017a66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017a6a:	e7a1      	b.n	80179b0 <_scanf_i+0x88>
 8017a6c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8017a70:	6022      	str	r2, [r4, #0]
 8017a72:	780b      	ldrb	r3, [r1, #0]
 8017a74:	702b      	strb	r3, [r5, #0]
 8017a76:	3501      	adds	r5, #1
 8017a78:	e7de      	b.n	8017a38 <_scanf_i+0x110>
 8017a7a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017a7e:	4631      	mov	r1, r6
 8017a80:	4658      	mov	r0, fp
 8017a82:	4798      	blx	r3
 8017a84:	2800      	cmp	r0, #0
 8017a86:	d0df      	beq.n	8017a48 <_scanf_i+0x120>
 8017a88:	6823      	ldr	r3, [r4, #0]
 8017a8a:	05d9      	lsls	r1, r3, #23
 8017a8c:	d50c      	bpl.n	8017aa8 <_scanf_i+0x180>
 8017a8e:	454d      	cmp	r5, r9
 8017a90:	d908      	bls.n	8017aa4 <_scanf_i+0x17c>
 8017a92:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8017a96:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017a9a:	4632      	mov	r2, r6
 8017a9c:	4658      	mov	r0, fp
 8017a9e:	4798      	blx	r3
 8017aa0:	1e6f      	subs	r7, r5, #1
 8017aa2:	463d      	mov	r5, r7
 8017aa4:	454d      	cmp	r5, r9
 8017aa6:	d029      	beq.n	8017afc <_scanf_i+0x1d4>
 8017aa8:	6822      	ldr	r2, [r4, #0]
 8017aaa:	f012 0210 	ands.w	r2, r2, #16
 8017aae:	d113      	bne.n	8017ad8 <_scanf_i+0x1b0>
 8017ab0:	702a      	strb	r2, [r5, #0]
 8017ab2:	6863      	ldr	r3, [r4, #4]
 8017ab4:	9e00      	ldr	r6, [sp, #0]
 8017ab6:	4649      	mov	r1, r9
 8017ab8:	4658      	mov	r0, fp
 8017aba:	47b0      	blx	r6
 8017abc:	f8da 3000 	ldr.w	r3, [sl]
 8017ac0:	6821      	ldr	r1, [r4, #0]
 8017ac2:	1d1a      	adds	r2, r3, #4
 8017ac4:	f8ca 2000 	str.w	r2, [sl]
 8017ac8:	f011 0f20 	tst.w	r1, #32
 8017acc:	681b      	ldr	r3, [r3, #0]
 8017ace:	d010      	beq.n	8017af2 <_scanf_i+0x1ca>
 8017ad0:	6018      	str	r0, [r3, #0]
 8017ad2:	68e3      	ldr	r3, [r4, #12]
 8017ad4:	3301      	adds	r3, #1
 8017ad6:	60e3      	str	r3, [r4, #12]
 8017ad8:	eba5 0509 	sub.w	r5, r5, r9
 8017adc:	44a8      	add	r8, r5
 8017ade:	6925      	ldr	r5, [r4, #16]
 8017ae0:	4445      	add	r5, r8
 8017ae2:	6125      	str	r5, [r4, #16]
 8017ae4:	2000      	movs	r0, #0
 8017ae6:	b007      	add	sp, #28
 8017ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017aec:	f04f 0800 	mov.w	r8, #0
 8017af0:	e7ca      	b.n	8017a88 <_scanf_i+0x160>
 8017af2:	07ca      	lsls	r2, r1, #31
 8017af4:	bf4c      	ite	mi
 8017af6:	8018      	strhmi	r0, [r3, #0]
 8017af8:	6018      	strpl	r0, [r3, #0]
 8017afa:	e7ea      	b.n	8017ad2 <_scanf_i+0x1aa>
 8017afc:	2001      	movs	r0, #1
 8017afe:	e7f2      	b.n	8017ae6 <_scanf_i+0x1be>
 8017b00:	0801835c 	.word	0x0801835c
 8017b04:	08015549 	.word	0x08015549
 8017b08:	08017cad 	.word	0x08017cad
 8017b0c:	0801881d 	.word	0x0801881d

08017b10 <_sbrk_r>:
 8017b10:	b538      	push	{r3, r4, r5, lr}
 8017b12:	4c06      	ldr	r4, [pc, #24]	; (8017b2c <_sbrk_r+0x1c>)
 8017b14:	2300      	movs	r3, #0
 8017b16:	4605      	mov	r5, r0
 8017b18:	4608      	mov	r0, r1
 8017b1a:	6023      	str	r3, [r4, #0]
 8017b1c:	f7ee feac 	bl	8006878 <_sbrk>
 8017b20:	1c43      	adds	r3, r0, #1
 8017b22:	d102      	bne.n	8017b2a <_sbrk_r+0x1a>
 8017b24:	6823      	ldr	r3, [r4, #0]
 8017b26:	b103      	cbz	r3, 8017b2a <_sbrk_r+0x1a>
 8017b28:	602b      	str	r3, [r5, #0]
 8017b2a:	bd38      	pop	{r3, r4, r5, pc}
 8017b2c:	20040e34 	.word	0x20040e34

08017b30 <__sccl>:
 8017b30:	b570      	push	{r4, r5, r6, lr}
 8017b32:	780b      	ldrb	r3, [r1, #0]
 8017b34:	2b5e      	cmp	r3, #94	; 0x5e
 8017b36:	bf13      	iteet	ne
 8017b38:	1c4a      	addne	r2, r1, #1
 8017b3a:	1c8a      	addeq	r2, r1, #2
 8017b3c:	784b      	ldrbeq	r3, [r1, #1]
 8017b3e:	2100      	movne	r1, #0
 8017b40:	bf08      	it	eq
 8017b42:	2101      	moveq	r1, #1
 8017b44:	1e44      	subs	r4, r0, #1
 8017b46:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8017b4a:	f804 1f01 	strb.w	r1, [r4, #1]!
 8017b4e:	42ac      	cmp	r4, r5
 8017b50:	d1fb      	bne.n	8017b4a <__sccl+0x1a>
 8017b52:	b913      	cbnz	r3, 8017b5a <__sccl+0x2a>
 8017b54:	3a01      	subs	r2, #1
 8017b56:	4610      	mov	r0, r2
 8017b58:	bd70      	pop	{r4, r5, r6, pc}
 8017b5a:	f081 0401 	eor.w	r4, r1, #1
 8017b5e:	54c4      	strb	r4, [r0, r3]
 8017b60:	1c51      	adds	r1, r2, #1
 8017b62:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8017b66:	2d2d      	cmp	r5, #45	; 0x2d
 8017b68:	f101 36ff 	add.w	r6, r1, #4294967295
 8017b6c:	460a      	mov	r2, r1
 8017b6e:	d006      	beq.n	8017b7e <__sccl+0x4e>
 8017b70:	2d5d      	cmp	r5, #93	; 0x5d
 8017b72:	d0f0      	beq.n	8017b56 <__sccl+0x26>
 8017b74:	b90d      	cbnz	r5, 8017b7a <__sccl+0x4a>
 8017b76:	4632      	mov	r2, r6
 8017b78:	e7ed      	b.n	8017b56 <__sccl+0x26>
 8017b7a:	462b      	mov	r3, r5
 8017b7c:	e7ef      	b.n	8017b5e <__sccl+0x2e>
 8017b7e:	780e      	ldrb	r6, [r1, #0]
 8017b80:	2e5d      	cmp	r6, #93	; 0x5d
 8017b82:	d0fa      	beq.n	8017b7a <__sccl+0x4a>
 8017b84:	42b3      	cmp	r3, r6
 8017b86:	dcf8      	bgt.n	8017b7a <__sccl+0x4a>
 8017b88:	3301      	adds	r3, #1
 8017b8a:	429e      	cmp	r6, r3
 8017b8c:	54c4      	strb	r4, [r0, r3]
 8017b8e:	dcfb      	bgt.n	8017b88 <__sccl+0x58>
 8017b90:	3102      	adds	r1, #2
 8017b92:	e7e6      	b.n	8017b62 <__sccl+0x32>

08017b94 <strncmp>:
 8017b94:	b510      	push	{r4, lr}
 8017b96:	b16a      	cbz	r2, 8017bb4 <strncmp+0x20>
 8017b98:	3901      	subs	r1, #1
 8017b9a:	1884      	adds	r4, r0, r2
 8017b9c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8017ba0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8017ba4:	4293      	cmp	r3, r2
 8017ba6:	d103      	bne.n	8017bb0 <strncmp+0x1c>
 8017ba8:	42a0      	cmp	r0, r4
 8017baa:	d001      	beq.n	8017bb0 <strncmp+0x1c>
 8017bac:	2b00      	cmp	r3, #0
 8017bae:	d1f5      	bne.n	8017b9c <strncmp+0x8>
 8017bb0:	1a98      	subs	r0, r3, r2
 8017bb2:	bd10      	pop	{r4, pc}
 8017bb4:	4610      	mov	r0, r2
 8017bb6:	e7fc      	b.n	8017bb2 <strncmp+0x1e>

08017bb8 <_strtoul_l.isra.0>:
 8017bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017bbc:	4680      	mov	r8, r0
 8017bbe:	4689      	mov	r9, r1
 8017bc0:	4692      	mov	sl, r2
 8017bc2:	461e      	mov	r6, r3
 8017bc4:	460f      	mov	r7, r1
 8017bc6:	463d      	mov	r5, r7
 8017bc8:	9808      	ldr	r0, [sp, #32]
 8017bca:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017bce:	f7fe fe59 	bl	8016884 <__locale_ctype_ptr_l>
 8017bd2:	4420      	add	r0, r4
 8017bd4:	7843      	ldrb	r3, [r0, #1]
 8017bd6:	f013 0308 	ands.w	r3, r3, #8
 8017bda:	d130      	bne.n	8017c3e <_strtoul_l.isra.0+0x86>
 8017bdc:	2c2d      	cmp	r4, #45	; 0x2d
 8017bde:	d130      	bne.n	8017c42 <_strtoul_l.isra.0+0x8a>
 8017be0:	787c      	ldrb	r4, [r7, #1]
 8017be2:	1cbd      	adds	r5, r7, #2
 8017be4:	2101      	movs	r1, #1
 8017be6:	2e00      	cmp	r6, #0
 8017be8:	d05c      	beq.n	8017ca4 <_strtoul_l.isra.0+0xec>
 8017bea:	2e10      	cmp	r6, #16
 8017bec:	d109      	bne.n	8017c02 <_strtoul_l.isra.0+0x4a>
 8017bee:	2c30      	cmp	r4, #48	; 0x30
 8017bf0:	d107      	bne.n	8017c02 <_strtoul_l.isra.0+0x4a>
 8017bf2:	782b      	ldrb	r3, [r5, #0]
 8017bf4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017bf8:	2b58      	cmp	r3, #88	; 0x58
 8017bfa:	d14e      	bne.n	8017c9a <_strtoul_l.isra.0+0xe2>
 8017bfc:	786c      	ldrb	r4, [r5, #1]
 8017bfe:	2610      	movs	r6, #16
 8017c00:	3502      	adds	r5, #2
 8017c02:	f04f 32ff 	mov.w	r2, #4294967295
 8017c06:	2300      	movs	r3, #0
 8017c08:	fbb2 f2f6 	udiv	r2, r2, r6
 8017c0c:	fb06 fc02 	mul.w	ip, r6, r2
 8017c10:	ea6f 0c0c 	mvn.w	ip, ip
 8017c14:	4618      	mov	r0, r3
 8017c16:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8017c1a:	2f09      	cmp	r7, #9
 8017c1c:	d817      	bhi.n	8017c4e <_strtoul_l.isra.0+0x96>
 8017c1e:	463c      	mov	r4, r7
 8017c20:	42a6      	cmp	r6, r4
 8017c22:	dd23      	ble.n	8017c6c <_strtoul_l.isra.0+0xb4>
 8017c24:	2b00      	cmp	r3, #0
 8017c26:	db1e      	blt.n	8017c66 <_strtoul_l.isra.0+0xae>
 8017c28:	4282      	cmp	r2, r0
 8017c2a:	d31c      	bcc.n	8017c66 <_strtoul_l.isra.0+0xae>
 8017c2c:	d101      	bne.n	8017c32 <_strtoul_l.isra.0+0x7a>
 8017c2e:	45a4      	cmp	ip, r4
 8017c30:	db19      	blt.n	8017c66 <_strtoul_l.isra.0+0xae>
 8017c32:	fb00 4006 	mla	r0, r0, r6, r4
 8017c36:	2301      	movs	r3, #1
 8017c38:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017c3c:	e7eb      	b.n	8017c16 <_strtoul_l.isra.0+0x5e>
 8017c3e:	462f      	mov	r7, r5
 8017c40:	e7c1      	b.n	8017bc6 <_strtoul_l.isra.0+0xe>
 8017c42:	2c2b      	cmp	r4, #43	; 0x2b
 8017c44:	bf04      	itt	eq
 8017c46:	1cbd      	addeq	r5, r7, #2
 8017c48:	787c      	ldrbeq	r4, [r7, #1]
 8017c4a:	4619      	mov	r1, r3
 8017c4c:	e7cb      	b.n	8017be6 <_strtoul_l.isra.0+0x2e>
 8017c4e:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8017c52:	2f19      	cmp	r7, #25
 8017c54:	d801      	bhi.n	8017c5a <_strtoul_l.isra.0+0xa2>
 8017c56:	3c37      	subs	r4, #55	; 0x37
 8017c58:	e7e2      	b.n	8017c20 <_strtoul_l.isra.0+0x68>
 8017c5a:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8017c5e:	2f19      	cmp	r7, #25
 8017c60:	d804      	bhi.n	8017c6c <_strtoul_l.isra.0+0xb4>
 8017c62:	3c57      	subs	r4, #87	; 0x57
 8017c64:	e7dc      	b.n	8017c20 <_strtoul_l.isra.0+0x68>
 8017c66:	f04f 33ff 	mov.w	r3, #4294967295
 8017c6a:	e7e5      	b.n	8017c38 <_strtoul_l.isra.0+0x80>
 8017c6c:	2b00      	cmp	r3, #0
 8017c6e:	da09      	bge.n	8017c84 <_strtoul_l.isra.0+0xcc>
 8017c70:	2322      	movs	r3, #34	; 0x22
 8017c72:	f8c8 3000 	str.w	r3, [r8]
 8017c76:	f04f 30ff 	mov.w	r0, #4294967295
 8017c7a:	f1ba 0f00 	cmp.w	sl, #0
 8017c7e:	d107      	bne.n	8017c90 <_strtoul_l.isra.0+0xd8>
 8017c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c84:	b101      	cbz	r1, 8017c88 <_strtoul_l.isra.0+0xd0>
 8017c86:	4240      	negs	r0, r0
 8017c88:	f1ba 0f00 	cmp.w	sl, #0
 8017c8c:	d0f8      	beq.n	8017c80 <_strtoul_l.isra.0+0xc8>
 8017c8e:	b10b      	cbz	r3, 8017c94 <_strtoul_l.isra.0+0xdc>
 8017c90:	f105 39ff 	add.w	r9, r5, #4294967295
 8017c94:	f8ca 9000 	str.w	r9, [sl]
 8017c98:	e7f2      	b.n	8017c80 <_strtoul_l.isra.0+0xc8>
 8017c9a:	2430      	movs	r4, #48	; 0x30
 8017c9c:	2e00      	cmp	r6, #0
 8017c9e:	d1b0      	bne.n	8017c02 <_strtoul_l.isra.0+0x4a>
 8017ca0:	2608      	movs	r6, #8
 8017ca2:	e7ae      	b.n	8017c02 <_strtoul_l.isra.0+0x4a>
 8017ca4:	2c30      	cmp	r4, #48	; 0x30
 8017ca6:	d0a4      	beq.n	8017bf2 <_strtoul_l.isra.0+0x3a>
 8017ca8:	260a      	movs	r6, #10
 8017caa:	e7aa      	b.n	8017c02 <_strtoul_l.isra.0+0x4a>

08017cac <_strtoul_r>:
 8017cac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017cae:	4c06      	ldr	r4, [pc, #24]	; (8017cc8 <_strtoul_r+0x1c>)
 8017cb0:	4d06      	ldr	r5, [pc, #24]	; (8017ccc <_strtoul_r+0x20>)
 8017cb2:	6824      	ldr	r4, [r4, #0]
 8017cb4:	6a24      	ldr	r4, [r4, #32]
 8017cb6:	2c00      	cmp	r4, #0
 8017cb8:	bf08      	it	eq
 8017cba:	462c      	moveq	r4, r5
 8017cbc:	9400      	str	r4, [sp, #0]
 8017cbe:	f7ff ff7b 	bl	8017bb8 <_strtoul_l.isra.0>
 8017cc2:	b003      	add	sp, #12
 8017cc4:	bd30      	pop	{r4, r5, pc}
 8017cc6:	bf00      	nop
 8017cc8:	2000000c 	.word	0x2000000c
 8017ccc:	20000070 	.word	0x20000070

08017cd0 <__submore>:
 8017cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017cd4:	460c      	mov	r4, r1
 8017cd6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017cd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017cdc:	4299      	cmp	r1, r3
 8017cde:	d11d      	bne.n	8017d1c <__submore+0x4c>
 8017ce0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017ce4:	f7ff fa66 	bl	80171b4 <_malloc_r>
 8017ce8:	b918      	cbnz	r0, 8017cf2 <__submore+0x22>
 8017cea:	f04f 30ff 	mov.w	r0, #4294967295
 8017cee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017cf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017cf6:	63a3      	str	r3, [r4, #56]	; 0x38
 8017cf8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8017cfc:	6360      	str	r0, [r4, #52]	; 0x34
 8017cfe:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8017d02:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8017d06:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8017d0a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8017d0e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8017d12:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8017d16:	6020      	str	r0, [r4, #0]
 8017d18:	2000      	movs	r0, #0
 8017d1a:	e7e8      	b.n	8017cee <__submore+0x1e>
 8017d1c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8017d1e:	0077      	lsls	r7, r6, #1
 8017d20:	463a      	mov	r2, r7
 8017d22:	f000 f837 	bl	8017d94 <_realloc_r>
 8017d26:	4605      	mov	r5, r0
 8017d28:	2800      	cmp	r0, #0
 8017d2a:	d0de      	beq.n	8017cea <__submore+0x1a>
 8017d2c:	eb00 0806 	add.w	r8, r0, r6
 8017d30:	4601      	mov	r1, r0
 8017d32:	4632      	mov	r2, r6
 8017d34:	4640      	mov	r0, r8
 8017d36:	f7fb fe8b 	bl	8013a50 <memcpy>
 8017d3a:	f8c4 8000 	str.w	r8, [r4]
 8017d3e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8017d42:	e7e9      	b.n	8017d18 <__submore+0x48>

08017d44 <__ascii_wctomb>:
 8017d44:	b149      	cbz	r1, 8017d5a <__ascii_wctomb+0x16>
 8017d46:	2aff      	cmp	r2, #255	; 0xff
 8017d48:	bf85      	ittet	hi
 8017d4a:	238a      	movhi	r3, #138	; 0x8a
 8017d4c:	6003      	strhi	r3, [r0, #0]
 8017d4e:	700a      	strbls	r2, [r1, #0]
 8017d50:	f04f 30ff 	movhi.w	r0, #4294967295
 8017d54:	bf98      	it	ls
 8017d56:	2001      	movls	r0, #1
 8017d58:	4770      	bx	lr
 8017d5a:	4608      	mov	r0, r1
 8017d5c:	4770      	bx	lr

08017d5e <memmove>:
 8017d5e:	4288      	cmp	r0, r1
 8017d60:	b510      	push	{r4, lr}
 8017d62:	eb01 0302 	add.w	r3, r1, r2
 8017d66:	d807      	bhi.n	8017d78 <memmove+0x1a>
 8017d68:	1e42      	subs	r2, r0, #1
 8017d6a:	4299      	cmp	r1, r3
 8017d6c:	d00a      	beq.n	8017d84 <memmove+0x26>
 8017d6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017d72:	f802 4f01 	strb.w	r4, [r2, #1]!
 8017d76:	e7f8      	b.n	8017d6a <memmove+0xc>
 8017d78:	4283      	cmp	r3, r0
 8017d7a:	d9f5      	bls.n	8017d68 <memmove+0xa>
 8017d7c:	1881      	adds	r1, r0, r2
 8017d7e:	1ad2      	subs	r2, r2, r3
 8017d80:	42d3      	cmn	r3, r2
 8017d82:	d100      	bne.n	8017d86 <memmove+0x28>
 8017d84:	bd10      	pop	{r4, pc}
 8017d86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017d8a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8017d8e:	e7f7      	b.n	8017d80 <memmove+0x22>

08017d90 <__malloc_lock>:
 8017d90:	4770      	bx	lr

08017d92 <__malloc_unlock>:
 8017d92:	4770      	bx	lr

08017d94 <_realloc_r>:
 8017d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d96:	4607      	mov	r7, r0
 8017d98:	4614      	mov	r4, r2
 8017d9a:	460e      	mov	r6, r1
 8017d9c:	b921      	cbnz	r1, 8017da8 <_realloc_r+0x14>
 8017d9e:	4611      	mov	r1, r2
 8017da0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017da4:	f7ff ba06 	b.w	80171b4 <_malloc_r>
 8017da8:	b922      	cbnz	r2, 8017db4 <_realloc_r+0x20>
 8017daa:	f7ff f9b5 	bl	8017118 <_free_r>
 8017dae:	4625      	mov	r5, r4
 8017db0:	4628      	mov	r0, r5
 8017db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017db4:	f000 f814 	bl	8017de0 <_malloc_usable_size_r>
 8017db8:	42a0      	cmp	r0, r4
 8017dba:	d20f      	bcs.n	8017ddc <_realloc_r+0x48>
 8017dbc:	4621      	mov	r1, r4
 8017dbe:	4638      	mov	r0, r7
 8017dc0:	f7ff f9f8 	bl	80171b4 <_malloc_r>
 8017dc4:	4605      	mov	r5, r0
 8017dc6:	2800      	cmp	r0, #0
 8017dc8:	d0f2      	beq.n	8017db0 <_realloc_r+0x1c>
 8017dca:	4631      	mov	r1, r6
 8017dcc:	4622      	mov	r2, r4
 8017dce:	f7fb fe3f 	bl	8013a50 <memcpy>
 8017dd2:	4631      	mov	r1, r6
 8017dd4:	4638      	mov	r0, r7
 8017dd6:	f7ff f99f 	bl	8017118 <_free_r>
 8017dda:	e7e9      	b.n	8017db0 <_realloc_r+0x1c>
 8017ddc:	4635      	mov	r5, r6
 8017dde:	e7e7      	b.n	8017db0 <_realloc_r+0x1c>

08017de0 <_malloc_usable_size_r>:
 8017de0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017de4:	1f18      	subs	r0, r3, #4
 8017de6:	2b00      	cmp	r3, #0
 8017de8:	bfbc      	itt	lt
 8017dea:	580b      	ldrlt	r3, [r1, r0]
 8017dec:	18c0      	addlt	r0, r0, r3
 8017dee:	4770      	bx	lr

08017df0 <_init>:
 8017df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017df2:	bf00      	nop
 8017df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017df6:	bc08      	pop	{r3}
 8017df8:	469e      	mov	lr, r3
 8017dfa:	4770      	bx	lr

08017dfc <_fini>:
 8017dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017dfe:	bf00      	nop
 8017e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017e02:	bc08      	pop	{r3}
 8017e04:	469e      	mov	lr, r3
 8017e06:	4770      	bx	lr
