
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000189c8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b7c  08018b88  08018b88  00028b88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019704  08019704  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08019704  08019704  00029704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801970c  0801970c  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801970c  0801970c  0002970c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019714  08019714  00029714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08019718  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00040c90  200001e0  080198f4  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20040e70  080198f4  00030e70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00039009  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007942  00000000  00000000  00069215  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000022a0  00000000  00000000  00070b58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001fe0  00000000  00000000  00072df8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00035247  00000000  00000000  00074dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00025b4e  00000000  00000000  000aa01f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00110be5  00000000  00000000  000cfb6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e0752  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a4b8  00000000  00000000  001e07d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08018b70 	.word	0x08018b70

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08018b70 	.word	0x08018b70

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f009 fa6e 	bl	800a4b8 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	2003e968 	.word	0x2003e968

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f009 fa56 	bl	800a4b8 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	2003e968 	.word	0x2003e968

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f009 f8f7 	bl	800a214 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f007 fe5e 	bl	8008ce8 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f007 fe58 	bl	8008ce8 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f007 fe52 	bl	8008ce8 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f007 fe4c 	bl	8008ce8 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f007 fe46 	bl	8008ce8 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f007 fe40 	bl	8008ce8 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f007 fe3a 	bl	8008ce8 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f007 fe34 	bl	8008ce8 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f007 fe2e 	bl	8008ce8 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f007 fe28 	bl	8008ce8 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f007 fe1c 	bl	8008ce8 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f007 fe16 	bl	8008ce8 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f015 f8f5 	bl	8016318 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), distance_10mm_(0), total_distance_(0), cross_line_ignore_distance_(0){}
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	615a      	str	r2, [r3, #20]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f04f 0200 	mov.w	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f04f 0200 	mov.w	r2, #0
 800119a:	61da      	str	r2, [r3, #28]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4618      	mov	r0, r3
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <_ZN7Encoder4initEv>:

void Encoder::init()
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80011b4:	213c      	movs	r1, #60	; 0x3c
 80011b6:	4809      	ldr	r0, [pc, #36]	; (80011dc <_ZN7Encoder4initEv+0x30>)
 80011b8:	f00d f816 	bl	800e1e8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 80011bc:	213c      	movs	r1, #60	; 0x3c
 80011be:	4808      	ldr	r0, [pc, #32]	; (80011e0 <_ZN7Encoder4initEv+0x34>)
 80011c0:	f00d f812 	bl	800e1e8 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 80011c4:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <_ZN7Encoder4initEv+0x38>)
 80011c6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011ca:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <_ZN7Encoder4initEv+0x3c>)
 80011ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011d2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	2003ebbc 	.word	0x2003ebbc
 80011e0:	2003e8a0 	.word	0x2003e8a0
 80011e4:	40010000 	.word	0x40010000
 80011e8:	40010400 	.word	0x40010400
 80011ec:	00000000 	.word	0x00000000

080011f0 <_ZN7Encoder6updateEv>:

void Encoder::update()
{
 80011f0:	b5b0      	push	{r4, r5, r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 80011f8:	4b69      	ldr	r3, [pc, #420]	; (80013a0 <_ZN7Encoder6updateEv+0x1b0>)
 80011fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fc:	ee07 3a90 	vmov	s15, r3
 8001200:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001204:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80013a4 <_ZN7Encoder6updateEv+0x1b4>
 8001208:	ee77 7a67 	vsub.f32	s15, s14, s15
 800120c:	ed9f 7a66 	vldr	s14, [pc, #408]	; 80013a8 <_ZN7Encoder6updateEv+0x1b8>
 8001210:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001214:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001218:	4b64      	ldr	r3, [pc, #400]	; (80013ac <_ZN7Encoder6updateEv+0x1bc>)
 800121a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121c:	ee07 3a90 	vmov	s15, r3
 8001220:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001224:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80013a4 <_ZN7Encoder6updateEv+0x1b4>
 8001228:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800122c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80013a8 <_ZN7Encoder6updateEv+0x1b8>
 8001230:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001234:	edc7 7a02 	vstr	s15, [r7, #8]
	monitor_cnt_l = cnt_l;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4a5d      	ldr	r2, [pc, #372]	; (80013b0 <_ZN7Encoder6updateEv+0x1c0>)
 800123c:	6013      	str	r3, [r2, #0]

	cnt_l_ = ((R_ENC)*(cnt_l) + (1.0 - (R_ENC))* (pre_cnt_l)); // lowpath filter
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff f999 	bl	8000578 <__aeabi_f2d>
 8001246:	a350      	add	r3, pc, #320	; (adr r3, 8001388 <_ZN7Encoder6updateEv+0x198>)
 8001248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124c:	f7ff f9ec 	bl	8000628 <__aeabi_dmul>
 8001250:	4603      	mov	r3, r0
 8001252:	460c      	mov	r4, r1
 8001254:	4625      	mov	r5, r4
 8001256:	461c      	mov	r4, r3
 8001258:	4b56      	ldr	r3, [pc, #344]	; (80013b4 <_ZN7Encoder6updateEv+0x1c4>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff f98b 	bl	8000578 <__aeabi_f2d>
 8001262:	a34b      	add	r3, pc, #300	; (adr r3, 8001390 <_ZN7Encoder6updateEv+0x1a0>)
 8001264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001268:	f7ff f9de 	bl	8000628 <__aeabi_dmul>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4620      	mov	r0, r4
 8001272:	4629      	mov	r1, r5
 8001274:	f7ff f822 	bl	80002bc <__adddf3>
 8001278:	4603      	mov	r3, r0
 800127a:	460c      	mov	r4, r1
 800127c:	4618      	mov	r0, r3
 800127e:	4621      	mov	r1, r4
 8001280:	f7ff fcca 	bl	8000c18 <__aeabi_d2f>
 8001284:	4602      	mov	r2, r0
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	601a      	str	r2, [r3, #0]
	cnt_r_ = ((R_ENC)*(cnt_r) + (1.0 - (R_ENC))* (pre_cnt_r)); // lowpath filter
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff f973 	bl	8000578 <__aeabi_f2d>
 8001292:	a33d      	add	r3, pc, #244	; (adr r3, 8001388 <_ZN7Encoder6updateEv+0x198>)
 8001294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001298:	f7ff f9c6 	bl	8000628 <__aeabi_dmul>
 800129c:	4603      	mov	r3, r0
 800129e:	460c      	mov	r4, r1
 80012a0:	4625      	mov	r5, r4
 80012a2:	461c      	mov	r4, r3
 80012a4:	4b44      	ldr	r3, [pc, #272]	; (80013b8 <_ZN7Encoder6updateEv+0x1c8>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff f965 	bl	8000578 <__aeabi_f2d>
 80012ae:	a338      	add	r3, pc, #224	; (adr r3, 8001390 <_ZN7Encoder6updateEv+0x1a0>)
 80012b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b4:	f7ff f9b8 	bl	8000628 <__aeabi_dmul>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	4620      	mov	r0, r4
 80012be:	4629      	mov	r1, r5
 80012c0:	f7fe fffc 	bl	80002bc <__adddf3>
 80012c4:	4603      	mov	r3, r0
 80012c6:	460c      	mov	r4, r1
 80012c8:	4618      	mov	r0, r3
 80012ca:	4621      	mov	r1, r4
 80012cc:	f7ff fca4 	bl	8000c18 <__aeabi_d2f>
 80012d0:	4602      	mov	r2, r0
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	605a      	str	r2, [r3, #4]
	monitor_cnt_l_lpf = cnt_l_;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a38      	ldr	r2, [pc, #224]	; (80013bc <_ZN7Encoder6updateEv+0x1cc>)
 80012dc:	6013      	str	r3, [r2, #0]

	pre_cnt_l = cnt_l_;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a34      	ldr	r2, [pc, #208]	; (80013b4 <_ZN7Encoder6updateEv+0x1c4>)
 80012e4:	6013      	str	r3, [r2, #0]
	pre_cnt_r = cnt_r_;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	4a33      	ldr	r2, [pc, #204]	; (80013b8 <_ZN7Encoder6updateEv+0x1c8>)
 80012ec:	6013      	str	r3, [r2, #0]

	//total_cnt_l_ += cnt_l_;
	//total_cnt_r_ += cnt_r_;

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	ed93 7a00 	vldr	s14, [r3]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80012fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012fe:	ee17 0a90 	vmov	r0, s15
 8001302:	f7ff f939 	bl	8000578 <__aeabi_f2d>
 8001306:	a324      	add	r3, pc, #144	; (adr r3, 8001398 <_ZN7Encoder6updateEv+0x1a8>)
 8001308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130c:	f7ff f98c 	bl	8000628 <__aeabi_dmul>
 8001310:	4603      	mov	r3, r0
 8001312:	460c      	mov	r4, r1
 8001314:	4618      	mov	r0, r3
 8001316:	4621      	mov	r1, r4
 8001318:	f04f 0200 	mov.w	r2, #0
 800131c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001320:	f7ff faac 	bl	800087c <__aeabi_ddiv>
 8001324:	4603      	mov	r3, r0
 8001326:	460c      	mov	r4, r1
 8001328:	4618      	mov	r0, r3
 800132a:	4621      	mov	r1, r4
 800132c:	f7ff fc74 	bl	8000c18 <__aeabi_d2f>
 8001330:	4602      	mov	r2, r0
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	609a      	str	r2, [r3, #8]
	distance_10mm_ += distance_;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	ed93 7a05 	vldr	s14, [r3, #20]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	edc3 7a05 	vstr	s15, [r3, #20]
	total_distance_ += distance_;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	ed93 7a06 	vldr	s14, [r3, #24]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	edd3 7a02 	vldr	s15, [r3, #8]
 8001358:	ee77 7a27 	vadd.f32	s15, s14, s15
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	edc3 7a06 	vstr	s15, [r3, #24]
	cross_line_ignore_distance_ += distance_;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	ed93 7a07 	vldr	s14, [r3, #28]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	edd3 7a02 	vldr	s15, [r3, #8]
 800136e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	edc3 7a07 	vstr	s15, [r3, #28]
	monitor_distance = distance_10mm_;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	695b      	ldr	r3, [r3, #20]
 800137c:	4a10      	ldr	r2, [pc, #64]	; (80013c0 <_ZN7Encoder6updateEv+0x1d0>)
 800137e:	6013      	str	r3, [r2, #0]
}
 8001380:	bf00      	nop
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bdb0      	pop	{r4, r5, r7, pc}
 8001388:	9999999a 	.word	0x9999999a
 800138c:	3fa99999 	.word	0x3fa99999
 8001390:	66666666 	.word	0x66666666
 8001394:	3fee6666 	.word	0x3fee6666
 8001398:	ce73a049 	.word	0xce73a049
 800139c:	3f77a3f6 	.word	0x3f77a3f6
 80013a0:	40010000 	.word	0x40010000
 80013a4:	47000000 	.word	0x47000000
 80013a8:	3f912547 	.word	0x3f912547
 80013ac:	40010400 	.word	0x40010400
 80013b0:	20000200 	.word	0x20000200
 80013b4:	20000208 	.word	0x20000208
 80013b8:	2000020c 	.word	0x2000020c
 80013bc:	20000204 	.word	0x20000204
 80013c0:	200001fc 	.word	0x200001fc

080013c4 <_ZN7Encoder5clearEv>:

void Encoder::clear()
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f04f 0200 	mov.w	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <_ZN7Encoder5clearEv+0x3c>)
 80013de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013e2:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80013e4:	4b07      	ldr	r3, [pc, #28]	; (8001404 <_ZN7Encoder5clearEv+0x40>)
 80013e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013ea:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	40010000 	.word	0x40010000
 8001404:	40010400 	.word	0x40010400

08001408 <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	685a      	ldr	r2, [r3, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	601a      	str	r2, [r3, #0]
}
 8001424:	bf00      	nop
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	return distance_;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	ee07 3a90 	vmov	s15, r3
}
 8001440:	eeb0 0a67 	vmov.f32	s0, s15
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <_ZN7Encoder15getDistance10mmEv>:

float Encoder::getDistance10mm()
{
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
	return distance_10mm_;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	ee07 3a90 	vmov	s15, r3
}
 800145e:	eeb0 0a67 	vmov.f32	s0, s15
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	return total_distance_;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	ee07 3a90 	vmov	s15, r3
}
 800147c:	eeb0 0a67 	vmov.f32	s0, s15
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <_ZN7Encoder16setTotalDistanceEf>:

void Encoder::setTotalDistance(float true_distance){
 800148a:	b480      	push	{r7}
 800148c:	b083      	sub	sp, #12
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
 8001492:	ed87 0a00 	vstr	s0, [r7]
	total_distance_ = true_distance;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	619a      	str	r2, [r3, #24]
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <_ZN7Encoder17clearDistance10mmEv>:
	return (total_cnt_l_ + total_cnt_r_) / 2;
}
*/

void Encoder::clearDistance10mm()
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
	//total_cnt_l_ = 0;
	//total_cnt_r_ = 0;
	distance_10mm_ = 0;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f04f 0200 	mov.w	r2, #0
 80014b6:	615a      	str	r2, [r3, #20]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <_ZN7Encoder18clearTotalDistanceEv>:

void Encoder::clearTotalDistance()
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	total_distance_ = 0;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f04f 0200 	mov.w	r2, #0
 80014d2:	619a      	str	r2, [r3, #24]
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:

float Encoder::getCrossLineIgnoreDistance()
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	69db      	ldr	r3, [r3, #28]
 80014ec:	ee07 3a90 	vmov	s15, r3
}
 80014f0:	eeb0 0a67 	vmov.f32	s0, s15
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 80014fe:	b480      	push	{r7}
 8001500:	b083      	sub	sp, #12
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f04f 0200 	mov.w	r2, #0
 800150c:	61da      	str	r2, [r3, #28]
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 800151a:	b580      	push	{r7, lr}
 800151c:	b084      	sub	sp, #16
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 8001528:	6839      	ldr	r1, [r7, #0]
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f000 f978 	bl	8001820 <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 8001530:	f000 f98c 	bl	800184c <fopen_folder_and_file>

	return ret;
 8001534:	7bfb      	ldrb	r3, [r7, #15]
}
 8001536:	4618      	mov	r0, r3
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 800154a:	4804      	ldr	r0, [pc, #16]	; (800155c <user_fclose+0x1c>)
 800154c:	f011 fba6 	bl	8012c9c <f_close>

	return ret;
 8001550:	79fb      	ldrb	r3, [r7, #7]
}
 8001552:	4618      	mov	r0, r3
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	2003d7ac 	.word	0x2003d7ac

08001560 <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 8001560:	b590      	push	{r4, r7, lr}
 8001562:	b087      	sub	sp, #28
 8001564:	af02      	add	r7, sp, #8
 8001566:	4603      	mov	r3, r0
 8001568:	6039      	str	r1, [r7, #0]
 800156a:	80fb      	strh	r3, [r7, #6]
 800156c:	4613      	mov	r3, r2
 800156e:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 8001574:	2300      	movs	r3, #0
 8001576:	81fb      	strh	r3, [r7, #14]
 8001578:	e030      	b.n	80015dc <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 800157a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	4413      	add	r3, r2
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4618      	mov	r0, r3
 8001588:	f7fe fff6 	bl	8000578 <__aeabi_f2d>
 800158c:	4603      	mov	r3, r0
 800158e:	460c      	mov	r4, r1
 8001590:	e9cd 3400 	strd	r3, r4, [sp]
 8001594:	4a17      	ldr	r2, [pc, #92]	; (80015f4 <sd_write_float+0x94>)
 8001596:	2180      	movs	r1, #128	; 0x80
 8001598:	4817      	ldr	r0, [pc, #92]	; (80015f8 <sd_write_float+0x98>)
 800159a:	f013 ff71 	bl	8015480 <sniprintf>

		if(state == ADD_WRITE){
 800159e:	797b      	ldrb	r3, [r7, #5]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d106      	bne.n	80015b2 <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 80015a4:	4b15      	ldr	r3, [pc, #84]	; (80015fc <sd_write_float+0x9c>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	4619      	mov	r1, r3
 80015aa:	4814      	ldr	r0, [pc, #80]	; (80015fc <sd_write_float+0x9c>)
 80015ac:	f011 fbea 	bl	8012d84 <f_lseek>
 80015b0:	e003      	b.n	80015ba <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 80015b2:	2100      	movs	r1, #0
 80015b4:	4811      	ldr	r0, [pc, #68]	; (80015fc <sd_write_float+0x9c>)
 80015b6:	f011 fbe5 	bl	8012d84 <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 80015ba:	480f      	ldr	r0, [pc, #60]	; (80015f8 <sd_write_float+0x98>)
 80015bc:	f7fe fe20 	bl	8000200 <strlen>
 80015c0:	4602      	mov	r2, r0
 80015c2:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <sd_write_float+0xa0>)
 80015c4:	490c      	ldr	r1, [pc, #48]	; (80015f8 <sd_write_float+0x98>)
 80015c6:	480d      	ldr	r0, [pc, #52]	; (80015fc <sd_write_float+0x9c>)
 80015c8:	f011 f953 	bl	8012872 <f_write>

		bufclear();	//書き込み用のバッファをクリア
 80015cc:	f000 f958 	bl	8001880 <bufclear>
	for(short i = 0 ; i < size; i++){
 80015d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	3301      	adds	r3, #1
 80015d8:	b29b      	uxth	r3, r3
 80015da:	81fb      	strh	r3, [r7, #14]
 80015dc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80015e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	dbc8      	blt.n	800157a <sd_write_float+0x1a>
	}
	return ret;
 80015e8:	7b7b      	ldrb	r3, [r7, #13]
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3714      	adds	r7, #20
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd90      	pop	{r4, r7, pc}
 80015f2:	bf00      	nop
 80015f4:	08018b88 	.word	0x08018b88
 80015f8:	2003d71c 	.word	0x2003d71c
 80015fc:	2003d7ac 	.word	0x2003d7ac
 8001600:	2003d79c 	.word	0x2003d79c

08001604 <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 8001604:	b590      	push	{r4, r7, lr}
 8001606:	b089      	sub	sp, #36	; 0x24
 8001608:	af02      	add	r7, sp, #8
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	603b      	str	r3, [r7, #0]
 8001610:	4613      	mov	r3, r2
 8001612:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001618:	68b9      	ldr	r1, [r7, #8]
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	f000 f900 	bl	8001820 <create_path>

	if(state == OVER_WRITE){
 8001620:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001624:	2b00      	cmp	r3, #0
 8001626:	d108      	bne.n	800163a <sd_write_array_float+0x36>
		f_chdir(dirpath);
 8001628:	4822      	ldr	r0, [pc, #136]	; (80016b4 <sd_write_array_float+0xb0>)
 800162a:	f011 fb61 	bl	8012cf0 <f_chdir>
		f_unlink(filepath);	//	一回消す
 800162e:	4822      	ldr	r0, [pc, #136]	; (80016b8 <sd_write_array_float+0xb4>)
 8001630:	f011 fdcc 	bl	80131cc <f_unlink>
		f_chdir("..");
 8001634:	4821      	ldr	r0, [pc, #132]	; (80016bc <sd_write_array_float+0xb8>)
 8001636:	f011 fb5b 	bl	8012cf0 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 800163a:	f000 f907 	bl	800184c <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 800163e:	2300      	movs	r3, #0
 8001640:	82fb      	strh	r3, [r7, #22]
 8001642:	e028      	b.n	8001696 <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 8001644:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	683a      	ldr	r2, [r7, #0]
 800164c:	4413      	add	r3, r2
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f7fe ff91 	bl	8000578 <__aeabi_f2d>
 8001656:	4603      	mov	r3, r0
 8001658:	460c      	mov	r4, r1
 800165a:	e9cd 3400 	strd	r3, r4, [sp]
 800165e:	4a18      	ldr	r2, [pc, #96]	; (80016c0 <sd_write_array_float+0xbc>)
 8001660:	2180      	movs	r1, #128	; 0x80
 8001662:	4818      	ldr	r0, [pc, #96]	; (80016c4 <sd_write_array_float+0xc0>)
 8001664:	f013 ff0c 	bl	8015480 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 8001668:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <sd_write_array_float+0xc4>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	4619      	mov	r1, r3
 800166e:	4816      	ldr	r0, [pc, #88]	; (80016c8 <sd_write_array_float+0xc4>)
 8001670:	f011 fb88 	bl	8012d84 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 8001674:	4813      	ldr	r0, [pc, #76]	; (80016c4 <sd_write_array_float+0xc0>)
 8001676:	f7fe fdc3 	bl	8000200 <strlen>
 800167a:	4602      	mov	r2, r0
 800167c:	4b13      	ldr	r3, [pc, #76]	; (80016cc <sd_write_array_float+0xc8>)
 800167e:	4911      	ldr	r1, [pc, #68]	; (80016c4 <sd_write_array_float+0xc0>)
 8001680:	4811      	ldr	r0, [pc, #68]	; (80016c8 <sd_write_array_float+0xc4>)
 8001682:	f011 f8f6 	bl	8012872 <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 8001686:	f000 f8fb 	bl	8001880 <bufclear>
	for(short i = 0 ; i < size; i++){
 800168a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800168e:	b29b      	uxth	r3, r3
 8001690:	3301      	adds	r3, #1
 8001692:	b29b      	uxth	r3, r3
 8001694:	82fb      	strh	r3, [r7, #22]
 8001696:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800169a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800169e:	429a      	cmp	r2, r3
 80016a0:	dbd0      	blt.n	8001644 <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 80016a2:	4809      	ldr	r0, [pc, #36]	; (80016c8 <sd_write_array_float+0xc4>)
 80016a4:	f011 fafa 	bl	8012c9c <f_close>

	return ret;
 80016a8:	7d7b      	ldrb	r3, [r7, #21]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	371c      	adds	r7, #28
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd90      	pop	{r4, r7, pc}
 80016b2:	bf00      	nop
 80016b4:	2003d61c 	.word	0x2003d61c
 80016b8:	2003c4dc 	.word	0x2003c4dc
 80016bc:	08018ba4 	.word	0x08018ba4
 80016c0:	08018b88 	.word	0x08018b88
 80016c4:	2003d71c 	.word	0x2003d71c
 80016c8:	2003d7ac 	.word	0x2003d7ac
 80016cc:	2003d79c 	.word	0x2003d79c

080016d0 <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	603b      	str	r3, [r7, #0]
 80016dc:	4613      	mov	r3, r2
 80016de:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80016e8:	68b9      	ldr	r1, [r7, #8]
 80016ea:	68f8      	ldr	r0, [r7, #12]
 80016ec:	f000 f898 	bl	8001820 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80016f0:	f000 f8ac 	bl	800184c <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80016f4:	e019      	b.n	800172a <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 80016f6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	4413      	add	r3, r2
 8001700:	461a      	mov	r2, r3
 8001702:	4913      	ldr	r1, [pc, #76]	; (8001750 <sd_read_array_float+0x80>)
 8001704:	4813      	ldr	r0, [pc, #76]	; (8001754 <sd_read_array_float+0x84>)
 8001706:	f013 ff0f 	bl	8015528 <siscanf>
		i++;
 800170a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800170e:	b29b      	uxth	r3, r3
 8001710:	3301      	adds	r3, #1
 8001712:	b29b      	uxth	r3, r3
 8001714:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001716:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800171a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800171e:	429a      	cmp	r2, r3
 8001720:	db03      	blt.n	800172a <sd_read_array_float+0x5a>
 8001722:	88fb      	ldrh	r3, [r7, #6]
 8001724:	3b01      	subs	r3, #1
 8001726:	b29b      	uxth	r3, r3
 8001728:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800172a:	4a0b      	ldr	r2, [pc, #44]	; (8001758 <sd_read_array_float+0x88>)
 800172c:	2180      	movs	r1, #128	; 0x80
 800172e:	4809      	ldr	r0, [pc, #36]	; (8001754 <sd_read_array_float+0x84>)
 8001730:	f011 ff2a 	bl	8013588 <f_gets>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1dd      	bne.n	80016f6 <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 800173a:	f000 f8a1 	bl	8001880 <bufclear>

	f_close(&fil);	//ファイル閉じる
 800173e:	4806      	ldr	r0, [pc, #24]	; (8001758 <sd_read_array_float+0x88>)
 8001740:	f011 faac 	bl	8012c9c <f_close>

	return ret;
 8001744:	7d7b      	ldrb	r3, [r7, #21]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	08018b94 	.word	0x08018b94
 8001754:	2003d71c 	.word	0x2003d71c
 8001758:	2003d7ac 	.word	0x2003d7ac

0800175c <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	603b      	str	r3, [r7, #0]
 8001768:	4613      	mov	r3, r2
 800176a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	757b      	strb	r3, [r7, #21]
	short i = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001774:	68b9      	ldr	r1, [r7, #8]
 8001776:	68f8      	ldr	r0, [r7, #12]
 8001778:	f000 f852 	bl	8001820 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 800177c:	f000 f866 	bl	800184c <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001780:	e019      	b.n	80017b6 <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 8001782:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	4413      	add	r3, r2
 800178c:	461a      	mov	r2, r3
 800178e:	4913      	ldr	r1, [pc, #76]	; (80017dc <sd_read_array_double+0x80>)
 8001790:	4813      	ldr	r0, [pc, #76]	; (80017e0 <sd_read_array_double+0x84>)
 8001792:	f013 fec9 	bl	8015528 <siscanf>
		i++;
 8001796:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800179a:	b29b      	uxth	r3, r3
 800179c:	3301      	adds	r3, #1
 800179e:	b29b      	uxth	r3, r3
 80017a0:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 80017a2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80017a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	db03      	blt.n	80017b6 <sd_read_array_double+0x5a>
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	3b01      	subs	r3, #1
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80017b6:	4a0b      	ldr	r2, [pc, #44]	; (80017e4 <sd_read_array_double+0x88>)
 80017b8:	2180      	movs	r1, #128	; 0x80
 80017ba:	4809      	ldr	r0, [pc, #36]	; (80017e0 <sd_read_array_double+0x84>)
 80017bc:	f011 fee4 	bl	8013588 <f_gets>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1dd      	bne.n	8001782 <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80017c6:	f000 f85b 	bl	8001880 <bufclear>

	f_close(&fil);	//ファイル閉じる
 80017ca:	4806      	ldr	r0, [pc, #24]	; (80017e4 <sd_read_array_double+0x88>)
 80017cc:	f011 fa66 	bl	8012c9c <f_close>

	return ret;
 80017d0:	7d7b      	ldrb	r3, [r7, #21]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3718      	adds	r7, #24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	08018ba0 	.word	0x08018ba0
 80017e0:	2003d71c 	.word	0x2003d71c
 80017e4:	2003d7ac 	.word	0x2003d7ac

080017e8 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 80017f2:	2201      	movs	r2, #1
 80017f4:	4908      	ldr	r1, [pc, #32]	; (8001818 <sd_mount+0x30>)
 80017f6:	4809      	ldr	r0, [pc, #36]	; (800181c <sd_mount+0x34>)
 80017f8:	f010 fcc8 	bl	801218c <f_mount>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d102      	bne.n	8001808 <sd_mount+0x20>
 8001802:	2301      	movs	r3, #1
 8001804:	71fb      	strb	r3, [r7, #7]
 8001806:	e001      	b.n	800180c <sd_mount+0x24>
	else ret = 0;
 8001808:	2300      	movs	r3, #0
 800180a:	71fb      	strb	r3, [r7, #7]

	return ret;
 800180c:	79fb      	ldrb	r3, [r7, #7]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	08018bb0 	.word	0x08018bb0
 800181c:	2003c5dc 	.word	0x2003c5dc

08001820 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	4805      	ldr	r0, [pc, #20]	; (8001844 <create_path+0x24>)
 800182e:	f013 fea7 	bl	8015580 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 8001832:	6839      	ldr	r1, [r7, #0]
 8001834:	4804      	ldr	r0, [pc, #16]	; (8001848 <create_path+0x28>)
 8001836:	f013 fea3 	bl	8015580 <strcpy>

}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	2003d61c 	.word	0x2003d61c
 8001848:	2003c4dc 	.word	0x2003c4dc

0800184c <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001850:	4807      	ldr	r0, [pc, #28]	; (8001870 <fopen_folder_and_file+0x24>)
 8001852:	f011 fd7d 	bl	8013350 <f_mkdir>

	f_chdir(dirpath);
 8001856:	4806      	ldr	r0, [pc, #24]	; (8001870 <fopen_folder_and_file+0x24>)
 8001858:	f011 fa4a 	bl	8012cf0 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800185c:	2213      	movs	r2, #19
 800185e:	4905      	ldr	r1, [pc, #20]	; (8001874 <fopen_folder_and_file+0x28>)
 8001860:	4805      	ldr	r0, [pc, #20]	; (8001878 <fopen_folder_and_file+0x2c>)
 8001862:	f010 fcd9 	bl	8012218 <f_open>

	f_chdir("..");
 8001866:	4805      	ldr	r0, [pc, #20]	; (800187c <fopen_folder_and_file+0x30>)
 8001868:	f011 fa42 	bl	8012cf0 <f_chdir>


}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}
 8001870:	2003d61c 	.word	0x2003d61c
 8001874:	2003c4dc 	.word	0x2003c4dc
 8001878:	2003d7ac 	.word	0x2003d7ac
 800187c:	08018ba4 	.word	0x08018ba4

08001880 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 8001886:	2300      	movs	r3, #0
 8001888:	607b      	str	r3, [r7, #4]
 800188a:	e007      	b.n	800189c <bufclear+0x1c>
		buffer[i] = '\0';
 800188c:	4a08      	ldr	r2, [pc, #32]	; (80018b0 <bufclear+0x30>)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	2200      	movs	r2, #0
 8001894:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	3301      	adds	r3, #1
 800189a:	607b      	str	r3, [r7, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b7f      	cmp	r3, #127	; 0x7f
 80018a0:	ddf4      	ble.n	800188c <bufclear+0xc>
	}
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	2003d71c 	.word	0x2003d71c

080018b4 <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 80018c8:	2200      	movs	r2, #0
 80018ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018ce:	480e      	ldr	r0, [pc, #56]	; (8001908 <read_byte+0x54>)
 80018d0:	f008 fca0 	bl	800a214 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 80018d4:	f107 010f 	add.w	r1, r7, #15
 80018d8:	2364      	movs	r3, #100	; 0x64
 80018da:	2201      	movs	r2, #1
 80018dc:	480b      	ldr	r0, [pc, #44]	; (800190c <read_byte+0x58>)
 80018de:	f00b fe49 	bl	800d574 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 80018e2:	f107 010e 	add.w	r1, r7, #14
 80018e6:	2364      	movs	r3, #100	; 0x64
 80018e8:	2201      	movs	r2, #1
 80018ea:	4808      	ldr	r0, [pc, #32]	; (800190c <read_byte+0x58>)
 80018ec:	f00b ff76 	bl	800d7dc <HAL_SPI_Receive>
	CS_SET;
 80018f0:	2201      	movs	r2, #1
 80018f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018f6:	4804      	ldr	r0, [pc, #16]	; (8001908 <read_byte+0x54>)
 80018f8:	f008 fc8c 	bl	800a214 <HAL_GPIO_WritePin>

	return val;
 80018fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40020400 	.word	0x40020400
 800190c:	2003e848 	.word	0x2003e848

08001910 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	460a      	mov	r2, r1
 800191a:	71fb      	strb	r3, [r7, #7]
 800191c:	4613      	mov	r3, r2
 800191e:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001926:	b2db      	uxtb	r3, r3
 8001928:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800192a:	2200      	movs	r2, #0
 800192c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001930:	480c      	ldr	r0, [pc, #48]	; (8001964 <write_byte+0x54>)
 8001932:	f008 fc6f 	bl	800a214 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001936:	f107 010f 	add.w	r1, r7, #15
 800193a:	2364      	movs	r3, #100	; 0x64
 800193c:	2201      	movs	r2, #1
 800193e:	480a      	ldr	r0, [pc, #40]	; (8001968 <write_byte+0x58>)
 8001940:	f00b fe18 	bl	800d574 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001944:	1db9      	adds	r1, r7, #6
 8001946:	2364      	movs	r3, #100	; 0x64
 8001948:	2201      	movs	r2, #1
 800194a:	4807      	ldr	r0, [pc, #28]	; (8001968 <write_byte+0x58>)
 800194c:	f00b fe12 	bl	800d574 <HAL_SPI_Transmit>
	CS_SET;
 8001950:	2201      	movs	r2, #1
 8001952:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001956:	4803      	ldr	r0, [pc, #12]	; (8001964 <write_byte+0x54>)
 8001958:	f008 fc5c 	bl	800a214 <HAL_GPIO_WritePin>
}
 800195c:	bf00      	nop
 800195e:	3710      	adds	r7, #16
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40020400 	.word	0x40020400
 8001968:	2003e848 	.word	0x2003e848

0800196c <IMU_init>:

uint16_t IMU_init() {
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001972:	2300      	movs	r3, #0
 8001974:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001976:	2000      	movs	r0, #0
 8001978:	f7ff ff9c 	bl	80018b4 <read_byte>
 800197c:	4603      	mov	r3, r0
 800197e:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001980:	797b      	ldrb	r3, [r7, #5]
 8001982:	2be0      	cmp	r3, #224	; 0xe0
 8001984:	d119      	bne.n	80019ba <IMU_init+0x4e>
		ret = 1;
 8001986:	2301      	movs	r3, #1
 8001988:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 800198a:	2101      	movs	r1, #1
 800198c:	2006      	movs	r0, #6
 800198e:	f7ff ffbf 	bl	8001910 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001992:	2110      	movs	r1, #16
 8001994:	2003      	movs	r0, #3
 8001996:	f7ff ffbb 	bl	8001910 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 800199a:	2120      	movs	r1, #32
 800199c:	207f      	movs	r0, #127	; 0x7f
 800199e:	f7ff ffb7 	bl	8001910 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 80019a2:	2106      	movs	r1, #6
 80019a4:	2001      	movs	r0, #1
 80019a6:	f7ff ffb3 	bl	8001910 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 80019aa:	2106      	movs	r1, #6
 80019ac:	2014      	movs	r0, #20
 80019ae:	f7ff ffaf 	bl	8001910 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 80019b2:	2100      	movs	r1, #0
 80019b4:	207f      	movs	r0, #127	; 0x7f
 80019b6:	f7ff ffab 	bl	8001910 <write_byte>
	}
	return ret;
 80019ba:	88fb      	ldrh	r3, [r7, #6]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <read_gyro_data>:

void read_gyro_data() {
 80019c4:	b598      	push	{r3, r4, r7, lr}
 80019c6:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 80019c8:	2033      	movs	r0, #51	; 0x33
 80019ca:	f7ff ff73 	bl	80018b4 <read_byte>
 80019ce:	4603      	mov	r3, r0
 80019d0:	021b      	lsls	r3, r3, #8
 80019d2:	b21c      	sxth	r4, r3
 80019d4:	2034      	movs	r0, #52	; 0x34
 80019d6:	f7ff ff6d 	bl	80018b4 <read_byte>
 80019da:	4603      	mov	r3, r0
 80019dc:	b21b      	sxth	r3, r3
 80019de:	4323      	orrs	r3, r4
 80019e0:	b21a      	sxth	r2, r3
 80019e2:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <read_gyro_data+0x64>)
 80019e4:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 80019e6:	2035      	movs	r0, #53	; 0x35
 80019e8:	f7ff ff64 	bl	80018b4 <read_byte>
 80019ec:	4603      	mov	r3, r0
 80019ee:	021b      	lsls	r3, r3, #8
 80019f0:	b21c      	sxth	r4, r3
 80019f2:	2036      	movs	r0, #54	; 0x36
 80019f4:	f7ff ff5e 	bl	80018b4 <read_byte>
 80019f8:	4603      	mov	r3, r0
 80019fa:	b21b      	sxth	r3, r3
 80019fc:	4323      	orrs	r3, r4
 80019fe:	b21a      	sxth	r2, r3
 8001a00:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <read_gyro_data+0x68>)
 8001a02:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001a04:	2037      	movs	r0, #55	; 0x37
 8001a06:	f7ff ff55 	bl	80018b4 <read_byte>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	021b      	lsls	r3, r3, #8
 8001a0e:	b21c      	sxth	r4, r3
 8001a10:	2038      	movs	r0, #56	; 0x38
 8001a12:	f7ff ff4f 	bl	80018b4 <read_byte>
 8001a16:	4603      	mov	r3, r0
 8001a18:	b21b      	sxth	r3, r3
 8001a1a:	4323      	orrs	r3, r4
 8001a1c:	b21a      	sxth	r2, r3
 8001a1e:	4b04      	ldr	r3, [pc, #16]	; (8001a30 <read_gyro_data+0x6c>)
 8001a20:	801a      	strh	r2, [r3, #0]
}
 8001a22:	bf00      	nop
 8001a24:	bd98      	pop	{r3, r4, r7, pc}
 8001a26:	bf00      	nop
 8001a28:	2003e7e4 	.word	0x2003e7e4
 8001a2c:	2003e7e2 	.word	0x2003e7e2
 8001a30:	2003e7dc 	.word	0x2003e7dc

08001a34 <_ZN3IMUC1Ev>:

#define PI 3.1415926535

//int16_t mon_zg_;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	801a      	strh	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	805a      	strh	r2, [r3, #2]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	809a      	strh	r2, [r3, #4]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	80da      	strh	r2, [r3, #6]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	811a      	strh	r2, [r3, #8]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	815a      	strh	r2, [r3, #10]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f04f 0200 	mov.w	r2, #0
 8001a66:	60da      	str	r2, [r3, #12]
{

}
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
	...

08001a78 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001a80:	f7ff ff74 	bl	800196c <IMU_init>
 8001a84:	4603      	mov	r3, r0
 8001a86:	81fb      	strh	r3, [r7, #14]
	//printf("who i am: %d\n", who_i_am);

	lcd_clear();
 8001a88:	f7ff fb0a 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	2000      	movs	r0, #0
 8001a90:	f7ff fb16 	bl	80010c0 <lcd_locate>
	lcd_printf("IMUstatus");
 8001a94:	4809      	ldr	r0, [pc, #36]	; (8001abc <_ZN3IMU4initEv+0x44>)
 8001a96:	f7ff fb3d 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	f7ff fb0f 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001aa2:	89fb      	ldrh	r3, [r7, #14]
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4806      	ldr	r0, [pc, #24]	; (8001ac0 <_ZN3IMU4initEv+0x48>)
 8001aa8:	f7ff fb34 	bl	8001114 <lcd_printf>

	HAL_Delay(500);
 8001aac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ab0:	f007 f91a 	bl	8008ce8 <HAL_Delay>

}
 8001ab4:	bf00      	nop
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	08018bb4 	.word	0x08018bb4
 8001ac0:	08018bc0 	.word	0x08018bc0
 8001ac4:	00000000 	.word	0x00000000

08001ac8 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001ac8:	b5b0      	push	{r4, r5, r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001ad0:	f7ff ff78 	bl	80019c4 <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001ad4:	4b24      	ldr	r3, [pc, #144]	; (8001b68 <_ZN3IMU12updateValuesEv+0xa0>)
 8001ad6:	881b      	ldrh	r3, [r3, #0]
 8001ad8:	b21a      	sxth	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001ade:	4b23      	ldr	r3, [pc, #140]	; (8001b6c <_ZN3IMU12updateValuesEv+0xa4>)
 8001ae0:	881b      	ldrh	r3, [r3, #0]
 8001ae2:	b21a      	sxth	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001ae8:	4b21      	ldr	r3, [pc, #132]	; (8001b70 <_ZN3IMU12updateValuesEv+0xa8>)
 8001aea:	881b      	ldrh	r3, [r3, #0]
 8001aec:	b21a      	sxth	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7fe fd2b 	bl	8000554 <__aeabi_i2d>
 8001afe:	a316      	add	r3, pc, #88	; (adr r3, 8001b58 <_ZN3IMU12updateValuesEv+0x90>)
 8001b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b04:	f7fe fd90 	bl	8000628 <__aeabi_dmul>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	460c      	mov	r4, r1
 8001b0c:	4625      	mov	r5, r4
 8001b0e:	461c      	mov	r4, r3
 8001b10:	4b18      	ldr	r3, [pc, #96]	; (8001b74 <_ZN3IMU12updateValuesEv+0xac>)
 8001b12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7fe fd1c 	bl	8000554 <__aeabi_i2d>
 8001b1c:	a310      	add	r3, pc, #64	; (adr r3, 8001b60 <_ZN3IMU12updateValuesEv+0x98>)
 8001b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b22:	f7fe fd81 	bl	8000628 <__aeabi_dmul>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	4620      	mov	r0, r4
 8001b2c:	4629      	mov	r1, r5
 8001b2e:	f7fe fbc5 	bl	80002bc <__adddf3>
 8001b32:	4603      	mov	r3, r0
 8001b34:	460c      	mov	r4, r1
 8001b36:	4618      	mov	r0, r3
 8001b38:	4621      	mov	r1, r4
 8001b3a:	f7ff f825 	bl	8000b88 <__aeabi_d2iz>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	b21a      	sxth	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001b4c:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <_ZN3IMU12updateValuesEv+0xac>)
 8001b4e:	801a      	strh	r2, [r3, #0]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001b50:	bf00      	nop
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bdb0      	pop	{r4, r5, r7, pc}
 8001b58:	eb851eb8 	.word	0xeb851eb8
 8001b5c:	3f9eb851 	.word	0x3f9eb851
 8001b60:	70a3d70a 	.word	0x70a3d70a
 8001b64:	3fef0a3d 	.word	0x3fef0a3d
 8001b68:	2003e7e4 	.word	0x2003e7e4
 8001b6c:	2003e7e2 	.word	0x2003e7e2
 8001b70:	2003e7dc 	.word	0x2003e7dc
 8001b74:	20000210 	.word	0x20000210

08001b78 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001b78:	b5b0      	push	{r4, r5, r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b86:	ee07 3a90 	vmov	s15, r3
 8001b8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b98:	edc7 7a03 	vstr	s15, [r7, #12]
	return -(corrected_zg / 16.4) * PI / 180;
 8001b9c:	68f8      	ldr	r0, [r7, #12]
 8001b9e:	f7fe fceb 	bl	8000578 <__aeabi_f2d>
 8001ba2:	a316      	add	r3, pc, #88	; (adr r3, 8001bfc <_ZN3IMU8getOmegaEv+0x84>)
 8001ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba8:	f7fe fe68 	bl	800087c <__aeabi_ddiv>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4614      	mov	r4, r2
 8001bb2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001bb6:	a313      	add	r3, pc, #76	; (adr r3, 8001c04 <_ZN3IMU8getOmegaEv+0x8c>)
 8001bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbc:	4620      	mov	r0, r4
 8001bbe:	4629      	mov	r1, r5
 8001bc0:	f7fe fd32 	bl	8000628 <__aeabi_dmul>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	460c      	mov	r4, r1
 8001bc8:	4618      	mov	r0, r3
 8001bca:	4621      	mov	r1, r4
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <_ZN3IMU8getOmegaEv+0x80>)
 8001bd2:	f7fe fe53 	bl	800087c <__aeabi_ddiv>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	460c      	mov	r4, r1
 8001bda:	4618      	mov	r0, r3
 8001bdc:	4621      	mov	r1, r4
 8001bde:	f7ff f81b 	bl	8000c18 <__aeabi_d2f>
 8001be2:	4603      	mov	r3, r0
 8001be4:	ee07 3a90 	vmov	s15, r3
}
 8001be8:	eeb0 0a67 	vmov.f32	s0, s15
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bdb0      	pop	{r4, r5, r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	f3af 8000 	nop.w
 8001bf8:	40668000 	.word	0x40668000
 8001bfc:	66666666 	.word	0x66666666
 8001c00:	40306666 	.word	0x40306666
 8001c04:	54411744 	.word	0x54411744
 8001c08:	400921fb 	.word	0x400921fb

08001c0c <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c0e:	b08b      	sub	sp, #44	; 0x2c
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001c14:	466b      	mov	r3, sp
 8001c16:	461e      	mov	r6, r3
	HAL_Delay(1000);
 8001c18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c1c:	f007 f864 	bl	8008ce8 <HAL_Delay>
	lcd_clear();
 8001c20:	f7ff fa3e 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001c24:	2100      	movs	r1, #0
 8001c26:	2000      	movs	r0, #0
 8001c28:	f7ff fa4a 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001c2c:	4840      	ldr	r0, [pc, #256]	; (8001d30 <_ZN3IMU11calibrationEv+0x124>)
 8001c2e:	f7ff fa71 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001c32:	2101      	movs	r1, #1
 8001c34:	2000      	movs	r0, #0
 8001c36:	f7ff fa43 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001c3a:	483e      	ldr	r0, [pc, #248]	; (8001d34 <_ZN3IMU11calibrationEv+0x128>)
 8001c3c:	f7ff fa6a 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001c40:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001c44:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001c46:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c4a:	1e5d      	subs	r5, r3, #1
 8001c4c:	61bd      	str	r5, [r7, #24]
 8001c4e:	462b      	mov	r3, r5
 8001c50:	3301      	adds	r3, #1
 8001c52:	4619      	mov	r1, r3
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	f04f 0300 	mov.w	r3, #0
 8001c5c:	f04f 0400 	mov.w	r4, #0
 8001c60:	0154      	lsls	r4, r2, #5
 8001c62:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c66:	014b      	lsls	r3, r1, #5
 8001c68:	462b      	mov	r3, r5
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f04f 0200 	mov.w	r2, #0
 8001c72:	f04f 0300 	mov.w	r3, #0
 8001c76:	f04f 0400 	mov.w	r4, #0
 8001c7a:	0154      	lsls	r4, r2, #5
 8001c7c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c80:	014b      	lsls	r3, r1, #5
 8001c82:	462b      	mov	r3, r5
 8001c84:	3301      	adds	r3, #1
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	3303      	adds	r3, #3
 8001c8a:	3307      	adds	r3, #7
 8001c8c:	08db      	lsrs	r3, r3, #3
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	ebad 0d03 	sub.w	sp, sp, r3
 8001c94:	466b      	mov	r3, sp
 8001c96:	3303      	adds	r3, #3
 8001c98:	089b      	lsrs	r3, r3, #2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	83fb      	strh	r3, [r7, #30]
 8001ca2:	8bfa      	ldrh	r2, [r7, #30]
 8001ca4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	da13      	bge.n	8001cd4 <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001cb2:	8bfb      	ldrh	r3, [r7, #30]
 8001cb4:	ee07 2a90 	vmov	s15, r2
 8001cb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cbc:	697a      	ldr	r2, [r7, #20]
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4413      	add	r3, r2
 8001cc2:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 8001cc6:	2002      	movs	r0, #2
 8001cc8:	f007 f80e 	bl	8008ce8 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001ccc:	8bfb      	ldrh	r3, [r7, #30]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	83fb      	strh	r3, [r7, #30]
 8001cd2:	e7e6      	b.n	8001ca2 <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8001cd8:	697a      	ldr	r2, [r7, #20]
 8001cda:	462b      	mov	r3, r5
 8001cdc:	3301      	adds	r3, #1
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4413      	add	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
 8001ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d00e      	beq.n	8001d0a <_ZN3IMU11calibrationEv+0xfe>
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	edd3 7a00 	vldr	s15, [r3]
 8001cf6:	ed97 7a08 	vldr	s14, [r7, #32]
 8001cfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cfe:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	3304      	adds	r3, #4
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
 8001d08:	e7ec      	b.n	8001ce4 <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8001d0a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001d0e:	ee07 3a90 	vmov	s15, r3
 8001d12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d16:	edd7 6a08 	vldr	s13, [r7, #32]
 8001d1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	edc3 7a03 	vstr	s15, [r3, #12]
 8001d24:	46b5      	mov	sp, r6
}
 8001d26:	bf00      	nop
 8001d28:	372c      	adds	r7, #44	; 0x2c
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	08018bc4 	.word	0x08018bc4
 8001d34:	08018bd0 	.word	0x08018bd0

08001d38 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af02      	add	r7, sp, #8
 8001d3e:	4603      	mov	r3, r0
 8001d40:	460a      	mov	r2, r1
 8001d42:	71fb      	strb	r3, [r7, #7]
 8001d44:	4613      	mov	r3, r2
 8001d46:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001d48:	79bb      	ldrb	r3, [r7, #6]
 8001d4a:	b299      	uxth	r1, r3
 8001d4c:	1dfa      	adds	r2, r7, #7
 8001d4e:	2364      	movs	r3, #100	; 0x64
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	2301      	movs	r3, #1
 8001d54:	480c      	ldr	r0, [pc, #48]	; (8001d88 <INA260_read+0x50>)
 8001d56:	f008 fbaf 	bl	800a4b8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001d5a:	79bb      	ldrb	r3, [r7, #6]
 8001d5c:	b299      	uxth	r1, r3
 8001d5e:	f107 020c 	add.w	r2, r7, #12
 8001d62:	2364      	movs	r3, #100	; 0x64
 8001d64:	9300      	str	r3, [sp, #0]
 8001d66:	2302      	movs	r3, #2
 8001d68:	4807      	ldr	r0, [pc, #28]	; (8001d88 <INA260_read+0x50>)
 8001d6a:	f008 fca3 	bl	800a6b4 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001d6e:	7b3b      	ldrb	r3, [r7, #12]
 8001d70:	021b      	lsls	r3, r3, #8
 8001d72:	b21a      	sxth	r2, r3
 8001d74:	7b7b      	ldrb	r3, [r7, #13]
 8001d76:	b21b      	sxth	r3, r3
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	b21b      	sxth	r3, r3
 8001d7c:	81fb      	strh	r3, [r7, #14]
	return val;
 8001d7e:	89fb      	ldrh	r3, [r7, #14]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	2003e9fc 	.word	0x2003e9fc

08001d8c <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001d8c:	b590      	push	{r4, r7, lr}
 8001d8e:	b087      	sub	sp, #28
 8001d90:	af02      	add	r7, sp, #8
 8001d92:	4604      	mov	r4, r0
 8001d94:	4608      	mov	r0, r1
 8001d96:	4611      	mov	r1, r2
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4623      	mov	r3, r4
 8001d9c:	71fb      	strb	r3, [r7, #7]
 8001d9e:	4603      	mov	r3, r0
 8001da0:	71bb      	strb	r3, [r7, #6]
 8001da2:	460b      	mov	r3, r1
 8001da4:	717b      	strb	r3, [r7, #5]
 8001da6:	4613      	mov	r3, r2
 8001da8:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	733b      	strb	r3, [r7, #12]
 8001dae:	79bb      	ldrb	r3, [r7, #6]
 8001db0:	737b      	strb	r3, [r7, #13]
 8001db2:	797b      	ldrb	r3, [r7, #5]
 8001db4:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8001db6:	793b      	ldrb	r3, [r7, #4]
 8001db8:	b299      	uxth	r1, r3
 8001dba:	f107 020c 	add.w	r2, r7, #12
 8001dbe:	2364      	movs	r3, #100	; 0x64
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	4803      	ldr	r0, [pc, #12]	; (8001dd4 <INA260_write+0x48>)
 8001dc6:	f008 fb77 	bl	800a4b8 <HAL_I2C_Master_Transmit>
}
 8001dca:	bf00      	nop
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd90      	pop	{r4, r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	2003e9fc 	.word	0x2003e9fc

08001dd8 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	71fb      	strb	r3, [r7, #7]
 8001de2:	460b      	mov	r3, r1
 8001de4:	71bb      	strb	r3, [r7, #6]
 8001de6:	4613      	mov	r3, r2
 8001de8:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8001dea:	797b      	ldrb	r3, [r7, #5]
 8001dec:	79ba      	ldrb	r2, [r7, #6]
 8001dee:	79f9      	ldrb	r1, [r7, #7]
 8001df0:	2000      	movs	r0, #0
 8001df2:	f7ff ffcb 	bl	8001d8c <INA260_write>
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	4603      	mov	r3, r0
 8001e06:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	21df      	movs	r1, #223	; 0xdf
 8001e0e:	2000      	movs	r0, #0
 8001e10:	f7ff ffe2 	bl	8001dd8 <setConfig>
}
 8001e14:	bf00      	nop
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
{

}
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4618      	mov	r0, r3
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
	...

08001e34 <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8001e40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e44:	482a      	ldr	r0, [pc, #168]	; (8001ef0 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e46:	f008 f9cd 	bl	800a1e4 <HAL_GPIO_ReadPin>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	bf0c      	ite	eq
 8001e50:	2301      	moveq	r3, #1
 8001e52:	2300      	movne	r3, #0
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <_ZN8JoyStick8getValueEv+0x2e>
 8001e5a:	89fb      	ldrh	r3, [r7, #14]
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 8001e62:	2101      	movs	r1, #1
 8001e64:	4823      	ldr	r0, [pc, #140]	; (8001ef4 <_ZN8JoyStick8getValueEv+0xc0>)
 8001e66:	f008 f9bd 	bl	800a1e4 <HAL_GPIO_ReadPin>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	bf0c      	ite	eq
 8001e70:	2301      	moveq	r3, #1
 8001e72:	2300      	movne	r3, #0
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <_ZN8JoyStick8getValueEv+0x4e>
 8001e7a:	89fb      	ldrh	r3, [r7, #14]
 8001e7c:	f043 0302 	orr.w	r3, r3, #2
 8001e80:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 8001e82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e86:	481a      	ldr	r0, [pc, #104]	; (8001ef0 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e88:	f008 f9ac 	bl	800a1e4 <HAL_GPIO_ReadPin>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	bf0c      	ite	eq
 8001e92:	2301      	moveq	r3, #1
 8001e94:	2300      	movne	r3, #0
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <_ZN8JoyStick8getValueEv+0x70>
 8001e9c:	89fb      	ldrh	r3, [r7, #14]
 8001e9e:	f043 0304 	orr.w	r3, r3, #4
 8001ea2:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 8001ea4:	2104      	movs	r1, #4
 8001ea6:	4814      	ldr	r0, [pc, #80]	; (8001ef8 <_ZN8JoyStick8getValueEv+0xc4>)
 8001ea8:	f008 f99c 	bl	800a1e4 <HAL_GPIO_ReadPin>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	bf0c      	ite	eq
 8001eb2:	2301      	moveq	r3, #1
 8001eb4:	2300      	movne	r3, #0
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d003      	beq.n	8001ec4 <_ZN8JoyStick8getValueEv+0x90>
 8001ebc:	89fb      	ldrh	r3, [r7, #14]
 8001ebe:	f043 0308 	orr.w	r3, r3, #8
 8001ec2:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 8001ec4:	2180      	movs	r1, #128	; 0x80
 8001ec6:	480a      	ldr	r0, [pc, #40]	; (8001ef0 <_ZN8JoyStick8getValueEv+0xbc>)
 8001ec8:	f008 f98c 	bl	800a1e4 <HAL_GPIO_ReadPin>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	bf0c      	ite	eq
 8001ed2:	2301      	moveq	r3, #1
 8001ed4:	2300      	movne	r3, #0
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d003      	beq.n	8001ee4 <_ZN8JoyStick8getValueEv+0xb0>
 8001edc:	89fb      	ldrh	r3, [r7, #14]
 8001ede:	f043 0310 	orr.w	r3, r3, #16
 8001ee2:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8001ee4:	89fb      	ldrh	r3, [r7, #14]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	40020c00 	.word	0x40020c00
 8001ef8:	40020400 	.word	0x40020400

08001efc <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	460b      	mov	r3, r1
 8001f06:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8001f08:	78fb      	ldrb	r3, [r7, #3]
 8001f0a:	2b52      	cmp	r3, #82	; 0x52
 8001f0c:	d112      	bne.n	8001f34 <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f14:	4856      	ldr	r0, [pc, #344]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f16:	f008 f97d 	bl	800a214 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f20:	4853      	ldr	r0, [pc, #332]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f22:	f008 f977 	bl	800a214 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f26:	2201      	movs	r2, #1
 8001f28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f2c:	4850      	ldr	r0, [pc, #320]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f2e:	f008 f971 	bl	800a214 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 8001f32:	e098      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 8001f34:	78fb      	ldrb	r3, [r7, #3]
 8001f36:	2b47      	cmp	r3, #71	; 0x47
 8001f38:	d112      	bne.n	8001f60 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f40:	484b      	ldr	r0, [pc, #300]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f42:	f008 f967 	bl	800a214 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f46:	2200      	movs	r2, #0
 8001f48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f4c:	4848      	ldr	r0, [pc, #288]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f4e:	f008 f961 	bl	800a214 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f52:	2201      	movs	r2, #1
 8001f54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f58:	4845      	ldr	r0, [pc, #276]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f5a:	f008 f95b 	bl	800a214 <HAL_GPIO_WritePin>
}
 8001f5e:	e082      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8001f60:	78fb      	ldrb	r3, [r7, #3]
 8001f62:	2b42      	cmp	r3, #66	; 0x42
 8001f64:	d112      	bne.n	8001f8c <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f66:	2201      	movs	r2, #1
 8001f68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f6c:	4840      	ldr	r0, [pc, #256]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f6e:	f008 f951 	bl	800a214 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f72:	2201      	movs	r2, #1
 8001f74:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f78:	483d      	ldr	r0, [pc, #244]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f7a:	f008 f94b 	bl	800a214 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f84:	483a      	ldr	r0, [pc, #232]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f86:	f008 f945 	bl	800a214 <HAL_GPIO_WritePin>
}
 8001f8a:	e06c      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8001f8c:	78fb      	ldrb	r3, [r7, #3]
 8001f8e:	2b43      	cmp	r3, #67	; 0x43
 8001f90:	d112      	bne.n	8001fb8 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f92:	2201      	movs	r2, #1
 8001f94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f98:	4835      	ldr	r0, [pc, #212]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f9a:	f008 f93b 	bl	800a214 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fa4:	4832      	ldr	r0, [pc, #200]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001fa6:	f008 f935 	bl	800a214 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001faa:	2200      	movs	r2, #0
 8001fac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fb0:	482f      	ldr	r0, [pc, #188]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001fb2:	f008 f92f 	bl	800a214 <HAL_GPIO_WritePin>
}
 8001fb6:	e056      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8001fb8:	78fb      	ldrb	r3, [r7, #3]
 8001fba:	2b4d      	cmp	r3, #77	; 0x4d
 8001fbc:	d112      	bne.n	8001fe4 <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fc4:	482a      	ldr	r0, [pc, #168]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001fc6:	f008 f925 	bl	800a214 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fd0:	4827      	ldr	r0, [pc, #156]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001fd2:	f008 f91f 	bl	800a214 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fdc:	4824      	ldr	r0, [pc, #144]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001fde:	f008 f919 	bl	800a214 <HAL_GPIO_WritePin>
}
 8001fe2:	e040      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 8001fe4:	78fb      	ldrb	r3, [r7, #3]
 8001fe6:	2b59      	cmp	r3, #89	; 0x59
 8001fe8:	d112      	bne.n	8002010 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001fea:	2200      	movs	r2, #0
 8001fec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ff0:	481f      	ldr	r0, [pc, #124]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001ff2:	f008 f90f 	bl	800a214 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ffc:	481c      	ldr	r0, [pc, #112]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001ffe:	f008 f909 	bl	800a214 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8002002:	2201      	movs	r2, #1
 8002004:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002008:	4819      	ldr	r0, [pc, #100]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 800200a:	f008 f903 	bl	800a214 <HAL_GPIO_WritePin>
}
 800200e:	e02a      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8002010:	78fb      	ldrb	r3, [r7, #3]
 8002012:	2b57      	cmp	r3, #87	; 0x57
 8002014:	d112      	bne.n	800203c <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002016:	2200      	movs	r2, #0
 8002018:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800201c:	4814      	ldr	r0, [pc, #80]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 800201e:	f008 f8f9 	bl	800a214 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8002022:	2200      	movs	r2, #0
 8002024:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002028:	4811      	ldr	r0, [pc, #68]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 800202a:	f008 f8f3 	bl	800a214 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800202e:	2200      	movs	r2, #0
 8002030:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002034:	480e      	ldr	r0, [pc, #56]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8002036:	f008 f8ed 	bl	800a214 <HAL_GPIO_WritePin>
}
 800203a:	e014      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 800203c:	78fb      	ldrb	r3, [r7, #3]
 800203e:	2b7e      	cmp	r3, #126	; 0x7e
 8002040:	d111      	bne.n	8002066 <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002042:	2201      	movs	r2, #1
 8002044:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002048:	4809      	ldr	r0, [pc, #36]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 800204a:	f008 f8e3 	bl	800a214 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800204e:	2201      	movs	r2, #1
 8002050:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002054:	4806      	ldr	r0, [pc, #24]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8002056:	f008 f8dd 	bl	800a214 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800205a:	2201      	movs	r2, #1
 800205c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002060:	4803      	ldr	r0, [pc, #12]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8002062:	f008 f8d7 	bl	800a214 <HAL_GPIO_WritePin>
}
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40020000 	.word	0x40020000

08002074 <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	460b      	mov	r3, r1
 800207e:	70fb      	strb	r3, [r7, #3]
 8002080:	4613      	mov	r3, r2
 8002082:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 8002084:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d106      	bne.n	800209a <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800208c:	2201      	movs	r2, #1
 800208e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002092:	4813      	ldr	r0, [pc, #76]	; (80020e0 <_ZN3LED2LREaa+0x6c>)
 8002094:	f008 f8be 	bl	800a214 <HAL_GPIO_WritePin>
 8002098:	e009      	b.n	80020ae <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 800209a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d105      	bne.n	80020ae <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80020a2:	2200      	movs	r2, #0
 80020a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020a8:	480d      	ldr	r0, [pc, #52]	; (80020e0 <_ZN3LED2LREaa+0x6c>)
 80020aa:	f008 f8b3 	bl	800a214 <HAL_GPIO_WritePin>

	if(r_status == 1)
 80020ae:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d106      	bne.n	80020c4 <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80020b6:	2201      	movs	r2, #1
 80020b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020bc:	4808      	ldr	r0, [pc, #32]	; (80020e0 <_ZN3LED2LREaa+0x6c>)
 80020be:	f008 f8a9 	bl	800a214 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 80020c2:	e009      	b.n	80020d8 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 80020c4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d105      	bne.n	80020d8 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80020cc:	2200      	movs	r2, #0
 80020ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020d2:	4803      	ldr	r0, [pc, #12]	; (80020e0 <_ZN3LED2LREaa+0x6c>)
 80020d4:	f008 f89e 	bl	800a214 <HAL_GPIO_WritePin>
}
 80020d8:	bf00      	nop
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40020000 	.word	0x40020000

080020e4 <_ZN10LineSensorC1Ev>:
#include "Macro.h"
#include "AQM0802.h"

float mon_sens, mon_sens_lpf;

LineSensor::LineSensor()
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b092      	sub	sp, #72	; 0x48
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff fe92 	bl	8001e1c <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	637b      	str	r3, [r7, #52]	; 0x34
 80020fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020fe:	647b      	str	r3, [r7, #68]	; 0x44
 8002100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002102:	331c      	adds	r3, #28
 8002104:	633b      	str	r3, [r7, #48]	; 0x30
 8002106:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800210a:	429a      	cmp	r2, r3
 800210c:	d008      	beq.n	8002120 <_ZN10LineSensorC1Ev+0x3c>
 800210e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002110:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 8002112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002114:	2200      	movs	r2, #0
 8002116:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8002118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800211a:	3302      	adds	r3, #2
 800211c:	647b      	str	r3, [r7, #68]	; 0x44
 800211e:	e7f2      	b.n	8002106 <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002126:	62bb      	str	r3, [r7, #40]	; 0x28
 8002128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212a:	643b      	str	r3, [r7, #64]	; 0x40
 800212c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212e:	3338      	adds	r3, #56	; 0x38
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
 8002132:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	429a      	cmp	r2, r3
 8002138:	d009      	beq.n	800214e <_ZN10LineSensorC1Ev+0x6a>
 800213a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800213c:	623b      	str	r3, [r7, #32]
		s = 0;
 800213e:	6a3b      	ldr	r3, [r7, #32]
 8002140:	f04f 0200 	mov.w	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 8002146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002148:	3304      	adds	r3, #4
 800214a:	643b      	str	r3, [r7, #64]	; 0x40
 800214c:	e7f1      	b.n	8002132 <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002154:	61fb      	str	r3, [r7, #28]
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	63fb      	str	r3, [r7, #60]	; 0x3c
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	3338      	adds	r3, #56	; 0x38
 800215e:	61bb      	str	r3, [r7, #24]
 8002160:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	429a      	cmp	r2, r3
 8002166:	d009      	beq.n	800217c <_ZN10LineSensorC1Ev+0x98>
 8002168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800216a:	617b      	str	r3, [r7, #20]
		m = 0;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	f04f 0200 	mov.w	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 8002174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002176:	3304      	adds	r3, #4
 8002178:	63fb      	str	r3, [r7, #60]	; 0x3c
 800217a:	e7f1      	b.n	8002160 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	63bb      	str	r3, [r7, #56]	; 0x38
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	3338      	adds	r3, #56	; 0x38
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	429a      	cmp	r2, r3
 8002194:	d009      	beq.n	80021aa <_ZN10LineSensorC1Ev+0xc6>
 8002196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002198:	60bb      	str	r3, [r7, #8]
		s = 1;
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80021a0:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 80021a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021a4:	3304      	adds	r3, #4
 80021a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80021a8:	e7f1      	b.n	800218e <_ZN10LineSensorC1Ev+0xaa>
	}

}
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4618      	mov	r0, r3
 80021ae:	3748      	adds	r7, #72	; 0x48
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	220e      	movs	r2, #14
 80021c0:	4619      	mov	r1, r3
 80021c2:	4803      	ldr	r0, [pc, #12]	; (80021d0 <_ZN10LineSensor8ADCStartEv+0x1c>)
 80021c4:	f006 fdf6 	bl	8008db4 <HAL_ADC_Start_DMA>
}
 80021c8:	bf00      	nop
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	2003e920 	.word	0x2003e920

080021d4 <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 80021dc:	2300      	movs	r3, #0
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2b0d      	cmp	r3, #13
 80021e4:	dc2f      	bgt.n	8002246 <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	3392      	adds	r3, #146	; 0x92
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	3304      	adds	r3, #4
 80021f2:	ed93 7a00 	vldr	s14, [r3]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80021fe:	ee07 3a90 	vmov	s15, r3
 8002202:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	33a0      	adds	r3, #160	; 0xa0
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	3304      	adds	r3, #4
 8002212:	edd3 7a00 	vldr	s15, [r3]
 8002216:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800221a:	4b14      	ldr	r3, [pc, #80]	; (800226c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	4619      	mov	r1, r3
 8002220:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	460b      	mov	r3, r1
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	1a5b      	subs	r3, r3, r1
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	68f9      	ldr	r1, [r7, #12]
 8002230:	440b      	add	r3, r1
 8002232:	3306      	adds	r3, #6
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	3304      	adds	r3, #4
 800223a:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	3301      	adds	r3, #1
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	e7cc      	b.n	80021e0 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 8002246:	4b09      	ldr	r3, [pc, #36]	; (800226c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	3301      	adds	r3, #1
 800224c:	b2da      	uxtb	r2, r3
 800224e:	4b07      	ldr	r3, [pc, #28]	; (800226c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002250:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 8002252:	4b06      	ldr	r3, [pc, #24]	; (800226c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b09      	cmp	r3, #9
 8002258:	d902      	bls.n	8002260 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 800225a:	4b04      	ldr	r3, [pc, #16]	; (800226c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800225c:	2200      	movs	r2, #0
 800225e:	701a      	strb	r2, [r3, #0]


}
 8002260:	bf00      	nop
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	2000021c 	.word	0x2000021c

08002270 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 8002270:	b5b0      	push	{r4, r5, r7, lr}
 8002272:	b08e      	sub	sp, #56	; 0x38
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
	float temp_val[10];
	static float pre_sensor[AD_DATA_SIZE];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002278:	2300      	movs	r3, #0
 800227a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800227e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002282:	2b0d      	cmp	r3, #13
 8002284:	f200 80b8 	bhi.w	80023f8 <_ZN10LineSensor18updateSensorValuesEv+0x188>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002288:	2300      	movs	r3, #0
 800228a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800228e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002292:	2b09      	cmp	r3, #9
 8002294:	d81c      	bhi.n	80022d0 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 8002296:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800229a:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 800229e:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	4613      	mov	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	1a9b      	subs	r3, r3, r2
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	4423      	add	r3, r4
 80022ae:	3306      	adds	r3, #6
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	4403      	add	r3, r0
 80022b4:	3304      	adds	r3, #4
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	008b      	lsls	r3, r1, #2
 80022ba:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022be:	440b      	add	r3, r1
 80022c0:	3b30      	subs	r3, #48	; 0x30
 80022c2:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80022c4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80022c8:	3301      	adds	r3, #1
 80022ca:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80022ce:	e7de      	b.n	800228e <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 80022d0:	2300      	movs	r3, #0
 80022d2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80022d6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022da:	2b09      	cmp	r3, #9
 80022dc:	d84d      	bhi.n	800237a <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 80022de:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022e2:	3301      	adds	r3, #1
 80022e4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80022e8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022ec:	2b09      	cmp	r3, #9
 80022ee:	d83e      	bhi.n	800236e <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 80022f0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022fa:	4413      	add	r3, r2
 80022fc:	3b30      	subs	r3, #48	; 0x30
 80022fe:	ed93 7a00 	vldr	s14, [r3]
 8002302:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800230c:	4413      	add	r3, r2
 800230e:	3b30      	subs	r3, #48	; 0x30
 8002310:	edd3 7a00 	vldr	s15, [r3]
 8002314:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800231c:	d521      	bpl.n	8002362 <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 800231e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002328:	4413      	add	r3, r2
 800232a:	3b30      	subs	r3, #48	; 0x30
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 8002330:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8002334:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002338:	0092      	lsls	r2, r2, #2
 800233a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800233e:	440a      	add	r2, r1
 8002340:	3a30      	subs	r2, #48	; 0x30
 8002342:	6812      	ldr	r2, [r2, #0]
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800234a:	440b      	add	r3, r1
 800234c:	3b30      	subs	r3, #48	; 0x30
 800234e:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 8002350:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800235a:	4413      	add	r3, r2
 800235c:	3b30      	subs	r3, #48	; 0x30
 800235e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002360:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 8002362:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002366:	3301      	adds	r3, #1
 8002368:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800236c:	e7bc      	b.n	80022e8 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 800236e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002372:	3301      	adds	r3, #1
 8002374:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002378:	e7ad      	b.n	80022d6 <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = ((R_LINESENSE)*(temp_val[5]) + (1.0 - (R_LINESENSE))* (pre_sensor[ad_cnt]));
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	4618      	mov	r0, r3
 800237e:	f7fe f8fb 	bl	8000578 <__aeabi_f2d>
 8002382:	a32a      	add	r3, pc, #168	; (adr r3, 800242c <_ZN10LineSensor18updateSensorValuesEv+0x1bc>)
 8002384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002388:	f7fe f94e 	bl	8000628 <__aeabi_dmul>
 800238c:	4603      	mov	r3, r0
 800238e:	460c      	mov	r4, r1
 8002390:	4625      	mov	r5, r4
 8002392:	461c      	mov	r4, r3
 8002394:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002398:	4a21      	ldr	r2, [pc, #132]	; (8002420 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7fe f8e9 	bl	8000578 <__aeabi_f2d>
 80023a6:	a31c      	add	r3, pc, #112	; (adr r3, 8002418 <_ZN10LineSensor18updateSensorValuesEv+0x1a8>)
 80023a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ac:	f7fe f93c 	bl	8000628 <__aeabi_dmul>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	4620      	mov	r0, r4
 80023b6:	4629      	mov	r1, r5
 80023b8:	f7fd ff80 	bl	80002bc <__adddf3>
 80023bc:	4603      	mov	r3, r0
 80023be:	460c      	mov	r4, r1
 80023c0:	461a      	mov	r2, r3
 80023c2:	4623      	mov	r3, r4
 80023c4:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 80023c8:	4610      	mov	r0, r2
 80023ca:	4619      	mov	r1, r3
 80023cc:	f7fe fc24 	bl	8000c18 <__aeabi_d2f>
 80023d0:	4601      	mov	r1, r0
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	6019      	str	r1, [r3, #0]
		pre_sensor[ad_cnt] = temp_val[5];
 80023de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80023e2:	69fa      	ldr	r2, [r7, #28]
 80023e4:	490e      	ldr	r1, [pc, #56]	; (8002420 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80023ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80023f0:	3301      	adds	r3, #1
 80023f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80023f6:	e742      	b.n	800227e <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}

	mon_sens = store_vals_[5][5];
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80023fe:	4a09      	ldr	r2, [pc, #36]	; (8002424 <_ZN10LineSensor18updateSensorValuesEv+0x1b4>)
 8002400:	6013      	str	r3, [r2, #0]
	mon_sens_lpf = sensor[5];
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8002408:	4a07      	ldr	r2, [pc, #28]	; (8002428 <_ZN10LineSensor18updateSensorValuesEv+0x1b8>)
 800240a:	6013      	str	r3, [r2, #0]
}
 800240c:	bf00      	nop
 800240e:	3738      	adds	r7, #56	; 0x38
 8002410:	46bd      	mov	sp, r7
 8002412:	bdb0      	pop	{r4, r5, r7, pc}
 8002414:	f3af 8000 	nop.w
 8002418:	66666666 	.word	0x66666666
 800241c:	3fee6666 	.word	0x3fee6666
 8002420:	20000220 	.word	0x20000220
 8002424:	20000214 	.word	0x20000214
 8002428:	20000218 	.word	0x20000218
 800242c:	9999999a 	.word	0x9999999a
 8002430:	3fa99999 	.word	0x3fa99999

08002434 <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b0a0      	sub	sp, #128	; 0x80
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 800243c:	2064      	movs	r0, #100	; 0x64
 800243e:	f006 fc53 	bl	8008ce8 <HAL_Delay>

	lcd_clear();
 8002442:	f7fe fe2d 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8002446:	2100      	movs	r1, #0
 8002448:	2000      	movs	r0, #0
 800244a:	f7fe fe39 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 800244e:	4886      	ldr	r0, [pc, #536]	; (8002668 <_ZN10LineSensor11calibrationEv+0x234>)
 8002450:	f7fe fe60 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8002454:	2101      	movs	r1, #1
 8002456:	2000      	movs	r0, #0
 8002458:	f7fe fe32 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 800245c:	4883      	ldr	r0, [pc, #524]	; (800266c <_ZN10LineSensor11calibrationEv+0x238>)
 800245e:	f7fe fe59 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002462:	2300      	movs	r3, #0
 8002464:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002468:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800246c:	2b0d      	cmp	r3, #13
 800246e:	d823      	bhi.n	80024b8 <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 8002470:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8002474:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	32b0      	adds	r2, #176	; 0xb0
 800247c:	0092      	lsls	r2, r2, #2
 800247e:	440a      	add	r2, r1
 8002480:	6812      	ldr	r2, [r2, #0]
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002488:	440b      	add	r3, r1
 800248a:	3b40      	subs	r3, #64	; 0x40
 800248c:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 800248e:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8002492:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	32b0      	adds	r2, #176	; 0xb0
 800249a:	0092      	lsls	r2, r2, #2
 800249c:	440a      	add	r2, r1
 800249e:	6812      	ldr	r2, [r2, #0]
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80024a6:	440b      	add	r3, r1
 80024a8:	3b78      	subs	r3, #120	; 0x78
 80024aa:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80024ac:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80024b0:	3301      	adds	r3, #1
 80024b2:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80024b6:	e7d7      	b.n	8002468 <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff fcb8 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	bf14      	ite	ne
 80024ca:	2301      	movne	r3, #1
 80024cc:	2300      	moveq	r3, #0
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d079      	beq.n	80025c8 <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80024d4:	2300      	movs	r3, #0
 80024d6:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80024da:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024de:	2b0d      	cmp	r3, #13
 80024e0:	d850      	bhi.n	8002584 <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 80024e2:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80024ec:	4413      	add	r3, r2
 80024ee:	3b40      	subs	r3, #64	; 0x40
 80024f0:	ed93 7a00 	vldr	s14, [r3]
 80024f4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	33b0      	adds	r3, #176	; 0xb0
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	edd3 7a00 	vldr	s15, [r3]
 8002504:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250c:	d50f      	bpl.n	800252e <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 800250e:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8002512:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	32b0      	adds	r2, #176	; 0xb0
 800251a:	0092      	lsls	r2, r2, #2
 800251c:	440a      	add	r2, r1
 800251e:	6812      	ldr	r2, [r2, #0]
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002526:	440b      	add	r3, r1
 8002528:	3b40      	subs	r3, #64	; 0x40
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	e024      	b.n	8002578 <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 800252e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002538:	4413      	add	r3, r2
 800253a:	3b78      	subs	r3, #120	; 0x78
 800253c:	ed93 7a00 	vldr	s14, [r3]
 8002540:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	33b0      	adds	r3, #176	; 0xb0
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4413      	add	r3, r2
 800254c:	edd3 7a00 	vldr	s15, [r3]
 8002550:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002558:	dd0e      	ble.n	8002578 <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 800255a:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 800255e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	32b0      	adds	r2, #176	; 0xb0
 8002566:	0092      	lsls	r2, r2, #2
 8002568:	440a      	add	r2, r1
 800256a:	6812      	ldr	r2, [r2, #0]
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002572:	440b      	add	r3, r1
 8002574:	3b78      	subs	r3, #120	; 0x78
 8002576:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002578:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800257c:	3301      	adds	r3, #1
 800257e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002582:	e7aa      	b.n	80024da <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f203 23be 	addw	r3, r3, #702	; 0x2be
 800258a:	4618      	mov	r0, r3
 800258c:	f002 fbc6 	bl	8004d1c <_ZN12RotarySwitch8getValueEv>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	bf0c      	ite	eq
 8002596:	2301      	moveq	r3, #1
 8002598:	2300      	movne	r3, #0
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b00      	cmp	r3, #0
 800259e:	d009      	beq.n	80025b4 <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80025a6:	2201      	movs	r2, #1
 80025a8:	f04f 31ff 	mov.w	r1, #4294967295
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff fd61 	bl	8002074 <_ZN3LED2LREaa>
 80025b2:	e781      	b.n	80024b8 <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80025ba:	2200      	movs	r2, #0
 80025bc:	f04f 31ff 	mov.w	r1, #4294967295
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff fd57 	bl	8002074 <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 80025c6:	e777      	b.n	80024b8 <_ZN10LineSensor11calibrationEv+0x84>
		printf("%f, ", m);
	}
		printf("\n");
	*/

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80025c8:	2300      	movs	r3, #0
 80025ca:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80025ce:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80025d2:	2b0d      	cmp	r3, #13
 80025d4:	d826      	bhi.n	8002624 <_ZN10LineSensor11calibrationEv+0x1f0>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 80025d6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80025e0:	4413      	add	r3, r2
 80025e2:	3b40      	subs	r3, #64	; 0x40
 80025e4:	ed93 7a00 	vldr	s14, [r3]
 80025e8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80025f2:	4413      	add	r3, r2
 80025f4:	3b78      	subs	r3, #120	; 0x78
 80025f6:	edd3 7a00 	vldr	s15, [r3]
 80025fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025fe:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002602:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002670 <_ZN10LineSensor11calibrationEv+0x23c>
 8002606:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	3392      	adds	r3, #146	; 0x92
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	3304      	adds	r3, #4
 8002614:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002618:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800261c:	3301      	adds	r3, #1
 800261e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002622:	e7d4      	b.n	80025ce <_ZN10LineSensor11calibrationEv+0x19a>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002624:	2300      	movs	r3, #0
 8002626:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 800262a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800262e:	2b0d      	cmp	r3, #13
 8002630:	d815      	bhi.n	800265e <_ZN10LineSensor11calibrationEv+0x22a>
		offset_values_[i] = min_values[i];
 8002632:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8002636:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800263a:	0092      	lsls	r2, r2, #2
 800263c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002640:	440a      	add	r2, r1
 8002642:	3a78      	subs	r2, #120	; 0x78
 8002644:	6812      	ldr	r2, [r2, #0]
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	33a0      	adds	r3, #160	; 0xa0
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	440b      	add	r3, r1
 800264e:	3304      	adds	r3, #4
 8002650:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002652:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002656:	3301      	adds	r3, #1
 8002658:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 800265c:	e7e5      	b.n	800262a <_ZN10LineSensor11calibrationEv+0x1f6>
	}


}
 800265e:	bf00      	nop
 8002660:	3780      	adds	r7, #128	; 0x80
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	08018bdc 	.word	0x08018bdc
 800266c:	08018be8 	.word	0x08018be8
 8002670:	447a0000 	.word	0x447a0000

08002674 <_ZN10LineSensor13emergencyStopEv>:
{
	printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 8002674:	b480      	push	{r7}
 8002676:	b089      	sub	sp, #36	; 0x24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
	uint16_t out_cnt = 0;
 800267c:	2300      	movs	r3, #0
 800267e:	83fb      	strh	r3, [r7, #30]
	static uint16_t cnt = 0;
	static bool flag = false;

	for(const auto & s : sensor){
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002686:	617b      	str	r3, [r7, #20]
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	61bb      	str	r3, [r7, #24]
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	3338      	adds	r3, #56	; 0x38
 8002690:	613b      	str	r3, [r7, #16]
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	429a      	cmp	r2, r3
 8002698:	d012      	beq.n	80026c0 <_ZN10LineSensor13emergencyStopEv+0x4c>
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	60fb      	str	r3, [r7, #12]
		if(s >= 700) out_cnt++;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	edd3 7a00 	vldr	s15, [r3]
 80026a4:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002714 <_ZN10LineSensor13emergencyStopEv+0xa0>
 80026a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026b0:	db02      	blt.n	80026b8 <_ZN10LineSensor13emergencyStopEv+0x44>
 80026b2:	8bfb      	ldrh	r3, [r7, #30]
 80026b4:	3301      	adds	r3, #1
 80026b6:	83fb      	strh	r3, [r7, #30]
	for(const auto & s : sensor){
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	3304      	adds	r3, #4
 80026bc:	61bb      	str	r3, [r7, #24]
 80026be:	e7e8      	b.n	8002692 <_ZN10LineSensor13emergencyStopEv+0x1e>
	}

	if(out_cnt >= AD_DATA_SIZE){
 80026c0:	8bfb      	ldrh	r3, [r7, #30]
 80026c2:	2b0d      	cmp	r3, #13
 80026c4:	d906      	bls.n	80026d4 <_ZN10LineSensor13emergencyStopEv+0x60>
		cnt++;
 80026c6:	4b14      	ldr	r3, [pc, #80]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	3301      	adds	r3, #1
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	4b12      	ldr	r3, [pc, #72]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026d0:	801a      	strh	r2, [r3, #0]
 80026d2:	e002      	b.n	80026da <_ZN10LineSensor13emergencyStopEv+0x66>
	}
	else{
		cnt = 0;
 80026d4:	4b10      	ldr	r3, [pc, #64]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 50){
 80026da:	4b0f      	ldr	r3, [pc, #60]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	2b31      	cmp	r3, #49	; 0x31
 80026e0:	d903      	bls.n	80026ea <_ZN10LineSensor13emergencyStopEv+0x76>
		flag = true;
 80026e2:	4b0e      	ldr	r3, [pc, #56]	; (800271c <_ZN10LineSensor13emergencyStopEv+0xa8>)
 80026e4:	2201      	movs	r2, #1
 80026e6:	701a      	strb	r2, [r3, #0]
 80026e8:	e002      	b.n	80026f0 <_ZN10LineSensor13emergencyStopEv+0x7c>
	}
	else flag = false;
 80026ea:	4b0c      	ldr	r3, [pc, #48]	; (800271c <_ZN10LineSensor13emergencyStopEv+0xa8>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	701a      	strb	r2, [r3, #0]

	if(cnt >= 10000) cnt = 10000;
 80026f0:	4b09      	ldr	r3, [pc, #36]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026f2:	881b      	ldrh	r3, [r3, #0]
 80026f4:	f242 720f 	movw	r2, #9999	; 0x270f
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d903      	bls.n	8002704 <_ZN10LineSensor13emergencyStopEv+0x90>
 80026fc:	4b06      	ldr	r3, [pc, #24]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026fe:	f242 7210 	movw	r2, #10000	; 0x2710
 8002702:	801a      	strh	r2, [r3, #0]

	return flag;
 8002704:	4b05      	ldr	r3, [pc, #20]	; (800271c <_ZN10LineSensor13emergencyStopEv+0xa8>)
 8002706:	781b      	ldrb	r3, [r3, #0]

}
 8002708:	4618      	mov	r0, r3
 800270a:	3724      	adds	r7, #36	; 0x24
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	442f0000 	.word	0x442f0000
 8002718:	20000258 	.word	0x20000258
 800271c:	2000025a 	.word	0x2000025a

08002720 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	ed87 0a01 	vstr	s0, [r7, #4]
 800272a:	edd7 7a01 	vldr	s15, [r7, #4]
 800272e:	eef0 7ae7 	vabs.f32	s15, s15
 8002732:	eeb0 0a67 	vmov.f32	s0, s15
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU>:
float mon_ave_l, mon_ave_r;
float mon_ref_dis, mon_current_dis;
uint16_t mon_vel_idx, mon_i;
float mon_tar_vel;

LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger, IMU *imu) :
 8002740:	b480      	push	{r7}
 8002742:	b087      	sub	sp, #28
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
 800274c:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0), kp_velo_(0), kd_velo_(0), ki_velo_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0),
				target_velocity_(0), max_velocity_(0), max_velocity2_(0), min_velocity_(0), min_velocity2_(0), logging_flag_(false),
				ref_distance_(0), velocity_play_flag_(false), velocity_table_idx_(0), mode_selector_(0), crossline_idx_(0), sideline_idx_(0),
				ignore_crossline_flag_(false), stable_flag_(false), stable_cnt_reset_flag_(false), max_acc_(0), max_dec_(0), correction_check_cnt_(0)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	625a      	str	r2, [r3, #36]	; 0x24
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f04f 0200 	mov.w	r2, #0
 800275c:	629a      	str	r2, [r3, #40]	; 0x28
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f04f 0200 	mov.w	r2, #0
 8002764:	62da      	str	r2, [r3, #44]	; 0x2c
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f04f 0200 	mov.w	r2, #0
 800276c:	631a      	str	r2, [r3, #48]	; 0x30
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	635a      	str	r2, [r3, #52]	; 0x34
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	639a      	str	r2, [r3, #56]	; 0x38
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f04f 0200 	mov.w	r2, #0
 8002794:	641a      	str	r2, [r3, #64]	; 0x40
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f04f 0200 	mov.w	r2, #0
 800279c:	679a      	str	r2, [r3, #120]	; 0x78
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f04f 0200 	mov.w	r2, #0
 80027a4:	67da      	str	r2, [r3, #124]	; 0x7c
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f04f 0200 	mov.w	r2, #0
 80027ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f04f 0200 	mov.w	r2, #0
 80027b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f04f 0200 	mov.w	r2, #0
 80027c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 80027d2:	3350      	adds	r3, #80	; 0x50
 80027d4:	f04f 0200 	mov.w	r2, #0
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80027e0:	3314      	adds	r3, #20
 80027e2:	2200      	movs	r2, #0
 80027e4:	701a      	strb	r2, [r3, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80027ec:	3316      	adds	r3, #22
 80027ee:	2200      	movs	r2, #0
 80027f0:	801a      	strh	r2, [r3, #0]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80027f8:	3318      	adds	r3, #24
 80027fa:	2200      	movs	r2, #0
 80027fc:	801a      	strh	r2, [r3, #0]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002804:	334c      	adds	r3, #76	; 0x4c
 8002806:	2200      	movs	r2, #0
 8002808:	801a      	strh	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002810:	334e      	adds	r3, #78	; 0x4e
 8002812:	2200      	movs	r2, #0
 8002814:	801a      	strh	r2, [r3, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800281c:	3350      	adds	r3, #80	; 0x50
 800281e:	2200      	movs	r2, #0
 8002820:	701a      	strb	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002828:	3351      	adds	r3, #81	; 0x51
 800282a:	2200      	movs	r2, #0
 800282c:	701a      	strb	r2, [r3, #0]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002834:	3352      	adds	r3, #82	; 0x52
 8002836:	2200      	movs	r2, #0
 8002838:	701a      	strb	r2, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002840:	3354      	adds	r3, #84	; 0x54
 8002842:	f04f 0200 	mov.w	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800284e:	3358      	adds	r3, #88	; 0x58
 8002850:	f04f 0200 	mov.w	r2, #0
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800285c:	335c      	adds	r3, #92	; 0x5c
 800285e:	2200      	movs	r2, #0
 8002860:	801a      	strh	r2, [r3, #0]

{
	motor_ = motor;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	68ba      	ldr	r2, [r7, #8]
 8002866:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6a3a      	ldr	r2, [r7, #32]
 8002878:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800287e:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002884:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800288a:	61da      	str	r2, [r3, #28]
	imu_ = imu;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002890:	621a      	str	r2, [r3, #32]

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002892:	2300      	movs	r3, #0
 8002894:	82fb      	strh	r3, [r7, #22]
 8002896:	8afb      	ldrh	r3, [r7, #22]
 8002898:	f241 726f 	movw	r2, #5999	; 0x176f
 800289c:	4293      	cmp	r3, r2
 800289e:	d80e      	bhi.n	80028be <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x17e>
		velocity_table_[i] = 0;
 80028a0:	8afb      	ldrh	r3, [r7, #22]
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 80028a8:	3314      	adds	r3, #20
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4413      	add	r3, r2
 80028ae:	3304      	adds	r3, #4
 80028b0:	f04f 0200 	mov.w	r2, #0
 80028b4:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80028b6:	8afb      	ldrh	r3, [r7, #22]
 80028b8:	3301      	adds	r3, #1
 80028ba:	82fb      	strh	r3, [r7, #22]
 80028bc:	e7eb      	b.n	8002896 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x156>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 80028be:	2300      	movs	r3, #0
 80028c0:	82bb      	strh	r3, [r7, #20]
 80028c2:	8abb      	ldrh	r3, [r7, #20]
 80028c4:	2b63      	cmp	r3, #99	; 0x63
 80028c6:	d80e      	bhi.n	80028e6 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1a6>
		crossline_distance_[i] = 0;
 80028c8:	8abb      	ldrh	r3, [r7, #20]
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 80028d0:	3306      	adds	r3, #6
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4413      	add	r3, r2
 80028d6:	3304      	adds	r3, #4
 80028d8:	f04f 0200 	mov.w	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 80028de:	8abb      	ldrh	r3, [r7, #20]
 80028e0:	3301      	adds	r3, #1
 80028e2:	82bb      	strh	r3, [r7, #20]
 80028e4:	e7ed      	b.n	80028c2 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x182>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80028e6:	2300      	movs	r3, #0
 80028e8:	827b      	strh	r3, [r7, #18]
 80028ea:	8a7b      	ldrh	r3, [r7, #18]
 80028ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028f0:	d20e      	bcs.n	8002910 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1d0>
		sideline_distance_[i] = 0;
 80028f2:	8a7b      	ldrh	r3, [r7, #18]
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 80028fa:	332a      	adds	r3, #42	; 0x2a
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4413      	add	r3, r2
 8002900:	3304      	adds	r3, #4
 8002902:	f04f 0200 	mov.w	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002908:	8a7b      	ldrh	r3, [r7, #18]
 800290a:	3301      	adds	r3, #1
 800290c:	827b      	strh	r3, [r7, #18]
 800290e:	e7ec      	b.n	80028ea <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1aa>
	}
}
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	4618      	mov	r0, r3
 8002914:	371c      	adds	r7, #28
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
	...

08002920 <_ZN9LineTrace9calcErrorEv>:

// --------private--------- //
float LineTrace::calcError()
{
 8002920:	b5b0      	push	{r4, r5, r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
	static float pre_diff;
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002938:	ee37 7a27 	vadd.f32	s14, s14, s15
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8002944:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 8002950:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 800295c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002968:	ee37 7a27 	vadd.f32	s14, s14, s15
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 8002974:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	edd3 6ab7 	vldr	s13, [r3, #732]	; 0x2dc
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8002988:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002994:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 80029a0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 80029ac:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 80029b8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 80029c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029c8:	ee77 7a67 	vsub.f32	s15, s14, s15
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 80029cc:	edc7 7a03 	vstr	s15, [r7, #12]
	mon_diff = diff;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	4a1f      	ldr	r2, [pc, #124]	; (8002a50 <_ZN9LineTrace9calcErrorEv+0x130>)
 80029d4:	6013      	str	r3, [r2, #0]

	diff = ((R_DIFF)*(diff) + (1.0 - (R_DIFF))* (pre_diff));
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	4618      	mov	r0, r3
 80029da:	f7fd fdcd 	bl	8000578 <__aeabi_f2d>
 80029de:	a318      	add	r3, pc, #96	; (adr r3, 8002a40 <_ZN9LineTrace9calcErrorEv+0x120>)
 80029e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e4:	f7fd fe20 	bl	8000628 <__aeabi_dmul>
 80029e8:	4603      	mov	r3, r0
 80029ea:	460c      	mov	r4, r1
 80029ec:	4625      	mov	r5, r4
 80029ee:	461c      	mov	r4, r3
 80029f0:	4b18      	ldr	r3, [pc, #96]	; (8002a54 <_ZN9LineTrace9calcErrorEv+0x134>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7fd fdbf 	bl	8000578 <__aeabi_f2d>
 80029fa:	a313      	add	r3, pc, #76	; (adr r3, 8002a48 <_ZN9LineTrace9calcErrorEv+0x128>)
 80029fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a00:	f7fd fe12 	bl	8000628 <__aeabi_dmul>
 8002a04:	4602      	mov	r2, r0
 8002a06:	460b      	mov	r3, r1
 8002a08:	4620      	mov	r0, r4
 8002a0a:	4629      	mov	r1, r5
 8002a0c:	f7fd fc56 	bl	80002bc <__adddf3>
 8002a10:	4603      	mov	r3, r0
 8002a12:	460c      	mov	r4, r1
 8002a14:	4618      	mov	r0, r3
 8002a16:	4621      	mov	r1, r4
 8002a18:	f7fe f8fe 	bl	8000c18 <__aeabi_d2f>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	60fb      	str	r3, [r7, #12]
	mon_diff_lpf = diff;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	4a0d      	ldr	r2, [pc, #52]	; (8002a58 <_ZN9LineTrace9calcErrorEv+0x138>)
 8002a24:	6013      	str	r3, [r2, #0]

	pre_diff = diff;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	4a0a      	ldr	r2, [pc, #40]	; (8002a54 <_ZN9LineTrace9calcErrorEv+0x134>)
 8002a2a:	6013      	str	r3, [r2, #0]

	return diff;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	ee07 3a90 	vmov	s15, r3

}
 8002a32:	eeb0 0a67 	vmov.f32	s0, s15
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bdb0      	pop	{r4, r5, r7, pc}
 8002a3c:	f3af 8000 	nop.w
 8002a40:	47ae147b 	.word	0x47ae147b
 8002a44:	3fb47ae1 	.word	0x3fb47ae1
 8002a48:	d70a3d71 	.word	0xd70a3d71
 8002a4c:	3fed70a3 	.word	0x3fed70a3
 8002a50:	2000025c 	.word	0x2000025c
 8002a54:	20000280 	.word	0x20000280
 8002a58:	20000260 	.word	0x20000260
 8002a5c:	00000000 	.word	0x00000000

08002a60 <_ZN9LineTrace8pidTraceEv>:
	float phi = atan2(norm_l - norm_r, 1.0);
	delta_theta = (phi * ANGLE_BETWEEN_SENSORS/2) / (PI / 4);
}

void LineTrace::pidTrace()
{
 8002a60:	b5b0      	push	{r4, r5, r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f7ff ff59 	bl	8002920 <_ZN9LineTrace9calcErrorEv>
 8002a6e:	ed87 0a05 	vstr	s0, [r7, #20]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d007      	beq.n	8002a8c <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 8002a7c:	4b3c      	ldr	r3, [pc, #240]	; (8002b70 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002a7e:	f04f 0200 	mov.w	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	}

	p = kp_ * diff;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002a92:	ed97 7a05 	vldr	s14, [r7, #20]
 8002a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a9a:	edc7 7a04 	vstr	s15, [r7, #16]
	d = kd_ * (diff - pre_diff) / DELTA_T;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002aa4:	4b33      	ldr	r3, [pc, #204]	; (8002b74 <_ZN9LineTrace8pidTraceEv+0x114>)
 8002aa6:	edd3 7a00 	vldr	s15, [r3]
 8002aaa:	edd7 6a05 	vldr	s13, [r7, #20]
 8002aae:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ab6:	ee17 0a90 	vmov	r0, s15
 8002aba:	f7fd fd5d 	bl	8000578 <__aeabi_f2d>
 8002abe:	a32a      	add	r3, pc, #168	; (adr r3, 8002b68 <_ZN9LineTrace8pidTraceEv+0x108>)
 8002ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac4:	f7fd feda 	bl	800087c <__aeabi_ddiv>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	460c      	mov	r4, r1
 8002acc:	4618      	mov	r0, r3
 8002ace:	4621      	mov	r1, r4
 8002ad0:	f7fe f8a2 	bl	8000c18 <__aeabi_d2f>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	60fb      	str	r3, [r7, #12]
	i += ki_ * diff * DELTA_T;
 8002ad8:	4b25      	ldr	r3, [pc, #148]	; (8002b70 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7fd fd4b 	bl	8000578 <__aeabi_f2d>
 8002ae2:	4604      	mov	r4, r0
 8002ae4:	460d      	mov	r5, r1
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002aec:	edd7 7a05 	vldr	s15, [r7, #20]
 8002af0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002af4:	ee17 0a90 	vmov	r0, s15
 8002af8:	f7fd fd3e 	bl	8000578 <__aeabi_f2d>
 8002afc:	a31a      	add	r3, pc, #104	; (adr r3, 8002b68 <_ZN9LineTrace8pidTraceEv+0x108>)
 8002afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b02:	f7fd fd91 	bl	8000628 <__aeabi_dmul>
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	4620      	mov	r0, r4
 8002b0c:	4629      	mov	r1, r5
 8002b0e:	f7fd fbd5 	bl	80002bc <__adddf3>
 8002b12:	4603      	mov	r3, r0
 8002b14:	460c      	mov	r4, r1
 8002b16:	4618      	mov	r0, r3
 8002b18:	4621      	mov	r1, r4
 8002b1a:	f7fe f87d 	bl	8000c18 <__aeabi_d2f>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	4b13      	ldr	r3, [pc, #76]	; (8002b70 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002b22:	601a      	str	r2, [r3, #0]

	float rotation_ratio = p + d + i;
 8002b24:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b28:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b30:	4b0f      	ldr	r3, [pc, #60]	; (8002b70 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002b32:	edd3 7a00 	vldr	s15, [r3]
 8002b36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b3a:	edc7 7a02 	vstr	s15, [r7, #8]

	//motor_->setRatio(left_ratio, right_ratio);
	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	689a      	ldr	r2, [r3, #8]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002b48:	edd7 0a02 	vldr	s1, [r7, #8]
 8002b4c:	eeb0 0a67 	vmov.f32	s0, s15
 8002b50:	4610      	mov	r0, r2
 8002b52:	f002 fcc5 	bl	80054e0 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002b56:	4a07      	ldr	r2, [pc, #28]	; (8002b74 <_ZN9LineTrace8pidTraceEv+0x114>)
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	6013      	str	r3, [r2, #0]

}
 8002b5c:	bf00      	nop
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bdb0      	pop	{r4, r5, r7, pc}
 8002b64:	f3af 8000 	nop.w
 8002b68:	d2f1a9fc 	.word	0xd2f1a9fc
 8002b6c:	3f50624d 	.word	0x3f50624d
 8002b70:	20000288 	.word	0x20000288
 8002b74:	20000284 	.word	0x20000284

08002b78 <_ZN9LineTrace11loggerStartEv>:
	monitor_target_omega = target_omega;
	monitor_r = r;
}

void LineTrace::loggerStart()
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
	encoder_->clearDistance10mm();
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7fe fc8f 	bl	80014a8 <_ZN7Encoder17clearDistance10mmEv>
	odometry_->clearPotition();
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f001 ff86 	bl	8004aa0 <_ZN8Odometry13clearPotitionEv>
	logger_->resetLogs2();
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	69db      	ldr	r3, [r3, #28]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f001 fcb1 	bl	8004500 <_ZN6Logger10resetLogs2Ev>

	logging_flag_ = true;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
}
 8002ba6:	bf00      	nop
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b082      	sub	sp, #8
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	69db      	ldr	r3, [r3, #28]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f001 fd16 	bl	80045ec <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
}
 8002bc8:	bf00      	nop
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
	static uint16_t cnt = 0;
	float sensor_edge_val_l = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2]) / 3;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002be8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8002bf4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bf8:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002bfc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c00:	edc7 7a03 	vstr	s15, [r7, #12]
	float sensor_edge_val_r = (line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]) / 3;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	ed93 7abb 	vldr	s14, [r3, #748]	; 0x2ec
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002c14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8002c20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c24:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002c28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c2c:	edc7 7a02 	vstr	s15, [r7, #8]
	static bool flag = false;
	static bool white_flag = false;
	mon_ave_l = sensor_edge_val_l;
 8002c30:	4a40      	ldr	r2, [pc, #256]	; (8002d34 <_ZN9LineTrace11isCrossLineEv+0x164>)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6013      	str	r3, [r2, #0]
	mon_ave_r = sensor_edge_val_r;
 8002c36:	4a40      	ldr	r2, [pc, #256]	; (8002d38 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	6013      	str	r3, [r2, #0]

	if(white_flag == false){
 8002c3c:	4b3f      	ldr	r3, [pc, #252]	; (8002d3c <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	f083 0301 	eor.w	r3, r3, #1
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d044      	beq.n	8002cd4 <_ZN9LineTrace11isCrossLineEv+0x104>
		if(sensor_edge_val_l < 600 && sensor_edge_val_r < 600){
 8002c4a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c4e:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002d40 <_ZN9LineTrace11isCrossLineEv+0x170>
 8002c52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c5a:	d50f      	bpl.n	8002c7c <_ZN9LineTrace11isCrossLineEv+0xac>
 8002c5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c60:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8002d40 <_ZN9LineTrace11isCrossLineEv+0x170>
 8002c64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c6c:	d506      	bpl.n	8002c7c <_ZN9LineTrace11isCrossLineEv+0xac>
			cnt++;
 8002c6e:	4b35      	ldr	r3, [pc, #212]	; (8002d44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002c70:	881b      	ldrh	r3, [r3, #0]
 8002c72:	3301      	adds	r3, #1
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	4b33      	ldr	r3, [pc, #204]	; (8002d44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002c78:	801a      	strh	r2, [r3, #0]
 8002c7a:	e002      	b.n	8002c82 <_ZN9LineTrace11isCrossLineEv+0xb2>
		}
		else{
			cnt = 0;
 8002c7c:	4b31      	ldr	r3, [pc, #196]	; (8002d44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 3){
 8002c82:	4b30      	ldr	r3, [pc, #192]	; (8002d44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002c84:	881b      	ldrh	r3, [r3, #0]
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d94d      	bls.n	8002d26 <_ZN9LineTrace11isCrossLineEv+0x156>
			flag = true;
 8002c8a:	4b2f      	ldr	r3, [pc, #188]	; (8002d48 <_ZN9LineTrace11isCrossLineEv+0x178>)
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	701a      	strb	r2, [r3, #0]
			white_flag = true;
 8002c90:	4b2a      	ldr	r3, [pc, #168]	; (8002d3c <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002c92:	2201      	movs	r2, #1
 8002c94:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8002c96:	4b2b      	ldr	r3, [pc, #172]	; (8002d44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	801a      	strh	r2, [r3, #0]

			stable_cnt_reset_flag_ = true; //Because the conditions do not differ between when you tremble and when you do not tremble
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002ca2:	3352      	adds	r3, #82	; 0x52
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	701a      	strb	r2, [r3, #0]
			if(mode_selector_ == FIRST_RUNNING){
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002cae:	3318      	adds	r3, #24
 8002cb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d103      	bne.n	8002cc0 <_ZN9LineTrace11isCrossLineEv+0xf0>
				storeCrossLineDistance();
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f001 f903 	bl	8003ec4 <_ZN9LineTrace22storeCrossLineDistanceEv>
 8002cbe:	e032      	b.n	8002d26 <_ZN9LineTrace11isCrossLineEv+0x156>
			}
			else{
				correctionTotalDistanceFromCrossLine();
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f001 f96f 	bl	8003fa4 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>
				correction_check_cnt_ = 0;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002ccc:	335c      	adds	r3, #92	; 0x5c
 8002cce:	2200      	movs	r2, #0
 8002cd0:	801a      	strh	r2, [r3, #0]
 8002cd2:	e028      	b.n	8002d26 <_ZN9LineTrace11isCrossLineEv+0x156>

			//led_.LR(-1, 1);
		}
	}
	else{
		if(sensor_edge_val_l > 500 && sensor_edge_val_r > 500){
 8002cd4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002cd8:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002d4c <_ZN9LineTrace11isCrossLineEv+0x17c>
 8002cdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ce4:	dd0f      	ble.n	8002d06 <_ZN9LineTrace11isCrossLineEv+0x136>
 8002ce6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002cea:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002d4c <_ZN9LineTrace11isCrossLineEv+0x17c>
 8002cee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cf6:	dd06      	ble.n	8002d06 <_ZN9LineTrace11isCrossLineEv+0x136>
			cnt++;
 8002cf8:	4b12      	ldr	r3, [pc, #72]	; (8002d44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002cfa:	881b      	ldrh	r3, [r3, #0]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	4b10      	ldr	r3, [pc, #64]	; (8002d44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002d02:	801a      	strh	r2, [r3, #0]
 8002d04:	e002      	b.n	8002d0c <_ZN9LineTrace11isCrossLineEv+0x13c>
		}
		else{
			cnt = 0;
 8002d06:	4b0f      	ldr	r3, [pc, #60]	; (8002d44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 10){
 8002d0c:	4b0d      	ldr	r3, [pc, #52]	; (8002d44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002d0e:	881b      	ldrh	r3, [r3, #0]
 8002d10:	2b09      	cmp	r3, #9
 8002d12:	d908      	bls.n	8002d26 <_ZN9LineTrace11isCrossLineEv+0x156>
			flag = false;
 8002d14:	4b0c      	ldr	r3, [pc, #48]	; (8002d48 <_ZN9LineTrace11isCrossLineEv+0x178>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	701a      	strb	r2, [r3, #0]
			white_flag = false;
 8002d1a:	4b08      	ldr	r3, [pc, #32]	; (8002d3c <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8002d20:	4b08      	ldr	r3, [pc, #32]	; (8002d44 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	801a      	strh	r2, [r3, #0]
			//led_.LR(-1, 0);
		}

	}

	return flag;
 8002d26:	4b08      	ldr	r3, [pc, #32]	; (8002d48 <_ZN9LineTrace11isCrossLineEv+0x178>)
 8002d28:	781b      	ldrb	r3, [r3, #0]
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	20000268 	.word	0x20000268
 8002d38:	2000026c 	.word	0x2000026c
 8002d3c:	2000028f 	.word	0x2000028f
 8002d40:	44160000 	.word	0x44160000
 8002d44:	2000028c 	.word	0x2000028c
 8002d48:	2000028e 	.word	0x2000028e
 8002d4c:	43fa0000 	.word	0x43fa0000

08002d50 <_ZN9LineTrace15radius2VelocityEf>:
	if(theta == 0) theta = 0.000001;
	return distance / theta;
}

float LineTrace::radius2Velocity(float radius)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	ed87 0a00 	vstr	s0, [r7]
	float velocity;

	if(mode_selector_ == SECOND_RUNNING){
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002d62:	3318      	adds	r3, #24
 8002d64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d11d      	bne.n	8002da8 <_ZN9LineTrace15radius2VelocityEf+0x58>
		if(radius < 130) velocity = min_velocity_;
 8002d6c:	edd7 7a00 	vldr	s15, [r7]
 8002d70:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002e10 <_ZN9LineTrace15radius2VelocityEf+0xc0>
 8002d74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d7c:	d504      	bpl.n	8002d88 <_ZN9LineTrace15radius2VelocityEf+0x38>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d84:	60fb      	str	r3, [r7, #12]
 8002d86:	e039      	b.n	8002dfc <_ZN9LineTrace15radius2VelocityEf+0xac>
		else if(radius < 2000) velocity = 1.6;
 8002d88:	edd7 7a00 	vldr	s15, [r7]
 8002d8c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002e14 <_ZN9LineTrace15radius2VelocityEf+0xc4>
 8002d90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d98:	d502      	bpl.n	8002da0 <_ZN9LineTrace15radius2VelocityEf+0x50>
 8002d9a:	4b1f      	ldr	r3, [pc, #124]	; (8002e18 <_ZN9LineTrace15radius2VelocityEf+0xc8>)
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	e02d      	b.n	8002dfc <_ZN9LineTrace15radius2VelocityEf+0xac>
		else velocity = max_velocity_;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	e029      	b.n	8002dfc <_ZN9LineTrace15radius2VelocityEf+0xac>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002dae:	3318      	adds	r3, #24
 8002db0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d11f      	bne.n	8002df8 <_ZN9LineTrace15radius2VelocityEf+0xa8>
		if(radius < 130) velocity = min_velocity2_;
 8002db8:	edd7 7a00 	vldr	s15, [r7]
 8002dbc:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002e10 <_ZN9LineTrace15radius2VelocityEf+0xc0>
 8002dc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dc8:	d504      	bpl.n	8002dd4 <_ZN9LineTrace15radius2VelocityEf+0x84>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	e013      	b.n	8002dfc <_ZN9LineTrace15radius2VelocityEf+0xac>
		else if(radius < 2000) velocity = 2;
 8002dd4:	edd7 7a00 	vldr	s15, [r7]
 8002dd8:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002e14 <_ZN9LineTrace15radius2VelocityEf+0xc4>
 8002ddc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002de4:	d503      	bpl.n	8002dee <_ZN9LineTrace15radius2VelocityEf+0x9e>
 8002de6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002dea:	60fb      	str	r3, [r7, #12]
 8002dec:	e006      	b.n	8002dfc <_ZN9LineTrace15radius2VelocityEf+0xac>
		else velocity = max_velocity2_;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002df4:	60fb      	str	r3, [r7, #12]
 8002df6:	e001      	b.n	8002dfc <_ZN9LineTrace15radius2VelocityEf+0xac>
	}
	else velocity = 1.3;
 8002df8:	4b08      	ldr	r3, [pc, #32]	; (8002e1c <_ZN9LineTrace15radius2VelocityEf+0xcc>)
 8002dfa:	60fb      	str	r3, [r7, #12]

	return velocity;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	ee07 3a90 	vmov	s15, r3
}
 8002e02:	eeb0 0a67 	vmov.f32	s0, s15
 8002e06:	3714      	adds	r7, #20
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr
 8002e10:	43020000 	.word	0x43020000
 8002e14:	44fa0000 	.word	0x44fa0000
 8002e18:	3fcccccd 	.word	0x3fcccccd
 8002e1c:	3fa66666 	.word	0x3fa66666

08002e20 <_ZN9LineTrace20createVelocityTabeleEv>:

void LineTrace::createVelocityTabele()
{
 8002e20:	b590      	push	{r4, r7, lr}
 8002e22:	b08b      	sub	sp, #44	; 0x2c
 8002e24:	af02      	add	r7, sp, #8
 8002e26:	6078      	str	r0, [r7, #4]
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	69db      	ldr	r3, [r3, #28]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f001 fac2 	bl	80043b6 <_ZN6Logger23getDistanceArrayPointerEv>
 8002e32:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	69db      	ldr	r3, [r3, #28]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f001 fac8 	bl	80043ce <_ZN6Logger20getThetaArrayPointerEv>
 8002e3e:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002e40:	2300      	movs	r3, #0
 8002e42:	837b      	strh	r3, [r7, #26]
 8002e44:	8b7b      	ldrh	r3, [r7, #26]
 8002e46:	f241 726f 	movw	r2, #5999	; 0x176f
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d84b      	bhi.n	8002ee6 <_ZN9LineTrace20createVelocityTabeleEv+0xc6>
		temp_distance = p_distance[i];
 8002e4e:	8b7b      	ldrh	r3, [r7, #26]
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	4413      	add	r3, r2
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8002e5a:	8b7b      	ldrh	r3, [r7, #26]
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	4413      	add	r3, r2
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8002e66:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e6a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e72:	d101      	bne.n	8002e78 <_ZN9LineTrace20createVelocityTabeleEv+0x58>
 8002e74:	4b30      	ldr	r3, [pc, #192]	; (8002f38 <_ZN9LineTrace20createVelocityTabeleEv+0x118>)
 8002e76:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 8002e78:	ed97 7a02 	vldr	s14, [r7, #8]
 8002e7c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e80:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002e84:	eeb0 0a66 	vmov.f32	s0, s13
 8002e88:	f7ff fc4a 	bl	8002720 <_ZSt3absf>
 8002e8c:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 8002e90:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e94:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002f3c <_ZN9LineTrace20createVelocityTabeleEv+0x11c>
 8002e98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea0:	db01      	blt.n	8002ea6 <_ZN9LineTrace20createVelocityTabeleEv+0x86>
 8002ea2:	4b27      	ldr	r3, [pc, #156]	; (8002f40 <_ZN9LineTrace20createVelocityTabeleEv+0x120>)
 8002ea4:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 8002ea6:	8b7c      	ldrh	r4, [r7, #26]
 8002ea8:	ed97 0a05 	vldr	s0, [r7, #20]
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f7ff ff4f 	bl	8002d50 <_ZN9LineTrace15radius2VelocityEf>
 8002eb2:	eef0 7a40 	vmov.f32	s15, s0
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 8002ebc:	3314      	adds	r3, #20
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	4413      	add	r3, r2
 8002ec2:	3304      	adds	r3, #4
 8002ec4:	edc3 7a00 	vstr	s15, [r3]
		//velocity_table_[i] = radius;

		ref_delta_distances_[i] = p_distance[i]; //copy
 8002ec8:	8b7b      	ldrh	r3, [r7, #26]
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	441a      	add	r2, r3
 8002ed0:	8b7b      	ldrh	r3, [r7, #26]
 8002ed2:	6812      	ldr	r2, [r2, #0]
 8002ed4:	6879      	ldr	r1, [r7, #4]
 8002ed6:	3324      	adds	r3, #36	; 0x24
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	440b      	add	r3, r1
 8002edc:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002ede:	8b7b      	ldrh	r3, [r7, #26]
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	837b      	strh	r3, [r7, #26]
 8002ee4:	e7ae      	b.n	8002e44 <_ZN9LineTrace20createVelocityTabeleEv+0x24>
	}

	// ----- Decelerate processing -----//
	decelerateProcessing(max_dec_, p_distance);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002eec:	3358      	adds	r3, #88	; 0x58
 8002eee:	edd3 7a00 	vldr	s15, [r3]
 8002ef2:	6939      	ldr	r1, [r7, #16]
 8002ef4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 f8e1 	bl	80030c0 <_ZN9LineTrace20decelerateProcessingEfPKf>
	// ----- Accelerate processing -----//
	accelerateProcessing(max_acc_, p_distance);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002f04:	3354      	adds	r3, #84	; 0x54
 8002f06:	edd3 7a00 	vldr	s15, [r3]
 8002f0a:	6939      	ldr	r1, [r7, #16]
 8002f0c:	eeb0 0a67 	vmov.f32	s0, s15
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f000 f97d 	bl	8003210 <_ZN9LineTrace20accelerateProcessingEfPKf>

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8002f1c:	3354      	adds	r3, #84	; 0x54
 8002f1e:	2200      	movs	r2, #0
 8002f20:	9200      	str	r2, [sp, #0]
 8002f22:	f241 7270 	movw	r2, #6000	; 0x1770
 8002f26:	4907      	ldr	r1, [pc, #28]	; (8002f44 <_ZN9LineTrace20createVelocityTabeleEv+0x124>)
 8002f28:	4807      	ldr	r0, [pc, #28]	; (8002f48 <_ZN9LineTrace20createVelocityTabeleEv+0x128>)
 8002f2a:	f7fe fb6b 	bl	8001604 <sd_write_array_float>

}
 8002f2e:	bf00      	nop
 8002f30:	3724      	adds	r7, #36	; 0x24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd90      	pop	{r4, r7, pc}
 8002f36:	bf00      	nop
 8002f38:	3727c5ac 	.word	0x3727c5ac
 8002f3c:	459c4000 	.word	0x459c4000
 8002f40:	459c4000 	.word	0x459c4000
 8002f44:	08018c2c 	.word	0x08018c2c
 8002f48:	08018c3c 	.word	0x08018c3c

08002f4c <_ZN9LineTrace26createVelocityTabeleFromSDEv>:

//float mon_crossdis;
void LineTrace::createVelocityTabeleFromSD()
{
 8002f4c:	b590      	push	{r4, r7, lr}
 8002f4e:	b08b      	sub	sp, #44	; 0x2c
 8002f50:	af02      	add	r7, sp, #8
 8002f52:	6078      	str	r0, [r7, #4]
	logger_->importDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	69d8      	ldr	r0, [r3, #28]
 8002f58:	4b4f      	ldr	r3, [pc, #316]	; (8003098 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x14c>)
 8002f5a:	4a50      	ldr	r2, [pc, #320]	; (800309c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x150>)
 8002f5c:	4950      	ldr	r1, [pc, #320]	; (80030a0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x154>)
 8002f5e:	f001 fab2 	bl	80044c6 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>
	sd_read_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002f68:	331c      	adds	r3, #28
 8002f6a:	2264      	movs	r2, #100	; 0x64
 8002f6c:	494d      	ldr	r1, [pc, #308]	; (80030a4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x158>)
 8002f6e:	484c      	ldr	r0, [pc, #304]	; (80030a0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x154>)
 8002f70:	f7fe fbae 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 8002f7a:	33ac      	adds	r3, #172	; 0xac
 8002f7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f80:	4949      	ldr	r1, [pc, #292]	; (80030a8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x15c>)
 8002f82:	4847      	ldr	r0, [pc, #284]	; (80030a0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x154>)
 8002f84:	f7fe fba4 	bl	80016d0 <sd_read_array_float>

	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	69db      	ldr	r3, [r3, #28]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f001 fa12 	bl	80043b6 <_ZN6Logger23getDistanceArrayPointerEv>
 8002f92:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	69db      	ldr	r3, [r3, #28]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f001 fa18 	bl	80043ce <_ZN6Logger20getThetaArrayPointerEv>
 8002f9e:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	837b      	strh	r3, [r7, #26]
 8002fa4:	8b7b      	ldrh	r3, [r7, #26]
 8002fa6:	f241 726f 	movw	r2, #5999	; 0x176f
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d84b      	bhi.n	8003046 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xfa>
		temp_distance = p_distance[i];
 8002fae:	8b7b      	ldrh	r3, [r7, #26]
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8002fba:	8b7b      	ldrh	r3, [r7, #26]
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8002fc6:	edd7 7a07 	vldr	s15, [r7, #28]
 8002fca:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fd2:	d101      	bne.n	8002fd8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x8c>
 8002fd4:	4b35      	ldr	r3, [pc, #212]	; (80030ac <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x160>)
 8002fd6:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 8002fd8:	ed97 7a02 	vldr	s14, [r7, #8]
 8002fdc:	edd7 7a07 	vldr	s15, [r7, #28]
 8002fe0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002fe4:	eeb0 0a66 	vmov.f32	s0, s13
 8002fe8:	f7ff fb9a 	bl	8002720 <_ZSt3absf>
 8002fec:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 8002ff0:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ff4:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80030b0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x164>
 8002ff8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003000:	db01      	blt.n	8003006 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xba>
 8003002:	4b2c      	ldr	r3, [pc, #176]	; (80030b4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x168>)
 8003004:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 8003006:	8b7c      	ldrh	r4, [r7, #26]
 8003008:	ed97 0a05 	vldr	s0, [r7, #20]
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f7ff fe9f 	bl	8002d50 <_ZN9LineTrace15radius2VelocityEf>
 8003012:	eef0 7a40 	vmov.f32	s15, s0
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 800301c:	3314      	adds	r3, #20
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4413      	add	r3, r2
 8003022:	3304      	adds	r3, #4
 8003024:	edc3 7a00 	vstr	s15, [r3]

		ref_delta_distances_[i] = p_distance[i]; //copy
 8003028:	8b7b      	ldrh	r3, [r7, #26]
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	441a      	add	r2, r3
 8003030:	8b7b      	ldrh	r3, [r7, #26]
 8003032:	6812      	ldr	r2, [r2, #0]
 8003034:	6879      	ldr	r1, [r7, #4]
 8003036:	3324      	adds	r3, #36	; 0x24
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	440b      	add	r3, r1
 800303c:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 800303e:	8b7b      	ldrh	r3, [r7, #26]
 8003040:	3301      	adds	r3, #1
 8003042:	837b      	strh	r3, [r7, #26]
 8003044:	e7ae      	b.n	8002fa4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x58>
	}

	// ----- Decelerate processing -----//
	decelerateProcessing(max_dec_, p_distance);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800304c:	3358      	adds	r3, #88	; 0x58
 800304e:	edd3 7a00 	vldr	s15, [r3]
 8003052:	6939      	ldr	r1, [r7, #16]
 8003054:	eeb0 0a67 	vmov.f32	s0, s15
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 f831 	bl	80030c0 <_ZN9LineTrace20decelerateProcessingEfPKf>
	// ----- Accelerate processing -----//
	accelerateProcessing(max_acc_, p_distance);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003064:	3354      	adds	r3, #84	; 0x54
 8003066:	edd3 7a00 	vldr	s15, [r3]
 800306a:	6939      	ldr	r1, [r7, #16]
 800306c:	eeb0 0a67 	vmov.f32	s0, s15
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 f8cd 	bl	8003210 <_ZN9LineTrace20accelerateProcessingEfPKf>

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 800307c:	3354      	adds	r3, #84	; 0x54
 800307e:	2200      	movs	r2, #0
 8003080:	9200      	str	r2, [sp, #0]
 8003082:	f241 7270 	movw	r2, #6000	; 0x1770
 8003086:	490c      	ldr	r1, [pc, #48]	; (80030b8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x16c>)
 8003088:	4805      	ldr	r0, [pc, #20]	; (80030a0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x154>)
 800308a:	f7fe fabb 	bl	8001604 <sd_write_array_float>

}
 800308e:	bf00      	nop
 8003090:	3724      	adds	r7, #36	; 0x24
 8003092:	46bd      	mov	sp, r7
 8003094:	bd90      	pop	{r4, r7, pc}
 8003096:	bf00      	nop
 8003098:	08018c48 	.word	0x08018c48
 800309c:	08018c54 	.word	0x08018c54
 80030a0:	08018c3c 	.word	0x08018c3c
 80030a4:	08018c64 	.word	0x08018c64
 80030a8:	08018c74 	.word	0x08018c74
 80030ac:	3727c5ac 	.word	0x3727c5ac
 80030b0:	459c4000 	.word	0x459c4000
 80030b4:	459c4000 	.word	0x459c4000
 80030b8:	08018c2c 	.word	0x08018c2c
 80030bc:	00000000 	.word	0x00000000

080030c0 <_ZN9LineTrace20decelerateProcessingEfPKf>:

void LineTrace::decelerateProcessing(const float am, const float *p_distance)
{
 80030c0:	b5b0      	push	{r4, r5, r7, lr}
 80030c2:	b088      	sub	sp, #32
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80030cc:	6079      	str	r1, [r7, #4]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 80030ce:	f241 736f 	movw	r3, #5999	; 0x176f
 80030d2:	83fb      	strh	r3, [r7, #30]
 80030d4:	8bfb      	ldrh	r3, [r7, #30]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f000 8091 	beq.w	80031fe <_ZN9LineTrace20decelerateProcessingEfPKf+0x13e>
		float v_diff = velocity_table_[i-1] - velocity_table_[i];
 80030dc:	8bfb      	ldrh	r3, [r7, #30]
 80030de:	3b01      	subs	r3, #1
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 80030e6:	3314      	adds	r3, #20
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	4413      	add	r3, r2
 80030ec:	3304      	adds	r3, #4
 80030ee:	ed93 7a00 	vldr	s14, [r3]
 80030f2:	8bfb      	ldrh	r3, [r7, #30]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 80030fa:	3314      	adds	r3, #20
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	4413      	add	r3, r2
 8003100:	3304      	adds	r3, #4
 8003102:	edd3 7a00 	vldr	s15, [r3]
 8003106:	ee77 7a67 	vsub.f32	s15, s14, s15
 800310a:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 800310e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003112:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800311a:	dd6c      	ble.n	80031f6 <_ZN9LineTrace20decelerateProcessingEfPKf+0x136>
			float t = p_distance[i]*1e-3 / v_diff;
 800311c:	8bfb      	ldrh	r3, [r7, #30]
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	4413      	add	r3, r2
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f7fd fa26 	bl	8000578 <__aeabi_f2d>
 800312c:	a336      	add	r3, pc, #216	; (adr r3, 8003208 <_ZN9LineTrace20decelerateProcessingEfPKf+0x148>)
 800312e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003132:	f7fd fa79 	bl	8000628 <__aeabi_dmul>
 8003136:	4603      	mov	r3, r0
 8003138:	460c      	mov	r4, r1
 800313a:	4625      	mov	r5, r4
 800313c:	461c      	mov	r4, r3
 800313e:	69b8      	ldr	r0, [r7, #24]
 8003140:	f7fd fa1a 	bl	8000578 <__aeabi_f2d>
 8003144:	4602      	mov	r2, r0
 8003146:	460b      	mov	r3, r1
 8003148:	4620      	mov	r0, r4
 800314a:	4629      	mov	r1, r5
 800314c:	f7fd fb96 	bl	800087c <__aeabi_ddiv>
 8003150:	4603      	mov	r3, r0
 8003152:	460c      	mov	r4, r1
 8003154:	4618      	mov	r0, r3
 8003156:	4621      	mov	r1, r4
 8003158:	f7fd fd5e 	bl	8000c18 <__aeabi_d2f>
 800315c:	4603      	mov	r3, r0
 800315e:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 8003160:	edd7 6a06 	vldr	s13, [r7, #24]
 8003164:	ed97 7a05 	vldr	s14, [r7, #20]
 8003168:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800316c:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 8003170:	ed97 7a04 	vldr	s14, [r7, #16]
 8003174:	edd7 7a02 	vldr	s15, [r7, #8]
 8003178:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800317c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003180:	dd39      	ble.n	80031f6 <_ZN9LineTrace20decelerateProcessingEfPKf+0x136>
				velocity_table_[i-1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 8003182:	8bfb      	ldrh	r3, [r7, #30]
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800318a:	3314      	adds	r3, #20
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	4413      	add	r3, r2
 8003190:	3304      	adds	r3, #4
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4618      	mov	r0, r3
 8003196:	f7fd f9ef 	bl	8000578 <__aeabi_f2d>
 800319a:	4604      	mov	r4, r0
 800319c:	460d      	mov	r5, r1
 800319e:	8bfb      	ldrh	r3, [r7, #30]
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	4413      	add	r3, r2
 80031a6:	ed93 7a00 	vldr	s14, [r3]
 80031aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80031ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031b2:	ee17 0a90 	vmov	r0, s15
 80031b6:	f7fd f9df 	bl	8000578 <__aeabi_f2d>
 80031ba:	a313      	add	r3, pc, #76	; (adr r3, 8003208 <_ZN9LineTrace20decelerateProcessingEfPKf+0x148>)
 80031bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c0:	f7fd fa32 	bl	8000628 <__aeabi_dmul>
 80031c4:	4602      	mov	r2, r0
 80031c6:	460b      	mov	r3, r1
 80031c8:	4620      	mov	r0, r4
 80031ca:	4629      	mov	r1, r5
 80031cc:	f7fd f876 	bl	80002bc <__adddf3>
 80031d0:	4603      	mov	r3, r0
 80031d2:	460c      	mov	r4, r1
 80031d4:	4619      	mov	r1, r3
 80031d6:	4622      	mov	r2, r4
 80031d8:	8bfb      	ldrh	r3, [r7, #30]
 80031da:	1e5c      	subs	r4, r3, #1
 80031dc:	4608      	mov	r0, r1
 80031de:	4611      	mov	r1, r2
 80031e0:	f7fd fd1a 	bl	8000c18 <__aeabi_d2f>
 80031e4:	4601      	mov	r1, r0
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 80031ec:	3314      	adds	r3, #20
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	3304      	adds	r3, #4
 80031f4:	6019      	str	r1, [r3, #0]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 80031f6:	8bfb      	ldrh	r3, [r7, #30]
 80031f8:	3b01      	subs	r3, #1
 80031fa:	83fb      	strh	r3, [r7, #30]
 80031fc:	e76a      	b.n	80030d4 <_ZN9LineTrace20decelerateProcessingEfPKf+0x14>
			}

		}
	}

}
 80031fe:	bf00      	nop
 8003200:	3720      	adds	r7, #32
 8003202:	46bd      	mov	sp, r7
 8003204:	bdb0      	pop	{r4, r5, r7, pc}
 8003206:	bf00      	nop
 8003208:	d2f1a9fc 	.word	0xd2f1a9fc
 800320c:	3f50624d 	.word	0x3f50624d

08003210 <_ZN9LineTrace20accelerateProcessingEfPKf>:

void LineTrace::accelerateProcessing(const float am, const float *p_distance)
{
 8003210:	b5b0      	push	{r4, r5, r7, lr}
 8003212:	b088      	sub	sp, #32
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	ed87 0a02 	vstr	s0, [r7, #8]
 800321c:	6079      	str	r1, [r7, #4]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 800321e:	2300      	movs	r3, #0
 8003220:	83fb      	strh	r3, [r7, #30]
 8003222:	8bfb      	ldrh	r3, [r7, #30]
 8003224:	f241 726f 	movw	r2, #5999	; 0x176f
 8003228:	4293      	cmp	r3, r2
 800322a:	f200 8091 	bhi.w	8003350 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>
		float v_diff = velocity_table_[i+1] - velocity_table_[i];
 800322e:	8bfb      	ldrh	r3, [r7, #30]
 8003230:	3301      	adds	r3, #1
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8003238:	3314      	adds	r3, #20
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4413      	add	r3, r2
 800323e:	3304      	adds	r3, #4
 8003240:	ed93 7a00 	vldr	s14, [r3]
 8003244:	8bfb      	ldrh	r3, [r7, #30]
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800324c:	3314      	adds	r3, #20
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	3304      	adds	r3, #4
 8003254:	edd3 7a00 	vldr	s15, [r3]
 8003258:	ee77 7a67 	vsub.f32	s15, s14, s15
 800325c:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 8003260:	edd7 7a06 	vldr	s15, [r7, #24]
 8003264:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800326c:	dd6c      	ble.n	8003348 <_ZN9LineTrace20accelerateProcessingEfPKf+0x138>
			float t = p_distance[i]*1e-3 / v_diff;
 800326e:	8bfb      	ldrh	r3, [r7, #30]
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	4413      	add	r3, r2
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4618      	mov	r0, r3
 800327a:	f7fd f97d 	bl	8000578 <__aeabi_f2d>
 800327e:	a336      	add	r3, pc, #216	; (adr r3, 8003358 <_ZN9LineTrace20accelerateProcessingEfPKf+0x148>)
 8003280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003284:	f7fd f9d0 	bl	8000628 <__aeabi_dmul>
 8003288:	4603      	mov	r3, r0
 800328a:	460c      	mov	r4, r1
 800328c:	4625      	mov	r5, r4
 800328e:	461c      	mov	r4, r3
 8003290:	69b8      	ldr	r0, [r7, #24]
 8003292:	f7fd f971 	bl	8000578 <__aeabi_f2d>
 8003296:	4602      	mov	r2, r0
 8003298:	460b      	mov	r3, r1
 800329a:	4620      	mov	r0, r4
 800329c:	4629      	mov	r1, r5
 800329e:	f7fd faed 	bl	800087c <__aeabi_ddiv>
 80032a2:	4603      	mov	r3, r0
 80032a4:	460c      	mov	r4, r1
 80032a6:	4618      	mov	r0, r3
 80032a8:	4621      	mov	r1, r4
 80032aa:	f7fd fcb5 	bl	8000c18 <__aeabi_d2f>
 80032ae:	4603      	mov	r3, r0
 80032b0:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 80032b2:	edd7 6a06 	vldr	s13, [r7, #24]
 80032b6:	ed97 7a05 	vldr	s14, [r7, #20]
 80032ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032be:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 80032c2:	ed97 7a04 	vldr	s14, [r7, #16]
 80032c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80032ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032d2:	dd39      	ble.n	8003348 <_ZN9LineTrace20accelerateProcessingEfPKf+0x138>
				velocity_table_[i+1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 80032d4:	8bfb      	ldrh	r3, [r7, #30]
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 80032dc:	3314      	adds	r3, #20
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4413      	add	r3, r2
 80032e2:	3304      	adds	r3, #4
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7fd f946 	bl	8000578 <__aeabi_f2d>
 80032ec:	4604      	mov	r4, r0
 80032ee:	460d      	mov	r5, r1
 80032f0:	8bfb      	ldrh	r3, [r7, #30]
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	4413      	add	r3, r2
 80032f8:	ed93 7a00 	vldr	s14, [r3]
 80032fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8003300:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003304:	ee17 0a90 	vmov	r0, s15
 8003308:	f7fd f936 	bl	8000578 <__aeabi_f2d>
 800330c:	a312      	add	r3, pc, #72	; (adr r3, 8003358 <_ZN9LineTrace20accelerateProcessingEfPKf+0x148>)
 800330e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003312:	f7fd f989 	bl	8000628 <__aeabi_dmul>
 8003316:	4602      	mov	r2, r0
 8003318:	460b      	mov	r3, r1
 800331a:	4620      	mov	r0, r4
 800331c:	4629      	mov	r1, r5
 800331e:	f7fc ffcd 	bl	80002bc <__adddf3>
 8003322:	4603      	mov	r3, r0
 8003324:	460c      	mov	r4, r1
 8003326:	4619      	mov	r1, r3
 8003328:	4622      	mov	r2, r4
 800332a:	8bfb      	ldrh	r3, [r7, #30]
 800332c:	1c5c      	adds	r4, r3, #1
 800332e:	4608      	mov	r0, r1
 8003330:	4611      	mov	r1, r2
 8003332:	f7fd fc71 	bl	8000c18 <__aeabi_d2f>
 8003336:	4601      	mov	r1, r0
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 800333e:	3314      	adds	r3, #20
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4413      	add	r3, r2
 8003344:	3304      	adds	r3, #4
 8003346:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 8003348:	8bfb      	ldrh	r3, [r7, #30]
 800334a:	3301      	adds	r3, #1
 800334c:	83fb      	strh	r3, [r7, #30]
 800334e:	e768      	b.n	8003222 <_ZN9LineTrace20accelerateProcessingEfPKf+0x12>
			}

		}
	}

}
 8003350:	bf00      	nop
 8003352:	3720      	adds	r7, #32
 8003354:	46bd      	mov	sp, r7
 8003356:	bdb0      	pop	{r4, r5, r7, pc}
 8003358:	d2f1a9fc 	.word	0xd2f1a9fc
 800335c:	3f50624d 	.word	0x3f50624d

08003360 <_ZN9LineTrace20updateTargetVelocityEv>:

void LineTrace::updateTargetVelocity()
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
	if(velocity_play_flag_ == true){
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800336e:	3314      	adds	r3, #20
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 8087 	beq.w	8003486 <_ZN9LineTrace20updateTargetVelocityEv+0x126>
		//if(encoder_->getTotalDistance() >= ref_distance_){
			while(encoder_->getTotalDistance() >= ref_distance_){
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	4618      	mov	r0, r3
 800337e:	f7fe f875 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 8003382:	eeb0 7a40 	vmov.f32	s14, s0
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 800338c:	3350      	adds	r3, #80	; 0x50
 800338e:	edd3 7a00 	vldr	s15, [r3]
 8003392:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800339a:	bfac      	ite	ge
 800339c:	2301      	movge	r3, #1
 800339e:	2300      	movlt	r3, #0
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d025      	beq.n	80033f2 <_ZN9LineTrace20updateTargetVelocityEv+0x92>
				ref_distance_ += ref_delta_distances_[velocity_table_idx_];
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 80033ac:	3350      	adds	r3, #80	; 0x50
 80033ae:	ed93 7a00 	vldr	s14, [r3]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80033b8:	3316      	adds	r3, #22
 80033ba:	881b      	ldrh	r3, [r3, #0]
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	3324      	adds	r3, #36	; 0x24
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4413      	add	r3, r2
 80033c4:	edd3 7a00 	vldr	s15, [r3]
 80033c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 80033d2:	3350      	adds	r3, #80	; 0x50
 80033d4:	edc3 7a00 	vstr	s15, [r3]
				velocity_table_idx_++;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80033de:	3316      	adds	r3, #22
 80033e0:	881b      	ldrh	r3, [r3, #0]
 80033e2:	3301      	adds	r3, #1
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80033ec:	3316      	adds	r3, #22
 80033ee:	801a      	strh	r2, [r3, #0]
			while(encoder_->getTotalDistance() >= ref_distance_){
 80033f0:	e7c2      	b.n	8003378 <_ZN9LineTrace20updateTargetVelocityEv+0x18>
			}
		//}

		if(velocity_table_idx_ >= LOG_DATA_SIZE_DIS) velocity_table_idx_ = LOG_DATA_SIZE_DIS - 1;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80033f8:	3316      	adds	r3, #22
 80033fa:	881b      	ldrh	r3, [r3, #0]
 80033fc:	f241 726f 	movw	r2, #5999	; 0x176f
 8003400:	4293      	cmp	r3, r2
 8003402:	d906      	bls.n	8003412 <_ZN9LineTrace20updateTargetVelocityEv+0xb2>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800340a:	3316      	adds	r3, #22
 800340c:	f241 726f 	movw	r2, #5999	; 0x176f
 8003410:	801a      	strh	r2, [r3, #0]

		mon_ref_dis = ref_distance_;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8003418:	3350      	adds	r3, #80	; 0x50
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a1c      	ldr	r2, [pc, #112]	; (8003490 <_ZN9LineTrace20updateTargetVelocityEv+0x130>)
 800341e:	6013      	str	r3, [r2, #0]
		mon_current_dis = encoder_->getTotalDistance();
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	695b      	ldr	r3, [r3, #20]
 8003424:	4618      	mov	r0, r3
 8003426:	f7fe f821 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 800342a:	eef0 7a40 	vmov.f32	s15, s0
 800342e:	4b19      	ldr	r3, [pc, #100]	; (8003494 <_ZN9LineTrace20updateTargetVelocityEv+0x134>)
 8003430:	edc3 7a00 	vstr	s15, [r3]
		mon_vel_idx = velocity_table_idx_;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800343a:	3316      	adds	r3, #22
 800343c:	881a      	ldrh	r2, [r3, #0]
 800343e:	4b16      	ldr	r3, [pc, #88]	; (8003498 <_ZN9LineTrace20updateTargetVelocityEv+0x138>)
 8003440:	801a      	strh	r2, [r3, #0]

		setTargetVelocity(velocity_table_[velocity_table_idx_]);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003448:	3316      	adds	r3, #22
 800344a:	881b      	ldrh	r3, [r3, #0]
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8003452:	3314      	adds	r3, #20
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	4413      	add	r3, r2
 8003458:	3304      	adds	r3, #4
 800345a:	edd3 7a00 	vldr	s15, [r3]
 800345e:	eeb0 0a67 	vmov.f32	s0, s15
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 f985 	bl	8003772 <_ZN9LineTrace17setTargetVelocityEf>

		mon_tar_vel = velocity_table_[velocity_table_idx_];
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800346e:	3316      	adds	r3, #22
 8003470:	881b      	ldrh	r3, [r3, #0]
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8003478:	3314      	adds	r3, #20
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	4413      	add	r3, r2
 800347e:	3304      	adds	r3, #4
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a06      	ldr	r2, [pc, #24]	; (800349c <_ZN9LineTrace20updateTargetVelocityEv+0x13c>)
 8003484:	6013      	str	r3, [r2, #0]

	}
}
 8003486:	bf00      	nop
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	20000270 	.word	0x20000270
 8003494:	20000274 	.word	0x20000274
 8003498:	20000278 	.word	0x20000278
 800349c:	2000027c 	.word	0x2000027c

080034a0 <_ZN9LineTrace8isStableEv>:

bool LineTrace::isStable()
{
 80034a0:	b590      	push	{r4, r7, lr}
 80034a2:	b087      	sub	sp, #28
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
	bool ret = false;
 80034a8:	2300      	movs	r3, #0
 80034aa:	75fb      	strb	r3, [r7, #23]
	static uint16_t stable_cnt = 0;
	float temp_distance = encoder_->getDistance10mm();
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7fd ffcc 	bl	800144e <_ZN7Encoder15getDistance10mmEv>
 80034b6:	ed87 0a02 	vstr	s0, [r7, #8]
	float temp_theta = odometry_->getTheta();;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	4618      	mov	r0, r3
 80034c0:	f001 fadd 	bl	8004a7e <_ZN8Odometry8getThetaEv>
 80034c4:	ec54 3b10 	vmov	r3, r4, d0
 80034c8:	4618      	mov	r0, r3
 80034ca:	4621      	mov	r1, r4
 80034cc:	f7fd fba4 	bl	8000c18 <__aeabi_d2f>
 80034d0:	4603      	mov	r3, r0
 80034d2:	613b      	str	r3, [r7, #16]

	if(temp_theta == 0) temp_theta = 0.00001;
 80034d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80034d8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80034dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034e0:	d101      	bne.n	80034e6 <_ZN9LineTrace8isStableEv+0x46>
 80034e2:	4b23      	ldr	r3, [pc, #140]	; (8003570 <_ZN9LineTrace8isStableEv+0xd0>)
 80034e4:	613b      	str	r3, [r7, #16]
	float radius = abs(temp_distance / temp_theta);
 80034e6:	ed97 7a02 	vldr	s14, [r7, #8]
 80034ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80034ee:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80034f2:	eeb0 0a66 	vmov.f32	s0, s13
 80034f6:	f7ff f913 	bl	8002720 <_ZSt3absf>
 80034fa:	ed87 0a03 	vstr	s0, [r7, #12]
	if(radius >= 5000) radius = 5000;
 80034fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8003502:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003574 <_ZN9LineTrace8isStableEv+0xd4>
 8003506:	eef4 7ac7 	vcmpe.f32	s15, s14
 800350a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800350e:	db01      	blt.n	8003514 <_ZN9LineTrace8isStableEv+0x74>
 8003510:	4b19      	ldr	r3, [pc, #100]	; (8003578 <_ZN9LineTrace8isStableEv+0xd8>)
 8003512:	60fb      	str	r3, [r7, #12]

	if(stable_cnt_reset_flag_ == true){
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800351a:	3352      	adds	r3, #82	; 0x52
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d008      	beq.n	8003534 <_ZN9LineTrace8isStableEv+0x94>
		stable_cnt = 0;
 8003522:	4b16      	ldr	r3, [pc, #88]	; (800357c <_ZN9LineTrace8isStableEv+0xdc>)
 8003524:	2200      	movs	r2, #0
 8003526:	801a      	strh	r2, [r3, #0]
		stable_cnt_reset_flag_ = false;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800352e:	3352      	adds	r3, #82	; 0x52
 8003530:	2200      	movs	r2, #0
 8003532:	701a      	strb	r2, [r3, #0]
	}

	if(radius >= 2000){ //150
 8003534:	edd7 7a03 	vldr	s15, [r7, #12]
 8003538:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003580 <_ZN9LineTrace8isStableEv+0xe0>
 800353c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003544:	db06      	blt.n	8003554 <_ZN9LineTrace8isStableEv+0xb4>
		stable_cnt++;
 8003546:	4b0d      	ldr	r3, [pc, #52]	; (800357c <_ZN9LineTrace8isStableEv+0xdc>)
 8003548:	881b      	ldrh	r3, [r3, #0]
 800354a:	3301      	adds	r3, #1
 800354c:	b29a      	uxth	r2, r3
 800354e:	4b0b      	ldr	r3, [pc, #44]	; (800357c <_ZN9LineTrace8isStableEv+0xdc>)
 8003550:	801a      	strh	r2, [r3, #0]
 8003552:	e002      	b.n	800355a <_ZN9LineTrace8isStableEv+0xba>
	}
	else{
		stable_cnt = 0;
 8003554:	4b09      	ldr	r3, [pc, #36]	; (800357c <_ZN9LineTrace8isStableEv+0xdc>)
 8003556:	2200      	movs	r2, #0
 8003558:	801a      	strh	r2, [r3, #0]
	}

	if(stable_cnt >= 23){ //230mm
 800355a:	4b08      	ldr	r3, [pc, #32]	; (800357c <_ZN9LineTrace8isStableEv+0xdc>)
 800355c:	881b      	ldrh	r3, [r3, #0]
 800355e:	2b16      	cmp	r3, #22
 8003560:	d901      	bls.n	8003566 <_ZN9LineTrace8isStableEv+0xc6>
		ret = true;
 8003562:	2301      	movs	r3, #1
 8003564:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 8003566:	7dfb      	ldrb	r3, [r7, #23]
}
 8003568:	4618      	mov	r0, r3
 800356a:	371c      	adds	r7, #28
 800356c:	46bd      	mov	sp, r7
 800356e:	bd90      	pop	{r4, r7, pc}
 8003570:	3727c5ac 	.word	0x3727c5ac
 8003574:	459c4000 	.word	0x459c4000
 8003578:	459c4000 	.word	0x459c4000
 800357c:	20000290 	.word	0x20000290
 8003580:	44fa0000 	.word	0x44fa0000

08003584 <_ZN9LineTrace4initEv>:

// -------public---------- //
void LineTrace::init()
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b08c      	sub	sp, #48	; 0x30
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 800358c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003590:	2201      	movs	r2, #1
 8003592:	4942      	ldr	r1, [pc, #264]	; (800369c <_ZN9LineTrace4initEv+0x118>)
 8003594:	4842      	ldr	r0, [pc, #264]	; (80036a0 <_ZN9LineTrace4initEv+0x11c>)
 8003596:	f7fe f89b 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 800359a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800359e:	2201      	movs	r2, #1
 80035a0:	4940      	ldr	r1, [pc, #256]	; (80036a4 <_ZN9LineTrace4initEv+0x120>)
 80035a2:	483f      	ldr	r0, [pc, #252]	; (80036a0 <_ZN9LineTrace4initEv+0x11c>)
 80035a4:	f7fe f894 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 80035a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035ac:	2201      	movs	r2, #1
 80035ae:	493e      	ldr	r1, [pc, #248]	; (80036a8 <_ZN9LineTrace4initEv+0x124>)
 80035b0:	483b      	ldr	r0, [pc, #236]	; (80036a0 <_ZN9LineTrace4initEv+0x11c>)
 80035b2:	f7fe f88d 	bl	80016d0 <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 80035b6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80035ba:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80035be:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80035c2:	eeb0 1a66 	vmov.f32	s2, s13
 80035c6:	eef0 0a47 	vmov.f32	s1, s14
 80035ca:	eeb0 0a67 	vmov.f32	s0, s15
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f87a 	bl	80036c8 <_ZN9LineTrace7setGainEfff>

	float temp_velocity, temp_max_velocity, temp_max_velocity2, temp_min_velocity, temp_min_velocity2;
	sd_read_array_float("PARAMS", "TARVEL1.TXT", 1, &temp_velocity);
 80035d4:	f107 0320 	add.w	r3, r7, #32
 80035d8:	2201      	movs	r2, #1
 80035da:	4934      	ldr	r1, [pc, #208]	; (80036ac <_ZN9LineTrace4initEv+0x128>)
 80035dc:	4830      	ldr	r0, [pc, #192]	; (80036a0 <_ZN9LineTrace4initEv+0x11c>)
 80035de:	f7fe f877 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL2.TXT", 1, &temp_max_velocity);
 80035e2:	f107 031c 	add.w	r3, r7, #28
 80035e6:	2201      	movs	r2, #1
 80035e8:	4931      	ldr	r1, [pc, #196]	; (80036b0 <_ZN9LineTrace4initEv+0x12c>)
 80035ea:	482d      	ldr	r0, [pc, #180]	; (80036a0 <_ZN9LineTrace4initEv+0x11c>)
 80035ec:	f7fe f870 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL3.TXT", 1, &temp_max_velocity2);
 80035f0:	f107 0318 	add.w	r3, r7, #24
 80035f4:	2201      	movs	r2, #1
 80035f6:	492f      	ldr	r1, [pc, #188]	; (80036b4 <_ZN9LineTrace4initEv+0x130>)
 80035f8:	4829      	ldr	r0, [pc, #164]	; (80036a0 <_ZN9LineTrace4initEv+0x11c>)
 80035fa:	f7fe f869 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL.TXT", 1, &temp_min_velocity);
 80035fe:	f107 0314 	add.w	r3, r7, #20
 8003602:	2201      	movs	r2, #1
 8003604:	492c      	ldr	r1, [pc, #176]	; (80036b8 <_ZN9LineTrace4initEv+0x134>)
 8003606:	4826      	ldr	r0, [pc, #152]	; (80036a0 <_ZN9LineTrace4initEv+0x11c>)
 8003608:	f7fe f862 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL2.TXT", 1, &temp_min_velocity2);
 800360c:	f107 0310 	add.w	r3, r7, #16
 8003610:	2201      	movs	r2, #1
 8003612:	492a      	ldr	r1, [pc, #168]	; (80036bc <_ZN9LineTrace4initEv+0x138>)
 8003614:	4822      	ldr	r0, [pc, #136]	; (80036a0 <_ZN9LineTrace4initEv+0x11c>)
 8003616:	f7fe f85b 	bl	80016d0 <sd_read_array_float>
	setTargetVelocity(temp_velocity);
 800361a:	edd7 7a08 	vldr	s15, [r7, #32]
 800361e:	eeb0 0a67 	vmov.f32	s0, s15
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f8a5 	bl	8003772 <_ZN9LineTrace17setTargetVelocityEf>
	setMaxVelocity(temp_max_velocity);
 8003628:	edd7 7a07 	vldr	s15, [r7, #28]
 800362c:	eeb0 0a67 	vmov.f32	s0, s15
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 f8ad 	bl	8003790 <_ZN9LineTrace14setMaxVelocityEf>
	setMaxVelocity2(temp_max_velocity2);
 8003636:	edd7 7a06 	vldr	s15, [r7, #24]
 800363a:	eeb0 0a67 	vmov.f32	s0, s15
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 f8b5 	bl	80037ae <_ZN9LineTrace15setMaxVelocity2Ef>
	setMinVelocity(temp_min_velocity);
 8003644:	edd7 7a05 	vldr	s15, [r7, #20]
 8003648:	eeb0 0a67 	vmov.f32	s0, s15
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 f8be 	bl	80037ce <_ZN9LineTrace14setMinVelocityEf>
	setMinVelocity2(temp_min_velocity2);
 8003652:	edd7 7a04 	vldr	s15, [r7, #16]
 8003656:	eeb0 0a67 	vmov.f32	s0, s15
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f8c7 	bl	80037ee <_ZN9LineTrace15setMinVelocity2Ef>

	float temp_acc, temp_dec;
	sd_read_array_float("PARAMS", "ACC.TXT", 1, &temp_acc);
 8003660:	f107 030c 	add.w	r3, r7, #12
 8003664:	2201      	movs	r2, #1
 8003666:	4916      	ldr	r1, [pc, #88]	; (80036c0 <_ZN9LineTrace4initEv+0x13c>)
 8003668:	480d      	ldr	r0, [pc, #52]	; (80036a0 <_ZN9LineTrace4initEv+0x11c>)
 800366a:	f7fe f831 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC.TXT", 1, &temp_dec);
 800366e:	f107 0308 	add.w	r3, r7, #8
 8003672:	2201      	movs	r2, #1
 8003674:	4913      	ldr	r1, [pc, #76]	; (80036c4 <_ZN9LineTrace4initEv+0x140>)
 8003676:	480a      	ldr	r0, [pc, #40]	; (80036a0 <_ZN9LineTrace4initEv+0x11c>)
 8003678:	f7fe f82a 	bl	80016d0 <sd_read_array_float>
	setMaxAccDec(temp_acc, temp_dec);
 800367c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003680:	ed97 7a02 	vldr	s14, [r7, #8]
 8003684:	eef0 0a47 	vmov.f32	s1, s14
 8003688:	eeb0 0a67 	vmov.f32	s0, s15
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 f90c 	bl	80038aa <_ZN9LineTrace12setMaxAccDecEff>
}
 8003692:	bf00      	nop
 8003694:	3730      	adds	r7, #48	; 0x30
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	08018c80 	.word	0x08018c80
 80036a0:	08018c88 	.word	0x08018c88
 80036a4:	08018c90 	.word	0x08018c90
 80036a8:	08018c98 	.word	0x08018c98
 80036ac:	08018ca0 	.word	0x08018ca0
 80036b0:	08018cac 	.word	0x08018cac
 80036b4:	08018cb8 	.word	0x08018cb8
 80036b8:	08018cc4 	.word	0x08018cc4
 80036bc:	08018cd0 	.word	0x08018cd0
 80036c0:	08018cdc 	.word	0x08018cdc
 80036c4:	08018ce4 	.word	0x08018ce4

080036c8 <_ZN9LineTrace7setGainEfff>:

void LineTrace::setGain(float kp, float ki, float kd)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	ed87 0a02 	vstr	s0, [r7, #8]
 80036d4:	edc7 0a01 	vstr	s1, [r7, #4]
 80036d8:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	68ba      	ldr	r2, [r7, #8]
 80036e0:	625a      	str	r2, [r3, #36]	; 0x24
	ki_ = ki;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	62da      	str	r2, [r3, #44]	; 0x2c
	kd_ = kd;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036ee:	bf00      	nop
 80036f0:	3714      	adds	r7, #20
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr

080036fa <_ZN9LineTrace5getKpEv>:
	ki_velo_ = ki;
	kd_velo_ = kd;
}

float LineTrace::getKp()
{
 80036fa:	b480      	push	{r7}
 80036fc:	b083      	sub	sp, #12
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
	return kp_;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003706:	ee07 3a90 	vmov	s15, r3
}
 800370a:	eeb0 0a67 	vmov.f32	s0, s15
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
	return ki_;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003724:	ee07 3a90 	vmov	s15, r3
}
 8003728:	eeb0 0a67 	vmov.f32	s0, s15
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 8003736:	b480      	push	{r7}
 8003738:	b083      	sub	sp, #12
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
	return kd_;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003742:	ee07 3a90 	vmov	s15, r3
}
 8003746:	eeb0 0a67 	vmov.f32	s0, s15
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <_ZN9LineTrace14setNormalRatioEf>:
{
	return kd_velo_;
}

void LineTrace::setNormalRatio(float ratio)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003766:	bf00      	nop
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr

08003772 <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8003772:	b480      	push	{r7}
 8003774:	b083      	sub	sp, #12
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
 800377a:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	683a      	ldr	r2, [r7, #0]
 8003782:	679a      	str	r2, [r3, #120]	; 0x78
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <_ZN9LineTrace14setMaxVelocityEf>:

void LineTrace::setMaxVelocity(float velocity)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	ed87 0a00 	vstr	s0, [r7]
	max_velocity_ = velocity;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80037a2:	bf00      	nop
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <_ZN9LineTrace15setMaxVelocity2Ef>:

void LineTrace::setMaxVelocity2(float velocity)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b083      	sub	sp, #12
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
 80037b6:	ed87 0a00 	vstr	s0, [r7]
	max_velocity2_ = velocity;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	683a      	ldr	r2, [r7, #0]
 80037be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 80037c2:	bf00      	nop
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr

080037ce <_ZN9LineTrace14setMinVelocityEf>:

void LineTrace::setMinVelocity(float velocity)
{
 80037ce:	b480      	push	{r7}
 80037d0:	b083      	sub	sp, #12
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
 80037d6:	ed87 0a00 	vstr	s0, [r7]
	min_velocity_ = velocity;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	683a      	ldr	r2, [r7, #0]
 80037de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80037e2:	bf00      	nop
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr

080037ee <_ZN9LineTrace15setMinVelocity2Ef>:

void LineTrace::setMinVelocity2(float velocity)
{
 80037ee:	b480      	push	{r7}
 80037f0:	b083      	sub	sp, #12
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
 80037f6:	ed87 0a00 	vstr	s0, [r7]
	min_velocity2_ = velocity;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	683a      	ldr	r2, [r7, #0]
 80037fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8003802:	bf00      	nop
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr

0800380e <_ZN9LineTrace17getTargetVelocityEv>:
float LineTrace::getTargetVelocity()
{
 800380e:	b480      	push	{r7}
 8003810:	b083      	sub	sp, #12
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
	return target_velocity_;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800381a:	ee07 3a90 	vmov	s15, r3
}
 800381e:	eeb0 0a67 	vmov.f32	s0, s15
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <_ZN9LineTrace14getMaxVelocityEv>:

float LineTrace::getMaxVelocity()
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
	return max_velocity_;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003838:	ee07 3a90 	vmov	s15, r3
}
 800383c:	eeb0 0a67 	vmov.f32	s0, s15
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr

0800384a <_ZN9LineTrace15getMaxVelocity2Ev>:

float LineTrace::getMaxVelocity2()
{
 800384a:	b480      	push	{r7}
 800384c:	b083      	sub	sp, #12
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
	return max_velocity2_;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003858:	ee07 3a90 	vmov	s15, r3
}
 800385c:	eeb0 0a67 	vmov.f32	s0, s15
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr

0800386a <_ZN9LineTrace14getMinVelocityEv>:

float LineTrace::getMinVelocity()
{
 800386a:	b480      	push	{r7}
 800386c:	b083      	sub	sp, #12
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
	return min_velocity_;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003878:	ee07 3a90 	vmov	s15, r3
}
 800387c:	eeb0 0a67 	vmov.f32	s0, s15
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr

0800388a <_ZN9LineTrace15getMinVelocity2Ev>:

float LineTrace::getMinVelocity2()
{
 800388a:	b480      	push	{r7}
 800388c:	b083      	sub	sp, #12
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
	return min_velocity2_;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003898:	ee07 3a90 	vmov	s15, r3
}
 800389c:	eeb0 0a67 	vmov.f32	s0, s15
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr

080038aa <_ZN9LineTrace12setMaxAccDecEff>:
void LineTrace::setMaxAccDec(const float acc, const float dec)
{
 80038aa:	b480      	push	{r7}
 80038ac:	b085      	sub	sp, #20
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	60f8      	str	r0, [r7, #12]
 80038b2:	ed87 0a02 	vstr	s0, [r7, #8]
 80038b6:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc_ = acc;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80038c0:	3354      	adds	r3, #84	; 0x54
 80038c2:	68ba      	ldr	r2, [r7, #8]
 80038c4:	601a      	str	r2, [r3, #0]
	max_dec_ = dec;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80038cc:	3358      	adds	r3, #88	; 0x58
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	601a      	str	r2, [r3, #0]
}
 80038d2:	bf00      	nop
 80038d4:	3714      	adds	r7, #20
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr

080038de <_ZN9LineTrace9getMaxAccEv>:

float LineTrace::getMaxAcc()
{
 80038de:	b480      	push	{r7}
 80038e0:	b083      	sub	sp, #12
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
	return max_acc_;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80038ec:	3354      	adds	r3, #84	; 0x54
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	ee07 3a90 	vmov	s15, r3
}
 80038f4:	eeb0 0a67 	vmov.f32	s0, s15
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr

08003902 <_ZN9LineTrace9getMaxDecEv>:

float LineTrace::getMaxDec()
{
 8003902:	b480      	push	{r7}
 8003904:	b083      	sub	sp, #12
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
	return max_dec_;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003910:	3358      	adds	r3, #88	; 0x58
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	ee07 3a90 	vmov	s15, r3
}
 8003918:	eeb0 0a67 	vmov.f32	s0, s15
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
	...

08003928 <_ZN9LineTrace4flipEv>:
void LineTrace::flip()
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 80fc 	beq.w	8003b34 <_ZN9LineTrace4flipEv+0x20c>
		// ---- line following processing -----//
		pidTrace();
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f7ff f88f 	bl	8002a60 <_ZN9LineTrace8pidTraceEv>
		//pidAngularVelocityTrace();
		//steeringAngleTrace();


		if(isTargetDistance(10) == true){
 8003942:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 fa9a 	bl	8003e80 <_ZN9LineTrace16isTargetDistanceEf>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d028      	beq.n	80039a4 <_ZN9LineTrace4flipEv+0x7c>
			// ---- Store Logs ------//
			storeLogs();
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f9f8 	bl	8003d48 <_ZN9LineTrace9storeLogsEv>

			// -------- Detect Robot stabilization ------//
			if(isStable() == true && (~(side_sensor_->getStatus()) & 0x02) == 0x02){ // Stabilizing and side sensor is black
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f7ff fda1 	bl	80034a0 <_ZN9LineTrace8isStableEv>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00c      	beq.n	800397e <_ZN9LineTrace4flipEv+0x56>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	4618      	mov	r0, r3
 800396a:	f001 fb27 	bl	8004fbc <_ZN10SideSensor9getStatusEv>
 800396e:	4603      	mov	r3, r0
 8003970:	43db      	mvns	r3, r3
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b02      	cmp	r3, #2
 8003978:	d101      	bne.n	800397e <_ZN9LineTrace4flipEv+0x56>
 800397a:	2301      	movs	r3, #1
 800397c:	e000      	b.n	8003980 <_ZN9LineTrace4flipEv+0x58>
 800397e:	2300      	movs	r3, #0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d005      	beq.n	8003990 <_ZN9LineTrace4flipEv+0x68>
				stable_flag_ = true;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800398a:	3351      	adds	r3, #81	; 0x51
 800398c:	2201      	movs	r2, #1
 800398e:	701a      	strb	r2, [r3, #0]
			}

			// ---reset total cnt ---//
			encoder_->clearDistance10mm();
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	4618      	mov	r0, r3
 8003996:	f7fd fd87 	bl	80014a8 <_ZN7Encoder17clearDistance10mmEv>
			odometry_->clearPotition();
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	4618      	mov	r0, r3
 80039a0:	f001 f87e 	bl	8004aa0 <_ZN8Odometry13clearPotitionEv>
		}

		// ---- Target Velocity Updata ------//
		updateTargetVelocity();
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f7ff fcdb 	bl	8003360 <_ZN9LineTrace20updateTargetVelocityEv>

		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f7ff f910 	bl	8002bd0 <_ZN9LineTrace11isCrossLineEv>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d009      	beq.n	80039ca <_ZN9LineTrace4flipEv+0xa2>
			side_sensor_->enableIgnore();
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f001 fb26 	bl	800500c <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearCrossLineIgnoreDistance();
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	695b      	ldr	r3, [r3, #20]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7fd fd9a 	bl	80014fe <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
		}

		if(side_sensor_->getIgnoreFlag() == true && encoder_->getCrossLineIgnoreDistance() >= 200){
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f001 fb36 	bl	8005040 <_ZN10SideSensor13getIgnoreFlagEv>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00f      	beq.n	80039fa <_ZN9LineTrace4flipEv+0xd2>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	4618      	mov	r0, r3
 80039e0:	f7fd fd7e 	bl	80014e0 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 80039e4:	eeb0 7a40 	vmov.f32	s14, s0
 80039e8:	eddf 7a54 	vldr	s15, [pc, #336]	; 8003b3c <_ZN9LineTrace4flipEv+0x214>
 80039ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039f4:	db01      	blt.n	80039fa <_ZN9LineTrace4flipEv+0xd2>
 80039f6:	2301      	movs	r3, #1
 80039f8:	e000      	b.n	80039fc <_ZN9LineTrace4flipEv+0xd4>
 80039fa:	2300      	movs	r3, #0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d004      	beq.n	8003a0a <_ZN9LineTrace4flipEv+0xe2>
			side_sensor_->disableIgnore();
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f001 fb0e 	bl	8005026 <_ZN10SideSensor13disableIgnoreEv>

		}

		// ------- Store side line distance ------//
		if(stable_flag_ == true && (side_sensor_->getStatus() & 0x02) == 0x02){ //stabilizing and side sensor is white
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003a10:	3351      	adds	r3, #81	; 0x51
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00b      	beq.n	8003a30 <_ZN9LineTrace4flipEv+0x108>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f001 facd 	bl	8004fbc <_ZN10SideSensor9getStatusEv>
 8003a22:	4603      	mov	r3, r0
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d101      	bne.n	8003a30 <_ZN9LineTrace4flipEv+0x108>
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e000      	b.n	8003a32 <_ZN9LineTrace4flipEv+0x10a>
 8003a30:	2300      	movs	r3, #0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d020      	beq.n	8003a78 <_ZN9LineTrace4flipEv+0x150>
			//storeSideLineDistance();
			if(mode_selector_ == FIRST_RUNNING){
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003a3c:	3318      	adds	r3, #24
 8003a3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d103      	bne.n	8003a4e <_ZN9LineTrace4flipEv+0x126>
				storeSideLineDistance();
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 fa73 	bl	8003f32 <_ZN9LineTrace21storeSideLineDistanceEv>
 8003a4c:	e008      	b.n	8003a60 <_ZN9LineTrace4flipEv+0x138>
			}
			else{
				correctionTotalDistanceFromSideMarker();
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 fade 	bl	8004010 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>
				correction_check_cnt_ = 0;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003a5a:	335c      	adds	r3, #92	; 0x5c
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	801a      	strh	r2, [r3, #0]
			}

			stable_flag_ = false;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003a66:	3351      	adds	r3, #81	; 0x51
 8003a68:	2200      	movs	r2, #0
 8003a6a:	701a      	strb	r2, [r3, #0]
			stable_cnt_reset_flag_ = true;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003a72:	3352      	adds	r3, #82	; 0x52
 8003a74:	2201      	movs	r2, #1
 8003a76:	701a      	strb	r2, [r3, #0]
		}

		if(stable_flag_ == true) led_.LR(-1, 1);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003a7e:	3351      	adds	r3, #81	; 0x51
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d008      	beq.n	8003a98 <_ZN9LineTrace4flipEv+0x170>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	330c      	adds	r3, #12
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f04f 31ff 	mov.w	r1, #4294967295
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7fe faef 	bl	8002074 <_ZN3LED2LREaa>
 8003a96:	e007      	b.n	8003aa8 <_ZN9LineTrace4flipEv+0x180>
		else led_.LR(-1, 0);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	330c      	adds	r3, #12
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f04f 31ff 	mov.w	r1, #4294967295
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7fe fae6 	bl	8002074 <_ZN3LED2LREaa>

		// ----- emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7fe fde1 	bl	8002674 <_ZN10LineSensor13emergencyStopEv>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d008      	beq.n	8003aca <_ZN9LineTrace4flipEv+0x1a2>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	eddf 0a20 	vldr	s1, [pc, #128]	; 8003b40 <_ZN9LineTrace4flipEv+0x218>
 8003ac0:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8003b40 <_ZN9LineTrace4flipEv+0x218>
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f001 fd0b 	bl	80054e0 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
		}
		else{
			//led_.LR(0, -1);
		}

		correction_check_cnt_++;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003ad0:	335c      	adds	r3, #92	; 0x5c
 8003ad2:	881b      	ldrh	r3, [r3, #0]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003ade:	335c      	adds	r3, #92	; 0x5c
 8003ae0:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_ >= 10000) correction_check_cnt_ = 10000;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003ae8:	335c      	adds	r3, #92	; 0x5c
 8003aea:	881b      	ldrh	r3, [r3, #0]
 8003aec:	f242 720f 	movw	r2, #9999	; 0x270f
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d906      	bls.n	8003b02 <_ZN9LineTrace4flipEv+0x1da>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003afa:	335c      	adds	r3, #92	; 0x5c
 8003afc:	f242 7210 	movw	r2, #10000	; 0x2710
 8003b00:	801a      	strh	r2, [r3, #0]

		if(correction_check_cnt_ <= 500) led_.LR(-1, 1);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003b08:	335c      	adds	r3, #92	; 0x5c
 8003b0a:	881b      	ldrh	r3, [r3, #0]
 8003b0c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003b10:	d808      	bhi.n	8003b24 <_ZN9LineTrace4flipEv+0x1fc>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	330c      	adds	r3, #12
 8003b16:	2201      	movs	r2, #1
 8003b18:	f04f 31ff 	mov.w	r1, #4294967295
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7fe faa9 	bl	8002074 <_ZN3LED2LREaa>
		else led_.LR(-1, 0);
	}
}
 8003b22:	e007      	b.n	8003b34 <_ZN9LineTrace4flipEv+0x20c>
		else led_.LR(-1, 0);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	330c      	adds	r3, #12
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f04f 31ff 	mov.w	r1, #4294967295
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7fe faa0 	bl	8002074 <_ZN3LED2LREaa>
}
 8003b34:	bf00      	nop
 8003b36:	3708      	adds	r7, #8
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	43480000 	.word	0x43480000
 8003b40:	00000000 	.word	0x00000000

08003b44 <_ZN9LineTrace5startEv>:
		odometry_->clearPotition();
	}
}

void LineTrace::start()
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	i_reset_flag_ = true;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	velocity_ctrl_->start();
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f001 fd16 	bl	8005592 <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f001 fa3e 	bl	8004fec <_ZN10SideSensor17resetWhiteLineCntEv>
	crossline_idx_ = 0;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003b76:	334c      	adds	r3, #76	; 0x4c
 8003b78:	2200      	movs	r2, #0
 8003b7a:	801a      	strh	r2, [r3, #0]
	sideline_idx_ = 0;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003b82:	334e      	adds	r3, #78	; 0x4e
 8003b84:	2200      	movs	r2, #0
 8003b86:	801a      	strh	r2, [r3, #0]
}
 8003b88:	bf00      	nop
 8003b8a:	3708      	adds	r7, #8
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af02      	add	r7, sp, #8
 8003b96:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	velocity_ctrl_->stop();
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f001 fd07 	bl	80055b8 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	330c      	adds	r3, #12
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7fe fa5d 	bl	8002074 <_ZN3LED2LREaa>
	if(mode_selector_ == FIRST_RUNNING){ //First running
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003bc0:	3318      	adds	r3, #24
 8003bc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d107      	bne.n	8003bda <_ZN9LineTrace4stopEv+0x4a>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	69d8      	ldr	r0, [r3, #28]
 8003bce:	4b1d      	ldr	r3, [pc, #116]	; (8003c44 <_ZN9LineTrace4stopEv+0xb4>)
 8003bd0:	4a1d      	ldr	r2, [pc, #116]	; (8003c48 <_ZN9LineTrace4stopEv+0xb8>)
 8003bd2:	491e      	ldr	r1, [pc, #120]	; (8003c4c <_ZN9LineTrace4stopEv+0xbc>)
 8003bd4:	f000 fc30 	bl	8004438 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
 8003bd8:	e006      	b.n	8003be8 <_ZN9LineTrace4stopEv+0x58>
	}
	else{//Secondary run
		logger_->saveDistanceAndTheta2("COURSLOG", "DISTANC2.TXT", "THETA2.TXT");
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	69d8      	ldr	r0, [r3, #28]
 8003bde:	4b1c      	ldr	r3, [pc, #112]	; (8003c50 <_ZN9LineTrace4stopEv+0xc0>)
 8003be0:	4a1c      	ldr	r2, [pc, #112]	; (8003c54 <_ZN9LineTrace4stopEv+0xc4>)
 8003be2:	491a      	ldr	r1, [pc, #104]	; (8003c4c <_ZN9LineTrace4stopEv+0xbc>)
 8003be4:	f000 fc4b 	bl	800447e <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>
	}
	sd_write_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_, OVER_WRITE);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003bee:	331c      	adds	r3, #28
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	9200      	str	r2, [sp, #0]
 8003bf4:	2264      	movs	r2, #100	; 0x64
 8003bf6:	4918      	ldr	r1, [pc, #96]	; (8003c58 <_ZN9LineTrace4stopEv+0xc8>)
 8003bf8:	4814      	ldr	r0, [pc, #80]	; (8003c4c <_ZN9LineTrace4stopEv+0xbc>)
 8003bfa:	f7fd fd03 	bl	8001604 <sd_write_array_float>
	sd_write_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_, OVER_WRITE);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 8003c04:	33ac      	adds	r3, #172	; 0xac
 8003c06:	2200      	movs	r2, #0
 8003c08:	9200      	str	r2, [sp, #0]
 8003c0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c0e:	4913      	ldr	r1, [pc, #76]	; (8003c5c <_ZN9LineTrace4stopEv+0xcc>)
 8003c10:	480e      	ldr	r0, [pc, #56]	; (8003c4c <_ZN9LineTrace4stopEv+0xbc>)
 8003c12:	f7fd fcf7 	bl	8001604 <sd_write_array_float>

	led_.LR(-1, 0);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	330c      	adds	r3, #12
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7fe fa27 	bl	8002074 <_ZN3LED2LREaa>

	logger_->resetIdx();
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	69db      	ldr	r3, [r3, #28]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f000 fcb5 	bl	800459a <_ZN6Logger8resetIdxEv>
	logger_->resetLogs2();
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	69db      	ldr	r3, [r3, #28]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f000 fc63 	bl	8004500 <_ZN6Logger10resetLogs2Ev>
}
 8003c3a:	bf00      	nop
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	08018c48 	.word	0x08018c48
 8003c48:	08018c54 	.word	0x08018c54
 8003c4c:	08018c3c 	.word	0x08018c3c
 8003c50:	08018cec 	.word	0x08018cec
 8003c54:	08018cf8 	.word	0x08018cf8
 8003c58:	08018c64 	.word	0x08018c64
 8003c5c:	08018c74 	.word	0x08018c74

08003c60 <_ZN9LineTrace7runningEv>:

void LineTrace::running()
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	737b      	strb	r3, [r7, #13]
	start();
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f7ff ff67 	bl	8003b44 <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 8003c76:	7b7b      	ldrb	r3, [r7, #13]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d15b      	bne.n	8003d34 <_ZN9LineTrace7runningEv+0xd4>
		switch(stage){
 8003c7c:	89fb      	ldrh	r3, [r7, #14]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d002      	beq.n	8003c88 <_ZN9LineTrace7runningEv+0x28>
 8003c82:	2b0a      	cmp	r3, #10
 8003c84:	d030      	beq.n	8003ce8 <_ZN9LineTrace7runningEv+0x88>
 8003c86:	e054      	b.n	8003d32 <_ZN9LineTrace7runningEv+0xd2>
		case 0:
			if(side_sensor_->getWhiteLineCntR() == 1){
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f001 f9a1 	bl	8004fd4 <_ZN10SideSensor16getWhiteLineCntREv>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	bf0c      	ite	eq
 8003c98:	2301      	moveq	r3, #1
 8003c9a:	2300      	movne	r3, #0
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d044      	beq.n	8003d2c <_ZN9LineTrace7runningEv+0xcc>
				}
				else{ // Other than first running
					startVelocityPlay();
				}
				*/
				loggerStart();
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f7fe ff68 	bl	8002b78 <_ZN9LineTrace11loggerStartEv>
				if(mode_selector_ != FIRST_RUNNING){ // Other than first running
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003cae:	3318      	adds	r3, #24
 8003cb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d002      	beq.n	8003cbe <_ZN9LineTrace7runningEv+0x5e>
					startVelocityPlay();
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 f89f 	bl	8003dfc <_ZN9LineTrace17startVelocityPlayEv>
				}

				encoder_->clearCrossLineIgnoreDistance();
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7fd fc1b 	bl	80014fe <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				encoder_->clearTotalDistance();
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7fd fbf9 	bl	80014c4 <_ZN7Encoder18clearTotalDistanceEv>
				led_.LR(0, -1);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	330c      	adds	r3, #12
 8003cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8003cda:	2100      	movs	r1, #0
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7fe f9c9 	bl	8002074 <_ZN3LED2LREaa>
				stage = 10;
 8003ce2:	230a      	movs	r3, #10
 8003ce4:	81fb      	strh	r3, [r7, #14]
			}

			break;
 8003ce6:	e021      	b.n	8003d2c <_ZN9LineTrace7runningEv+0xcc>

		case 10:
			if(side_sensor_->getWhiteLineCntR() == 2){
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f001 f971 	bl	8004fd4 <_ZN10SideSensor16getWhiteLineCntREv>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	bf0c      	ite	eq
 8003cf8:	2301      	moveq	r3, #1
 8003cfa:	2300      	movne	r3, #0
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d016      	beq.n	8003d30 <_ZN9LineTrace7runningEv+0xd0>
				loggerStop();
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f7fe ff53 	bl	8002bae <_ZN9LineTrace10loggerStopEv>
				stopVelocityPlay();
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 f88a 	bl	8003e22 <_ZN9LineTrace16stopVelocityPlayEv>
				HAL_Delay(100); //Run through after the goal
 8003d0e:	2064      	movs	r0, #100	; 0x64
 8003d10:	f004 ffea 	bl	8008ce8 <HAL_Delay>

				setTargetVelocity(0);
 8003d14:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8003d44 <_ZN9LineTrace7runningEv+0xe4>
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f7ff fd2a 	bl	8003772 <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 8003d1e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003d22:	f004 ffe1 	bl	8008ce8 <HAL_Delay>

				goal_flag = true;
 8003d26:	2301      	movs	r3, #1
 8003d28:	737b      	strb	r3, [r7, #13]

			}

			break;
 8003d2a:	e001      	b.n	8003d30 <_ZN9LineTrace7runningEv+0xd0>
			break;
 8003d2c:	bf00      	nop
 8003d2e:	e7a2      	b.n	8003c76 <_ZN9LineTrace7runningEv+0x16>
			break;
 8003d30:	bf00      	nop
	while(goal_flag == false){
 8003d32:	e7a0      	b.n	8003c76 <_ZN9LineTrace7runningEv+0x16>
		}
	}

	stop();
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f7ff ff2b 	bl	8003b90 <_ZN9LineTrace4stopEv>
}
 8003d3a:	bf00      	nop
 8003d3c:	3710      	adds	r7, #16
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	00000000 	.word	0x00000000

08003d48 <_ZN9LineTrace9storeLogsEv>:

void LineTrace::storeLogs()
{
 8003d48:	b590      	push	{r4, r7, lr}
 8003d4a:	ed2d 8b02 	vpush	{d8}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true){
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d046      	beq.n	8003dec <_ZN9LineTrace9storeLogsEv+0xa4>
		if(mode_selector_ == FIRST_RUNNING)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003d64:	3318      	adds	r3, #24
 8003d66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d11c      	bne.n	8003da8 <_ZN9LineTrace9storeLogsEv+0x60>
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getTheta());
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	69dc      	ldr	r4, [r3, #28]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7fd fb69 	bl	800144e <_ZN7Encoder15getDistance10mmEv>
 8003d7c:	eeb0 8a40 	vmov.f32	s16, s0
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	4618      	mov	r0, r3
 8003d86:	f000 fe7a 	bl	8004a7e <_ZN8Odometry8getThetaEv>
 8003d8a:	ec53 2b10 	vmov	r2, r3, d0
 8003d8e:	4610      	mov	r0, r2
 8003d90:	4619      	mov	r1, r3
 8003d92:	f7fc ff41 	bl	8000c18 <__aeabi_d2f>
 8003d96:	4603      	mov	r3, r0
 8003d98:	ee00 3a90 	vmov	s1, r3
 8003d9c:	eeb0 0a48 	vmov.f32	s0, s16
 8003da0:	4620      	mov	r0, r4
 8003da2:	f000 fa78 	bl	8004296 <_ZN6Logger21storeDistanceAndThetaEff>
 8003da6:	e01b      	b.n	8003de0 <_ZN9LineTrace9storeLogsEv+0x98>
		else
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());
			//logger_->storeDistanceAndTheta2(encoder_->getTotalDistance(), odometry_->getTheta());
			logger_->storeDistanceAndTheta2(velocity_ctrl_->getCurrentVelocity(), odometry_->getTheta());
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	69dc      	ldr	r4, [r3, #28]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f001 fc1d 	bl	80055f0 <_ZN12VelocityCtrl18getCurrentVelocityEv>
 8003db6:	eeb0 8a40 	vmov.f32	s16, s0
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f000 fe5d 	bl	8004a7e <_ZN8Odometry8getThetaEv>
 8003dc4:	ec53 2b10 	vmov	r2, r3, d0
 8003dc8:	4610      	mov	r0, r2
 8003dca:	4619      	mov	r1, r3
 8003dcc:	f7fc ff24 	bl	8000c18 <__aeabi_d2f>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	ee00 3a90 	vmov	s1, r3
 8003dd6:	eeb0 0a48 	vmov.f32	s0, s16
 8003dda:	4620      	mov	r0, r4
 8003ddc:	f000 faa2 	bl	8004324 <_ZN6Logger22storeDistanceAndTheta2Eff>

		mon_store_cnt++;
 8003de0:	4b05      	ldr	r3, [pc, #20]	; (8003df8 <_ZN9LineTrace9storeLogsEv+0xb0>)
 8003de2:	881b      	ldrh	r3, [r3, #0]
 8003de4:	3301      	adds	r3, #1
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	4b03      	ldr	r3, [pc, #12]	; (8003df8 <_ZN9LineTrace9storeLogsEv+0xb0>)
 8003dea:	801a      	strh	r2, [r3, #0]
	}
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	ecbd 8b02 	vpop	{d8}
 8003df6:	bd90      	pop	{r4, r7, pc}
 8003df8:	20000264 	.word	0x20000264

08003dfc <_ZN9LineTrace17startVelocityPlayEv>:

void LineTrace::startVelocityPlay()
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalDistance();
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7fd fb5b 	bl	80014c4 <_ZN7Encoder18clearTotalDistanceEv>
	velocity_play_flag_ = true;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003e14:	3314      	adds	r3, #20
 8003e16:	2201      	movs	r2, #1
 8003e18:	701a      	strb	r2, [r3, #0]
}
 8003e1a:	bf00      	nop
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <_ZN9LineTrace16stopVelocityPlayEv>:

void LineTrace::stopVelocityPlay()
{
 8003e22:	b480      	push	{r7}
 8003e24:	b083      	sub	sp, #12
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
	velocity_play_flag_ = false;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003e30:	3314      	adds	r3, #20
 8003e32:	2200      	movs	r2, #0
 8003e34:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003e3c:	3316      	adds	r3, #22
 8003e3e:	2200      	movs	r2, #0
 8003e40:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8003e48:	3350      	adds	r3, #80	; 0x50
 8003e4a:	f04f 0200 	mov.w	r2, #0
 8003e4e:	601a      	str	r2, [r3, #0]
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <_ZN9LineTrace7setModeEs>:

void LineTrace::setMode(int16_t mode)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	460b      	mov	r3, r1
 8003e66:	807b      	strh	r3, [r7, #2]
	mode_selector_ = mode;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003e6e:	3318      	adds	r3, #24
 8003e70:	887a      	ldrh	r2, [r7, #2]
 8003e72:	801a      	strh	r2, [r3, #0]
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <_ZN9LineTrace16isTargetDistanceEf>:

bool LineTrace::isTargetDistance(float target_distance)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	ed87 0a00 	vstr	s0, [r7]
	bool ret = false;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	73fb      	strb	r3, [r7, #15]
	if(encoder_->getDistance10mm() >= target_distance){
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7fd fada 	bl	800144e <_ZN7Encoder15getDistance10mmEv>
 8003e9a:	eeb0 7a40 	vmov.f32	s14, s0
 8003e9e:	edd7 7a00 	vldr	s15, [r7]
 8003ea2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eaa:	bf94      	ite	ls
 8003eac:	2301      	movls	r3, #1
 8003eae:	2300      	movhi	r3, #0
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <_ZN9LineTrace16isTargetDistanceEf+0x3a>
		ret = true;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8003eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3710      	adds	r7, #16
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <_ZN9LineTrace22storeCrossLineDistanceEv>:

void LineTrace::storeCrossLineDistance()
{
 8003ec4:	b590      	push	{r4, r7, lr}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
	crossline_distance_[crossline_idx_] = encoder_->getTotalDistance();
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	695a      	ldr	r2, [r3, #20]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003ed6:	334c      	adds	r3, #76	; 0x4c
 8003ed8:	881b      	ldrh	r3, [r3, #0]
 8003eda:	461c      	mov	r4, r3
 8003edc:	4610      	mov	r0, r2
 8003ede:	f7fd fac5 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 8003ee2:	eef0 7a40 	vmov.f32	s15, s0
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	f504 533c 	add.w	r3, r4, #12032	; 0x2f00
 8003eec:	3306      	adds	r3, #6
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	4413      	add	r3, r2
 8003ef2:	3304      	adds	r3, #4
 8003ef4:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx_++;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003efe:	334c      	adds	r3, #76	; 0x4c
 8003f00:	881b      	ldrh	r3, [r3, #0]
 8003f02:	3301      	adds	r3, #1
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003f0c:	334c      	adds	r3, #76	; 0x4c
 8003f0e:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003f16:	334c      	adds	r3, #76	; 0x4c
 8003f18:	881b      	ldrh	r3, [r3, #0]
 8003f1a:	2b63      	cmp	r3, #99	; 0x63
 8003f1c:	d905      	bls.n	8003f2a <_ZN9LineTrace22storeCrossLineDistanceEv+0x66>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003f24:	334c      	adds	r3, #76	; 0x4c
 8003f26:	2263      	movs	r2, #99	; 0x63
 8003f28:	801a      	strh	r2, [r3, #0]
}
 8003f2a:	bf00      	nop
 8003f2c:	370c      	adds	r7, #12
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd90      	pop	{r4, r7, pc}

08003f32 <_ZN9LineTrace21storeSideLineDistanceEv>:

void LineTrace::storeSideLineDistance()
{
 8003f32:	b590      	push	{r4, r7, lr}
 8003f34:	b083      	sub	sp, #12
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
	sideline_distance_[sideline_idx_] = encoder_->getTotalDistance();
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	695a      	ldr	r2, [r3, #20]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003f44:	334e      	adds	r3, #78	; 0x4e
 8003f46:	881b      	ldrh	r3, [r3, #0]
 8003f48:	461c      	mov	r4, r3
 8003f4a:	4610      	mov	r0, r2
 8003f4c:	f7fd fa8e 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 8003f50:	eef0 7a40 	vmov.f32	s15, s0
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	f504 533d 	add.w	r3, r4, #12096	; 0x2f40
 8003f5a:	332a      	adds	r3, #42	; 0x2a
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	4413      	add	r3, r2
 8003f60:	3304      	adds	r3, #4
 8003f62:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx_++;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003f6c:	334e      	adds	r3, #78	; 0x4e
 8003f6e:	881b      	ldrh	r3, [r3, #0]
 8003f70:	3301      	adds	r3, #1
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003f7a:	334e      	adds	r3, #78	; 0x4e
 8003f7c:	801a      	strh	r2, [r3, #0]

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003f84:	334e      	adds	r3, #78	; 0x4e
 8003f86:	881b      	ldrh	r3, [r3, #0]
 8003f88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f8c:	d306      	bcc.n	8003f9c <_ZN9LineTrace21storeSideLineDistanceEv+0x6a>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003f94:	334e      	adds	r3, #78	; 0x4e
 8003f96:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003f9a:	801a      	strh	r2, [r3, #0]
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd90      	pop	{r4, r7, pc}

08003fa4 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>:
void LineTrace::correctionTotalDistanceFromCrossLine()
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
	encoder_->setTotalDistance(crossline_distance_[crossline_idx_]);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6959      	ldr	r1, [r3, #20]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003fb6:	334c      	adds	r3, #76	; 0x4c
 8003fb8:	881b      	ldrh	r3, [r3, #0]
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8003fc0:	3306      	adds	r3, #6
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	4413      	add	r3, r2
 8003fc6:	3304      	adds	r3, #4
 8003fc8:	edd3 7a00 	vldr	s15, [r3]
 8003fcc:	eeb0 0a67 	vmov.f32	s0, s15
 8003fd0:	4608      	mov	r0, r1
 8003fd2:	f7fd fa5a 	bl	800148a <_ZN7Encoder16setTotalDistanceEf>
	crossline_idx_++;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003fdc:	334c      	adds	r3, #76	; 0x4c
 8003fde:	881b      	ldrh	r3, [r3, #0]
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003fea:	334c      	adds	r3, #76	; 0x4c
 8003fec:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003ff4:	334c      	adds	r3, #76	; 0x4c
 8003ff6:	881b      	ldrh	r3, [r3, #0]
 8003ff8:	2b63      	cmp	r3, #99	; 0x63
 8003ffa:	d905      	bls.n	8004008 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0x64>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004002:	334c      	adds	r3, #76	; 0x4c
 8004004:	2263      	movs	r2, #99	; 0x63
 8004006:	801a      	strh	r2, [r3, #0]

}
 8004008:	bf00      	nop
 800400a:	3708      	adds	r7, #8
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>:

void LineTrace::correctionTotalDistanceFromSideMarker()
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b086      	sub	sp, #24
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8004018:	2300      	movs	r3, #0
 800401a:	82fb      	strh	r3, [r7, #22]
 800401c:	8afb      	ldrh	r3, [r7, #22]
 800401e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004022:	d239      	bcs.n	8004098 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x88>
		float temp_sideline_distance = sideline_distance_[i];
 8004024:	8afb      	ldrh	r3, [r7, #22]
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 800402c:	332a      	adds	r3, #42	; 0x2a
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	4413      	add	r3, r2
 8004032:	3304      	adds	r3, #4
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	613b      	str	r3, [r7, #16]
		float diff = abs(temp_sideline_distance - encoder_->getTotalDistance());
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	695b      	ldr	r3, [r3, #20]
 800403c:	4618      	mov	r0, r3
 800403e:	f7fd fa15 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 8004042:	eeb0 7a40 	vmov.f32	s14, s0
 8004046:	edd7 7a04 	vldr	s15, [r7, #16]
 800404a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800404e:	eeb0 0a67 	vmov.f32	s0, s15
 8004052:	f7fe fb65 	bl	8002720 <_ZSt3absf>
 8004056:	ed87 0a03 	vstr	s0, [r7, #12]
		if(diff <= 80){
 800405a:	edd7 7a03 	vldr	s15, [r7, #12]
 800405e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80040c0 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xb0>
 8004062:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800406a:	d811      	bhi.n	8004090 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x80>
			encoder_->setTotalDistance(sideline_distance_[i]);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6959      	ldr	r1, [r3, #20]
 8004070:	8afb      	ldrh	r3, [r7, #22]
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8004078:	332a      	adds	r3, #42	; 0x2a
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	4413      	add	r3, r2
 800407e:	3304      	adds	r3, #4
 8004080:	edd3 7a00 	vldr	s15, [r3]
 8004084:	eeb0 0a67 	vmov.f32	s0, s15
 8004088:	4608      	mov	r0, r1
 800408a:	f7fd f9fe 	bl	800148a <_ZN7Encoder16setTotalDistanceEf>
			break;
 800408e:	e003      	b.n	8004098 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x88>
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8004090:	8afb      	ldrh	r3, [r7, #22]
 8004092:	3301      	adds	r3, #1
 8004094:	82fb      	strh	r3, [r7, #22]
 8004096:	e7c1      	b.n	800401c <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xc>
		}
	}

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800409e:	334e      	adds	r3, #78	; 0x4e
 80040a0:	881b      	ldrh	r3, [r3, #0]
 80040a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040a6:	d306      	bcc.n	80040b6 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xa6>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80040ae:	334e      	adds	r3, #78	; 0x4e
 80040b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80040b4:	801a      	strh	r2, [r3, #0]

}
 80040b6:	bf00      	nop
 80040b8:	3718      	adds	r7, #24
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	42a00000 	.word	0x42a00000

080040c4 <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_dis_(0){}
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80040d2:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80040d6:	2200      	movs	r2, #0
 80040d8:	701a      	strb	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80040e0:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 80040e4:	2200      	movs	r2, #0
 80040e6:	801a      	strh	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80040ee:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80040f2:	2200      	movs	r2, #0
 80040f4:	801a      	strh	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80040fc:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004100:	2200      	movs	r2, #0
 8004102:	801a      	strh	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4618      	mov	r0, r3
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
	...

08004114 <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
	bool ret = false;
 800411c:	2300      	movs	r3, #0
 800411e:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 8004120:	f7fd fb62 	bl	80017e8 <sd_mount>
 8004124:	4603      	mov	r3, r0
 8004126:	2b01      	cmp	r3, #1
 8004128:	bf0c      	ite	eq
 800412a:	2301      	moveq	r3, #1
 800412c:	2300      	movne	r3, #0
 800412e:	b2db      	uxtb	r3, r3
 8004130:	2b00      	cmp	r3, #0
 8004132:	d016      	beq.n	8004162 <_ZN6Logger10sdCardInitEv+0x4e>
	  //printf("mount success\r\n");

	  lcd_clear();
 8004134:	f7fc ffb4 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8004138:	2100      	movs	r1, #0
 800413a:	2000      	movs	r0, #0
 800413c:	f7fc ffc0 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8004140:	4815      	ldr	r0, [pc, #84]	; (8004198 <_ZN6Logger10sdCardInitEv+0x84>)
 8004142:	f7fc ffe7 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8004146:	2101      	movs	r1, #1
 8004148:	2000      	movs	r0, #0
 800414a:	f7fc ffb9 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 800414e:	4813      	ldr	r0, [pc, #76]	; (800419c <_ZN6Logger10sdCardInitEv+0x88>)
 8004150:	f7fc ffe0 	bl	8001114 <lcd_printf>
	  HAL_Delay(500);
 8004154:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004158:	f004 fdc6 	bl	8008ce8 <HAL_Delay>

	  ret = true;
 800415c:	2301      	movs	r3, #1
 800415e:	73fb      	strb	r3, [r7, #15]
 8004160:	e015      	b.n	800418e <_ZN6Logger10sdCardInitEv+0x7a>
	}
	else{
	  //printf("mount error\r\n");

	  lcd_clear();
 8004162:	f7fc ff9d 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8004166:	2100      	movs	r1, #0
 8004168:	2000      	movs	r0, #0
 800416a:	f7fc ffa9 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 800416e:	480a      	ldr	r0, [pc, #40]	; (8004198 <_ZN6Logger10sdCardInitEv+0x84>)
 8004170:	f7fc ffd0 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8004174:	2101      	movs	r1, #1
 8004176:	2000      	movs	r0, #0
 8004178:	f7fc ffa2 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 800417c:	4808      	ldr	r0, [pc, #32]	; (80041a0 <_ZN6Logger10sdCardInitEv+0x8c>)
 800417e:	f7fc ffc9 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 8004182:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004186:	f004 fdaf 	bl	8008ce8 <HAL_Delay>

	  ret = false;
 800418a:	2300      	movs	r3, #0
 800418c:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 800418e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004190:	4618      	mov	r0, r3
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	08018d08 	.word	0x08018d08
 800419c:	08018d14 	.word	0x08018d14
 80041a0:	08018d1c 	.word	0x08018d1c

080041a4 <_ZN6Logger8storeLogEf>:

	}

}
void Logger::storeLog(float data)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80041b6:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d027      	beq.n	8004210 <_ZN6Logger8storeLogEf+0x6c>
		store_data_float_[log_index_tim_] = data;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80041c6:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 80041ca:	881b      	ldrh	r3, [r3, #0]
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	4413      	add	r3, r2
 80041d2:	683a      	ldr	r2, [r7, #0]
 80041d4:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80041dc:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 80041e0:	881b      	ldrh	r3, [r3, #0]
 80041e2:	3301      	adds	r3, #1
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80041ec:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 80041f0:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80041f8:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 80041fc:	881b      	ldrh	r3, [r3, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d006      	beq.n	8004210 <_ZN6Logger8storeLogEf+0x6c>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004208:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 800420c:	2200      	movs	r2, #0
 800420e:	801a      	strh	r2, [r3, #0]
	}
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <_ZN6Logger9storeLog2Ef>:
void Logger::storeLog2(float data)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800422e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d028      	beq.n	800428a <_ZN6Logger9storeLog2Ef+0x6e>
		store_data_float2_[log_index_tim2_] = data;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800423e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8004242:	881b      	ldrh	r3, [r3, #0]
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	4413      	add	r3, r2
 800424a:	3304      	adds	r3, #4
 800424c:	683a      	ldr	r2, [r7, #0]
 800424e:	601a      	str	r2, [r3, #0]

		log_index_tim2_++;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004256:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800425a:	881b      	ldrh	r3, [r3, #0]
 800425c:	3301      	adds	r3, #1
 800425e:	b29a      	uxth	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004266:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800426a:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004272:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8004276:	881b      	ldrh	r3, [r3, #0]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d006      	beq.n	800428a <_ZN6Logger9storeLog2Ef+0x6e>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004282:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8004286:	2200      	movs	r2, #0
 8004288:	801a      	strh	r2, [r3, #0]
	}
}
 800428a:	bf00      	nop
 800428c:	370c      	adds	r7, #12
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr

08004296 <_ZN6Logger21storeDistanceAndThetaEff>:
{

}

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 8004296:	b480      	push	{r7}
 8004298:	b085      	sub	sp, #20
 800429a:	af00      	add	r7, sp, #0
 800429c:	60f8      	str	r0, [r7, #12]
 800429e:	ed87 0a02 	vstr	s0, [r7, #8]
 80042a2:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80042ac:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80042b0:	881b      	ldrh	r3, [r3, #0]
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	3302      	adds	r3, #2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	4413      	add	r3, r2
 80042ba:	68ba      	ldr	r2, [r7, #8]
 80042bc:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80042c4:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80042c8:	881b      	ldrh	r3, [r3, #0]
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 80042d0:	3312      	adds	r3, #18
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	4413      	add	r3, r2
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80042e0:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80042e4:	881b      	ldrh	r3, [r3, #0]
 80042e6:	3301      	adds	r3, #1
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80042f0:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80042f4:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80042fc:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004300:	881b      	ldrh	r3, [r3, #0]
 8004302:	f241 726f 	movw	r2, #5999	; 0x176f
 8004306:	4293      	cmp	r3, r2
 8004308:	d906      	bls.n	8004318 <_ZN6Logger21storeDistanceAndThetaEff+0x82>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004310:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004314:	2200      	movs	r2, #0
 8004316:	801a      	strh	r2, [r3, #0]
	//}
}
 8004318:	bf00      	nop
 800431a:	3714      	adds	r7, #20
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <_ZN6Logger22storeDistanceAndTheta2Eff>:

void Logger::storeDistanceAndTheta2(float distance, float theta)
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	ed87 0a02 	vstr	s0, [r7, #8]
 8004330:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance2_[log_index_dis_] = distance;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800433a:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800433e:	881b      	ldrh	r3, [r3, #0]
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8004346:	3322      	adds	r3, #34	; 0x22
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	4413      	add	r3, r2
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	601a      	str	r2, [r3, #0]
		store_theta2_[log_index_dis_] = theta;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004356:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800435a:	881b      	ldrh	r3, [r3, #0]
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	f503 438c 	add.w	r3, r3, #17920	; 0x4600
 8004362:	3352      	adds	r3, #82	; 0x52
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	4413      	add	r3, r2
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004372:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004376:	881b      	ldrh	r3, [r3, #0]
 8004378:	3301      	adds	r3, #1
 800437a:	b29a      	uxth	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004382:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004386:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800438e:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004392:	881b      	ldrh	r3, [r3, #0]
 8004394:	f241 726f 	movw	r2, #5999	; 0x176f
 8004398:	4293      	cmp	r3, r2
 800439a:	d906      	bls.n	80043aa <_ZN6Logger22storeDistanceAndTheta2Eff+0x86>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80043a2:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80043a6:	2200      	movs	r2, #0
 80043a8:	801a      	strh	r2, [r3, #0]
	//}
}
 80043aa:	bf00      	nop
 80043ac:	3714      	adds	r7, #20
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr

080043b6 <_ZN6Logger23getDistanceArrayPointerEv>:
const float *Logger::getDistanceArrayPointer()
{
 80043b6:	b480      	push	{r7}
 80043b8:	b083      	sub	sp, #12
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
	return store_distance_;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	3308      	adds	r3, #8
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr

080043ce <_ZN6Logger20getThetaArrayPointerEv>:

const float *Logger::getThetaArrayPointer()
{
 80043ce:	b480      	push	{r7}
 80043d0:	b083      	sub	sp, #12
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
	return store_theta_;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 80043dc:	3348      	adds	r3, #72	; 0x48
}
 80043de:	4618      	mov	r0, r3
 80043e0:	370c      	adds	r7, #12
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr

080043ea <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b086      	sub	sp, #24
 80043ee:	af02      	add	r7, sp, #8
 80043f0:	60f8      	str	r0, [r7, #12]
 80043f2:	60b9      	str	r1, [r7, #8]
 80043f4:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	2300      	movs	r3, #0
 80043fa:	9300      	str	r3, [sp, #0]
 80043fc:	4613      	mov	r3, r2
 80043fe:	2201      	movs	r2, #1
 8004400:	6879      	ldr	r1, [r7, #4]
 8004402:	68b8      	ldr	r0, [r7, #8]
 8004404:	f7fd f8fe 	bl	8001604 <sd_write_array_float>
}
 8004408:	bf00      	nop
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <_ZN6Logger9saveLogs2EPKcS1_>:
void Logger::saveLogs2(const char *folder_name, const char *file_name)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b086      	sub	sp, #24
 8004414:	af02      	add	r7, sp, #8
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	1d1a      	adds	r2, r3, #4
 8004420:	2300      	movs	r3, #0
 8004422:	9300      	str	r3, [sp, #0]
 8004424:	4613      	mov	r3, r2
 8004426:	2201      	movs	r2, #1
 8004428:	6879      	ldr	r1, [r7, #4]
 800442a:	68b8      	ldr	r0, [r7, #8]
 800442c:	f7fd f8ea 	bl	8001604 <sd_write_array_float>
}
 8004430:	bf00      	nop
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:

void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af02      	add	r7, sp, #8
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]
 8004444:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f103 0208 	add.w	r2, r3, #8
 800444c:	2300      	movs	r3, #0
 800444e:	9300      	str	r3, [sp, #0]
 8004450:	4613      	mov	r3, r2
 8004452:	f241 7270 	movw	r2, #6000	; 0x1770
 8004456:	6879      	ldr	r1, [r7, #4]
 8004458:	68b8      	ldr	r0, [r7, #8]
 800445a:	f7fd f8d3 	bl	8001604 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004464:	3348      	adds	r3, #72	; 0x48
 8004466:	2200      	movs	r2, #0
 8004468:	9200      	str	r2, [sp, #0]
 800446a:	f241 7270 	movw	r2, #6000	; 0x1770
 800446e:	6839      	ldr	r1, [r7, #0]
 8004470:	68b8      	ldr	r0, [r7, #8]
 8004472:	f7fd f8c7 	bl	8001604 <sd_write_array_float>
}
 8004476:	bf00      	nop
 8004478:	3710      	adds	r7, #16
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>:

void Logger::saveDistanceAndTheta2(const char *folder_name, const char *file_name1, const char *file_name2)
{
 800447e:	b580      	push	{r7, lr}
 8004480:	b086      	sub	sp, #24
 8004482:	af02      	add	r7, sp, #8
 8004484:	60f8      	str	r0, [r7, #12]
 8004486:	60b9      	str	r1, [r7, #8]
 8004488:	607a      	str	r2, [r7, #4]
 800448a:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance2_, OVER_WRITE); //write
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004492:	3388      	adds	r3, #136	; 0x88
 8004494:	2200      	movs	r2, #0
 8004496:	9200      	str	r2, [sp, #0]
 8004498:	f241 7270 	movw	r2, #6000	; 0x1770
 800449c:	6879      	ldr	r1, [r7, #4]
 800449e:	68b8      	ldr	r0, [r7, #8]
 80044a0:	f7fd f8b0 	bl	8001604 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta2_, OVER_WRITE); //write
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80044aa:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80044ae:	2200      	movs	r2, #0
 80044b0:	9200      	str	r2, [sp, #0]
 80044b2:	f241 7270 	movw	r2, #6000	; 0x1770
 80044b6:	6839      	ldr	r1, [r7, #0]
 80044b8:	68b8      	ldr	r0, [r7, #8]
 80044ba:	f7fd f8a3 	bl	8001604 <sd_write_array_float>
}
 80044be:	bf00      	nop
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>:

void Logger::importDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b084      	sub	sp, #16
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	60f8      	str	r0, [r7, #12]
 80044ce:	60b9      	str	r1, [r7, #8]
 80044d0:	607a      	str	r2, [r7, #4]
 80044d2:	603b      	str	r3, [r7, #0]
	sd_read_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_); //read
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	3308      	adds	r3, #8
 80044d8:	f241 7270 	movw	r2, #6000	; 0x1770
 80044dc:	6879      	ldr	r1, [r7, #4]
 80044de:	68b8      	ldr	r0, [r7, #8]
 80044e0:	f7fd f8f6 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_); //read
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 80044ea:	3348      	adds	r3, #72	; 0x48
 80044ec:	f241 7270 	movw	r2, #6000	; 0x1770
 80044f0:	6839      	ldr	r1, [r7, #0]
 80044f2:	68b8      	ldr	r0, [r7, #8]
 80044f4:	f7fd f8ec 	bl	80016d0 <sd_read_array_float>
}
 80044f8:	bf00      	nop
 80044fa:	3710      	adds	r7, #16
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <_ZN6Logger10resetLogs2Ev>:
	log_index_tim_ = 0;
	log_index_dis_ = 0;
}

void Logger::resetLogs2()
{
 8004500:	b480      	push	{r7}
 8004502:	b08b      	sub	sp, #44	; 0x2c
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
	for(auto &log : store_distance2_){
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 800450e:	3388      	adds	r3, #136	; 0x88
 8004510:	61fb      	str	r3, [r7, #28]
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	627b      	str	r3, [r7, #36]	; 0x24
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 800451c:	3340      	adds	r3, #64	; 0x40
 800451e:	61bb      	str	r3, [r7, #24]
 8004520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	429a      	cmp	r2, r3
 8004526:	d009      	beq.n	800453c <_ZN6Logger10resetLogs2Ev+0x3c>
 8004528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452a:	617b      	str	r3, [r7, #20]
		log = 0;
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	f04f 0200 	mov.w	r2, #0
 8004532:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance2_){
 8004534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004536:	3304      	adds	r3, #4
 8004538:	627b      	str	r3, [r7, #36]	; 0x24
 800453a:	e7f1      	b.n	8004520 <_ZN6Logger10resetLogs2Ev+0x20>
	}
	for(auto &log : store_theta2_){
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004542:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8004546:	613b      	str	r3, [r7, #16]
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	623b      	str	r3, [r7, #32]
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004552:	3340      	adds	r3, #64	; 0x40
 8004554:	60fb      	str	r3, [r7, #12]
 8004556:	6a3a      	ldr	r2, [r7, #32]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	429a      	cmp	r2, r3
 800455c:	d009      	beq.n	8004572 <_ZN6Logger10resetLogs2Ev+0x72>
 800455e:	6a3b      	ldr	r3, [r7, #32]
 8004560:	60bb      	str	r3, [r7, #8]
		log = 0;
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	f04f 0200 	mov.w	r2, #0
 8004568:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta2_){
 800456a:	6a3b      	ldr	r3, [r7, #32]
 800456c:	3304      	adds	r3, #4
 800456e:	623b      	str	r3, [r7, #32]
 8004570:	e7f1      	b.n	8004556 <_ZN6Logger10resetLogs2Ev+0x56>
	}

	log_index_tim_ = 0;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004578:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 800457c:	2200      	movs	r2, #0
 800457e:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004586:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800458a:	2200      	movs	r2, #0
 800458c:	801a      	strh	r2, [r3, #0]
}
 800458e:	bf00      	nop
 8004590:	372c      	adds	r7, #44	; 0x2c
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr

0800459a <_ZN6Logger8resetIdxEv>:
void Logger::resetIdx()
{
 800459a:	b480      	push	{r7}
 800459c:	b083      	sub	sp, #12
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80045a8:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 80045ac:	2200      	movs	r2, #0
 80045ae:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80045b6:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80045ba:	2200      	movs	r2, #0
 80045bc:	801a      	strh	r2, [r3, #0]
}
 80045be:	bf00      	nop
 80045c0:	370c      	adds	r7, #12
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr

080045ca <_ZN6Logger5startEv>:

void Logger::start()
{
 80045ca:	b480      	push	{r7}
 80045cc:	b083      	sub	sp, #12
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80045d8:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80045dc:	2201      	movs	r2, #1
 80045de:	701a      	strb	r2, [r3, #0]
}
 80045e0:	bf00      	nop
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <_ZN6Logger4stopEv>:

void Logger::stop()
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80045fa:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80045fe:	2200      	movs	r2, #0
 8004600:	701a      	strb	r2, [r3, #0]
}
 8004602:	bf00      	nop
 8004604:	370c      	adds	r7, #12
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr

0800460e <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 800460e:	b480      	push	{r7}
 8004610:	b083      	sub	sp, #12
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	801a      	strh	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	805a      	strh	r2, [r3, #2]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4618      	mov	r0, r3
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <_ZN5Motor4initEv>:

void Motor::init()
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8004638:	2108      	movs	r1, #8
 800463a:	4805      	ldr	r0, [pc, #20]	; (8004650 <_ZN5Motor4initEv+0x20>)
 800463c:	f009 fd04 	bl	800e048 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8004640:	210c      	movs	r1, #12
 8004642:	4803      	ldr	r0, [pc, #12]	; (8004650 <_ZN5Motor4initEv+0x20>)
 8004644:	f009 fd00 	bl	800e048 <HAL_TIM_PWM_Start>

}
 8004648:	bf00      	nop
 800464a:	3708      	adds	r7, #8
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	2003e8e0 	.word	0x2003e8e0

08004654 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004662:	2b00      	cmp	r3, #0
 8004664:	da0d      	bge.n	8004682 <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8004666:	2200      	movs	r2, #0
 8004668:	f44f 7100 	mov.w	r1, #512	; 0x200
 800466c:	481f      	ldr	r0, [pc, #124]	; (80046ec <_ZN5Motor9motorCtrlEv+0x98>)
 800466e:	f005 fdd1 	bl	800a214 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004678:	b29b      	uxth	r3, r3
 800467a:	425b      	negs	r3, r3
 800467c:	b29b      	uxth	r3, r3
 800467e:	81fb      	strh	r3, [r7, #14]
 8004680:	e00a      	b.n	8004698 <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8004682:	2201      	movs	r2, #1
 8004684:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004688:	4818      	ldr	r0, [pc, #96]	; (80046ec <_ZN5Motor9motorCtrlEv+0x98>)
 800468a:	f005 fdc3 	bl	800a214 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004694:	b29b      	uxth	r3, r3
 8004696:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	da0d      	bge.n	80046be <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 80046a2:	2201      	movs	r2, #1
 80046a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80046a8:	4810      	ldr	r0, [pc, #64]	; (80046ec <_ZN5Motor9motorCtrlEv+0x98>)
 80046aa:	f005 fdb3 	bl	800a214 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	425b      	negs	r3, r3
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	81bb      	strh	r3, [r7, #12]
 80046bc:	e00a      	b.n	80046d4 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 80046be:	2200      	movs	r2, #0
 80046c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80046c4:	4809      	ldr	r0, [pc, #36]	; (80046ec <_ZN5Motor9motorCtrlEv+0x98>)
 80046c6:	f005 fda5 	bl	800a214 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 80046d4:	89fa      	ldrh	r2, [r7, #14]
 80046d6:	4b06      	ldr	r3, [pc, #24]	; (80046f0 <_ZN5Motor9motorCtrlEv+0x9c>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 80046dc:	89ba      	ldrh	r2, [r7, #12]
 80046de:	4b04      	ldr	r3, [pc, #16]	; (80046f0 <_ZN5Motor9motorCtrlEv+0x9c>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80046e4:	bf00      	nop
 80046e6:	3710      	adds	r7, #16
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	40020c00 	.word	0x40020c00
 80046f0:	2003e8e0 	.word	0x2003e8e0

080046f4 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 80046f4:	b590      	push	{r4, r7, lr}
 80046f6:	b087      	sub	sp, #28
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6178      	str	r0, [r7, #20]
 80046fc:	ed87 0b02 	vstr	d0, [r7, #8]
 8004700:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8004704:	f04f 0200 	mov.w	r2, #0
 8004708:	4b30      	ldr	r3, [pc, #192]	; (80047cc <_ZN5Motor8setRatioEdd+0xd8>)
 800470a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800470e:	f7fc fa1b 	bl	8000b48 <__aeabi_dcmpgt>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d005      	beq.n	8004724 <_ZN5Motor8setRatioEdd+0x30>
 8004718:	f04f 0300 	mov.w	r3, #0
 800471c:	4c2b      	ldr	r4, [pc, #172]	; (80047cc <_ZN5Motor8setRatioEdd+0xd8>)
 800471e:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8004722:	e00e      	b.n	8004742 <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8004724:	f04f 0200 	mov.w	r2, #0
 8004728:	4b29      	ldr	r3, [pc, #164]	; (80047d0 <_ZN5Motor8setRatioEdd+0xdc>)
 800472a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800472e:	f7fc f9ed 	bl	8000b0c <__aeabi_dcmplt>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d004      	beq.n	8004742 <_ZN5Motor8setRatioEdd+0x4e>
 8004738:	f04f 0300 	mov.w	r3, #0
 800473c:	4c24      	ldr	r4, [pc, #144]	; (80047d0 <_ZN5Motor8setRatioEdd+0xdc>)
 800473e:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8004742:	f04f 0200 	mov.w	r2, #0
 8004746:	4b21      	ldr	r3, [pc, #132]	; (80047cc <_ZN5Motor8setRatioEdd+0xd8>)
 8004748:	e9d7 0100 	ldrd	r0, r1, [r7]
 800474c:	f7fc f9fc 	bl	8000b48 <__aeabi_dcmpgt>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d005      	beq.n	8004762 <_ZN5Motor8setRatioEdd+0x6e>
 8004756:	f04f 0300 	mov.w	r3, #0
 800475a:	4c1c      	ldr	r4, [pc, #112]	; (80047cc <_ZN5Motor8setRatioEdd+0xd8>)
 800475c:	e9c7 3400 	strd	r3, r4, [r7]
 8004760:	e00e      	b.n	8004780 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8004762:	f04f 0200 	mov.w	r2, #0
 8004766:	4b1a      	ldr	r3, [pc, #104]	; (80047d0 <_ZN5Motor8setRatioEdd+0xdc>)
 8004768:	e9d7 0100 	ldrd	r0, r1, [r7]
 800476c:	f7fc f9ce 	bl	8000b0c <__aeabi_dcmplt>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d004      	beq.n	8004780 <_ZN5Motor8setRatioEdd+0x8c>
 8004776:	f04f 0300 	mov.w	r3, #0
 800477a:	4c15      	ldr	r4, [pc, #84]	; (80047d0 <_ZN5Motor8setRatioEdd+0xdc>)
 800477c:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8004780:	f04f 0200 	mov.w	r2, #0
 8004784:	4b13      	ldr	r3, [pc, #76]	; (80047d4 <_ZN5Motor8setRatioEdd+0xe0>)
 8004786:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800478a:	f7fb ff4d 	bl	8000628 <__aeabi_dmul>
 800478e:	4603      	mov	r3, r0
 8004790:	460c      	mov	r4, r1
 8004792:	4618      	mov	r0, r3
 8004794:	4621      	mov	r1, r4
 8004796:	f7fc f9f7 	bl	8000b88 <__aeabi_d2iz>
 800479a:	4603      	mov	r3, r0
 800479c:	b21a      	sxth	r2, r3
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 80047a2:	f04f 0200 	mov.w	r2, #0
 80047a6:	4b0b      	ldr	r3, [pc, #44]	; (80047d4 <_ZN5Motor8setRatioEdd+0xe0>)
 80047a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80047ac:	f7fb ff3c 	bl	8000628 <__aeabi_dmul>
 80047b0:	4603      	mov	r3, r0
 80047b2:	460c      	mov	r4, r1
 80047b4:	4618      	mov	r0, r3
 80047b6:	4621      	mov	r1, r4
 80047b8:	f7fc f9e6 	bl	8000b88 <__aeabi_d2iz>
 80047bc:	4603      	mov	r3, r0
 80047be:	b21a      	sxth	r2, r3
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	805a      	strh	r2, [r3, #2]

}
 80047c4:	bf00      	nop
 80047c6:	371c      	adds	r7, #28
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd90      	pop	{r4, r7, pc}
 80047cc:	3ff00000 	.word	0x3ff00000
 80047d0:	bff00000 	.word	0xbff00000
 80047d4:	409c2000 	.word	0x409c2000

080047d8 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 80047d8:	b490      	push	{r4, r7}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
 80047e4:	603b      	str	r3, [r7, #0]
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	f04f 0300 	mov.w	r3, #0
 80047ec:	f04f 0400 	mov.w	r4, #0
 80047f0:	e9c2 3404 	strd	r3, r4, [r2, #16]
 80047f4:	68fa      	ldr	r2, [r7, #12]
 80047f6:	f04f 0300 	mov.w	r3, #0
 80047fa:	f04f 0400 	mov.w	r4, #0
 80047fe:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	f04f 0300 	mov.w	r3, #0
 8004808:	f04f 0400 	mov.w	r4, #0
 800480c:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	f04f 0300 	mov.w	r3, #0
 8004816:	f04f 0400 	mov.w	r4, #0
 800481a:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	f04f 0300 	mov.w	r3, #0
 8004824:	f04f 0400 	mov.w	r4, #0
 8004828:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
{
	encoder_ = encoder;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	68ba      	ldr	r2, [r7, #8]
 8004830:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	683a      	ldr	r2, [r7, #0]
 800483c:	609a      	str	r2, [r3, #8]
}
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	4618      	mov	r0, r3
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bc90      	pop	{r4, r7}
 8004848:	4770      	bx	lr
 800484a:	0000      	movs	r0, r0
 800484c:	0000      	movs	r0, r0
	...

08004850 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8004850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004854:	b086      	sub	sp, #24
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	4618      	mov	r0, r3
 8004860:	f7fd f98a 	bl	8001b78 <_ZN3IMU8getOmegaEv>
 8004864:	ee10 3a10 	vmov	r3, s0
 8004868:	4618      	mov	r0, r3
 800486a:	f7fb fe85 	bl	8000578 <__aeabi_f2d>
 800486e:	4603      	mov	r3, r0
 8004870:	460c      	mov	r4, r1
 8004872:	e9c7 3404 	strd	r3, r4, [r7, #16]
	float distance = encoder_->getDistance();
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4618      	mov	r0, r3
 800487c:	f7fc fdd8 	bl	8001430 <_ZN7Encoder11getDistanceEv>
 8004880:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 8004884:	a376      	add	r3, pc, #472	; (adr r3, 8004a60 <_ZN8Odometry12calcPotitionEv+0x210>)
 8004886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800488a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800488e:	f7fb fecb 	bl	8000628 <__aeabi_dmul>
 8004892:	4603      	mov	r3, r0
 8004894:	460c      	mov	r4, r1
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80048a2:	68f8      	ldr	r0, [r7, #12]
 80048a4:	f7fb fe68 	bl	8000578 <__aeabi_f2d>
 80048a8:	4682      	mov	sl, r0
 80048aa:	468b      	mov	fp, r1
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80048b8:	f04f 0200 	mov.w	r2, #0
 80048bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80048c0:	f7fb ffdc 	bl	800087c <__aeabi_ddiv>
 80048c4:	4602      	mov	r2, r0
 80048c6:	460b      	mov	r3, r1
 80048c8:	4640      	mov	r0, r8
 80048ca:	4649      	mov	r1, r9
 80048cc:	f7fb fcf6 	bl	80002bc <__adddf3>
 80048d0:	4602      	mov	r2, r0
 80048d2:	460b      	mov	r3, r1
 80048d4:	ec43 2b17 	vmov	d7, r2, r3
 80048d8:	eeb0 0a47 	vmov.f32	s0, s14
 80048dc:	eef0 0a67 	vmov.f32	s1, s15
 80048e0:	f00e fef6 	bl	80136d0 <cos>
 80048e4:	ec53 2b10 	vmov	r2, r3, d0
 80048e8:	4650      	mov	r0, sl
 80048ea:	4659      	mov	r1, fp
 80048ec:	f7fb fe9c 	bl	8000628 <__aeabi_dmul>
 80048f0:	4602      	mov	r2, r0
 80048f2:	460b      	mov	r3, r1
 80048f4:	4620      	mov	r0, r4
 80048f6:	4629      	mov	r1, r5
 80048f8:	f7fb fce0 	bl	80002bc <__adddf3>
 80048fc:	4603      	mov	r3, r0
 80048fe:	460c      	mov	r4, r1
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f7fb fe33 	bl	8000578 <__aeabi_f2d>
 8004912:	4682      	mov	sl, r0
 8004914:	468b      	mov	fp, r1
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004922:	f04f 0200 	mov.w	r2, #0
 8004926:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800492a:	f7fb ffa7 	bl	800087c <__aeabi_ddiv>
 800492e:	4602      	mov	r2, r0
 8004930:	460b      	mov	r3, r1
 8004932:	4640      	mov	r0, r8
 8004934:	4649      	mov	r1, r9
 8004936:	f7fb fcc1 	bl	80002bc <__adddf3>
 800493a:	4602      	mov	r2, r0
 800493c:	460b      	mov	r3, r1
 800493e:	ec43 2b17 	vmov	d7, r2, r3
 8004942:	eeb0 0a47 	vmov.f32	s0, s14
 8004946:	eef0 0a67 	vmov.f32	s1, s15
 800494a:	f00e ff05 	bl	8013758 <sin>
 800494e:	ec53 2b10 	vmov	r2, r3, d0
 8004952:	4650      	mov	r0, sl
 8004954:	4659      	mov	r1, fp
 8004956:	f7fb fe67 	bl	8000628 <__aeabi_dmul>
 800495a:	4602      	mov	r2, r0
 800495c:	460b      	mov	r3, r1
 800495e:	4620      	mov	r0, r4
 8004960:	4629      	mov	r1, r5
 8004962:	f7fb fcab 	bl	80002bc <__adddf3>
 8004966:	4603      	mov	r3, r0
 8004968:	460c      	mov	r4, r1
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_= theta_ + delta_theta_;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800497c:	461a      	mov	r2, r3
 800497e:	4623      	mov	r3, r4
 8004980:	f7fb fc9c 	bl	80002bc <__adddf3>
 8004984:	4603      	mov	r3, r0
 8004986:	460c      	mov	r4, r1
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	e9c2 3408 	strd	r3, r4, [r2, #32]

	x_sens_ = x_robot_ + SENSOR_LENGTH * cos(theta_); //calculate a sensor position from robot's center position
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	ed93 7b08 	vldr	d7, [r3, #32]
 800499a:	eeb0 0a47 	vmov.f32	s0, s14
 800499e:	eef0 0a67 	vmov.f32	s1, s15
 80049a2:	f00e fe95 	bl	80136d0 <cos>
 80049a6:	ec51 0b10 	vmov	r0, r1, d0
 80049aa:	f04f 0200 	mov.w	r2, #0
 80049ae:	4b28      	ldr	r3, [pc, #160]	; (8004a50 <_ZN8Odometry12calcPotitionEv+0x200>)
 80049b0:	f7fb fe3a 	bl	8000628 <__aeabi_dmul>
 80049b4:	4602      	mov	r2, r0
 80049b6:	460b      	mov	r3, r1
 80049b8:	4620      	mov	r0, r4
 80049ba:	4629      	mov	r1, r5
 80049bc:	f7fb fc7e 	bl	80002bc <__adddf3>
 80049c0:	4603      	mov	r3, r0
 80049c2:	460c      	mov	r4, r1
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	ed93 7b08 	vldr	d7, [r3, #32]
 80049d6:	eeb0 0a47 	vmov.f32	s0, s14
 80049da:	eef0 0a67 	vmov.f32	s1, s15
 80049de:	f00e febb 	bl	8013758 <sin>
 80049e2:	ec51 0b10 	vmov	r0, r1, d0
 80049e6:	f04f 0200 	mov.w	r2, #0
 80049ea:	4b19      	ldr	r3, [pc, #100]	; (8004a50 <_ZN8Odometry12calcPotitionEv+0x200>)
 80049ec:	f7fb fe1c 	bl	8000628 <__aeabi_dmul>
 80049f0:	4602      	mov	r2, r0
 80049f2:	460b      	mov	r3, r1
 80049f4:	4620      	mov	r0, r4
 80049f6:	4629      	mov	r1, r5
 80049f8:	f7fb fc60 	bl	80002bc <__adddf3>
 80049fc:	4603      	mov	r3, r0
 80049fe:	460c      	mov	r4, r1
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

	monitor_x = x_sens_;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	4621      	mov	r1, r4
 8004a10:	f7fc f902 	bl	8000c18 <__aeabi_d2f>
 8004a14:	4602      	mov	r2, r0
 8004a16:	4b0f      	ldr	r3, [pc, #60]	; (8004a54 <_ZN8Odometry12calcPotitionEv+0x204>)
 8004a18:	601a      	str	r2, [r3, #0]
	monitor_y = y_sens_;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8004a20:	4618      	mov	r0, r3
 8004a22:	4621      	mov	r1, r4
 8004a24:	f7fc f8f8 	bl	8000c18 <__aeabi_d2f>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	4b0b      	ldr	r3, [pc, #44]	; (8004a58 <_ZN8Odometry12calcPotitionEv+0x208>)
 8004a2c:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8004a34:	4618      	mov	r0, r3
 8004a36:	4621      	mov	r1, r4
 8004a38:	f7fc f8ee 	bl	8000c18 <__aeabi_d2f>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	4b07      	ldr	r3, [pc, #28]	; (8004a5c <_ZN8Odometry12calcPotitionEv+0x20c>)
 8004a40:	601a      	str	r2, [r3, #0]
}
 8004a42:	bf00      	nop
 8004a44:	3718      	adds	r7, #24
 8004a46:	46bd      	mov	sp, r7
 8004a48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a4c:	f3af 8000 	nop.w
 8004a50:	405b8000 	.word	0x405b8000
 8004a54:	20000294 	.word	0x20000294
 8004a58:	20000298 	.word	0x20000298
 8004a5c:	2000029c 	.word	0x2000029c
 8004a60:	d2f1a9fc 	.word	0xd2f1a9fc
 8004a64:	3f50624d 	.word	0x3f50624d

08004a68 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
	calcPotition();
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f7ff feed 	bl	8004850 <_ZN8Odometry12calcPotitionEv>
}
 8004a76:	bf00      	nop
 8004a78:	3708      	adds	r7, #8
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <_ZN8Odometry8getThetaEv>:
{
	return y_sens_;
}

double Odometry::getTheta()
{
 8004a7e:	b490      	push	{r4, r7}
 8004a80:	b082      	sub	sp, #8
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
	return theta_;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8004a8c:	ec44 3b17 	vmov	d7, r3, r4
}
 8004a90:	eeb0 0a47 	vmov.f32	s0, s14
 8004a94:	eef0 0a67 	vmov.f32	s1, s15
 8004a98:	3708      	adds	r7, #8
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bc90      	pop	{r4, r7}
 8004a9e:	4770      	bx	lr

08004aa0 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 8004aa0:	b490      	push	{r4, r7}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	f04f 0300 	mov.w	r3, #0
 8004aae:	f04f 0400 	mov.w	r4, #0
 8004ab2:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = 0;
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	f04f 0300 	mov.w	r3, #0
 8004abc:	f04f 0400 	mov.w	r4, #0
 8004ac0:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	theta_ = 0;
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	f04f 0300 	mov.w	r3, #0
 8004aca:	f04f 0400 	mov.w	r4, #0
 8004ace:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 8004ad2:	bf00      	nop
 8004ad4:	3708      	adds	r7, #8
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bc90      	pop	{r4, r7}
 8004ada:	4770      	bx	lr

08004adc <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 8004adc:	b490      	push	{r4, r7}
 8004ade:	b082      	sub	sp, #8
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	701a      	strb	r2, [r3, #0]
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	f04f 0300 	mov.w	r3, #0
 8004af0:	f04f 0400 	mov.w	r4, #0
 8004af4:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	f04f 0300 	mov.w	r3, #0
 8004afe:	f04f 0400 	mov.w	r4, #0
 8004b02:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	f04f 0300 	mov.w	r3, #0
 8004b0c:	f04f 0400 	mov.w	r4, #0
 8004b10:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004b1a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8004b1e:	2200      	movs	r2, #0
 8004b20:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 8004b22:	4a29      	ldr	r2, [pc, #164]	; (8004bc8 <_ZN13PathFollowingC1Ev+0xec>)
 8004b24:	f04f 0300 	mov.w	r3, #0
 8004b28:	f04f 0400 	mov.w	r4, #0
 8004b2c:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 8004b30:	4a25      	ldr	r2, [pc, #148]	; (8004bc8 <_ZN13PathFollowingC1Ev+0xec>)
 8004b32:	f04f 0300 	mov.w	r3, #0
 8004b36:	f04f 0400 	mov.w	r4, #0
 8004b3a:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 8004b3e:	4a22      	ldr	r2, [pc, #136]	; (8004bc8 <_ZN13PathFollowingC1Ev+0xec>)
 8004b40:	f04f 0300 	mov.w	r3, #0
 8004b44:	f04f 0400 	mov.w	r4, #0
 8004b48:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 8004b4c:	4a1f      	ldr	r2, [pc, #124]	; (8004bcc <_ZN13PathFollowingC1Ev+0xf0>)
 8004b4e:	f04f 0300 	mov.w	r3, #0
 8004b52:	f04f 0400 	mov.w	r4, #0
 8004b56:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 8004b5a:	4a1c      	ldr	r2, [pc, #112]	; (8004bcc <_ZN13PathFollowingC1Ev+0xf0>)
 8004b5c:	f04f 0300 	mov.w	r3, #0
 8004b60:	f04f 0400 	mov.w	r4, #0
 8004b64:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 8004b68:	4a18      	ldr	r2, [pc, #96]	; (8004bcc <_ZN13PathFollowingC1Ev+0xf0>)
 8004b6a:	f04f 0300 	mov.w	r3, #0
 8004b6e:	f04f 0400 	mov.w	r4, #0
 8004b72:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 8004b76:	4a15      	ldr	r2, [pc, #84]	; (8004bcc <_ZN13PathFollowingC1Ev+0xf0>)
 8004b78:	f04f 0300 	mov.w	r3, #0
 8004b7c:	f04f 0400 	mov.w	r4, #0
 8004b80:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 8004b84:	4a11      	ldr	r2, [pc, #68]	; (8004bcc <_ZN13PathFollowingC1Ev+0xf0>)
 8004b86:	f04f 0300 	mov.w	r3, #0
 8004b8a:	f04f 0400 	mov.w	r4, #0
 8004b8e:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 8004b92:	4a0e      	ldr	r2, [pc, #56]	; (8004bcc <_ZN13PathFollowingC1Ev+0xf0>)
 8004b94:	f04f 0300 	mov.w	r3, #0
 8004b98:	f04f 0400 	mov.w	r4, #0
 8004b9c:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 8004ba0:	4a0b      	ldr	r2, [pc, #44]	; (8004bd0 <_ZN13PathFollowingC1Ev+0xf4>)
 8004ba2:	f04f 0300 	mov.w	r3, #0
 8004ba6:	f04f 0400 	mov.w	r4, #0
 8004baa:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 8004bae:	4a08      	ldr	r2, [pc, #32]	; (8004bd0 <_ZN13PathFollowingC1Ev+0xf4>)
 8004bb0:	f04f 0300 	mov.w	r3, #0
 8004bb4:	f04f 0400 	mov.w	r4, #0
 8004bb8:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3708      	adds	r7, #8
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bc90      	pop	{r4, r7}
 8004bc6:	4770      	bx	lr
 8004bc8:	2003ede0 	.word	0x2003ede0
 8004bcc:	2003ed70 	.word	0x2003ed70
 8004bd0:	2003edd0 	.word	0x2003edd0

08004bd4 <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b088      	sub	sp, #32
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 8004bdc:	f001 fc92 	bl	8006504 <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 8004be0:	f107 0318 	add.w	r3, r7, #24
 8004be4:	2201      	movs	r2, #1
 8004be6:	4915      	ldr	r1, [pc, #84]	; (8004c3c <_ZN13PathFollowing4initEv+0x68>)
 8004be8:	4815      	ldr	r0, [pc, #84]	; (8004c40 <_ZN13PathFollowing4initEv+0x6c>)
 8004bea:	f7fc fdb7 	bl	800175c <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 8004bee:	f107 0310 	add.w	r3, r7, #16
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	4913      	ldr	r1, [pc, #76]	; (8004c44 <_ZN13PathFollowing4initEv+0x70>)
 8004bf6:	4812      	ldr	r0, [pc, #72]	; (8004c40 <_ZN13PathFollowing4initEv+0x6c>)
 8004bf8:	f7fc fdb0 	bl	800175c <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 8004bfc:	f107 0308 	add.w	r3, r7, #8
 8004c00:	2201      	movs	r2, #1
 8004c02:	4911      	ldr	r1, [pc, #68]	; (8004c48 <_ZN13PathFollowing4initEv+0x74>)
 8004c04:	480e      	ldr	r0, [pc, #56]	; (8004c40 <_ZN13PathFollowing4initEv+0x6c>)
 8004c06:	f7fc fda9 	bl	800175c <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 8004c0a:	ed97 7b06 	vldr	d7, [r7, #24]
 8004c0e:	ed97 6b04 	vldr	d6, [r7, #16]
 8004c12:	ed97 5b02 	vldr	d5, [r7, #8]
 8004c16:	eeb0 2a45 	vmov.f32	s4, s10
 8004c1a:	eef0 2a65 	vmov.f32	s5, s11
 8004c1e:	eeb0 1a46 	vmov.f32	s2, s12
 8004c22:	eef0 1a66 	vmov.f32	s3, s13
 8004c26:	eeb0 0a47 	vmov.f32	s0, s14
 8004c2a:	eef0 0a67 	vmov.f32	s1, s15
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 f80c 	bl	8004c4c <_ZN13PathFollowing7setGainEddd>
}
 8004c34:	bf00      	nop
 8004c36:	3720      	adds	r7, #32
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	08018d24 	.word	0x08018d24
 8004c40:	08018d2c 	.word	0x08018d2c
 8004c44:	08018d34 	.word	0x08018d34
 8004c48:	08018d3c 	.word	0x08018d3c

08004c4c <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 8004c4c:	b490      	push	{r4, r7}
 8004c4e:	b088      	sub	sp, #32
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	61f8      	str	r0, [r7, #28]
 8004c54:	ed87 0b04 	vstr	d0, [r7, #16]
 8004c58:	ed87 1b02 	vstr	d1, [r7, #8]
 8004c5c:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 8004c60:	4a09      	ldr	r2, [pc, #36]	; (8004c88 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8004c62:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004c66:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 8004c6a:	4a07      	ldr	r2, [pc, #28]	; (8004c88 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8004c6c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004c70:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 8004c74:	4a04      	ldr	r2, [pc, #16]	; (8004c88 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8004c76:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004c7a:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 8004c7e:	bf00      	nop
 8004c80:	3720      	adds	r7, #32
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bc90      	pop	{r4, r7}
 8004c86:	4770      	bx	lr
 8004c88:	2003ede0 	.word	0x2003ede0

08004c8c <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 8004c94:	2088      	movs	r0, #136	; 0x88
 8004c96:	f7fd f8b2 	bl	8001dfe <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 8004c9a:	2080      	movs	r0, #128	; 0x80
 8004c9c:	f7fd f8af 	bl	8001dfe <INA260_init>
}
 8004ca0:	bf00      	nop
 8004ca2:	3708      	adds	r7, #8
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 8004ca8:	b590      	push	{r4, r7, lr}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 8004cb0:	2188      	movs	r1, #136	; 0x88
 8004cb2:	2002      	movs	r0, #2
 8004cb4:	f7fd f840 	bl	8001d38 <INA260_read>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7fb fc4a 	bl	8000554 <__aeabi_i2d>
 8004cc0:	a30c      	add	r3, pc, #48	; (adr r3, 8004cf4 <_ZN11PowerSensor12updateValuesEv+0x4c>)
 8004cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc6:	f7fb fcaf 	bl	8000628 <__aeabi_dmul>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	460c      	mov	r4, r1
 8004cce:	4618      	mov	r0, r3
 8004cd0:	4621      	mov	r1, r4
 8004cd2:	f7fb ffa1 	bl	8000c18 <__aeabi_d2f>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	4a03      	ldr	r2, [pc, #12]	; (8004cf0 <_ZN11PowerSensor12updateValuesEv+0x48>)
 8004ce2:	6013      	str	r3, [r2, #0]
}
 8004ce4:	bf00      	nop
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd90      	pop	{r4, r7, pc}
 8004cec:	f3af 8000 	nop.w
 8004cf0:	200002a0 	.word	0x200002a0
 8004cf4:	47ae147b 	.word	0x47ae147b
 8004cf8:	3f547ae1 	.word	0x3f547ae1

08004cfc <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	ee07 3a90 	vmov	s15, r3

}
 8004d0c:	eeb0 0a67 	vmov.f32	s0, s15
 8004d10:	370c      	adds	r7, #12
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
	...

08004d1c <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8004d24:	2300      	movs	r3, #0
 8004d26:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8004d28:	2102      	movs	r1, #2
 8004d2a:	4822      	ldr	r0, [pc, #136]	; (8004db4 <_ZN12RotarySwitch8getValueEv+0x98>)
 8004d2c:	f005 fa5a 	bl	800a1e4 <HAL_GPIO_ReadPin>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	bf0c      	ite	eq
 8004d36:	2301      	moveq	r3, #1
 8004d38:	2300      	movne	r3, #0
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d003      	beq.n	8004d48 <_ZN12RotarySwitch8getValueEv+0x2c>
 8004d40:	89fb      	ldrh	r3, [r7, #14]
 8004d42:	f043 0301 	orr.w	r3, r3, #1
 8004d46:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8004d48:	2108      	movs	r1, #8
 8004d4a:	481a      	ldr	r0, [pc, #104]	; (8004db4 <_ZN12RotarySwitch8getValueEv+0x98>)
 8004d4c:	f005 fa4a 	bl	800a1e4 <HAL_GPIO_ReadPin>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	bf0c      	ite	eq
 8004d56:	2301      	moveq	r3, #1
 8004d58:	2300      	movne	r3, #0
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d003      	beq.n	8004d68 <_ZN12RotarySwitch8getValueEv+0x4c>
 8004d60:	89fb      	ldrh	r3, [r7, #14]
 8004d62:	f043 0302 	orr.w	r3, r3, #2
 8004d66:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8004d68:	2110      	movs	r1, #16
 8004d6a:	4812      	ldr	r0, [pc, #72]	; (8004db4 <_ZN12RotarySwitch8getValueEv+0x98>)
 8004d6c:	f005 fa3a 	bl	800a1e4 <HAL_GPIO_ReadPin>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	bf0c      	ite	eq
 8004d76:	2301      	moveq	r3, #1
 8004d78:	2300      	movne	r3, #0
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d003      	beq.n	8004d88 <_ZN12RotarySwitch8getValueEv+0x6c>
 8004d80:	89fb      	ldrh	r3, [r7, #14]
 8004d82:	f043 0304 	orr.w	r3, r3, #4
 8004d86:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 8004d88:	2180      	movs	r1, #128	; 0x80
 8004d8a:	480a      	ldr	r0, [pc, #40]	; (8004db4 <_ZN12RotarySwitch8getValueEv+0x98>)
 8004d8c:	f005 fa2a 	bl	800a1e4 <HAL_GPIO_ReadPin>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	bf0c      	ite	eq
 8004d96:	2301      	moveq	r3, #1
 8004d98:	2300      	movne	r3, #0
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d003      	beq.n	8004da8 <_ZN12RotarySwitch8getValueEv+0x8c>
 8004da0:	89fb      	ldrh	r3, [r7, #14]
 8004da2:	f043 0308 	orr.w	r3, r3, #8
 8004da6:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8004da8:	89fb      	ldrh	r3, [r7, #14]

}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3710      	adds	r7, #16
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	40020c00 	.word	0x40020c00

08004db8 <_ZN10SideSensorC1Ev>:
#include "SideSensor.hpp"

uint16_t mon_status;
uint16_t mon_cnt_l, mon_cnt_r;

SideSensor::SideSensor() : status_(0), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false)
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	801a      	strh	r2, [r3, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	805a      	strh	r2, [r3, #2]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	809a      	strh	r2, [r3, #4]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	719a      	strb	r2, [r3, #6]
{

}
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	370c      	adds	r7, #12
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
	...

08004de8 <_ZN10SideSensor12updateStatusEv>:
	}

}

void SideSensor::updateStatus()
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
	static bool white_flag1 = false;
	static bool white_flag2 = false;
	static uint16_t cnt_l, cnt_r;

	if(ignore_flag_ == false){
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	799b      	ldrb	r3, [r3, #6]
 8004df4:	f083 0301 	eor.w	r3, r3, #1
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f000 80c7 	beq.w	8004f8e <_ZN10SideSensor12updateStatusEv+0x1a6>

		if(white_flag1 == false){
 8004e00:	4b65      	ldr	r3, [pc, #404]	; (8004f98 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	f083 0301 	eor.w	r3, r3, #1
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d027      	beq.n	8004e5e <_ZN10SideSensor12updateStatusEv+0x76>
			if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 8004e0e:	2104      	movs	r1, #4
 8004e10:	4862      	ldr	r0, [pc, #392]	; (8004f9c <_ZN10SideSensor12updateStatusEv+0x1b4>)
 8004e12:	f005 f9e7 	bl	800a1e4 <HAL_GPIO_ReadPin>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	bf0c      	ite	eq
 8004e1c:	2301      	moveq	r3, #1
 8004e1e:	2300      	movne	r3, #0
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d006      	beq.n	8004e34 <_ZN10SideSensor12updateStatusEv+0x4c>
				cnt_r++;
 8004e26:	4b5e      	ldr	r3, [pc, #376]	; (8004fa0 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004e28:	881b      	ldrh	r3, [r3, #0]
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	b29a      	uxth	r2, r3
 8004e2e:	4b5c      	ldr	r3, [pc, #368]	; (8004fa0 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004e30:	801a      	strh	r2, [r3, #0]
 8004e32:	e002      	b.n	8004e3a <_ZN10SideSensor12updateStatusEv+0x52>
			}
			else{
				cnt_r = 0;
 8004e34:	4b5a      	ldr	r3, [pc, #360]	; (8004fa0 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004e36:	2200      	movs	r2, #0
 8004e38:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 8004e3a:	4b59      	ldr	r3, [pc, #356]	; (8004fa0 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004e3c:	881b      	ldrh	r3, [r3, #0]
 8004e3e:	2b04      	cmp	r3, #4
 8004e40:	d93f      	bls.n	8004ec2 <_ZN10SideSensor12updateStatusEv+0xda>
				status_ |= 0x01;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	881b      	ldrh	r3, [r3, #0]
 8004e46:	f043 0301 	orr.w	r3, r3, #1
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	801a      	strh	r2, [r3, #0]
				white_flag1 = true;
 8004e50:	4b51      	ldr	r3, [pc, #324]	; (8004f98 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 8004e52:	2201      	movs	r2, #1
 8004e54:	701a      	strb	r2, [r3, #0]
				cnt_r = 0;
 8004e56:	4b52      	ldr	r3, [pc, #328]	; (8004fa0 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	801a      	strh	r2, [r3, #0]
 8004e5c:	e031      	b.n	8004ec2 <_ZN10SideSensor12updateStatusEv+0xda>
			}

		}
		else if(white_flag1 == true){
 8004e5e:	4b4e      	ldr	r3, [pc, #312]	; (8004f98 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d02d      	beq.n	8004ec2 <_ZN10SideSensor12updateStatusEv+0xda>
			if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 8004e66:	2104      	movs	r1, #4
 8004e68:	484c      	ldr	r0, [pc, #304]	; (8004f9c <_ZN10SideSensor12updateStatusEv+0x1b4>)
 8004e6a:	f005 f9bb 	bl	800a1e4 <HAL_GPIO_ReadPin>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	bf14      	ite	ne
 8004e74:	2301      	movne	r3, #1
 8004e76:	2300      	moveq	r3, #0
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d006      	beq.n	8004e8c <_ZN10SideSensor12updateStatusEv+0xa4>
				cnt_r++;
 8004e7e:	4b48      	ldr	r3, [pc, #288]	; (8004fa0 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004e80:	881b      	ldrh	r3, [r3, #0]
 8004e82:	3301      	adds	r3, #1
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	4b46      	ldr	r3, [pc, #280]	; (8004fa0 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004e88:	801a      	strh	r2, [r3, #0]
 8004e8a:	e002      	b.n	8004e92 <_ZN10SideSensor12updateStatusEv+0xaa>
			}
			else{
				cnt_r = 0;
 8004e8c:	4b44      	ldr	r3, [pc, #272]	; (8004fa0 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004e8e:	2200      	movs	r2, #0
 8004e90:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 8004e92:	4b43      	ldr	r3, [pc, #268]	; (8004fa0 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004e94:	881b      	ldrh	r3, [r3, #0]
 8004e96:	2b04      	cmp	r3, #4
 8004e98:	d913      	bls.n	8004ec2 <_ZN10SideSensor12updateStatusEv+0xda>
				status_ ^= 0x01;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	881b      	ldrh	r3, [r3, #0]
 8004e9e:	f083 0301 	eor.w	r3, r3, #1
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	801a      	strh	r2, [r3, #0]
				white_flag1 = false;
 8004ea8:	4b3b      	ldr	r3, [pc, #236]	; (8004f98 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 8004eaa:	2200      	movs	r2, #0
 8004eac:	701a      	strb	r2, [r3, #0]

				white_line_cnt_r_++;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	889b      	ldrh	r3, [r3, #4]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	b29a      	uxth	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	809a      	strh	r2, [r3, #4]
				mon_cnt_r = white_line_cnt_r_;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	889a      	ldrh	r2, [r3, #4]
 8004ebe:	4b39      	ldr	r3, [pc, #228]	; (8004fa4 <_ZN10SideSensor12updateStatusEv+0x1bc>)
 8004ec0:	801a      	strh	r2, [r3, #0]
			}
		}


		if(white_flag2 == false){
 8004ec2:	4b39      	ldr	r3, [pc, #228]	; (8004fa8 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	f083 0301 	eor.w	r3, r3, #1
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d027      	beq.n	8004f20 <_ZN10SideSensor12updateStatusEv+0x138>
			if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 8004ed0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ed4:	4835      	ldr	r0, [pc, #212]	; (8004fac <_ZN10SideSensor12updateStatusEv+0x1c4>)
 8004ed6:	f005 f985 	bl	800a1e4 <HAL_GPIO_ReadPin>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	bf0c      	ite	eq
 8004ee0:	2301      	moveq	r3, #1
 8004ee2:	2300      	movne	r3, #0
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d006      	beq.n	8004ef8 <_ZN10SideSensor12updateStatusEv+0x110>
				cnt_l++;
 8004eea:	4b31      	ldr	r3, [pc, #196]	; (8004fb0 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004eec:	881b      	ldrh	r3, [r3, #0]
 8004eee:	3301      	adds	r3, #1
 8004ef0:	b29a      	uxth	r2, r3
 8004ef2:	4b2f      	ldr	r3, [pc, #188]	; (8004fb0 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004ef4:	801a      	strh	r2, [r3, #0]
 8004ef6:	e002      	b.n	8004efe <_ZN10SideSensor12updateStatusEv+0x116>
			}
			else{
				cnt_l = 0;
 8004ef8:	4b2d      	ldr	r3, [pc, #180]	; (8004fb0 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004efa:	2200      	movs	r2, #0
 8004efc:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 8004efe:	4b2c      	ldr	r3, [pc, #176]	; (8004fb0 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004f00:	881b      	ldrh	r3, [r3, #0]
 8004f02:	2b04      	cmp	r3, #4
 8004f04:	d90c      	bls.n	8004f20 <_ZN10SideSensor12updateStatusEv+0x138>
				status_ |= 0x02;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	881b      	ldrh	r3, [r3, #0]
 8004f0a:	f043 0302 	orr.w	r3, r3, #2
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	801a      	strh	r2, [r3, #0]
				white_flag2 = true;
 8004f14:	4b24      	ldr	r3, [pc, #144]	; (8004fa8 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 8004f16:	2201      	movs	r2, #1
 8004f18:	701a      	strb	r2, [r3, #0]
				cnt_l = 0;
 8004f1a:	4b25      	ldr	r3, [pc, #148]	; (8004fb0 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	801a      	strh	r2, [r3, #0]
			}

		}
		if(white_flag2 == true){
 8004f20:	4b21      	ldr	r3, [pc, #132]	; (8004fa8 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d02e      	beq.n	8004f86 <_ZN10SideSensor12updateStatusEv+0x19e>
			if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 8004f28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f2c:	481f      	ldr	r0, [pc, #124]	; (8004fac <_ZN10SideSensor12updateStatusEv+0x1c4>)
 8004f2e:	f005 f959 	bl	800a1e4 <HAL_GPIO_ReadPin>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	bf14      	ite	ne
 8004f38:	2301      	movne	r3, #1
 8004f3a:	2300      	moveq	r3, #0
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d006      	beq.n	8004f50 <_ZN10SideSensor12updateStatusEv+0x168>
				cnt_l++;
 8004f42:	4b1b      	ldr	r3, [pc, #108]	; (8004fb0 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004f44:	881b      	ldrh	r3, [r3, #0]
 8004f46:	3301      	adds	r3, #1
 8004f48:	b29a      	uxth	r2, r3
 8004f4a:	4b19      	ldr	r3, [pc, #100]	; (8004fb0 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004f4c:	801a      	strh	r2, [r3, #0]
 8004f4e:	e002      	b.n	8004f56 <_ZN10SideSensor12updateStatusEv+0x16e>
			}
			else{
				cnt_l = 0;
 8004f50:	4b17      	ldr	r3, [pc, #92]	; (8004fb0 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004f52:	2200      	movs	r2, #0
 8004f54:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 8004f56:	4b16      	ldr	r3, [pc, #88]	; (8004fb0 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004f58:	881b      	ldrh	r3, [r3, #0]
 8004f5a:	2b04      	cmp	r3, #4
 8004f5c:	d913      	bls.n	8004f86 <_ZN10SideSensor12updateStatusEv+0x19e>
				status_ ^= 0x02;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	881b      	ldrh	r3, [r3, #0]
 8004f62:	f083 0302 	eor.w	r3, r3, #2
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	801a      	strh	r2, [r3, #0]
				white_flag2 = false;
 8004f6c:	4b0e      	ldr	r3, [pc, #56]	; (8004fa8 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 8004f6e:	2200      	movs	r2, #0
 8004f70:	701a      	strb	r2, [r3, #0]

				white_line_cnt_l_++;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	885b      	ldrh	r3, [r3, #2]
 8004f76:	3301      	adds	r3, #1
 8004f78:	b29a      	uxth	r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	805a      	strh	r2, [r3, #2]
				mon_cnt_l = white_line_cnt_l_;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	885a      	ldrh	r2, [r3, #2]
 8004f82:	4b0c      	ldr	r3, [pc, #48]	; (8004fb4 <_ZN10SideSensor12updateStatusEv+0x1cc>)
 8004f84:	801a      	strh	r2, [r3, #0]
			}

		}

		mon_status = status_;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	881a      	ldrh	r2, [r3, #0]
 8004f8a:	4b0b      	ldr	r3, [pc, #44]	; (8004fb8 <_ZN10SideSensor12updateStatusEv+0x1d0>)
 8004f8c:	801a      	strh	r2, [r3, #0]
	}

}
 8004f8e:	bf00      	nop
 8004f90:	3708      	adds	r7, #8
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	200002aa 	.word	0x200002aa
 8004f9c:	40021000 	.word	0x40021000
 8004fa0:	200002ae 	.word	0x200002ae
 8004fa4:	200002a8 	.word	0x200002a8
 8004fa8:	200002ab 	.word	0x200002ab
 8004fac:	40020c00 	.word	0x40020c00
 8004fb0:	200002ac 	.word	0x200002ac
 8004fb4:	200002a6 	.word	0x200002a6
 8004fb8:	200002a4 	.word	0x200002a4

08004fbc <_ZN10SideSensor9getStatusEv>:
uint16_t SideSensor::getStatus()
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
	return status_;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	881b      	ldrh	r3, [r3, #0]
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <_ZN10SideSensor16getWhiteLineCntREv>:
{
	return white_line_cnt_l_;
}

uint16_t SideSensor::getWhiteLineCntR()
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
	return white_line_cnt_r_;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	889b      	ldrh	r3, [r3, #4]
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <_ZN10SideSensor17resetWhiteLineCntEv>:

void SideSensor::resetWhiteLineCnt()
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	805a      	strh	r2, [r3, #2]
	white_line_cnt_r_ = 0;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	809a      	strh	r2, [r3, #4]
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	719a      	strb	r2, [r3, #6]
}
 800501a:	bf00      	nop
 800501c:	370c      	adds	r7, #12
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr

08005026 <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 8005026:	b480      	push	{r7}
 8005028:	b083      	sub	sp, #12
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	719a      	strb	r2, [r3, #6]
}
 8005034:	bf00      	nop
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	799b      	ldrb	r3, [r3, #6]
}
 800504c:	4618      	mov	r0, r3
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	4a10      	ldr	r2, [pc, #64]	; (80050a8 <_ZN20SystemIdentificationC1EP6LoggerP5Motor+0x50>)
 8005068:	3308      	adds	r3, #8
 800506a:	4611      	mov	r1, r2
 800506c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005070:	4618      	mov	r0, r3
 8005072:	f00f fbad 	bl	80147d0 <memcpy>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2200      	movs	r2, #0
 800507a:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f04f 0200 	mov.w	r2, #0
 8005084:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	68ba      	ldr	r2, [r7, #8]
 8005094:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	4618      	mov	r0, r3
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	08018d60 	.word	0x08018d60

080050ac <_ZN20SystemIdentification13inOutputStoreEf>:
{

}

void SystemIdentification::inOutputStore(float output)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	ed87 0a00 	vstr	s0, [r7]
	if(processing_flag_ == true){
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d010      	beq.n	80050e4 <_ZN20SystemIdentification13inOutputStoreEf+0x38>
		logger_->storeLog(output);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	ed97 0a00 	vldr	s0, [r7]
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7ff f86a 	bl	80041a4 <_ZN6Logger8storeLogEf>
		logger_->storeLog2(inputVal_);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 80050da:	eeb0 0a67 	vmov.f32	s0, s15
 80050de:	4610      	mov	r0, r2
 80050e0:	f7ff f89c 	bl	800421c <_ZN6Logger9storeLog2Ef>
	}

}
 80050e4:	bf00      	nop
 80050e6:	3708      	adds	r7, #8
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <_ZN20SystemIdentification12inOutputSaveEv>:

void SystemIdentification::inOutputSave()
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
	logger_->saveLogs("sysident", "MSIGRES.txt");
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a07      	ldr	r2, [pc, #28]	; (8005118 <_ZN20SystemIdentification12inOutputSaveEv+0x2c>)
 80050fa:	4908      	ldr	r1, [pc, #32]	; (800511c <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 80050fc:	4618      	mov	r0, r3
 80050fe:	f7ff f974 	bl	80043ea <_ZN6Logger8saveLogsEPKcS1_>
	logger_->saveLogs2("sysident", "INPUT.txt");
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a06      	ldr	r2, [pc, #24]	; (8005120 <_ZN20SystemIdentification12inOutputSaveEv+0x34>)
 8005108:	4904      	ldr	r1, [pc, #16]	; (800511c <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 800510a:	4618      	mov	r0, r3
 800510c:	f7ff f980 	bl	8004410 <_ZN6Logger9saveLogs2EPKcS1_>
}
 8005110:	bf00      	nop
 8005112:	3708      	adds	r7, #8
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	08018f54 	.word	0x08018f54
 800511c:	08018f60 	.word	0x08018f60
 8005120:	08018f6c 	.word	0x08018f6c

08005124 <_ZN20SystemIdentification10updateMsigEv>:

void SystemIdentification::updateMsig()
{
 8005124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
	if(processing_flag_ == true){
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005132:	2b00      	cmp	r3, #0
 8005134:	d046      	beq.n	80051c4 <_ZN20SystemIdentification10updateMsigEv+0xa0>
		inputVal_ = inputRatio_ * msigArray_[msigArrayIdx_];
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	ed93 7a81 	vldr	s14, [r3, #516]	; 0x204
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8005142:	461a      	mov	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	3204      	adds	r2, #4
 8005148:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800514c:	ee07 3a90 	vmov	s15, r3
 8005150:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005154:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		msigArrayIdx_++;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8005164:	3301      	adds	r3, #1
 8005166:	b29a      	uxth	r2, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
		mon_msig = inputVal_;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005174:	4a15      	ldr	r2, [pc, #84]	; (80051cc <_ZN20SystemIdentification10updateMsigEv+0xa8>)
 8005176:	6013      	str	r3, [r2, #0]

		if(msigArrayIdx_ >= MSIG_SIZE) msigArrayIdx_ = MSIG_SIZE;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 800517e:	2bf9      	cmp	r3, #249	; 0xf9
 8005180:	d903      	bls.n	800518a <_ZN20SystemIdentification10updateMsigEv+0x66>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	22fa      	movs	r2, #250	; 0xfa
 8005186:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc

		motor_->setRatio(inputVal_, -inputVal_);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685c      	ldr	r4, [r3, #4]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005194:	4618      	mov	r0, r3
 8005196:	f7fb f9ef 	bl	8000578 <__aeabi_f2d>
 800519a:	4605      	mov	r5, r0
 800519c:	460e      	mov	r6, r1
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 80051a4:	eef1 7a67 	vneg.f32	s15, s15
 80051a8:	ee17 3a90 	vmov	r3, s15
 80051ac:	4618      	mov	r0, r3
 80051ae:	f7fb f9e3 	bl	8000578 <__aeabi_f2d>
 80051b2:	4602      	mov	r2, r0
 80051b4:	460b      	mov	r3, r1
 80051b6:	ec43 2b11 	vmov	d1, r2, r3
 80051ba:	ec46 5b10 	vmov	d0, r5, r6
 80051be:	4620      	mov	r0, r4
 80051c0:	f7ff fa98 	bl	80046f4 <_ZN5Motor8setRatioEdd>

	}

}
 80051c4:	bf00      	nop
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051cc:	200002b0 	.word	0x200002b0

080051d0 <_ZN20SystemIdentification13setInputRatioEf>:
void SystemIdentification::setInputRatio(float ratio)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	ed87 0a00 	vstr	s0, [r7]
	inputRatio_ = ratio;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	683a      	ldr	r2, [r7, #0]
 80051e0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 80051e4:	bf00      	nop
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <_ZN20SystemIdentification5startEv>:

void SystemIdentification::start()
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
	//logger_->resetLogs();
	logger_->start();
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4618      	mov	r0, r3
 80051fe:	f7ff f9e4 	bl	80045ca <_ZN6Logger5startEv>
	processing_flag_ = true;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
}
 800520a:	bf00      	nop
 800520c:	3708      	adds	r7, #8
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	0000      	movs	r0, r0
 8005214:	0000      	movs	r0, r0
	...

08005218 <_ZN20SystemIdentification4stopEv>:

void SystemIdentification::stop()
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4618      	mov	r0, r3
 8005226:	f7ff f9e1 	bl	80045ec <_ZN6Logger4stopEv>
	processing_flag_ = false;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
	msigArrayIdx_ = 0;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
	motor_->setRatio(0, 0);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8005258 <_ZN20SystemIdentification4stopEv+0x40>
 8005242:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8005258 <_ZN20SystemIdentification4stopEv+0x40>
 8005246:	4618      	mov	r0, r3
 8005248:	f7ff fa54 	bl	80046f4 <_ZN5Motor8setRatioEdd>
}
 800524c:	bf00      	nop
 800524e:	3708      	adds	r7, #8
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	f3af 8000 	nop.w
	...

08005260 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
//#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	607a      	str	r2, [r7, #4]
 800526c:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f04f 0200 	mov.w	r2, #0
 8005274:	601a      	str	r2, [r3, #0]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f04f 0200 	mov.w	r2, #0
 800527c:	605a      	str	r2, [r3, #4]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f04f 0200 	mov.w	r2, #0
 8005284:	609a      	str	r2, [r3, #8]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f04f 0200 	mov.w	r2, #0
 800528c:	60da      	str	r2, [r3, #12]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f04f 0200 	mov.w	r2, #0
 8005294:	611a      	str	r2, [r3, #16]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f04f 0200 	mov.w	r2, #0
 800529c:	615a      	str	r2, [r3, #20]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f04f 0200 	mov.w	r2, #0
 80052a4:	619a      	str	r2, [r3, #24]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f04f 0200 	mov.w	r2, #0
 80052ac:	61da      	str	r2, [r3, #28]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f04f 0200 	mov.w	r2, #0
 80052b4:	621a      	str	r2, [r3, #32]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f04f 0200 	mov.w	r2, #0
 80052bc:	625a      	str	r2, [r3, #36]	; 0x24
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f04f 0200 	mov.w	r2, #0
 80052d4:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	68ba      	ldr	r2, [r7, #8]
 80052da:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	683a      	ldr	r2, [r7, #0]
 80052e6:	639a      	str	r2, [r3, #56]	; 0x38

}
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	4618      	mov	r0, r3
 80052ec:	3714      	adds	r7, #20
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
	...

080052f8 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 80052f8:	b590      	push	{r4, r7, lr}
 80052fa:	b087      	sub	sp, #28
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005304:	f107 020c 	add.w	r2, r7, #12
 8005308:	f107 0110 	add.w	r1, r7, #16
 800530c:	4618      	mov	r0, r3
 800530e:	f7fc f87b 	bl	8001408 <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 8005312:	ed97 7a04 	vldr	s14, [r7, #16]
 8005316:	edd7 7a03 	vldr	s15, [r7, #12]
 800531a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800531e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005322:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005326:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 800532a:	6978      	ldr	r0, [r7, #20]
 800532c:	f7fb f924 	bl	8000578 <__aeabi_f2d>
 8005330:	a30b      	add	r3, pc, #44	; (adr r3, 8005360 <_ZN12VelocityCtrl12calcVelocityEv+0x68>)
 8005332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005336:	f7fb f977 	bl	8000628 <__aeabi_dmul>
 800533a:	4603      	mov	r3, r0
 800533c:	460c      	mov	r4, r1
 800533e:	4618      	mov	r0, r3
 8005340:	4621      	mov	r1, r4
 8005342:	f7fb fc69 	bl	8000c18 <__aeabi_d2f>
 8005346:	4602      	mov	r2, r0
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	ee07 3a90 	vmov	s15, r3
}
 8005354:	eeb0 0a67 	vmov.f32	s0, s15
 8005358:	371c      	adds	r7, #28
 800535a:	46bd      	mov	sp, r7
 800535c:	bd90      	pop	{r4, r7, pc}
 800535e:	bf00      	nop
 8005360:	1ab1d998 	.word	0x1ab1d998
 8005364:	3f7830b5 	.word	0x3f7830b5

08005368 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 8005368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800536a:	b087      	sub	sp, #28
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	ed93 7a00 	vldr	s14, [r3]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	edd3 7a02 	vldr	s15, [r3, #8]
 800537c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005380:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800538a:	2b00      	cmp	r3, #0
 800538c:	d007      	beq.n	800539e <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 800538e:	4b48      	ldr	r3, [pc, #288]	; (80054b0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005390:	f04f 0200 	mov.w	r2, #0
 8005394:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	edd3 7a04 	vldr	s15, [r3, #16]
 80053a4:	ed97 7a05 	vldr	s14, [r7, #20]
 80053a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ac:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 80053b0:	4b3f      	ldr	r3, [pc, #252]	; (80054b0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4618      	mov	r0, r3
 80053b6:	f7fb f8df 	bl	8000578 <__aeabi_f2d>
 80053ba:	4604      	mov	r4, r0
 80053bc:	460d      	mov	r5, r1
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	ed93 7a06 	vldr	s14, [r3, #24]
 80053c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80053c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053cc:	ee17 0a90 	vmov	r0, s15
 80053d0:	f7fb f8d2 	bl	8000578 <__aeabi_f2d>
 80053d4:	a334      	add	r3, pc, #208	; (adr r3, 80054a8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 80053d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053da:	f7fb f925 	bl	8000628 <__aeabi_dmul>
 80053de:	4602      	mov	r2, r0
 80053e0:	460b      	mov	r3, r1
 80053e2:	4620      	mov	r0, r4
 80053e4:	4629      	mov	r1, r5
 80053e6:	f7fa ff69 	bl	80002bc <__adddf3>
 80053ea:	4603      	mov	r3, r0
 80053ec:	460c      	mov	r4, r1
 80053ee:	4618      	mov	r0, r3
 80053f0:	4621      	mov	r1, r4
 80053f2:	f7fb fc11 	bl	8000c18 <__aeabi_d2f>
 80053f6:	4602      	mov	r2, r0
 80053f8:	4b2d      	ldr	r3, [pc, #180]	; (80054b0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 80053fa:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	ed93 7a05 	vldr	s14, [r3, #20]
 8005402:	4b2c      	ldr	r3, [pc, #176]	; (80054b4 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005404:	edd3 7a00 	vldr	s15, [r3]
 8005408:	edd7 6a05 	vldr	s13, [r7, #20]
 800540c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005410:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005414:	ee17 0a90 	vmov	r0, s15
 8005418:	f7fb f8ae 	bl	8000578 <__aeabi_f2d>
 800541c:	a322      	add	r3, pc, #136	; (adr r3, 80054a8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 800541e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005422:	f7fb fa2b 	bl	800087c <__aeabi_ddiv>
 8005426:	4603      	mov	r3, r0
 8005428:	460c      	mov	r4, r1
 800542a:	4618      	mov	r0, r3
 800542c:	4621      	mov	r1, r4
 800542e:	f7fb fbf3 	bl	8000c18 <__aeabi_d2f>
 8005432:	4603      	mov	r3, r0
 8005434:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 8005436:	ed97 7a04 	vldr	s14, [r7, #16]
 800543a:	edd7 7a03 	vldr	s15, [r7, #12]
 800543e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005442:	4b1b      	ldr	r3, [pc, #108]	; (80054b0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005444:	edd3 7a00 	vldr	s15, [r3]
 8005448:	ee77 7a27 	vadd.f32	s15, s14, s15
 800544c:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800545a:	edd7 7a02 	vldr	s15, [r7, #8]
 800545e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005462:	ee17 0a90 	vmov	r0, s15
 8005466:	f7fb f887 	bl	8000578 <__aeabi_f2d>
 800546a:	4605      	mov	r5, r0
 800546c:	460e      	mov	r6, r1
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005474:	ed97 7a02 	vldr	s14, [r7, #8]
 8005478:	ee77 7a67 	vsub.f32	s15, s14, s15
 800547c:	ee17 0a90 	vmov	r0, s15
 8005480:	f7fb f87a 	bl	8000578 <__aeabi_f2d>
 8005484:	4602      	mov	r2, r0
 8005486:	460b      	mov	r3, r1
 8005488:	ec43 2b11 	vmov	d1, r2, r3
 800548c:	ec46 5b10 	vmov	d0, r5, r6
 8005490:	4620      	mov	r0, r4
 8005492:	f7ff f92f 	bl	80046f4 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 8005496:	4a07      	ldr	r2, [pc, #28]	; (80054b4 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	6013      	str	r3, [r2, #0]
}
 800549c:	bf00      	nop
 800549e:	371c      	adds	r7, #28
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054a4:	f3af 8000 	nop.w
 80054a8:	d2f1a9fc 	.word	0xd2f1a9fc
 80054ac:	3f50624d 	.word	0x3f50624d
 80054b0:	200002b8 	.word	0x200002b8
 80054b4:	200002b4 	.word	0x200002b4

080054b8 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80054c4:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	68ba      	ldr	r2, [r7, #8]
 80054cc:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	605a      	str	r2, [r3, #4]
}
 80054d4:	bf00      	nop
 80054d6:	3714      	adds	r7, #20
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	ed87 0a02 	vstr	s0, [r7, #8]
 80054ec:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	68ba      	ldr	r2, [r7, #8]
 80054f4:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80054fc:	bf00      	nop
 80054fe:	3714      	adds	r7, #20
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	ed87 0a02 	vstr	s0, [r7, #8]
 8005514:	edc7 0a01 	vstr	s1, [r7, #4]
 8005518:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	683a      	ldr	r2, [r7, #0]
 800552c:	615a      	str	r2, [r3, #20]
}
 800552e:	bf00      	nop
 8005530:	3714      	adds	r7, #20
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr

0800553a <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 800553a:	b480      	push	{r7}
 800553c:	b085      	sub	sp, #20
 800553e:	af00      	add	r7, sp, #0
 8005540:	60f8      	str	r0, [r7, #12]
 8005542:	ed87 0a02 	vstr	s0, [r7, #8]
 8005546:	edc7 0a01 	vstr	s1, [r7, #4]
 800554a:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	68ba      	ldr	r2, [r7, #8]
 8005552:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	683a      	ldr	r2, [r7, #0]
 800555e:	621a      	str	r2, [r3, #32]
}
 8005560:	bf00      	nop
 8005562:	3714      	adds	r7, #20
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b082      	sub	sp, #8
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
    calcVelocity();
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f7ff febf 	bl	80052f8 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005580:	2b00      	cmp	r3, #0
 8005582:	d002      	beq.n	800558a <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f7ff feef 	bl	8005368 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 800558a:	bf00      	nop
 800558c:	3708      	adds	r7, #8
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}

08005592 <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 8005592:	b480      	push	{r7}
 8005594:	b083      	sub	sp, #12
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2201      	movs	r2, #1
 80055a6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 80055aa:	bf00      	nop
 80055ac:	370c      	adds	r7, #12
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
	...

080055b8 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055cc:	ed9f 1b06 	vldr	d1, [pc, #24]	; 80055e8 <_ZN12VelocityCtrl4stopEv+0x30>
 80055d0:	ed9f 0b05 	vldr	d0, [pc, #20]	; 80055e8 <_ZN12VelocityCtrl4stopEv+0x30>
 80055d4:	4618      	mov	r0, r3
 80055d6:	f7ff f88d 	bl	80046f4 <_ZN5Motor8setRatioEdd>

}
 80055da:	bf00      	nop
 80055dc:	3708      	adds	r7, #8
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	f3af 8000 	nop.w
	...

080055f0 <_ZN12VelocityCtrl18getCurrentVelocityEv>:

float VelocityCtrl::getCurrentVelocity()
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
	return current_velocity_;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	ee07 3a90 	vmov	s15, r3
}
 8005600:	eeb0 0a67 	vmov.f32	s0, s15
 8005604:	370c      	adds	r7, #12
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
	...

08005610 <HAL_TIM_PeriodElapsedCallback>:
	cppExit(GPIO_Pin);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a1e      	ldr	r2, [pc, #120]	; (8005698 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d10e      	bne.n	8005640 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip100ns();
 8005622:	f001 fe27 	bl	8007274 <cppFlip100ns>

		tim7_timer++;
 8005626:	4b1d      	ldr	r3, [pc, #116]	; (800569c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	3301      	adds	r3, #1
 800562c:	4a1b      	ldr	r2, [pc, #108]	; (800569c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800562e:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8005630:	4b1a      	ldr	r3, [pc, #104]	; (800569c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a1a      	ldr	r2, [pc, #104]	; (80056a0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d902      	bls.n	8005640 <HAL_TIM_PeriodElapsedCallback+0x30>
 800563a:	4b18      	ldr	r3, [pc, #96]	; (800569c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800563c:	2200      	movs	r2, #0
 800563e:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM6){
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a17      	ldr	r2, [pc, #92]	; (80056a4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d10e      	bne.n	8005668 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip1ms();
 800564a:	f001 fdc9 	bl	80071e0 <cppFlip1ms>

		tim6_timer++;
 800564e:	4b16      	ldr	r3, [pc, #88]	; (80056a8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	3301      	adds	r3, #1
 8005654:	4a14      	ldr	r2, [pc, #80]	; (80056a8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005656:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8005658:	4b13      	ldr	r3, [pc, #76]	; (80056a8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a10      	ldr	r2, [pc, #64]	; (80056a0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d902      	bls.n	8005668 <HAL_TIM_PeriodElapsedCallback+0x58>
 8005662:	4b11      	ldr	r3, [pc, #68]	; (80056a8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005664:	2200      	movs	r2, #0
 8005666:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM13){
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a0f      	ldr	r2, [pc, #60]	; (80056ac <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d10e      	bne.n	8005690 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8005672:	f001 fe09 	bl	8007288 <cppFlip10ms>

		tim13_timer++;
 8005676:	4b0e      	ldr	r3, [pc, #56]	; (80056b0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	3301      	adds	r3, #1
 800567c:	4a0c      	ldr	r2, [pc, #48]	; (80056b0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800567e:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8005680:	4b0b      	ldr	r3, [pc, #44]	; (80056b0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a06      	ldr	r2, [pc, #24]	; (80056a0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d902      	bls.n	8005690 <HAL_TIM_PeriodElapsedCallback+0x80>
 800568a:	4b09      	ldr	r3, [pc, #36]	; (80056b0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800568c:	2200      	movs	r2, #0
 800568e:	601a      	str	r2, [r3, #0]
	}

}
 8005690:	bf00      	nop
 8005692:	3708      	adds	r7, #8
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}
 8005698:	40001400 	.word	0x40001400
 800569c:	2003ea94 	.word	0x2003ea94
 80056a0:	0001869f 	.word	0x0001869f
 80056a4:	40001000 	.word	0x40001000
 80056a8:	2003ea50 	.word	0x2003ea50
 80056ac:	40001c00 	.word	0x40001c00
 80056b0:	2003ea98 	.word	0x2003ea98

080056b4 <init>:

void init()
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 80056b8:	2201      	movs	r2, #1
 80056ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80056be:	4808      	ldr	r0, [pc, #32]	; (80056e0 <init+0x2c>)
 80056c0:	f004 fda8 	bl	800a214 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 80056c4:	4807      	ldr	r0, [pc, #28]	; (80056e4 <init+0x30>)
 80056c6:	f008 fc70 	bl	800dfaa <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 80056ca:	4807      	ldr	r0, [pc, #28]	; (80056e8 <init+0x34>)
 80056cc:	f008 fc6d 	bl	800dfaa <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 80056d0:	4806      	ldr	r0, [pc, #24]	; (80056ec <init+0x38>)
 80056d2:	f008 fc6a 	bl	800dfaa <HAL_TIM_Base_Start_IT>

	cppInit();
 80056d6:	f001 fce3 	bl	80070a0 <cppInit>

	//path_following_initialize();

}
 80056da:	bf00      	nop
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	40021000 	.word	0x40021000
 80056e4:	2003eb7c 	.word	0x2003eb7c
 80056e8:	2003ed20 	.word	0x2003ed20
 80056ec:	2003ea9c 	.word	0x2003ea9c

080056f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80056f4:	f003 fa86 	bl	8008c04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80056f8:	f000 f82a 	bl	8005750 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80056fc:	f000 fdbc 	bl	8006278 <MX_GPIO_Init>
  MX_DMA_Init();
 8005700:	f000 fd8a 	bl	8006218 <MX_DMA_Init>
  MX_I2C2_Init();
 8005704:	f000 f9e8 	bl	8005ad8 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8005708:	f000 fa14 	bl	8005b34 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 800570c:	f000 fa32 	bl	8005b74 <MX_SPI2_Init>
  MX_TIM1_Init();
 8005710:	f000 fa66 	bl	8005be0 <MX_TIM1_Init>
  MX_TIM4_Init();
 8005714:	f000 fb70 	bl	8005df8 <MX_TIM4_Init>
  MX_TIM8_Init();
 8005718:	f000 fc3c 	bl	8005f94 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 800571c:	f000 fd52 	bl	80061c4 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8005720:	f00a fc16 	bl	800ff50 <MX_FATFS_Init>
  MX_TIM6_Init();
 8005724:	f000 fbcc 	bl	8005ec0 <MX_TIM6_Init>
  MX_I2C1_Init();
 8005728:	f000 f9a8 	bl	8005a7c <MX_I2C1_Init>
  MX_TIM3_Init();
 800572c:	f000 fb00 	bl	8005d30 <MX_TIM3_Init>
  MX_TIM10_Init();
 8005730:	f000 fc88 	bl	8006044 <MX_TIM10_Init>
  MX_TIM11_Init();
 8005734:	f000 fcd4 	bl	80060e0 <MX_TIM11_Init>
  MX_ADC2_Init();
 8005738:	f000 f898 	bl	800586c <MX_ADC2_Init>
  MX_TIM7_Init();
 800573c:	f000 fbf6 	bl	8005f2c <MX_TIM7_Init>
  MX_TIM13_Init();
 8005740:	f000 fd1c 	bl	800617c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8005744:	f7ff ffb6 	bl	80056b4 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8005748:	f001 fdb6 	bl	80072b8 <cppLoop>
 800574c:	e7fc      	b.n	8005748 <main+0x58>
	...

08005750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b0a4      	sub	sp, #144	; 0x90
 8005754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005756:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800575a:	2234      	movs	r2, #52	; 0x34
 800575c:	2100      	movs	r1, #0
 800575e:	4618      	mov	r0, r3
 8005760:	f00f f841 	bl	80147e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005764:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005768:	2200      	movs	r2, #0
 800576a:	601a      	str	r2, [r3, #0]
 800576c:	605a      	str	r2, [r3, #4]
 800576e:	609a      	str	r2, [r3, #8]
 8005770:	60da      	str	r2, [r3, #12]
 8005772:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005774:	f107 030c 	add.w	r3, r7, #12
 8005778:	223c      	movs	r2, #60	; 0x3c
 800577a:	2100      	movs	r1, #0
 800577c:	4618      	mov	r0, r3
 800577e:	f00f f832 	bl	80147e6 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005782:	2300      	movs	r3, #0
 8005784:	60bb      	str	r3, [r7, #8]
 8005786:	4b37      	ldr	r3, [pc, #220]	; (8005864 <SystemClock_Config+0x114>)
 8005788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578a:	4a36      	ldr	r2, [pc, #216]	; (8005864 <SystemClock_Config+0x114>)
 800578c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005790:	6413      	str	r3, [r2, #64]	; 0x40
 8005792:	4b34      	ldr	r3, [pc, #208]	; (8005864 <SystemClock_Config+0x114>)
 8005794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800579a:	60bb      	str	r3, [r7, #8]
 800579c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800579e:	2300      	movs	r3, #0
 80057a0:	607b      	str	r3, [r7, #4]
 80057a2:	4b31      	ldr	r3, [pc, #196]	; (8005868 <SystemClock_Config+0x118>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a30      	ldr	r2, [pc, #192]	; (8005868 <SystemClock_Config+0x118>)
 80057a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057ac:	6013      	str	r3, [r2, #0]
 80057ae:	4b2e      	ldr	r3, [pc, #184]	; (8005868 <SystemClock_Config+0x118>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80057b6:	607b      	str	r3, [r7, #4]
 80057b8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80057ba:	2301      	movs	r3, #1
 80057bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80057be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80057c2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80057c4:	2302      	movs	r3, #2
 80057c6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80057c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80057cc:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 80057ce:	2308      	movs	r3, #8
 80057d0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80057d2:	23b4      	movs	r3, #180	; 0xb4
 80057d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80057d8:	2302      	movs	r3, #2
 80057da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80057de:	2308      	movs	r3, #8
 80057e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 80057e4:	2302      	movs	r3, #2
 80057e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80057ea:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80057ee:	4618      	mov	r0, r3
 80057f0:	f006 f932 	bl	800ba58 <HAL_RCC_OscConfig>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d001      	beq.n	80057fe <SystemClock_Config+0xae>
  {
    Error_Handler();
 80057fa:	f000 fe7f 	bl	80064fc <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80057fe:	f005 fcad 	bl	800b15c <HAL_PWREx_EnableOverDrive>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d001      	beq.n	800580c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8005808:	f000 fe78 	bl	80064fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800580c:	230f      	movs	r3, #15
 800580e:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005810:	2302      	movs	r3, #2
 8005812:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005814:	2300      	movs	r3, #0
 8005816:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005818:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800581c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800581e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005822:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005824:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005828:	2105      	movs	r1, #5
 800582a:	4618      	mov	r0, r3
 800582c:	f005 fce6 	bl	800b1fc <HAL_RCC_ClockConfig>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d001      	beq.n	800583a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8005836:	f000 fe61 	bl	80064fc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 800583a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800583e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8005840:	2300      	movs	r3, #0
 8005842:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8005844:	2300      	movs	r3, #0
 8005846:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005848:	f107 030c 	add.w	r3, r7, #12
 800584c:	4618      	mov	r0, r3
 800584e:	f005 fec5 	bl	800b5dc <HAL_RCCEx_PeriphCLKConfig>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d001      	beq.n	800585c <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8005858:	f000 fe50 	bl	80064fc <Error_Handler>
  }
}
 800585c:	bf00      	nop
 800585e:	3790      	adds	r7, #144	; 0x90
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	40023800 	.word	0x40023800
 8005868:	40007000 	.word	0x40007000

0800586c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005872:	463b      	mov	r3, r7
 8005874:	2200      	movs	r2, #0
 8005876:	601a      	str	r2, [r3, #0]
 8005878:	605a      	str	r2, [r3, #4]
 800587a:	609a      	str	r2, [r3, #8]
 800587c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800587e:	4b7c      	ldr	r3, [pc, #496]	; (8005a70 <MX_ADC2_Init+0x204>)
 8005880:	4a7c      	ldr	r2, [pc, #496]	; (8005a74 <MX_ADC2_Init+0x208>)
 8005882:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005884:	4b7a      	ldr	r3, [pc, #488]	; (8005a70 <MX_ADC2_Init+0x204>)
 8005886:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800588a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800588c:	4b78      	ldr	r3, [pc, #480]	; (8005a70 <MX_ADC2_Init+0x204>)
 800588e:	2200      	movs	r2, #0
 8005890:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8005892:	4b77      	ldr	r3, [pc, #476]	; (8005a70 <MX_ADC2_Init+0x204>)
 8005894:	2201      	movs	r2, #1
 8005896:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8005898:	4b75      	ldr	r3, [pc, #468]	; (8005a70 <MX_ADC2_Init+0x204>)
 800589a:	2201      	movs	r2, #1
 800589c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800589e:	4b74      	ldr	r3, [pc, #464]	; (8005a70 <MX_ADC2_Init+0x204>)
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80058a6:	4b72      	ldr	r3, [pc, #456]	; (8005a70 <MX_ADC2_Init+0x204>)
 80058a8:	2200      	movs	r2, #0
 80058aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80058ac:	4b70      	ldr	r3, [pc, #448]	; (8005a70 <MX_ADC2_Init+0x204>)
 80058ae:	4a72      	ldr	r2, [pc, #456]	; (8005a78 <MX_ADC2_Init+0x20c>)
 80058b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80058b2:	4b6f      	ldr	r3, [pc, #444]	; (8005a70 <MX_ADC2_Init+0x204>)
 80058b4:	2200      	movs	r2, #0
 80058b6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 80058b8:	4b6d      	ldr	r3, [pc, #436]	; (8005a70 <MX_ADC2_Init+0x204>)
 80058ba:	220e      	movs	r2, #14
 80058bc:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80058be:	4b6c      	ldr	r3, [pc, #432]	; (8005a70 <MX_ADC2_Init+0x204>)
 80058c0:	2201      	movs	r2, #1
 80058c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80058c6:	4b6a      	ldr	r3, [pc, #424]	; (8005a70 <MX_ADC2_Init+0x204>)
 80058c8:	2201      	movs	r2, #1
 80058ca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80058cc:	4868      	ldr	r0, [pc, #416]	; (8005a70 <MX_ADC2_Init+0x204>)
 80058ce:	f003 fa2d 	bl	8008d2c <HAL_ADC_Init>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d001      	beq.n	80058dc <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80058d8:	f000 fe10 	bl	80064fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80058dc:	230a      	movs	r3, #10
 80058de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80058e0:	2301      	movs	r3, #1
 80058e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80058e4:	2306      	movs	r3, #6
 80058e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80058e8:	463b      	mov	r3, r7
 80058ea:	4619      	mov	r1, r3
 80058ec:	4860      	ldr	r0, [pc, #384]	; (8005a70 <MX_ADC2_Init+0x204>)
 80058ee:	f003 fb71 	bl	8008fd4 <HAL_ADC_ConfigChannel>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d001      	beq.n	80058fc <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80058f8:	f000 fe00 	bl	80064fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80058fc:	230b      	movs	r3, #11
 80058fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8005900:	2302      	movs	r3, #2
 8005902:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005904:	463b      	mov	r3, r7
 8005906:	4619      	mov	r1, r3
 8005908:	4859      	ldr	r0, [pc, #356]	; (8005a70 <MX_ADC2_Init+0x204>)
 800590a:	f003 fb63 	bl	8008fd4 <HAL_ADC_ConfigChannel>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d001      	beq.n	8005918 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8005914:	f000 fdf2 	bl	80064fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8005918:	230c      	movs	r3, #12
 800591a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800591c:	2303      	movs	r3, #3
 800591e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005920:	463b      	mov	r3, r7
 8005922:	4619      	mov	r1, r3
 8005924:	4852      	ldr	r0, [pc, #328]	; (8005a70 <MX_ADC2_Init+0x204>)
 8005926:	f003 fb55 	bl	8008fd4 <HAL_ADC_ConfigChannel>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d001      	beq.n	8005934 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8005930:	f000 fde4 	bl	80064fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8005934:	230d      	movs	r3, #13
 8005936:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8005938:	2304      	movs	r3, #4
 800593a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800593c:	463b      	mov	r3, r7
 800593e:	4619      	mov	r1, r3
 8005940:	484b      	ldr	r0, [pc, #300]	; (8005a70 <MX_ADC2_Init+0x204>)
 8005942:	f003 fb47 	bl	8008fd4 <HAL_ADC_ConfigChannel>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d001      	beq.n	8005950 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 800594c:	f000 fdd6 	bl	80064fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8005950:	2300      	movs	r3, #0
 8005952:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8005954:	2305      	movs	r3, #5
 8005956:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005958:	463b      	mov	r3, r7
 800595a:	4619      	mov	r1, r3
 800595c:	4844      	ldr	r0, [pc, #272]	; (8005a70 <MX_ADC2_Init+0x204>)
 800595e:	f003 fb39 	bl	8008fd4 <HAL_ADC_ConfigChannel>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d001      	beq.n	800596c <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8005968:	f000 fdc8 	bl	80064fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800596c:	2301      	movs	r3, #1
 800596e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8005970:	2306      	movs	r3, #6
 8005972:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005974:	463b      	mov	r3, r7
 8005976:	4619      	mov	r1, r3
 8005978:	483d      	ldr	r0, [pc, #244]	; (8005a70 <MX_ADC2_Init+0x204>)
 800597a:	f003 fb2b 	bl	8008fd4 <HAL_ADC_ConfigChannel>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d001      	beq.n	8005988 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8005984:	f000 fdba 	bl	80064fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8005988:	2302      	movs	r3, #2
 800598a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800598c:	2307      	movs	r3, #7
 800598e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005990:	463b      	mov	r3, r7
 8005992:	4619      	mov	r1, r3
 8005994:	4836      	ldr	r0, [pc, #216]	; (8005a70 <MX_ADC2_Init+0x204>)
 8005996:	f003 fb1d 	bl	8008fd4 <HAL_ADC_ConfigChannel>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d001      	beq.n	80059a4 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 80059a0:	f000 fdac 	bl	80064fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80059a4:	2303      	movs	r3, #3
 80059a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80059a8:	2308      	movs	r3, #8
 80059aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80059ac:	463b      	mov	r3, r7
 80059ae:	4619      	mov	r1, r3
 80059b0:	482f      	ldr	r0, [pc, #188]	; (8005a70 <MX_ADC2_Init+0x204>)
 80059b2:	f003 fb0f 	bl	8008fd4 <HAL_ADC_ConfigChannel>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d001      	beq.n	80059c0 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 80059bc:	f000 fd9e 	bl	80064fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80059c0:	2304      	movs	r3, #4
 80059c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80059c4:	2309      	movs	r3, #9
 80059c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80059c8:	463b      	mov	r3, r7
 80059ca:	4619      	mov	r1, r3
 80059cc:	4828      	ldr	r0, [pc, #160]	; (8005a70 <MX_ADC2_Init+0x204>)
 80059ce:	f003 fb01 	bl	8008fd4 <HAL_ADC_ConfigChannel>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d001      	beq.n	80059dc <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 80059d8:	f000 fd90 	bl	80064fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80059dc:	2305      	movs	r3, #5
 80059de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80059e0:	230a      	movs	r3, #10
 80059e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80059e4:	463b      	mov	r3, r7
 80059e6:	4619      	mov	r1, r3
 80059e8:	4821      	ldr	r0, [pc, #132]	; (8005a70 <MX_ADC2_Init+0x204>)
 80059ea:	f003 faf3 	bl	8008fd4 <HAL_ADC_ConfigChannel>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d001      	beq.n	80059f8 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 80059f4:	f000 fd82 	bl	80064fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80059f8:	2306      	movs	r3, #6
 80059fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 80059fc:	230b      	movs	r3, #11
 80059fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005a00:	463b      	mov	r3, r7
 8005a02:	4619      	mov	r1, r3
 8005a04:	481a      	ldr	r0, [pc, #104]	; (8005a70 <MX_ADC2_Init+0x204>)
 8005a06:	f003 fae5 	bl	8008fd4 <HAL_ADC_ConfigChannel>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d001      	beq.n	8005a14 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8005a10:	f000 fd74 	bl	80064fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8005a14:	2307      	movs	r3, #7
 8005a16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8005a18:	230c      	movs	r3, #12
 8005a1a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005a1c:	463b      	mov	r3, r7
 8005a1e:	4619      	mov	r1, r3
 8005a20:	4813      	ldr	r0, [pc, #76]	; (8005a70 <MX_ADC2_Init+0x204>)
 8005a22:	f003 fad7 	bl	8008fd4 <HAL_ADC_ConfigChannel>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d001      	beq.n	8005a30 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8005a2c:	f000 fd66 	bl	80064fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8005a30:	2308      	movs	r3, #8
 8005a32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8005a34:	230d      	movs	r3, #13
 8005a36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005a38:	463b      	mov	r3, r7
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	480c      	ldr	r0, [pc, #48]	; (8005a70 <MX_ADC2_Init+0x204>)
 8005a3e:	f003 fac9 	bl	8008fd4 <HAL_ADC_ConfigChannel>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d001      	beq.n	8005a4c <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8005a48:	f000 fd58 	bl	80064fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8005a4c:	2309      	movs	r3, #9
 8005a4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8005a50:	230e      	movs	r3, #14
 8005a52:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005a54:	463b      	mov	r3, r7
 8005a56:	4619      	mov	r1, r3
 8005a58:	4805      	ldr	r0, [pc, #20]	; (8005a70 <MX_ADC2_Init+0x204>)
 8005a5a:	f003 fabb 	bl	8008fd4 <HAL_ADC_ConfigChannel>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d001      	beq.n	8005a68 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 8005a64:	f000 fd4a 	bl	80064fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8005a68:	bf00      	nop
 8005a6a:	3710      	adds	r7, #16
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	2003e920 	.word	0x2003e920
 8005a74:	40012100 	.word	0x40012100
 8005a78:	0f000001 	.word	0x0f000001

08005a7c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005a80:	4b12      	ldr	r3, [pc, #72]	; (8005acc <MX_I2C1_Init+0x50>)
 8005a82:	4a13      	ldr	r2, [pc, #76]	; (8005ad0 <MX_I2C1_Init+0x54>)
 8005a84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005a86:	4b11      	ldr	r3, [pc, #68]	; (8005acc <MX_I2C1_Init+0x50>)
 8005a88:	4a12      	ldr	r2, [pc, #72]	; (8005ad4 <MX_I2C1_Init+0x58>)
 8005a8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005a8c:	4b0f      	ldr	r3, [pc, #60]	; (8005acc <MX_I2C1_Init+0x50>)
 8005a8e:	2200      	movs	r2, #0
 8005a90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005a92:	4b0e      	ldr	r3, [pc, #56]	; (8005acc <MX_I2C1_Init+0x50>)
 8005a94:	2200      	movs	r2, #0
 8005a96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005a98:	4b0c      	ldr	r3, [pc, #48]	; (8005acc <MX_I2C1_Init+0x50>)
 8005a9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005a9e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005aa0:	4b0a      	ldr	r3, [pc, #40]	; (8005acc <MX_I2C1_Init+0x50>)
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005aa6:	4b09      	ldr	r3, [pc, #36]	; (8005acc <MX_I2C1_Init+0x50>)
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005aac:	4b07      	ldr	r3, [pc, #28]	; (8005acc <MX_I2C1_Init+0x50>)
 8005aae:	2200      	movs	r2, #0
 8005ab0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8005ab2:	4b06      	ldr	r3, [pc, #24]	; (8005acc <MX_I2C1_Init+0x50>)
 8005ab4:	2280      	movs	r2, #128	; 0x80
 8005ab6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005ab8:	4804      	ldr	r0, [pc, #16]	; (8005acc <MX_I2C1_Init+0x50>)
 8005aba:	f004 fbc5 	bl	800a248 <HAL_I2C_Init>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d001      	beq.n	8005ac8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005ac4:	f000 fd1a 	bl	80064fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005ac8:	bf00      	nop
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	2003e968 	.word	0x2003e968
 8005ad0:	40005400 	.word	0x40005400
 8005ad4:	000186a0 	.word	0x000186a0

08005ad8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8005adc:	4b12      	ldr	r3, [pc, #72]	; (8005b28 <MX_I2C2_Init+0x50>)
 8005ade:	4a13      	ldr	r2, [pc, #76]	; (8005b2c <MX_I2C2_Init+0x54>)
 8005ae0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8005ae2:	4b11      	ldr	r3, [pc, #68]	; (8005b28 <MX_I2C2_Init+0x50>)
 8005ae4:	4a12      	ldr	r2, [pc, #72]	; (8005b30 <MX_I2C2_Init+0x58>)
 8005ae6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005ae8:	4b0f      	ldr	r3, [pc, #60]	; (8005b28 <MX_I2C2_Init+0x50>)
 8005aea:	2200      	movs	r2, #0
 8005aec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8005aee:	4b0e      	ldr	r3, [pc, #56]	; (8005b28 <MX_I2C2_Init+0x50>)
 8005af0:	2200      	movs	r2, #0
 8005af2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005af4:	4b0c      	ldr	r3, [pc, #48]	; (8005b28 <MX_I2C2_Init+0x50>)
 8005af6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005afa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005afc:	4b0a      	ldr	r3, [pc, #40]	; (8005b28 <MX_I2C2_Init+0x50>)
 8005afe:	2200      	movs	r2, #0
 8005b00:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8005b02:	4b09      	ldr	r3, [pc, #36]	; (8005b28 <MX_I2C2_Init+0x50>)
 8005b04:	2200      	movs	r2, #0
 8005b06:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005b08:	4b07      	ldr	r3, [pc, #28]	; (8005b28 <MX_I2C2_Init+0x50>)
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8005b0e:	4b06      	ldr	r3, [pc, #24]	; (8005b28 <MX_I2C2_Init+0x50>)
 8005b10:	2280      	movs	r2, #128	; 0x80
 8005b12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005b14:	4804      	ldr	r0, [pc, #16]	; (8005b28 <MX_I2C2_Init+0x50>)
 8005b16:	f004 fb97 	bl	800a248 <HAL_I2C_Init>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d001      	beq.n	8005b24 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8005b20:	f000 fcec 	bl	80064fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8005b24:	bf00      	nop
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	2003e9fc 	.word	0x2003e9fc
 8005b2c:	40005800 	.word	0x40005800
 8005b30:	000186a0 	.word	0x000186a0

08005b34 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8005b34:	b480      	push	{r7}
 8005b36:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8005b38:	4b0c      	ldr	r3, [pc, #48]	; (8005b6c <MX_SDIO_SD_Init+0x38>)
 8005b3a:	4a0d      	ldr	r2, [pc, #52]	; (8005b70 <MX_SDIO_SD_Init+0x3c>)
 8005b3c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8005b3e:	4b0b      	ldr	r3, [pc, #44]	; (8005b6c <MX_SDIO_SD_Init+0x38>)
 8005b40:	2200      	movs	r2, #0
 8005b42:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8005b44:	4b09      	ldr	r3, [pc, #36]	; (8005b6c <MX_SDIO_SD_Init+0x38>)
 8005b46:	2200      	movs	r2, #0
 8005b48:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005b4a:	4b08      	ldr	r3, [pc, #32]	; (8005b6c <MX_SDIO_SD_Init+0x38>)
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8005b50:	4b06      	ldr	r3, [pc, #24]	; (8005b6c <MX_SDIO_SD_Init+0x38>)
 8005b52:	2200      	movs	r2, #0
 8005b54:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005b56:	4b05      	ldr	r3, [pc, #20]	; (8005b6c <MX_SDIO_SD_Init+0x38>)
 8005b58:	2200      	movs	r2, #0
 8005b5a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 8005b5c:	4b03      	ldr	r3, [pc, #12]	; (8005b6c <MX_SDIO_SD_Init+0x38>)
 8005b5e:	2202      	movs	r2, #2
 8005b60:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8005b62:	bf00      	nop
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr
 8005b6c:	2003ebfc 	.word	0x2003ebfc
 8005b70:	40012c00 	.word	0x40012c00

08005b74 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8005b78:	4b17      	ldr	r3, [pc, #92]	; (8005bd8 <MX_SPI2_Init+0x64>)
 8005b7a:	4a18      	ldr	r2, [pc, #96]	; (8005bdc <MX_SPI2_Init+0x68>)
 8005b7c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005b7e:	4b16      	ldr	r3, [pc, #88]	; (8005bd8 <MX_SPI2_Init+0x64>)
 8005b80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005b84:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005b86:	4b14      	ldr	r3, [pc, #80]	; (8005bd8 <MX_SPI2_Init+0x64>)
 8005b88:	2200      	movs	r2, #0
 8005b8a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005b8c:	4b12      	ldr	r3, [pc, #72]	; (8005bd8 <MX_SPI2_Init+0x64>)
 8005b8e:	2200      	movs	r2, #0
 8005b90:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8005b92:	4b11      	ldr	r3, [pc, #68]	; (8005bd8 <MX_SPI2_Init+0x64>)
 8005b94:	2202      	movs	r2, #2
 8005b96:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005b98:	4b0f      	ldr	r3, [pc, #60]	; (8005bd8 <MX_SPI2_Init+0x64>)
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005b9e:	4b0e      	ldr	r3, [pc, #56]	; (8005bd8 <MX_SPI2_Init+0x64>)
 8005ba0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ba4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8005ba6:	4b0c      	ldr	r3, [pc, #48]	; (8005bd8 <MX_SPI2_Init+0x64>)
 8005ba8:	2228      	movs	r2, #40	; 0x28
 8005baa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005bac:	4b0a      	ldr	r3, [pc, #40]	; (8005bd8 <MX_SPI2_Init+0x64>)
 8005bae:	2200      	movs	r2, #0
 8005bb0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005bb2:	4b09      	ldr	r3, [pc, #36]	; (8005bd8 <MX_SPI2_Init+0x64>)
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005bb8:	4b07      	ldr	r3, [pc, #28]	; (8005bd8 <MX_SPI2_Init+0x64>)
 8005bba:	2200      	movs	r2, #0
 8005bbc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8005bbe:	4b06      	ldr	r3, [pc, #24]	; (8005bd8 <MX_SPI2_Init+0x64>)
 8005bc0:	220a      	movs	r2, #10
 8005bc2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005bc4:	4804      	ldr	r0, [pc, #16]	; (8005bd8 <MX_SPI2_Init+0x64>)
 8005bc6:	f007 fc71 	bl	800d4ac <HAL_SPI_Init>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d001      	beq.n	8005bd4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8005bd0:	f000 fc94 	bl	80064fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005bd4:	bf00      	nop
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	2003e848 	.word	0x2003e848
 8005bdc:	40003800 	.word	0x40003800

08005be0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b09a      	sub	sp, #104	; 0x68
 8005be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005be6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005bea:	2224      	movs	r2, #36	; 0x24
 8005bec:	2100      	movs	r1, #0
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f00e fdf9 	bl	80147e6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005bf4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	601a      	str	r2, [r3, #0]
 8005bfc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005bfe:	f107 0320 	add.w	r3, r7, #32
 8005c02:	2200      	movs	r2, #0
 8005c04:	601a      	str	r2, [r3, #0]
 8005c06:	605a      	str	r2, [r3, #4]
 8005c08:	609a      	str	r2, [r3, #8]
 8005c0a:	60da      	str	r2, [r3, #12]
 8005c0c:	611a      	str	r2, [r3, #16]
 8005c0e:	615a      	str	r2, [r3, #20]
 8005c10:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005c12:	463b      	mov	r3, r7
 8005c14:	2220      	movs	r2, #32
 8005c16:	2100      	movs	r1, #0
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f00e fde4 	bl	80147e6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005c1e:	4b42      	ldr	r3, [pc, #264]	; (8005d28 <MX_TIM1_Init+0x148>)
 8005c20:	4a42      	ldr	r2, [pc, #264]	; (8005d2c <MX_TIM1_Init+0x14c>)
 8005c22:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8005c24:	4b40      	ldr	r3, [pc, #256]	; (8005d28 <MX_TIM1_Init+0x148>)
 8005c26:	2200      	movs	r2, #0
 8005c28:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c2a:	4b3f      	ldr	r3, [pc, #252]	; (8005d28 <MX_TIM1_Init+0x148>)
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8005c30:	4b3d      	ldr	r3, [pc, #244]	; (8005d28 <MX_TIM1_Init+0x148>)
 8005c32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c36:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c38:	4b3b      	ldr	r3, [pc, #236]	; (8005d28 <MX_TIM1_Init+0x148>)
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005c3e:	4b3a      	ldr	r3, [pc, #232]	; (8005d28 <MX_TIM1_Init+0x148>)
 8005c40:	2200      	movs	r2, #0
 8005c42:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c44:	4b38      	ldr	r3, [pc, #224]	; (8005d28 <MX_TIM1_Init+0x148>)
 8005c46:	2200      	movs	r2, #0
 8005c48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005c4a:	4837      	ldr	r0, [pc, #220]	; (8005d28 <MX_TIM1_Init+0x148>)
 8005c4c:	f008 f9d1 	bl	800dff2 <HAL_TIM_PWM_Init>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d001      	beq.n	8005c5a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8005c56:	f000 fc51 	bl	80064fc <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005c62:	2301      	movs	r3, #1
 8005c64:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005c66:	2300      	movs	r3, #0
 8005c68:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005c72:	2301      	movs	r3, #1
 8005c74:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005c76:	2300      	movs	r3, #0
 8005c78:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8005c7e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005c82:	4619      	mov	r1, r3
 8005c84:	4828      	ldr	r0, [pc, #160]	; (8005d28 <MX_TIM1_Init+0x148>)
 8005c86:	f008 fa1d 	bl	800e0c4 <HAL_TIM_Encoder_Init>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d001      	beq.n	8005c94 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8005c90:	f000 fc34 	bl	80064fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c94:	2300      	movs	r3, #0
 8005c96:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005c9c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	4821      	ldr	r0, [pc, #132]	; (8005d28 <MX_TIM1_Init+0x148>)
 8005ca4:	f008 ff44 	bl	800eb30 <HAL_TIMEx_MasterConfigSynchronization>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d001      	beq.n	8005cb2 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8005cae:	f000 fc25 	bl	80064fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005cb2:	2360      	movs	r3, #96	; 0x60
 8005cb4:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005cce:	f107 0320 	add.w	r3, r7, #32
 8005cd2:	2208      	movs	r2, #8
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	4814      	ldr	r0, [pc, #80]	; (8005d28 <MX_TIM1_Init+0x148>)
 8005cd8:	f008 fbc6 	bl	800e468 <HAL_TIM_PWM_ConfigChannel>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d001      	beq.n	8005ce6 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8005ce2:	f000 fc0b 	bl	80064fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005cea:	2300      	movs	r3, #0
 8005cec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005cfa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005cfe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005d00:	2300      	movs	r3, #0
 8005d02:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005d04:	463b      	mov	r3, r7
 8005d06:	4619      	mov	r1, r3
 8005d08:	4807      	ldr	r0, [pc, #28]	; (8005d28 <MX_TIM1_Init+0x148>)
 8005d0a:	f008 ff8d 	bl	800ec28 <HAL_TIMEx_ConfigBreakDeadTime>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d001      	beq.n	8005d18 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8005d14:	f000 fbf2 	bl	80064fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005d18:	4803      	ldr	r0, [pc, #12]	; (8005d28 <MX_TIM1_Init+0x148>)
 8005d1a:	f000 ffdf 	bl	8006cdc <HAL_TIM_MspPostInit>

}
 8005d1e:	bf00      	nop
 8005d20:	3768      	adds	r7, #104	; 0x68
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	2003ebbc 	.word	0x2003ebbc
 8005d2c:	40010000 	.word	0x40010000

08005d30 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b08a      	sub	sp, #40	; 0x28
 8005d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d36:	f107 0320 	add.w	r3, r7, #32
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	601a      	str	r2, [r3, #0]
 8005d3e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005d40:	1d3b      	adds	r3, r7, #4
 8005d42:	2200      	movs	r2, #0
 8005d44:	601a      	str	r2, [r3, #0]
 8005d46:	605a      	str	r2, [r3, #4]
 8005d48:	609a      	str	r2, [r3, #8]
 8005d4a:	60da      	str	r2, [r3, #12]
 8005d4c:	611a      	str	r2, [r3, #16]
 8005d4e:	615a      	str	r2, [r3, #20]
 8005d50:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005d52:	4b27      	ldr	r3, [pc, #156]	; (8005df0 <MX_TIM3_Init+0xc0>)
 8005d54:	4a27      	ldr	r2, [pc, #156]	; (8005df4 <MX_TIM3_Init+0xc4>)
 8005d56:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005d58:	4b25      	ldr	r3, [pc, #148]	; (8005df0 <MX_TIM3_Init+0xc0>)
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d5e:	4b24      	ldr	r3, [pc, #144]	; (8005df0 <MX_TIM3_Init+0xc0>)
 8005d60:	2200      	movs	r2, #0
 8005d62:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8005d64:	4b22      	ldr	r3, [pc, #136]	; (8005df0 <MX_TIM3_Init+0xc0>)
 8005d66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d6a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d6c:	4b20      	ldr	r3, [pc, #128]	; (8005df0 <MX_TIM3_Init+0xc0>)
 8005d6e:	2200      	movs	r2, #0
 8005d70:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d72:	4b1f      	ldr	r3, [pc, #124]	; (8005df0 <MX_TIM3_Init+0xc0>)
 8005d74:	2200      	movs	r2, #0
 8005d76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005d78:	481d      	ldr	r0, [pc, #116]	; (8005df0 <MX_TIM3_Init+0xc0>)
 8005d7a:	f008 f93a 	bl	800dff2 <HAL_TIM_PWM_Init>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d001      	beq.n	8005d88 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8005d84:	f000 fbba 	bl	80064fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005d90:	f107 0320 	add.w	r3, r7, #32
 8005d94:	4619      	mov	r1, r3
 8005d96:	4816      	ldr	r0, [pc, #88]	; (8005df0 <MX_TIM3_Init+0xc0>)
 8005d98:	f008 feca 	bl	800eb30 <HAL_TIMEx_MasterConfigSynchronization>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d001      	beq.n	8005da6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8005da2:	f000 fbab 	bl	80064fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005da6:	2360      	movs	r3, #96	; 0x60
 8005da8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005daa:	2300      	movs	r3, #0
 8005dac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005dae:	2300      	movs	r3, #0
 8005db0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005db2:	2300      	movs	r3, #0
 8005db4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005db6:	1d3b      	adds	r3, r7, #4
 8005db8:	2200      	movs	r2, #0
 8005dba:	4619      	mov	r1, r3
 8005dbc:	480c      	ldr	r0, [pc, #48]	; (8005df0 <MX_TIM3_Init+0xc0>)
 8005dbe:	f008 fb53 	bl	800e468 <HAL_TIM_PWM_ConfigChannel>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d001      	beq.n	8005dcc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8005dc8:	f000 fb98 	bl	80064fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005dcc:	1d3b      	adds	r3, r7, #4
 8005dce:	2204      	movs	r2, #4
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	4807      	ldr	r0, [pc, #28]	; (8005df0 <MX_TIM3_Init+0xc0>)
 8005dd4:	f008 fb48 	bl	800e468 <HAL_TIM_PWM_ConfigChannel>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d001      	beq.n	8005de2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8005dde:	f000 fb8d 	bl	80064fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005de2:	4803      	ldr	r0, [pc, #12]	; (8005df0 <MX_TIM3_Init+0xc0>)
 8005de4:	f000 ff7a 	bl	8006cdc <HAL_TIM_MspPostInit>

}
 8005de8:	bf00      	nop
 8005dea:	3728      	adds	r7, #40	; 0x28
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	2003ea54 	.word	0x2003ea54
 8005df4:	40000400 	.word	0x40000400

08005df8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b08a      	sub	sp, #40	; 0x28
 8005dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005dfe:	f107 0320 	add.w	r3, r7, #32
 8005e02:	2200      	movs	r2, #0
 8005e04:	601a      	str	r2, [r3, #0]
 8005e06:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005e08:	1d3b      	adds	r3, r7, #4
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	601a      	str	r2, [r3, #0]
 8005e0e:	605a      	str	r2, [r3, #4]
 8005e10:	609a      	str	r2, [r3, #8]
 8005e12:	60da      	str	r2, [r3, #12]
 8005e14:	611a      	str	r2, [r3, #16]
 8005e16:	615a      	str	r2, [r3, #20]
 8005e18:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005e1a:	4b27      	ldr	r3, [pc, #156]	; (8005eb8 <MX_TIM4_Init+0xc0>)
 8005e1c:	4a27      	ldr	r2, [pc, #156]	; (8005ebc <MX_TIM4_Init+0xc4>)
 8005e1e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8005e20:	4b25      	ldr	r3, [pc, #148]	; (8005eb8 <MX_TIM4_Init+0xc0>)
 8005e22:	2200      	movs	r2, #0
 8005e24:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e26:	4b24      	ldr	r3, [pc, #144]	; (8005eb8 <MX_TIM4_Init+0xc0>)
 8005e28:	2200      	movs	r2, #0
 8005e2a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 8005e2c:	4b22      	ldr	r3, [pc, #136]	; (8005eb8 <MX_TIM4_Init+0xc0>)
 8005e2e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8005e32:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e34:	4b20      	ldr	r3, [pc, #128]	; (8005eb8 <MX_TIM4_Init+0xc0>)
 8005e36:	2200      	movs	r2, #0
 8005e38:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005e3a:	4b1f      	ldr	r3, [pc, #124]	; (8005eb8 <MX_TIM4_Init+0xc0>)
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8005e40:	481d      	ldr	r0, [pc, #116]	; (8005eb8 <MX_TIM4_Init+0xc0>)
 8005e42:	f008 f8d6 	bl	800dff2 <HAL_TIM_PWM_Init>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d001      	beq.n	8005e50 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8005e4c:	f000 fb56 	bl	80064fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005e50:	2300      	movs	r3, #0
 8005e52:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005e54:	2300      	movs	r3, #0
 8005e56:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005e58:	f107 0320 	add.w	r3, r7, #32
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	4816      	ldr	r0, [pc, #88]	; (8005eb8 <MX_TIM4_Init+0xc0>)
 8005e60:	f008 fe66 	bl	800eb30 <HAL_TIMEx_MasterConfigSynchronization>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d001      	beq.n	8005e6e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8005e6a:	f000 fb47 	bl	80064fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005e6e:	2360      	movs	r3, #96	; 0x60
 8005e70:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005e72:	2300      	movs	r3, #0
 8005e74:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005e76:	2300      	movs	r3, #0
 8005e78:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005e7e:	1d3b      	adds	r3, r7, #4
 8005e80:	2208      	movs	r2, #8
 8005e82:	4619      	mov	r1, r3
 8005e84:	480c      	ldr	r0, [pc, #48]	; (8005eb8 <MX_TIM4_Init+0xc0>)
 8005e86:	f008 faef 	bl	800e468 <HAL_TIM_PWM_ConfigChannel>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d001      	beq.n	8005e94 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8005e90:	f000 fb34 	bl	80064fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005e94:	1d3b      	adds	r3, r7, #4
 8005e96:	220c      	movs	r2, #12
 8005e98:	4619      	mov	r1, r3
 8005e9a:	4807      	ldr	r0, [pc, #28]	; (8005eb8 <MX_TIM4_Init+0xc0>)
 8005e9c:	f008 fae4 	bl	800e468 <HAL_TIM_PWM_ConfigChannel>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d001      	beq.n	8005eaa <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8005ea6:	f000 fb29 	bl	80064fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8005eaa:	4803      	ldr	r0, [pc, #12]	; (8005eb8 <MX_TIM4_Init+0xc0>)
 8005eac:	f000 ff16 	bl	8006cdc <HAL_TIM_MspPostInit>

}
 8005eb0:	bf00      	nop
 8005eb2:	3728      	adds	r7, #40	; 0x28
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	2003e8e0 	.word	0x2003e8e0
 8005ebc:	40000800 	.word	0x40000800

08005ec0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005ec6:	463b      	mov	r3, r7
 8005ec8:	2200      	movs	r2, #0
 8005eca:	601a      	str	r2, [r3, #0]
 8005ecc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005ece:	4b15      	ldr	r3, [pc, #84]	; (8005f24 <MX_TIM6_Init+0x64>)
 8005ed0:	4a15      	ldr	r2, [pc, #84]	; (8005f28 <MX_TIM6_Init+0x68>)
 8005ed2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8005ed4:	4b13      	ldr	r3, [pc, #76]	; (8005f24 <MX_TIM6_Init+0x64>)
 8005ed6:	2259      	movs	r2, #89	; 0x59
 8005ed8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005eda:	4b12      	ldr	r3, [pc, #72]	; (8005f24 <MX_TIM6_Init+0x64>)
 8005edc:	2200      	movs	r2, #0
 8005ede:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8005ee0:	4b10      	ldr	r3, [pc, #64]	; (8005f24 <MX_TIM6_Init+0x64>)
 8005ee2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005ee6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005ee8:	4b0e      	ldr	r3, [pc, #56]	; (8005f24 <MX_TIM6_Init+0x64>)
 8005eea:	2280      	movs	r2, #128	; 0x80
 8005eec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005eee:	480d      	ldr	r0, [pc, #52]	; (8005f24 <MX_TIM6_Init+0x64>)
 8005ef0:	f008 f830 	bl	800df54 <HAL_TIM_Base_Init>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d001      	beq.n	8005efe <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8005efa:	f000 faff 	bl	80064fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005efe:	2300      	movs	r3, #0
 8005f00:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005f02:	2300      	movs	r3, #0
 8005f04:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005f06:	463b      	mov	r3, r7
 8005f08:	4619      	mov	r1, r3
 8005f0a:	4806      	ldr	r0, [pc, #24]	; (8005f24 <MX_TIM6_Init+0x64>)
 8005f0c:	f008 fe10 	bl	800eb30 <HAL_TIMEx_MasterConfigSynchronization>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d001      	beq.n	8005f1a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8005f16:	f000 faf1 	bl	80064fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8005f1a:	bf00      	nop
 8005f1c:	3708      	adds	r7, #8
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	2003eb7c 	.word	0x2003eb7c
 8005f28:	40001000 	.word	0x40001000

08005f2c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b082      	sub	sp, #8
 8005f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005f32:	463b      	mov	r3, r7
 8005f34:	2200      	movs	r2, #0
 8005f36:	601a      	str	r2, [r3, #0]
 8005f38:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005f3a:	4b14      	ldr	r3, [pc, #80]	; (8005f8c <MX_TIM7_Init+0x60>)
 8005f3c:	4a14      	ldr	r2, [pc, #80]	; (8005f90 <MX_TIM7_Init+0x64>)
 8005f3e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 8005f40:	4b12      	ldr	r3, [pc, #72]	; (8005f8c <MX_TIM7_Init+0x60>)
 8005f42:	22b3      	movs	r2, #179	; 0xb3
 8005f44:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f46:	4b11      	ldr	r3, [pc, #68]	; (8005f8c <MX_TIM7_Init+0x60>)
 8005f48:	2200      	movs	r2, #0
 8005f4a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 8005f4c:	4b0f      	ldr	r3, [pc, #60]	; (8005f8c <MX_TIM7_Init+0x60>)
 8005f4e:	2231      	movs	r2, #49	; 0x31
 8005f50:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005f52:	4b0e      	ldr	r3, [pc, #56]	; (8005f8c <MX_TIM7_Init+0x60>)
 8005f54:	2280      	movs	r2, #128	; 0x80
 8005f56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005f58:	480c      	ldr	r0, [pc, #48]	; (8005f8c <MX_TIM7_Init+0x60>)
 8005f5a:	f007 fffb 	bl	800df54 <HAL_TIM_Base_Init>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d001      	beq.n	8005f68 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8005f64:	f000 faca 	bl	80064fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005f70:	463b      	mov	r3, r7
 8005f72:	4619      	mov	r1, r3
 8005f74:	4805      	ldr	r0, [pc, #20]	; (8005f8c <MX_TIM7_Init+0x60>)
 8005f76:	f008 fddb 	bl	800eb30 <HAL_TIMEx_MasterConfigSynchronization>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d001      	beq.n	8005f84 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8005f80:	f000 fabc 	bl	80064fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005f84:	bf00      	nop
 8005f86:	3708      	adds	r7, #8
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	2003ed20 	.word	0x2003ed20
 8005f90:	40001400 	.word	0x40001400

08005f94 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b08c      	sub	sp, #48	; 0x30
 8005f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005f9a:	f107 030c 	add.w	r3, r7, #12
 8005f9e:	2224      	movs	r2, #36	; 0x24
 8005fa0:	2100      	movs	r1, #0
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f00e fc1f 	bl	80147e6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005fa8:	1d3b      	adds	r3, r7, #4
 8005faa:	2200      	movs	r2, #0
 8005fac:	601a      	str	r2, [r3, #0]
 8005fae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8005fb0:	4b22      	ldr	r3, [pc, #136]	; (800603c <MX_TIM8_Init+0xa8>)
 8005fb2:	4a23      	ldr	r2, [pc, #140]	; (8006040 <MX_TIM8_Init+0xac>)
 8005fb4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8005fb6:	4b21      	ldr	r3, [pc, #132]	; (800603c <MX_TIM8_Init+0xa8>)
 8005fb8:	2200      	movs	r2, #0
 8005fba:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8005fbc:	4b1f      	ldr	r3, [pc, #124]	; (800603c <MX_TIM8_Init+0xa8>)
 8005fbe:	2210      	movs	r2, #16
 8005fc0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8005fc2:	4b1e      	ldr	r3, [pc, #120]	; (800603c <MX_TIM8_Init+0xa8>)
 8005fc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005fc8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005fca:	4b1c      	ldr	r3, [pc, #112]	; (800603c <MX_TIM8_Init+0xa8>)
 8005fcc:	2200      	movs	r2, #0
 8005fce:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8005fd0:	4b1a      	ldr	r3, [pc, #104]	; (800603c <MX_TIM8_Init+0xa8>)
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005fd6:	4b19      	ldr	r3, [pc, #100]	; (800603c <MX_TIM8_Init+0xa8>)
 8005fd8:	2200      	movs	r2, #0
 8005fda:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005fec:	2300      	movs	r3, #0
 8005fee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8006000:	f107 030c 	add.w	r3, r7, #12
 8006004:	4619      	mov	r1, r3
 8006006:	480d      	ldr	r0, [pc, #52]	; (800603c <MX_TIM8_Init+0xa8>)
 8006008:	f008 f85c 	bl	800e0c4 <HAL_TIM_Encoder_Init>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d001      	beq.n	8006016 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8006012:	f000 fa73 	bl	80064fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006016:	2300      	movs	r3, #0
 8006018:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800601a:	2300      	movs	r3, #0
 800601c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800601e:	1d3b      	adds	r3, r7, #4
 8006020:	4619      	mov	r1, r3
 8006022:	4806      	ldr	r0, [pc, #24]	; (800603c <MX_TIM8_Init+0xa8>)
 8006024:	f008 fd84 	bl	800eb30 <HAL_TIMEx_MasterConfigSynchronization>
 8006028:	4603      	mov	r3, r0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d001      	beq.n	8006032 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800602e:	f000 fa65 	bl	80064fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8006032:	bf00      	nop
 8006034:	3730      	adds	r7, #48	; 0x30
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	2003e8a0 	.word	0x2003e8a0
 8006040:	40010400 	.word	0x40010400

08006044 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b088      	sub	sp, #32
 8006048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800604a:	1d3b      	adds	r3, r7, #4
 800604c:	2200      	movs	r2, #0
 800604e:	601a      	str	r2, [r3, #0]
 8006050:	605a      	str	r2, [r3, #4]
 8006052:	609a      	str	r2, [r3, #8]
 8006054:	60da      	str	r2, [r3, #12]
 8006056:	611a      	str	r2, [r3, #16]
 8006058:	615a      	str	r2, [r3, #20]
 800605a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800605c:	4b1e      	ldr	r3, [pc, #120]	; (80060d8 <MX_TIM10_Init+0x94>)
 800605e:	4a1f      	ldr	r2, [pc, #124]	; (80060dc <MX_TIM10_Init+0x98>)
 8006060:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8006062:	4b1d      	ldr	r3, [pc, #116]	; (80060d8 <MX_TIM10_Init+0x94>)
 8006064:	2200      	movs	r2, #0
 8006066:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006068:	4b1b      	ldr	r3, [pc, #108]	; (80060d8 <MX_TIM10_Init+0x94>)
 800606a:	2200      	movs	r2, #0
 800606c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800606e:	4b1a      	ldr	r3, [pc, #104]	; (80060d8 <MX_TIM10_Init+0x94>)
 8006070:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006074:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006076:	4b18      	ldr	r3, [pc, #96]	; (80060d8 <MX_TIM10_Init+0x94>)
 8006078:	2200      	movs	r2, #0
 800607a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800607c:	4b16      	ldr	r3, [pc, #88]	; (80060d8 <MX_TIM10_Init+0x94>)
 800607e:	2200      	movs	r2, #0
 8006080:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8006082:	4815      	ldr	r0, [pc, #84]	; (80060d8 <MX_TIM10_Init+0x94>)
 8006084:	f007 ff66 	bl	800df54 <HAL_TIM_Base_Init>
 8006088:	4603      	mov	r3, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d001      	beq.n	8006092 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800608e:	f000 fa35 	bl	80064fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8006092:	4811      	ldr	r0, [pc, #68]	; (80060d8 <MX_TIM10_Init+0x94>)
 8006094:	f007 ffad 	bl	800dff2 <HAL_TIM_PWM_Init>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d001      	beq.n	80060a2 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800609e:	f000 fa2d 	bl	80064fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80060a2:	2360      	movs	r3, #96	; 0x60
 80060a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80060a6:	2300      	movs	r3, #0
 80060a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80060aa:	2300      	movs	r3, #0
 80060ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80060ae:	2300      	movs	r3, #0
 80060b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80060b2:	1d3b      	adds	r3, r7, #4
 80060b4:	2200      	movs	r2, #0
 80060b6:	4619      	mov	r1, r3
 80060b8:	4807      	ldr	r0, [pc, #28]	; (80060d8 <MX_TIM10_Init+0x94>)
 80060ba:	f008 f9d5 	bl	800e468 <HAL_TIM_PWM_ConfigChannel>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d001      	beq.n	80060c8 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80060c4:	f000 fa1a 	bl	80064fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80060c8:	4803      	ldr	r0, [pc, #12]	; (80060d8 <MX_TIM10_Init+0x94>)
 80060ca:	f000 fe07 	bl	8006cdc <HAL_TIM_MspPostInit>

}
 80060ce:	bf00      	nop
 80060d0:	3720      	adds	r7, #32
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	2003e9bc 	.word	0x2003e9bc
 80060dc:	40014400 	.word	0x40014400

080060e0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b088      	sub	sp, #32
 80060e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80060e6:	1d3b      	adds	r3, r7, #4
 80060e8:	2200      	movs	r2, #0
 80060ea:	601a      	str	r2, [r3, #0]
 80060ec:	605a      	str	r2, [r3, #4]
 80060ee:	609a      	str	r2, [r3, #8]
 80060f0:	60da      	str	r2, [r3, #12]
 80060f2:	611a      	str	r2, [r3, #16]
 80060f4:	615a      	str	r2, [r3, #20]
 80060f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80060f8:	4b1e      	ldr	r3, [pc, #120]	; (8006174 <MX_TIM11_Init+0x94>)
 80060fa:	4a1f      	ldr	r2, [pc, #124]	; (8006178 <MX_TIM11_Init+0x98>)
 80060fc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80060fe:	4b1d      	ldr	r3, [pc, #116]	; (8006174 <MX_TIM11_Init+0x94>)
 8006100:	2200      	movs	r2, #0
 8006102:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006104:	4b1b      	ldr	r3, [pc, #108]	; (8006174 <MX_TIM11_Init+0x94>)
 8006106:	2200      	movs	r2, #0
 8006108:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800610a:	4b1a      	ldr	r3, [pc, #104]	; (8006174 <MX_TIM11_Init+0x94>)
 800610c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006110:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006112:	4b18      	ldr	r3, [pc, #96]	; (8006174 <MX_TIM11_Init+0x94>)
 8006114:	2200      	movs	r2, #0
 8006116:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006118:	4b16      	ldr	r3, [pc, #88]	; (8006174 <MX_TIM11_Init+0x94>)
 800611a:	2200      	movs	r2, #0
 800611c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800611e:	4815      	ldr	r0, [pc, #84]	; (8006174 <MX_TIM11_Init+0x94>)
 8006120:	f007 ff18 	bl	800df54 <HAL_TIM_Base_Init>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d001      	beq.n	800612e <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800612a:	f000 f9e7 	bl	80064fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800612e:	4811      	ldr	r0, [pc, #68]	; (8006174 <MX_TIM11_Init+0x94>)
 8006130:	f007 ff5f 	bl	800dff2 <HAL_TIM_PWM_Init>
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d001      	beq.n	800613e <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800613a:	f000 f9df 	bl	80064fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800613e:	2360      	movs	r3, #96	; 0x60
 8006140:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006142:	2300      	movs	r3, #0
 8006144:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006146:	2300      	movs	r3, #0
 8006148:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800614a:	2300      	movs	r3, #0
 800614c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800614e:	1d3b      	adds	r3, r7, #4
 8006150:	2200      	movs	r2, #0
 8006152:	4619      	mov	r1, r3
 8006154:	4807      	ldr	r0, [pc, #28]	; (8006174 <MX_TIM11_Init+0x94>)
 8006156:	f008 f987 	bl	800e468 <HAL_TIM_PWM_ConfigChannel>
 800615a:	4603      	mov	r3, r0
 800615c:	2b00      	cmp	r3, #0
 800615e:	d001      	beq.n	8006164 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8006160:	f000 f9cc 	bl	80064fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8006164:	4803      	ldr	r0, [pc, #12]	; (8006174 <MX_TIM11_Init+0x94>)
 8006166:	f000 fdb9 	bl	8006cdc <HAL_TIM_MspPostInit>

}
 800616a:	bf00      	nop
 800616c:	3720      	adds	r7, #32
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	2003eadc 	.word	0x2003eadc
 8006178:	40014800 	.word	0x40014800

0800617c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8006180:	4b0e      	ldr	r3, [pc, #56]	; (80061bc <MX_TIM13_Init+0x40>)
 8006182:	4a0f      	ldr	r2, [pc, #60]	; (80061c0 <MX_TIM13_Init+0x44>)
 8006184:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 8006186:	4b0d      	ldr	r3, [pc, #52]	; (80061bc <MX_TIM13_Init+0x40>)
 8006188:	2259      	movs	r2, #89	; 0x59
 800618a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800618c:	4b0b      	ldr	r3, [pc, #44]	; (80061bc <MX_TIM13_Init+0x40>)
 800618e:	2200      	movs	r2, #0
 8006190:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8006192:	4b0a      	ldr	r3, [pc, #40]	; (80061bc <MX_TIM13_Init+0x40>)
 8006194:	f242 720f 	movw	r2, #9999	; 0x270f
 8006198:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800619a:	4b08      	ldr	r3, [pc, #32]	; (80061bc <MX_TIM13_Init+0x40>)
 800619c:	2200      	movs	r2, #0
 800619e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80061a0:	4b06      	ldr	r3, [pc, #24]	; (80061bc <MX_TIM13_Init+0x40>)
 80061a2:	2280      	movs	r2, #128	; 0x80
 80061a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80061a6:	4805      	ldr	r0, [pc, #20]	; (80061bc <MX_TIM13_Init+0x40>)
 80061a8:	f007 fed4 	bl	800df54 <HAL_TIM_Base_Init>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d001      	beq.n	80061b6 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80061b2:	f000 f9a3 	bl	80064fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80061b6:	bf00      	nop
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	2003ea9c 	.word	0x2003ea9c
 80061c0:	40001c00 	.word	0x40001c00

080061c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80061c8:	4b11      	ldr	r3, [pc, #68]	; (8006210 <MX_USART2_UART_Init+0x4c>)
 80061ca:	4a12      	ldr	r2, [pc, #72]	; (8006214 <MX_USART2_UART_Init+0x50>)
 80061cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80061ce:	4b10      	ldr	r3, [pc, #64]	; (8006210 <MX_USART2_UART_Init+0x4c>)
 80061d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80061d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80061d6:	4b0e      	ldr	r3, [pc, #56]	; (8006210 <MX_USART2_UART_Init+0x4c>)
 80061d8:	2200      	movs	r2, #0
 80061da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80061dc:	4b0c      	ldr	r3, [pc, #48]	; (8006210 <MX_USART2_UART_Init+0x4c>)
 80061de:	2200      	movs	r2, #0
 80061e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80061e2:	4b0b      	ldr	r3, [pc, #44]	; (8006210 <MX_USART2_UART_Init+0x4c>)
 80061e4:	2200      	movs	r2, #0
 80061e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80061e8:	4b09      	ldr	r3, [pc, #36]	; (8006210 <MX_USART2_UART_Init+0x4c>)
 80061ea:	220c      	movs	r2, #12
 80061ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80061ee:	4b08      	ldr	r3, [pc, #32]	; (8006210 <MX_USART2_UART_Init+0x4c>)
 80061f0:	2200      	movs	r2, #0
 80061f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80061f4:	4b06      	ldr	r3, [pc, #24]	; (8006210 <MX_USART2_UART_Init+0x4c>)
 80061f6:	2200      	movs	r2, #0
 80061f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80061fa:	4805      	ldr	r0, [pc, #20]	; (8006210 <MX_USART2_UART_Init+0x4c>)
 80061fc:	f008 fd7a 	bl	800ecf4 <HAL_UART_Init>
 8006200:	4603      	mov	r3, r0
 8006202:	2b00      	cmp	r3, #0
 8006204:	d001      	beq.n	800620a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006206:	f000 f979 	bl	80064fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800620a:	bf00      	nop
 800620c:	bd80      	pop	{r7, pc}
 800620e:	bf00      	nop
 8006210:	2003ec80 	.word	0x2003ec80
 8006214:	40004400 	.word	0x40004400

08006218 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b082      	sub	sp, #8
 800621c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800621e:	2300      	movs	r3, #0
 8006220:	607b      	str	r3, [r7, #4]
 8006222:	4b14      	ldr	r3, [pc, #80]	; (8006274 <MX_DMA_Init+0x5c>)
 8006224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006226:	4a13      	ldr	r2, [pc, #76]	; (8006274 <MX_DMA_Init+0x5c>)
 8006228:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800622c:	6313      	str	r3, [r2, #48]	; 0x30
 800622e:	4b11      	ldr	r3, [pc, #68]	; (8006274 <MX_DMA_Init+0x5c>)
 8006230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006232:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006236:	607b      	str	r3, [r7, #4]
 8006238:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800623a:	2200      	movs	r2, #0
 800623c:	2100      	movs	r1, #0
 800623e:	203a      	movs	r0, #58	; 0x3a
 8006240:	f003 fa53 	bl	80096ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8006244:	203a      	movs	r0, #58	; 0x3a
 8006246:	f003 fa6c 	bl	8009722 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800624a:	2200      	movs	r2, #0
 800624c:	2100      	movs	r1, #0
 800624e:	203b      	movs	r0, #59	; 0x3b
 8006250:	f003 fa4b 	bl	80096ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8006254:	203b      	movs	r0, #59	; 0x3b
 8006256:	f003 fa64 	bl	8009722 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800625a:	2200      	movs	r2, #0
 800625c:	2100      	movs	r1, #0
 800625e:	2045      	movs	r0, #69	; 0x45
 8006260:	f003 fa43 	bl	80096ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8006264:	2045      	movs	r0, #69	; 0x45
 8006266:	f003 fa5c 	bl	8009722 <HAL_NVIC_EnableIRQ>

}
 800626a:	bf00      	nop
 800626c:	3708      	adds	r7, #8
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	40023800 	.word	0x40023800

08006278 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b08c      	sub	sp, #48	; 0x30
 800627c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800627e:	f107 031c 	add.w	r3, r7, #28
 8006282:	2200      	movs	r2, #0
 8006284:	601a      	str	r2, [r3, #0]
 8006286:	605a      	str	r2, [r3, #4]
 8006288:	609a      	str	r2, [r3, #8]
 800628a:	60da      	str	r2, [r3, #12]
 800628c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800628e:	2300      	movs	r3, #0
 8006290:	61bb      	str	r3, [r7, #24]
 8006292:	4b94      	ldr	r3, [pc, #592]	; (80064e4 <MX_GPIO_Init+0x26c>)
 8006294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006296:	4a93      	ldr	r2, [pc, #588]	; (80064e4 <MX_GPIO_Init+0x26c>)
 8006298:	f043 0310 	orr.w	r3, r3, #16
 800629c:	6313      	str	r3, [r2, #48]	; 0x30
 800629e:	4b91      	ldr	r3, [pc, #580]	; (80064e4 <MX_GPIO_Init+0x26c>)
 80062a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a2:	f003 0310 	and.w	r3, r3, #16
 80062a6:	61bb      	str	r3, [r7, #24]
 80062a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80062aa:	2300      	movs	r3, #0
 80062ac:	617b      	str	r3, [r7, #20]
 80062ae:	4b8d      	ldr	r3, [pc, #564]	; (80064e4 <MX_GPIO_Init+0x26c>)
 80062b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b2:	4a8c      	ldr	r2, [pc, #560]	; (80064e4 <MX_GPIO_Init+0x26c>)
 80062b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062b8:	6313      	str	r3, [r2, #48]	; 0x30
 80062ba:	4b8a      	ldr	r3, [pc, #552]	; (80064e4 <MX_GPIO_Init+0x26c>)
 80062bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062c2:	617b      	str	r3, [r7, #20]
 80062c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80062c6:	2300      	movs	r3, #0
 80062c8:	613b      	str	r3, [r7, #16]
 80062ca:	4b86      	ldr	r3, [pc, #536]	; (80064e4 <MX_GPIO_Init+0x26c>)
 80062cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ce:	4a85      	ldr	r2, [pc, #532]	; (80064e4 <MX_GPIO_Init+0x26c>)
 80062d0:	f043 0304 	orr.w	r3, r3, #4
 80062d4:	6313      	str	r3, [r2, #48]	; 0x30
 80062d6:	4b83      	ldr	r3, [pc, #524]	; (80064e4 <MX_GPIO_Init+0x26c>)
 80062d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062da:	f003 0304 	and.w	r3, r3, #4
 80062de:	613b      	str	r3, [r7, #16]
 80062e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80062e2:	2300      	movs	r3, #0
 80062e4:	60fb      	str	r3, [r7, #12]
 80062e6:	4b7f      	ldr	r3, [pc, #508]	; (80064e4 <MX_GPIO_Init+0x26c>)
 80062e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ea:	4a7e      	ldr	r2, [pc, #504]	; (80064e4 <MX_GPIO_Init+0x26c>)
 80062ec:	f043 0301 	orr.w	r3, r3, #1
 80062f0:	6313      	str	r3, [r2, #48]	; 0x30
 80062f2:	4b7c      	ldr	r3, [pc, #496]	; (80064e4 <MX_GPIO_Init+0x26c>)
 80062f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f6:	f003 0301 	and.w	r3, r3, #1
 80062fa:	60fb      	str	r3, [r7, #12]
 80062fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80062fe:	2300      	movs	r3, #0
 8006300:	60bb      	str	r3, [r7, #8]
 8006302:	4b78      	ldr	r3, [pc, #480]	; (80064e4 <MX_GPIO_Init+0x26c>)
 8006304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006306:	4a77      	ldr	r2, [pc, #476]	; (80064e4 <MX_GPIO_Init+0x26c>)
 8006308:	f043 0302 	orr.w	r3, r3, #2
 800630c:	6313      	str	r3, [r2, #48]	; 0x30
 800630e:	4b75      	ldr	r3, [pc, #468]	; (80064e4 <MX_GPIO_Init+0x26c>)
 8006310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006312:	f003 0302 	and.w	r3, r3, #2
 8006316:	60bb      	str	r3, [r7, #8]
 8006318:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800631a:	2300      	movs	r3, #0
 800631c:	607b      	str	r3, [r7, #4]
 800631e:	4b71      	ldr	r3, [pc, #452]	; (80064e4 <MX_GPIO_Init+0x26c>)
 8006320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006322:	4a70      	ldr	r2, [pc, #448]	; (80064e4 <MX_GPIO_Init+0x26c>)
 8006324:	f043 0308 	orr.w	r3, r3, #8
 8006328:	6313      	str	r3, [r2, #48]	; 0x30
 800632a:	4b6e      	ldr	r3, [pc, #440]	; (80064e4 <MX_GPIO_Init+0x26c>)
 800632c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800632e:	f003 0308 	and.w	r3, r3, #8
 8006332:	607b      	str	r3, [r7, #4]
 8006334:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8006336:	2200      	movs	r2, #0
 8006338:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800633c:	486a      	ldr	r0, [pc, #424]	; (80064e8 <MX_GPIO_Init+0x270>)
 800633e:	f003 ff69 	bl	800a214 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8006342:	2200      	movs	r2, #0
 8006344:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006348:	4868      	ldr	r0, [pc, #416]	; (80064ec <MX_GPIO_Init+0x274>)
 800634a:	f003 ff63 	bl	800a214 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 800634e:	2200      	movs	r2, #0
 8006350:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006354:	4866      	ldr	r0, [pc, #408]	; (80064f0 <MX_GPIO_Init+0x278>)
 8006356:	f003 ff5d 	bl	800a214 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800635a:	2200      	movs	r2, #0
 800635c:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8006360:	4864      	ldr	r0, [pc, #400]	; (80064f4 <MX_GPIO_Init+0x27c>)
 8006362:	f003 ff57 	bl	800a214 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006366:	2304      	movs	r3, #4
 8006368:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800636a:	2300      	movs	r3, #0
 800636c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800636e:	2300      	movs	r3, #0
 8006370:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006372:	f107 031c 	add.w	r3, r7, #28
 8006376:	4619      	mov	r1, r3
 8006378:	485b      	ldr	r0, [pc, #364]	; (80064e8 <MX_GPIO_Init+0x270>)
 800637a:	f003 fd89 	bl	8009e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800637e:	230f      	movs	r3, #15
 8006380:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006382:	2303      	movs	r3, #3
 8006384:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006386:	2300      	movs	r3, #0
 8006388:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800638a:	f107 031c 	add.w	r3, r7, #28
 800638e:	4619      	mov	r1, r3
 8006390:	4859      	ldr	r0, [pc, #356]	; (80064f8 <MX_GPIO_Init+0x280>)
 8006392:	f003 fd7d 	bl	8009e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006396:	23e1      	movs	r3, #225	; 0xe1
 8006398:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800639a:	2303      	movs	r3, #3
 800639c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800639e:	2300      	movs	r3, #0
 80063a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063a2:	f107 031c 	add.w	r3, r7, #28
 80063a6:	4619      	mov	r1, r3
 80063a8:	4852      	ldr	r0, [pc, #328]	; (80064f4 <MX_GPIO_Init+0x27c>)
 80063aa:	f003 fd71 	bl	8009e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80063ae:	2303      	movs	r3, #3
 80063b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80063b2:	2303      	movs	r3, #3
 80063b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063b6:	2300      	movs	r3, #0
 80063b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80063ba:	f107 031c 	add.w	r3, r7, #28
 80063be:	4619      	mov	r1, r3
 80063c0:	484a      	ldr	r0, [pc, #296]	; (80064ec <MX_GPIO_Init+0x274>)
 80063c2:	f003 fd65 	bl	8009e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80063c6:	2304      	movs	r3, #4
 80063c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80063ca:	2300      	movs	r3, #0
 80063cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80063ce:	2301      	movs	r3, #1
 80063d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80063d2:	f107 031c 	add.w	r3, r7, #28
 80063d6:	4619      	mov	r1, r3
 80063d8:	4844      	ldr	r0, [pc, #272]	; (80064ec <MX_GPIO_Init+0x274>)
 80063da:	f003 fd59 	bl	8009e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 80063de:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 80063e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80063e4:	2300      	movs	r3, #0
 80063e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80063e8:	2301      	movs	r3, #1
 80063ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80063ec:	f107 031c 	add.w	r3, r7, #28
 80063f0:	4619      	mov	r1, r3
 80063f2:	483d      	ldr	r0, [pc, #244]	; (80064e8 <MX_GPIO_Init+0x270>)
 80063f4:	f003 fd4c 	bl	8009e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80063f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80063fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80063fe:	2301      	movs	r3, #1
 8006400:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006402:	2300      	movs	r3, #0
 8006404:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006406:	2300      	movs	r3, #0
 8006408:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800640a:	f107 031c 	add.w	r3, r7, #28
 800640e:	4619      	mov	r1, r3
 8006410:	4835      	ldr	r0, [pc, #212]	; (80064e8 <MX_GPIO_Init+0x270>)
 8006412:	f003 fd3d 	bl	8009e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006416:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800641a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800641c:	2301      	movs	r3, #1
 800641e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006420:	2300      	movs	r3, #0
 8006422:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006424:	2300      	movs	r3, #0
 8006426:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006428:	f107 031c 	add.w	r3, r7, #28
 800642c:	4619      	mov	r1, r3
 800642e:	482f      	ldr	r0, [pc, #188]	; (80064ec <MX_GPIO_Init+0x274>)
 8006430:	f003 fd2e 	bl	8009e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006434:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006438:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800643a:	2300      	movs	r3, #0
 800643c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800643e:	2300      	movs	r3, #0
 8006440:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006442:	f107 031c 	add.w	r3, r7, #28
 8006446:	4619      	mov	r1, r3
 8006448:	4829      	ldr	r0, [pc, #164]	; (80064f0 <MX_GPIO_Init+0x278>)
 800644a:	f003 fd21 	bl	8009e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800644e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006452:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006454:	2301      	movs	r3, #1
 8006456:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006458:	2300      	movs	r3, #0
 800645a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800645c:	2300      	movs	r3, #0
 800645e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006460:	f107 031c 	add.w	r3, r7, #28
 8006464:	4619      	mov	r1, r3
 8006466:	4822      	ldr	r0, [pc, #136]	; (80064f0 <MX_GPIO_Init+0x278>)
 8006468:	f003 fd12 	bl	8009e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800646c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006470:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006472:	2301      	movs	r3, #1
 8006474:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006476:	2301      	movs	r3, #1
 8006478:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800647a:	2300      	movs	r3, #0
 800647c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800647e:	f107 031c 	add.w	r3, r7, #28
 8006482:	4619      	mov	r1, r3
 8006484:	481a      	ldr	r0, [pc, #104]	; (80064f0 <MX_GPIO_Init+0x278>)
 8006486:	f003 fd03 	bl	8009e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800648a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800648e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006490:	2301      	movs	r3, #1
 8006492:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006494:	2300      	movs	r3, #0
 8006496:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006498:	2300      	movs	r3, #0
 800649a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800649c:	f107 031c 	add.w	r3, r7, #28
 80064a0:	4619      	mov	r1, r3
 80064a2:	4814      	ldr	r0, [pc, #80]	; (80064f4 <MX_GPIO_Init+0x27c>)
 80064a4:	f003 fcf4 	bl	8009e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80064a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80064ae:	2300      	movs	r3, #0
 80064b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064b2:	2300      	movs	r3, #0
 80064b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064b6:	f107 031c 	add.w	r3, r7, #28
 80064ba:	4619      	mov	r1, r3
 80064bc:	480d      	ldr	r0, [pc, #52]	; (80064f4 <MX_GPIO_Init+0x27c>)
 80064be:	f003 fce7 	bl	8009e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80064c2:	239b      	movs	r3, #155	; 0x9b
 80064c4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80064c6:	2300      	movs	r3, #0
 80064c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80064ca:	2301      	movs	r3, #1
 80064cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80064ce:	f107 031c 	add.w	r3, r7, #28
 80064d2:	4619      	mov	r1, r3
 80064d4:	4806      	ldr	r0, [pc, #24]	; (80064f0 <MX_GPIO_Init+0x278>)
 80064d6:	f003 fcdb 	bl	8009e90 <HAL_GPIO_Init>

}
 80064da:	bf00      	nop
 80064dc:	3730      	adds	r7, #48	; 0x30
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	40023800 	.word	0x40023800
 80064e8:	40021000 	.word	0x40021000
 80064ec:	40020400 	.word	0x40020400
 80064f0:	40020c00 	.word	0x40020c00
 80064f4:	40020000 	.word	0x40020000
 80064f8:	40020800 	.word	0x40020800

080064fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80064fc:	b480      	push	{r7}
 80064fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006500:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006502:	e7fe      	b.n	8006502 <Error_Handler+0x6>

08006504 <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 8006504:	b480      	push	{r7}
 8006506:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8006508:	bf00      	nop
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr
	...

08006514 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800651a:	2300      	movs	r3, #0
 800651c:	607b      	str	r3, [r7, #4]
 800651e:	4b10      	ldr	r3, [pc, #64]	; (8006560 <HAL_MspInit+0x4c>)
 8006520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006522:	4a0f      	ldr	r2, [pc, #60]	; (8006560 <HAL_MspInit+0x4c>)
 8006524:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006528:	6453      	str	r3, [r2, #68]	; 0x44
 800652a:	4b0d      	ldr	r3, [pc, #52]	; (8006560 <HAL_MspInit+0x4c>)
 800652c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800652e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006532:	607b      	str	r3, [r7, #4]
 8006534:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006536:	2300      	movs	r3, #0
 8006538:	603b      	str	r3, [r7, #0]
 800653a:	4b09      	ldr	r3, [pc, #36]	; (8006560 <HAL_MspInit+0x4c>)
 800653c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653e:	4a08      	ldr	r2, [pc, #32]	; (8006560 <HAL_MspInit+0x4c>)
 8006540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006544:	6413      	str	r3, [r2, #64]	; 0x40
 8006546:	4b06      	ldr	r3, [pc, #24]	; (8006560 <HAL_MspInit+0x4c>)
 8006548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800654a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800654e:	603b      	str	r3, [r7, #0]
 8006550:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006552:	bf00      	nop
 8006554:	370c      	adds	r7, #12
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop
 8006560:	40023800 	.word	0x40023800

08006564 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b08c      	sub	sp, #48	; 0x30
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800656c:	f107 031c 	add.w	r3, r7, #28
 8006570:	2200      	movs	r2, #0
 8006572:	601a      	str	r2, [r3, #0]
 8006574:	605a      	str	r2, [r3, #4]
 8006576:	609a      	str	r2, [r3, #8]
 8006578:	60da      	str	r2, [r3, #12]
 800657a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a4a      	ldr	r2, [pc, #296]	; (80066ac <HAL_ADC_MspInit+0x148>)
 8006582:	4293      	cmp	r3, r2
 8006584:	f040 808e 	bne.w	80066a4 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006588:	2300      	movs	r3, #0
 800658a:	61bb      	str	r3, [r7, #24]
 800658c:	4b48      	ldr	r3, [pc, #288]	; (80066b0 <HAL_ADC_MspInit+0x14c>)
 800658e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006590:	4a47      	ldr	r2, [pc, #284]	; (80066b0 <HAL_ADC_MspInit+0x14c>)
 8006592:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006596:	6453      	str	r3, [r2, #68]	; 0x44
 8006598:	4b45      	ldr	r3, [pc, #276]	; (80066b0 <HAL_ADC_MspInit+0x14c>)
 800659a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800659c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065a0:	61bb      	str	r3, [r7, #24]
 80065a2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80065a4:	2300      	movs	r3, #0
 80065a6:	617b      	str	r3, [r7, #20]
 80065a8:	4b41      	ldr	r3, [pc, #260]	; (80066b0 <HAL_ADC_MspInit+0x14c>)
 80065aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ac:	4a40      	ldr	r2, [pc, #256]	; (80066b0 <HAL_ADC_MspInit+0x14c>)
 80065ae:	f043 0304 	orr.w	r3, r3, #4
 80065b2:	6313      	str	r3, [r2, #48]	; 0x30
 80065b4:	4b3e      	ldr	r3, [pc, #248]	; (80066b0 <HAL_ADC_MspInit+0x14c>)
 80065b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b8:	f003 0304 	and.w	r3, r3, #4
 80065bc:	617b      	str	r3, [r7, #20]
 80065be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065c0:	2300      	movs	r3, #0
 80065c2:	613b      	str	r3, [r7, #16]
 80065c4:	4b3a      	ldr	r3, [pc, #232]	; (80066b0 <HAL_ADC_MspInit+0x14c>)
 80065c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c8:	4a39      	ldr	r2, [pc, #228]	; (80066b0 <HAL_ADC_MspInit+0x14c>)
 80065ca:	f043 0301 	orr.w	r3, r3, #1
 80065ce:	6313      	str	r3, [r2, #48]	; 0x30
 80065d0:	4b37      	ldr	r3, [pc, #220]	; (80066b0 <HAL_ADC_MspInit+0x14c>)
 80065d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d4:	f003 0301 	and.w	r3, r3, #1
 80065d8:	613b      	str	r3, [r7, #16]
 80065da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80065dc:	2300      	movs	r3, #0
 80065de:	60fb      	str	r3, [r7, #12]
 80065e0:	4b33      	ldr	r3, [pc, #204]	; (80066b0 <HAL_ADC_MspInit+0x14c>)
 80065e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e4:	4a32      	ldr	r2, [pc, #200]	; (80066b0 <HAL_ADC_MspInit+0x14c>)
 80065e6:	f043 0302 	orr.w	r3, r3, #2
 80065ea:	6313      	str	r3, [r2, #48]	; 0x30
 80065ec:	4b30      	ldr	r3, [pc, #192]	; (80066b0 <HAL_ADC_MspInit+0x14c>)
 80065ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f0:	f003 0302 	and.w	r3, r3, #2
 80065f4:	60fb      	str	r3, [r7, #12]
 80065f6:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80065f8:	230f      	movs	r3, #15
 80065fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80065fc:	2303      	movs	r3, #3
 80065fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006600:	2300      	movs	r3, #0
 8006602:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006604:	f107 031c 	add.w	r3, r7, #28
 8006608:	4619      	mov	r1, r3
 800660a:	482a      	ldr	r0, [pc, #168]	; (80066b4 <HAL_ADC_MspInit+0x150>)
 800660c:	f003 fc40 	bl	8009e90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8006610:	23ff      	movs	r3, #255	; 0xff
 8006612:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006614:	2303      	movs	r3, #3
 8006616:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006618:	2300      	movs	r3, #0
 800661a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800661c:	f107 031c 	add.w	r3, r7, #28
 8006620:	4619      	mov	r1, r3
 8006622:	4825      	ldr	r0, [pc, #148]	; (80066b8 <HAL_ADC_MspInit+0x154>)
 8006624:	f003 fc34 	bl	8009e90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006628:	2303      	movs	r3, #3
 800662a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800662c:	2303      	movs	r3, #3
 800662e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006630:	2300      	movs	r3, #0
 8006632:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006634:	f107 031c 	add.w	r3, r7, #28
 8006638:	4619      	mov	r1, r3
 800663a:	4820      	ldr	r0, [pc, #128]	; (80066bc <HAL_ADC_MspInit+0x158>)
 800663c:	f003 fc28 	bl	8009e90 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8006640:	4b1f      	ldr	r3, [pc, #124]	; (80066c0 <HAL_ADC_MspInit+0x15c>)
 8006642:	4a20      	ldr	r2, [pc, #128]	; (80066c4 <HAL_ADC_MspInit+0x160>)
 8006644:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8006646:	4b1e      	ldr	r3, [pc, #120]	; (80066c0 <HAL_ADC_MspInit+0x15c>)
 8006648:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800664c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800664e:	4b1c      	ldr	r3, [pc, #112]	; (80066c0 <HAL_ADC_MspInit+0x15c>)
 8006650:	2200      	movs	r2, #0
 8006652:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006654:	4b1a      	ldr	r3, [pc, #104]	; (80066c0 <HAL_ADC_MspInit+0x15c>)
 8006656:	2200      	movs	r2, #0
 8006658:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800665a:	4b19      	ldr	r3, [pc, #100]	; (80066c0 <HAL_ADC_MspInit+0x15c>)
 800665c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006660:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006662:	4b17      	ldr	r3, [pc, #92]	; (80066c0 <HAL_ADC_MspInit+0x15c>)
 8006664:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006668:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800666a:	4b15      	ldr	r3, [pc, #84]	; (80066c0 <HAL_ADC_MspInit+0x15c>)
 800666c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006670:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8006672:	4b13      	ldr	r3, [pc, #76]	; (80066c0 <HAL_ADC_MspInit+0x15c>)
 8006674:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006678:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 800667a:	4b11      	ldr	r3, [pc, #68]	; (80066c0 <HAL_ADC_MspInit+0x15c>)
 800667c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006680:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006682:	4b0f      	ldr	r3, [pc, #60]	; (80066c0 <HAL_ADC_MspInit+0x15c>)
 8006684:	2200      	movs	r2, #0
 8006686:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006688:	480d      	ldr	r0, [pc, #52]	; (80066c0 <HAL_ADC_MspInit+0x15c>)
 800668a:	f003 f865 	bl	8009758 <HAL_DMA_Init>
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d001      	beq.n	8006698 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8006694:	f7ff ff32 	bl	80064fc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4a09      	ldr	r2, [pc, #36]	; (80066c0 <HAL_ADC_MspInit+0x15c>)
 800669c:	639a      	str	r2, [r3, #56]	; 0x38
 800669e:	4a08      	ldr	r2, [pc, #32]	; (80066c0 <HAL_ADC_MspInit+0x15c>)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80066a4:	bf00      	nop
 80066a6:	3730      	adds	r7, #48	; 0x30
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	40012100 	.word	0x40012100
 80066b0:	40023800 	.word	0x40023800
 80066b4:	40020800 	.word	0x40020800
 80066b8:	40020000 	.word	0x40020000
 80066bc:	40020400 	.word	0x40020400
 80066c0:	2003ecc0 	.word	0x2003ecc0
 80066c4:	40026440 	.word	0x40026440

080066c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b08c      	sub	sp, #48	; 0x30
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066d0:	f107 031c 	add.w	r3, r7, #28
 80066d4:	2200      	movs	r2, #0
 80066d6:	601a      	str	r2, [r3, #0]
 80066d8:	605a      	str	r2, [r3, #4]
 80066da:	609a      	str	r2, [r3, #8]
 80066dc:	60da      	str	r2, [r3, #12]
 80066de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a32      	ldr	r2, [pc, #200]	; (80067b0 <HAL_I2C_MspInit+0xe8>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d12c      	bne.n	8006744 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80066ea:	2300      	movs	r3, #0
 80066ec:	61bb      	str	r3, [r7, #24]
 80066ee:	4b31      	ldr	r3, [pc, #196]	; (80067b4 <HAL_I2C_MspInit+0xec>)
 80066f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f2:	4a30      	ldr	r2, [pc, #192]	; (80067b4 <HAL_I2C_MspInit+0xec>)
 80066f4:	f043 0302 	orr.w	r3, r3, #2
 80066f8:	6313      	str	r3, [r2, #48]	; 0x30
 80066fa:	4b2e      	ldr	r3, [pc, #184]	; (80067b4 <HAL_I2C_MspInit+0xec>)
 80066fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066fe:	f003 0302 	and.w	r3, r3, #2
 8006702:	61bb      	str	r3, [r7, #24]
 8006704:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006706:	23c0      	movs	r3, #192	; 0xc0
 8006708:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800670a:	2312      	movs	r3, #18
 800670c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800670e:	2301      	movs	r3, #1
 8006710:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006712:	2303      	movs	r3, #3
 8006714:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006716:	2304      	movs	r3, #4
 8006718:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800671a:	f107 031c 	add.w	r3, r7, #28
 800671e:	4619      	mov	r1, r3
 8006720:	4825      	ldr	r0, [pc, #148]	; (80067b8 <HAL_I2C_MspInit+0xf0>)
 8006722:	f003 fbb5 	bl	8009e90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006726:	2300      	movs	r3, #0
 8006728:	617b      	str	r3, [r7, #20]
 800672a:	4b22      	ldr	r3, [pc, #136]	; (80067b4 <HAL_I2C_MspInit+0xec>)
 800672c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672e:	4a21      	ldr	r2, [pc, #132]	; (80067b4 <HAL_I2C_MspInit+0xec>)
 8006730:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006734:	6413      	str	r3, [r2, #64]	; 0x40
 8006736:	4b1f      	ldr	r3, [pc, #124]	; (80067b4 <HAL_I2C_MspInit+0xec>)
 8006738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800673e:	617b      	str	r3, [r7, #20]
 8006740:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006742:	e031      	b.n	80067a8 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a1c      	ldr	r2, [pc, #112]	; (80067bc <HAL_I2C_MspInit+0xf4>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d12c      	bne.n	80067a8 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800674e:	2300      	movs	r3, #0
 8006750:	613b      	str	r3, [r7, #16]
 8006752:	4b18      	ldr	r3, [pc, #96]	; (80067b4 <HAL_I2C_MspInit+0xec>)
 8006754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006756:	4a17      	ldr	r2, [pc, #92]	; (80067b4 <HAL_I2C_MspInit+0xec>)
 8006758:	f043 0302 	orr.w	r3, r3, #2
 800675c:	6313      	str	r3, [r2, #48]	; 0x30
 800675e:	4b15      	ldr	r3, [pc, #84]	; (80067b4 <HAL_I2C_MspInit+0xec>)
 8006760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006762:	f003 0302 	and.w	r3, r3, #2
 8006766:	613b      	str	r3, [r7, #16]
 8006768:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800676a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800676e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006770:	2312      	movs	r3, #18
 8006772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006774:	2301      	movs	r3, #1
 8006776:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006778:	2303      	movs	r3, #3
 800677a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800677c:	2304      	movs	r3, #4
 800677e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006780:	f107 031c 	add.w	r3, r7, #28
 8006784:	4619      	mov	r1, r3
 8006786:	480c      	ldr	r0, [pc, #48]	; (80067b8 <HAL_I2C_MspInit+0xf0>)
 8006788:	f003 fb82 	bl	8009e90 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800678c:	2300      	movs	r3, #0
 800678e:	60fb      	str	r3, [r7, #12]
 8006790:	4b08      	ldr	r3, [pc, #32]	; (80067b4 <HAL_I2C_MspInit+0xec>)
 8006792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006794:	4a07      	ldr	r2, [pc, #28]	; (80067b4 <HAL_I2C_MspInit+0xec>)
 8006796:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800679a:	6413      	str	r3, [r2, #64]	; 0x40
 800679c:	4b05      	ldr	r3, [pc, #20]	; (80067b4 <HAL_I2C_MspInit+0xec>)
 800679e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067a4:	60fb      	str	r3, [r7, #12]
 80067a6:	68fb      	ldr	r3, [r7, #12]
}
 80067a8:	bf00      	nop
 80067aa:	3730      	adds	r7, #48	; 0x30
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	40005400 	.word	0x40005400
 80067b4:	40023800 	.word	0x40023800
 80067b8:	40020400 	.word	0x40020400
 80067bc:	40005800 	.word	0x40005800

080067c0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b08a      	sub	sp, #40	; 0x28
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067c8:	f107 0314 	add.w	r3, r7, #20
 80067cc:	2200      	movs	r2, #0
 80067ce:	601a      	str	r2, [r3, #0]
 80067d0:	605a      	str	r2, [r3, #4]
 80067d2:	609a      	str	r2, [r3, #8]
 80067d4:	60da      	str	r2, [r3, #12]
 80067d6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a69      	ldr	r2, [pc, #420]	; (8006984 <HAL_SD_MspInit+0x1c4>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	f040 80cb 	bne.w	800697a <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80067e4:	2300      	movs	r3, #0
 80067e6:	613b      	str	r3, [r7, #16]
 80067e8:	4b67      	ldr	r3, [pc, #412]	; (8006988 <HAL_SD_MspInit+0x1c8>)
 80067ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ec:	4a66      	ldr	r2, [pc, #408]	; (8006988 <HAL_SD_MspInit+0x1c8>)
 80067ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80067f2:	6453      	str	r3, [r2, #68]	; 0x44
 80067f4:	4b64      	ldr	r3, [pc, #400]	; (8006988 <HAL_SD_MspInit+0x1c8>)
 80067f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067fc:	613b      	str	r3, [r7, #16]
 80067fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006800:	2300      	movs	r3, #0
 8006802:	60fb      	str	r3, [r7, #12]
 8006804:	4b60      	ldr	r3, [pc, #384]	; (8006988 <HAL_SD_MspInit+0x1c8>)
 8006806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006808:	4a5f      	ldr	r2, [pc, #380]	; (8006988 <HAL_SD_MspInit+0x1c8>)
 800680a:	f043 0304 	orr.w	r3, r3, #4
 800680e:	6313      	str	r3, [r2, #48]	; 0x30
 8006810:	4b5d      	ldr	r3, [pc, #372]	; (8006988 <HAL_SD_MspInit+0x1c8>)
 8006812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006814:	f003 0304 	and.w	r3, r3, #4
 8006818:	60fb      	str	r3, [r7, #12]
 800681a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800681c:	2300      	movs	r3, #0
 800681e:	60bb      	str	r3, [r7, #8]
 8006820:	4b59      	ldr	r3, [pc, #356]	; (8006988 <HAL_SD_MspInit+0x1c8>)
 8006822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006824:	4a58      	ldr	r2, [pc, #352]	; (8006988 <HAL_SD_MspInit+0x1c8>)
 8006826:	f043 0308 	orr.w	r3, r3, #8
 800682a:	6313      	str	r3, [r2, #48]	; 0x30
 800682c:	4b56      	ldr	r3, [pc, #344]	; (8006988 <HAL_SD_MspInit+0x1c8>)
 800682e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006830:	f003 0308 	and.w	r3, r3, #8
 8006834:	60bb      	str	r3, [r7, #8]
 8006836:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006838:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800683c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800683e:	2302      	movs	r3, #2
 8006840:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006842:	2300      	movs	r3, #0
 8006844:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006846:	2303      	movs	r3, #3
 8006848:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800684a:	230c      	movs	r3, #12
 800684c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800684e:	f107 0314 	add.w	r3, r7, #20
 8006852:	4619      	mov	r1, r3
 8006854:	484d      	ldr	r0, [pc, #308]	; (800698c <HAL_SD_MspInit+0x1cc>)
 8006856:	f003 fb1b 	bl	8009e90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800685a:	2304      	movs	r3, #4
 800685c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800685e:	2302      	movs	r3, #2
 8006860:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006862:	2300      	movs	r3, #0
 8006864:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006866:	2303      	movs	r3, #3
 8006868:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800686a:	230c      	movs	r3, #12
 800686c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800686e:	f107 0314 	add.w	r3, r7, #20
 8006872:	4619      	mov	r1, r3
 8006874:	4846      	ldr	r0, [pc, #280]	; (8006990 <HAL_SD_MspInit+0x1d0>)
 8006876:	f003 fb0b 	bl	8009e90 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800687a:	4b46      	ldr	r3, [pc, #280]	; (8006994 <HAL_SD_MspInit+0x1d4>)
 800687c:	4a46      	ldr	r2, [pc, #280]	; (8006998 <HAL_SD_MspInit+0x1d8>)
 800687e:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8006880:	4b44      	ldr	r3, [pc, #272]	; (8006994 <HAL_SD_MspInit+0x1d4>)
 8006882:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006886:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006888:	4b42      	ldr	r3, [pc, #264]	; (8006994 <HAL_SD_MspInit+0x1d4>)
 800688a:	2200      	movs	r2, #0
 800688c:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800688e:	4b41      	ldr	r3, [pc, #260]	; (8006994 <HAL_SD_MspInit+0x1d4>)
 8006890:	2200      	movs	r2, #0
 8006892:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006894:	4b3f      	ldr	r3, [pc, #252]	; (8006994 <HAL_SD_MspInit+0x1d4>)
 8006896:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800689a:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800689c:	4b3d      	ldr	r3, [pc, #244]	; (8006994 <HAL_SD_MspInit+0x1d4>)
 800689e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80068a2:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80068a4:	4b3b      	ldr	r3, [pc, #236]	; (8006994 <HAL_SD_MspInit+0x1d4>)
 80068a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80068aa:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80068ac:	4b39      	ldr	r3, [pc, #228]	; (8006994 <HAL_SD_MspInit+0x1d4>)
 80068ae:	2220      	movs	r2, #32
 80068b0:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80068b2:	4b38      	ldr	r3, [pc, #224]	; (8006994 <HAL_SD_MspInit+0x1d4>)
 80068b4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80068b8:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80068ba:	4b36      	ldr	r3, [pc, #216]	; (8006994 <HAL_SD_MspInit+0x1d4>)
 80068bc:	2204      	movs	r2, #4
 80068be:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80068c0:	4b34      	ldr	r3, [pc, #208]	; (8006994 <HAL_SD_MspInit+0x1d4>)
 80068c2:	2203      	movs	r2, #3
 80068c4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80068c6:	4b33      	ldr	r3, [pc, #204]	; (8006994 <HAL_SD_MspInit+0x1d4>)
 80068c8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80068cc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80068ce:	4b31      	ldr	r3, [pc, #196]	; (8006994 <HAL_SD_MspInit+0x1d4>)
 80068d0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80068d4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80068d6:	482f      	ldr	r0, [pc, #188]	; (8006994 <HAL_SD_MspInit+0x1d4>)
 80068d8:	f002 ff3e 	bl	8009758 <HAL_DMA_Init>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d001      	beq.n	80068e6 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 80068e2:	f7ff fe0b 	bl	80064fc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a2a      	ldr	r2, [pc, #168]	; (8006994 <HAL_SD_MspInit+0x1d4>)
 80068ea:	641a      	str	r2, [r3, #64]	; 0x40
 80068ec:	4a29      	ldr	r2, [pc, #164]	; (8006994 <HAL_SD_MspInit+0x1d4>)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80068f2:	4b2a      	ldr	r3, [pc, #168]	; (800699c <HAL_SD_MspInit+0x1dc>)
 80068f4:	4a2a      	ldr	r2, [pc, #168]	; (80069a0 <HAL_SD_MspInit+0x1e0>)
 80068f6:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80068f8:	4b28      	ldr	r3, [pc, #160]	; (800699c <HAL_SD_MspInit+0x1dc>)
 80068fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80068fe:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006900:	4b26      	ldr	r3, [pc, #152]	; (800699c <HAL_SD_MspInit+0x1dc>)
 8006902:	2240      	movs	r2, #64	; 0x40
 8006904:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006906:	4b25      	ldr	r3, [pc, #148]	; (800699c <HAL_SD_MspInit+0x1dc>)
 8006908:	2200      	movs	r2, #0
 800690a:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800690c:	4b23      	ldr	r3, [pc, #140]	; (800699c <HAL_SD_MspInit+0x1dc>)
 800690e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006912:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006914:	4b21      	ldr	r3, [pc, #132]	; (800699c <HAL_SD_MspInit+0x1dc>)
 8006916:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800691a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800691c:	4b1f      	ldr	r3, [pc, #124]	; (800699c <HAL_SD_MspInit+0x1dc>)
 800691e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006922:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8006924:	4b1d      	ldr	r3, [pc, #116]	; (800699c <HAL_SD_MspInit+0x1dc>)
 8006926:	2220      	movs	r2, #32
 8006928:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800692a:	4b1c      	ldr	r3, [pc, #112]	; (800699c <HAL_SD_MspInit+0x1dc>)
 800692c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006930:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006932:	4b1a      	ldr	r3, [pc, #104]	; (800699c <HAL_SD_MspInit+0x1dc>)
 8006934:	2204      	movs	r2, #4
 8006936:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006938:	4b18      	ldr	r3, [pc, #96]	; (800699c <HAL_SD_MspInit+0x1dc>)
 800693a:	2203      	movs	r2, #3
 800693c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800693e:	4b17      	ldr	r3, [pc, #92]	; (800699c <HAL_SD_MspInit+0x1dc>)
 8006940:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006944:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006946:	4b15      	ldr	r3, [pc, #84]	; (800699c <HAL_SD_MspInit+0x1dc>)
 8006948:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800694c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800694e:	4813      	ldr	r0, [pc, #76]	; (800699c <HAL_SD_MspInit+0x1dc>)
 8006950:	f002 ff02 	bl	8009758 <HAL_DMA_Init>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d001      	beq.n	800695e <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 800695a:	f7ff fdcf 	bl	80064fc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a0e      	ldr	r2, [pc, #56]	; (800699c <HAL_SD_MspInit+0x1dc>)
 8006962:	63da      	str	r2, [r3, #60]	; 0x3c
 8006964:	4a0d      	ldr	r2, [pc, #52]	; (800699c <HAL_SD_MspInit+0x1dc>)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800696a:	2200      	movs	r2, #0
 800696c:	2100      	movs	r1, #0
 800696e:	2031      	movs	r0, #49	; 0x31
 8006970:	f002 febb 	bl	80096ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8006974:	2031      	movs	r0, #49	; 0x31
 8006976:	f002 fed4 	bl	8009722 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800697a:	bf00      	nop
 800697c:	3728      	adds	r7, #40	; 0x28
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	40012c00 	.word	0x40012c00
 8006988:	40023800 	.word	0x40023800
 800698c:	40020800 	.word	0x40020800
 8006990:	40020c00 	.word	0x40020c00
 8006994:	2003e7e8 	.word	0x2003e7e8
 8006998:	40026458 	.word	0x40026458
 800699c:	2003eb1c 	.word	0x2003eb1c
 80069a0:	400264a0 	.word	0x400264a0

080069a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b08a      	sub	sp, #40	; 0x28
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069ac:	f107 0314 	add.w	r3, r7, #20
 80069b0:	2200      	movs	r2, #0
 80069b2:	601a      	str	r2, [r3, #0]
 80069b4:	605a      	str	r2, [r3, #4]
 80069b6:	609a      	str	r2, [r3, #8]
 80069b8:	60da      	str	r2, [r3, #12]
 80069ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a19      	ldr	r2, [pc, #100]	; (8006a28 <HAL_SPI_MspInit+0x84>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d12c      	bne.n	8006a20 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80069c6:	2300      	movs	r3, #0
 80069c8:	613b      	str	r3, [r7, #16]
 80069ca:	4b18      	ldr	r3, [pc, #96]	; (8006a2c <HAL_SPI_MspInit+0x88>)
 80069cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ce:	4a17      	ldr	r2, [pc, #92]	; (8006a2c <HAL_SPI_MspInit+0x88>)
 80069d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80069d4:	6413      	str	r3, [r2, #64]	; 0x40
 80069d6:	4b15      	ldr	r3, [pc, #84]	; (8006a2c <HAL_SPI_MspInit+0x88>)
 80069d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069de:	613b      	str	r3, [r7, #16]
 80069e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80069e2:	2300      	movs	r3, #0
 80069e4:	60fb      	str	r3, [r7, #12]
 80069e6:	4b11      	ldr	r3, [pc, #68]	; (8006a2c <HAL_SPI_MspInit+0x88>)
 80069e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ea:	4a10      	ldr	r2, [pc, #64]	; (8006a2c <HAL_SPI_MspInit+0x88>)
 80069ec:	f043 0302 	orr.w	r3, r3, #2
 80069f0:	6313      	str	r3, [r2, #48]	; 0x30
 80069f2:	4b0e      	ldr	r3, [pc, #56]	; (8006a2c <HAL_SPI_MspInit+0x88>)
 80069f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069f6:	f003 0302 	and.w	r3, r3, #2
 80069fa:	60fb      	str	r3, [r7, #12]
 80069fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80069fe:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8006a02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a04:	2302      	movs	r3, #2
 8006a06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006a10:	2305      	movs	r3, #5
 8006a12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a14:	f107 0314 	add.w	r3, r7, #20
 8006a18:	4619      	mov	r1, r3
 8006a1a:	4805      	ldr	r0, [pc, #20]	; (8006a30 <HAL_SPI_MspInit+0x8c>)
 8006a1c:	f003 fa38 	bl	8009e90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8006a20:	bf00      	nop
 8006a22:	3728      	adds	r7, #40	; 0x28
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}
 8006a28:	40003800 	.word	0x40003800
 8006a2c:	40023800 	.word	0x40023800
 8006a30:	40020400 	.word	0x40020400

08006a34 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b08c      	sub	sp, #48	; 0x30
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a3c:	f107 031c 	add.w	r3, r7, #28
 8006a40:	2200      	movs	r2, #0
 8006a42:	601a      	str	r2, [r3, #0]
 8006a44:	605a      	str	r2, [r3, #4]
 8006a46:	609a      	str	r2, [r3, #8]
 8006a48:	60da      	str	r2, [r3, #12]
 8006a4a:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a2d      	ldr	r2, [pc, #180]	; (8006b08 <HAL_TIM_PWM_MspInit+0xd4>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d12d      	bne.n	8006ab2 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006a56:	2300      	movs	r3, #0
 8006a58:	61bb      	str	r3, [r7, #24]
 8006a5a:	4b2c      	ldr	r3, [pc, #176]	; (8006b0c <HAL_TIM_PWM_MspInit+0xd8>)
 8006a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a5e:	4a2b      	ldr	r2, [pc, #172]	; (8006b0c <HAL_TIM_PWM_MspInit+0xd8>)
 8006a60:	f043 0301 	orr.w	r3, r3, #1
 8006a64:	6453      	str	r3, [r2, #68]	; 0x44
 8006a66:	4b29      	ldr	r3, [pc, #164]	; (8006b0c <HAL_TIM_PWM_MspInit+0xd8>)
 8006a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a6a:	f003 0301 	and.w	r3, r3, #1
 8006a6e:	61bb      	str	r3, [r7, #24]
 8006a70:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006a72:	2300      	movs	r3, #0
 8006a74:	617b      	str	r3, [r7, #20]
 8006a76:	4b25      	ldr	r3, [pc, #148]	; (8006b0c <HAL_TIM_PWM_MspInit+0xd8>)
 8006a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a7a:	4a24      	ldr	r2, [pc, #144]	; (8006b0c <HAL_TIM_PWM_MspInit+0xd8>)
 8006a7c:	f043 0310 	orr.w	r3, r3, #16
 8006a80:	6313      	str	r3, [r2, #48]	; 0x30
 8006a82:	4b22      	ldr	r3, [pc, #136]	; (8006b0c <HAL_TIM_PWM_MspInit+0xd8>)
 8006a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a86:	f003 0310 	and.w	r3, r3, #16
 8006a8a:	617b      	str	r3, [r7, #20]
 8006a8c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8006a8e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8006a92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a94:	2302      	movs	r3, #2
 8006a96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006aa4:	f107 031c 	add.w	r3, r7, #28
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	4819      	ldr	r0, [pc, #100]	; (8006b10 <HAL_TIM_PWM_MspInit+0xdc>)
 8006aac:	f003 f9f0 	bl	8009e90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8006ab0:	e026      	b.n	8006b00 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a17      	ldr	r2, [pc, #92]	; (8006b14 <HAL_TIM_PWM_MspInit+0xe0>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d10e      	bne.n	8006ada <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006abc:	2300      	movs	r3, #0
 8006abe:	613b      	str	r3, [r7, #16]
 8006ac0:	4b12      	ldr	r3, [pc, #72]	; (8006b0c <HAL_TIM_PWM_MspInit+0xd8>)
 8006ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac4:	4a11      	ldr	r2, [pc, #68]	; (8006b0c <HAL_TIM_PWM_MspInit+0xd8>)
 8006ac6:	f043 0302 	orr.w	r3, r3, #2
 8006aca:	6413      	str	r3, [r2, #64]	; 0x40
 8006acc:	4b0f      	ldr	r3, [pc, #60]	; (8006b0c <HAL_TIM_PWM_MspInit+0xd8>)
 8006ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad0:	f003 0302 	and.w	r3, r3, #2
 8006ad4:	613b      	str	r3, [r7, #16]
 8006ad6:	693b      	ldr	r3, [r7, #16]
}
 8006ad8:	e012      	b.n	8006b00 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a0e      	ldr	r2, [pc, #56]	; (8006b18 <HAL_TIM_PWM_MspInit+0xe4>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d10d      	bne.n	8006b00 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	60fb      	str	r3, [r7, #12]
 8006ae8:	4b08      	ldr	r3, [pc, #32]	; (8006b0c <HAL_TIM_PWM_MspInit+0xd8>)
 8006aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aec:	4a07      	ldr	r2, [pc, #28]	; (8006b0c <HAL_TIM_PWM_MspInit+0xd8>)
 8006aee:	f043 0304 	orr.w	r3, r3, #4
 8006af2:	6413      	str	r3, [r2, #64]	; 0x40
 8006af4:	4b05      	ldr	r3, [pc, #20]	; (8006b0c <HAL_TIM_PWM_MspInit+0xd8>)
 8006af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af8:	f003 0304 	and.w	r3, r3, #4
 8006afc:	60fb      	str	r3, [r7, #12]
 8006afe:	68fb      	ldr	r3, [r7, #12]
}
 8006b00:	bf00      	nop
 8006b02:	3730      	adds	r7, #48	; 0x30
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	40010000 	.word	0x40010000
 8006b0c:	40023800 	.word	0x40023800
 8006b10:	40021000 	.word	0x40021000
 8006b14:	40000400 	.word	0x40000400
 8006b18:	40000800 	.word	0x40000800

08006b1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b088      	sub	sp, #32
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a3e      	ldr	r2, [pc, #248]	; (8006c24 <HAL_TIM_Base_MspInit+0x108>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d116      	bne.n	8006b5c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006b2e:	2300      	movs	r3, #0
 8006b30:	61fb      	str	r3, [r7, #28]
 8006b32:	4b3d      	ldr	r3, [pc, #244]	; (8006c28 <HAL_TIM_Base_MspInit+0x10c>)
 8006b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b36:	4a3c      	ldr	r2, [pc, #240]	; (8006c28 <HAL_TIM_Base_MspInit+0x10c>)
 8006b38:	f043 0310 	orr.w	r3, r3, #16
 8006b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8006b3e:	4b3a      	ldr	r3, [pc, #232]	; (8006c28 <HAL_TIM_Base_MspInit+0x10c>)
 8006b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b42:	f003 0310 	and.w	r3, r3, #16
 8006b46:	61fb      	str	r3, [r7, #28]
 8006b48:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	2101      	movs	r1, #1
 8006b4e:	2036      	movs	r0, #54	; 0x36
 8006b50:	f002 fdcb 	bl	80096ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006b54:	2036      	movs	r0, #54	; 0x36
 8006b56:	f002 fde4 	bl	8009722 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8006b5a:	e05e      	b.n	8006c1a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a32      	ldr	r2, [pc, #200]	; (8006c2c <HAL_TIM_Base_MspInit+0x110>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d116      	bne.n	8006b94 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8006b66:	2300      	movs	r3, #0
 8006b68:	61bb      	str	r3, [r7, #24]
 8006b6a:	4b2f      	ldr	r3, [pc, #188]	; (8006c28 <HAL_TIM_Base_MspInit+0x10c>)
 8006b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6e:	4a2e      	ldr	r2, [pc, #184]	; (8006c28 <HAL_TIM_Base_MspInit+0x10c>)
 8006b70:	f043 0320 	orr.w	r3, r3, #32
 8006b74:	6413      	str	r3, [r2, #64]	; 0x40
 8006b76:	4b2c      	ldr	r3, [pc, #176]	; (8006c28 <HAL_TIM_Base_MspInit+0x10c>)
 8006b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7a:	f003 0320 	and.w	r3, r3, #32
 8006b7e:	61bb      	str	r3, [r7, #24]
 8006b80:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8006b82:	2200      	movs	r2, #0
 8006b84:	2100      	movs	r1, #0
 8006b86:	2037      	movs	r0, #55	; 0x37
 8006b88:	f002 fdaf 	bl	80096ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8006b8c:	2037      	movs	r0, #55	; 0x37
 8006b8e:	f002 fdc8 	bl	8009722 <HAL_NVIC_EnableIRQ>
}
 8006b92:	e042      	b.n	8006c1a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a25      	ldr	r2, [pc, #148]	; (8006c30 <HAL_TIM_Base_MspInit+0x114>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d10e      	bne.n	8006bbc <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	617b      	str	r3, [r7, #20]
 8006ba2:	4b21      	ldr	r3, [pc, #132]	; (8006c28 <HAL_TIM_Base_MspInit+0x10c>)
 8006ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ba6:	4a20      	ldr	r2, [pc, #128]	; (8006c28 <HAL_TIM_Base_MspInit+0x10c>)
 8006ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bac:	6453      	str	r3, [r2, #68]	; 0x44
 8006bae:	4b1e      	ldr	r3, [pc, #120]	; (8006c28 <HAL_TIM_Base_MspInit+0x10c>)
 8006bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bb6:	617b      	str	r3, [r7, #20]
 8006bb8:	697b      	ldr	r3, [r7, #20]
}
 8006bba:	e02e      	b.n	8006c1a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a1c      	ldr	r2, [pc, #112]	; (8006c34 <HAL_TIM_Base_MspInit+0x118>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d10e      	bne.n	8006be4 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	613b      	str	r3, [r7, #16]
 8006bca:	4b17      	ldr	r3, [pc, #92]	; (8006c28 <HAL_TIM_Base_MspInit+0x10c>)
 8006bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bce:	4a16      	ldr	r2, [pc, #88]	; (8006c28 <HAL_TIM_Base_MspInit+0x10c>)
 8006bd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8006bd6:	4b14      	ldr	r3, [pc, #80]	; (8006c28 <HAL_TIM_Base_MspInit+0x10c>)
 8006bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bde:	613b      	str	r3, [r7, #16]
 8006be0:	693b      	ldr	r3, [r7, #16]
}
 8006be2:	e01a      	b.n	8006c1a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a13      	ldr	r2, [pc, #76]	; (8006c38 <HAL_TIM_Base_MspInit+0x11c>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d115      	bne.n	8006c1a <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8006bee:	2300      	movs	r3, #0
 8006bf0:	60fb      	str	r3, [r7, #12]
 8006bf2:	4b0d      	ldr	r3, [pc, #52]	; (8006c28 <HAL_TIM_Base_MspInit+0x10c>)
 8006bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf6:	4a0c      	ldr	r2, [pc, #48]	; (8006c28 <HAL_TIM_Base_MspInit+0x10c>)
 8006bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8006bfe:	4b0a      	ldr	r3, [pc, #40]	; (8006c28 <HAL_TIM_Base_MspInit+0x10c>)
 8006c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c06:	60fb      	str	r3, [r7, #12]
 8006c08:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	2100      	movs	r1, #0
 8006c0e:	202c      	movs	r0, #44	; 0x2c
 8006c10:	f002 fd6b 	bl	80096ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8006c14:	202c      	movs	r0, #44	; 0x2c
 8006c16:	f002 fd84 	bl	8009722 <HAL_NVIC_EnableIRQ>
}
 8006c1a:	bf00      	nop
 8006c1c:	3720      	adds	r7, #32
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop
 8006c24:	40001000 	.word	0x40001000
 8006c28:	40023800 	.word	0x40023800
 8006c2c:	40001400 	.word	0x40001400
 8006c30:	40014400 	.word	0x40014400
 8006c34:	40014800 	.word	0x40014800
 8006c38:	40001c00 	.word	0x40001c00

08006c3c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b08a      	sub	sp, #40	; 0x28
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c44:	f107 0314 	add.w	r3, r7, #20
 8006c48:	2200      	movs	r2, #0
 8006c4a:	601a      	str	r2, [r3, #0]
 8006c4c:	605a      	str	r2, [r3, #4]
 8006c4e:	609a      	str	r2, [r3, #8]
 8006c50:	60da      	str	r2, [r3, #12]
 8006c52:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a1d      	ldr	r2, [pc, #116]	; (8006cd0 <HAL_TIM_Encoder_MspInit+0x94>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d133      	bne.n	8006cc6 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006c5e:	2300      	movs	r3, #0
 8006c60:	613b      	str	r3, [r7, #16]
 8006c62:	4b1c      	ldr	r3, [pc, #112]	; (8006cd4 <HAL_TIM_Encoder_MspInit+0x98>)
 8006c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c66:	4a1b      	ldr	r2, [pc, #108]	; (8006cd4 <HAL_TIM_Encoder_MspInit+0x98>)
 8006c68:	f043 0302 	orr.w	r3, r3, #2
 8006c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8006c6e:	4b19      	ldr	r3, [pc, #100]	; (8006cd4 <HAL_TIM_Encoder_MspInit+0x98>)
 8006c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c72:	f003 0302 	and.w	r3, r3, #2
 8006c76:	613b      	str	r3, [r7, #16]
 8006c78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	60fb      	str	r3, [r7, #12]
 8006c7e:	4b15      	ldr	r3, [pc, #84]	; (8006cd4 <HAL_TIM_Encoder_MspInit+0x98>)
 8006c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c82:	4a14      	ldr	r2, [pc, #80]	; (8006cd4 <HAL_TIM_Encoder_MspInit+0x98>)
 8006c84:	f043 0304 	orr.w	r3, r3, #4
 8006c88:	6313      	str	r3, [r2, #48]	; 0x30
 8006c8a:	4b12      	ldr	r3, [pc, #72]	; (8006cd4 <HAL_TIM_Encoder_MspInit+0x98>)
 8006c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c8e:	f003 0304 	and.w	r3, r3, #4
 8006c92:	60fb      	str	r3, [r7, #12]
 8006c94:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006c96:	23c0      	movs	r3, #192	; 0xc0
 8006c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c9a:	2302      	movs	r3, #2
 8006c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006caa:	f107 0314 	add.w	r3, r7, #20
 8006cae:	4619      	mov	r1, r3
 8006cb0:	4809      	ldr	r0, [pc, #36]	; (8006cd8 <HAL_TIM_Encoder_MspInit+0x9c>)
 8006cb2:	f003 f8ed 	bl	8009e90 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	2100      	movs	r1, #0
 8006cba:	202c      	movs	r0, #44	; 0x2c
 8006cbc:	f002 fd15 	bl	80096ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8006cc0:	202c      	movs	r0, #44	; 0x2c
 8006cc2:	f002 fd2e 	bl	8009722 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8006cc6:	bf00      	nop
 8006cc8:	3728      	adds	r7, #40	; 0x28
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	40010400 	.word	0x40010400
 8006cd4:	40023800 	.word	0x40023800
 8006cd8:	40020800 	.word	0x40020800

08006cdc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b08c      	sub	sp, #48	; 0x30
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ce4:	f107 031c 	add.w	r3, r7, #28
 8006ce8:	2200      	movs	r2, #0
 8006cea:	601a      	str	r2, [r3, #0]
 8006cec:	605a      	str	r2, [r3, #4]
 8006cee:	609a      	str	r2, [r3, #8]
 8006cf0:	60da      	str	r2, [r3, #12]
 8006cf2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a5c      	ldr	r2, [pc, #368]	; (8006e6c <HAL_TIM_MspPostInit+0x190>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d11f      	bne.n	8006d3e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006cfe:	2300      	movs	r3, #0
 8006d00:	61bb      	str	r3, [r7, #24]
 8006d02:	4b5b      	ldr	r3, [pc, #364]	; (8006e70 <HAL_TIM_MspPostInit+0x194>)
 8006d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d06:	4a5a      	ldr	r2, [pc, #360]	; (8006e70 <HAL_TIM_MspPostInit+0x194>)
 8006d08:	f043 0310 	orr.w	r3, r3, #16
 8006d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8006d0e:	4b58      	ldr	r3, [pc, #352]	; (8006e70 <HAL_TIM_MspPostInit+0x194>)
 8006d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d12:	f003 0310 	and.w	r3, r3, #16
 8006d16:	61bb      	str	r3, [r7, #24]
 8006d18:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8006d1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006d1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d20:	2302      	movs	r3, #2
 8006d22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d24:	2300      	movs	r3, #0
 8006d26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006d30:	f107 031c 	add.w	r3, r7, #28
 8006d34:	4619      	mov	r1, r3
 8006d36:	484f      	ldr	r0, [pc, #316]	; (8006e74 <HAL_TIM_MspPostInit+0x198>)
 8006d38:	f003 f8aa 	bl	8009e90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8006d3c:	e091      	b.n	8006e62 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a4d      	ldr	r2, [pc, #308]	; (8006e78 <HAL_TIM_MspPostInit+0x19c>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d11e      	bne.n	8006d86 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d48:	2300      	movs	r3, #0
 8006d4a:	617b      	str	r3, [r7, #20]
 8006d4c:	4b48      	ldr	r3, [pc, #288]	; (8006e70 <HAL_TIM_MspPostInit+0x194>)
 8006d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d50:	4a47      	ldr	r2, [pc, #284]	; (8006e70 <HAL_TIM_MspPostInit+0x194>)
 8006d52:	f043 0302 	orr.w	r3, r3, #2
 8006d56:	6313      	str	r3, [r2, #48]	; 0x30
 8006d58:	4b45      	ldr	r3, [pc, #276]	; (8006e70 <HAL_TIM_MspPostInit+0x194>)
 8006d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d5c:	f003 0302 	and.w	r3, r3, #2
 8006d60:	617b      	str	r3, [r7, #20]
 8006d62:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006d64:	2330      	movs	r3, #48	; 0x30
 8006d66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d68:	2302      	movs	r3, #2
 8006d6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d70:	2300      	movs	r3, #0
 8006d72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006d74:	2302      	movs	r3, #2
 8006d76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006d78:	f107 031c 	add.w	r3, r7, #28
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	483f      	ldr	r0, [pc, #252]	; (8006e7c <HAL_TIM_MspPostInit+0x1a0>)
 8006d80:	f003 f886 	bl	8009e90 <HAL_GPIO_Init>
}
 8006d84:	e06d      	b.n	8006e62 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a3d      	ldr	r2, [pc, #244]	; (8006e80 <HAL_TIM_MspPostInit+0x1a4>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d11f      	bne.n	8006dd0 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006d90:	2300      	movs	r3, #0
 8006d92:	613b      	str	r3, [r7, #16]
 8006d94:	4b36      	ldr	r3, [pc, #216]	; (8006e70 <HAL_TIM_MspPostInit+0x194>)
 8006d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d98:	4a35      	ldr	r2, [pc, #212]	; (8006e70 <HAL_TIM_MspPostInit+0x194>)
 8006d9a:	f043 0308 	orr.w	r3, r3, #8
 8006d9e:	6313      	str	r3, [r2, #48]	; 0x30
 8006da0:	4b33      	ldr	r3, [pc, #204]	; (8006e70 <HAL_TIM_MspPostInit+0x194>)
 8006da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da4:	f003 0308 	and.w	r3, r3, #8
 8006da8:	613b      	str	r3, [r7, #16]
 8006daa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8006dac:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8006db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006db2:	2302      	movs	r3, #2
 8006db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006db6:	2300      	movs	r3, #0
 8006db8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006dbe:	2302      	movs	r3, #2
 8006dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006dc2:	f107 031c 	add.w	r3, r7, #28
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	482e      	ldr	r0, [pc, #184]	; (8006e84 <HAL_TIM_MspPostInit+0x1a8>)
 8006dca:	f003 f861 	bl	8009e90 <HAL_GPIO_Init>
}
 8006dce:	e048      	b.n	8006e62 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a2c      	ldr	r2, [pc, #176]	; (8006e88 <HAL_TIM_MspPostInit+0x1ac>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d11f      	bne.n	8006e1a <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006dda:	2300      	movs	r3, #0
 8006ddc:	60fb      	str	r3, [r7, #12]
 8006dde:	4b24      	ldr	r3, [pc, #144]	; (8006e70 <HAL_TIM_MspPostInit+0x194>)
 8006de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006de2:	4a23      	ldr	r2, [pc, #140]	; (8006e70 <HAL_TIM_MspPostInit+0x194>)
 8006de4:	f043 0302 	orr.w	r3, r3, #2
 8006de8:	6313      	str	r3, [r2, #48]	; 0x30
 8006dea:	4b21      	ldr	r3, [pc, #132]	; (8006e70 <HAL_TIM_MspPostInit+0x194>)
 8006dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dee:	f003 0302 	and.w	r3, r3, #2
 8006df2:	60fb      	str	r3, [r7, #12]
 8006df4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006df6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006dfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dfc:	2302      	movs	r3, #2
 8006dfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e00:	2300      	movs	r3, #0
 8006e02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e04:	2300      	movs	r3, #0
 8006e06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8006e08:	2303      	movs	r3, #3
 8006e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e0c:	f107 031c 	add.w	r3, r7, #28
 8006e10:	4619      	mov	r1, r3
 8006e12:	481a      	ldr	r0, [pc, #104]	; (8006e7c <HAL_TIM_MspPostInit+0x1a0>)
 8006e14:	f003 f83c 	bl	8009e90 <HAL_GPIO_Init>
}
 8006e18:	e023      	b.n	8006e62 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a1b      	ldr	r2, [pc, #108]	; (8006e8c <HAL_TIM_MspPostInit+0x1b0>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d11e      	bne.n	8006e62 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e24:	2300      	movs	r3, #0
 8006e26:	60bb      	str	r3, [r7, #8]
 8006e28:	4b11      	ldr	r3, [pc, #68]	; (8006e70 <HAL_TIM_MspPostInit+0x194>)
 8006e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e2c:	4a10      	ldr	r2, [pc, #64]	; (8006e70 <HAL_TIM_MspPostInit+0x194>)
 8006e2e:	f043 0302 	orr.w	r3, r3, #2
 8006e32:	6313      	str	r3, [r2, #48]	; 0x30
 8006e34:	4b0e      	ldr	r3, [pc, #56]	; (8006e70 <HAL_TIM_MspPostInit+0x194>)
 8006e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e38:	f003 0302 	and.w	r3, r3, #2
 8006e3c:	60bb      	str	r3, [r7, #8]
 8006e3e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006e40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e46:	2302      	movs	r3, #2
 8006e48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8006e52:	2303      	movs	r3, #3
 8006e54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e56:	f107 031c 	add.w	r3, r7, #28
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	4807      	ldr	r0, [pc, #28]	; (8006e7c <HAL_TIM_MspPostInit+0x1a0>)
 8006e5e:	f003 f817 	bl	8009e90 <HAL_GPIO_Init>
}
 8006e62:	bf00      	nop
 8006e64:	3730      	adds	r7, #48	; 0x30
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	40010000 	.word	0x40010000
 8006e70:	40023800 	.word	0x40023800
 8006e74:	40021000 	.word	0x40021000
 8006e78:	40000400 	.word	0x40000400
 8006e7c:	40020400 	.word	0x40020400
 8006e80:	40000800 	.word	0x40000800
 8006e84:	40020c00 	.word	0x40020c00
 8006e88:	40014400 	.word	0x40014400
 8006e8c:	40014800 	.word	0x40014800

08006e90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b08a      	sub	sp, #40	; 0x28
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e98:	f107 0314 	add.w	r3, r7, #20
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	601a      	str	r2, [r3, #0]
 8006ea0:	605a      	str	r2, [r3, #4]
 8006ea2:	609a      	str	r2, [r3, #8]
 8006ea4:	60da      	str	r2, [r3, #12]
 8006ea6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a19      	ldr	r2, [pc, #100]	; (8006f14 <HAL_UART_MspInit+0x84>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d12b      	bne.n	8006f0a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	613b      	str	r3, [r7, #16]
 8006eb6:	4b18      	ldr	r3, [pc, #96]	; (8006f18 <HAL_UART_MspInit+0x88>)
 8006eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eba:	4a17      	ldr	r2, [pc, #92]	; (8006f18 <HAL_UART_MspInit+0x88>)
 8006ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8006ec2:	4b15      	ldr	r3, [pc, #84]	; (8006f18 <HAL_UART_MspInit+0x88>)
 8006ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eca:	613b      	str	r3, [r7, #16]
 8006ecc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006ece:	2300      	movs	r3, #0
 8006ed0:	60fb      	str	r3, [r7, #12]
 8006ed2:	4b11      	ldr	r3, [pc, #68]	; (8006f18 <HAL_UART_MspInit+0x88>)
 8006ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed6:	4a10      	ldr	r2, [pc, #64]	; (8006f18 <HAL_UART_MspInit+0x88>)
 8006ed8:	f043 0308 	orr.w	r3, r3, #8
 8006edc:	6313      	str	r3, [r2, #48]	; 0x30
 8006ede:	4b0e      	ldr	r3, [pc, #56]	; (8006f18 <HAL_UART_MspInit+0x88>)
 8006ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ee2:	f003 0308 	and.w	r3, r3, #8
 8006ee6:	60fb      	str	r3, [r7, #12]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8006eea:	2360      	movs	r3, #96	; 0x60
 8006eec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006eee:	2302      	movs	r3, #2
 8006ef0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ef6:	2303      	movs	r3, #3
 8006ef8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006efa:	2307      	movs	r3, #7
 8006efc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006efe:	f107 0314 	add.w	r3, r7, #20
 8006f02:	4619      	mov	r1, r3
 8006f04:	4805      	ldr	r0, [pc, #20]	; (8006f1c <HAL_UART_MspInit+0x8c>)
 8006f06:	f002 ffc3 	bl	8009e90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8006f0a:	bf00      	nop
 8006f0c:	3728      	adds	r7, #40	; 0x28
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop
 8006f14:	40004400 	.word	0x40004400
 8006f18:	40023800 	.word	0x40023800
 8006f1c:	40020c00 	.word	0x40020c00

08006f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006f20:	b480      	push	{r7}
 8006f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006f24:	e7fe      	b.n	8006f24 <NMI_Handler+0x4>

08006f26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006f26:	b480      	push	{r7}
 8006f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006f2a:	e7fe      	b.n	8006f2a <HardFault_Handler+0x4>

08006f2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006f30:	e7fe      	b.n	8006f30 <MemManage_Handler+0x4>

08006f32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006f32:	b480      	push	{r7}
 8006f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006f36:	e7fe      	b.n	8006f36 <BusFault_Handler+0x4>

08006f38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006f3c:	e7fe      	b.n	8006f3c <UsageFault_Handler+0x4>

08006f3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006f3e:	b480      	push	{r7}
 8006f40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006f42:	bf00      	nop
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr

08006f4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006f50:	bf00      	nop
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr

08006f5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006f5a:	b480      	push	{r7}
 8006f5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006f5e:	bf00      	nop
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr

08006f68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006f6c:	f001 fe9c 	bl	8008ca8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006f70:	bf00      	nop
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8006f78:	4803      	ldr	r0, [pc, #12]	; (8006f88 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8006f7a:	f007 f96c 	bl	800e256 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8006f7e:	4803      	ldr	r0, [pc, #12]	; (8006f8c <TIM8_UP_TIM13_IRQHandler+0x18>)
 8006f80:	f007 f969 	bl	800e256 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8006f84:	bf00      	nop
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	2003e8a0 	.word	0x2003e8a0
 8006f8c:	2003ea9c 	.word	0x2003ea9c

08006f90 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8006f94:	4802      	ldr	r0, [pc, #8]	; (8006fa0 <SDIO_IRQHandler+0x10>)
 8006f96:	f005 fa05 	bl	800c3a4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8006f9a:	bf00      	nop
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	2003ebfc 	.word	0x2003ebfc

08006fa4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006fa8:	4802      	ldr	r0, [pc, #8]	; (8006fb4 <TIM6_DAC_IRQHandler+0x10>)
 8006faa:	f007 f954 	bl	800e256 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006fae:	bf00      	nop
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	2003eb7c 	.word	0x2003eb7c

08006fb8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8006fbc:	4802      	ldr	r0, [pc, #8]	; (8006fc8 <TIM7_IRQHandler+0x10>)
 8006fbe:	f007 f94a 	bl	800e256 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8006fc2:	bf00      	nop
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	2003ed20 	.word	0x2003ed20

08006fcc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8006fd0:	4802      	ldr	r0, [pc, #8]	; (8006fdc <DMA2_Stream2_IRQHandler+0x10>)
 8006fd2:	f002 fce9 	bl	80099a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8006fd6:	bf00      	nop
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	2003ecc0 	.word	0x2003ecc0

08006fe0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8006fe4:	4802      	ldr	r0, [pc, #8]	; (8006ff0 <DMA2_Stream3_IRQHandler+0x10>)
 8006fe6:	f002 fcdf 	bl	80099a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8006fea:	bf00      	nop
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	2003e7e8 	.word	0x2003e7e8

08006ff4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8006ff8:	4802      	ldr	r0, [pc, #8]	; (8007004 <DMA2_Stream6_IRQHandler+0x10>)
 8006ffa:	f002 fcd5 	bl	80099a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8006ffe:	bf00      	nop
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	2003eb1c 	.word	0x2003eb1c

08007008 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b086      	sub	sp, #24
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007010:	4a14      	ldr	r2, [pc, #80]	; (8007064 <_sbrk+0x5c>)
 8007012:	4b15      	ldr	r3, [pc, #84]	; (8007068 <_sbrk+0x60>)
 8007014:	1ad3      	subs	r3, r2, r3
 8007016:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800701c:	4b13      	ldr	r3, [pc, #76]	; (800706c <_sbrk+0x64>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d102      	bne.n	800702a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007024:	4b11      	ldr	r3, [pc, #68]	; (800706c <_sbrk+0x64>)
 8007026:	4a12      	ldr	r2, [pc, #72]	; (8007070 <_sbrk+0x68>)
 8007028:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800702a:	4b10      	ldr	r3, [pc, #64]	; (800706c <_sbrk+0x64>)
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	4413      	add	r3, r2
 8007032:	693a      	ldr	r2, [r7, #16]
 8007034:	429a      	cmp	r2, r3
 8007036:	d207      	bcs.n	8007048 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007038:	f00d fba0 	bl	801477c <__errno>
 800703c:	4602      	mov	r2, r0
 800703e:	230c      	movs	r3, #12
 8007040:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8007042:	f04f 33ff 	mov.w	r3, #4294967295
 8007046:	e009      	b.n	800705c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007048:	4b08      	ldr	r3, [pc, #32]	; (800706c <_sbrk+0x64>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800704e:	4b07      	ldr	r3, [pc, #28]	; (800706c <_sbrk+0x64>)
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4413      	add	r3, r2
 8007056:	4a05      	ldr	r2, [pc, #20]	; (800706c <_sbrk+0x64>)
 8007058:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800705a:	68fb      	ldr	r3, [r7, #12]
}
 800705c:	4618      	mov	r0, r3
 800705e:	3718      	adds	r7, #24
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}
 8007064:	20050000 	.word	0x20050000
 8007068:	00000800 	.word	0x00000800
 800706c:	200002bc 	.word	0x200002bc
 8007070:	20040e70 	.word	0x20040e70

08007074 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007074:	b480      	push	{r7}
 8007076:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007078:	4b08      	ldr	r3, [pc, #32]	; (800709c <SystemInit+0x28>)
 800707a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800707e:	4a07      	ldr	r2, [pc, #28]	; (800709c <SystemInit+0x28>)
 8007080:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007084:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007088:	4b04      	ldr	r3, [pc, #16]	; (800709c <SystemInit+0x28>)
 800708a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800708e:	609a      	str	r2, [r3, #8]
#endif
}
 8007090:	bf00      	nop
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr
 800709a:	bf00      	nop
 800709c:	e000ed00 	.word	0xe000ed00

080070a0 <cppInit>:
		}
	}
}

void cppInit(void)
{
 80070a0:	b598      	push	{r3, r4, r7, lr}
 80070a2:	af00      	add	r7, sp, #0
	lcd_init();
 80070a4:	f7f9 ffb8 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 80070a8:	483a      	ldr	r0, [pc, #232]	; (8007194 <cppInit+0xf4>)
 80070aa:	f7fd fdef 	bl	8004c8c <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 80070ae:	2064      	movs	r0, #100	; 0x64
 80070b0:	f001 fe1a 	bl	8008ce8 <HAL_Delay>
	power_sensor.updateValues();
 80070b4:	4837      	ldr	r0, [pc, #220]	; (8007194 <cppInit+0xf4>)
 80070b6:	f7fd fdf7 	bl	8004ca8 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 80070ba:	f7f9 fff1 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 80070be:	2100      	movs	r1, #0
 80070c0:	2000      	movs	r0, #0
 80070c2:	f7f9 fffd 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 80070c6:	4834      	ldr	r0, [pc, #208]	; (8007198 <cppInit+0xf8>)
 80070c8:	f7fa f824 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 80070cc:	2101      	movs	r1, #1
 80070ce:	2000      	movs	r0, #0
 80070d0:	f7f9 fff6 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 80070d4:	482f      	ldr	r0, [pc, #188]	; (8007194 <cppInit+0xf4>)
 80070d6:	f7fd fe11 	bl	8004cfc <_ZN11PowerSensor17getButteryVoltageEv>
 80070da:	ee10 3a10 	vmov	r3, s0
 80070de:	4618      	mov	r0, r3
 80070e0:	f7f9 fa4a 	bl	8000578 <__aeabi_f2d>
 80070e4:	4603      	mov	r3, r0
 80070e6:	460c      	mov	r4, r1
 80070e8:	461a      	mov	r2, r3
 80070ea:	4623      	mov	r3, r4
 80070ec:	482b      	ldr	r0, [pc, #172]	; (800719c <cppInit+0xfc>)
 80070ee:	f7fa f811 	bl	8001114 <lcd_printf>
	HAL_Delay(1000);
 80070f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80070f6:	f001 fdf7 	bl	8008ce8 <HAL_Delay>

	//if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 80070fa:	4829      	ldr	r0, [pc, #164]	; (80071a0 <cppInit+0x100>)
 80070fc:	f7fd f80a 	bl	8004114 <_ZN6Logger10sdCardInitEv>
 8007100:	4603      	mov	r3, r0
 8007102:	2b00      	cmp	r3, #0
 8007104:	d007      	beq.n	8007116 <cppInit+0x76>
		led.fullColor('G');
 8007106:	2147      	movs	r1, #71	; 0x47
 8007108:	4826      	ldr	r0, [pc, #152]	; (80071a4 <cppInit+0x104>)
 800710a:	f7fa fef7 	bl	8001efc <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 800710e:	2064      	movs	r0, #100	; 0x64
 8007110:	f001 fdea 	bl	8008ce8 <HAL_Delay>
 8007114:	e006      	b.n	8007124 <cppInit+0x84>
	}
	else{ //sd mount fali
		led.fullColor('R');
 8007116:	2152      	movs	r1, #82	; 0x52
 8007118:	4822      	ldr	r0, [pc, #136]	; (80071a4 <cppInit+0x104>)
 800711a:	f7fa feef 	bl	8001efc <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 800711e:	2064      	movs	r0, #100	; 0x64
 8007120:	f001 fde2 	bl	8008ce8 <HAL_Delay>
	}

	line_sensor.ADCStart();
 8007124:	4820      	ldr	r0, [pc, #128]	; (80071a8 <cppInit+0x108>)
 8007126:	f7fb f845 	bl	80021b4 <_ZN10LineSensor8ADCStartEv>
	motor.init();
 800712a:	4820      	ldr	r0, [pc, #128]	; (80071ac <cppInit+0x10c>)
 800712c:	f7fd fa80 	bl	8004630 <_ZN5Motor4initEv>
	encoder.init();
 8007130:	481f      	ldr	r0, [pc, #124]	; (80071b0 <cppInit+0x110>)
 8007132:	f7fa f83b 	bl	80011ac <_ZN7Encoder4initEv>
	imu.init();
 8007136:	481f      	ldr	r0, [pc, #124]	; (80071b4 <cppInit+0x114>)
 8007138:	f7fa fc9e 	bl	8001a78 <_ZN3IMU4initEv>
	line_trace.init();
 800713c:	481e      	ldr	r0, [pc, #120]	; (80071b8 <cppInit+0x118>)
 800713e:	f7fc fa21 	bl	8003584 <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 8007142:	4819      	ldr	r0, [pc, #100]	; (80071a8 <cppInit+0x108>)
 8007144:	f7fb f976 	bl	8002434 <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 8007148:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800714c:	f001 fdcc 	bl	8008ce8 <HAL_Delay>

	led.fullColor('M');
 8007150:	214d      	movs	r1, #77	; 0x4d
 8007152:	4814      	ldr	r0, [pc, #80]	; (80071a4 <cppInit+0x104>)
 8007154:	f7fa fed2 	bl	8001efc <_ZN3LED9fullColorEc>
	imu.calibration();
 8007158:	4816      	ldr	r0, [pc, #88]	; (80071b4 <cppInit+0x114>)
 800715a:	f7fa fd57 	bl	8001c0c <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.5, 20, 0);
	velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243);
 800715e:	ed9f 1a17 	vldr	s2, [pc, #92]	; 80071bc <cppInit+0x11c>
 8007162:	eddf 0a17 	vldr	s1, [pc, #92]	; 80071c0 <cppInit+0x120>
 8007166:	ed9f 0a17 	vldr	s0, [pc, #92]	; 80071c4 <cppInit+0x124>
 800716a:	4817      	ldr	r0, [pc, #92]	; (80071c8 <cppInit+0x128>)
 800716c:	f7fe f9cc 	bl	8005508 <_ZN12VelocityCtrl15setVelocityGainEfff>
	//velocity_ctrl.setVelocityGain(1.9842, 22.9078, 0.02079);
	//velocity_ctrl.setOmegaGain(0.5, 5, 0);
	//velocity_ctrl.setOmegaGain(0.05, 7, 0);
	velocity_ctrl.setOmegaGain(0.069793, 0.86816, 0.0014027);
 8007170:	ed9f 1a16 	vldr	s2, [pc, #88]	; 80071cc <cppInit+0x12c>
 8007174:	eddf 0a16 	vldr	s1, [pc, #88]	; 80071d0 <cppInit+0x130>
 8007178:	ed9f 0a16 	vldr	s0, [pc, #88]	; 80071d4 <cppInit+0x134>
 800717c:	4812      	ldr	r0, [pc, #72]	; (80071c8 <cppInit+0x128>)
 800717e:	f7fe f9dc 	bl	800553a <_ZN12VelocityCtrl12setOmegaGainEfff>
	//velocity_ctrl.setOmegaGain(0.12175, 1.0604, 0.002614);
	//velocity_ctrl.setOmegaGain(0.0, 0, 0);


	//encoder.clearDistance();
	odometry.clearPotition();
 8007182:	4815      	ldr	r0, [pc, #84]	; (80071d8 <cppInit+0x138>)
 8007184:	f7fd fc8c 	bl	8004aa0 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 8007188:	4814      	ldr	r0, [pc, #80]	; (80071dc <cppInit+0x13c>)
 800718a:	f7fd fd23 	bl	8004bd4 <_ZN13PathFollowing4initEv>

}
 800718e:	bf00      	nop
 8007190:	bd98      	pop	{r3, r4, r7, pc}
 8007192:	bf00      	nop
 8007194:	200005d0 	.word	0x200005d0
 8007198:	08018f84 	.word	0x08018f84
 800719c:	08018f8c 	.word	0x08018f8c
 80071a0:	200005f0 	.word	0x200005f0
 80071a4:	200005cc 	.word	0x200005cc
 80071a8:	200002c0 	.word	0x200002c0
 80071ac:	200005c8 	.word	0x200005c8
 80071b0:	20017d00 	.word	0x20017d00
 80071b4:	200005dc 	.word	0x200005dc
 80071b8:	20017da0 	.word	0x20017da0
 80071bc:	3cceca68 	.word	0x3cceca68
 80071c0:	4180f06f 	.word	0x4180f06f
 80071c4:	3fea2d0e 	.word	0x3fea2d0e
 80071c8:	20017d20 	.word	0x20017d20
 80071cc:	3ab7dacd 	.word	0x3ab7dacd
 80071d0:	3f5e3fbc 	.word	0x3f5e3fbc
 80071d4:	3d8eefa2 	.word	0x3d8eefa2
 80071d8:	20017d60 	.word	0x20017d60
 80071dc:	20024d10 	.word	0x20024d10

080071e0 <cppFlip1ms>:

void cppFlip1ms(void)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 80071e4:	4819      	ldr	r0, [pc, #100]	; (800724c <cppFlip1ms+0x6c>)
 80071e6:	f7fb f843 	bl	8002270 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 80071ea:	4819      	ldr	r0, [pc, #100]	; (8007250 <cppFlip1ms+0x70>)
 80071ec:	f7fa fc6c 	bl	8001ac8 <_ZN3IMU12updateValuesEv>
	encoder.update();
 80071f0:	4818      	ldr	r0, [pc, #96]	; (8007254 <cppFlip1ms+0x74>)
 80071f2:	f7f9 fffd 	bl	80011f0 <_ZN7Encoder6updateEv>
	line_trace.flip();
 80071f6:	4818      	ldr	r0, [pc, #96]	; (8007258 <cppFlip1ms+0x78>)
 80071f8:	f7fc fb96 	bl	8003928 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 80071fc:	4817      	ldr	r0, [pc, #92]	; (800725c <cppFlip1ms+0x7c>)
 80071fe:	f7fe f9b5 	bl	800556c <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 8007202:	4817      	ldr	r0, [pc, #92]	; (8007260 <cppFlip1ms+0x80>)
 8007204:	f7fd fc30 	bl	8004a68 <_ZN8Odometry4flipEv>
	side_sensor.updateStatus();
 8007208:	4816      	ldr	r0, [pc, #88]	; (8007264 <cppFlip1ms+0x84>)
 800720a:	f7fd fded 	bl	8004de8 <_ZN10SideSensor12updateStatusEv>

	motor.motorCtrl();
 800720e:	4816      	ldr	r0, [pc, #88]	; (8007268 <cppFlip1ms+0x88>)
 8007210:	f7fd fa20 	bl	8004654 <_ZN5Motor9motorCtrlEv>

	//logger.storeLog(velocity_ctrl.getCurrentVelocity());
	//logger.storeLog(imu.getOmega());

	static uint16_t twice_cnt;
	twice_cnt++;
 8007214:	4b15      	ldr	r3, [pc, #84]	; (800726c <cppFlip1ms+0x8c>)
 8007216:	881b      	ldrh	r3, [r3, #0]
 8007218:	3301      	adds	r3, #1
 800721a:	b29a      	uxth	r2, r3
 800721c:	4b13      	ldr	r3, [pc, #76]	; (800726c <cppFlip1ms+0x8c>)
 800721e:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 2){ //2ms
 8007220:	4b12      	ldr	r3, [pc, #72]	; (800726c <cppFlip1ms+0x8c>)
 8007222:	881b      	ldrh	r3, [r3, #0]
 8007224:	2b01      	cmp	r3, #1
 8007226:	d90c      	bls.n	8007242 <cppFlip1ms+0x62>
		sys_ident.inOutputStore(imu.getOmega());
 8007228:	4809      	ldr	r0, [pc, #36]	; (8007250 <cppFlip1ms+0x70>)
 800722a:	f7fa fca5 	bl	8001b78 <_ZN3IMU8getOmegaEv>
 800722e:	eef0 7a40 	vmov.f32	s15, s0
 8007232:	eeb0 0a67 	vmov.f32	s0, s15
 8007236:	480e      	ldr	r0, [pc, #56]	; (8007270 <cppFlip1ms+0x90>)
 8007238:	f7fd ff38 	bl	80050ac <_ZN20SystemIdentification13inOutputStoreEf>
		twice_cnt = 0;
 800723c:	4b0b      	ldr	r3, [pc, #44]	; (800726c <cppFlip1ms+0x8c>)
 800723e:	2200      	movs	r2, #0
 8007240:	801a      	strh	r2, [r3, #0]

	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clear();
 8007242:	4804      	ldr	r0, [pc, #16]	; (8007254 <cppFlip1ms+0x74>)
 8007244:	f7fa f8be 	bl	80013c4 <_ZN7Encoder5clearEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8007248:	bf00      	nop
 800724a:	bd80      	pop	{r7, pc}
 800724c:	200002c0 	.word	0x200002c0
 8007250:	200005dc 	.word	0x200005dc
 8007254:	20017d00 	.word	0x20017d00
 8007258:	20017da0 	.word	0x20017da0
 800725c:	20017d20 	.word	0x20017d20
 8007260:	20017d60 	.word	0x20017d60
 8007264:	200005b8 	.word	0x200005b8
 8007268:	200005c8 	.word	0x200005c8
 800726c:	2003c438 	.word	0x2003c438
 8007270:	20024b00 	.word	0x20024b00

08007274 <cppFlip100ns>:

void cppFlip100ns(void)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 8007278:	4802      	ldr	r0, [pc, #8]	; (8007284 <cppFlip100ns+0x10>)
 800727a:	f7fa ffab 	bl	80021d4 <_ZN10LineSensor17storeSensorValuesEv>
	//line_trace.flip100ns();
}
 800727e:	bf00      	nop
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	200002c0 	.word	0x200002c0

08007288 <cppFlip10ms>:

void cppFlip10ms(void)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	af00      	add	r7, sp, #0
	static uint16_t twice_cnt;
	twice_cnt++;
 800728c:	4b08      	ldr	r3, [pc, #32]	; (80072b0 <cppFlip10ms+0x28>)
 800728e:	881b      	ldrh	r3, [r3, #0]
 8007290:	3301      	adds	r3, #1
 8007292:	b29a      	uxth	r2, r3
 8007294:	4b06      	ldr	r3, [pc, #24]	; (80072b0 <cppFlip10ms+0x28>)
 8007296:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 7){ //70ms
 8007298:	4b05      	ldr	r3, [pc, #20]	; (80072b0 <cppFlip10ms+0x28>)
 800729a:	881b      	ldrh	r3, [r3, #0]
 800729c:	2b06      	cmp	r3, #6
 800729e:	d905      	bls.n	80072ac <cppFlip10ms+0x24>
		sys_ident.updateMsig();
 80072a0:	4804      	ldr	r0, [pc, #16]	; (80072b4 <cppFlip10ms+0x2c>)
 80072a2:	f7fd ff3f 	bl	8005124 <_ZN20SystemIdentification10updateMsigEv>
		twice_cnt = 0;
 80072a6:	4b02      	ldr	r3, [pc, #8]	; (80072b0 <cppFlip10ms+0x28>)
 80072a8:	2200      	movs	r2, #0
 80072aa:	801a      	strh	r2, [r3, #0]
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 80072ac:	bf00      	nop
 80072ae:	bd80      	pop	{r7, pc}
 80072b0:	2003c43a 	.word	0x2003c43a
 80072b4:	20024b00 	.word	0x20024b00

080072b8 <cppLoop>:
{
	//side_sensor.updateStatus(gpio_pin);
}

void cppLoop(void)
{
 80072b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072ba:	b087      	sub	sp, #28
 80072bc:	af02      	add	r7, sp, #8
	static int16_t selector;
	static int16_t selector_acc;
	static int16_t selector_vel, selector_vel2;

	static float adj_kp = line_trace.getKp();
 80072be:	4baf      	ldr	r3, [pc, #700]	; (800757c <cppLoop+0x2c4>)
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	f3bf 8f5b 	dmb	ish
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	f003 0301 	and.w	r3, r3, #1
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	bf0c      	ite	eq
 80072d0:	2301      	moveq	r3, #1
 80072d2:	2300      	movne	r3, #0
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d015      	beq.n	8007306 <cppLoop+0x4e>
 80072da:	48a8      	ldr	r0, [pc, #672]	; (800757c <cppLoop+0x2c4>)
 80072dc:	f00c f9e9 	bl	80136b2 <__cxa_guard_acquire>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	bf14      	ite	ne
 80072e6:	2301      	movne	r3, #1
 80072e8:	2300      	moveq	r3, #0
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00a      	beq.n	8007306 <cppLoop+0x4e>
 80072f0:	48a3      	ldr	r0, [pc, #652]	; (8007580 <cppLoop+0x2c8>)
 80072f2:	f7fc fa02 	bl	80036fa <_ZN9LineTrace5getKpEv>
 80072f6:	eef0 7a40 	vmov.f32	s15, s0
 80072fa:	4ba2      	ldr	r3, [pc, #648]	; (8007584 <cppLoop+0x2cc>)
 80072fc:	edc3 7a00 	vstr	s15, [r3]
 8007300:	489e      	ldr	r0, [pc, #632]	; (800757c <cppLoop+0x2c4>)
 8007302:	f00c f9e2 	bl	80136ca <__cxa_guard_release>
	static float adj_ki= line_trace.getKi();
 8007306:	4ba0      	ldr	r3, [pc, #640]	; (8007588 <cppLoop+0x2d0>)
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	f3bf 8f5b 	dmb	ish
 800730e:	b2db      	uxtb	r3, r3
 8007310:	f003 0301 	and.w	r3, r3, #1
 8007314:	2b00      	cmp	r3, #0
 8007316:	bf0c      	ite	eq
 8007318:	2301      	moveq	r3, #1
 800731a:	2300      	movne	r3, #0
 800731c:	b2db      	uxtb	r3, r3
 800731e:	2b00      	cmp	r3, #0
 8007320:	d015      	beq.n	800734e <cppLoop+0x96>
 8007322:	4899      	ldr	r0, [pc, #612]	; (8007588 <cppLoop+0x2d0>)
 8007324:	f00c f9c5 	bl	80136b2 <__cxa_guard_acquire>
 8007328:	4603      	mov	r3, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	bf14      	ite	ne
 800732e:	2301      	movne	r3, #1
 8007330:	2300      	moveq	r3, #0
 8007332:	b2db      	uxtb	r3, r3
 8007334:	2b00      	cmp	r3, #0
 8007336:	d00a      	beq.n	800734e <cppLoop+0x96>
 8007338:	4891      	ldr	r0, [pc, #580]	; (8007580 <cppLoop+0x2c8>)
 800733a:	f7fc f9ed 	bl	8003718 <_ZN9LineTrace5getKiEv>
 800733e:	eef0 7a40 	vmov.f32	s15, s0
 8007342:	4b92      	ldr	r3, [pc, #584]	; (800758c <cppLoop+0x2d4>)
 8007344:	edc3 7a00 	vstr	s15, [r3]
 8007348:	488f      	ldr	r0, [pc, #572]	; (8007588 <cppLoop+0x2d0>)
 800734a:	f00c f9be 	bl	80136ca <__cxa_guard_release>
	static float adj_kd = line_trace.getKd();
 800734e:	4b90      	ldr	r3, [pc, #576]	; (8007590 <cppLoop+0x2d8>)
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	f3bf 8f5b 	dmb	ish
 8007356:	b2db      	uxtb	r3, r3
 8007358:	f003 0301 	and.w	r3, r3, #1
 800735c:	2b00      	cmp	r3, #0
 800735e:	bf0c      	ite	eq
 8007360:	2301      	moveq	r3, #1
 8007362:	2300      	movne	r3, #0
 8007364:	b2db      	uxtb	r3, r3
 8007366:	2b00      	cmp	r3, #0
 8007368:	d015      	beq.n	8007396 <cppLoop+0xde>
 800736a:	4889      	ldr	r0, [pc, #548]	; (8007590 <cppLoop+0x2d8>)
 800736c:	f00c f9a1 	bl	80136b2 <__cxa_guard_acquire>
 8007370:	4603      	mov	r3, r0
 8007372:	2b00      	cmp	r3, #0
 8007374:	bf14      	ite	ne
 8007376:	2301      	movne	r3, #1
 8007378:	2300      	moveq	r3, #0
 800737a:	b2db      	uxtb	r3, r3
 800737c:	2b00      	cmp	r3, #0
 800737e:	d00a      	beq.n	8007396 <cppLoop+0xde>
 8007380:	487f      	ldr	r0, [pc, #508]	; (8007580 <cppLoop+0x2c8>)
 8007382:	f7fc f9d8 	bl	8003736 <_ZN9LineTrace5getKdEv>
 8007386:	eef0 7a40 	vmov.f32	s15, s0
 800738a:	4b82      	ldr	r3, [pc, #520]	; (8007594 <cppLoop+0x2dc>)
 800738c:	edc3 7a00 	vstr	s15, [r3]
 8007390:	487f      	ldr	r0, [pc, #508]	; (8007590 <cppLoop+0x2d8>)
 8007392:	f00c f99a 	bl	80136ca <__cxa_guard_release>

	static float adj_velocity = line_trace.getTargetVelocity();
 8007396:	4b80      	ldr	r3, [pc, #512]	; (8007598 <cppLoop+0x2e0>)
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	f3bf 8f5b 	dmb	ish
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	f003 0301 	and.w	r3, r3, #1
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	bf0c      	ite	eq
 80073a8:	2301      	moveq	r3, #1
 80073aa:	2300      	movne	r3, #0
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d015      	beq.n	80073de <cppLoop+0x126>
 80073b2:	4879      	ldr	r0, [pc, #484]	; (8007598 <cppLoop+0x2e0>)
 80073b4:	f00c f97d 	bl	80136b2 <__cxa_guard_acquire>
 80073b8:	4603      	mov	r3, r0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	bf14      	ite	ne
 80073be:	2301      	movne	r3, #1
 80073c0:	2300      	moveq	r3, #0
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d00a      	beq.n	80073de <cppLoop+0x126>
 80073c8:	486d      	ldr	r0, [pc, #436]	; (8007580 <cppLoop+0x2c8>)
 80073ca:	f7fc fa20 	bl	800380e <_ZN9LineTrace17getTargetVelocityEv>
 80073ce:	eef0 7a40 	vmov.f32	s15, s0
 80073d2:	4b72      	ldr	r3, [pc, #456]	; (800759c <cppLoop+0x2e4>)
 80073d4:	edc3 7a00 	vstr	s15, [r3]
 80073d8:	486f      	ldr	r0, [pc, #444]	; (8007598 <cppLoop+0x2e0>)
 80073da:	f00c f976 	bl	80136ca <__cxa_guard_release>
	static float adj_max_velocity = line_trace.getMaxVelocity();
 80073de:	4b70      	ldr	r3, [pc, #448]	; (80075a0 <cppLoop+0x2e8>)
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	f3bf 8f5b 	dmb	ish
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	f003 0301 	and.w	r3, r3, #1
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	bf0c      	ite	eq
 80073f0:	2301      	moveq	r3, #1
 80073f2:	2300      	movne	r3, #0
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d015      	beq.n	8007426 <cppLoop+0x16e>
 80073fa:	4869      	ldr	r0, [pc, #420]	; (80075a0 <cppLoop+0x2e8>)
 80073fc:	f00c f959 	bl	80136b2 <__cxa_guard_acquire>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	bf14      	ite	ne
 8007406:	2301      	movne	r3, #1
 8007408:	2300      	moveq	r3, #0
 800740a:	b2db      	uxtb	r3, r3
 800740c:	2b00      	cmp	r3, #0
 800740e:	d00a      	beq.n	8007426 <cppLoop+0x16e>
 8007410:	485b      	ldr	r0, [pc, #364]	; (8007580 <cppLoop+0x2c8>)
 8007412:	f7fc fa0b 	bl	800382c <_ZN9LineTrace14getMaxVelocityEv>
 8007416:	eef0 7a40 	vmov.f32	s15, s0
 800741a:	4b62      	ldr	r3, [pc, #392]	; (80075a4 <cppLoop+0x2ec>)
 800741c:	edc3 7a00 	vstr	s15, [r3]
 8007420:	485f      	ldr	r0, [pc, #380]	; (80075a0 <cppLoop+0x2e8>)
 8007422:	f00c f952 	bl	80136ca <__cxa_guard_release>
	static float adj_max_velocity2 = line_trace.getMaxVelocity2();
 8007426:	4b60      	ldr	r3, [pc, #384]	; (80075a8 <cppLoop+0x2f0>)
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	f3bf 8f5b 	dmb	ish
 800742e:	b2db      	uxtb	r3, r3
 8007430:	f003 0301 	and.w	r3, r3, #1
 8007434:	2b00      	cmp	r3, #0
 8007436:	bf0c      	ite	eq
 8007438:	2301      	moveq	r3, #1
 800743a:	2300      	movne	r3, #0
 800743c:	b2db      	uxtb	r3, r3
 800743e:	2b00      	cmp	r3, #0
 8007440:	d015      	beq.n	800746e <cppLoop+0x1b6>
 8007442:	4859      	ldr	r0, [pc, #356]	; (80075a8 <cppLoop+0x2f0>)
 8007444:	f00c f935 	bl	80136b2 <__cxa_guard_acquire>
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	bf14      	ite	ne
 800744e:	2301      	movne	r3, #1
 8007450:	2300      	moveq	r3, #0
 8007452:	b2db      	uxtb	r3, r3
 8007454:	2b00      	cmp	r3, #0
 8007456:	d00a      	beq.n	800746e <cppLoop+0x1b6>
 8007458:	4849      	ldr	r0, [pc, #292]	; (8007580 <cppLoop+0x2c8>)
 800745a:	f7fc f9f6 	bl	800384a <_ZN9LineTrace15getMaxVelocity2Ev>
 800745e:	eef0 7a40 	vmov.f32	s15, s0
 8007462:	4b52      	ldr	r3, [pc, #328]	; (80075ac <cppLoop+0x2f4>)
 8007464:	edc3 7a00 	vstr	s15, [r3]
 8007468:	484f      	ldr	r0, [pc, #316]	; (80075a8 <cppLoop+0x2f0>)
 800746a:	f00c f92e 	bl	80136ca <__cxa_guard_release>
	static float adj_min_velocity = line_trace.getMinVelocity();
 800746e:	4b50      	ldr	r3, [pc, #320]	; (80075b0 <cppLoop+0x2f8>)
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	f3bf 8f5b 	dmb	ish
 8007476:	b2db      	uxtb	r3, r3
 8007478:	f003 0301 	and.w	r3, r3, #1
 800747c:	2b00      	cmp	r3, #0
 800747e:	bf0c      	ite	eq
 8007480:	2301      	moveq	r3, #1
 8007482:	2300      	movne	r3, #0
 8007484:	b2db      	uxtb	r3, r3
 8007486:	2b00      	cmp	r3, #0
 8007488:	d015      	beq.n	80074b6 <cppLoop+0x1fe>
 800748a:	4849      	ldr	r0, [pc, #292]	; (80075b0 <cppLoop+0x2f8>)
 800748c:	f00c f911 	bl	80136b2 <__cxa_guard_acquire>
 8007490:	4603      	mov	r3, r0
 8007492:	2b00      	cmp	r3, #0
 8007494:	bf14      	ite	ne
 8007496:	2301      	movne	r3, #1
 8007498:	2300      	moveq	r3, #0
 800749a:	b2db      	uxtb	r3, r3
 800749c:	2b00      	cmp	r3, #0
 800749e:	d00a      	beq.n	80074b6 <cppLoop+0x1fe>
 80074a0:	4837      	ldr	r0, [pc, #220]	; (8007580 <cppLoop+0x2c8>)
 80074a2:	f7fc f9e2 	bl	800386a <_ZN9LineTrace14getMinVelocityEv>
 80074a6:	eef0 7a40 	vmov.f32	s15, s0
 80074aa:	4b42      	ldr	r3, [pc, #264]	; (80075b4 <cppLoop+0x2fc>)
 80074ac:	edc3 7a00 	vstr	s15, [r3]
 80074b0:	483f      	ldr	r0, [pc, #252]	; (80075b0 <cppLoop+0x2f8>)
 80074b2:	f00c f90a 	bl	80136ca <__cxa_guard_release>
	static float adj_min_velocity2 = line_trace.getMinVelocity2();
 80074b6:	4b40      	ldr	r3, [pc, #256]	; (80075b8 <cppLoop+0x300>)
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	f3bf 8f5b 	dmb	ish
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	f003 0301 	and.w	r3, r3, #1
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	bf0c      	ite	eq
 80074c8:	2301      	moveq	r3, #1
 80074ca:	2300      	movne	r3, #0
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d015      	beq.n	80074fe <cppLoop+0x246>
 80074d2:	4839      	ldr	r0, [pc, #228]	; (80075b8 <cppLoop+0x300>)
 80074d4:	f00c f8ed 	bl	80136b2 <__cxa_guard_acquire>
 80074d8:	4603      	mov	r3, r0
 80074da:	2b00      	cmp	r3, #0
 80074dc:	bf14      	ite	ne
 80074de:	2301      	movne	r3, #1
 80074e0:	2300      	moveq	r3, #0
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d00a      	beq.n	80074fe <cppLoop+0x246>
 80074e8:	4825      	ldr	r0, [pc, #148]	; (8007580 <cppLoop+0x2c8>)
 80074ea:	f7fc f9ce 	bl	800388a <_ZN9LineTrace15getMinVelocity2Ev>
 80074ee:	eef0 7a40 	vmov.f32	s15, s0
 80074f2:	4b32      	ldr	r3, [pc, #200]	; (80075bc <cppLoop+0x304>)
 80074f4:	edc3 7a00 	vstr	s15, [r3]
 80074f8:	482f      	ldr	r0, [pc, #188]	; (80075b8 <cppLoop+0x300>)
 80074fa:	f00c f8e6 	bl	80136ca <__cxa_guard_release>

	static float adj_acc = line_trace.getMaxAcc();
 80074fe:	4b30      	ldr	r3, [pc, #192]	; (80075c0 <cppLoop+0x308>)
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	f3bf 8f5b 	dmb	ish
 8007506:	b2db      	uxtb	r3, r3
 8007508:	f003 0301 	and.w	r3, r3, #1
 800750c:	2b00      	cmp	r3, #0
 800750e:	bf0c      	ite	eq
 8007510:	2301      	moveq	r3, #1
 8007512:	2300      	movne	r3, #0
 8007514:	b2db      	uxtb	r3, r3
 8007516:	2b00      	cmp	r3, #0
 8007518:	d015      	beq.n	8007546 <cppLoop+0x28e>
 800751a:	4829      	ldr	r0, [pc, #164]	; (80075c0 <cppLoop+0x308>)
 800751c:	f00c f8c9 	bl	80136b2 <__cxa_guard_acquire>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	bf14      	ite	ne
 8007526:	2301      	movne	r3, #1
 8007528:	2300      	moveq	r3, #0
 800752a:	b2db      	uxtb	r3, r3
 800752c:	2b00      	cmp	r3, #0
 800752e:	d00a      	beq.n	8007546 <cppLoop+0x28e>
 8007530:	4813      	ldr	r0, [pc, #76]	; (8007580 <cppLoop+0x2c8>)
 8007532:	f7fc f9d4 	bl	80038de <_ZN9LineTrace9getMaxAccEv>
 8007536:	eef0 7a40 	vmov.f32	s15, s0
 800753a:	4b22      	ldr	r3, [pc, #136]	; (80075c4 <cppLoop+0x30c>)
 800753c:	edc3 7a00 	vstr	s15, [r3]
 8007540:	481f      	ldr	r0, [pc, #124]	; (80075c0 <cppLoop+0x308>)
 8007542:	f00c f8c2 	bl	80136ca <__cxa_guard_release>
	static float adj_dec = line_trace.getMaxDec();
 8007546:	4b20      	ldr	r3, [pc, #128]	; (80075c8 <cppLoop+0x310>)
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	f3bf 8f5b 	dmb	ish
 800754e:	b2db      	uxtb	r3, r3
 8007550:	f003 0301 	and.w	r3, r3, #1
 8007554:	2b00      	cmp	r3, #0
 8007556:	bf0c      	ite	eq
 8007558:	2301      	moveq	r3, #1
 800755a:	2300      	movne	r3, #0
 800755c:	b2db      	uxtb	r3, r3
 800755e:	2b00      	cmp	r3, #0
 8007560:	d03f      	beq.n	80075e2 <cppLoop+0x32a>
 8007562:	4819      	ldr	r0, [pc, #100]	; (80075c8 <cppLoop+0x310>)
 8007564:	f00c f8a5 	bl	80136b2 <__cxa_guard_acquire>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	bf14      	ite	ne
 800756e:	2301      	movne	r3, #1
 8007570:	2300      	moveq	r3, #0
 8007572:	b2db      	uxtb	r3, r3
 8007574:	2b00      	cmp	r3, #0
 8007576:	d034      	beq.n	80075e2 <cppLoop+0x32a>
 8007578:	e028      	b.n	80075cc <cppLoop+0x314>
 800757a:	bf00      	nop
 800757c:	2003c448 	.word	0x2003c448
 8007580:	20017da0 	.word	0x20017da0
 8007584:	2003c444 	.word	0x2003c444
 8007588:	2003c450 	.word	0x2003c450
 800758c:	2003c44c 	.word	0x2003c44c
 8007590:	2003c458 	.word	0x2003c458
 8007594:	2003c454 	.word	0x2003c454
 8007598:	2003c460 	.word	0x2003c460
 800759c:	2003c45c 	.word	0x2003c45c
 80075a0:	2003c468 	.word	0x2003c468
 80075a4:	2003c464 	.word	0x2003c464
 80075a8:	2003c470 	.word	0x2003c470
 80075ac:	2003c46c 	.word	0x2003c46c
 80075b0:	2003c478 	.word	0x2003c478
 80075b4:	2003c474 	.word	0x2003c474
 80075b8:	2003c480 	.word	0x2003c480
 80075bc:	2003c47c 	.word	0x2003c47c
 80075c0:	2003c488 	.word	0x2003c488
 80075c4:	2003c484 	.word	0x2003c484
 80075c8:	2003c490 	.word	0x2003c490
 80075cc:	48c0      	ldr	r0, [pc, #768]	; (80078d0 <cppLoop+0x618>)
 80075ce:	f7fc f998 	bl	8003902 <_ZN9LineTrace9getMaxDecEv>
 80075d2:	eef0 7a40 	vmov.f32	s15, s0
 80075d6:	4bbf      	ldr	r3, [pc, #764]	; (80078d4 <cppLoop+0x61c>)
 80075d8:	edc3 7a00 	vstr	s15, [r3]
 80075dc:	48be      	ldr	r0, [pc, #760]	; (80078d8 <cppLoop+0x620>)
 80075de:	f00c f874 	bl	80136ca <__cxa_guard_release>

	switch(rotary_switch.getValue()){
 80075e2:	48be      	ldr	r0, [pc, #760]	; (80078dc <cppLoop+0x624>)
 80075e4:	f7fd fb9a 	bl	8004d1c <_ZN12RotarySwitch8getValueEv>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b0f      	cmp	r3, #15
 80075ec:	f201 823f 	bhi.w	8008a6e <cppLoop+0x17b6>
 80075f0:	a201      	add	r2, pc, #4	; (adr r2, 80075f8 <cppLoop+0x340>)
 80075f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f6:	bf00      	nop
 80075f8:	08007639 	.word	0x08007639
 80075fc:	08007a2f 	.word	0x08007a2f
 8007600:	08007ac3 	.word	0x08007ac3
 8007604:	08007c5d 	.word	0x08007c5d
 8007608:	08007d29 	.word	0x08007d29
 800760c:	08007fa9 	.word	0x08007fa9
 8007610:	08008075 	.word	0x08008075
 8007614:	08008307 	.word	0x08008307
 8007618:	0800858d 	.word	0x0800858d
 800761c:	080085b7 	.word	0x080085b7
 8007620:	08008673 	.word	0x08008673
 8007624:	080086e3 	.word	0x080086e3
 8007628:	0800877f 	.word	0x0800877f
 800762c:	08008819 	.word	0x08008819
 8007630:	08008921 	.word	0x08008921
 8007634:	080089c9 	.word	0x080089c9
	case 0:
		led.fullColor('W');
 8007638:	2157      	movs	r1, #87	; 0x57
 800763a:	48a9      	ldr	r0, [pc, #676]	; (80078e0 <cppLoop+0x628>)
 800763c:	f7fa fc5e 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007640:	f7f9 fd2e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007644:	2100      	movs	r1, #0
 8007646:	2000      	movs	r0, #0
 8007648:	f7f9 fd3a 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", line_trace.getKp()*1000);
 800764c:	48a0      	ldr	r0, [pc, #640]	; (80078d0 <cppLoop+0x618>)
 800764e:	f7fc f854 	bl	80036fa <_ZN9LineTrace5getKpEv>
 8007652:	eeb0 7a40 	vmov.f32	s14, s0
 8007656:	eddf 7aa3 	vldr	s15, [pc, #652]	; 80078e4 <cppLoop+0x62c>
 800765a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800765e:	ee17 0a90 	vmov	r0, s15
 8007662:	f7f8 ff89 	bl	8000578 <__aeabi_f2d>
 8007666:	4603      	mov	r3, r0
 8007668:	460c      	mov	r4, r1
 800766a:	461a      	mov	r2, r3
 800766c:	4623      	mov	r3, r4
 800766e:	489e      	ldr	r0, [pc, #632]	; (80078e8 <cppLoop+0x630>)
 8007670:	f7f9 fd50 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007674:	2101      	movs	r1, #1
 8007676:	2000      	movs	r0, #0
 8007678:	f7f9 fd22 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", line_trace.getKi()*100, line_trace.getKd()*10000);
 800767c:	4894      	ldr	r0, [pc, #592]	; (80078d0 <cppLoop+0x618>)
 800767e:	f7fc f84b 	bl	8003718 <_ZN9LineTrace5getKiEv>
 8007682:	eeb0 7a40 	vmov.f32	s14, s0
 8007686:	eddf 7a99 	vldr	s15, [pc, #612]	; 80078ec <cppLoop+0x634>
 800768a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800768e:	ee17 0a90 	vmov	r0, s15
 8007692:	f7f8 ff71 	bl	8000578 <__aeabi_f2d>
 8007696:	4605      	mov	r5, r0
 8007698:	460e      	mov	r6, r1
 800769a:	488d      	ldr	r0, [pc, #564]	; (80078d0 <cppLoop+0x618>)
 800769c:	f7fc f84b 	bl	8003736 <_ZN9LineTrace5getKdEv>
 80076a0:	eeb0 7a40 	vmov.f32	s14, s0
 80076a4:	eddf 7a92 	vldr	s15, [pc, #584]	; 80078f0 <cppLoop+0x638>
 80076a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076ac:	ee17 0a90 	vmov	r0, s15
 80076b0:	f7f8 ff62 	bl	8000578 <__aeabi_f2d>
 80076b4:	4603      	mov	r3, r0
 80076b6:	460c      	mov	r4, r1
 80076b8:	e9cd 3400 	strd	r3, r4, [sp]
 80076bc:	462a      	mov	r2, r5
 80076be:	4633      	mov	r3, r6
 80076c0:	488c      	ldr	r0, [pc, #560]	; (80078f4 <cppLoop+0x63c>)
 80076c2:	f7f9 fd27 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80076c6:	488c      	ldr	r0, [pc, #560]	; (80078f8 <cppLoop+0x640>)
 80076c8:	f7fa fbb4 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80076cc:	4603      	mov	r3, r0
 80076ce:	2b08      	cmp	r3, #8
 80076d0:	bf0c      	ite	eq
 80076d2:	2301      	moveq	r3, #1
 80076d4:	2300      	movne	r3, #0
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d022      	beq.n	8007722 <cppLoop+0x46a>
			led.LR(-1, 1);
 80076dc:	2201      	movs	r2, #1
 80076de:	f04f 31ff 	mov.w	r1, #4294967295
 80076e2:	487f      	ldr	r0, [pc, #508]	; (80078e0 <cppLoop+0x628>)
 80076e4:	f7fa fcc6 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80076e8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80076ec:	f001 fafc 	bl	8008ce8 <HAL_Delay>

			selector++;
 80076f0:	4b82      	ldr	r3, [pc, #520]	; (80078fc <cppLoop+0x644>)
 80076f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	3301      	adds	r3, #1
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	b21a      	sxth	r2, r3
 80076fe:	4b7f      	ldr	r3, [pc, #508]	; (80078fc <cppLoop+0x644>)
 8007700:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8007702:	4b7e      	ldr	r3, [pc, #504]	; (80078fc <cppLoop+0x644>)
 8007704:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007708:	2b02      	cmp	r3, #2
 800770a:	dd02      	ble.n	8007712 <cppLoop+0x45a>
 800770c:	4b7b      	ldr	r3, [pc, #492]	; (80078fc <cppLoop+0x644>)
 800770e:	2200      	movs	r2, #0
 8007710:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8007712:	2200      	movs	r2, #0
 8007714:	f04f 31ff 	mov.w	r1, #4294967295
 8007718:	4871      	ldr	r0, [pc, #452]	; (80078e0 <cppLoop+0x628>)
 800771a:	f7fa fcab 	bl	8002074 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 800771e:	f001 b9a8 	b.w	8008a72 <cppLoop+0x17ba>
		else if(joy_stick.getValue() == JOY_R){
 8007722:	4875      	ldr	r0, [pc, #468]	; (80078f8 <cppLoop+0x640>)
 8007724:	f7fa fb86 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007728:	4603      	mov	r3, r0
 800772a:	2b10      	cmp	r3, #16
 800772c:	bf0c      	ite	eq
 800772e:	2301      	moveq	r3, #1
 8007730:	2300      	movne	r3, #0
 8007732:	b2db      	uxtb	r3, r3
 8007734:	2b00      	cmp	r3, #0
 8007736:	d059      	beq.n	80077ec <cppLoop+0x534>
			led.LR(-1, 1);
 8007738:	2201      	movs	r2, #1
 800773a:	f04f 31ff 	mov.w	r1, #4294967295
 800773e:	4868      	ldr	r0, [pc, #416]	; (80078e0 <cppLoop+0x628>)
 8007740:	f7fa fc98 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007744:	2064      	movs	r0, #100	; 0x64
 8007746:	f001 facf 	bl	8008ce8 <HAL_Delay>
			if(selector == 0){
 800774a:	4b6c      	ldr	r3, [pc, #432]	; (80078fc <cppLoop+0x644>)
 800774c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d113      	bne.n	800777c <cppLoop+0x4c4>
				adj_kp = adj_kp + 0.00001;
 8007754:	4b6a      	ldr	r3, [pc, #424]	; (8007900 <cppLoop+0x648>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4618      	mov	r0, r3
 800775a:	f7f8 ff0d 	bl	8000578 <__aeabi_f2d>
 800775e:	a356      	add	r3, pc, #344	; (adr r3, 80078b8 <cppLoop+0x600>)
 8007760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007764:	f7f8 fdaa 	bl	80002bc <__adddf3>
 8007768:	4603      	mov	r3, r0
 800776a:	460c      	mov	r4, r1
 800776c:	4618      	mov	r0, r3
 800776e:	4621      	mov	r1, r4
 8007770:	f7f9 fa52 	bl	8000c18 <__aeabi_d2f>
 8007774:	4602      	mov	r2, r0
 8007776:	4b62      	ldr	r3, [pc, #392]	; (8007900 <cppLoop+0x648>)
 8007778:	601a      	str	r2, [r3, #0]
 800777a:	e02b      	b.n	80077d4 <cppLoop+0x51c>
			else if(selector == 1){
 800777c:	4b5f      	ldr	r3, [pc, #380]	; (80078fc <cppLoop+0x644>)
 800777e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007782:	2b01      	cmp	r3, #1
 8007784:	d113      	bne.n	80077ae <cppLoop+0x4f6>
				adj_ki = adj_ki + 0.0001;
 8007786:	4b5f      	ldr	r3, [pc, #380]	; (8007904 <cppLoop+0x64c>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4618      	mov	r0, r3
 800778c:	f7f8 fef4 	bl	8000578 <__aeabi_f2d>
 8007790:	a34b      	add	r3, pc, #300	; (adr r3, 80078c0 <cppLoop+0x608>)
 8007792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007796:	f7f8 fd91 	bl	80002bc <__adddf3>
 800779a:	4603      	mov	r3, r0
 800779c:	460c      	mov	r4, r1
 800779e:	4618      	mov	r0, r3
 80077a0:	4621      	mov	r1, r4
 80077a2:	f7f9 fa39 	bl	8000c18 <__aeabi_d2f>
 80077a6:	4602      	mov	r2, r0
 80077a8:	4b56      	ldr	r3, [pc, #344]	; (8007904 <cppLoop+0x64c>)
 80077aa:	601a      	str	r2, [r3, #0]
 80077ac:	e012      	b.n	80077d4 <cppLoop+0x51c>
				adj_kd = adj_kd + 0.000001;
 80077ae:	4b56      	ldr	r3, [pc, #344]	; (8007908 <cppLoop+0x650>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7f8 fee0 	bl	8000578 <__aeabi_f2d>
 80077b8:	a343      	add	r3, pc, #268	; (adr r3, 80078c8 <cppLoop+0x610>)
 80077ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077be:	f7f8 fd7d 	bl	80002bc <__adddf3>
 80077c2:	4603      	mov	r3, r0
 80077c4:	460c      	mov	r4, r1
 80077c6:	4618      	mov	r0, r3
 80077c8:	4621      	mov	r1, r4
 80077ca:	f7f9 fa25 	bl	8000c18 <__aeabi_d2f>
 80077ce:	4602      	mov	r2, r0
 80077d0:	4b4d      	ldr	r3, [pc, #308]	; (8007908 <cppLoop+0x650>)
 80077d2:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80077d4:	2152      	movs	r1, #82	; 0x52
 80077d6:	4842      	ldr	r0, [pc, #264]	; (80078e0 <cppLoop+0x628>)
 80077d8:	f7fa fb90 	bl	8001efc <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80077dc:	2200      	movs	r2, #0
 80077de:	f04f 31ff 	mov.w	r1, #4294967295
 80077e2:	483f      	ldr	r0, [pc, #252]	; (80078e0 <cppLoop+0x628>)
 80077e4:	f7fa fc46 	bl	8002074 <_ZN3LED2LREaa>
		break;
 80077e8:	f001 b943 	b.w	8008a72 <cppLoop+0x17ba>
		else if(joy_stick.getValue() == JOY_L){
 80077ec:	4842      	ldr	r0, [pc, #264]	; (80078f8 <cppLoop+0x640>)
 80077ee:	f7fa fb21 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80077f2:	4603      	mov	r3, r0
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	bf0c      	ite	eq
 80077f8:	2301      	moveq	r3, #1
 80077fa:	2300      	movne	r3, #0
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	2b00      	cmp	r3, #0
 8007800:	f000 8084 	beq.w	800790c <cppLoop+0x654>
			led.LR(-1, 1);
 8007804:	2201      	movs	r2, #1
 8007806:	f04f 31ff 	mov.w	r1, #4294967295
 800780a:	4835      	ldr	r0, [pc, #212]	; (80078e0 <cppLoop+0x628>)
 800780c:	f7fa fc32 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007810:	2064      	movs	r0, #100	; 0x64
 8007812:	f001 fa69 	bl	8008ce8 <HAL_Delay>
			if(selector == 0){
 8007816:	4b39      	ldr	r3, [pc, #228]	; (80078fc <cppLoop+0x644>)
 8007818:	f9b3 3000 	ldrsh.w	r3, [r3]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d113      	bne.n	8007848 <cppLoop+0x590>
				adj_kp = adj_kp - 0.00001;
 8007820:	4b37      	ldr	r3, [pc, #220]	; (8007900 <cppLoop+0x648>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4618      	mov	r0, r3
 8007826:	f7f8 fea7 	bl	8000578 <__aeabi_f2d>
 800782a:	a323      	add	r3, pc, #140	; (adr r3, 80078b8 <cppLoop+0x600>)
 800782c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007830:	f7f8 fd42 	bl	80002b8 <__aeabi_dsub>
 8007834:	4603      	mov	r3, r0
 8007836:	460c      	mov	r4, r1
 8007838:	4618      	mov	r0, r3
 800783a:	4621      	mov	r1, r4
 800783c:	f7f9 f9ec 	bl	8000c18 <__aeabi_d2f>
 8007840:	4602      	mov	r2, r0
 8007842:	4b2f      	ldr	r3, [pc, #188]	; (8007900 <cppLoop+0x648>)
 8007844:	601a      	str	r2, [r3, #0]
 8007846:	e02b      	b.n	80078a0 <cppLoop+0x5e8>
			else if(selector == 1){
 8007848:	4b2c      	ldr	r3, [pc, #176]	; (80078fc <cppLoop+0x644>)
 800784a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800784e:	2b01      	cmp	r3, #1
 8007850:	d113      	bne.n	800787a <cppLoop+0x5c2>
				adj_ki = adj_ki - 0.0001;
 8007852:	4b2c      	ldr	r3, [pc, #176]	; (8007904 <cppLoop+0x64c>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4618      	mov	r0, r3
 8007858:	f7f8 fe8e 	bl	8000578 <__aeabi_f2d>
 800785c:	a318      	add	r3, pc, #96	; (adr r3, 80078c0 <cppLoop+0x608>)
 800785e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007862:	f7f8 fd29 	bl	80002b8 <__aeabi_dsub>
 8007866:	4603      	mov	r3, r0
 8007868:	460c      	mov	r4, r1
 800786a:	4618      	mov	r0, r3
 800786c:	4621      	mov	r1, r4
 800786e:	f7f9 f9d3 	bl	8000c18 <__aeabi_d2f>
 8007872:	4602      	mov	r2, r0
 8007874:	4b23      	ldr	r3, [pc, #140]	; (8007904 <cppLoop+0x64c>)
 8007876:	601a      	str	r2, [r3, #0]
 8007878:	e012      	b.n	80078a0 <cppLoop+0x5e8>
				adj_kd = adj_kd - 0.000001;
 800787a:	4b23      	ldr	r3, [pc, #140]	; (8007908 <cppLoop+0x650>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4618      	mov	r0, r3
 8007880:	f7f8 fe7a 	bl	8000578 <__aeabi_f2d>
 8007884:	a310      	add	r3, pc, #64	; (adr r3, 80078c8 <cppLoop+0x610>)
 8007886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788a:	f7f8 fd15 	bl	80002b8 <__aeabi_dsub>
 800788e:	4603      	mov	r3, r0
 8007890:	460c      	mov	r4, r1
 8007892:	4618      	mov	r0, r3
 8007894:	4621      	mov	r1, r4
 8007896:	f7f9 f9bf 	bl	8000c18 <__aeabi_d2f>
 800789a:	4602      	mov	r2, r0
 800789c:	4b1a      	ldr	r3, [pc, #104]	; (8007908 <cppLoop+0x650>)
 800789e:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80078a0:	2152      	movs	r1, #82	; 0x52
 80078a2:	480f      	ldr	r0, [pc, #60]	; (80078e0 <cppLoop+0x628>)
 80078a4:	f7fa fb2a 	bl	8001efc <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80078a8:	2200      	movs	r2, #0
 80078aa:	f04f 31ff 	mov.w	r1, #4294967295
 80078ae:	480c      	ldr	r0, [pc, #48]	; (80078e0 <cppLoop+0x628>)
 80078b0:	f7fa fbe0 	bl	8002074 <_ZN3LED2LREaa>
		break;
 80078b4:	f001 b8dd 	b.w	8008a72 <cppLoop+0x17ba>
 80078b8:	88e368f1 	.word	0x88e368f1
 80078bc:	3ee4f8b5 	.word	0x3ee4f8b5
 80078c0:	eb1c432d 	.word	0xeb1c432d
 80078c4:	3f1a36e2 	.word	0x3f1a36e2
 80078c8:	a0b5ed8d 	.word	0xa0b5ed8d
 80078cc:	3eb0c6f7 	.word	0x3eb0c6f7
 80078d0:	20017da0 	.word	0x20017da0
 80078d4:	2003c48c 	.word	0x2003c48c
 80078d8:	2003c490 	.word	0x2003c490
 80078dc:	200005c4 	.word	0x200005c4
 80078e0:	200005cc 	.word	0x200005cc
 80078e4:	447a0000 	.word	0x447a0000
 80078e8:	08018f90 	.word	0x08018f90
 80078ec:	42c80000 	.word	0x42c80000
 80078f0:	461c4000 	.word	0x461c4000
 80078f4:	08018f9c 	.word	0x08018f9c
 80078f8:	200005c0 	.word	0x200005c0
 80078fc:	2003c43c 	.word	0x2003c43c
 8007900:	2003c444 	.word	0x2003c444
 8007904:	2003c44c 	.word	0x2003c44c
 8007908:	2003c454 	.word	0x2003c454
		else if(joy_stick.getValue() == JOY_D){
 800790c:	48c4      	ldr	r0, [pc, #784]	; (8007c20 <cppLoop+0x968>)
 800790e:	f7fa fa91 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007912:	4603      	mov	r3, r0
 8007914:	2b04      	cmp	r3, #4
 8007916:	bf0c      	ite	eq
 8007918:	2301      	moveq	r3, #1
 800791a:	2300      	movne	r3, #0
 800791c:	b2db      	uxtb	r3, r3
 800791e:	2b00      	cmp	r3, #0
 8007920:	d03d      	beq.n	800799e <cppLoop+0x6e6>
			led.LR(-1, 1);
 8007922:	2201      	movs	r2, #1
 8007924:	f04f 31ff 	mov.w	r1, #4294967295
 8007928:	48be      	ldr	r0, [pc, #760]	; (8007c24 <cppLoop+0x96c>)
 800792a:	f7fa fba3 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 800792e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007932:	f001 f9d9 	bl	8008ce8 <HAL_Delay>
			sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 8007936:	f107 030c 	add.w	r3, r7, #12
 800793a:	2201      	movs	r2, #1
 800793c:	49ba      	ldr	r1, [pc, #744]	; (8007c28 <cppLoop+0x970>)
 800793e:	48bb      	ldr	r0, [pc, #748]	; (8007c2c <cppLoop+0x974>)
 8007940:	f7f9 fec6 	bl	80016d0 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 8007944:	f107 0308 	add.w	r3, r7, #8
 8007948:	2201      	movs	r2, #1
 800794a:	49b9      	ldr	r1, [pc, #740]	; (8007c30 <cppLoop+0x978>)
 800794c:	48b7      	ldr	r0, [pc, #732]	; (8007c2c <cppLoop+0x974>)
 800794e:	f7f9 febf 	bl	80016d0 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8007952:	1d3b      	adds	r3, r7, #4
 8007954:	2201      	movs	r2, #1
 8007956:	49b7      	ldr	r1, [pc, #732]	; (8007c34 <cppLoop+0x97c>)
 8007958:	48b4      	ldr	r0, [pc, #720]	; (8007c2c <cppLoop+0x974>)
 800795a:	f7f9 feb9 	bl	80016d0 <sd_read_array_float>
			line_trace.setGain(temp_kp, temp_ki, temp_kd);
 800795e:	edd7 7a03 	vldr	s15, [r7, #12]
 8007962:	ed97 7a02 	vldr	s14, [r7, #8]
 8007966:	edd7 6a01 	vldr	s13, [r7, #4]
 800796a:	eeb0 1a66 	vmov.f32	s2, s13
 800796e:	eef0 0a47 	vmov.f32	s1, s14
 8007972:	eeb0 0a67 	vmov.f32	s0, s15
 8007976:	48b0      	ldr	r0, [pc, #704]	; (8007c38 <cppLoop+0x980>)
 8007978:	f7fb fea6 	bl	80036c8 <_ZN9LineTrace7setGainEfff>
			adj_kp = temp_kp;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	4aaf      	ldr	r2, [pc, #700]	; (8007c3c <cppLoop+0x984>)
 8007980:	6013      	str	r3, [r2, #0]
			adj_ki = temp_kp;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	4aae      	ldr	r2, [pc, #696]	; (8007c40 <cppLoop+0x988>)
 8007986:	6013      	str	r3, [r2, #0]
			adj_kd = temp_kp;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	4aae      	ldr	r2, [pc, #696]	; (8007c44 <cppLoop+0x98c>)
 800798c:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 800798e:	2200      	movs	r2, #0
 8007990:	f04f 31ff 	mov.w	r1, #4294967295
 8007994:	48a3      	ldr	r0, [pc, #652]	; (8007c24 <cppLoop+0x96c>)
 8007996:	f7fa fb6d 	bl	8002074 <_ZN3LED2LREaa>
		break;
 800799a:	f001 b86a 	b.w	8008a72 <cppLoop+0x17ba>
		else if(joy_stick.getValue() == JOY_C){
 800799e:	48a0      	ldr	r0, [pc, #640]	; (8007c20 <cppLoop+0x968>)
 80079a0:	f7fa fa48 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80079a4:	4603      	mov	r3, r0
 80079a6:	2b02      	cmp	r3, #2
 80079a8:	bf0c      	ite	eq
 80079aa:	2301      	moveq	r3, #1
 80079ac:	2300      	movne	r3, #0
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	f001 805e 	beq.w	8008a72 <cppLoop+0x17ba>
			led.LR(-1, 1);
 80079b6:	2201      	movs	r2, #1
 80079b8:	f04f 31ff 	mov.w	r1, #4294967295
 80079bc:	4899      	ldr	r0, [pc, #612]	; (8007c24 <cppLoop+0x96c>)
 80079be:	f7fa fb59 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80079c2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80079c6:	f001 f98f 	bl	8008ce8 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 80079ca:	2300      	movs	r3, #0
 80079cc:	9300      	str	r3, [sp, #0]
 80079ce:	4b9b      	ldr	r3, [pc, #620]	; (8007c3c <cppLoop+0x984>)
 80079d0:	2201      	movs	r2, #1
 80079d2:	4995      	ldr	r1, [pc, #596]	; (8007c28 <cppLoop+0x970>)
 80079d4:	4895      	ldr	r0, [pc, #596]	; (8007c2c <cppLoop+0x974>)
 80079d6:	f7f9 fe15 	bl	8001604 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 80079da:	2300      	movs	r3, #0
 80079dc:	9300      	str	r3, [sp, #0]
 80079de:	4b98      	ldr	r3, [pc, #608]	; (8007c40 <cppLoop+0x988>)
 80079e0:	2201      	movs	r2, #1
 80079e2:	4993      	ldr	r1, [pc, #588]	; (8007c30 <cppLoop+0x978>)
 80079e4:	4891      	ldr	r0, [pc, #580]	; (8007c2c <cppLoop+0x974>)
 80079e6:	f7f9 fe0d 	bl	8001604 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 80079ea:	2300      	movs	r3, #0
 80079ec:	9300      	str	r3, [sp, #0]
 80079ee:	4b95      	ldr	r3, [pc, #596]	; (8007c44 <cppLoop+0x98c>)
 80079f0:	2201      	movs	r2, #1
 80079f2:	4990      	ldr	r1, [pc, #576]	; (8007c34 <cppLoop+0x97c>)
 80079f4:	488d      	ldr	r0, [pc, #564]	; (8007c2c <cppLoop+0x974>)
 80079f6:	f7f9 fe05 	bl	8001604 <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 80079fa:	4b90      	ldr	r3, [pc, #576]	; (8007c3c <cppLoop+0x984>)
 80079fc:	edd3 7a00 	vldr	s15, [r3]
 8007a00:	4b8f      	ldr	r3, [pc, #572]	; (8007c40 <cppLoop+0x988>)
 8007a02:	ed93 7a00 	vldr	s14, [r3]
 8007a06:	4b8f      	ldr	r3, [pc, #572]	; (8007c44 <cppLoop+0x98c>)
 8007a08:	edd3 6a00 	vldr	s13, [r3]
 8007a0c:	eeb0 1a66 	vmov.f32	s2, s13
 8007a10:	eef0 0a47 	vmov.f32	s1, s14
 8007a14:	eeb0 0a67 	vmov.f32	s0, s15
 8007a18:	4887      	ldr	r0, [pc, #540]	; (8007c38 <cppLoop+0x980>)
 8007a1a:	f7fb fe55 	bl	80036c8 <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f04f 31ff 	mov.w	r1, #4294967295
 8007a24:	487f      	ldr	r0, [pc, #508]	; (8007c24 <cppLoop+0x96c>)
 8007a26:	f7fa fb25 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8007a2a:	f001 b822 	b.w	8008a72 <cppLoop+0x17ba>

	case 1:
		led.fullColor('C');
 8007a2e:	2143      	movs	r1, #67	; 0x43
 8007a30:	487c      	ldr	r0, [pc, #496]	; (8007c24 <cppLoop+0x96c>)
 8007a32:	f7fa fa63 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007a36:	f7f9 fb33 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007a3a:	2100      	movs	r1, #0
 8007a3c:	2000      	movs	r0, #0
 8007a3e:	f7f9 fb3f 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 8007a42:	4881      	ldr	r0, [pc, #516]	; (8007c48 <cppLoop+0x990>)
 8007a44:	f7f9 fb66 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007a48:	2101      	movs	r1, #1
 8007a4a:	2000      	movs	r0, #0
 8007a4c:	f7f9 fb38 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_velocity);
 8007a50:	4b7e      	ldr	r3, [pc, #504]	; (8007c4c <cppLoop+0x994>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4618      	mov	r0, r3
 8007a56:	f7f8 fd8f 	bl	8000578 <__aeabi_f2d>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	460c      	mov	r4, r1
 8007a5e:	461a      	mov	r2, r3
 8007a60:	4623      	mov	r3, r4
 8007a62:	487b      	ldr	r0, [pc, #492]	; (8007c50 <cppLoop+0x998>)
 8007a64:	f7f9 fb56 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007a68:	486d      	ldr	r0, [pc, #436]	; (8007c20 <cppLoop+0x968>)
 8007a6a:	f7fa f9e3 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	2b02      	cmp	r3, #2
 8007a72:	bf0c      	ite	eq
 8007a74:	2301      	moveq	r3, #1
 8007a76:	2300      	movne	r3, #0
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	f000 87fb 	beq.w	8008a76 <cppLoop+0x17be>
			HAL_Delay(500);
 8007a80:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007a84:	f001 f930 	bl	8008ce8 <HAL_Delay>

			line_trace.setTargetVelocity(adj_velocity);
 8007a88:	4b70      	ldr	r3, [pc, #448]	; (8007c4c <cppLoop+0x994>)
 8007a8a:	edd3 7a00 	vldr	s15, [r3]
 8007a8e:	eeb0 0a67 	vmov.f32	s0, s15
 8007a92:	4869      	ldr	r0, [pc, #420]	; (8007c38 <cppLoop+0x980>)
 8007a94:	f7fb fe6d 	bl	8003772 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 8007a98:	f04f 32ff 	mov.w	r2, #4294967295
 8007a9c:	2101      	movs	r1, #1
 8007a9e:	4861      	ldr	r0, [pc, #388]	; (8007c24 <cppLoop+0x96c>)
 8007aa0:	f7fa fae8 	bl	8002074 <_ZN3LED2LREaa>

			line_trace.setMode(FIRST_RUNNING);
 8007aa4:	2100      	movs	r1, #0
 8007aa6:	4864      	ldr	r0, [pc, #400]	; (8007c38 <cppLoop+0x980>)
 8007aa8:	f7fc f9d8 	bl	8003e5c <_ZN9LineTrace7setModeEs>
			line_trace.running();
 8007aac:	4862      	ldr	r0, [pc, #392]	; (8007c38 <cppLoop+0x980>)
 8007aae:	f7fc f8d7 	bl	8003c60 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8007ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ab6:	2100      	movs	r1, #0
 8007ab8:	485a      	ldr	r0, [pc, #360]	; (8007c24 <cppLoop+0x96c>)
 8007aba:	f7fa fadb 	bl	8002074 <_ZN3LED2LREaa>
		}

		break;
 8007abe:	f000 bfda 	b.w	8008a76 <cppLoop+0x17be>

	case 2:
		led.fullColor('B');
 8007ac2:	2142      	movs	r1, #66	; 0x42
 8007ac4:	4857      	ldr	r0, [pc, #348]	; (8007c24 <cppLoop+0x96c>)
 8007ac6:	f7fa fa19 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007aca:	f7f9 fae9 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007ace:	2100      	movs	r1, #0
 8007ad0:	2000      	movs	r0, #0
 8007ad2:	f7f9 faf5 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 8007ad6:	485c      	ldr	r0, [pc, #368]	; (8007c48 <cppLoop+0x990>)
 8007ad8:	f7f9 fb1c 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007adc:	2101      	movs	r1, #1
 8007ade:	2000      	movs	r0, #0
 8007ae0:	f7f9 faee 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", adj_velocity);
 8007ae4:	4b59      	ldr	r3, [pc, #356]	; (8007c4c <cppLoop+0x994>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f7f8 fd45 	bl	8000578 <__aeabi_f2d>
 8007aee:	4603      	mov	r3, r0
 8007af0:	460c      	mov	r4, r1
 8007af2:	461a      	mov	r2, r3
 8007af4:	4623      	mov	r3, r4
 8007af6:	4857      	ldr	r0, [pc, #348]	; (8007c54 <cppLoop+0x99c>)
 8007af8:	f7f9 fb0c 	bl	8001114 <lcd_printf>


		if(joy_stick.getValue() == JOY_R){
 8007afc:	4848      	ldr	r0, [pc, #288]	; (8007c20 <cppLoop+0x968>)
 8007afe:	f7fa f999 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b10      	cmp	r3, #16
 8007b06:	bf0c      	ite	eq
 8007b08:	2301      	moveq	r3, #1
 8007b0a:	2300      	movne	r3, #0
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d023      	beq.n	8007b5a <cppLoop+0x8a2>
			led.LR(-1, 1);
 8007b12:	2201      	movs	r2, #1
 8007b14:	f04f 31ff 	mov.w	r1, #4294967295
 8007b18:	4842      	ldr	r0, [pc, #264]	; (8007c24 <cppLoop+0x96c>)
 8007b1a:	f7fa faab 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007b1e:	2064      	movs	r0, #100	; 0x64
 8007b20:	f001 f8e2 	bl	8008ce8 <HAL_Delay>

			adj_velocity = adj_velocity + 0.1;
 8007b24:	4b49      	ldr	r3, [pc, #292]	; (8007c4c <cppLoop+0x994>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f7f8 fd25 	bl	8000578 <__aeabi_f2d>
 8007b2e:	a33a      	add	r3, pc, #232	; (adr r3, 8007c18 <cppLoop+0x960>)
 8007b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b34:	f7f8 fbc2 	bl	80002bc <__adddf3>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	460c      	mov	r4, r1
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	4621      	mov	r1, r4
 8007b40:	f7f9 f86a 	bl	8000c18 <__aeabi_d2f>
 8007b44:	4602      	mov	r2, r0
 8007b46:	4b41      	ldr	r3, [pc, #260]	; (8007c4c <cppLoop+0x994>)
 8007b48:	601a      	str	r2, [r3, #0]

			led.LR(-1, 0);
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8007b50:	4834      	ldr	r0, [pc, #208]	; (8007c24 <cppLoop+0x96c>)
 8007b52:	f7fa fa8f 	bl	8002074 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
			line_trace.setTargetVelocity(adj_velocity);

			led.LR(-1, 0);
		}
		break;
 8007b56:	f000 bf90 	b.w	8008a7a <cppLoop+0x17c2>
		else if(joy_stick.getValue() == JOY_L){
 8007b5a:	4831      	ldr	r0, [pc, #196]	; (8007c20 <cppLoop+0x968>)
 8007b5c:	f7fa f96a 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007b60:	4603      	mov	r3, r0
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	bf0c      	ite	eq
 8007b66:	2301      	moveq	r3, #1
 8007b68:	2300      	movne	r3, #0
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d023      	beq.n	8007bb8 <cppLoop+0x900>
			led.LR(-1, 1);
 8007b70:	2201      	movs	r2, #1
 8007b72:	f04f 31ff 	mov.w	r1, #4294967295
 8007b76:	482b      	ldr	r0, [pc, #172]	; (8007c24 <cppLoop+0x96c>)
 8007b78:	f7fa fa7c 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007b7c:	2064      	movs	r0, #100	; 0x64
 8007b7e:	f001 f8b3 	bl	8008ce8 <HAL_Delay>
			adj_velocity = adj_velocity - 0.1;
 8007b82:	4b32      	ldr	r3, [pc, #200]	; (8007c4c <cppLoop+0x994>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4618      	mov	r0, r3
 8007b88:	f7f8 fcf6 	bl	8000578 <__aeabi_f2d>
 8007b8c:	a322      	add	r3, pc, #136	; (adr r3, 8007c18 <cppLoop+0x960>)
 8007b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b92:	f7f8 fb91 	bl	80002b8 <__aeabi_dsub>
 8007b96:	4603      	mov	r3, r0
 8007b98:	460c      	mov	r4, r1
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	4621      	mov	r1, r4
 8007b9e:	f7f9 f83b 	bl	8000c18 <__aeabi_d2f>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	4b29      	ldr	r3, [pc, #164]	; (8007c4c <cppLoop+0x994>)
 8007ba6:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8007ba8:	2200      	movs	r2, #0
 8007baa:	f04f 31ff 	mov.w	r1, #4294967295
 8007bae:	481d      	ldr	r0, [pc, #116]	; (8007c24 <cppLoop+0x96c>)
 8007bb0:	f7fa fa60 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8007bb4:	f000 bf61 	b.w	8008a7a <cppLoop+0x17c2>
		else if(joy_stick.getValue() == JOY_C){
 8007bb8:	4819      	ldr	r0, [pc, #100]	; (8007c20 <cppLoop+0x968>)
 8007bba:	f7fa f93b 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	2b02      	cmp	r3, #2
 8007bc2:	bf0c      	ite	eq
 8007bc4:	2301      	moveq	r3, #1
 8007bc6:	2300      	movne	r3, #0
 8007bc8:	b2db      	uxtb	r3, r3
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	f000 8755 	beq.w	8008a7a <cppLoop+0x17c2>
			led.LR(-1, 1);
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	f04f 31ff 	mov.w	r1, #4294967295
 8007bd6:	4813      	ldr	r0, [pc, #76]	; (8007c24 <cppLoop+0x96c>)
 8007bd8:	f7fa fa4c 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007bdc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007be0:	f001 f882 	bl	8008ce8 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
 8007be4:	2300      	movs	r3, #0
 8007be6:	9300      	str	r3, [sp, #0]
 8007be8:	4b18      	ldr	r3, [pc, #96]	; (8007c4c <cppLoop+0x994>)
 8007bea:	2201      	movs	r2, #1
 8007bec:	491a      	ldr	r1, [pc, #104]	; (8007c58 <cppLoop+0x9a0>)
 8007bee:	480f      	ldr	r0, [pc, #60]	; (8007c2c <cppLoop+0x974>)
 8007bf0:	f7f9 fd08 	bl	8001604 <sd_write_array_float>
			line_trace.setTargetVelocity(adj_velocity);
 8007bf4:	4b15      	ldr	r3, [pc, #84]	; (8007c4c <cppLoop+0x994>)
 8007bf6:	edd3 7a00 	vldr	s15, [r3]
 8007bfa:	eeb0 0a67 	vmov.f32	s0, s15
 8007bfe:	480e      	ldr	r0, [pc, #56]	; (8007c38 <cppLoop+0x980>)
 8007c00:	f7fb fdb7 	bl	8003772 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(-1, 0);
 8007c04:	2200      	movs	r2, #0
 8007c06:	f04f 31ff 	mov.w	r1, #4294967295
 8007c0a:	4806      	ldr	r0, [pc, #24]	; (8007c24 <cppLoop+0x96c>)
 8007c0c:	f7fa fa32 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8007c10:	f000 bf33 	b.w	8008a7a <cppLoop+0x17c2>
 8007c14:	f3af 8000 	nop.w
 8007c18:	9999999a 	.word	0x9999999a
 8007c1c:	3fb99999 	.word	0x3fb99999
 8007c20:	200005c0 	.word	0x200005c0
 8007c24:	200005cc 	.word	0x200005cc
 8007c28:	08018fac 	.word	0x08018fac
 8007c2c:	08018fb4 	.word	0x08018fb4
 8007c30:	08018fbc 	.word	0x08018fbc
 8007c34:	08018fc4 	.word	0x08018fc4
 8007c38:	20017da0 	.word	0x20017da0
 8007c3c:	2003c444 	.word	0x2003c444
 8007c40:	2003c44c 	.word	0x2003c44c
 8007c44:	2003c454 	.word	0x2003c454
 8007c48:	08018fcc 	.word	0x08018fcc
 8007c4c:	2003c45c 	.word	0x2003c45c
 8007c50:	08018fd8 	.word	0x08018fd8
 8007c54:	08018fe4 	.word	0x08018fe4
 8007c58:	08018ff0 	.word	0x08018ff0

	case 3:
		led.fullColor('Y');
 8007c5c:	2159      	movs	r1, #89	; 0x59
 8007c5e:	48aa      	ldr	r0, [pc, #680]	; (8007f08 <cppLoop+0xc50>)
 8007c60:	f7fa f94c 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007c64:	f7f9 fa1c 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007c68:	2100      	movs	r1, #0
 8007c6a:	2000      	movs	r0, #0
 8007c6c:	f7f9 fa28 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", adj_max_velocity);
 8007c70:	4ba6      	ldr	r3, [pc, #664]	; (8007f0c <cppLoop+0xc54>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4618      	mov	r0, r3
 8007c76:	f7f8 fc7f 	bl	8000578 <__aeabi_f2d>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	460c      	mov	r4, r1
 8007c7e:	461a      	mov	r2, r3
 8007c80:	4623      	mov	r3, r4
 8007c82:	48a3      	ldr	r0, [pc, #652]	; (8007f10 <cppLoop+0xc58>)
 8007c84:	f7f9 fa46 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007c88:	2101      	movs	r1, #1
 8007c8a:	2000      	movs	r0, #0
 8007c8c:	f7f9 fa18 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity);
 8007c90:	4ba0      	ldr	r3, [pc, #640]	; (8007f14 <cppLoop+0xc5c>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4618      	mov	r0, r3
 8007c96:	f7f8 fc6f 	bl	8000578 <__aeabi_f2d>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	460c      	mov	r4, r1
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	4623      	mov	r3, r4
 8007ca2:	489d      	ldr	r0, [pc, #628]	; (8007f18 <cppLoop+0xc60>)
 8007ca4:	f7f9 fa36 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007ca8:	489c      	ldr	r0, [pc, #624]	; (8007f1c <cppLoop+0xc64>)
 8007caa:	f7fa f8c3 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	2b02      	cmp	r3, #2
 8007cb2:	bf0c      	ite	eq
 8007cb4:	2301      	moveq	r3, #1
 8007cb6:	2300      	movne	r3, #0
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	f000 86df 	beq.w	8008a7e <cppLoop+0x17c6>
			HAL_Delay(500);
 8007cc0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007cc4:	f001 f810 	bl	8008ce8 <HAL_Delay>

			led.LR(1, -1);
 8007cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8007ccc:	2101      	movs	r1, #1
 8007cce:	488e      	ldr	r0, [pc, #568]	; (8007f08 <cppLoop+0xc50>)
 8007cd0:	f7fa f9d0 	bl	8002074 <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 8007cd4:	2101      	movs	r1, #1
 8007cd6:	4892      	ldr	r0, [pc, #584]	; (8007f20 <cppLoop+0xc68>)
 8007cd8:	f7fc f8c0 	bl	8003e5c <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 8007cdc:	4b8d      	ldr	r3, [pc, #564]	; (8007f14 <cppLoop+0xc5c>)
 8007cde:	edd3 7a00 	vldr	s15, [r3]
 8007ce2:	eeb0 0a67 	vmov.f32	s0, s15
 8007ce6:	488e      	ldr	r0, [pc, #568]	; (8007f20 <cppLoop+0xc68>)
 8007ce8:	f7fb fd43 	bl	8003772 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8007cec:	4b87      	ldr	r3, [pc, #540]	; (8007f0c <cppLoop+0xc54>)
 8007cee:	edd3 7a00 	vldr	s15, [r3]
 8007cf2:	eeb0 0a67 	vmov.f32	s0, s15
 8007cf6:	488a      	ldr	r0, [pc, #552]	; (8007f20 <cppLoop+0xc68>)
 8007cf8:	f7fb fd4a 	bl	8003790 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8007cfc:	4b85      	ldr	r3, [pc, #532]	; (8007f14 <cppLoop+0xc5c>)
 8007cfe:	edd3 7a00 	vldr	s15, [r3]
 8007d02:	eeb0 0a67 	vmov.f32	s0, s15
 8007d06:	4886      	ldr	r0, [pc, #536]	; (8007f20 <cppLoop+0xc68>)
 8007d08:	f7fb fd61 	bl	80037ce <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabele();
 8007d0c:	4884      	ldr	r0, [pc, #528]	; (8007f20 <cppLoop+0xc68>)
 8007d0e:	f7fb f887 	bl	8002e20 <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 8007d12:	4883      	ldr	r0, [pc, #524]	; (8007f20 <cppLoop+0xc68>)
 8007d14:	f7fb ffa4 	bl	8003c60 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8007d18:	f04f 32ff 	mov.w	r2, #4294967295
 8007d1c:	2100      	movs	r1, #0
 8007d1e:	487a      	ldr	r0, [pc, #488]	; (8007f08 <cppLoop+0xc50>)
 8007d20:	f7fa f9a8 	bl	8002074 <_ZN3LED2LREaa>
		}

		break;
 8007d24:	f000 beab 	b.w	8008a7e <cppLoop+0x17c6>

	case 4:
		led.fullColor('G');
 8007d28:	2147      	movs	r1, #71	; 0x47
 8007d2a:	4877      	ldr	r0, [pc, #476]	; (8007f08 <cppLoop+0xc50>)
 8007d2c:	f7fa f8e6 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007d30:	f7f9 f9b6 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007d34:	2100      	movs	r1, #0
 8007d36:	2000      	movs	r0, #0
 8007d38:	f7f9 f9c2 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", line_trace.getMaxVelocity());
 8007d3c:	4878      	ldr	r0, [pc, #480]	; (8007f20 <cppLoop+0xc68>)
 8007d3e:	f7fb fd75 	bl	800382c <_ZN9LineTrace14getMaxVelocityEv>
 8007d42:	ee10 3a10 	vmov	r3, s0
 8007d46:	4618      	mov	r0, r3
 8007d48:	f7f8 fc16 	bl	8000578 <__aeabi_f2d>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	460c      	mov	r4, r1
 8007d50:	461a      	mov	r2, r3
 8007d52:	4623      	mov	r3, r4
 8007d54:	486e      	ldr	r0, [pc, #440]	; (8007f10 <cppLoop+0xc58>)
 8007d56:	f7f9 f9dd 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007d5a:	2101      	movs	r1, #1
 8007d5c:	2000      	movs	r0, #0
 8007d5e:	f7f9 f9af 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity());
 8007d62:	486f      	ldr	r0, [pc, #444]	; (8007f20 <cppLoop+0xc68>)
 8007d64:	f7fb fd81 	bl	800386a <_ZN9LineTrace14getMinVelocityEv>
 8007d68:	ee10 3a10 	vmov	r3, s0
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f7f8 fc03 	bl	8000578 <__aeabi_f2d>
 8007d72:	4603      	mov	r3, r0
 8007d74:	460c      	mov	r4, r1
 8007d76:	461a      	mov	r2, r3
 8007d78:	4623      	mov	r3, r4
 8007d7a:	486a      	ldr	r0, [pc, #424]	; (8007f24 <cppLoop+0xc6c>)
 8007d7c:	f7f9 f9ca 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8007d80:	4866      	ldr	r0, [pc, #408]	; (8007f1c <cppLoop+0xc64>)
 8007d82:	f7fa f857 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007d86:	4603      	mov	r3, r0
 8007d88:	2b08      	cmp	r3, #8
 8007d8a:	bf0c      	ite	eq
 8007d8c:	2301      	moveq	r3, #1
 8007d8e:	2300      	movne	r3, #0
 8007d90:	b2db      	uxtb	r3, r3
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d022      	beq.n	8007ddc <cppLoop+0xb24>
			led.LR(-1, 1);
 8007d96:	2201      	movs	r2, #1
 8007d98:	f04f 31ff 	mov.w	r1, #4294967295
 8007d9c:	485a      	ldr	r0, [pc, #360]	; (8007f08 <cppLoop+0xc50>)
 8007d9e:	f7fa f969 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007da2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007da6:	f000 ff9f 	bl	8008ce8 <HAL_Delay>

			selector_vel++;
 8007daa:	4b5f      	ldr	r3, [pc, #380]	; (8007f28 <cppLoop+0xc70>)
 8007dac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	3301      	adds	r3, #1
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	b21a      	sxth	r2, r3
 8007db8:	4b5b      	ldr	r3, [pc, #364]	; (8007f28 <cppLoop+0xc70>)
 8007dba:	801a      	strh	r2, [r3, #0]
			if(selector_vel >= 2) selector_vel = 0;
 8007dbc:	4b5a      	ldr	r3, [pc, #360]	; (8007f28 <cppLoop+0xc70>)
 8007dbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	dd02      	ble.n	8007dcc <cppLoop+0xb14>
 8007dc6:	4b58      	ldr	r3, [pc, #352]	; (8007f28 <cppLoop+0xc70>)
 8007dc8:	2200      	movs	r2, #0
 8007dca:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8007dcc:	2200      	movs	r2, #0
 8007dce:	f04f 31ff 	mov.w	r1, #4294967295
 8007dd2:	484d      	ldr	r0, [pc, #308]	; (8007f08 <cppLoop+0xc50>)
 8007dd4:	f7fa f94e 	bl	8002074 <_ZN3LED2LREaa>
			line_trace.setMaxVelocity(adj_max_velocity);
			line_trace.setMinVelocity(adj_min_velocity);

			led.LR(-1, 0);
		}
		break;
 8007dd8:	f000 be53 	b.w	8008a82 <cppLoop+0x17ca>
		else if(joy_stick.getValue() == JOY_R){
 8007ddc:	484f      	ldr	r0, [pc, #316]	; (8007f1c <cppLoop+0xc64>)
 8007dde:	f7fa f829 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007de2:	4603      	mov	r3, r0
 8007de4:	2b10      	cmp	r3, #16
 8007de6:	bf0c      	ite	eq
 8007de8:	2301      	moveq	r3, #1
 8007dea:	2300      	movne	r3, #0
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d03c      	beq.n	8007e6c <cppLoop+0xbb4>
			led.LR(-1, 1);
 8007df2:	2201      	movs	r2, #1
 8007df4:	f04f 31ff 	mov.w	r1, #4294967295
 8007df8:	4843      	ldr	r0, [pc, #268]	; (8007f08 <cppLoop+0xc50>)
 8007dfa:	f7fa f93b 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007dfe:	2064      	movs	r0, #100	; 0x64
 8007e00:	f000 ff72 	bl	8008ce8 <HAL_Delay>
			if(selector_vel == 0)
 8007e04:	4b48      	ldr	r3, [pc, #288]	; (8007f28 <cppLoop+0xc70>)
 8007e06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d113      	bne.n	8007e36 <cppLoop+0xb7e>
				adj_max_velocity = adj_max_velocity + 0.1;
 8007e0e:	4b3f      	ldr	r3, [pc, #252]	; (8007f0c <cppLoop+0xc54>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7f8 fbb0 	bl	8000578 <__aeabi_f2d>
 8007e18:	a339      	add	r3, pc, #228	; (adr r3, 8007f00 <cppLoop+0xc48>)
 8007e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e1e:	f7f8 fa4d 	bl	80002bc <__adddf3>
 8007e22:	4603      	mov	r3, r0
 8007e24:	460c      	mov	r4, r1
 8007e26:	4618      	mov	r0, r3
 8007e28:	4621      	mov	r1, r4
 8007e2a:	f7f8 fef5 	bl	8000c18 <__aeabi_d2f>
 8007e2e:	4602      	mov	r2, r0
 8007e30:	4b36      	ldr	r3, [pc, #216]	; (8007f0c <cppLoop+0xc54>)
 8007e32:	601a      	str	r2, [r3, #0]
 8007e34:	e012      	b.n	8007e5c <cppLoop+0xba4>
				adj_min_velocity = adj_min_velocity + 0.1;
 8007e36:	4b37      	ldr	r3, [pc, #220]	; (8007f14 <cppLoop+0xc5c>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f7f8 fb9c 	bl	8000578 <__aeabi_f2d>
 8007e40:	a32f      	add	r3, pc, #188	; (adr r3, 8007f00 <cppLoop+0xc48>)
 8007e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e46:	f7f8 fa39 	bl	80002bc <__adddf3>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	460c      	mov	r4, r1
 8007e4e:	4618      	mov	r0, r3
 8007e50:	4621      	mov	r1, r4
 8007e52:	f7f8 fee1 	bl	8000c18 <__aeabi_d2f>
 8007e56:	4602      	mov	r2, r0
 8007e58:	4b2e      	ldr	r3, [pc, #184]	; (8007f14 <cppLoop+0xc5c>)
 8007e5a:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f04f 31ff 	mov.w	r1, #4294967295
 8007e62:	4829      	ldr	r0, [pc, #164]	; (8007f08 <cppLoop+0xc50>)
 8007e64:	f7fa f906 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8007e68:	f000 be0b 	b.w	8008a82 <cppLoop+0x17ca>
		else if(joy_stick.getValue() == JOY_L){
 8007e6c:	482b      	ldr	r0, [pc, #172]	; (8007f1c <cppLoop+0xc64>)
 8007e6e:	f7f9 ffe1 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007e72:	4603      	mov	r3, r0
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	bf0c      	ite	eq
 8007e78:	2301      	moveq	r3, #1
 8007e7a:	2300      	movne	r3, #0
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d054      	beq.n	8007f2c <cppLoop+0xc74>
			led.LR(-1, 1);
 8007e82:	2201      	movs	r2, #1
 8007e84:	f04f 31ff 	mov.w	r1, #4294967295
 8007e88:	481f      	ldr	r0, [pc, #124]	; (8007f08 <cppLoop+0xc50>)
 8007e8a:	f7fa f8f3 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007e8e:	2064      	movs	r0, #100	; 0x64
 8007e90:	f000 ff2a 	bl	8008ce8 <HAL_Delay>
			if(selector_vel == 0)
 8007e94:	4b24      	ldr	r3, [pc, #144]	; (8007f28 <cppLoop+0xc70>)
 8007e96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d113      	bne.n	8007ec6 <cppLoop+0xc0e>
				adj_max_velocity = adj_max_velocity - 0.1;
 8007e9e:	4b1b      	ldr	r3, [pc, #108]	; (8007f0c <cppLoop+0xc54>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7f8 fb68 	bl	8000578 <__aeabi_f2d>
 8007ea8:	a315      	add	r3, pc, #84	; (adr r3, 8007f00 <cppLoop+0xc48>)
 8007eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eae:	f7f8 fa03 	bl	80002b8 <__aeabi_dsub>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	460c      	mov	r4, r1
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	4621      	mov	r1, r4
 8007eba:	f7f8 fead 	bl	8000c18 <__aeabi_d2f>
 8007ebe:	4602      	mov	r2, r0
 8007ec0:	4b12      	ldr	r3, [pc, #72]	; (8007f0c <cppLoop+0xc54>)
 8007ec2:	601a      	str	r2, [r3, #0]
 8007ec4:	e012      	b.n	8007eec <cppLoop+0xc34>
				adj_min_velocity = adj_min_velocity - 0.1;
 8007ec6:	4b13      	ldr	r3, [pc, #76]	; (8007f14 <cppLoop+0xc5c>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f7f8 fb54 	bl	8000578 <__aeabi_f2d>
 8007ed0:	a30b      	add	r3, pc, #44	; (adr r3, 8007f00 <cppLoop+0xc48>)
 8007ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed6:	f7f8 f9ef 	bl	80002b8 <__aeabi_dsub>
 8007eda:	4603      	mov	r3, r0
 8007edc:	460c      	mov	r4, r1
 8007ede:	4618      	mov	r0, r3
 8007ee0:	4621      	mov	r1, r4
 8007ee2:	f7f8 fe99 	bl	8000c18 <__aeabi_d2f>
 8007ee6:	4602      	mov	r2, r0
 8007ee8:	4b0a      	ldr	r3, [pc, #40]	; (8007f14 <cppLoop+0xc5c>)
 8007eea:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8007eec:	2200      	movs	r2, #0
 8007eee:	f04f 31ff 	mov.w	r1, #4294967295
 8007ef2:	4805      	ldr	r0, [pc, #20]	; (8007f08 <cppLoop+0xc50>)
 8007ef4:	f7fa f8be 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8007ef8:	f000 bdc3 	b.w	8008a82 <cppLoop+0x17ca>
 8007efc:	f3af 8000 	nop.w
 8007f00:	9999999a 	.word	0x9999999a
 8007f04:	3fb99999 	.word	0x3fb99999
 8007f08:	200005cc 	.word	0x200005cc
 8007f0c:	2003c464 	.word	0x2003c464
 8007f10:	08018ffc 	.word	0x08018ffc
 8007f14:	2003c474 	.word	0x2003c474
 8007f18:	08018fd8 	.word	0x08018fd8
 8007f1c:	200005c0 	.word	0x200005c0
 8007f20:	20017da0 	.word	0x20017da0
 8007f24:	08018fe4 	.word	0x08018fe4
 8007f28:	2003c440 	.word	0x2003c440
		else if(joy_stick.getValue() == JOY_C){
 8007f2c:	48bc      	ldr	r0, [pc, #752]	; (8008220 <cppLoop+0xf68>)
 8007f2e:	f7f9 ff81 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007f32:	4603      	mov	r3, r0
 8007f34:	2b02      	cmp	r3, #2
 8007f36:	bf0c      	ite	eq
 8007f38:	2301      	moveq	r3, #1
 8007f3a:	2300      	movne	r3, #0
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	f000 859f 	beq.w	8008a82 <cppLoop+0x17ca>
			led.LR(-1, 1);
 8007f44:	2201      	movs	r2, #1
 8007f46:	f04f 31ff 	mov.w	r1, #4294967295
 8007f4a:	48b6      	ldr	r0, [pc, #728]	; (8008224 <cppLoop+0xf6c>)
 8007f4c:	f7fa f892 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007f50:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007f54:	f000 fec8 	bl	8008ce8 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
 8007f58:	2300      	movs	r3, #0
 8007f5a:	9300      	str	r3, [sp, #0]
 8007f5c:	4bb2      	ldr	r3, [pc, #712]	; (8008228 <cppLoop+0xf70>)
 8007f5e:	2201      	movs	r2, #1
 8007f60:	49b2      	ldr	r1, [pc, #712]	; (800822c <cppLoop+0xf74>)
 8007f62:	48b3      	ldr	r0, [pc, #716]	; (8008230 <cppLoop+0xf78>)
 8007f64:	f7f9 fb4e 	bl	8001604 <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL.TXT", 1, &adj_min_velocity, OVER_WRITE);
 8007f68:	2300      	movs	r3, #0
 8007f6a:	9300      	str	r3, [sp, #0]
 8007f6c:	4bb1      	ldr	r3, [pc, #708]	; (8008234 <cppLoop+0xf7c>)
 8007f6e:	2201      	movs	r2, #1
 8007f70:	49b1      	ldr	r1, [pc, #708]	; (8008238 <cppLoop+0xf80>)
 8007f72:	48af      	ldr	r0, [pc, #700]	; (8008230 <cppLoop+0xf78>)
 8007f74:	f7f9 fb46 	bl	8001604 <sd_write_array_float>
			line_trace.setMaxVelocity(adj_max_velocity);
 8007f78:	4bab      	ldr	r3, [pc, #684]	; (8008228 <cppLoop+0xf70>)
 8007f7a:	edd3 7a00 	vldr	s15, [r3]
 8007f7e:	eeb0 0a67 	vmov.f32	s0, s15
 8007f82:	48ae      	ldr	r0, [pc, #696]	; (800823c <cppLoop+0xf84>)
 8007f84:	f7fb fc04 	bl	8003790 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8007f88:	4baa      	ldr	r3, [pc, #680]	; (8008234 <cppLoop+0xf7c>)
 8007f8a:	edd3 7a00 	vldr	s15, [r3]
 8007f8e:	eeb0 0a67 	vmov.f32	s0, s15
 8007f92:	48aa      	ldr	r0, [pc, #680]	; (800823c <cppLoop+0xf84>)
 8007f94:	f7fb fc1b 	bl	80037ce <_ZN9LineTrace14setMinVelocityEf>
			led.LR(-1, 0);
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f04f 31ff 	mov.w	r1, #4294967295
 8007f9e:	48a1      	ldr	r0, [pc, #644]	; (8008224 <cppLoop+0xf6c>)
 8007fa0:	f7fa f868 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8007fa4:	f000 bd6d 	b.w	8008a82 <cppLoop+0x17ca>

	case 5:
		led.fullColor('M');
 8007fa8:	214d      	movs	r1, #77	; 0x4d
 8007faa:	489e      	ldr	r0, [pc, #632]	; (8008224 <cppLoop+0xf6c>)
 8007fac:	f7f9 ffa6 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007fb0:	f7f9 f876 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007fb4:	2100      	movs	r1, #0
 8007fb6:	2000      	movs	r0, #0
 8007fb8:	f7f9 f882 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", adj_max_velocity2);
 8007fbc:	4ba0      	ldr	r3, [pc, #640]	; (8008240 <cppLoop+0xf88>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f7f8 fad9 	bl	8000578 <__aeabi_f2d>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	460c      	mov	r4, r1
 8007fca:	461a      	mov	r2, r3
 8007fcc:	4623      	mov	r3, r4
 8007fce:	489d      	ldr	r0, [pc, #628]	; (8008244 <cppLoop+0xf8c>)
 8007fd0:	f7f9 f8a0 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007fd4:	2101      	movs	r1, #1
 8007fd6:	2000      	movs	r0, #0
 8007fd8:	f7f9 f872 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity2);
 8007fdc:	4b9a      	ldr	r3, [pc, #616]	; (8008248 <cppLoop+0xf90>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f7f8 fac9 	bl	8000578 <__aeabi_f2d>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	460c      	mov	r4, r1
 8007fea:	461a      	mov	r2, r3
 8007fec:	4623      	mov	r3, r4
 8007fee:	4897      	ldr	r0, [pc, #604]	; (800824c <cppLoop+0xf94>)
 8007ff0:	f7f9 f890 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007ff4:	488a      	ldr	r0, [pc, #552]	; (8008220 <cppLoop+0xf68>)
 8007ff6:	f7f9 ff1d 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	2b02      	cmp	r3, #2
 8007ffe:	bf0c      	ite	eq
 8008000:	2301      	moveq	r3, #1
 8008002:	2300      	movne	r3, #0
 8008004:	b2db      	uxtb	r3, r3
 8008006:	2b00      	cmp	r3, #0
 8008008:	f000 853d 	beq.w	8008a86 <cppLoop+0x17ce>
			HAL_Delay(500);
 800800c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008010:	f000 fe6a 	bl	8008ce8 <HAL_Delay>

			led.LR(1, -1);
 8008014:	f04f 32ff 	mov.w	r2, #4294967295
 8008018:	2101      	movs	r1, #1
 800801a:	4882      	ldr	r0, [pc, #520]	; (8008224 <cppLoop+0xf6c>)
 800801c:	f7fa f82a 	bl	8002074 <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 8008020:	2102      	movs	r1, #2
 8008022:	4886      	ldr	r0, [pc, #536]	; (800823c <cppLoop+0xf84>)
 8008024:	f7fb ff1a 	bl	8003e5c <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 8008028:	4b87      	ldr	r3, [pc, #540]	; (8008248 <cppLoop+0xf90>)
 800802a:	edd3 7a00 	vldr	s15, [r3]
 800802e:	eeb0 0a67 	vmov.f32	s0, s15
 8008032:	4882      	ldr	r0, [pc, #520]	; (800823c <cppLoop+0xf84>)
 8008034:	f7fb fb9d 	bl	8003772 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 8008038:	4b81      	ldr	r3, [pc, #516]	; (8008240 <cppLoop+0xf88>)
 800803a:	edd3 7a00 	vldr	s15, [r3]
 800803e:	eeb0 0a67 	vmov.f32	s0, s15
 8008042:	487e      	ldr	r0, [pc, #504]	; (800823c <cppLoop+0xf84>)
 8008044:	f7fb fbb3 	bl	80037ae <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 8008048:	4b7f      	ldr	r3, [pc, #508]	; (8008248 <cppLoop+0xf90>)
 800804a:	edd3 7a00 	vldr	s15, [r3]
 800804e:	eeb0 0a67 	vmov.f32	s0, s15
 8008052:	487a      	ldr	r0, [pc, #488]	; (800823c <cppLoop+0xf84>)
 8008054:	f7fb fbcb 	bl	80037ee <_ZN9LineTrace15setMinVelocity2Ef>
			line_trace.createVelocityTabele();
 8008058:	4878      	ldr	r0, [pc, #480]	; (800823c <cppLoop+0xf84>)
 800805a:	f7fa fee1 	bl	8002e20 <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 800805e:	4877      	ldr	r0, [pc, #476]	; (800823c <cppLoop+0xf84>)
 8008060:	f7fb fdfe 	bl	8003c60 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8008064:	f04f 32ff 	mov.w	r2, #4294967295
 8008068:	2100      	movs	r1, #0
 800806a:	486e      	ldr	r0, [pc, #440]	; (8008224 <cppLoop+0xf6c>)
 800806c:	f7fa f802 	bl	8002074 <_ZN3LED2LREaa>
		}

		break;
 8008070:	f000 bd09 	b.w	8008a86 <cppLoop+0x17ce>

	case 6:
		led.fullColor('R');
 8008074:	2152      	movs	r1, #82	; 0x52
 8008076:	486b      	ldr	r0, [pc, #428]	; (8008224 <cppLoop+0xf6c>)
 8008078:	f7f9 ff40 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 800807c:	f7f9 f810 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008080:	2100      	movs	r1, #0
 8008082:	2000      	movs	r0, #0
 8008084:	f7f9 f81c 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", line_trace.getMaxVelocity2());
 8008088:	486c      	ldr	r0, [pc, #432]	; (800823c <cppLoop+0xf84>)
 800808a:	f7fb fbde 	bl	800384a <_ZN9LineTrace15getMaxVelocity2Ev>
 800808e:	ee10 3a10 	vmov	r3, s0
 8008092:	4618      	mov	r0, r3
 8008094:	f7f8 fa70 	bl	8000578 <__aeabi_f2d>
 8008098:	4603      	mov	r3, r0
 800809a:	460c      	mov	r4, r1
 800809c:	461a      	mov	r2, r3
 800809e:	4623      	mov	r3, r4
 80080a0:	4868      	ldr	r0, [pc, #416]	; (8008244 <cppLoop+0xf8c>)
 80080a2:	f7f9 f837 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80080a6:	2101      	movs	r1, #1
 80080a8:	2000      	movs	r0, #0
 80080aa:	f7f9 f809 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity2());
 80080ae:	4863      	ldr	r0, [pc, #396]	; (800823c <cppLoop+0xf84>)
 80080b0:	f7fb fbeb 	bl	800388a <_ZN9LineTrace15getMinVelocity2Ev>
 80080b4:	ee10 3a10 	vmov	r3, s0
 80080b8:	4618      	mov	r0, r3
 80080ba:	f7f8 fa5d 	bl	8000578 <__aeabi_f2d>
 80080be:	4603      	mov	r3, r0
 80080c0:	460c      	mov	r4, r1
 80080c2:	461a      	mov	r2, r3
 80080c4:	4623      	mov	r3, r4
 80080c6:	4862      	ldr	r0, [pc, #392]	; (8008250 <cppLoop+0xf98>)
 80080c8:	f7f9 f824 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80080cc:	4854      	ldr	r0, [pc, #336]	; (8008220 <cppLoop+0xf68>)
 80080ce:	f7f9 feb1 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80080d2:	4603      	mov	r3, r0
 80080d4:	2b08      	cmp	r3, #8
 80080d6:	bf0c      	ite	eq
 80080d8:	2301      	moveq	r3, #1
 80080da:	2300      	movne	r3, #0
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d022      	beq.n	8008128 <cppLoop+0xe70>
			led.LR(-1, 1);
 80080e2:	2201      	movs	r2, #1
 80080e4:	f04f 31ff 	mov.w	r1, #4294967295
 80080e8:	484e      	ldr	r0, [pc, #312]	; (8008224 <cppLoop+0xf6c>)
 80080ea:	f7f9 ffc3 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80080ee:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80080f2:	f000 fdf9 	bl	8008ce8 <HAL_Delay>

			selector_vel2++;
 80080f6:	4b57      	ldr	r3, [pc, #348]	; (8008254 <cppLoop+0xf9c>)
 80080f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	3301      	adds	r3, #1
 8008100:	b29b      	uxth	r3, r3
 8008102:	b21a      	sxth	r2, r3
 8008104:	4b53      	ldr	r3, [pc, #332]	; (8008254 <cppLoop+0xf9c>)
 8008106:	801a      	strh	r2, [r3, #0]
			if(selector_vel2 >= 2) selector_vel2 = 0;
 8008108:	4b52      	ldr	r3, [pc, #328]	; (8008254 <cppLoop+0xf9c>)
 800810a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800810e:	2b01      	cmp	r3, #1
 8008110:	dd02      	ble.n	8008118 <cppLoop+0xe60>
 8008112:	4b50      	ldr	r3, [pc, #320]	; (8008254 <cppLoop+0xf9c>)
 8008114:	2200      	movs	r2, #0
 8008116:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008118:	2200      	movs	r2, #0
 800811a:	f04f 31ff 	mov.w	r1, #4294967295
 800811e:	4841      	ldr	r0, [pc, #260]	; (8008224 <cppLoop+0xf6c>)
 8008120:	f7f9 ffa8 	bl	8002074 <_ZN3LED2LREaa>
			line_trace.setMinVelocity2(adj_min_velocity2);

			led.LR(-1, 0);
		}

		break;
 8008124:	f000 bcb1 	b.w	8008a8a <cppLoop+0x17d2>
		else if(joy_stick.getValue() == JOY_R){
 8008128:	483d      	ldr	r0, [pc, #244]	; (8008220 <cppLoop+0xf68>)
 800812a:	f7f9 fe83 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 800812e:	4603      	mov	r3, r0
 8008130:	2b10      	cmp	r3, #16
 8008132:	bf0c      	ite	eq
 8008134:	2301      	moveq	r3, #1
 8008136:	2300      	movne	r3, #0
 8008138:	b2db      	uxtb	r3, r3
 800813a:	2b00      	cmp	r3, #0
 800813c:	d03c      	beq.n	80081b8 <cppLoop+0xf00>
			led.LR(-1, 1);
 800813e:	2201      	movs	r2, #1
 8008140:	f04f 31ff 	mov.w	r1, #4294967295
 8008144:	4837      	ldr	r0, [pc, #220]	; (8008224 <cppLoop+0xf6c>)
 8008146:	f7f9 ff95 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 800814a:	2064      	movs	r0, #100	; 0x64
 800814c:	f000 fdcc 	bl	8008ce8 <HAL_Delay>
			if(selector_vel2 == 0)
 8008150:	4b40      	ldr	r3, [pc, #256]	; (8008254 <cppLoop+0xf9c>)
 8008152:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d113      	bne.n	8008182 <cppLoop+0xeca>
				adj_max_velocity2 = adj_max_velocity2 + 0.1;
 800815a:	4b39      	ldr	r3, [pc, #228]	; (8008240 <cppLoop+0xf88>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4618      	mov	r0, r3
 8008160:	f7f8 fa0a 	bl	8000578 <__aeabi_f2d>
 8008164:	a32c      	add	r3, pc, #176	; (adr r3, 8008218 <cppLoop+0xf60>)
 8008166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800816a:	f7f8 f8a7 	bl	80002bc <__adddf3>
 800816e:	4603      	mov	r3, r0
 8008170:	460c      	mov	r4, r1
 8008172:	4618      	mov	r0, r3
 8008174:	4621      	mov	r1, r4
 8008176:	f7f8 fd4f 	bl	8000c18 <__aeabi_d2f>
 800817a:	4602      	mov	r2, r0
 800817c:	4b30      	ldr	r3, [pc, #192]	; (8008240 <cppLoop+0xf88>)
 800817e:	601a      	str	r2, [r3, #0]
 8008180:	e012      	b.n	80081a8 <cppLoop+0xef0>
				adj_min_velocity2 = adj_min_velocity2 + 0.1;
 8008182:	4b31      	ldr	r3, [pc, #196]	; (8008248 <cppLoop+0xf90>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4618      	mov	r0, r3
 8008188:	f7f8 f9f6 	bl	8000578 <__aeabi_f2d>
 800818c:	a322      	add	r3, pc, #136	; (adr r3, 8008218 <cppLoop+0xf60>)
 800818e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008192:	f7f8 f893 	bl	80002bc <__adddf3>
 8008196:	4603      	mov	r3, r0
 8008198:	460c      	mov	r4, r1
 800819a:	4618      	mov	r0, r3
 800819c:	4621      	mov	r1, r4
 800819e:	f7f8 fd3b 	bl	8000c18 <__aeabi_d2f>
 80081a2:	4602      	mov	r2, r0
 80081a4:	4b28      	ldr	r3, [pc, #160]	; (8008248 <cppLoop+0xf90>)
 80081a6:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80081a8:	2200      	movs	r2, #0
 80081aa:	f04f 31ff 	mov.w	r1, #4294967295
 80081ae:	481d      	ldr	r0, [pc, #116]	; (8008224 <cppLoop+0xf6c>)
 80081b0:	f7f9 ff60 	bl	8002074 <_ZN3LED2LREaa>
		break;
 80081b4:	f000 bc69 	b.w	8008a8a <cppLoop+0x17d2>
		else if(joy_stick.getValue() == JOY_L){
 80081b8:	4819      	ldr	r0, [pc, #100]	; (8008220 <cppLoop+0xf68>)
 80081ba:	f7f9 fe3b 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80081be:	4603      	mov	r3, r0
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	bf0c      	ite	eq
 80081c4:	2301      	moveq	r3, #1
 80081c6:	2300      	movne	r3, #0
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d05e      	beq.n	800828c <cppLoop+0xfd4>
			led.LR(-1, 1);
 80081ce:	2201      	movs	r2, #1
 80081d0:	f04f 31ff 	mov.w	r1, #4294967295
 80081d4:	4813      	ldr	r0, [pc, #76]	; (8008224 <cppLoop+0xf6c>)
 80081d6:	f7f9 ff4d 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80081da:	2064      	movs	r0, #100	; 0x64
 80081dc:	f000 fd84 	bl	8008ce8 <HAL_Delay>
			if(selector_vel2 == 0)
 80081e0:	4b1c      	ldr	r3, [pc, #112]	; (8008254 <cppLoop+0xf9c>)
 80081e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d136      	bne.n	8008258 <cppLoop+0xfa0>
				adj_max_velocity2 = adj_max_velocity2 - 0.1;
 80081ea:	4b15      	ldr	r3, [pc, #84]	; (8008240 <cppLoop+0xf88>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4618      	mov	r0, r3
 80081f0:	f7f8 f9c2 	bl	8000578 <__aeabi_f2d>
 80081f4:	a308      	add	r3, pc, #32	; (adr r3, 8008218 <cppLoop+0xf60>)
 80081f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081fa:	f7f8 f85d 	bl	80002b8 <__aeabi_dsub>
 80081fe:	4603      	mov	r3, r0
 8008200:	460c      	mov	r4, r1
 8008202:	4618      	mov	r0, r3
 8008204:	4621      	mov	r1, r4
 8008206:	f7f8 fd07 	bl	8000c18 <__aeabi_d2f>
 800820a:	4602      	mov	r2, r0
 800820c:	4b0c      	ldr	r3, [pc, #48]	; (8008240 <cppLoop+0xf88>)
 800820e:	601a      	str	r2, [r3, #0]
 8008210:	e035      	b.n	800827e <cppLoop+0xfc6>
 8008212:	bf00      	nop
 8008214:	f3af 8000 	nop.w
 8008218:	9999999a 	.word	0x9999999a
 800821c:	3fb99999 	.word	0x3fb99999
 8008220:	200005c0 	.word	0x200005c0
 8008224:	200005cc 	.word	0x200005cc
 8008228:	2003c464 	.word	0x2003c464
 800822c:	08019008 	.word	0x08019008
 8008230:	08018fb4 	.word	0x08018fb4
 8008234:	2003c474 	.word	0x2003c474
 8008238:	08019014 	.word	0x08019014
 800823c:	20017da0 	.word	0x20017da0
 8008240:	2003c46c 	.word	0x2003c46c
 8008244:	08019020 	.word	0x08019020
 8008248:	2003c47c 	.word	0x2003c47c
 800824c:	08018fd8 	.word	0x08018fd8
 8008250:	08018fe4 	.word	0x08018fe4
 8008254:	2003c442 	.word	0x2003c442
				adj_min_velocity2 = adj_min_velocity2 - 0.1;
 8008258:	4bbd      	ldr	r3, [pc, #756]	; (8008550 <cppLoop+0x1298>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4618      	mov	r0, r3
 800825e:	f7f8 f98b 	bl	8000578 <__aeabi_f2d>
 8008262:	a3b9      	add	r3, pc, #740	; (adr r3, 8008548 <cppLoop+0x1290>)
 8008264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008268:	f7f8 f826 	bl	80002b8 <__aeabi_dsub>
 800826c:	4603      	mov	r3, r0
 800826e:	460c      	mov	r4, r1
 8008270:	4618      	mov	r0, r3
 8008272:	4621      	mov	r1, r4
 8008274:	f7f8 fcd0 	bl	8000c18 <__aeabi_d2f>
 8008278:	4602      	mov	r2, r0
 800827a:	4bb5      	ldr	r3, [pc, #724]	; (8008550 <cppLoop+0x1298>)
 800827c:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800827e:	2200      	movs	r2, #0
 8008280:	f04f 31ff 	mov.w	r1, #4294967295
 8008284:	48b3      	ldr	r0, [pc, #716]	; (8008554 <cppLoop+0x129c>)
 8008286:	f7f9 fef5 	bl	8002074 <_ZN3LED2LREaa>
		break;
 800828a:	e3fe      	b.n	8008a8a <cppLoop+0x17d2>
		else if(joy_stick.getValue() == JOY_C){
 800828c:	48b2      	ldr	r0, [pc, #712]	; (8008558 <cppLoop+0x12a0>)
 800828e:	f7f9 fdd1 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8008292:	4603      	mov	r3, r0
 8008294:	2b02      	cmp	r3, #2
 8008296:	bf0c      	ite	eq
 8008298:	2301      	moveq	r3, #1
 800829a:	2300      	movne	r3, #0
 800829c:	b2db      	uxtb	r3, r3
 800829e:	2b00      	cmp	r3, #0
 80082a0:	f000 83f3 	beq.w	8008a8a <cppLoop+0x17d2>
			led.LR(-1, 1);
 80082a4:	2201      	movs	r2, #1
 80082a6:	f04f 31ff 	mov.w	r1, #4294967295
 80082aa:	48aa      	ldr	r0, [pc, #680]	; (8008554 <cppLoop+0x129c>)
 80082ac:	f7f9 fee2 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80082b0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80082b4:	f000 fd18 	bl	8008ce8 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL3.TXT", 1, &adj_max_velocity2, OVER_WRITE);
 80082b8:	2300      	movs	r3, #0
 80082ba:	9300      	str	r3, [sp, #0]
 80082bc:	4ba7      	ldr	r3, [pc, #668]	; (800855c <cppLoop+0x12a4>)
 80082be:	2201      	movs	r2, #1
 80082c0:	49a7      	ldr	r1, [pc, #668]	; (8008560 <cppLoop+0x12a8>)
 80082c2:	48a8      	ldr	r0, [pc, #672]	; (8008564 <cppLoop+0x12ac>)
 80082c4:	f7f9 f99e 	bl	8001604 <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL2.TXT", 1, &adj_min_velocity2, OVER_WRITE);
 80082c8:	2300      	movs	r3, #0
 80082ca:	9300      	str	r3, [sp, #0]
 80082cc:	4ba0      	ldr	r3, [pc, #640]	; (8008550 <cppLoop+0x1298>)
 80082ce:	2201      	movs	r2, #1
 80082d0:	49a5      	ldr	r1, [pc, #660]	; (8008568 <cppLoop+0x12b0>)
 80082d2:	48a4      	ldr	r0, [pc, #656]	; (8008564 <cppLoop+0x12ac>)
 80082d4:	f7f9 f996 	bl	8001604 <sd_write_array_float>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 80082d8:	4ba0      	ldr	r3, [pc, #640]	; (800855c <cppLoop+0x12a4>)
 80082da:	edd3 7a00 	vldr	s15, [r3]
 80082de:	eeb0 0a67 	vmov.f32	s0, s15
 80082e2:	48a2      	ldr	r0, [pc, #648]	; (800856c <cppLoop+0x12b4>)
 80082e4:	f7fb fa63 	bl	80037ae <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 80082e8:	4b99      	ldr	r3, [pc, #612]	; (8008550 <cppLoop+0x1298>)
 80082ea:	edd3 7a00 	vldr	s15, [r3]
 80082ee:	eeb0 0a67 	vmov.f32	s0, s15
 80082f2:	489e      	ldr	r0, [pc, #632]	; (800856c <cppLoop+0x12b4>)
 80082f4:	f7fb fa7b 	bl	80037ee <_ZN9LineTrace15setMinVelocity2Ef>
			led.LR(-1, 0);
 80082f8:	2200      	movs	r2, #0
 80082fa:	f04f 31ff 	mov.w	r1, #4294967295
 80082fe:	4895      	ldr	r0, [pc, #596]	; (8008554 <cppLoop+0x129c>)
 8008300:	f7f9 feb8 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8008304:	e3c1      	b.n	8008a8a <cppLoop+0x17d2>

	case 7:
		led.fullColor('W');
 8008306:	2157      	movs	r1, #87	; 0x57
 8008308:	4892      	ldr	r0, [pc, #584]	; (8008554 <cppLoop+0x129c>)
 800830a:	f7f9 fdf7 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 800830e:	f7f8 fec7 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008312:	2100      	movs	r1, #0
 8008314:	2000      	movs	r0, #0
 8008316:	f7f8 fed3 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC:%4.1f", line_trace.getMaxAcc());
 800831a:	4894      	ldr	r0, [pc, #592]	; (800856c <cppLoop+0x12b4>)
 800831c:	f7fb fadf 	bl	80038de <_ZN9LineTrace9getMaxAccEv>
 8008320:	ee10 3a10 	vmov	r3, s0
 8008324:	4618      	mov	r0, r3
 8008326:	f7f8 f927 	bl	8000578 <__aeabi_f2d>
 800832a:	4603      	mov	r3, r0
 800832c:	460c      	mov	r4, r1
 800832e:	461a      	mov	r2, r3
 8008330:	4623      	mov	r3, r4
 8008332:	488f      	ldr	r0, [pc, #572]	; (8008570 <cppLoop+0x12b8>)
 8008334:	f7f8 feee 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008338:	2101      	movs	r1, #1
 800833a:	2000      	movs	r0, #0
 800833c:	f7f8 fec0 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC:%4.1f", line_trace.getMaxDec());
 8008340:	488a      	ldr	r0, [pc, #552]	; (800856c <cppLoop+0x12b4>)
 8008342:	f7fb fade 	bl	8003902 <_ZN9LineTrace9getMaxDecEv>
 8008346:	ee10 3a10 	vmov	r3, s0
 800834a:	4618      	mov	r0, r3
 800834c:	f7f8 f914 	bl	8000578 <__aeabi_f2d>
 8008350:	4603      	mov	r3, r0
 8008352:	460c      	mov	r4, r1
 8008354:	461a      	mov	r2, r3
 8008356:	4623      	mov	r3, r4
 8008358:	4886      	ldr	r0, [pc, #536]	; (8008574 <cppLoop+0x12bc>)
 800835a:	f7f8 fedb 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 800835e:	487e      	ldr	r0, [pc, #504]	; (8008558 <cppLoop+0x12a0>)
 8008360:	f7f9 fd68 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8008364:	4603      	mov	r3, r0
 8008366:	2b08      	cmp	r3, #8
 8008368:	bf0c      	ite	eq
 800836a:	2301      	moveq	r3, #1
 800836c:	2300      	movne	r3, #0
 800836e:	b2db      	uxtb	r3, r3
 8008370:	2b00      	cmp	r3, #0
 8008372:	d021      	beq.n	80083b8 <cppLoop+0x1100>
			led.LR(-1, 1);
 8008374:	2201      	movs	r2, #1
 8008376:	f04f 31ff 	mov.w	r1, #4294967295
 800837a:	4876      	ldr	r0, [pc, #472]	; (8008554 <cppLoop+0x129c>)
 800837c:	f7f9 fe7a 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008380:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008384:	f000 fcb0 	bl	8008ce8 <HAL_Delay>

			selector_acc++;
 8008388:	4b7b      	ldr	r3, [pc, #492]	; (8008578 <cppLoop+0x12c0>)
 800838a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800838e:	b29b      	uxth	r3, r3
 8008390:	3301      	adds	r3, #1
 8008392:	b29b      	uxth	r3, r3
 8008394:	b21a      	sxth	r2, r3
 8008396:	4b78      	ldr	r3, [pc, #480]	; (8008578 <cppLoop+0x12c0>)
 8008398:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 800839a:	4b77      	ldr	r3, [pc, #476]	; (8008578 <cppLoop+0x12c0>)
 800839c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	dd02      	ble.n	80083aa <cppLoop+0x10f2>
 80083a4:	4b74      	ldr	r3, [pc, #464]	; (8008578 <cppLoop+0x12c0>)
 80083a6:	2200      	movs	r2, #0
 80083a8:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80083aa:	2200      	movs	r2, #0
 80083ac:	f04f 31ff 	mov.w	r1, #4294967295
 80083b0:	4868      	ldr	r0, [pc, #416]	; (8008554 <cppLoop+0x129c>)
 80083b2:	f7f9 fe5f 	bl	8002074 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
			line_trace.setMaxAccDec(adj_acc, adj_dec);

			led.LR(-1, 0);
		}
		break;
 80083b6:	e36a      	b.n	8008a8e <cppLoop+0x17d6>
		else if(joy_stick.getValue() == JOY_R){
 80083b8:	4867      	ldr	r0, [pc, #412]	; (8008558 <cppLoop+0x12a0>)
 80083ba:	f7f9 fd3b 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80083be:	4603      	mov	r3, r0
 80083c0:	2b10      	cmp	r3, #16
 80083c2:	bf0c      	ite	eq
 80083c4:	2301      	moveq	r3, #1
 80083c6:	2300      	movne	r3, #0
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d03b      	beq.n	8008446 <cppLoop+0x118e>
			led.LR(-1, 1);
 80083ce:	2201      	movs	r2, #1
 80083d0:	f04f 31ff 	mov.w	r1, #4294967295
 80083d4:	485f      	ldr	r0, [pc, #380]	; (8008554 <cppLoop+0x129c>)
 80083d6:	f7f9 fe4d 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80083da:	2064      	movs	r0, #100	; 0x64
 80083dc:	f000 fc84 	bl	8008ce8 <HAL_Delay>
			if(selector_acc == 0){
 80083e0:	4b65      	ldr	r3, [pc, #404]	; (8008578 <cppLoop+0x12c0>)
 80083e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d113      	bne.n	8008412 <cppLoop+0x115a>
				adj_acc = adj_acc + 0.1;
 80083ea:	4b64      	ldr	r3, [pc, #400]	; (800857c <cppLoop+0x12c4>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4618      	mov	r0, r3
 80083f0:	f7f8 f8c2 	bl	8000578 <__aeabi_f2d>
 80083f4:	a354      	add	r3, pc, #336	; (adr r3, 8008548 <cppLoop+0x1290>)
 80083f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083fa:	f7f7 ff5f 	bl	80002bc <__adddf3>
 80083fe:	4603      	mov	r3, r0
 8008400:	460c      	mov	r4, r1
 8008402:	4618      	mov	r0, r3
 8008404:	4621      	mov	r1, r4
 8008406:	f7f8 fc07 	bl	8000c18 <__aeabi_d2f>
 800840a:	4602      	mov	r2, r0
 800840c:	4b5b      	ldr	r3, [pc, #364]	; (800857c <cppLoop+0x12c4>)
 800840e:	601a      	str	r2, [r3, #0]
 8008410:	e012      	b.n	8008438 <cppLoop+0x1180>
				adj_dec = adj_dec + 0.1;
 8008412:	4b5b      	ldr	r3, [pc, #364]	; (8008580 <cppLoop+0x12c8>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4618      	mov	r0, r3
 8008418:	f7f8 f8ae 	bl	8000578 <__aeabi_f2d>
 800841c:	a34a      	add	r3, pc, #296	; (adr r3, 8008548 <cppLoop+0x1290>)
 800841e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008422:	f7f7 ff4b 	bl	80002bc <__adddf3>
 8008426:	4603      	mov	r3, r0
 8008428:	460c      	mov	r4, r1
 800842a:	4618      	mov	r0, r3
 800842c:	4621      	mov	r1, r4
 800842e:	f7f8 fbf3 	bl	8000c18 <__aeabi_d2f>
 8008432:	4602      	mov	r2, r0
 8008434:	4b52      	ldr	r3, [pc, #328]	; (8008580 <cppLoop+0x12c8>)
 8008436:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008438:	2200      	movs	r2, #0
 800843a:	f04f 31ff 	mov.w	r1, #4294967295
 800843e:	4845      	ldr	r0, [pc, #276]	; (8008554 <cppLoop+0x129c>)
 8008440:	f7f9 fe18 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8008444:	e323      	b.n	8008a8e <cppLoop+0x17d6>
		else if(joy_stick.getValue() == JOY_L){
 8008446:	4844      	ldr	r0, [pc, #272]	; (8008558 <cppLoop+0x12a0>)
 8008448:	f7f9 fcf4 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 800844c:	4603      	mov	r3, r0
 800844e:	2b01      	cmp	r3, #1
 8008450:	bf0c      	ite	eq
 8008452:	2301      	moveq	r3, #1
 8008454:	2300      	movne	r3, #0
 8008456:	b2db      	uxtb	r3, r3
 8008458:	2b00      	cmp	r3, #0
 800845a:	d03b      	beq.n	80084d4 <cppLoop+0x121c>
			led.LR(-1, 1);
 800845c:	2201      	movs	r2, #1
 800845e:	f04f 31ff 	mov.w	r1, #4294967295
 8008462:	483c      	ldr	r0, [pc, #240]	; (8008554 <cppLoop+0x129c>)
 8008464:	f7f9 fe06 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008468:	2064      	movs	r0, #100	; 0x64
 800846a:	f000 fc3d 	bl	8008ce8 <HAL_Delay>
			if(selector_acc == 0){
 800846e:	4b42      	ldr	r3, [pc, #264]	; (8008578 <cppLoop+0x12c0>)
 8008470:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d113      	bne.n	80084a0 <cppLoop+0x11e8>
				adj_acc = adj_acc - 0.1;
 8008478:	4b40      	ldr	r3, [pc, #256]	; (800857c <cppLoop+0x12c4>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4618      	mov	r0, r3
 800847e:	f7f8 f87b 	bl	8000578 <__aeabi_f2d>
 8008482:	a331      	add	r3, pc, #196	; (adr r3, 8008548 <cppLoop+0x1290>)
 8008484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008488:	f7f7 ff16 	bl	80002b8 <__aeabi_dsub>
 800848c:	4603      	mov	r3, r0
 800848e:	460c      	mov	r4, r1
 8008490:	4618      	mov	r0, r3
 8008492:	4621      	mov	r1, r4
 8008494:	f7f8 fbc0 	bl	8000c18 <__aeabi_d2f>
 8008498:	4602      	mov	r2, r0
 800849a:	4b38      	ldr	r3, [pc, #224]	; (800857c <cppLoop+0x12c4>)
 800849c:	601a      	str	r2, [r3, #0]
 800849e:	e012      	b.n	80084c6 <cppLoop+0x120e>
				adj_dec = adj_dec - 0.1;
 80084a0:	4b37      	ldr	r3, [pc, #220]	; (8008580 <cppLoop+0x12c8>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4618      	mov	r0, r3
 80084a6:	f7f8 f867 	bl	8000578 <__aeabi_f2d>
 80084aa:	a327      	add	r3, pc, #156	; (adr r3, 8008548 <cppLoop+0x1290>)
 80084ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b0:	f7f7 ff02 	bl	80002b8 <__aeabi_dsub>
 80084b4:	4603      	mov	r3, r0
 80084b6:	460c      	mov	r4, r1
 80084b8:	4618      	mov	r0, r3
 80084ba:	4621      	mov	r1, r4
 80084bc:	f7f8 fbac 	bl	8000c18 <__aeabi_d2f>
 80084c0:	4602      	mov	r2, r0
 80084c2:	4b2f      	ldr	r3, [pc, #188]	; (8008580 <cppLoop+0x12c8>)
 80084c4:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80084c6:	2200      	movs	r2, #0
 80084c8:	f04f 31ff 	mov.w	r1, #4294967295
 80084cc:	4821      	ldr	r0, [pc, #132]	; (8008554 <cppLoop+0x129c>)
 80084ce:	f7f9 fdd1 	bl	8002074 <_ZN3LED2LREaa>
		break;
 80084d2:	e2dc      	b.n	8008a8e <cppLoop+0x17d6>
		else if(joy_stick.getValue() == JOY_C){
 80084d4:	4820      	ldr	r0, [pc, #128]	; (8008558 <cppLoop+0x12a0>)
 80084d6:	f7f9 fcad 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80084da:	4603      	mov	r3, r0
 80084dc:	2b02      	cmp	r3, #2
 80084de:	bf0c      	ite	eq
 80084e0:	2301      	moveq	r3, #1
 80084e2:	2300      	movne	r3, #0
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	f000 82d1 	beq.w	8008a8e <cppLoop+0x17d6>
			led.LR(-1, 1);
 80084ec:	2201      	movs	r2, #1
 80084ee:	f04f 31ff 	mov.w	r1, #4294967295
 80084f2:	4818      	ldr	r0, [pc, #96]	; (8008554 <cppLoop+0x129c>)
 80084f4:	f7f9 fdbe 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80084f8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80084fc:	f000 fbf4 	bl	8008ce8 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC.TXT", 1, &adj_acc, OVER_WRITE);
 8008500:	2300      	movs	r3, #0
 8008502:	9300      	str	r3, [sp, #0]
 8008504:	4b1d      	ldr	r3, [pc, #116]	; (800857c <cppLoop+0x12c4>)
 8008506:	2201      	movs	r2, #1
 8008508:	491e      	ldr	r1, [pc, #120]	; (8008584 <cppLoop+0x12cc>)
 800850a:	4816      	ldr	r0, [pc, #88]	; (8008564 <cppLoop+0x12ac>)
 800850c:	f7f9 f87a 	bl	8001604 <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
 8008510:	2300      	movs	r3, #0
 8008512:	9300      	str	r3, [sp, #0]
 8008514:	4b1a      	ldr	r3, [pc, #104]	; (8008580 <cppLoop+0x12c8>)
 8008516:	2201      	movs	r2, #1
 8008518:	491b      	ldr	r1, [pc, #108]	; (8008588 <cppLoop+0x12d0>)
 800851a:	4812      	ldr	r0, [pc, #72]	; (8008564 <cppLoop+0x12ac>)
 800851c:	f7f9 f872 	bl	8001604 <sd_write_array_float>
			line_trace.setMaxAccDec(adj_acc, adj_dec);
 8008520:	4b16      	ldr	r3, [pc, #88]	; (800857c <cppLoop+0x12c4>)
 8008522:	edd3 7a00 	vldr	s15, [r3]
 8008526:	4b16      	ldr	r3, [pc, #88]	; (8008580 <cppLoop+0x12c8>)
 8008528:	ed93 7a00 	vldr	s14, [r3]
 800852c:	eef0 0a47 	vmov.f32	s1, s14
 8008530:	eeb0 0a67 	vmov.f32	s0, s15
 8008534:	480d      	ldr	r0, [pc, #52]	; (800856c <cppLoop+0x12b4>)
 8008536:	f7fb f9b8 	bl	80038aa <_ZN9LineTrace12setMaxAccDecEff>
			led.LR(-1, 0);
 800853a:	2200      	movs	r2, #0
 800853c:	f04f 31ff 	mov.w	r1, #4294967295
 8008540:	4804      	ldr	r0, [pc, #16]	; (8008554 <cppLoop+0x129c>)
 8008542:	f7f9 fd97 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8008546:	e2a2      	b.n	8008a8e <cppLoop+0x17d6>
 8008548:	9999999a 	.word	0x9999999a
 800854c:	3fb99999 	.word	0x3fb99999
 8008550:	2003c47c 	.word	0x2003c47c
 8008554:	200005cc 	.word	0x200005cc
 8008558:	200005c0 	.word	0x200005c0
 800855c:	2003c46c 	.word	0x2003c46c
 8008560:	0801902c 	.word	0x0801902c
 8008564:	08018fb4 	.word	0x08018fb4
 8008568:	08019038 	.word	0x08019038
 800856c:	20017da0 	.word	0x20017da0
 8008570:	08019044 	.word	0x08019044
 8008574:	08019050 	.word	0x08019050
 8008578:	2003c43e 	.word	0x2003c43e
 800857c:	2003c484 	.word	0x2003c484
 8008580:	2003c48c 	.word	0x2003c48c
 8008584:	0801905c 	.word	0x0801905c
 8008588:	08019064 	.word	0x08019064

	case 8:
		led.fullColor('~');
 800858c:	217e      	movs	r1, #126	; 0x7e
 800858e:	48ca      	ldr	r0, [pc, #808]	; (80088b8 <cppLoop+0x1600>)
 8008590:	f7f9 fcb4 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8008594:	f7f8 fd84 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008598:	2100      	movs	r1, #0
 800859a:	2000      	movs	r0, #0
 800859c:	f7f8 fd90 	bl	80010c0 <lcd_locate>
		lcd_printf("08      ");
 80085a0:	48c6      	ldr	r0, [pc, #792]	; (80088bc <cppLoop+0x1604>)
 80085a2:	f7f8 fdb7 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80085a6:	2101      	movs	r1, #1
 80085a8:	2000      	movs	r0, #0
 80085aa:	f7f8 fd89 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 80085ae:	48c4      	ldr	r0, [pc, #784]	; (80088c0 <cppLoop+0x1608>)
 80085b0:	f7f8 fdb0 	bl	8001114 <lcd_printf>

		break;
 80085b4:	e27a      	b.n	8008aac <cppLoop+0x17f4>

	case 9:
		led.fullColor('~');
 80085b6:	217e      	movs	r1, #126	; 0x7e
 80085b8:	48bf      	ldr	r0, [pc, #764]	; (80088b8 <cppLoop+0x1600>)
 80085ba:	f7f9 fc9f 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 80085be:	f7f8 fd6f 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80085c2:	2100      	movs	r1, #0
 80085c4:	2000      	movs	r0, #0
 80085c6:	f7f8 fd7b 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 80085ca:	48be      	ldr	r0, [pc, #760]	; (80088c4 <cppLoop+0x160c>)
 80085cc:	f7f8 fda2 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80085d0:	2101      	movs	r1, #1
 80085d2:	2000      	movs	r0, #0
 80085d4:	f7f8 fd74 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 80085d8:	48bb      	ldr	r0, [pc, #748]	; (80088c8 <cppLoop+0x1610>)
 80085da:	f7f8 fd9b 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80085de:	48bb      	ldr	r0, [pc, #748]	; (80088cc <cppLoop+0x1614>)
 80085e0:	f7f9 fc28 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80085e4:	4603      	mov	r3, r0
 80085e6:	2b02      	cmp	r3, #2
 80085e8:	bf0c      	ite	eq
 80085ea:	2301      	moveq	r3, #1
 80085ec:	2300      	movne	r3, #0
 80085ee:	b2db      	uxtb	r3, r3
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	f000 824e 	beq.w	8008a92 <cppLoop+0x17da>
			led.LR(-1, 1);
 80085f6:	2201      	movs	r2, #1
 80085f8:	f04f 31ff 	mov.w	r1, #4294967295
 80085fc:	48ae      	ldr	r0, [pc, #696]	; (80088b8 <cppLoop+0x1600>)
 80085fe:	f7f9 fd39 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8008602:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008606:	f000 fb6f 	bl	8008ce8 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 800860a:	ed9f 0ab1 	vldr	s0, [pc, #708]	; 80088d0 <cppLoop+0x1618>
 800860e:	48b1      	ldr	r0, [pc, #708]	; (80088d4 <cppLoop+0x161c>)
 8008610:	f7fb f8a0 	bl	8003754 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8008614:	48af      	ldr	r0, [pc, #700]	; (80088d4 <cppLoop+0x161c>)
 8008616:	f7fb fa95 	bl	8003b44 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 800861a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800861e:	f000 fb63 	bl	8008ce8 <HAL_Delay>

			led.fullColor('R');
 8008622:	2152      	movs	r1, #82	; 0x52
 8008624:	48a4      	ldr	r0, [pc, #656]	; (80088b8 <cppLoop+0x1600>)
 8008626:	f7f9 fc69 	bl	8001efc <_ZN3LED9fullColorEc>
			encoder.clearDistance10mm();
 800862a:	48ab      	ldr	r0, [pc, #684]	; (80088d8 <cppLoop+0x1620>)
 800862c:	f7f8 ff3c 	bl	80014a8 <_ZN7Encoder17clearDistance10mmEv>
			//encoder.clearDistance();

			HAL_Delay(10000);
 8008630:	f242 7010 	movw	r0, #10000	; 0x2710
 8008634:	f000 fb58 	bl	8008ce8 <HAL_Delay>

			line_trace.stop();
 8008638:	48a6      	ldr	r0, [pc, #664]	; (80088d4 <cppLoop+0x161c>)
 800863a:	f7fb faa9 	bl	8003b90 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 800863e:	49a7      	ldr	r1, [pc, #668]	; (80088dc <cppLoop+0x1624>)
 8008640:	48a7      	ldr	r0, [pc, #668]	; (80088e0 <cppLoop+0x1628>)
 8008642:	f7f8 ff6a 	bl	800151a <user_fopen>
			float d = encoder.getDistance();
 8008646:	48a4      	ldr	r0, [pc, #656]	; (80088d8 <cppLoop+0x1620>)
 8008648:	f7f8 fef2 	bl	8001430 <_ZN7Encoder11getDistanceEv>
 800864c:	eef0 7a40 	vmov.f32	s15, s0
 8008650:	edc7 7a00 	vstr	s15, [r7]
			sd_write_float(1, &d, ADD_WRITE);
 8008654:	463b      	mov	r3, r7
 8008656:	2201      	movs	r2, #1
 8008658:	4619      	mov	r1, r3
 800865a:	2001      	movs	r0, #1
 800865c:	f7f8 ff80 	bl	8001560 <sd_write_float>
			user_fclose();
 8008660:	f7f8 ff6e 	bl	8001540 <user_fclose>

			led.LR(-1, 0);
 8008664:	2200      	movs	r2, #0
 8008666:	f04f 31ff 	mov.w	r1, #4294967295
 800866a:	4893      	ldr	r0, [pc, #588]	; (80088b8 <cppLoop+0x1600>)
 800866c:	f7f9 fd02 	bl	8002074 <_ZN3LED2LREaa>
		}
		break;
 8008670:	e20f      	b.n	8008a92 <cppLoop+0x17da>

	case 10:
		led.fullColor('~');
 8008672:	217e      	movs	r1, #126	; 0x7e
 8008674:	4890      	ldr	r0, [pc, #576]	; (80088b8 <cppLoop+0x1600>)
 8008676:	f7f9 fc41 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 800867a:	f7f8 fd11 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800867e:	2100      	movs	r1, #0
 8008680:	2000      	movs	r0, #0
 8008682:	f7f8 fd1d 	bl	80010c0 <lcd_locate>
		lcd_printf("Create  ");
 8008686:	4897      	ldr	r0, [pc, #604]	; (80088e4 <cppLoop+0x162c>)
 8008688:	f7f8 fd44 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800868c:	2101      	movs	r1, #1
 800868e:	2000      	movs	r0, #0
 8008690:	f7f8 fd16 	bl	80010c0 <lcd_locate>
		lcd_printf("VelTable");
 8008694:	4894      	ldr	r0, [pc, #592]	; (80088e8 <cppLoop+0x1630>)
 8008696:	f7f8 fd3d 	bl	8001114 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 800869a:	488c      	ldr	r0, [pc, #560]	; (80088cc <cppLoop+0x1614>)
 800869c:	f7f9 fbca 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80086a0:	4603      	mov	r3, r0
 80086a2:	2b02      	cmp	r3, #2
 80086a4:	bf0c      	ite	eq
 80086a6:	2301      	moveq	r3, #1
 80086a8:	2300      	movne	r3, #0
 80086aa:	b2db      	uxtb	r3, r3
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	f000 81f2 	beq.w	8008a96 <cppLoop+0x17de>
			HAL_Delay(500);
 80086b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80086b6:	f000 fb17 	bl	8008ce8 <HAL_Delay>
			led.LR(-1, 1);
 80086ba:	2201      	movs	r2, #1
 80086bc:	f04f 31ff 	mov.w	r1, #4294967295
 80086c0:	487d      	ldr	r0, [pc, #500]	; (80088b8 <cppLoop+0x1600>)
 80086c2:	f7f9 fcd7 	bl	8002074 <_ZN3LED2LREaa>

			line_trace.setMode(SECOND_RUNNING);
 80086c6:	2101      	movs	r1, #1
 80086c8:	4882      	ldr	r0, [pc, #520]	; (80088d4 <cppLoop+0x161c>)
 80086ca:	f7fb fbc7 	bl	8003e5c <_ZN9LineTrace7setModeEs>
			line_trace.createVelocityTabeleFromSD();
 80086ce:	4881      	ldr	r0, [pc, #516]	; (80088d4 <cppLoop+0x161c>)
 80086d0:	f7fa fc3c 	bl	8002f4c <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			led.LR(-1, 0);
 80086d4:	2200      	movs	r2, #0
 80086d6:	f04f 31ff 	mov.w	r1, #4294967295
 80086da:	4877      	ldr	r0, [pc, #476]	; (80088b8 <cppLoop+0x1600>)
 80086dc:	f7f9 fcca 	bl	8002074 <_ZN3LED2LREaa>
		}

		break;
 80086e0:	e1d9      	b.n	8008a96 <cppLoop+0x17de>

	case 11:
		led.fullColor('~');
 80086e2:	217e      	movs	r1, #126	; 0x7e
 80086e4:	4874      	ldr	r0, [pc, #464]	; (80088b8 <cppLoop+0x1600>)
 80086e6:	f7f9 fc09 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 80086ea:	f7f8 fcd9 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80086ee:	2100      	movs	r1, #0
 80086f0:	2000      	movs	r0, #0
 80086f2:	f7f8 fce5 	bl	80010c0 <lcd_locate>
		lcd_printf("Step");
 80086f6:	487d      	ldr	r0, [pc, #500]	; (80088ec <cppLoop+0x1634>)
 80086f8:	f7f8 fd0c 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80086fc:	2101      	movs	r1, #1
 80086fe:	2000      	movs	r0, #0
 8008700:	f7f8 fcde 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 8008704:	487a      	ldr	r0, [pc, #488]	; (80088f0 <cppLoop+0x1638>)
 8008706:	f7f8 fd05 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800870a:	4870      	ldr	r0, [pc, #448]	; (80088cc <cppLoop+0x1614>)
 800870c:	f7f9 fb92 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8008710:	4603      	mov	r3, r0
 8008712:	2b02      	cmp	r3, #2
 8008714:	bf0c      	ite	eq
 8008716:	2301      	moveq	r3, #1
 8008718:	2300      	movne	r3, #0
 800871a:	b2db      	uxtb	r3, r3
 800871c:	2b00      	cmp	r3, #0
 800871e:	f000 81bc 	beq.w	8008a9a <cppLoop+0x17e2>
			HAL_Delay(1500);
 8008722:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8008726:	f000 fadf 	bl	8008ce8 <HAL_Delay>
			led.LR(-1, 1);
 800872a:	2201      	movs	r2, #1
 800872c:	f04f 31ff 	mov.w	r1, #4294967295
 8008730:	4861      	ldr	r0, [pc, #388]	; (80088b8 <cppLoop+0x1600>)
 8008732:	f7f9 fc9f 	bl	8002074 <_ZN3LED2LREaa>

			logger.start();
 8008736:	486f      	ldr	r0, [pc, #444]	; (80088f4 <cppLoop+0x163c>)
 8008738:	f7fb ff47 	bl	80045ca <_ZN6Logger5startEv>
			motor.setRatio(0.3, -0.3);
 800873c:	ed9f 1b58 	vldr	d1, [pc, #352]	; 80088a0 <cppLoop+0x15e8>
 8008740:	ed9f 0b59 	vldr	d0, [pc, #356]	; 80088a8 <cppLoop+0x15f0>
 8008744:	486c      	ldr	r0, [pc, #432]	; (80088f8 <cppLoop+0x1640>)
 8008746:	f7fb ffd5 	bl	80046f4 <_ZN5Motor8setRatioEdd>

			HAL_Delay(1000);
 800874a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800874e:	f000 facb 	bl	8008ce8 <HAL_Delay>

			logger.stop();
 8008752:	4868      	ldr	r0, [pc, #416]	; (80088f4 <cppLoop+0x163c>)
 8008754:	f7fb ff4a 	bl	80045ec <_ZN6Logger4stopEv>
			motor.setRatio(0.0, 0.0);
 8008758:	ed9f 1b55 	vldr	d1, [pc, #340]	; 80088b0 <cppLoop+0x15f8>
 800875c:	ed9f 0b54 	vldr	d0, [pc, #336]	; 80088b0 <cppLoop+0x15f8>
 8008760:	4865      	ldr	r0, [pc, #404]	; (80088f8 <cppLoop+0x1640>)
 8008762:	f7fb ffc7 	bl	80046f4 <_ZN5Motor8setRatioEdd>

			logger.saveLogs("SYSIDENT", "STEPRES.txt");
 8008766:	4a65      	ldr	r2, [pc, #404]	; (80088fc <cppLoop+0x1644>)
 8008768:	4965      	ldr	r1, [pc, #404]	; (8008900 <cppLoop+0x1648>)
 800876a:	4862      	ldr	r0, [pc, #392]	; (80088f4 <cppLoop+0x163c>)
 800876c:	f7fb fe3d 	bl	80043ea <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 8008770:	2200      	movs	r2, #0
 8008772:	f04f 31ff 	mov.w	r1, #4294967295
 8008776:	4850      	ldr	r0, [pc, #320]	; (80088b8 <cppLoop+0x1600>)
 8008778:	f7f9 fc7c 	bl	8002074 <_ZN3LED2LREaa>
		}
		break;
 800877c:	e18d      	b.n	8008a9a <cppLoop+0x17e2>

	case 12:
		led.fullColor('~');
 800877e:	217e      	movs	r1, #126	; 0x7e
 8008780:	484d      	ldr	r0, [pc, #308]	; (80088b8 <cppLoop+0x1600>)
 8008782:	f7f9 fbbb 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8008786:	f7f8 fc8b 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800878a:	2100      	movs	r1, #0
 800878c:	2000      	movs	r0, #0
 800878e:	f7f8 fc97 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 8008792:	485c      	ldr	r0, [pc, #368]	; (8008904 <cppLoop+0x164c>)
 8008794:	f7f8 fcbe 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008798:	2101      	movs	r1, #1
 800879a:	2000      	movs	r0, #0
 800879c:	f7f8 fc90 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 80087a0:	4859      	ldr	r0, [pc, #356]	; (8008908 <cppLoop+0x1650>)
 80087a2:	f7f8 fcb7 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80087a6:	4849      	ldr	r0, [pc, #292]	; (80088cc <cppLoop+0x1614>)
 80087a8:	f7f9 fb44 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80087ac:	4603      	mov	r3, r0
 80087ae:	2b02      	cmp	r3, #2
 80087b0:	bf0c      	ite	eq
 80087b2:	2301      	moveq	r3, #1
 80087b4:	2300      	movne	r3, #0
 80087b6:	b2db      	uxtb	r3, r3
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	f000 8170 	beq.w	8008a9e <cppLoop+0x17e6>
			HAL_Delay(1500);
 80087be:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80087c2:	f000 fa91 	bl	8008ce8 <HAL_Delay>
			led.LR(-1, 1);
 80087c6:	2201      	movs	r2, #1
 80087c8:	f04f 31ff 	mov.w	r1, #4294967295
 80087cc:	483a      	ldr	r0, [pc, #232]	; (80088b8 <cppLoop+0x1600>)
 80087ce:	f7f9 fc51 	bl	8002074 <_ZN3LED2LREaa>

			logger.start();
 80087d2:	4848      	ldr	r0, [pc, #288]	; (80088f4 <cppLoop+0x163c>)
 80087d4:	f7fb fef9 	bl	80045ca <_ZN6Logger5startEv>
			velocity_ctrl.start();
 80087d8:	484c      	ldr	r0, [pc, #304]	; (800890c <cppLoop+0x1654>)
 80087da:	f7fc feda 	bl	8005592 <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(1, 0);
 80087de:	eddf 0a3c 	vldr	s1, [pc, #240]	; 80088d0 <cppLoop+0x1618>
 80087e2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80087e6:	4849      	ldr	r0, [pc, #292]	; (800890c <cppLoop+0x1654>)
 80087e8:	f7fc fe66 	bl	80054b8 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 80087ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80087f0:	f000 fa7a 	bl	8008ce8 <HAL_Delay>

			logger.stop();
 80087f4:	483f      	ldr	r0, [pc, #252]	; (80088f4 <cppLoop+0x163c>)
 80087f6:	f7fb fef9 	bl	80045ec <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 80087fa:	4844      	ldr	r0, [pc, #272]	; (800890c <cppLoop+0x1654>)
 80087fc:	f7fc fedc 	bl	80055b8 <_ZN12VelocityCtrl4stopEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 8008800:	4a43      	ldr	r2, [pc, #268]	; (8008910 <cppLoop+0x1658>)
 8008802:	493f      	ldr	r1, [pc, #252]	; (8008900 <cppLoop+0x1648>)
 8008804:	483b      	ldr	r0, [pc, #236]	; (80088f4 <cppLoop+0x163c>)
 8008806:	f7fb fdf0 	bl	80043ea <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 800880a:	2200      	movs	r2, #0
 800880c:	f04f 31ff 	mov.w	r1, #4294967295
 8008810:	4829      	ldr	r0, [pc, #164]	; (80088b8 <cppLoop+0x1600>)
 8008812:	f7f9 fc2f 	bl	8002074 <_ZN3LED2LREaa>
		}
		break;
 8008816:	e142      	b.n	8008a9e <cppLoop+0x17e6>

	case 13:
		led.fullColor('~');
 8008818:	217e      	movs	r1, #126	; 0x7e
 800881a:	4827      	ldr	r0, [pc, #156]	; (80088b8 <cppLoop+0x1600>)
 800881c:	f7f9 fb6e 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8008820:	f7f8 fc3e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008824:	2100      	movs	r1, #0
 8008826:	2000      	movs	r0, #0
 8008828:	f7f8 fc4a 	bl	80010c0 <lcd_locate>
		lcd_printf("Msig");
 800882c:	4839      	ldr	r0, [pc, #228]	; (8008914 <cppLoop+0x165c>)
 800882e:	f7f8 fc71 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008832:	2101      	movs	r1, #1
 8008834:	2000      	movs	r0, #0
 8008836:	f7f8 fc43 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 800883a:	482d      	ldr	r0, [pc, #180]	; (80088f0 <cppLoop+0x1638>)
 800883c:	f7f8 fc6a 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008840:	4822      	ldr	r0, [pc, #136]	; (80088cc <cppLoop+0x1614>)
 8008842:	f7f9 faf7 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8008846:	4603      	mov	r3, r0
 8008848:	2b02      	cmp	r3, #2
 800884a:	bf0c      	ite	eq
 800884c:	2301      	moveq	r3, #1
 800884e:	2300      	movne	r3, #0
 8008850:	b2db      	uxtb	r3, r3
 8008852:	2b00      	cmp	r3, #0
 8008854:	f000 8125 	beq.w	8008aa2 <cppLoop+0x17ea>
			led.LR(-1, 1);
 8008858:	2201      	movs	r2, #1
 800885a:	f04f 31ff 	mov.w	r1, #4294967295
 800885e:	4816      	ldr	r0, [pc, #88]	; (80088b8 <cppLoop+0x1600>)
 8008860:	f7f9 fc08 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(1500);
 8008864:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8008868:	f000 fa3e 	bl	8008ce8 <HAL_Delay>

			sys_ident.setInputRatio(0.3);
 800886c:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8008918 <cppLoop+0x1660>
 8008870:	482a      	ldr	r0, [pc, #168]	; (800891c <cppLoop+0x1664>)
 8008872:	f7fc fcad 	bl	80051d0 <_ZN20SystemIdentification13setInputRatioEf>
			sys_ident.start();
 8008876:	4829      	ldr	r0, [pc, #164]	; (800891c <cppLoop+0x1664>)
 8008878:	f7fc fcba 	bl	80051f0 <_ZN20SystemIdentification5startEv>
			HAL_Delay(17500);
 800887c:	f244 405c 	movw	r0, #17500	; 0x445c
 8008880:	f000 fa32 	bl	8008ce8 <HAL_Delay>
			sys_ident.stop();
 8008884:	4825      	ldr	r0, [pc, #148]	; (800891c <cppLoop+0x1664>)
 8008886:	f7fc fcc7 	bl	8005218 <_ZN20SystemIdentification4stopEv>
			sys_ident.inOutputSave();
 800888a:	4824      	ldr	r0, [pc, #144]	; (800891c <cppLoop+0x1664>)
 800888c:	f7fc fc2e 	bl	80050ec <_ZN20SystemIdentification12inOutputSaveEv>

			led.LR(-1, 0);
 8008890:	2200      	movs	r2, #0
 8008892:	f04f 31ff 	mov.w	r1, #4294967295
 8008896:	4808      	ldr	r0, [pc, #32]	; (80088b8 <cppLoop+0x1600>)
 8008898:	f7f9 fbec 	bl	8002074 <_ZN3LED2LREaa>
		}
		break;
 800889c:	e101      	b.n	8008aa2 <cppLoop+0x17ea>
 800889e:	bf00      	nop
 80088a0:	33333333 	.word	0x33333333
 80088a4:	bfd33333 	.word	0xbfd33333
 80088a8:	33333333 	.word	0x33333333
 80088ac:	3fd33333 	.word	0x3fd33333
	...
 80088b8:	200005cc 	.word	0x200005cc
 80088bc:	0801906c 	.word	0x0801906c
 80088c0:	08019078 	.word	0x08019078
 80088c4:	08019084 	.word	0x08019084
 80088c8:	0801908c 	.word	0x0801908c
 80088cc:	200005c0 	.word	0x200005c0
 80088d0:	00000000 	.word	0x00000000
 80088d4:	20017da0 	.word	0x20017da0
 80088d8:	20017d00 	.word	0x20017d00
 80088dc:	08019098 	.word	0x08019098
 80088e0:	080190a0 	.word	0x080190a0
 80088e4:	080190ac 	.word	0x080190ac
 80088e8:	080190b8 	.word	0x080190b8
 80088ec:	080190c4 	.word	0x080190c4
 80088f0:	080190cc 	.word	0x080190cc
 80088f4:	200005f0 	.word	0x200005f0
 80088f8:	200005c8 	.word	0x200005c8
 80088fc:	080190d4 	.word	0x080190d4
 8008900:	080190e0 	.word	0x080190e0
 8008904:	080190ec 	.word	0x080190ec
 8008908:	080190f0 	.word	0x080190f0
 800890c:	20017d20 	.word	0x20017d20
 8008910:	080190fc 	.word	0x080190fc
 8008914:	08019108 	.word	0x08019108
 8008918:	3e99999a 	.word	0x3e99999a
 800891c:	20024b00 	.word	0x20024b00

	case 14:
		led.fullColor('W');
 8008920:	2157      	movs	r1, #87	; 0x57
 8008922:	4866      	ldr	r0, [pc, #408]	; (8008abc <cppLoop+0x1804>)
 8008924:	f7f9 faea 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8008928:	f7f8 fbba 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800892c:	2100      	movs	r1, #0
 800892e:	2000      	movs	r0, #0
 8008930:	f7f8 fbc6 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun2    ");
 8008934:	4862      	ldr	r0, [pc, #392]	; (8008ac0 <cppLoop+0x1808>)
 8008936:	f7f8 fbed 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800893a:	2101      	movs	r1, #1
 800893c:	2000      	movs	r0, #0
 800893e:	f7f8 fbbf 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 8008942:	4b60      	ldr	r3, [pc, #384]	; (8008ac4 <cppLoop+0x180c>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4618      	mov	r0, r3
 8008948:	f7f7 fe16 	bl	8000578 <__aeabi_f2d>
 800894c:	4603      	mov	r3, r0
 800894e:	460c      	mov	r4, r1
 8008950:	461a      	mov	r2, r3
 8008952:	4623      	mov	r3, r4
 8008954:	485c      	ldr	r0, [pc, #368]	; (8008ac8 <cppLoop+0x1810>)
 8008956:	f7f8 fbdd 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800895a:	485c      	ldr	r0, [pc, #368]	; (8008acc <cppLoop+0x1814>)
 800895c:	f7f9 fa6a 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8008960:	4603      	mov	r3, r0
 8008962:	2b02      	cmp	r3, #2
 8008964:	bf0c      	ite	eq
 8008966:	2301      	moveq	r3, #1
 8008968:	2300      	movne	r3, #0
 800896a:	b2db      	uxtb	r3, r3
 800896c:	2b00      	cmp	r3, #0
 800896e:	f000 809a 	beq.w	8008aa6 <cppLoop+0x17ee>
			HAL_Delay(500);
 8008972:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008976:	f000 f9b7 	bl	8008ce8 <HAL_Delay>

			led.LR(1, -1);
 800897a:	f04f 32ff 	mov.w	r2, #4294967295
 800897e:	2101      	movs	r1, #1
 8008980:	484e      	ldr	r0, [pc, #312]	; (8008abc <cppLoop+0x1804>)
 8008982:	f7f9 fb77 	bl	8002074 <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 8008986:	2102      	movs	r1, #2
 8008988:	4851      	ldr	r0, [pc, #324]	; (8008ad0 <cppLoop+0x1818>)
 800898a:	f7fb fa67 	bl	8003e5c <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 800898e:	4b4d      	ldr	r3, [pc, #308]	; (8008ac4 <cppLoop+0x180c>)
 8008990:	edd3 7a00 	vldr	s15, [r3]
 8008994:	eeb0 0a67 	vmov.f32	s0, s15
 8008998:	484d      	ldr	r0, [pc, #308]	; (8008ad0 <cppLoop+0x1818>)
 800899a:	f7fa feea 	bl	8003772 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 800899e:	4b49      	ldr	r3, [pc, #292]	; (8008ac4 <cppLoop+0x180c>)
 80089a0:	edd3 7a00 	vldr	s15, [r3]
 80089a4:	eeb0 0a67 	vmov.f32	s0, s15
 80089a8:	4849      	ldr	r0, [pc, #292]	; (8008ad0 <cppLoop+0x1818>)
 80089aa:	f7fa fef1 	bl	8003790 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 80089ae:	4848      	ldr	r0, [pc, #288]	; (8008ad0 <cppLoop+0x1818>)
 80089b0:	f7fa facc 	bl	8002f4c <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			line_trace.running();
 80089b4:	4846      	ldr	r0, [pc, #280]	; (8008ad0 <cppLoop+0x1818>)
 80089b6:	f7fb f953 	bl	8003c60 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 80089ba:	f04f 32ff 	mov.w	r2, #4294967295
 80089be:	2100      	movs	r1, #0
 80089c0:	483e      	ldr	r0, [pc, #248]	; (8008abc <cppLoop+0x1804>)
 80089c2:	f7f9 fb57 	bl	8002074 <_ZN3LED2LREaa>
		}

		break;
 80089c6:	e06e      	b.n	8008aa6 <cppLoop+0x17ee>

	case 15:
		led.fullColor('W');
 80089c8:	2157      	movs	r1, #87	; 0x57
 80089ca:	483c      	ldr	r0, [pc, #240]	; (8008abc <cppLoop+0x1804>)
 80089cc:	f7f9 fa96 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 80089d0:	f7f8 fb66 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80089d4:	2100      	movs	r1, #0
 80089d6:	2000      	movs	r0, #0
 80089d8:	f7f8 fb72 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun1    ");
 80089dc:	483d      	ldr	r0, [pc, #244]	; (8008ad4 <cppLoop+0x181c>)
 80089de:	f7f8 fb99 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80089e2:	2101      	movs	r1, #1
 80089e4:	2000      	movs	r0, #0
 80089e6:	f7f8 fb6b 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 80089ea:	4b3b      	ldr	r3, [pc, #236]	; (8008ad8 <cppLoop+0x1820>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7f7 fdc2 	bl	8000578 <__aeabi_f2d>
 80089f4:	4603      	mov	r3, r0
 80089f6:	460c      	mov	r4, r1
 80089f8:	461a      	mov	r2, r3
 80089fa:	4623      	mov	r3, r4
 80089fc:	4832      	ldr	r0, [pc, #200]	; (8008ac8 <cppLoop+0x1810>)
 80089fe:	f7f8 fb89 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008a02:	4832      	ldr	r0, [pc, #200]	; (8008acc <cppLoop+0x1814>)
 8008a04:	f7f9 fa16 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	2b02      	cmp	r3, #2
 8008a0c:	bf0c      	ite	eq
 8008a0e:	2301      	moveq	r3, #1
 8008a10:	2300      	movne	r3, #0
 8008a12:	b2db      	uxtb	r3, r3
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d048      	beq.n	8008aaa <cppLoop+0x17f2>
			HAL_Delay(500);
 8008a18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008a1c:	f000 f964 	bl	8008ce8 <HAL_Delay>

			led.LR(1, -1);
 8008a20:	f04f 32ff 	mov.w	r2, #4294967295
 8008a24:	2101      	movs	r1, #1
 8008a26:	4825      	ldr	r0, [pc, #148]	; (8008abc <cppLoop+0x1804>)
 8008a28:	f7f9 fb24 	bl	8002074 <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 8008a2c:	2101      	movs	r1, #1
 8008a2e:	4828      	ldr	r0, [pc, #160]	; (8008ad0 <cppLoop+0x1818>)
 8008a30:	f7fb fa14 	bl	8003e5c <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity);
 8008a34:	4b28      	ldr	r3, [pc, #160]	; (8008ad8 <cppLoop+0x1820>)
 8008a36:	edd3 7a00 	vldr	s15, [r3]
 8008a3a:	eeb0 0a67 	vmov.f32	s0, s15
 8008a3e:	4824      	ldr	r0, [pc, #144]	; (8008ad0 <cppLoop+0x1818>)
 8008a40:	f7fa fe97 	bl	8003772 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8008a44:	4b24      	ldr	r3, [pc, #144]	; (8008ad8 <cppLoop+0x1820>)
 8008a46:	edd3 7a00 	vldr	s15, [r3]
 8008a4a:	eeb0 0a67 	vmov.f32	s0, s15
 8008a4e:	4820      	ldr	r0, [pc, #128]	; (8008ad0 <cppLoop+0x1818>)
 8008a50:	f7fa fe9e 	bl	8003790 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8008a54:	481e      	ldr	r0, [pc, #120]	; (8008ad0 <cppLoop+0x1818>)
 8008a56:	f7fa fa79 	bl	8002f4c <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			line_trace.running();
 8008a5a:	481d      	ldr	r0, [pc, #116]	; (8008ad0 <cppLoop+0x1818>)
 8008a5c:	f7fb f900 	bl	8003c60 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8008a60:	f04f 32ff 	mov.w	r2, #4294967295
 8008a64:	2100      	movs	r1, #0
 8008a66:	4815      	ldr	r0, [pc, #84]	; (8008abc <cppLoop+0x1804>)
 8008a68:	f7f9 fb04 	bl	8002074 <_ZN3LED2LREaa>
		}
		break;
 8008a6c:	e01d      	b.n	8008aaa <cppLoop+0x17f2>

	default:
		break;
 8008a6e:	bf00      	nop
 8008a70:	e01c      	b.n	8008aac <cppLoop+0x17f4>
		break;
 8008a72:	bf00      	nop
 8008a74:	e01a      	b.n	8008aac <cppLoop+0x17f4>
		break;
 8008a76:	bf00      	nop
 8008a78:	e018      	b.n	8008aac <cppLoop+0x17f4>
		break;
 8008a7a:	bf00      	nop
 8008a7c:	e016      	b.n	8008aac <cppLoop+0x17f4>
		break;
 8008a7e:	bf00      	nop
 8008a80:	e014      	b.n	8008aac <cppLoop+0x17f4>
		break;
 8008a82:	bf00      	nop
 8008a84:	e012      	b.n	8008aac <cppLoop+0x17f4>
		break;
 8008a86:	bf00      	nop
 8008a88:	e010      	b.n	8008aac <cppLoop+0x17f4>
		break;
 8008a8a:	bf00      	nop
 8008a8c:	e00e      	b.n	8008aac <cppLoop+0x17f4>
		break;
 8008a8e:	bf00      	nop
 8008a90:	e00c      	b.n	8008aac <cppLoop+0x17f4>
		break;
 8008a92:	bf00      	nop
 8008a94:	e00a      	b.n	8008aac <cppLoop+0x17f4>
		break;
 8008a96:	bf00      	nop
 8008a98:	e008      	b.n	8008aac <cppLoop+0x17f4>
		break;
 8008a9a:	bf00      	nop
 8008a9c:	e006      	b.n	8008aac <cppLoop+0x17f4>
		break;
 8008a9e:	bf00      	nop
 8008aa0:	e004      	b.n	8008aac <cppLoop+0x17f4>
		break;
 8008aa2:	bf00      	nop
 8008aa4:	e002      	b.n	8008aac <cppLoop+0x17f4>
		break;
 8008aa6:	bf00      	nop
 8008aa8:	e000      	b.n	8008aac <cppLoop+0x17f4>
		break;
 8008aaa:	bf00      	nop

	}

	HAL_Delay(30);
 8008aac:	201e      	movs	r0, #30
 8008aae:	f000 f91b 	bl	8008ce8 <HAL_Delay>

}
 8008ab2:	bf00      	nop
 8008ab4:	3714      	adds	r7, #20
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008aba:	bf00      	nop
 8008abc:	200005cc 	.word	0x200005cc
 8008ac0:	08019110 	.word	0x08019110
 8008ac4:	2003c46c 	.word	0x2003c46c
 8008ac8:	08018fd8 	.word	0x08018fd8
 8008acc:	200005c0 	.word	0x200005c0
 8008ad0:	20017da0 	.word	0x20017da0
 8008ad4:	0801911c 	.word	0x0801911c
 8008ad8:	2003c464 	.word	0x2003c464

08008adc <_Z41__static_initialization_and_destruction_0ii>:

void prameterSttingMode()
{

}
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b088      	sub	sp, #32
 8008ae0:	af06      	add	r7, sp, #24
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	6039      	str	r1, [r7, #0]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d13d      	bne.n	8008b68 <_Z41__static_initialization_and_destruction_0ii+0x8c>
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d138      	bne.n	8008b68 <_Z41__static_initialization_and_destruction_0ii+0x8c>
LineSensor line_sensor;
 8008af6:	481e      	ldr	r0, [pc, #120]	; (8008b70 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8008af8:	f7f9 faf4 	bl	80020e4 <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8008afc:	481d      	ldr	r0, [pc, #116]	; (8008b74 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8008afe:	f7fc f95b 	bl	8004db8 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 8008b02:	481d      	ldr	r0, [pc, #116]	; (8008b78 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8008b04:	f7f9 f98a 	bl	8001e1c <_ZN8JoyStickC1Ev>
Motor motor;
 8008b08:	481c      	ldr	r0, [pc, #112]	; (8008b7c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8008b0a:	f7fb fd80 	bl	800460e <_ZN5MotorC1Ev>
IMU imu;
 8008b0e:	481c      	ldr	r0, [pc, #112]	; (8008b80 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8008b10:	f7f8 ff90 	bl	8001a34 <_ZN3IMUC1Ev>
Logger logger;
 8008b14:	481b      	ldr	r0, [pc, #108]	; (8008b84 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8008b16:	f7fb fad5 	bl	80040c4 <_ZN6LoggerC1Ev>
Encoder encoder;
 8008b1a:	481b      	ldr	r0, [pc, #108]	; (8008b88 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8008b1c:	f7f8 fb1a 	bl	8001154 <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 8008b20:	4b17      	ldr	r3, [pc, #92]	; (8008b80 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8008b22:	4a19      	ldr	r2, [pc, #100]	; (8008b88 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8008b24:	4915      	ldr	r1, [pc, #84]	; (8008b7c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8008b26:	4819      	ldr	r0, [pc, #100]	; (8008b8c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8008b28:	f7fc fb9a 	bl	8005260 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 8008b2c:	4b17      	ldr	r3, [pc, #92]	; (8008b8c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8008b2e:	4a14      	ldr	r2, [pc, #80]	; (8008b80 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8008b30:	4915      	ldr	r1, [pc, #84]	; (8008b88 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8008b32:	4817      	ldr	r0, [pc, #92]	; (8008b90 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8008b34:	f7fb fe50 	bl	80047d8 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger, &imu);
 8008b38:	4b11      	ldr	r3, [pc, #68]	; (8008b80 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8008b3a:	9304      	str	r3, [sp, #16]
 8008b3c:	4b11      	ldr	r3, [pc, #68]	; (8008b84 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8008b3e:	9303      	str	r3, [sp, #12]
 8008b40:	4b13      	ldr	r3, [pc, #76]	; (8008b90 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8008b42:	9302      	str	r3, [sp, #8]
 8008b44:	4b10      	ldr	r3, [pc, #64]	; (8008b88 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8008b46:	9301      	str	r3, [sp, #4]
 8008b48:	4b0a      	ldr	r3, [pc, #40]	; (8008b74 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8008b4a:	9300      	str	r3, [sp, #0]
 8008b4c:	4b0f      	ldr	r3, [pc, #60]	; (8008b8c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8008b4e:	4a08      	ldr	r2, [pc, #32]	; (8008b70 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8008b50:	490a      	ldr	r1, [pc, #40]	; (8008b7c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8008b52:	4810      	ldr	r0, [pc, #64]	; (8008b94 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8008b54:	f7f9 fdf4 	bl	8002740 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU>
SystemIdentification sys_ident(&logger, &motor);
 8008b58:	4a08      	ldr	r2, [pc, #32]	; (8008b7c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8008b5a:	490a      	ldr	r1, [pc, #40]	; (8008b84 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8008b5c:	480e      	ldr	r0, [pc, #56]	; (8008b98 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8008b5e:	f7fc fa7b 	bl	8005058 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 8008b62:	480e      	ldr	r0, [pc, #56]	; (8008b9c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8008b64:	f7fb ffba 	bl	8004adc <_ZN13PathFollowingC1Ev>
}
 8008b68:	bf00      	nop
 8008b6a:	3708      	adds	r7, #8
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}
 8008b70:	200002c0 	.word	0x200002c0
 8008b74:	200005b8 	.word	0x200005b8
 8008b78:	200005c0 	.word	0x200005c0
 8008b7c:	200005c8 	.word	0x200005c8
 8008b80:	200005dc 	.word	0x200005dc
 8008b84:	200005f0 	.word	0x200005f0
 8008b88:	20017d00 	.word	0x20017d00
 8008b8c:	20017d20 	.word	0x20017d20
 8008b90:	20017d60 	.word	0x20017d60
 8008b94:	20017da0 	.word	0x20017da0
 8008b98:	20024b00 	.word	0x20024b00
 8008b9c:	20024d10 	.word	0x20024d10

08008ba0 <_GLOBAL__sub_I_line_sensor>:
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008ba8:	2001      	movs	r0, #1
 8008baa:	f7ff ff97 	bl	8008adc <_Z41__static_initialization_and_destruction_0ii>
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008bb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008be8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008bb4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008bb6:	e003      	b.n	8008bc0 <LoopCopyDataInit>

08008bb8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008bb8:	4b0c      	ldr	r3, [pc, #48]	; (8008bec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008bba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008bbc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008bbe:	3104      	adds	r1, #4

08008bc0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008bc0:	480b      	ldr	r0, [pc, #44]	; (8008bf0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008bc2:	4b0c      	ldr	r3, [pc, #48]	; (8008bf4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008bc4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008bc6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008bc8:	d3f6      	bcc.n	8008bb8 <CopyDataInit>
  ldr  r2, =_sbss
 8008bca:	4a0b      	ldr	r2, [pc, #44]	; (8008bf8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008bcc:	e002      	b.n	8008bd4 <LoopFillZerobss>

08008bce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008bce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008bd0:	f842 3b04 	str.w	r3, [r2], #4

08008bd4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008bd4:	4b09      	ldr	r3, [pc, #36]	; (8008bfc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008bd6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008bd8:	d3f9      	bcc.n	8008bce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008bda:	f7fe fa4b 	bl	8007074 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008bde:	f00b fdd3 	bl	8014788 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008be2:	f7fc fd85 	bl	80056f0 <main>
  bx  lr    
 8008be6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008be8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8008bec:	08019718 	.word	0x08019718
  ldr  r0, =_sdata
 8008bf0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008bf4:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8008bf8:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8008bfc:	20040e70 	.word	0x20040e70

08008c00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008c00:	e7fe      	b.n	8008c00 <ADC_IRQHandler>
	...

08008c04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008c08:	4b0e      	ldr	r3, [pc, #56]	; (8008c44 <HAL_Init+0x40>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4a0d      	ldr	r2, [pc, #52]	; (8008c44 <HAL_Init+0x40>)
 8008c0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008c12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008c14:	4b0b      	ldr	r3, [pc, #44]	; (8008c44 <HAL_Init+0x40>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a0a      	ldr	r2, [pc, #40]	; (8008c44 <HAL_Init+0x40>)
 8008c1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008c1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008c20:	4b08      	ldr	r3, [pc, #32]	; (8008c44 <HAL_Init+0x40>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a07      	ldr	r2, [pc, #28]	; (8008c44 <HAL_Init+0x40>)
 8008c26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008c2c:	2003      	movs	r0, #3
 8008c2e:	f000 fd51 	bl	80096d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008c32:	2000      	movs	r0, #0
 8008c34:	f000 f808 	bl	8008c48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008c38:	f7fd fc6c 	bl	8006514 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008c3c:	2300      	movs	r3, #0
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	bd80      	pop	{r7, pc}
 8008c42:	bf00      	nop
 8008c44:	40023c00 	.word	0x40023c00

08008c48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b082      	sub	sp, #8
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008c50:	4b12      	ldr	r3, [pc, #72]	; (8008c9c <HAL_InitTick+0x54>)
 8008c52:	681a      	ldr	r2, [r3, #0]
 8008c54:	4b12      	ldr	r3, [pc, #72]	; (8008ca0 <HAL_InitTick+0x58>)
 8008c56:	781b      	ldrb	r3, [r3, #0]
 8008c58:	4619      	mov	r1, r3
 8008c5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008c5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c66:	4618      	mov	r0, r3
 8008c68:	f000 fd69 	bl	800973e <HAL_SYSTICK_Config>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d001      	beq.n	8008c76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008c72:	2301      	movs	r3, #1
 8008c74:	e00e      	b.n	8008c94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2b0f      	cmp	r3, #15
 8008c7a:	d80a      	bhi.n	8008c92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	6879      	ldr	r1, [r7, #4]
 8008c80:	f04f 30ff 	mov.w	r0, #4294967295
 8008c84:	f000 fd31 	bl	80096ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008c88:	4a06      	ldr	r2, [pc, #24]	; (8008ca4 <HAL_InitTick+0x5c>)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	e000      	b.n	8008c94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008c92:	2301      	movs	r3, #1
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3708      	adds	r7, #8
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}
 8008c9c:	20000000 	.word	0x20000000
 8008ca0:	20000008 	.word	0x20000008
 8008ca4:	20000004 	.word	0x20000004

08008ca8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008cac:	4b06      	ldr	r3, [pc, #24]	; (8008cc8 <HAL_IncTick+0x20>)
 8008cae:	781b      	ldrb	r3, [r3, #0]
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	4b06      	ldr	r3, [pc, #24]	; (8008ccc <HAL_IncTick+0x24>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	4a04      	ldr	r2, [pc, #16]	; (8008ccc <HAL_IncTick+0x24>)
 8008cba:	6013      	str	r3, [r2, #0]
}
 8008cbc:	bf00      	nop
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc4:	4770      	bx	lr
 8008cc6:	bf00      	nop
 8008cc8:	20000008 	.word	0x20000008
 8008ccc:	2003edf8 	.word	0x2003edf8

08008cd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	af00      	add	r7, sp, #0
  return uwTick;
 8008cd4:	4b03      	ldr	r3, [pc, #12]	; (8008ce4 <HAL_GetTick+0x14>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce0:	4770      	bx	lr
 8008ce2:	bf00      	nop
 8008ce4:	2003edf8 	.word	0x2003edf8

08008ce8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008cf0:	f7ff ffee 	bl	8008cd0 <HAL_GetTick>
 8008cf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d00:	d005      	beq.n	8008d0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008d02:	4b09      	ldr	r3, [pc, #36]	; (8008d28 <HAL_Delay+0x40>)
 8008d04:	781b      	ldrb	r3, [r3, #0]
 8008d06:	461a      	mov	r2, r3
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	4413      	add	r3, r2
 8008d0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008d0e:	bf00      	nop
 8008d10:	f7ff ffde 	bl	8008cd0 <HAL_GetTick>
 8008d14:	4602      	mov	r2, r0
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	1ad3      	subs	r3, r2, r3
 8008d1a:	68fa      	ldr	r2, [r7, #12]
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d8f7      	bhi.n	8008d10 <HAL_Delay+0x28>
  {
  }
}
 8008d20:	bf00      	nop
 8008d22:	3710      	adds	r7, #16
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	20000008 	.word	0x20000008

08008d2c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b084      	sub	sp, #16
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008d34:	2300      	movs	r3, #0
 8008d36:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d101      	bne.n	8008d42 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	e033      	b.n	8008daa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d109      	bne.n	8008d5e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f7fd fc0a 	bl	8006564 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2200      	movs	r2, #0
 8008d54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d62:	f003 0310 	and.w	r3, r3, #16
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d118      	bne.n	8008d9c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d6e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008d72:	f023 0302 	bic.w	r3, r3, #2
 8008d76:	f043 0202 	orr.w	r2, r3, #2
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 fa5a 	bl	8009238 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2200      	movs	r2, #0
 8008d88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d8e:	f023 0303 	bic.w	r3, r3, #3
 8008d92:	f043 0201 	orr.w	r2, r3, #1
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	641a      	str	r2, [r3, #64]	; 0x40
 8008d9a:	e001      	b.n	8008da0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2200      	movs	r2, #0
 8008da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8008da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3710      	adds	r7, #16
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}
	...

08008db4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b086      	sub	sp, #24
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	60f8      	str	r0, [r7, #12]
 8008dbc:	60b9      	str	r1, [r7, #8]
 8008dbe:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	d101      	bne.n	8008dd2 <HAL_ADC_Start_DMA+0x1e>
 8008dce:	2302      	movs	r3, #2
 8008dd0:	e0cc      	b.n	8008f6c <HAL_ADC_Start_DMA+0x1b8>
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	2201      	movs	r2, #1
 8008dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	689b      	ldr	r3, [r3, #8]
 8008de0:	f003 0301 	and.w	r3, r3, #1
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	d018      	beq.n	8008e1a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	689a      	ldr	r2, [r3, #8]
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f042 0201 	orr.w	r2, r2, #1
 8008df6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008df8:	4b5e      	ldr	r3, [pc, #376]	; (8008f74 <HAL_ADC_Start_DMA+0x1c0>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4a5e      	ldr	r2, [pc, #376]	; (8008f78 <HAL_ADC_Start_DMA+0x1c4>)
 8008dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8008e02:	0c9a      	lsrs	r2, r3, #18
 8008e04:	4613      	mov	r3, r2
 8008e06:	005b      	lsls	r3, r3, #1
 8008e08:	4413      	add	r3, r2
 8008e0a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8008e0c:	e002      	b.n	8008e14 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	3b01      	subs	r3, #1
 8008e12:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d1f9      	bne.n	8008e0e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	689b      	ldr	r3, [r3, #8]
 8008e20:	f003 0301 	and.w	r3, r3, #1
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	f040 80a0 	bne.w	8008f6a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e2e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008e32:	f023 0301 	bic.w	r3, r3, #1
 8008e36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d007      	beq.n	8008e5c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e50:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008e54:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e68:	d106      	bne.n	8008e78 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e6e:	f023 0206 	bic.w	r2, r3, #6
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	645a      	str	r2, [r3, #68]	; 0x44
 8008e76:	e002      	b.n	8008e7e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2200      	movs	r2, #0
 8008e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008e86:	4b3d      	ldr	r3, [pc, #244]	; (8008f7c <HAL_ADC_Start_DMA+0x1c8>)
 8008e88:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e8e:	4a3c      	ldr	r2, [pc, #240]	; (8008f80 <HAL_ADC_Start_DMA+0x1cc>)
 8008e90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e96:	4a3b      	ldr	r2, [pc, #236]	; (8008f84 <HAL_ADC_Start_DMA+0x1d0>)
 8008e98:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e9e:	4a3a      	ldr	r2, [pc, #232]	; (8008f88 <HAL_ADC_Start_DMA+0x1d4>)
 8008ea0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8008eaa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	685a      	ldr	r2, [r3, #4]
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008eba:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	689a      	ldr	r2, [r3, #8]
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008eca:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	334c      	adds	r3, #76	; 0x4c
 8008ed6:	4619      	mov	r1, r3
 8008ed8:	68ba      	ldr	r2, [r7, #8]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f000 fcea 	bl	80098b4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	f003 031f 	and.w	r3, r3, #31
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d12a      	bne.n	8008f42 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4a26      	ldr	r2, [pc, #152]	; (8008f8c <HAL_ADC_Start_DMA+0x1d8>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d015      	beq.n	8008f22 <HAL_ADC_Start_DMA+0x16e>
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4a25      	ldr	r2, [pc, #148]	; (8008f90 <HAL_ADC_Start_DMA+0x1dc>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d105      	bne.n	8008f0c <HAL_ADC_Start_DMA+0x158>
 8008f00:	4b1e      	ldr	r3, [pc, #120]	; (8008f7c <HAL_ADC_Start_DMA+0x1c8>)
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	f003 031f 	and.w	r3, r3, #31
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d00a      	beq.n	8008f22 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a20      	ldr	r2, [pc, #128]	; (8008f94 <HAL_ADC_Start_DMA+0x1e0>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d129      	bne.n	8008f6a <HAL_ADC_Start_DMA+0x1b6>
 8008f16:	4b19      	ldr	r3, [pc, #100]	; (8008f7c <HAL_ADC_Start_DMA+0x1c8>)
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	f003 031f 	and.w	r3, r3, #31
 8008f1e:	2b0f      	cmp	r3, #15
 8008f20:	d823      	bhi.n	8008f6a <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	689b      	ldr	r3, [r3, #8]
 8008f28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d11c      	bne.n	8008f6a <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	689a      	ldr	r2, [r3, #8]
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008f3e:	609a      	str	r2, [r3, #8]
 8008f40:	e013      	b.n	8008f6a <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	4a11      	ldr	r2, [pc, #68]	; (8008f8c <HAL_ADC_Start_DMA+0x1d8>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d10e      	bne.n	8008f6a <HAL_ADC_Start_DMA+0x1b6>
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	689b      	ldr	r3, [r3, #8]
 8008f52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d107      	bne.n	8008f6a <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	689a      	ldr	r2, [r3, #8]
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008f68:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8008f6a:	2300      	movs	r3, #0
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3718      	adds	r7, #24
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}
 8008f74:	20000000 	.word	0x20000000
 8008f78:	431bde83 	.word	0x431bde83
 8008f7c:	40012300 	.word	0x40012300
 8008f80:	08009431 	.word	0x08009431
 8008f84:	080094eb 	.word	0x080094eb
 8008f88:	08009507 	.word	0x08009507
 8008f8c:	40012000 	.word	0x40012000
 8008f90:	40012100 	.word	0x40012100
 8008f94:	40012200 	.word	0x40012200

08008f98 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b083      	sub	sp, #12
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8008fa0:	bf00      	nop
 8008fa2:	370c      	adds	r7, #12
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr

08008fac <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b083      	sub	sp, #12
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8008fb4:	bf00      	nop
 8008fb6:	370c      	adds	r7, #12
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbe:	4770      	bx	lr

08008fc0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b083      	sub	sp, #12
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8008fc8:	bf00      	nop
 8008fca:	370c      	adds	r7, #12
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd2:	4770      	bx	lr

08008fd4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b085      	sub	sp, #20
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	d101      	bne.n	8008ff0 <HAL_ADC_ConfigChannel+0x1c>
 8008fec:	2302      	movs	r3, #2
 8008fee:	e113      	b.n	8009218 <HAL_ADC_ConfigChannel+0x244>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	2b09      	cmp	r3, #9
 8008ffe:	d925      	bls.n	800904c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	68d9      	ldr	r1, [r3, #12]
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	b29b      	uxth	r3, r3
 800900c:	461a      	mov	r2, r3
 800900e:	4613      	mov	r3, r2
 8009010:	005b      	lsls	r3, r3, #1
 8009012:	4413      	add	r3, r2
 8009014:	3b1e      	subs	r3, #30
 8009016:	2207      	movs	r2, #7
 8009018:	fa02 f303 	lsl.w	r3, r2, r3
 800901c:	43da      	mvns	r2, r3
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	400a      	ands	r2, r1
 8009024:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	68d9      	ldr	r1, [r3, #12]
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	689a      	ldr	r2, [r3, #8]
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	b29b      	uxth	r3, r3
 8009036:	4618      	mov	r0, r3
 8009038:	4603      	mov	r3, r0
 800903a:	005b      	lsls	r3, r3, #1
 800903c:	4403      	add	r3, r0
 800903e:	3b1e      	subs	r3, #30
 8009040:	409a      	lsls	r2, r3
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	430a      	orrs	r2, r1
 8009048:	60da      	str	r2, [r3, #12]
 800904a:	e022      	b.n	8009092 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	6919      	ldr	r1, [r3, #16]
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	b29b      	uxth	r3, r3
 8009058:	461a      	mov	r2, r3
 800905a:	4613      	mov	r3, r2
 800905c:	005b      	lsls	r3, r3, #1
 800905e:	4413      	add	r3, r2
 8009060:	2207      	movs	r2, #7
 8009062:	fa02 f303 	lsl.w	r3, r2, r3
 8009066:	43da      	mvns	r2, r3
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	400a      	ands	r2, r1
 800906e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	6919      	ldr	r1, [r3, #16]
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	689a      	ldr	r2, [r3, #8]
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	b29b      	uxth	r3, r3
 8009080:	4618      	mov	r0, r3
 8009082:	4603      	mov	r3, r0
 8009084:	005b      	lsls	r3, r3, #1
 8009086:	4403      	add	r3, r0
 8009088:	409a      	lsls	r2, r3
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	430a      	orrs	r2, r1
 8009090:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	2b06      	cmp	r3, #6
 8009098:	d824      	bhi.n	80090e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	685a      	ldr	r2, [r3, #4]
 80090a4:	4613      	mov	r3, r2
 80090a6:	009b      	lsls	r3, r3, #2
 80090a8:	4413      	add	r3, r2
 80090aa:	3b05      	subs	r3, #5
 80090ac:	221f      	movs	r2, #31
 80090ae:	fa02 f303 	lsl.w	r3, r2, r3
 80090b2:	43da      	mvns	r2, r3
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	400a      	ands	r2, r1
 80090ba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	b29b      	uxth	r3, r3
 80090c8:	4618      	mov	r0, r3
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	685a      	ldr	r2, [r3, #4]
 80090ce:	4613      	mov	r3, r2
 80090d0:	009b      	lsls	r3, r3, #2
 80090d2:	4413      	add	r3, r2
 80090d4:	3b05      	subs	r3, #5
 80090d6:	fa00 f203 	lsl.w	r2, r0, r3
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	430a      	orrs	r2, r1
 80090e0:	635a      	str	r2, [r3, #52]	; 0x34
 80090e2:	e04c      	b.n	800917e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	685b      	ldr	r3, [r3, #4]
 80090e8:	2b0c      	cmp	r3, #12
 80090ea:	d824      	bhi.n	8009136 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	685a      	ldr	r2, [r3, #4]
 80090f6:	4613      	mov	r3, r2
 80090f8:	009b      	lsls	r3, r3, #2
 80090fa:	4413      	add	r3, r2
 80090fc:	3b23      	subs	r3, #35	; 0x23
 80090fe:	221f      	movs	r2, #31
 8009100:	fa02 f303 	lsl.w	r3, r2, r3
 8009104:	43da      	mvns	r2, r3
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	400a      	ands	r2, r1
 800910c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	b29b      	uxth	r3, r3
 800911a:	4618      	mov	r0, r3
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	685a      	ldr	r2, [r3, #4]
 8009120:	4613      	mov	r3, r2
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	4413      	add	r3, r2
 8009126:	3b23      	subs	r3, #35	; 0x23
 8009128:	fa00 f203 	lsl.w	r2, r0, r3
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	430a      	orrs	r2, r1
 8009132:	631a      	str	r2, [r3, #48]	; 0x30
 8009134:	e023      	b.n	800917e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	685a      	ldr	r2, [r3, #4]
 8009140:	4613      	mov	r3, r2
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	4413      	add	r3, r2
 8009146:	3b41      	subs	r3, #65	; 0x41
 8009148:	221f      	movs	r2, #31
 800914a:	fa02 f303 	lsl.w	r3, r2, r3
 800914e:	43da      	mvns	r2, r3
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	400a      	ands	r2, r1
 8009156:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	b29b      	uxth	r3, r3
 8009164:	4618      	mov	r0, r3
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	685a      	ldr	r2, [r3, #4]
 800916a:	4613      	mov	r3, r2
 800916c:	009b      	lsls	r3, r3, #2
 800916e:	4413      	add	r3, r2
 8009170:	3b41      	subs	r3, #65	; 0x41
 8009172:	fa00 f203 	lsl.w	r2, r0, r3
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	430a      	orrs	r2, r1
 800917c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800917e:	4b29      	ldr	r3, [pc, #164]	; (8009224 <HAL_ADC_ConfigChannel+0x250>)
 8009180:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4a28      	ldr	r2, [pc, #160]	; (8009228 <HAL_ADC_ConfigChannel+0x254>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d10f      	bne.n	80091ac <HAL_ADC_ConfigChannel+0x1d8>
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	2b12      	cmp	r3, #18
 8009192:	d10b      	bne.n	80091ac <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4a1d      	ldr	r2, [pc, #116]	; (8009228 <HAL_ADC_ConfigChannel+0x254>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d12b      	bne.n	800920e <HAL_ADC_ConfigChannel+0x23a>
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4a1c      	ldr	r2, [pc, #112]	; (800922c <HAL_ADC_ConfigChannel+0x258>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d003      	beq.n	80091c8 <HAL_ADC_ConfigChannel+0x1f4>
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	2b11      	cmp	r3, #17
 80091c6:	d122      	bne.n	800920e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4a11      	ldr	r2, [pc, #68]	; (800922c <HAL_ADC_ConfigChannel+0x258>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d111      	bne.n	800920e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80091ea:	4b11      	ldr	r3, [pc, #68]	; (8009230 <HAL_ADC_ConfigChannel+0x25c>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4a11      	ldr	r2, [pc, #68]	; (8009234 <HAL_ADC_ConfigChannel+0x260>)
 80091f0:	fba2 2303 	umull	r2, r3, r2, r3
 80091f4:	0c9a      	lsrs	r2, r3, #18
 80091f6:	4613      	mov	r3, r2
 80091f8:	009b      	lsls	r3, r3, #2
 80091fa:	4413      	add	r3, r2
 80091fc:	005b      	lsls	r3, r3, #1
 80091fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009200:	e002      	b.n	8009208 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	3b01      	subs	r3, #1
 8009206:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d1f9      	bne.n	8009202 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2200      	movs	r2, #0
 8009212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8009216:	2300      	movs	r3, #0
}
 8009218:	4618      	mov	r0, r3
 800921a:	3714      	adds	r7, #20
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr
 8009224:	40012300 	.word	0x40012300
 8009228:	40012000 	.word	0x40012000
 800922c:	10000012 	.word	0x10000012
 8009230:	20000000 	.word	0x20000000
 8009234:	431bde83 	.word	0x431bde83

08009238 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009238:	b480      	push	{r7}
 800923a:	b085      	sub	sp, #20
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009240:	4b79      	ldr	r3, [pc, #484]	; (8009428 <ADC_Init+0x1f0>)
 8009242:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	685b      	ldr	r3, [r3, #4]
 8009248:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	685a      	ldr	r2, [r3, #4]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	431a      	orrs	r2, r3
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	685a      	ldr	r2, [r3, #4]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800926c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	6859      	ldr	r1, [r3, #4]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	691b      	ldr	r3, [r3, #16]
 8009278:	021a      	lsls	r2, r3, #8
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	430a      	orrs	r2, r1
 8009280:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	685a      	ldr	r2, [r3, #4]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8009290:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	6859      	ldr	r1, [r3, #4]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	689a      	ldr	r2, [r3, #8]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	430a      	orrs	r2, r1
 80092a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	689a      	ldr	r2, [r3, #8]
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80092b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	6899      	ldr	r1, [r3, #8]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	68da      	ldr	r2, [r3, #12]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	430a      	orrs	r2, r1
 80092c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ca:	4a58      	ldr	r2, [pc, #352]	; (800942c <ADC_Init+0x1f4>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d022      	beq.n	8009316 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	689a      	ldr	r2, [r3, #8]
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80092de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	6899      	ldr	r1, [r3, #8]
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	430a      	orrs	r2, r1
 80092f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	689a      	ldr	r2, [r3, #8]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009300:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	6899      	ldr	r1, [r3, #8]
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	430a      	orrs	r2, r1
 8009312:	609a      	str	r2, [r3, #8]
 8009314:	e00f      	b.n	8009336 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	689a      	ldr	r2, [r3, #8]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009324:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	689a      	ldr	r2, [r3, #8]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009334:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	689a      	ldr	r2, [r3, #8]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f022 0202 	bic.w	r2, r2, #2
 8009344:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	6899      	ldr	r1, [r3, #8]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	7e1b      	ldrb	r3, [r3, #24]
 8009350:	005a      	lsls	r2, r3, #1
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	430a      	orrs	r2, r1
 8009358:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d01b      	beq.n	800939c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	685a      	ldr	r2, [r3, #4]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009372:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	685a      	ldr	r2, [r3, #4]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8009382:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	6859      	ldr	r1, [r3, #4]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800938e:	3b01      	subs	r3, #1
 8009390:	035a      	lsls	r2, r3, #13
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	430a      	orrs	r2, r1
 8009398:	605a      	str	r2, [r3, #4]
 800939a:	e007      	b.n	80093ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	685a      	ldr	r2, [r3, #4]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80093aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80093ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	69db      	ldr	r3, [r3, #28]
 80093c6:	3b01      	subs	r3, #1
 80093c8:	051a      	lsls	r2, r3, #20
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	430a      	orrs	r2, r1
 80093d0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	689a      	ldr	r2, [r3, #8]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80093e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	6899      	ldr	r1, [r3, #8]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80093ee:	025a      	lsls	r2, r3, #9
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	430a      	orrs	r2, r1
 80093f6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	689a      	ldr	r2, [r3, #8]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009406:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	6899      	ldr	r1, [r3, #8]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	695b      	ldr	r3, [r3, #20]
 8009412:	029a      	lsls	r2, r3, #10
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	430a      	orrs	r2, r1
 800941a:	609a      	str	r2, [r3, #8]
}
 800941c:	bf00      	nop
 800941e:	3714      	adds	r7, #20
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr
 8009428:	40012300 	.word	0x40012300
 800942c:	0f000001 	.word	0x0f000001

08009430 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b084      	sub	sp, #16
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800943c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009442:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009446:	2b00      	cmp	r3, #0
 8009448:	d13c      	bne.n	80094c4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800944e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	689b      	ldr	r3, [r3, #8]
 800945c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009460:	2b00      	cmp	r3, #0
 8009462:	d12b      	bne.n	80094bc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009468:	2b00      	cmp	r3, #0
 800946a:	d127      	bne.n	80094bc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009472:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009476:	2b00      	cmp	r3, #0
 8009478:	d006      	beq.n	8009488 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	689b      	ldr	r3, [r3, #8]
 8009480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009484:	2b00      	cmp	r3, #0
 8009486:	d119      	bne.n	80094bc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	685a      	ldr	r2, [r3, #4]
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f022 0220 	bic.w	r2, r2, #32
 8009496:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800949c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d105      	bne.n	80094bc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094b4:	f043 0201 	orr.w	r2, r3, #1
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80094bc:	68f8      	ldr	r0, [r7, #12]
 80094be:	f7ff fd6b 	bl	8008f98 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80094c2:	e00e      	b.n	80094e2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094c8:	f003 0310 	and.w	r3, r3, #16
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d003      	beq.n	80094d8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80094d0:	68f8      	ldr	r0, [r7, #12]
 80094d2:	f7ff fd75 	bl	8008fc0 <HAL_ADC_ErrorCallback>
}
 80094d6:	e004      	b.n	80094e2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	4798      	blx	r3
}
 80094e2:	bf00      	nop
 80094e4:	3710      	adds	r7, #16
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}

080094ea <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80094ea:	b580      	push	{r7, lr}
 80094ec:	b084      	sub	sp, #16
 80094ee:	af00      	add	r7, sp, #0
 80094f0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80094f8:	68f8      	ldr	r0, [r7, #12]
 80094fa:	f7ff fd57 	bl	8008fac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80094fe:	bf00      	nop
 8009500:	3710      	adds	r7, #16
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}

08009506 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8009506:	b580      	push	{r7, lr}
 8009508:	b084      	sub	sp, #16
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009512:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2240      	movs	r2, #64	; 0x40
 8009518:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800951e:	f043 0204 	orr.w	r2, r3, #4
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8009526:	68f8      	ldr	r0, [r7, #12]
 8009528:	f7ff fd4a 	bl	8008fc0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800952c:	bf00      	nop
 800952e:	3710      	adds	r7, #16
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009534:	b480      	push	{r7}
 8009536:	b085      	sub	sp, #20
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f003 0307 	and.w	r3, r3, #7
 8009542:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009544:	4b0c      	ldr	r3, [pc, #48]	; (8009578 <__NVIC_SetPriorityGrouping+0x44>)
 8009546:	68db      	ldr	r3, [r3, #12]
 8009548:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800954a:	68ba      	ldr	r2, [r7, #8]
 800954c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009550:	4013      	ands	r3, r2
 8009552:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800955c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009564:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009566:	4a04      	ldr	r2, [pc, #16]	; (8009578 <__NVIC_SetPriorityGrouping+0x44>)
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	60d3      	str	r3, [r2, #12]
}
 800956c:	bf00      	nop
 800956e:	3714      	adds	r7, #20
 8009570:	46bd      	mov	sp, r7
 8009572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009576:	4770      	bx	lr
 8009578:	e000ed00 	.word	0xe000ed00

0800957c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800957c:	b480      	push	{r7}
 800957e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009580:	4b04      	ldr	r3, [pc, #16]	; (8009594 <__NVIC_GetPriorityGrouping+0x18>)
 8009582:	68db      	ldr	r3, [r3, #12]
 8009584:	0a1b      	lsrs	r3, r3, #8
 8009586:	f003 0307 	and.w	r3, r3, #7
}
 800958a:	4618      	mov	r0, r3
 800958c:	46bd      	mov	sp, r7
 800958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009592:	4770      	bx	lr
 8009594:	e000ed00 	.word	0xe000ed00

08009598 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009598:	b480      	push	{r7}
 800959a:	b083      	sub	sp, #12
 800959c:	af00      	add	r7, sp, #0
 800959e:	4603      	mov	r3, r0
 80095a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80095a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	db0b      	blt.n	80095c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80095aa:	79fb      	ldrb	r3, [r7, #7]
 80095ac:	f003 021f 	and.w	r2, r3, #31
 80095b0:	4907      	ldr	r1, [pc, #28]	; (80095d0 <__NVIC_EnableIRQ+0x38>)
 80095b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095b6:	095b      	lsrs	r3, r3, #5
 80095b8:	2001      	movs	r0, #1
 80095ba:	fa00 f202 	lsl.w	r2, r0, r2
 80095be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80095c2:	bf00      	nop
 80095c4:	370c      	adds	r7, #12
 80095c6:	46bd      	mov	sp, r7
 80095c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095cc:	4770      	bx	lr
 80095ce:	bf00      	nop
 80095d0:	e000e100 	.word	0xe000e100

080095d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b083      	sub	sp, #12
 80095d8:	af00      	add	r7, sp, #0
 80095da:	4603      	mov	r3, r0
 80095dc:	6039      	str	r1, [r7, #0]
 80095de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80095e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	db0a      	blt.n	80095fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	b2da      	uxtb	r2, r3
 80095ec:	490c      	ldr	r1, [pc, #48]	; (8009620 <__NVIC_SetPriority+0x4c>)
 80095ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095f2:	0112      	lsls	r2, r2, #4
 80095f4:	b2d2      	uxtb	r2, r2
 80095f6:	440b      	add	r3, r1
 80095f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80095fc:	e00a      	b.n	8009614 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	b2da      	uxtb	r2, r3
 8009602:	4908      	ldr	r1, [pc, #32]	; (8009624 <__NVIC_SetPriority+0x50>)
 8009604:	79fb      	ldrb	r3, [r7, #7]
 8009606:	f003 030f 	and.w	r3, r3, #15
 800960a:	3b04      	subs	r3, #4
 800960c:	0112      	lsls	r2, r2, #4
 800960e:	b2d2      	uxtb	r2, r2
 8009610:	440b      	add	r3, r1
 8009612:	761a      	strb	r2, [r3, #24]
}
 8009614:	bf00      	nop
 8009616:	370c      	adds	r7, #12
 8009618:	46bd      	mov	sp, r7
 800961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961e:	4770      	bx	lr
 8009620:	e000e100 	.word	0xe000e100
 8009624:	e000ed00 	.word	0xe000ed00

08009628 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009628:	b480      	push	{r7}
 800962a:	b089      	sub	sp, #36	; 0x24
 800962c:	af00      	add	r7, sp, #0
 800962e:	60f8      	str	r0, [r7, #12]
 8009630:	60b9      	str	r1, [r7, #8]
 8009632:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f003 0307 	and.w	r3, r3, #7
 800963a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800963c:	69fb      	ldr	r3, [r7, #28]
 800963e:	f1c3 0307 	rsb	r3, r3, #7
 8009642:	2b04      	cmp	r3, #4
 8009644:	bf28      	it	cs
 8009646:	2304      	movcs	r3, #4
 8009648:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800964a:	69fb      	ldr	r3, [r7, #28]
 800964c:	3304      	adds	r3, #4
 800964e:	2b06      	cmp	r3, #6
 8009650:	d902      	bls.n	8009658 <NVIC_EncodePriority+0x30>
 8009652:	69fb      	ldr	r3, [r7, #28]
 8009654:	3b03      	subs	r3, #3
 8009656:	e000      	b.n	800965a <NVIC_EncodePriority+0x32>
 8009658:	2300      	movs	r3, #0
 800965a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800965c:	f04f 32ff 	mov.w	r2, #4294967295
 8009660:	69bb      	ldr	r3, [r7, #24]
 8009662:	fa02 f303 	lsl.w	r3, r2, r3
 8009666:	43da      	mvns	r2, r3
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	401a      	ands	r2, r3
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009670:	f04f 31ff 	mov.w	r1, #4294967295
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	fa01 f303 	lsl.w	r3, r1, r3
 800967a:	43d9      	mvns	r1, r3
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009680:	4313      	orrs	r3, r2
         );
}
 8009682:	4618      	mov	r0, r3
 8009684:	3724      	adds	r7, #36	; 0x24
 8009686:	46bd      	mov	sp, r7
 8009688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968c:	4770      	bx	lr
	...

08009690 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b082      	sub	sp, #8
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	3b01      	subs	r3, #1
 800969c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80096a0:	d301      	bcc.n	80096a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80096a2:	2301      	movs	r3, #1
 80096a4:	e00f      	b.n	80096c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80096a6:	4a0a      	ldr	r2, [pc, #40]	; (80096d0 <SysTick_Config+0x40>)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	3b01      	subs	r3, #1
 80096ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80096ae:	210f      	movs	r1, #15
 80096b0:	f04f 30ff 	mov.w	r0, #4294967295
 80096b4:	f7ff ff8e 	bl	80095d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80096b8:	4b05      	ldr	r3, [pc, #20]	; (80096d0 <SysTick_Config+0x40>)
 80096ba:	2200      	movs	r2, #0
 80096bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80096be:	4b04      	ldr	r3, [pc, #16]	; (80096d0 <SysTick_Config+0x40>)
 80096c0:	2207      	movs	r2, #7
 80096c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80096c4:	2300      	movs	r3, #0
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3708      	adds	r7, #8
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}
 80096ce:	bf00      	nop
 80096d0:	e000e010 	.word	0xe000e010

080096d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b082      	sub	sp, #8
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f7ff ff29 	bl	8009534 <__NVIC_SetPriorityGrouping>
}
 80096e2:	bf00      	nop
 80096e4:	3708      	adds	r7, #8
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}

080096ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80096ea:	b580      	push	{r7, lr}
 80096ec:	b086      	sub	sp, #24
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	4603      	mov	r3, r0
 80096f2:	60b9      	str	r1, [r7, #8]
 80096f4:	607a      	str	r2, [r7, #4]
 80096f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80096f8:	2300      	movs	r3, #0
 80096fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80096fc:	f7ff ff3e 	bl	800957c <__NVIC_GetPriorityGrouping>
 8009700:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009702:	687a      	ldr	r2, [r7, #4]
 8009704:	68b9      	ldr	r1, [r7, #8]
 8009706:	6978      	ldr	r0, [r7, #20]
 8009708:	f7ff ff8e 	bl	8009628 <NVIC_EncodePriority>
 800970c:	4602      	mov	r2, r0
 800970e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009712:	4611      	mov	r1, r2
 8009714:	4618      	mov	r0, r3
 8009716:	f7ff ff5d 	bl	80095d4 <__NVIC_SetPriority>
}
 800971a:	bf00      	nop
 800971c:	3718      	adds	r7, #24
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}

08009722 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009722:	b580      	push	{r7, lr}
 8009724:	b082      	sub	sp, #8
 8009726:	af00      	add	r7, sp, #0
 8009728:	4603      	mov	r3, r0
 800972a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800972c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009730:	4618      	mov	r0, r3
 8009732:	f7ff ff31 	bl	8009598 <__NVIC_EnableIRQ>
}
 8009736:	bf00      	nop
 8009738:	3708      	adds	r7, #8
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}

0800973e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800973e:	b580      	push	{r7, lr}
 8009740:	b082      	sub	sp, #8
 8009742:	af00      	add	r7, sp, #0
 8009744:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f7ff ffa2 	bl	8009690 <SysTick_Config>
 800974c:	4603      	mov	r3, r0
}
 800974e:	4618      	mov	r0, r3
 8009750:	3708      	adds	r7, #8
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
	...

08009758 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b086      	sub	sp, #24
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009760:	2300      	movs	r3, #0
 8009762:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009764:	f7ff fab4 	bl	8008cd0 <HAL_GetTick>
 8009768:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d101      	bne.n	8009774 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8009770:	2301      	movs	r3, #1
 8009772:	e099      	b.n	80098a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2202      	movs	r2, #2
 8009780:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	681a      	ldr	r2, [r3, #0]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f022 0201 	bic.w	r2, r2, #1
 8009792:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009794:	e00f      	b.n	80097b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009796:	f7ff fa9b 	bl	8008cd0 <HAL_GetTick>
 800979a:	4602      	mov	r2, r0
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	1ad3      	subs	r3, r2, r3
 80097a0:	2b05      	cmp	r3, #5
 80097a2:	d908      	bls.n	80097b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2220      	movs	r2, #32
 80097a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2203      	movs	r2, #3
 80097ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80097b2:	2303      	movs	r3, #3
 80097b4:	e078      	b.n	80098a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f003 0301 	and.w	r3, r3, #1
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d1e8      	bne.n	8009796 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80097cc:	697a      	ldr	r2, [r7, #20]
 80097ce:	4b38      	ldr	r3, [pc, #224]	; (80098b0 <HAL_DMA_Init+0x158>)
 80097d0:	4013      	ands	r3, r2
 80097d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	685a      	ldr	r2, [r3, #4]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80097e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	691b      	ldr	r3, [r3, #16]
 80097e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80097ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	699b      	ldr	r3, [r3, #24]
 80097f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80097fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6a1b      	ldr	r3, [r3, #32]
 8009800:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009802:	697a      	ldr	r2, [r7, #20]
 8009804:	4313      	orrs	r3, r2
 8009806:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800980c:	2b04      	cmp	r3, #4
 800980e:	d107      	bne.n	8009820 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009818:	4313      	orrs	r3, r2
 800981a:	697a      	ldr	r2, [r7, #20]
 800981c:	4313      	orrs	r3, r2
 800981e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	697a      	ldr	r2, [r7, #20]
 8009826:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	695b      	ldr	r3, [r3, #20]
 800982e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	f023 0307 	bic.w	r3, r3, #7
 8009836:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800983c:	697a      	ldr	r2, [r7, #20]
 800983e:	4313      	orrs	r3, r2
 8009840:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009846:	2b04      	cmp	r3, #4
 8009848:	d117      	bne.n	800987a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800984e:	697a      	ldr	r2, [r7, #20]
 8009850:	4313      	orrs	r3, r2
 8009852:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009858:	2b00      	cmp	r3, #0
 800985a:	d00e      	beq.n	800987a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f000 fa9d 	bl	8009d9c <DMA_CheckFifoParam>
 8009862:	4603      	mov	r3, r0
 8009864:	2b00      	cmp	r3, #0
 8009866:	d008      	beq.n	800987a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2240      	movs	r2, #64	; 0x40
 800986c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2201      	movs	r2, #1
 8009872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8009876:	2301      	movs	r3, #1
 8009878:	e016      	b.n	80098a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	697a      	ldr	r2, [r7, #20]
 8009880:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f000 fa54 	bl	8009d30 <DMA_CalcBaseAndBitshift>
 8009888:	4603      	mov	r3, r0
 800988a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009890:	223f      	movs	r2, #63	; 0x3f
 8009892:	409a      	lsls	r2, r3
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2200      	movs	r2, #0
 800989c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2201      	movs	r2, #1
 80098a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80098a6:	2300      	movs	r3, #0
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3718      	adds	r7, #24
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}
 80098b0:	f010803f 	.word	0xf010803f

080098b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b086      	sub	sp, #24
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	60f8      	str	r0, [r7, #12]
 80098bc:	60b9      	str	r1, [r7, #8]
 80098be:	607a      	str	r2, [r7, #4]
 80098c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80098c2:	2300      	movs	r3, #0
 80098c4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098ca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80098d2:	2b01      	cmp	r3, #1
 80098d4:	d101      	bne.n	80098da <HAL_DMA_Start_IT+0x26>
 80098d6:	2302      	movs	r3, #2
 80098d8:	e040      	b.n	800995c <HAL_DMA_Start_IT+0xa8>
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	2201      	movs	r2, #1
 80098de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80098e8:	b2db      	uxtb	r3, r3
 80098ea:	2b01      	cmp	r3, #1
 80098ec:	d12f      	bne.n	800994e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2202      	movs	r2, #2
 80098f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	2200      	movs	r2, #0
 80098fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	687a      	ldr	r2, [r7, #4]
 8009900:	68b9      	ldr	r1, [r7, #8]
 8009902:	68f8      	ldr	r0, [r7, #12]
 8009904:	f000 f9e6 	bl	8009cd4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800990c:	223f      	movs	r2, #63	; 0x3f
 800990e:	409a      	lsls	r2, r3
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	681a      	ldr	r2, [r3, #0]
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f042 0216 	orr.w	r2, r2, #22
 8009922:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009928:	2b00      	cmp	r3, #0
 800992a:	d007      	beq.n	800993c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	681a      	ldr	r2, [r3, #0]
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f042 0208 	orr.w	r2, r2, #8
 800993a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	681a      	ldr	r2, [r3, #0]
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f042 0201 	orr.w	r2, r2, #1
 800994a:	601a      	str	r2, [r3, #0]
 800994c:	e005      	b.n	800995a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2200      	movs	r2, #0
 8009952:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8009956:	2302      	movs	r3, #2
 8009958:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800995a:	7dfb      	ldrb	r3, [r7, #23]
}
 800995c:	4618      	mov	r0, r3
 800995e:	3718      	adds	r7, #24
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}

08009964 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009964:	b480      	push	{r7}
 8009966:	b083      	sub	sp, #12
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009972:	b2db      	uxtb	r3, r3
 8009974:	2b02      	cmp	r3, #2
 8009976:	d004      	beq.n	8009982 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2280      	movs	r2, #128	; 0x80
 800997c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800997e:	2301      	movs	r3, #1
 8009980:	e00c      	b.n	800999c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2205      	movs	r2, #5
 8009986:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	681a      	ldr	r2, [r3, #0]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f022 0201 	bic.w	r2, r2, #1
 8009998:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800999a:	2300      	movs	r3, #0
}
 800999c:	4618      	mov	r0, r3
 800999e:	370c      	adds	r7, #12
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr

080099a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b086      	sub	sp, #24
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80099b0:	2300      	movs	r3, #0
 80099b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80099b4:	4b92      	ldr	r3, [pc, #584]	; (8009c00 <HAL_DMA_IRQHandler+0x258>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	4a92      	ldr	r2, [pc, #584]	; (8009c04 <HAL_DMA_IRQHandler+0x25c>)
 80099ba:	fba2 2303 	umull	r2, r3, r2, r3
 80099be:	0a9b      	lsrs	r3, r3, #10
 80099c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099d2:	2208      	movs	r2, #8
 80099d4:	409a      	lsls	r2, r3
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	4013      	ands	r3, r2
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d01a      	beq.n	8009a14 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f003 0304 	and.w	r3, r3, #4
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d013      	beq.n	8009a14 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	681a      	ldr	r2, [r3, #0]
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f022 0204 	bic.w	r2, r2, #4
 80099fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a00:	2208      	movs	r2, #8
 8009a02:	409a      	lsls	r2, r3
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a0c:	f043 0201 	orr.w	r2, r3, #1
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a18:	2201      	movs	r2, #1
 8009a1a:	409a      	lsls	r2, r3
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	4013      	ands	r3, r2
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d012      	beq.n	8009a4a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	695b      	ldr	r3, [r3, #20]
 8009a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d00b      	beq.n	8009a4a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a36:	2201      	movs	r2, #1
 8009a38:	409a      	lsls	r2, r3
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a42:	f043 0202 	orr.w	r2, r3, #2
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a4e:	2204      	movs	r2, #4
 8009a50:	409a      	lsls	r2, r3
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	4013      	ands	r3, r2
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d012      	beq.n	8009a80 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f003 0302 	and.w	r3, r3, #2
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d00b      	beq.n	8009a80 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a6c:	2204      	movs	r2, #4
 8009a6e:	409a      	lsls	r2, r3
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a78:	f043 0204 	orr.w	r2, r3, #4
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a84:	2210      	movs	r2, #16
 8009a86:	409a      	lsls	r2, r3
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	4013      	ands	r3, r2
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d043      	beq.n	8009b18 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f003 0308 	and.w	r3, r3, #8
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d03c      	beq.n	8009b18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009aa2:	2210      	movs	r2, #16
 8009aa4:	409a      	lsls	r2, r3
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d018      	beq.n	8009aea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d108      	bne.n	8009ad8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d024      	beq.n	8009b18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	4798      	blx	r3
 8009ad6:	e01f      	b.n	8009b18 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d01b      	beq.n	8009b18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	4798      	blx	r3
 8009ae8:	e016      	b.n	8009b18 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d107      	bne.n	8009b08 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f022 0208 	bic.w	r2, r2, #8
 8009b06:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d003      	beq.n	8009b18 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b1c:	2220      	movs	r2, #32
 8009b1e:	409a      	lsls	r2, r3
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	4013      	ands	r3, r2
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	f000 808e 	beq.w	8009c46 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f003 0310 	and.w	r3, r3, #16
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	f000 8086 	beq.w	8009c46 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b3e:	2220      	movs	r2, #32
 8009b40:	409a      	lsls	r2, r3
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009b4c:	b2db      	uxtb	r3, r3
 8009b4e:	2b05      	cmp	r3, #5
 8009b50:	d136      	bne.n	8009bc0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	681a      	ldr	r2, [r3, #0]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f022 0216 	bic.w	r2, r2, #22
 8009b60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	695a      	ldr	r2, [r3, #20]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009b70:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d103      	bne.n	8009b82 <HAL_DMA_IRQHandler+0x1da>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d007      	beq.n	8009b92 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	681a      	ldr	r2, [r3, #0]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f022 0208 	bic.w	r2, r2, #8
 8009b90:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b96:	223f      	movs	r2, #63	; 0x3f
 8009b98:	409a      	lsls	r2, r3
 8009b9a:	693b      	ldr	r3, [r7, #16]
 8009b9c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2201      	movs	r2, #1
 8009baa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d07d      	beq.n	8009cb2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	4798      	blx	r3
        }
        return;
 8009bbe:	e078      	b.n	8009cb2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d01c      	beq.n	8009c08 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d108      	bne.n	8009bee <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d030      	beq.n	8009c46 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	4798      	blx	r3
 8009bec:	e02b      	b.n	8009c46 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d027      	beq.n	8009c46 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	4798      	blx	r3
 8009bfe:	e022      	b.n	8009c46 <HAL_DMA_IRQHandler+0x29e>
 8009c00:	20000000 	.word	0x20000000
 8009c04:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d10f      	bne.n	8009c36 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	681a      	ldr	r2, [r3, #0]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f022 0210 	bic.w	r2, r2, #16
 8009c24:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2201      	movs	r2, #1
 8009c32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d003      	beq.n	8009c46 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d032      	beq.n	8009cb4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c52:	f003 0301 	and.w	r3, r3, #1
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d022      	beq.n	8009ca0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2205      	movs	r2, #5
 8009c5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	681a      	ldr	r2, [r3, #0]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f022 0201 	bic.w	r2, r2, #1
 8009c70:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	3301      	adds	r3, #1
 8009c76:	60bb      	str	r3, [r7, #8]
 8009c78:	697a      	ldr	r2, [r7, #20]
 8009c7a:	429a      	cmp	r2, r3
 8009c7c:	d307      	bcc.n	8009c8e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f003 0301 	and.w	r3, r3, #1
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d1f2      	bne.n	8009c72 <HAL_DMA_IRQHandler+0x2ca>
 8009c8c:	e000      	b.n	8009c90 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8009c8e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2200      	movs	r2, #0
 8009c94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d005      	beq.n	8009cb4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	4798      	blx	r3
 8009cb0:	e000      	b.n	8009cb4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8009cb2:	bf00      	nop
    }
  }
}
 8009cb4:	3718      	adds	r7, #24
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}
 8009cba:	bf00      	nop

08009cbc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b083      	sub	sp, #12
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	370c      	adds	r7, #12
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd2:	4770      	bx	lr

08009cd4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b085      	sub	sp, #20
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	60f8      	str	r0, [r7, #12]
 8009cdc:	60b9      	str	r1, [r7, #8]
 8009cde:	607a      	str	r2, [r7, #4]
 8009ce0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	681a      	ldr	r2, [r3, #0]
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009cf0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	683a      	ldr	r2, [r7, #0]
 8009cf8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	689b      	ldr	r3, [r3, #8]
 8009cfe:	2b40      	cmp	r3, #64	; 0x40
 8009d00:	d108      	bne.n	8009d14 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	687a      	ldr	r2, [r7, #4]
 8009d08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	68ba      	ldr	r2, [r7, #8]
 8009d10:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8009d12:	e007      	b.n	8009d24 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	68ba      	ldr	r2, [r7, #8]
 8009d1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	687a      	ldr	r2, [r7, #4]
 8009d22:	60da      	str	r2, [r3, #12]
}
 8009d24:	bf00      	nop
 8009d26:	3714      	adds	r7, #20
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2e:	4770      	bx	lr

08009d30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b085      	sub	sp, #20
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	b2db      	uxtb	r3, r3
 8009d3e:	3b10      	subs	r3, #16
 8009d40:	4a14      	ldr	r2, [pc, #80]	; (8009d94 <DMA_CalcBaseAndBitshift+0x64>)
 8009d42:	fba2 2303 	umull	r2, r3, r2, r3
 8009d46:	091b      	lsrs	r3, r3, #4
 8009d48:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8009d4a:	4a13      	ldr	r2, [pc, #76]	; (8009d98 <DMA_CalcBaseAndBitshift+0x68>)
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	4413      	add	r3, r2
 8009d50:	781b      	ldrb	r3, [r3, #0]
 8009d52:	461a      	mov	r2, r3
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	2b03      	cmp	r3, #3
 8009d5c:	d909      	bls.n	8009d72 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009d66:	f023 0303 	bic.w	r3, r3, #3
 8009d6a:	1d1a      	adds	r2, r3, #4
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	659a      	str	r2, [r3, #88]	; 0x58
 8009d70:	e007      	b.n	8009d82 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009d7a:	f023 0303 	bic.w	r3, r3, #3
 8009d7e:	687a      	ldr	r2, [r7, #4]
 8009d80:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3714      	adds	r7, #20
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d90:	4770      	bx	lr
 8009d92:	bf00      	nop
 8009d94:	aaaaaaab 	.word	0xaaaaaaab
 8009d98:	0801915c 	.word	0x0801915c

08009d9c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b085      	sub	sp, #20
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009da4:	2300      	movs	r3, #0
 8009da6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	699b      	ldr	r3, [r3, #24]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d11f      	bne.n	8009df6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	2b03      	cmp	r3, #3
 8009dba:	d855      	bhi.n	8009e68 <DMA_CheckFifoParam+0xcc>
 8009dbc:	a201      	add	r2, pc, #4	; (adr r2, 8009dc4 <DMA_CheckFifoParam+0x28>)
 8009dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dc2:	bf00      	nop
 8009dc4:	08009dd5 	.word	0x08009dd5
 8009dc8:	08009de7 	.word	0x08009de7
 8009dcc:	08009dd5 	.word	0x08009dd5
 8009dd0:	08009e69 	.word	0x08009e69
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d045      	beq.n	8009e6c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8009de0:	2301      	movs	r3, #1
 8009de2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009de4:	e042      	b.n	8009e6c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009dee:	d13f      	bne.n	8009e70 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8009df0:	2301      	movs	r3, #1
 8009df2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009df4:	e03c      	b.n	8009e70 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	699b      	ldr	r3, [r3, #24]
 8009dfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009dfe:	d121      	bne.n	8009e44 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	2b03      	cmp	r3, #3
 8009e04:	d836      	bhi.n	8009e74 <DMA_CheckFifoParam+0xd8>
 8009e06:	a201      	add	r2, pc, #4	; (adr r2, 8009e0c <DMA_CheckFifoParam+0x70>)
 8009e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e0c:	08009e1d 	.word	0x08009e1d
 8009e10:	08009e23 	.word	0x08009e23
 8009e14:	08009e1d 	.word	0x08009e1d
 8009e18:	08009e35 	.word	0x08009e35
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	73fb      	strb	r3, [r7, #15]
      break;
 8009e20:	e02f      	b.n	8009e82 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d024      	beq.n	8009e78 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8009e2e:	2301      	movs	r3, #1
 8009e30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009e32:	e021      	b.n	8009e78 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e38:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009e3c:	d11e      	bne.n	8009e7c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8009e3e:	2301      	movs	r3, #1
 8009e40:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8009e42:	e01b      	b.n	8009e7c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	2b02      	cmp	r3, #2
 8009e48:	d902      	bls.n	8009e50 <DMA_CheckFifoParam+0xb4>
 8009e4a:	2b03      	cmp	r3, #3
 8009e4c:	d003      	beq.n	8009e56 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8009e4e:	e018      	b.n	8009e82 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8009e50:	2301      	movs	r3, #1
 8009e52:	73fb      	strb	r3, [r7, #15]
      break;
 8009e54:	e015      	b.n	8009e82 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d00e      	beq.n	8009e80 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8009e62:	2301      	movs	r3, #1
 8009e64:	73fb      	strb	r3, [r7, #15]
      break;
 8009e66:	e00b      	b.n	8009e80 <DMA_CheckFifoParam+0xe4>
      break;
 8009e68:	bf00      	nop
 8009e6a:	e00a      	b.n	8009e82 <DMA_CheckFifoParam+0xe6>
      break;
 8009e6c:	bf00      	nop
 8009e6e:	e008      	b.n	8009e82 <DMA_CheckFifoParam+0xe6>
      break;
 8009e70:	bf00      	nop
 8009e72:	e006      	b.n	8009e82 <DMA_CheckFifoParam+0xe6>
      break;
 8009e74:	bf00      	nop
 8009e76:	e004      	b.n	8009e82 <DMA_CheckFifoParam+0xe6>
      break;
 8009e78:	bf00      	nop
 8009e7a:	e002      	b.n	8009e82 <DMA_CheckFifoParam+0xe6>
      break;   
 8009e7c:	bf00      	nop
 8009e7e:	e000      	b.n	8009e82 <DMA_CheckFifoParam+0xe6>
      break;
 8009e80:	bf00      	nop
    }
  } 
  
  return status; 
 8009e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	3714      	adds	r7, #20
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8e:	4770      	bx	lr

08009e90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b089      	sub	sp, #36	; 0x24
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
 8009e98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	61fb      	str	r3, [r7, #28]
 8009eaa:	e177      	b.n	800a19c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009eac:	2201      	movs	r2, #1
 8009eae:	69fb      	ldr	r3, [r7, #28]
 8009eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8009eb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	697a      	ldr	r2, [r7, #20]
 8009ebc:	4013      	ands	r3, r2
 8009ebe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009ec0:	693a      	ldr	r2, [r7, #16]
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	f040 8166 	bne.w	800a196 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	2b01      	cmp	r3, #1
 8009ed0:	d00b      	beq.n	8009eea <HAL_GPIO_Init+0x5a>
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	685b      	ldr	r3, [r3, #4]
 8009ed6:	2b02      	cmp	r3, #2
 8009ed8:	d007      	beq.n	8009eea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009ede:	2b11      	cmp	r3, #17
 8009ee0:	d003      	beq.n	8009eea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	685b      	ldr	r3, [r3, #4]
 8009ee6:	2b12      	cmp	r3, #18
 8009ee8:	d130      	bne.n	8009f4c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	689b      	ldr	r3, [r3, #8]
 8009eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009ef0:	69fb      	ldr	r3, [r7, #28]
 8009ef2:	005b      	lsls	r3, r3, #1
 8009ef4:	2203      	movs	r2, #3
 8009ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8009efa:	43db      	mvns	r3, r3
 8009efc:	69ba      	ldr	r2, [r7, #24]
 8009efe:	4013      	ands	r3, r2
 8009f00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	68da      	ldr	r2, [r3, #12]
 8009f06:	69fb      	ldr	r3, [r7, #28]
 8009f08:	005b      	lsls	r3, r3, #1
 8009f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8009f0e:	69ba      	ldr	r2, [r7, #24]
 8009f10:	4313      	orrs	r3, r2
 8009f12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	69ba      	ldr	r2, [r7, #24]
 8009f18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009f20:	2201      	movs	r2, #1
 8009f22:	69fb      	ldr	r3, [r7, #28]
 8009f24:	fa02 f303 	lsl.w	r3, r2, r3
 8009f28:	43db      	mvns	r3, r3
 8009f2a:	69ba      	ldr	r2, [r7, #24]
 8009f2c:	4013      	ands	r3, r2
 8009f2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	685b      	ldr	r3, [r3, #4]
 8009f34:	091b      	lsrs	r3, r3, #4
 8009f36:	f003 0201 	and.w	r2, r3, #1
 8009f3a:	69fb      	ldr	r3, [r7, #28]
 8009f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8009f40:	69ba      	ldr	r2, [r7, #24]
 8009f42:	4313      	orrs	r3, r2
 8009f44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	69ba      	ldr	r2, [r7, #24]
 8009f4a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	68db      	ldr	r3, [r3, #12]
 8009f50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009f52:	69fb      	ldr	r3, [r7, #28]
 8009f54:	005b      	lsls	r3, r3, #1
 8009f56:	2203      	movs	r2, #3
 8009f58:	fa02 f303 	lsl.w	r3, r2, r3
 8009f5c:	43db      	mvns	r3, r3
 8009f5e:	69ba      	ldr	r2, [r7, #24]
 8009f60:	4013      	ands	r3, r2
 8009f62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	689a      	ldr	r2, [r3, #8]
 8009f68:	69fb      	ldr	r3, [r7, #28]
 8009f6a:	005b      	lsls	r3, r3, #1
 8009f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8009f70:	69ba      	ldr	r2, [r7, #24]
 8009f72:	4313      	orrs	r3, r2
 8009f74:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	69ba      	ldr	r2, [r7, #24]
 8009f7a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	2b02      	cmp	r3, #2
 8009f82:	d003      	beq.n	8009f8c <HAL_GPIO_Init+0xfc>
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	685b      	ldr	r3, [r3, #4]
 8009f88:	2b12      	cmp	r3, #18
 8009f8a:	d123      	bne.n	8009fd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009f8c:	69fb      	ldr	r3, [r7, #28]
 8009f8e:	08da      	lsrs	r2, r3, #3
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	3208      	adds	r2, #8
 8009f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009f9a:	69fb      	ldr	r3, [r7, #28]
 8009f9c:	f003 0307 	and.w	r3, r3, #7
 8009fa0:	009b      	lsls	r3, r3, #2
 8009fa2:	220f      	movs	r2, #15
 8009fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8009fa8:	43db      	mvns	r3, r3
 8009faa:	69ba      	ldr	r2, [r7, #24]
 8009fac:	4013      	ands	r3, r2
 8009fae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	691a      	ldr	r2, [r3, #16]
 8009fb4:	69fb      	ldr	r3, [r7, #28]
 8009fb6:	f003 0307 	and.w	r3, r3, #7
 8009fba:	009b      	lsls	r3, r3, #2
 8009fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8009fc0:	69ba      	ldr	r2, [r7, #24]
 8009fc2:	4313      	orrs	r3, r2
 8009fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009fc6:	69fb      	ldr	r3, [r7, #28]
 8009fc8:	08da      	lsrs	r2, r3, #3
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	3208      	adds	r2, #8
 8009fce:	69b9      	ldr	r1, [r7, #24]
 8009fd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009fda:	69fb      	ldr	r3, [r7, #28]
 8009fdc:	005b      	lsls	r3, r3, #1
 8009fde:	2203      	movs	r2, #3
 8009fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8009fe4:	43db      	mvns	r3, r3
 8009fe6:	69ba      	ldr	r2, [r7, #24]
 8009fe8:	4013      	ands	r3, r2
 8009fea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	685b      	ldr	r3, [r3, #4]
 8009ff0:	f003 0203 	and.w	r2, r3, #3
 8009ff4:	69fb      	ldr	r3, [r7, #28]
 8009ff6:	005b      	lsls	r3, r3, #1
 8009ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8009ffc:	69ba      	ldr	r2, [r7, #24]
 8009ffe:	4313      	orrs	r3, r2
 800a000:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	69ba      	ldr	r2, [r7, #24]
 800a006:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	685b      	ldr	r3, [r3, #4]
 800a00c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a010:	2b00      	cmp	r3, #0
 800a012:	f000 80c0 	beq.w	800a196 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a016:	2300      	movs	r3, #0
 800a018:	60fb      	str	r3, [r7, #12]
 800a01a:	4b65      	ldr	r3, [pc, #404]	; (800a1b0 <HAL_GPIO_Init+0x320>)
 800a01c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a01e:	4a64      	ldr	r2, [pc, #400]	; (800a1b0 <HAL_GPIO_Init+0x320>)
 800a020:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a024:	6453      	str	r3, [r2, #68]	; 0x44
 800a026:	4b62      	ldr	r3, [pc, #392]	; (800a1b0 <HAL_GPIO_Init+0x320>)
 800a028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a02a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a02e:	60fb      	str	r3, [r7, #12]
 800a030:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a032:	4a60      	ldr	r2, [pc, #384]	; (800a1b4 <HAL_GPIO_Init+0x324>)
 800a034:	69fb      	ldr	r3, [r7, #28]
 800a036:	089b      	lsrs	r3, r3, #2
 800a038:	3302      	adds	r3, #2
 800a03a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a03e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a040:	69fb      	ldr	r3, [r7, #28]
 800a042:	f003 0303 	and.w	r3, r3, #3
 800a046:	009b      	lsls	r3, r3, #2
 800a048:	220f      	movs	r2, #15
 800a04a:	fa02 f303 	lsl.w	r3, r2, r3
 800a04e:	43db      	mvns	r3, r3
 800a050:	69ba      	ldr	r2, [r7, #24]
 800a052:	4013      	ands	r3, r2
 800a054:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	4a57      	ldr	r2, [pc, #348]	; (800a1b8 <HAL_GPIO_Init+0x328>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d037      	beq.n	800a0ce <HAL_GPIO_Init+0x23e>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	4a56      	ldr	r2, [pc, #344]	; (800a1bc <HAL_GPIO_Init+0x32c>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d031      	beq.n	800a0ca <HAL_GPIO_Init+0x23a>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	4a55      	ldr	r2, [pc, #340]	; (800a1c0 <HAL_GPIO_Init+0x330>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d02b      	beq.n	800a0c6 <HAL_GPIO_Init+0x236>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	4a54      	ldr	r2, [pc, #336]	; (800a1c4 <HAL_GPIO_Init+0x334>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d025      	beq.n	800a0c2 <HAL_GPIO_Init+0x232>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	4a53      	ldr	r2, [pc, #332]	; (800a1c8 <HAL_GPIO_Init+0x338>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d01f      	beq.n	800a0be <HAL_GPIO_Init+0x22e>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	4a52      	ldr	r2, [pc, #328]	; (800a1cc <HAL_GPIO_Init+0x33c>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d019      	beq.n	800a0ba <HAL_GPIO_Init+0x22a>
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	4a51      	ldr	r2, [pc, #324]	; (800a1d0 <HAL_GPIO_Init+0x340>)
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d013      	beq.n	800a0b6 <HAL_GPIO_Init+0x226>
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	4a50      	ldr	r2, [pc, #320]	; (800a1d4 <HAL_GPIO_Init+0x344>)
 800a092:	4293      	cmp	r3, r2
 800a094:	d00d      	beq.n	800a0b2 <HAL_GPIO_Init+0x222>
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	4a4f      	ldr	r2, [pc, #316]	; (800a1d8 <HAL_GPIO_Init+0x348>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d007      	beq.n	800a0ae <HAL_GPIO_Init+0x21e>
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	4a4e      	ldr	r2, [pc, #312]	; (800a1dc <HAL_GPIO_Init+0x34c>)
 800a0a2:	4293      	cmp	r3, r2
 800a0a4:	d101      	bne.n	800a0aa <HAL_GPIO_Init+0x21a>
 800a0a6:	2309      	movs	r3, #9
 800a0a8:	e012      	b.n	800a0d0 <HAL_GPIO_Init+0x240>
 800a0aa:	230a      	movs	r3, #10
 800a0ac:	e010      	b.n	800a0d0 <HAL_GPIO_Init+0x240>
 800a0ae:	2308      	movs	r3, #8
 800a0b0:	e00e      	b.n	800a0d0 <HAL_GPIO_Init+0x240>
 800a0b2:	2307      	movs	r3, #7
 800a0b4:	e00c      	b.n	800a0d0 <HAL_GPIO_Init+0x240>
 800a0b6:	2306      	movs	r3, #6
 800a0b8:	e00a      	b.n	800a0d0 <HAL_GPIO_Init+0x240>
 800a0ba:	2305      	movs	r3, #5
 800a0bc:	e008      	b.n	800a0d0 <HAL_GPIO_Init+0x240>
 800a0be:	2304      	movs	r3, #4
 800a0c0:	e006      	b.n	800a0d0 <HAL_GPIO_Init+0x240>
 800a0c2:	2303      	movs	r3, #3
 800a0c4:	e004      	b.n	800a0d0 <HAL_GPIO_Init+0x240>
 800a0c6:	2302      	movs	r3, #2
 800a0c8:	e002      	b.n	800a0d0 <HAL_GPIO_Init+0x240>
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	e000      	b.n	800a0d0 <HAL_GPIO_Init+0x240>
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	69fa      	ldr	r2, [r7, #28]
 800a0d2:	f002 0203 	and.w	r2, r2, #3
 800a0d6:	0092      	lsls	r2, r2, #2
 800a0d8:	4093      	lsls	r3, r2
 800a0da:	69ba      	ldr	r2, [r7, #24]
 800a0dc:	4313      	orrs	r3, r2
 800a0de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a0e0:	4934      	ldr	r1, [pc, #208]	; (800a1b4 <HAL_GPIO_Init+0x324>)
 800a0e2:	69fb      	ldr	r3, [r7, #28]
 800a0e4:	089b      	lsrs	r3, r3, #2
 800a0e6:	3302      	adds	r3, #2
 800a0e8:	69ba      	ldr	r2, [r7, #24]
 800a0ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a0ee:	4b3c      	ldr	r3, [pc, #240]	; (800a1e0 <HAL_GPIO_Init+0x350>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	43db      	mvns	r3, r3
 800a0f8:	69ba      	ldr	r2, [r7, #24]
 800a0fa:	4013      	ands	r3, r2
 800a0fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a106:	2b00      	cmp	r3, #0
 800a108:	d003      	beq.n	800a112 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800a10a:	69ba      	ldr	r2, [r7, #24]
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	4313      	orrs	r3, r2
 800a110:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a112:	4a33      	ldr	r2, [pc, #204]	; (800a1e0 <HAL_GPIO_Init+0x350>)
 800a114:	69bb      	ldr	r3, [r7, #24]
 800a116:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800a118:	4b31      	ldr	r3, [pc, #196]	; (800a1e0 <HAL_GPIO_Init+0x350>)
 800a11a:	685b      	ldr	r3, [r3, #4]
 800a11c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	43db      	mvns	r3, r3
 800a122:	69ba      	ldr	r2, [r7, #24]
 800a124:	4013      	ands	r3, r2
 800a126:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	685b      	ldr	r3, [r3, #4]
 800a12c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a130:	2b00      	cmp	r3, #0
 800a132:	d003      	beq.n	800a13c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800a134:	69ba      	ldr	r2, [r7, #24]
 800a136:	693b      	ldr	r3, [r7, #16]
 800a138:	4313      	orrs	r3, r2
 800a13a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a13c:	4a28      	ldr	r2, [pc, #160]	; (800a1e0 <HAL_GPIO_Init+0x350>)
 800a13e:	69bb      	ldr	r3, [r7, #24]
 800a140:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a142:	4b27      	ldr	r3, [pc, #156]	; (800a1e0 <HAL_GPIO_Init+0x350>)
 800a144:	689b      	ldr	r3, [r3, #8]
 800a146:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	43db      	mvns	r3, r3
 800a14c:	69ba      	ldr	r2, [r7, #24]
 800a14e:	4013      	ands	r3, r2
 800a150:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d003      	beq.n	800a166 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800a15e:	69ba      	ldr	r2, [r7, #24]
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	4313      	orrs	r3, r2
 800a164:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a166:	4a1e      	ldr	r2, [pc, #120]	; (800a1e0 <HAL_GPIO_Init+0x350>)
 800a168:	69bb      	ldr	r3, [r7, #24]
 800a16a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a16c:	4b1c      	ldr	r3, [pc, #112]	; (800a1e0 <HAL_GPIO_Init+0x350>)
 800a16e:	68db      	ldr	r3, [r3, #12]
 800a170:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	43db      	mvns	r3, r3
 800a176:	69ba      	ldr	r2, [r7, #24]
 800a178:	4013      	ands	r3, r2
 800a17a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	685b      	ldr	r3, [r3, #4]
 800a180:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a184:	2b00      	cmp	r3, #0
 800a186:	d003      	beq.n	800a190 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800a188:	69ba      	ldr	r2, [r7, #24]
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	4313      	orrs	r3, r2
 800a18e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a190:	4a13      	ldr	r2, [pc, #76]	; (800a1e0 <HAL_GPIO_Init+0x350>)
 800a192:	69bb      	ldr	r3, [r7, #24]
 800a194:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a196:	69fb      	ldr	r3, [r7, #28]
 800a198:	3301      	adds	r3, #1
 800a19a:	61fb      	str	r3, [r7, #28]
 800a19c:	69fb      	ldr	r3, [r7, #28]
 800a19e:	2b0f      	cmp	r3, #15
 800a1a0:	f67f ae84 	bls.w	8009eac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800a1a4:	bf00      	nop
 800a1a6:	3724      	adds	r7, #36	; 0x24
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ae:	4770      	bx	lr
 800a1b0:	40023800 	.word	0x40023800
 800a1b4:	40013800 	.word	0x40013800
 800a1b8:	40020000 	.word	0x40020000
 800a1bc:	40020400 	.word	0x40020400
 800a1c0:	40020800 	.word	0x40020800
 800a1c4:	40020c00 	.word	0x40020c00
 800a1c8:	40021000 	.word	0x40021000
 800a1cc:	40021400 	.word	0x40021400
 800a1d0:	40021800 	.word	0x40021800
 800a1d4:	40021c00 	.word	0x40021c00
 800a1d8:	40022000 	.word	0x40022000
 800a1dc:	40022400 	.word	0x40022400
 800a1e0:	40013c00 	.word	0x40013c00

0800a1e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b085      	sub	sp, #20
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	460b      	mov	r3, r1
 800a1ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	691a      	ldr	r2, [r3, #16]
 800a1f4:	887b      	ldrh	r3, [r7, #2]
 800a1f6:	4013      	ands	r3, r2
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d002      	beq.n	800a202 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	73fb      	strb	r3, [r7, #15]
 800a200:	e001      	b.n	800a206 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a202:	2300      	movs	r3, #0
 800a204:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a206:	7bfb      	ldrb	r3, [r7, #15]
}
 800a208:	4618      	mov	r0, r3
 800a20a:	3714      	adds	r7, #20
 800a20c:	46bd      	mov	sp, r7
 800a20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a212:	4770      	bx	lr

0800a214 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a214:	b480      	push	{r7}
 800a216:	b083      	sub	sp, #12
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
 800a21c:	460b      	mov	r3, r1
 800a21e:	807b      	strh	r3, [r7, #2]
 800a220:	4613      	mov	r3, r2
 800a222:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a224:	787b      	ldrb	r3, [r7, #1]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d003      	beq.n	800a232 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a22a:	887a      	ldrh	r2, [r7, #2]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800a230:	e003      	b.n	800a23a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800a232:	887b      	ldrh	r3, [r7, #2]
 800a234:	041a      	lsls	r2, r3, #16
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	619a      	str	r2, [r3, #24]
}
 800a23a:	bf00      	nop
 800a23c:	370c      	adds	r7, #12
 800a23e:	46bd      	mov	sp, r7
 800a240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a244:	4770      	bx	lr
	...

0800a248 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b084      	sub	sp, #16
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d101      	bne.n	800a25a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a256:	2301      	movs	r3, #1
 800a258:	e11f      	b.n	800a49a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a260:	b2db      	uxtb	r3, r3
 800a262:	2b00      	cmp	r3, #0
 800a264:	d106      	bne.n	800a274 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2200      	movs	r2, #0
 800a26a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f7fc fa2a 	bl	80066c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2224      	movs	r2, #36	; 0x24
 800a278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	681a      	ldr	r2, [r3, #0]
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f022 0201 	bic.w	r2, r2, #1
 800a28a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	681a      	ldr	r2, [r3, #0]
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a29a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	681a      	ldr	r2, [r3, #0]
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a2aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a2ac:	f001 f96e 	bl	800b58c <HAL_RCC_GetPCLK1Freq>
 800a2b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	685b      	ldr	r3, [r3, #4]
 800a2b6:	4a7b      	ldr	r2, [pc, #492]	; (800a4a4 <HAL_I2C_Init+0x25c>)
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d807      	bhi.n	800a2cc <HAL_I2C_Init+0x84>
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	4a7a      	ldr	r2, [pc, #488]	; (800a4a8 <HAL_I2C_Init+0x260>)
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	bf94      	ite	ls
 800a2c4:	2301      	movls	r3, #1
 800a2c6:	2300      	movhi	r3, #0
 800a2c8:	b2db      	uxtb	r3, r3
 800a2ca:	e006      	b.n	800a2da <HAL_I2C_Init+0x92>
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	4a77      	ldr	r2, [pc, #476]	; (800a4ac <HAL_I2C_Init+0x264>)
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	bf94      	ite	ls
 800a2d4:	2301      	movls	r3, #1
 800a2d6:	2300      	movhi	r3, #0
 800a2d8:	b2db      	uxtb	r3, r3
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d001      	beq.n	800a2e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a2de:	2301      	movs	r3, #1
 800a2e0:	e0db      	b.n	800a49a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	4a72      	ldr	r2, [pc, #456]	; (800a4b0 <HAL_I2C_Init+0x268>)
 800a2e6:	fba2 2303 	umull	r2, r3, r2, r3
 800a2ea:	0c9b      	lsrs	r3, r3, #18
 800a2ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	685b      	ldr	r3, [r3, #4]
 800a2f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	68ba      	ldr	r2, [r7, #8]
 800a2fe:	430a      	orrs	r2, r1
 800a300:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	6a1b      	ldr	r3, [r3, #32]
 800a308:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	4a64      	ldr	r2, [pc, #400]	; (800a4a4 <HAL_I2C_Init+0x25c>)
 800a312:	4293      	cmp	r3, r2
 800a314:	d802      	bhi.n	800a31c <HAL_I2C_Init+0xd4>
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	3301      	adds	r3, #1
 800a31a:	e009      	b.n	800a330 <HAL_I2C_Init+0xe8>
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800a322:	fb02 f303 	mul.w	r3, r2, r3
 800a326:	4a63      	ldr	r2, [pc, #396]	; (800a4b4 <HAL_I2C_Init+0x26c>)
 800a328:	fba2 2303 	umull	r2, r3, r2, r3
 800a32c:	099b      	lsrs	r3, r3, #6
 800a32e:	3301      	adds	r3, #1
 800a330:	687a      	ldr	r2, [r7, #4]
 800a332:	6812      	ldr	r2, [r2, #0]
 800a334:	430b      	orrs	r3, r1
 800a336:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	69db      	ldr	r3, [r3, #28]
 800a33e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800a342:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	685b      	ldr	r3, [r3, #4]
 800a34a:	4956      	ldr	r1, [pc, #344]	; (800a4a4 <HAL_I2C_Init+0x25c>)
 800a34c:	428b      	cmp	r3, r1
 800a34e:	d80d      	bhi.n	800a36c <HAL_I2C_Init+0x124>
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	1e59      	subs	r1, r3, #1
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	685b      	ldr	r3, [r3, #4]
 800a358:	005b      	lsls	r3, r3, #1
 800a35a:	fbb1 f3f3 	udiv	r3, r1, r3
 800a35e:	3301      	adds	r3, #1
 800a360:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a364:	2b04      	cmp	r3, #4
 800a366:	bf38      	it	cc
 800a368:	2304      	movcc	r3, #4
 800a36a:	e04f      	b.n	800a40c <HAL_I2C_Init+0x1c4>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	689b      	ldr	r3, [r3, #8]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d111      	bne.n	800a398 <HAL_I2C_Init+0x150>
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	1e58      	subs	r0, r3, #1
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6859      	ldr	r1, [r3, #4]
 800a37c:	460b      	mov	r3, r1
 800a37e:	005b      	lsls	r3, r3, #1
 800a380:	440b      	add	r3, r1
 800a382:	fbb0 f3f3 	udiv	r3, r0, r3
 800a386:	3301      	adds	r3, #1
 800a388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	bf0c      	ite	eq
 800a390:	2301      	moveq	r3, #1
 800a392:	2300      	movne	r3, #0
 800a394:	b2db      	uxtb	r3, r3
 800a396:	e012      	b.n	800a3be <HAL_I2C_Init+0x176>
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	1e58      	subs	r0, r3, #1
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6859      	ldr	r1, [r3, #4]
 800a3a0:	460b      	mov	r3, r1
 800a3a2:	009b      	lsls	r3, r3, #2
 800a3a4:	440b      	add	r3, r1
 800a3a6:	0099      	lsls	r1, r3, #2
 800a3a8:	440b      	add	r3, r1
 800a3aa:	fbb0 f3f3 	udiv	r3, r0, r3
 800a3ae:	3301      	adds	r3, #1
 800a3b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	bf0c      	ite	eq
 800a3b8:	2301      	moveq	r3, #1
 800a3ba:	2300      	movne	r3, #0
 800a3bc:	b2db      	uxtb	r3, r3
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d001      	beq.n	800a3c6 <HAL_I2C_Init+0x17e>
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	e022      	b.n	800a40c <HAL_I2C_Init+0x1c4>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	689b      	ldr	r3, [r3, #8]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d10e      	bne.n	800a3ec <HAL_I2C_Init+0x1a4>
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	1e58      	subs	r0, r3, #1
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6859      	ldr	r1, [r3, #4]
 800a3d6:	460b      	mov	r3, r1
 800a3d8:	005b      	lsls	r3, r3, #1
 800a3da:	440b      	add	r3, r1
 800a3dc:	fbb0 f3f3 	udiv	r3, r0, r3
 800a3e0:	3301      	adds	r3, #1
 800a3e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a3e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3ea:	e00f      	b.n	800a40c <HAL_I2C_Init+0x1c4>
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	1e58      	subs	r0, r3, #1
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6859      	ldr	r1, [r3, #4]
 800a3f4:	460b      	mov	r3, r1
 800a3f6:	009b      	lsls	r3, r3, #2
 800a3f8:	440b      	add	r3, r1
 800a3fa:	0099      	lsls	r1, r3, #2
 800a3fc:	440b      	add	r3, r1
 800a3fe:	fbb0 f3f3 	udiv	r3, r0, r3
 800a402:	3301      	adds	r3, #1
 800a404:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a408:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a40c:	6879      	ldr	r1, [r7, #4]
 800a40e:	6809      	ldr	r1, [r1, #0]
 800a410:	4313      	orrs	r3, r2
 800a412:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	69da      	ldr	r2, [r3, #28]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6a1b      	ldr	r3, [r3, #32]
 800a426:	431a      	orrs	r2, r3
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	430a      	orrs	r2, r1
 800a42e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	689b      	ldr	r3, [r3, #8]
 800a436:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800a43a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a43e:	687a      	ldr	r2, [r7, #4]
 800a440:	6911      	ldr	r1, [r2, #16]
 800a442:	687a      	ldr	r2, [r7, #4]
 800a444:	68d2      	ldr	r2, [r2, #12]
 800a446:	4311      	orrs	r1, r2
 800a448:	687a      	ldr	r2, [r7, #4]
 800a44a:	6812      	ldr	r2, [r2, #0]
 800a44c:	430b      	orrs	r3, r1
 800a44e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	68db      	ldr	r3, [r3, #12]
 800a456:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	695a      	ldr	r2, [r3, #20]
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	699b      	ldr	r3, [r3, #24]
 800a462:	431a      	orrs	r2, r3
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	430a      	orrs	r2, r1
 800a46a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	681a      	ldr	r2, [r3, #0]
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f042 0201 	orr.w	r2, r2, #1
 800a47a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2200      	movs	r2, #0
 800a480:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2220      	movs	r2, #32
 800a486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2200      	movs	r2, #0
 800a48e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2200      	movs	r2, #0
 800a494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a498:	2300      	movs	r3, #0
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	3710      	adds	r7, #16
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}
 800a4a2:	bf00      	nop
 800a4a4:	000186a0 	.word	0x000186a0
 800a4a8:	001e847f 	.word	0x001e847f
 800a4ac:	003d08ff 	.word	0x003d08ff
 800a4b0:	431bde83 	.word	0x431bde83
 800a4b4:	10624dd3 	.word	0x10624dd3

0800a4b8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b088      	sub	sp, #32
 800a4bc:	af02      	add	r7, sp, #8
 800a4be:	60f8      	str	r0, [r7, #12]
 800a4c0:	607a      	str	r2, [r7, #4]
 800a4c2:	461a      	mov	r2, r3
 800a4c4:	460b      	mov	r3, r1
 800a4c6:	817b      	strh	r3, [r7, #10]
 800a4c8:	4613      	mov	r3, r2
 800a4ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a4cc:	f7fe fc00 	bl	8008cd0 <HAL_GetTick>
 800a4d0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4d8:	b2db      	uxtb	r3, r3
 800a4da:	2b20      	cmp	r3, #32
 800a4dc:	f040 80e0 	bne.w	800a6a0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a4e0:	697b      	ldr	r3, [r7, #20]
 800a4e2:	9300      	str	r3, [sp, #0]
 800a4e4:	2319      	movs	r3, #25
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	4970      	ldr	r1, [pc, #448]	; (800a6ac <HAL_I2C_Master_Transmit+0x1f4>)
 800a4ea:	68f8      	ldr	r0, [r7, #12]
 800a4ec:	f000 fc58 	bl	800ada0 <I2C_WaitOnFlagUntilTimeout>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d001      	beq.n	800a4fa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800a4f6:	2302      	movs	r3, #2
 800a4f8:	e0d3      	b.n	800a6a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a500:	2b01      	cmp	r3, #1
 800a502:	d101      	bne.n	800a508 <HAL_I2C_Master_Transmit+0x50>
 800a504:	2302      	movs	r3, #2
 800a506:	e0cc      	b.n	800a6a2 <HAL_I2C_Master_Transmit+0x1ea>
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	2201      	movs	r2, #1
 800a50c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f003 0301 	and.w	r3, r3, #1
 800a51a:	2b01      	cmp	r3, #1
 800a51c:	d007      	beq.n	800a52e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	681a      	ldr	r2, [r3, #0]
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f042 0201 	orr.w	r2, r2, #1
 800a52c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	681a      	ldr	r2, [r3, #0]
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a53c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	2221      	movs	r2, #33	; 0x21
 800a542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	2210      	movs	r2, #16
 800a54a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	2200      	movs	r2, #0
 800a552:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	687a      	ldr	r2, [r7, #4]
 800a558:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	893a      	ldrh	r2, [r7, #8]
 800a55e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a564:	b29a      	uxth	r2, r3
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	4a50      	ldr	r2, [pc, #320]	; (800a6b0 <HAL_I2C_Master_Transmit+0x1f8>)
 800a56e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a570:	8979      	ldrh	r1, [r7, #10]
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	6a3a      	ldr	r2, [r7, #32]
 800a576:	68f8      	ldr	r0, [r7, #12]
 800a578:	f000 fac2 	bl	800ab00 <I2C_MasterRequestWrite>
 800a57c:	4603      	mov	r3, r0
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d001      	beq.n	800a586 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800a582:	2301      	movs	r3, #1
 800a584:	e08d      	b.n	800a6a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a586:	2300      	movs	r3, #0
 800a588:	613b      	str	r3, [r7, #16]
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	695b      	ldr	r3, [r3, #20]
 800a590:	613b      	str	r3, [r7, #16]
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	699b      	ldr	r3, [r3, #24]
 800a598:	613b      	str	r3, [r7, #16]
 800a59a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800a59c:	e066      	b.n	800a66c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a59e:	697a      	ldr	r2, [r7, #20]
 800a5a0:	6a39      	ldr	r1, [r7, #32]
 800a5a2:	68f8      	ldr	r0, [r7, #12]
 800a5a4:	f000 fcd2 	bl	800af4c <I2C_WaitOnTXEFlagUntilTimeout>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d00d      	beq.n	800a5ca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5b2:	2b04      	cmp	r3, #4
 800a5b4:	d107      	bne.n	800a5c6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	681a      	ldr	r2, [r3, #0]
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a5c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	e06b      	b.n	800a6a2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ce:	781a      	ldrb	r2, [r3, #0]
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5da:	1c5a      	adds	r2, r3, #1
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5e4:	b29b      	uxth	r3, r3
 800a5e6:	3b01      	subs	r3, #1
 800a5e8:	b29a      	uxth	r2, r3
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5f2:	3b01      	subs	r3, #1
 800a5f4:	b29a      	uxth	r2, r3
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	695b      	ldr	r3, [r3, #20]
 800a600:	f003 0304 	and.w	r3, r3, #4
 800a604:	2b04      	cmp	r3, #4
 800a606:	d11b      	bne.n	800a640 <HAL_I2C_Master_Transmit+0x188>
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d017      	beq.n	800a640 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a614:	781a      	ldrb	r2, [r3, #0]
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a620:	1c5a      	adds	r2, r3, #1
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a62a:	b29b      	uxth	r3, r3
 800a62c:	3b01      	subs	r3, #1
 800a62e:	b29a      	uxth	r2, r3
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a638:	3b01      	subs	r3, #1
 800a63a:	b29a      	uxth	r2, r3
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a640:	697a      	ldr	r2, [r7, #20]
 800a642:	6a39      	ldr	r1, [r7, #32]
 800a644:	68f8      	ldr	r0, [r7, #12]
 800a646:	f000 fcc2 	bl	800afce <I2C_WaitOnBTFFlagUntilTimeout>
 800a64a:	4603      	mov	r3, r0
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d00d      	beq.n	800a66c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a654:	2b04      	cmp	r3, #4
 800a656:	d107      	bne.n	800a668 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	681a      	ldr	r2, [r3, #0]
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a666:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a668:	2301      	movs	r3, #1
 800a66a:	e01a      	b.n	800a6a2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a670:	2b00      	cmp	r3, #0
 800a672:	d194      	bne.n	800a59e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	681a      	ldr	r2, [r3, #0]
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a682:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	2220      	movs	r2, #32
 800a688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	2200      	movs	r2, #0
 800a690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	2200      	movs	r2, #0
 800a698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a69c:	2300      	movs	r3, #0
 800a69e:	e000      	b.n	800a6a2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a6a0:	2302      	movs	r3, #2
  }
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3718      	adds	r7, #24
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}
 800a6aa:	bf00      	nop
 800a6ac:	00100002 	.word	0x00100002
 800a6b0:	ffff0000 	.word	0xffff0000

0800a6b4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b08c      	sub	sp, #48	; 0x30
 800a6b8:	af02      	add	r7, sp, #8
 800a6ba:	60f8      	str	r0, [r7, #12]
 800a6bc:	607a      	str	r2, [r7, #4]
 800a6be:	461a      	mov	r2, r3
 800a6c0:	460b      	mov	r3, r1
 800a6c2:	817b      	strh	r3, [r7, #10]
 800a6c4:	4613      	mov	r3, r2
 800a6c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a6c8:	f7fe fb02 	bl	8008cd0 <HAL_GetTick>
 800a6cc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6d4:	b2db      	uxtb	r3, r3
 800a6d6:	2b20      	cmp	r3, #32
 800a6d8:	f040 820b 	bne.w	800aaf2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6de:	9300      	str	r3, [sp, #0]
 800a6e0:	2319      	movs	r3, #25
 800a6e2:	2201      	movs	r2, #1
 800a6e4:	497c      	ldr	r1, [pc, #496]	; (800a8d8 <HAL_I2C_Master_Receive+0x224>)
 800a6e6:	68f8      	ldr	r0, [r7, #12]
 800a6e8:	f000 fb5a 	bl	800ada0 <I2C_WaitOnFlagUntilTimeout>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d001      	beq.n	800a6f6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800a6f2:	2302      	movs	r3, #2
 800a6f4:	e1fe      	b.n	800aaf4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6fc:	2b01      	cmp	r3, #1
 800a6fe:	d101      	bne.n	800a704 <HAL_I2C_Master_Receive+0x50>
 800a700:	2302      	movs	r3, #2
 800a702:	e1f7      	b.n	800aaf4 <HAL_I2C_Master_Receive+0x440>
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	2201      	movs	r2, #1
 800a708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f003 0301 	and.w	r3, r3, #1
 800a716:	2b01      	cmp	r3, #1
 800a718:	d007      	beq.n	800a72a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	681a      	ldr	r2, [r3, #0]
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f042 0201 	orr.w	r2, r2, #1
 800a728:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	681a      	ldr	r2, [r3, #0]
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a738:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	2222      	movs	r2, #34	; 0x22
 800a73e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	2210      	movs	r2, #16
 800a746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	2200      	movs	r2, #0
 800a74e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	687a      	ldr	r2, [r7, #4]
 800a754:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	893a      	ldrh	r2, [r7, #8]
 800a75a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a760:	b29a      	uxth	r2, r3
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	4a5c      	ldr	r2, [pc, #368]	; (800a8dc <HAL_I2C_Master_Receive+0x228>)
 800a76a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a76c:	8979      	ldrh	r1, [r7, #10]
 800a76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a770:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a772:	68f8      	ldr	r0, [r7, #12]
 800a774:	f000 fa46 	bl	800ac04 <I2C_MasterRequestRead>
 800a778:	4603      	mov	r3, r0
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d001      	beq.n	800a782 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800a77e:	2301      	movs	r3, #1
 800a780:	e1b8      	b.n	800aaf4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a786:	2b00      	cmp	r3, #0
 800a788:	d113      	bne.n	800a7b2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a78a:	2300      	movs	r3, #0
 800a78c:	623b      	str	r3, [r7, #32]
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	695b      	ldr	r3, [r3, #20]
 800a794:	623b      	str	r3, [r7, #32]
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	699b      	ldr	r3, [r3, #24]
 800a79c:	623b      	str	r3, [r7, #32]
 800a79e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	681a      	ldr	r2, [r3, #0]
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a7ae:	601a      	str	r2, [r3, #0]
 800a7b0:	e18c      	b.n	800aacc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7b6:	2b01      	cmp	r3, #1
 800a7b8:	d11b      	bne.n	800a7f2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	681a      	ldr	r2, [r3, #0]
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a7c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	61fb      	str	r3, [r7, #28]
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	695b      	ldr	r3, [r3, #20]
 800a7d4:	61fb      	str	r3, [r7, #28]
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	699b      	ldr	r3, [r3, #24]
 800a7dc:	61fb      	str	r3, [r7, #28]
 800a7de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	681a      	ldr	r2, [r3, #0]
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a7ee:	601a      	str	r2, [r3, #0]
 800a7f0:	e16c      	b.n	800aacc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7f6:	2b02      	cmp	r3, #2
 800a7f8:	d11b      	bne.n	800a832 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	681a      	ldr	r2, [r3, #0]
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a808:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	681a      	ldr	r2, [r3, #0]
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a818:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a81a:	2300      	movs	r3, #0
 800a81c:	61bb      	str	r3, [r7, #24]
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	695b      	ldr	r3, [r3, #20]
 800a824:	61bb      	str	r3, [r7, #24]
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	699b      	ldr	r3, [r3, #24]
 800a82c:	61bb      	str	r3, [r7, #24]
 800a82e:	69bb      	ldr	r3, [r7, #24]
 800a830:	e14c      	b.n	800aacc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	681a      	ldr	r2, [r3, #0]
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a840:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a842:	2300      	movs	r3, #0
 800a844:	617b      	str	r3, [r7, #20]
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	695b      	ldr	r3, [r3, #20]
 800a84c:	617b      	str	r3, [r7, #20]
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	699b      	ldr	r3, [r3, #24]
 800a854:	617b      	str	r3, [r7, #20]
 800a856:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800a858:	e138      	b.n	800aacc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a85e:	2b03      	cmp	r3, #3
 800a860:	f200 80f1 	bhi.w	800aa46 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a868:	2b01      	cmp	r3, #1
 800a86a:	d123      	bne.n	800a8b4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a86c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a86e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a870:	68f8      	ldr	r0, [r7, #12]
 800a872:	f000 fbed 	bl	800b050 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a876:	4603      	mov	r3, r0
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d001      	beq.n	800a880 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800a87c:	2301      	movs	r3, #1
 800a87e:	e139      	b.n	800aaf4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	691a      	ldr	r2, [r3, #16]
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a88a:	b2d2      	uxtb	r2, r2
 800a88c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a892:	1c5a      	adds	r2, r3, #1
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a89c:	3b01      	subs	r3, #1
 800a89e:	b29a      	uxth	r2, r3
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a8a8:	b29b      	uxth	r3, r3
 800a8aa:	3b01      	subs	r3, #1
 800a8ac:	b29a      	uxth	r2, r3
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a8b2:	e10b      	b.n	800aacc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a8b8:	2b02      	cmp	r3, #2
 800a8ba:	d14e      	bne.n	800a95a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8be:	9300      	str	r3, [sp, #0]
 800a8c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	4906      	ldr	r1, [pc, #24]	; (800a8e0 <HAL_I2C_Master_Receive+0x22c>)
 800a8c6:	68f8      	ldr	r0, [r7, #12]
 800a8c8:	f000 fa6a 	bl	800ada0 <I2C_WaitOnFlagUntilTimeout>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d008      	beq.n	800a8e4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	e10e      	b.n	800aaf4 <HAL_I2C_Master_Receive+0x440>
 800a8d6:	bf00      	nop
 800a8d8:	00100002 	.word	0x00100002
 800a8dc:	ffff0000 	.word	0xffff0000
 800a8e0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	681a      	ldr	r2, [r3, #0]
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a8f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	691a      	ldr	r2, [r3, #16]
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8fe:	b2d2      	uxtb	r2, r2
 800a900:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a906:	1c5a      	adds	r2, r3, #1
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a910:	3b01      	subs	r3, #1
 800a912:	b29a      	uxth	r2, r3
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a91c:	b29b      	uxth	r3, r3
 800a91e:	3b01      	subs	r3, #1
 800a920:	b29a      	uxth	r2, r3
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	691a      	ldr	r2, [r3, #16]
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a930:	b2d2      	uxtb	r2, r2
 800a932:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a938:	1c5a      	adds	r2, r3, #1
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a942:	3b01      	subs	r3, #1
 800a944:	b29a      	uxth	r2, r3
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a94e:	b29b      	uxth	r3, r3
 800a950:	3b01      	subs	r3, #1
 800a952:	b29a      	uxth	r2, r3
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a958:	e0b8      	b.n	800aacc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a95c:	9300      	str	r3, [sp, #0]
 800a95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a960:	2200      	movs	r2, #0
 800a962:	4966      	ldr	r1, [pc, #408]	; (800aafc <HAL_I2C_Master_Receive+0x448>)
 800a964:	68f8      	ldr	r0, [r7, #12]
 800a966:	f000 fa1b 	bl	800ada0 <I2C_WaitOnFlagUntilTimeout>
 800a96a:	4603      	mov	r3, r0
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d001      	beq.n	800a974 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800a970:	2301      	movs	r3, #1
 800a972:	e0bf      	b.n	800aaf4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	681a      	ldr	r2, [r3, #0]
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a982:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	691a      	ldr	r2, [r3, #16]
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a98e:	b2d2      	uxtb	r2, r2
 800a990:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a996:	1c5a      	adds	r2, r3, #1
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9a0:	3b01      	subs	r3, #1
 800a9a2:	b29a      	uxth	r2, r3
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9ac:	b29b      	uxth	r3, r3
 800a9ae:	3b01      	subs	r3, #1
 800a9b0:	b29a      	uxth	r2, r3
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b8:	9300      	str	r3, [sp, #0]
 800a9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9bc:	2200      	movs	r2, #0
 800a9be:	494f      	ldr	r1, [pc, #316]	; (800aafc <HAL_I2C_Master_Receive+0x448>)
 800a9c0:	68f8      	ldr	r0, [r7, #12]
 800a9c2:	f000 f9ed 	bl	800ada0 <I2C_WaitOnFlagUntilTimeout>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d001      	beq.n	800a9d0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	e091      	b.n	800aaf4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	681a      	ldr	r2, [r3, #0]
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a9de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	691a      	ldr	r2, [r3, #16]
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ea:	b2d2      	uxtb	r2, r2
 800a9ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f2:	1c5a      	adds	r2, r3, #1
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9fc:	3b01      	subs	r3, #1
 800a9fe:	b29a      	uxth	r2, r3
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa08:	b29b      	uxth	r3, r3
 800aa0a:	3b01      	subs	r3, #1
 800aa0c:	b29a      	uxth	r2, r3
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	691a      	ldr	r2, [r3, #16]
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa1c:	b2d2      	uxtb	r2, r2
 800aa1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa24:	1c5a      	adds	r2, r3, #1
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa2e:	3b01      	subs	r3, #1
 800aa30:	b29a      	uxth	r2, r3
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa3a:	b29b      	uxth	r3, r3
 800aa3c:	3b01      	subs	r3, #1
 800aa3e:	b29a      	uxth	r2, r3
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	855a      	strh	r2, [r3, #42]	; 0x2a
 800aa44:	e042      	b.n	800aacc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aa46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aa4a:	68f8      	ldr	r0, [r7, #12]
 800aa4c:	f000 fb00 	bl	800b050 <I2C_WaitOnRXNEFlagUntilTimeout>
 800aa50:	4603      	mov	r3, r0
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d001      	beq.n	800aa5a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800aa56:	2301      	movs	r3, #1
 800aa58:	e04c      	b.n	800aaf4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	691a      	ldr	r2, [r3, #16]
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa64:	b2d2      	uxtb	r2, r2
 800aa66:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa6c:	1c5a      	adds	r2, r3, #1
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa76:	3b01      	subs	r3, #1
 800aa78:	b29a      	uxth	r2, r3
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa82:	b29b      	uxth	r3, r3
 800aa84:	3b01      	subs	r3, #1
 800aa86:	b29a      	uxth	r2, r3
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	695b      	ldr	r3, [r3, #20]
 800aa92:	f003 0304 	and.w	r3, r3, #4
 800aa96:	2b04      	cmp	r3, #4
 800aa98:	d118      	bne.n	800aacc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	691a      	ldr	r2, [r3, #16]
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaa4:	b2d2      	uxtb	r2, r2
 800aaa6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaac:	1c5a      	adds	r2, r3, #1
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aab6:	3b01      	subs	r3, #1
 800aab8:	b29a      	uxth	r2, r3
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aac2:	b29b      	uxth	r3, r3
 800aac4:	3b01      	subs	r3, #1
 800aac6:	b29a      	uxth	r2, r3
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	f47f aec2 	bne.w	800a85a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	2220      	movs	r2, #32
 800aada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	2200      	movs	r2, #0
 800aae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	2200      	movs	r2, #0
 800aaea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	e000      	b.n	800aaf4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800aaf2:	2302      	movs	r3, #2
  }
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3728      	adds	r7, #40	; 0x28
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}
 800aafc:	00010004 	.word	0x00010004

0800ab00 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b088      	sub	sp, #32
 800ab04:	af02      	add	r7, sp, #8
 800ab06:	60f8      	str	r0, [r7, #12]
 800ab08:	607a      	str	r2, [r7, #4]
 800ab0a:	603b      	str	r3, [r7, #0]
 800ab0c:	460b      	mov	r3, r1
 800ab0e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab14:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	2b08      	cmp	r3, #8
 800ab1a:	d006      	beq.n	800ab2a <I2C_MasterRequestWrite+0x2a>
 800ab1c:	697b      	ldr	r3, [r7, #20]
 800ab1e:	2b01      	cmp	r3, #1
 800ab20:	d003      	beq.n	800ab2a <I2C_MasterRequestWrite+0x2a>
 800ab22:	697b      	ldr	r3, [r7, #20]
 800ab24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ab28:	d108      	bne.n	800ab3c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	681a      	ldr	r2, [r3, #0]
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ab38:	601a      	str	r2, [r3, #0]
 800ab3a:	e00b      	b.n	800ab54 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab40:	2b12      	cmp	r3, #18
 800ab42:	d107      	bne.n	800ab54 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	681a      	ldr	r2, [r3, #0]
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ab52:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	9300      	str	r3, [sp, #0]
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ab60:	68f8      	ldr	r0, [r7, #12]
 800ab62:	f000 f91d 	bl	800ada0 <I2C_WaitOnFlagUntilTimeout>
 800ab66:	4603      	mov	r3, r0
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d00d      	beq.n	800ab88 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab7a:	d103      	bne.n	800ab84 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ab84:	2303      	movs	r3, #3
 800ab86:	e035      	b.n	800abf4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	691b      	ldr	r3, [r3, #16]
 800ab8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab90:	d108      	bne.n	800aba4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ab92:	897b      	ldrh	r3, [r7, #10]
 800ab94:	b2db      	uxtb	r3, r3
 800ab96:	461a      	mov	r2, r3
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800aba0:	611a      	str	r2, [r3, #16]
 800aba2:	e01b      	b.n	800abdc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800aba4:	897b      	ldrh	r3, [r7, #10]
 800aba6:	11db      	asrs	r3, r3, #7
 800aba8:	b2db      	uxtb	r3, r3
 800abaa:	f003 0306 	and.w	r3, r3, #6
 800abae:	b2db      	uxtb	r3, r3
 800abb0:	f063 030f 	orn	r3, r3, #15
 800abb4:	b2da      	uxtb	r2, r3
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	687a      	ldr	r2, [r7, #4]
 800abc0:	490e      	ldr	r1, [pc, #56]	; (800abfc <I2C_MasterRequestWrite+0xfc>)
 800abc2:	68f8      	ldr	r0, [r7, #12]
 800abc4:	f000 f943 	bl	800ae4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800abc8:	4603      	mov	r3, r0
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d001      	beq.n	800abd2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800abce:	2301      	movs	r3, #1
 800abd0:	e010      	b.n	800abf4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800abd2:	897b      	ldrh	r3, [r7, #10]
 800abd4:	b2da      	uxtb	r2, r3
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	687a      	ldr	r2, [r7, #4]
 800abe0:	4907      	ldr	r1, [pc, #28]	; (800ac00 <I2C_MasterRequestWrite+0x100>)
 800abe2:	68f8      	ldr	r0, [r7, #12]
 800abe4:	f000 f933 	bl	800ae4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800abe8:	4603      	mov	r3, r0
 800abea:	2b00      	cmp	r3, #0
 800abec:	d001      	beq.n	800abf2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800abee:	2301      	movs	r3, #1
 800abf0:	e000      	b.n	800abf4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800abf2:	2300      	movs	r3, #0
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3718      	adds	r7, #24
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}
 800abfc:	00010008 	.word	0x00010008
 800ac00:	00010002 	.word	0x00010002

0800ac04 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b088      	sub	sp, #32
 800ac08:	af02      	add	r7, sp, #8
 800ac0a:	60f8      	str	r0, [r7, #12]
 800ac0c:	607a      	str	r2, [r7, #4]
 800ac0e:	603b      	str	r3, [r7, #0]
 800ac10:	460b      	mov	r3, r1
 800ac12:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac18:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	681a      	ldr	r2, [r3, #0]
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ac28:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	2b08      	cmp	r3, #8
 800ac2e:	d006      	beq.n	800ac3e <I2C_MasterRequestRead+0x3a>
 800ac30:	697b      	ldr	r3, [r7, #20]
 800ac32:	2b01      	cmp	r3, #1
 800ac34:	d003      	beq.n	800ac3e <I2C_MasterRequestRead+0x3a>
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ac3c:	d108      	bne.n	800ac50 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	681a      	ldr	r2, [r3, #0]
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ac4c:	601a      	str	r2, [r3, #0]
 800ac4e:	e00b      	b.n	800ac68 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac54:	2b11      	cmp	r3, #17
 800ac56:	d107      	bne.n	800ac68 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	681a      	ldr	r2, [r3, #0]
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ac66:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	9300      	str	r3, [sp, #0]
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ac74:	68f8      	ldr	r0, [r7, #12]
 800ac76:	f000 f893 	bl	800ada0 <I2C_WaitOnFlagUntilTimeout>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d00d      	beq.n	800ac9c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac8e:	d103      	bne.n	800ac98 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac96:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ac98:	2303      	movs	r3, #3
 800ac9a:	e079      	b.n	800ad90 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	691b      	ldr	r3, [r3, #16]
 800aca0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aca4:	d108      	bne.n	800acb8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800aca6:	897b      	ldrh	r3, [r7, #10]
 800aca8:	b2db      	uxtb	r3, r3
 800acaa:	f043 0301 	orr.w	r3, r3, #1
 800acae:	b2da      	uxtb	r2, r3
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	611a      	str	r2, [r3, #16]
 800acb6:	e05f      	b.n	800ad78 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800acb8:	897b      	ldrh	r3, [r7, #10]
 800acba:	11db      	asrs	r3, r3, #7
 800acbc:	b2db      	uxtb	r3, r3
 800acbe:	f003 0306 	and.w	r3, r3, #6
 800acc2:	b2db      	uxtb	r3, r3
 800acc4:	f063 030f 	orn	r3, r3, #15
 800acc8:	b2da      	uxtb	r2, r3
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	687a      	ldr	r2, [r7, #4]
 800acd4:	4930      	ldr	r1, [pc, #192]	; (800ad98 <I2C_MasterRequestRead+0x194>)
 800acd6:	68f8      	ldr	r0, [r7, #12]
 800acd8:	f000 f8b9 	bl	800ae4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800acdc:	4603      	mov	r3, r0
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d001      	beq.n	800ace6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800ace2:	2301      	movs	r3, #1
 800ace4:	e054      	b.n	800ad90 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800ace6:	897b      	ldrh	r3, [r7, #10]
 800ace8:	b2da      	uxtb	r2, r3
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	687a      	ldr	r2, [r7, #4]
 800acf4:	4929      	ldr	r1, [pc, #164]	; (800ad9c <I2C_MasterRequestRead+0x198>)
 800acf6:	68f8      	ldr	r0, [r7, #12]
 800acf8:	f000 f8a9 	bl	800ae4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800acfc:	4603      	mov	r3, r0
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d001      	beq.n	800ad06 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800ad02:	2301      	movs	r3, #1
 800ad04:	e044      	b.n	800ad90 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ad06:	2300      	movs	r3, #0
 800ad08:	613b      	str	r3, [r7, #16]
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	695b      	ldr	r3, [r3, #20]
 800ad10:	613b      	str	r3, [r7, #16]
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	699b      	ldr	r3, [r3, #24]
 800ad18:	613b      	str	r3, [r7, #16]
 800ad1a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	681a      	ldr	r2, [r3, #0]
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ad2a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	9300      	str	r3, [sp, #0]
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2200      	movs	r2, #0
 800ad34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ad38:	68f8      	ldr	r0, [r7, #12]
 800ad3a:	f000 f831 	bl	800ada0 <I2C_WaitOnFlagUntilTimeout>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d00d      	beq.n	800ad60 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad52:	d103      	bne.n	800ad5c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ad5a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800ad5c:	2303      	movs	r3, #3
 800ad5e:	e017      	b.n	800ad90 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800ad60:	897b      	ldrh	r3, [r7, #10]
 800ad62:	11db      	asrs	r3, r3, #7
 800ad64:	b2db      	uxtb	r3, r3
 800ad66:	f003 0306 	and.w	r3, r3, #6
 800ad6a:	b2db      	uxtb	r3, r3
 800ad6c:	f063 030e 	orn	r3, r3, #14
 800ad70:	b2da      	uxtb	r2, r3
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	687a      	ldr	r2, [r7, #4]
 800ad7c:	4907      	ldr	r1, [pc, #28]	; (800ad9c <I2C_MasterRequestRead+0x198>)
 800ad7e:	68f8      	ldr	r0, [r7, #12]
 800ad80:	f000 f865 	bl	800ae4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ad84:	4603      	mov	r3, r0
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d001      	beq.n	800ad8e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	e000      	b.n	800ad90 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800ad8e:	2300      	movs	r3, #0
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	3718      	adds	r7, #24
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}
 800ad98:	00010008 	.word	0x00010008
 800ad9c:	00010002 	.word	0x00010002

0800ada0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b084      	sub	sp, #16
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	60f8      	str	r0, [r7, #12]
 800ada8:	60b9      	str	r1, [r7, #8]
 800adaa:	603b      	str	r3, [r7, #0]
 800adac:	4613      	mov	r3, r2
 800adae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800adb0:	e025      	b.n	800adfe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adb8:	d021      	beq.n	800adfe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800adba:	f7fd ff89 	bl	8008cd0 <HAL_GetTick>
 800adbe:	4602      	mov	r2, r0
 800adc0:	69bb      	ldr	r3, [r7, #24]
 800adc2:	1ad3      	subs	r3, r2, r3
 800adc4:	683a      	ldr	r2, [r7, #0]
 800adc6:	429a      	cmp	r2, r3
 800adc8:	d302      	bcc.n	800add0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d116      	bne.n	800adfe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	2200      	movs	r2, #0
 800add4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	2220      	movs	r2, #32
 800adda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	2200      	movs	r2, #0
 800ade2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adea:	f043 0220 	orr.w	r2, r3, #32
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	2200      	movs	r2, #0
 800adf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800adfa:	2301      	movs	r3, #1
 800adfc:	e023      	b.n	800ae46 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	0c1b      	lsrs	r3, r3, #16
 800ae02:	b2db      	uxtb	r3, r3
 800ae04:	2b01      	cmp	r3, #1
 800ae06:	d10d      	bne.n	800ae24 <I2C_WaitOnFlagUntilTimeout+0x84>
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	695b      	ldr	r3, [r3, #20]
 800ae0e:	43da      	mvns	r2, r3
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	4013      	ands	r3, r2
 800ae14:	b29b      	uxth	r3, r3
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	bf0c      	ite	eq
 800ae1a:	2301      	moveq	r3, #1
 800ae1c:	2300      	movne	r3, #0
 800ae1e:	b2db      	uxtb	r3, r3
 800ae20:	461a      	mov	r2, r3
 800ae22:	e00c      	b.n	800ae3e <I2C_WaitOnFlagUntilTimeout+0x9e>
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	699b      	ldr	r3, [r3, #24]
 800ae2a:	43da      	mvns	r2, r3
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	4013      	ands	r3, r2
 800ae30:	b29b      	uxth	r3, r3
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	bf0c      	ite	eq
 800ae36:	2301      	moveq	r3, #1
 800ae38:	2300      	movne	r3, #0
 800ae3a:	b2db      	uxtb	r3, r3
 800ae3c:	461a      	mov	r2, r3
 800ae3e:	79fb      	ldrb	r3, [r7, #7]
 800ae40:	429a      	cmp	r2, r3
 800ae42:	d0b6      	beq.n	800adb2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ae44:	2300      	movs	r3, #0
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	3710      	adds	r7, #16
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}

0800ae4e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800ae4e:	b580      	push	{r7, lr}
 800ae50:	b084      	sub	sp, #16
 800ae52:	af00      	add	r7, sp, #0
 800ae54:	60f8      	str	r0, [r7, #12]
 800ae56:	60b9      	str	r1, [r7, #8]
 800ae58:	607a      	str	r2, [r7, #4]
 800ae5a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ae5c:	e051      	b.n	800af02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	695b      	ldr	r3, [r3, #20]
 800ae64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae6c:	d123      	bne.n	800aeb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	681a      	ldr	r2, [r3, #0]
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ae7c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ae86:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	2220      	movs	r2, #32
 800ae92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	2200      	movs	r2, #0
 800ae9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aea2:	f043 0204 	orr.w	r2, r3, #4
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	2200      	movs	r2, #0
 800aeae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	e046      	b.n	800af44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aebc:	d021      	beq.n	800af02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aebe:	f7fd ff07 	bl	8008cd0 <HAL_GetTick>
 800aec2:	4602      	mov	r2, r0
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	1ad3      	subs	r3, r2, r3
 800aec8:	687a      	ldr	r2, [r7, #4]
 800aeca:	429a      	cmp	r2, r3
 800aecc:	d302      	bcc.n	800aed4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d116      	bne.n	800af02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	2200      	movs	r2, #0
 800aed8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	2220      	movs	r2, #32
 800aede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	2200      	movs	r2, #0
 800aee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeee:	f043 0220 	orr.w	r2, r3, #32
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	2200      	movs	r2, #0
 800aefa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800aefe:	2301      	movs	r3, #1
 800af00:	e020      	b.n	800af44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800af02:	68bb      	ldr	r3, [r7, #8]
 800af04:	0c1b      	lsrs	r3, r3, #16
 800af06:	b2db      	uxtb	r3, r3
 800af08:	2b01      	cmp	r3, #1
 800af0a:	d10c      	bne.n	800af26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	695b      	ldr	r3, [r3, #20]
 800af12:	43da      	mvns	r2, r3
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	4013      	ands	r3, r2
 800af18:	b29b      	uxth	r3, r3
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	bf14      	ite	ne
 800af1e:	2301      	movne	r3, #1
 800af20:	2300      	moveq	r3, #0
 800af22:	b2db      	uxtb	r3, r3
 800af24:	e00b      	b.n	800af3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	699b      	ldr	r3, [r3, #24]
 800af2c:	43da      	mvns	r2, r3
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	4013      	ands	r3, r2
 800af32:	b29b      	uxth	r3, r3
 800af34:	2b00      	cmp	r3, #0
 800af36:	bf14      	ite	ne
 800af38:	2301      	movne	r3, #1
 800af3a:	2300      	moveq	r3, #0
 800af3c:	b2db      	uxtb	r3, r3
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d18d      	bne.n	800ae5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800af42:	2300      	movs	r3, #0
}
 800af44:	4618      	mov	r0, r3
 800af46:	3710      	adds	r7, #16
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}

0800af4c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b084      	sub	sp, #16
 800af50:	af00      	add	r7, sp, #0
 800af52:	60f8      	str	r0, [r7, #12]
 800af54:	60b9      	str	r1, [r7, #8]
 800af56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800af58:	e02d      	b.n	800afb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800af5a:	68f8      	ldr	r0, [r7, #12]
 800af5c:	f000 f8ce 	bl	800b0fc <I2C_IsAcknowledgeFailed>
 800af60:	4603      	mov	r3, r0
 800af62:	2b00      	cmp	r3, #0
 800af64:	d001      	beq.n	800af6a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800af66:	2301      	movs	r3, #1
 800af68:	e02d      	b.n	800afc6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af6a:	68bb      	ldr	r3, [r7, #8]
 800af6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af70:	d021      	beq.n	800afb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af72:	f7fd fead 	bl	8008cd0 <HAL_GetTick>
 800af76:	4602      	mov	r2, r0
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	1ad3      	subs	r3, r2, r3
 800af7c:	68ba      	ldr	r2, [r7, #8]
 800af7e:	429a      	cmp	r2, r3
 800af80:	d302      	bcc.n	800af88 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d116      	bne.n	800afb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	2200      	movs	r2, #0
 800af8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	2220      	movs	r2, #32
 800af92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	2200      	movs	r2, #0
 800af9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afa2:	f043 0220 	orr.w	r2, r3, #32
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	2200      	movs	r2, #0
 800afae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800afb2:	2301      	movs	r3, #1
 800afb4:	e007      	b.n	800afc6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	695b      	ldr	r3, [r3, #20]
 800afbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afc0:	2b80      	cmp	r3, #128	; 0x80
 800afc2:	d1ca      	bne.n	800af5a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800afc4:	2300      	movs	r3, #0
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	3710      	adds	r7, #16
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}

0800afce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800afce:	b580      	push	{r7, lr}
 800afd0:	b084      	sub	sp, #16
 800afd2:	af00      	add	r7, sp, #0
 800afd4:	60f8      	str	r0, [r7, #12]
 800afd6:	60b9      	str	r1, [r7, #8]
 800afd8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800afda:	e02d      	b.n	800b038 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800afdc:	68f8      	ldr	r0, [r7, #12]
 800afde:	f000 f88d 	bl	800b0fc <I2C_IsAcknowledgeFailed>
 800afe2:	4603      	mov	r3, r0
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d001      	beq.n	800afec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800afe8:	2301      	movs	r3, #1
 800afea:	e02d      	b.n	800b048 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aff2:	d021      	beq.n	800b038 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aff4:	f7fd fe6c 	bl	8008cd0 <HAL_GetTick>
 800aff8:	4602      	mov	r2, r0
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	1ad3      	subs	r3, r2, r3
 800affe:	68ba      	ldr	r2, [r7, #8]
 800b000:	429a      	cmp	r2, r3
 800b002:	d302      	bcc.n	800b00a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d116      	bne.n	800b038 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	2200      	movs	r2, #0
 800b00e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	2220      	movs	r2, #32
 800b014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	2200      	movs	r2, #0
 800b01c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b024:	f043 0220 	orr.w	r2, r3, #32
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	2200      	movs	r2, #0
 800b030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b034:	2301      	movs	r3, #1
 800b036:	e007      	b.n	800b048 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	695b      	ldr	r3, [r3, #20]
 800b03e:	f003 0304 	and.w	r3, r3, #4
 800b042:	2b04      	cmp	r3, #4
 800b044:	d1ca      	bne.n	800afdc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b046:	2300      	movs	r3, #0
}
 800b048:	4618      	mov	r0, r3
 800b04a:	3710      	adds	r7, #16
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}

0800b050 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b084      	sub	sp, #16
 800b054:	af00      	add	r7, sp, #0
 800b056:	60f8      	str	r0, [r7, #12]
 800b058:	60b9      	str	r1, [r7, #8]
 800b05a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b05c:	e042      	b.n	800b0e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	695b      	ldr	r3, [r3, #20]
 800b064:	f003 0310 	and.w	r3, r3, #16
 800b068:	2b10      	cmp	r3, #16
 800b06a:	d119      	bne.n	800b0a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f06f 0210 	mvn.w	r2, #16
 800b074:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	2200      	movs	r2, #0
 800b07a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	2220      	movs	r2, #32
 800b080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	2200      	movs	r2, #0
 800b088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	2200      	movs	r2, #0
 800b098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b09c:	2301      	movs	r3, #1
 800b09e:	e029      	b.n	800b0f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b0a0:	f7fd fe16 	bl	8008cd0 <HAL_GetTick>
 800b0a4:	4602      	mov	r2, r0
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	1ad3      	subs	r3, r2, r3
 800b0aa:	68ba      	ldr	r2, [r7, #8]
 800b0ac:	429a      	cmp	r2, r3
 800b0ae:	d302      	bcc.n	800b0b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d116      	bne.n	800b0e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	2220      	movs	r2, #32
 800b0c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0d0:	f043 0220 	orr.w	r2, r3, #32
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	e007      	b.n	800b0f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	695b      	ldr	r3, [r3, #20]
 800b0ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0ee:	2b40      	cmp	r3, #64	; 0x40
 800b0f0:	d1b5      	bne.n	800b05e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800b0f2:	2300      	movs	r3, #0
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	3710      	adds	r7, #16
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}

0800b0fc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b083      	sub	sp, #12
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	695b      	ldr	r3, [r3, #20]
 800b10a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b10e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b112:	d11b      	bne.n	800b14c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b11c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2200      	movs	r2, #0
 800b122:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2220      	movs	r2, #32
 800b128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2200      	movs	r2, #0
 800b130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b138:	f043 0204 	orr.w	r2, r3, #4
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2200      	movs	r2, #0
 800b144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800b148:	2301      	movs	r3, #1
 800b14a:	e000      	b.n	800b14e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b14c:	2300      	movs	r3, #0
}
 800b14e:	4618      	mov	r0, r3
 800b150:	370c      	adds	r7, #12
 800b152:	46bd      	mov	sp, r7
 800b154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b158:	4770      	bx	lr
	...

0800b15c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b082      	sub	sp, #8
 800b160:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800b162:	2300      	movs	r3, #0
 800b164:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800b166:	2300      	movs	r3, #0
 800b168:	603b      	str	r3, [r7, #0]
 800b16a:	4b20      	ldr	r3, [pc, #128]	; (800b1ec <HAL_PWREx_EnableOverDrive+0x90>)
 800b16c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b16e:	4a1f      	ldr	r2, [pc, #124]	; (800b1ec <HAL_PWREx_EnableOverDrive+0x90>)
 800b170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b174:	6413      	str	r3, [r2, #64]	; 0x40
 800b176:	4b1d      	ldr	r3, [pc, #116]	; (800b1ec <HAL_PWREx_EnableOverDrive+0x90>)
 800b178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b17a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b17e:	603b      	str	r3, [r7, #0]
 800b180:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800b182:	4b1b      	ldr	r3, [pc, #108]	; (800b1f0 <HAL_PWREx_EnableOverDrive+0x94>)
 800b184:	2201      	movs	r2, #1
 800b186:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b188:	f7fd fda2 	bl	8008cd0 <HAL_GetTick>
 800b18c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b18e:	e009      	b.n	800b1a4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b190:	f7fd fd9e 	bl	8008cd0 <HAL_GetTick>
 800b194:	4602      	mov	r2, r0
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	1ad3      	subs	r3, r2, r3
 800b19a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b19e:	d901      	bls.n	800b1a4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800b1a0:	2303      	movs	r3, #3
 800b1a2:	e01f      	b.n	800b1e4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b1a4:	4b13      	ldr	r3, [pc, #76]	; (800b1f4 <HAL_PWREx_EnableOverDrive+0x98>)
 800b1a6:	685b      	ldr	r3, [r3, #4]
 800b1a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b1ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1b0:	d1ee      	bne.n	800b190 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800b1b2:	4b11      	ldr	r3, [pc, #68]	; (800b1f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b1b4:	2201      	movs	r2, #1
 800b1b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b1b8:	f7fd fd8a 	bl	8008cd0 <HAL_GetTick>
 800b1bc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b1be:	e009      	b.n	800b1d4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b1c0:	f7fd fd86 	bl	8008cd0 <HAL_GetTick>
 800b1c4:	4602      	mov	r2, r0
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	1ad3      	subs	r3, r2, r3
 800b1ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b1ce:	d901      	bls.n	800b1d4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800b1d0:	2303      	movs	r3, #3
 800b1d2:	e007      	b.n	800b1e4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b1d4:	4b07      	ldr	r3, [pc, #28]	; (800b1f4 <HAL_PWREx_EnableOverDrive+0x98>)
 800b1d6:	685b      	ldr	r3, [r3, #4]
 800b1d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b1e0:	d1ee      	bne.n	800b1c0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800b1e2:	2300      	movs	r3, #0
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3708      	adds	r7, #8
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}
 800b1ec:	40023800 	.word	0x40023800
 800b1f0:	420e0040 	.word	0x420e0040
 800b1f4:	40007000 	.word	0x40007000
 800b1f8:	420e0044 	.word	0x420e0044

0800b1fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b084      	sub	sp, #16
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d101      	bne.n	800b210 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b20c:	2301      	movs	r3, #1
 800b20e:	e0cc      	b.n	800b3aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b210:	4b68      	ldr	r3, [pc, #416]	; (800b3b4 <HAL_RCC_ClockConfig+0x1b8>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f003 030f 	and.w	r3, r3, #15
 800b218:	683a      	ldr	r2, [r7, #0]
 800b21a:	429a      	cmp	r2, r3
 800b21c:	d90c      	bls.n	800b238 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b21e:	4b65      	ldr	r3, [pc, #404]	; (800b3b4 <HAL_RCC_ClockConfig+0x1b8>)
 800b220:	683a      	ldr	r2, [r7, #0]
 800b222:	b2d2      	uxtb	r2, r2
 800b224:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b226:	4b63      	ldr	r3, [pc, #396]	; (800b3b4 <HAL_RCC_ClockConfig+0x1b8>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f003 030f 	and.w	r3, r3, #15
 800b22e:	683a      	ldr	r2, [r7, #0]
 800b230:	429a      	cmp	r2, r3
 800b232:	d001      	beq.n	800b238 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b234:	2301      	movs	r3, #1
 800b236:	e0b8      	b.n	800b3aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f003 0302 	and.w	r3, r3, #2
 800b240:	2b00      	cmp	r3, #0
 800b242:	d020      	beq.n	800b286 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f003 0304 	and.w	r3, r3, #4
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d005      	beq.n	800b25c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b250:	4b59      	ldr	r3, [pc, #356]	; (800b3b8 <HAL_RCC_ClockConfig+0x1bc>)
 800b252:	689b      	ldr	r3, [r3, #8]
 800b254:	4a58      	ldr	r2, [pc, #352]	; (800b3b8 <HAL_RCC_ClockConfig+0x1bc>)
 800b256:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b25a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f003 0308 	and.w	r3, r3, #8
 800b264:	2b00      	cmp	r3, #0
 800b266:	d005      	beq.n	800b274 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b268:	4b53      	ldr	r3, [pc, #332]	; (800b3b8 <HAL_RCC_ClockConfig+0x1bc>)
 800b26a:	689b      	ldr	r3, [r3, #8]
 800b26c:	4a52      	ldr	r2, [pc, #328]	; (800b3b8 <HAL_RCC_ClockConfig+0x1bc>)
 800b26e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b272:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b274:	4b50      	ldr	r3, [pc, #320]	; (800b3b8 <HAL_RCC_ClockConfig+0x1bc>)
 800b276:	689b      	ldr	r3, [r3, #8]
 800b278:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	689b      	ldr	r3, [r3, #8]
 800b280:	494d      	ldr	r1, [pc, #308]	; (800b3b8 <HAL_RCC_ClockConfig+0x1bc>)
 800b282:	4313      	orrs	r3, r2
 800b284:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f003 0301 	and.w	r3, r3, #1
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d044      	beq.n	800b31c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	685b      	ldr	r3, [r3, #4]
 800b296:	2b01      	cmp	r3, #1
 800b298:	d107      	bne.n	800b2aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b29a:	4b47      	ldr	r3, [pc, #284]	; (800b3b8 <HAL_RCC_ClockConfig+0x1bc>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d119      	bne.n	800b2da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	e07f      	b.n	800b3aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	685b      	ldr	r3, [r3, #4]
 800b2ae:	2b02      	cmp	r3, #2
 800b2b0:	d003      	beq.n	800b2ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b2b6:	2b03      	cmp	r3, #3
 800b2b8:	d107      	bne.n	800b2ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b2ba:	4b3f      	ldr	r3, [pc, #252]	; (800b3b8 <HAL_RCC_ClockConfig+0x1bc>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d109      	bne.n	800b2da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	e06f      	b.n	800b3aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b2ca:	4b3b      	ldr	r3, [pc, #236]	; (800b3b8 <HAL_RCC_ClockConfig+0x1bc>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	f003 0302 	and.w	r3, r3, #2
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d101      	bne.n	800b2da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	e067      	b.n	800b3aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b2da:	4b37      	ldr	r3, [pc, #220]	; (800b3b8 <HAL_RCC_ClockConfig+0x1bc>)
 800b2dc:	689b      	ldr	r3, [r3, #8]
 800b2de:	f023 0203 	bic.w	r2, r3, #3
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	685b      	ldr	r3, [r3, #4]
 800b2e6:	4934      	ldr	r1, [pc, #208]	; (800b3b8 <HAL_RCC_ClockConfig+0x1bc>)
 800b2e8:	4313      	orrs	r3, r2
 800b2ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b2ec:	f7fd fcf0 	bl	8008cd0 <HAL_GetTick>
 800b2f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b2f2:	e00a      	b.n	800b30a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b2f4:	f7fd fcec 	bl	8008cd0 <HAL_GetTick>
 800b2f8:	4602      	mov	r2, r0
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	1ad3      	subs	r3, r2, r3
 800b2fe:	f241 3288 	movw	r2, #5000	; 0x1388
 800b302:	4293      	cmp	r3, r2
 800b304:	d901      	bls.n	800b30a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b306:	2303      	movs	r3, #3
 800b308:	e04f      	b.n	800b3aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b30a:	4b2b      	ldr	r3, [pc, #172]	; (800b3b8 <HAL_RCC_ClockConfig+0x1bc>)
 800b30c:	689b      	ldr	r3, [r3, #8]
 800b30e:	f003 020c 	and.w	r2, r3, #12
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	685b      	ldr	r3, [r3, #4]
 800b316:	009b      	lsls	r3, r3, #2
 800b318:	429a      	cmp	r2, r3
 800b31a:	d1eb      	bne.n	800b2f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b31c:	4b25      	ldr	r3, [pc, #148]	; (800b3b4 <HAL_RCC_ClockConfig+0x1b8>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f003 030f 	and.w	r3, r3, #15
 800b324:	683a      	ldr	r2, [r7, #0]
 800b326:	429a      	cmp	r2, r3
 800b328:	d20c      	bcs.n	800b344 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b32a:	4b22      	ldr	r3, [pc, #136]	; (800b3b4 <HAL_RCC_ClockConfig+0x1b8>)
 800b32c:	683a      	ldr	r2, [r7, #0]
 800b32e:	b2d2      	uxtb	r2, r2
 800b330:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b332:	4b20      	ldr	r3, [pc, #128]	; (800b3b4 <HAL_RCC_ClockConfig+0x1b8>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	f003 030f 	and.w	r3, r3, #15
 800b33a:	683a      	ldr	r2, [r7, #0]
 800b33c:	429a      	cmp	r2, r3
 800b33e:	d001      	beq.n	800b344 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b340:	2301      	movs	r3, #1
 800b342:	e032      	b.n	800b3aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f003 0304 	and.w	r3, r3, #4
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d008      	beq.n	800b362 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b350:	4b19      	ldr	r3, [pc, #100]	; (800b3b8 <HAL_RCC_ClockConfig+0x1bc>)
 800b352:	689b      	ldr	r3, [r3, #8]
 800b354:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	68db      	ldr	r3, [r3, #12]
 800b35c:	4916      	ldr	r1, [pc, #88]	; (800b3b8 <HAL_RCC_ClockConfig+0x1bc>)
 800b35e:	4313      	orrs	r3, r2
 800b360:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	f003 0308 	and.w	r3, r3, #8
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d009      	beq.n	800b382 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b36e:	4b12      	ldr	r3, [pc, #72]	; (800b3b8 <HAL_RCC_ClockConfig+0x1bc>)
 800b370:	689b      	ldr	r3, [r3, #8]
 800b372:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	691b      	ldr	r3, [r3, #16]
 800b37a:	00db      	lsls	r3, r3, #3
 800b37c:	490e      	ldr	r1, [pc, #56]	; (800b3b8 <HAL_RCC_ClockConfig+0x1bc>)
 800b37e:	4313      	orrs	r3, r2
 800b380:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b382:	f000 f821 	bl	800b3c8 <HAL_RCC_GetSysClockFreq>
 800b386:	4601      	mov	r1, r0
 800b388:	4b0b      	ldr	r3, [pc, #44]	; (800b3b8 <HAL_RCC_ClockConfig+0x1bc>)
 800b38a:	689b      	ldr	r3, [r3, #8]
 800b38c:	091b      	lsrs	r3, r3, #4
 800b38e:	f003 030f 	and.w	r3, r3, #15
 800b392:	4a0a      	ldr	r2, [pc, #40]	; (800b3bc <HAL_RCC_ClockConfig+0x1c0>)
 800b394:	5cd3      	ldrb	r3, [r2, r3]
 800b396:	fa21 f303 	lsr.w	r3, r1, r3
 800b39a:	4a09      	ldr	r2, [pc, #36]	; (800b3c0 <HAL_RCC_ClockConfig+0x1c4>)
 800b39c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b39e:	4b09      	ldr	r3, [pc, #36]	; (800b3c4 <HAL_RCC_ClockConfig+0x1c8>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f7fd fc50 	bl	8008c48 <HAL_InitTick>

  return HAL_OK;
 800b3a8:	2300      	movs	r3, #0
}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	3710      	adds	r7, #16
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd80      	pop	{r7, pc}
 800b3b2:	bf00      	nop
 800b3b4:	40023c00 	.word	0x40023c00
 800b3b8:	40023800 	.word	0x40023800
 800b3bc:	08019144 	.word	0x08019144
 800b3c0:	20000000 	.word	0x20000000
 800b3c4:	20000004 	.word	0x20000004

0800b3c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b3c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3ca:	b085      	sub	sp, #20
 800b3cc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	607b      	str	r3, [r7, #4]
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	60fb      	str	r3, [r7, #12]
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800b3da:	2300      	movs	r3, #0
 800b3dc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b3de:	4b63      	ldr	r3, [pc, #396]	; (800b56c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b3e0:	689b      	ldr	r3, [r3, #8]
 800b3e2:	f003 030c 	and.w	r3, r3, #12
 800b3e6:	2b04      	cmp	r3, #4
 800b3e8:	d007      	beq.n	800b3fa <HAL_RCC_GetSysClockFreq+0x32>
 800b3ea:	2b08      	cmp	r3, #8
 800b3ec:	d008      	beq.n	800b400 <HAL_RCC_GetSysClockFreq+0x38>
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	f040 80b4 	bne.w	800b55c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b3f4:	4b5e      	ldr	r3, [pc, #376]	; (800b570 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800b3f6:	60bb      	str	r3, [r7, #8]
       break;
 800b3f8:	e0b3      	b.n	800b562 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b3fa:	4b5d      	ldr	r3, [pc, #372]	; (800b570 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800b3fc:	60bb      	str	r3, [r7, #8]
      break;
 800b3fe:	e0b0      	b.n	800b562 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b400:	4b5a      	ldr	r3, [pc, #360]	; (800b56c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b402:	685b      	ldr	r3, [r3, #4]
 800b404:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b408:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b40a:	4b58      	ldr	r3, [pc, #352]	; (800b56c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b40c:	685b      	ldr	r3, [r3, #4]
 800b40e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b412:	2b00      	cmp	r3, #0
 800b414:	d04a      	beq.n	800b4ac <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b416:	4b55      	ldr	r3, [pc, #340]	; (800b56c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b418:	685b      	ldr	r3, [r3, #4]
 800b41a:	099b      	lsrs	r3, r3, #6
 800b41c:	f04f 0400 	mov.w	r4, #0
 800b420:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b424:	f04f 0200 	mov.w	r2, #0
 800b428:	ea03 0501 	and.w	r5, r3, r1
 800b42c:	ea04 0602 	and.w	r6, r4, r2
 800b430:	4629      	mov	r1, r5
 800b432:	4632      	mov	r2, r6
 800b434:	f04f 0300 	mov.w	r3, #0
 800b438:	f04f 0400 	mov.w	r4, #0
 800b43c:	0154      	lsls	r4, r2, #5
 800b43e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b442:	014b      	lsls	r3, r1, #5
 800b444:	4619      	mov	r1, r3
 800b446:	4622      	mov	r2, r4
 800b448:	1b49      	subs	r1, r1, r5
 800b44a:	eb62 0206 	sbc.w	r2, r2, r6
 800b44e:	f04f 0300 	mov.w	r3, #0
 800b452:	f04f 0400 	mov.w	r4, #0
 800b456:	0194      	lsls	r4, r2, #6
 800b458:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b45c:	018b      	lsls	r3, r1, #6
 800b45e:	1a5b      	subs	r3, r3, r1
 800b460:	eb64 0402 	sbc.w	r4, r4, r2
 800b464:	f04f 0100 	mov.w	r1, #0
 800b468:	f04f 0200 	mov.w	r2, #0
 800b46c:	00e2      	lsls	r2, r4, #3
 800b46e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b472:	00d9      	lsls	r1, r3, #3
 800b474:	460b      	mov	r3, r1
 800b476:	4614      	mov	r4, r2
 800b478:	195b      	adds	r3, r3, r5
 800b47a:	eb44 0406 	adc.w	r4, r4, r6
 800b47e:	f04f 0100 	mov.w	r1, #0
 800b482:	f04f 0200 	mov.w	r2, #0
 800b486:	02a2      	lsls	r2, r4, #10
 800b488:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800b48c:	0299      	lsls	r1, r3, #10
 800b48e:	460b      	mov	r3, r1
 800b490:	4614      	mov	r4, r2
 800b492:	4618      	mov	r0, r3
 800b494:	4621      	mov	r1, r4
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	f04f 0400 	mov.w	r4, #0
 800b49c:	461a      	mov	r2, r3
 800b49e:	4623      	mov	r3, r4
 800b4a0:	f7f5 fc0a 	bl	8000cb8 <__aeabi_uldivmod>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	460c      	mov	r4, r1
 800b4a8:	60fb      	str	r3, [r7, #12]
 800b4aa:	e049      	b.n	800b540 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b4ac:	4b2f      	ldr	r3, [pc, #188]	; (800b56c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b4ae:	685b      	ldr	r3, [r3, #4]
 800b4b0:	099b      	lsrs	r3, r3, #6
 800b4b2:	f04f 0400 	mov.w	r4, #0
 800b4b6:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b4ba:	f04f 0200 	mov.w	r2, #0
 800b4be:	ea03 0501 	and.w	r5, r3, r1
 800b4c2:	ea04 0602 	and.w	r6, r4, r2
 800b4c6:	4629      	mov	r1, r5
 800b4c8:	4632      	mov	r2, r6
 800b4ca:	f04f 0300 	mov.w	r3, #0
 800b4ce:	f04f 0400 	mov.w	r4, #0
 800b4d2:	0154      	lsls	r4, r2, #5
 800b4d4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b4d8:	014b      	lsls	r3, r1, #5
 800b4da:	4619      	mov	r1, r3
 800b4dc:	4622      	mov	r2, r4
 800b4de:	1b49      	subs	r1, r1, r5
 800b4e0:	eb62 0206 	sbc.w	r2, r2, r6
 800b4e4:	f04f 0300 	mov.w	r3, #0
 800b4e8:	f04f 0400 	mov.w	r4, #0
 800b4ec:	0194      	lsls	r4, r2, #6
 800b4ee:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b4f2:	018b      	lsls	r3, r1, #6
 800b4f4:	1a5b      	subs	r3, r3, r1
 800b4f6:	eb64 0402 	sbc.w	r4, r4, r2
 800b4fa:	f04f 0100 	mov.w	r1, #0
 800b4fe:	f04f 0200 	mov.w	r2, #0
 800b502:	00e2      	lsls	r2, r4, #3
 800b504:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b508:	00d9      	lsls	r1, r3, #3
 800b50a:	460b      	mov	r3, r1
 800b50c:	4614      	mov	r4, r2
 800b50e:	195b      	adds	r3, r3, r5
 800b510:	eb44 0406 	adc.w	r4, r4, r6
 800b514:	f04f 0100 	mov.w	r1, #0
 800b518:	f04f 0200 	mov.w	r2, #0
 800b51c:	02a2      	lsls	r2, r4, #10
 800b51e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800b522:	0299      	lsls	r1, r3, #10
 800b524:	460b      	mov	r3, r1
 800b526:	4614      	mov	r4, r2
 800b528:	4618      	mov	r0, r3
 800b52a:	4621      	mov	r1, r4
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f04f 0400 	mov.w	r4, #0
 800b532:	461a      	mov	r2, r3
 800b534:	4623      	mov	r3, r4
 800b536:	f7f5 fbbf 	bl	8000cb8 <__aeabi_uldivmod>
 800b53a:	4603      	mov	r3, r0
 800b53c:	460c      	mov	r4, r1
 800b53e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b540:	4b0a      	ldr	r3, [pc, #40]	; (800b56c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b542:	685b      	ldr	r3, [r3, #4]
 800b544:	0c1b      	lsrs	r3, r3, #16
 800b546:	f003 0303 	and.w	r3, r3, #3
 800b54a:	3301      	adds	r3, #1
 800b54c:	005b      	lsls	r3, r3, #1
 800b54e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800b550:	68fa      	ldr	r2, [r7, #12]
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	fbb2 f3f3 	udiv	r3, r2, r3
 800b558:	60bb      	str	r3, [r7, #8]
      break;
 800b55a:	e002      	b.n	800b562 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b55c:	4b04      	ldr	r3, [pc, #16]	; (800b570 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800b55e:	60bb      	str	r3, [r7, #8]
      break;
 800b560:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b562:	68bb      	ldr	r3, [r7, #8]
}
 800b564:	4618      	mov	r0, r3
 800b566:	3714      	adds	r7, #20
 800b568:	46bd      	mov	sp, r7
 800b56a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b56c:	40023800 	.word	0x40023800
 800b570:	00f42400 	.word	0x00f42400

0800b574 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b574:	b480      	push	{r7}
 800b576:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b578:	4b03      	ldr	r3, [pc, #12]	; (800b588 <HAL_RCC_GetHCLKFreq+0x14>)
 800b57a:	681b      	ldr	r3, [r3, #0]
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	46bd      	mov	sp, r7
 800b580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b584:	4770      	bx	lr
 800b586:	bf00      	nop
 800b588:	20000000 	.word	0x20000000

0800b58c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b590:	f7ff fff0 	bl	800b574 <HAL_RCC_GetHCLKFreq>
 800b594:	4601      	mov	r1, r0
 800b596:	4b05      	ldr	r3, [pc, #20]	; (800b5ac <HAL_RCC_GetPCLK1Freq+0x20>)
 800b598:	689b      	ldr	r3, [r3, #8]
 800b59a:	0a9b      	lsrs	r3, r3, #10
 800b59c:	f003 0307 	and.w	r3, r3, #7
 800b5a0:	4a03      	ldr	r2, [pc, #12]	; (800b5b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b5a2:	5cd3      	ldrb	r3, [r2, r3]
 800b5a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	bd80      	pop	{r7, pc}
 800b5ac:	40023800 	.word	0x40023800
 800b5b0:	08019154 	.word	0x08019154

0800b5b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b5b8:	f7ff ffdc 	bl	800b574 <HAL_RCC_GetHCLKFreq>
 800b5bc:	4601      	mov	r1, r0
 800b5be:	4b05      	ldr	r3, [pc, #20]	; (800b5d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b5c0:	689b      	ldr	r3, [r3, #8]
 800b5c2:	0b5b      	lsrs	r3, r3, #13
 800b5c4:	f003 0307 	and.w	r3, r3, #7
 800b5c8:	4a03      	ldr	r2, [pc, #12]	; (800b5d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b5ca:	5cd3      	ldrb	r3, [r2, r3]
 800b5cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	bd80      	pop	{r7, pc}
 800b5d4:	40023800 	.word	0x40023800
 800b5d8:	08019154 	.word	0x08019154

0800b5dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b088      	sub	sp, #32
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b600:	2b00      	cmp	r3, #0
 800b602:	d00a      	beq.n	800b61a <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800b604:	4b66      	ldr	r3, [pc, #408]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b606:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b60a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b612:	4963      	ldr	r1, [pc, #396]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b614:	4313      	orrs	r3, r2
 800b616:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b622:	2b00      	cmp	r3, #0
 800b624:	d00a      	beq.n	800b63c <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800b626:	4b5e      	ldr	r3, [pc, #376]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b628:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b62c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b634:	495a      	ldr	r1, [pc, #360]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b636:	4313      	orrs	r3, r2
 800b638:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f003 0301 	and.w	r3, r3, #1
 800b644:	2b00      	cmp	r3, #0
 800b646:	d10b      	bne.n	800b660 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b650:	2b00      	cmp	r3, #0
 800b652:	d105      	bne.n	800b660 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d075      	beq.n	800b74c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b660:	4b50      	ldr	r3, [pc, #320]	; (800b7a4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800b662:	2200      	movs	r2, #0
 800b664:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b666:	f7fd fb33 	bl	8008cd0 <HAL_GetTick>
 800b66a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b66c:	e008      	b.n	800b680 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b66e:	f7fd fb2f 	bl	8008cd0 <HAL_GetTick>
 800b672:	4602      	mov	r2, r0
 800b674:	69fb      	ldr	r3, [r7, #28]
 800b676:	1ad3      	subs	r3, r2, r3
 800b678:	2b02      	cmp	r3, #2
 800b67a:	d901      	bls.n	800b680 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b67c:	2303      	movs	r3, #3
 800b67e:	e1dc      	b.n	800ba3a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b680:	4b47      	ldr	r3, [pc, #284]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d1f0      	bne.n	800b66e <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	f003 0301 	and.w	r3, r3, #1
 800b694:	2b00      	cmp	r3, #0
 800b696:	d009      	beq.n	800b6ac <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	685b      	ldr	r3, [r3, #4]
 800b69c:	019a      	lsls	r2, r3, #6
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	689b      	ldr	r3, [r3, #8]
 800b6a2:	071b      	lsls	r3, r3, #28
 800b6a4:	493e      	ldr	r1, [pc, #248]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b6a6:	4313      	orrs	r3, r2
 800b6a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	f003 0302 	and.w	r3, r3, #2
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d01f      	beq.n	800b6f8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b6b8:	4b39      	ldr	r3, [pc, #228]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b6ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b6be:	0f1b      	lsrs	r3, r3, #28
 800b6c0:	f003 0307 	and.w	r3, r3, #7
 800b6c4:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	685b      	ldr	r3, [r3, #4]
 800b6ca:	019a      	lsls	r2, r3, #6
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	68db      	ldr	r3, [r3, #12]
 800b6d0:	061b      	lsls	r3, r3, #24
 800b6d2:	431a      	orrs	r2, r3
 800b6d4:	69bb      	ldr	r3, [r7, #24]
 800b6d6:	071b      	lsls	r3, r3, #28
 800b6d8:	4931      	ldr	r1, [pc, #196]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b6da:	4313      	orrs	r3, r2
 800b6dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800b6e0:	4b2f      	ldr	r3, [pc, #188]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b6e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b6e6:	f023 021f 	bic.w	r2, r3, #31
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	6a1b      	ldr	r3, [r3, #32]
 800b6ee:	3b01      	subs	r3, #1
 800b6f0:	492b      	ldr	r1, [pc, #172]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b6f2:	4313      	orrs	r3, r2
 800b6f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b700:	2b00      	cmp	r3, #0
 800b702:	d00d      	beq.n	800b720 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	685b      	ldr	r3, [r3, #4]
 800b708:	019a      	lsls	r2, r3, #6
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	68db      	ldr	r3, [r3, #12]
 800b70e:	061b      	lsls	r3, r3, #24
 800b710:	431a      	orrs	r2, r3
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	689b      	ldr	r3, [r3, #8]
 800b716:	071b      	lsls	r3, r3, #28
 800b718:	4921      	ldr	r1, [pc, #132]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b71a:	4313      	orrs	r3, r2
 800b71c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b720:	4b20      	ldr	r3, [pc, #128]	; (800b7a4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800b722:	2201      	movs	r2, #1
 800b724:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b726:	f7fd fad3 	bl	8008cd0 <HAL_GetTick>
 800b72a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b72c:	e008      	b.n	800b740 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b72e:	f7fd facf 	bl	8008cd0 <HAL_GetTick>
 800b732:	4602      	mov	r2, r0
 800b734:	69fb      	ldr	r3, [r7, #28]
 800b736:	1ad3      	subs	r3, r2, r3
 800b738:	2b02      	cmp	r3, #2
 800b73a:	d901      	bls.n	800b740 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b73c:	2303      	movs	r3, #3
 800b73e:	e17c      	b.n	800ba3a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b740:	4b17      	ldr	r3, [pc, #92]	; (800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d0f0      	beq.n	800b72e <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f003 0304 	and.w	r3, r3, #4
 800b754:	2b00      	cmp	r3, #0
 800b756:	d112      	bne.n	800b77e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800b760:	2b00      	cmp	r3, #0
 800b762:	d10c      	bne.n	800b77e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	f000 80ce 	beq.w	800b90e <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800b776:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b77a:	f040 80c8 	bne.w	800b90e <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800b77e:	4b0a      	ldr	r3, [pc, #40]	; (800b7a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800b780:	2200      	movs	r2, #0
 800b782:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b784:	f7fd faa4 	bl	8008cd0 <HAL_GetTick>
 800b788:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b78a:	e00f      	b.n	800b7ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800b78c:	f7fd faa0 	bl	8008cd0 <HAL_GetTick>
 800b790:	4602      	mov	r2, r0
 800b792:	69fb      	ldr	r3, [r7, #28]
 800b794:	1ad3      	subs	r3, r2, r3
 800b796:	2b02      	cmp	r3, #2
 800b798:	d908      	bls.n	800b7ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b79a:	2303      	movs	r3, #3
 800b79c:	e14d      	b.n	800ba3a <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800b79e:	bf00      	nop
 800b7a0:	40023800 	.word	0x40023800
 800b7a4:	42470068 	.word	0x42470068
 800b7a8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b7ac:	4ba5      	ldr	r3, [pc, #660]	; (800ba44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b7b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b7b8:	d0e8      	beq.n	800b78c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	f003 0304 	and.w	r3, r3, #4
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d02e      	beq.n	800b824 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800b7c6:	4b9f      	ldr	r3, [pc, #636]	; (800ba44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b7c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7cc:	0c1b      	lsrs	r3, r3, #16
 800b7ce:	f003 0303 	and.w	r3, r3, #3
 800b7d2:	3301      	adds	r3, #1
 800b7d4:	005b      	lsls	r3, r3, #1
 800b7d6:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b7d8:	4b9a      	ldr	r3, [pc, #616]	; (800ba44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b7da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7de:	0f1b      	lsrs	r3, r3, #28
 800b7e0:	f003 0307 	and.w	r3, r3, #7
 800b7e4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	691b      	ldr	r3, [r3, #16]
 800b7ea:	019a      	lsls	r2, r3, #6
 800b7ec:	697b      	ldr	r3, [r7, #20]
 800b7ee:	085b      	lsrs	r3, r3, #1
 800b7f0:	3b01      	subs	r3, #1
 800b7f2:	041b      	lsls	r3, r3, #16
 800b7f4:	431a      	orrs	r2, r3
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	699b      	ldr	r3, [r3, #24]
 800b7fa:	061b      	lsls	r3, r3, #24
 800b7fc:	431a      	orrs	r2, r3
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	071b      	lsls	r3, r3, #28
 800b802:	4990      	ldr	r1, [pc, #576]	; (800ba44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b804:	4313      	orrs	r3, r2
 800b806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800b80a:	4b8e      	ldr	r3, [pc, #568]	; (800ba44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b80c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b810:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b818:	3b01      	subs	r3, #1
 800b81a:	021b      	lsls	r3, r3, #8
 800b81c:	4989      	ldr	r1, [pc, #548]	; (800ba44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b81e:	4313      	orrs	r3, r2
 800b820:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f003 0308 	and.w	r3, r3, #8
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d02c      	beq.n	800b88a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800b830:	4b84      	ldr	r3, [pc, #528]	; (800ba44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b836:	0c1b      	lsrs	r3, r3, #16
 800b838:	f003 0303 	and.w	r3, r3, #3
 800b83c:	3301      	adds	r3, #1
 800b83e:	005b      	lsls	r3, r3, #1
 800b840:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b842:	4b80      	ldr	r3, [pc, #512]	; (800ba44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b848:	0e1b      	lsrs	r3, r3, #24
 800b84a:	f003 030f 	and.w	r3, r3, #15
 800b84e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	691b      	ldr	r3, [r3, #16]
 800b854:	019a      	lsls	r2, r3, #6
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	085b      	lsrs	r3, r3, #1
 800b85a:	3b01      	subs	r3, #1
 800b85c:	041b      	lsls	r3, r3, #16
 800b85e:	431a      	orrs	r2, r3
 800b860:	693b      	ldr	r3, [r7, #16]
 800b862:	061b      	lsls	r3, r3, #24
 800b864:	431a      	orrs	r2, r3
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	69db      	ldr	r3, [r3, #28]
 800b86a:	071b      	lsls	r3, r3, #28
 800b86c:	4975      	ldr	r1, [pc, #468]	; (800ba44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b86e:	4313      	orrs	r3, r2
 800b870:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800b874:	4b73      	ldr	r3, [pc, #460]	; (800ba44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b876:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b87a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b882:	4970      	ldr	r1, [pc, #448]	; (800ba44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b884:	4313      	orrs	r3, r2
 800b886:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b892:	2b00      	cmp	r3, #0
 800b894:	d024      	beq.n	800b8e0 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800b89a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b89e:	d11f      	bne.n	800b8e0 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b8a0:	4b68      	ldr	r3, [pc, #416]	; (800ba44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b8a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8a6:	0e1b      	lsrs	r3, r3, #24
 800b8a8:	f003 030f 	and.w	r3, r3, #15
 800b8ac:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b8ae:	4b65      	ldr	r3, [pc, #404]	; (800ba44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b8b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8b4:	0f1b      	lsrs	r3, r3, #28
 800b8b6:	f003 0307 	and.w	r3, r3, #7
 800b8ba:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	691b      	ldr	r3, [r3, #16]
 800b8c0:	019a      	lsls	r2, r3, #6
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	695b      	ldr	r3, [r3, #20]
 800b8c6:	085b      	lsrs	r3, r3, #1
 800b8c8:	3b01      	subs	r3, #1
 800b8ca:	041b      	lsls	r3, r3, #16
 800b8cc:	431a      	orrs	r2, r3
 800b8ce:	693b      	ldr	r3, [r7, #16]
 800b8d0:	061b      	lsls	r3, r3, #24
 800b8d2:	431a      	orrs	r2, r3
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	071b      	lsls	r3, r3, #28
 800b8d8:	495a      	ldr	r1, [pc, #360]	; (800ba44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b8da:	4313      	orrs	r3, r2
 800b8dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800b8e0:	4b59      	ldr	r3, [pc, #356]	; (800ba48 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800b8e2:	2201      	movs	r2, #1
 800b8e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b8e6:	f7fd f9f3 	bl	8008cd0 <HAL_GetTick>
 800b8ea:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b8ec:	e008      	b.n	800b900 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800b8ee:	f7fd f9ef 	bl	8008cd0 <HAL_GetTick>
 800b8f2:	4602      	mov	r2, r0
 800b8f4:	69fb      	ldr	r3, [r7, #28]
 800b8f6:	1ad3      	subs	r3, r2, r3
 800b8f8:	2b02      	cmp	r3, #2
 800b8fa:	d901      	bls.n	800b900 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b8fc:	2303      	movs	r3, #3
 800b8fe:	e09c      	b.n	800ba3a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b900:	4b50      	ldr	r3, [pc, #320]	; (800ba44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b908:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b90c:	d1ef      	bne.n	800b8ee <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	f003 0320 	and.w	r3, r3, #32
 800b916:	2b00      	cmp	r3, #0
 800b918:	f000 8083 	beq.w	800ba22 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b91c:	2300      	movs	r3, #0
 800b91e:	60bb      	str	r3, [r7, #8]
 800b920:	4b48      	ldr	r3, [pc, #288]	; (800ba44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b924:	4a47      	ldr	r2, [pc, #284]	; (800ba44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b92a:	6413      	str	r3, [r2, #64]	; 0x40
 800b92c:	4b45      	ldr	r3, [pc, #276]	; (800ba44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b92e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b934:	60bb      	str	r3, [r7, #8]
 800b936:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800b938:	4b44      	ldr	r3, [pc, #272]	; (800ba4c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	4a43      	ldr	r2, [pc, #268]	; (800ba4c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800b93e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b942:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b944:	f7fd f9c4 	bl	8008cd0 <HAL_GetTick>
 800b948:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b94a:	e008      	b.n	800b95e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800b94c:	f7fd f9c0 	bl	8008cd0 <HAL_GetTick>
 800b950:	4602      	mov	r2, r0
 800b952:	69fb      	ldr	r3, [r7, #28]
 800b954:	1ad3      	subs	r3, r2, r3
 800b956:	2b02      	cmp	r3, #2
 800b958:	d901      	bls.n	800b95e <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800b95a:	2303      	movs	r3, #3
 800b95c:	e06d      	b.n	800ba3a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b95e:	4b3b      	ldr	r3, [pc, #236]	; (800ba4c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b966:	2b00      	cmp	r3, #0
 800b968:	d0f0      	beq.n	800b94c <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b96a:	4b36      	ldr	r3, [pc, #216]	; (800ba44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b96c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b96e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b972:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b974:	69bb      	ldr	r3, [r7, #24]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d02f      	beq.n	800b9da <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b97e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b982:	69ba      	ldr	r2, [r7, #24]
 800b984:	429a      	cmp	r2, r3
 800b986:	d028      	beq.n	800b9da <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b988:	4b2e      	ldr	r3, [pc, #184]	; (800ba44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b98a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b98c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b990:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b992:	4b2f      	ldr	r3, [pc, #188]	; (800ba50 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800b994:	2201      	movs	r2, #1
 800b996:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b998:	4b2d      	ldr	r3, [pc, #180]	; (800ba50 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800b99a:	2200      	movs	r2, #0
 800b99c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800b99e:	4a29      	ldr	r2, [pc, #164]	; (800ba44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b9a0:	69bb      	ldr	r3, [r7, #24]
 800b9a2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b9a4:	4b27      	ldr	r3, [pc, #156]	; (800ba44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b9a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9a8:	f003 0301 	and.w	r3, r3, #1
 800b9ac:	2b01      	cmp	r3, #1
 800b9ae:	d114      	bne.n	800b9da <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800b9b0:	f7fd f98e 	bl	8008cd0 <HAL_GetTick>
 800b9b4:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b9b6:	e00a      	b.n	800b9ce <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b9b8:	f7fd f98a 	bl	8008cd0 <HAL_GetTick>
 800b9bc:	4602      	mov	r2, r0
 800b9be:	69fb      	ldr	r3, [r7, #28]
 800b9c0:	1ad3      	subs	r3, r2, r3
 800b9c2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	d901      	bls.n	800b9ce <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800b9ca:	2303      	movs	r3, #3
 800b9cc:	e035      	b.n	800ba3a <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b9ce:	4b1d      	ldr	r3, [pc, #116]	; (800ba44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b9d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9d2:	f003 0302 	and.w	r3, r3, #2
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d0ee      	beq.n	800b9b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b9e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b9e6:	d10d      	bne.n	800ba04 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800b9e8:	4b16      	ldr	r3, [pc, #88]	; (800ba44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b9ea:	689b      	ldr	r3, [r3, #8]
 800b9ec:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9f4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b9f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b9fc:	4911      	ldr	r1, [pc, #68]	; (800ba44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b9fe:	4313      	orrs	r3, r2
 800ba00:	608b      	str	r3, [r1, #8]
 800ba02:	e005      	b.n	800ba10 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800ba04:	4b0f      	ldr	r3, [pc, #60]	; (800ba44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ba06:	689b      	ldr	r3, [r3, #8]
 800ba08:	4a0e      	ldr	r2, [pc, #56]	; (800ba44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ba0a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800ba0e:	6093      	str	r3, [r2, #8]
 800ba10:	4b0c      	ldr	r3, [pc, #48]	; (800ba44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ba12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ba1c:	4909      	ldr	r1, [pc, #36]	; (800ba44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ba1e:	4313      	orrs	r3, r2
 800ba20:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	f003 0310 	and.w	r3, r3, #16
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d004      	beq.n	800ba38 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800ba34:	4b07      	ldr	r3, [pc, #28]	; (800ba54 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800ba36:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800ba38:	2300      	movs	r3, #0
}
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	3720      	adds	r7, #32
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bd80      	pop	{r7, pc}
 800ba42:	bf00      	nop
 800ba44:	40023800 	.word	0x40023800
 800ba48:	42470070 	.word	0x42470070
 800ba4c:	40007000 	.word	0x40007000
 800ba50:	42470e40 	.word	0x42470e40
 800ba54:	424711e0 	.word	0x424711e0

0800ba58 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b086      	sub	sp, #24
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ba60:	2300      	movs	r3, #0
 800ba62:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	f003 0301 	and.w	r3, r3, #1
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d075      	beq.n	800bb5c <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800ba70:	4ba2      	ldr	r3, [pc, #648]	; (800bcfc <HAL_RCC_OscConfig+0x2a4>)
 800ba72:	689b      	ldr	r3, [r3, #8]
 800ba74:	f003 030c 	and.w	r3, r3, #12
 800ba78:	2b04      	cmp	r3, #4
 800ba7a:	d00c      	beq.n	800ba96 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ba7c:	4b9f      	ldr	r3, [pc, #636]	; (800bcfc <HAL_RCC_OscConfig+0x2a4>)
 800ba7e:	689b      	ldr	r3, [r3, #8]
 800ba80:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800ba84:	2b08      	cmp	r3, #8
 800ba86:	d112      	bne.n	800baae <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ba88:	4b9c      	ldr	r3, [pc, #624]	; (800bcfc <HAL_RCC_OscConfig+0x2a4>)
 800ba8a:	685b      	ldr	r3, [r3, #4]
 800ba8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ba90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ba94:	d10b      	bne.n	800baae <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ba96:	4b99      	ldr	r3, [pc, #612]	; (800bcfc <HAL_RCC_OscConfig+0x2a4>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d05b      	beq.n	800bb5a <HAL_RCC_OscConfig+0x102>
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	685b      	ldr	r3, [r3, #4]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d157      	bne.n	800bb5a <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800baaa:	2301      	movs	r3, #1
 800baac:	e20b      	b.n	800bec6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	685b      	ldr	r3, [r3, #4]
 800bab2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bab6:	d106      	bne.n	800bac6 <HAL_RCC_OscConfig+0x6e>
 800bab8:	4b90      	ldr	r3, [pc, #576]	; (800bcfc <HAL_RCC_OscConfig+0x2a4>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	4a8f      	ldr	r2, [pc, #572]	; (800bcfc <HAL_RCC_OscConfig+0x2a4>)
 800babe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bac2:	6013      	str	r3, [r2, #0]
 800bac4:	e01d      	b.n	800bb02 <HAL_RCC_OscConfig+0xaa>
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	685b      	ldr	r3, [r3, #4]
 800baca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bace:	d10c      	bne.n	800baea <HAL_RCC_OscConfig+0x92>
 800bad0:	4b8a      	ldr	r3, [pc, #552]	; (800bcfc <HAL_RCC_OscConfig+0x2a4>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	4a89      	ldr	r2, [pc, #548]	; (800bcfc <HAL_RCC_OscConfig+0x2a4>)
 800bad6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bada:	6013      	str	r3, [r2, #0]
 800badc:	4b87      	ldr	r3, [pc, #540]	; (800bcfc <HAL_RCC_OscConfig+0x2a4>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	4a86      	ldr	r2, [pc, #536]	; (800bcfc <HAL_RCC_OscConfig+0x2a4>)
 800bae2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bae6:	6013      	str	r3, [r2, #0]
 800bae8:	e00b      	b.n	800bb02 <HAL_RCC_OscConfig+0xaa>
 800baea:	4b84      	ldr	r3, [pc, #528]	; (800bcfc <HAL_RCC_OscConfig+0x2a4>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	4a83      	ldr	r2, [pc, #524]	; (800bcfc <HAL_RCC_OscConfig+0x2a4>)
 800baf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800baf4:	6013      	str	r3, [r2, #0]
 800baf6:	4b81      	ldr	r3, [pc, #516]	; (800bcfc <HAL_RCC_OscConfig+0x2a4>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	4a80      	ldr	r2, [pc, #512]	; (800bcfc <HAL_RCC_OscConfig+0x2a4>)
 800bafc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bb00:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	685b      	ldr	r3, [r3, #4]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d013      	beq.n	800bb32 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb0a:	f7fd f8e1 	bl	8008cd0 <HAL_GetTick>
 800bb0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bb10:	e008      	b.n	800bb24 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bb12:	f7fd f8dd 	bl	8008cd0 <HAL_GetTick>
 800bb16:	4602      	mov	r2, r0
 800bb18:	693b      	ldr	r3, [r7, #16]
 800bb1a:	1ad3      	subs	r3, r2, r3
 800bb1c:	2b64      	cmp	r3, #100	; 0x64
 800bb1e:	d901      	bls.n	800bb24 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800bb20:	2303      	movs	r3, #3
 800bb22:	e1d0      	b.n	800bec6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bb24:	4b75      	ldr	r3, [pc, #468]	; (800bcfc <HAL_RCC_OscConfig+0x2a4>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d0f0      	beq.n	800bb12 <HAL_RCC_OscConfig+0xba>
 800bb30:	e014      	b.n	800bb5c <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb32:	f7fd f8cd 	bl	8008cd0 <HAL_GetTick>
 800bb36:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bb38:	e008      	b.n	800bb4c <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bb3a:	f7fd f8c9 	bl	8008cd0 <HAL_GetTick>
 800bb3e:	4602      	mov	r2, r0
 800bb40:	693b      	ldr	r3, [r7, #16]
 800bb42:	1ad3      	subs	r3, r2, r3
 800bb44:	2b64      	cmp	r3, #100	; 0x64
 800bb46:	d901      	bls.n	800bb4c <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800bb48:	2303      	movs	r3, #3
 800bb4a:	e1bc      	b.n	800bec6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bb4c:	4b6b      	ldr	r3, [pc, #428]	; (800bcfc <HAL_RCC_OscConfig+0x2a4>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d1f0      	bne.n	800bb3a <HAL_RCC_OscConfig+0xe2>
 800bb58:	e000      	b.n	800bb5c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bb5a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	f003 0302 	and.w	r3, r3, #2
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d063      	beq.n	800bc30 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800bb68:	4b64      	ldr	r3, [pc, #400]	; (800bcfc <HAL_RCC_OscConfig+0x2a4>)
 800bb6a:	689b      	ldr	r3, [r3, #8]
 800bb6c:	f003 030c 	and.w	r3, r3, #12
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d00b      	beq.n	800bb8c <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bb74:	4b61      	ldr	r3, [pc, #388]	; (800bcfc <HAL_RCC_OscConfig+0x2a4>)
 800bb76:	689b      	ldr	r3, [r3, #8]
 800bb78:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800bb7c:	2b08      	cmp	r3, #8
 800bb7e:	d11c      	bne.n	800bbba <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bb80:	4b5e      	ldr	r3, [pc, #376]	; (800bcfc <HAL_RCC_OscConfig+0x2a4>)
 800bb82:	685b      	ldr	r3, [r3, #4]
 800bb84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d116      	bne.n	800bbba <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bb8c:	4b5b      	ldr	r3, [pc, #364]	; (800bcfc <HAL_RCC_OscConfig+0x2a4>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f003 0302 	and.w	r3, r3, #2
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d005      	beq.n	800bba4 <HAL_RCC_OscConfig+0x14c>
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	68db      	ldr	r3, [r3, #12]
 800bb9c:	2b01      	cmp	r3, #1
 800bb9e:	d001      	beq.n	800bba4 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800bba0:	2301      	movs	r3, #1
 800bba2:	e190      	b.n	800bec6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bba4:	4b55      	ldr	r3, [pc, #340]	; (800bcfc <HAL_RCC_OscConfig+0x2a4>)
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	691b      	ldr	r3, [r3, #16]
 800bbb0:	00db      	lsls	r3, r3, #3
 800bbb2:	4952      	ldr	r1, [pc, #328]	; (800bcfc <HAL_RCC_OscConfig+0x2a4>)
 800bbb4:	4313      	orrs	r3, r2
 800bbb6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bbb8:	e03a      	b.n	800bc30 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	68db      	ldr	r3, [r3, #12]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d020      	beq.n	800bc04 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bbc2:	4b4f      	ldr	r3, [pc, #316]	; (800bd00 <HAL_RCC_OscConfig+0x2a8>)
 800bbc4:	2201      	movs	r2, #1
 800bbc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bbc8:	f7fd f882 	bl	8008cd0 <HAL_GetTick>
 800bbcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bbce:	e008      	b.n	800bbe2 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bbd0:	f7fd f87e 	bl	8008cd0 <HAL_GetTick>
 800bbd4:	4602      	mov	r2, r0
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	1ad3      	subs	r3, r2, r3
 800bbda:	2b02      	cmp	r3, #2
 800bbdc:	d901      	bls.n	800bbe2 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800bbde:	2303      	movs	r3, #3
 800bbe0:	e171      	b.n	800bec6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bbe2:	4b46      	ldr	r3, [pc, #280]	; (800bcfc <HAL_RCC_OscConfig+0x2a4>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	f003 0302 	and.w	r3, r3, #2
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d0f0      	beq.n	800bbd0 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bbee:	4b43      	ldr	r3, [pc, #268]	; (800bcfc <HAL_RCC_OscConfig+0x2a4>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	691b      	ldr	r3, [r3, #16]
 800bbfa:	00db      	lsls	r3, r3, #3
 800bbfc:	493f      	ldr	r1, [pc, #252]	; (800bcfc <HAL_RCC_OscConfig+0x2a4>)
 800bbfe:	4313      	orrs	r3, r2
 800bc00:	600b      	str	r3, [r1, #0]
 800bc02:	e015      	b.n	800bc30 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bc04:	4b3e      	ldr	r3, [pc, #248]	; (800bd00 <HAL_RCC_OscConfig+0x2a8>)
 800bc06:	2200      	movs	r2, #0
 800bc08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc0a:	f7fd f861 	bl	8008cd0 <HAL_GetTick>
 800bc0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bc10:	e008      	b.n	800bc24 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bc12:	f7fd f85d 	bl	8008cd0 <HAL_GetTick>
 800bc16:	4602      	mov	r2, r0
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	1ad3      	subs	r3, r2, r3
 800bc1c:	2b02      	cmp	r3, #2
 800bc1e:	d901      	bls.n	800bc24 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800bc20:	2303      	movs	r3, #3
 800bc22:	e150      	b.n	800bec6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bc24:	4b35      	ldr	r3, [pc, #212]	; (800bcfc <HAL_RCC_OscConfig+0x2a4>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f003 0302 	and.w	r3, r3, #2
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d1f0      	bne.n	800bc12 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	f003 0308 	and.w	r3, r3, #8
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d030      	beq.n	800bc9e <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	695b      	ldr	r3, [r3, #20]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d016      	beq.n	800bc72 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bc44:	4b2f      	ldr	r3, [pc, #188]	; (800bd04 <HAL_RCC_OscConfig+0x2ac>)
 800bc46:	2201      	movs	r2, #1
 800bc48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bc4a:	f7fd f841 	bl	8008cd0 <HAL_GetTick>
 800bc4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bc50:	e008      	b.n	800bc64 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bc52:	f7fd f83d 	bl	8008cd0 <HAL_GetTick>
 800bc56:	4602      	mov	r2, r0
 800bc58:	693b      	ldr	r3, [r7, #16]
 800bc5a:	1ad3      	subs	r3, r2, r3
 800bc5c:	2b02      	cmp	r3, #2
 800bc5e:	d901      	bls.n	800bc64 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800bc60:	2303      	movs	r3, #3
 800bc62:	e130      	b.n	800bec6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bc64:	4b25      	ldr	r3, [pc, #148]	; (800bcfc <HAL_RCC_OscConfig+0x2a4>)
 800bc66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc68:	f003 0302 	and.w	r3, r3, #2
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d0f0      	beq.n	800bc52 <HAL_RCC_OscConfig+0x1fa>
 800bc70:	e015      	b.n	800bc9e <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bc72:	4b24      	ldr	r3, [pc, #144]	; (800bd04 <HAL_RCC_OscConfig+0x2ac>)
 800bc74:	2200      	movs	r2, #0
 800bc76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bc78:	f7fd f82a 	bl	8008cd0 <HAL_GetTick>
 800bc7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bc7e:	e008      	b.n	800bc92 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bc80:	f7fd f826 	bl	8008cd0 <HAL_GetTick>
 800bc84:	4602      	mov	r2, r0
 800bc86:	693b      	ldr	r3, [r7, #16]
 800bc88:	1ad3      	subs	r3, r2, r3
 800bc8a:	2b02      	cmp	r3, #2
 800bc8c:	d901      	bls.n	800bc92 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800bc8e:	2303      	movs	r3, #3
 800bc90:	e119      	b.n	800bec6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bc92:	4b1a      	ldr	r3, [pc, #104]	; (800bcfc <HAL_RCC_OscConfig+0x2a4>)
 800bc94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc96:	f003 0302 	and.w	r3, r3, #2
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d1f0      	bne.n	800bc80 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	f003 0304 	and.w	r3, r3, #4
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	f000 809f 	beq.w	800bdea <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bcac:	2300      	movs	r3, #0
 800bcae:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bcb0:	4b12      	ldr	r3, [pc, #72]	; (800bcfc <HAL_RCC_OscConfig+0x2a4>)
 800bcb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d10f      	bne.n	800bcdc <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	60fb      	str	r3, [r7, #12]
 800bcc0:	4b0e      	ldr	r3, [pc, #56]	; (800bcfc <HAL_RCC_OscConfig+0x2a4>)
 800bcc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcc4:	4a0d      	ldr	r2, [pc, #52]	; (800bcfc <HAL_RCC_OscConfig+0x2a4>)
 800bcc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bcca:	6413      	str	r3, [r2, #64]	; 0x40
 800bccc:	4b0b      	ldr	r3, [pc, #44]	; (800bcfc <HAL_RCC_OscConfig+0x2a4>)
 800bcce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bcd4:	60fb      	str	r3, [r7, #12]
 800bcd6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800bcd8:	2301      	movs	r3, #1
 800bcda:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bcdc:	4b0a      	ldr	r3, [pc, #40]	; (800bd08 <HAL_RCC_OscConfig+0x2b0>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d120      	bne.n	800bd2a <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800bce8:	4b07      	ldr	r3, [pc, #28]	; (800bd08 <HAL_RCC_OscConfig+0x2b0>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	4a06      	ldr	r2, [pc, #24]	; (800bd08 <HAL_RCC_OscConfig+0x2b0>)
 800bcee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bcf2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bcf4:	f7fc ffec 	bl	8008cd0 <HAL_GetTick>
 800bcf8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bcfa:	e010      	b.n	800bd1e <HAL_RCC_OscConfig+0x2c6>
 800bcfc:	40023800 	.word	0x40023800
 800bd00:	42470000 	.word	0x42470000
 800bd04:	42470e80 	.word	0x42470e80
 800bd08:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bd0c:	f7fc ffe0 	bl	8008cd0 <HAL_GetTick>
 800bd10:	4602      	mov	r2, r0
 800bd12:	693b      	ldr	r3, [r7, #16]
 800bd14:	1ad3      	subs	r3, r2, r3
 800bd16:	2b02      	cmp	r3, #2
 800bd18:	d901      	bls.n	800bd1e <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800bd1a:	2303      	movs	r3, #3
 800bd1c:	e0d3      	b.n	800bec6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bd1e:	4b6c      	ldr	r3, [pc, #432]	; (800bed0 <HAL_RCC_OscConfig+0x478>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d0f0      	beq.n	800bd0c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	689b      	ldr	r3, [r3, #8]
 800bd2e:	2b01      	cmp	r3, #1
 800bd30:	d106      	bne.n	800bd40 <HAL_RCC_OscConfig+0x2e8>
 800bd32:	4b68      	ldr	r3, [pc, #416]	; (800bed4 <HAL_RCC_OscConfig+0x47c>)
 800bd34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd36:	4a67      	ldr	r2, [pc, #412]	; (800bed4 <HAL_RCC_OscConfig+0x47c>)
 800bd38:	f043 0301 	orr.w	r3, r3, #1
 800bd3c:	6713      	str	r3, [r2, #112]	; 0x70
 800bd3e:	e01c      	b.n	800bd7a <HAL_RCC_OscConfig+0x322>
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	689b      	ldr	r3, [r3, #8]
 800bd44:	2b05      	cmp	r3, #5
 800bd46:	d10c      	bne.n	800bd62 <HAL_RCC_OscConfig+0x30a>
 800bd48:	4b62      	ldr	r3, [pc, #392]	; (800bed4 <HAL_RCC_OscConfig+0x47c>)
 800bd4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd4c:	4a61      	ldr	r2, [pc, #388]	; (800bed4 <HAL_RCC_OscConfig+0x47c>)
 800bd4e:	f043 0304 	orr.w	r3, r3, #4
 800bd52:	6713      	str	r3, [r2, #112]	; 0x70
 800bd54:	4b5f      	ldr	r3, [pc, #380]	; (800bed4 <HAL_RCC_OscConfig+0x47c>)
 800bd56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd58:	4a5e      	ldr	r2, [pc, #376]	; (800bed4 <HAL_RCC_OscConfig+0x47c>)
 800bd5a:	f043 0301 	orr.w	r3, r3, #1
 800bd5e:	6713      	str	r3, [r2, #112]	; 0x70
 800bd60:	e00b      	b.n	800bd7a <HAL_RCC_OscConfig+0x322>
 800bd62:	4b5c      	ldr	r3, [pc, #368]	; (800bed4 <HAL_RCC_OscConfig+0x47c>)
 800bd64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd66:	4a5b      	ldr	r2, [pc, #364]	; (800bed4 <HAL_RCC_OscConfig+0x47c>)
 800bd68:	f023 0301 	bic.w	r3, r3, #1
 800bd6c:	6713      	str	r3, [r2, #112]	; 0x70
 800bd6e:	4b59      	ldr	r3, [pc, #356]	; (800bed4 <HAL_RCC_OscConfig+0x47c>)
 800bd70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd72:	4a58      	ldr	r2, [pc, #352]	; (800bed4 <HAL_RCC_OscConfig+0x47c>)
 800bd74:	f023 0304 	bic.w	r3, r3, #4
 800bd78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	689b      	ldr	r3, [r3, #8]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d015      	beq.n	800bdae <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bd82:	f7fc ffa5 	bl	8008cd0 <HAL_GetTick>
 800bd86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bd88:	e00a      	b.n	800bda0 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bd8a:	f7fc ffa1 	bl	8008cd0 <HAL_GetTick>
 800bd8e:	4602      	mov	r2, r0
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	1ad3      	subs	r3, r2, r3
 800bd94:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd98:	4293      	cmp	r3, r2
 800bd9a:	d901      	bls.n	800bda0 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800bd9c:	2303      	movs	r3, #3
 800bd9e:	e092      	b.n	800bec6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bda0:	4b4c      	ldr	r3, [pc, #304]	; (800bed4 <HAL_RCC_OscConfig+0x47c>)
 800bda2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bda4:	f003 0302 	and.w	r3, r3, #2
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d0ee      	beq.n	800bd8a <HAL_RCC_OscConfig+0x332>
 800bdac:	e014      	b.n	800bdd8 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bdae:	f7fc ff8f 	bl	8008cd0 <HAL_GetTick>
 800bdb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bdb4:	e00a      	b.n	800bdcc <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bdb6:	f7fc ff8b 	bl	8008cd0 <HAL_GetTick>
 800bdba:	4602      	mov	r2, r0
 800bdbc:	693b      	ldr	r3, [r7, #16]
 800bdbe:	1ad3      	subs	r3, r2, r3
 800bdc0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bdc4:	4293      	cmp	r3, r2
 800bdc6:	d901      	bls.n	800bdcc <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800bdc8:	2303      	movs	r3, #3
 800bdca:	e07c      	b.n	800bec6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bdcc:	4b41      	ldr	r3, [pc, #260]	; (800bed4 <HAL_RCC_OscConfig+0x47c>)
 800bdce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdd0:	f003 0302 	and.w	r3, r3, #2
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d1ee      	bne.n	800bdb6 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bdd8:	7dfb      	ldrb	r3, [r7, #23]
 800bdda:	2b01      	cmp	r3, #1
 800bddc:	d105      	bne.n	800bdea <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bdde:	4b3d      	ldr	r3, [pc, #244]	; (800bed4 <HAL_RCC_OscConfig+0x47c>)
 800bde0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bde2:	4a3c      	ldr	r2, [pc, #240]	; (800bed4 <HAL_RCC_OscConfig+0x47c>)
 800bde4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bde8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	699b      	ldr	r3, [r3, #24]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d068      	beq.n	800bec4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800bdf2:	4b38      	ldr	r3, [pc, #224]	; (800bed4 <HAL_RCC_OscConfig+0x47c>)
 800bdf4:	689b      	ldr	r3, [r3, #8]
 800bdf6:	f003 030c 	and.w	r3, r3, #12
 800bdfa:	2b08      	cmp	r3, #8
 800bdfc:	d060      	beq.n	800bec0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	699b      	ldr	r3, [r3, #24]
 800be02:	2b02      	cmp	r3, #2
 800be04:	d145      	bne.n	800be92 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800be06:	4b34      	ldr	r3, [pc, #208]	; (800bed8 <HAL_RCC_OscConfig+0x480>)
 800be08:	2200      	movs	r2, #0
 800be0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be0c:	f7fc ff60 	bl	8008cd0 <HAL_GetTick>
 800be10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800be12:	e008      	b.n	800be26 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800be14:	f7fc ff5c 	bl	8008cd0 <HAL_GetTick>
 800be18:	4602      	mov	r2, r0
 800be1a:	693b      	ldr	r3, [r7, #16]
 800be1c:	1ad3      	subs	r3, r2, r3
 800be1e:	2b02      	cmp	r3, #2
 800be20:	d901      	bls.n	800be26 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800be22:	2303      	movs	r3, #3
 800be24:	e04f      	b.n	800bec6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800be26:	4b2b      	ldr	r3, [pc, #172]	; (800bed4 <HAL_RCC_OscConfig+0x47c>)
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d1f0      	bne.n	800be14 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	69da      	ldr	r2, [r3, #28]
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6a1b      	ldr	r3, [r3, #32]
 800be3a:	431a      	orrs	r2, r3
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be40:	019b      	lsls	r3, r3, #6
 800be42:	431a      	orrs	r2, r3
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be48:	085b      	lsrs	r3, r3, #1
 800be4a:	3b01      	subs	r3, #1
 800be4c:	041b      	lsls	r3, r3, #16
 800be4e:	431a      	orrs	r2, r3
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be54:	061b      	lsls	r3, r3, #24
 800be56:	431a      	orrs	r2, r3
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be5c:	071b      	lsls	r3, r3, #28
 800be5e:	491d      	ldr	r1, [pc, #116]	; (800bed4 <HAL_RCC_OscConfig+0x47c>)
 800be60:	4313      	orrs	r3, r2
 800be62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800be64:	4b1c      	ldr	r3, [pc, #112]	; (800bed8 <HAL_RCC_OscConfig+0x480>)
 800be66:	2201      	movs	r2, #1
 800be68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be6a:	f7fc ff31 	bl	8008cd0 <HAL_GetTick>
 800be6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800be70:	e008      	b.n	800be84 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800be72:	f7fc ff2d 	bl	8008cd0 <HAL_GetTick>
 800be76:	4602      	mov	r2, r0
 800be78:	693b      	ldr	r3, [r7, #16]
 800be7a:	1ad3      	subs	r3, r2, r3
 800be7c:	2b02      	cmp	r3, #2
 800be7e:	d901      	bls.n	800be84 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800be80:	2303      	movs	r3, #3
 800be82:	e020      	b.n	800bec6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800be84:	4b13      	ldr	r3, [pc, #76]	; (800bed4 <HAL_RCC_OscConfig+0x47c>)
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d0f0      	beq.n	800be72 <HAL_RCC_OscConfig+0x41a>
 800be90:	e018      	b.n	800bec4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800be92:	4b11      	ldr	r3, [pc, #68]	; (800bed8 <HAL_RCC_OscConfig+0x480>)
 800be94:	2200      	movs	r2, #0
 800be96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be98:	f7fc ff1a 	bl	8008cd0 <HAL_GetTick>
 800be9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800be9e:	e008      	b.n	800beb2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bea0:	f7fc ff16 	bl	8008cd0 <HAL_GetTick>
 800bea4:	4602      	mov	r2, r0
 800bea6:	693b      	ldr	r3, [r7, #16]
 800bea8:	1ad3      	subs	r3, r2, r3
 800beaa:	2b02      	cmp	r3, #2
 800beac:	d901      	bls.n	800beb2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800beae:	2303      	movs	r3, #3
 800beb0:	e009      	b.n	800bec6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800beb2:	4b08      	ldr	r3, [pc, #32]	; (800bed4 <HAL_RCC_OscConfig+0x47c>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d1f0      	bne.n	800bea0 <HAL_RCC_OscConfig+0x448>
 800bebe:	e001      	b.n	800bec4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800bec0:	2301      	movs	r3, #1
 800bec2:	e000      	b.n	800bec6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800bec4:	2300      	movs	r3, #0
}
 800bec6:	4618      	mov	r0, r3
 800bec8:	3718      	adds	r7, #24
 800beca:	46bd      	mov	sp, r7
 800becc:	bd80      	pop	{r7, pc}
 800bece:	bf00      	nop
 800bed0:	40007000 	.word	0x40007000
 800bed4:	40023800 	.word	0x40023800
 800bed8:	42470060 	.word	0x42470060

0800bedc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b082      	sub	sp, #8
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d101      	bne.n	800beee <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800beea:	2301      	movs	r3, #1
 800beec:	e022      	b.n	800bf34 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bef4:	b2db      	uxtb	r3, r3
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d105      	bne.n	800bf06 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2200      	movs	r2, #0
 800befe:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	f7fa fc5d 	bl	80067c0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	2203      	movs	r2, #3
 800bf0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f000 f814 	bl	800bf3c <HAL_SD_InitCard>
 800bf14:	4603      	mov	r3, r0
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d001      	beq.n	800bf1e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800bf1a:	2301      	movs	r3, #1
 800bf1c:	e00a      	b.n	800bf34 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2200      	movs	r2, #0
 800bf22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2200      	movs	r2, #0
 800bf28:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2201      	movs	r2, #1
 800bf2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800bf32:	2300      	movs	r3, #0
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3708      	adds	r7, #8
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}

0800bf3c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800bf3c:	b5b0      	push	{r4, r5, r7, lr}
 800bf3e:	b08e      	sub	sp, #56	; 0x38
 800bf40:	af04      	add	r7, sp, #16
 800bf42:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800bf44:	2300      	movs	r3, #0
 800bf46:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800bf48:	2300      	movs	r3, #0
 800bf4a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800bf50:	2300      	movs	r3, #0
 800bf52:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800bf54:	2300      	movs	r3, #0
 800bf56:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800bf58:	2376      	movs	r3, #118	; 0x76
 800bf5a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681d      	ldr	r5, [r3, #0]
 800bf60:	466c      	mov	r4, sp
 800bf62:	f107 0314 	add.w	r3, r7, #20
 800bf66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bf6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bf6e:	f107 0308 	add.w	r3, r7, #8
 800bf72:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bf74:	4628      	mov	r0, r5
 800bf76:	f003 fa87 	bl	800f488 <SDIO_Init>
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800bf80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d001      	beq.n	800bf8c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800bf88:	2301      	movs	r3, #1
 800bf8a:	e031      	b.n	800bff0 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800bf8c:	4b1a      	ldr	r3, [pc, #104]	; (800bff8 <HAL_SD_InitCard+0xbc>)
 800bf8e:	2200      	movs	r2, #0
 800bf90:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	4618      	mov	r0, r3
 800bf98:	f003 fabf 	bl	800f51a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800bf9c:	4b16      	ldr	r3, [pc, #88]	; (800bff8 <HAL_SD_InitCard+0xbc>)
 800bf9e:	2201      	movs	r2, #1
 800bfa0:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	f000 ffc6 	bl	800cf34 <SD_PowerON>
 800bfa8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bfaa:	6a3b      	ldr	r3, [r7, #32]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d00b      	beq.n	800bfc8 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2201      	movs	r2, #1
 800bfb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bfbc:	6a3b      	ldr	r3, [r7, #32]
 800bfbe:	431a      	orrs	r2, r3
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bfc4:	2301      	movs	r3, #1
 800bfc6:	e013      	b.n	800bff0 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800bfc8:	6878      	ldr	r0, [r7, #4]
 800bfca:	f000 fee5 	bl	800cd98 <SD_InitCard>
 800bfce:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bfd0:	6a3b      	ldr	r3, [r7, #32]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d00b      	beq.n	800bfee <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	2201      	movs	r2, #1
 800bfda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bfe2:	6a3b      	ldr	r3, [r7, #32]
 800bfe4:	431a      	orrs	r2, r3
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bfea:	2301      	movs	r3, #1
 800bfec:	e000      	b.n	800bff0 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800bfee:	2300      	movs	r3, #0
}
 800bff0:	4618      	mov	r0, r3
 800bff2:	3728      	adds	r7, #40	; 0x28
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bdb0      	pop	{r4, r5, r7, pc}
 800bff8:	422580a0 	.word	0x422580a0

0800bffc <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b08c      	sub	sp, #48	; 0x30
 800c000:	af00      	add	r7, sp, #0
 800c002:	60f8      	str	r0, [r7, #12]
 800c004:	60b9      	str	r1, [r7, #8]
 800c006:	607a      	str	r2, [r7, #4]
 800c008:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800c00e:	68bb      	ldr	r3, [r7, #8]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d107      	bne.n	800c024 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c018:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c020:	2301      	movs	r3, #1
 800c022:	e0c7      	b.n	800c1b4 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c02a:	b2db      	uxtb	r3, r3
 800c02c:	2b01      	cmp	r3, #1
 800c02e:	f040 80c0 	bne.w	800c1b2 <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	2200      	movs	r2, #0
 800c036:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c038:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	441a      	add	r2, r3
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c042:	429a      	cmp	r2, r3
 800c044:	d907      	bls.n	800c056 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c04a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800c052:	2301      	movs	r3, #1
 800c054:	e0ae      	b.n	800c1b4 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	2203      	movs	r2, #3
 800c05a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	2200      	movs	r2, #0
 800c064:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800c074:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c07a:	4a50      	ldr	r2, [pc, #320]	; (800c1bc <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800c07c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c082:	4a4f      	ldr	r2, [pc, #316]	; (800c1c0 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800c084:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c08a:	2200      	movs	r2, #0
 800c08c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	3380      	adds	r3, #128	; 0x80
 800c098:	4619      	mov	r1, r3
 800c09a:	68ba      	ldr	r2, [r7, #8]
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	025b      	lsls	r3, r3, #9
 800c0a0:	089b      	lsrs	r3, r3, #2
 800c0a2:	f7fd fc07 	bl	80098b4 <HAL_DMA_Start_IT>
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d017      	beq.n	800c0dc <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800c0ba:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	4a40      	ldr	r2, [pc, #256]	; (800c1c4 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800c0c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0c8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	2201      	movs	r2, #1
 800c0d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800c0d8:	2301      	movs	r3, #1
 800c0da:	e06b      	b.n	800c1b4 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800c0dc:	4b3a      	ldr	r3, [pc, #232]	; (800c1c8 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800c0de:	2201      	movs	r2, #1
 800c0e0:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0e6:	2b01      	cmp	r3, #1
 800c0e8:	d002      	beq.n	800c0f0 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800c0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ec:	025b      	lsls	r3, r3, #9
 800c0ee:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	f003 faa1 	bl	800f640 <SDMMC_CmdBlockLength>
 800c0fe:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800c100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c102:	2b00      	cmp	r3, #0
 800c104:	d00f      	beq.n	800c126 <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	4a2e      	ldr	r2, [pc, #184]	; (800c1c4 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800c10c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c114:	431a      	orrs	r2, r3
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	2201      	movs	r2, #1
 800c11e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800c122:	2301      	movs	r3, #1
 800c124:	e046      	b.n	800c1b4 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c126:	f04f 33ff 	mov.w	r3, #4294967295
 800c12a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	025b      	lsls	r3, r3, #9
 800c130:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800c132:	2390      	movs	r3, #144	; 0x90
 800c134:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800c136:	2302      	movs	r3, #2
 800c138:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800c13a:	2300      	movs	r3, #0
 800c13c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800c13e:	2301      	movs	r3, #1
 800c140:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	f107 0210 	add.w	r2, r7, #16
 800c14a:	4611      	mov	r1, r2
 800c14c:	4618      	mov	r0, r3
 800c14e:	f003 fa4b 	bl	800f5e8 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	2b01      	cmp	r3, #1
 800c156:	d90a      	bls.n	800c16e <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	2282      	movs	r2, #130	; 0x82
 800c15c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c164:	4618      	mov	r0, r3
 800c166:	f003 faaf 	bl	800f6c8 <SDMMC_CmdReadMultiBlock>
 800c16a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c16c:	e009      	b.n	800c182 <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	2281      	movs	r2, #129	; 0x81
 800c172:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c17a:	4618      	mov	r0, r3
 800c17c:	f003 fa82 	bl	800f684 <SDMMC_CmdReadSingleBlock>
 800c180:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800c182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c184:	2b00      	cmp	r3, #0
 800c186:	d012      	beq.n	800c1ae <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	4a0d      	ldr	r2, [pc, #52]	; (800c1c4 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800c18e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c196:	431a      	orrs	r2, r3
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	2201      	movs	r2, #1
 800c1a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	e002      	b.n	800c1b4 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	e000      	b.n	800c1b4 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800c1b2:	2302      	movs	r3, #2
  }
}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	3730      	adds	r7, #48	; 0x30
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	bd80      	pop	{r7, pc}
 800c1bc:	0800cba7 	.word	0x0800cba7
 800c1c0:	0800cc19 	.word	0x0800cc19
 800c1c4:	004005ff 	.word	0x004005ff
 800c1c8:	4225858c 	.word	0x4225858c

0800c1cc <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b08c      	sub	sp, #48	; 0x30
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	60f8      	str	r0, [r7, #12]
 800c1d4:	60b9      	str	r1, [r7, #8]
 800c1d6:	607a      	str	r2, [r7, #4]
 800c1d8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800c1de:	68bb      	ldr	r3, [r7, #8]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d107      	bne.n	800c1f4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1e8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	e0ca      	b.n	800c38a <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c1fa:	b2db      	uxtb	r3, r3
 800c1fc:	2b01      	cmp	r3, #1
 800c1fe:	f040 80c3 	bne.w	800c388 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	2200      	movs	r2, #0
 800c206:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c208:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	441a      	add	r2, r3
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c212:	429a      	cmp	r2, r3
 800c214:	d907      	bls.n	800c226 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c21a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800c222:	2301      	movs	r3, #1
 800c224:	e0b1      	b.n	800c38a <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	2203      	movs	r2, #3
 800c22a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	2200      	movs	r2, #0
 800c234:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	f042 021a 	orr.w	r2, r2, #26
 800c244:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c24a:	4a52      	ldr	r2, [pc, #328]	; (800c394 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800c24c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c252:	4a51      	ldr	r2, [pc, #324]	; (800c398 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800c254:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c25a:	2200      	movs	r2, #0
 800c25c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c262:	2b01      	cmp	r3, #1
 800c264:	d002      	beq.n	800c26c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800c266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c268:	025b      	lsls	r3, r3, #9
 800c26a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c274:	4618      	mov	r0, r3
 800c276:	f003 f9e3 	bl	800f640 <SDMMC_CmdBlockLength>
 800c27a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d00f      	beq.n	800c2a2 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	4a45      	ldr	r2, [pc, #276]	; (800c39c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800c288:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c290:	431a      	orrs	r2, r3
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	2201      	movs	r2, #1
 800c29a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800c29e:	2301      	movs	r3, #1
 800c2a0:	e073      	b.n	800c38a <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	2b01      	cmp	r3, #1
 800c2a6:	d90a      	bls.n	800c2be <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	22a0      	movs	r2, #160	; 0xa0
 800c2ac:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	f003 fa4b 	bl	800f750 <SDMMC_CmdWriteMultiBlock>
 800c2ba:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c2bc:	e009      	b.n	800c2d2 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	2290      	movs	r2, #144	; 0x90
 800c2c2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f003 fa1e 	bl	800f70c <SDMMC_CmdWriteSingleBlock>
 800c2d0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800c2d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d012      	beq.n	800c2fe <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	4a2f      	ldr	r2, [pc, #188]	; (800c39c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800c2de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c2e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2e6:	431a      	orrs	r2, r3
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	2201      	movs	r2, #1
 800c2f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c2fa:	2301      	movs	r3, #1
 800c2fc:	e045      	b.n	800c38a <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800c2fe:	4b28      	ldr	r3, [pc, #160]	; (800c3a0 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800c300:	2201      	movs	r2, #1
 800c302:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800c308:	68b9      	ldr	r1, [r7, #8]
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	3380      	adds	r3, #128	; 0x80
 800c310:	461a      	mov	r2, r3
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	025b      	lsls	r3, r3, #9
 800c316:	089b      	lsrs	r3, r3, #2
 800c318:	f7fd facc 	bl	80098b4 <HAL_DMA_Start_IT>
 800c31c:	4603      	mov	r3, r0
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d01a      	beq.n	800c358 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	f022 021a 	bic.w	r2, r2, #26
 800c330:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	4a19      	ldr	r2, [pc, #100]	; (800c39c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800c338:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c33e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	2201      	movs	r2, #1
 800c34a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	2200      	movs	r2, #0
 800c352:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c354:	2301      	movs	r3, #1
 800c356:	e018      	b.n	800c38a <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c358:	f04f 33ff 	mov.w	r3, #4294967295
 800c35c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	025b      	lsls	r3, r3, #9
 800c362:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800c364:	2390      	movs	r3, #144	; 0x90
 800c366:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800c368:	2300      	movs	r3, #0
 800c36a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800c36c:	2300      	movs	r3, #0
 800c36e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800c370:	2301      	movs	r3, #1
 800c372:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	f107 0210 	add.w	r2, r7, #16
 800c37c:	4611      	mov	r1, r2
 800c37e:	4618      	mov	r0, r3
 800c380:	f003 f932 	bl	800f5e8 <SDIO_ConfigData>

      return HAL_OK;
 800c384:	2300      	movs	r3, #0
 800c386:	e000      	b.n	800c38a <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800c388:	2302      	movs	r3, #2
  }
}
 800c38a:	4618      	mov	r0, r3
 800c38c:	3730      	adds	r7, #48	; 0x30
 800c38e:	46bd      	mov	sp, r7
 800c390:	bd80      	pop	{r7, pc}
 800c392:	bf00      	nop
 800c394:	0800cb7d 	.word	0x0800cb7d
 800c398:	0800cc19 	.word	0x0800cc19
 800c39c:	004005ff 	.word	0x004005ff
 800c3a0:	4225858c 	.word	0x4225858c

0800c3a4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b084      	sub	sp, #16
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3b0:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d008      	beq.n	800c3d2 <HAL_SD_IRQHandler+0x2e>
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	f003 0308 	and.w	r3, r3, #8
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d003      	beq.n	800c3d2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f000 ffc8 	bl	800d360 <SD_Read_IT>
 800c3d0:	e155      	b.n	800c67e <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	f000 808f 	beq.w	800c500 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c3ea:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3f2:	687a      	ldr	r2, [r7, #4]
 800c3f4:	6812      	ldr	r2, [r2, #0]
 800c3f6:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800c3fa:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800c3fe:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	f022 0201 	bic.w	r2, r2, #1
 800c40e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	f003 0308 	and.w	r3, r3, #8
 800c416:	2b00      	cmp	r3, #0
 800c418:	d039      	beq.n	800c48e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	f003 0302 	and.w	r3, r3, #2
 800c420:	2b00      	cmp	r3, #0
 800c422:	d104      	bne.n	800c42e <HAL_SD_IRQHandler+0x8a>
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	f003 0320 	and.w	r3, r3, #32
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d011      	beq.n	800c452 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	4618      	mov	r0, r3
 800c434:	f003 f9ae 	bl	800f794 <SDMMC_CmdStopTransfer>
 800c438:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800c43a:	68bb      	ldr	r3, [r7, #8]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d008      	beq.n	800c452 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	431a      	orrs	r2, r3
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800c44c:	6878      	ldr	r0, [r7, #4]
 800c44e:	f000 f91f 	bl	800c690 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	f240 523a 	movw	r2, #1338	; 0x53a
 800c45a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2201      	movs	r2, #1
 800c460:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2200      	movs	r2, #0
 800c468:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	f003 0301 	and.w	r3, r3, #1
 800c470:	2b00      	cmp	r3, #0
 800c472:	d104      	bne.n	800c47e <HAL_SD_IRQHandler+0xda>
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	f003 0302 	and.w	r3, r3, #2
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d003      	beq.n	800c486 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800c47e:	6878      	ldr	r0, [r7, #4]
 800c480:	f003 fe04 	bl	801008c <HAL_SD_RxCpltCallback>
 800c484:	e0fb      	b.n	800c67e <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800c486:	6878      	ldr	r0, [r7, #4]
 800c488:	f003 fdf6 	bl	8010078 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c48c:	e0f7      	b.n	800c67e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c494:	2b00      	cmp	r3, #0
 800c496:	f000 80f2 	beq.w	800c67e <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	f003 0320 	and.w	r3, r3, #32
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d011      	beq.n	800c4c8 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	f003 f973 	bl	800f794 <SDMMC_CmdStopTransfer>
 800c4ae:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d008      	beq.n	800c4c8 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c4ba:	68bb      	ldr	r3, [r7, #8]
 800c4bc:	431a      	orrs	r2, r3
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f000 f8e4 	bl	800c690 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	f003 0301 	and.w	r3, r3, #1
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	f040 80d5 	bne.w	800c67e <HAL_SD_IRQHandler+0x2da>
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	f003 0302 	and.w	r3, r3, #2
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	f040 80cf 	bne.w	800c67e <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	f022 0208 	bic.w	r2, r2, #8
 800c4ee:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2201      	movs	r2, #1
 800c4f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800c4f8:	6878      	ldr	r0, [r7, #4]
 800c4fa:	f003 fdbd 	bl	8010078 <HAL_SD_TxCpltCallback>
}
 800c4fe:	e0be      	b.n	800c67e <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d008      	beq.n	800c520 <HAL_SD_IRQHandler+0x17c>
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	f003 0308 	and.w	r3, r3, #8
 800c514:	2b00      	cmp	r3, #0
 800c516:	d003      	beq.n	800c520 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	f000 ff72 	bl	800d402 <SD_Write_IT>
 800c51e:	e0ae      	b.n	800c67e <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c526:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	f000 80a7 	beq.w	800c67e <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c536:	f003 0302 	and.w	r3, r3, #2
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d005      	beq.n	800c54a <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c542:	f043 0202 	orr.w	r2, r3, #2
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c550:	f003 0308 	and.w	r3, r3, #8
 800c554:	2b00      	cmp	r3, #0
 800c556:	d005      	beq.n	800c564 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c55c:	f043 0208 	orr.w	r2, r3, #8
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c56a:	f003 0320 	and.w	r3, r3, #32
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d005      	beq.n	800c57e <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c576:	f043 0220 	orr.w	r2, r3, #32
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c584:	f003 0310 	and.w	r3, r3, #16
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d005      	beq.n	800c598 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c590:	f043 0210 	orr.w	r2, r3, #16
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	f240 523a 	movw	r2, #1338	; 0x53a
 800c5a0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800c5b0:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	f003 f8ec 	bl	800f794 <SDMMC_CmdStopTransfer>
 800c5bc:	4602      	mov	r2, r0
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5c2:	431a      	orrs	r2, r3
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	f003 0308 	and.w	r3, r3, #8
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d00a      	beq.n	800c5e8 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	2201      	movs	r2, #1
 800c5d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	2200      	movs	r2, #0
 800c5de:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800c5e0:	6878      	ldr	r0, [r7, #4]
 800c5e2:	f000 f855 	bl	800c690 <HAL_SD_ErrorCallback>
}
 800c5e6:	e04a      	b.n	800c67e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d045      	beq.n	800c67e <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	f003 0310 	and.w	r3, r3, #16
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d104      	bne.n	800c606 <HAL_SD_IRQHandler+0x262>
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	f003 0320 	and.w	r3, r3, #32
 800c602:	2b00      	cmp	r3, #0
 800c604:	d011      	beq.n	800c62a <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c60a:	4a1f      	ldr	r2, [pc, #124]	; (800c688 <HAL_SD_IRQHandler+0x2e4>)
 800c60c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c612:	4618      	mov	r0, r3
 800c614:	f7fd f9a6 	bl	8009964 <HAL_DMA_Abort_IT>
 800c618:	4603      	mov	r3, r0
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d02f      	beq.n	800c67e <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c622:	4618      	mov	r0, r3
 800c624:	f000 fb4a 	bl	800ccbc <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800c628:	e029      	b.n	800c67e <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	f003 0301 	and.w	r3, r3, #1
 800c630:	2b00      	cmp	r3, #0
 800c632:	d104      	bne.n	800c63e <HAL_SD_IRQHandler+0x29a>
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	f003 0302 	and.w	r3, r3, #2
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d011      	beq.n	800c662 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c642:	4a12      	ldr	r2, [pc, #72]	; (800c68c <HAL_SD_IRQHandler+0x2e8>)
 800c644:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c64a:	4618      	mov	r0, r3
 800c64c:	f7fd f98a 	bl	8009964 <HAL_DMA_Abort_IT>
 800c650:	4603      	mov	r3, r0
 800c652:	2b00      	cmp	r3, #0
 800c654:	d013      	beq.n	800c67e <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c65a:	4618      	mov	r0, r3
 800c65c:	f000 fb65 	bl	800cd2a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800c660:	e00d      	b.n	800c67e <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	2200      	movs	r2, #0
 800c666:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2201      	movs	r2, #1
 800c66c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2200      	movs	r2, #0
 800c674:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f003 fcf4 	bl	8010064 <HAL_SD_AbortCallback>
}
 800c67c:	e7ff      	b.n	800c67e <HAL_SD_IRQHandler+0x2da>
 800c67e:	bf00      	nop
 800c680:	3710      	adds	r7, #16
 800c682:	46bd      	mov	sp, r7
 800c684:	bd80      	pop	{r7, pc}
 800c686:	bf00      	nop
 800c688:	0800ccbd 	.word	0x0800ccbd
 800c68c:	0800cd2b 	.word	0x0800cd2b

0800c690 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800c690:	b480      	push	{r7}
 800c692:	b083      	sub	sp, #12
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800c698:	bf00      	nop
 800c69a:	370c      	adds	r7, #12
 800c69c:	46bd      	mov	sp, r7
 800c69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a2:	4770      	bx	lr

0800c6a4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800c6a4:	b480      	push	{r7}
 800c6a6:	b083      	sub	sp, #12
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
 800c6ac:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c6b2:	0f9b      	lsrs	r3, r3, #30
 800c6b4:	b2da      	uxtb	r2, r3
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c6be:	0e9b      	lsrs	r3, r3, #26
 800c6c0:	b2db      	uxtb	r3, r3
 800c6c2:	f003 030f 	and.w	r3, r3, #15
 800c6c6:	b2da      	uxtb	r2, r3
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c6d0:	0e1b      	lsrs	r3, r3, #24
 800c6d2:	b2db      	uxtb	r3, r3
 800c6d4:	f003 0303 	and.w	r3, r3, #3
 800c6d8:	b2da      	uxtb	r2, r3
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c6e2:	0c1b      	lsrs	r3, r3, #16
 800c6e4:	b2da      	uxtb	r2, r3
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c6ee:	0a1b      	lsrs	r3, r3, #8
 800c6f0:	b2da      	uxtb	r2, r3
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c6fa:	b2da      	uxtb	r2, r3
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c704:	0d1b      	lsrs	r3, r3, #20
 800c706:	b29a      	uxth	r2, r3
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c710:	0c1b      	lsrs	r3, r3, #16
 800c712:	b2db      	uxtb	r3, r3
 800c714:	f003 030f 	and.w	r3, r3, #15
 800c718:	b2da      	uxtb	r2, r3
 800c71a:	683b      	ldr	r3, [r7, #0]
 800c71c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c722:	0bdb      	lsrs	r3, r3, #15
 800c724:	b2db      	uxtb	r3, r3
 800c726:	f003 0301 	and.w	r3, r3, #1
 800c72a:	b2da      	uxtb	r2, r3
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c734:	0b9b      	lsrs	r3, r3, #14
 800c736:	b2db      	uxtb	r3, r3
 800c738:	f003 0301 	and.w	r3, r3, #1
 800c73c:	b2da      	uxtb	r2, r3
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c746:	0b5b      	lsrs	r3, r3, #13
 800c748:	b2db      	uxtb	r3, r3
 800c74a:	f003 0301 	and.w	r3, r3, #1
 800c74e:	b2da      	uxtb	r2, r3
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c758:	0b1b      	lsrs	r3, r3, #12
 800c75a:	b2db      	uxtb	r3, r3
 800c75c:	f003 0301 	and.w	r3, r3, #1
 800c760:	b2da      	uxtb	r2, r3
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	2200      	movs	r2, #0
 800c76a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c770:	2b00      	cmp	r3, #0
 800c772:	d163      	bne.n	800c83c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c778:	009a      	lsls	r2, r3, #2
 800c77a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800c77e:	4013      	ands	r3, r2
 800c780:	687a      	ldr	r2, [r7, #4]
 800c782:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800c784:	0f92      	lsrs	r2, r2, #30
 800c786:	431a      	orrs	r2, r3
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c790:	0edb      	lsrs	r3, r3, #27
 800c792:	b2db      	uxtb	r3, r3
 800c794:	f003 0307 	and.w	r3, r3, #7
 800c798:	b2da      	uxtb	r2, r3
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7a2:	0e1b      	lsrs	r3, r3, #24
 800c7a4:	b2db      	uxtb	r3, r3
 800c7a6:	f003 0307 	and.w	r3, r3, #7
 800c7aa:	b2da      	uxtb	r2, r3
 800c7ac:	683b      	ldr	r3, [r7, #0]
 800c7ae:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7b4:	0d5b      	lsrs	r3, r3, #21
 800c7b6:	b2db      	uxtb	r3, r3
 800c7b8:	f003 0307 	and.w	r3, r3, #7
 800c7bc:	b2da      	uxtb	r2, r3
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7c6:	0c9b      	lsrs	r3, r3, #18
 800c7c8:	b2db      	uxtb	r3, r3
 800c7ca:	f003 0307 	and.w	r3, r3, #7
 800c7ce:	b2da      	uxtb	r2, r3
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7d8:	0bdb      	lsrs	r3, r3, #15
 800c7da:	b2db      	uxtb	r3, r3
 800c7dc:	f003 0307 	and.w	r3, r3, #7
 800c7e0:	b2da      	uxtb	r2, r3
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	691b      	ldr	r3, [r3, #16]
 800c7ea:	1c5a      	adds	r2, r3, #1
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	7e1b      	ldrb	r3, [r3, #24]
 800c7f4:	b2db      	uxtb	r3, r3
 800c7f6:	f003 0307 	and.w	r3, r3, #7
 800c7fa:	3302      	adds	r3, #2
 800c7fc:	2201      	movs	r2, #1
 800c7fe:	fa02 f303 	lsl.w	r3, r2, r3
 800c802:	687a      	ldr	r2, [r7, #4]
 800c804:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800c806:	fb02 f203 	mul.w	r2, r2, r3
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	7a1b      	ldrb	r3, [r3, #8]
 800c812:	b2db      	uxtb	r3, r3
 800c814:	f003 030f 	and.w	r3, r3, #15
 800c818:	2201      	movs	r2, #1
 800c81a:	409a      	lsls	r2, r3
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c824:	687a      	ldr	r2, [r7, #4]
 800c826:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800c828:	0a52      	lsrs	r2, r2, #9
 800c82a:	fb02 f203 	mul.w	r2, r2, r3
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c838:	661a      	str	r2, [r3, #96]	; 0x60
 800c83a:	e031      	b.n	800c8a0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c840:	2b01      	cmp	r3, #1
 800c842:	d11d      	bne.n	800c880 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c848:	041b      	lsls	r3, r3, #16
 800c84a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c852:	0c1b      	lsrs	r3, r3, #16
 800c854:	431a      	orrs	r2, r3
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	691b      	ldr	r3, [r3, #16]
 800c85e:	3301      	adds	r3, #1
 800c860:	029a      	lsls	r2, r3, #10
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c874:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	661a      	str	r2, [r3, #96]	; 0x60
 800c87e:	e00f      	b.n	800c8a0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	4a58      	ldr	r2, [pc, #352]	; (800c9e8 <HAL_SD_GetCardCSD+0x344>)
 800c886:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c88c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2201      	movs	r2, #1
 800c898:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c89c:	2301      	movs	r3, #1
 800c89e:	e09d      	b.n	800c9dc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8a4:	0b9b      	lsrs	r3, r3, #14
 800c8a6:	b2db      	uxtb	r3, r3
 800c8a8:	f003 0301 	and.w	r3, r3, #1
 800c8ac:	b2da      	uxtb	r2, r3
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8b6:	09db      	lsrs	r3, r3, #7
 800c8b8:	b2db      	uxtb	r3, r3
 800c8ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8be:	b2da      	uxtb	r2, r3
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8c8:	b2db      	uxtb	r3, r3
 800c8ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8ce:	b2da      	uxtb	r2, r3
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8d8:	0fdb      	lsrs	r3, r3, #31
 800c8da:	b2da      	uxtb	r2, r3
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8e4:	0f5b      	lsrs	r3, r3, #29
 800c8e6:	b2db      	uxtb	r3, r3
 800c8e8:	f003 0303 	and.w	r3, r3, #3
 800c8ec:	b2da      	uxtb	r2, r3
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8f6:	0e9b      	lsrs	r3, r3, #26
 800c8f8:	b2db      	uxtb	r3, r3
 800c8fa:	f003 0307 	and.w	r3, r3, #7
 800c8fe:	b2da      	uxtb	r2, r3
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c908:	0d9b      	lsrs	r3, r3, #22
 800c90a:	b2db      	uxtb	r3, r3
 800c90c:	f003 030f 	and.w	r3, r3, #15
 800c910:	b2da      	uxtb	r2, r3
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c91a:	0d5b      	lsrs	r3, r3, #21
 800c91c:	b2db      	uxtb	r3, r3
 800c91e:	f003 0301 	and.w	r3, r3, #1
 800c922:	b2da      	uxtb	r2, r3
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	2200      	movs	r2, #0
 800c92e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c936:	0c1b      	lsrs	r3, r3, #16
 800c938:	b2db      	uxtb	r3, r3
 800c93a:	f003 0301 	and.w	r3, r3, #1
 800c93e:	b2da      	uxtb	r2, r3
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c94a:	0bdb      	lsrs	r3, r3, #15
 800c94c:	b2db      	uxtb	r3, r3
 800c94e:	f003 0301 	and.w	r3, r3, #1
 800c952:	b2da      	uxtb	r2, r3
 800c954:	683b      	ldr	r3, [r7, #0]
 800c956:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c95e:	0b9b      	lsrs	r3, r3, #14
 800c960:	b2db      	uxtb	r3, r3
 800c962:	f003 0301 	and.w	r3, r3, #1
 800c966:	b2da      	uxtb	r2, r3
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c972:	0b5b      	lsrs	r3, r3, #13
 800c974:	b2db      	uxtb	r3, r3
 800c976:	f003 0301 	and.w	r3, r3, #1
 800c97a:	b2da      	uxtb	r2, r3
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c986:	0b1b      	lsrs	r3, r3, #12
 800c988:	b2db      	uxtb	r3, r3
 800c98a:	f003 0301 	and.w	r3, r3, #1
 800c98e:	b2da      	uxtb	r2, r3
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c99a:	0a9b      	lsrs	r3, r3, #10
 800c99c:	b2db      	uxtb	r3, r3
 800c99e:	f003 0303 	and.w	r3, r3, #3
 800c9a2:	b2da      	uxtb	r2, r3
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9ae:	0a1b      	lsrs	r3, r3, #8
 800c9b0:	b2db      	uxtb	r3, r3
 800c9b2:	f003 0303 	and.w	r3, r3, #3
 800c9b6:	b2da      	uxtb	r2, r3
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9c2:	085b      	lsrs	r3, r3, #1
 800c9c4:	b2db      	uxtb	r3, r3
 800c9c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9ca:	b2da      	uxtb	r2, r3
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	2201      	movs	r2, #1
 800c9d6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800c9da:	2300      	movs	r3, #0
}
 800c9dc:	4618      	mov	r0, r3
 800c9de:	370c      	adds	r7, #12
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e6:	4770      	bx	lr
 800c9e8:	004005ff 	.word	0x004005ff

0800c9ec <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800c9ec:	b480      	push	{r7}
 800c9ee:	b083      	sub	sp, #12
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
 800c9f4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800ca36:	2300      	movs	r3, #0
}
 800ca38:	4618      	mov	r0, r3
 800ca3a:	370c      	adds	r7, #12
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca42:	4770      	bx	lr

0800ca44 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800ca44:	b5b0      	push	{r4, r5, r7, lr}
 800ca46:	b08e      	sub	sp, #56	; 0x38
 800ca48:	af04      	add	r7, sp, #16
 800ca4a:	6078      	str	r0, [r7, #4]
 800ca4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	2203      	movs	r2, #3
 800ca52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca5a:	2b03      	cmp	r3, #3
 800ca5c:	d02e      	beq.n	800cabc <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca64:	d106      	bne.n	800ca74 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca6a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	639a      	str	r2, [r3, #56]	; 0x38
 800ca72:	e029      	b.n	800cac8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ca7a:	d10a      	bne.n	800ca92 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	f000 fb0f 	bl	800d0a0 <SD_WideBus_Enable>
 800ca82:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca8a:	431a      	orrs	r2, r3
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	639a      	str	r2, [r3, #56]	; 0x38
 800ca90:	e01a      	b.n	800cac8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d10a      	bne.n	800caae <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800ca98:	6878      	ldr	r0, [r7, #4]
 800ca9a:	f000 fb4c 	bl	800d136 <SD_WideBus_Disable>
 800ca9e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800caa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caa6:	431a      	orrs	r2, r3
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	639a      	str	r2, [r3, #56]	; 0x38
 800caac:	e00c      	b.n	800cac8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cab2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	639a      	str	r2, [r3, #56]	; 0x38
 800caba:	e005      	b.n	800cac8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cac0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d009      	beq.n	800cae4 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	4a18      	ldr	r2, [pc, #96]	; (800cb38 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800cad6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2201      	movs	r2, #1
 800cadc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cae0:	2301      	movs	r3, #1
 800cae2:	e024      	b.n	800cb2e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	685b      	ldr	r3, [r3, #4]
 800cae8:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	689b      	ldr	r3, [r3, #8]
 800caee:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	68db      	ldr	r3, [r3, #12]
 800caf4:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	695b      	ldr	r3, [r3, #20]
 800cafe:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	699b      	ldr	r3, [r3, #24]
 800cb04:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681d      	ldr	r5, [r3, #0]
 800cb0a:	466c      	mov	r4, sp
 800cb0c:	f107 0318 	add.w	r3, r7, #24
 800cb10:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cb14:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cb18:	f107 030c 	add.w	r3, r7, #12
 800cb1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cb1e:	4628      	mov	r0, r5
 800cb20:	f002 fcb2 	bl	800f488 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	2201      	movs	r2, #1
 800cb28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800cb2c:	2300      	movs	r3, #0
}
 800cb2e:	4618      	mov	r0, r3
 800cb30:	3728      	adds	r7, #40	; 0x28
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bdb0      	pop	{r4, r5, r7, pc}
 800cb36:	bf00      	nop
 800cb38:	004005ff 	.word	0x004005ff

0800cb3c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b086      	sub	sp, #24
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800cb44:	2300      	movs	r3, #0
 800cb46:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800cb48:	f107 030c 	add.w	r3, r7, #12
 800cb4c:	4619      	mov	r1, r3
 800cb4e:	6878      	ldr	r0, [r7, #4]
 800cb50:	f000 fa7e 	bl	800d050 <SD_SendStatus>
 800cb54:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cb56:	697b      	ldr	r3, [r7, #20]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d005      	beq.n	800cb68 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb60:	697b      	ldr	r3, [r7, #20]
 800cb62:	431a      	orrs	r2, r3
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	0a5b      	lsrs	r3, r3, #9
 800cb6c:	f003 030f 	and.w	r3, r3, #15
 800cb70:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800cb72:	693b      	ldr	r3, [r7, #16]
}
 800cb74:	4618      	mov	r0, r3
 800cb76:	3718      	adds	r7, #24
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	bd80      	pop	{r7, pc}

0800cb7c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cb7c:	b480      	push	{r7}
 800cb7e:	b085      	sub	sp, #20
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb88:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cb98:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800cb9a:	bf00      	nop
 800cb9c:	3714      	adds	r7, #20
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba4:	4770      	bx	lr

0800cba6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cba6:	b580      	push	{r7, lr}
 800cba8:	b084      	sub	sp, #16
 800cbaa:	af00      	add	r7, sp, #0
 800cbac:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbb2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbb8:	2b82      	cmp	r3, #130	; 0x82
 800cbba:	d111      	bne.n	800cbe0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f002 fde7 	bl	800f794 <SDMMC_CmdStopTransfer>
 800cbc6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cbc8:	68bb      	ldr	r3, [r7, #8]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d008      	beq.n	800cbe0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cbd2:	68bb      	ldr	r3, [r7, #8]
 800cbd4:	431a      	orrs	r2, r3
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800cbda:	68f8      	ldr	r0, [r7, #12]
 800cbdc:	f7ff fd58 	bl	800c690 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	f022 0208 	bic.w	r2, r2, #8
 800cbee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	f240 523a 	movw	r2, #1338	; 0x53a
 800cbf8:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	2201      	movs	r2, #1
 800cbfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	2200      	movs	r2, #0
 800cc06:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800cc08:	68f8      	ldr	r0, [r7, #12]
 800cc0a:	f003 fa3f 	bl	801008c <HAL_SD_RxCpltCallback>
#endif
}
 800cc0e:	bf00      	nop
 800cc10:	3710      	adds	r7, #16
 800cc12:	46bd      	mov	sp, r7
 800cc14:	bd80      	pop	{r7, pc}
	...

0800cc18 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b086      	sub	sp, #24
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc24:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800cc26:	6878      	ldr	r0, [r7, #4]
 800cc28:	f7fd f848 	bl	8009cbc <HAL_DMA_GetError>
 800cc2c:	4603      	mov	r3, r0
 800cc2e:	2b02      	cmp	r3, #2
 800cc30:	d03e      	beq.n	800ccb0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800cc32:	697b      	ldr	r3, [r7, #20]
 800cc34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc38:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800cc3a:	697b      	ldr	r3, [r7, #20]
 800cc3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc40:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800cc42:	693b      	ldr	r3, [r7, #16]
 800cc44:	2b01      	cmp	r3, #1
 800cc46:	d002      	beq.n	800cc4e <SD_DMAError+0x36>
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	2b01      	cmp	r3, #1
 800cc4c:	d12d      	bne.n	800ccaa <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cc4e:	697b      	ldr	r3, [r7, #20]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	4a19      	ldr	r2, [pc, #100]	; (800ccb8 <SD_DMAError+0xa0>)
 800cc54:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800cc56:	697b      	ldr	r3, [r7, #20]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cc5c:	697b      	ldr	r3, [r7, #20]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800cc64:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800cc66:	697b      	ldr	r3, [r7, #20]
 800cc68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc6a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cc6e:	697b      	ldr	r3, [r7, #20]
 800cc70:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800cc72:	6978      	ldr	r0, [r7, #20]
 800cc74:	f7ff ff62 	bl	800cb3c <HAL_SD_GetCardState>
 800cc78:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800cc7a:	68bb      	ldr	r3, [r7, #8]
 800cc7c:	2b06      	cmp	r3, #6
 800cc7e:	d002      	beq.n	800cc86 <SD_DMAError+0x6e>
 800cc80:	68bb      	ldr	r3, [r7, #8]
 800cc82:	2b05      	cmp	r3, #5
 800cc84:	d10a      	bne.n	800cc9c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800cc86:	697b      	ldr	r3, [r7, #20]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	f002 fd82 	bl	800f794 <SDMMC_CmdStopTransfer>
 800cc90:	4602      	mov	r2, r0
 800cc92:	697b      	ldr	r3, [r7, #20]
 800cc94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc96:	431a      	orrs	r2, r3
 800cc98:	697b      	ldr	r3, [r7, #20]
 800cc9a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800cc9c:	697b      	ldr	r3, [r7, #20]
 800cc9e:	2201      	movs	r2, #1
 800cca0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cca4:	697b      	ldr	r3, [r7, #20]
 800cca6:	2200      	movs	r2, #0
 800cca8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800ccaa:	6978      	ldr	r0, [r7, #20]
 800ccac:	f7ff fcf0 	bl	800c690 <HAL_SD_ErrorCallback>
#endif
  }
}
 800ccb0:	bf00      	nop
 800ccb2:	3718      	adds	r7, #24
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	bd80      	pop	{r7, pc}
 800ccb8:	004005ff 	.word	0x004005ff

0800ccbc <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b084      	sub	sp, #16
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccc8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	f240 523a 	movw	r2, #1338	; 0x53a
 800ccd2:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800ccd4:	68f8      	ldr	r0, [r7, #12]
 800ccd6:	f7ff ff31 	bl	800cb3c <HAL_SD_GetCardState>
 800ccda:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	2201      	movs	r2, #1
 800cce0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	2200      	movs	r2, #0
 800cce8:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ccea:	68bb      	ldr	r3, [r7, #8]
 800ccec:	2b06      	cmp	r3, #6
 800ccee:	d002      	beq.n	800ccf6 <SD_DMATxAbort+0x3a>
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	2b05      	cmp	r3, #5
 800ccf4:	d10a      	bne.n	800cd0c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	f002 fd4a 	bl	800f794 <SDMMC_CmdStopTransfer>
 800cd00:	4602      	mov	r2, r0
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd06:	431a      	orrs	r2, r3
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d103      	bne.n	800cd1c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800cd14:	68f8      	ldr	r0, [r7, #12]
 800cd16:	f003 f9a5 	bl	8010064 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800cd1a:	e002      	b.n	800cd22 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800cd1c:	68f8      	ldr	r0, [r7, #12]
 800cd1e:	f7ff fcb7 	bl	800c690 <HAL_SD_ErrorCallback>
}
 800cd22:	bf00      	nop
 800cd24:	3710      	adds	r7, #16
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bd80      	pop	{r7, pc}

0800cd2a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800cd2a:	b580      	push	{r7, lr}
 800cd2c:	b084      	sub	sp, #16
 800cd2e:	af00      	add	r7, sp, #0
 800cd30:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd36:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	f240 523a 	movw	r2, #1338	; 0x53a
 800cd40:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800cd42:	68f8      	ldr	r0, [r7, #12]
 800cd44:	f7ff fefa 	bl	800cb3c <HAL_SD_GetCardState>
 800cd48:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	2201      	movs	r2, #1
 800cd4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	2200      	movs	r2, #0
 800cd56:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	2b06      	cmp	r3, #6
 800cd5c:	d002      	beq.n	800cd64 <SD_DMARxAbort+0x3a>
 800cd5e:	68bb      	ldr	r3, [r7, #8]
 800cd60:	2b05      	cmp	r3, #5
 800cd62:	d10a      	bne.n	800cd7a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	4618      	mov	r0, r3
 800cd6a:	f002 fd13 	bl	800f794 <SDMMC_CmdStopTransfer>
 800cd6e:	4602      	mov	r2, r0
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd74:	431a      	orrs	r2, r3
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d103      	bne.n	800cd8a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800cd82:	68f8      	ldr	r0, [r7, #12]
 800cd84:	f003 f96e 	bl	8010064 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800cd88:	e002      	b.n	800cd90 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800cd8a:	68f8      	ldr	r0, [r7, #12]
 800cd8c:	f7ff fc80 	bl	800c690 <HAL_SD_ErrorCallback>
}
 800cd90:	bf00      	nop
 800cd92:	3710      	adds	r7, #16
 800cd94:	46bd      	mov	sp, r7
 800cd96:	bd80      	pop	{r7, pc}

0800cd98 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cd98:	b5b0      	push	{r4, r5, r7, lr}
 800cd9a:	b094      	sub	sp, #80	; 0x50
 800cd9c:	af04      	add	r7, sp, #16
 800cd9e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800cda0:	2301      	movs	r3, #1
 800cda2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	4618      	mov	r0, r3
 800cdaa:	f002 fbc5 	bl	800f538 <SDIO_GetPowerState>
 800cdae:	4603      	mov	r3, r0
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d102      	bne.n	800cdba <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cdb4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800cdb8:	e0b7      	b.n	800cf2a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdbe:	2b03      	cmp	r3, #3
 800cdc0:	d02f      	beq.n	800ce22 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	f002 fdee 	bl	800f9a8 <SDMMC_CmdSendCID>
 800cdcc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800cdce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d001      	beq.n	800cdd8 <SD_InitCard+0x40>
    {
      return errorstate;
 800cdd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdd6:	e0a8      	b.n	800cf2a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	2100      	movs	r1, #0
 800cdde:	4618      	mov	r0, r3
 800cde0:	f002 fbef 	bl	800f5c2 <SDIO_GetResponse>
 800cde4:	4602      	mov	r2, r0
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	2104      	movs	r1, #4
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	f002 fbe6 	bl	800f5c2 <SDIO_GetResponse>
 800cdf6:	4602      	mov	r2, r0
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	2108      	movs	r1, #8
 800ce02:	4618      	mov	r0, r3
 800ce04:	f002 fbdd 	bl	800f5c2 <SDIO_GetResponse>
 800ce08:	4602      	mov	r2, r0
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	210c      	movs	r1, #12
 800ce14:	4618      	mov	r0, r3
 800ce16:	f002 fbd4 	bl	800f5c2 <SDIO_GetResponse>
 800ce1a:	4602      	mov	r2, r0
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce26:	2b03      	cmp	r3, #3
 800ce28:	d00d      	beq.n	800ce46 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	f107 020e 	add.w	r2, r7, #14
 800ce32:	4611      	mov	r1, r2
 800ce34:	4618      	mov	r0, r3
 800ce36:	f002 fdf4 	bl	800fa22 <SDMMC_CmdSetRelAdd>
 800ce3a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ce3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d001      	beq.n	800ce46 <SD_InitCard+0xae>
    {
      return errorstate;
 800ce42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce44:	e071      	b.n	800cf2a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce4a:	2b03      	cmp	r3, #3
 800ce4c:	d036      	beq.n	800cebc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800ce4e:	89fb      	ldrh	r3, [r7, #14]
 800ce50:	461a      	mov	r2, r3
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681a      	ldr	r2, [r3, #0]
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce5e:	041b      	lsls	r3, r3, #16
 800ce60:	4619      	mov	r1, r3
 800ce62:	4610      	mov	r0, r2
 800ce64:	f002 fdbe 	bl	800f9e4 <SDMMC_CmdSendCSD>
 800ce68:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ce6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d001      	beq.n	800ce74 <SD_InitCard+0xdc>
    {
      return errorstate;
 800ce70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce72:	e05a      	b.n	800cf2a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	2100      	movs	r1, #0
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	f002 fba1 	bl	800f5c2 <SDIO_GetResponse>
 800ce80:	4602      	mov	r2, r0
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	2104      	movs	r1, #4
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	f002 fb98 	bl	800f5c2 <SDIO_GetResponse>
 800ce92:	4602      	mov	r2, r0
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	2108      	movs	r1, #8
 800ce9e:	4618      	mov	r0, r3
 800cea0:	f002 fb8f 	bl	800f5c2 <SDIO_GetResponse>
 800cea4:	4602      	mov	r2, r0
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	210c      	movs	r1, #12
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	f002 fb86 	bl	800f5c2 <SDIO_GetResponse>
 800ceb6:	4602      	mov	r2, r0
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	2104      	movs	r1, #4
 800cec2:	4618      	mov	r0, r3
 800cec4:	f002 fb7d 	bl	800f5c2 <SDIO_GetResponse>
 800cec8:	4603      	mov	r3, r0
 800ceca:	0d1a      	lsrs	r2, r3, #20
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ced0:	f107 0310 	add.w	r3, r7, #16
 800ced4:	4619      	mov	r1, r3
 800ced6:	6878      	ldr	r0, [r7, #4]
 800ced8:	f7ff fbe4 	bl	800c6a4 <HAL_SD_GetCardCSD>
 800cedc:	4603      	mov	r3, r0
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d002      	beq.n	800cee8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cee2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cee6:	e020      	b.n	800cf2a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	6819      	ldr	r1, [r3, #0]
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cef0:	041b      	lsls	r3, r3, #16
 800cef2:	f04f 0400 	mov.w	r4, #0
 800cef6:	461a      	mov	r2, r3
 800cef8:	4623      	mov	r3, r4
 800cefa:	4608      	mov	r0, r1
 800cefc:	f002 fc6c 	bl	800f7d8 <SDMMC_CmdSelDesel>
 800cf00:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800cf02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d001      	beq.n	800cf0c <SD_InitCard+0x174>
  {
    return errorstate;
 800cf08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf0a:	e00e      	b.n	800cf2a <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681d      	ldr	r5, [r3, #0]
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	466c      	mov	r4, sp
 800cf14:	f103 0210 	add.w	r2, r3, #16
 800cf18:	ca07      	ldmia	r2, {r0, r1, r2}
 800cf1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cf1e:	3304      	adds	r3, #4
 800cf20:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cf22:	4628      	mov	r0, r5
 800cf24:	f002 fab0 	bl	800f488 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800cf28:	2300      	movs	r3, #0
}
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	3740      	adds	r7, #64	; 0x40
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800cf34 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b086      	sub	sp, #24
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800cf40:	2300      	movs	r3, #0
 800cf42:	617b      	str	r3, [r7, #20]
 800cf44:	2300      	movs	r3, #0
 800cf46:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	f002 fc66 	bl	800f81e <SDMMC_CmdGoIdleState>
 800cf52:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d001      	beq.n	800cf5e <SD_PowerON+0x2a>
  {
    return errorstate;
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	e072      	b.n	800d044 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	4618      	mov	r0, r3
 800cf64:	f002 fc79 	bl	800f85a <SDMMC_CmdOperCond>
 800cf68:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d00d      	beq.n	800cf8c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2200      	movs	r2, #0
 800cf74:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	f002 fc4f 	bl	800f81e <SDMMC_CmdGoIdleState>
 800cf80:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d004      	beq.n	800cf92 <SD_PowerON+0x5e>
    {
      return errorstate;
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	e05b      	b.n	800d044 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2201      	movs	r2, #1
 800cf90:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf96:	2b01      	cmp	r3, #1
 800cf98:	d137      	bne.n	800d00a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	2100      	movs	r1, #0
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	f002 fc79 	bl	800f898 <SDMMC_CmdAppCommand>
 800cfa6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d02d      	beq.n	800d00a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cfae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cfb2:	e047      	b.n	800d044 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	2100      	movs	r1, #0
 800cfba:	4618      	mov	r0, r3
 800cfbc:	f002 fc6c 	bl	800f898 <SDMMC_CmdAppCommand>
 800cfc0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d001      	beq.n	800cfcc <SD_PowerON+0x98>
    {
      return errorstate;
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	e03b      	b.n	800d044 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	491e      	ldr	r1, [pc, #120]	; (800d04c <SD_PowerON+0x118>)
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	f002 fc82 	bl	800f8dc <SDMMC_CmdAppOperCommand>
 800cfd8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d002      	beq.n	800cfe6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cfe0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cfe4:	e02e      	b.n	800d044 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	2100      	movs	r1, #0
 800cfec:	4618      	mov	r0, r3
 800cfee:	f002 fae8 	bl	800f5c2 <SDIO_GetResponse>
 800cff2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800cff4:	697b      	ldr	r3, [r7, #20]
 800cff6:	0fdb      	lsrs	r3, r3, #31
 800cff8:	2b01      	cmp	r3, #1
 800cffa:	d101      	bne.n	800d000 <SD_PowerON+0xcc>
 800cffc:	2301      	movs	r3, #1
 800cffe:	e000      	b.n	800d002 <SD_PowerON+0xce>
 800d000:	2300      	movs	r3, #0
 800d002:	613b      	str	r3, [r7, #16]

    count++;
 800d004:	68bb      	ldr	r3, [r7, #8]
 800d006:	3301      	adds	r3, #1
 800d008:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d00a:	68bb      	ldr	r3, [r7, #8]
 800d00c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d010:	4293      	cmp	r3, r2
 800d012:	d802      	bhi.n	800d01a <SD_PowerON+0xe6>
 800d014:	693b      	ldr	r3, [r7, #16]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d0cc      	beq.n	800cfb4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800d01a:	68bb      	ldr	r3, [r7, #8]
 800d01c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d020:	4293      	cmp	r3, r2
 800d022:	d902      	bls.n	800d02a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d024:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d028:	e00c      	b.n	800d044 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800d02a:	697b      	ldr	r3, [r7, #20]
 800d02c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d030:	2b00      	cmp	r3, #0
 800d032:	d003      	beq.n	800d03c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2201      	movs	r2, #1
 800d038:	645a      	str	r2, [r3, #68]	; 0x44
 800d03a:	e002      	b.n	800d042 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2200      	movs	r2, #0
 800d040:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800d042:	2300      	movs	r3, #0
}
 800d044:	4618      	mov	r0, r3
 800d046:	3718      	adds	r7, #24
 800d048:	46bd      	mov	sp, r7
 800d04a:	bd80      	pop	{r7, pc}
 800d04c:	c1100000 	.word	0xc1100000

0800d050 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b084      	sub	sp, #16
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
 800d058:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800d05a:	683b      	ldr	r3, [r7, #0]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d102      	bne.n	800d066 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d060:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d064:	e018      	b.n	800d098 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681a      	ldr	r2, [r3, #0]
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d06e:	041b      	lsls	r3, r3, #16
 800d070:	4619      	mov	r1, r3
 800d072:	4610      	mov	r0, r2
 800d074:	f002 fcf6 	bl	800fa64 <SDMMC_CmdSendStatus>
 800d078:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d001      	beq.n	800d084 <SD_SendStatus+0x34>
  {
    return errorstate;
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	e009      	b.n	800d098 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	2100      	movs	r1, #0
 800d08a:	4618      	mov	r0, r3
 800d08c:	f002 fa99 	bl	800f5c2 <SDIO_GetResponse>
 800d090:	4602      	mov	r2, r0
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d096:	2300      	movs	r3, #0
}
 800d098:	4618      	mov	r0, r3
 800d09a:	3710      	adds	r7, #16
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bd80      	pop	{r7, pc}

0800d0a0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b086      	sub	sp, #24
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	60fb      	str	r3, [r7, #12]
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	2100      	movs	r1, #0
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	f002 fa83 	bl	800f5c2 <SDIO_GetResponse>
 800d0bc:	4603      	mov	r3, r0
 800d0be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d0c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d0c6:	d102      	bne.n	800d0ce <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d0c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d0cc:	e02f      	b.n	800d12e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d0ce:	f107 030c 	add.w	r3, r7, #12
 800d0d2:	4619      	mov	r1, r3
 800d0d4:	6878      	ldr	r0, [r7, #4]
 800d0d6:	f000 f879 	bl	800d1cc <SD_FindSCR>
 800d0da:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d0dc:	697b      	ldr	r3, [r7, #20]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d001      	beq.n	800d0e6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800d0e2:	697b      	ldr	r3, [r7, #20]
 800d0e4:	e023      	b.n	800d12e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d0e6:	693b      	ldr	r3, [r7, #16]
 800d0e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d01c      	beq.n	800d12a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681a      	ldr	r2, [r3, #0]
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0f8:	041b      	lsls	r3, r3, #16
 800d0fa:	4619      	mov	r1, r3
 800d0fc:	4610      	mov	r0, r2
 800d0fe:	f002 fbcb 	bl	800f898 <SDMMC_CmdAppCommand>
 800d102:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d104:	697b      	ldr	r3, [r7, #20]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d001      	beq.n	800d10e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800d10a:	697b      	ldr	r3, [r7, #20]
 800d10c:	e00f      	b.n	800d12e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	2102      	movs	r1, #2
 800d114:	4618      	mov	r0, r3
 800d116:	f002 fc04 	bl	800f922 <SDMMC_CmdBusWidth>
 800d11a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d11c:	697b      	ldr	r3, [r7, #20]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d001      	beq.n	800d126 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800d122:	697b      	ldr	r3, [r7, #20]
 800d124:	e003      	b.n	800d12e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d126:	2300      	movs	r3, #0
 800d128:	e001      	b.n	800d12e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d12a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d12e:	4618      	mov	r0, r3
 800d130:	3718      	adds	r7, #24
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}

0800d136 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800d136:	b580      	push	{r7, lr}
 800d138:	b086      	sub	sp, #24
 800d13a:	af00      	add	r7, sp, #0
 800d13c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800d13e:	2300      	movs	r3, #0
 800d140:	60fb      	str	r3, [r7, #12]
 800d142:	2300      	movs	r3, #0
 800d144:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	2100      	movs	r1, #0
 800d14c:	4618      	mov	r0, r3
 800d14e:	f002 fa38 	bl	800f5c2 <SDIO_GetResponse>
 800d152:	4603      	mov	r3, r0
 800d154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d158:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d15c:	d102      	bne.n	800d164 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d15e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d162:	e02f      	b.n	800d1c4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d164:	f107 030c 	add.w	r3, r7, #12
 800d168:	4619      	mov	r1, r3
 800d16a:	6878      	ldr	r0, [r7, #4]
 800d16c:	f000 f82e 	bl	800d1cc <SD_FindSCR>
 800d170:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d172:	697b      	ldr	r3, [r7, #20]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d001      	beq.n	800d17c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800d178:	697b      	ldr	r3, [r7, #20]
 800d17a:	e023      	b.n	800d1c4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d17c:	693b      	ldr	r3, [r7, #16]
 800d17e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d182:	2b00      	cmp	r3, #0
 800d184:	d01c      	beq.n	800d1c0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681a      	ldr	r2, [r3, #0]
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d18e:	041b      	lsls	r3, r3, #16
 800d190:	4619      	mov	r1, r3
 800d192:	4610      	mov	r0, r2
 800d194:	f002 fb80 	bl	800f898 <SDMMC_CmdAppCommand>
 800d198:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d19a:	697b      	ldr	r3, [r7, #20]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d001      	beq.n	800d1a4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800d1a0:	697b      	ldr	r3, [r7, #20]
 800d1a2:	e00f      	b.n	800d1c4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	2100      	movs	r1, #0
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	f002 fbb9 	bl	800f922 <SDMMC_CmdBusWidth>
 800d1b0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d1b2:	697b      	ldr	r3, [r7, #20]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d001      	beq.n	800d1bc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800d1b8:	697b      	ldr	r3, [r7, #20]
 800d1ba:	e003      	b.n	800d1c4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d1bc:	2300      	movs	r3, #0
 800d1be:	e001      	b.n	800d1c4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d1c0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	3718      	adds	r7, #24
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	bd80      	pop	{r7, pc}

0800d1cc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800d1cc:	b590      	push	{r4, r7, lr}
 800d1ce:	b08f      	sub	sp, #60	; 0x3c
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
 800d1d4:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d1d6:	f7fb fd7b 	bl	8008cd0 <HAL_GetTick>
 800d1da:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800d1dc:	2300      	movs	r3, #0
 800d1de:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	60bb      	str	r3, [r7, #8]
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800d1e8:	683b      	ldr	r3, [r7, #0]
 800d1ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	2108      	movs	r1, #8
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	f002 fa24 	bl	800f640 <SDMMC_CmdBlockLength>
 800d1f8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d001      	beq.n	800d204 <SD_FindSCR+0x38>
  {
    return errorstate;
 800d200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d202:	e0a9      	b.n	800d358 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681a      	ldr	r2, [r3, #0]
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d20c:	041b      	lsls	r3, r3, #16
 800d20e:	4619      	mov	r1, r3
 800d210:	4610      	mov	r0, r2
 800d212:	f002 fb41 	bl	800f898 <SDMMC_CmdAppCommand>
 800d216:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d001      	beq.n	800d222 <SD_FindSCR+0x56>
  {
    return errorstate;
 800d21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d220:	e09a      	b.n	800d358 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d222:	f04f 33ff 	mov.w	r3, #4294967295
 800d226:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800d228:	2308      	movs	r3, #8
 800d22a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800d22c:	2330      	movs	r3, #48	; 0x30
 800d22e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800d230:	2302      	movs	r3, #2
 800d232:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d234:	2300      	movs	r3, #0
 800d236:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800d238:	2301      	movs	r3, #1
 800d23a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	f107 0210 	add.w	r2, r7, #16
 800d244:	4611      	mov	r1, r2
 800d246:	4618      	mov	r0, r3
 800d248:	f002 f9ce 	bl	800f5e8 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	4618      	mov	r0, r3
 800d252:	f002 fb88 	bl	800f966 <SDMMC_CmdSendSCR>
 800d256:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d022      	beq.n	800d2a4 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800d25e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d260:	e07a      	b.n	800d358 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d268:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d00e      	beq.n	800d28e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	6819      	ldr	r1, [r3, #0]
 800d274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d276:	009b      	lsls	r3, r3, #2
 800d278:	f107 0208 	add.w	r2, r7, #8
 800d27c:	18d4      	adds	r4, r2, r3
 800d27e:	4608      	mov	r0, r1
 800d280:	f002 f92d 	bl	800f4de <SDIO_ReadFIFO>
 800d284:	4603      	mov	r3, r0
 800d286:	6023      	str	r3, [r4, #0]
      index++;
 800d288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d28a:	3301      	adds	r3, #1
 800d28c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d28e:	f7fb fd1f 	bl	8008cd0 <HAL_GetTick>
 800d292:	4602      	mov	r2, r0
 800d294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d296:	1ad3      	subs	r3, r2, r3
 800d298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d29c:	d102      	bne.n	800d2a4 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d29e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d2a2:	e059      	b.n	800d358 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d2aa:	f240 432a 	movw	r3, #1066	; 0x42a
 800d2ae:	4013      	ands	r3, r2
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d0d6      	beq.n	800d262 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2ba:	f003 0308 	and.w	r3, r3, #8
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d005      	beq.n	800d2ce <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	2208      	movs	r2, #8
 800d2c8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d2ca:	2308      	movs	r3, #8
 800d2cc:	e044      	b.n	800d358 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2d4:	f003 0302 	and.w	r3, r3, #2
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d005      	beq.n	800d2e8 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	2202      	movs	r2, #2
 800d2e2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d2e4:	2302      	movs	r3, #2
 800d2e6:	e037      	b.n	800d358 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2ee:	f003 0320 	and.w	r3, r3, #32
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d005      	beq.n	800d302 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	2220      	movs	r2, #32
 800d2fc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800d2fe:	2320      	movs	r3, #32
 800d300:	e02a      	b.n	800d358 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	f240 523a 	movw	r2, #1338	; 0x53a
 800d30a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	061a      	lsls	r2, r3, #24
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	021b      	lsls	r3, r3, #8
 800d314:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d318:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	0a1b      	lsrs	r3, r3, #8
 800d31e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d322:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	0e1b      	lsrs	r3, r3, #24
 800d328:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d32c:	601a      	str	r2, [r3, #0]
    scr++;
 800d32e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d330:	3304      	adds	r3, #4
 800d332:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d334:	68bb      	ldr	r3, [r7, #8]
 800d336:	061a      	lsls	r2, r3, #24
 800d338:	68bb      	ldr	r3, [r7, #8]
 800d33a:	021b      	lsls	r3, r3, #8
 800d33c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d340:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d342:	68bb      	ldr	r3, [r7, #8]
 800d344:	0a1b      	lsrs	r3, r3, #8
 800d346:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d34a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d34c:	68bb      	ldr	r3, [r7, #8]
 800d34e:	0e1b      	lsrs	r3, r3, #24
 800d350:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d354:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800d356:	2300      	movs	r3, #0
}
 800d358:	4618      	mov	r0, r3
 800d35a:	373c      	adds	r7, #60	; 0x3c
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bd90      	pop	{r4, r7, pc}

0800d360 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b086      	sub	sp, #24
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d36c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d372:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800d374:	693b      	ldr	r3, [r7, #16]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d03f      	beq.n	800d3fa <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800d37a:	2300      	movs	r3, #0
 800d37c:	617b      	str	r3, [r7, #20]
 800d37e:	e033      	b.n	800d3e8 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	4618      	mov	r0, r3
 800d386:	f002 f8aa 	bl	800f4de <SDIO_ReadFIFO>
 800d38a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800d38c:	68bb      	ldr	r3, [r7, #8]
 800d38e:	b2da      	uxtb	r2, r3
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	3301      	adds	r3, #1
 800d398:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d39a:	693b      	ldr	r3, [r7, #16]
 800d39c:	3b01      	subs	r3, #1
 800d39e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800d3a0:	68bb      	ldr	r3, [r7, #8]
 800d3a2:	0a1b      	lsrs	r3, r3, #8
 800d3a4:	b2da      	uxtb	r2, r3
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	3301      	adds	r3, #1
 800d3ae:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d3b0:	693b      	ldr	r3, [r7, #16]
 800d3b2:	3b01      	subs	r3, #1
 800d3b4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800d3b6:	68bb      	ldr	r3, [r7, #8]
 800d3b8:	0c1b      	lsrs	r3, r3, #16
 800d3ba:	b2da      	uxtb	r2, r3
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	3301      	adds	r3, #1
 800d3c4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d3c6:	693b      	ldr	r3, [r7, #16]
 800d3c8:	3b01      	subs	r3, #1
 800d3ca:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800d3cc:	68bb      	ldr	r3, [r7, #8]
 800d3ce:	0e1b      	lsrs	r3, r3, #24
 800d3d0:	b2da      	uxtb	r2, r3
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	3301      	adds	r3, #1
 800d3da:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d3dc:	693b      	ldr	r3, [r7, #16]
 800d3de:	3b01      	subs	r3, #1
 800d3e0:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800d3e2:	697b      	ldr	r3, [r7, #20]
 800d3e4:	3301      	adds	r3, #1
 800d3e6:	617b      	str	r3, [r7, #20]
 800d3e8:	697b      	ldr	r3, [r7, #20]
 800d3ea:	2b07      	cmp	r3, #7
 800d3ec:	d9c8      	bls.n	800d380 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	68fa      	ldr	r2, [r7, #12]
 800d3f2:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	693a      	ldr	r2, [r7, #16]
 800d3f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800d3fa:	bf00      	nop
 800d3fc:	3718      	adds	r7, #24
 800d3fe:	46bd      	mov	sp, r7
 800d400:	bd80      	pop	{r7, pc}

0800d402 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800d402:	b580      	push	{r7, lr}
 800d404:	b086      	sub	sp, #24
 800d406:	af00      	add	r7, sp, #0
 800d408:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	6a1b      	ldr	r3, [r3, #32]
 800d40e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d414:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800d416:	693b      	ldr	r3, [r7, #16]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d043      	beq.n	800d4a4 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800d41c:	2300      	movs	r3, #0
 800d41e:	617b      	str	r3, [r7, #20]
 800d420:	e037      	b.n	800d492 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	781b      	ldrb	r3, [r3, #0]
 800d426:	60bb      	str	r3, [r7, #8]
      tmp++;
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	3301      	adds	r3, #1
 800d42c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d42e:	693b      	ldr	r3, [r7, #16]
 800d430:	3b01      	subs	r3, #1
 800d432:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	781b      	ldrb	r3, [r3, #0]
 800d438:	021a      	lsls	r2, r3, #8
 800d43a:	68bb      	ldr	r3, [r7, #8]
 800d43c:	4313      	orrs	r3, r2
 800d43e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	3301      	adds	r3, #1
 800d444:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d446:	693b      	ldr	r3, [r7, #16]
 800d448:	3b01      	subs	r3, #1
 800d44a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	781b      	ldrb	r3, [r3, #0]
 800d450:	041a      	lsls	r2, r3, #16
 800d452:	68bb      	ldr	r3, [r7, #8]
 800d454:	4313      	orrs	r3, r2
 800d456:	60bb      	str	r3, [r7, #8]
      tmp++;
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	3301      	adds	r3, #1
 800d45c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d45e:	693b      	ldr	r3, [r7, #16]
 800d460:	3b01      	subs	r3, #1
 800d462:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	781b      	ldrb	r3, [r3, #0]
 800d468:	061a      	lsls	r2, r3, #24
 800d46a:	68bb      	ldr	r3, [r7, #8]
 800d46c:	4313      	orrs	r3, r2
 800d46e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	3301      	adds	r3, #1
 800d474:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d476:	693b      	ldr	r3, [r7, #16]
 800d478:	3b01      	subs	r3, #1
 800d47a:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	f107 0208 	add.w	r2, r7, #8
 800d484:	4611      	mov	r1, r2
 800d486:	4618      	mov	r0, r3
 800d488:	f002 f836 	bl	800f4f8 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800d48c:	697b      	ldr	r3, [r7, #20]
 800d48e:	3301      	adds	r3, #1
 800d490:	617b      	str	r3, [r7, #20]
 800d492:	697b      	ldr	r3, [r7, #20]
 800d494:	2b07      	cmp	r3, #7
 800d496:	d9c4      	bls.n	800d422 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	68fa      	ldr	r2, [r7, #12]
 800d49c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	693a      	ldr	r2, [r7, #16]
 800d4a2:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800d4a4:	bf00      	nop
 800d4a6:	3718      	adds	r7, #24
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	bd80      	pop	{r7, pc}

0800d4ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b082      	sub	sp, #8
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d101      	bne.n	800d4be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d4ba:	2301      	movs	r3, #1
 800d4bc:	e056      	b.n	800d56c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d4ca:	b2db      	uxtb	r3, r3
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d106      	bne.n	800d4de <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d4d8:	6878      	ldr	r0, [r7, #4]
 800d4da:	f7f9 fa63 	bl	80069a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	2202      	movs	r2, #2
 800d4e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	681a      	ldr	r2, [r3, #0]
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d4f4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	685a      	ldr	r2, [r3, #4]
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	689b      	ldr	r3, [r3, #8]
 800d4fe:	431a      	orrs	r2, r3
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	68db      	ldr	r3, [r3, #12]
 800d504:	431a      	orrs	r2, r3
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	691b      	ldr	r3, [r3, #16]
 800d50a:	431a      	orrs	r2, r3
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	695b      	ldr	r3, [r3, #20]
 800d510:	431a      	orrs	r2, r3
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	699b      	ldr	r3, [r3, #24]
 800d516:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d51a:	431a      	orrs	r2, r3
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	69db      	ldr	r3, [r3, #28]
 800d520:	431a      	orrs	r2, r3
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	6a1b      	ldr	r3, [r3, #32]
 800d526:	ea42 0103 	orr.w	r1, r2, r3
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	430a      	orrs	r2, r1
 800d534:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	699b      	ldr	r3, [r3, #24]
 800d53a:	0c1b      	lsrs	r3, r3, #16
 800d53c:	f003 0104 	and.w	r1, r3, #4
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	430a      	orrs	r2, r1
 800d54a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	69da      	ldr	r2, [r3, #28]
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d55a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2200      	movs	r2, #0
 800d560:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	2201      	movs	r2, #1
 800d566:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800d56a:	2300      	movs	r3, #0
}
 800d56c:	4618      	mov	r0, r3
 800d56e:	3708      	adds	r7, #8
 800d570:	46bd      	mov	sp, r7
 800d572:	bd80      	pop	{r7, pc}

0800d574 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b088      	sub	sp, #32
 800d578:	af00      	add	r7, sp, #0
 800d57a:	60f8      	str	r0, [r7, #12]
 800d57c:	60b9      	str	r1, [r7, #8]
 800d57e:	603b      	str	r3, [r7, #0]
 800d580:	4613      	mov	r3, r2
 800d582:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d584:	2300      	movs	r3, #0
 800d586:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d58e:	2b01      	cmp	r3, #1
 800d590:	d101      	bne.n	800d596 <HAL_SPI_Transmit+0x22>
 800d592:	2302      	movs	r3, #2
 800d594:	e11e      	b.n	800d7d4 <HAL_SPI_Transmit+0x260>
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	2201      	movs	r2, #1
 800d59a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d59e:	f7fb fb97 	bl	8008cd0 <HAL_GetTick>
 800d5a2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800d5a4:	88fb      	ldrh	r3, [r7, #6]
 800d5a6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d5ae:	b2db      	uxtb	r3, r3
 800d5b0:	2b01      	cmp	r3, #1
 800d5b2:	d002      	beq.n	800d5ba <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800d5b4:	2302      	movs	r3, #2
 800d5b6:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d5b8:	e103      	b.n	800d7c2 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800d5ba:	68bb      	ldr	r3, [r7, #8]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d002      	beq.n	800d5c6 <HAL_SPI_Transmit+0x52>
 800d5c0:	88fb      	ldrh	r3, [r7, #6]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d102      	bne.n	800d5cc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800d5c6:	2301      	movs	r3, #1
 800d5c8:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d5ca:	e0fa      	b.n	800d7c2 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	2203      	movs	r2, #3
 800d5d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	68ba      	ldr	r2, [r7, #8]
 800d5de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	88fa      	ldrh	r2, [r7, #6]
 800d5e4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	88fa      	ldrh	r2, [r7, #6]
 800d5ea:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	2200      	movs	r2, #0
 800d602:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	2200      	movs	r2, #0
 800d608:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	689b      	ldr	r3, [r3, #8]
 800d60e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d612:	d107      	bne.n	800d624 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	681a      	ldr	r2, [r3, #0]
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d622:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d62e:	2b40      	cmp	r3, #64	; 0x40
 800d630:	d007      	beq.n	800d642 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	681a      	ldr	r2, [r3, #0]
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d640:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	68db      	ldr	r3, [r3, #12]
 800d646:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d64a:	d14b      	bne.n	800d6e4 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	685b      	ldr	r3, [r3, #4]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d002      	beq.n	800d65a <HAL_SPI_Transmit+0xe6>
 800d654:	8afb      	ldrh	r3, [r7, #22]
 800d656:	2b01      	cmp	r3, #1
 800d658:	d13e      	bne.n	800d6d8 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d65e:	881a      	ldrh	r2, [r3, #0]
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d66a:	1c9a      	adds	r2, r3, #2
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d674:	b29b      	uxth	r3, r3
 800d676:	3b01      	subs	r3, #1
 800d678:	b29a      	uxth	r2, r3
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800d67e:	e02b      	b.n	800d6d8 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	689b      	ldr	r3, [r3, #8]
 800d686:	f003 0302 	and.w	r3, r3, #2
 800d68a:	2b02      	cmp	r3, #2
 800d68c:	d112      	bne.n	800d6b4 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d692:	881a      	ldrh	r2, [r3, #0]
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d69e:	1c9a      	adds	r2, r3, #2
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d6a8:	b29b      	uxth	r3, r3
 800d6aa:	3b01      	subs	r3, #1
 800d6ac:	b29a      	uxth	r2, r3
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	86da      	strh	r2, [r3, #54]	; 0x36
 800d6b2:	e011      	b.n	800d6d8 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d6b4:	f7fb fb0c 	bl	8008cd0 <HAL_GetTick>
 800d6b8:	4602      	mov	r2, r0
 800d6ba:	69bb      	ldr	r3, [r7, #24]
 800d6bc:	1ad3      	subs	r3, r2, r3
 800d6be:	683a      	ldr	r2, [r7, #0]
 800d6c0:	429a      	cmp	r2, r3
 800d6c2:	d803      	bhi.n	800d6cc <HAL_SPI_Transmit+0x158>
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6ca:	d102      	bne.n	800d6d2 <HAL_SPI_Transmit+0x15e>
 800d6cc:	683b      	ldr	r3, [r7, #0]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d102      	bne.n	800d6d8 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800d6d2:	2303      	movs	r3, #3
 800d6d4:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d6d6:	e074      	b.n	800d7c2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d6dc:	b29b      	uxth	r3, r3
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d1ce      	bne.n	800d680 <HAL_SPI_Transmit+0x10c>
 800d6e2:	e04c      	b.n	800d77e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	685b      	ldr	r3, [r3, #4]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d002      	beq.n	800d6f2 <HAL_SPI_Transmit+0x17e>
 800d6ec:	8afb      	ldrh	r3, [r7, #22]
 800d6ee:	2b01      	cmp	r3, #1
 800d6f0:	d140      	bne.n	800d774 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	330c      	adds	r3, #12
 800d6fc:	7812      	ldrb	r2, [r2, #0]
 800d6fe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d704:	1c5a      	adds	r2, r3, #1
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d70e:	b29b      	uxth	r3, r3
 800d710:	3b01      	subs	r3, #1
 800d712:	b29a      	uxth	r2, r3
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800d718:	e02c      	b.n	800d774 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	689b      	ldr	r3, [r3, #8]
 800d720:	f003 0302 	and.w	r3, r3, #2
 800d724:	2b02      	cmp	r3, #2
 800d726:	d113      	bne.n	800d750 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	330c      	adds	r3, #12
 800d732:	7812      	ldrb	r2, [r2, #0]
 800d734:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d73a:	1c5a      	adds	r2, r3, #1
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d744:	b29b      	uxth	r3, r3
 800d746:	3b01      	subs	r3, #1
 800d748:	b29a      	uxth	r2, r3
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	86da      	strh	r2, [r3, #54]	; 0x36
 800d74e:	e011      	b.n	800d774 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d750:	f7fb fabe 	bl	8008cd0 <HAL_GetTick>
 800d754:	4602      	mov	r2, r0
 800d756:	69bb      	ldr	r3, [r7, #24]
 800d758:	1ad3      	subs	r3, r2, r3
 800d75a:	683a      	ldr	r2, [r7, #0]
 800d75c:	429a      	cmp	r2, r3
 800d75e:	d803      	bhi.n	800d768 <HAL_SPI_Transmit+0x1f4>
 800d760:	683b      	ldr	r3, [r7, #0]
 800d762:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d766:	d102      	bne.n	800d76e <HAL_SPI_Transmit+0x1fa>
 800d768:	683b      	ldr	r3, [r7, #0]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d102      	bne.n	800d774 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800d76e:	2303      	movs	r3, #3
 800d770:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d772:	e026      	b.n	800d7c2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d778:	b29b      	uxth	r3, r3
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d1cd      	bne.n	800d71a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d77e:	69ba      	ldr	r2, [r7, #24]
 800d780:	6839      	ldr	r1, [r7, #0]
 800d782:	68f8      	ldr	r0, [r7, #12]
 800d784:	f000 fba4 	bl	800ded0 <SPI_EndRxTxTransaction>
 800d788:	4603      	mov	r3, r0
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d002      	beq.n	800d794 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	2220      	movs	r2, #32
 800d792:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	689b      	ldr	r3, [r3, #8]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d10a      	bne.n	800d7b2 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d79c:	2300      	movs	r3, #0
 800d79e:	613b      	str	r3, [r7, #16]
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	68db      	ldr	r3, [r3, #12]
 800d7a6:	613b      	str	r3, [r7, #16]
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	689b      	ldr	r3, [r3, #8]
 800d7ae:	613b      	str	r3, [r7, #16]
 800d7b0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d002      	beq.n	800d7c0 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800d7ba:	2301      	movs	r3, #1
 800d7bc:	77fb      	strb	r3, [r7, #31]
 800d7be:	e000      	b.n	800d7c2 <HAL_SPI_Transmit+0x24e>
  }

error:
 800d7c0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	2201      	movs	r2, #1
 800d7c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d7d2:	7ffb      	ldrb	r3, [r7, #31]
}
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	3720      	adds	r7, #32
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd80      	pop	{r7, pc}

0800d7dc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b088      	sub	sp, #32
 800d7e0:	af02      	add	r7, sp, #8
 800d7e2:	60f8      	str	r0, [r7, #12]
 800d7e4:	60b9      	str	r1, [r7, #8]
 800d7e6:	603b      	str	r3, [r7, #0]
 800d7e8:	4613      	mov	r3, r2
 800d7ea:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	685b      	ldr	r3, [r3, #4]
 800d7f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d7f8:	d112      	bne.n	800d820 <HAL_SPI_Receive+0x44>
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	689b      	ldr	r3, [r3, #8]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d10e      	bne.n	800d820 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	2204      	movs	r2, #4
 800d806:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800d80a:	88fa      	ldrh	r2, [r7, #6]
 800d80c:	683b      	ldr	r3, [r7, #0]
 800d80e:	9300      	str	r3, [sp, #0]
 800d810:	4613      	mov	r3, r2
 800d812:	68ba      	ldr	r2, [r7, #8]
 800d814:	68b9      	ldr	r1, [r7, #8]
 800d816:	68f8      	ldr	r0, [r7, #12]
 800d818:	f000 f8e9 	bl	800d9ee <HAL_SPI_TransmitReceive>
 800d81c:	4603      	mov	r3, r0
 800d81e:	e0e2      	b.n	800d9e6 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d826:	2b01      	cmp	r3, #1
 800d828:	d101      	bne.n	800d82e <HAL_SPI_Receive+0x52>
 800d82a:	2302      	movs	r3, #2
 800d82c:	e0db      	b.n	800d9e6 <HAL_SPI_Receive+0x20a>
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	2201      	movs	r2, #1
 800d832:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d836:	f7fb fa4b 	bl	8008cd0 <HAL_GetTick>
 800d83a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d842:	b2db      	uxtb	r3, r3
 800d844:	2b01      	cmp	r3, #1
 800d846:	d002      	beq.n	800d84e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800d848:	2302      	movs	r3, #2
 800d84a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d84c:	e0c2      	b.n	800d9d4 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800d84e:	68bb      	ldr	r3, [r7, #8]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d002      	beq.n	800d85a <HAL_SPI_Receive+0x7e>
 800d854:	88fb      	ldrh	r3, [r7, #6]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d102      	bne.n	800d860 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800d85a:	2301      	movs	r3, #1
 800d85c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d85e:	e0b9      	b.n	800d9d4 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	2204      	movs	r2, #4
 800d864:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	2200      	movs	r2, #0
 800d86c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	68ba      	ldr	r2, [r7, #8]
 800d872:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	88fa      	ldrh	r2, [r7, #6]
 800d878:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	88fa      	ldrh	r2, [r7, #6]
 800d87e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	2200      	movs	r2, #0
 800d884:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	2200      	movs	r2, #0
 800d88a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	2200      	movs	r2, #0
 800d890:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	2200      	movs	r2, #0
 800d896:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	2200      	movs	r2, #0
 800d89c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	689b      	ldr	r3, [r3, #8]
 800d8a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d8a6:	d107      	bne.n	800d8b8 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	681a      	ldr	r2, [r3, #0]
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d8b6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8c2:	2b40      	cmp	r3, #64	; 0x40
 800d8c4:	d007      	beq.n	800d8d6 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	681a      	ldr	r2, [r3, #0]
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d8d4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	68db      	ldr	r3, [r3, #12]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d162      	bne.n	800d9a4 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800d8de:	e02e      	b.n	800d93e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	689b      	ldr	r3, [r3, #8]
 800d8e6:	f003 0301 	and.w	r3, r3, #1
 800d8ea:	2b01      	cmp	r3, #1
 800d8ec:	d115      	bne.n	800d91a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	f103 020c 	add.w	r2, r3, #12
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8fa:	7812      	ldrb	r2, [r2, #0]
 800d8fc:	b2d2      	uxtb	r2, r2
 800d8fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d904:	1c5a      	adds	r2, r3, #1
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d90e:	b29b      	uxth	r3, r3
 800d910:	3b01      	subs	r3, #1
 800d912:	b29a      	uxth	r2, r3
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d918:	e011      	b.n	800d93e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d91a:	f7fb f9d9 	bl	8008cd0 <HAL_GetTick>
 800d91e:	4602      	mov	r2, r0
 800d920:	693b      	ldr	r3, [r7, #16]
 800d922:	1ad3      	subs	r3, r2, r3
 800d924:	683a      	ldr	r2, [r7, #0]
 800d926:	429a      	cmp	r2, r3
 800d928:	d803      	bhi.n	800d932 <HAL_SPI_Receive+0x156>
 800d92a:	683b      	ldr	r3, [r7, #0]
 800d92c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d930:	d102      	bne.n	800d938 <HAL_SPI_Receive+0x15c>
 800d932:	683b      	ldr	r3, [r7, #0]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d102      	bne.n	800d93e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800d938:	2303      	movs	r3, #3
 800d93a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800d93c:	e04a      	b.n	800d9d4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d942:	b29b      	uxth	r3, r3
 800d944:	2b00      	cmp	r3, #0
 800d946:	d1cb      	bne.n	800d8e0 <HAL_SPI_Receive+0x104>
 800d948:	e031      	b.n	800d9ae <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	689b      	ldr	r3, [r3, #8]
 800d950:	f003 0301 	and.w	r3, r3, #1
 800d954:	2b01      	cmp	r3, #1
 800d956:	d113      	bne.n	800d980 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	68da      	ldr	r2, [r3, #12]
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d962:	b292      	uxth	r2, r2
 800d964:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d96a:	1c9a      	adds	r2, r3, #2
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d974:	b29b      	uxth	r3, r3
 800d976:	3b01      	subs	r3, #1
 800d978:	b29a      	uxth	r2, r3
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d97e:	e011      	b.n	800d9a4 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d980:	f7fb f9a6 	bl	8008cd0 <HAL_GetTick>
 800d984:	4602      	mov	r2, r0
 800d986:	693b      	ldr	r3, [r7, #16]
 800d988:	1ad3      	subs	r3, r2, r3
 800d98a:	683a      	ldr	r2, [r7, #0]
 800d98c:	429a      	cmp	r2, r3
 800d98e:	d803      	bhi.n	800d998 <HAL_SPI_Receive+0x1bc>
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d996:	d102      	bne.n	800d99e <HAL_SPI_Receive+0x1c2>
 800d998:	683b      	ldr	r3, [r7, #0]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d102      	bne.n	800d9a4 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800d99e:	2303      	movs	r3, #3
 800d9a0:	75fb      	strb	r3, [r7, #23]
          goto error;
 800d9a2:	e017      	b.n	800d9d4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d9a8:	b29b      	uxth	r3, r3
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d1cd      	bne.n	800d94a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d9ae:	693a      	ldr	r2, [r7, #16]
 800d9b0:	6839      	ldr	r1, [r7, #0]
 800d9b2:	68f8      	ldr	r0, [r7, #12]
 800d9b4:	f000 fa27 	bl	800de06 <SPI_EndRxTransaction>
 800d9b8:	4603      	mov	r3, r0
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d002      	beq.n	800d9c4 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	2220      	movs	r2, #32
 800d9c2:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d002      	beq.n	800d9d2 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800d9cc:	2301      	movs	r3, #1
 800d9ce:	75fb      	strb	r3, [r7, #23]
 800d9d0:	e000      	b.n	800d9d4 <HAL_SPI_Receive+0x1f8>
  }

error :
 800d9d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	2201      	movs	r2, #1
 800d9d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	2200      	movs	r2, #0
 800d9e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d9e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	3718      	adds	r7, #24
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	bd80      	pop	{r7, pc}

0800d9ee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800d9ee:	b580      	push	{r7, lr}
 800d9f0:	b08c      	sub	sp, #48	; 0x30
 800d9f2:	af00      	add	r7, sp, #0
 800d9f4:	60f8      	str	r0, [r7, #12]
 800d9f6:	60b9      	str	r1, [r7, #8]
 800d9f8:	607a      	str	r2, [r7, #4]
 800d9fa:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800d9fc:	2301      	movs	r3, #1
 800d9fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800da00:	2300      	movs	r3, #0
 800da02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800da0c:	2b01      	cmp	r3, #1
 800da0e:	d101      	bne.n	800da14 <HAL_SPI_TransmitReceive+0x26>
 800da10:	2302      	movs	r3, #2
 800da12:	e18a      	b.n	800dd2a <HAL_SPI_TransmitReceive+0x33c>
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	2201      	movs	r2, #1
 800da18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800da1c:	f7fb f958 	bl	8008cd0 <HAL_GetTick>
 800da20:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800da28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	685b      	ldr	r3, [r3, #4]
 800da30:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800da32:	887b      	ldrh	r3, [r7, #2]
 800da34:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800da36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800da3a:	2b01      	cmp	r3, #1
 800da3c:	d00f      	beq.n	800da5e <HAL_SPI_TransmitReceive+0x70>
 800da3e:	69fb      	ldr	r3, [r7, #28]
 800da40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800da44:	d107      	bne.n	800da56 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	689b      	ldr	r3, [r3, #8]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d103      	bne.n	800da56 <HAL_SPI_TransmitReceive+0x68>
 800da4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800da52:	2b04      	cmp	r3, #4
 800da54:	d003      	beq.n	800da5e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800da56:	2302      	movs	r3, #2
 800da58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800da5c:	e15b      	b.n	800dd16 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800da5e:	68bb      	ldr	r3, [r7, #8]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d005      	beq.n	800da70 <HAL_SPI_TransmitReceive+0x82>
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d002      	beq.n	800da70 <HAL_SPI_TransmitReceive+0x82>
 800da6a:	887b      	ldrh	r3, [r7, #2]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d103      	bne.n	800da78 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800da70:	2301      	movs	r3, #1
 800da72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800da76:	e14e      	b.n	800dd16 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800da7e:	b2db      	uxtb	r3, r3
 800da80:	2b04      	cmp	r3, #4
 800da82:	d003      	beq.n	800da8c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	2205      	movs	r2, #5
 800da88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	2200      	movs	r2, #0
 800da90:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	687a      	ldr	r2, [r7, #4]
 800da96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	887a      	ldrh	r2, [r7, #2]
 800da9c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	887a      	ldrh	r2, [r7, #2]
 800daa2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	68ba      	ldr	r2, [r7, #8]
 800daa8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	887a      	ldrh	r2, [r7, #2]
 800daae:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	887a      	ldrh	r2, [r7, #2]
 800dab4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	2200      	movs	r2, #0
 800daba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	2200      	movs	r2, #0
 800dac0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dacc:	2b40      	cmp	r3, #64	; 0x40
 800dace:	d007      	beq.n	800dae0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	681a      	ldr	r2, [r3, #0]
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dade:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	68db      	ldr	r3, [r3, #12]
 800dae4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dae8:	d178      	bne.n	800dbdc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	685b      	ldr	r3, [r3, #4]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d002      	beq.n	800daf8 <HAL_SPI_TransmitReceive+0x10a>
 800daf2:	8b7b      	ldrh	r3, [r7, #26]
 800daf4:	2b01      	cmp	r3, #1
 800daf6:	d166      	bne.n	800dbc6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dafc:	881a      	ldrh	r2, [r3, #0]
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db08:	1c9a      	adds	r2, r3, #2
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800db12:	b29b      	uxth	r3, r3
 800db14:	3b01      	subs	r3, #1
 800db16:	b29a      	uxth	r2, r3
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800db1c:	e053      	b.n	800dbc6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	689b      	ldr	r3, [r3, #8]
 800db24:	f003 0302 	and.w	r3, r3, #2
 800db28:	2b02      	cmp	r3, #2
 800db2a:	d11b      	bne.n	800db64 <HAL_SPI_TransmitReceive+0x176>
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800db30:	b29b      	uxth	r3, r3
 800db32:	2b00      	cmp	r3, #0
 800db34:	d016      	beq.n	800db64 <HAL_SPI_TransmitReceive+0x176>
 800db36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db38:	2b01      	cmp	r3, #1
 800db3a:	d113      	bne.n	800db64 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db40:	881a      	ldrh	r2, [r3, #0]
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db4c:	1c9a      	adds	r2, r3, #2
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800db56:	b29b      	uxth	r3, r3
 800db58:	3b01      	subs	r3, #1
 800db5a:	b29a      	uxth	r2, r3
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800db60:	2300      	movs	r3, #0
 800db62:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	689b      	ldr	r3, [r3, #8]
 800db6a:	f003 0301 	and.w	r3, r3, #1
 800db6e:	2b01      	cmp	r3, #1
 800db70:	d119      	bne.n	800dba6 <HAL_SPI_TransmitReceive+0x1b8>
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800db76:	b29b      	uxth	r3, r3
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d014      	beq.n	800dba6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	68da      	ldr	r2, [r3, #12]
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db86:	b292      	uxth	r2, r2
 800db88:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db8e:	1c9a      	adds	r2, r3, #2
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800db98:	b29b      	uxth	r3, r3
 800db9a:	3b01      	subs	r3, #1
 800db9c:	b29a      	uxth	r2, r3
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800dba2:	2301      	movs	r3, #1
 800dba4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800dba6:	f7fb f893 	bl	8008cd0 <HAL_GetTick>
 800dbaa:	4602      	mov	r2, r0
 800dbac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbae:	1ad3      	subs	r3, r2, r3
 800dbb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dbb2:	429a      	cmp	r2, r3
 800dbb4:	d807      	bhi.n	800dbc6 <HAL_SPI_TransmitReceive+0x1d8>
 800dbb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbbc:	d003      	beq.n	800dbc6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800dbbe:	2303      	movs	r3, #3
 800dbc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800dbc4:	e0a7      	b.n	800dd16 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dbca:	b29b      	uxth	r3, r3
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d1a6      	bne.n	800db1e <HAL_SPI_TransmitReceive+0x130>
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dbd4:	b29b      	uxth	r3, r3
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d1a1      	bne.n	800db1e <HAL_SPI_TransmitReceive+0x130>
 800dbda:	e07c      	b.n	800dcd6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	685b      	ldr	r3, [r3, #4]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d002      	beq.n	800dbea <HAL_SPI_TransmitReceive+0x1fc>
 800dbe4:	8b7b      	ldrh	r3, [r7, #26]
 800dbe6:	2b01      	cmp	r3, #1
 800dbe8:	d16b      	bne.n	800dcc2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	330c      	adds	r3, #12
 800dbf4:	7812      	ldrb	r2, [r2, #0]
 800dbf6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbfc:	1c5a      	adds	r2, r3, #1
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dc06:	b29b      	uxth	r3, r3
 800dc08:	3b01      	subs	r3, #1
 800dc0a:	b29a      	uxth	r2, r3
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dc10:	e057      	b.n	800dcc2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	689b      	ldr	r3, [r3, #8]
 800dc18:	f003 0302 	and.w	r3, r3, #2
 800dc1c:	2b02      	cmp	r3, #2
 800dc1e:	d11c      	bne.n	800dc5a <HAL_SPI_TransmitReceive+0x26c>
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dc24:	b29b      	uxth	r3, r3
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d017      	beq.n	800dc5a <HAL_SPI_TransmitReceive+0x26c>
 800dc2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc2c:	2b01      	cmp	r3, #1
 800dc2e:	d114      	bne.n	800dc5a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	330c      	adds	r3, #12
 800dc3a:	7812      	ldrb	r2, [r2, #0]
 800dc3c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc42:	1c5a      	adds	r2, r3, #1
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dc4c:	b29b      	uxth	r3, r3
 800dc4e:	3b01      	subs	r3, #1
 800dc50:	b29a      	uxth	r2, r3
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800dc56:	2300      	movs	r3, #0
 800dc58:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	689b      	ldr	r3, [r3, #8]
 800dc60:	f003 0301 	and.w	r3, r3, #1
 800dc64:	2b01      	cmp	r3, #1
 800dc66:	d119      	bne.n	800dc9c <HAL_SPI_TransmitReceive+0x2ae>
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dc6c:	b29b      	uxth	r3, r3
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d014      	beq.n	800dc9c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	68da      	ldr	r2, [r3, #12]
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc7c:	b2d2      	uxtb	r2, r2
 800dc7e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc84:	1c5a      	adds	r2, r3, #1
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dc8e:	b29b      	uxth	r3, r3
 800dc90:	3b01      	subs	r3, #1
 800dc92:	b29a      	uxth	r2, r3
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800dc98:	2301      	movs	r3, #1
 800dc9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800dc9c:	f7fb f818 	bl	8008cd0 <HAL_GetTick>
 800dca0:	4602      	mov	r2, r0
 800dca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dca4:	1ad3      	subs	r3, r2, r3
 800dca6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dca8:	429a      	cmp	r2, r3
 800dcaa:	d803      	bhi.n	800dcb4 <HAL_SPI_TransmitReceive+0x2c6>
 800dcac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcb2:	d102      	bne.n	800dcba <HAL_SPI_TransmitReceive+0x2cc>
 800dcb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d103      	bne.n	800dcc2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800dcba:	2303      	movs	r3, #3
 800dcbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800dcc0:	e029      	b.n	800dd16 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dcc6:	b29b      	uxth	r3, r3
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d1a2      	bne.n	800dc12 <HAL_SPI_TransmitReceive+0x224>
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dcd0:	b29b      	uxth	r3, r3
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d19d      	bne.n	800dc12 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800dcd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dcd8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dcda:	68f8      	ldr	r0, [r7, #12]
 800dcdc:	f000 f8f8 	bl	800ded0 <SPI_EndRxTxTransaction>
 800dce0:	4603      	mov	r3, r0
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d006      	beq.n	800dcf4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800dce6:	2301      	movs	r3, #1
 800dce8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	2220      	movs	r2, #32
 800dcf0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800dcf2:	e010      	b.n	800dd16 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	689b      	ldr	r3, [r3, #8]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d10b      	bne.n	800dd14 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	617b      	str	r3, [r7, #20]
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	68db      	ldr	r3, [r3, #12]
 800dd06:	617b      	str	r3, [r7, #20]
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	689b      	ldr	r3, [r3, #8]
 800dd0e:	617b      	str	r3, [r7, #20]
 800dd10:	697b      	ldr	r3, [r7, #20]
 800dd12:	e000      	b.n	800dd16 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800dd14:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	2201      	movs	r2, #1
 800dd1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	2200      	movs	r2, #0
 800dd22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800dd26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	3730      	adds	r7, #48	; 0x30
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	bd80      	pop	{r7, pc}

0800dd32 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800dd32:	b580      	push	{r7, lr}
 800dd34:	b084      	sub	sp, #16
 800dd36:	af00      	add	r7, sp, #0
 800dd38:	60f8      	str	r0, [r7, #12]
 800dd3a:	60b9      	str	r1, [r7, #8]
 800dd3c:	603b      	str	r3, [r7, #0]
 800dd3e:	4613      	mov	r3, r2
 800dd40:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800dd42:	e04c      	b.n	800ddde <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800dd44:	683b      	ldr	r3, [r7, #0]
 800dd46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd4a:	d048      	beq.n	800ddde <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800dd4c:	f7fa ffc0 	bl	8008cd0 <HAL_GetTick>
 800dd50:	4602      	mov	r2, r0
 800dd52:	69bb      	ldr	r3, [r7, #24]
 800dd54:	1ad3      	subs	r3, r2, r3
 800dd56:	683a      	ldr	r2, [r7, #0]
 800dd58:	429a      	cmp	r2, r3
 800dd5a:	d902      	bls.n	800dd62 <SPI_WaitFlagStateUntilTimeout+0x30>
 800dd5c:	683b      	ldr	r3, [r7, #0]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d13d      	bne.n	800ddde <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	685a      	ldr	r2, [r3, #4]
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800dd70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	685b      	ldr	r3, [r3, #4]
 800dd76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dd7a:	d111      	bne.n	800dda0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	689b      	ldr	r3, [r3, #8]
 800dd80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dd84:	d004      	beq.n	800dd90 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	689b      	ldr	r3, [r3, #8]
 800dd8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dd8e:	d107      	bne.n	800dda0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	681a      	ldr	r2, [r3, #0]
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dd9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dda4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dda8:	d10f      	bne.n	800ddca <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	681a      	ldr	r2, [r3, #0]
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ddb8:	601a      	str	r2, [r3, #0]
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	681a      	ldr	r2, [r3, #0]
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ddc8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	2201      	movs	r2, #1
 800ddce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800ddda:	2303      	movs	r3, #3
 800dddc:	e00f      	b.n	800ddfe <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	689a      	ldr	r2, [r3, #8]
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	4013      	ands	r3, r2
 800dde8:	68ba      	ldr	r2, [r7, #8]
 800ddea:	429a      	cmp	r2, r3
 800ddec:	bf0c      	ite	eq
 800ddee:	2301      	moveq	r3, #1
 800ddf0:	2300      	movne	r3, #0
 800ddf2:	b2db      	uxtb	r3, r3
 800ddf4:	461a      	mov	r2, r3
 800ddf6:	79fb      	ldrb	r3, [r7, #7]
 800ddf8:	429a      	cmp	r2, r3
 800ddfa:	d1a3      	bne.n	800dd44 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800ddfc:	2300      	movs	r3, #0
}
 800ddfe:	4618      	mov	r0, r3
 800de00:	3710      	adds	r7, #16
 800de02:	46bd      	mov	sp, r7
 800de04:	bd80      	pop	{r7, pc}

0800de06 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800de06:	b580      	push	{r7, lr}
 800de08:	b086      	sub	sp, #24
 800de0a:	af02      	add	r7, sp, #8
 800de0c:	60f8      	str	r0, [r7, #12]
 800de0e:	60b9      	str	r1, [r7, #8]
 800de10:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	685b      	ldr	r3, [r3, #4]
 800de16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800de1a:	d111      	bne.n	800de40 <SPI_EndRxTransaction+0x3a>
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	689b      	ldr	r3, [r3, #8]
 800de20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800de24:	d004      	beq.n	800de30 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	689b      	ldr	r3, [r3, #8]
 800de2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800de2e:	d107      	bne.n	800de40 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	681a      	ldr	r2, [r3, #0]
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800de3e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	685b      	ldr	r3, [r3, #4]
 800de44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800de48:	d12a      	bne.n	800dea0 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	689b      	ldr	r3, [r3, #8]
 800de4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800de52:	d012      	beq.n	800de7a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	9300      	str	r3, [sp, #0]
 800de58:	68bb      	ldr	r3, [r7, #8]
 800de5a:	2200      	movs	r2, #0
 800de5c:	2180      	movs	r1, #128	; 0x80
 800de5e:	68f8      	ldr	r0, [r7, #12]
 800de60:	f7ff ff67 	bl	800dd32 <SPI_WaitFlagStateUntilTimeout>
 800de64:	4603      	mov	r3, r0
 800de66:	2b00      	cmp	r3, #0
 800de68:	d02d      	beq.n	800dec6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de6e:	f043 0220 	orr.w	r2, r3, #32
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800de76:	2303      	movs	r3, #3
 800de78:	e026      	b.n	800dec8 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	9300      	str	r3, [sp, #0]
 800de7e:	68bb      	ldr	r3, [r7, #8]
 800de80:	2200      	movs	r2, #0
 800de82:	2101      	movs	r1, #1
 800de84:	68f8      	ldr	r0, [r7, #12]
 800de86:	f7ff ff54 	bl	800dd32 <SPI_WaitFlagStateUntilTimeout>
 800de8a:	4603      	mov	r3, r0
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d01a      	beq.n	800dec6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de94:	f043 0220 	orr.w	r2, r3, #32
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800de9c:	2303      	movs	r3, #3
 800de9e:	e013      	b.n	800dec8 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	9300      	str	r3, [sp, #0]
 800dea4:	68bb      	ldr	r3, [r7, #8]
 800dea6:	2200      	movs	r2, #0
 800dea8:	2101      	movs	r1, #1
 800deaa:	68f8      	ldr	r0, [r7, #12]
 800deac:	f7ff ff41 	bl	800dd32 <SPI_WaitFlagStateUntilTimeout>
 800deb0:	4603      	mov	r3, r0
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d007      	beq.n	800dec6 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800deba:	f043 0220 	orr.w	r2, r3, #32
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800dec2:	2303      	movs	r3, #3
 800dec4:	e000      	b.n	800dec8 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800dec6:	2300      	movs	r3, #0
}
 800dec8:	4618      	mov	r0, r3
 800deca:	3710      	adds	r7, #16
 800decc:	46bd      	mov	sp, r7
 800dece:	bd80      	pop	{r7, pc}

0800ded0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b088      	sub	sp, #32
 800ded4:	af02      	add	r7, sp, #8
 800ded6:	60f8      	str	r0, [r7, #12]
 800ded8:	60b9      	str	r1, [r7, #8]
 800deda:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800dedc:	4b1b      	ldr	r3, [pc, #108]	; (800df4c <SPI_EndRxTxTransaction+0x7c>)
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	4a1b      	ldr	r2, [pc, #108]	; (800df50 <SPI_EndRxTxTransaction+0x80>)
 800dee2:	fba2 2303 	umull	r2, r3, r2, r3
 800dee6:	0d5b      	lsrs	r3, r3, #21
 800dee8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800deec:	fb02 f303 	mul.w	r3, r2, r3
 800def0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	685b      	ldr	r3, [r3, #4]
 800def6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800defa:	d112      	bne.n	800df22 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	9300      	str	r3, [sp, #0]
 800df00:	68bb      	ldr	r3, [r7, #8]
 800df02:	2200      	movs	r2, #0
 800df04:	2180      	movs	r1, #128	; 0x80
 800df06:	68f8      	ldr	r0, [r7, #12]
 800df08:	f7ff ff13 	bl	800dd32 <SPI_WaitFlagStateUntilTimeout>
 800df0c:	4603      	mov	r3, r0
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d016      	beq.n	800df40 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df16:	f043 0220 	orr.w	r2, r3, #32
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800df1e:	2303      	movs	r3, #3
 800df20:	e00f      	b.n	800df42 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800df22:	697b      	ldr	r3, [r7, #20]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d00a      	beq.n	800df3e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800df28:	697b      	ldr	r3, [r7, #20]
 800df2a:	3b01      	subs	r3, #1
 800df2c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	689b      	ldr	r3, [r3, #8]
 800df34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df38:	2b80      	cmp	r3, #128	; 0x80
 800df3a:	d0f2      	beq.n	800df22 <SPI_EndRxTxTransaction+0x52>
 800df3c:	e000      	b.n	800df40 <SPI_EndRxTxTransaction+0x70>
        break;
 800df3e:	bf00      	nop
  }

  return HAL_OK;
 800df40:	2300      	movs	r3, #0
}
 800df42:	4618      	mov	r0, r3
 800df44:	3718      	adds	r7, #24
 800df46:	46bd      	mov	sp, r7
 800df48:	bd80      	pop	{r7, pc}
 800df4a:	bf00      	nop
 800df4c:	20000000 	.word	0x20000000
 800df50:	165e9f81 	.word	0x165e9f81

0800df54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800df54:	b580      	push	{r7, lr}
 800df56:	b082      	sub	sp, #8
 800df58:	af00      	add	r7, sp, #0
 800df5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d101      	bne.n	800df66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800df62:	2301      	movs	r3, #1
 800df64:	e01d      	b.n	800dfa2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800df6c:	b2db      	uxtb	r3, r3
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d106      	bne.n	800df80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	2200      	movs	r2, #0
 800df76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800df7a:	6878      	ldr	r0, [r7, #4]
 800df7c:	f7f8 fdce 	bl	8006b1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	2202      	movs	r2, #2
 800df84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681a      	ldr	r2, [r3, #0]
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	3304      	adds	r3, #4
 800df90:	4619      	mov	r1, r3
 800df92:	4610      	mov	r0, r2
 800df94:	f000 fb56 	bl	800e644 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	2201      	movs	r2, #1
 800df9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dfa0:	2300      	movs	r3, #0
}
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	3708      	adds	r7, #8
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	bd80      	pop	{r7, pc}

0800dfaa <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800dfaa:	b480      	push	{r7}
 800dfac:	b085      	sub	sp, #20
 800dfae:	af00      	add	r7, sp, #0
 800dfb0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	68da      	ldr	r2, [r3, #12]
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	f042 0201 	orr.w	r2, r2, #1
 800dfc0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	689b      	ldr	r3, [r3, #8]
 800dfc8:	f003 0307 	and.w	r3, r3, #7
 800dfcc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	2b06      	cmp	r3, #6
 800dfd2:	d007      	beq.n	800dfe4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	681a      	ldr	r2, [r3, #0]
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	f042 0201 	orr.w	r2, r2, #1
 800dfe2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800dfe4:	2300      	movs	r3, #0
}
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	3714      	adds	r7, #20
 800dfea:	46bd      	mov	sp, r7
 800dfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff0:	4770      	bx	lr

0800dff2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800dff2:	b580      	push	{r7, lr}
 800dff4:	b082      	sub	sp, #8
 800dff6:	af00      	add	r7, sp, #0
 800dff8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d101      	bne.n	800e004 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e000:	2301      	movs	r3, #1
 800e002:	e01d      	b.n	800e040 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e00a:	b2db      	uxtb	r3, r3
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d106      	bne.n	800e01e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	2200      	movs	r2, #0
 800e014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e018:	6878      	ldr	r0, [r7, #4]
 800e01a:	f7f8 fd0b 	bl	8006a34 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	2202      	movs	r2, #2
 800e022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	681a      	ldr	r2, [r3, #0]
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	3304      	adds	r3, #4
 800e02e:	4619      	mov	r1, r3
 800e030:	4610      	mov	r0, r2
 800e032:	f000 fb07 	bl	800e644 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	2201      	movs	r2, #1
 800e03a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e03e:	2300      	movs	r3, #0
}
 800e040:	4618      	mov	r0, r3
 800e042:	3708      	adds	r7, #8
 800e044:	46bd      	mov	sp, r7
 800e046:	bd80      	pop	{r7, pc}

0800e048 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b084      	sub	sp, #16
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]
 800e050:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	2201      	movs	r2, #1
 800e058:	6839      	ldr	r1, [r7, #0]
 800e05a:	4618      	mov	r0, r3
 800e05c:	f000 fd42 	bl	800eae4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	4a15      	ldr	r2, [pc, #84]	; (800e0bc <HAL_TIM_PWM_Start+0x74>)
 800e066:	4293      	cmp	r3, r2
 800e068:	d004      	beq.n	800e074 <HAL_TIM_PWM_Start+0x2c>
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	4a14      	ldr	r2, [pc, #80]	; (800e0c0 <HAL_TIM_PWM_Start+0x78>)
 800e070:	4293      	cmp	r3, r2
 800e072:	d101      	bne.n	800e078 <HAL_TIM_PWM_Start+0x30>
 800e074:	2301      	movs	r3, #1
 800e076:	e000      	b.n	800e07a <HAL_TIM_PWM_Start+0x32>
 800e078:	2300      	movs	r3, #0
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d007      	beq.n	800e08e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e08c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	689b      	ldr	r3, [r3, #8]
 800e094:	f003 0307 	and.w	r3, r3, #7
 800e098:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	2b06      	cmp	r3, #6
 800e09e:	d007      	beq.n	800e0b0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	681a      	ldr	r2, [r3, #0]
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	f042 0201 	orr.w	r2, r2, #1
 800e0ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e0b0:	2300      	movs	r3, #0
}
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	3710      	adds	r7, #16
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	bd80      	pop	{r7, pc}
 800e0ba:	bf00      	nop
 800e0bc:	40010000 	.word	0x40010000
 800e0c0:	40010400 	.word	0x40010400

0800e0c4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b086      	sub	sp, #24
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	6078      	str	r0, [r7, #4]
 800e0cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d101      	bne.n	800e0d8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800e0d4:	2301      	movs	r3, #1
 800e0d6:	e083      	b.n	800e1e0 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e0de:	b2db      	uxtb	r3, r3
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d106      	bne.n	800e0f2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800e0ec:	6878      	ldr	r0, [r7, #4]
 800e0ee:	f7f8 fda5 	bl	8006c3c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	2202      	movs	r2, #2
 800e0f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	689b      	ldr	r3, [r3, #8]
 800e100:	687a      	ldr	r2, [r7, #4]
 800e102:	6812      	ldr	r2, [r2, #0]
 800e104:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e108:	f023 0307 	bic.w	r3, r3, #7
 800e10c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	681a      	ldr	r2, [r3, #0]
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	3304      	adds	r3, #4
 800e116:	4619      	mov	r1, r3
 800e118:	4610      	mov	r0, r2
 800e11a:	f000 fa93 	bl	800e644 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	689b      	ldr	r3, [r3, #8]
 800e124:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	699b      	ldr	r3, [r3, #24]
 800e12c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	6a1b      	ldr	r3, [r3, #32]
 800e134:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800e136:	683b      	ldr	r3, [r7, #0]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	697a      	ldr	r2, [r7, #20]
 800e13c:	4313      	orrs	r3, r2
 800e13e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800e140:	693b      	ldr	r3, [r7, #16]
 800e142:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e146:	f023 0303 	bic.w	r3, r3, #3
 800e14a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	689a      	ldr	r2, [r3, #8]
 800e150:	683b      	ldr	r3, [r7, #0]
 800e152:	699b      	ldr	r3, [r3, #24]
 800e154:	021b      	lsls	r3, r3, #8
 800e156:	4313      	orrs	r3, r2
 800e158:	693a      	ldr	r2, [r7, #16]
 800e15a:	4313      	orrs	r3, r2
 800e15c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800e15e:	693b      	ldr	r3, [r7, #16]
 800e160:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800e164:	f023 030c 	bic.w	r3, r3, #12
 800e168:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800e16a:	693b      	ldr	r3, [r7, #16]
 800e16c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e170:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e174:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800e176:	683b      	ldr	r3, [r7, #0]
 800e178:	68da      	ldr	r2, [r3, #12]
 800e17a:	683b      	ldr	r3, [r7, #0]
 800e17c:	69db      	ldr	r3, [r3, #28]
 800e17e:	021b      	lsls	r3, r3, #8
 800e180:	4313      	orrs	r3, r2
 800e182:	693a      	ldr	r2, [r7, #16]
 800e184:	4313      	orrs	r3, r2
 800e186:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800e188:	683b      	ldr	r3, [r7, #0]
 800e18a:	691b      	ldr	r3, [r3, #16]
 800e18c:	011a      	lsls	r2, r3, #4
 800e18e:	683b      	ldr	r3, [r7, #0]
 800e190:	6a1b      	ldr	r3, [r3, #32]
 800e192:	031b      	lsls	r3, r3, #12
 800e194:	4313      	orrs	r3, r2
 800e196:	693a      	ldr	r2, [r7, #16]
 800e198:	4313      	orrs	r3, r2
 800e19a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800e1a2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800e1aa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800e1ac:	683b      	ldr	r3, [r7, #0]
 800e1ae:	685a      	ldr	r2, [r3, #4]
 800e1b0:	683b      	ldr	r3, [r7, #0]
 800e1b2:	695b      	ldr	r3, [r3, #20]
 800e1b4:	011b      	lsls	r3, r3, #4
 800e1b6:	4313      	orrs	r3, r2
 800e1b8:	68fa      	ldr	r2, [r7, #12]
 800e1ba:	4313      	orrs	r3, r2
 800e1bc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	697a      	ldr	r2, [r7, #20]
 800e1c4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	693a      	ldr	r2, [r7, #16]
 800e1cc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	68fa      	ldr	r2, [r7, #12]
 800e1d4:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	2201      	movs	r2, #1
 800e1da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e1de:	2300      	movs	r3, #0
}
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	3718      	adds	r7, #24
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	bd80      	pop	{r7, pc}

0800e1e8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b082      	sub	sp, #8
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
 800e1f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800e1f2:	683b      	ldr	r3, [r7, #0]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d002      	beq.n	800e1fe <HAL_TIM_Encoder_Start+0x16>
 800e1f8:	2b04      	cmp	r3, #4
 800e1fa:	d008      	beq.n	800e20e <HAL_TIM_Encoder_Start+0x26>
 800e1fc:	e00f      	b.n	800e21e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	2201      	movs	r2, #1
 800e204:	2100      	movs	r1, #0
 800e206:	4618      	mov	r0, r3
 800e208:	f000 fc6c 	bl	800eae4 <TIM_CCxChannelCmd>
      break;
 800e20c:	e016      	b.n	800e23c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	2201      	movs	r2, #1
 800e214:	2104      	movs	r1, #4
 800e216:	4618      	mov	r0, r3
 800e218:	f000 fc64 	bl	800eae4 <TIM_CCxChannelCmd>
      break;
 800e21c:	e00e      	b.n	800e23c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	2201      	movs	r2, #1
 800e224:	2100      	movs	r1, #0
 800e226:	4618      	mov	r0, r3
 800e228:	f000 fc5c 	bl	800eae4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	2201      	movs	r2, #1
 800e232:	2104      	movs	r1, #4
 800e234:	4618      	mov	r0, r3
 800e236:	f000 fc55 	bl	800eae4 <TIM_CCxChannelCmd>
      break;
 800e23a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	681a      	ldr	r2, [r3, #0]
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	f042 0201 	orr.w	r2, r2, #1
 800e24a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800e24c:	2300      	movs	r3, #0
}
 800e24e:	4618      	mov	r0, r3
 800e250:	3708      	adds	r7, #8
 800e252:	46bd      	mov	sp, r7
 800e254:	bd80      	pop	{r7, pc}

0800e256 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e256:	b580      	push	{r7, lr}
 800e258:	b082      	sub	sp, #8
 800e25a:	af00      	add	r7, sp, #0
 800e25c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	691b      	ldr	r3, [r3, #16]
 800e264:	f003 0302 	and.w	r3, r3, #2
 800e268:	2b02      	cmp	r3, #2
 800e26a:	d122      	bne.n	800e2b2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	68db      	ldr	r3, [r3, #12]
 800e272:	f003 0302 	and.w	r3, r3, #2
 800e276:	2b02      	cmp	r3, #2
 800e278:	d11b      	bne.n	800e2b2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	f06f 0202 	mvn.w	r2, #2
 800e282:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	2201      	movs	r2, #1
 800e288:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	699b      	ldr	r3, [r3, #24]
 800e290:	f003 0303 	and.w	r3, r3, #3
 800e294:	2b00      	cmp	r3, #0
 800e296:	d003      	beq.n	800e2a0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e298:	6878      	ldr	r0, [r7, #4]
 800e29a:	f000 f9b5 	bl	800e608 <HAL_TIM_IC_CaptureCallback>
 800e29e:	e005      	b.n	800e2ac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e2a0:	6878      	ldr	r0, [r7, #4]
 800e2a2:	f000 f9a7 	bl	800e5f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e2a6:	6878      	ldr	r0, [r7, #4]
 800e2a8:	f000 f9b8 	bl	800e61c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	2200      	movs	r2, #0
 800e2b0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	691b      	ldr	r3, [r3, #16]
 800e2b8:	f003 0304 	and.w	r3, r3, #4
 800e2bc:	2b04      	cmp	r3, #4
 800e2be:	d122      	bne.n	800e306 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	68db      	ldr	r3, [r3, #12]
 800e2c6:	f003 0304 	and.w	r3, r3, #4
 800e2ca:	2b04      	cmp	r3, #4
 800e2cc:	d11b      	bne.n	800e306 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	f06f 0204 	mvn.w	r2, #4
 800e2d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	2202      	movs	r2, #2
 800e2dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	699b      	ldr	r3, [r3, #24]
 800e2e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d003      	beq.n	800e2f4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e2ec:	6878      	ldr	r0, [r7, #4]
 800e2ee:	f000 f98b 	bl	800e608 <HAL_TIM_IC_CaptureCallback>
 800e2f2:	e005      	b.n	800e300 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e2f4:	6878      	ldr	r0, [r7, #4]
 800e2f6:	f000 f97d 	bl	800e5f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e2fa:	6878      	ldr	r0, [r7, #4]
 800e2fc:	f000 f98e 	bl	800e61c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	2200      	movs	r2, #0
 800e304:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	691b      	ldr	r3, [r3, #16]
 800e30c:	f003 0308 	and.w	r3, r3, #8
 800e310:	2b08      	cmp	r3, #8
 800e312:	d122      	bne.n	800e35a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	68db      	ldr	r3, [r3, #12]
 800e31a:	f003 0308 	and.w	r3, r3, #8
 800e31e:	2b08      	cmp	r3, #8
 800e320:	d11b      	bne.n	800e35a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	f06f 0208 	mvn.w	r2, #8
 800e32a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	2204      	movs	r2, #4
 800e330:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	69db      	ldr	r3, [r3, #28]
 800e338:	f003 0303 	and.w	r3, r3, #3
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d003      	beq.n	800e348 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e340:	6878      	ldr	r0, [r7, #4]
 800e342:	f000 f961 	bl	800e608 <HAL_TIM_IC_CaptureCallback>
 800e346:	e005      	b.n	800e354 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e348:	6878      	ldr	r0, [r7, #4]
 800e34a:	f000 f953 	bl	800e5f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e34e:	6878      	ldr	r0, [r7, #4]
 800e350:	f000 f964 	bl	800e61c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	2200      	movs	r2, #0
 800e358:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	691b      	ldr	r3, [r3, #16]
 800e360:	f003 0310 	and.w	r3, r3, #16
 800e364:	2b10      	cmp	r3, #16
 800e366:	d122      	bne.n	800e3ae <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	68db      	ldr	r3, [r3, #12]
 800e36e:	f003 0310 	and.w	r3, r3, #16
 800e372:	2b10      	cmp	r3, #16
 800e374:	d11b      	bne.n	800e3ae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	f06f 0210 	mvn.w	r2, #16
 800e37e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	2208      	movs	r2, #8
 800e384:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	69db      	ldr	r3, [r3, #28]
 800e38c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e390:	2b00      	cmp	r3, #0
 800e392:	d003      	beq.n	800e39c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e394:	6878      	ldr	r0, [r7, #4]
 800e396:	f000 f937 	bl	800e608 <HAL_TIM_IC_CaptureCallback>
 800e39a:	e005      	b.n	800e3a8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e39c:	6878      	ldr	r0, [r7, #4]
 800e39e:	f000 f929 	bl	800e5f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e3a2:	6878      	ldr	r0, [r7, #4]
 800e3a4:	f000 f93a 	bl	800e61c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	691b      	ldr	r3, [r3, #16]
 800e3b4:	f003 0301 	and.w	r3, r3, #1
 800e3b8:	2b01      	cmp	r3, #1
 800e3ba:	d10e      	bne.n	800e3da <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	68db      	ldr	r3, [r3, #12]
 800e3c2:	f003 0301 	and.w	r3, r3, #1
 800e3c6:	2b01      	cmp	r3, #1
 800e3c8:	d107      	bne.n	800e3da <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	f06f 0201 	mvn.w	r2, #1
 800e3d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e3d4:	6878      	ldr	r0, [r7, #4]
 800e3d6:	f7f7 f91b 	bl	8005610 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	691b      	ldr	r3, [r3, #16]
 800e3e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e3e4:	2b80      	cmp	r3, #128	; 0x80
 800e3e6:	d10e      	bne.n	800e406 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	68db      	ldr	r3, [r3, #12]
 800e3ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e3f2:	2b80      	cmp	r3, #128	; 0x80
 800e3f4:	d107      	bne.n	800e406 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e3fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e400:	6878      	ldr	r0, [r7, #4]
 800e402:	f000 fc6d 	bl	800ece0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	691b      	ldr	r3, [r3, #16]
 800e40c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e410:	2b40      	cmp	r3, #64	; 0x40
 800e412:	d10e      	bne.n	800e432 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	68db      	ldr	r3, [r3, #12]
 800e41a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e41e:	2b40      	cmp	r3, #64	; 0x40
 800e420:	d107      	bne.n	800e432 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e42a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e42c:	6878      	ldr	r0, [r7, #4]
 800e42e:	f000 f8ff 	bl	800e630 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	691b      	ldr	r3, [r3, #16]
 800e438:	f003 0320 	and.w	r3, r3, #32
 800e43c:	2b20      	cmp	r3, #32
 800e43e:	d10e      	bne.n	800e45e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	68db      	ldr	r3, [r3, #12]
 800e446:	f003 0320 	and.w	r3, r3, #32
 800e44a:	2b20      	cmp	r3, #32
 800e44c:	d107      	bne.n	800e45e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	f06f 0220 	mvn.w	r2, #32
 800e456:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e458:	6878      	ldr	r0, [r7, #4]
 800e45a:	f000 fc37 	bl	800eccc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e45e:	bf00      	nop
 800e460:	3708      	adds	r7, #8
 800e462:	46bd      	mov	sp, r7
 800e464:	bd80      	pop	{r7, pc}
	...

0800e468 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e468:	b580      	push	{r7, lr}
 800e46a:	b084      	sub	sp, #16
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	60f8      	str	r0, [r7, #12]
 800e470:	60b9      	str	r1, [r7, #8]
 800e472:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e47a:	2b01      	cmp	r3, #1
 800e47c:	d101      	bne.n	800e482 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800e47e:	2302      	movs	r3, #2
 800e480:	e0b4      	b.n	800e5ec <HAL_TIM_PWM_ConfigChannel+0x184>
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	2201      	movs	r2, #1
 800e486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	2202      	movs	r2, #2
 800e48e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	2b0c      	cmp	r3, #12
 800e496:	f200 809f 	bhi.w	800e5d8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800e49a:	a201      	add	r2, pc, #4	; (adr r2, 800e4a0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800e49c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4a0:	0800e4d5 	.word	0x0800e4d5
 800e4a4:	0800e5d9 	.word	0x0800e5d9
 800e4a8:	0800e5d9 	.word	0x0800e5d9
 800e4ac:	0800e5d9 	.word	0x0800e5d9
 800e4b0:	0800e515 	.word	0x0800e515
 800e4b4:	0800e5d9 	.word	0x0800e5d9
 800e4b8:	0800e5d9 	.word	0x0800e5d9
 800e4bc:	0800e5d9 	.word	0x0800e5d9
 800e4c0:	0800e557 	.word	0x0800e557
 800e4c4:	0800e5d9 	.word	0x0800e5d9
 800e4c8:	0800e5d9 	.word	0x0800e5d9
 800e4cc:	0800e5d9 	.word	0x0800e5d9
 800e4d0:	0800e597 	.word	0x0800e597
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	68b9      	ldr	r1, [r7, #8]
 800e4da:	4618      	mov	r0, r3
 800e4dc:	f000 f952 	bl	800e784 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	699a      	ldr	r2, [r3, #24]
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	f042 0208 	orr.w	r2, r2, #8
 800e4ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	699a      	ldr	r2, [r3, #24]
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	f022 0204 	bic.w	r2, r2, #4
 800e4fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	6999      	ldr	r1, [r3, #24]
 800e506:	68bb      	ldr	r3, [r7, #8]
 800e508:	691a      	ldr	r2, [r3, #16]
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	430a      	orrs	r2, r1
 800e510:	619a      	str	r2, [r3, #24]
      break;
 800e512:	e062      	b.n	800e5da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	68b9      	ldr	r1, [r7, #8]
 800e51a:	4618      	mov	r0, r3
 800e51c:	f000 f9a2 	bl	800e864 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	699a      	ldr	r2, [r3, #24]
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e52e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	699a      	ldr	r2, [r3, #24]
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e53e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	6999      	ldr	r1, [r3, #24]
 800e546:	68bb      	ldr	r3, [r7, #8]
 800e548:	691b      	ldr	r3, [r3, #16]
 800e54a:	021a      	lsls	r2, r3, #8
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	430a      	orrs	r2, r1
 800e552:	619a      	str	r2, [r3, #24]
      break;
 800e554:	e041      	b.n	800e5da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	68b9      	ldr	r1, [r7, #8]
 800e55c:	4618      	mov	r0, r3
 800e55e:	f000 f9f7 	bl	800e950 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	69da      	ldr	r2, [r3, #28]
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	f042 0208 	orr.w	r2, r2, #8
 800e570:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	69da      	ldr	r2, [r3, #28]
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	f022 0204 	bic.w	r2, r2, #4
 800e580:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	69d9      	ldr	r1, [r3, #28]
 800e588:	68bb      	ldr	r3, [r7, #8]
 800e58a:	691a      	ldr	r2, [r3, #16]
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	430a      	orrs	r2, r1
 800e592:	61da      	str	r2, [r3, #28]
      break;
 800e594:	e021      	b.n	800e5da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	68b9      	ldr	r1, [r7, #8]
 800e59c:	4618      	mov	r0, r3
 800e59e:	f000 fa4b 	bl	800ea38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	69da      	ldr	r2, [r3, #28]
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e5b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	69da      	ldr	r2, [r3, #28]
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e5c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	69d9      	ldr	r1, [r3, #28]
 800e5c8:	68bb      	ldr	r3, [r7, #8]
 800e5ca:	691b      	ldr	r3, [r3, #16]
 800e5cc:	021a      	lsls	r2, r3, #8
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	430a      	orrs	r2, r1
 800e5d4:	61da      	str	r2, [r3, #28]
      break;
 800e5d6:	e000      	b.n	800e5da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800e5d8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	2201      	movs	r2, #1
 800e5de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	2200      	movs	r2, #0
 800e5e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e5ea:	2300      	movs	r3, #0
}
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	3710      	adds	r7, #16
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	bd80      	pop	{r7, pc}

0800e5f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e5f4:	b480      	push	{r7}
 800e5f6:	b083      	sub	sp, #12
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e5fc:	bf00      	nop
 800e5fe:	370c      	adds	r7, #12
 800e600:	46bd      	mov	sp, r7
 800e602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e606:	4770      	bx	lr

0800e608 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e608:	b480      	push	{r7}
 800e60a:	b083      	sub	sp, #12
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e610:	bf00      	nop
 800e612:	370c      	adds	r7, #12
 800e614:	46bd      	mov	sp, r7
 800e616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61a:	4770      	bx	lr

0800e61c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e61c:	b480      	push	{r7}
 800e61e:	b083      	sub	sp, #12
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e624:	bf00      	nop
 800e626:	370c      	adds	r7, #12
 800e628:	46bd      	mov	sp, r7
 800e62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62e:	4770      	bx	lr

0800e630 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e630:	b480      	push	{r7}
 800e632:	b083      	sub	sp, #12
 800e634:	af00      	add	r7, sp, #0
 800e636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e638:	bf00      	nop
 800e63a:	370c      	adds	r7, #12
 800e63c:	46bd      	mov	sp, r7
 800e63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e642:	4770      	bx	lr

0800e644 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e644:	b480      	push	{r7}
 800e646:	b085      	sub	sp, #20
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
 800e64c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	4a40      	ldr	r2, [pc, #256]	; (800e758 <TIM_Base_SetConfig+0x114>)
 800e658:	4293      	cmp	r3, r2
 800e65a:	d013      	beq.n	800e684 <TIM_Base_SetConfig+0x40>
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e662:	d00f      	beq.n	800e684 <TIM_Base_SetConfig+0x40>
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	4a3d      	ldr	r2, [pc, #244]	; (800e75c <TIM_Base_SetConfig+0x118>)
 800e668:	4293      	cmp	r3, r2
 800e66a:	d00b      	beq.n	800e684 <TIM_Base_SetConfig+0x40>
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	4a3c      	ldr	r2, [pc, #240]	; (800e760 <TIM_Base_SetConfig+0x11c>)
 800e670:	4293      	cmp	r3, r2
 800e672:	d007      	beq.n	800e684 <TIM_Base_SetConfig+0x40>
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	4a3b      	ldr	r2, [pc, #236]	; (800e764 <TIM_Base_SetConfig+0x120>)
 800e678:	4293      	cmp	r3, r2
 800e67a:	d003      	beq.n	800e684 <TIM_Base_SetConfig+0x40>
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	4a3a      	ldr	r2, [pc, #232]	; (800e768 <TIM_Base_SetConfig+0x124>)
 800e680:	4293      	cmp	r3, r2
 800e682:	d108      	bne.n	800e696 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e68a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e68c:	683b      	ldr	r3, [r7, #0]
 800e68e:	685b      	ldr	r3, [r3, #4]
 800e690:	68fa      	ldr	r2, [r7, #12]
 800e692:	4313      	orrs	r3, r2
 800e694:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	4a2f      	ldr	r2, [pc, #188]	; (800e758 <TIM_Base_SetConfig+0x114>)
 800e69a:	4293      	cmp	r3, r2
 800e69c:	d02b      	beq.n	800e6f6 <TIM_Base_SetConfig+0xb2>
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e6a4:	d027      	beq.n	800e6f6 <TIM_Base_SetConfig+0xb2>
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	4a2c      	ldr	r2, [pc, #176]	; (800e75c <TIM_Base_SetConfig+0x118>)
 800e6aa:	4293      	cmp	r3, r2
 800e6ac:	d023      	beq.n	800e6f6 <TIM_Base_SetConfig+0xb2>
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	4a2b      	ldr	r2, [pc, #172]	; (800e760 <TIM_Base_SetConfig+0x11c>)
 800e6b2:	4293      	cmp	r3, r2
 800e6b4:	d01f      	beq.n	800e6f6 <TIM_Base_SetConfig+0xb2>
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	4a2a      	ldr	r2, [pc, #168]	; (800e764 <TIM_Base_SetConfig+0x120>)
 800e6ba:	4293      	cmp	r3, r2
 800e6bc:	d01b      	beq.n	800e6f6 <TIM_Base_SetConfig+0xb2>
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	4a29      	ldr	r2, [pc, #164]	; (800e768 <TIM_Base_SetConfig+0x124>)
 800e6c2:	4293      	cmp	r3, r2
 800e6c4:	d017      	beq.n	800e6f6 <TIM_Base_SetConfig+0xb2>
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	4a28      	ldr	r2, [pc, #160]	; (800e76c <TIM_Base_SetConfig+0x128>)
 800e6ca:	4293      	cmp	r3, r2
 800e6cc:	d013      	beq.n	800e6f6 <TIM_Base_SetConfig+0xb2>
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	4a27      	ldr	r2, [pc, #156]	; (800e770 <TIM_Base_SetConfig+0x12c>)
 800e6d2:	4293      	cmp	r3, r2
 800e6d4:	d00f      	beq.n	800e6f6 <TIM_Base_SetConfig+0xb2>
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	4a26      	ldr	r2, [pc, #152]	; (800e774 <TIM_Base_SetConfig+0x130>)
 800e6da:	4293      	cmp	r3, r2
 800e6dc:	d00b      	beq.n	800e6f6 <TIM_Base_SetConfig+0xb2>
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	4a25      	ldr	r2, [pc, #148]	; (800e778 <TIM_Base_SetConfig+0x134>)
 800e6e2:	4293      	cmp	r3, r2
 800e6e4:	d007      	beq.n	800e6f6 <TIM_Base_SetConfig+0xb2>
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	4a24      	ldr	r2, [pc, #144]	; (800e77c <TIM_Base_SetConfig+0x138>)
 800e6ea:	4293      	cmp	r3, r2
 800e6ec:	d003      	beq.n	800e6f6 <TIM_Base_SetConfig+0xb2>
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	4a23      	ldr	r2, [pc, #140]	; (800e780 <TIM_Base_SetConfig+0x13c>)
 800e6f2:	4293      	cmp	r3, r2
 800e6f4:	d108      	bne.n	800e708 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e6fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e6fe:	683b      	ldr	r3, [r7, #0]
 800e700:	68db      	ldr	r3, [r3, #12]
 800e702:	68fa      	ldr	r2, [r7, #12]
 800e704:	4313      	orrs	r3, r2
 800e706:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e70e:	683b      	ldr	r3, [r7, #0]
 800e710:	695b      	ldr	r3, [r3, #20]
 800e712:	4313      	orrs	r3, r2
 800e714:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	68fa      	ldr	r2, [r7, #12]
 800e71a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e71c:	683b      	ldr	r3, [r7, #0]
 800e71e:	689a      	ldr	r2, [r3, #8]
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e724:	683b      	ldr	r3, [r7, #0]
 800e726:	681a      	ldr	r2, [r3, #0]
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	4a0a      	ldr	r2, [pc, #40]	; (800e758 <TIM_Base_SetConfig+0x114>)
 800e730:	4293      	cmp	r3, r2
 800e732:	d003      	beq.n	800e73c <TIM_Base_SetConfig+0xf8>
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	4a0c      	ldr	r2, [pc, #48]	; (800e768 <TIM_Base_SetConfig+0x124>)
 800e738:	4293      	cmp	r3, r2
 800e73a:	d103      	bne.n	800e744 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e73c:	683b      	ldr	r3, [r7, #0]
 800e73e:	691a      	ldr	r2, [r3, #16]
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	2201      	movs	r2, #1
 800e748:	615a      	str	r2, [r3, #20]
}
 800e74a:	bf00      	nop
 800e74c:	3714      	adds	r7, #20
 800e74e:	46bd      	mov	sp, r7
 800e750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e754:	4770      	bx	lr
 800e756:	bf00      	nop
 800e758:	40010000 	.word	0x40010000
 800e75c:	40000400 	.word	0x40000400
 800e760:	40000800 	.word	0x40000800
 800e764:	40000c00 	.word	0x40000c00
 800e768:	40010400 	.word	0x40010400
 800e76c:	40014000 	.word	0x40014000
 800e770:	40014400 	.word	0x40014400
 800e774:	40014800 	.word	0x40014800
 800e778:	40001800 	.word	0x40001800
 800e77c:	40001c00 	.word	0x40001c00
 800e780:	40002000 	.word	0x40002000

0800e784 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e784:	b480      	push	{r7}
 800e786:	b087      	sub	sp, #28
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
 800e78c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	6a1b      	ldr	r3, [r3, #32]
 800e792:	f023 0201 	bic.w	r2, r3, #1
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	6a1b      	ldr	r3, [r3, #32]
 800e79e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	685b      	ldr	r3, [r3, #4]
 800e7a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	699b      	ldr	r3, [r3, #24]
 800e7aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e7b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	f023 0303 	bic.w	r3, r3, #3
 800e7ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e7bc:	683b      	ldr	r3, [r7, #0]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	68fa      	ldr	r2, [r7, #12]
 800e7c2:	4313      	orrs	r3, r2
 800e7c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e7c6:	697b      	ldr	r3, [r7, #20]
 800e7c8:	f023 0302 	bic.w	r3, r3, #2
 800e7cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e7ce:	683b      	ldr	r3, [r7, #0]
 800e7d0:	689b      	ldr	r3, [r3, #8]
 800e7d2:	697a      	ldr	r2, [r7, #20]
 800e7d4:	4313      	orrs	r3, r2
 800e7d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	4a20      	ldr	r2, [pc, #128]	; (800e85c <TIM_OC1_SetConfig+0xd8>)
 800e7dc:	4293      	cmp	r3, r2
 800e7de:	d003      	beq.n	800e7e8 <TIM_OC1_SetConfig+0x64>
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	4a1f      	ldr	r2, [pc, #124]	; (800e860 <TIM_OC1_SetConfig+0xdc>)
 800e7e4:	4293      	cmp	r3, r2
 800e7e6:	d10c      	bne.n	800e802 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e7e8:	697b      	ldr	r3, [r7, #20]
 800e7ea:	f023 0308 	bic.w	r3, r3, #8
 800e7ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e7f0:	683b      	ldr	r3, [r7, #0]
 800e7f2:	68db      	ldr	r3, [r3, #12]
 800e7f4:	697a      	ldr	r2, [r7, #20]
 800e7f6:	4313      	orrs	r3, r2
 800e7f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e7fa:	697b      	ldr	r3, [r7, #20]
 800e7fc:	f023 0304 	bic.w	r3, r3, #4
 800e800:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	4a15      	ldr	r2, [pc, #84]	; (800e85c <TIM_OC1_SetConfig+0xd8>)
 800e806:	4293      	cmp	r3, r2
 800e808:	d003      	beq.n	800e812 <TIM_OC1_SetConfig+0x8e>
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	4a14      	ldr	r2, [pc, #80]	; (800e860 <TIM_OC1_SetConfig+0xdc>)
 800e80e:	4293      	cmp	r3, r2
 800e810:	d111      	bne.n	800e836 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e812:	693b      	ldr	r3, [r7, #16]
 800e814:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e818:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e81a:	693b      	ldr	r3, [r7, #16]
 800e81c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e820:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e822:	683b      	ldr	r3, [r7, #0]
 800e824:	695b      	ldr	r3, [r3, #20]
 800e826:	693a      	ldr	r2, [r7, #16]
 800e828:	4313      	orrs	r3, r2
 800e82a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e82c:	683b      	ldr	r3, [r7, #0]
 800e82e:	699b      	ldr	r3, [r3, #24]
 800e830:	693a      	ldr	r2, [r7, #16]
 800e832:	4313      	orrs	r3, r2
 800e834:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	693a      	ldr	r2, [r7, #16]
 800e83a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	68fa      	ldr	r2, [r7, #12]
 800e840:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e842:	683b      	ldr	r3, [r7, #0]
 800e844:	685a      	ldr	r2, [r3, #4]
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	697a      	ldr	r2, [r7, #20]
 800e84e:	621a      	str	r2, [r3, #32]
}
 800e850:	bf00      	nop
 800e852:	371c      	adds	r7, #28
 800e854:	46bd      	mov	sp, r7
 800e856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e85a:	4770      	bx	lr
 800e85c:	40010000 	.word	0x40010000
 800e860:	40010400 	.word	0x40010400

0800e864 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e864:	b480      	push	{r7}
 800e866:	b087      	sub	sp, #28
 800e868:	af00      	add	r7, sp, #0
 800e86a:	6078      	str	r0, [r7, #4]
 800e86c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	6a1b      	ldr	r3, [r3, #32]
 800e872:	f023 0210 	bic.w	r2, r3, #16
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	6a1b      	ldr	r3, [r3, #32]
 800e87e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	685b      	ldr	r3, [r3, #4]
 800e884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	699b      	ldr	r3, [r3, #24]
 800e88a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e89a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e89c:	683b      	ldr	r3, [r7, #0]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	021b      	lsls	r3, r3, #8
 800e8a2:	68fa      	ldr	r2, [r7, #12]
 800e8a4:	4313      	orrs	r3, r2
 800e8a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e8a8:	697b      	ldr	r3, [r7, #20]
 800e8aa:	f023 0320 	bic.w	r3, r3, #32
 800e8ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	689b      	ldr	r3, [r3, #8]
 800e8b4:	011b      	lsls	r3, r3, #4
 800e8b6:	697a      	ldr	r2, [r7, #20]
 800e8b8:	4313      	orrs	r3, r2
 800e8ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	4a22      	ldr	r2, [pc, #136]	; (800e948 <TIM_OC2_SetConfig+0xe4>)
 800e8c0:	4293      	cmp	r3, r2
 800e8c2:	d003      	beq.n	800e8cc <TIM_OC2_SetConfig+0x68>
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	4a21      	ldr	r2, [pc, #132]	; (800e94c <TIM_OC2_SetConfig+0xe8>)
 800e8c8:	4293      	cmp	r3, r2
 800e8ca:	d10d      	bne.n	800e8e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e8cc:	697b      	ldr	r3, [r7, #20]
 800e8ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e8d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e8d4:	683b      	ldr	r3, [r7, #0]
 800e8d6:	68db      	ldr	r3, [r3, #12]
 800e8d8:	011b      	lsls	r3, r3, #4
 800e8da:	697a      	ldr	r2, [r7, #20]
 800e8dc:	4313      	orrs	r3, r2
 800e8de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e8e0:	697b      	ldr	r3, [r7, #20]
 800e8e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e8e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	4a17      	ldr	r2, [pc, #92]	; (800e948 <TIM_OC2_SetConfig+0xe4>)
 800e8ec:	4293      	cmp	r3, r2
 800e8ee:	d003      	beq.n	800e8f8 <TIM_OC2_SetConfig+0x94>
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	4a16      	ldr	r2, [pc, #88]	; (800e94c <TIM_OC2_SetConfig+0xe8>)
 800e8f4:	4293      	cmp	r3, r2
 800e8f6:	d113      	bne.n	800e920 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e8f8:	693b      	ldr	r3, [r7, #16]
 800e8fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e8fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e900:	693b      	ldr	r3, [r7, #16]
 800e902:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e906:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e908:	683b      	ldr	r3, [r7, #0]
 800e90a:	695b      	ldr	r3, [r3, #20]
 800e90c:	009b      	lsls	r3, r3, #2
 800e90e:	693a      	ldr	r2, [r7, #16]
 800e910:	4313      	orrs	r3, r2
 800e912:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e914:	683b      	ldr	r3, [r7, #0]
 800e916:	699b      	ldr	r3, [r3, #24]
 800e918:	009b      	lsls	r3, r3, #2
 800e91a:	693a      	ldr	r2, [r7, #16]
 800e91c:	4313      	orrs	r3, r2
 800e91e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	693a      	ldr	r2, [r7, #16]
 800e924:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	68fa      	ldr	r2, [r7, #12]
 800e92a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e92c:	683b      	ldr	r3, [r7, #0]
 800e92e:	685a      	ldr	r2, [r3, #4]
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	697a      	ldr	r2, [r7, #20]
 800e938:	621a      	str	r2, [r3, #32]
}
 800e93a:	bf00      	nop
 800e93c:	371c      	adds	r7, #28
 800e93e:	46bd      	mov	sp, r7
 800e940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e944:	4770      	bx	lr
 800e946:	bf00      	nop
 800e948:	40010000 	.word	0x40010000
 800e94c:	40010400 	.word	0x40010400

0800e950 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e950:	b480      	push	{r7}
 800e952:	b087      	sub	sp, #28
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
 800e958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	6a1b      	ldr	r3, [r3, #32]
 800e95e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	6a1b      	ldr	r3, [r3, #32]
 800e96a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	685b      	ldr	r3, [r3, #4]
 800e970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	69db      	ldr	r3, [r3, #28]
 800e976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e97e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	f023 0303 	bic.w	r3, r3, #3
 800e986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e988:	683b      	ldr	r3, [r7, #0]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	68fa      	ldr	r2, [r7, #12]
 800e98e:	4313      	orrs	r3, r2
 800e990:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e992:	697b      	ldr	r3, [r7, #20]
 800e994:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e998:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e99a:	683b      	ldr	r3, [r7, #0]
 800e99c:	689b      	ldr	r3, [r3, #8]
 800e99e:	021b      	lsls	r3, r3, #8
 800e9a0:	697a      	ldr	r2, [r7, #20]
 800e9a2:	4313      	orrs	r3, r2
 800e9a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	4a21      	ldr	r2, [pc, #132]	; (800ea30 <TIM_OC3_SetConfig+0xe0>)
 800e9aa:	4293      	cmp	r3, r2
 800e9ac:	d003      	beq.n	800e9b6 <TIM_OC3_SetConfig+0x66>
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	4a20      	ldr	r2, [pc, #128]	; (800ea34 <TIM_OC3_SetConfig+0xe4>)
 800e9b2:	4293      	cmp	r3, r2
 800e9b4:	d10d      	bne.n	800e9d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e9b6:	697b      	ldr	r3, [r7, #20]
 800e9b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e9bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e9be:	683b      	ldr	r3, [r7, #0]
 800e9c0:	68db      	ldr	r3, [r3, #12]
 800e9c2:	021b      	lsls	r3, r3, #8
 800e9c4:	697a      	ldr	r2, [r7, #20]
 800e9c6:	4313      	orrs	r3, r2
 800e9c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e9ca:	697b      	ldr	r3, [r7, #20]
 800e9cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e9d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	4a16      	ldr	r2, [pc, #88]	; (800ea30 <TIM_OC3_SetConfig+0xe0>)
 800e9d6:	4293      	cmp	r3, r2
 800e9d8:	d003      	beq.n	800e9e2 <TIM_OC3_SetConfig+0x92>
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	4a15      	ldr	r2, [pc, #84]	; (800ea34 <TIM_OC3_SetConfig+0xe4>)
 800e9de:	4293      	cmp	r3, r2
 800e9e0:	d113      	bne.n	800ea0a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e9e2:	693b      	ldr	r3, [r7, #16]
 800e9e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e9e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e9ea:	693b      	ldr	r3, [r7, #16]
 800e9ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e9f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e9f2:	683b      	ldr	r3, [r7, #0]
 800e9f4:	695b      	ldr	r3, [r3, #20]
 800e9f6:	011b      	lsls	r3, r3, #4
 800e9f8:	693a      	ldr	r2, [r7, #16]
 800e9fa:	4313      	orrs	r3, r2
 800e9fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e9fe:	683b      	ldr	r3, [r7, #0]
 800ea00:	699b      	ldr	r3, [r3, #24]
 800ea02:	011b      	lsls	r3, r3, #4
 800ea04:	693a      	ldr	r2, [r7, #16]
 800ea06:	4313      	orrs	r3, r2
 800ea08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	693a      	ldr	r2, [r7, #16]
 800ea0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	68fa      	ldr	r2, [r7, #12]
 800ea14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ea16:	683b      	ldr	r3, [r7, #0]
 800ea18:	685a      	ldr	r2, [r3, #4]
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	697a      	ldr	r2, [r7, #20]
 800ea22:	621a      	str	r2, [r3, #32]
}
 800ea24:	bf00      	nop
 800ea26:	371c      	adds	r7, #28
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2e:	4770      	bx	lr
 800ea30:	40010000 	.word	0x40010000
 800ea34:	40010400 	.word	0x40010400

0800ea38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ea38:	b480      	push	{r7}
 800ea3a:	b087      	sub	sp, #28
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
 800ea40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	6a1b      	ldr	r3, [r3, #32]
 800ea46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	6a1b      	ldr	r3, [r3, #32]
 800ea52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	685b      	ldr	r3, [r3, #4]
 800ea58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	69db      	ldr	r3, [r3, #28]
 800ea5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ea66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ea6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ea70:	683b      	ldr	r3, [r7, #0]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	021b      	lsls	r3, r3, #8
 800ea76:	68fa      	ldr	r2, [r7, #12]
 800ea78:	4313      	orrs	r3, r2
 800ea7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ea7c:	693b      	ldr	r3, [r7, #16]
 800ea7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ea82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ea84:	683b      	ldr	r3, [r7, #0]
 800ea86:	689b      	ldr	r3, [r3, #8]
 800ea88:	031b      	lsls	r3, r3, #12
 800ea8a:	693a      	ldr	r2, [r7, #16]
 800ea8c:	4313      	orrs	r3, r2
 800ea8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	4a12      	ldr	r2, [pc, #72]	; (800eadc <TIM_OC4_SetConfig+0xa4>)
 800ea94:	4293      	cmp	r3, r2
 800ea96:	d003      	beq.n	800eaa0 <TIM_OC4_SetConfig+0x68>
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	4a11      	ldr	r2, [pc, #68]	; (800eae0 <TIM_OC4_SetConfig+0xa8>)
 800ea9c:	4293      	cmp	r3, r2
 800ea9e:	d109      	bne.n	800eab4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800eaa0:	697b      	ldr	r3, [r7, #20]
 800eaa2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800eaa6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800eaa8:	683b      	ldr	r3, [r7, #0]
 800eaaa:	695b      	ldr	r3, [r3, #20]
 800eaac:	019b      	lsls	r3, r3, #6
 800eaae:	697a      	ldr	r2, [r7, #20]
 800eab0:	4313      	orrs	r3, r2
 800eab2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	697a      	ldr	r2, [r7, #20]
 800eab8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	68fa      	ldr	r2, [r7, #12]
 800eabe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800eac0:	683b      	ldr	r3, [r7, #0]
 800eac2:	685a      	ldr	r2, [r3, #4]
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	693a      	ldr	r2, [r7, #16]
 800eacc:	621a      	str	r2, [r3, #32]
}
 800eace:	bf00      	nop
 800ead0:	371c      	adds	r7, #28
 800ead2:	46bd      	mov	sp, r7
 800ead4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead8:	4770      	bx	lr
 800eada:	bf00      	nop
 800eadc:	40010000 	.word	0x40010000
 800eae0:	40010400 	.word	0x40010400

0800eae4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800eae4:	b480      	push	{r7}
 800eae6:	b087      	sub	sp, #28
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	60f8      	str	r0, [r7, #12]
 800eaec:	60b9      	str	r1, [r7, #8]
 800eaee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800eaf0:	68bb      	ldr	r3, [r7, #8]
 800eaf2:	f003 031f 	and.w	r3, r3, #31
 800eaf6:	2201      	movs	r2, #1
 800eaf8:	fa02 f303 	lsl.w	r3, r2, r3
 800eafc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	6a1a      	ldr	r2, [r3, #32]
 800eb02:	697b      	ldr	r3, [r7, #20]
 800eb04:	43db      	mvns	r3, r3
 800eb06:	401a      	ands	r2, r3
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	6a1a      	ldr	r2, [r3, #32]
 800eb10:	68bb      	ldr	r3, [r7, #8]
 800eb12:	f003 031f 	and.w	r3, r3, #31
 800eb16:	6879      	ldr	r1, [r7, #4]
 800eb18:	fa01 f303 	lsl.w	r3, r1, r3
 800eb1c:	431a      	orrs	r2, r3
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	621a      	str	r2, [r3, #32]
}
 800eb22:	bf00      	nop
 800eb24:	371c      	adds	r7, #28
 800eb26:	46bd      	mov	sp, r7
 800eb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2c:	4770      	bx	lr
	...

0800eb30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800eb30:	b480      	push	{r7}
 800eb32:	b085      	sub	sp, #20
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]
 800eb38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eb40:	2b01      	cmp	r3, #1
 800eb42:	d101      	bne.n	800eb48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800eb44:	2302      	movs	r3, #2
 800eb46:	e05a      	b.n	800ebfe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	2201      	movs	r2, #1
 800eb4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	2202      	movs	r2, #2
 800eb54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	685b      	ldr	r3, [r3, #4]
 800eb5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	689b      	ldr	r3, [r3, #8]
 800eb66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eb6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	68fa      	ldr	r2, [r7, #12]
 800eb76:	4313      	orrs	r3, r2
 800eb78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	68fa      	ldr	r2, [r7, #12]
 800eb80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	4a21      	ldr	r2, [pc, #132]	; (800ec0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800eb88:	4293      	cmp	r3, r2
 800eb8a:	d022      	beq.n	800ebd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eb94:	d01d      	beq.n	800ebd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	4a1d      	ldr	r2, [pc, #116]	; (800ec10 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800eb9c:	4293      	cmp	r3, r2
 800eb9e:	d018      	beq.n	800ebd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	4a1b      	ldr	r2, [pc, #108]	; (800ec14 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800eba6:	4293      	cmp	r3, r2
 800eba8:	d013      	beq.n	800ebd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	4a1a      	ldr	r2, [pc, #104]	; (800ec18 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ebb0:	4293      	cmp	r3, r2
 800ebb2:	d00e      	beq.n	800ebd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	4a18      	ldr	r2, [pc, #96]	; (800ec1c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ebba:	4293      	cmp	r3, r2
 800ebbc:	d009      	beq.n	800ebd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	4a17      	ldr	r2, [pc, #92]	; (800ec20 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ebc4:	4293      	cmp	r3, r2
 800ebc6:	d004      	beq.n	800ebd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	4a15      	ldr	r2, [pc, #84]	; (800ec24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ebce:	4293      	cmp	r3, r2
 800ebd0:	d10c      	bne.n	800ebec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ebd2:	68bb      	ldr	r3, [r7, #8]
 800ebd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ebd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ebda:	683b      	ldr	r3, [r7, #0]
 800ebdc:	685b      	ldr	r3, [r3, #4]
 800ebde:	68ba      	ldr	r2, [r7, #8]
 800ebe0:	4313      	orrs	r3, r2
 800ebe2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	68ba      	ldr	r2, [r7, #8]
 800ebea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	2201      	movs	r2, #1
 800ebf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ebfc:	2300      	movs	r3, #0
}
 800ebfe:	4618      	mov	r0, r3
 800ec00:	3714      	adds	r7, #20
 800ec02:	46bd      	mov	sp, r7
 800ec04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec08:	4770      	bx	lr
 800ec0a:	bf00      	nop
 800ec0c:	40010000 	.word	0x40010000
 800ec10:	40000400 	.word	0x40000400
 800ec14:	40000800 	.word	0x40000800
 800ec18:	40000c00 	.word	0x40000c00
 800ec1c:	40010400 	.word	0x40010400
 800ec20:	40014000 	.word	0x40014000
 800ec24:	40001800 	.word	0x40001800

0800ec28 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ec28:	b480      	push	{r7}
 800ec2a:	b085      	sub	sp, #20
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
 800ec30:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ec32:	2300      	movs	r3, #0
 800ec34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ec3c:	2b01      	cmp	r3, #1
 800ec3e:	d101      	bne.n	800ec44 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ec40:	2302      	movs	r3, #2
 800ec42:	e03d      	b.n	800ecc0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	2201      	movs	r2, #1
 800ec48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ec52:	683b      	ldr	r3, [r7, #0]
 800ec54:	68db      	ldr	r3, [r3, #12]
 800ec56:	4313      	orrs	r3, r2
 800ec58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ec60:	683b      	ldr	r3, [r7, #0]
 800ec62:	689b      	ldr	r3, [r3, #8]
 800ec64:	4313      	orrs	r3, r2
 800ec66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ec6e:	683b      	ldr	r3, [r7, #0]
 800ec70:	685b      	ldr	r3, [r3, #4]
 800ec72:	4313      	orrs	r3, r2
 800ec74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ec7c:	683b      	ldr	r3, [r7, #0]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	4313      	orrs	r3, r2
 800ec82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ec8a:	683b      	ldr	r3, [r7, #0]
 800ec8c:	691b      	ldr	r3, [r3, #16]
 800ec8e:	4313      	orrs	r3, r2
 800ec90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ec98:	683b      	ldr	r3, [r7, #0]
 800ec9a:	695b      	ldr	r3, [r3, #20]
 800ec9c:	4313      	orrs	r3, r2
 800ec9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800eca6:	683b      	ldr	r3, [r7, #0]
 800eca8:	69db      	ldr	r3, [r3, #28]
 800ecaa:	4313      	orrs	r3, r2
 800ecac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	68fa      	ldr	r2, [r7, #12]
 800ecb4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	2200      	movs	r2, #0
 800ecba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ecbe:	2300      	movs	r3, #0
}
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	3714      	adds	r7, #20
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecca:	4770      	bx	lr

0800eccc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800eccc:	b480      	push	{r7}
 800ecce:	b083      	sub	sp, #12
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ecd4:	bf00      	nop
 800ecd6:	370c      	adds	r7, #12
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecde:	4770      	bx	lr

0800ece0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ece0:	b480      	push	{r7}
 800ece2:	b083      	sub	sp, #12
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ece8:	bf00      	nop
 800ecea:	370c      	adds	r7, #12
 800ecec:	46bd      	mov	sp, r7
 800ecee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf2:	4770      	bx	lr

0800ecf4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	b082      	sub	sp, #8
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d101      	bne.n	800ed06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ed02:	2301      	movs	r3, #1
 800ed04:	e03f      	b.n	800ed86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ed0c:	b2db      	uxtb	r3, r3
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d106      	bne.n	800ed20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	2200      	movs	r2, #0
 800ed16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ed1a:	6878      	ldr	r0, [r7, #4]
 800ed1c:	f7f8 f8b8 	bl	8006e90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	2224      	movs	r2, #36	; 0x24
 800ed24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	68da      	ldr	r2, [r3, #12]
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ed36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ed38:	6878      	ldr	r0, [r7, #4]
 800ed3a:	f000 f829 	bl	800ed90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	691a      	ldr	r2, [r3, #16]
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ed4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	695a      	ldr	r2, [r3, #20]
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ed5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	68da      	ldr	r2, [r3, #12]
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ed6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	2200      	movs	r2, #0
 800ed72:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	2220      	movs	r2, #32
 800ed78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	2220      	movs	r2, #32
 800ed80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800ed84:	2300      	movs	r3, #0
}
 800ed86:	4618      	mov	r0, r3
 800ed88:	3708      	adds	r7, #8
 800ed8a:	46bd      	mov	sp, r7
 800ed8c:	bd80      	pop	{r7, pc}
	...

0800ed90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ed90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed94:	b085      	sub	sp, #20
 800ed96:	af00      	add	r7, sp, #0
 800ed98:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	691b      	ldr	r3, [r3, #16]
 800eda0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	68da      	ldr	r2, [r3, #12]
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	430a      	orrs	r2, r1
 800edae:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	689a      	ldr	r2, [r3, #8]
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	691b      	ldr	r3, [r3, #16]
 800edb8:	431a      	orrs	r2, r3
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	695b      	ldr	r3, [r3, #20]
 800edbe:	431a      	orrs	r2, r3
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	69db      	ldr	r3, [r3, #28]
 800edc4:	4313      	orrs	r3, r2
 800edc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	68db      	ldr	r3, [r3, #12]
 800edce:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800edd2:	f023 030c 	bic.w	r3, r3, #12
 800edd6:	687a      	ldr	r2, [r7, #4]
 800edd8:	6812      	ldr	r2, [r2, #0]
 800edda:	68f9      	ldr	r1, [r7, #12]
 800eddc:	430b      	orrs	r3, r1
 800edde:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	695b      	ldr	r3, [r3, #20]
 800ede6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	699a      	ldr	r2, [r3, #24]
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	430a      	orrs	r2, r1
 800edf4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	69db      	ldr	r3, [r3, #28]
 800edfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800edfe:	f040 818b 	bne.w	800f118 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	4ac1      	ldr	r2, [pc, #772]	; (800f10c <UART_SetConfig+0x37c>)
 800ee08:	4293      	cmp	r3, r2
 800ee0a:	d005      	beq.n	800ee18 <UART_SetConfig+0x88>
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	4abf      	ldr	r2, [pc, #764]	; (800f110 <UART_SetConfig+0x380>)
 800ee12:	4293      	cmp	r3, r2
 800ee14:	f040 80bd 	bne.w	800ef92 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ee18:	f7fc fbcc 	bl	800b5b4 <HAL_RCC_GetPCLK2Freq>
 800ee1c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ee1e:	68bb      	ldr	r3, [r7, #8]
 800ee20:	461d      	mov	r5, r3
 800ee22:	f04f 0600 	mov.w	r6, #0
 800ee26:	46a8      	mov	r8, r5
 800ee28:	46b1      	mov	r9, r6
 800ee2a:	eb18 0308 	adds.w	r3, r8, r8
 800ee2e:	eb49 0409 	adc.w	r4, r9, r9
 800ee32:	4698      	mov	r8, r3
 800ee34:	46a1      	mov	r9, r4
 800ee36:	eb18 0805 	adds.w	r8, r8, r5
 800ee3a:	eb49 0906 	adc.w	r9, r9, r6
 800ee3e:	f04f 0100 	mov.w	r1, #0
 800ee42:	f04f 0200 	mov.w	r2, #0
 800ee46:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ee4a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ee4e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ee52:	4688      	mov	r8, r1
 800ee54:	4691      	mov	r9, r2
 800ee56:	eb18 0005 	adds.w	r0, r8, r5
 800ee5a:	eb49 0106 	adc.w	r1, r9, r6
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	685b      	ldr	r3, [r3, #4]
 800ee62:	461d      	mov	r5, r3
 800ee64:	f04f 0600 	mov.w	r6, #0
 800ee68:	196b      	adds	r3, r5, r5
 800ee6a:	eb46 0406 	adc.w	r4, r6, r6
 800ee6e:	461a      	mov	r2, r3
 800ee70:	4623      	mov	r3, r4
 800ee72:	f7f1 ff21 	bl	8000cb8 <__aeabi_uldivmod>
 800ee76:	4603      	mov	r3, r0
 800ee78:	460c      	mov	r4, r1
 800ee7a:	461a      	mov	r2, r3
 800ee7c:	4ba5      	ldr	r3, [pc, #660]	; (800f114 <UART_SetConfig+0x384>)
 800ee7e:	fba3 2302 	umull	r2, r3, r3, r2
 800ee82:	095b      	lsrs	r3, r3, #5
 800ee84:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ee88:	68bb      	ldr	r3, [r7, #8]
 800ee8a:	461d      	mov	r5, r3
 800ee8c:	f04f 0600 	mov.w	r6, #0
 800ee90:	46a9      	mov	r9, r5
 800ee92:	46b2      	mov	sl, r6
 800ee94:	eb19 0309 	adds.w	r3, r9, r9
 800ee98:	eb4a 040a 	adc.w	r4, sl, sl
 800ee9c:	4699      	mov	r9, r3
 800ee9e:	46a2      	mov	sl, r4
 800eea0:	eb19 0905 	adds.w	r9, r9, r5
 800eea4:	eb4a 0a06 	adc.w	sl, sl, r6
 800eea8:	f04f 0100 	mov.w	r1, #0
 800eeac:	f04f 0200 	mov.w	r2, #0
 800eeb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800eeb4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800eeb8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800eebc:	4689      	mov	r9, r1
 800eebe:	4692      	mov	sl, r2
 800eec0:	eb19 0005 	adds.w	r0, r9, r5
 800eec4:	eb4a 0106 	adc.w	r1, sl, r6
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	685b      	ldr	r3, [r3, #4]
 800eecc:	461d      	mov	r5, r3
 800eece:	f04f 0600 	mov.w	r6, #0
 800eed2:	196b      	adds	r3, r5, r5
 800eed4:	eb46 0406 	adc.w	r4, r6, r6
 800eed8:	461a      	mov	r2, r3
 800eeda:	4623      	mov	r3, r4
 800eedc:	f7f1 feec 	bl	8000cb8 <__aeabi_uldivmod>
 800eee0:	4603      	mov	r3, r0
 800eee2:	460c      	mov	r4, r1
 800eee4:	461a      	mov	r2, r3
 800eee6:	4b8b      	ldr	r3, [pc, #556]	; (800f114 <UART_SetConfig+0x384>)
 800eee8:	fba3 1302 	umull	r1, r3, r3, r2
 800eeec:	095b      	lsrs	r3, r3, #5
 800eeee:	2164      	movs	r1, #100	; 0x64
 800eef0:	fb01 f303 	mul.w	r3, r1, r3
 800eef4:	1ad3      	subs	r3, r2, r3
 800eef6:	00db      	lsls	r3, r3, #3
 800eef8:	3332      	adds	r3, #50	; 0x32
 800eefa:	4a86      	ldr	r2, [pc, #536]	; (800f114 <UART_SetConfig+0x384>)
 800eefc:	fba2 2303 	umull	r2, r3, r2, r3
 800ef00:	095b      	lsrs	r3, r3, #5
 800ef02:	005b      	lsls	r3, r3, #1
 800ef04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ef08:	4498      	add	r8, r3
 800ef0a:	68bb      	ldr	r3, [r7, #8]
 800ef0c:	461d      	mov	r5, r3
 800ef0e:	f04f 0600 	mov.w	r6, #0
 800ef12:	46a9      	mov	r9, r5
 800ef14:	46b2      	mov	sl, r6
 800ef16:	eb19 0309 	adds.w	r3, r9, r9
 800ef1a:	eb4a 040a 	adc.w	r4, sl, sl
 800ef1e:	4699      	mov	r9, r3
 800ef20:	46a2      	mov	sl, r4
 800ef22:	eb19 0905 	adds.w	r9, r9, r5
 800ef26:	eb4a 0a06 	adc.w	sl, sl, r6
 800ef2a:	f04f 0100 	mov.w	r1, #0
 800ef2e:	f04f 0200 	mov.w	r2, #0
 800ef32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ef36:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ef3a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ef3e:	4689      	mov	r9, r1
 800ef40:	4692      	mov	sl, r2
 800ef42:	eb19 0005 	adds.w	r0, r9, r5
 800ef46:	eb4a 0106 	adc.w	r1, sl, r6
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	685b      	ldr	r3, [r3, #4]
 800ef4e:	461d      	mov	r5, r3
 800ef50:	f04f 0600 	mov.w	r6, #0
 800ef54:	196b      	adds	r3, r5, r5
 800ef56:	eb46 0406 	adc.w	r4, r6, r6
 800ef5a:	461a      	mov	r2, r3
 800ef5c:	4623      	mov	r3, r4
 800ef5e:	f7f1 feab 	bl	8000cb8 <__aeabi_uldivmod>
 800ef62:	4603      	mov	r3, r0
 800ef64:	460c      	mov	r4, r1
 800ef66:	461a      	mov	r2, r3
 800ef68:	4b6a      	ldr	r3, [pc, #424]	; (800f114 <UART_SetConfig+0x384>)
 800ef6a:	fba3 1302 	umull	r1, r3, r3, r2
 800ef6e:	095b      	lsrs	r3, r3, #5
 800ef70:	2164      	movs	r1, #100	; 0x64
 800ef72:	fb01 f303 	mul.w	r3, r1, r3
 800ef76:	1ad3      	subs	r3, r2, r3
 800ef78:	00db      	lsls	r3, r3, #3
 800ef7a:	3332      	adds	r3, #50	; 0x32
 800ef7c:	4a65      	ldr	r2, [pc, #404]	; (800f114 <UART_SetConfig+0x384>)
 800ef7e:	fba2 2303 	umull	r2, r3, r2, r3
 800ef82:	095b      	lsrs	r3, r3, #5
 800ef84:	f003 0207 	and.w	r2, r3, #7
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	4442      	add	r2, r8
 800ef8e:	609a      	str	r2, [r3, #8]
 800ef90:	e26f      	b.n	800f472 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ef92:	f7fc fafb 	bl	800b58c <HAL_RCC_GetPCLK1Freq>
 800ef96:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ef98:	68bb      	ldr	r3, [r7, #8]
 800ef9a:	461d      	mov	r5, r3
 800ef9c:	f04f 0600 	mov.w	r6, #0
 800efa0:	46a8      	mov	r8, r5
 800efa2:	46b1      	mov	r9, r6
 800efa4:	eb18 0308 	adds.w	r3, r8, r8
 800efa8:	eb49 0409 	adc.w	r4, r9, r9
 800efac:	4698      	mov	r8, r3
 800efae:	46a1      	mov	r9, r4
 800efb0:	eb18 0805 	adds.w	r8, r8, r5
 800efb4:	eb49 0906 	adc.w	r9, r9, r6
 800efb8:	f04f 0100 	mov.w	r1, #0
 800efbc:	f04f 0200 	mov.w	r2, #0
 800efc0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800efc4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800efc8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800efcc:	4688      	mov	r8, r1
 800efce:	4691      	mov	r9, r2
 800efd0:	eb18 0005 	adds.w	r0, r8, r5
 800efd4:	eb49 0106 	adc.w	r1, r9, r6
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	685b      	ldr	r3, [r3, #4]
 800efdc:	461d      	mov	r5, r3
 800efde:	f04f 0600 	mov.w	r6, #0
 800efe2:	196b      	adds	r3, r5, r5
 800efe4:	eb46 0406 	adc.w	r4, r6, r6
 800efe8:	461a      	mov	r2, r3
 800efea:	4623      	mov	r3, r4
 800efec:	f7f1 fe64 	bl	8000cb8 <__aeabi_uldivmod>
 800eff0:	4603      	mov	r3, r0
 800eff2:	460c      	mov	r4, r1
 800eff4:	461a      	mov	r2, r3
 800eff6:	4b47      	ldr	r3, [pc, #284]	; (800f114 <UART_SetConfig+0x384>)
 800eff8:	fba3 2302 	umull	r2, r3, r3, r2
 800effc:	095b      	lsrs	r3, r3, #5
 800effe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f002:	68bb      	ldr	r3, [r7, #8]
 800f004:	461d      	mov	r5, r3
 800f006:	f04f 0600 	mov.w	r6, #0
 800f00a:	46a9      	mov	r9, r5
 800f00c:	46b2      	mov	sl, r6
 800f00e:	eb19 0309 	adds.w	r3, r9, r9
 800f012:	eb4a 040a 	adc.w	r4, sl, sl
 800f016:	4699      	mov	r9, r3
 800f018:	46a2      	mov	sl, r4
 800f01a:	eb19 0905 	adds.w	r9, r9, r5
 800f01e:	eb4a 0a06 	adc.w	sl, sl, r6
 800f022:	f04f 0100 	mov.w	r1, #0
 800f026:	f04f 0200 	mov.w	r2, #0
 800f02a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f02e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f032:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f036:	4689      	mov	r9, r1
 800f038:	4692      	mov	sl, r2
 800f03a:	eb19 0005 	adds.w	r0, r9, r5
 800f03e:	eb4a 0106 	adc.w	r1, sl, r6
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	685b      	ldr	r3, [r3, #4]
 800f046:	461d      	mov	r5, r3
 800f048:	f04f 0600 	mov.w	r6, #0
 800f04c:	196b      	adds	r3, r5, r5
 800f04e:	eb46 0406 	adc.w	r4, r6, r6
 800f052:	461a      	mov	r2, r3
 800f054:	4623      	mov	r3, r4
 800f056:	f7f1 fe2f 	bl	8000cb8 <__aeabi_uldivmod>
 800f05a:	4603      	mov	r3, r0
 800f05c:	460c      	mov	r4, r1
 800f05e:	461a      	mov	r2, r3
 800f060:	4b2c      	ldr	r3, [pc, #176]	; (800f114 <UART_SetConfig+0x384>)
 800f062:	fba3 1302 	umull	r1, r3, r3, r2
 800f066:	095b      	lsrs	r3, r3, #5
 800f068:	2164      	movs	r1, #100	; 0x64
 800f06a:	fb01 f303 	mul.w	r3, r1, r3
 800f06e:	1ad3      	subs	r3, r2, r3
 800f070:	00db      	lsls	r3, r3, #3
 800f072:	3332      	adds	r3, #50	; 0x32
 800f074:	4a27      	ldr	r2, [pc, #156]	; (800f114 <UART_SetConfig+0x384>)
 800f076:	fba2 2303 	umull	r2, r3, r2, r3
 800f07a:	095b      	lsrs	r3, r3, #5
 800f07c:	005b      	lsls	r3, r3, #1
 800f07e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f082:	4498      	add	r8, r3
 800f084:	68bb      	ldr	r3, [r7, #8]
 800f086:	461d      	mov	r5, r3
 800f088:	f04f 0600 	mov.w	r6, #0
 800f08c:	46a9      	mov	r9, r5
 800f08e:	46b2      	mov	sl, r6
 800f090:	eb19 0309 	adds.w	r3, r9, r9
 800f094:	eb4a 040a 	adc.w	r4, sl, sl
 800f098:	4699      	mov	r9, r3
 800f09a:	46a2      	mov	sl, r4
 800f09c:	eb19 0905 	adds.w	r9, r9, r5
 800f0a0:	eb4a 0a06 	adc.w	sl, sl, r6
 800f0a4:	f04f 0100 	mov.w	r1, #0
 800f0a8:	f04f 0200 	mov.w	r2, #0
 800f0ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f0b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f0b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f0b8:	4689      	mov	r9, r1
 800f0ba:	4692      	mov	sl, r2
 800f0bc:	eb19 0005 	adds.w	r0, r9, r5
 800f0c0:	eb4a 0106 	adc.w	r1, sl, r6
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	685b      	ldr	r3, [r3, #4]
 800f0c8:	461d      	mov	r5, r3
 800f0ca:	f04f 0600 	mov.w	r6, #0
 800f0ce:	196b      	adds	r3, r5, r5
 800f0d0:	eb46 0406 	adc.w	r4, r6, r6
 800f0d4:	461a      	mov	r2, r3
 800f0d6:	4623      	mov	r3, r4
 800f0d8:	f7f1 fdee 	bl	8000cb8 <__aeabi_uldivmod>
 800f0dc:	4603      	mov	r3, r0
 800f0de:	460c      	mov	r4, r1
 800f0e0:	461a      	mov	r2, r3
 800f0e2:	4b0c      	ldr	r3, [pc, #48]	; (800f114 <UART_SetConfig+0x384>)
 800f0e4:	fba3 1302 	umull	r1, r3, r3, r2
 800f0e8:	095b      	lsrs	r3, r3, #5
 800f0ea:	2164      	movs	r1, #100	; 0x64
 800f0ec:	fb01 f303 	mul.w	r3, r1, r3
 800f0f0:	1ad3      	subs	r3, r2, r3
 800f0f2:	00db      	lsls	r3, r3, #3
 800f0f4:	3332      	adds	r3, #50	; 0x32
 800f0f6:	4a07      	ldr	r2, [pc, #28]	; (800f114 <UART_SetConfig+0x384>)
 800f0f8:	fba2 2303 	umull	r2, r3, r2, r3
 800f0fc:	095b      	lsrs	r3, r3, #5
 800f0fe:	f003 0207 	and.w	r2, r3, #7
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	4442      	add	r2, r8
 800f108:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800f10a:	e1b2      	b.n	800f472 <UART_SetConfig+0x6e2>
 800f10c:	40011000 	.word	0x40011000
 800f110:	40011400 	.word	0x40011400
 800f114:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	4ad7      	ldr	r2, [pc, #860]	; (800f47c <UART_SetConfig+0x6ec>)
 800f11e:	4293      	cmp	r3, r2
 800f120:	d005      	beq.n	800f12e <UART_SetConfig+0x39e>
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	4ad6      	ldr	r2, [pc, #856]	; (800f480 <UART_SetConfig+0x6f0>)
 800f128:	4293      	cmp	r3, r2
 800f12a:	f040 80d1 	bne.w	800f2d0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800f12e:	f7fc fa41 	bl	800b5b4 <HAL_RCC_GetPCLK2Freq>
 800f132:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f134:	68bb      	ldr	r3, [r7, #8]
 800f136:	469a      	mov	sl, r3
 800f138:	f04f 0b00 	mov.w	fp, #0
 800f13c:	46d0      	mov	r8, sl
 800f13e:	46d9      	mov	r9, fp
 800f140:	eb18 0308 	adds.w	r3, r8, r8
 800f144:	eb49 0409 	adc.w	r4, r9, r9
 800f148:	4698      	mov	r8, r3
 800f14a:	46a1      	mov	r9, r4
 800f14c:	eb18 080a 	adds.w	r8, r8, sl
 800f150:	eb49 090b 	adc.w	r9, r9, fp
 800f154:	f04f 0100 	mov.w	r1, #0
 800f158:	f04f 0200 	mov.w	r2, #0
 800f15c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f160:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f164:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f168:	4688      	mov	r8, r1
 800f16a:	4691      	mov	r9, r2
 800f16c:	eb1a 0508 	adds.w	r5, sl, r8
 800f170:	eb4b 0609 	adc.w	r6, fp, r9
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	685b      	ldr	r3, [r3, #4]
 800f178:	4619      	mov	r1, r3
 800f17a:	f04f 0200 	mov.w	r2, #0
 800f17e:	f04f 0300 	mov.w	r3, #0
 800f182:	f04f 0400 	mov.w	r4, #0
 800f186:	0094      	lsls	r4, r2, #2
 800f188:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f18c:	008b      	lsls	r3, r1, #2
 800f18e:	461a      	mov	r2, r3
 800f190:	4623      	mov	r3, r4
 800f192:	4628      	mov	r0, r5
 800f194:	4631      	mov	r1, r6
 800f196:	f7f1 fd8f 	bl	8000cb8 <__aeabi_uldivmod>
 800f19a:	4603      	mov	r3, r0
 800f19c:	460c      	mov	r4, r1
 800f19e:	461a      	mov	r2, r3
 800f1a0:	4bb8      	ldr	r3, [pc, #736]	; (800f484 <UART_SetConfig+0x6f4>)
 800f1a2:	fba3 2302 	umull	r2, r3, r3, r2
 800f1a6:	095b      	lsrs	r3, r3, #5
 800f1a8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f1ac:	68bb      	ldr	r3, [r7, #8]
 800f1ae:	469b      	mov	fp, r3
 800f1b0:	f04f 0c00 	mov.w	ip, #0
 800f1b4:	46d9      	mov	r9, fp
 800f1b6:	46e2      	mov	sl, ip
 800f1b8:	eb19 0309 	adds.w	r3, r9, r9
 800f1bc:	eb4a 040a 	adc.w	r4, sl, sl
 800f1c0:	4699      	mov	r9, r3
 800f1c2:	46a2      	mov	sl, r4
 800f1c4:	eb19 090b 	adds.w	r9, r9, fp
 800f1c8:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f1cc:	f04f 0100 	mov.w	r1, #0
 800f1d0:	f04f 0200 	mov.w	r2, #0
 800f1d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f1d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f1dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f1e0:	4689      	mov	r9, r1
 800f1e2:	4692      	mov	sl, r2
 800f1e4:	eb1b 0509 	adds.w	r5, fp, r9
 800f1e8:	eb4c 060a 	adc.w	r6, ip, sl
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	685b      	ldr	r3, [r3, #4]
 800f1f0:	4619      	mov	r1, r3
 800f1f2:	f04f 0200 	mov.w	r2, #0
 800f1f6:	f04f 0300 	mov.w	r3, #0
 800f1fa:	f04f 0400 	mov.w	r4, #0
 800f1fe:	0094      	lsls	r4, r2, #2
 800f200:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f204:	008b      	lsls	r3, r1, #2
 800f206:	461a      	mov	r2, r3
 800f208:	4623      	mov	r3, r4
 800f20a:	4628      	mov	r0, r5
 800f20c:	4631      	mov	r1, r6
 800f20e:	f7f1 fd53 	bl	8000cb8 <__aeabi_uldivmod>
 800f212:	4603      	mov	r3, r0
 800f214:	460c      	mov	r4, r1
 800f216:	461a      	mov	r2, r3
 800f218:	4b9a      	ldr	r3, [pc, #616]	; (800f484 <UART_SetConfig+0x6f4>)
 800f21a:	fba3 1302 	umull	r1, r3, r3, r2
 800f21e:	095b      	lsrs	r3, r3, #5
 800f220:	2164      	movs	r1, #100	; 0x64
 800f222:	fb01 f303 	mul.w	r3, r1, r3
 800f226:	1ad3      	subs	r3, r2, r3
 800f228:	011b      	lsls	r3, r3, #4
 800f22a:	3332      	adds	r3, #50	; 0x32
 800f22c:	4a95      	ldr	r2, [pc, #596]	; (800f484 <UART_SetConfig+0x6f4>)
 800f22e:	fba2 2303 	umull	r2, r3, r2, r3
 800f232:	095b      	lsrs	r3, r3, #5
 800f234:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f238:	4498      	add	r8, r3
 800f23a:	68bb      	ldr	r3, [r7, #8]
 800f23c:	469b      	mov	fp, r3
 800f23e:	f04f 0c00 	mov.w	ip, #0
 800f242:	46d9      	mov	r9, fp
 800f244:	46e2      	mov	sl, ip
 800f246:	eb19 0309 	adds.w	r3, r9, r9
 800f24a:	eb4a 040a 	adc.w	r4, sl, sl
 800f24e:	4699      	mov	r9, r3
 800f250:	46a2      	mov	sl, r4
 800f252:	eb19 090b 	adds.w	r9, r9, fp
 800f256:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f25a:	f04f 0100 	mov.w	r1, #0
 800f25e:	f04f 0200 	mov.w	r2, #0
 800f262:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f266:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f26a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f26e:	4689      	mov	r9, r1
 800f270:	4692      	mov	sl, r2
 800f272:	eb1b 0509 	adds.w	r5, fp, r9
 800f276:	eb4c 060a 	adc.w	r6, ip, sl
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	685b      	ldr	r3, [r3, #4]
 800f27e:	4619      	mov	r1, r3
 800f280:	f04f 0200 	mov.w	r2, #0
 800f284:	f04f 0300 	mov.w	r3, #0
 800f288:	f04f 0400 	mov.w	r4, #0
 800f28c:	0094      	lsls	r4, r2, #2
 800f28e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f292:	008b      	lsls	r3, r1, #2
 800f294:	461a      	mov	r2, r3
 800f296:	4623      	mov	r3, r4
 800f298:	4628      	mov	r0, r5
 800f29a:	4631      	mov	r1, r6
 800f29c:	f7f1 fd0c 	bl	8000cb8 <__aeabi_uldivmod>
 800f2a0:	4603      	mov	r3, r0
 800f2a2:	460c      	mov	r4, r1
 800f2a4:	461a      	mov	r2, r3
 800f2a6:	4b77      	ldr	r3, [pc, #476]	; (800f484 <UART_SetConfig+0x6f4>)
 800f2a8:	fba3 1302 	umull	r1, r3, r3, r2
 800f2ac:	095b      	lsrs	r3, r3, #5
 800f2ae:	2164      	movs	r1, #100	; 0x64
 800f2b0:	fb01 f303 	mul.w	r3, r1, r3
 800f2b4:	1ad3      	subs	r3, r2, r3
 800f2b6:	011b      	lsls	r3, r3, #4
 800f2b8:	3332      	adds	r3, #50	; 0x32
 800f2ba:	4a72      	ldr	r2, [pc, #456]	; (800f484 <UART_SetConfig+0x6f4>)
 800f2bc:	fba2 2303 	umull	r2, r3, r2, r3
 800f2c0:	095b      	lsrs	r3, r3, #5
 800f2c2:	f003 020f 	and.w	r2, r3, #15
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	4442      	add	r2, r8
 800f2cc:	609a      	str	r2, [r3, #8]
 800f2ce:	e0d0      	b.n	800f472 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800f2d0:	f7fc f95c 	bl	800b58c <HAL_RCC_GetPCLK1Freq>
 800f2d4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f2d6:	68bb      	ldr	r3, [r7, #8]
 800f2d8:	469a      	mov	sl, r3
 800f2da:	f04f 0b00 	mov.w	fp, #0
 800f2de:	46d0      	mov	r8, sl
 800f2e0:	46d9      	mov	r9, fp
 800f2e2:	eb18 0308 	adds.w	r3, r8, r8
 800f2e6:	eb49 0409 	adc.w	r4, r9, r9
 800f2ea:	4698      	mov	r8, r3
 800f2ec:	46a1      	mov	r9, r4
 800f2ee:	eb18 080a 	adds.w	r8, r8, sl
 800f2f2:	eb49 090b 	adc.w	r9, r9, fp
 800f2f6:	f04f 0100 	mov.w	r1, #0
 800f2fa:	f04f 0200 	mov.w	r2, #0
 800f2fe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f302:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f306:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f30a:	4688      	mov	r8, r1
 800f30c:	4691      	mov	r9, r2
 800f30e:	eb1a 0508 	adds.w	r5, sl, r8
 800f312:	eb4b 0609 	adc.w	r6, fp, r9
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	685b      	ldr	r3, [r3, #4]
 800f31a:	4619      	mov	r1, r3
 800f31c:	f04f 0200 	mov.w	r2, #0
 800f320:	f04f 0300 	mov.w	r3, #0
 800f324:	f04f 0400 	mov.w	r4, #0
 800f328:	0094      	lsls	r4, r2, #2
 800f32a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f32e:	008b      	lsls	r3, r1, #2
 800f330:	461a      	mov	r2, r3
 800f332:	4623      	mov	r3, r4
 800f334:	4628      	mov	r0, r5
 800f336:	4631      	mov	r1, r6
 800f338:	f7f1 fcbe 	bl	8000cb8 <__aeabi_uldivmod>
 800f33c:	4603      	mov	r3, r0
 800f33e:	460c      	mov	r4, r1
 800f340:	461a      	mov	r2, r3
 800f342:	4b50      	ldr	r3, [pc, #320]	; (800f484 <UART_SetConfig+0x6f4>)
 800f344:	fba3 2302 	umull	r2, r3, r3, r2
 800f348:	095b      	lsrs	r3, r3, #5
 800f34a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f34e:	68bb      	ldr	r3, [r7, #8]
 800f350:	469b      	mov	fp, r3
 800f352:	f04f 0c00 	mov.w	ip, #0
 800f356:	46d9      	mov	r9, fp
 800f358:	46e2      	mov	sl, ip
 800f35a:	eb19 0309 	adds.w	r3, r9, r9
 800f35e:	eb4a 040a 	adc.w	r4, sl, sl
 800f362:	4699      	mov	r9, r3
 800f364:	46a2      	mov	sl, r4
 800f366:	eb19 090b 	adds.w	r9, r9, fp
 800f36a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f36e:	f04f 0100 	mov.w	r1, #0
 800f372:	f04f 0200 	mov.w	r2, #0
 800f376:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f37a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f37e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f382:	4689      	mov	r9, r1
 800f384:	4692      	mov	sl, r2
 800f386:	eb1b 0509 	adds.w	r5, fp, r9
 800f38a:	eb4c 060a 	adc.w	r6, ip, sl
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	685b      	ldr	r3, [r3, #4]
 800f392:	4619      	mov	r1, r3
 800f394:	f04f 0200 	mov.w	r2, #0
 800f398:	f04f 0300 	mov.w	r3, #0
 800f39c:	f04f 0400 	mov.w	r4, #0
 800f3a0:	0094      	lsls	r4, r2, #2
 800f3a2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f3a6:	008b      	lsls	r3, r1, #2
 800f3a8:	461a      	mov	r2, r3
 800f3aa:	4623      	mov	r3, r4
 800f3ac:	4628      	mov	r0, r5
 800f3ae:	4631      	mov	r1, r6
 800f3b0:	f7f1 fc82 	bl	8000cb8 <__aeabi_uldivmod>
 800f3b4:	4603      	mov	r3, r0
 800f3b6:	460c      	mov	r4, r1
 800f3b8:	461a      	mov	r2, r3
 800f3ba:	4b32      	ldr	r3, [pc, #200]	; (800f484 <UART_SetConfig+0x6f4>)
 800f3bc:	fba3 1302 	umull	r1, r3, r3, r2
 800f3c0:	095b      	lsrs	r3, r3, #5
 800f3c2:	2164      	movs	r1, #100	; 0x64
 800f3c4:	fb01 f303 	mul.w	r3, r1, r3
 800f3c8:	1ad3      	subs	r3, r2, r3
 800f3ca:	011b      	lsls	r3, r3, #4
 800f3cc:	3332      	adds	r3, #50	; 0x32
 800f3ce:	4a2d      	ldr	r2, [pc, #180]	; (800f484 <UART_SetConfig+0x6f4>)
 800f3d0:	fba2 2303 	umull	r2, r3, r2, r3
 800f3d4:	095b      	lsrs	r3, r3, #5
 800f3d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f3da:	4498      	add	r8, r3
 800f3dc:	68bb      	ldr	r3, [r7, #8]
 800f3de:	469b      	mov	fp, r3
 800f3e0:	f04f 0c00 	mov.w	ip, #0
 800f3e4:	46d9      	mov	r9, fp
 800f3e6:	46e2      	mov	sl, ip
 800f3e8:	eb19 0309 	adds.w	r3, r9, r9
 800f3ec:	eb4a 040a 	adc.w	r4, sl, sl
 800f3f0:	4699      	mov	r9, r3
 800f3f2:	46a2      	mov	sl, r4
 800f3f4:	eb19 090b 	adds.w	r9, r9, fp
 800f3f8:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f3fc:	f04f 0100 	mov.w	r1, #0
 800f400:	f04f 0200 	mov.w	r2, #0
 800f404:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f408:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f40c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f410:	4689      	mov	r9, r1
 800f412:	4692      	mov	sl, r2
 800f414:	eb1b 0509 	adds.w	r5, fp, r9
 800f418:	eb4c 060a 	adc.w	r6, ip, sl
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	685b      	ldr	r3, [r3, #4]
 800f420:	4619      	mov	r1, r3
 800f422:	f04f 0200 	mov.w	r2, #0
 800f426:	f04f 0300 	mov.w	r3, #0
 800f42a:	f04f 0400 	mov.w	r4, #0
 800f42e:	0094      	lsls	r4, r2, #2
 800f430:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f434:	008b      	lsls	r3, r1, #2
 800f436:	461a      	mov	r2, r3
 800f438:	4623      	mov	r3, r4
 800f43a:	4628      	mov	r0, r5
 800f43c:	4631      	mov	r1, r6
 800f43e:	f7f1 fc3b 	bl	8000cb8 <__aeabi_uldivmod>
 800f442:	4603      	mov	r3, r0
 800f444:	460c      	mov	r4, r1
 800f446:	461a      	mov	r2, r3
 800f448:	4b0e      	ldr	r3, [pc, #56]	; (800f484 <UART_SetConfig+0x6f4>)
 800f44a:	fba3 1302 	umull	r1, r3, r3, r2
 800f44e:	095b      	lsrs	r3, r3, #5
 800f450:	2164      	movs	r1, #100	; 0x64
 800f452:	fb01 f303 	mul.w	r3, r1, r3
 800f456:	1ad3      	subs	r3, r2, r3
 800f458:	011b      	lsls	r3, r3, #4
 800f45a:	3332      	adds	r3, #50	; 0x32
 800f45c:	4a09      	ldr	r2, [pc, #36]	; (800f484 <UART_SetConfig+0x6f4>)
 800f45e:	fba2 2303 	umull	r2, r3, r2, r3
 800f462:	095b      	lsrs	r3, r3, #5
 800f464:	f003 020f 	and.w	r2, r3, #15
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	4442      	add	r2, r8
 800f46e:	609a      	str	r2, [r3, #8]
}
 800f470:	e7ff      	b.n	800f472 <UART_SetConfig+0x6e2>
 800f472:	bf00      	nop
 800f474:	3714      	adds	r7, #20
 800f476:	46bd      	mov	sp, r7
 800f478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f47c:	40011000 	.word	0x40011000
 800f480:	40011400 	.word	0x40011400
 800f484:	51eb851f 	.word	0x51eb851f

0800f488 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800f488:	b084      	sub	sp, #16
 800f48a:	b480      	push	{r7}
 800f48c:	b085      	sub	sp, #20
 800f48e:	af00      	add	r7, sp, #0
 800f490:	6078      	str	r0, [r7, #4]
 800f492:	f107 001c 	add.w	r0, r7, #28
 800f496:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800f49a:	2300      	movs	r3, #0
 800f49c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800f49e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800f4a0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800f4a2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800f4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800f4a6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800f4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800f4aa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800f4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800f4ae:	431a      	orrs	r2, r3
             Init.ClockDiv
 800f4b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800f4b2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800f4b4:	68fa      	ldr	r2, [r7, #12]
 800f4b6:	4313      	orrs	r3, r2
 800f4b8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	685b      	ldr	r3, [r3, #4]
 800f4be:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800f4c2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f4c6:	68fa      	ldr	r2, [r7, #12]
 800f4c8:	431a      	orrs	r2, r3
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800f4ce:	2300      	movs	r3, #0
}
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	3714      	adds	r7, #20
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4da:	b004      	add	sp, #16
 800f4dc:	4770      	bx	lr

0800f4de <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800f4de:	b480      	push	{r7}
 800f4e0:	b083      	sub	sp, #12
 800f4e2:	af00      	add	r7, sp, #0
 800f4e4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	370c      	adds	r7, #12
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f6:	4770      	bx	lr

0800f4f8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800f4f8:	b480      	push	{r7}
 800f4fa:	b083      	sub	sp, #12
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	6078      	str	r0, [r7, #4]
 800f500:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800f502:	683b      	ldr	r3, [r7, #0]
 800f504:	681a      	ldr	r2, [r3, #0]
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f50c:	2300      	movs	r3, #0
}
 800f50e:	4618      	mov	r0, r3
 800f510:	370c      	adds	r7, #12
 800f512:	46bd      	mov	sp, r7
 800f514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f518:	4770      	bx	lr

0800f51a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800f51a:	b580      	push	{r7, lr}
 800f51c:	b082      	sub	sp, #8
 800f51e:	af00      	add	r7, sp, #0
 800f520:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	2203      	movs	r2, #3
 800f526:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800f528:	2002      	movs	r0, #2
 800f52a:	f7f9 fbdd 	bl	8008ce8 <HAL_Delay>
  
  return HAL_OK;
 800f52e:	2300      	movs	r3, #0
}
 800f530:	4618      	mov	r0, r3
 800f532:	3708      	adds	r7, #8
 800f534:	46bd      	mov	sp, r7
 800f536:	bd80      	pop	{r7, pc}

0800f538 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800f538:	b480      	push	{r7}
 800f53a:	b083      	sub	sp, #12
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	f003 0303 	and.w	r3, r3, #3
}
 800f548:	4618      	mov	r0, r3
 800f54a:	370c      	adds	r7, #12
 800f54c:	46bd      	mov	sp, r7
 800f54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f552:	4770      	bx	lr

0800f554 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800f554:	b480      	push	{r7}
 800f556:	b085      	sub	sp, #20
 800f558:	af00      	add	r7, sp, #0
 800f55a:	6078      	str	r0, [r7, #4]
 800f55c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f55e:	2300      	movs	r3, #0
 800f560:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800f562:	683b      	ldr	r3, [r7, #0]
 800f564:	681a      	ldr	r2, [r3, #0]
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f56a:	683b      	ldr	r3, [r7, #0]
 800f56c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800f56e:	683b      	ldr	r3, [r7, #0]
 800f570:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f572:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800f574:	683b      	ldr	r3, [r7, #0]
 800f576:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800f578:	431a      	orrs	r2, r3
                       Command->CPSM);
 800f57a:	683b      	ldr	r3, [r7, #0]
 800f57c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800f57e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f580:	68fa      	ldr	r2, [r7, #12]
 800f582:	4313      	orrs	r3, r2
 800f584:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	68db      	ldr	r3, [r3, #12]
 800f58a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800f58e:	f023 030f 	bic.w	r3, r3, #15
 800f592:	68fa      	ldr	r2, [r7, #12]
 800f594:	431a      	orrs	r2, r3
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800f59a:	2300      	movs	r3, #0
}
 800f59c:	4618      	mov	r0, r3
 800f59e:	3714      	adds	r7, #20
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a6:	4770      	bx	lr

0800f5a8 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800f5a8:	b480      	push	{r7}
 800f5aa:	b083      	sub	sp, #12
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	691b      	ldr	r3, [r3, #16]
 800f5b4:	b2db      	uxtb	r3, r3
}
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	370c      	adds	r7, #12
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c0:	4770      	bx	lr

0800f5c2 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800f5c2:	b480      	push	{r7}
 800f5c4:	b085      	sub	sp, #20
 800f5c6:	af00      	add	r7, sp, #0
 800f5c8:	6078      	str	r0, [r7, #4]
 800f5ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	3314      	adds	r3, #20
 800f5d0:	461a      	mov	r2, r3
 800f5d2:	683b      	ldr	r3, [r7, #0]
 800f5d4:	4413      	add	r3, r2
 800f5d6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	681b      	ldr	r3, [r3, #0]
}  
 800f5dc:	4618      	mov	r0, r3
 800f5de:	3714      	adds	r7, #20
 800f5e0:	46bd      	mov	sp, r7
 800f5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e6:	4770      	bx	lr

0800f5e8 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800f5e8:	b480      	push	{r7}
 800f5ea:	b085      	sub	sp, #20
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	6078      	str	r0, [r7, #4]
 800f5f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f5f2:	2300      	movs	r3, #0
 800f5f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800f5f6:	683b      	ldr	r3, [r7, #0]
 800f5f8:	681a      	ldr	r2, [r3, #0]
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800f5fe:	683b      	ldr	r3, [r7, #0]
 800f600:	685a      	ldr	r2, [r3, #4]
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f606:	683b      	ldr	r3, [r7, #0]
 800f608:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800f60a:	683b      	ldr	r3, [r7, #0]
 800f60c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f60e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800f610:	683b      	ldr	r3, [r7, #0]
 800f612:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800f614:	431a      	orrs	r2, r3
                       Data->DPSM);
 800f616:	683b      	ldr	r3, [r7, #0]
 800f618:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800f61a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f61c:	68fa      	ldr	r2, [r7, #12]
 800f61e:	4313      	orrs	r3, r2
 800f620:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f626:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	431a      	orrs	r2, r3
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800f632:	2300      	movs	r3, #0

}
 800f634:	4618      	mov	r0, r3
 800f636:	3714      	adds	r7, #20
 800f638:	46bd      	mov	sp, r7
 800f63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f63e:	4770      	bx	lr

0800f640 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800f640:	b580      	push	{r7, lr}
 800f642:	b088      	sub	sp, #32
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
 800f648:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800f64a:	683b      	ldr	r3, [r7, #0]
 800f64c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800f64e:	2310      	movs	r3, #16
 800f650:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f652:	2340      	movs	r3, #64	; 0x40
 800f654:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f656:	2300      	movs	r3, #0
 800f658:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f65a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f65e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f660:	f107 0308 	add.w	r3, r7, #8
 800f664:	4619      	mov	r1, r3
 800f666:	6878      	ldr	r0, [r7, #4]
 800f668:	f7ff ff74 	bl	800f554 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800f66c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f670:	2110      	movs	r1, #16
 800f672:	6878      	ldr	r0, [r7, #4]
 800f674:	f000 fa40 	bl	800faf8 <SDMMC_GetCmdResp1>
 800f678:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f67a:	69fb      	ldr	r3, [r7, #28]
}
 800f67c:	4618      	mov	r0, r3
 800f67e:	3720      	adds	r7, #32
 800f680:	46bd      	mov	sp, r7
 800f682:	bd80      	pop	{r7, pc}

0800f684 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800f684:	b580      	push	{r7, lr}
 800f686:	b088      	sub	sp, #32
 800f688:	af00      	add	r7, sp, #0
 800f68a:	6078      	str	r0, [r7, #4]
 800f68c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f68e:	683b      	ldr	r3, [r7, #0]
 800f690:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800f692:	2311      	movs	r3, #17
 800f694:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f696:	2340      	movs	r3, #64	; 0x40
 800f698:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f69a:	2300      	movs	r3, #0
 800f69c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f69e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f6a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f6a4:	f107 0308 	add.w	r3, r7, #8
 800f6a8:	4619      	mov	r1, r3
 800f6aa:	6878      	ldr	r0, [r7, #4]
 800f6ac:	f7ff ff52 	bl	800f554 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800f6b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800f6b4:	2111      	movs	r1, #17
 800f6b6:	6878      	ldr	r0, [r7, #4]
 800f6b8:	f000 fa1e 	bl	800faf8 <SDMMC_GetCmdResp1>
 800f6bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f6be:	69fb      	ldr	r3, [r7, #28]
}
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	3720      	adds	r7, #32
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	bd80      	pop	{r7, pc}

0800f6c8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800f6c8:	b580      	push	{r7, lr}
 800f6ca:	b088      	sub	sp, #32
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	6078      	str	r0, [r7, #4]
 800f6d0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f6d2:	683b      	ldr	r3, [r7, #0]
 800f6d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800f6d6:	2312      	movs	r3, #18
 800f6d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f6da:	2340      	movs	r3, #64	; 0x40
 800f6dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f6de:	2300      	movs	r3, #0
 800f6e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f6e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f6e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f6e8:	f107 0308 	add.w	r3, r7, #8
 800f6ec:	4619      	mov	r1, r3
 800f6ee:	6878      	ldr	r0, [r7, #4]
 800f6f0:	f7ff ff30 	bl	800f554 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800f6f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800f6f8:	2112      	movs	r1, #18
 800f6fa:	6878      	ldr	r0, [r7, #4]
 800f6fc:	f000 f9fc 	bl	800faf8 <SDMMC_GetCmdResp1>
 800f700:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f702:	69fb      	ldr	r3, [r7, #28]
}
 800f704:	4618      	mov	r0, r3
 800f706:	3720      	adds	r7, #32
 800f708:	46bd      	mov	sp, r7
 800f70a:	bd80      	pop	{r7, pc}

0800f70c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800f70c:	b580      	push	{r7, lr}
 800f70e:	b088      	sub	sp, #32
 800f710:	af00      	add	r7, sp, #0
 800f712:	6078      	str	r0, [r7, #4]
 800f714:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f716:	683b      	ldr	r3, [r7, #0]
 800f718:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800f71a:	2318      	movs	r3, #24
 800f71c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f71e:	2340      	movs	r3, #64	; 0x40
 800f720:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f722:	2300      	movs	r3, #0
 800f724:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f726:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f72a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f72c:	f107 0308 	add.w	r3, r7, #8
 800f730:	4619      	mov	r1, r3
 800f732:	6878      	ldr	r0, [r7, #4]
 800f734:	f7ff ff0e 	bl	800f554 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800f738:	f241 3288 	movw	r2, #5000	; 0x1388
 800f73c:	2118      	movs	r1, #24
 800f73e:	6878      	ldr	r0, [r7, #4]
 800f740:	f000 f9da 	bl	800faf8 <SDMMC_GetCmdResp1>
 800f744:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f746:	69fb      	ldr	r3, [r7, #28]
}
 800f748:	4618      	mov	r0, r3
 800f74a:	3720      	adds	r7, #32
 800f74c:	46bd      	mov	sp, r7
 800f74e:	bd80      	pop	{r7, pc}

0800f750 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800f750:	b580      	push	{r7, lr}
 800f752:	b088      	sub	sp, #32
 800f754:	af00      	add	r7, sp, #0
 800f756:	6078      	str	r0, [r7, #4]
 800f758:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f75a:	683b      	ldr	r3, [r7, #0]
 800f75c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800f75e:	2319      	movs	r3, #25
 800f760:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f762:	2340      	movs	r3, #64	; 0x40
 800f764:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f766:	2300      	movs	r3, #0
 800f768:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f76a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f76e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f770:	f107 0308 	add.w	r3, r7, #8
 800f774:	4619      	mov	r1, r3
 800f776:	6878      	ldr	r0, [r7, #4]
 800f778:	f7ff feec 	bl	800f554 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800f77c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f780:	2119      	movs	r1, #25
 800f782:	6878      	ldr	r0, [r7, #4]
 800f784:	f000 f9b8 	bl	800faf8 <SDMMC_GetCmdResp1>
 800f788:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f78a:	69fb      	ldr	r3, [r7, #28]
}
 800f78c:	4618      	mov	r0, r3
 800f78e:	3720      	adds	r7, #32
 800f790:	46bd      	mov	sp, r7
 800f792:	bd80      	pop	{r7, pc}

0800f794 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800f794:	b580      	push	{r7, lr}
 800f796:	b088      	sub	sp, #32
 800f798:	af00      	add	r7, sp, #0
 800f79a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800f79c:	2300      	movs	r3, #0
 800f79e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800f7a0:	230c      	movs	r3, #12
 800f7a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f7a4:	2340      	movs	r3, #64	; 0x40
 800f7a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f7a8:	2300      	movs	r3, #0
 800f7aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f7ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f7b0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f7b2:	f107 0308 	add.w	r3, r7, #8
 800f7b6:	4619      	mov	r1, r3
 800f7b8:	6878      	ldr	r0, [r7, #4]
 800f7ba:	f7ff fecb 	bl	800f554 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800f7be:	4a05      	ldr	r2, [pc, #20]	; (800f7d4 <SDMMC_CmdStopTransfer+0x40>)
 800f7c0:	210c      	movs	r1, #12
 800f7c2:	6878      	ldr	r0, [r7, #4]
 800f7c4:	f000 f998 	bl	800faf8 <SDMMC_GetCmdResp1>
 800f7c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f7ca:	69fb      	ldr	r3, [r7, #28]
}
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	3720      	adds	r7, #32
 800f7d0:	46bd      	mov	sp, r7
 800f7d2:	bd80      	pop	{r7, pc}
 800f7d4:	05f5e100 	.word	0x05f5e100

0800f7d8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b08a      	sub	sp, #40	; 0x28
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	60f8      	str	r0, [r7, #12]
 800f7e0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800f7e4:	683b      	ldr	r3, [r7, #0]
 800f7e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800f7e8:	2307      	movs	r3, #7
 800f7ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f7ec:	2340      	movs	r3, #64	; 0x40
 800f7ee:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f7f0:	2300      	movs	r3, #0
 800f7f2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f7f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f7f8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f7fa:	f107 0310 	add.w	r3, r7, #16
 800f7fe:	4619      	mov	r1, r3
 800f800:	68f8      	ldr	r0, [r7, #12]
 800f802:	f7ff fea7 	bl	800f554 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800f806:	f241 3288 	movw	r2, #5000	; 0x1388
 800f80a:	2107      	movs	r1, #7
 800f80c:	68f8      	ldr	r0, [r7, #12]
 800f80e:	f000 f973 	bl	800faf8 <SDMMC_GetCmdResp1>
 800f812:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800f814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f816:	4618      	mov	r0, r3
 800f818:	3728      	adds	r7, #40	; 0x28
 800f81a:	46bd      	mov	sp, r7
 800f81c:	bd80      	pop	{r7, pc}

0800f81e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800f81e:	b580      	push	{r7, lr}
 800f820:	b088      	sub	sp, #32
 800f822:	af00      	add	r7, sp, #0
 800f824:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800f826:	2300      	movs	r3, #0
 800f828:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800f82a:	2300      	movs	r3, #0
 800f82c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800f82e:	2300      	movs	r3, #0
 800f830:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f832:	2300      	movs	r3, #0
 800f834:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f836:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f83a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f83c:	f107 0308 	add.w	r3, r7, #8
 800f840:	4619      	mov	r1, r3
 800f842:	6878      	ldr	r0, [r7, #4]
 800f844:	f7ff fe86 	bl	800f554 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800f848:	6878      	ldr	r0, [r7, #4]
 800f84a:	f000 f92d 	bl	800faa8 <SDMMC_GetCmdError>
 800f84e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f850:	69fb      	ldr	r3, [r7, #28]
}
 800f852:	4618      	mov	r0, r3
 800f854:	3720      	adds	r7, #32
 800f856:	46bd      	mov	sp, r7
 800f858:	bd80      	pop	{r7, pc}

0800f85a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800f85a:	b580      	push	{r7, lr}
 800f85c:	b088      	sub	sp, #32
 800f85e:	af00      	add	r7, sp, #0
 800f860:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800f862:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800f866:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800f868:	2308      	movs	r3, #8
 800f86a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f86c:	2340      	movs	r3, #64	; 0x40
 800f86e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f870:	2300      	movs	r3, #0
 800f872:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f874:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f878:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f87a:	f107 0308 	add.w	r3, r7, #8
 800f87e:	4619      	mov	r1, r3
 800f880:	6878      	ldr	r0, [r7, #4]
 800f882:	f7ff fe67 	bl	800f554 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800f886:	6878      	ldr	r0, [r7, #4]
 800f888:	f000 fb16 	bl	800feb8 <SDMMC_GetCmdResp7>
 800f88c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f88e:	69fb      	ldr	r3, [r7, #28]
}
 800f890:	4618      	mov	r0, r3
 800f892:	3720      	adds	r7, #32
 800f894:	46bd      	mov	sp, r7
 800f896:	bd80      	pop	{r7, pc}

0800f898 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800f898:	b580      	push	{r7, lr}
 800f89a:	b088      	sub	sp, #32
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
 800f8a0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800f8a2:	683b      	ldr	r3, [r7, #0]
 800f8a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800f8a6:	2337      	movs	r3, #55	; 0x37
 800f8a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f8aa:	2340      	movs	r3, #64	; 0x40
 800f8ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f8b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f8b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f8b8:	f107 0308 	add.w	r3, r7, #8
 800f8bc:	4619      	mov	r1, r3
 800f8be:	6878      	ldr	r0, [r7, #4]
 800f8c0:	f7ff fe48 	bl	800f554 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800f8c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800f8c8:	2137      	movs	r1, #55	; 0x37
 800f8ca:	6878      	ldr	r0, [r7, #4]
 800f8cc:	f000 f914 	bl	800faf8 <SDMMC_GetCmdResp1>
 800f8d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f8d2:	69fb      	ldr	r3, [r7, #28]
}
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	3720      	adds	r7, #32
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	bd80      	pop	{r7, pc}

0800f8dc <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b088      	sub	sp, #32
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	6078      	str	r0, [r7, #4]
 800f8e4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800f8e6:	683b      	ldr	r3, [r7, #0]
 800f8e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f8ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f8f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800f8f2:	2329      	movs	r3, #41	; 0x29
 800f8f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f8f6:	2340      	movs	r3, #64	; 0x40
 800f8f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f8fa:	2300      	movs	r3, #0
 800f8fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f8fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f902:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f904:	f107 0308 	add.w	r3, r7, #8
 800f908:	4619      	mov	r1, r3
 800f90a:	6878      	ldr	r0, [r7, #4]
 800f90c:	f7ff fe22 	bl	800f554 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800f910:	6878      	ldr	r0, [r7, #4]
 800f912:	f000 fa23 	bl	800fd5c <SDMMC_GetCmdResp3>
 800f916:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f918:	69fb      	ldr	r3, [r7, #28]
}
 800f91a:	4618      	mov	r0, r3
 800f91c:	3720      	adds	r7, #32
 800f91e:	46bd      	mov	sp, r7
 800f920:	bd80      	pop	{r7, pc}

0800f922 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800f922:	b580      	push	{r7, lr}
 800f924:	b088      	sub	sp, #32
 800f926:	af00      	add	r7, sp, #0
 800f928:	6078      	str	r0, [r7, #4]
 800f92a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800f92c:	683b      	ldr	r3, [r7, #0]
 800f92e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800f930:	2306      	movs	r3, #6
 800f932:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f934:	2340      	movs	r3, #64	; 0x40
 800f936:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f938:	2300      	movs	r3, #0
 800f93a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f93c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f940:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f942:	f107 0308 	add.w	r3, r7, #8
 800f946:	4619      	mov	r1, r3
 800f948:	6878      	ldr	r0, [r7, #4]
 800f94a:	f7ff fe03 	bl	800f554 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800f94e:	f241 3288 	movw	r2, #5000	; 0x1388
 800f952:	2106      	movs	r1, #6
 800f954:	6878      	ldr	r0, [r7, #4]
 800f956:	f000 f8cf 	bl	800faf8 <SDMMC_GetCmdResp1>
 800f95a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f95c:	69fb      	ldr	r3, [r7, #28]
}
 800f95e:	4618      	mov	r0, r3
 800f960:	3720      	adds	r7, #32
 800f962:	46bd      	mov	sp, r7
 800f964:	bd80      	pop	{r7, pc}

0800f966 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800f966:	b580      	push	{r7, lr}
 800f968:	b088      	sub	sp, #32
 800f96a:	af00      	add	r7, sp, #0
 800f96c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800f96e:	2300      	movs	r3, #0
 800f970:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800f972:	2333      	movs	r3, #51	; 0x33
 800f974:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f976:	2340      	movs	r3, #64	; 0x40
 800f978:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f97a:	2300      	movs	r3, #0
 800f97c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f97e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f982:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f984:	f107 0308 	add.w	r3, r7, #8
 800f988:	4619      	mov	r1, r3
 800f98a:	6878      	ldr	r0, [r7, #4]
 800f98c:	f7ff fde2 	bl	800f554 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800f990:	f241 3288 	movw	r2, #5000	; 0x1388
 800f994:	2133      	movs	r1, #51	; 0x33
 800f996:	6878      	ldr	r0, [r7, #4]
 800f998:	f000 f8ae 	bl	800faf8 <SDMMC_GetCmdResp1>
 800f99c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f99e:	69fb      	ldr	r3, [r7, #28]
}
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	3720      	adds	r7, #32
 800f9a4:	46bd      	mov	sp, r7
 800f9a6:	bd80      	pop	{r7, pc}

0800f9a8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b088      	sub	sp, #32
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800f9b4:	2302      	movs	r3, #2
 800f9b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800f9b8:	23c0      	movs	r3, #192	; 0xc0
 800f9ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f9bc:	2300      	movs	r3, #0
 800f9be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f9c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f9c4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f9c6:	f107 0308 	add.w	r3, r7, #8
 800f9ca:	4619      	mov	r1, r3
 800f9cc:	6878      	ldr	r0, [r7, #4]
 800f9ce:	f7ff fdc1 	bl	800f554 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800f9d2:	6878      	ldr	r0, [r7, #4]
 800f9d4:	f000 f97c 	bl	800fcd0 <SDMMC_GetCmdResp2>
 800f9d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f9da:	69fb      	ldr	r3, [r7, #28]
}
 800f9dc:	4618      	mov	r0, r3
 800f9de:	3720      	adds	r7, #32
 800f9e0:	46bd      	mov	sp, r7
 800f9e2:	bd80      	pop	{r7, pc}

0800f9e4 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800f9e4:	b580      	push	{r7, lr}
 800f9e6:	b088      	sub	sp, #32
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]
 800f9ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800f9ee:	683b      	ldr	r3, [r7, #0]
 800f9f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800f9f2:	2309      	movs	r3, #9
 800f9f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800f9f6:	23c0      	movs	r3, #192	; 0xc0
 800f9f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f9fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fa02:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800fa04:	f107 0308 	add.w	r3, r7, #8
 800fa08:	4619      	mov	r1, r3
 800fa0a:	6878      	ldr	r0, [r7, #4]
 800fa0c:	f7ff fda2 	bl	800f554 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800fa10:	6878      	ldr	r0, [r7, #4]
 800fa12:	f000 f95d 	bl	800fcd0 <SDMMC_GetCmdResp2>
 800fa16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fa18:	69fb      	ldr	r3, [r7, #28]
}
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	3720      	adds	r7, #32
 800fa1e:	46bd      	mov	sp, r7
 800fa20:	bd80      	pop	{r7, pc}

0800fa22 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800fa22:	b580      	push	{r7, lr}
 800fa24:	b088      	sub	sp, #32
 800fa26:	af00      	add	r7, sp, #0
 800fa28:	6078      	str	r0, [r7, #4]
 800fa2a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800fa30:	2303      	movs	r3, #3
 800fa32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800fa34:	2340      	movs	r3, #64	; 0x40
 800fa36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800fa38:	2300      	movs	r3, #0
 800fa3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800fa3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fa40:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800fa42:	f107 0308 	add.w	r3, r7, #8
 800fa46:	4619      	mov	r1, r3
 800fa48:	6878      	ldr	r0, [r7, #4]
 800fa4a:	f7ff fd83 	bl	800f554 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800fa4e:	683a      	ldr	r2, [r7, #0]
 800fa50:	2103      	movs	r1, #3
 800fa52:	6878      	ldr	r0, [r7, #4]
 800fa54:	f000 f9bc 	bl	800fdd0 <SDMMC_GetCmdResp6>
 800fa58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fa5a:	69fb      	ldr	r3, [r7, #28]
}
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	3720      	adds	r7, #32
 800fa60:	46bd      	mov	sp, r7
 800fa62:	bd80      	pop	{r7, pc}

0800fa64 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800fa64:	b580      	push	{r7, lr}
 800fa66:	b088      	sub	sp, #32
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	6078      	str	r0, [r7, #4]
 800fa6c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800fa6e:	683b      	ldr	r3, [r7, #0]
 800fa70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800fa72:	230d      	movs	r3, #13
 800fa74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800fa76:	2340      	movs	r3, #64	; 0x40
 800fa78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800fa7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fa82:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800fa84:	f107 0308 	add.w	r3, r7, #8
 800fa88:	4619      	mov	r1, r3
 800fa8a:	6878      	ldr	r0, [r7, #4]
 800fa8c:	f7ff fd62 	bl	800f554 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800fa90:	f241 3288 	movw	r2, #5000	; 0x1388
 800fa94:	210d      	movs	r1, #13
 800fa96:	6878      	ldr	r0, [r7, #4]
 800fa98:	f000 f82e 	bl	800faf8 <SDMMC_GetCmdResp1>
 800fa9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fa9e:	69fb      	ldr	r3, [r7, #28]
}
 800faa0:	4618      	mov	r0, r3
 800faa2:	3720      	adds	r7, #32
 800faa4:	46bd      	mov	sp, r7
 800faa6:	bd80      	pop	{r7, pc}

0800faa8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800faa8:	b490      	push	{r4, r7}
 800faaa:	b082      	sub	sp, #8
 800faac:	af00      	add	r7, sp, #0
 800faae:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fab0:	4b0f      	ldr	r3, [pc, #60]	; (800faf0 <SDMMC_GetCmdError+0x48>)
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	4a0f      	ldr	r2, [pc, #60]	; (800faf4 <SDMMC_GetCmdError+0x4c>)
 800fab6:	fba2 2303 	umull	r2, r3, r2, r3
 800faba:	0a5b      	lsrs	r3, r3, #9
 800fabc:	f241 3288 	movw	r2, #5000	; 0x1388
 800fac0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800fac4:	4623      	mov	r3, r4
 800fac6:	1e5c      	subs	r4, r3, #1
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d102      	bne.n	800fad2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800facc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fad0:	e009      	b.n	800fae6 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d0f2      	beq.n	800fac4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	22c5      	movs	r2, #197	; 0xc5
 800fae2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800fae4:	2300      	movs	r3, #0
}
 800fae6:	4618      	mov	r0, r3
 800fae8:	3708      	adds	r7, #8
 800faea:	46bd      	mov	sp, r7
 800faec:	bc90      	pop	{r4, r7}
 800faee:	4770      	bx	lr
 800faf0:	20000000 	.word	0x20000000
 800faf4:	10624dd3 	.word	0x10624dd3

0800faf8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800faf8:	b590      	push	{r4, r7, lr}
 800fafa:	b087      	sub	sp, #28
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	60f8      	str	r0, [r7, #12]
 800fb00:	460b      	mov	r3, r1
 800fb02:	607a      	str	r2, [r7, #4]
 800fb04:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800fb06:	4b6f      	ldr	r3, [pc, #444]	; (800fcc4 <SDMMC_GetCmdResp1+0x1cc>)
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	4a6f      	ldr	r2, [pc, #444]	; (800fcc8 <SDMMC_GetCmdResp1+0x1d0>)
 800fb0c:	fba2 2303 	umull	r2, r3, r2, r3
 800fb10:	0a5b      	lsrs	r3, r3, #9
 800fb12:	687a      	ldr	r2, [r7, #4]
 800fb14:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800fb18:	4623      	mov	r3, r4
 800fb1a:	1e5c      	subs	r4, r3, #1
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d102      	bne.n	800fb26 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fb20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fb24:	e0c9      	b.n	800fcba <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb2a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fb2c:	697b      	ldr	r3, [r7, #20]
 800fb2e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d0f0      	beq.n	800fb18 <SDMMC_GetCmdResp1+0x20>
 800fb36:	697b      	ldr	r3, [r7, #20]
 800fb38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d1eb      	bne.n	800fb18 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb44:	f003 0304 	and.w	r3, r3, #4
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d004      	beq.n	800fb56 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	2204      	movs	r2, #4
 800fb50:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fb52:	2304      	movs	r3, #4
 800fb54:	e0b1      	b.n	800fcba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb5a:	f003 0301 	and.w	r3, r3, #1
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d004      	beq.n	800fb6c <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	2201      	movs	r2, #1
 800fb66:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fb68:	2301      	movs	r3, #1
 800fb6a:	e0a6      	b.n	800fcba <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	22c5      	movs	r2, #197	; 0xc5
 800fb70:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800fb72:	68f8      	ldr	r0, [r7, #12]
 800fb74:	f7ff fd18 	bl	800f5a8 <SDIO_GetCommandResponse>
 800fb78:	4603      	mov	r3, r0
 800fb7a:	461a      	mov	r2, r3
 800fb7c:	7afb      	ldrb	r3, [r7, #11]
 800fb7e:	4293      	cmp	r3, r2
 800fb80:	d001      	beq.n	800fb86 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fb82:	2301      	movs	r3, #1
 800fb84:	e099      	b.n	800fcba <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800fb86:	2100      	movs	r1, #0
 800fb88:	68f8      	ldr	r0, [r7, #12]
 800fb8a:	f7ff fd1a 	bl	800f5c2 <SDIO_GetResponse>
 800fb8e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800fb90:	693a      	ldr	r2, [r7, #16]
 800fb92:	4b4e      	ldr	r3, [pc, #312]	; (800fccc <SDMMC_GetCmdResp1+0x1d4>)
 800fb94:	4013      	ands	r3, r2
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d101      	bne.n	800fb9e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800fb9a:	2300      	movs	r3, #0
 800fb9c:	e08d      	b.n	800fcba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800fb9e:	693b      	ldr	r3, [r7, #16]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	da02      	bge.n	800fbaa <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800fba4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800fba8:	e087      	b.n	800fcba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800fbaa:	693b      	ldr	r3, [r7, #16]
 800fbac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d001      	beq.n	800fbb8 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800fbb4:	2340      	movs	r3, #64	; 0x40
 800fbb6:	e080      	b.n	800fcba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800fbb8:	693b      	ldr	r3, [r7, #16]
 800fbba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d001      	beq.n	800fbc6 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800fbc2:	2380      	movs	r3, #128	; 0x80
 800fbc4:	e079      	b.n	800fcba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800fbc6:	693b      	ldr	r3, [r7, #16]
 800fbc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d002      	beq.n	800fbd6 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800fbd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fbd4:	e071      	b.n	800fcba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800fbd6:	693b      	ldr	r3, [r7, #16]
 800fbd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d002      	beq.n	800fbe6 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800fbe0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fbe4:	e069      	b.n	800fcba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800fbe6:	693b      	ldr	r3, [r7, #16]
 800fbe8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d002      	beq.n	800fbf6 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800fbf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fbf4:	e061      	b.n	800fcba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800fbf6:	693b      	ldr	r3, [r7, #16]
 800fbf8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d002      	beq.n	800fc06 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800fc00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fc04:	e059      	b.n	800fcba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800fc06:	693b      	ldr	r3, [r7, #16]
 800fc08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d002      	beq.n	800fc16 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800fc10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fc14:	e051      	b.n	800fcba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800fc16:	693b      	ldr	r3, [r7, #16]
 800fc18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d002      	beq.n	800fc26 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800fc20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fc24:	e049      	b.n	800fcba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800fc26:	693b      	ldr	r3, [r7, #16]
 800fc28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d002      	beq.n	800fc36 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800fc30:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fc34:	e041      	b.n	800fcba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800fc36:	693b      	ldr	r3, [r7, #16]
 800fc38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d002      	beq.n	800fc46 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800fc40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fc44:	e039      	b.n	800fcba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800fc46:	693b      	ldr	r3, [r7, #16]
 800fc48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d002      	beq.n	800fc56 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800fc50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800fc54:	e031      	b.n	800fcba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800fc56:	693b      	ldr	r3, [r7, #16]
 800fc58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d002      	beq.n	800fc66 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800fc60:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800fc64:	e029      	b.n	800fcba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800fc66:	693b      	ldr	r3, [r7, #16]
 800fc68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d002      	beq.n	800fc76 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800fc70:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800fc74:	e021      	b.n	800fcba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800fc76:	693b      	ldr	r3, [r7, #16]
 800fc78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d002      	beq.n	800fc86 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800fc80:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800fc84:	e019      	b.n	800fcba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800fc86:	693b      	ldr	r3, [r7, #16]
 800fc88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d002      	beq.n	800fc96 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800fc90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800fc94:	e011      	b.n	800fcba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800fc96:	693b      	ldr	r3, [r7, #16]
 800fc98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d002      	beq.n	800fca6 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800fca0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800fca4:	e009      	b.n	800fcba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800fca6:	693b      	ldr	r3, [r7, #16]
 800fca8:	f003 0308 	and.w	r3, r3, #8
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d002      	beq.n	800fcb6 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800fcb0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800fcb4:	e001      	b.n	800fcba <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800fcb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800fcba:	4618      	mov	r0, r3
 800fcbc:	371c      	adds	r7, #28
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	bd90      	pop	{r4, r7, pc}
 800fcc2:	bf00      	nop
 800fcc4:	20000000 	.word	0x20000000
 800fcc8:	10624dd3 	.word	0x10624dd3
 800fccc:	fdffe008 	.word	0xfdffe008

0800fcd0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800fcd0:	b490      	push	{r4, r7}
 800fcd2:	b084      	sub	sp, #16
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fcd8:	4b1e      	ldr	r3, [pc, #120]	; (800fd54 <SDMMC_GetCmdResp2+0x84>)
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	4a1e      	ldr	r2, [pc, #120]	; (800fd58 <SDMMC_GetCmdResp2+0x88>)
 800fcde:	fba2 2303 	umull	r2, r3, r2, r3
 800fce2:	0a5b      	lsrs	r3, r3, #9
 800fce4:	f241 3288 	movw	r2, #5000	; 0x1388
 800fce8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800fcec:	4623      	mov	r3, r4
 800fcee:	1e5c      	subs	r4, r3, #1
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d102      	bne.n	800fcfa <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fcf4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fcf8:	e026      	b.n	800fd48 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fcfe:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d0f0      	beq.n	800fcec <SDMMC_GetCmdResp2+0x1c>
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d1eb      	bne.n	800fcec <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd18:	f003 0304 	and.w	r3, r3, #4
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d004      	beq.n	800fd2a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	2204      	movs	r2, #4
 800fd24:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fd26:	2304      	movs	r3, #4
 800fd28:	e00e      	b.n	800fd48 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd2e:	f003 0301 	and.w	r3, r3, #1
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d004      	beq.n	800fd40 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	2201      	movs	r2, #1
 800fd3a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fd3c:	2301      	movs	r3, #1
 800fd3e:	e003      	b.n	800fd48 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	22c5      	movs	r2, #197	; 0xc5
 800fd44:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800fd46:	2300      	movs	r3, #0
}
 800fd48:	4618      	mov	r0, r3
 800fd4a:	3710      	adds	r7, #16
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	bc90      	pop	{r4, r7}
 800fd50:	4770      	bx	lr
 800fd52:	bf00      	nop
 800fd54:	20000000 	.word	0x20000000
 800fd58:	10624dd3 	.word	0x10624dd3

0800fd5c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800fd5c:	b490      	push	{r4, r7}
 800fd5e:	b084      	sub	sp, #16
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fd64:	4b18      	ldr	r3, [pc, #96]	; (800fdc8 <SDMMC_GetCmdResp3+0x6c>)
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	4a18      	ldr	r2, [pc, #96]	; (800fdcc <SDMMC_GetCmdResp3+0x70>)
 800fd6a:	fba2 2303 	umull	r2, r3, r2, r3
 800fd6e:	0a5b      	lsrs	r3, r3, #9
 800fd70:	f241 3288 	movw	r2, #5000	; 0x1388
 800fd74:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800fd78:	4623      	mov	r3, r4
 800fd7a:	1e5c      	subs	r4, r3, #1
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d102      	bne.n	800fd86 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fd80:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fd84:	e01b      	b.n	800fdbe <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd8a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d0f0      	beq.n	800fd78 <SDMMC_GetCmdResp3+0x1c>
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d1eb      	bne.n	800fd78 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fda4:	f003 0304 	and.w	r3, r3, #4
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d004      	beq.n	800fdb6 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	2204      	movs	r2, #4
 800fdb0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fdb2:	2304      	movs	r3, #4
 800fdb4:	e003      	b.n	800fdbe <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	22c5      	movs	r2, #197	; 0xc5
 800fdba:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800fdbc:	2300      	movs	r3, #0
}
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	3710      	adds	r7, #16
 800fdc2:	46bd      	mov	sp, r7
 800fdc4:	bc90      	pop	{r4, r7}
 800fdc6:	4770      	bx	lr
 800fdc8:	20000000 	.word	0x20000000
 800fdcc:	10624dd3 	.word	0x10624dd3

0800fdd0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800fdd0:	b590      	push	{r4, r7, lr}
 800fdd2:	b087      	sub	sp, #28
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	60f8      	str	r0, [r7, #12]
 800fdd8:	460b      	mov	r3, r1
 800fdda:	607a      	str	r2, [r7, #4]
 800fddc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fdde:	4b34      	ldr	r3, [pc, #208]	; (800feb0 <SDMMC_GetCmdResp6+0xe0>)
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	4a34      	ldr	r2, [pc, #208]	; (800feb4 <SDMMC_GetCmdResp6+0xe4>)
 800fde4:	fba2 2303 	umull	r2, r3, r2, r3
 800fde8:	0a5b      	lsrs	r3, r3, #9
 800fdea:	f241 3288 	movw	r2, #5000	; 0x1388
 800fdee:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800fdf2:	4623      	mov	r3, r4
 800fdf4:	1e5c      	subs	r4, r3, #1
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d102      	bne.n	800fe00 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fdfa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fdfe:	e052      	b.n	800fea6 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe04:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fe06:	697b      	ldr	r3, [r7, #20]
 800fe08:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d0f0      	beq.n	800fdf2 <SDMMC_GetCmdResp6+0x22>
 800fe10:	697b      	ldr	r3, [r7, #20]
 800fe12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d1eb      	bne.n	800fdf2 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe1e:	f003 0304 	and.w	r3, r3, #4
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d004      	beq.n	800fe30 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	2204      	movs	r2, #4
 800fe2a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fe2c:	2304      	movs	r3, #4
 800fe2e:	e03a      	b.n	800fea6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe34:	f003 0301 	and.w	r3, r3, #1
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d004      	beq.n	800fe46 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	2201      	movs	r2, #1
 800fe40:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fe42:	2301      	movs	r3, #1
 800fe44:	e02f      	b.n	800fea6 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800fe46:	68f8      	ldr	r0, [r7, #12]
 800fe48:	f7ff fbae 	bl	800f5a8 <SDIO_GetCommandResponse>
 800fe4c:	4603      	mov	r3, r0
 800fe4e:	461a      	mov	r2, r3
 800fe50:	7afb      	ldrb	r3, [r7, #11]
 800fe52:	4293      	cmp	r3, r2
 800fe54:	d001      	beq.n	800fe5a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fe56:	2301      	movs	r3, #1
 800fe58:	e025      	b.n	800fea6 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	22c5      	movs	r2, #197	; 0xc5
 800fe5e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800fe60:	2100      	movs	r1, #0
 800fe62:	68f8      	ldr	r0, [r7, #12]
 800fe64:	f7ff fbad 	bl	800f5c2 <SDIO_GetResponse>
 800fe68:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800fe6a:	693b      	ldr	r3, [r7, #16]
 800fe6c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d106      	bne.n	800fe82 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800fe74:	693b      	ldr	r3, [r7, #16]
 800fe76:	0c1b      	lsrs	r3, r3, #16
 800fe78:	b29a      	uxth	r2, r3
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800fe7e:	2300      	movs	r3, #0
 800fe80:	e011      	b.n	800fea6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800fe82:	693b      	ldr	r3, [r7, #16]
 800fe84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d002      	beq.n	800fe92 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800fe8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fe90:	e009      	b.n	800fea6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800fe92:	693b      	ldr	r3, [r7, #16]
 800fe94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d002      	beq.n	800fea2 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800fe9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fea0:	e001      	b.n	800fea6 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800fea2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800fea6:	4618      	mov	r0, r3
 800fea8:	371c      	adds	r7, #28
 800feaa:	46bd      	mov	sp, r7
 800feac:	bd90      	pop	{r4, r7, pc}
 800feae:	bf00      	nop
 800feb0:	20000000 	.word	0x20000000
 800feb4:	10624dd3 	.word	0x10624dd3

0800feb8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800feb8:	b490      	push	{r4, r7}
 800feba:	b084      	sub	sp, #16
 800febc:	af00      	add	r7, sp, #0
 800febe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fec0:	4b21      	ldr	r3, [pc, #132]	; (800ff48 <SDMMC_GetCmdResp7+0x90>)
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	4a21      	ldr	r2, [pc, #132]	; (800ff4c <SDMMC_GetCmdResp7+0x94>)
 800fec6:	fba2 2303 	umull	r2, r3, r2, r3
 800feca:	0a5b      	lsrs	r3, r3, #9
 800fecc:	f241 3288 	movw	r2, #5000	; 0x1388
 800fed0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800fed4:	4623      	mov	r3, r4
 800fed6:	1e5c      	subs	r4, r3, #1
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d102      	bne.n	800fee2 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fedc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fee0:	e02c      	b.n	800ff3c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fee6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d0f0      	beq.n	800fed4 <SDMMC_GetCmdResp7+0x1c>
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d1eb      	bne.n	800fed4 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff00:	f003 0304 	and.w	r3, r3, #4
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d004      	beq.n	800ff12 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	2204      	movs	r2, #4
 800ff0c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ff0e:	2304      	movs	r3, #4
 800ff10:	e014      	b.n	800ff3c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff16:	f003 0301 	and.w	r3, r3, #1
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d004      	beq.n	800ff28 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	2201      	movs	r2, #1
 800ff22:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ff24:	2301      	movs	r3, #1
 800ff26:	e009      	b.n	800ff3c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d002      	beq.n	800ff3a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	2240      	movs	r2, #64	; 0x40
 800ff38:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ff3a:	2300      	movs	r3, #0
  
}
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	3710      	adds	r7, #16
 800ff40:	46bd      	mov	sp, r7
 800ff42:	bc90      	pop	{r4, r7}
 800ff44:	4770      	bx	lr
 800ff46:	bf00      	nop
 800ff48:	20000000 	.word	0x20000000
 800ff4c:	10624dd3 	.word	0x10624dd3

0800ff50 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ff50:	b580      	push	{r7, lr}
 800ff52:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ff54:	4904      	ldr	r1, [pc, #16]	; (800ff68 <MX_FATFS_Init+0x18>)
 800ff56:	4805      	ldr	r0, [pc, #20]	; (800ff6c <MX_FATFS_Init+0x1c>)
 800ff58:	f003 fb9c 	bl	8013694 <FATFS_LinkDriver>
 800ff5c:	4603      	mov	r3, r0
 800ff5e:	461a      	mov	r2, r3
 800ff60:	4b03      	ldr	r3, [pc, #12]	; (800ff70 <MX_FATFS_Init+0x20>)
 800ff62:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ff64:	bf00      	nop
 800ff66:	bd80      	pop	{r7, pc}
 800ff68:	2003ee00 	.word	0x2003ee00
 800ff6c:	08019164 	.word	0x08019164
 800ff70:	2003edfc 	.word	0x2003edfc

0800ff74 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ff74:	b580      	push	{r7, lr}
 800ff76:	b082      	sub	sp, #8
 800ff78:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ff7e:	f000 f896 	bl	80100ae <BSP_SD_IsDetected>
 800ff82:	4603      	mov	r3, r0
 800ff84:	2b01      	cmp	r3, #1
 800ff86:	d001      	beq.n	800ff8c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800ff88:	2301      	movs	r3, #1
 800ff8a:	e012      	b.n	800ffb2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800ff8c:	480b      	ldr	r0, [pc, #44]	; (800ffbc <BSP_SD_Init+0x48>)
 800ff8e:	f7fb ffa5 	bl	800bedc <HAL_SD_Init>
 800ff92:	4603      	mov	r3, r0
 800ff94:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ff96:	79fb      	ldrb	r3, [r7, #7]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d109      	bne.n	800ffb0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800ff9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ffa0:	4806      	ldr	r0, [pc, #24]	; (800ffbc <BSP_SD_Init+0x48>)
 800ffa2:	f7fc fd4f 	bl	800ca44 <HAL_SD_ConfigWideBusOperation>
 800ffa6:	4603      	mov	r3, r0
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d001      	beq.n	800ffb0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800ffac:	2301      	movs	r3, #1
 800ffae:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800ffb0:	79fb      	ldrb	r3, [r7, #7]
}
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	3708      	adds	r7, #8
 800ffb6:	46bd      	mov	sp, r7
 800ffb8:	bd80      	pop	{r7, pc}
 800ffba:	bf00      	nop
 800ffbc:	2003ebfc 	.word	0x2003ebfc

0800ffc0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800ffc0:	b580      	push	{r7, lr}
 800ffc2:	b086      	sub	sp, #24
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	60f8      	str	r0, [r7, #12]
 800ffc8:	60b9      	str	r1, [r7, #8]
 800ffca:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ffcc:	2300      	movs	r3, #0
 800ffce:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	68ba      	ldr	r2, [r7, #8]
 800ffd4:	68f9      	ldr	r1, [r7, #12]
 800ffd6:	4806      	ldr	r0, [pc, #24]	; (800fff0 <BSP_SD_ReadBlocks_DMA+0x30>)
 800ffd8:	f7fc f810 	bl	800bffc <HAL_SD_ReadBlocks_DMA>
 800ffdc:	4603      	mov	r3, r0
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d001      	beq.n	800ffe6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ffe2:	2301      	movs	r3, #1
 800ffe4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ffe6:	7dfb      	ldrb	r3, [r7, #23]
}
 800ffe8:	4618      	mov	r0, r3
 800ffea:	3718      	adds	r7, #24
 800ffec:	46bd      	mov	sp, r7
 800ffee:	bd80      	pop	{r7, pc}
 800fff0:	2003ebfc 	.word	0x2003ebfc

0800fff4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800fff4:	b580      	push	{r7, lr}
 800fff6:	b086      	sub	sp, #24
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	60f8      	str	r0, [r7, #12]
 800fffc:	60b9      	str	r1, [r7, #8]
 800fffe:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010000:	2300      	movs	r3, #0
 8010002:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	68ba      	ldr	r2, [r7, #8]
 8010008:	68f9      	ldr	r1, [r7, #12]
 801000a:	4806      	ldr	r0, [pc, #24]	; (8010024 <BSP_SD_WriteBlocks_DMA+0x30>)
 801000c:	f7fc f8de 	bl	800c1cc <HAL_SD_WriteBlocks_DMA>
 8010010:	4603      	mov	r3, r0
 8010012:	2b00      	cmp	r3, #0
 8010014:	d001      	beq.n	801001a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010016:	2301      	movs	r3, #1
 8010018:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801001a:	7dfb      	ldrb	r3, [r7, #23]
}
 801001c:	4618      	mov	r0, r3
 801001e:	3718      	adds	r7, #24
 8010020:	46bd      	mov	sp, r7
 8010022:	bd80      	pop	{r7, pc}
 8010024:	2003ebfc 	.word	0x2003ebfc

08010028 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010028:	b580      	push	{r7, lr}
 801002a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801002c:	4805      	ldr	r0, [pc, #20]	; (8010044 <BSP_SD_GetCardState+0x1c>)
 801002e:	f7fc fd85 	bl	800cb3c <HAL_SD_GetCardState>
 8010032:	4603      	mov	r3, r0
 8010034:	2b04      	cmp	r3, #4
 8010036:	bf14      	ite	ne
 8010038:	2301      	movne	r3, #1
 801003a:	2300      	moveq	r3, #0
 801003c:	b2db      	uxtb	r3, r3
}
 801003e:	4618      	mov	r0, r3
 8010040:	bd80      	pop	{r7, pc}
 8010042:	bf00      	nop
 8010044:	2003ebfc 	.word	0x2003ebfc

08010048 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010048:	b580      	push	{r7, lr}
 801004a:	b082      	sub	sp, #8
 801004c:	af00      	add	r7, sp, #0
 801004e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8010050:	6879      	ldr	r1, [r7, #4]
 8010052:	4803      	ldr	r0, [pc, #12]	; (8010060 <BSP_SD_GetCardInfo+0x18>)
 8010054:	f7fc fcca 	bl	800c9ec <HAL_SD_GetCardInfo>
}
 8010058:	bf00      	nop
 801005a:	3708      	adds	r7, #8
 801005c:	46bd      	mov	sp, r7
 801005e:	bd80      	pop	{r7, pc}
 8010060:	2003ebfc 	.word	0x2003ebfc

08010064 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b082      	sub	sp, #8
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 801006c:	f000 f818 	bl	80100a0 <BSP_SD_AbortCallback>
}
 8010070:	bf00      	nop
 8010072:	3708      	adds	r7, #8
 8010074:	46bd      	mov	sp, r7
 8010076:	bd80      	pop	{r7, pc}

08010078 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010078:	b580      	push	{r7, lr}
 801007a:	b082      	sub	sp, #8
 801007c:	af00      	add	r7, sp, #0
 801007e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8010080:	f000 f9a8 	bl	80103d4 <BSP_SD_WriteCpltCallback>
}
 8010084:	bf00      	nop
 8010086:	3708      	adds	r7, #8
 8010088:	46bd      	mov	sp, r7
 801008a:	bd80      	pop	{r7, pc}

0801008c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 801008c:	b580      	push	{r7, lr}
 801008e:	b082      	sub	sp, #8
 8010090:	af00      	add	r7, sp, #0
 8010092:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8010094:	f000 f9aa 	bl	80103ec <BSP_SD_ReadCpltCallback>
}
 8010098:	bf00      	nop
 801009a:	3708      	adds	r7, #8
 801009c:	46bd      	mov	sp, r7
 801009e:	bd80      	pop	{r7, pc}

080100a0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80100a0:	b480      	push	{r7}
 80100a2:	af00      	add	r7, sp, #0

}
 80100a4:	bf00      	nop
 80100a6:	46bd      	mov	sp, r7
 80100a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ac:	4770      	bx	lr

080100ae <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80100ae:	b580      	push	{r7, lr}
 80100b0:	b082      	sub	sp, #8
 80100b2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80100b4:	2301      	movs	r3, #1
 80100b6:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80100b8:	f000 f80c 	bl	80100d4 <BSP_PlatformIsDetected>
 80100bc:	4603      	mov	r3, r0
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d101      	bne.n	80100c6 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80100c2:	2300      	movs	r3, #0
 80100c4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80100c6:	79fb      	ldrb	r3, [r7, #7]
 80100c8:	b2db      	uxtb	r3, r3
}
 80100ca:	4618      	mov	r0, r3
 80100cc:	3708      	adds	r7, #8
 80100ce:	46bd      	mov	sp, r7
 80100d0:	bd80      	pop	{r7, pc}
	...

080100d4 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80100d4:	b580      	push	{r7, lr}
 80100d6:	b082      	sub	sp, #8
 80100d8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80100da:	2301      	movs	r3, #1
 80100dc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80100de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80100e2:	4806      	ldr	r0, [pc, #24]	; (80100fc <BSP_PlatformIsDetected+0x28>)
 80100e4:	f7fa f87e 	bl	800a1e4 <HAL_GPIO_ReadPin>
 80100e8:	4603      	mov	r3, r0
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d001      	beq.n	80100f2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80100ee:	2300      	movs	r3, #0
 80100f0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80100f2:	79fb      	ldrb	r3, [r7, #7]
}
 80100f4:	4618      	mov	r0, r3
 80100f6:	3708      	adds	r7, #8
 80100f8:	46bd      	mov	sp, r7
 80100fa:	bd80      	pop	{r7, pc}
 80100fc:	40020000 	.word	0x40020000

08010100 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8010100:	b580      	push	{r7, lr}
 8010102:	b084      	sub	sp, #16
 8010104:	af00      	add	r7, sp, #0
 8010106:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8010108:	f7f8 fde2 	bl	8008cd0 <HAL_GetTick>
 801010c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 801010e:	e006      	b.n	801011e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010110:	f7ff ff8a 	bl	8010028 <BSP_SD_GetCardState>
 8010114:	4603      	mov	r3, r0
 8010116:	2b00      	cmp	r3, #0
 8010118:	d101      	bne.n	801011e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801011a:	2300      	movs	r3, #0
 801011c:	e009      	b.n	8010132 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 801011e:	f7f8 fdd7 	bl	8008cd0 <HAL_GetTick>
 8010122:	4602      	mov	r2, r0
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	1ad3      	subs	r3, r2, r3
 8010128:	687a      	ldr	r2, [r7, #4]
 801012a:	429a      	cmp	r2, r3
 801012c:	d8f0      	bhi.n	8010110 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801012e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010132:	4618      	mov	r0, r3
 8010134:	3710      	adds	r7, #16
 8010136:	46bd      	mov	sp, r7
 8010138:	bd80      	pop	{r7, pc}
	...

0801013c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 801013c:	b580      	push	{r7, lr}
 801013e:	b082      	sub	sp, #8
 8010140:	af00      	add	r7, sp, #0
 8010142:	4603      	mov	r3, r0
 8010144:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010146:	4b0b      	ldr	r3, [pc, #44]	; (8010174 <SD_CheckStatus+0x38>)
 8010148:	2201      	movs	r2, #1
 801014a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 801014c:	f7ff ff6c 	bl	8010028 <BSP_SD_GetCardState>
 8010150:	4603      	mov	r3, r0
 8010152:	2b00      	cmp	r3, #0
 8010154:	d107      	bne.n	8010166 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010156:	4b07      	ldr	r3, [pc, #28]	; (8010174 <SD_CheckStatus+0x38>)
 8010158:	781b      	ldrb	r3, [r3, #0]
 801015a:	b2db      	uxtb	r3, r3
 801015c:	f023 0301 	bic.w	r3, r3, #1
 8010160:	b2da      	uxtb	r2, r3
 8010162:	4b04      	ldr	r3, [pc, #16]	; (8010174 <SD_CheckStatus+0x38>)
 8010164:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010166:	4b03      	ldr	r3, [pc, #12]	; (8010174 <SD_CheckStatus+0x38>)
 8010168:	781b      	ldrb	r3, [r3, #0]
 801016a:	b2db      	uxtb	r3, r3
}
 801016c:	4618      	mov	r0, r3
 801016e:	3708      	adds	r7, #8
 8010170:	46bd      	mov	sp, r7
 8010172:	bd80      	pop	{r7, pc}
 8010174:	20000009 	.word	0x20000009

08010178 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010178:	b580      	push	{r7, lr}
 801017a:	b082      	sub	sp, #8
 801017c:	af00      	add	r7, sp, #0
 801017e:	4603      	mov	r3, r0
 8010180:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8010182:	f7ff fef7 	bl	800ff74 <BSP_SD_Init>
 8010186:	4603      	mov	r3, r0
 8010188:	2b00      	cmp	r3, #0
 801018a:	d107      	bne.n	801019c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 801018c:	79fb      	ldrb	r3, [r7, #7]
 801018e:	4618      	mov	r0, r3
 8010190:	f7ff ffd4 	bl	801013c <SD_CheckStatus>
 8010194:	4603      	mov	r3, r0
 8010196:	461a      	mov	r2, r3
 8010198:	4b04      	ldr	r3, [pc, #16]	; (80101ac <SD_initialize+0x34>)
 801019a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 801019c:	4b03      	ldr	r3, [pc, #12]	; (80101ac <SD_initialize+0x34>)
 801019e:	781b      	ldrb	r3, [r3, #0]
 80101a0:	b2db      	uxtb	r3, r3
}
 80101a2:	4618      	mov	r0, r3
 80101a4:	3708      	adds	r7, #8
 80101a6:	46bd      	mov	sp, r7
 80101a8:	bd80      	pop	{r7, pc}
 80101aa:	bf00      	nop
 80101ac:	20000009 	.word	0x20000009

080101b0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b082      	sub	sp, #8
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	4603      	mov	r3, r0
 80101b8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80101ba:	79fb      	ldrb	r3, [r7, #7]
 80101bc:	4618      	mov	r0, r3
 80101be:	f7ff ffbd 	bl	801013c <SD_CheckStatus>
 80101c2:	4603      	mov	r3, r0
}
 80101c4:	4618      	mov	r0, r3
 80101c6:	3708      	adds	r7, #8
 80101c8:	46bd      	mov	sp, r7
 80101ca:	bd80      	pop	{r7, pc}

080101cc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80101cc:	b580      	push	{r7, lr}
 80101ce:	b086      	sub	sp, #24
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	60b9      	str	r1, [r7, #8]
 80101d4:	607a      	str	r2, [r7, #4]
 80101d6:	603b      	str	r3, [r7, #0]
 80101d8:	4603      	mov	r3, r0
 80101da:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80101dc:	2301      	movs	r3, #1
 80101de:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80101e0:	f247 5030 	movw	r0, #30000	; 0x7530
 80101e4:	f7ff ff8c 	bl	8010100 <SD_CheckStatusWithTimeout>
 80101e8:	4603      	mov	r3, r0
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	da01      	bge.n	80101f2 <SD_read+0x26>
  {
    return res;
 80101ee:	7dfb      	ldrb	r3, [r7, #23]
 80101f0:	e03b      	b.n	801026a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80101f2:	683a      	ldr	r2, [r7, #0]
 80101f4:	6879      	ldr	r1, [r7, #4]
 80101f6:	68b8      	ldr	r0, [r7, #8]
 80101f8:	f7ff fee2 	bl	800ffc0 <BSP_SD_ReadBlocks_DMA>
 80101fc:	4603      	mov	r3, r0
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d132      	bne.n	8010268 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8010202:	4b1c      	ldr	r3, [pc, #112]	; (8010274 <SD_read+0xa8>)
 8010204:	2200      	movs	r2, #0
 8010206:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8010208:	f7f8 fd62 	bl	8008cd0 <HAL_GetTick>
 801020c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801020e:	bf00      	nop
 8010210:	4b18      	ldr	r3, [pc, #96]	; (8010274 <SD_read+0xa8>)
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	2b00      	cmp	r3, #0
 8010216:	d108      	bne.n	801022a <SD_read+0x5e>
 8010218:	f7f8 fd5a 	bl	8008cd0 <HAL_GetTick>
 801021c:	4602      	mov	r2, r0
 801021e:	693b      	ldr	r3, [r7, #16]
 8010220:	1ad3      	subs	r3, r2, r3
 8010222:	f247 522f 	movw	r2, #29999	; 0x752f
 8010226:	4293      	cmp	r3, r2
 8010228:	d9f2      	bls.n	8010210 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 801022a:	4b12      	ldr	r3, [pc, #72]	; (8010274 <SD_read+0xa8>)
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	2b00      	cmp	r3, #0
 8010230:	d102      	bne.n	8010238 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8010232:	2301      	movs	r3, #1
 8010234:	75fb      	strb	r3, [r7, #23]
 8010236:	e017      	b.n	8010268 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8010238:	4b0e      	ldr	r3, [pc, #56]	; (8010274 <SD_read+0xa8>)
 801023a:	2200      	movs	r2, #0
 801023c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801023e:	f7f8 fd47 	bl	8008cd0 <HAL_GetTick>
 8010242:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010244:	e007      	b.n	8010256 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010246:	f7ff feef 	bl	8010028 <BSP_SD_GetCardState>
 801024a:	4603      	mov	r3, r0
 801024c:	2b00      	cmp	r3, #0
 801024e:	d102      	bne.n	8010256 <SD_read+0x8a>
          {
            res = RES_OK;
 8010250:	2300      	movs	r3, #0
 8010252:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8010254:	e008      	b.n	8010268 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010256:	f7f8 fd3b 	bl	8008cd0 <HAL_GetTick>
 801025a:	4602      	mov	r2, r0
 801025c:	693b      	ldr	r3, [r7, #16]
 801025e:	1ad3      	subs	r3, r2, r3
 8010260:	f247 522f 	movw	r2, #29999	; 0x752f
 8010264:	4293      	cmp	r3, r2
 8010266:	d9ee      	bls.n	8010246 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8010268:	7dfb      	ldrb	r3, [r7, #23]
}
 801026a:	4618      	mov	r0, r3
 801026c:	3718      	adds	r7, #24
 801026e:	46bd      	mov	sp, r7
 8010270:	bd80      	pop	{r7, pc}
 8010272:	bf00      	nop
 8010274:	2003c498 	.word	0x2003c498

08010278 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010278:	b580      	push	{r7, lr}
 801027a:	b086      	sub	sp, #24
 801027c:	af00      	add	r7, sp, #0
 801027e:	60b9      	str	r1, [r7, #8]
 8010280:	607a      	str	r2, [r7, #4]
 8010282:	603b      	str	r3, [r7, #0]
 8010284:	4603      	mov	r3, r0
 8010286:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010288:	2301      	movs	r3, #1
 801028a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 801028c:	4b24      	ldr	r3, [pc, #144]	; (8010320 <SD_write+0xa8>)
 801028e:	2200      	movs	r2, #0
 8010290:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010292:	f247 5030 	movw	r0, #30000	; 0x7530
 8010296:	f7ff ff33 	bl	8010100 <SD_CheckStatusWithTimeout>
 801029a:	4603      	mov	r3, r0
 801029c:	2b00      	cmp	r3, #0
 801029e:	da01      	bge.n	80102a4 <SD_write+0x2c>
  {
    return res;
 80102a0:	7dfb      	ldrb	r3, [r7, #23]
 80102a2:	e038      	b.n	8010316 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80102a4:	683a      	ldr	r2, [r7, #0]
 80102a6:	6879      	ldr	r1, [r7, #4]
 80102a8:	68b8      	ldr	r0, [r7, #8]
 80102aa:	f7ff fea3 	bl	800fff4 <BSP_SD_WriteBlocks_DMA>
 80102ae:	4603      	mov	r3, r0
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d12f      	bne.n	8010314 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80102b4:	f7f8 fd0c 	bl	8008cd0 <HAL_GetTick>
 80102b8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80102ba:	bf00      	nop
 80102bc:	4b18      	ldr	r3, [pc, #96]	; (8010320 <SD_write+0xa8>)
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d108      	bne.n	80102d6 <SD_write+0x5e>
 80102c4:	f7f8 fd04 	bl	8008cd0 <HAL_GetTick>
 80102c8:	4602      	mov	r2, r0
 80102ca:	693b      	ldr	r3, [r7, #16]
 80102cc:	1ad3      	subs	r3, r2, r3
 80102ce:	f247 522f 	movw	r2, #29999	; 0x752f
 80102d2:	4293      	cmp	r3, r2
 80102d4:	d9f2      	bls.n	80102bc <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 80102d6:	4b12      	ldr	r3, [pc, #72]	; (8010320 <SD_write+0xa8>)
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d102      	bne.n	80102e4 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80102de:	2301      	movs	r3, #1
 80102e0:	75fb      	strb	r3, [r7, #23]
 80102e2:	e017      	b.n	8010314 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80102e4:	4b0e      	ldr	r3, [pc, #56]	; (8010320 <SD_write+0xa8>)
 80102e6:	2200      	movs	r2, #0
 80102e8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80102ea:	f7f8 fcf1 	bl	8008cd0 <HAL_GetTick>
 80102ee:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80102f0:	e007      	b.n	8010302 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80102f2:	f7ff fe99 	bl	8010028 <BSP_SD_GetCardState>
 80102f6:	4603      	mov	r3, r0
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d102      	bne.n	8010302 <SD_write+0x8a>
          {
            res = RES_OK;
 80102fc:	2300      	movs	r3, #0
 80102fe:	75fb      	strb	r3, [r7, #23]
            break;
 8010300:	e008      	b.n	8010314 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010302:	f7f8 fce5 	bl	8008cd0 <HAL_GetTick>
 8010306:	4602      	mov	r2, r0
 8010308:	693b      	ldr	r3, [r7, #16]
 801030a:	1ad3      	subs	r3, r2, r3
 801030c:	f247 522f 	movw	r2, #29999	; 0x752f
 8010310:	4293      	cmp	r3, r2
 8010312:	d9ee      	bls.n	80102f2 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8010314:	7dfb      	ldrb	r3, [r7, #23]
}
 8010316:	4618      	mov	r0, r3
 8010318:	3718      	adds	r7, #24
 801031a:	46bd      	mov	sp, r7
 801031c:	bd80      	pop	{r7, pc}
 801031e:	bf00      	nop
 8010320:	2003c494 	.word	0x2003c494

08010324 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010324:	b580      	push	{r7, lr}
 8010326:	b08c      	sub	sp, #48	; 0x30
 8010328:	af00      	add	r7, sp, #0
 801032a:	4603      	mov	r3, r0
 801032c:	603a      	str	r2, [r7, #0]
 801032e:	71fb      	strb	r3, [r7, #7]
 8010330:	460b      	mov	r3, r1
 8010332:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010334:	2301      	movs	r3, #1
 8010336:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801033a:	4b25      	ldr	r3, [pc, #148]	; (80103d0 <SD_ioctl+0xac>)
 801033c:	781b      	ldrb	r3, [r3, #0]
 801033e:	b2db      	uxtb	r3, r3
 8010340:	f003 0301 	and.w	r3, r3, #1
 8010344:	2b00      	cmp	r3, #0
 8010346:	d001      	beq.n	801034c <SD_ioctl+0x28>
 8010348:	2303      	movs	r3, #3
 801034a:	e03c      	b.n	80103c6 <SD_ioctl+0xa2>

  switch (cmd)
 801034c:	79bb      	ldrb	r3, [r7, #6]
 801034e:	2b03      	cmp	r3, #3
 8010350:	d834      	bhi.n	80103bc <SD_ioctl+0x98>
 8010352:	a201      	add	r2, pc, #4	; (adr r2, 8010358 <SD_ioctl+0x34>)
 8010354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010358:	08010369 	.word	0x08010369
 801035c:	08010371 	.word	0x08010371
 8010360:	08010389 	.word	0x08010389
 8010364:	080103a3 	.word	0x080103a3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010368:	2300      	movs	r3, #0
 801036a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801036e:	e028      	b.n	80103c2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010370:	f107 030c 	add.w	r3, r7, #12
 8010374:	4618      	mov	r0, r3
 8010376:	f7ff fe67 	bl	8010048 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801037a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801037c:	683b      	ldr	r3, [r7, #0]
 801037e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010380:	2300      	movs	r3, #0
 8010382:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010386:	e01c      	b.n	80103c2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010388:	f107 030c 	add.w	r3, r7, #12
 801038c:	4618      	mov	r0, r3
 801038e:	f7ff fe5b 	bl	8010048 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8010392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010394:	b29a      	uxth	r2, r3
 8010396:	683b      	ldr	r3, [r7, #0]
 8010398:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801039a:	2300      	movs	r3, #0
 801039c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80103a0:	e00f      	b.n	80103c2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80103a2:	f107 030c 	add.w	r3, r7, #12
 80103a6:	4618      	mov	r0, r3
 80103a8:	f7ff fe4e 	bl	8010048 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80103ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103ae:	0a5a      	lsrs	r2, r3, #9
 80103b0:	683b      	ldr	r3, [r7, #0]
 80103b2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80103b4:	2300      	movs	r3, #0
 80103b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80103ba:	e002      	b.n	80103c2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80103bc:	2304      	movs	r3, #4
 80103be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80103c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80103c6:	4618      	mov	r0, r3
 80103c8:	3730      	adds	r7, #48	; 0x30
 80103ca:	46bd      	mov	sp, r7
 80103cc:	bd80      	pop	{r7, pc}
 80103ce:	bf00      	nop
 80103d0:	20000009 	.word	0x20000009

080103d4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80103d4:	b480      	push	{r7}
 80103d6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80103d8:	4b03      	ldr	r3, [pc, #12]	; (80103e8 <BSP_SD_WriteCpltCallback+0x14>)
 80103da:	2201      	movs	r2, #1
 80103dc:	601a      	str	r2, [r3, #0]
}
 80103de:	bf00      	nop
 80103e0:	46bd      	mov	sp, r7
 80103e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e6:	4770      	bx	lr
 80103e8:	2003c494 	.word	0x2003c494

080103ec <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80103ec:	b480      	push	{r7}
 80103ee:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80103f0:	4b03      	ldr	r3, [pc, #12]	; (8010400 <BSP_SD_ReadCpltCallback+0x14>)
 80103f2:	2201      	movs	r2, #1
 80103f4:	601a      	str	r2, [r3, #0]
}
 80103f6:	bf00      	nop
 80103f8:	46bd      	mov	sp, r7
 80103fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103fe:	4770      	bx	lr
 8010400:	2003c498 	.word	0x2003c498

08010404 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010404:	b580      	push	{r7, lr}
 8010406:	b084      	sub	sp, #16
 8010408:	af00      	add	r7, sp, #0
 801040a:	4603      	mov	r3, r0
 801040c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801040e:	79fb      	ldrb	r3, [r7, #7]
 8010410:	4a08      	ldr	r2, [pc, #32]	; (8010434 <disk_status+0x30>)
 8010412:	009b      	lsls	r3, r3, #2
 8010414:	4413      	add	r3, r2
 8010416:	685b      	ldr	r3, [r3, #4]
 8010418:	685b      	ldr	r3, [r3, #4]
 801041a:	79fa      	ldrb	r2, [r7, #7]
 801041c:	4905      	ldr	r1, [pc, #20]	; (8010434 <disk_status+0x30>)
 801041e:	440a      	add	r2, r1
 8010420:	7a12      	ldrb	r2, [r2, #8]
 8010422:	4610      	mov	r0, r2
 8010424:	4798      	blx	r3
 8010426:	4603      	mov	r3, r0
 8010428:	73fb      	strb	r3, [r7, #15]
  return stat;
 801042a:	7bfb      	ldrb	r3, [r7, #15]
}
 801042c:	4618      	mov	r0, r3
 801042e:	3710      	adds	r7, #16
 8010430:	46bd      	mov	sp, r7
 8010432:	bd80      	pop	{r7, pc}
 8010434:	2003c4c4 	.word	0x2003c4c4

08010438 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010438:	b580      	push	{r7, lr}
 801043a:	b084      	sub	sp, #16
 801043c:	af00      	add	r7, sp, #0
 801043e:	4603      	mov	r3, r0
 8010440:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8010442:	2300      	movs	r3, #0
 8010444:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8010446:	79fb      	ldrb	r3, [r7, #7]
 8010448:	4a0d      	ldr	r2, [pc, #52]	; (8010480 <disk_initialize+0x48>)
 801044a:	5cd3      	ldrb	r3, [r2, r3]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d111      	bne.n	8010474 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8010450:	79fb      	ldrb	r3, [r7, #7]
 8010452:	4a0b      	ldr	r2, [pc, #44]	; (8010480 <disk_initialize+0x48>)
 8010454:	2101      	movs	r1, #1
 8010456:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010458:	79fb      	ldrb	r3, [r7, #7]
 801045a:	4a09      	ldr	r2, [pc, #36]	; (8010480 <disk_initialize+0x48>)
 801045c:	009b      	lsls	r3, r3, #2
 801045e:	4413      	add	r3, r2
 8010460:	685b      	ldr	r3, [r3, #4]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	79fa      	ldrb	r2, [r7, #7]
 8010466:	4906      	ldr	r1, [pc, #24]	; (8010480 <disk_initialize+0x48>)
 8010468:	440a      	add	r2, r1
 801046a:	7a12      	ldrb	r2, [r2, #8]
 801046c:	4610      	mov	r0, r2
 801046e:	4798      	blx	r3
 8010470:	4603      	mov	r3, r0
 8010472:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8010474:	7bfb      	ldrb	r3, [r7, #15]
}
 8010476:	4618      	mov	r0, r3
 8010478:	3710      	adds	r7, #16
 801047a:	46bd      	mov	sp, r7
 801047c:	bd80      	pop	{r7, pc}
 801047e:	bf00      	nop
 8010480:	2003c4c4 	.word	0x2003c4c4

08010484 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010484:	b590      	push	{r4, r7, lr}
 8010486:	b087      	sub	sp, #28
 8010488:	af00      	add	r7, sp, #0
 801048a:	60b9      	str	r1, [r7, #8]
 801048c:	607a      	str	r2, [r7, #4]
 801048e:	603b      	str	r3, [r7, #0]
 8010490:	4603      	mov	r3, r0
 8010492:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010494:	7bfb      	ldrb	r3, [r7, #15]
 8010496:	4a0a      	ldr	r2, [pc, #40]	; (80104c0 <disk_read+0x3c>)
 8010498:	009b      	lsls	r3, r3, #2
 801049a:	4413      	add	r3, r2
 801049c:	685b      	ldr	r3, [r3, #4]
 801049e:	689c      	ldr	r4, [r3, #8]
 80104a0:	7bfb      	ldrb	r3, [r7, #15]
 80104a2:	4a07      	ldr	r2, [pc, #28]	; (80104c0 <disk_read+0x3c>)
 80104a4:	4413      	add	r3, r2
 80104a6:	7a18      	ldrb	r0, [r3, #8]
 80104a8:	683b      	ldr	r3, [r7, #0]
 80104aa:	687a      	ldr	r2, [r7, #4]
 80104ac:	68b9      	ldr	r1, [r7, #8]
 80104ae:	47a0      	blx	r4
 80104b0:	4603      	mov	r3, r0
 80104b2:	75fb      	strb	r3, [r7, #23]
  return res;
 80104b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80104b6:	4618      	mov	r0, r3
 80104b8:	371c      	adds	r7, #28
 80104ba:	46bd      	mov	sp, r7
 80104bc:	bd90      	pop	{r4, r7, pc}
 80104be:	bf00      	nop
 80104c0:	2003c4c4 	.word	0x2003c4c4

080104c4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80104c4:	b590      	push	{r4, r7, lr}
 80104c6:	b087      	sub	sp, #28
 80104c8:	af00      	add	r7, sp, #0
 80104ca:	60b9      	str	r1, [r7, #8]
 80104cc:	607a      	str	r2, [r7, #4]
 80104ce:	603b      	str	r3, [r7, #0]
 80104d0:	4603      	mov	r3, r0
 80104d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80104d4:	7bfb      	ldrb	r3, [r7, #15]
 80104d6:	4a0a      	ldr	r2, [pc, #40]	; (8010500 <disk_write+0x3c>)
 80104d8:	009b      	lsls	r3, r3, #2
 80104da:	4413      	add	r3, r2
 80104dc:	685b      	ldr	r3, [r3, #4]
 80104de:	68dc      	ldr	r4, [r3, #12]
 80104e0:	7bfb      	ldrb	r3, [r7, #15]
 80104e2:	4a07      	ldr	r2, [pc, #28]	; (8010500 <disk_write+0x3c>)
 80104e4:	4413      	add	r3, r2
 80104e6:	7a18      	ldrb	r0, [r3, #8]
 80104e8:	683b      	ldr	r3, [r7, #0]
 80104ea:	687a      	ldr	r2, [r7, #4]
 80104ec:	68b9      	ldr	r1, [r7, #8]
 80104ee:	47a0      	blx	r4
 80104f0:	4603      	mov	r3, r0
 80104f2:	75fb      	strb	r3, [r7, #23]
  return res;
 80104f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80104f6:	4618      	mov	r0, r3
 80104f8:	371c      	adds	r7, #28
 80104fa:	46bd      	mov	sp, r7
 80104fc:	bd90      	pop	{r4, r7, pc}
 80104fe:	bf00      	nop
 8010500:	2003c4c4 	.word	0x2003c4c4

08010504 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8010504:	b580      	push	{r7, lr}
 8010506:	b084      	sub	sp, #16
 8010508:	af00      	add	r7, sp, #0
 801050a:	4603      	mov	r3, r0
 801050c:	603a      	str	r2, [r7, #0]
 801050e:	71fb      	strb	r3, [r7, #7]
 8010510:	460b      	mov	r3, r1
 8010512:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010514:	79fb      	ldrb	r3, [r7, #7]
 8010516:	4a09      	ldr	r2, [pc, #36]	; (801053c <disk_ioctl+0x38>)
 8010518:	009b      	lsls	r3, r3, #2
 801051a:	4413      	add	r3, r2
 801051c:	685b      	ldr	r3, [r3, #4]
 801051e:	691b      	ldr	r3, [r3, #16]
 8010520:	79fa      	ldrb	r2, [r7, #7]
 8010522:	4906      	ldr	r1, [pc, #24]	; (801053c <disk_ioctl+0x38>)
 8010524:	440a      	add	r2, r1
 8010526:	7a10      	ldrb	r0, [r2, #8]
 8010528:	79b9      	ldrb	r1, [r7, #6]
 801052a:	683a      	ldr	r2, [r7, #0]
 801052c:	4798      	blx	r3
 801052e:	4603      	mov	r3, r0
 8010530:	73fb      	strb	r3, [r7, #15]
  return res;
 8010532:	7bfb      	ldrb	r3, [r7, #15]
}
 8010534:	4618      	mov	r0, r3
 8010536:	3710      	adds	r7, #16
 8010538:	46bd      	mov	sp, r7
 801053a:	bd80      	pop	{r7, pc}
 801053c:	2003c4c4 	.word	0x2003c4c4

08010540 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8010540:	b480      	push	{r7}
 8010542:	b085      	sub	sp, #20
 8010544:	af00      	add	r7, sp, #0
 8010546:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	3301      	adds	r3, #1
 801054c:	781b      	ldrb	r3, [r3, #0]
 801054e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8010550:	89fb      	ldrh	r3, [r7, #14]
 8010552:	021b      	lsls	r3, r3, #8
 8010554:	b21a      	sxth	r2, r3
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	781b      	ldrb	r3, [r3, #0]
 801055a:	b21b      	sxth	r3, r3
 801055c:	4313      	orrs	r3, r2
 801055e:	b21b      	sxth	r3, r3
 8010560:	81fb      	strh	r3, [r7, #14]
	return rv;
 8010562:	89fb      	ldrh	r3, [r7, #14]
}
 8010564:	4618      	mov	r0, r3
 8010566:	3714      	adds	r7, #20
 8010568:	46bd      	mov	sp, r7
 801056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801056e:	4770      	bx	lr

08010570 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010570:	b480      	push	{r7}
 8010572:	b085      	sub	sp, #20
 8010574:	af00      	add	r7, sp, #0
 8010576:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	3303      	adds	r3, #3
 801057c:	781b      	ldrb	r3, [r3, #0]
 801057e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	021b      	lsls	r3, r3, #8
 8010584:	687a      	ldr	r2, [r7, #4]
 8010586:	3202      	adds	r2, #2
 8010588:	7812      	ldrb	r2, [r2, #0]
 801058a:	4313      	orrs	r3, r2
 801058c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	021b      	lsls	r3, r3, #8
 8010592:	687a      	ldr	r2, [r7, #4]
 8010594:	3201      	adds	r2, #1
 8010596:	7812      	ldrb	r2, [r2, #0]
 8010598:	4313      	orrs	r3, r2
 801059a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	021b      	lsls	r3, r3, #8
 80105a0:	687a      	ldr	r2, [r7, #4]
 80105a2:	7812      	ldrb	r2, [r2, #0]
 80105a4:	4313      	orrs	r3, r2
 80105a6:	60fb      	str	r3, [r7, #12]
	return rv;
 80105a8:	68fb      	ldr	r3, [r7, #12]
}
 80105aa:	4618      	mov	r0, r3
 80105ac:	3714      	adds	r7, #20
 80105ae:	46bd      	mov	sp, r7
 80105b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b4:	4770      	bx	lr

080105b6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80105b6:	b480      	push	{r7}
 80105b8:	b083      	sub	sp, #12
 80105ba:	af00      	add	r7, sp, #0
 80105bc:	6078      	str	r0, [r7, #4]
 80105be:	460b      	mov	r3, r1
 80105c0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	1c5a      	adds	r2, r3, #1
 80105c6:	607a      	str	r2, [r7, #4]
 80105c8:	887a      	ldrh	r2, [r7, #2]
 80105ca:	b2d2      	uxtb	r2, r2
 80105cc:	701a      	strb	r2, [r3, #0]
 80105ce:	887b      	ldrh	r3, [r7, #2]
 80105d0:	0a1b      	lsrs	r3, r3, #8
 80105d2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	1c5a      	adds	r2, r3, #1
 80105d8:	607a      	str	r2, [r7, #4]
 80105da:	887a      	ldrh	r2, [r7, #2]
 80105dc:	b2d2      	uxtb	r2, r2
 80105de:	701a      	strb	r2, [r3, #0]
}
 80105e0:	bf00      	nop
 80105e2:	370c      	adds	r7, #12
 80105e4:	46bd      	mov	sp, r7
 80105e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ea:	4770      	bx	lr

080105ec <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80105ec:	b480      	push	{r7}
 80105ee:	b083      	sub	sp, #12
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	6078      	str	r0, [r7, #4]
 80105f4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	1c5a      	adds	r2, r3, #1
 80105fa:	607a      	str	r2, [r7, #4]
 80105fc:	683a      	ldr	r2, [r7, #0]
 80105fe:	b2d2      	uxtb	r2, r2
 8010600:	701a      	strb	r2, [r3, #0]
 8010602:	683b      	ldr	r3, [r7, #0]
 8010604:	0a1b      	lsrs	r3, r3, #8
 8010606:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	1c5a      	adds	r2, r3, #1
 801060c:	607a      	str	r2, [r7, #4]
 801060e:	683a      	ldr	r2, [r7, #0]
 8010610:	b2d2      	uxtb	r2, r2
 8010612:	701a      	strb	r2, [r3, #0]
 8010614:	683b      	ldr	r3, [r7, #0]
 8010616:	0a1b      	lsrs	r3, r3, #8
 8010618:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	1c5a      	adds	r2, r3, #1
 801061e:	607a      	str	r2, [r7, #4]
 8010620:	683a      	ldr	r2, [r7, #0]
 8010622:	b2d2      	uxtb	r2, r2
 8010624:	701a      	strb	r2, [r3, #0]
 8010626:	683b      	ldr	r3, [r7, #0]
 8010628:	0a1b      	lsrs	r3, r3, #8
 801062a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	1c5a      	adds	r2, r3, #1
 8010630:	607a      	str	r2, [r7, #4]
 8010632:	683a      	ldr	r2, [r7, #0]
 8010634:	b2d2      	uxtb	r2, r2
 8010636:	701a      	strb	r2, [r3, #0]
}
 8010638:	bf00      	nop
 801063a:	370c      	adds	r7, #12
 801063c:	46bd      	mov	sp, r7
 801063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010642:	4770      	bx	lr

08010644 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8010644:	b480      	push	{r7}
 8010646:	b087      	sub	sp, #28
 8010648:	af00      	add	r7, sp, #0
 801064a:	60f8      	str	r0, [r7, #12]
 801064c:	60b9      	str	r1, [r7, #8]
 801064e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8010654:	68bb      	ldr	r3, [r7, #8]
 8010656:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d00d      	beq.n	801067a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801065e:	693a      	ldr	r2, [r7, #16]
 8010660:	1c53      	adds	r3, r2, #1
 8010662:	613b      	str	r3, [r7, #16]
 8010664:	697b      	ldr	r3, [r7, #20]
 8010666:	1c59      	adds	r1, r3, #1
 8010668:	6179      	str	r1, [r7, #20]
 801066a:	7812      	ldrb	r2, [r2, #0]
 801066c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	3b01      	subs	r3, #1
 8010672:	607b      	str	r3, [r7, #4]
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	2b00      	cmp	r3, #0
 8010678:	d1f1      	bne.n	801065e <mem_cpy+0x1a>
	}
}
 801067a:	bf00      	nop
 801067c:	371c      	adds	r7, #28
 801067e:	46bd      	mov	sp, r7
 8010680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010684:	4770      	bx	lr

08010686 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8010686:	b480      	push	{r7}
 8010688:	b087      	sub	sp, #28
 801068a:	af00      	add	r7, sp, #0
 801068c:	60f8      	str	r0, [r7, #12]
 801068e:	60b9      	str	r1, [r7, #8]
 8010690:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8010696:	697b      	ldr	r3, [r7, #20]
 8010698:	1c5a      	adds	r2, r3, #1
 801069a:	617a      	str	r2, [r7, #20]
 801069c:	68ba      	ldr	r2, [r7, #8]
 801069e:	b2d2      	uxtb	r2, r2
 80106a0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	3b01      	subs	r3, #1
 80106a6:	607b      	str	r3, [r7, #4]
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d1f3      	bne.n	8010696 <mem_set+0x10>
}
 80106ae:	bf00      	nop
 80106b0:	371c      	adds	r7, #28
 80106b2:	46bd      	mov	sp, r7
 80106b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b8:	4770      	bx	lr

080106ba <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80106ba:	b480      	push	{r7}
 80106bc:	b089      	sub	sp, #36	; 0x24
 80106be:	af00      	add	r7, sp, #0
 80106c0:	60f8      	str	r0, [r7, #12]
 80106c2:	60b9      	str	r1, [r7, #8]
 80106c4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	61fb      	str	r3, [r7, #28]
 80106ca:	68bb      	ldr	r3, [r7, #8]
 80106cc:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80106ce:	2300      	movs	r3, #0
 80106d0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80106d2:	69fb      	ldr	r3, [r7, #28]
 80106d4:	1c5a      	adds	r2, r3, #1
 80106d6:	61fa      	str	r2, [r7, #28]
 80106d8:	781b      	ldrb	r3, [r3, #0]
 80106da:	4619      	mov	r1, r3
 80106dc:	69bb      	ldr	r3, [r7, #24]
 80106de:	1c5a      	adds	r2, r3, #1
 80106e0:	61ba      	str	r2, [r7, #24]
 80106e2:	781b      	ldrb	r3, [r3, #0]
 80106e4:	1acb      	subs	r3, r1, r3
 80106e6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	3b01      	subs	r3, #1
 80106ec:	607b      	str	r3, [r7, #4]
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d002      	beq.n	80106fa <mem_cmp+0x40>
 80106f4:	697b      	ldr	r3, [r7, #20]
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d0eb      	beq.n	80106d2 <mem_cmp+0x18>

	return r;
 80106fa:	697b      	ldr	r3, [r7, #20]
}
 80106fc:	4618      	mov	r0, r3
 80106fe:	3724      	adds	r7, #36	; 0x24
 8010700:	46bd      	mov	sp, r7
 8010702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010706:	4770      	bx	lr

08010708 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8010708:	b480      	push	{r7}
 801070a:	b083      	sub	sp, #12
 801070c:	af00      	add	r7, sp, #0
 801070e:	6078      	str	r0, [r7, #4]
 8010710:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8010712:	e002      	b.n	801071a <chk_chr+0x12>
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	3301      	adds	r3, #1
 8010718:	607b      	str	r3, [r7, #4]
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	781b      	ldrb	r3, [r3, #0]
 801071e:	2b00      	cmp	r3, #0
 8010720:	d005      	beq.n	801072e <chk_chr+0x26>
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	781b      	ldrb	r3, [r3, #0]
 8010726:	461a      	mov	r2, r3
 8010728:	683b      	ldr	r3, [r7, #0]
 801072a:	4293      	cmp	r3, r2
 801072c:	d1f2      	bne.n	8010714 <chk_chr+0xc>
	return *str;
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	781b      	ldrb	r3, [r3, #0]
}
 8010732:	4618      	mov	r0, r3
 8010734:	370c      	adds	r7, #12
 8010736:	46bd      	mov	sp, r7
 8010738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801073c:	4770      	bx	lr
	...

08010740 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010740:	b480      	push	{r7}
 8010742:	b085      	sub	sp, #20
 8010744:	af00      	add	r7, sp, #0
 8010746:	6078      	str	r0, [r7, #4]
 8010748:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801074a:	2300      	movs	r3, #0
 801074c:	60bb      	str	r3, [r7, #8]
 801074e:	68bb      	ldr	r3, [r7, #8]
 8010750:	60fb      	str	r3, [r7, #12]
 8010752:	e029      	b.n	80107a8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8010754:	4a27      	ldr	r2, [pc, #156]	; (80107f4 <chk_lock+0xb4>)
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	011b      	lsls	r3, r3, #4
 801075a:	4413      	add	r3, r2
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	2b00      	cmp	r3, #0
 8010760:	d01d      	beq.n	801079e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010762:	4a24      	ldr	r2, [pc, #144]	; (80107f4 <chk_lock+0xb4>)
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	011b      	lsls	r3, r3, #4
 8010768:	4413      	add	r3, r2
 801076a:	681a      	ldr	r2, [r3, #0]
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	429a      	cmp	r2, r3
 8010772:	d116      	bne.n	80107a2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8010774:	4a1f      	ldr	r2, [pc, #124]	; (80107f4 <chk_lock+0xb4>)
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	011b      	lsls	r3, r3, #4
 801077a:	4413      	add	r3, r2
 801077c:	3304      	adds	r3, #4
 801077e:	681a      	ldr	r2, [r3, #0]
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010784:	429a      	cmp	r2, r3
 8010786:	d10c      	bne.n	80107a2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010788:	4a1a      	ldr	r2, [pc, #104]	; (80107f4 <chk_lock+0xb4>)
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	011b      	lsls	r3, r3, #4
 801078e:	4413      	add	r3, r2
 8010790:	3308      	adds	r3, #8
 8010792:	681a      	ldr	r2, [r3, #0]
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8010798:	429a      	cmp	r2, r3
 801079a:	d102      	bne.n	80107a2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801079c:	e007      	b.n	80107ae <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801079e:	2301      	movs	r3, #1
 80107a0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	3301      	adds	r3, #1
 80107a6:	60fb      	str	r3, [r7, #12]
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	2b01      	cmp	r3, #1
 80107ac:	d9d2      	bls.n	8010754 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	2b02      	cmp	r3, #2
 80107b2:	d109      	bne.n	80107c8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80107b4:	68bb      	ldr	r3, [r7, #8]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d102      	bne.n	80107c0 <chk_lock+0x80>
 80107ba:	683b      	ldr	r3, [r7, #0]
 80107bc:	2b02      	cmp	r3, #2
 80107be:	d101      	bne.n	80107c4 <chk_lock+0x84>
 80107c0:	2300      	movs	r3, #0
 80107c2:	e010      	b.n	80107e6 <chk_lock+0xa6>
 80107c4:	2312      	movs	r3, #18
 80107c6:	e00e      	b.n	80107e6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80107c8:	683b      	ldr	r3, [r7, #0]
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d108      	bne.n	80107e0 <chk_lock+0xa0>
 80107ce:	4a09      	ldr	r2, [pc, #36]	; (80107f4 <chk_lock+0xb4>)
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	011b      	lsls	r3, r3, #4
 80107d4:	4413      	add	r3, r2
 80107d6:	330c      	adds	r3, #12
 80107d8:	881b      	ldrh	r3, [r3, #0]
 80107da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80107de:	d101      	bne.n	80107e4 <chk_lock+0xa4>
 80107e0:	2310      	movs	r3, #16
 80107e2:	e000      	b.n	80107e6 <chk_lock+0xa6>
 80107e4:	2300      	movs	r3, #0
}
 80107e6:	4618      	mov	r0, r3
 80107e8:	3714      	adds	r7, #20
 80107ea:	46bd      	mov	sp, r7
 80107ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f0:	4770      	bx	lr
 80107f2:	bf00      	nop
 80107f4:	2003c4a4 	.word	0x2003c4a4

080107f8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80107f8:	b480      	push	{r7}
 80107fa:	b083      	sub	sp, #12
 80107fc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80107fe:	2300      	movs	r3, #0
 8010800:	607b      	str	r3, [r7, #4]
 8010802:	e002      	b.n	801080a <enq_lock+0x12>
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	3301      	adds	r3, #1
 8010808:	607b      	str	r3, [r7, #4]
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	2b01      	cmp	r3, #1
 801080e:	d806      	bhi.n	801081e <enq_lock+0x26>
 8010810:	4a09      	ldr	r2, [pc, #36]	; (8010838 <enq_lock+0x40>)
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	011b      	lsls	r3, r3, #4
 8010816:	4413      	add	r3, r2
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	2b00      	cmp	r3, #0
 801081c:	d1f2      	bne.n	8010804 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	2b02      	cmp	r3, #2
 8010822:	bf14      	ite	ne
 8010824:	2301      	movne	r3, #1
 8010826:	2300      	moveq	r3, #0
 8010828:	b2db      	uxtb	r3, r3
}
 801082a:	4618      	mov	r0, r3
 801082c:	370c      	adds	r7, #12
 801082e:	46bd      	mov	sp, r7
 8010830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010834:	4770      	bx	lr
 8010836:	bf00      	nop
 8010838:	2003c4a4 	.word	0x2003c4a4

0801083c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801083c:	b480      	push	{r7}
 801083e:	b085      	sub	sp, #20
 8010840:	af00      	add	r7, sp, #0
 8010842:	6078      	str	r0, [r7, #4]
 8010844:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010846:	2300      	movs	r3, #0
 8010848:	60fb      	str	r3, [r7, #12]
 801084a:	e01f      	b.n	801088c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801084c:	4a41      	ldr	r2, [pc, #260]	; (8010954 <inc_lock+0x118>)
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	011b      	lsls	r3, r3, #4
 8010852:	4413      	add	r3, r2
 8010854:	681a      	ldr	r2, [r3, #0]
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	429a      	cmp	r2, r3
 801085c:	d113      	bne.n	8010886 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801085e:	4a3d      	ldr	r2, [pc, #244]	; (8010954 <inc_lock+0x118>)
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	011b      	lsls	r3, r3, #4
 8010864:	4413      	add	r3, r2
 8010866:	3304      	adds	r3, #4
 8010868:	681a      	ldr	r2, [r3, #0]
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801086e:	429a      	cmp	r2, r3
 8010870:	d109      	bne.n	8010886 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8010872:	4a38      	ldr	r2, [pc, #224]	; (8010954 <inc_lock+0x118>)
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	011b      	lsls	r3, r3, #4
 8010878:	4413      	add	r3, r2
 801087a:	3308      	adds	r3, #8
 801087c:	681a      	ldr	r2, [r3, #0]
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8010882:	429a      	cmp	r2, r3
 8010884:	d006      	beq.n	8010894 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	3301      	adds	r3, #1
 801088a:	60fb      	str	r3, [r7, #12]
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	2b01      	cmp	r3, #1
 8010890:	d9dc      	bls.n	801084c <inc_lock+0x10>
 8010892:	e000      	b.n	8010896 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8010894:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	2b02      	cmp	r3, #2
 801089a:	d132      	bne.n	8010902 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801089c:	2300      	movs	r3, #0
 801089e:	60fb      	str	r3, [r7, #12]
 80108a0:	e002      	b.n	80108a8 <inc_lock+0x6c>
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	3301      	adds	r3, #1
 80108a6:	60fb      	str	r3, [r7, #12]
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	2b01      	cmp	r3, #1
 80108ac:	d806      	bhi.n	80108bc <inc_lock+0x80>
 80108ae:	4a29      	ldr	r2, [pc, #164]	; (8010954 <inc_lock+0x118>)
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	011b      	lsls	r3, r3, #4
 80108b4:	4413      	add	r3, r2
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d1f2      	bne.n	80108a2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	2b02      	cmp	r3, #2
 80108c0:	d101      	bne.n	80108c6 <inc_lock+0x8a>
 80108c2:	2300      	movs	r3, #0
 80108c4:	e040      	b.n	8010948 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	681a      	ldr	r2, [r3, #0]
 80108ca:	4922      	ldr	r1, [pc, #136]	; (8010954 <inc_lock+0x118>)
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	011b      	lsls	r3, r3, #4
 80108d0:	440b      	add	r3, r1
 80108d2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	689a      	ldr	r2, [r3, #8]
 80108d8:	491e      	ldr	r1, [pc, #120]	; (8010954 <inc_lock+0x118>)
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	011b      	lsls	r3, r3, #4
 80108de:	440b      	add	r3, r1
 80108e0:	3304      	adds	r3, #4
 80108e2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	695a      	ldr	r2, [r3, #20]
 80108e8:	491a      	ldr	r1, [pc, #104]	; (8010954 <inc_lock+0x118>)
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	011b      	lsls	r3, r3, #4
 80108ee:	440b      	add	r3, r1
 80108f0:	3308      	adds	r3, #8
 80108f2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80108f4:	4a17      	ldr	r2, [pc, #92]	; (8010954 <inc_lock+0x118>)
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	011b      	lsls	r3, r3, #4
 80108fa:	4413      	add	r3, r2
 80108fc:	330c      	adds	r3, #12
 80108fe:	2200      	movs	r2, #0
 8010900:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8010902:	683b      	ldr	r3, [r7, #0]
 8010904:	2b00      	cmp	r3, #0
 8010906:	d009      	beq.n	801091c <inc_lock+0xe0>
 8010908:	4a12      	ldr	r2, [pc, #72]	; (8010954 <inc_lock+0x118>)
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	011b      	lsls	r3, r3, #4
 801090e:	4413      	add	r3, r2
 8010910:	330c      	adds	r3, #12
 8010912:	881b      	ldrh	r3, [r3, #0]
 8010914:	2b00      	cmp	r3, #0
 8010916:	d001      	beq.n	801091c <inc_lock+0xe0>
 8010918:	2300      	movs	r3, #0
 801091a:	e015      	b.n	8010948 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801091c:	683b      	ldr	r3, [r7, #0]
 801091e:	2b00      	cmp	r3, #0
 8010920:	d108      	bne.n	8010934 <inc_lock+0xf8>
 8010922:	4a0c      	ldr	r2, [pc, #48]	; (8010954 <inc_lock+0x118>)
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	011b      	lsls	r3, r3, #4
 8010928:	4413      	add	r3, r2
 801092a:	330c      	adds	r3, #12
 801092c:	881b      	ldrh	r3, [r3, #0]
 801092e:	3301      	adds	r3, #1
 8010930:	b29a      	uxth	r2, r3
 8010932:	e001      	b.n	8010938 <inc_lock+0xfc>
 8010934:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010938:	4906      	ldr	r1, [pc, #24]	; (8010954 <inc_lock+0x118>)
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	011b      	lsls	r3, r3, #4
 801093e:	440b      	add	r3, r1
 8010940:	330c      	adds	r3, #12
 8010942:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	3301      	adds	r3, #1
}
 8010948:	4618      	mov	r0, r3
 801094a:	3714      	adds	r7, #20
 801094c:	46bd      	mov	sp, r7
 801094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010952:	4770      	bx	lr
 8010954:	2003c4a4 	.word	0x2003c4a4

08010958 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8010958:	b480      	push	{r7}
 801095a:	b085      	sub	sp, #20
 801095c:	af00      	add	r7, sp, #0
 801095e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	3b01      	subs	r3, #1
 8010964:	607b      	str	r3, [r7, #4]
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	2b01      	cmp	r3, #1
 801096a:	d825      	bhi.n	80109b8 <dec_lock+0x60>
		n = Files[i].ctr;
 801096c:	4a17      	ldr	r2, [pc, #92]	; (80109cc <dec_lock+0x74>)
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	011b      	lsls	r3, r3, #4
 8010972:	4413      	add	r3, r2
 8010974:	330c      	adds	r3, #12
 8010976:	881b      	ldrh	r3, [r3, #0]
 8010978:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801097a:	89fb      	ldrh	r3, [r7, #14]
 801097c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010980:	d101      	bne.n	8010986 <dec_lock+0x2e>
 8010982:	2300      	movs	r3, #0
 8010984:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8010986:	89fb      	ldrh	r3, [r7, #14]
 8010988:	2b00      	cmp	r3, #0
 801098a:	d002      	beq.n	8010992 <dec_lock+0x3a>
 801098c:	89fb      	ldrh	r3, [r7, #14]
 801098e:	3b01      	subs	r3, #1
 8010990:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8010992:	4a0e      	ldr	r2, [pc, #56]	; (80109cc <dec_lock+0x74>)
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	011b      	lsls	r3, r3, #4
 8010998:	4413      	add	r3, r2
 801099a:	330c      	adds	r3, #12
 801099c:	89fa      	ldrh	r2, [r7, #14]
 801099e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80109a0:	89fb      	ldrh	r3, [r7, #14]
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d105      	bne.n	80109b2 <dec_lock+0x5a>
 80109a6:	4a09      	ldr	r2, [pc, #36]	; (80109cc <dec_lock+0x74>)
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	011b      	lsls	r3, r3, #4
 80109ac:	4413      	add	r3, r2
 80109ae:	2200      	movs	r2, #0
 80109b0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80109b2:	2300      	movs	r3, #0
 80109b4:	737b      	strb	r3, [r7, #13]
 80109b6:	e001      	b.n	80109bc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80109b8:	2302      	movs	r3, #2
 80109ba:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80109bc:	7b7b      	ldrb	r3, [r7, #13]
}
 80109be:	4618      	mov	r0, r3
 80109c0:	3714      	adds	r7, #20
 80109c2:	46bd      	mov	sp, r7
 80109c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c8:	4770      	bx	lr
 80109ca:	bf00      	nop
 80109cc:	2003c4a4 	.word	0x2003c4a4

080109d0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80109d0:	b480      	push	{r7}
 80109d2:	b085      	sub	sp, #20
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80109d8:	2300      	movs	r3, #0
 80109da:	60fb      	str	r3, [r7, #12]
 80109dc:	e010      	b.n	8010a00 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80109de:	4a0d      	ldr	r2, [pc, #52]	; (8010a14 <clear_lock+0x44>)
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	011b      	lsls	r3, r3, #4
 80109e4:	4413      	add	r3, r2
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	687a      	ldr	r2, [r7, #4]
 80109ea:	429a      	cmp	r2, r3
 80109ec:	d105      	bne.n	80109fa <clear_lock+0x2a>
 80109ee:	4a09      	ldr	r2, [pc, #36]	; (8010a14 <clear_lock+0x44>)
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	011b      	lsls	r3, r3, #4
 80109f4:	4413      	add	r3, r2
 80109f6:	2200      	movs	r2, #0
 80109f8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	3301      	adds	r3, #1
 80109fe:	60fb      	str	r3, [r7, #12]
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	2b01      	cmp	r3, #1
 8010a04:	d9eb      	bls.n	80109de <clear_lock+0xe>
	}
}
 8010a06:	bf00      	nop
 8010a08:	3714      	adds	r7, #20
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a10:	4770      	bx	lr
 8010a12:	bf00      	nop
 8010a14:	2003c4a4 	.word	0x2003c4a4

08010a18 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8010a18:	b580      	push	{r7, lr}
 8010a1a:	b086      	sub	sp, #24
 8010a1c:	af00      	add	r7, sp, #0
 8010a1e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8010a20:	2300      	movs	r3, #0
 8010a22:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	78db      	ldrb	r3, [r3, #3]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d034      	beq.n	8010a96 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a30:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	7858      	ldrb	r0, [r3, #1]
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010a3c:	2301      	movs	r3, #1
 8010a3e:	697a      	ldr	r2, [r7, #20]
 8010a40:	f7ff fd40 	bl	80104c4 <disk_write>
 8010a44:	4603      	mov	r3, r0
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d002      	beq.n	8010a50 <sync_window+0x38>
			res = FR_DISK_ERR;
 8010a4a:	2301      	movs	r3, #1
 8010a4c:	73fb      	strb	r3, [r7, #15]
 8010a4e:	e022      	b.n	8010a96 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	2200      	movs	r2, #0
 8010a54:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a5a:	697a      	ldr	r2, [r7, #20]
 8010a5c:	1ad2      	subs	r2, r2, r3
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	6a1b      	ldr	r3, [r3, #32]
 8010a62:	429a      	cmp	r2, r3
 8010a64:	d217      	bcs.n	8010a96 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	789b      	ldrb	r3, [r3, #2]
 8010a6a:	613b      	str	r3, [r7, #16]
 8010a6c:	e010      	b.n	8010a90 <sync_window+0x78>
					wsect += fs->fsize;
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	6a1b      	ldr	r3, [r3, #32]
 8010a72:	697a      	ldr	r2, [r7, #20]
 8010a74:	4413      	add	r3, r2
 8010a76:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	7858      	ldrb	r0, [r3, #1]
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010a82:	2301      	movs	r3, #1
 8010a84:	697a      	ldr	r2, [r7, #20]
 8010a86:	f7ff fd1d 	bl	80104c4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010a8a:	693b      	ldr	r3, [r7, #16]
 8010a8c:	3b01      	subs	r3, #1
 8010a8e:	613b      	str	r3, [r7, #16]
 8010a90:	693b      	ldr	r3, [r7, #16]
 8010a92:	2b01      	cmp	r3, #1
 8010a94:	d8eb      	bhi.n	8010a6e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8010a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a98:	4618      	mov	r0, r3
 8010a9a:	3718      	adds	r7, #24
 8010a9c:	46bd      	mov	sp, r7
 8010a9e:	bd80      	pop	{r7, pc}

08010aa0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8010aa0:	b580      	push	{r7, lr}
 8010aa2:	b084      	sub	sp, #16
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	6078      	str	r0, [r7, #4]
 8010aa8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8010aaa:	2300      	movs	r3, #0
 8010aac:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ab2:	683a      	ldr	r2, [r7, #0]
 8010ab4:	429a      	cmp	r2, r3
 8010ab6:	d01b      	beq.n	8010af0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8010ab8:	6878      	ldr	r0, [r7, #4]
 8010aba:	f7ff ffad 	bl	8010a18 <sync_window>
 8010abe:	4603      	mov	r3, r0
 8010ac0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8010ac2:	7bfb      	ldrb	r3, [r7, #15]
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d113      	bne.n	8010af0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	7858      	ldrb	r0, [r3, #1]
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010ad2:	2301      	movs	r3, #1
 8010ad4:	683a      	ldr	r2, [r7, #0]
 8010ad6:	f7ff fcd5 	bl	8010484 <disk_read>
 8010ada:	4603      	mov	r3, r0
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d004      	beq.n	8010aea <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8010ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8010ae4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8010ae6:	2301      	movs	r3, #1
 8010ae8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	683a      	ldr	r2, [r7, #0]
 8010aee:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8010af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8010af2:	4618      	mov	r0, r3
 8010af4:	3710      	adds	r7, #16
 8010af6:	46bd      	mov	sp, r7
 8010af8:	bd80      	pop	{r7, pc}
	...

08010afc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8010afc:	b580      	push	{r7, lr}
 8010afe:	b084      	sub	sp, #16
 8010b00:	af00      	add	r7, sp, #0
 8010b02:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8010b04:	6878      	ldr	r0, [r7, #4]
 8010b06:	f7ff ff87 	bl	8010a18 <sync_window>
 8010b0a:	4603      	mov	r3, r0
 8010b0c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010b0e:	7bfb      	ldrb	r3, [r7, #15]
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d159      	bne.n	8010bc8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	781b      	ldrb	r3, [r3, #0]
 8010b18:	2b03      	cmp	r3, #3
 8010b1a:	d149      	bne.n	8010bb0 <sync_fs+0xb4>
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	791b      	ldrb	r3, [r3, #4]
 8010b20:	2b01      	cmp	r3, #1
 8010b22:	d145      	bne.n	8010bb0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	899b      	ldrh	r3, [r3, #12]
 8010b2e:	461a      	mov	r2, r3
 8010b30:	2100      	movs	r1, #0
 8010b32:	f7ff fda8 	bl	8010686 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	3338      	adds	r3, #56	; 0x38
 8010b3a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010b3e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8010b42:	4618      	mov	r0, r3
 8010b44:	f7ff fd37 	bl	80105b6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	3338      	adds	r3, #56	; 0x38
 8010b4c:	4921      	ldr	r1, [pc, #132]	; (8010bd4 <sync_fs+0xd8>)
 8010b4e:	4618      	mov	r0, r3
 8010b50:	f7ff fd4c 	bl	80105ec <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	3338      	adds	r3, #56	; 0x38
 8010b58:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010b5c:	491e      	ldr	r1, [pc, #120]	; (8010bd8 <sync_fs+0xdc>)
 8010b5e:	4618      	mov	r0, r3
 8010b60:	f7ff fd44 	bl	80105ec <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	3338      	adds	r3, #56	; 0x38
 8010b68:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	695b      	ldr	r3, [r3, #20]
 8010b70:	4619      	mov	r1, r3
 8010b72:	4610      	mov	r0, r2
 8010b74:	f7ff fd3a 	bl	80105ec <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	3338      	adds	r3, #56	; 0x38
 8010b7c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	691b      	ldr	r3, [r3, #16]
 8010b84:	4619      	mov	r1, r3
 8010b86:	4610      	mov	r0, r2
 8010b88:	f7ff fd30 	bl	80105ec <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b90:	1c5a      	adds	r2, r3, #1
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	7858      	ldrb	r0, [r3, #1]
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010ba4:	2301      	movs	r3, #1
 8010ba6:	f7ff fc8d 	bl	80104c4 <disk_write>
			fs->fsi_flag = 0;
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	2200      	movs	r2, #0
 8010bae:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	785b      	ldrb	r3, [r3, #1]
 8010bb4:	2200      	movs	r2, #0
 8010bb6:	2100      	movs	r1, #0
 8010bb8:	4618      	mov	r0, r3
 8010bba:	f7ff fca3 	bl	8010504 <disk_ioctl>
 8010bbe:	4603      	mov	r3, r0
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d001      	beq.n	8010bc8 <sync_fs+0xcc>
 8010bc4:	2301      	movs	r3, #1
 8010bc6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8010bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bca:	4618      	mov	r0, r3
 8010bcc:	3710      	adds	r7, #16
 8010bce:	46bd      	mov	sp, r7
 8010bd0:	bd80      	pop	{r7, pc}
 8010bd2:	bf00      	nop
 8010bd4:	41615252 	.word	0x41615252
 8010bd8:	61417272 	.word	0x61417272

08010bdc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8010bdc:	b480      	push	{r7}
 8010bde:	b083      	sub	sp, #12
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	6078      	str	r0, [r7, #4]
 8010be4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8010be6:	683b      	ldr	r3, [r7, #0]
 8010be8:	3b02      	subs	r3, #2
 8010bea:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	69db      	ldr	r3, [r3, #28]
 8010bf0:	3b02      	subs	r3, #2
 8010bf2:	683a      	ldr	r2, [r7, #0]
 8010bf4:	429a      	cmp	r2, r3
 8010bf6:	d301      	bcc.n	8010bfc <clust2sect+0x20>
 8010bf8:	2300      	movs	r3, #0
 8010bfa:	e008      	b.n	8010c0e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	895b      	ldrh	r3, [r3, #10]
 8010c00:	461a      	mov	r2, r3
 8010c02:	683b      	ldr	r3, [r7, #0]
 8010c04:	fb03 f202 	mul.w	r2, r3, r2
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c0c:	4413      	add	r3, r2
}
 8010c0e:	4618      	mov	r0, r3
 8010c10:	370c      	adds	r7, #12
 8010c12:	46bd      	mov	sp, r7
 8010c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c18:	4770      	bx	lr

08010c1a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8010c1a:	b580      	push	{r7, lr}
 8010c1c:	b086      	sub	sp, #24
 8010c1e:	af00      	add	r7, sp, #0
 8010c20:	6078      	str	r0, [r7, #4]
 8010c22:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010c2a:	683b      	ldr	r3, [r7, #0]
 8010c2c:	2b01      	cmp	r3, #1
 8010c2e:	d904      	bls.n	8010c3a <get_fat+0x20>
 8010c30:	693b      	ldr	r3, [r7, #16]
 8010c32:	69db      	ldr	r3, [r3, #28]
 8010c34:	683a      	ldr	r2, [r7, #0]
 8010c36:	429a      	cmp	r2, r3
 8010c38:	d302      	bcc.n	8010c40 <get_fat+0x26>
		val = 1;	/* Internal error */
 8010c3a:	2301      	movs	r3, #1
 8010c3c:	617b      	str	r3, [r7, #20]
 8010c3e:	e0b7      	b.n	8010db0 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8010c40:	f04f 33ff 	mov.w	r3, #4294967295
 8010c44:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8010c46:	693b      	ldr	r3, [r7, #16]
 8010c48:	781b      	ldrb	r3, [r3, #0]
 8010c4a:	2b02      	cmp	r3, #2
 8010c4c:	d05a      	beq.n	8010d04 <get_fat+0xea>
 8010c4e:	2b03      	cmp	r3, #3
 8010c50:	d07d      	beq.n	8010d4e <get_fat+0x134>
 8010c52:	2b01      	cmp	r3, #1
 8010c54:	f040 80a2 	bne.w	8010d9c <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8010c58:	683b      	ldr	r3, [r7, #0]
 8010c5a:	60fb      	str	r3, [r7, #12]
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	085b      	lsrs	r3, r3, #1
 8010c60:	68fa      	ldr	r2, [r7, #12]
 8010c62:	4413      	add	r3, r2
 8010c64:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010c66:	693b      	ldr	r3, [r7, #16]
 8010c68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010c6a:	693b      	ldr	r3, [r7, #16]
 8010c6c:	899b      	ldrh	r3, [r3, #12]
 8010c6e:	4619      	mov	r1, r3
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	fbb3 f3f1 	udiv	r3, r3, r1
 8010c76:	4413      	add	r3, r2
 8010c78:	4619      	mov	r1, r3
 8010c7a:	6938      	ldr	r0, [r7, #16]
 8010c7c:	f7ff ff10 	bl	8010aa0 <move_window>
 8010c80:	4603      	mov	r3, r0
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	f040 808d 	bne.w	8010da2 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	1c5a      	adds	r2, r3, #1
 8010c8c:	60fa      	str	r2, [r7, #12]
 8010c8e:	693a      	ldr	r2, [r7, #16]
 8010c90:	8992      	ldrh	r2, [r2, #12]
 8010c92:	fbb3 f1f2 	udiv	r1, r3, r2
 8010c96:	fb02 f201 	mul.w	r2, r2, r1
 8010c9a:	1a9b      	subs	r3, r3, r2
 8010c9c:	693a      	ldr	r2, [r7, #16]
 8010c9e:	4413      	add	r3, r2
 8010ca0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010ca4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010ca6:	693b      	ldr	r3, [r7, #16]
 8010ca8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010caa:	693b      	ldr	r3, [r7, #16]
 8010cac:	899b      	ldrh	r3, [r3, #12]
 8010cae:	4619      	mov	r1, r3
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8010cb6:	4413      	add	r3, r2
 8010cb8:	4619      	mov	r1, r3
 8010cba:	6938      	ldr	r0, [r7, #16]
 8010cbc:	f7ff fef0 	bl	8010aa0 <move_window>
 8010cc0:	4603      	mov	r3, r0
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d16f      	bne.n	8010da6 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8010cc6:	693b      	ldr	r3, [r7, #16]
 8010cc8:	899b      	ldrh	r3, [r3, #12]
 8010cca:	461a      	mov	r2, r3
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	fbb3 f1f2 	udiv	r1, r3, r2
 8010cd2:	fb02 f201 	mul.w	r2, r2, r1
 8010cd6:	1a9b      	subs	r3, r3, r2
 8010cd8:	693a      	ldr	r2, [r7, #16]
 8010cda:	4413      	add	r3, r2
 8010cdc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010ce0:	021b      	lsls	r3, r3, #8
 8010ce2:	461a      	mov	r2, r3
 8010ce4:	68bb      	ldr	r3, [r7, #8]
 8010ce6:	4313      	orrs	r3, r2
 8010ce8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8010cea:	683b      	ldr	r3, [r7, #0]
 8010cec:	f003 0301 	and.w	r3, r3, #1
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d002      	beq.n	8010cfa <get_fat+0xe0>
 8010cf4:	68bb      	ldr	r3, [r7, #8]
 8010cf6:	091b      	lsrs	r3, r3, #4
 8010cf8:	e002      	b.n	8010d00 <get_fat+0xe6>
 8010cfa:	68bb      	ldr	r3, [r7, #8]
 8010cfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010d00:	617b      	str	r3, [r7, #20]
			break;
 8010d02:	e055      	b.n	8010db0 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010d04:	693b      	ldr	r3, [r7, #16]
 8010d06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010d08:	693b      	ldr	r3, [r7, #16]
 8010d0a:	899b      	ldrh	r3, [r3, #12]
 8010d0c:	085b      	lsrs	r3, r3, #1
 8010d0e:	b29b      	uxth	r3, r3
 8010d10:	4619      	mov	r1, r3
 8010d12:	683b      	ldr	r3, [r7, #0]
 8010d14:	fbb3 f3f1 	udiv	r3, r3, r1
 8010d18:	4413      	add	r3, r2
 8010d1a:	4619      	mov	r1, r3
 8010d1c:	6938      	ldr	r0, [r7, #16]
 8010d1e:	f7ff febf 	bl	8010aa0 <move_window>
 8010d22:	4603      	mov	r3, r0
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d140      	bne.n	8010daa <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8010d28:	693b      	ldr	r3, [r7, #16]
 8010d2a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010d2e:	683b      	ldr	r3, [r7, #0]
 8010d30:	005b      	lsls	r3, r3, #1
 8010d32:	693a      	ldr	r2, [r7, #16]
 8010d34:	8992      	ldrh	r2, [r2, #12]
 8010d36:	fbb3 f0f2 	udiv	r0, r3, r2
 8010d3a:	fb02 f200 	mul.w	r2, r2, r0
 8010d3e:	1a9b      	subs	r3, r3, r2
 8010d40:	440b      	add	r3, r1
 8010d42:	4618      	mov	r0, r3
 8010d44:	f7ff fbfc 	bl	8010540 <ld_word>
 8010d48:	4603      	mov	r3, r0
 8010d4a:	617b      	str	r3, [r7, #20]
			break;
 8010d4c:	e030      	b.n	8010db0 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010d4e:	693b      	ldr	r3, [r7, #16]
 8010d50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010d52:	693b      	ldr	r3, [r7, #16]
 8010d54:	899b      	ldrh	r3, [r3, #12]
 8010d56:	089b      	lsrs	r3, r3, #2
 8010d58:	b29b      	uxth	r3, r3
 8010d5a:	4619      	mov	r1, r3
 8010d5c:	683b      	ldr	r3, [r7, #0]
 8010d5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8010d62:	4413      	add	r3, r2
 8010d64:	4619      	mov	r1, r3
 8010d66:	6938      	ldr	r0, [r7, #16]
 8010d68:	f7ff fe9a 	bl	8010aa0 <move_window>
 8010d6c:	4603      	mov	r3, r0
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d11d      	bne.n	8010dae <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010d72:	693b      	ldr	r3, [r7, #16]
 8010d74:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010d78:	683b      	ldr	r3, [r7, #0]
 8010d7a:	009b      	lsls	r3, r3, #2
 8010d7c:	693a      	ldr	r2, [r7, #16]
 8010d7e:	8992      	ldrh	r2, [r2, #12]
 8010d80:	fbb3 f0f2 	udiv	r0, r3, r2
 8010d84:	fb02 f200 	mul.w	r2, r2, r0
 8010d88:	1a9b      	subs	r3, r3, r2
 8010d8a:	440b      	add	r3, r1
 8010d8c:	4618      	mov	r0, r3
 8010d8e:	f7ff fbef 	bl	8010570 <ld_dword>
 8010d92:	4603      	mov	r3, r0
 8010d94:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8010d98:	617b      	str	r3, [r7, #20]
			break;
 8010d9a:	e009      	b.n	8010db0 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8010d9c:	2301      	movs	r3, #1
 8010d9e:	617b      	str	r3, [r7, #20]
 8010da0:	e006      	b.n	8010db0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010da2:	bf00      	nop
 8010da4:	e004      	b.n	8010db0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010da6:	bf00      	nop
 8010da8:	e002      	b.n	8010db0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010daa:	bf00      	nop
 8010dac:	e000      	b.n	8010db0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010dae:	bf00      	nop
		}
	}

	return val;
 8010db0:	697b      	ldr	r3, [r7, #20]
}
 8010db2:	4618      	mov	r0, r3
 8010db4:	3718      	adds	r7, #24
 8010db6:	46bd      	mov	sp, r7
 8010db8:	bd80      	pop	{r7, pc}

08010dba <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8010dba:	b590      	push	{r4, r7, lr}
 8010dbc:	b089      	sub	sp, #36	; 0x24
 8010dbe:	af00      	add	r7, sp, #0
 8010dc0:	60f8      	str	r0, [r7, #12]
 8010dc2:	60b9      	str	r1, [r7, #8]
 8010dc4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8010dc6:	2302      	movs	r3, #2
 8010dc8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8010dca:	68bb      	ldr	r3, [r7, #8]
 8010dcc:	2b01      	cmp	r3, #1
 8010dce:	f240 8106 	bls.w	8010fde <put_fat+0x224>
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	69db      	ldr	r3, [r3, #28]
 8010dd6:	68ba      	ldr	r2, [r7, #8]
 8010dd8:	429a      	cmp	r2, r3
 8010dda:	f080 8100 	bcs.w	8010fde <put_fat+0x224>
		switch (fs->fs_type) {
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	781b      	ldrb	r3, [r3, #0]
 8010de2:	2b02      	cmp	r3, #2
 8010de4:	f000 8088 	beq.w	8010ef8 <put_fat+0x13e>
 8010de8:	2b03      	cmp	r3, #3
 8010dea:	f000 80b0 	beq.w	8010f4e <put_fat+0x194>
 8010dee:	2b01      	cmp	r3, #1
 8010df0:	f040 80f5 	bne.w	8010fde <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8010df4:	68bb      	ldr	r3, [r7, #8]
 8010df6:	61bb      	str	r3, [r7, #24]
 8010df8:	69bb      	ldr	r3, [r7, #24]
 8010dfa:	085b      	lsrs	r3, r3, #1
 8010dfc:	69ba      	ldr	r2, [r7, #24]
 8010dfe:	4413      	add	r3, r2
 8010e00:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	899b      	ldrh	r3, [r3, #12]
 8010e0a:	4619      	mov	r1, r3
 8010e0c:	69bb      	ldr	r3, [r7, #24]
 8010e0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8010e12:	4413      	add	r3, r2
 8010e14:	4619      	mov	r1, r3
 8010e16:	68f8      	ldr	r0, [r7, #12]
 8010e18:	f7ff fe42 	bl	8010aa0 <move_window>
 8010e1c:	4603      	mov	r3, r0
 8010e1e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010e20:	7ffb      	ldrb	r3, [r7, #31]
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	f040 80d4 	bne.w	8010fd0 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010e2e:	69bb      	ldr	r3, [r7, #24]
 8010e30:	1c5a      	adds	r2, r3, #1
 8010e32:	61ba      	str	r2, [r7, #24]
 8010e34:	68fa      	ldr	r2, [r7, #12]
 8010e36:	8992      	ldrh	r2, [r2, #12]
 8010e38:	fbb3 f0f2 	udiv	r0, r3, r2
 8010e3c:	fb02 f200 	mul.w	r2, r2, r0
 8010e40:	1a9b      	subs	r3, r3, r2
 8010e42:	440b      	add	r3, r1
 8010e44:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8010e46:	68bb      	ldr	r3, [r7, #8]
 8010e48:	f003 0301 	and.w	r3, r3, #1
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d00d      	beq.n	8010e6c <put_fat+0xb2>
 8010e50:	697b      	ldr	r3, [r7, #20]
 8010e52:	781b      	ldrb	r3, [r3, #0]
 8010e54:	b25b      	sxtb	r3, r3
 8010e56:	f003 030f 	and.w	r3, r3, #15
 8010e5a:	b25a      	sxtb	r2, r3
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	b2db      	uxtb	r3, r3
 8010e60:	011b      	lsls	r3, r3, #4
 8010e62:	b25b      	sxtb	r3, r3
 8010e64:	4313      	orrs	r3, r2
 8010e66:	b25b      	sxtb	r3, r3
 8010e68:	b2db      	uxtb	r3, r3
 8010e6a:	e001      	b.n	8010e70 <put_fat+0xb6>
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	b2db      	uxtb	r3, r3
 8010e70:	697a      	ldr	r2, [r7, #20]
 8010e72:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	2201      	movs	r2, #1
 8010e78:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	899b      	ldrh	r3, [r3, #12]
 8010e82:	4619      	mov	r1, r3
 8010e84:	69bb      	ldr	r3, [r7, #24]
 8010e86:	fbb3 f3f1 	udiv	r3, r3, r1
 8010e8a:	4413      	add	r3, r2
 8010e8c:	4619      	mov	r1, r3
 8010e8e:	68f8      	ldr	r0, [r7, #12]
 8010e90:	f7ff fe06 	bl	8010aa0 <move_window>
 8010e94:	4603      	mov	r3, r0
 8010e96:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010e98:	7ffb      	ldrb	r3, [r7, #31]
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	f040 809a 	bne.w	8010fd4 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	899b      	ldrh	r3, [r3, #12]
 8010eaa:	461a      	mov	r2, r3
 8010eac:	69bb      	ldr	r3, [r7, #24]
 8010eae:	fbb3 f0f2 	udiv	r0, r3, r2
 8010eb2:	fb02 f200 	mul.w	r2, r2, r0
 8010eb6:	1a9b      	subs	r3, r3, r2
 8010eb8:	440b      	add	r3, r1
 8010eba:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8010ebc:	68bb      	ldr	r3, [r7, #8]
 8010ebe:	f003 0301 	and.w	r3, r3, #1
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d003      	beq.n	8010ece <put_fat+0x114>
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	091b      	lsrs	r3, r3, #4
 8010eca:	b2db      	uxtb	r3, r3
 8010ecc:	e00e      	b.n	8010eec <put_fat+0x132>
 8010ece:	697b      	ldr	r3, [r7, #20]
 8010ed0:	781b      	ldrb	r3, [r3, #0]
 8010ed2:	b25b      	sxtb	r3, r3
 8010ed4:	f023 030f 	bic.w	r3, r3, #15
 8010ed8:	b25a      	sxtb	r2, r3
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	0a1b      	lsrs	r3, r3, #8
 8010ede:	b25b      	sxtb	r3, r3
 8010ee0:	f003 030f 	and.w	r3, r3, #15
 8010ee4:	b25b      	sxtb	r3, r3
 8010ee6:	4313      	orrs	r3, r2
 8010ee8:	b25b      	sxtb	r3, r3
 8010eea:	b2db      	uxtb	r3, r3
 8010eec:	697a      	ldr	r2, [r7, #20]
 8010eee:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	2201      	movs	r2, #1
 8010ef4:	70da      	strb	r2, [r3, #3]
			break;
 8010ef6:	e072      	b.n	8010fde <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	899b      	ldrh	r3, [r3, #12]
 8010f00:	085b      	lsrs	r3, r3, #1
 8010f02:	b29b      	uxth	r3, r3
 8010f04:	4619      	mov	r1, r3
 8010f06:	68bb      	ldr	r3, [r7, #8]
 8010f08:	fbb3 f3f1 	udiv	r3, r3, r1
 8010f0c:	4413      	add	r3, r2
 8010f0e:	4619      	mov	r1, r3
 8010f10:	68f8      	ldr	r0, [r7, #12]
 8010f12:	f7ff fdc5 	bl	8010aa0 <move_window>
 8010f16:	4603      	mov	r3, r0
 8010f18:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010f1a:	7ffb      	ldrb	r3, [r7, #31]
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d15b      	bne.n	8010fd8 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010f26:	68bb      	ldr	r3, [r7, #8]
 8010f28:	005b      	lsls	r3, r3, #1
 8010f2a:	68fa      	ldr	r2, [r7, #12]
 8010f2c:	8992      	ldrh	r2, [r2, #12]
 8010f2e:	fbb3 f0f2 	udiv	r0, r3, r2
 8010f32:	fb02 f200 	mul.w	r2, r2, r0
 8010f36:	1a9b      	subs	r3, r3, r2
 8010f38:	440b      	add	r3, r1
 8010f3a:	687a      	ldr	r2, [r7, #4]
 8010f3c:	b292      	uxth	r2, r2
 8010f3e:	4611      	mov	r1, r2
 8010f40:	4618      	mov	r0, r3
 8010f42:	f7ff fb38 	bl	80105b6 <st_word>
			fs->wflag = 1;
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	2201      	movs	r2, #1
 8010f4a:	70da      	strb	r2, [r3, #3]
			break;
 8010f4c:	e047      	b.n	8010fde <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	899b      	ldrh	r3, [r3, #12]
 8010f56:	089b      	lsrs	r3, r3, #2
 8010f58:	b29b      	uxth	r3, r3
 8010f5a:	4619      	mov	r1, r3
 8010f5c:	68bb      	ldr	r3, [r7, #8]
 8010f5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8010f62:	4413      	add	r3, r2
 8010f64:	4619      	mov	r1, r3
 8010f66:	68f8      	ldr	r0, [r7, #12]
 8010f68:	f7ff fd9a 	bl	8010aa0 <move_window>
 8010f6c:	4603      	mov	r3, r0
 8010f6e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010f70:	7ffb      	ldrb	r3, [r7, #31]
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d132      	bne.n	8010fdc <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010f82:	68bb      	ldr	r3, [r7, #8]
 8010f84:	009b      	lsls	r3, r3, #2
 8010f86:	68fa      	ldr	r2, [r7, #12]
 8010f88:	8992      	ldrh	r2, [r2, #12]
 8010f8a:	fbb3 f0f2 	udiv	r0, r3, r2
 8010f8e:	fb02 f200 	mul.w	r2, r2, r0
 8010f92:	1a9b      	subs	r3, r3, r2
 8010f94:	440b      	add	r3, r1
 8010f96:	4618      	mov	r0, r3
 8010f98:	f7ff faea 	bl	8010570 <ld_dword>
 8010f9c:	4603      	mov	r3, r0
 8010f9e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8010fa2:	4323      	orrs	r3, r4
 8010fa4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010fac:	68bb      	ldr	r3, [r7, #8]
 8010fae:	009b      	lsls	r3, r3, #2
 8010fb0:	68fa      	ldr	r2, [r7, #12]
 8010fb2:	8992      	ldrh	r2, [r2, #12]
 8010fb4:	fbb3 f0f2 	udiv	r0, r3, r2
 8010fb8:	fb02 f200 	mul.w	r2, r2, r0
 8010fbc:	1a9b      	subs	r3, r3, r2
 8010fbe:	440b      	add	r3, r1
 8010fc0:	6879      	ldr	r1, [r7, #4]
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	f7ff fb12 	bl	80105ec <st_dword>
			fs->wflag = 1;
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	2201      	movs	r2, #1
 8010fcc:	70da      	strb	r2, [r3, #3]
			break;
 8010fce:	e006      	b.n	8010fde <put_fat+0x224>
			if (res != FR_OK) break;
 8010fd0:	bf00      	nop
 8010fd2:	e004      	b.n	8010fde <put_fat+0x224>
			if (res != FR_OK) break;
 8010fd4:	bf00      	nop
 8010fd6:	e002      	b.n	8010fde <put_fat+0x224>
			if (res != FR_OK) break;
 8010fd8:	bf00      	nop
 8010fda:	e000      	b.n	8010fde <put_fat+0x224>
			if (res != FR_OK) break;
 8010fdc:	bf00      	nop
		}
	}
	return res;
 8010fde:	7ffb      	ldrb	r3, [r7, #31]
}
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	3724      	adds	r7, #36	; 0x24
 8010fe4:	46bd      	mov	sp, r7
 8010fe6:	bd90      	pop	{r4, r7, pc}

08010fe8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8010fe8:	b580      	push	{r7, lr}
 8010fea:	b088      	sub	sp, #32
 8010fec:	af00      	add	r7, sp, #0
 8010fee:	60f8      	str	r0, [r7, #12]
 8010ff0:	60b9      	str	r1, [r7, #8]
 8010ff2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8010ff4:	2300      	movs	r3, #0
 8010ff6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8010ffe:	68bb      	ldr	r3, [r7, #8]
 8011000:	2b01      	cmp	r3, #1
 8011002:	d904      	bls.n	801100e <remove_chain+0x26>
 8011004:	69bb      	ldr	r3, [r7, #24]
 8011006:	69db      	ldr	r3, [r3, #28]
 8011008:	68ba      	ldr	r2, [r7, #8]
 801100a:	429a      	cmp	r2, r3
 801100c:	d301      	bcc.n	8011012 <remove_chain+0x2a>
 801100e:	2302      	movs	r3, #2
 8011010:	e04b      	b.n	80110aa <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	2b00      	cmp	r3, #0
 8011016:	d00c      	beq.n	8011032 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8011018:	f04f 32ff 	mov.w	r2, #4294967295
 801101c:	6879      	ldr	r1, [r7, #4]
 801101e:	69b8      	ldr	r0, [r7, #24]
 8011020:	f7ff fecb 	bl	8010dba <put_fat>
 8011024:	4603      	mov	r3, r0
 8011026:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8011028:	7ffb      	ldrb	r3, [r7, #31]
 801102a:	2b00      	cmp	r3, #0
 801102c:	d001      	beq.n	8011032 <remove_chain+0x4a>
 801102e:	7ffb      	ldrb	r3, [r7, #31]
 8011030:	e03b      	b.n	80110aa <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8011032:	68b9      	ldr	r1, [r7, #8]
 8011034:	68f8      	ldr	r0, [r7, #12]
 8011036:	f7ff fdf0 	bl	8010c1a <get_fat>
 801103a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801103c:	697b      	ldr	r3, [r7, #20]
 801103e:	2b00      	cmp	r3, #0
 8011040:	d031      	beq.n	80110a6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8011042:	697b      	ldr	r3, [r7, #20]
 8011044:	2b01      	cmp	r3, #1
 8011046:	d101      	bne.n	801104c <remove_chain+0x64>
 8011048:	2302      	movs	r3, #2
 801104a:	e02e      	b.n	80110aa <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801104c:	697b      	ldr	r3, [r7, #20]
 801104e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011052:	d101      	bne.n	8011058 <remove_chain+0x70>
 8011054:	2301      	movs	r3, #1
 8011056:	e028      	b.n	80110aa <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8011058:	2200      	movs	r2, #0
 801105a:	68b9      	ldr	r1, [r7, #8]
 801105c:	69b8      	ldr	r0, [r7, #24]
 801105e:	f7ff feac 	bl	8010dba <put_fat>
 8011062:	4603      	mov	r3, r0
 8011064:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8011066:	7ffb      	ldrb	r3, [r7, #31]
 8011068:	2b00      	cmp	r3, #0
 801106a:	d001      	beq.n	8011070 <remove_chain+0x88>
 801106c:	7ffb      	ldrb	r3, [r7, #31]
 801106e:	e01c      	b.n	80110aa <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8011070:	69bb      	ldr	r3, [r7, #24]
 8011072:	695a      	ldr	r2, [r3, #20]
 8011074:	69bb      	ldr	r3, [r7, #24]
 8011076:	69db      	ldr	r3, [r3, #28]
 8011078:	3b02      	subs	r3, #2
 801107a:	429a      	cmp	r2, r3
 801107c:	d20b      	bcs.n	8011096 <remove_chain+0xae>
			fs->free_clst++;
 801107e:	69bb      	ldr	r3, [r7, #24]
 8011080:	695b      	ldr	r3, [r3, #20]
 8011082:	1c5a      	adds	r2, r3, #1
 8011084:	69bb      	ldr	r3, [r7, #24]
 8011086:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8011088:	69bb      	ldr	r3, [r7, #24]
 801108a:	791b      	ldrb	r3, [r3, #4]
 801108c:	f043 0301 	orr.w	r3, r3, #1
 8011090:	b2da      	uxtb	r2, r3
 8011092:	69bb      	ldr	r3, [r7, #24]
 8011094:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8011096:	697b      	ldr	r3, [r7, #20]
 8011098:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801109a:	69bb      	ldr	r3, [r7, #24]
 801109c:	69db      	ldr	r3, [r3, #28]
 801109e:	68ba      	ldr	r2, [r7, #8]
 80110a0:	429a      	cmp	r2, r3
 80110a2:	d3c6      	bcc.n	8011032 <remove_chain+0x4a>
 80110a4:	e000      	b.n	80110a8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80110a6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80110a8:	2300      	movs	r3, #0
}
 80110aa:	4618      	mov	r0, r3
 80110ac:	3720      	adds	r7, #32
 80110ae:	46bd      	mov	sp, r7
 80110b0:	bd80      	pop	{r7, pc}

080110b2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80110b2:	b580      	push	{r7, lr}
 80110b4:	b088      	sub	sp, #32
 80110b6:	af00      	add	r7, sp, #0
 80110b8:	6078      	str	r0, [r7, #4]
 80110ba:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80110c2:	683b      	ldr	r3, [r7, #0]
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d10d      	bne.n	80110e4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80110c8:	693b      	ldr	r3, [r7, #16]
 80110ca:	691b      	ldr	r3, [r3, #16]
 80110cc:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80110ce:	69bb      	ldr	r3, [r7, #24]
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d004      	beq.n	80110de <create_chain+0x2c>
 80110d4:	693b      	ldr	r3, [r7, #16]
 80110d6:	69db      	ldr	r3, [r3, #28]
 80110d8:	69ba      	ldr	r2, [r7, #24]
 80110da:	429a      	cmp	r2, r3
 80110dc:	d31b      	bcc.n	8011116 <create_chain+0x64>
 80110de:	2301      	movs	r3, #1
 80110e0:	61bb      	str	r3, [r7, #24]
 80110e2:	e018      	b.n	8011116 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80110e4:	6839      	ldr	r1, [r7, #0]
 80110e6:	6878      	ldr	r0, [r7, #4]
 80110e8:	f7ff fd97 	bl	8010c1a <get_fat>
 80110ec:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	2b01      	cmp	r3, #1
 80110f2:	d801      	bhi.n	80110f8 <create_chain+0x46>
 80110f4:	2301      	movs	r3, #1
 80110f6:	e070      	b.n	80111da <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110fe:	d101      	bne.n	8011104 <create_chain+0x52>
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	e06a      	b.n	80111da <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8011104:	693b      	ldr	r3, [r7, #16]
 8011106:	69db      	ldr	r3, [r3, #28]
 8011108:	68fa      	ldr	r2, [r7, #12]
 801110a:	429a      	cmp	r2, r3
 801110c:	d201      	bcs.n	8011112 <create_chain+0x60>
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	e063      	b.n	80111da <create_chain+0x128>
		scl = clst;
 8011112:	683b      	ldr	r3, [r7, #0]
 8011114:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8011116:	69bb      	ldr	r3, [r7, #24]
 8011118:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801111a:	69fb      	ldr	r3, [r7, #28]
 801111c:	3301      	adds	r3, #1
 801111e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8011120:	693b      	ldr	r3, [r7, #16]
 8011122:	69db      	ldr	r3, [r3, #28]
 8011124:	69fa      	ldr	r2, [r7, #28]
 8011126:	429a      	cmp	r2, r3
 8011128:	d307      	bcc.n	801113a <create_chain+0x88>
				ncl = 2;
 801112a:	2302      	movs	r3, #2
 801112c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801112e:	69fa      	ldr	r2, [r7, #28]
 8011130:	69bb      	ldr	r3, [r7, #24]
 8011132:	429a      	cmp	r2, r3
 8011134:	d901      	bls.n	801113a <create_chain+0x88>
 8011136:	2300      	movs	r3, #0
 8011138:	e04f      	b.n	80111da <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801113a:	69f9      	ldr	r1, [r7, #28]
 801113c:	6878      	ldr	r0, [r7, #4]
 801113e:	f7ff fd6c 	bl	8010c1a <get_fat>
 8011142:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	2b00      	cmp	r3, #0
 8011148:	d00e      	beq.n	8011168 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	2b01      	cmp	r3, #1
 801114e:	d003      	beq.n	8011158 <create_chain+0xa6>
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011156:	d101      	bne.n	801115c <create_chain+0xaa>
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	e03e      	b.n	80111da <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801115c:	69fa      	ldr	r2, [r7, #28]
 801115e:	69bb      	ldr	r3, [r7, #24]
 8011160:	429a      	cmp	r2, r3
 8011162:	d1da      	bne.n	801111a <create_chain+0x68>
 8011164:	2300      	movs	r3, #0
 8011166:	e038      	b.n	80111da <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8011168:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801116a:	f04f 32ff 	mov.w	r2, #4294967295
 801116e:	69f9      	ldr	r1, [r7, #28]
 8011170:	6938      	ldr	r0, [r7, #16]
 8011172:	f7ff fe22 	bl	8010dba <put_fat>
 8011176:	4603      	mov	r3, r0
 8011178:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801117a:	7dfb      	ldrb	r3, [r7, #23]
 801117c:	2b00      	cmp	r3, #0
 801117e:	d109      	bne.n	8011194 <create_chain+0xe2>
 8011180:	683b      	ldr	r3, [r7, #0]
 8011182:	2b00      	cmp	r3, #0
 8011184:	d006      	beq.n	8011194 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8011186:	69fa      	ldr	r2, [r7, #28]
 8011188:	6839      	ldr	r1, [r7, #0]
 801118a:	6938      	ldr	r0, [r7, #16]
 801118c:	f7ff fe15 	bl	8010dba <put_fat>
 8011190:	4603      	mov	r3, r0
 8011192:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8011194:	7dfb      	ldrb	r3, [r7, #23]
 8011196:	2b00      	cmp	r3, #0
 8011198:	d116      	bne.n	80111c8 <create_chain+0x116>
		fs->last_clst = ncl;
 801119a:	693b      	ldr	r3, [r7, #16]
 801119c:	69fa      	ldr	r2, [r7, #28]
 801119e:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80111a0:	693b      	ldr	r3, [r7, #16]
 80111a2:	695a      	ldr	r2, [r3, #20]
 80111a4:	693b      	ldr	r3, [r7, #16]
 80111a6:	69db      	ldr	r3, [r3, #28]
 80111a8:	3b02      	subs	r3, #2
 80111aa:	429a      	cmp	r2, r3
 80111ac:	d804      	bhi.n	80111b8 <create_chain+0x106>
 80111ae:	693b      	ldr	r3, [r7, #16]
 80111b0:	695b      	ldr	r3, [r3, #20]
 80111b2:	1e5a      	subs	r2, r3, #1
 80111b4:	693b      	ldr	r3, [r7, #16]
 80111b6:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80111b8:	693b      	ldr	r3, [r7, #16]
 80111ba:	791b      	ldrb	r3, [r3, #4]
 80111bc:	f043 0301 	orr.w	r3, r3, #1
 80111c0:	b2da      	uxtb	r2, r3
 80111c2:	693b      	ldr	r3, [r7, #16]
 80111c4:	711a      	strb	r2, [r3, #4]
 80111c6:	e007      	b.n	80111d8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80111c8:	7dfb      	ldrb	r3, [r7, #23]
 80111ca:	2b01      	cmp	r3, #1
 80111cc:	d102      	bne.n	80111d4 <create_chain+0x122>
 80111ce:	f04f 33ff 	mov.w	r3, #4294967295
 80111d2:	e000      	b.n	80111d6 <create_chain+0x124>
 80111d4:	2301      	movs	r3, #1
 80111d6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80111d8:	69fb      	ldr	r3, [r7, #28]
}
 80111da:	4618      	mov	r0, r3
 80111dc:	3720      	adds	r7, #32
 80111de:	46bd      	mov	sp, r7
 80111e0:	bd80      	pop	{r7, pc}

080111e2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80111e2:	b480      	push	{r7}
 80111e4:	b087      	sub	sp, #28
 80111e6:	af00      	add	r7, sp, #0
 80111e8:	6078      	str	r0, [r7, #4]
 80111ea:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111f6:	3304      	adds	r3, #4
 80111f8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	899b      	ldrh	r3, [r3, #12]
 80111fe:	461a      	mov	r2, r3
 8011200:	683b      	ldr	r3, [r7, #0]
 8011202:	fbb3 f3f2 	udiv	r3, r3, r2
 8011206:	68fa      	ldr	r2, [r7, #12]
 8011208:	8952      	ldrh	r2, [r2, #10]
 801120a:	fbb3 f3f2 	udiv	r3, r3, r2
 801120e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011210:	693b      	ldr	r3, [r7, #16]
 8011212:	1d1a      	adds	r2, r3, #4
 8011214:	613a      	str	r2, [r7, #16]
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801121a:	68bb      	ldr	r3, [r7, #8]
 801121c:	2b00      	cmp	r3, #0
 801121e:	d101      	bne.n	8011224 <clmt_clust+0x42>
 8011220:	2300      	movs	r3, #0
 8011222:	e010      	b.n	8011246 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8011224:	697a      	ldr	r2, [r7, #20]
 8011226:	68bb      	ldr	r3, [r7, #8]
 8011228:	429a      	cmp	r2, r3
 801122a:	d307      	bcc.n	801123c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 801122c:	697a      	ldr	r2, [r7, #20]
 801122e:	68bb      	ldr	r3, [r7, #8]
 8011230:	1ad3      	subs	r3, r2, r3
 8011232:	617b      	str	r3, [r7, #20]
 8011234:	693b      	ldr	r3, [r7, #16]
 8011236:	3304      	adds	r3, #4
 8011238:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801123a:	e7e9      	b.n	8011210 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 801123c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801123e:	693b      	ldr	r3, [r7, #16]
 8011240:	681a      	ldr	r2, [r3, #0]
 8011242:	697b      	ldr	r3, [r7, #20]
 8011244:	4413      	add	r3, r2
}
 8011246:	4618      	mov	r0, r3
 8011248:	371c      	adds	r7, #28
 801124a:	46bd      	mov	sp, r7
 801124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011250:	4770      	bx	lr

08011252 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8011252:	b580      	push	{r7, lr}
 8011254:	b086      	sub	sp, #24
 8011256:	af00      	add	r7, sp, #0
 8011258:	6078      	str	r0, [r7, #4]
 801125a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8011262:	683b      	ldr	r3, [r7, #0]
 8011264:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011268:	d204      	bcs.n	8011274 <dir_sdi+0x22>
 801126a:	683b      	ldr	r3, [r7, #0]
 801126c:	f003 031f 	and.w	r3, r3, #31
 8011270:	2b00      	cmp	r3, #0
 8011272:	d001      	beq.n	8011278 <dir_sdi+0x26>
		return FR_INT_ERR;
 8011274:	2302      	movs	r3, #2
 8011276:	e071      	b.n	801135c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	683a      	ldr	r2, [r7, #0]
 801127c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	689b      	ldr	r3, [r3, #8]
 8011282:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8011284:	697b      	ldr	r3, [r7, #20]
 8011286:	2b00      	cmp	r3, #0
 8011288:	d106      	bne.n	8011298 <dir_sdi+0x46>
 801128a:	693b      	ldr	r3, [r7, #16]
 801128c:	781b      	ldrb	r3, [r3, #0]
 801128e:	2b02      	cmp	r3, #2
 8011290:	d902      	bls.n	8011298 <dir_sdi+0x46>
		clst = fs->dirbase;
 8011292:	693b      	ldr	r3, [r7, #16]
 8011294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011296:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8011298:	697b      	ldr	r3, [r7, #20]
 801129a:	2b00      	cmp	r3, #0
 801129c:	d10c      	bne.n	80112b8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801129e:	683b      	ldr	r3, [r7, #0]
 80112a0:	095b      	lsrs	r3, r3, #5
 80112a2:	693a      	ldr	r2, [r7, #16]
 80112a4:	8912      	ldrh	r2, [r2, #8]
 80112a6:	4293      	cmp	r3, r2
 80112a8:	d301      	bcc.n	80112ae <dir_sdi+0x5c>
 80112aa:	2302      	movs	r3, #2
 80112ac:	e056      	b.n	801135c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80112ae:	693b      	ldr	r3, [r7, #16]
 80112b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	61da      	str	r2, [r3, #28]
 80112b6:	e02d      	b.n	8011314 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80112b8:	693b      	ldr	r3, [r7, #16]
 80112ba:	895b      	ldrh	r3, [r3, #10]
 80112bc:	461a      	mov	r2, r3
 80112be:	693b      	ldr	r3, [r7, #16]
 80112c0:	899b      	ldrh	r3, [r3, #12]
 80112c2:	fb03 f302 	mul.w	r3, r3, r2
 80112c6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80112c8:	e019      	b.n	80112fe <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	6979      	ldr	r1, [r7, #20]
 80112ce:	4618      	mov	r0, r3
 80112d0:	f7ff fca3 	bl	8010c1a <get_fat>
 80112d4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80112d6:	697b      	ldr	r3, [r7, #20]
 80112d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112dc:	d101      	bne.n	80112e2 <dir_sdi+0x90>
 80112de:	2301      	movs	r3, #1
 80112e0:	e03c      	b.n	801135c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80112e2:	697b      	ldr	r3, [r7, #20]
 80112e4:	2b01      	cmp	r3, #1
 80112e6:	d904      	bls.n	80112f2 <dir_sdi+0xa0>
 80112e8:	693b      	ldr	r3, [r7, #16]
 80112ea:	69db      	ldr	r3, [r3, #28]
 80112ec:	697a      	ldr	r2, [r7, #20]
 80112ee:	429a      	cmp	r2, r3
 80112f0:	d301      	bcc.n	80112f6 <dir_sdi+0xa4>
 80112f2:	2302      	movs	r3, #2
 80112f4:	e032      	b.n	801135c <dir_sdi+0x10a>
			ofs -= csz;
 80112f6:	683a      	ldr	r2, [r7, #0]
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	1ad3      	subs	r3, r2, r3
 80112fc:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80112fe:	683a      	ldr	r2, [r7, #0]
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	429a      	cmp	r2, r3
 8011304:	d2e1      	bcs.n	80112ca <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8011306:	6979      	ldr	r1, [r7, #20]
 8011308:	6938      	ldr	r0, [r7, #16]
 801130a:	f7ff fc67 	bl	8010bdc <clust2sect>
 801130e:	4602      	mov	r2, r0
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	697a      	ldr	r2, [r7, #20]
 8011318:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	69db      	ldr	r3, [r3, #28]
 801131e:	2b00      	cmp	r3, #0
 8011320:	d101      	bne.n	8011326 <dir_sdi+0xd4>
 8011322:	2302      	movs	r3, #2
 8011324:	e01a      	b.n	801135c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	69da      	ldr	r2, [r3, #28]
 801132a:	693b      	ldr	r3, [r7, #16]
 801132c:	899b      	ldrh	r3, [r3, #12]
 801132e:	4619      	mov	r1, r3
 8011330:	683b      	ldr	r3, [r7, #0]
 8011332:	fbb3 f3f1 	udiv	r3, r3, r1
 8011336:	441a      	add	r2, r3
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801133c:	693b      	ldr	r3, [r7, #16]
 801133e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011342:	693b      	ldr	r3, [r7, #16]
 8011344:	899b      	ldrh	r3, [r3, #12]
 8011346:	461a      	mov	r2, r3
 8011348:	683b      	ldr	r3, [r7, #0]
 801134a:	fbb3 f0f2 	udiv	r0, r3, r2
 801134e:	fb02 f200 	mul.w	r2, r2, r0
 8011352:	1a9b      	subs	r3, r3, r2
 8011354:	18ca      	adds	r2, r1, r3
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801135a:	2300      	movs	r3, #0
}
 801135c:	4618      	mov	r0, r3
 801135e:	3718      	adds	r7, #24
 8011360:	46bd      	mov	sp, r7
 8011362:	bd80      	pop	{r7, pc}

08011364 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8011364:	b580      	push	{r7, lr}
 8011366:	b086      	sub	sp, #24
 8011368:	af00      	add	r7, sp, #0
 801136a:	6078      	str	r0, [r7, #4]
 801136c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	695b      	ldr	r3, [r3, #20]
 8011378:	3320      	adds	r3, #32
 801137a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	69db      	ldr	r3, [r3, #28]
 8011380:	2b00      	cmp	r3, #0
 8011382:	d003      	beq.n	801138c <dir_next+0x28>
 8011384:	68bb      	ldr	r3, [r7, #8]
 8011386:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801138a:	d301      	bcc.n	8011390 <dir_next+0x2c>
 801138c:	2304      	movs	r3, #4
 801138e:	e0bb      	b.n	8011508 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	899b      	ldrh	r3, [r3, #12]
 8011394:	461a      	mov	r2, r3
 8011396:	68bb      	ldr	r3, [r7, #8]
 8011398:	fbb3 f1f2 	udiv	r1, r3, r2
 801139c:	fb02 f201 	mul.w	r2, r2, r1
 80113a0:	1a9b      	subs	r3, r3, r2
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	f040 809d 	bne.w	80114e2 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	69db      	ldr	r3, [r3, #28]
 80113ac:	1c5a      	adds	r2, r3, #1
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	699b      	ldr	r3, [r3, #24]
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d10b      	bne.n	80113d2 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80113ba:	68bb      	ldr	r3, [r7, #8]
 80113bc:	095b      	lsrs	r3, r3, #5
 80113be:	68fa      	ldr	r2, [r7, #12]
 80113c0:	8912      	ldrh	r2, [r2, #8]
 80113c2:	4293      	cmp	r3, r2
 80113c4:	f0c0 808d 	bcc.w	80114e2 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	2200      	movs	r2, #0
 80113cc:	61da      	str	r2, [r3, #28]
 80113ce:	2304      	movs	r3, #4
 80113d0:	e09a      	b.n	8011508 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	899b      	ldrh	r3, [r3, #12]
 80113d6:	461a      	mov	r2, r3
 80113d8:	68bb      	ldr	r3, [r7, #8]
 80113da:	fbb3 f3f2 	udiv	r3, r3, r2
 80113de:	68fa      	ldr	r2, [r7, #12]
 80113e0:	8952      	ldrh	r2, [r2, #10]
 80113e2:	3a01      	subs	r2, #1
 80113e4:	4013      	ands	r3, r2
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d17b      	bne.n	80114e2 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80113ea:	687a      	ldr	r2, [r7, #4]
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	699b      	ldr	r3, [r3, #24]
 80113f0:	4619      	mov	r1, r3
 80113f2:	4610      	mov	r0, r2
 80113f4:	f7ff fc11 	bl	8010c1a <get_fat>
 80113f8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80113fa:	697b      	ldr	r3, [r7, #20]
 80113fc:	2b01      	cmp	r3, #1
 80113fe:	d801      	bhi.n	8011404 <dir_next+0xa0>
 8011400:	2302      	movs	r3, #2
 8011402:	e081      	b.n	8011508 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011404:	697b      	ldr	r3, [r7, #20]
 8011406:	f1b3 3fff 	cmp.w	r3, #4294967295
 801140a:	d101      	bne.n	8011410 <dir_next+0xac>
 801140c:	2301      	movs	r3, #1
 801140e:	e07b      	b.n	8011508 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	69db      	ldr	r3, [r3, #28]
 8011414:	697a      	ldr	r2, [r7, #20]
 8011416:	429a      	cmp	r2, r3
 8011418:	d359      	bcc.n	80114ce <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801141a:	683b      	ldr	r3, [r7, #0]
 801141c:	2b00      	cmp	r3, #0
 801141e:	d104      	bne.n	801142a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	2200      	movs	r2, #0
 8011424:	61da      	str	r2, [r3, #28]
 8011426:	2304      	movs	r3, #4
 8011428:	e06e      	b.n	8011508 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801142a:	687a      	ldr	r2, [r7, #4]
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	699b      	ldr	r3, [r3, #24]
 8011430:	4619      	mov	r1, r3
 8011432:	4610      	mov	r0, r2
 8011434:	f7ff fe3d 	bl	80110b2 <create_chain>
 8011438:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801143a:	697b      	ldr	r3, [r7, #20]
 801143c:	2b00      	cmp	r3, #0
 801143e:	d101      	bne.n	8011444 <dir_next+0xe0>
 8011440:	2307      	movs	r3, #7
 8011442:	e061      	b.n	8011508 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8011444:	697b      	ldr	r3, [r7, #20]
 8011446:	2b01      	cmp	r3, #1
 8011448:	d101      	bne.n	801144e <dir_next+0xea>
 801144a:	2302      	movs	r3, #2
 801144c:	e05c      	b.n	8011508 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801144e:	697b      	ldr	r3, [r7, #20]
 8011450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011454:	d101      	bne.n	801145a <dir_next+0xf6>
 8011456:	2301      	movs	r3, #1
 8011458:	e056      	b.n	8011508 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801145a:	68f8      	ldr	r0, [r7, #12]
 801145c:	f7ff fadc 	bl	8010a18 <sync_window>
 8011460:	4603      	mov	r3, r0
 8011462:	2b00      	cmp	r3, #0
 8011464:	d001      	beq.n	801146a <dir_next+0x106>
 8011466:	2301      	movs	r3, #1
 8011468:	e04e      	b.n	8011508 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	899b      	ldrh	r3, [r3, #12]
 8011474:	461a      	mov	r2, r3
 8011476:	2100      	movs	r1, #0
 8011478:	f7ff f905 	bl	8010686 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801147c:	2300      	movs	r3, #0
 801147e:	613b      	str	r3, [r7, #16]
 8011480:	6979      	ldr	r1, [r7, #20]
 8011482:	68f8      	ldr	r0, [r7, #12]
 8011484:	f7ff fbaa 	bl	8010bdc <clust2sect>
 8011488:	4602      	mov	r2, r0
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	635a      	str	r2, [r3, #52]	; 0x34
 801148e:	e012      	b.n	80114b6 <dir_next+0x152>
						fs->wflag = 1;
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	2201      	movs	r2, #1
 8011494:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8011496:	68f8      	ldr	r0, [r7, #12]
 8011498:	f7ff fabe 	bl	8010a18 <sync_window>
 801149c:	4603      	mov	r3, r0
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d001      	beq.n	80114a6 <dir_next+0x142>
 80114a2:	2301      	movs	r3, #1
 80114a4:	e030      	b.n	8011508 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80114a6:	693b      	ldr	r3, [r7, #16]
 80114a8:	3301      	adds	r3, #1
 80114aa:	613b      	str	r3, [r7, #16]
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80114b0:	1c5a      	adds	r2, r3, #1
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	635a      	str	r2, [r3, #52]	; 0x34
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	895b      	ldrh	r3, [r3, #10]
 80114ba:	461a      	mov	r2, r3
 80114bc:	693b      	ldr	r3, [r7, #16]
 80114be:	4293      	cmp	r3, r2
 80114c0:	d3e6      	bcc.n	8011490 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80114c6:	693b      	ldr	r3, [r7, #16]
 80114c8:	1ad2      	subs	r2, r2, r3
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	697a      	ldr	r2, [r7, #20]
 80114d2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80114d4:	6979      	ldr	r1, [r7, #20]
 80114d6:	68f8      	ldr	r0, [r7, #12]
 80114d8:	f7ff fb80 	bl	8010bdc <clust2sect>
 80114dc:	4602      	mov	r2, r0
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	68ba      	ldr	r2, [r7, #8]
 80114e6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	899b      	ldrh	r3, [r3, #12]
 80114f2:	461a      	mov	r2, r3
 80114f4:	68bb      	ldr	r3, [r7, #8]
 80114f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80114fa:	fb02 f200 	mul.w	r2, r2, r0
 80114fe:	1a9b      	subs	r3, r3, r2
 8011500:	18ca      	adds	r2, r1, r3
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011506:	2300      	movs	r3, #0
}
 8011508:	4618      	mov	r0, r3
 801150a:	3718      	adds	r7, #24
 801150c:	46bd      	mov	sp, r7
 801150e:	bd80      	pop	{r7, pc}

08011510 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8011510:	b580      	push	{r7, lr}
 8011512:	b086      	sub	sp, #24
 8011514:	af00      	add	r7, sp, #0
 8011516:	6078      	str	r0, [r7, #4]
 8011518:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8011520:	2100      	movs	r1, #0
 8011522:	6878      	ldr	r0, [r7, #4]
 8011524:	f7ff fe95 	bl	8011252 <dir_sdi>
 8011528:	4603      	mov	r3, r0
 801152a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801152c:	7dfb      	ldrb	r3, [r7, #23]
 801152e:	2b00      	cmp	r3, #0
 8011530:	d12b      	bne.n	801158a <dir_alloc+0x7a>
		n = 0;
 8011532:	2300      	movs	r3, #0
 8011534:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	69db      	ldr	r3, [r3, #28]
 801153a:	4619      	mov	r1, r3
 801153c:	68f8      	ldr	r0, [r7, #12]
 801153e:	f7ff faaf 	bl	8010aa0 <move_window>
 8011542:	4603      	mov	r3, r0
 8011544:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011546:	7dfb      	ldrb	r3, [r7, #23]
 8011548:	2b00      	cmp	r3, #0
 801154a:	d11d      	bne.n	8011588 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	6a1b      	ldr	r3, [r3, #32]
 8011550:	781b      	ldrb	r3, [r3, #0]
 8011552:	2be5      	cmp	r3, #229	; 0xe5
 8011554:	d004      	beq.n	8011560 <dir_alloc+0x50>
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	6a1b      	ldr	r3, [r3, #32]
 801155a:	781b      	ldrb	r3, [r3, #0]
 801155c:	2b00      	cmp	r3, #0
 801155e:	d107      	bne.n	8011570 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011560:	693b      	ldr	r3, [r7, #16]
 8011562:	3301      	adds	r3, #1
 8011564:	613b      	str	r3, [r7, #16]
 8011566:	693a      	ldr	r2, [r7, #16]
 8011568:	683b      	ldr	r3, [r7, #0]
 801156a:	429a      	cmp	r2, r3
 801156c:	d102      	bne.n	8011574 <dir_alloc+0x64>
 801156e:	e00c      	b.n	801158a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011570:	2300      	movs	r3, #0
 8011572:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8011574:	2101      	movs	r1, #1
 8011576:	6878      	ldr	r0, [r7, #4]
 8011578:	f7ff fef4 	bl	8011364 <dir_next>
 801157c:	4603      	mov	r3, r0
 801157e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8011580:	7dfb      	ldrb	r3, [r7, #23]
 8011582:	2b00      	cmp	r3, #0
 8011584:	d0d7      	beq.n	8011536 <dir_alloc+0x26>
 8011586:	e000      	b.n	801158a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8011588:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801158a:	7dfb      	ldrb	r3, [r7, #23]
 801158c:	2b04      	cmp	r3, #4
 801158e:	d101      	bne.n	8011594 <dir_alloc+0x84>
 8011590:	2307      	movs	r3, #7
 8011592:	75fb      	strb	r3, [r7, #23]
	return res;
 8011594:	7dfb      	ldrb	r3, [r7, #23]
}
 8011596:	4618      	mov	r0, r3
 8011598:	3718      	adds	r7, #24
 801159a:	46bd      	mov	sp, r7
 801159c:	bd80      	pop	{r7, pc}

0801159e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801159e:	b580      	push	{r7, lr}
 80115a0:	b084      	sub	sp, #16
 80115a2:	af00      	add	r7, sp, #0
 80115a4:	6078      	str	r0, [r7, #4]
 80115a6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80115a8:	683b      	ldr	r3, [r7, #0]
 80115aa:	331a      	adds	r3, #26
 80115ac:	4618      	mov	r0, r3
 80115ae:	f7fe ffc7 	bl	8010540 <ld_word>
 80115b2:	4603      	mov	r3, r0
 80115b4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	781b      	ldrb	r3, [r3, #0]
 80115ba:	2b03      	cmp	r3, #3
 80115bc:	d109      	bne.n	80115d2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80115be:	683b      	ldr	r3, [r7, #0]
 80115c0:	3314      	adds	r3, #20
 80115c2:	4618      	mov	r0, r3
 80115c4:	f7fe ffbc 	bl	8010540 <ld_word>
 80115c8:	4603      	mov	r3, r0
 80115ca:	041b      	lsls	r3, r3, #16
 80115cc:	68fa      	ldr	r2, [r7, #12]
 80115ce:	4313      	orrs	r3, r2
 80115d0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80115d2:	68fb      	ldr	r3, [r7, #12]
}
 80115d4:	4618      	mov	r0, r3
 80115d6:	3710      	adds	r7, #16
 80115d8:	46bd      	mov	sp, r7
 80115da:	bd80      	pop	{r7, pc}

080115dc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80115dc:	b580      	push	{r7, lr}
 80115de:	b084      	sub	sp, #16
 80115e0:	af00      	add	r7, sp, #0
 80115e2:	60f8      	str	r0, [r7, #12]
 80115e4:	60b9      	str	r1, [r7, #8]
 80115e6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80115e8:	68bb      	ldr	r3, [r7, #8]
 80115ea:	331a      	adds	r3, #26
 80115ec:	687a      	ldr	r2, [r7, #4]
 80115ee:	b292      	uxth	r2, r2
 80115f0:	4611      	mov	r1, r2
 80115f2:	4618      	mov	r0, r3
 80115f4:	f7fe ffdf 	bl	80105b6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	781b      	ldrb	r3, [r3, #0]
 80115fc:	2b03      	cmp	r3, #3
 80115fe:	d109      	bne.n	8011614 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8011600:	68bb      	ldr	r3, [r7, #8]
 8011602:	f103 0214 	add.w	r2, r3, #20
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	0c1b      	lsrs	r3, r3, #16
 801160a:	b29b      	uxth	r3, r3
 801160c:	4619      	mov	r1, r3
 801160e:	4610      	mov	r0, r2
 8011610:	f7fe ffd1 	bl	80105b6 <st_word>
	}
}
 8011614:	bf00      	nop
 8011616:	3710      	adds	r7, #16
 8011618:	46bd      	mov	sp, r7
 801161a:	bd80      	pop	{r7, pc}

0801161c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801161c:	b580      	push	{r7, lr}
 801161e:	b086      	sub	sp, #24
 8011620:	af00      	add	r7, sp, #0
 8011622:	6078      	str	r0, [r7, #4]
 8011624:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8011626:	2304      	movs	r3, #4
 8011628:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8011630:	e03c      	b.n	80116ac <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	69db      	ldr	r3, [r3, #28]
 8011636:	4619      	mov	r1, r3
 8011638:	6938      	ldr	r0, [r7, #16]
 801163a:	f7ff fa31 	bl	8010aa0 <move_window>
 801163e:	4603      	mov	r3, r0
 8011640:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011642:	7dfb      	ldrb	r3, [r7, #23]
 8011644:	2b00      	cmp	r3, #0
 8011646:	d136      	bne.n	80116b6 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	6a1b      	ldr	r3, [r3, #32]
 801164c:	781b      	ldrb	r3, [r3, #0]
 801164e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8011650:	7bfb      	ldrb	r3, [r7, #15]
 8011652:	2b00      	cmp	r3, #0
 8011654:	d102      	bne.n	801165c <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8011656:	2304      	movs	r3, #4
 8011658:	75fb      	strb	r3, [r7, #23]
 801165a:	e031      	b.n	80116c0 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	6a1b      	ldr	r3, [r3, #32]
 8011660:	330b      	adds	r3, #11
 8011662:	781b      	ldrb	r3, [r3, #0]
 8011664:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011668:	73bb      	strb	r3, [r7, #14]
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	7bba      	ldrb	r2, [r7, #14]
 801166e:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8011670:	7bfb      	ldrb	r3, [r7, #15]
 8011672:	2be5      	cmp	r3, #229	; 0xe5
 8011674:	d011      	beq.n	801169a <dir_read+0x7e>
 8011676:	7bfb      	ldrb	r3, [r7, #15]
 8011678:	2b2e      	cmp	r3, #46	; 0x2e
 801167a:	d00e      	beq.n	801169a <dir_read+0x7e>
 801167c:	7bbb      	ldrb	r3, [r7, #14]
 801167e:	2b0f      	cmp	r3, #15
 8011680:	d00b      	beq.n	801169a <dir_read+0x7e>
 8011682:	7bbb      	ldrb	r3, [r7, #14]
 8011684:	f023 0320 	bic.w	r3, r3, #32
 8011688:	2b08      	cmp	r3, #8
 801168a:	bf0c      	ite	eq
 801168c:	2301      	moveq	r3, #1
 801168e:	2300      	movne	r3, #0
 8011690:	b2db      	uxtb	r3, r3
 8011692:	461a      	mov	r2, r3
 8011694:	683b      	ldr	r3, [r7, #0]
 8011696:	4293      	cmp	r3, r2
 8011698:	d00f      	beq.n	80116ba <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801169a:	2100      	movs	r1, #0
 801169c:	6878      	ldr	r0, [r7, #4]
 801169e:	f7ff fe61 	bl	8011364 <dir_next>
 80116a2:	4603      	mov	r3, r0
 80116a4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80116a6:	7dfb      	ldrb	r3, [r7, #23]
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d108      	bne.n	80116be <dir_read+0xa2>
	while (dp->sect) {
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	69db      	ldr	r3, [r3, #28]
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d1be      	bne.n	8011632 <dir_read+0x16>
 80116b4:	e004      	b.n	80116c0 <dir_read+0xa4>
		if (res != FR_OK) break;
 80116b6:	bf00      	nop
 80116b8:	e002      	b.n	80116c0 <dir_read+0xa4>
				break;
 80116ba:	bf00      	nop
 80116bc:	e000      	b.n	80116c0 <dir_read+0xa4>
		if (res != FR_OK) break;
 80116be:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80116c0:	7dfb      	ldrb	r3, [r7, #23]
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d002      	beq.n	80116cc <dir_read+0xb0>
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	2200      	movs	r2, #0
 80116ca:	61da      	str	r2, [r3, #28]
	return res;
 80116cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80116ce:	4618      	mov	r0, r3
 80116d0:	3718      	adds	r7, #24
 80116d2:	46bd      	mov	sp, r7
 80116d4:	bd80      	pop	{r7, pc}

080116d6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80116d6:	b580      	push	{r7, lr}
 80116d8:	b086      	sub	sp, #24
 80116da:	af00      	add	r7, sp, #0
 80116dc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80116e4:	2100      	movs	r1, #0
 80116e6:	6878      	ldr	r0, [r7, #4]
 80116e8:	f7ff fdb3 	bl	8011252 <dir_sdi>
 80116ec:	4603      	mov	r3, r0
 80116ee:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80116f0:	7dfb      	ldrb	r3, [r7, #23]
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d001      	beq.n	80116fa <dir_find+0x24>
 80116f6:	7dfb      	ldrb	r3, [r7, #23]
 80116f8:	e03e      	b.n	8011778 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	69db      	ldr	r3, [r3, #28]
 80116fe:	4619      	mov	r1, r3
 8011700:	6938      	ldr	r0, [r7, #16]
 8011702:	f7ff f9cd 	bl	8010aa0 <move_window>
 8011706:	4603      	mov	r3, r0
 8011708:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801170a:	7dfb      	ldrb	r3, [r7, #23]
 801170c:	2b00      	cmp	r3, #0
 801170e:	d12f      	bne.n	8011770 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	6a1b      	ldr	r3, [r3, #32]
 8011714:	781b      	ldrb	r3, [r3, #0]
 8011716:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8011718:	7bfb      	ldrb	r3, [r7, #15]
 801171a:	2b00      	cmp	r3, #0
 801171c:	d102      	bne.n	8011724 <dir_find+0x4e>
 801171e:	2304      	movs	r3, #4
 8011720:	75fb      	strb	r3, [r7, #23]
 8011722:	e028      	b.n	8011776 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	6a1b      	ldr	r3, [r3, #32]
 8011728:	330b      	adds	r3, #11
 801172a:	781b      	ldrb	r3, [r3, #0]
 801172c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011730:	b2da      	uxtb	r2, r3
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	6a1b      	ldr	r3, [r3, #32]
 801173a:	330b      	adds	r3, #11
 801173c:	781b      	ldrb	r3, [r3, #0]
 801173e:	f003 0308 	and.w	r3, r3, #8
 8011742:	2b00      	cmp	r3, #0
 8011744:	d10a      	bne.n	801175c <dir_find+0x86>
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	6a18      	ldr	r0, [r3, #32]
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	3324      	adds	r3, #36	; 0x24
 801174e:	220b      	movs	r2, #11
 8011750:	4619      	mov	r1, r3
 8011752:	f7fe ffb2 	bl	80106ba <mem_cmp>
 8011756:	4603      	mov	r3, r0
 8011758:	2b00      	cmp	r3, #0
 801175a:	d00b      	beq.n	8011774 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801175c:	2100      	movs	r1, #0
 801175e:	6878      	ldr	r0, [r7, #4]
 8011760:	f7ff fe00 	bl	8011364 <dir_next>
 8011764:	4603      	mov	r3, r0
 8011766:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8011768:	7dfb      	ldrb	r3, [r7, #23]
 801176a:	2b00      	cmp	r3, #0
 801176c:	d0c5      	beq.n	80116fa <dir_find+0x24>
 801176e:	e002      	b.n	8011776 <dir_find+0xa0>
		if (res != FR_OK) break;
 8011770:	bf00      	nop
 8011772:	e000      	b.n	8011776 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011774:	bf00      	nop

	return res;
 8011776:	7dfb      	ldrb	r3, [r7, #23]
}
 8011778:	4618      	mov	r0, r3
 801177a:	3718      	adds	r7, #24
 801177c:	46bd      	mov	sp, r7
 801177e:	bd80      	pop	{r7, pc}

08011780 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8011780:	b580      	push	{r7, lr}
 8011782:	b084      	sub	sp, #16
 8011784:	af00      	add	r7, sp, #0
 8011786:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801178e:	2101      	movs	r1, #1
 8011790:	6878      	ldr	r0, [r7, #4]
 8011792:	f7ff febd 	bl	8011510 <dir_alloc>
 8011796:	4603      	mov	r3, r0
 8011798:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801179a:	7bfb      	ldrb	r3, [r7, #15]
 801179c:	2b00      	cmp	r3, #0
 801179e:	d11c      	bne.n	80117da <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	69db      	ldr	r3, [r3, #28]
 80117a4:	4619      	mov	r1, r3
 80117a6:	68b8      	ldr	r0, [r7, #8]
 80117a8:	f7ff f97a 	bl	8010aa0 <move_window>
 80117ac:	4603      	mov	r3, r0
 80117ae:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80117b0:	7bfb      	ldrb	r3, [r7, #15]
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d111      	bne.n	80117da <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	6a1b      	ldr	r3, [r3, #32]
 80117ba:	2220      	movs	r2, #32
 80117bc:	2100      	movs	r1, #0
 80117be:	4618      	mov	r0, r3
 80117c0:	f7fe ff61 	bl	8010686 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	6a18      	ldr	r0, [r3, #32]
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	3324      	adds	r3, #36	; 0x24
 80117cc:	220b      	movs	r2, #11
 80117ce:	4619      	mov	r1, r3
 80117d0:	f7fe ff38 	bl	8010644 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80117d4:	68bb      	ldr	r3, [r7, #8]
 80117d6:	2201      	movs	r2, #1
 80117d8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80117da:	7bfb      	ldrb	r3, [r7, #15]
}
 80117dc:	4618      	mov	r0, r3
 80117de:	3710      	adds	r7, #16
 80117e0:	46bd      	mov	sp, r7
 80117e2:	bd80      	pop	{r7, pc}

080117e4 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 80117e4:	b580      	push	{r7, lr}
 80117e6:	b084      	sub	sp, #16
 80117e8:	af00      	add	r7, sp, #0
 80117ea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	69db      	ldr	r3, [r3, #28]
 80117f6:	4619      	mov	r1, r3
 80117f8:	68f8      	ldr	r0, [r7, #12]
 80117fa:	f7ff f951 	bl	8010aa0 <move_window>
 80117fe:	4603      	mov	r3, r0
 8011800:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8011802:	7afb      	ldrb	r3, [r7, #11]
 8011804:	2b00      	cmp	r3, #0
 8011806:	d106      	bne.n	8011816 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	6a1b      	ldr	r3, [r3, #32]
 801180c:	22e5      	movs	r2, #229	; 0xe5
 801180e:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	2201      	movs	r2, #1
 8011814:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8011816:	7afb      	ldrb	r3, [r7, #11]
}
 8011818:	4618      	mov	r0, r3
 801181a:	3710      	adds	r7, #16
 801181c:	46bd      	mov	sp, r7
 801181e:	bd80      	pop	{r7, pc}

08011820 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8011820:	b580      	push	{r7, lr}
 8011822:	b088      	sub	sp, #32
 8011824:	af00      	add	r7, sp, #0
 8011826:	6078      	str	r0, [r7, #4]
 8011828:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801182a:	683b      	ldr	r3, [r7, #0]
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	60fb      	str	r3, [r7, #12]
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	3324      	adds	r3, #36	; 0x24
 8011834:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8011836:	220b      	movs	r2, #11
 8011838:	2120      	movs	r1, #32
 801183a:	68b8      	ldr	r0, [r7, #8]
 801183c:	f7fe ff23 	bl	8010686 <mem_set>
	si = i = 0; ni = 8;
 8011840:	2300      	movs	r3, #0
 8011842:	613b      	str	r3, [r7, #16]
 8011844:	693b      	ldr	r3, [r7, #16]
 8011846:	617b      	str	r3, [r7, #20]
 8011848:	2308      	movs	r3, #8
 801184a:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 801184c:	68fa      	ldr	r2, [r7, #12]
 801184e:	697b      	ldr	r3, [r7, #20]
 8011850:	4413      	add	r3, r2
 8011852:	781b      	ldrb	r3, [r3, #0]
 8011854:	2b2e      	cmp	r3, #46	; 0x2e
 8011856:	d12f      	bne.n	80118b8 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 8011858:	697b      	ldr	r3, [r7, #20]
 801185a:	1c5a      	adds	r2, r3, #1
 801185c:	617a      	str	r2, [r7, #20]
 801185e:	68fa      	ldr	r2, [r7, #12]
 8011860:	4413      	add	r3, r2
 8011862:	781b      	ldrb	r3, [r3, #0]
 8011864:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 8011866:	7ffb      	ldrb	r3, [r7, #31]
 8011868:	2b2e      	cmp	r3, #46	; 0x2e
 801186a:	d10a      	bne.n	8011882 <create_name+0x62>
 801186c:	697b      	ldr	r3, [r7, #20]
 801186e:	2b02      	cmp	r3, #2
 8011870:	d807      	bhi.n	8011882 <create_name+0x62>
			sfn[i++] = c;
 8011872:	693b      	ldr	r3, [r7, #16]
 8011874:	1c5a      	adds	r2, r3, #1
 8011876:	613a      	str	r2, [r7, #16]
 8011878:	68ba      	ldr	r2, [r7, #8]
 801187a:	4413      	add	r3, r2
 801187c:	7ffa      	ldrb	r2, [r7, #31]
 801187e:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 8011880:	e7ea      	b.n	8011858 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 8011882:	7ffb      	ldrb	r3, [r7, #31]
 8011884:	2b2f      	cmp	r3, #47	; 0x2f
 8011886:	d007      	beq.n	8011898 <create_name+0x78>
 8011888:	7ffb      	ldrb	r3, [r7, #31]
 801188a:	2b5c      	cmp	r3, #92	; 0x5c
 801188c:	d004      	beq.n	8011898 <create_name+0x78>
 801188e:	7ffb      	ldrb	r3, [r7, #31]
 8011890:	2b20      	cmp	r3, #32
 8011892:	d901      	bls.n	8011898 <create_name+0x78>
 8011894:	2306      	movs	r3, #6
 8011896:	e084      	b.n	80119a2 <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 8011898:	68fa      	ldr	r2, [r7, #12]
 801189a:	697b      	ldr	r3, [r7, #20]
 801189c:	441a      	add	r2, r3
 801189e:	683b      	ldr	r3, [r7, #0]
 80118a0:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 80118a2:	7ffb      	ldrb	r3, [r7, #31]
 80118a4:	2b20      	cmp	r3, #32
 80118a6:	d801      	bhi.n	80118ac <create_name+0x8c>
 80118a8:	2224      	movs	r2, #36	; 0x24
 80118aa:	e000      	b.n	80118ae <create_name+0x8e>
 80118ac:	2220      	movs	r2, #32
 80118ae:	68bb      	ldr	r3, [r7, #8]
 80118b0:	330b      	adds	r3, #11
 80118b2:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 80118b4:	2300      	movs	r3, #0
 80118b6:	e074      	b.n	80119a2 <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80118b8:	697b      	ldr	r3, [r7, #20]
 80118ba:	1c5a      	adds	r2, r3, #1
 80118bc:	617a      	str	r2, [r7, #20]
 80118be:	68fa      	ldr	r2, [r7, #12]
 80118c0:	4413      	add	r3, r2
 80118c2:	781b      	ldrb	r3, [r3, #0]
 80118c4:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80118c6:	7ffb      	ldrb	r3, [r7, #31]
 80118c8:	2b20      	cmp	r3, #32
 80118ca:	d94e      	bls.n	801196a <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80118cc:	7ffb      	ldrb	r3, [r7, #31]
 80118ce:	2b2f      	cmp	r3, #47	; 0x2f
 80118d0:	d006      	beq.n	80118e0 <create_name+0xc0>
 80118d2:	7ffb      	ldrb	r3, [r7, #31]
 80118d4:	2b5c      	cmp	r3, #92	; 0x5c
 80118d6:	d110      	bne.n	80118fa <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80118d8:	e002      	b.n	80118e0 <create_name+0xc0>
 80118da:	697b      	ldr	r3, [r7, #20]
 80118dc:	3301      	adds	r3, #1
 80118de:	617b      	str	r3, [r7, #20]
 80118e0:	68fa      	ldr	r2, [r7, #12]
 80118e2:	697b      	ldr	r3, [r7, #20]
 80118e4:	4413      	add	r3, r2
 80118e6:	781b      	ldrb	r3, [r3, #0]
 80118e8:	2b2f      	cmp	r3, #47	; 0x2f
 80118ea:	d0f6      	beq.n	80118da <create_name+0xba>
 80118ec:	68fa      	ldr	r2, [r7, #12]
 80118ee:	697b      	ldr	r3, [r7, #20]
 80118f0:	4413      	add	r3, r2
 80118f2:	781b      	ldrb	r3, [r3, #0]
 80118f4:	2b5c      	cmp	r3, #92	; 0x5c
 80118f6:	d0f0      	beq.n	80118da <create_name+0xba>
			break;
 80118f8:	e038      	b.n	801196c <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80118fa:	7ffb      	ldrb	r3, [r7, #31]
 80118fc:	2b2e      	cmp	r3, #46	; 0x2e
 80118fe:	d003      	beq.n	8011908 <create_name+0xe8>
 8011900:	693a      	ldr	r2, [r7, #16]
 8011902:	69bb      	ldr	r3, [r7, #24]
 8011904:	429a      	cmp	r2, r3
 8011906:	d30c      	bcc.n	8011922 <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8011908:	69bb      	ldr	r3, [r7, #24]
 801190a:	2b0b      	cmp	r3, #11
 801190c:	d002      	beq.n	8011914 <create_name+0xf4>
 801190e:	7ffb      	ldrb	r3, [r7, #31]
 8011910:	2b2e      	cmp	r3, #46	; 0x2e
 8011912:	d001      	beq.n	8011918 <create_name+0xf8>
 8011914:	2306      	movs	r3, #6
 8011916:	e044      	b.n	80119a2 <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 8011918:	2308      	movs	r3, #8
 801191a:	613b      	str	r3, [r7, #16]
 801191c:	230b      	movs	r3, #11
 801191e:	61bb      	str	r3, [r7, #24]
			continue;
 8011920:	e022      	b.n	8011968 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 8011922:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011926:	2b00      	cmp	r3, #0
 8011928:	da04      	bge.n	8011934 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801192a:	7ffb      	ldrb	r3, [r7, #31]
 801192c:	3b80      	subs	r3, #128	; 0x80
 801192e:	4a1f      	ldr	r2, [pc, #124]	; (80119ac <create_name+0x18c>)
 8011930:	5cd3      	ldrb	r3, [r2, r3]
 8011932:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8011934:	7ffb      	ldrb	r3, [r7, #31]
 8011936:	4619      	mov	r1, r3
 8011938:	481d      	ldr	r0, [pc, #116]	; (80119b0 <create_name+0x190>)
 801193a:	f7fe fee5 	bl	8010708 <chk_chr>
 801193e:	4603      	mov	r3, r0
 8011940:	2b00      	cmp	r3, #0
 8011942:	d001      	beq.n	8011948 <create_name+0x128>
 8011944:	2306      	movs	r3, #6
 8011946:	e02c      	b.n	80119a2 <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8011948:	7ffb      	ldrb	r3, [r7, #31]
 801194a:	2b60      	cmp	r3, #96	; 0x60
 801194c:	d905      	bls.n	801195a <create_name+0x13a>
 801194e:	7ffb      	ldrb	r3, [r7, #31]
 8011950:	2b7a      	cmp	r3, #122	; 0x7a
 8011952:	d802      	bhi.n	801195a <create_name+0x13a>
 8011954:	7ffb      	ldrb	r3, [r7, #31]
 8011956:	3b20      	subs	r3, #32
 8011958:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 801195a:	693b      	ldr	r3, [r7, #16]
 801195c:	1c5a      	adds	r2, r3, #1
 801195e:	613a      	str	r2, [r7, #16]
 8011960:	68ba      	ldr	r2, [r7, #8]
 8011962:	4413      	add	r3, r2
 8011964:	7ffa      	ldrb	r2, [r7, #31]
 8011966:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8011968:	e7a6      	b.n	80118b8 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801196a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 801196c:	68fa      	ldr	r2, [r7, #12]
 801196e:	697b      	ldr	r3, [r7, #20]
 8011970:	441a      	add	r2, r3
 8011972:	683b      	ldr	r3, [r7, #0]
 8011974:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8011976:	693b      	ldr	r3, [r7, #16]
 8011978:	2b00      	cmp	r3, #0
 801197a:	d101      	bne.n	8011980 <create_name+0x160>
 801197c:	2306      	movs	r3, #6
 801197e:	e010      	b.n	80119a2 <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8011980:	68bb      	ldr	r3, [r7, #8]
 8011982:	781b      	ldrb	r3, [r3, #0]
 8011984:	2be5      	cmp	r3, #229	; 0xe5
 8011986:	d102      	bne.n	801198e <create_name+0x16e>
 8011988:	68bb      	ldr	r3, [r7, #8]
 801198a:	2205      	movs	r2, #5
 801198c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801198e:	7ffb      	ldrb	r3, [r7, #31]
 8011990:	2b20      	cmp	r3, #32
 8011992:	d801      	bhi.n	8011998 <create_name+0x178>
 8011994:	2204      	movs	r2, #4
 8011996:	e000      	b.n	801199a <create_name+0x17a>
 8011998:	2200      	movs	r2, #0
 801199a:	68bb      	ldr	r3, [r7, #8]
 801199c:	330b      	adds	r3, #11
 801199e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80119a0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80119a2:	4618      	mov	r0, r3
 80119a4:	3720      	adds	r7, #32
 80119a6:	46bd      	mov	sp, r7
 80119a8:	bd80      	pop	{r7, pc}
 80119aa:	bf00      	nop
 80119ac:	08019178 	.word	0x08019178
 80119b0:	08019128 	.word	0x08019128

080119b4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80119b4:	b580      	push	{r7, lr}
 80119b6:	b086      	sub	sp, #24
 80119b8:	af00      	add	r7, sp, #0
 80119ba:	6078      	str	r0, [r7, #4]
 80119bc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80119c2:	693b      	ldr	r3, [r7, #16]
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 80119c8:	683b      	ldr	r3, [r7, #0]
 80119ca:	781b      	ldrb	r3, [r3, #0]
 80119cc:	2b2f      	cmp	r3, #47	; 0x2f
 80119ce:	d00b      	beq.n	80119e8 <follow_path+0x34>
 80119d0:	683b      	ldr	r3, [r7, #0]
 80119d2:	781b      	ldrb	r3, [r3, #0]
 80119d4:	2b5c      	cmp	r3, #92	; 0x5c
 80119d6:	d007      	beq.n	80119e8 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	699a      	ldr	r2, [r3, #24]
 80119dc:	693b      	ldr	r3, [r7, #16]
 80119de:	609a      	str	r2, [r3, #8]
 80119e0:	e00d      	b.n	80119fe <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80119e2:	683b      	ldr	r3, [r7, #0]
 80119e4:	3301      	adds	r3, #1
 80119e6:	603b      	str	r3, [r7, #0]
 80119e8:	683b      	ldr	r3, [r7, #0]
 80119ea:	781b      	ldrb	r3, [r3, #0]
 80119ec:	2b2f      	cmp	r3, #47	; 0x2f
 80119ee:	d0f8      	beq.n	80119e2 <follow_path+0x2e>
 80119f0:	683b      	ldr	r3, [r7, #0]
 80119f2:	781b      	ldrb	r3, [r3, #0]
 80119f4:	2b5c      	cmp	r3, #92	; 0x5c
 80119f6:	d0f4      	beq.n	80119e2 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 80119f8:	693b      	ldr	r3, [r7, #16]
 80119fa:	2200      	movs	r2, #0
 80119fc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80119fe:	683b      	ldr	r3, [r7, #0]
 8011a00:	781b      	ldrb	r3, [r3, #0]
 8011a02:	2b1f      	cmp	r3, #31
 8011a04:	d80a      	bhi.n	8011a1c <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	2280      	movs	r2, #128	; 0x80
 8011a0a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8011a0e:	2100      	movs	r1, #0
 8011a10:	6878      	ldr	r0, [r7, #4]
 8011a12:	f7ff fc1e 	bl	8011252 <dir_sdi>
 8011a16:	4603      	mov	r3, r0
 8011a18:	75fb      	strb	r3, [r7, #23]
 8011a1a:	e05b      	b.n	8011ad4 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011a1c:	463b      	mov	r3, r7
 8011a1e:	4619      	mov	r1, r3
 8011a20:	6878      	ldr	r0, [r7, #4]
 8011a22:	f7ff fefd 	bl	8011820 <create_name>
 8011a26:	4603      	mov	r3, r0
 8011a28:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011a2a:	7dfb      	ldrb	r3, [r7, #23]
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d14c      	bne.n	8011aca <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 8011a30:	6878      	ldr	r0, [r7, #4]
 8011a32:	f7ff fe50 	bl	80116d6 <dir_find>
 8011a36:	4603      	mov	r3, r0
 8011a38:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011a40:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8011a42:	7dfb      	ldrb	r3, [r7, #23]
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d01b      	beq.n	8011a80 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8011a48:	7dfb      	ldrb	r3, [r7, #23]
 8011a4a:	2b04      	cmp	r3, #4
 8011a4c:	d13f      	bne.n	8011ace <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8011a4e:	7afb      	ldrb	r3, [r7, #11]
 8011a50:	f003 0320 	and.w	r3, r3, #32
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d00b      	beq.n	8011a70 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8011a58:	7afb      	ldrb	r3, [r7, #11]
 8011a5a:	f003 0304 	and.w	r3, r3, #4
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d031      	beq.n	8011ac6 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	2280      	movs	r2, #128	; 0x80
 8011a66:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 8011a6a:	2300      	movs	r3, #0
 8011a6c:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8011a6e:	e02e      	b.n	8011ace <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8011a70:	7afb      	ldrb	r3, [r7, #11]
 8011a72:	f003 0304 	and.w	r3, r3, #4
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d129      	bne.n	8011ace <follow_path+0x11a>
 8011a7a:	2305      	movs	r3, #5
 8011a7c:	75fb      	strb	r3, [r7, #23]
				break;
 8011a7e:	e026      	b.n	8011ace <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011a80:	7afb      	ldrb	r3, [r7, #11]
 8011a82:	f003 0304 	and.w	r3, r3, #4
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d123      	bne.n	8011ad2 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8011a8a:	693b      	ldr	r3, [r7, #16]
 8011a8c:	799b      	ldrb	r3, [r3, #6]
 8011a8e:	f003 0310 	and.w	r3, r3, #16
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d102      	bne.n	8011a9c <follow_path+0xe8>
				res = FR_NO_PATH; break;
 8011a96:	2305      	movs	r3, #5
 8011a98:	75fb      	strb	r3, [r7, #23]
 8011a9a:	e01b      	b.n	8011ad4 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	695b      	ldr	r3, [r3, #20]
 8011aa6:	68fa      	ldr	r2, [r7, #12]
 8011aa8:	8992      	ldrh	r2, [r2, #12]
 8011aaa:	fbb3 f0f2 	udiv	r0, r3, r2
 8011aae:	fb02 f200 	mul.w	r2, r2, r0
 8011ab2:	1a9b      	subs	r3, r3, r2
 8011ab4:	440b      	add	r3, r1
 8011ab6:	4619      	mov	r1, r3
 8011ab8:	68f8      	ldr	r0, [r7, #12]
 8011aba:	f7ff fd70 	bl	801159e <ld_clust>
 8011abe:	4602      	mov	r2, r0
 8011ac0:	693b      	ldr	r3, [r7, #16]
 8011ac2:	609a      	str	r2, [r3, #8]
 8011ac4:	e7aa      	b.n	8011a1c <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8011ac6:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011ac8:	e7a8      	b.n	8011a1c <follow_path+0x68>
			if (res != FR_OK) break;
 8011aca:	bf00      	nop
 8011acc:	e002      	b.n	8011ad4 <follow_path+0x120>
				break;
 8011ace:	bf00      	nop
 8011ad0:	e000      	b.n	8011ad4 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011ad2:	bf00      	nop
			}
		}
	}

	return res;
 8011ad4:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ad6:	4618      	mov	r0, r3
 8011ad8:	3718      	adds	r7, #24
 8011ada:	46bd      	mov	sp, r7
 8011adc:	bd80      	pop	{r7, pc}

08011ade <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8011ade:	b480      	push	{r7}
 8011ae0:	b087      	sub	sp, #28
 8011ae2:	af00      	add	r7, sp, #0
 8011ae4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8011ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8011aea:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d031      	beq.n	8011b58 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	617b      	str	r3, [r7, #20]
 8011afa:	e002      	b.n	8011b02 <get_ldnumber+0x24>
 8011afc:	697b      	ldr	r3, [r7, #20]
 8011afe:	3301      	adds	r3, #1
 8011b00:	617b      	str	r3, [r7, #20]
 8011b02:	697b      	ldr	r3, [r7, #20]
 8011b04:	781b      	ldrb	r3, [r3, #0]
 8011b06:	2b20      	cmp	r3, #32
 8011b08:	d903      	bls.n	8011b12 <get_ldnumber+0x34>
 8011b0a:	697b      	ldr	r3, [r7, #20]
 8011b0c:	781b      	ldrb	r3, [r3, #0]
 8011b0e:	2b3a      	cmp	r3, #58	; 0x3a
 8011b10:	d1f4      	bne.n	8011afc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8011b12:	697b      	ldr	r3, [r7, #20]
 8011b14:	781b      	ldrb	r3, [r3, #0]
 8011b16:	2b3a      	cmp	r3, #58	; 0x3a
 8011b18:	d11c      	bne.n	8011b54 <get_ldnumber+0x76>
			tp = *path;
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	1c5a      	adds	r2, r3, #1
 8011b24:	60fa      	str	r2, [r7, #12]
 8011b26:	781b      	ldrb	r3, [r3, #0]
 8011b28:	3b30      	subs	r3, #48	; 0x30
 8011b2a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8011b2c:	68bb      	ldr	r3, [r7, #8]
 8011b2e:	2b09      	cmp	r3, #9
 8011b30:	d80e      	bhi.n	8011b50 <get_ldnumber+0x72>
 8011b32:	68fa      	ldr	r2, [r7, #12]
 8011b34:	697b      	ldr	r3, [r7, #20]
 8011b36:	429a      	cmp	r2, r3
 8011b38:	d10a      	bne.n	8011b50 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8011b3a:	68bb      	ldr	r3, [r7, #8]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d107      	bne.n	8011b50 <get_ldnumber+0x72>
					vol = (int)i;
 8011b40:	68bb      	ldr	r3, [r7, #8]
 8011b42:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8011b44:	697b      	ldr	r3, [r7, #20]
 8011b46:	3301      	adds	r3, #1
 8011b48:	617b      	str	r3, [r7, #20]
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	697a      	ldr	r2, [r7, #20]
 8011b4e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8011b50:	693b      	ldr	r3, [r7, #16]
 8011b52:	e002      	b.n	8011b5a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8011b54:	2300      	movs	r3, #0
 8011b56:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8011b58:	693b      	ldr	r3, [r7, #16]
}
 8011b5a:	4618      	mov	r0, r3
 8011b5c:	371c      	adds	r7, #28
 8011b5e:	46bd      	mov	sp, r7
 8011b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b64:	4770      	bx	lr
	...

08011b68 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8011b68:	b580      	push	{r7, lr}
 8011b6a:	b082      	sub	sp, #8
 8011b6c:	af00      	add	r7, sp, #0
 8011b6e:	6078      	str	r0, [r7, #4]
 8011b70:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	2200      	movs	r2, #0
 8011b76:	70da      	strb	r2, [r3, #3]
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8011b7e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8011b80:	6839      	ldr	r1, [r7, #0]
 8011b82:	6878      	ldr	r0, [r7, #4]
 8011b84:	f7fe ff8c 	bl	8010aa0 <move_window>
 8011b88:	4603      	mov	r3, r0
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d001      	beq.n	8011b92 <check_fs+0x2a>
 8011b8e:	2304      	movs	r3, #4
 8011b90:	e038      	b.n	8011c04 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	3338      	adds	r3, #56	; 0x38
 8011b96:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011b9a:	4618      	mov	r0, r3
 8011b9c:	f7fe fcd0 	bl	8010540 <ld_word>
 8011ba0:	4603      	mov	r3, r0
 8011ba2:	461a      	mov	r2, r3
 8011ba4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8011ba8:	429a      	cmp	r2, r3
 8011baa:	d001      	beq.n	8011bb0 <check_fs+0x48>
 8011bac:	2303      	movs	r3, #3
 8011bae:	e029      	b.n	8011c04 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011bb6:	2be9      	cmp	r3, #233	; 0xe9
 8011bb8:	d009      	beq.n	8011bce <check_fs+0x66>
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011bc0:	2beb      	cmp	r3, #235	; 0xeb
 8011bc2:	d11e      	bne.n	8011c02 <check_fs+0x9a>
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8011bca:	2b90      	cmp	r3, #144	; 0x90
 8011bcc:	d119      	bne.n	8011c02 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	3338      	adds	r3, #56	; 0x38
 8011bd2:	3336      	adds	r3, #54	; 0x36
 8011bd4:	4618      	mov	r0, r3
 8011bd6:	f7fe fccb 	bl	8010570 <ld_dword>
 8011bda:	4603      	mov	r3, r0
 8011bdc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011be0:	4a0a      	ldr	r2, [pc, #40]	; (8011c0c <check_fs+0xa4>)
 8011be2:	4293      	cmp	r3, r2
 8011be4:	d101      	bne.n	8011bea <check_fs+0x82>
 8011be6:	2300      	movs	r3, #0
 8011be8:	e00c      	b.n	8011c04 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	3338      	adds	r3, #56	; 0x38
 8011bee:	3352      	adds	r3, #82	; 0x52
 8011bf0:	4618      	mov	r0, r3
 8011bf2:	f7fe fcbd 	bl	8010570 <ld_dword>
 8011bf6:	4602      	mov	r2, r0
 8011bf8:	4b05      	ldr	r3, [pc, #20]	; (8011c10 <check_fs+0xa8>)
 8011bfa:	429a      	cmp	r2, r3
 8011bfc:	d101      	bne.n	8011c02 <check_fs+0x9a>
 8011bfe:	2300      	movs	r3, #0
 8011c00:	e000      	b.n	8011c04 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8011c02:	2302      	movs	r3, #2
}
 8011c04:	4618      	mov	r0, r3
 8011c06:	3708      	adds	r7, #8
 8011c08:	46bd      	mov	sp, r7
 8011c0a:	bd80      	pop	{r7, pc}
 8011c0c:	00544146 	.word	0x00544146
 8011c10:	33544146 	.word	0x33544146

08011c14 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8011c14:	b580      	push	{r7, lr}
 8011c16:	b096      	sub	sp, #88	; 0x58
 8011c18:	af00      	add	r7, sp, #0
 8011c1a:	60f8      	str	r0, [r7, #12]
 8011c1c:	60b9      	str	r1, [r7, #8]
 8011c1e:	4613      	mov	r3, r2
 8011c20:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8011c22:	68bb      	ldr	r3, [r7, #8]
 8011c24:	2200      	movs	r2, #0
 8011c26:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8011c28:	68f8      	ldr	r0, [r7, #12]
 8011c2a:	f7ff ff58 	bl	8011ade <get_ldnumber>
 8011c2e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8011c30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	da01      	bge.n	8011c3a <find_volume+0x26>
 8011c36:	230b      	movs	r3, #11
 8011c38:	e268      	b.n	801210c <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8011c3a:	4ab0      	ldr	r2, [pc, #704]	; (8011efc <find_volume+0x2e8>)
 8011c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011c42:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8011c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d101      	bne.n	8011c4e <find_volume+0x3a>
 8011c4a:	230c      	movs	r3, #12
 8011c4c:	e25e      	b.n	801210c <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8011c4e:	68bb      	ldr	r3, [r7, #8]
 8011c50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011c52:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8011c54:	79fb      	ldrb	r3, [r7, #7]
 8011c56:	f023 0301 	bic.w	r3, r3, #1
 8011c5a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8011c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c5e:	781b      	ldrb	r3, [r3, #0]
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d01a      	beq.n	8011c9a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8011c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c66:	785b      	ldrb	r3, [r3, #1]
 8011c68:	4618      	mov	r0, r3
 8011c6a:	f7fe fbcb 	bl	8010404 <disk_status>
 8011c6e:	4603      	mov	r3, r0
 8011c70:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8011c74:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011c78:	f003 0301 	and.w	r3, r3, #1
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d10c      	bne.n	8011c9a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8011c80:	79fb      	ldrb	r3, [r7, #7]
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d007      	beq.n	8011c96 <find_volume+0x82>
 8011c86:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011c8a:	f003 0304 	and.w	r3, r3, #4
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d001      	beq.n	8011c96 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8011c92:	230a      	movs	r3, #10
 8011c94:	e23a      	b.n	801210c <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8011c96:	2300      	movs	r3, #0
 8011c98:	e238      	b.n	801210c <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8011c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c9c:	2200      	movs	r2, #0
 8011c9e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8011ca0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ca2:	b2da      	uxtb	r2, r3
 8011ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ca6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8011ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011caa:	785b      	ldrb	r3, [r3, #1]
 8011cac:	4618      	mov	r0, r3
 8011cae:	f7fe fbc3 	bl	8010438 <disk_initialize>
 8011cb2:	4603      	mov	r3, r0
 8011cb4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8011cb8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011cbc:	f003 0301 	and.w	r3, r3, #1
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d001      	beq.n	8011cc8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8011cc4:	2303      	movs	r3, #3
 8011cc6:	e221      	b.n	801210c <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8011cc8:	79fb      	ldrb	r3, [r7, #7]
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d007      	beq.n	8011cde <find_volume+0xca>
 8011cce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011cd2:	f003 0304 	and.w	r3, r3, #4
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d001      	beq.n	8011cde <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8011cda:	230a      	movs	r3, #10
 8011cdc:	e216      	b.n	801210c <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8011cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ce0:	7858      	ldrb	r0, [r3, #1]
 8011ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ce4:	330c      	adds	r3, #12
 8011ce6:	461a      	mov	r2, r3
 8011ce8:	2102      	movs	r1, #2
 8011cea:	f7fe fc0b 	bl	8010504 <disk_ioctl>
 8011cee:	4603      	mov	r3, r0
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d001      	beq.n	8011cf8 <find_volume+0xe4>
 8011cf4:	2301      	movs	r3, #1
 8011cf6:	e209      	b.n	801210c <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8011cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cfa:	899b      	ldrh	r3, [r3, #12]
 8011cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011d00:	d80d      	bhi.n	8011d1e <find_volume+0x10a>
 8011d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d04:	899b      	ldrh	r3, [r3, #12]
 8011d06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011d0a:	d308      	bcc.n	8011d1e <find_volume+0x10a>
 8011d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d0e:	899b      	ldrh	r3, [r3, #12]
 8011d10:	461a      	mov	r2, r3
 8011d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d14:	899b      	ldrh	r3, [r3, #12]
 8011d16:	3b01      	subs	r3, #1
 8011d18:	4013      	ands	r3, r2
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d001      	beq.n	8011d22 <find_volume+0x10e>
 8011d1e:	2301      	movs	r3, #1
 8011d20:	e1f4      	b.n	801210c <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8011d22:	2300      	movs	r3, #0
 8011d24:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8011d26:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011d28:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011d2a:	f7ff ff1d 	bl	8011b68 <check_fs>
 8011d2e:	4603      	mov	r3, r0
 8011d30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8011d34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011d38:	2b02      	cmp	r3, #2
 8011d3a:	d14b      	bne.n	8011dd4 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011d3c:	2300      	movs	r3, #0
 8011d3e:	643b      	str	r3, [r7, #64]	; 0x40
 8011d40:	e01f      	b.n	8011d82 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8011d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d44:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8011d48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d4a:	011b      	lsls	r3, r3, #4
 8011d4c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8011d50:	4413      	add	r3, r2
 8011d52:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8011d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d56:	3304      	adds	r3, #4
 8011d58:	781b      	ldrb	r3, [r3, #0]
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d006      	beq.n	8011d6c <find_volume+0x158>
 8011d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d60:	3308      	adds	r3, #8
 8011d62:	4618      	mov	r0, r3
 8011d64:	f7fe fc04 	bl	8010570 <ld_dword>
 8011d68:	4602      	mov	r2, r0
 8011d6a:	e000      	b.n	8011d6e <find_volume+0x15a>
 8011d6c:	2200      	movs	r2, #0
 8011d6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d70:	009b      	lsls	r3, r3, #2
 8011d72:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8011d76:	440b      	add	r3, r1
 8011d78:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011d7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d7e:	3301      	adds	r3, #1
 8011d80:	643b      	str	r3, [r7, #64]	; 0x40
 8011d82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d84:	2b03      	cmp	r3, #3
 8011d86:	d9dc      	bls.n	8011d42 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8011d88:	2300      	movs	r3, #0
 8011d8a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8011d8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d002      	beq.n	8011d98 <find_volume+0x184>
 8011d92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d94:	3b01      	subs	r3, #1
 8011d96:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8011d98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d9a:	009b      	lsls	r3, r3, #2
 8011d9c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8011da0:	4413      	add	r3, r2
 8011da2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8011da6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8011da8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d005      	beq.n	8011dba <find_volume+0x1a6>
 8011dae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011db0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011db2:	f7ff fed9 	bl	8011b68 <check_fs>
 8011db6:	4603      	mov	r3, r0
 8011db8:	e000      	b.n	8011dbc <find_volume+0x1a8>
 8011dba:	2303      	movs	r3, #3
 8011dbc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8011dc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011dc4:	2b01      	cmp	r3, #1
 8011dc6:	d905      	bls.n	8011dd4 <find_volume+0x1c0>
 8011dc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011dca:	3301      	adds	r3, #1
 8011dcc:	643b      	str	r3, [r7, #64]	; 0x40
 8011dce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011dd0:	2b03      	cmp	r3, #3
 8011dd2:	d9e1      	bls.n	8011d98 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011dd4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011dd8:	2b04      	cmp	r3, #4
 8011dda:	d101      	bne.n	8011de0 <find_volume+0x1cc>
 8011ddc:	2301      	movs	r3, #1
 8011dde:	e195      	b.n	801210c <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8011de0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011de4:	2b01      	cmp	r3, #1
 8011de6:	d901      	bls.n	8011dec <find_volume+0x1d8>
 8011de8:	230d      	movs	r3, #13
 8011dea:	e18f      	b.n	801210c <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8011dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dee:	3338      	adds	r3, #56	; 0x38
 8011df0:	330b      	adds	r3, #11
 8011df2:	4618      	mov	r0, r3
 8011df4:	f7fe fba4 	bl	8010540 <ld_word>
 8011df8:	4603      	mov	r3, r0
 8011dfa:	461a      	mov	r2, r3
 8011dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dfe:	899b      	ldrh	r3, [r3, #12]
 8011e00:	429a      	cmp	r2, r3
 8011e02:	d001      	beq.n	8011e08 <find_volume+0x1f4>
 8011e04:	230d      	movs	r3, #13
 8011e06:	e181      	b.n	801210c <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8011e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e0a:	3338      	adds	r3, #56	; 0x38
 8011e0c:	3316      	adds	r3, #22
 8011e0e:	4618      	mov	r0, r3
 8011e10:	f7fe fb96 	bl	8010540 <ld_word>
 8011e14:	4603      	mov	r3, r0
 8011e16:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8011e18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d106      	bne.n	8011e2c <find_volume+0x218>
 8011e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e20:	3338      	adds	r3, #56	; 0x38
 8011e22:	3324      	adds	r3, #36	; 0x24
 8011e24:	4618      	mov	r0, r3
 8011e26:	f7fe fba3 	bl	8010570 <ld_dword>
 8011e2a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8011e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011e30:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8011e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e34:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8011e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e3a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8011e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e3e:	789b      	ldrb	r3, [r3, #2]
 8011e40:	2b01      	cmp	r3, #1
 8011e42:	d005      	beq.n	8011e50 <find_volume+0x23c>
 8011e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e46:	789b      	ldrb	r3, [r3, #2]
 8011e48:	2b02      	cmp	r3, #2
 8011e4a:	d001      	beq.n	8011e50 <find_volume+0x23c>
 8011e4c:	230d      	movs	r3, #13
 8011e4e:	e15d      	b.n	801210c <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8011e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e52:	789b      	ldrb	r3, [r3, #2]
 8011e54:	461a      	mov	r2, r3
 8011e56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e58:	fb02 f303 	mul.w	r3, r2, r3
 8011e5c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8011e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011e64:	b29a      	uxth	r2, r3
 8011e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e68:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8011e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e6c:	895b      	ldrh	r3, [r3, #10]
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d008      	beq.n	8011e84 <find_volume+0x270>
 8011e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e74:	895b      	ldrh	r3, [r3, #10]
 8011e76:	461a      	mov	r2, r3
 8011e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e7a:	895b      	ldrh	r3, [r3, #10]
 8011e7c:	3b01      	subs	r3, #1
 8011e7e:	4013      	ands	r3, r2
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d001      	beq.n	8011e88 <find_volume+0x274>
 8011e84:	230d      	movs	r3, #13
 8011e86:	e141      	b.n	801210c <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8011e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e8a:	3338      	adds	r3, #56	; 0x38
 8011e8c:	3311      	adds	r3, #17
 8011e8e:	4618      	mov	r0, r3
 8011e90:	f7fe fb56 	bl	8010540 <ld_word>
 8011e94:	4603      	mov	r3, r0
 8011e96:	461a      	mov	r2, r3
 8011e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e9a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8011e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e9e:	891b      	ldrh	r3, [r3, #8]
 8011ea0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011ea2:	8992      	ldrh	r2, [r2, #12]
 8011ea4:	0952      	lsrs	r2, r2, #5
 8011ea6:	b292      	uxth	r2, r2
 8011ea8:	fbb3 f1f2 	udiv	r1, r3, r2
 8011eac:	fb02 f201 	mul.w	r2, r2, r1
 8011eb0:	1a9b      	subs	r3, r3, r2
 8011eb2:	b29b      	uxth	r3, r3
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d001      	beq.n	8011ebc <find_volume+0x2a8>
 8011eb8:	230d      	movs	r3, #13
 8011eba:	e127      	b.n	801210c <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8011ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ebe:	3338      	adds	r3, #56	; 0x38
 8011ec0:	3313      	adds	r3, #19
 8011ec2:	4618      	mov	r0, r3
 8011ec4:	f7fe fb3c 	bl	8010540 <ld_word>
 8011ec8:	4603      	mov	r3, r0
 8011eca:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8011ecc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d106      	bne.n	8011ee0 <find_volume+0x2cc>
 8011ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ed4:	3338      	adds	r3, #56	; 0x38
 8011ed6:	3320      	adds	r3, #32
 8011ed8:	4618      	mov	r0, r3
 8011eda:	f7fe fb49 	bl	8010570 <ld_dword>
 8011ede:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8011ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ee2:	3338      	adds	r3, #56	; 0x38
 8011ee4:	330e      	adds	r3, #14
 8011ee6:	4618      	mov	r0, r3
 8011ee8:	f7fe fb2a 	bl	8010540 <ld_word>
 8011eec:	4603      	mov	r3, r0
 8011eee:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8011ef0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d104      	bne.n	8011f00 <find_volume+0x2ec>
 8011ef6:	230d      	movs	r3, #13
 8011ef8:	e108      	b.n	801210c <find_volume+0x4f8>
 8011efa:	bf00      	nop
 8011efc:	2003c49c 	.word	0x2003c49c

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8011f00:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011f02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f04:	4413      	add	r3, r2
 8011f06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011f08:	8911      	ldrh	r1, [r2, #8]
 8011f0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011f0c:	8992      	ldrh	r2, [r2, #12]
 8011f0e:	0952      	lsrs	r2, r2, #5
 8011f10:	b292      	uxth	r2, r2
 8011f12:	fbb1 f2f2 	udiv	r2, r1, r2
 8011f16:	b292      	uxth	r2, r2
 8011f18:	4413      	add	r3, r2
 8011f1a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8011f1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f20:	429a      	cmp	r2, r3
 8011f22:	d201      	bcs.n	8011f28 <find_volume+0x314>
 8011f24:	230d      	movs	r3, #13
 8011f26:	e0f1      	b.n	801210c <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8011f28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f2c:	1ad3      	subs	r3, r2, r3
 8011f2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011f30:	8952      	ldrh	r2, [r2, #10]
 8011f32:	fbb3 f3f2 	udiv	r3, r3, r2
 8011f36:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8011f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d101      	bne.n	8011f42 <find_volume+0x32e>
 8011f3e:	230d      	movs	r3, #13
 8011f40:	e0e4      	b.n	801210c <find_volume+0x4f8>
		fmt = FS_FAT32;
 8011f42:	2303      	movs	r3, #3
 8011f44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8011f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f4a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8011f4e:	4293      	cmp	r3, r2
 8011f50:	d802      	bhi.n	8011f58 <find_volume+0x344>
 8011f52:	2302      	movs	r3, #2
 8011f54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8011f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f5a:	f640 72f5 	movw	r2, #4085	; 0xff5
 8011f5e:	4293      	cmp	r3, r2
 8011f60:	d802      	bhi.n	8011f68 <find_volume+0x354>
 8011f62:	2301      	movs	r3, #1
 8011f64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f6a:	1c9a      	adds	r2, r3, #2
 8011f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f6e:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8011f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f72:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011f74:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8011f76:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011f78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f7a:	441a      	add	r2, r3
 8011f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f7e:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8011f80:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f84:	441a      	add	r2, r3
 8011f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f88:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8011f8a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011f8e:	2b03      	cmp	r3, #3
 8011f90:	d11e      	bne.n	8011fd0 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8011f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f94:	3338      	adds	r3, #56	; 0x38
 8011f96:	332a      	adds	r3, #42	; 0x2a
 8011f98:	4618      	mov	r0, r3
 8011f9a:	f7fe fad1 	bl	8010540 <ld_word>
 8011f9e:	4603      	mov	r3, r0
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d001      	beq.n	8011fa8 <find_volume+0x394>
 8011fa4:	230d      	movs	r3, #13
 8011fa6:	e0b1      	b.n	801210c <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8011fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011faa:	891b      	ldrh	r3, [r3, #8]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d001      	beq.n	8011fb4 <find_volume+0x3a0>
 8011fb0:	230d      	movs	r3, #13
 8011fb2:	e0ab      	b.n	801210c <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8011fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fb6:	3338      	adds	r3, #56	; 0x38
 8011fb8:	332c      	adds	r3, #44	; 0x2c
 8011fba:	4618      	mov	r0, r3
 8011fbc:	f7fe fad8 	bl	8010570 <ld_dword>
 8011fc0:	4602      	mov	r2, r0
 8011fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fc4:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8011fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fc8:	69db      	ldr	r3, [r3, #28]
 8011fca:	009b      	lsls	r3, r3, #2
 8011fcc:	647b      	str	r3, [r7, #68]	; 0x44
 8011fce:	e01f      	b.n	8012010 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8011fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fd2:	891b      	ldrh	r3, [r3, #8]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d101      	bne.n	8011fdc <find_volume+0x3c8>
 8011fd8:	230d      	movs	r3, #13
 8011fda:	e097      	b.n	801210c <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8011fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011fe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011fe2:	441a      	add	r2, r3
 8011fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fe6:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8011fe8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011fec:	2b02      	cmp	r3, #2
 8011fee:	d103      	bne.n	8011ff8 <find_volume+0x3e4>
 8011ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ff2:	69db      	ldr	r3, [r3, #28]
 8011ff4:	005b      	lsls	r3, r3, #1
 8011ff6:	e00a      	b.n	801200e <find_volume+0x3fa>
 8011ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ffa:	69da      	ldr	r2, [r3, #28]
 8011ffc:	4613      	mov	r3, r2
 8011ffe:	005b      	lsls	r3, r3, #1
 8012000:	4413      	add	r3, r2
 8012002:	085a      	lsrs	r2, r3, #1
 8012004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012006:	69db      	ldr	r3, [r3, #28]
 8012008:	f003 0301 	and.w	r3, r3, #1
 801200c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801200e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8012010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012012:	6a1a      	ldr	r2, [r3, #32]
 8012014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012016:	899b      	ldrh	r3, [r3, #12]
 8012018:	4619      	mov	r1, r3
 801201a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801201c:	440b      	add	r3, r1
 801201e:	3b01      	subs	r3, #1
 8012020:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012022:	8989      	ldrh	r1, [r1, #12]
 8012024:	fbb3 f3f1 	udiv	r3, r3, r1
 8012028:	429a      	cmp	r2, r3
 801202a:	d201      	bcs.n	8012030 <find_volume+0x41c>
 801202c:	230d      	movs	r3, #13
 801202e:	e06d      	b.n	801210c <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012032:	f04f 32ff 	mov.w	r2, #4294967295
 8012036:	615a      	str	r2, [r3, #20]
 8012038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801203a:	695a      	ldr	r2, [r3, #20]
 801203c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801203e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8012040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012042:	2280      	movs	r2, #128	; 0x80
 8012044:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8012046:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801204a:	2b03      	cmp	r3, #3
 801204c:	d149      	bne.n	80120e2 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801204e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012050:	3338      	adds	r3, #56	; 0x38
 8012052:	3330      	adds	r3, #48	; 0x30
 8012054:	4618      	mov	r0, r3
 8012056:	f7fe fa73 	bl	8010540 <ld_word>
 801205a:	4603      	mov	r3, r0
 801205c:	2b01      	cmp	r3, #1
 801205e:	d140      	bne.n	80120e2 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012060:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012062:	3301      	adds	r3, #1
 8012064:	4619      	mov	r1, r3
 8012066:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012068:	f7fe fd1a 	bl	8010aa0 <move_window>
 801206c:	4603      	mov	r3, r0
 801206e:	2b00      	cmp	r3, #0
 8012070:	d137      	bne.n	80120e2 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8012072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012074:	2200      	movs	r2, #0
 8012076:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801207a:	3338      	adds	r3, #56	; 0x38
 801207c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012080:	4618      	mov	r0, r3
 8012082:	f7fe fa5d 	bl	8010540 <ld_word>
 8012086:	4603      	mov	r3, r0
 8012088:	461a      	mov	r2, r3
 801208a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801208e:	429a      	cmp	r2, r3
 8012090:	d127      	bne.n	80120e2 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8012092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012094:	3338      	adds	r3, #56	; 0x38
 8012096:	4618      	mov	r0, r3
 8012098:	f7fe fa6a 	bl	8010570 <ld_dword>
 801209c:	4602      	mov	r2, r0
 801209e:	4b1d      	ldr	r3, [pc, #116]	; (8012114 <find_volume+0x500>)
 80120a0:	429a      	cmp	r2, r3
 80120a2:	d11e      	bne.n	80120e2 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80120a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120a6:	3338      	adds	r3, #56	; 0x38
 80120a8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80120ac:	4618      	mov	r0, r3
 80120ae:	f7fe fa5f 	bl	8010570 <ld_dword>
 80120b2:	4602      	mov	r2, r0
 80120b4:	4b18      	ldr	r3, [pc, #96]	; (8012118 <find_volume+0x504>)
 80120b6:	429a      	cmp	r2, r3
 80120b8:	d113      	bne.n	80120e2 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80120ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120bc:	3338      	adds	r3, #56	; 0x38
 80120be:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80120c2:	4618      	mov	r0, r3
 80120c4:	f7fe fa54 	bl	8010570 <ld_dword>
 80120c8:	4602      	mov	r2, r0
 80120ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120cc:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80120ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120d0:	3338      	adds	r3, #56	; 0x38
 80120d2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80120d6:	4618      	mov	r0, r3
 80120d8:	f7fe fa4a 	bl	8010570 <ld_dword>
 80120dc:	4602      	mov	r2, r0
 80120de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120e0:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80120e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120e4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80120e8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80120ea:	4b0c      	ldr	r3, [pc, #48]	; (801211c <find_volume+0x508>)
 80120ec:	881b      	ldrh	r3, [r3, #0]
 80120ee:	3301      	adds	r3, #1
 80120f0:	b29a      	uxth	r2, r3
 80120f2:	4b0a      	ldr	r3, [pc, #40]	; (801211c <find_volume+0x508>)
 80120f4:	801a      	strh	r2, [r3, #0]
 80120f6:	4b09      	ldr	r3, [pc, #36]	; (801211c <find_volume+0x508>)
 80120f8:	881a      	ldrh	r2, [r3, #0]
 80120fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120fc:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 80120fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012100:	2200      	movs	r2, #0
 8012102:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8012104:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012106:	f7fe fc63 	bl	80109d0 <clear_lock>
#endif
	return FR_OK;
 801210a:	2300      	movs	r3, #0
}
 801210c:	4618      	mov	r0, r3
 801210e:	3758      	adds	r7, #88	; 0x58
 8012110:	46bd      	mov	sp, r7
 8012112:	bd80      	pop	{r7, pc}
 8012114:	41615252 	.word	0x41615252
 8012118:	61417272 	.word	0x61417272
 801211c:	2003c4a0 	.word	0x2003c4a0

08012120 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8012120:	b580      	push	{r7, lr}
 8012122:	b084      	sub	sp, #16
 8012124:	af00      	add	r7, sp, #0
 8012126:	6078      	str	r0, [r7, #4]
 8012128:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801212a:	2309      	movs	r3, #9
 801212c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	2b00      	cmp	r3, #0
 8012132:	d01c      	beq.n	801216e <validate+0x4e>
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	2b00      	cmp	r3, #0
 801213a:	d018      	beq.n	801216e <validate+0x4e>
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	781b      	ldrb	r3, [r3, #0]
 8012142:	2b00      	cmp	r3, #0
 8012144:	d013      	beq.n	801216e <validate+0x4e>
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	889a      	ldrh	r2, [r3, #4]
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	88db      	ldrh	r3, [r3, #6]
 8012150:	429a      	cmp	r2, r3
 8012152:	d10c      	bne.n	801216e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	785b      	ldrb	r3, [r3, #1]
 801215a:	4618      	mov	r0, r3
 801215c:	f7fe f952 	bl	8010404 <disk_status>
 8012160:	4603      	mov	r3, r0
 8012162:	f003 0301 	and.w	r3, r3, #1
 8012166:	2b00      	cmp	r3, #0
 8012168:	d101      	bne.n	801216e <validate+0x4e>
			res = FR_OK;
 801216a:	2300      	movs	r3, #0
 801216c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801216e:	7bfb      	ldrb	r3, [r7, #15]
 8012170:	2b00      	cmp	r3, #0
 8012172:	d102      	bne.n	801217a <validate+0x5a>
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	e000      	b.n	801217c <validate+0x5c>
 801217a:	2300      	movs	r3, #0
 801217c:	683a      	ldr	r2, [r7, #0]
 801217e:	6013      	str	r3, [r2, #0]
	return res;
 8012180:	7bfb      	ldrb	r3, [r7, #15]
}
 8012182:	4618      	mov	r0, r3
 8012184:	3710      	adds	r7, #16
 8012186:	46bd      	mov	sp, r7
 8012188:	bd80      	pop	{r7, pc}
	...

0801218c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801218c:	b580      	push	{r7, lr}
 801218e:	b088      	sub	sp, #32
 8012190:	af00      	add	r7, sp, #0
 8012192:	60f8      	str	r0, [r7, #12]
 8012194:	60b9      	str	r1, [r7, #8]
 8012196:	4613      	mov	r3, r2
 8012198:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801219a:	68bb      	ldr	r3, [r7, #8]
 801219c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801219e:	f107 0310 	add.w	r3, r7, #16
 80121a2:	4618      	mov	r0, r3
 80121a4:	f7ff fc9b 	bl	8011ade <get_ldnumber>
 80121a8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80121aa:	69fb      	ldr	r3, [r7, #28]
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	da01      	bge.n	80121b4 <f_mount+0x28>
 80121b0:	230b      	movs	r3, #11
 80121b2:	e02b      	b.n	801220c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80121b4:	4a17      	ldr	r2, [pc, #92]	; (8012214 <f_mount+0x88>)
 80121b6:	69fb      	ldr	r3, [r7, #28]
 80121b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80121bc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80121be:	69bb      	ldr	r3, [r7, #24]
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d005      	beq.n	80121d0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80121c4:	69b8      	ldr	r0, [r7, #24]
 80121c6:	f7fe fc03 	bl	80109d0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80121ca:	69bb      	ldr	r3, [r7, #24]
 80121cc:	2200      	movs	r2, #0
 80121ce:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d002      	beq.n	80121dc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	2200      	movs	r2, #0
 80121da:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80121dc:	68fa      	ldr	r2, [r7, #12]
 80121de:	490d      	ldr	r1, [pc, #52]	; (8012214 <f_mount+0x88>)
 80121e0:	69fb      	ldr	r3, [r7, #28]
 80121e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d002      	beq.n	80121f2 <f_mount+0x66>
 80121ec:	79fb      	ldrb	r3, [r7, #7]
 80121ee:	2b01      	cmp	r3, #1
 80121f0:	d001      	beq.n	80121f6 <f_mount+0x6a>
 80121f2:	2300      	movs	r3, #0
 80121f4:	e00a      	b.n	801220c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80121f6:	f107 010c 	add.w	r1, r7, #12
 80121fa:	f107 0308 	add.w	r3, r7, #8
 80121fe:	2200      	movs	r2, #0
 8012200:	4618      	mov	r0, r3
 8012202:	f7ff fd07 	bl	8011c14 <find_volume>
 8012206:	4603      	mov	r3, r0
 8012208:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801220a:	7dfb      	ldrb	r3, [r7, #23]
}
 801220c:	4618      	mov	r0, r3
 801220e:	3720      	adds	r7, #32
 8012210:	46bd      	mov	sp, r7
 8012212:	bd80      	pop	{r7, pc}
 8012214:	2003c49c 	.word	0x2003c49c

08012218 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8012218:	b580      	push	{r7, lr}
 801221a:	b098      	sub	sp, #96	; 0x60
 801221c:	af00      	add	r7, sp, #0
 801221e:	60f8      	str	r0, [r7, #12]
 8012220:	60b9      	str	r1, [r7, #8]
 8012222:	4613      	mov	r3, r2
 8012224:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	2b00      	cmp	r3, #0
 801222a:	d101      	bne.n	8012230 <f_open+0x18>
 801222c:	2309      	movs	r3, #9
 801222e:	e1ba      	b.n	80125a6 <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8012230:	79fb      	ldrb	r3, [r7, #7]
 8012232:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012236:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8012238:	79fa      	ldrb	r2, [r7, #7]
 801223a:	f107 0110 	add.w	r1, r7, #16
 801223e:	f107 0308 	add.w	r3, r7, #8
 8012242:	4618      	mov	r0, r3
 8012244:	f7ff fce6 	bl	8011c14 <find_volume>
 8012248:	4603      	mov	r3, r0
 801224a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 801224e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012252:	2b00      	cmp	r3, #0
 8012254:	f040 819e 	bne.w	8012594 <f_open+0x37c>
		dj.obj.fs = fs;
 8012258:	693b      	ldr	r3, [r7, #16]
 801225a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801225c:	68ba      	ldr	r2, [r7, #8]
 801225e:	f107 0314 	add.w	r3, r7, #20
 8012262:	4611      	mov	r1, r2
 8012264:	4618      	mov	r0, r3
 8012266:	f7ff fba5 	bl	80119b4 <follow_path>
 801226a:	4603      	mov	r3, r0
 801226c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8012270:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012274:	2b00      	cmp	r3, #0
 8012276:	d11a      	bne.n	80122ae <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8012278:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801227c:	b25b      	sxtb	r3, r3
 801227e:	2b00      	cmp	r3, #0
 8012280:	da03      	bge.n	801228a <f_open+0x72>
				res = FR_INVALID_NAME;
 8012282:	2306      	movs	r3, #6
 8012284:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012288:	e011      	b.n	80122ae <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801228a:	79fb      	ldrb	r3, [r7, #7]
 801228c:	f023 0301 	bic.w	r3, r3, #1
 8012290:	2b00      	cmp	r3, #0
 8012292:	bf14      	ite	ne
 8012294:	2301      	movne	r3, #1
 8012296:	2300      	moveq	r3, #0
 8012298:	b2db      	uxtb	r3, r3
 801229a:	461a      	mov	r2, r3
 801229c:	f107 0314 	add.w	r3, r7, #20
 80122a0:	4611      	mov	r1, r2
 80122a2:	4618      	mov	r0, r3
 80122a4:	f7fe fa4c 	bl	8010740 <chk_lock>
 80122a8:	4603      	mov	r3, r0
 80122aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80122ae:	79fb      	ldrb	r3, [r7, #7]
 80122b0:	f003 031c 	and.w	r3, r3, #28
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d07e      	beq.n	80123b6 <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 80122b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d017      	beq.n	80122f0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80122c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80122c4:	2b04      	cmp	r3, #4
 80122c6:	d10e      	bne.n	80122e6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80122c8:	f7fe fa96 	bl	80107f8 <enq_lock>
 80122cc:	4603      	mov	r3, r0
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d006      	beq.n	80122e0 <f_open+0xc8>
 80122d2:	f107 0314 	add.w	r3, r7, #20
 80122d6:	4618      	mov	r0, r3
 80122d8:	f7ff fa52 	bl	8011780 <dir_register>
 80122dc:	4603      	mov	r3, r0
 80122de:	e000      	b.n	80122e2 <f_open+0xca>
 80122e0:	2312      	movs	r3, #18
 80122e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80122e6:	79fb      	ldrb	r3, [r7, #7]
 80122e8:	f043 0308 	orr.w	r3, r3, #8
 80122ec:	71fb      	strb	r3, [r7, #7]
 80122ee:	e010      	b.n	8012312 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80122f0:	7ebb      	ldrb	r3, [r7, #26]
 80122f2:	f003 0311 	and.w	r3, r3, #17
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d003      	beq.n	8012302 <f_open+0xea>
					res = FR_DENIED;
 80122fa:	2307      	movs	r3, #7
 80122fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012300:	e007      	b.n	8012312 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8012302:	79fb      	ldrb	r3, [r7, #7]
 8012304:	f003 0304 	and.w	r3, r3, #4
 8012308:	2b00      	cmp	r3, #0
 801230a:	d002      	beq.n	8012312 <f_open+0xfa>
 801230c:	2308      	movs	r3, #8
 801230e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8012312:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012316:	2b00      	cmp	r3, #0
 8012318:	d167      	bne.n	80123ea <f_open+0x1d2>
 801231a:	79fb      	ldrb	r3, [r7, #7]
 801231c:	f003 0308 	and.w	r3, r3, #8
 8012320:	2b00      	cmp	r3, #0
 8012322:	d062      	beq.n	80123ea <f_open+0x1d2>
				dw = GET_FATTIME();
 8012324:	4ba2      	ldr	r3, [pc, #648]	; (80125b0 <f_open+0x398>)
 8012326:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8012328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801232a:	330e      	adds	r3, #14
 801232c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801232e:	4618      	mov	r0, r3
 8012330:	f7fe f95c 	bl	80105ec <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8012334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012336:	3316      	adds	r3, #22
 8012338:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801233a:	4618      	mov	r0, r3
 801233c:	f7fe f956 	bl	80105ec <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8012340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012342:	330b      	adds	r3, #11
 8012344:	2220      	movs	r2, #32
 8012346:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8012348:	693b      	ldr	r3, [r7, #16]
 801234a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801234c:	4611      	mov	r1, r2
 801234e:	4618      	mov	r0, r3
 8012350:	f7ff f925 	bl	801159e <ld_clust>
 8012354:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8012356:	693b      	ldr	r3, [r7, #16]
 8012358:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801235a:	2200      	movs	r2, #0
 801235c:	4618      	mov	r0, r3
 801235e:	f7ff f93d 	bl	80115dc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8012362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012364:	331c      	adds	r3, #28
 8012366:	2100      	movs	r1, #0
 8012368:	4618      	mov	r0, r3
 801236a:	f7fe f93f 	bl	80105ec <st_dword>
					fs->wflag = 1;
 801236e:	693b      	ldr	r3, [r7, #16]
 8012370:	2201      	movs	r2, #1
 8012372:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8012374:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012376:	2b00      	cmp	r3, #0
 8012378:	d037      	beq.n	80123ea <f_open+0x1d2>
						dw = fs->winsect;
 801237a:	693b      	ldr	r3, [r7, #16]
 801237c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801237e:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8012380:	f107 0314 	add.w	r3, r7, #20
 8012384:	2200      	movs	r2, #0
 8012386:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8012388:	4618      	mov	r0, r3
 801238a:	f7fe fe2d 	bl	8010fe8 <remove_chain>
 801238e:	4603      	mov	r3, r0
 8012390:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8012394:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012398:	2b00      	cmp	r3, #0
 801239a:	d126      	bne.n	80123ea <f_open+0x1d2>
							res = move_window(fs, dw);
 801239c:	693b      	ldr	r3, [r7, #16]
 801239e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80123a0:	4618      	mov	r0, r3
 80123a2:	f7fe fb7d 	bl	8010aa0 <move_window>
 80123a6:	4603      	mov	r3, r0
 80123a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80123ac:	693b      	ldr	r3, [r7, #16]
 80123ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80123b0:	3a01      	subs	r2, #1
 80123b2:	611a      	str	r2, [r3, #16]
 80123b4:	e019      	b.n	80123ea <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80123b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d115      	bne.n	80123ea <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80123be:	7ebb      	ldrb	r3, [r7, #26]
 80123c0:	f003 0310 	and.w	r3, r3, #16
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d003      	beq.n	80123d0 <f_open+0x1b8>
					res = FR_NO_FILE;
 80123c8:	2304      	movs	r3, #4
 80123ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80123ce:	e00c      	b.n	80123ea <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80123d0:	79fb      	ldrb	r3, [r7, #7]
 80123d2:	f003 0302 	and.w	r3, r3, #2
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d007      	beq.n	80123ea <f_open+0x1d2>
 80123da:	7ebb      	ldrb	r3, [r7, #26]
 80123dc:	f003 0301 	and.w	r3, r3, #1
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d002      	beq.n	80123ea <f_open+0x1d2>
						res = FR_DENIED;
 80123e4:	2307      	movs	r3, #7
 80123e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80123ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d128      	bne.n	8012444 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80123f2:	79fb      	ldrb	r3, [r7, #7]
 80123f4:	f003 0308 	and.w	r3, r3, #8
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d003      	beq.n	8012404 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 80123fc:	79fb      	ldrb	r3, [r7, #7]
 80123fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012402:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8012404:	693b      	ldr	r3, [r7, #16]
 8012406:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801240c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801240e:	68fb      	ldr	r3, [r7, #12]
 8012410:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012412:	79fb      	ldrb	r3, [r7, #7]
 8012414:	f023 0301 	bic.w	r3, r3, #1
 8012418:	2b00      	cmp	r3, #0
 801241a:	bf14      	ite	ne
 801241c:	2301      	movne	r3, #1
 801241e:	2300      	moveq	r3, #0
 8012420:	b2db      	uxtb	r3, r3
 8012422:	461a      	mov	r2, r3
 8012424:	f107 0314 	add.w	r3, r7, #20
 8012428:	4611      	mov	r1, r2
 801242a:	4618      	mov	r0, r3
 801242c:	f7fe fa06 	bl	801083c <inc_lock>
 8012430:	4602      	mov	r2, r0
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	691b      	ldr	r3, [r3, #16]
 801243a:	2b00      	cmp	r3, #0
 801243c:	d102      	bne.n	8012444 <f_open+0x22c>
 801243e:	2302      	movs	r3, #2
 8012440:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8012444:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012448:	2b00      	cmp	r3, #0
 801244a:	f040 80a3 	bne.w	8012594 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801244e:	693b      	ldr	r3, [r7, #16]
 8012450:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012452:	4611      	mov	r1, r2
 8012454:	4618      	mov	r0, r3
 8012456:	f7ff f8a2 	bl	801159e <ld_clust>
 801245a:	4602      	mov	r2, r0
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8012460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012462:	331c      	adds	r3, #28
 8012464:	4618      	mov	r0, r3
 8012466:	f7fe f883 	bl	8010570 <ld_dword>
 801246a:	4602      	mov	r2, r0
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	2200      	movs	r2, #0
 8012474:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8012476:	693a      	ldr	r2, [r7, #16]
 8012478:	68fb      	ldr	r3, [r7, #12]
 801247a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801247c:	693b      	ldr	r3, [r7, #16]
 801247e:	88da      	ldrh	r2, [r3, #6]
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	79fa      	ldrb	r2, [r7, #7]
 8012488:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	2200      	movs	r2, #0
 801248e:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	2200      	movs	r2, #0
 8012494:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8012496:	68fb      	ldr	r3, [r7, #12]
 8012498:	2200      	movs	r2, #0
 801249a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	3330      	adds	r3, #48	; 0x30
 80124a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80124a4:	2100      	movs	r1, #0
 80124a6:	4618      	mov	r0, r3
 80124a8:	f7fe f8ed 	bl	8010686 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80124ac:	79fb      	ldrb	r3, [r7, #7]
 80124ae:	f003 0320 	and.w	r3, r3, #32
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d06e      	beq.n	8012594 <f_open+0x37c>
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	68db      	ldr	r3, [r3, #12]
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d06a      	beq.n	8012594 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80124be:	68fb      	ldr	r3, [r7, #12]
 80124c0:	68da      	ldr	r2, [r3, #12]
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80124c6:	693b      	ldr	r3, [r7, #16]
 80124c8:	895b      	ldrh	r3, [r3, #10]
 80124ca:	461a      	mov	r2, r3
 80124cc:	693b      	ldr	r3, [r7, #16]
 80124ce:	899b      	ldrh	r3, [r3, #12]
 80124d0:	fb03 f302 	mul.w	r3, r3, r2
 80124d4:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	689b      	ldr	r3, [r3, #8]
 80124da:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80124dc:	68fb      	ldr	r3, [r7, #12]
 80124de:	68db      	ldr	r3, [r3, #12]
 80124e0:	657b      	str	r3, [r7, #84]	; 0x54
 80124e2:	e016      	b.n	8012512 <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80124e8:	4618      	mov	r0, r3
 80124ea:	f7fe fb96 	bl	8010c1a <get_fat>
 80124ee:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80124f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80124f2:	2b01      	cmp	r3, #1
 80124f4:	d802      	bhi.n	80124fc <f_open+0x2e4>
 80124f6:	2302      	movs	r3, #2
 80124f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80124fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80124fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012502:	d102      	bne.n	801250a <f_open+0x2f2>
 8012504:	2301      	movs	r3, #1
 8012506:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801250a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801250c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801250e:	1ad3      	subs	r3, r2, r3
 8012510:	657b      	str	r3, [r7, #84]	; 0x54
 8012512:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012516:	2b00      	cmp	r3, #0
 8012518:	d103      	bne.n	8012522 <f_open+0x30a>
 801251a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801251c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801251e:	429a      	cmp	r2, r3
 8012520:	d8e0      	bhi.n	80124e4 <f_open+0x2cc>
				}
				fp->clust = clst;
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012526:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8012528:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801252c:	2b00      	cmp	r3, #0
 801252e:	d131      	bne.n	8012594 <f_open+0x37c>
 8012530:	693b      	ldr	r3, [r7, #16]
 8012532:	899b      	ldrh	r3, [r3, #12]
 8012534:	461a      	mov	r2, r3
 8012536:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012538:	fbb3 f1f2 	udiv	r1, r3, r2
 801253c:	fb02 f201 	mul.w	r2, r2, r1
 8012540:	1a9b      	subs	r3, r3, r2
 8012542:	2b00      	cmp	r3, #0
 8012544:	d026      	beq.n	8012594 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8012546:	693b      	ldr	r3, [r7, #16]
 8012548:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801254a:	4618      	mov	r0, r3
 801254c:	f7fe fb46 	bl	8010bdc <clust2sect>
 8012550:	6478      	str	r0, [r7, #68]	; 0x44
 8012552:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012554:	2b00      	cmp	r3, #0
 8012556:	d103      	bne.n	8012560 <f_open+0x348>
						res = FR_INT_ERR;
 8012558:	2302      	movs	r3, #2
 801255a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801255e:	e019      	b.n	8012594 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8012560:	693b      	ldr	r3, [r7, #16]
 8012562:	899b      	ldrh	r3, [r3, #12]
 8012564:	461a      	mov	r2, r3
 8012566:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012568:	fbb3 f2f2 	udiv	r2, r3, r2
 801256c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801256e:	441a      	add	r2, r3
 8012570:	68fb      	ldr	r3, [r7, #12]
 8012572:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8012574:	693b      	ldr	r3, [r7, #16]
 8012576:	7858      	ldrb	r0, [r3, #1]
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801257e:	68fb      	ldr	r3, [r7, #12]
 8012580:	6a1a      	ldr	r2, [r3, #32]
 8012582:	2301      	movs	r3, #1
 8012584:	f7fd ff7e 	bl	8010484 <disk_read>
 8012588:	4603      	mov	r3, r0
 801258a:	2b00      	cmp	r3, #0
 801258c:	d002      	beq.n	8012594 <f_open+0x37c>
 801258e:	2301      	movs	r3, #1
 8012590:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8012594:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012598:	2b00      	cmp	r3, #0
 801259a:	d002      	beq.n	80125a2 <f_open+0x38a>
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	2200      	movs	r2, #0
 80125a0:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80125a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80125a6:	4618      	mov	r0, r3
 80125a8:	3760      	adds	r7, #96	; 0x60
 80125aa:	46bd      	mov	sp, r7
 80125ac:	bd80      	pop	{r7, pc}
 80125ae:	bf00      	nop
 80125b0:	274a0000 	.word	0x274a0000

080125b4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80125b4:	b580      	push	{r7, lr}
 80125b6:	b08e      	sub	sp, #56	; 0x38
 80125b8:	af00      	add	r7, sp, #0
 80125ba:	60f8      	str	r0, [r7, #12]
 80125bc:	60b9      	str	r1, [r7, #8]
 80125be:	607a      	str	r2, [r7, #4]
 80125c0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80125c2:	68bb      	ldr	r3, [r7, #8]
 80125c4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80125c6:	683b      	ldr	r3, [r7, #0]
 80125c8:	2200      	movs	r2, #0
 80125ca:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	f107 0214 	add.w	r2, r7, #20
 80125d2:	4611      	mov	r1, r2
 80125d4:	4618      	mov	r0, r3
 80125d6:	f7ff fda3 	bl	8012120 <validate>
 80125da:	4603      	mov	r3, r0
 80125dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80125e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d107      	bne.n	80125f8 <f_read+0x44>
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	7d5b      	ldrb	r3, [r3, #21]
 80125ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80125f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d002      	beq.n	80125fe <f_read+0x4a>
 80125f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80125fc:	e135      	b.n	801286a <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	7d1b      	ldrb	r3, [r3, #20]
 8012602:	f003 0301 	and.w	r3, r3, #1
 8012606:	2b00      	cmp	r3, #0
 8012608:	d101      	bne.n	801260e <f_read+0x5a>
 801260a:	2307      	movs	r3, #7
 801260c:	e12d      	b.n	801286a <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 801260e:	68fb      	ldr	r3, [r7, #12]
 8012610:	68da      	ldr	r2, [r3, #12]
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	699b      	ldr	r3, [r3, #24]
 8012616:	1ad3      	subs	r3, r2, r3
 8012618:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801261a:	687a      	ldr	r2, [r7, #4]
 801261c:	6a3b      	ldr	r3, [r7, #32]
 801261e:	429a      	cmp	r2, r3
 8012620:	f240 811e 	bls.w	8012860 <f_read+0x2ac>
 8012624:	6a3b      	ldr	r3, [r7, #32]
 8012626:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8012628:	e11a      	b.n	8012860 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	699b      	ldr	r3, [r3, #24]
 801262e:	697a      	ldr	r2, [r7, #20]
 8012630:	8992      	ldrh	r2, [r2, #12]
 8012632:	fbb3 f1f2 	udiv	r1, r3, r2
 8012636:	fb02 f201 	mul.w	r2, r2, r1
 801263a:	1a9b      	subs	r3, r3, r2
 801263c:	2b00      	cmp	r3, #0
 801263e:	f040 80d5 	bne.w	80127ec <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8012642:	68fb      	ldr	r3, [r7, #12]
 8012644:	699b      	ldr	r3, [r3, #24]
 8012646:	697a      	ldr	r2, [r7, #20]
 8012648:	8992      	ldrh	r2, [r2, #12]
 801264a:	fbb3 f3f2 	udiv	r3, r3, r2
 801264e:	697a      	ldr	r2, [r7, #20]
 8012650:	8952      	ldrh	r2, [r2, #10]
 8012652:	3a01      	subs	r2, #1
 8012654:	4013      	ands	r3, r2
 8012656:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8012658:	69fb      	ldr	r3, [r7, #28]
 801265a:	2b00      	cmp	r3, #0
 801265c:	d12f      	bne.n	80126be <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801265e:	68fb      	ldr	r3, [r7, #12]
 8012660:	699b      	ldr	r3, [r3, #24]
 8012662:	2b00      	cmp	r3, #0
 8012664:	d103      	bne.n	801266e <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	689b      	ldr	r3, [r3, #8]
 801266a:	633b      	str	r3, [r7, #48]	; 0x30
 801266c:	e013      	b.n	8012696 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801266e:	68fb      	ldr	r3, [r7, #12]
 8012670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012672:	2b00      	cmp	r3, #0
 8012674:	d007      	beq.n	8012686 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	699b      	ldr	r3, [r3, #24]
 801267a:	4619      	mov	r1, r3
 801267c:	68f8      	ldr	r0, [r7, #12]
 801267e:	f7fe fdb0 	bl	80111e2 <clmt_clust>
 8012682:	6338      	str	r0, [r7, #48]	; 0x30
 8012684:	e007      	b.n	8012696 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8012686:	68fa      	ldr	r2, [r7, #12]
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	69db      	ldr	r3, [r3, #28]
 801268c:	4619      	mov	r1, r3
 801268e:	4610      	mov	r0, r2
 8012690:	f7fe fac3 	bl	8010c1a <get_fat>
 8012694:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8012696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012698:	2b01      	cmp	r3, #1
 801269a:	d804      	bhi.n	80126a6 <f_read+0xf2>
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	2202      	movs	r2, #2
 80126a0:	755a      	strb	r2, [r3, #21]
 80126a2:	2302      	movs	r3, #2
 80126a4:	e0e1      	b.n	801286a <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80126a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126ac:	d104      	bne.n	80126b8 <f_read+0x104>
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	2201      	movs	r2, #1
 80126b2:	755a      	strb	r2, [r3, #21]
 80126b4:	2301      	movs	r3, #1
 80126b6:	e0d8      	b.n	801286a <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80126b8:	68fb      	ldr	r3, [r7, #12]
 80126ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80126bc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80126be:	697a      	ldr	r2, [r7, #20]
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	69db      	ldr	r3, [r3, #28]
 80126c4:	4619      	mov	r1, r3
 80126c6:	4610      	mov	r0, r2
 80126c8:	f7fe fa88 	bl	8010bdc <clust2sect>
 80126cc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80126ce:	69bb      	ldr	r3, [r7, #24]
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d104      	bne.n	80126de <f_read+0x12a>
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	2202      	movs	r2, #2
 80126d8:	755a      	strb	r2, [r3, #21]
 80126da:	2302      	movs	r3, #2
 80126dc:	e0c5      	b.n	801286a <f_read+0x2b6>
			sect += csect;
 80126de:	69ba      	ldr	r2, [r7, #24]
 80126e0:	69fb      	ldr	r3, [r7, #28]
 80126e2:	4413      	add	r3, r2
 80126e4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80126e6:	697b      	ldr	r3, [r7, #20]
 80126e8:	899b      	ldrh	r3, [r3, #12]
 80126ea:	461a      	mov	r2, r3
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80126f2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80126f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d041      	beq.n	801277e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80126fa:	69fa      	ldr	r2, [r7, #28]
 80126fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126fe:	4413      	add	r3, r2
 8012700:	697a      	ldr	r2, [r7, #20]
 8012702:	8952      	ldrh	r2, [r2, #10]
 8012704:	4293      	cmp	r3, r2
 8012706:	d905      	bls.n	8012714 <f_read+0x160>
					cc = fs->csize - csect;
 8012708:	697b      	ldr	r3, [r7, #20]
 801270a:	895b      	ldrh	r3, [r3, #10]
 801270c:	461a      	mov	r2, r3
 801270e:	69fb      	ldr	r3, [r7, #28]
 8012710:	1ad3      	subs	r3, r2, r3
 8012712:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012714:	697b      	ldr	r3, [r7, #20]
 8012716:	7858      	ldrb	r0, [r3, #1]
 8012718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801271a:	69ba      	ldr	r2, [r7, #24]
 801271c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801271e:	f7fd feb1 	bl	8010484 <disk_read>
 8012722:	4603      	mov	r3, r0
 8012724:	2b00      	cmp	r3, #0
 8012726:	d004      	beq.n	8012732 <f_read+0x17e>
 8012728:	68fb      	ldr	r3, [r7, #12]
 801272a:	2201      	movs	r2, #1
 801272c:	755a      	strb	r2, [r3, #21]
 801272e:	2301      	movs	r3, #1
 8012730:	e09b      	b.n	801286a <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8012732:	68fb      	ldr	r3, [r7, #12]
 8012734:	7d1b      	ldrb	r3, [r3, #20]
 8012736:	b25b      	sxtb	r3, r3
 8012738:	2b00      	cmp	r3, #0
 801273a:	da18      	bge.n	801276e <f_read+0x1ba>
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	6a1a      	ldr	r2, [r3, #32]
 8012740:	69bb      	ldr	r3, [r7, #24]
 8012742:	1ad3      	subs	r3, r2, r3
 8012744:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012746:	429a      	cmp	r2, r3
 8012748:	d911      	bls.n	801276e <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801274a:	68fb      	ldr	r3, [r7, #12]
 801274c:	6a1a      	ldr	r2, [r3, #32]
 801274e:	69bb      	ldr	r3, [r7, #24]
 8012750:	1ad3      	subs	r3, r2, r3
 8012752:	697a      	ldr	r2, [r7, #20]
 8012754:	8992      	ldrh	r2, [r2, #12]
 8012756:	fb02 f303 	mul.w	r3, r2, r3
 801275a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801275c:	18d0      	adds	r0, r2, r3
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012764:	697b      	ldr	r3, [r7, #20]
 8012766:	899b      	ldrh	r3, [r3, #12]
 8012768:	461a      	mov	r2, r3
 801276a:	f7fd ff6b 	bl	8010644 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801276e:	697b      	ldr	r3, [r7, #20]
 8012770:	899b      	ldrh	r3, [r3, #12]
 8012772:	461a      	mov	r2, r3
 8012774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012776:	fb02 f303 	mul.w	r3, r2, r3
 801277a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 801277c:	e05c      	b.n	8012838 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	6a1b      	ldr	r3, [r3, #32]
 8012782:	69ba      	ldr	r2, [r7, #24]
 8012784:	429a      	cmp	r2, r3
 8012786:	d02e      	beq.n	80127e6 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8012788:	68fb      	ldr	r3, [r7, #12]
 801278a:	7d1b      	ldrb	r3, [r3, #20]
 801278c:	b25b      	sxtb	r3, r3
 801278e:	2b00      	cmp	r3, #0
 8012790:	da18      	bge.n	80127c4 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012792:	697b      	ldr	r3, [r7, #20]
 8012794:	7858      	ldrb	r0, [r3, #1]
 8012796:	68fb      	ldr	r3, [r7, #12]
 8012798:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	6a1a      	ldr	r2, [r3, #32]
 80127a0:	2301      	movs	r3, #1
 80127a2:	f7fd fe8f 	bl	80104c4 <disk_write>
 80127a6:	4603      	mov	r3, r0
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d004      	beq.n	80127b6 <f_read+0x202>
 80127ac:	68fb      	ldr	r3, [r7, #12]
 80127ae:	2201      	movs	r2, #1
 80127b0:	755a      	strb	r2, [r3, #21]
 80127b2:	2301      	movs	r3, #1
 80127b4:	e059      	b.n	801286a <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	7d1b      	ldrb	r3, [r3, #20]
 80127ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80127be:	b2da      	uxtb	r2, r3
 80127c0:	68fb      	ldr	r3, [r7, #12]
 80127c2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80127c4:	697b      	ldr	r3, [r7, #20]
 80127c6:	7858      	ldrb	r0, [r3, #1]
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80127ce:	2301      	movs	r3, #1
 80127d0:	69ba      	ldr	r2, [r7, #24]
 80127d2:	f7fd fe57 	bl	8010484 <disk_read>
 80127d6:	4603      	mov	r3, r0
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d004      	beq.n	80127e6 <f_read+0x232>
 80127dc:	68fb      	ldr	r3, [r7, #12]
 80127de:	2201      	movs	r2, #1
 80127e0:	755a      	strb	r2, [r3, #21]
 80127e2:	2301      	movs	r3, #1
 80127e4:	e041      	b.n	801286a <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	69ba      	ldr	r2, [r7, #24]
 80127ea:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80127ec:	697b      	ldr	r3, [r7, #20]
 80127ee:	899b      	ldrh	r3, [r3, #12]
 80127f0:	4618      	mov	r0, r3
 80127f2:	68fb      	ldr	r3, [r7, #12]
 80127f4:	699b      	ldr	r3, [r3, #24]
 80127f6:	697a      	ldr	r2, [r7, #20]
 80127f8:	8992      	ldrh	r2, [r2, #12]
 80127fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80127fe:	fb02 f201 	mul.w	r2, r2, r1
 8012802:	1a9b      	subs	r3, r3, r2
 8012804:	1ac3      	subs	r3, r0, r3
 8012806:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8012808:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	429a      	cmp	r2, r3
 801280e:	d901      	bls.n	8012814 <f_read+0x260>
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8012814:	68fb      	ldr	r3, [r7, #12]
 8012816:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	699b      	ldr	r3, [r3, #24]
 801281e:	697a      	ldr	r2, [r7, #20]
 8012820:	8992      	ldrh	r2, [r2, #12]
 8012822:	fbb3 f0f2 	udiv	r0, r3, r2
 8012826:	fb02 f200 	mul.w	r2, r2, r0
 801282a:	1a9b      	subs	r3, r3, r2
 801282c:	440b      	add	r3, r1
 801282e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012830:	4619      	mov	r1, r3
 8012832:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012834:	f7fd ff06 	bl	8010644 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8012838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801283a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801283c:	4413      	add	r3, r2
 801283e:	627b      	str	r3, [r7, #36]	; 0x24
 8012840:	68fb      	ldr	r3, [r7, #12]
 8012842:	699a      	ldr	r2, [r3, #24]
 8012844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012846:	441a      	add	r2, r3
 8012848:	68fb      	ldr	r3, [r7, #12]
 801284a:	619a      	str	r2, [r3, #24]
 801284c:	683b      	ldr	r3, [r7, #0]
 801284e:	681a      	ldr	r2, [r3, #0]
 8012850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012852:	441a      	add	r2, r3
 8012854:	683b      	ldr	r3, [r7, #0]
 8012856:	601a      	str	r2, [r3, #0]
 8012858:	687a      	ldr	r2, [r7, #4]
 801285a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801285c:	1ad3      	subs	r3, r2, r3
 801285e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	2b00      	cmp	r3, #0
 8012864:	f47f aee1 	bne.w	801262a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8012868:	2300      	movs	r3, #0
}
 801286a:	4618      	mov	r0, r3
 801286c:	3738      	adds	r7, #56	; 0x38
 801286e:	46bd      	mov	sp, r7
 8012870:	bd80      	pop	{r7, pc}

08012872 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8012872:	b580      	push	{r7, lr}
 8012874:	b08c      	sub	sp, #48	; 0x30
 8012876:	af00      	add	r7, sp, #0
 8012878:	60f8      	str	r0, [r7, #12]
 801287a:	60b9      	str	r1, [r7, #8]
 801287c:	607a      	str	r2, [r7, #4]
 801287e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8012880:	68bb      	ldr	r3, [r7, #8]
 8012882:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8012884:	683b      	ldr	r3, [r7, #0]
 8012886:	2200      	movs	r2, #0
 8012888:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801288a:	68fb      	ldr	r3, [r7, #12]
 801288c:	f107 0210 	add.w	r2, r7, #16
 8012890:	4611      	mov	r1, r2
 8012892:	4618      	mov	r0, r3
 8012894:	f7ff fc44 	bl	8012120 <validate>
 8012898:	4603      	mov	r3, r0
 801289a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801289e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d107      	bne.n	80128b6 <f_write+0x44>
 80128a6:	68fb      	ldr	r3, [r7, #12]
 80128a8:	7d5b      	ldrb	r3, [r3, #21]
 80128aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80128ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d002      	beq.n	80128bc <f_write+0x4a>
 80128b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80128ba:	e16a      	b.n	8012b92 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80128bc:	68fb      	ldr	r3, [r7, #12]
 80128be:	7d1b      	ldrb	r3, [r3, #20]
 80128c0:	f003 0302 	and.w	r3, r3, #2
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d101      	bne.n	80128cc <f_write+0x5a>
 80128c8:	2307      	movs	r3, #7
 80128ca:	e162      	b.n	8012b92 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80128cc:	68fb      	ldr	r3, [r7, #12]
 80128ce:	699a      	ldr	r2, [r3, #24]
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	441a      	add	r2, r3
 80128d4:	68fb      	ldr	r3, [r7, #12]
 80128d6:	699b      	ldr	r3, [r3, #24]
 80128d8:	429a      	cmp	r2, r3
 80128da:	f080 814c 	bcs.w	8012b76 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	699b      	ldr	r3, [r3, #24]
 80128e2:	43db      	mvns	r3, r3
 80128e4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80128e6:	e146      	b.n	8012b76 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	699b      	ldr	r3, [r3, #24]
 80128ec:	693a      	ldr	r2, [r7, #16]
 80128ee:	8992      	ldrh	r2, [r2, #12]
 80128f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80128f4:	fb02 f201 	mul.w	r2, r2, r1
 80128f8:	1a9b      	subs	r3, r3, r2
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	f040 80f1 	bne.w	8012ae2 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8012900:	68fb      	ldr	r3, [r7, #12]
 8012902:	699b      	ldr	r3, [r3, #24]
 8012904:	693a      	ldr	r2, [r7, #16]
 8012906:	8992      	ldrh	r2, [r2, #12]
 8012908:	fbb3 f3f2 	udiv	r3, r3, r2
 801290c:	693a      	ldr	r2, [r7, #16]
 801290e:	8952      	ldrh	r2, [r2, #10]
 8012910:	3a01      	subs	r2, #1
 8012912:	4013      	ands	r3, r2
 8012914:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8012916:	69bb      	ldr	r3, [r7, #24]
 8012918:	2b00      	cmp	r3, #0
 801291a:	d143      	bne.n	80129a4 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801291c:	68fb      	ldr	r3, [r7, #12]
 801291e:	699b      	ldr	r3, [r3, #24]
 8012920:	2b00      	cmp	r3, #0
 8012922:	d10c      	bne.n	801293e <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8012924:	68fb      	ldr	r3, [r7, #12]
 8012926:	689b      	ldr	r3, [r3, #8]
 8012928:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801292a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801292c:	2b00      	cmp	r3, #0
 801292e:	d11a      	bne.n	8012966 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	2100      	movs	r1, #0
 8012934:	4618      	mov	r0, r3
 8012936:	f7fe fbbc 	bl	80110b2 <create_chain>
 801293a:	62b8      	str	r0, [r7, #40]	; 0x28
 801293c:	e013      	b.n	8012966 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012942:	2b00      	cmp	r3, #0
 8012944:	d007      	beq.n	8012956 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	699b      	ldr	r3, [r3, #24]
 801294a:	4619      	mov	r1, r3
 801294c:	68f8      	ldr	r0, [r7, #12]
 801294e:	f7fe fc48 	bl	80111e2 <clmt_clust>
 8012952:	62b8      	str	r0, [r7, #40]	; 0x28
 8012954:	e007      	b.n	8012966 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8012956:	68fa      	ldr	r2, [r7, #12]
 8012958:	68fb      	ldr	r3, [r7, #12]
 801295a:	69db      	ldr	r3, [r3, #28]
 801295c:	4619      	mov	r1, r3
 801295e:	4610      	mov	r0, r2
 8012960:	f7fe fba7 	bl	80110b2 <create_chain>
 8012964:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012968:	2b00      	cmp	r3, #0
 801296a:	f000 8109 	beq.w	8012b80 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801296e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012970:	2b01      	cmp	r3, #1
 8012972:	d104      	bne.n	801297e <f_write+0x10c>
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	2202      	movs	r2, #2
 8012978:	755a      	strb	r2, [r3, #21]
 801297a:	2302      	movs	r3, #2
 801297c:	e109      	b.n	8012b92 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801297e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012984:	d104      	bne.n	8012990 <f_write+0x11e>
 8012986:	68fb      	ldr	r3, [r7, #12]
 8012988:	2201      	movs	r2, #1
 801298a:	755a      	strb	r2, [r3, #21]
 801298c:	2301      	movs	r3, #1
 801298e:	e100      	b.n	8012b92 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012994:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8012996:	68fb      	ldr	r3, [r7, #12]
 8012998:	689b      	ldr	r3, [r3, #8]
 801299a:	2b00      	cmp	r3, #0
 801299c:	d102      	bne.n	80129a4 <f_write+0x132>
 801299e:	68fb      	ldr	r3, [r7, #12]
 80129a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80129a2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	7d1b      	ldrb	r3, [r3, #20]
 80129a8:	b25b      	sxtb	r3, r3
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	da18      	bge.n	80129e0 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80129ae:	693b      	ldr	r3, [r7, #16]
 80129b0:	7858      	ldrb	r0, [r3, #1]
 80129b2:	68fb      	ldr	r3, [r7, #12]
 80129b4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	6a1a      	ldr	r2, [r3, #32]
 80129bc:	2301      	movs	r3, #1
 80129be:	f7fd fd81 	bl	80104c4 <disk_write>
 80129c2:	4603      	mov	r3, r0
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d004      	beq.n	80129d2 <f_write+0x160>
 80129c8:	68fb      	ldr	r3, [r7, #12]
 80129ca:	2201      	movs	r2, #1
 80129cc:	755a      	strb	r2, [r3, #21]
 80129ce:	2301      	movs	r3, #1
 80129d0:	e0df      	b.n	8012b92 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	7d1b      	ldrb	r3, [r3, #20]
 80129d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80129da:	b2da      	uxtb	r2, r3
 80129dc:	68fb      	ldr	r3, [r7, #12]
 80129de:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80129e0:	693a      	ldr	r2, [r7, #16]
 80129e2:	68fb      	ldr	r3, [r7, #12]
 80129e4:	69db      	ldr	r3, [r3, #28]
 80129e6:	4619      	mov	r1, r3
 80129e8:	4610      	mov	r0, r2
 80129ea:	f7fe f8f7 	bl	8010bdc <clust2sect>
 80129ee:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80129f0:	697b      	ldr	r3, [r7, #20]
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d104      	bne.n	8012a00 <f_write+0x18e>
 80129f6:	68fb      	ldr	r3, [r7, #12]
 80129f8:	2202      	movs	r2, #2
 80129fa:	755a      	strb	r2, [r3, #21]
 80129fc:	2302      	movs	r3, #2
 80129fe:	e0c8      	b.n	8012b92 <f_write+0x320>
			sect += csect;
 8012a00:	697a      	ldr	r2, [r7, #20]
 8012a02:	69bb      	ldr	r3, [r7, #24]
 8012a04:	4413      	add	r3, r2
 8012a06:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8012a08:	693b      	ldr	r3, [r7, #16]
 8012a0a:	899b      	ldrh	r3, [r3, #12]
 8012a0c:	461a      	mov	r2, r3
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	fbb3 f3f2 	udiv	r3, r3, r2
 8012a14:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8012a16:	6a3b      	ldr	r3, [r7, #32]
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d043      	beq.n	8012aa4 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8012a1c:	69ba      	ldr	r2, [r7, #24]
 8012a1e:	6a3b      	ldr	r3, [r7, #32]
 8012a20:	4413      	add	r3, r2
 8012a22:	693a      	ldr	r2, [r7, #16]
 8012a24:	8952      	ldrh	r2, [r2, #10]
 8012a26:	4293      	cmp	r3, r2
 8012a28:	d905      	bls.n	8012a36 <f_write+0x1c4>
					cc = fs->csize - csect;
 8012a2a:	693b      	ldr	r3, [r7, #16]
 8012a2c:	895b      	ldrh	r3, [r3, #10]
 8012a2e:	461a      	mov	r2, r3
 8012a30:	69bb      	ldr	r3, [r7, #24]
 8012a32:	1ad3      	subs	r3, r2, r3
 8012a34:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012a36:	693b      	ldr	r3, [r7, #16]
 8012a38:	7858      	ldrb	r0, [r3, #1]
 8012a3a:	6a3b      	ldr	r3, [r7, #32]
 8012a3c:	697a      	ldr	r2, [r7, #20]
 8012a3e:	69f9      	ldr	r1, [r7, #28]
 8012a40:	f7fd fd40 	bl	80104c4 <disk_write>
 8012a44:	4603      	mov	r3, r0
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d004      	beq.n	8012a54 <f_write+0x1e2>
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	2201      	movs	r2, #1
 8012a4e:	755a      	strb	r2, [r3, #21]
 8012a50:	2301      	movs	r3, #1
 8012a52:	e09e      	b.n	8012b92 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8012a54:	68fb      	ldr	r3, [r7, #12]
 8012a56:	6a1a      	ldr	r2, [r3, #32]
 8012a58:	697b      	ldr	r3, [r7, #20]
 8012a5a:	1ad3      	subs	r3, r2, r3
 8012a5c:	6a3a      	ldr	r2, [r7, #32]
 8012a5e:	429a      	cmp	r2, r3
 8012a60:	d918      	bls.n	8012a94 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	6a1a      	ldr	r2, [r3, #32]
 8012a6c:	697b      	ldr	r3, [r7, #20]
 8012a6e:	1ad3      	subs	r3, r2, r3
 8012a70:	693a      	ldr	r2, [r7, #16]
 8012a72:	8992      	ldrh	r2, [r2, #12]
 8012a74:	fb02 f303 	mul.w	r3, r2, r3
 8012a78:	69fa      	ldr	r2, [r7, #28]
 8012a7a:	18d1      	adds	r1, r2, r3
 8012a7c:	693b      	ldr	r3, [r7, #16]
 8012a7e:	899b      	ldrh	r3, [r3, #12]
 8012a80:	461a      	mov	r2, r3
 8012a82:	f7fd fddf 	bl	8010644 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	7d1b      	ldrb	r3, [r3, #20]
 8012a8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012a8e:	b2da      	uxtb	r2, r3
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8012a94:	693b      	ldr	r3, [r7, #16]
 8012a96:	899b      	ldrh	r3, [r3, #12]
 8012a98:	461a      	mov	r2, r3
 8012a9a:	6a3b      	ldr	r3, [r7, #32]
 8012a9c:	fb02 f303 	mul.w	r3, r2, r3
 8012aa0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8012aa2:	e04b      	b.n	8012b3c <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	6a1b      	ldr	r3, [r3, #32]
 8012aa8:	697a      	ldr	r2, [r7, #20]
 8012aaa:	429a      	cmp	r2, r3
 8012aac:	d016      	beq.n	8012adc <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8012aae:	68fb      	ldr	r3, [r7, #12]
 8012ab0:	699a      	ldr	r2, [r3, #24]
 8012ab2:	68fb      	ldr	r3, [r7, #12]
 8012ab4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012ab6:	429a      	cmp	r2, r3
 8012ab8:	d210      	bcs.n	8012adc <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8012aba:	693b      	ldr	r3, [r7, #16]
 8012abc:	7858      	ldrb	r0, [r3, #1]
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012ac4:	2301      	movs	r3, #1
 8012ac6:	697a      	ldr	r2, [r7, #20]
 8012ac8:	f7fd fcdc 	bl	8010484 <disk_read>
 8012acc:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d004      	beq.n	8012adc <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	2201      	movs	r2, #1
 8012ad6:	755a      	strb	r2, [r3, #21]
 8012ad8:	2301      	movs	r3, #1
 8012ada:	e05a      	b.n	8012b92 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	697a      	ldr	r2, [r7, #20]
 8012ae0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8012ae2:	693b      	ldr	r3, [r7, #16]
 8012ae4:	899b      	ldrh	r3, [r3, #12]
 8012ae6:	4618      	mov	r0, r3
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	699b      	ldr	r3, [r3, #24]
 8012aec:	693a      	ldr	r2, [r7, #16]
 8012aee:	8992      	ldrh	r2, [r2, #12]
 8012af0:	fbb3 f1f2 	udiv	r1, r3, r2
 8012af4:	fb02 f201 	mul.w	r2, r2, r1
 8012af8:	1a9b      	subs	r3, r3, r2
 8012afa:	1ac3      	subs	r3, r0, r3
 8012afc:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8012afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	429a      	cmp	r2, r3
 8012b04:	d901      	bls.n	8012b0a <f_write+0x298>
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8012b0a:	68fb      	ldr	r3, [r7, #12]
 8012b0c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012b10:	68fb      	ldr	r3, [r7, #12]
 8012b12:	699b      	ldr	r3, [r3, #24]
 8012b14:	693a      	ldr	r2, [r7, #16]
 8012b16:	8992      	ldrh	r2, [r2, #12]
 8012b18:	fbb3 f0f2 	udiv	r0, r3, r2
 8012b1c:	fb02 f200 	mul.w	r2, r2, r0
 8012b20:	1a9b      	subs	r3, r3, r2
 8012b22:	440b      	add	r3, r1
 8012b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b26:	69f9      	ldr	r1, [r7, #28]
 8012b28:	4618      	mov	r0, r3
 8012b2a:	f7fd fd8b 	bl	8010644 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	7d1b      	ldrb	r3, [r3, #20]
 8012b32:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012b36:	b2da      	uxtb	r2, r3
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8012b3c:	69fa      	ldr	r2, [r7, #28]
 8012b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b40:	4413      	add	r3, r2
 8012b42:	61fb      	str	r3, [r7, #28]
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	699a      	ldr	r2, [r3, #24]
 8012b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b4a:	441a      	add	r2, r3
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	619a      	str	r2, [r3, #24]
 8012b50:	68fb      	ldr	r3, [r7, #12]
 8012b52:	68da      	ldr	r2, [r3, #12]
 8012b54:	68fb      	ldr	r3, [r7, #12]
 8012b56:	699b      	ldr	r3, [r3, #24]
 8012b58:	429a      	cmp	r2, r3
 8012b5a:	bf38      	it	cc
 8012b5c:	461a      	movcc	r2, r3
 8012b5e:	68fb      	ldr	r3, [r7, #12]
 8012b60:	60da      	str	r2, [r3, #12]
 8012b62:	683b      	ldr	r3, [r7, #0]
 8012b64:	681a      	ldr	r2, [r3, #0]
 8012b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b68:	441a      	add	r2, r3
 8012b6a:	683b      	ldr	r3, [r7, #0]
 8012b6c:	601a      	str	r2, [r3, #0]
 8012b6e:	687a      	ldr	r2, [r7, #4]
 8012b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b72:	1ad3      	subs	r3, r2, r3
 8012b74:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	f47f aeb5 	bne.w	80128e8 <f_write+0x76>
 8012b7e:	e000      	b.n	8012b82 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012b80:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8012b82:	68fb      	ldr	r3, [r7, #12]
 8012b84:	7d1b      	ldrb	r3, [r3, #20]
 8012b86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012b8a:	b2da      	uxtb	r2, r3
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8012b90:	2300      	movs	r3, #0
}
 8012b92:	4618      	mov	r0, r3
 8012b94:	3730      	adds	r7, #48	; 0x30
 8012b96:	46bd      	mov	sp, r7
 8012b98:	bd80      	pop	{r7, pc}
	...

08012b9c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8012b9c:	b580      	push	{r7, lr}
 8012b9e:	b086      	sub	sp, #24
 8012ba0:	af00      	add	r7, sp, #0
 8012ba2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	f107 0208 	add.w	r2, r7, #8
 8012baa:	4611      	mov	r1, r2
 8012bac:	4618      	mov	r0, r3
 8012bae:	f7ff fab7 	bl	8012120 <validate>
 8012bb2:	4603      	mov	r3, r0
 8012bb4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012bb6:	7dfb      	ldrb	r3, [r7, #23]
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d167      	bne.n	8012c8c <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	7d1b      	ldrb	r3, [r3, #20]
 8012bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d061      	beq.n	8012c8c <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	7d1b      	ldrb	r3, [r3, #20]
 8012bcc:	b25b      	sxtb	r3, r3
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	da15      	bge.n	8012bfe <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8012bd2:	68bb      	ldr	r3, [r7, #8]
 8012bd4:	7858      	ldrb	r0, [r3, #1]
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	6a1a      	ldr	r2, [r3, #32]
 8012be0:	2301      	movs	r3, #1
 8012be2:	f7fd fc6f 	bl	80104c4 <disk_write>
 8012be6:	4603      	mov	r3, r0
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d001      	beq.n	8012bf0 <f_sync+0x54>
 8012bec:	2301      	movs	r3, #1
 8012bee:	e04e      	b.n	8012c8e <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	7d1b      	ldrb	r3, [r3, #20]
 8012bf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012bf8:	b2da      	uxtb	r2, r3
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8012bfe:	4b26      	ldr	r3, [pc, #152]	; (8012c98 <f_sync+0xfc>)
 8012c00:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8012c02:	68ba      	ldr	r2, [r7, #8]
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c08:	4619      	mov	r1, r3
 8012c0a:	4610      	mov	r0, r2
 8012c0c:	f7fd ff48 	bl	8010aa0 <move_window>
 8012c10:	4603      	mov	r3, r0
 8012c12:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8012c14:	7dfb      	ldrb	r3, [r7, #23]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d138      	bne.n	8012c8c <f_sync+0xf0>
					dir = fp->dir_ptr;
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c1e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8012c20:	68fb      	ldr	r3, [r7, #12]
 8012c22:	330b      	adds	r3, #11
 8012c24:	781a      	ldrb	r2, [r3, #0]
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	330b      	adds	r3, #11
 8012c2a:	f042 0220 	orr.w	r2, r2, #32
 8012c2e:	b2d2      	uxtb	r2, r2
 8012c30:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	6818      	ldr	r0, [r3, #0]
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	689b      	ldr	r3, [r3, #8]
 8012c3a:	461a      	mov	r2, r3
 8012c3c:	68f9      	ldr	r1, [r7, #12]
 8012c3e:	f7fe fccd 	bl	80115dc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8012c42:	68fb      	ldr	r3, [r7, #12]
 8012c44:	f103 021c 	add.w	r2, r3, #28
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	68db      	ldr	r3, [r3, #12]
 8012c4c:	4619      	mov	r1, r3
 8012c4e:	4610      	mov	r0, r2
 8012c50:	f7fd fccc 	bl	80105ec <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8012c54:	68fb      	ldr	r3, [r7, #12]
 8012c56:	3316      	adds	r3, #22
 8012c58:	6939      	ldr	r1, [r7, #16]
 8012c5a:	4618      	mov	r0, r3
 8012c5c:	f7fd fcc6 	bl	80105ec <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8012c60:	68fb      	ldr	r3, [r7, #12]
 8012c62:	3312      	adds	r3, #18
 8012c64:	2100      	movs	r1, #0
 8012c66:	4618      	mov	r0, r3
 8012c68:	f7fd fca5 	bl	80105b6 <st_word>
					fs->wflag = 1;
 8012c6c:	68bb      	ldr	r3, [r7, #8]
 8012c6e:	2201      	movs	r2, #1
 8012c70:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8012c72:	68bb      	ldr	r3, [r7, #8]
 8012c74:	4618      	mov	r0, r3
 8012c76:	f7fd ff41 	bl	8010afc <sync_fs>
 8012c7a:	4603      	mov	r3, r0
 8012c7c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	7d1b      	ldrb	r3, [r3, #20]
 8012c82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012c86:	b2da      	uxtb	r2, r3
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8012c8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c8e:	4618      	mov	r0, r3
 8012c90:	3718      	adds	r7, #24
 8012c92:	46bd      	mov	sp, r7
 8012c94:	bd80      	pop	{r7, pc}
 8012c96:	bf00      	nop
 8012c98:	274a0000 	.word	0x274a0000

08012c9c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8012c9c:	b580      	push	{r7, lr}
 8012c9e:	b084      	sub	sp, #16
 8012ca0:	af00      	add	r7, sp, #0
 8012ca2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8012ca4:	6878      	ldr	r0, [r7, #4]
 8012ca6:	f7ff ff79 	bl	8012b9c <f_sync>
 8012caa:	4603      	mov	r3, r0
 8012cac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8012cae:	7bfb      	ldrb	r3, [r7, #15]
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d118      	bne.n	8012ce6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	f107 0208 	add.w	r2, r7, #8
 8012cba:	4611      	mov	r1, r2
 8012cbc:	4618      	mov	r0, r3
 8012cbe:	f7ff fa2f 	bl	8012120 <validate>
 8012cc2:	4603      	mov	r3, r0
 8012cc4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012cc6:	7bfb      	ldrb	r3, [r7, #15]
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d10c      	bne.n	8012ce6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	691b      	ldr	r3, [r3, #16]
 8012cd0:	4618      	mov	r0, r3
 8012cd2:	f7fd fe41 	bl	8010958 <dec_lock>
 8012cd6:	4603      	mov	r3, r0
 8012cd8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8012cda:	7bfb      	ldrb	r3, [r7, #15]
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d102      	bne.n	8012ce6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	2200      	movs	r2, #0
 8012ce4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8012ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ce8:	4618      	mov	r0, r3
 8012cea:	3710      	adds	r7, #16
 8012cec:	46bd      	mov	sp, r7
 8012cee:	bd80      	pop	{r7, pc}

08012cf0 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8012cf0:	b590      	push	{r4, r7, lr}
 8012cf2:	b091      	sub	sp, #68	; 0x44
 8012cf4:	af00      	add	r7, sp, #0
 8012cf6:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8012cf8:	f107 0108 	add.w	r1, r7, #8
 8012cfc:	1d3b      	adds	r3, r7, #4
 8012cfe:	2200      	movs	r2, #0
 8012d00:	4618      	mov	r0, r3
 8012d02:	f7fe ff87 	bl	8011c14 <find_volume>
 8012d06:	4603      	mov	r3, r0
 8012d08:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8012d0c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d131      	bne.n	8012d78 <f_chdir+0x88>
		dj.obj.fs = fs;
 8012d14:	68bb      	ldr	r3, [r7, #8]
 8012d16:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8012d18:	687a      	ldr	r2, [r7, #4]
 8012d1a:	f107 030c 	add.w	r3, r7, #12
 8012d1e:	4611      	mov	r1, r2
 8012d20:	4618      	mov	r0, r3
 8012d22:	f7fe fe47 	bl	80119b4 <follow_path>
 8012d26:	4603      	mov	r3, r0
 8012d28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 8012d2c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d11a      	bne.n	8012d6a <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8012d34:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8012d38:	b25b      	sxtb	r3, r3
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	da03      	bge.n	8012d46 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8012d3e:	68bb      	ldr	r3, [r7, #8]
 8012d40:	697a      	ldr	r2, [r7, #20]
 8012d42:	619a      	str	r2, [r3, #24]
 8012d44:	e011      	b.n	8012d6a <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8012d46:	7cbb      	ldrb	r3, [r7, #18]
 8012d48:	f003 0310 	and.w	r3, r3, #16
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d009      	beq.n	8012d64 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8012d50:	68bb      	ldr	r3, [r7, #8]
 8012d52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012d54:	68bc      	ldr	r4, [r7, #8]
 8012d56:	4611      	mov	r1, r2
 8012d58:	4618      	mov	r0, r3
 8012d5a:	f7fe fc20 	bl	801159e <ld_clust>
 8012d5e:	4603      	mov	r3, r0
 8012d60:	61a3      	str	r3, [r4, #24]
 8012d62:	e002      	b.n	8012d6a <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8012d64:	2305      	movs	r3, #5
 8012d66:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8012d6a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012d6e:	2b04      	cmp	r3, #4
 8012d70:	d102      	bne.n	8012d78 <f_chdir+0x88>
 8012d72:	2305      	movs	r3, #5
 8012d74:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 8012d78:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8012d7c:	4618      	mov	r0, r3
 8012d7e:	3744      	adds	r7, #68	; 0x44
 8012d80:	46bd      	mov	sp, r7
 8012d82:	bd90      	pop	{r4, r7, pc}

08012d84 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8012d84:	b580      	push	{r7, lr}
 8012d86:	b090      	sub	sp, #64	; 0x40
 8012d88:	af00      	add	r7, sp, #0
 8012d8a:	6078      	str	r0, [r7, #4]
 8012d8c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	f107 0208 	add.w	r2, r7, #8
 8012d94:	4611      	mov	r1, r2
 8012d96:	4618      	mov	r0, r3
 8012d98:	f7ff f9c2 	bl	8012120 <validate>
 8012d9c:	4603      	mov	r3, r0
 8012d9e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8012da2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d103      	bne.n	8012db2 <f_lseek+0x2e>
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	7d5b      	ldrb	r3, [r3, #21]
 8012dae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8012db2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d002      	beq.n	8012dc0 <f_lseek+0x3c>
 8012dba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012dbe:	e201      	b.n	80131c4 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	f000 80d9 	beq.w	8012f7c <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8012dca:	683b      	ldr	r3, [r7, #0]
 8012dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012dd0:	d15a      	bne.n	8012e88 <f_lseek+0x104>
			tbl = fp->cltbl;
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012dd6:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8012dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dda:	1d1a      	adds	r2, r3, #4
 8012ddc:	627a      	str	r2, [r7, #36]	; 0x24
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	617b      	str	r3, [r7, #20]
 8012de2:	2302      	movs	r3, #2
 8012de4:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	689b      	ldr	r3, [r3, #8]
 8012dea:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8012dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d03a      	beq.n	8012e68 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8012df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012df4:	613b      	str	r3, [r7, #16]
 8012df6:	2300      	movs	r3, #0
 8012df8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dfc:	3302      	adds	r3, #2
 8012dfe:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8012e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e02:	60fb      	str	r3, [r7, #12]
 8012e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e06:	3301      	adds	r3, #1
 8012e08:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012e0e:	4618      	mov	r0, r3
 8012e10:	f7fd ff03 	bl	8010c1a <get_fat>
 8012e14:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8012e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e18:	2b01      	cmp	r3, #1
 8012e1a:	d804      	bhi.n	8012e26 <f_lseek+0xa2>
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	2202      	movs	r2, #2
 8012e20:	755a      	strb	r2, [r3, #21]
 8012e22:	2302      	movs	r3, #2
 8012e24:	e1ce      	b.n	80131c4 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e2c:	d104      	bne.n	8012e38 <f_lseek+0xb4>
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	2201      	movs	r2, #1
 8012e32:	755a      	strb	r2, [r3, #21]
 8012e34:	2301      	movs	r3, #1
 8012e36:	e1c5      	b.n	80131c4 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	3301      	adds	r3, #1
 8012e3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012e3e:	429a      	cmp	r2, r3
 8012e40:	d0de      	beq.n	8012e00 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8012e42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012e44:	697b      	ldr	r3, [r7, #20]
 8012e46:	429a      	cmp	r2, r3
 8012e48:	d809      	bhi.n	8012e5e <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8012e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e4c:	1d1a      	adds	r2, r3, #4
 8012e4e:	627a      	str	r2, [r7, #36]	; 0x24
 8012e50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012e52:	601a      	str	r2, [r3, #0]
 8012e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e56:	1d1a      	adds	r2, r3, #4
 8012e58:	627a      	str	r2, [r7, #36]	; 0x24
 8012e5a:	693a      	ldr	r2, [r7, #16]
 8012e5c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8012e5e:	68bb      	ldr	r3, [r7, #8]
 8012e60:	69db      	ldr	r3, [r3, #28]
 8012e62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012e64:	429a      	cmp	r2, r3
 8012e66:	d3c4      	bcc.n	8012df2 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012e6e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8012e70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012e72:	697b      	ldr	r3, [r7, #20]
 8012e74:	429a      	cmp	r2, r3
 8012e76:	d803      	bhi.n	8012e80 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8012e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e7a:	2200      	movs	r2, #0
 8012e7c:	601a      	str	r2, [r3, #0]
 8012e7e:	e19f      	b.n	80131c0 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8012e80:	2311      	movs	r3, #17
 8012e82:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8012e86:	e19b      	b.n	80131c0 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	68db      	ldr	r3, [r3, #12]
 8012e8c:	683a      	ldr	r2, [r7, #0]
 8012e8e:	429a      	cmp	r2, r3
 8012e90:	d902      	bls.n	8012e98 <f_lseek+0x114>
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	68db      	ldr	r3, [r3, #12]
 8012e96:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	683a      	ldr	r2, [r7, #0]
 8012e9c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8012e9e:	683b      	ldr	r3, [r7, #0]
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	f000 818d 	beq.w	80131c0 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8012ea6:	683b      	ldr	r3, [r7, #0]
 8012ea8:	3b01      	subs	r3, #1
 8012eaa:	4619      	mov	r1, r3
 8012eac:	6878      	ldr	r0, [r7, #4]
 8012eae:	f7fe f998 	bl	80111e2 <clmt_clust>
 8012eb2:	4602      	mov	r2, r0
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8012eb8:	68ba      	ldr	r2, [r7, #8]
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	69db      	ldr	r3, [r3, #28]
 8012ebe:	4619      	mov	r1, r3
 8012ec0:	4610      	mov	r0, r2
 8012ec2:	f7fd fe8b 	bl	8010bdc <clust2sect>
 8012ec6:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8012ec8:	69bb      	ldr	r3, [r7, #24]
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d104      	bne.n	8012ed8 <f_lseek+0x154>
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	2202      	movs	r2, #2
 8012ed2:	755a      	strb	r2, [r3, #21]
 8012ed4:	2302      	movs	r3, #2
 8012ed6:	e175      	b.n	80131c4 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8012ed8:	683b      	ldr	r3, [r7, #0]
 8012eda:	3b01      	subs	r3, #1
 8012edc:	68ba      	ldr	r2, [r7, #8]
 8012ede:	8992      	ldrh	r2, [r2, #12]
 8012ee0:	fbb3 f3f2 	udiv	r3, r3, r2
 8012ee4:	68ba      	ldr	r2, [r7, #8]
 8012ee6:	8952      	ldrh	r2, [r2, #10]
 8012ee8:	3a01      	subs	r2, #1
 8012eea:	4013      	ands	r3, r2
 8012eec:	69ba      	ldr	r2, [r7, #24]
 8012eee:	4413      	add	r3, r2
 8012ef0:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	699b      	ldr	r3, [r3, #24]
 8012ef6:	68ba      	ldr	r2, [r7, #8]
 8012ef8:	8992      	ldrh	r2, [r2, #12]
 8012efa:	fbb3 f1f2 	udiv	r1, r3, r2
 8012efe:	fb02 f201 	mul.w	r2, r2, r1
 8012f02:	1a9b      	subs	r3, r3, r2
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	f000 815b 	beq.w	80131c0 <f_lseek+0x43c>
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	6a1b      	ldr	r3, [r3, #32]
 8012f0e:	69ba      	ldr	r2, [r7, #24]
 8012f10:	429a      	cmp	r2, r3
 8012f12:	f000 8155 	beq.w	80131c0 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	7d1b      	ldrb	r3, [r3, #20]
 8012f1a:	b25b      	sxtb	r3, r3
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	da18      	bge.n	8012f52 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012f20:	68bb      	ldr	r3, [r7, #8]
 8012f22:	7858      	ldrb	r0, [r3, #1]
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	6a1a      	ldr	r2, [r3, #32]
 8012f2e:	2301      	movs	r3, #1
 8012f30:	f7fd fac8 	bl	80104c4 <disk_write>
 8012f34:	4603      	mov	r3, r0
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d004      	beq.n	8012f44 <f_lseek+0x1c0>
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	2201      	movs	r2, #1
 8012f3e:	755a      	strb	r2, [r3, #21]
 8012f40:	2301      	movs	r3, #1
 8012f42:	e13f      	b.n	80131c4 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	7d1b      	ldrb	r3, [r3, #20]
 8012f48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012f4c:	b2da      	uxtb	r2, r3
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8012f52:	68bb      	ldr	r3, [r7, #8]
 8012f54:	7858      	ldrb	r0, [r3, #1]
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012f5c:	2301      	movs	r3, #1
 8012f5e:	69ba      	ldr	r2, [r7, #24]
 8012f60:	f7fd fa90 	bl	8010484 <disk_read>
 8012f64:	4603      	mov	r3, r0
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d004      	beq.n	8012f74 <f_lseek+0x1f0>
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	2201      	movs	r2, #1
 8012f6e:	755a      	strb	r2, [r3, #21]
 8012f70:	2301      	movs	r3, #1
 8012f72:	e127      	b.n	80131c4 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	69ba      	ldr	r2, [r7, #24]
 8012f78:	621a      	str	r2, [r3, #32]
 8012f7a:	e121      	b.n	80131c0 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	68db      	ldr	r3, [r3, #12]
 8012f80:	683a      	ldr	r2, [r7, #0]
 8012f82:	429a      	cmp	r2, r3
 8012f84:	d908      	bls.n	8012f98 <f_lseek+0x214>
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	7d1b      	ldrb	r3, [r3, #20]
 8012f8a:	f003 0302 	and.w	r3, r3, #2
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d102      	bne.n	8012f98 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	68db      	ldr	r3, [r3, #12]
 8012f96:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	699b      	ldr	r3, [r3, #24]
 8012f9c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8012f9e:	2300      	movs	r3, #0
 8012fa0:	637b      	str	r3, [r7, #52]	; 0x34
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012fa6:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8012fa8:	683b      	ldr	r3, [r7, #0]
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	f000 80b5 	beq.w	801311a <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8012fb0:	68bb      	ldr	r3, [r7, #8]
 8012fb2:	895b      	ldrh	r3, [r3, #10]
 8012fb4:	461a      	mov	r2, r3
 8012fb6:	68bb      	ldr	r3, [r7, #8]
 8012fb8:	899b      	ldrh	r3, [r3, #12]
 8012fba:	fb03 f302 	mul.w	r3, r3, r2
 8012fbe:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8012fc0:	6a3b      	ldr	r3, [r7, #32]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d01b      	beq.n	8012ffe <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8012fc6:	683b      	ldr	r3, [r7, #0]
 8012fc8:	1e5a      	subs	r2, r3, #1
 8012fca:	69fb      	ldr	r3, [r7, #28]
 8012fcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8012fd0:	6a3b      	ldr	r3, [r7, #32]
 8012fd2:	1e59      	subs	r1, r3, #1
 8012fd4:	69fb      	ldr	r3, [r7, #28]
 8012fd6:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8012fda:	429a      	cmp	r2, r3
 8012fdc:	d30f      	bcc.n	8012ffe <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8012fde:	6a3b      	ldr	r3, [r7, #32]
 8012fe0:	1e5a      	subs	r2, r3, #1
 8012fe2:	69fb      	ldr	r3, [r7, #28]
 8012fe4:	425b      	negs	r3, r3
 8012fe6:	401a      	ands	r2, r3
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	699b      	ldr	r3, [r3, #24]
 8012ff0:	683a      	ldr	r2, [r7, #0]
 8012ff2:	1ad3      	subs	r3, r2, r3
 8012ff4:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	69db      	ldr	r3, [r3, #28]
 8012ffa:	63bb      	str	r3, [r7, #56]	; 0x38
 8012ffc:	e022      	b.n	8013044 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	689b      	ldr	r3, [r3, #8]
 8013002:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8013004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013006:	2b00      	cmp	r3, #0
 8013008:	d119      	bne.n	801303e <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	2100      	movs	r1, #0
 801300e:	4618      	mov	r0, r3
 8013010:	f7fe f84f 	bl	80110b2 <create_chain>
 8013014:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013018:	2b01      	cmp	r3, #1
 801301a:	d104      	bne.n	8013026 <f_lseek+0x2a2>
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	2202      	movs	r2, #2
 8013020:	755a      	strb	r2, [r3, #21]
 8013022:	2302      	movs	r3, #2
 8013024:	e0ce      	b.n	80131c4 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013028:	f1b3 3fff 	cmp.w	r3, #4294967295
 801302c:	d104      	bne.n	8013038 <f_lseek+0x2b4>
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	2201      	movs	r2, #1
 8013032:	755a      	strb	r2, [r3, #21]
 8013034:	2301      	movs	r3, #1
 8013036:	e0c5      	b.n	80131c4 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801303c:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013042:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8013044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013046:	2b00      	cmp	r3, #0
 8013048:	d067      	beq.n	801311a <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 801304a:	e03a      	b.n	80130c2 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 801304c:	683a      	ldr	r2, [r7, #0]
 801304e:	69fb      	ldr	r3, [r7, #28]
 8013050:	1ad3      	subs	r3, r2, r3
 8013052:	603b      	str	r3, [r7, #0]
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	699a      	ldr	r2, [r3, #24]
 8013058:	69fb      	ldr	r3, [r7, #28]
 801305a:	441a      	add	r2, r3
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	7d1b      	ldrb	r3, [r3, #20]
 8013064:	f003 0302 	and.w	r3, r3, #2
 8013068:	2b00      	cmp	r3, #0
 801306a:	d00b      	beq.n	8013084 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013070:	4618      	mov	r0, r3
 8013072:	f7fe f81e 	bl	80110b2 <create_chain>
 8013076:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8013078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801307a:	2b00      	cmp	r3, #0
 801307c:	d108      	bne.n	8013090 <f_lseek+0x30c>
							ofs = 0; break;
 801307e:	2300      	movs	r3, #0
 8013080:	603b      	str	r3, [r7, #0]
 8013082:	e022      	b.n	80130ca <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013088:	4618      	mov	r0, r3
 801308a:	f7fd fdc6 	bl	8010c1a <get_fat>
 801308e:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013096:	d104      	bne.n	80130a2 <f_lseek+0x31e>
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	2201      	movs	r2, #1
 801309c:	755a      	strb	r2, [r3, #21]
 801309e:	2301      	movs	r3, #1
 80130a0:	e090      	b.n	80131c4 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80130a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130a4:	2b01      	cmp	r3, #1
 80130a6:	d904      	bls.n	80130b2 <f_lseek+0x32e>
 80130a8:	68bb      	ldr	r3, [r7, #8]
 80130aa:	69db      	ldr	r3, [r3, #28]
 80130ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80130ae:	429a      	cmp	r2, r3
 80130b0:	d304      	bcc.n	80130bc <f_lseek+0x338>
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	2202      	movs	r2, #2
 80130b6:	755a      	strb	r2, [r3, #21]
 80130b8:	2302      	movs	r3, #2
 80130ba:	e083      	b.n	80131c4 <f_lseek+0x440>
					fp->clust = clst;
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80130c0:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80130c2:	683a      	ldr	r2, [r7, #0]
 80130c4:	69fb      	ldr	r3, [r7, #28]
 80130c6:	429a      	cmp	r2, r3
 80130c8:	d8c0      	bhi.n	801304c <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	699a      	ldr	r2, [r3, #24]
 80130ce:	683b      	ldr	r3, [r7, #0]
 80130d0:	441a      	add	r2, r3
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80130d6:	68bb      	ldr	r3, [r7, #8]
 80130d8:	899b      	ldrh	r3, [r3, #12]
 80130da:	461a      	mov	r2, r3
 80130dc:	683b      	ldr	r3, [r7, #0]
 80130de:	fbb3 f1f2 	udiv	r1, r3, r2
 80130e2:	fb02 f201 	mul.w	r2, r2, r1
 80130e6:	1a9b      	subs	r3, r3, r2
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d016      	beq.n	801311a <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80130ec:	68bb      	ldr	r3, [r7, #8]
 80130ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80130f0:	4618      	mov	r0, r3
 80130f2:	f7fd fd73 	bl	8010bdc <clust2sect>
 80130f6:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80130f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d104      	bne.n	8013108 <f_lseek+0x384>
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	2202      	movs	r2, #2
 8013102:	755a      	strb	r2, [r3, #21]
 8013104:	2302      	movs	r3, #2
 8013106:	e05d      	b.n	80131c4 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8013108:	68bb      	ldr	r3, [r7, #8]
 801310a:	899b      	ldrh	r3, [r3, #12]
 801310c:	461a      	mov	r2, r3
 801310e:	683b      	ldr	r3, [r7, #0]
 8013110:	fbb3 f3f2 	udiv	r3, r3, r2
 8013114:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013116:	4413      	add	r3, r2
 8013118:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	699a      	ldr	r2, [r3, #24]
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	68db      	ldr	r3, [r3, #12]
 8013122:	429a      	cmp	r2, r3
 8013124:	d90a      	bls.n	801313c <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	699a      	ldr	r2, [r3, #24]
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	7d1b      	ldrb	r3, [r3, #20]
 8013132:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013136:	b2da      	uxtb	r2, r3
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	699b      	ldr	r3, [r3, #24]
 8013140:	68ba      	ldr	r2, [r7, #8]
 8013142:	8992      	ldrh	r2, [r2, #12]
 8013144:	fbb3 f1f2 	udiv	r1, r3, r2
 8013148:	fb02 f201 	mul.w	r2, r2, r1
 801314c:	1a9b      	subs	r3, r3, r2
 801314e:	2b00      	cmp	r3, #0
 8013150:	d036      	beq.n	80131c0 <f_lseek+0x43c>
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	6a1b      	ldr	r3, [r3, #32]
 8013156:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013158:	429a      	cmp	r2, r3
 801315a:	d031      	beq.n	80131c0 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	7d1b      	ldrb	r3, [r3, #20]
 8013160:	b25b      	sxtb	r3, r3
 8013162:	2b00      	cmp	r3, #0
 8013164:	da18      	bge.n	8013198 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013166:	68bb      	ldr	r3, [r7, #8]
 8013168:	7858      	ldrb	r0, [r3, #1]
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	6a1a      	ldr	r2, [r3, #32]
 8013174:	2301      	movs	r3, #1
 8013176:	f7fd f9a5 	bl	80104c4 <disk_write>
 801317a:	4603      	mov	r3, r0
 801317c:	2b00      	cmp	r3, #0
 801317e:	d004      	beq.n	801318a <f_lseek+0x406>
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	2201      	movs	r2, #1
 8013184:	755a      	strb	r2, [r3, #21]
 8013186:	2301      	movs	r3, #1
 8013188:	e01c      	b.n	80131c4 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	7d1b      	ldrb	r3, [r3, #20]
 801318e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013192:	b2da      	uxtb	r2, r3
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013198:	68bb      	ldr	r3, [r7, #8]
 801319a:	7858      	ldrb	r0, [r3, #1]
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80131a2:	2301      	movs	r3, #1
 80131a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80131a6:	f7fd f96d 	bl	8010484 <disk_read>
 80131aa:	4603      	mov	r3, r0
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d004      	beq.n	80131ba <f_lseek+0x436>
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	2201      	movs	r2, #1
 80131b4:	755a      	strb	r2, [r3, #21]
 80131b6:	2301      	movs	r3, #1
 80131b8:	e004      	b.n	80131c4 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80131be:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80131c0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80131c4:	4618      	mov	r0, r3
 80131c6:	3740      	adds	r7, #64	; 0x40
 80131c8:	46bd      	mov	sp, r7
 80131ca:	bd80      	pop	{r7, pc}

080131cc <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 80131cc:	b580      	push	{r7, lr}
 80131ce:	b09e      	sub	sp, #120	; 0x78
 80131d0:	af00      	add	r7, sp, #0
 80131d2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 80131d4:	2300      	movs	r3, #0
 80131d6:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80131d8:	f107 010c 	add.w	r1, r7, #12
 80131dc:	1d3b      	adds	r3, r7, #4
 80131de:	2202      	movs	r2, #2
 80131e0:	4618      	mov	r0, r3
 80131e2:	f7fe fd17 	bl	8011c14 <find_volume>
 80131e6:	4603      	mov	r3, r0
 80131e8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 80131f0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	f040 80a4 	bne.w	8013342 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 80131fa:	687a      	ldr	r2, [r7, #4]
 80131fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013200:	4611      	mov	r1, r2
 8013202:	4618      	mov	r0, r3
 8013204:	f7fe fbd6 	bl	80119b4 <follow_path>
 8013208:	4603      	mov	r3, r0
 801320a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 801320e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013212:	2b00      	cmp	r3, #0
 8013214:	d108      	bne.n	8013228 <f_unlink+0x5c>
 8013216:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801321a:	f003 0320 	and.w	r3, r3, #32
 801321e:	2b00      	cmp	r3, #0
 8013220:	d002      	beq.n	8013228 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8013222:	2306      	movs	r3, #6
 8013224:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8013228:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801322c:	2b00      	cmp	r3, #0
 801322e:	d108      	bne.n	8013242 <f_unlink+0x76>
 8013230:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013234:	2102      	movs	r1, #2
 8013236:	4618      	mov	r0, r3
 8013238:	f7fd fa82 	bl	8010740 <chk_lock>
 801323c:	4603      	mov	r3, r0
 801323e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8013242:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013246:	2b00      	cmp	r3, #0
 8013248:	d17b      	bne.n	8013342 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 801324a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801324e:	b25b      	sxtb	r3, r3
 8013250:	2b00      	cmp	r3, #0
 8013252:	da03      	bge.n	801325c <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8013254:	2306      	movs	r3, #6
 8013256:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 801325a:	e008      	b.n	801326e <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 801325c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8013260:	f003 0301 	and.w	r3, r3, #1
 8013264:	2b00      	cmp	r3, #0
 8013266:	d002      	beq.n	801326e <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8013268:	2307      	movs	r3, #7
 801326a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 801326e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013272:	2b00      	cmp	r3, #0
 8013274:	d13d      	bne.n	80132f2 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801327a:	4611      	mov	r1, r2
 801327c:	4618      	mov	r0, r3
 801327e:	f7fe f98e 	bl	801159e <ld_clust>
 8013282:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8013284:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8013288:	f003 0310 	and.w	r3, r3, #16
 801328c:	2b00      	cmp	r3, #0
 801328e:	d030      	beq.n	80132f2 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	699b      	ldr	r3, [r3, #24]
 8013294:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013296:	429a      	cmp	r2, r3
 8013298:	d103      	bne.n	80132a2 <f_unlink+0xd6>
						res = FR_DENIED;
 801329a:	2307      	movs	r3, #7
 801329c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80132a0:	e027      	b.n	80132f2 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 80132a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80132a8:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 80132aa:	f107 0310 	add.w	r3, r7, #16
 80132ae:	2100      	movs	r1, #0
 80132b0:	4618      	mov	r0, r3
 80132b2:	f7fd ffce 	bl	8011252 <dir_sdi>
 80132b6:	4603      	mov	r3, r0
 80132b8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 80132bc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d116      	bne.n	80132f2 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 80132c4:	f107 0310 	add.w	r3, r7, #16
 80132c8:	2100      	movs	r1, #0
 80132ca:	4618      	mov	r0, r3
 80132cc:	f7fe f9a6 	bl	801161c <dir_read>
 80132d0:	4603      	mov	r3, r0
 80132d2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 80132d6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d102      	bne.n	80132e4 <f_unlink+0x118>
 80132de:	2307      	movs	r3, #7
 80132e0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 80132e4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80132e8:	2b04      	cmp	r3, #4
 80132ea:	d102      	bne.n	80132f2 <f_unlink+0x126>
 80132ec:	2300      	movs	r3, #0
 80132ee:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 80132f2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d123      	bne.n	8013342 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 80132fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80132fe:	4618      	mov	r0, r3
 8013300:	f7fe fa70 	bl	80117e4 <dir_remove>
 8013304:	4603      	mov	r3, r0
 8013306:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 801330a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801330e:	2b00      	cmp	r3, #0
 8013310:	d10c      	bne.n	801332c <f_unlink+0x160>
 8013312:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013314:	2b00      	cmp	r3, #0
 8013316:	d009      	beq.n	801332c <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8013318:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801331c:	2200      	movs	r2, #0
 801331e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8013320:	4618      	mov	r0, r3
 8013322:	f7fd fe61 	bl	8010fe8 <remove_chain>
 8013326:	4603      	mov	r3, r0
 8013328:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 801332c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013330:	2b00      	cmp	r3, #0
 8013332:	d106      	bne.n	8013342 <f_unlink+0x176>
 8013334:	68fb      	ldr	r3, [r7, #12]
 8013336:	4618      	mov	r0, r3
 8013338:	f7fd fbe0 	bl	8010afc <sync_fs>
 801333c:	4603      	mov	r3, r0
 801333e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8013342:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8013346:	4618      	mov	r0, r3
 8013348:	3778      	adds	r7, #120	; 0x78
 801334a:	46bd      	mov	sp, r7
 801334c:	bd80      	pop	{r7, pc}
	...

08013350 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8013350:	b580      	push	{r7, lr}
 8013352:	b096      	sub	sp, #88	; 0x58
 8013354:	af00      	add	r7, sp, #0
 8013356:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8013358:	f107 0108 	add.w	r1, r7, #8
 801335c:	1d3b      	adds	r3, r7, #4
 801335e:	2202      	movs	r2, #2
 8013360:	4618      	mov	r0, r3
 8013362:	f7fe fc57 	bl	8011c14 <find_volume>
 8013366:	4603      	mov	r3, r0
 8013368:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 801336c:	68bb      	ldr	r3, [r7, #8]
 801336e:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8013370:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013374:	2b00      	cmp	r3, #0
 8013376:	f040 80fe 	bne.w	8013576 <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 801337a:	687a      	ldr	r2, [r7, #4]
 801337c:	f107 030c 	add.w	r3, r7, #12
 8013380:	4611      	mov	r1, r2
 8013382:	4618      	mov	r0, r3
 8013384:	f7fe fb16 	bl	80119b4 <follow_path>
 8013388:	4603      	mov	r3, r0
 801338a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 801338e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013392:	2b00      	cmp	r3, #0
 8013394:	d102      	bne.n	801339c <f_mkdir+0x4c>
 8013396:	2308      	movs	r3, #8
 8013398:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 801339c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80133a0:	2b04      	cmp	r3, #4
 80133a2:	d108      	bne.n	80133b6 <f_mkdir+0x66>
 80133a4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80133a8:	f003 0320 	and.w	r3, r3, #32
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d002      	beq.n	80133b6 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 80133b0:	2306      	movs	r3, #6
 80133b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80133b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80133ba:	2b04      	cmp	r3, #4
 80133bc:	f040 80db 	bne.w	8013576 <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80133c0:	f107 030c 	add.w	r3, r7, #12
 80133c4:	2100      	movs	r1, #0
 80133c6:	4618      	mov	r0, r3
 80133c8:	f7fd fe73 	bl	80110b2 <create_chain>
 80133cc:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 80133ce:	68bb      	ldr	r3, [r7, #8]
 80133d0:	895b      	ldrh	r3, [r3, #10]
 80133d2:	461a      	mov	r2, r3
 80133d4:	68bb      	ldr	r3, [r7, #8]
 80133d6:	899b      	ldrh	r3, [r3, #12]
 80133d8:	fb03 f302 	mul.w	r3, r3, r2
 80133dc:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 80133de:	2300      	movs	r3, #0
 80133e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80133e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d102      	bne.n	80133f0 <f_mkdir+0xa0>
 80133ea:	2307      	movs	r3, #7
 80133ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 80133f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80133f2:	2b01      	cmp	r3, #1
 80133f4:	d102      	bne.n	80133fc <f_mkdir+0xac>
 80133f6:	2302      	movs	r3, #2
 80133f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80133fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80133fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013402:	d102      	bne.n	801340a <f_mkdir+0xba>
 8013404:	2301      	movs	r3, #1
 8013406:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 801340a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801340e:	2b00      	cmp	r3, #0
 8013410:	d106      	bne.n	8013420 <f_mkdir+0xd0>
 8013412:	68bb      	ldr	r3, [r7, #8]
 8013414:	4618      	mov	r0, r3
 8013416:	f7fd faff 	bl	8010a18 <sync_window>
 801341a:	4603      	mov	r3, r0
 801341c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8013420:	4b58      	ldr	r3, [pc, #352]	; (8013584 <f_mkdir+0x234>)
 8013422:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8013424:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013428:	2b00      	cmp	r3, #0
 801342a:	d16c      	bne.n	8013506 <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 801342c:	68bb      	ldr	r3, [r7, #8]
 801342e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013430:	4618      	mov	r0, r3
 8013432:	f7fd fbd3 	bl	8010bdc <clust2sect>
 8013436:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8013438:	68bb      	ldr	r3, [r7, #8]
 801343a:	3338      	adds	r3, #56	; 0x38
 801343c:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 801343e:	68bb      	ldr	r3, [r7, #8]
 8013440:	899b      	ldrh	r3, [r3, #12]
 8013442:	461a      	mov	r2, r3
 8013444:	2100      	movs	r1, #0
 8013446:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013448:	f7fd f91d 	bl	8010686 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 801344c:	220b      	movs	r2, #11
 801344e:	2120      	movs	r1, #32
 8013450:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013452:	f7fd f918 	bl	8010686 <mem_set>
					dir[DIR_Name] = '.';
 8013456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013458:	222e      	movs	r2, #46	; 0x2e
 801345a:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 801345c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801345e:	330b      	adds	r3, #11
 8013460:	2210      	movs	r2, #16
 8013462:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8013464:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013466:	3316      	adds	r3, #22
 8013468:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801346a:	4618      	mov	r0, r3
 801346c:	f7fd f8be 	bl	80105ec <st_dword>
					st_clust(fs, dir, dcl);
 8013470:	68bb      	ldr	r3, [r7, #8]
 8013472:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013474:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013476:	4618      	mov	r0, r3
 8013478:	f7fe f8b0 	bl	80115dc <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 801347c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801347e:	3320      	adds	r3, #32
 8013480:	2220      	movs	r2, #32
 8013482:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013484:	4618      	mov	r0, r3
 8013486:	f7fd f8dd 	bl	8010644 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 801348a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801348c:	3321      	adds	r3, #33	; 0x21
 801348e:	222e      	movs	r2, #46	; 0x2e
 8013490:	701a      	strb	r2, [r3, #0]
 8013492:	697b      	ldr	r3, [r7, #20]
 8013494:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8013496:	68bb      	ldr	r3, [r7, #8]
 8013498:	781b      	ldrb	r3, [r3, #0]
 801349a:	2b03      	cmp	r3, #3
 801349c:	d106      	bne.n	80134ac <f_mkdir+0x15c>
 801349e:	68bb      	ldr	r3, [r7, #8]
 80134a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80134a4:	429a      	cmp	r2, r3
 80134a6:	d101      	bne.n	80134ac <f_mkdir+0x15c>
 80134a8:	2300      	movs	r3, #0
 80134aa:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 80134ac:	68b8      	ldr	r0, [r7, #8]
 80134ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80134b0:	3320      	adds	r3, #32
 80134b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80134b4:	4619      	mov	r1, r3
 80134b6:	f7fe f891 	bl	80115dc <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80134ba:	68bb      	ldr	r3, [r7, #8]
 80134bc:	895b      	ldrh	r3, [r3, #10]
 80134be:	653b      	str	r3, [r7, #80]	; 0x50
 80134c0:	e01c      	b.n	80134fc <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 80134c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80134c4:	1c5a      	adds	r2, r3, #1
 80134c6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80134c8:	68ba      	ldr	r2, [r7, #8]
 80134ca:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 80134cc:	68bb      	ldr	r3, [r7, #8]
 80134ce:	2201      	movs	r2, #1
 80134d0:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 80134d2:	68bb      	ldr	r3, [r7, #8]
 80134d4:	4618      	mov	r0, r3
 80134d6:	f7fd fa9f 	bl	8010a18 <sync_window>
 80134da:	4603      	mov	r3, r0
 80134dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 80134e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d10d      	bne.n	8013504 <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 80134e8:	68bb      	ldr	r3, [r7, #8]
 80134ea:	899b      	ldrh	r3, [r3, #12]
 80134ec:	461a      	mov	r2, r3
 80134ee:	2100      	movs	r1, #0
 80134f0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80134f2:	f7fd f8c8 	bl	8010686 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80134f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80134f8:	3b01      	subs	r3, #1
 80134fa:	653b      	str	r3, [r7, #80]	; 0x50
 80134fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d1df      	bne.n	80134c2 <f_mkdir+0x172>
 8013502:	e000      	b.n	8013506 <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 8013504:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8013506:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801350a:	2b00      	cmp	r3, #0
 801350c:	d107      	bne.n	801351e <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 801350e:	f107 030c 	add.w	r3, r7, #12
 8013512:	4618      	mov	r0, r3
 8013514:	f7fe f934 	bl	8011780 <dir_register>
 8013518:	4603      	mov	r3, r0
 801351a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 801351e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013522:	2b00      	cmp	r3, #0
 8013524:	d120      	bne.n	8013568 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8013526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013528:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 801352a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801352c:	3316      	adds	r3, #22
 801352e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013530:	4618      	mov	r0, r3
 8013532:	f7fd f85b 	bl	80105ec <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8013536:	68bb      	ldr	r3, [r7, #8]
 8013538:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801353a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801353c:	4618      	mov	r0, r3
 801353e:	f7fe f84d 	bl	80115dc <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8013542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013544:	330b      	adds	r3, #11
 8013546:	2210      	movs	r2, #16
 8013548:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 801354a:	68bb      	ldr	r3, [r7, #8]
 801354c:	2201      	movs	r2, #1
 801354e:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8013550:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013554:	2b00      	cmp	r3, #0
 8013556:	d10e      	bne.n	8013576 <f_mkdir+0x226>
					res = sync_fs(fs);
 8013558:	68bb      	ldr	r3, [r7, #8]
 801355a:	4618      	mov	r0, r3
 801355c:	f7fd face 	bl	8010afc <sync_fs>
 8013560:	4603      	mov	r3, r0
 8013562:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8013566:	e006      	b.n	8013576 <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8013568:	f107 030c 	add.w	r3, r7, #12
 801356c:	2200      	movs	r2, #0
 801356e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013570:	4618      	mov	r0, r3
 8013572:	f7fd fd39 	bl	8010fe8 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8013576:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 801357a:	4618      	mov	r0, r3
 801357c:	3758      	adds	r7, #88	; 0x58
 801357e:	46bd      	mov	sp, r7
 8013580:	bd80      	pop	{r7, pc}
 8013582:	bf00      	nop
 8013584:	274a0000 	.word	0x274a0000

08013588 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8013588:	b580      	push	{r7, lr}
 801358a:	b088      	sub	sp, #32
 801358c:	af00      	add	r7, sp, #0
 801358e:	60f8      	str	r0, [r7, #12]
 8013590:	60b9      	str	r1, [r7, #8]
 8013592:	607a      	str	r2, [r7, #4]
	int n = 0;
 8013594:	2300      	movs	r3, #0
 8013596:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8013598:	68fb      	ldr	r3, [r7, #12]
 801359a:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 801359c:	e017      	b.n	80135ce <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 801359e:	f107 0310 	add.w	r3, r7, #16
 80135a2:	f107 0114 	add.w	r1, r7, #20
 80135a6:	2201      	movs	r2, #1
 80135a8:	6878      	ldr	r0, [r7, #4]
 80135aa:	f7ff f803 	bl	80125b4 <f_read>
		if (rc != 1) break;
 80135ae:	693b      	ldr	r3, [r7, #16]
 80135b0:	2b01      	cmp	r3, #1
 80135b2:	d112      	bne.n	80135da <f_gets+0x52>
		c = s[0];
 80135b4:	7d3b      	ldrb	r3, [r7, #20]
 80135b6:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 80135b8:	69bb      	ldr	r3, [r7, #24]
 80135ba:	1c5a      	adds	r2, r3, #1
 80135bc:	61ba      	str	r2, [r7, #24]
 80135be:	7dfa      	ldrb	r2, [r7, #23]
 80135c0:	701a      	strb	r2, [r3, #0]
		n++;
 80135c2:	69fb      	ldr	r3, [r7, #28]
 80135c4:	3301      	adds	r3, #1
 80135c6:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80135c8:	7dfb      	ldrb	r3, [r7, #23]
 80135ca:	2b0a      	cmp	r3, #10
 80135cc:	d007      	beq.n	80135de <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80135ce:	68bb      	ldr	r3, [r7, #8]
 80135d0:	3b01      	subs	r3, #1
 80135d2:	69fa      	ldr	r2, [r7, #28]
 80135d4:	429a      	cmp	r2, r3
 80135d6:	dbe2      	blt.n	801359e <f_gets+0x16>
 80135d8:	e002      	b.n	80135e0 <f_gets+0x58>
		if (rc != 1) break;
 80135da:	bf00      	nop
 80135dc:	e000      	b.n	80135e0 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 80135de:	bf00      	nop
	}
	*p = 0;
 80135e0:	69bb      	ldr	r3, [r7, #24]
 80135e2:	2200      	movs	r2, #0
 80135e4:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80135e6:	69fb      	ldr	r3, [r7, #28]
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d001      	beq.n	80135f0 <f_gets+0x68>
 80135ec:	68fb      	ldr	r3, [r7, #12]
 80135ee:	e000      	b.n	80135f2 <f_gets+0x6a>
 80135f0:	2300      	movs	r3, #0
}
 80135f2:	4618      	mov	r0, r3
 80135f4:	3720      	adds	r7, #32
 80135f6:	46bd      	mov	sp, r7
 80135f8:	bd80      	pop	{r7, pc}
	...

080135fc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80135fc:	b480      	push	{r7}
 80135fe:	b087      	sub	sp, #28
 8013600:	af00      	add	r7, sp, #0
 8013602:	60f8      	str	r0, [r7, #12]
 8013604:	60b9      	str	r1, [r7, #8]
 8013606:	4613      	mov	r3, r2
 8013608:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801360a:	2301      	movs	r3, #1
 801360c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801360e:	2300      	movs	r3, #0
 8013610:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8013612:	4b1f      	ldr	r3, [pc, #124]	; (8013690 <FATFS_LinkDriverEx+0x94>)
 8013614:	7a5b      	ldrb	r3, [r3, #9]
 8013616:	b2db      	uxtb	r3, r3
 8013618:	2b00      	cmp	r3, #0
 801361a:	d131      	bne.n	8013680 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801361c:	4b1c      	ldr	r3, [pc, #112]	; (8013690 <FATFS_LinkDriverEx+0x94>)
 801361e:	7a5b      	ldrb	r3, [r3, #9]
 8013620:	b2db      	uxtb	r3, r3
 8013622:	461a      	mov	r2, r3
 8013624:	4b1a      	ldr	r3, [pc, #104]	; (8013690 <FATFS_LinkDriverEx+0x94>)
 8013626:	2100      	movs	r1, #0
 8013628:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801362a:	4b19      	ldr	r3, [pc, #100]	; (8013690 <FATFS_LinkDriverEx+0x94>)
 801362c:	7a5b      	ldrb	r3, [r3, #9]
 801362e:	b2db      	uxtb	r3, r3
 8013630:	4a17      	ldr	r2, [pc, #92]	; (8013690 <FATFS_LinkDriverEx+0x94>)
 8013632:	009b      	lsls	r3, r3, #2
 8013634:	4413      	add	r3, r2
 8013636:	68fa      	ldr	r2, [r7, #12]
 8013638:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801363a:	4b15      	ldr	r3, [pc, #84]	; (8013690 <FATFS_LinkDriverEx+0x94>)
 801363c:	7a5b      	ldrb	r3, [r3, #9]
 801363e:	b2db      	uxtb	r3, r3
 8013640:	461a      	mov	r2, r3
 8013642:	4b13      	ldr	r3, [pc, #76]	; (8013690 <FATFS_LinkDriverEx+0x94>)
 8013644:	4413      	add	r3, r2
 8013646:	79fa      	ldrb	r2, [r7, #7]
 8013648:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801364a:	4b11      	ldr	r3, [pc, #68]	; (8013690 <FATFS_LinkDriverEx+0x94>)
 801364c:	7a5b      	ldrb	r3, [r3, #9]
 801364e:	b2db      	uxtb	r3, r3
 8013650:	1c5a      	adds	r2, r3, #1
 8013652:	b2d1      	uxtb	r1, r2
 8013654:	4a0e      	ldr	r2, [pc, #56]	; (8013690 <FATFS_LinkDriverEx+0x94>)
 8013656:	7251      	strb	r1, [r2, #9]
 8013658:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801365a:	7dbb      	ldrb	r3, [r7, #22]
 801365c:	3330      	adds	r3, #48	; 0x30
 801365e:	b2da      	uxtb	r2, r3
 8013660:	68bb      	ldr	r3, [r7, #8]
 8013662:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8013664:	68bb      	ldr	r3, [r7, #8]
 8013666:	3301      	adds	r3, #1
 8013668:	223a      	movs	r2, #58	; 0x3a
 801366a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801366c:	68bb      	ldr	r3, [r7, #8]
 801366e:	3302      	adds	r3, #2
 8013670:	222f      	movs	r2, #47	; 0x2f
 8013672:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8013674:	68bb      	ldr	r3, [r7, #8]
 8013676:	3303      	adds	r3, #3
 8013678:	2200      	movs	r2, #0
 801367a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801367c:	2300      	movs	r3, #0
 801367e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8013680:	7dfb      	ldrb	r3, [r7, #23]
}
 8013682:	4618      	mov	r0, r3
 8013684:	371c      	adds	r7, #28
 8013686:	46bd      	mov	sp, r7
 8013688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801368c:	4770      	bx	lr
 801368e:	bf00      	nop
 8013690:	2003c4c4 	.word	0x2003c4c4

08013694 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8013694:	b580      	push	{r7, lr}
 8013696:	b082      	sub	sp, #8
 8013698:	af00      	add	r7, sp, #0
 801369a:	6078      	str	r0, [r7, #4]
 801369c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801369e:	2200      	movs	r2, #0
 80136a0:	6839      	ldr	r1, [r7, #0]
 80136a2:	6878      	ldr	r0, [r7, #4]
 80136a4:	f7ff ffaa 	bl	80135fc <FATFS_LinkDriverEx>
 80136a8:	4603      	mov	r3, r0
}
 80136aa:	4618      	mov	r0, r3
 80136ac:	3708      	adds	r7, #8
 80136ae:	46bd      	mov	sp, r7
 80136b0:	bd80      	pop	{r7, pc}

080136b2 <__cxa_guard_acquire>:
 80136b2:	6803      	ldr	r3, [r0, #0]
 80136b4:	07db      	lsls	r3, r3, #31
 80136b6:	d406      	bmi.n	80136c6 <__cxa_guard_acquire+0x14>
 80136b8:	7843      	ldrb	r3, [r0, #1]
 80136ba:	b103      	cbz	r3, 80136be <__cxa_guard_acquire+0xc>
 80136bc:	deff      	udf	#255	; 0xff
 80136be:	2301      	movs	r3, #1
 80136c0:	7043      	strb	r3, [r0, #1]
 80136c2:	4618      	mov	r0, r3
 80136c4:	4770      	bx	lr
 80136c6:	2000      	movs	r0, #0
 80136c8:	4770      	bx	lr

080136ca <__cxa_guard_release>:
 80136ca:	2301      	movs	r3, #1
 80136cc:	6003      	str	r3, [r0, #0]
 80136ce:	4770      	bx	lr

080136d0 <cos>:
 80136d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80136d2:	ec51 0b10 	vmov	r0, r1, d0
 80136d6:	4a1e      	ldr	r2, [pc, #120]	; (8013750 <cos+0x80>)
 80136d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80136dc:	4293      	cmp	r3, r2
 80136de:	dc06      	bgt.n	80136ee <cos+0x1e>
 80136e0:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8013748 <cos+0x78>
 80136e4:	f000 fa74 	bl	8013bd0 <__kernel_cos>
 80136e8:	ec51 0b10 	vmov	r0, r1, d0
 80136ec:	e007      	b.n	80136fe <cos+0x2e>
 80136ee:	4a19      	ldr	r2, [pc, #100]	; (8013754 <cos+0x84>)
 80136f0:	4293      	cmp	r3, r2
 80136f2:	dd09      	ble.n	8013708 <cos+0x38>
 80136f4:	ee10 2a10 	vmov	r2, s0
 80136f8:	460b      	mov	r3, r1
 80136fa:	f7ec fddd 	bl	80002b8 <__aeabi_dsub>
 80136fe:	ec41 0b10 	vmov	d0, r0, r1
 8013702:	b005      	add	sp, #20
 8013704:	f85d fb04 	ldr.w	pc, [sp], #4
 8013708:	4668      	mov	r0, sp
 801370a:	f000 f86d 	bl	80137e8 <__ieee754_rem_pio2>
 801370e:	f000 0003 	and.w	r0, r0, #3
 8013712:	2801      	cmp	r0, #1
 8013714:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013718:	ed9d 0b00 	vldr	d0, [sp]
 801371c:	d007      	beq.n	801372e <cos+0x5e>
 801371e:	2802      	cmp	r0, #2
 8013720:	d00e      	beq.n	8013740 <cos+0x70>
 8013722:	2800      	cmp	r0, #0
 8013724:	d0de      	beq.n	80136e4 <cos+0x14>
 8013726:	2001      	movs	r0, #1
 8013728:	f000 fe5a 	bl	80143e0 <__kernel_sin>
 801372c:	e7dc      	b.n	80136e8 <cos+0x18>
 801372e:	f000 fe57 	bl	80143e0 <__kernel_sin>
 8013732:	ec53 2b10 	vmov	r2, r3, d0
 8013736:	ee10 0a10 	vmov	r0, s0
 801373a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801373e:	e7de      	b.n	80136fe <cos+0x2e>
 8013740:	f000 fa46 	bl	8013bd0 <__kernel_cos>
 8013744:	e7f5      	b.n	8013732 <cos+0x62>
 8013746:	bf00      	nop
	...
 8013750:	3fe921fb 	.word	0x3fe921fb
 8013754:	7fefffff 	.word	0x7fefffff

08013758 <sin>:
 8013758:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801375a:	ec51 0b10 	vmov	r0, r1, d0
 801375e:	4a20      	ldr	r2, [pc, #128]	; (80137e0 <sin+0x88>)
 8013760:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013764:	4293      	cmp	r3, r2
 8013766:	dc07      	bgt.n	8013778 <sin+0x20>
 8013768:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80137d8 <sin+0x80>
 801376c:	2000      	movs	r0, #0
 801376e:	f000 fe37 	bl	80143e0 <__kernel_sin>
 8013772:	ec51 0b10 	vmov	r0, r1, d0
 8013776:	e007      	b.n	8013788 <sin+0x30>
 8013778:	4a1a      	ldr	r2, [pc, #104]	; (80137e4 <sin+0x8c>)
 801377a:	4293      	cmp	r3, r2
 801377c:	dd09      	ble.n	8013792 <sin+0x3a>
 801377e:	ee10 2a10 	vmov	r2, s0
 8013782:	460b      	mov	r3, r1
 8013784:	f7ec fd98 	bl	80002b8 <__aeabi_dsub>
 8013788:	ec41 0b10 	vmov	d0, r0, r1
 801378c:	b005      	add	sp, #20
 801378e:	f85d fb04 	ldr.w	pc, [sp], #4
 8013792:	4668      	mov	r0, sp
 8013794:	f000 f828 	bl	80137e8 <__ieee754_rem_pio2>
 8013798:	f000 0003 	and.w	r0, r0, #3
 801379c:	2801      	cmp	r0, #1
 801379e:	ed9d 1b02 	vldr	d1, [sp, #8]
 80137a2:	ed9d 0b00 	vldr	d0, [sp]
 80137a6:	d004      	beq.n	80137b2 <sin+0x5a>
 80137a8:	2802      	cmp	r0, #2
 80137aa:	d005      	beq.n	80137b8 <sin+0x60>
 80137ac:	b970      	cbnz	r0, 80137cc <sin+0x74>
 80137ae:	2001      	movs	r0, #1
 80137b0:	e7dd      	b.n	801376e <sin+0x16>
 80137b2:	f000 fa0d 	bl	8013bd0 <__kernel_cos>
 80137b6:	e7dc      	b.n	8013772 <sin+0x1a>
 80137b8:	2001      	movs	r0, #1
 80137ba:	f000 fe11 	bl	80143e0 <__kernel_sin>
 80137be:	ec53 2b10 	vmov	r2, r3, d0
 80137c2:	ee10 0a10 	vmov	r0, s0
 80137c6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80137ca:	e7dd      	b.n	8013788 <sin+0x30>
 80137cc:	f000 fa00 	bl	8013bd0 <__kernel_cos>
 80137d0:	e7f5      	b.n	80137be <sin+0x66>
 80137d2:	bf00      	nop
 80137d4:	f3af 8000 	nop.w
	...
 80137e0:	3fe921fb 	.word	0x3fe921fb
 80137e4:	7fefffff 	.word	0x7fefffff

080137e8 <__ieee754_rem_pio2>:
 80137e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137ec:	ec57 6b10 	vmov	r6, r7, d0
 80137f0:	4bc3      	ldr	r3, [pc, #780]	; (8013b00 <__ieee754_rem_pio2+0x318>)
 80137f2:	b08d      	sub	sp, #52	; 0x34
 80137f4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80137f8:	4598      	cmp	r8, r3
 80137fa:	4604      	mov	r4, r0
 80137fc:	9704      	str	r7, [sp, #16]
 80137fe:	dc07      	bgt.n	8013810 <__ieee754_rem_pio2+0x28>
 8013800:	2200      	movs	r2, #0
 8013802:	2300      	movs	r3, #0
 8013804:	ed84 0b00 	vstr	d0, [r4]
 8013808:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801380c:	2500      	movs	r5, #0
 801380e:	e027      	b.n	8013860 <__ieee754_rem_pio2+0x78>
 8013810:	4bbc      	ldr	r3, [pc, #752]	; (8013b04 <__ieee754_rem_pio2+0x31c>)
 8013812:	4598      	cmp	r8, r3
 8013814:	dc75      	bgt.n	8013902 <__ieee754_rem_pio2+0x11a>
 8013816:	9b04      	ldr	r3, [sp, #16]
 8013818:	4dbb      	ldr	r5, [pc, #748]	; (8013b08 <__ieee754_rem_pio2+0x320>)
 801381a:	2b00      	cmp	r3, #0
 801381c:	ee10 0a10 	vmov	r0, s0
 8013820:	a3a9      	add	r3, pc, #676	; (adr r3, 8013ac8 <__ieee754_rem_pio2+0x2e0>)
 8013822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013826:	4639      	mov	r1, r7
 8013828:	dd36      	ble.n	8013898 <__ieee754_rem_pio2+0xb0>
 801382a:	f7ec fd45 	bl	80002b8 <__aeabi_dsub>
 801382e:	45a8      	cmp	r8, r5
 8013830:	4606      	mov	r6, r0
 8013832:	460f      	mov	r7, r1
 8013834:	d018      	beq.n	8013868 <__ieee754_rem_pio2+0x80>
 8013836:	a3a6      	add	r3, pc, #664	; (adr r3, 8013ad0 <__ieee754_rem_pio2+0x2e8>)
 8013838:	e9d3 2300 	ldrd	r2, r3, [r3]
 801383c:	f7ec fd3c 	bl	80002b8 <__aeabi_dsub>
 8013840:	4602      	mov	r2, r0
 8013842:	460b      	mov	r3, r1
 8013844:	e9c4 2300 	strd	r2, r3, [r4]
 8013848:	4630      	mov	r0, r6
 801384a:	4639      	mov	r1, r7
 801384c:	f7ec fd34 	bl	80002b8 <__aeabi_dsub>
 8013850:	a39f      	add	r3, pc, #636	; (adr r3, 8013ad0 <__ieee754_rem_pio2+0x2e8>)
 8013852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013856:	f7ec fd2f 	bl	80002b8 <__aeabi_dsub>
 801385a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801385e:	2501      	movs	r5, #1
 8013860:	4628      	mov	r0, r5
 8013862:	b00d      	add	sp, #52	; 0x34
 8013864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013868:	a39b      	add	r3, pc, #620	; (adr r3, 8013ad8 <__ieee754_rem_pio2+0x2f0>)
 801386a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801386e:	f7ec fd23 	bl	80002b8 <__aeabi_dsub>
 8013872:	a39b      	add	r3, pc, #620	; (adr r3, 8013ae0 <__ieee754_rem_pio2+0x2f8>)
 8013874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013878:	4606      	mov	r6, r0
 801387a:	460f      	mov	r7, r1
 801387c:	f7ec fd1c 	bl	80002b8 <__aeabi_dsub>
 8013880:	4602      	mov	r2, r0
 8013882:	460b      	mov	r3, r1
 8013884:	e9c4 2300 	strd	r2, r3, [r4]
 8013888:	4630      	mov	r0, r6
 801388a:	4639      	mov	r1, r7
 801388c:	f7ec fd14 	bl	80002b8 <__aeabi_dsub>
 8013890:	a393      	add	r3, pc, #588	; (adr r3, 8013ae0 <__ieee754_rem_pio2+0x2f8>)
 8013892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013896:	e7de      	b.n	8013856 <__ieee754_rem_pio2+0x6e>
 8013898:	f7ec fd10 	bl	80002bc <__adddf3>
 801389c:	45a8      	cmp	r8, r5
 801389e:	4606      	mov	r6, r0
 80138a0:	460f      	mov	r7, r1
 80138a2:	d016      	beq.n	80138d2 <__ieee754_rem_pio2+0xea>
 80138a4:	a38a      	add	r3, pc, #552	; (adr r3, 8013ad0 <__ieee754_rem_pio2+0x2e8>)
 80138a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138aa:	f7ec fd07 	bl	80002bc <__adddf3>
 80138ae:	4602      	mov	r2, r0
 80138b0:	460b      	mov	r3, r1
 80138b2:	e9c4 2300 	strd	r2, r3, [r4]
 80138b6:	4630      	mov	r0, r6
 80138b8:	4639      	mov	r1, r7
 80138ba:	f7ec fcfd 	bl	80002b8 <__aeabi_dsub>
 80138be:	a384      	add	r3, pc, #528	; (adr r3, 8013ad0 <__ieee754_rem_pio2+0x2e8>)
 80138c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138c4:	f7ec fcfa 	bl	80002bc <__adddf3>
 80138c8:	f04f 35ff 	mov.w	r5, #4294967295
 80138cc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80138d0:	e7c6      	b.n	8013860 <__ieee754_rem_pio2+0x78>
 80138d2:	a381      	add	r3, pc, #516	; (adr r3, 8013ad8 <__ieee754_rem_pio2+0x2f0>)
 80138d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138d8:	f7ec fcf0 	bl	80002bc <__adddf3>
 80138dc:	a380      	add	r3, pc, #512	; (adr r3, 8013ae0 <__ieee754_rem_pio2+0x2f8>)
 80138de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138e2:	4606      	mov	r6, r0
 80138e4:	460f      	mov	r7, r1
 80138e6:	f7ec fce9 	bl	80002bc <__adddf3>
 80138ea:	4602      	mov	r2, r0
 80138ec:	460b      	mov	r3, r1
 80138ee:	e9c4 2300 	strd	r2, r3, [r4]
 80138f2:	4630      	mov	r0, r6
 80138f4:	4639      	mov	r1, r7
 80138f6:	f7ec fcdf 	bl	80002b8 <__aeabi_dsub>
 80138fa:	a379      	add	r3, pc, #484	; (adr r3, 8013ae0 <__ieee754_rem_pio2+0x2f8>)
 80138fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013900:	e7e0      	b.n	80138c4 <__ieee754_rem_pio2+0xdc>
 8013902:	4b82      	ldr	r3, [pc, #520]	; (8013b0c <__ieee754_rem_pio2+0x324>)
 8013904:	4598      	cmp	r8, r3
 8013906:	f300 80d0 	bgt.w	8013aaa <__ieee754_rem_pio2+0x2c2>
 801390a:	f000 fe23 	bl	8014554 <fabs>
 801390e:	ec57 6b10 	vmov	r6, r7, d0
 8013912:	ee10 0a10 	vmov	r0, s0
 8013916:	a374      	add	r3, pc, #464	; (adr r3, 8013ae8 <__ieee754_rem_pio2+0x300>)
 8013918:	e9d3 2300 	ldrd	r2, r3, [r3]
 801391c:	4639      	mov	r1, r7
 801391e:	f7ec fe83 	bl	8000628 <__aeabi_dmul>
 8013922:	2200      	movs	r2, #0
 8013924:	4b7a      	ldr	r3, [pc, #488]	; (8013b10 <__ieee754_rem_pio2+0x328>)
 8013926:	f7ec fcc9 	bl	80002bc <__adddf3>
 801392a:	f7ed f92d 	bl	8000b88 <__aeabi_d2iz>
 801392e:	4605      	mov	r5, r0
 8013930:	f7ec fe10 	bl	8000554 <__aeabi_i2d>
 8013934:	a364      	add	r3, pc, #400	; (adr r3, 8013ac8 <__ieee754_rem_pio2+0x2e0>)
 8013936:	e9d3 2300 	ldrd	r2, r3, [r3]
 801393a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801393e:	f7ec fe73 	bl	8000628 <__aeabi_dmul>
 8013942:	4602      	mov	r2, r0
 8013944:	460b      	mov	r3, r1
 8013946:	4630      	mov	r0, r6
 8013948:	4639      	mov	r1, r7
 801394a:	f7ec fcb5 	bl	80002b8 <__aeabi_dsub>
 801394e:	a360      	add	r3, pc, #384	; (adr r3, 8013ad0 <__ieee754_rem_pio2+0x2e8>)
 8013950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013954:	4682      	mov	sl, r0
 8013956:	468b      	mov	fp, r1
 8013958:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801395c:	f7ec fe64 	bl	8000628 <__aeabi_dmul>
 8013960:	2d1f      	cmp	r5, #31
 8013962:	4606      	mov	r6, r0
 8013964:	460f      	mov	r7, r1
 8013966:	dc0c      	bgt.n	8013982 <__ieee754_rem_pio2+0x19a>
 8013968:	1e6a      	subs	r2, r5, #1
 801396a:	4b6a      	ldr	r3, [pc, #424]	; (8013b14 <__ieee754_rem_pio2+0x32c>)
 801396c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013970:	4543      	cmp	r3, r8
 8013972:	d006      	beq.n	8013982 <__ieee754_rem_pio2+0x19a>
 8013974:	4632      	mov	r2, r6
 8013976:	463b      	mov	r3, r7
 8013978:	4650      	mov	r0, sl
 801397a:	4659      	mov	r1, fp
 801397c:	f7ec fc9c 	bl	80002b8 <__aeabi_dsub>
 8013980:	e00e      	b.n	80139a0 <__ieee754_rem_pio2+0x1b8>
 8013982:	4632      	mov	r2, r6
 8013984:	463b      	mov	r3, r7
 8013986:	4650      	mov	r0, sl
 8013988:	4659      	mov	r1, fp
 801398a:	f7ec fc95 	bl	80002b8 <__aeabi_dsub>
 801398e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8013992:	9305      	str	r3, [sp, #20]
 8013994:	9a05      	ldr	r2, [sp, #20]
 8013996:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801399a:	1ad3      	subs	r3, r2, r3
 801399c:	2b10      	cmp	r3, #16
 801399e:	dc02      	bgt.n	80139a6 <__ieee754_rem_pio2+0x1be>
 80139a0:	e9c4 0100 	strd	r0, r1, [r4]
 80139a4:	e039      	b.n	8013a1a <__ieee754_rem_pio2+0x232>
 80139a6:	a34c      	add	r3, pc, #304	; (adr r3, 8013ad8 <__ieee754_rem_pio2+0x2f0>)
 80139a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80139b0:	f7ec fe3a 	bl	8000628 <__aeabi_dmul>
 80139b4:	4606      	mov	r6, r0
 80139b6:	460f      	mov	r7, r1
 80139b8:	4602      	mov	r2, r0
 80139ba:	460b      	mov	r3, r1
 80139bc:	4650      	mov	r0, sl
 80139be:	4659      	mov	r1, fp
 80139c0:	f7ec fc7a 	bl	80002b8 <__aeabi_dsub>
 80139c4:	4602      	mov	r2, r0
 80139c6:	460b      	mov	r3, r1
 80139c8:	4680      	mov	r8, r0
 80139ca:	4689      	mov	r9, r1
 80139cc:	4650      	mov	r0, sl
 80139ce:	4659      	mov	r1, fp
 80139d0:	f7ec fc72 	bl	80002b8 <__aeabi_dsub>
 80139d4:	4632      	mov	r2, r6
 80139d6:	463b      	mov	r3, r7
 80139d8:	f7ec fc6e 	bl	80002b8 <__aeabi_dsub>
 80139dc:	a340      	add	r3, pc, #256	; (adr r3, 8013ae0 <__ieee754_rem_pio2+0x2f8>)
 80139de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139e2:	4606      	mov	r6, r0
 80139e4:	460f      	mov	r7, r1
 80139e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80139ea:	f7ec fe1d 	bl	8000628 <__aeabi_dmul>
 80139ee:	4632      	mov	r2, r6
 80139f0:	463b      	mov	r3, r7
 80139f2:	f7ec fc61 	bl	80002b8 <__aeabi_dsub>
 80139f6:	4602      	mov	r2, r0
 80139f8:	460b      	mov	r3, r1
 80139fa:	4606      	mov	r6, r0
 80139fc:	460f      	mov	r7, r1
 80139fe:	4640      	mov	r0, r8
 8013a00:	4649      	mov	r1, r9
 8013a02:	f7ec fc59 	bl	80002b8 <__aeabi_dsub>
 8013a06:	9a05      	ldr	r2, [sp, #20]
 8013a08:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013a0c:	1ad3      	subs	r3, r2, r3
 8013a0e:	2b31      	cmp	r3, #49	; 0x31
 8013a10:	dc20      	bgt.n	8013a54 <__ieee754_rem_pio2+0x26c>
 8013a12:	e9c4 0100 	strd	r0, r1, [r4]
 8013a16:	46c2      	mov	sl, r8
 8013a18:	46cb      	mov	fp, r9
 8013a1a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8013a1e:	4650      	mov	r0, sl
 8013a20:	4642      	mov	r2, r8
 8013a22:	464b      	mov	r3, r9
 8013a24:	4659      	mov	r1, fp
 8013a26:	f7ec fc47 	bl	80002b8 <__aeabi_dsub>
 8013a2a:	463b      	mov	r3, r7
 8013a2c:	4632      	mov	r2, r6
 8013a2e:	f7ec fc43 	bl	80002b8 <__aeabi_dsub>
 8013a32:	9b04      	ldr	r3, [sp, #16]
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013a3a:	f6bf af11 	bge.w	8013860 <__ieee754_rem_pio2+0x78>
 8013a3e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8013a42:	6063      	str	r3, [r4, #4]
 8013a44:	f8c4 8000 	str.w	r8, [r4]
 8013a48:	60a0      	str	r0, [r4, #8]
 8013a4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013a4e:	60e3      	str	r3, [r4, #12]
 8013a50:	426d      	negs	r5, r5
 8013a52:	e705      	b.n	8013860 <__ieee754_rem_pio2+0x78>
 8013a54:	a326      	add	r3, pc, #152	; (adr r3, 8013af0 <__ieee754_rem_pio2+0x308>)
 8013a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013a5e:	f7ec fde3 	bl	8000628 <__aeabi_dmul>
 8013a62:	4606      	mov	r6, r0
 8013a64:	460f      	mov	r7, r1
 8013a66:	4602      	mov	r2, r0
 8013a68:	460b      	mov	r3, r1
 8013a6a:	4640      	mov	r0, r8
 8013a6c:	4649      	mov	r1, r9
 8013a6e:	f7ec fc23 	bl	80002b8 <__aeabi_dsub>
 8013a72:	4602      	mov	r2, r0
 8013a74:	460b      	mov	r3, r1
 8013a76:	4682      	mov	sl, r0
 8013a78:	468b      	mov	fp, r1
 8013a7a:	4640      	mov	r0, r8
 8013a7c:	4649      	mov	r1, r9
 8013a7e:	f7ec fc1b 	bl	80002b8 <__aeabi_dsub>
 8013a82:	4632      	mov	r2, r6
 8013a84:	463b      	mov	r3, r7
 8013a86:	f7ec fc17 	bl	80002b8 <__aeabi_dsub>
 8013a8a:	a31b      	add	r3, pc, #108	; (adr r3, 8013af8 <__ieee754_rem_pio2+0x310>)
 8013a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a90:	4606      	mov	r6, r0
 8013a92:	460f      	mov	r7, r1
 8013a94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013a98:	f7ec fdc6 	bl	8000628 <__aeabi_dmul>
 8013a9c:	4632      	mov	r2, r6
 8013a9e:	463b      	mov	r3, r7
 8013aa0:	f7ec fc0a 	bl	80002b8 <__aeabi_dsub>
 8013aa4:	4606      	mov	r6, r0
 8013aa6:	460f      	mov	r7, r1
 8013aa8:	e764      	b.n	8013974 <__ieee754_rem_pio2+0x18c>
 8013aaa:	4b1b      	ldr	r3, [pc, #108]	; (8013b18 <__ieee754_rem_pio2+0x330>)
 8013aac:	4598      	cmp	r8, r3
 8013aae:	dd35      	ble.n	8013b1c <__ieee754_rem_pio2+0x334>
 8013ab0:	ee10 2a10 	vmov	r2, s0
 8013ab4:	463b      	mov	r3, r7
 8013ab6:	4630      	mov	r0, r6
 8013ab8:	4639      	mov	r1, r7
 8013aba:	f7ec fbfd 	bl	80002b8 <__aeabi_dsub>
 8013abe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013ac2:	e9c4 0100 	strd	r0, r1, [r4]
 8013ac6:	e6a1      	b.n	801380c <__ieee754_rem_pio2+0x24>
 8013ac8:	54400000 	.word	0x54400000
 8013acc:	3ff921fb 	.word	0x3ff921fb
 8013ad0:	1a626331 	.word	0x1a626331
 8013ad4:	3dd0b461 	.word	0x3dd0b461
 8013ad8:	1a600000 	.word	0x1a600000
 8013adc:	3dd0b461 	.word	0x3dd0b461
 8013ae0:	2e037073 	.word	0x2e037073
 8013ae4:	3ba3198a 	.word	0x3ba3198a
 8013ae8:	6dc9c883 	.word	0x6dc9c883
 8013aec:	3fe45f30 	.word	0x3fe45f30
 8013af0:	2e000000 	.word	0x2e000000
 8013af4:	3ba3198a 	.word	0x3ba3198a
 8013af8:	252049c1 	.word	0x252049c1
 8013afc:	397b839a 	.word	0x397b839a
 8013b00:	3fe921fb 	.word	0x3fe921fb
 8013b04:	4002d97b 	.word	0x4002d97b
 8013b08:	3ff921fb 	.word	0x3ff921fb
 8013b0c:	413921fb 	.word	0x413921fb
 8013b10:	3fe00000 	.word	0x3fe00000
 8013b14:	080191f8 	.word	0x080191f8
 8013b18:	7fefffff 	.word	0x7fefffff
 8013b1c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8013b20:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8013b24:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8013b28:	4630      	mov	r0, r6
 8013b2a:	460f      	mov	r7, r1
 8013b2c:	f7ed f82c 	bl	8000b88 <__aeabi_d2iz>
 8013b30:	f7ec fd10 	bl	8000554 <__aeabi_i2d>
 8013b34:	4602      	mov	r2, r0
 8013b36:	460b      	mov	r3, r1
 8013b38:	4630      	mov	r0, r6
 8013b3a:	4639      	mov	r1, r7
 8013b3c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013b40:	f7ec fbba 	bl	80002b8 <__aeabi_dsub>
 8013b44:	2200      	movs	r2, #0
 8013b46:	4b1f      	ldr	r3, [pc, #124]	; (8013bc4 <__ieee754_rem_pio2+0x3dc>)
 8013b48:	f7ec fd6e 	bl	8000628 <__aeabi_dmul>
 8013b4c:	460f      	mov	r7, r1
 8013b4e:	4606      	mov	r6, r0
 8013b50:	f7ed f81a 	bl	8000b88 <__aeabi_d2iz>
 8013b54:	f7ec fcfe 	bl	8000554 <__aeabi_i2d>
 8013b58:	4602      	mov	r2, r0
 8013b5a:	460b      	mov	r3, r1
 8013b5c:	4630      	mov	r0, r6
 8013b5e:	4639      	mov	r1, r7
 8013b60:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013b64:	f7ec fba8 	bl	80002b8 <__aeabi_dsub>
 8013b68:	2200      	movs	r2, #0
 8013b6a:	4b16      	ldr	r3, [pc, #88]	; (8013bc4 <__ieee754_rem_pio2+0x3dc>)
 8013b6c:	f7ec fd5c 	bl	8000628 <__aeabi_dmul>
 8013b70:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013b74:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8013b78:	f04f 0803 	mov.w	r8, #3
 8013b7c:	2600      	movs	r6, #0
 8013b7e:	2700      	movs	r7, #0
 8013b80:	4632      	mov	r2, r6
 8013b82:	463b      	mov	r3, r7
 8013b84:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8013b88:	f108 3aff 	add.w	sl, r8, #4294967295
 8013b8c:	f7ec ffb4 	bl	8000af8 <__aeabi_dcmpeq>
 8013b90:	b9b0      	cbnz	r0, 8013bc0 <__ieee754_rem_pio2+0x3d8>
 8013b92:	4b0d      	ldr	r3, [pc, #52]	; (8013bc8 <__ieee754_rem_pio2+0x3e0>)
 8013b94:	9301      	str	r3, [sp, #4]
 8013b96:	2302      	movs	r3, #2
 8013b98:	9300      	str	r3, [sp, #0]
 8013b9a:	462a      	mov	r2, r5
 8013b9c:	4643      	mov	r3, r8
 8013b9e:	4621      	mov	r1, r4
 8013ba0:	a806      	add	r0, sp, #24
 8013ba2:	f000 f8dd 	bl	8013d60 <__kernel_rem_pio2>
 8013ba6:	9b04      	ldr	r3, [sp, #16]
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	4605      	mov	r5, r0
 8013bac:	f6bf ae58 	bge.w	8013860 <__ieee754_rem_pio2+0x78>
 8013bb0:	6863      	ldr	r3, [r4, #4]
 8013bb2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013bb6:	6063      	str	r3, [r4, #4]
 8013bb8:	68e3      	ldr	r3, [r4, #12]
 8013bba:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013bbe:	e746      	b.n	8013a4e <__ieee754_rem_pio2+0x266>
 8013bc0:	46d0      	mov	r8, sl
 8013bc2:	e7dd      	b.n	8013b80 <__ieee754_rem_pio2+0x398>
 8013bc4:	41700000 	.word	0x41700000
 8013bc8:	08019278 	.word	0x08019278
 8013bcc:	00000000 	.word	0x00000000

08013bd0 <__kernel_cos>:
 8013bd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bd4:	ec59 8b10 	vmov	r8, r9, d0
 8013bd8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8013bdc:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8013be0:	ed2d 8b02 	vpush	{d8}
 8013be4:	eeb0 8a41 	vmov.f32	s16, s2
 8013be8:	eef0 8a61 	vmov.f32	s17, s3
 8013bec:	da07      	bge.n	8013bfe <__kernel_cos+0x2e>
 8013bee:	ee10 0a10 	vmov	r0, s0
 8013bf2:	4649      	mov	r1, r9
 8013bf4:	f7ec ffc8 	bl	8000b88 <__aeabi_d2iz>
 8013bf8:	2800      	cmp	r0, #0
 8013bfa:	f000 8089 	beq.w	8013d10 <__kernel_cos+0x140>
 8013bfe:	4642      	mov	r2, r8
 8013c00:	464b      	mov	r3, r9
 8013c02:	4640      	mov	r0, r8
 8013c04:	4649      	mov	r1, r9
 8013c06:	f7ec fd0f 	bl	8000628 <__aeabi_dmul>
 8013c0a:	2200      	movs	r2, #0
 8013c0c:	4b4e      	ldr	r3, [pc, #312]	; (8013d48 <__kernel_cos+0x178>)
 8013c0e:	4604      	mov	r4, r0
 8013c10:	460d      	mov	r5, r1
 8013c12:	f7ec fd09 	bl	8000628 <__aeabi_dmul>
 8013c16:	a340      	add	r3, pc, #256	; (adr r3, 8013d18 <__kernel_cos+0x148>)
 8013c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c1c:	4682      	mov	sl, r0
 8013c1e:	468b      	mov	fp, r1
 8013c20:	4620      	mov	r0, r4
 8013c22:	4629      	mov	r1, r5
 8013c24:	f7ec fd00 	bl	8000628 <__aeabi_dmul>
 8013c28:	a33d      	add	r3, pc, #244	; (adr r3, 8013d20 <__kernel_cos+0x150>)
 8013c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c2e:	f7ec fb45 	bl	80002bc <__adddf3>
 8013c32:	4622      	mov	r2, r4
 8013c34:	462b      	mov	r3, r5
 8013c36:	f7ec fcf7 	bl	8000628 <__aeabi_dmul>
 8013c3a:	a33b      	add	r3, pc, #236	; (adr r3, 8013d28 <__kernel_cos+0x158>)
 8013c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c40:	f7ec fb3a 	bl	80002b8 <__aeabi_dsub>
 8013c44:	4622      	mov	r2, r4
 8013c46:	462b      	mov	r3, r5
 8013c48:	f7ec fcee 	bl	8000628 <__aeabi_dmul>
 8013c4c:	a338      	add	r3, pc, #224	; (adr r3, 8013d30 <__kernel_cos+0x160>)
 8013c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c52:	f7ec fb33 	bl	80002bc <__adddf3>
 8013c56:	4622      	mov	r2, r4
 8013c58:	462b      	mov	r3, r5
 8013c5a:	f7ec fce5 	bl	8000628 <__aeabi_dmul>
 8013c5e:	a336      	add	r3, pc, #216	; (adr r3, 8013d38 <__kernel_cos+0x168>)
 8013c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c64:	f7ec fb28 	bl	80002b8 <__aeabi_dsub>
 8013c68:	4622      	mov	r2, r4
 8013c6a:	462b      	mov	r3, r5
 8013c6c:	f7ec fcdc 	bl	8000628 <__aeabi_dmul>
 8013c70:	a333      	add	r3, pc, #204	; (adr r3, 8013d40 <__kernel_cos+0x170>)
 8013c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c76:	f7ec fb21 	bl	80002bc <__adddf3>
 8013c7a:	4622      	mov	r2, r4
 8013c7c:	462b      	mov	r3, r5
 8013c7e:	f7ec fcd3 	bl	8000628 <__aeabi_dmul>
 8013c82:	4622      	mov	r2, r4
 8013c84:	462b      	mov	r3, r5
 8013c86:	f7ec fccf 	bl	8000628 <__aeabi_dmul>
 8013c8a:	ec53 2b18 	vmov	r2, r3, d8
 8013c8e:	4604      	mov	r4, r0
 8013c90:	460d      	mov	r5, r1
 8013c92:	4640      	mov	r0, r8
 8013c94:	4649      	mov	r1, r9
 8013c96:	f7ec fcc7 	bl	8000628 <__aeabi_dmul>
 8013c9a:	460b      	mov	r3, r1
 8013c9c:	4602      	mov	r2, r0
 8013c9e:	4629      	mov	r1, r5
 8013ca0:	4620      	mov	r0, r4
 8013ca2:	f7ec fb09 	bl	80002b8 <__aeabi_dsub>
 8013ca6:	4b29      	ldr	r3, [pc, #164]	; (8013d4c <__kernel_cos+0x17c>)
 8013ca8:	429e      	cmp	r6, r3
 8013caa:	4680      	mov	r8, r0
 8013cac:	4689      	mov	r9, r1
 8013cae:	dc11      	bgt.n	8013cd4 <__kernel_cos+0x104>
 8013cb0:	4602      	mov	r2, r0
 8013cb2:	460b      	mov	r3, r1
 8013cb4:	4650      	mov	r0, sl
 8013cb6:	4659      	mov	r1, fp
 8013cb8:	f7ec fafe 	bl	80002b8 <__aeabi_dsub>
 8013cbc:	460b      	mov	r3, r1
 8013cbe:	4924      	ldr	r1, [pc, #144]	; (8013d50 <__kernel_cos+0x180>)
 8013cc0:	4602      	mov	r2, r0
 8013cc2:	2000      	movs	r0, #0
 8013cc4:	f7ec faf8 	bl	80002b8 <__aeabi_dsub>
 8013cc8:	ecbd 8b02 	vpop	{d8}
 8013ccc:	ec41 0b10 	vmov	d0, r0, r1
 8013cd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cd4:	4b1f      	ldr	r3, [pc, #124]	; (8013d54 <__kernel_cos+0x184>)
 8013cd6:	491e      	ldr	r1, [pc, #120]	; (8013d50 <__kernel_cos+0x180>)
 8013cd8:	429e      	cmp	r6, r3
 8013cda:	bfcc      	ite	gt
 8013cdc:	4d1e      	ldrgt	r5, [pc, #120]	; (8013d58 <__kernel_cos+0x188>)
 8013cde:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8013ce2:	2400      	movs	r4, #0
 8013ce4:	4622      	mov	r2, r4
 8013ce6:	462b      	mov	r3, r5
 8013ce8:	2000      	movs	r0, #0
 8013cea:	f7ec fae5 	bl	80002b8 <__aeabi_dsub>
 8013cee:	4622      	mov	r2, r4
 8013cf0:	4606      	mov	r6, r0
 8013cf2:	460f      	mov	r7, r1
 8013cf4:	462b      	mov	r3, r5
 8013cf6:	4650      	mov	r0, sl
 8013cf8:	4659      	mov	r1, fp
 8013cfa:	f7ec fadd 	bl	80002b8 <__aeabi_dsub>
 8013cfe:	4642      	mov	r2, r8
 8013d00:	464b      	mov	r3, r9
 8013d02:	f7ec fad9 	bl	80002b8 <__aeabi_dsub>
 8013d06:	4602      	mov	r2, r0
 8013d08:	460b      	mov	r3, r1
 8013d0a:	4630      	mov	r0, r6
 8013d0c:	4639      	mov	r1, r7
 8013d0e:	e7d9      	b.n	8013cc4 <__kernel_cos+0xf4>
 8013d10:	2000      	movs	r0, #0
 8013d12:	490f      	ldr	r1, [pc, #60]	; (8013d50 <__kernel_cos+0x180>)
 8013d14:	e7d8      	b.n	8013cc8 <__kernel_cos+0xf8>
 8013d16:	bf00      	nop
 8013d18:	be8838d4 	.word	0xbe8838d4
 8013d1c:	bda8fae9 	.word	0xbda8fae9
 8013d20:	bdb4b1c4 	.word	0xbdb4b1c4
 8013d24:	3e21ee9e 	.word	0x3e21ee9e
 8013d28:	809c52ad 	.word	0x809c52ad
 8013d2c:	3e927e4f 	.word	0x3e927e4f
 8013d30:	19cb1590 	.word	0x19cb1590
 8013d34:	3efa01a0 	.word	0x3efa01a0
 8013d38:	16c15177 	.word	0x16c15177
 8013d3c:	3f56c16c 	.word	0x3f56c16c
 8013d40:	5555554c 	.word	0x5555554c
 8013d44:	3fa55555 	.word	0x3fa55555
 8013d48:	3fe00000 	.word	0x3fe00000
 8013d4c:	3fd33332 	.word	0x3fd33332
 8013d50:	3ff00000 	.word	0x3ff00000
 8013d54:	3fe90000 	.word	0x3fe90000
 8013d58:	3fd20000 	.word	0x3fd20000
 8013d5c:	00000000 	.word	0x00000000

08013d60 <__kernel_rem_pio2>:
 8013d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d64:	ed2d 8b02 	vpush	{d8}
 8013d68:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8013d6c:	1ed4      	subs	r4, r2, #3
 8013d6e:	9308      	str	r3, [sp, #32]
 8013d70:	9101      	str	r1, [sp, #4]
 8013d72:	4bc5      	ldr	r3, [pc, #788]	; (8014088 <__kernel_rem_pio2+0x328>)
 8013d74:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8013d76:	9009      	str	r0, [sp, #36]	; 0x24
 8013d78:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013d7c:	9304      	str	r3, [sp, #16]
 8013d7e:	9b08      	ldr	r3, [sp, #32]
 8013d80:	3b01      	subs	r3, #1
 8013d82:	9307      	str	r3, [sp, #28]
 8013d84:	2318      	movs	r3, #24
 8013d86:	fb94 f4f3 	sdiv	r4, r4, r3
 8013d8a:	f06f 0317 	mvn.w	r3, #23
 8013d8e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8013d92:	fb04 3303 	mla	r3, r4, r3, r3
 8013d96:	eb03 0a02 	add.w	sl, r3, r2
 8013d9a:	9b04      	ldr	r3, [sp, #16]
 8013d9c:	9a07      	ldr	r2, [sp, #28]
 8013d9e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8014078 <__kernel_rem_pio2+0x318>
 8013da2:	eb03 0802 	add.w	r8, r3, r2
 8013da6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8013da8:	1aa7      	subs	r7, r4, r2
 8013daa:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8013dae:	ae22      	add	r6, sp, #136	; 0x88
 8013db0:	2500      	movs	r5, #0
 8013db2:	4545      	cmp	r5, r8
 8013db4:	dd13      	ble.n	8013dde <__kernel_rem_pio2+0x7e>
 8013db6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8014078 <__kernel_rem_pio2+0x318>
 8013dba:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8013dbe:	2600      	movs	r6, #0
 8013dc0:	9b04      	ldr	r3, [sp, #16]
 8013dc2:	429e      	cmp	r6, r3
 8013dc4:	dc32      	bgt.n	8013e2c <__kernel_rem_pio2+0xcc>
 8013dc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013dc8:	9302      	str	r3, [sp, #8]
 8013dca:	9b08      	ldr	r3, [sp, #32]
 8013dcc:	199d      	adds	r5, r3, r6
 8013dce:	ab22      	add	r3, sp, #136	; 0x88
 8013dd0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8013dd4:	9306      	str	r3, [sp, #24]
 8013dd6:	ec59 8b18 	vmov	r8, r9, d8
 8013dda:	2700      	movs	r7, #0
 8013ddc:	e01f      	b.n	8013e1e <__kernel_rem_pio2+0xbe>
 8013dde:	42ef      	cmn	r7, r5
 8013de0:	d407      	bmi.n	8013df2 <__kernel_rem_pio2+0x92>
 8013de2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8013de6:	f7ec fbb5 	bl	8000554 <__aeabi_i2d>
 8013dea:	e8e6 0102 	strd	r0, r1, [r6], #8
 8013dee:	3501      	adds	r5, #1
 8013df0:	e7df      	b.n	8013db2 <__kernel_rem_pio2+0x52>
 8013df2:	ec51 0b18 	vmov	r0, r1, d8
 8013df6:	e7f8      	b.n	8013dea <__kernel_rem_pio2+0x8a>
 8013df8:	9906      	ldr	r1, [sp, #24]
 8013dfa:	9d02      	ldr	r5, [sp, #8]
 8013dfc:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8013e00:	9106      	str	r1, [sp, #24]
 8013e02:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8013e06:	9502      	str	r5, [sp, #8]
 8013e08:	f7ec fc0e 	bl	8000628 <__aeabi_dmul>
 8013e0c:	4602      	mov	r2, r0
 8013e0e:	460b      	mov	r3, r1
 8013e10:	4640      	mov	r0, r8
 8013e12:	4649      	mov	r1, r9
 8013e14:	f7ec fa52 	bl	80002bc <__adddf3>
 8013e18:	3701      	adds	r7, #1
 8013e1a:	4680      	mov	r8, r0
 8013e1c:	4689      	mov	r9, r1
 8013e1e:	9b07      	ldr	r3, [sp, #28]
 8013e20:	429f      	cmp	r7, r3
 8013e22:	dde9      	ble.n	8013df8 <__kernel_rem_pio2+0x98>
 8013e24:	e8eb 8902 	strd	r8, r9, [fp], #8
 8013e28:	3601      	adds	r6, #1
 8013e2a:	e7c9      	b.n	8013dc0 <__kernel_rem_pio2+0x60>
 8013e2c:	9b04      	ldr	r3, [sp, #16]
 8013e2e:	aa0e      	add	r2, sp, #56	; 0x38
 8013e30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013e34:	930c      	str	r3, [sp, #48]	; 0x30
 8013e36:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8013e38:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8013e3c:	9c04      	ldr	r4, [sp, #16]
 8013e3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8013e40:	ab9a      	add	r3, sp, #616	; 0x268
 8013e42:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8013e46:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013e4a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013e4e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8013e52:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8013e56:	ab9a      	add	r3, sp, #616	; 0x268
 8013e58:	445b      	add	r3, fp
 8013e5a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8013e5e:	2500      	movs	r5, #0
 8013e60:	1b63      	subs	r3, r4, r5
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	dc78      	bgt.n	8013f58 <__kernel_rem_pio2+0x1f8>
 8013e66:	4650      	mov	r0, sl
 8013e68:	ec49 8b10 	vmov	d0, r8, r9
 8013e6c:	f000 fc00 	bl	8014670 <scalbn>
 8013e70:	ec57 6b10 	vmov	r6, r7, d0
 8013e74:	2200      	movs	r2, #0
 8013e76:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8013e7a:	ee10 0a10 	vmov	r0, s0
 8013e7e:	4639      	mov	r1, r7
 8013e80:	f7ec fbd2 	bl	8000628 <__aeabi_dmul>
 8013e84:	ec41 0b10 	vmov	d0, r0, r1
 8013e88:	f000 fb6e 	bl	8014568 <floor>
 8013e8c:	2200      	movs	r2, #0
 8013e8e:	ec51 0b10 	vmov	r0, r1, d0
 8013e92:	4b7e      	ldr	r3, [pc, #504]	; (801408c <__kernel_rem_pio2+0x32c>)
 8013e94:	f7ec fbc8 	bl	8000628 <__aeabi_dmul>
 8013e98:	4602      	mov	r2, r0
 8013e9a:	460b      	mov	r3, r1
 8013e9c:	4630      	mov	r0, r6
 8013e9e:	4639      	mov	r1, r7
 8013ea0:	f7ec fa0a 	bl	80002b8 <__aeabi_dsub>
 8013ea4:	460f      	mov	r7, r1
 8013ea6:	4606      	mov	r6, r0
 8013ea8:	f7ec fe6e 	bl	8000b88 <__aeabi_d2iz>
 8013eac:	9006      	str	r0, [sp, #24]
 8013eae:	f7ec fb51 	bl	8000554 <__aeabi_i2d>
 8013eb2:	4602      	mov	r2, r0
 8013eb4:	460b      	mov	r3, r1
 8013eb6:	4630      	mov	r0, r6
 8013eb8:	4639      	mov	r1, r7
 8013eba:	f7ec f9fd 	bl	80002b8 <__aeabi_dsub>
 8013ebe:	f1ba 0f00 	cmp.w	sl, #0
 8013ec2:	4606      	mov	r6, r0
 8013ec4:	460f      	mov	r7, r1
 8013ec6:	dd6c      	ble.n	8013fa2 <__kernel_rem_pio2+0x242>
 8013ec8:	1e62      	subs	r2, r4, #1
 8013eca:	ab0e      	add	r3, sp, #56	; 0x38
 8013ecc:	f1ca 0118 	rsb	r1, sl, #24
 8013ed0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8013ed4:	9d06      	ldr	r5, [sp, #24]
 8013ed6:	fa40 f301 	asr.w	r3, r0, r1
 8013eda:	441d      	add	r5, r3
 8013edc:	408b      	lsls	r3, r1
 8013ede:	1ac0      	subs	r0, r0, r3
 8013ee0:	ab0e      	add	r3, sp, #56	; 0x38
 8013ee2:	9506      	str	r5, [sp, #24]
 8013ee4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8013ee8:	f1ca 0317 	rsb	r3, sl, #23
 8013eec:	fa40 f303 	asr.w	r3, r0, r3
 8013ef0:	9302      	str	r3, [sp, #8]
 8013ef2:	9b02      	ldr	r3, [sp, #8]
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	dd62      	ble.n	8013fbe <__kernel_rem_pio2+0x25e>
 8013ef8:	9b06      	ldr	r3, [sp, #24]
 8013efa:	2200      	movs	r2, #0
 8013efc:	3301      	adds	r3, #1
 8013efe:	9306      	str	r3, [sp, #24]
 8013f00:	4615      	mov	r5, r2
 8013f02:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8013f06:	4294      	cmp	r4, r2
 8013f08:	f300 8095 	bgt.w	8014036 <__kernel_rem_pio2+0x2d6>
 8013f0c:	f1ba 0f00 	cmp.w	sl, #0
 8013f10:	dd07      	ble.n	8013f22 <__kernel_rem_pio2+0x1c2>
 8013f12:	f1ba 0f01 	cmp.w	sl, #1
 8013f16:	f000 80a2 	beq.w	801405e <__kernel_rem_pio2+0x2fe>
 8013f1a:	f1ba 0f02 	cmp.w	sl, #2
 8013f1e:	f000 80c1 	beq.w	80140a4 <__kernel_rem_pio2+0x344>
 8013f22:	9b02      	ldr	r3, [sp, #8]
 8013f24:	2b02      	cmp	r3, #2
 8013f26:	d14a      	bne.n	8013fbe <__kernel_rem_pio2+0x25e>
 8013f28:	4632      	mov	r2, r6
 8013f2a:	463b      	mov	r3, r7
 8013f2c:	2000      	movs	r0, #0
 8013f2e:	4958      	ldr	r1, [pc, #352]	; (8014090 <__kernel_rem_pio2+0x330>)
 8013f30:	f7ec f9c2 	bl	80002b8 <__aeabi_dsub>
 8013f34:	4606      	mov	r6, r0
 8013f36:	460f      	mov	r7, r1
 8013f38:	2d00      	cmp	r5, #0
 8013f3a:	d040      	beq.n	8013fbe <__kernel_rem_pio2+0x25e>
 8013f3c:	4650      	mov	r0, sl
 8013f3e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8014080 <__kernel_rem_pio2+0x320>
 8013f42:	f000 fb95 	bl	8014670 <scalbn>
 8013f46:	4630      	mov	r0, r6
 8013f48:	4639      	mov	r1, r7
 8013f4a:	ec53 2b10 	vmov	r2, r3, d0
 8013f4e:	f7ec f9b3 	bl	80002b8 <__aeabi_dsub>
 8013f52:	4606      	mov	r6, r0
 8013f54:	460f      	mov	r7, r1
 8013f56:	e032      	b.n	8013fbe <__kernel_rem_pio2+0x25e>
 8013f58:	2200      	movs	r2, #0
 8013f5a:	4b4e      	ldr	r3, [pc, #312]	; (8014094 <__kernel_rem_pio2+0x334>)
 8013f5c:	4640      	mov	r0, r8
 8013f5e:	4649      	mov	r1, r9
 8013f60:	f7ec fb62 	bl	8000628 <__aeabi_dmul>
 8013f64:	f7ec fe10 	bl	8000b88 <__aeabi_d2iz>
 8013f68:	f7ec faf4 	bl	8000554 <__aeabi_i2d>
 8013f6c:	2200      	movs	r2, #0
 8013f6e:	4b4a      	ldr	r3, [pc, #296]	; (8014098 <__kernel_rem_pio2+0x338>)
 8013f70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013f74:	f7ec fb58 	bl	8000628 <__aeabi_dmul>
 8013f78:	4602      	mov	r2, r0
 8013f7a:	460b      	mov	r3, r1
 8013f7c:	4640      	mov	r0, r8
 8013f7e:	4649      	mov	r1, r9
 8013f80:	f7ec f99a 	bl	80002b8 <__aeabi_dsub>
 8013f84:	f7ec fe00 	bl	8000b88 <__aeabi_d2iz>
 8013f88:	ab0e      	add	r3, sp, #56	; 0x38
 8013f8a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8013f8e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8013f92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013f96:	f7ec f991 	bl	80002bc <__adddf3>
 8013f9a:	3501      	adds	r5, #1
 8013f9c:	4680      	mov	r8, r0
 8013f9e:	4689      	mov	r9, r1
 8013fa0:	e75e      	b.n	8013e60 <__kernel_rem_pio2+0x100>
 8013fa2:	d105      	bne.n	8013fb0 <__kernel_rem_pio2+0x250>
 8013fa4:	1e63      	subs	r3, r4, #1
 8013fa6:	aa0e      	add	r2, sp, #56	; 0x38
 8013fa8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8013fac:	15c3      	asrs	r3, r0, #23
 8013fae:	e79f      	b.n	8013ef0 <__kernel_rem_pio2+0x190>
 8013fb0:	2200      	movs	r2, #0
 8013fb2:	4b3a      	ldr	r3, [pc, #232]	; (801409c <__kernel_rem_pio2+0x33c>)
 8013fb4:	f7ec fdbe 	bl	8000b34 <__aeabi_dcmpge>
 8013fb8:	2800      	cmp	r0, #0
 8013fba:	d139      	bne.n	8014030 <__kernel_rem_pio2+0x2d0>
 8013fbc:	9002      	str	r0, [sp, #8]
 8013fbe:	2200      	movs	r2, #0
 8013fc0:	2300      	movs	r3, #0
 8013fc2:	4630      	mov	r0, r6
 8013fc4:	4639      	mov	r1, r7
 8013fc6:	f7ec fd97 	bl	8000af8 <__aeabi_dcmpeq>
 8013fca:	2800      	cmp	r0, #0
 8013fcc:	f000 80c7 	beq.w	801415e <__kernel_rem_pio2+0x3fe>
 8013fd0:	1e65      	subs	r5, r4, #1
 8013fd2:	462b      	mov	r3, r5
 8013fd4:	2200      	movs	r2, #0
 8013fd6:	9904      	ldr	r1, [sp, #16]
 8013fd8:	428b      	cmp	r3, r1
 8013fda:	da6a      	bge.n	80140b2 <__kernel_rem_pio2+0x352>
 8013fdc:	2a00      	cmp	r2, #0
 8013fde:	f000 8088 	beq.w	80140f2 <__kernel_rem_pio2+0x392>
 8013fe2:	ab0e      	add	r3, sp, #56	; 0x38
 8013fe4:	f1aa 0a18 	sub.w	sl, sl, #24
 8013fe8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	f000 80b4 	beq.w	801415a <__kernel_rem_pio2+0x3fa>
 8013ff2:	4650      	mov	r0, sl
 8013ff4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8014080 <__kernel_rem_pio2+0x320>
 8013ff8:	f000 fb3a 	bl	8014670 <scalbn>
 8013ffc:	00ec      	lsls	r4, r5, #3
 8013ffe:	ab72      	add	r3, sp, #456	; 0x1c8
 8014000:	191e      	adds	r6, r3, r4
 8014002:	ec59 8b10 	vmov	r8, r9, d0
 8014006:	f106 0a08 	add.w	sl, r6, #8
 801400a:	462f      	mov	r7, r5
 801400c:	2f00      	cmp	r7, #0
 801400e:	f280 80df 	bge.w	80141d0 <__kernel_rem_pio2+0x470>
 8014012:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8014078 <__kernel_rem_pio2+0x318>
 8014016:	f04f 0a00 	mov.w	sl, #0
 801401a:	eba5 030a 	sub.w	r3, r5, sl
 801401e:	2b00      	cmp	r3, #0
 8014020:	f2c0 810a 	blt.w	8014238 <__kernel_rem_pio2+0x4d8>
 8014024:	f8df b078 	ldr.w	fp, [pc, #120]	; 80140a0 <__kernel_rem_pio2+0x340>
 8014028:	ec59 8b18 	vmov	r8, r9, d8
 801402c:	2700      	movs	r7, #0
 801402e:	e0f5      	b.n	801421c <__kernel_rem_pio2+0x4bc>
 8014030:	2302      	movs	r3, #2
 8014032:	9302      	str	r3, [sp, #8]
 8014034:	e760      	b.n	8013ef8 <__kernel_rem_pio2+0x198>
 8014036:	ab0e      	add	r3, sp, #56	; 0x38
 8014038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801403c:	b94d      	cbnz	r5, 8014052 <__kernel_rem_pio2+0x2f2>
 801403e:	b12b      	cbz	r3, 801404c <__kernel_rem_pio2+0x2ec>
 8014040:	a80e      	add	r0, sp, #56	; 0x38
 8014042:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8014046:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801404a:	2301      	movs	r3, #1
 801404c:	3201      	adds	r2, #1
 801404e:	461d      	mov	r5, r3
 8014050:	e759      	b.n	8013f06 <__kernel_rem_pio2+0x1a6>
 8014052:	a80e      	add	r0, sp, #56	; 0x38
 8014054:	1acb      	subs	r3, r1, r3
 8014056:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801405a:	462b      	mov	r3, r5
 801405c:	e7f6      	b.n	801404c <__kernel_rem_pio2+0x2ec>
 801405e:	1e62      	subs	r2, r4, #1
 8014060:	ab0e      	add	r3, sp, #56	; 0x38
 8014062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014066:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801406a:	a90e      	add	r1, sp, #56	; 0x38
 801406c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8014070:	e757      	b.n	8013f22 <__kernel_rem_pio2+0x1c2>
 8014072:	bf00      	nop
 8014074:	f3af 8000 	nop.w
	...
 8014084:	3ff00000 	.word	0x3ff00000
 8014088:	080193c0 	.word	0x080193c0
 801408c:	40200000 	.word	0x40200000
 8014090:	3ff00000 	.word	0x3ff00000
 8014094:	3e700000 	.word	0x3e700000
 8014098:	41700000 	.word	0x41700000
 801409c:	3fe00000 	.word	0x3fe00000
 80140a0:	08019380 	.word	0x08019380
 80140a4:	1e62      	subs	r2, r4, #1
 80140a6:	ab0e      	add	r3, sp, #56	; 0x38
 80140a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80140ac:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80140b0:	e7db      	b.n	801406a <__kernel_rem_pio2+0x30a>
 80140b2:	a90e      	add	r1, sp, #56	; 0x38
 80140b4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80140b8:	3b01      	subs	r3, #1
 80140ba:	430a      	orrs	r2, r1
 80140bc:	e78b      	b.n	8013fd6 <__kernel_rem_pio2+0x276>
 80140be:	3301      	adds	r3, #1
 80140c0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80140c4:	2900      	cmp	r1, #0
 80140c6:	d0fa      	beq.n	80140be <__kernel_rem_pio2+0x35e>
 80140c8:	9a08      	ldr	r2, [sp, #32]
 80140ca:	4422      	add	r2, r4
 80140cc:	00d2      	lsls	r2, r2, #3
 80140ce:	a922      	add	r1, sp, #136	; 0x88
 80140d0:	18e3      	adds	r3, r4, r3
 80140d2:	9206      	str	r2, [sp, #24]
 80140d4:	440a      	add	r2, r1
 80140d6:	9302      	str	r3, [sp, #8]
 80140d8:	f10b 0108 	add.w	r1, fp, #8
 80140dc:	f102 0308 	add.w	r3, r2, #8
 80140e0:	1c66      	adds	r6, r4, #1
 80140e2:	910a      	str	r1, [sp, #40]	; 0x28
 80140e4:	2500      	movs	r5, #0
 80140e6:	930d      	str	r3, [sp, #52]	; 0x34
 80140e8:	9b02      	ldr	r3, [sp, #8]
 80140ea:	42b3      	cmp	r3, r6
 80140ec:	da04      	bge.n	80140f8 <__kernel_rem_pio2+0x398>
 80140ee:	461c      	mov	r4, r3
 80140f0:	e6a6      	b.n	8013e40 <__kernel_rem_pio2+0xe0>
 80140f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80140f4:	2301      	movs	r3, #1
 80140f6:	e7e3      	b.n	80140c0 <__kernel_rem_pio2+0x360>
 80140f8:	9b06      	ldr	r3, [sp, #24]
 80140fa:	18ef      	adds	r7, r5, r3
 80140fc:	ab22      	add	r3, sp, #136	; 0x88
 80140fe:	441f      	add	r7, r3
 8014100:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014102:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8014106:	f7ec fa25 	bl	8000554 <__aeabi_i2d>
 801410a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801410c:	461c      	mov	r4, r3
 801410e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014110:	e9c7 0100 	strd	r0, r1, [r7]
 8014114:	eb03 0b05 	add.w	fp, r3, r5
 8014118:	2700      	movs	r7, #0
 801411a:	f04f 0800 	mov.w	r8, #0
 801411e:	f04f 0900 	mov.w	r9, #0
 8014122:	9b07      	ldr	r3, [sp, #28]
 8014124:	429f      	cmp	r7, r3
 8014126:	dd08      	ble.n	801413a <__kernel_rem_pio2+0x3da>
 8014128:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801412a:	aa72      	add	r2, sp, #456	; 0x1c8
 801412c:	18eb      	adds	r3, r5, r3
 801412e:	4413      	add	r3, r2
 8014130:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8014134:	3601      	adds	r6, #1
 8014136:	3508      	adds	r5, #8
 8014138:	e7d6      	b.n	80140e8 <__kernel_rem_pio2+0x388>
 801413a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801413e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8014142:	f7ec fa71 	bl	8000628 <__aeabi_dmul>
 8014146:	4602      	mov	r2, r0
 8014148:	460b      	mov	r3, r1
 801414a:	4640      	mov	r0, r8
 801414c:	4649      	mov	r1, r9
 801414e:	f7ec f8b5 	bl	80002bc <__adddf3>
 8014152:	3701      	adds	r7, #1
 8014154:	4680      	mov	r8, r0
 8014156:	4689      	mov	r9, r1
 8014158:	e7e3      	b.n	8014122 <__kernel_rem_pio2+0x3c2>
 801415a:	3d01      	subs	r5, #1
 801415c:	e741      	b.n	8013fe2 <__kernel_rem_pio2+0x282>
 801415e:	f1ca 0000 	rsb	r0, sl, #0
 8014162:	ec47 6b10 	vmov	d0, r6, r7
 8014166:	f000 fa83 	bl	8014670 <scalbn>
 801416a:	ec57 6b10 	vmov	r6, r7, d0
 801416e:	2200      	movs	r2, #0
 8014170:	4b99      	ldr	r3, [pc, #612]	; (80143d8 <__kernel_rem_pio2+0x678>)
 8014172:	ee10 0a10 	vmov	r0, s0
 8014176:	4639      	mov	r1, r7
 8014178:	f7ec fcdc 	bl	8000b34 <__aeabi_dcmpge>
 801417c:	b1f8      	cbz	r0, 80141be <__kernel_rem_pio2+0x45e>
 801417e:	2200      	movs	r2, #0
 8014180:	4b96      	ldr	r3, [pc, #600]	; (80143dc <__kernel_rem_pio2+0x67c>)
 8014182:	4630      	mov	r0, r6
 8014184:	4639      	mov	r1, r7
 8014186:	f7ec fa4f 	bl	8000628 <__aeabi_dmul>
 801418a:	f7ec fcfd 	bl	8000b88 <__aeabi_d2iz>
 801418e:	4680      	mov	r8, r0
 8014190:	f7ec f9e0 	bl	8000554 <__aeabi_i2d>
 8014194:	2200      	movs	r2, #0
 8014196:	4b90      	ldr	r3, [pc, #576]	; (80143d8 <__kernel_rem_pio2+0x678>)
 8014198:	f7ec fa46 	bl	8000628 <__aeabi_dmul>
 801419c:	460b      	mov	r3, r1
 801419e:	4602      	mov	r2, r0
 80141a0:	4639      	mov	r1, r7
 80141a2:	4630      	mov	r0, r6
 80141a4:	f7ec f888 	bl	80002b8 <__aeabi_dsub>
 80141a8:	f7ec fcee 	bl	8000b88 <__aeabi_d2iz>
 80141ac:	1c65      	adds	r5, r4, #1
 80141ae:	ab0e      	add	r3, sp, #56	; 0x38
 80141b0:	f10a 0a18 	add.w	sl, sl, #24
 80141b4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80141b8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80141bc:	e719      	b.n	8013ff2 <__kernel_rem_pio2+0x292>
 80141be:	4630      	mov	r0, r6
 80141c0:	4639      	mov	r1, r7
 80141c2:	f7ec fce1 	bl	8000b88 <__aeabi_d2iz>
 80141c6:	ab0e      	add	r3, sp, #56	; 0x38
 80141c8:	4625      	mov	r5, r4
 80141ca:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80141ce:	e710      	b.n	8013ff2 <__kernel_rem_pio2+0x292>
 80141d0:	ab0e      	add	r3, sp, #56	; 0x38
 80141d2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80141d6:	f7ec f9bd 	bl	8000554 <__aeabi_i2d>
 80141da:	4642      	mov	r2, r8
 80141dc:	464b      	mov	r3, r9
 80141de:	f7ec fa23 	bl	8000628 <__aeabi_dmul>
 80141e2:	2200      	movs	r2, #0
 80141e4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80141e8:	4b7c      	ldr	r3, [pc, #496]	; (80143dc <__kernel_rem_pio2+0x67c>)
 80141ea:	4640      	mov	r0, r8
 80141ec:	4649      	mov	r1, r9
 80141ee:	f7ec fa1b 	bl	8000628 <__aeabi_dmul>
 80141f2:	3f01      	subs	r7, #1
 80141f4:	4680      	mov	r8, r0
 80141f6:	4689      	mov	r9, r1
 80141f8:	e708      	b.n	801400c <__kernel_rem_pio2+0x2ac>
 80141fa:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80141fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014202:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8014206:	f7ec fa0f 	bl	8000628 <__aeabi_dmul>
 801420a:	4602      	mov	r2, r0
 801420c:	460b      	mov	r3, r1
 801420e:	4640      	mov	r0, r8
 8014210:	4649      	mov	r1, r9
 8014212:	f7ec f853 	bl	80002bc <__adddf3>
 8014216:	3701      	adds	r7, #1
 8014218:	4680      	mov	r8, r0
 801421a:	4689      	mov	r9, r1
 801421c:	9b04      	ldr	r3, [sp, #16]
 801421e:	429f      	cmp	r7, r3
 8014220:	dc01      	bgt.n	8014226 <__kernel_rem_pio2+0x4c6>
 8014222:	45ba      	cmp	sl, r7
 8014224:	dae9      	bge.n	80141fa <__kernel_rem_pio2+0x49a>
 8014226:	ab4a      	add	r3, sp, #296	; 0x128
 8014228:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801422c:	e9c3 8900 	strd	r8, r9, [r3]
 8014230:	f10a 0a01 	add.w	sl, sl, #1
 8014234:	3e08      	subs	r6, #8
 8014236:	e6f0      	b.n	801401a <__kernel_rem_pio2+0x2ba>
 8014238:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801423a:	2b03      	cmp	r3, #3
 801423c:	d85b      	bhi.n	80142f6 <__kernel_rem_pio2+0x596>
 801423e:	e8df f003 	tbb	[pc, r3]
 8014242:	264a      	.short	0x264a
 8014244:	0226      	.short	0x0226
 8014246:	ab9a      	add	r3, sp, #616	; 0x268
 8014248:	441c      	add	r4, r3
 801424a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801424e:	46a2      	mov	sl, r4
 8014250:	46ab      	mov	fp, r5
 8014252:	f1bb 0f00 	cmp.w	fp, #0
 8014256:	dc6c      	bgt.n	8014332 <__kernel_rem_pio2+0x5d2>
 8014258:	46a2      	mov	sl, r4
 801425a:	46ab      	mov	fp, r5
 801425c:	f1bb 0f01 	cmp.w	fp, #1
 8014260:	f300 8086 	bgt.w	8014370 <__kernel_rem_pio2+0x610>
 8014264:	2000      	movs	r0, #0
 8014266:	2100      	movs	r1, #0
 8014268:	2d01      	cmp	r5, #1
 801426a:	f300 80a0 	bgt.w	80143ae <__kernel_rem_pio2+0x64e>
 801426e:	9b02      	ldr	r3, [sp, #8]
 8014270:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8014274:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8014278:	2b00      	cmp	r3, #0
 801427a:	f040 809e 	bne.w	80143ba <__kernel_rem_pio2+0x65a>
 801427e:	9b01      	ldr	r3, [sp, #4]
 8014280:	e9c3 7800 	strd	r7, r8, [r3]
 8014284:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8014288:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801428c:	e033      	b.n	80142f6 <__kernel_rem_pio2+0x596>
 801428e:	3408      	adds	r4, #8
 8014290:	ab4a      	add	r3, sp, #296	; 0x128
 8014292:	441c      	add	r4, r3
 8014294:	462e      	mov	r6, r5
 8014296:	2000      	movs	r0, #0
 8014298:	2100      	movs	r1, #0
 801429a:	2e00      	cmp	r6, #0
 801429c:	da3a      	bge.n	8014314 <__kernel_rem_pio2+0x5b4>
 801429e:	9b02      	ldr	r3, [sp, #8]
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d03d      	beq.n	8014320 <__kernel_rem_pio2+0x5c0>
 80142a4:	4602      	mov	r2, r0
 80142a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80142aa:	9c01      	ldr	r4, [sp, #4]
 80142ac:	e9c4 2300 	strd	r2, r3, [r4]
 80142b0:	4602      	mov	r2, r0
 80142b2:	460b      	mov	r3, r1
 80142b4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80142b8:	f7eb fffe 	bl	80002b8 <__aeabi_dsub>
 80142bc:	ae4c      	add	r6, sp, #304	; 0x130
 80142be:	2401      	movs	r4, #1
 80142c0:	42a5      	cmp	r5, r4
 80142c2:	da30      	bge.n	8014326 <__kernel_rem_pio2+0x5c6>
 80142c4:	9b02      	ldr	r3, [sp, #8]
 80142c6:	b113      	cbz	r3, 80142ce <__kernel_rem_pio2+0x56e>
 80142c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80142cc:	4619      	mov	r1, r3
 80142ce:	9b01      	ldr	r3, [sp, #4]
 80142d0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80142d4:	e00f      	b.n	80142f6 <__kernel_rem_pio2+0x596>
 80142d6:	ab9a      	add	r3, sp, #616	; 0x268
 80142d8:	441c      	add	r4, r3
 80142da:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80142de:	2000      	movs	r0, #0
 80142e0:	2100      	movs	r1, #0
 80142e2:	2d00      	cmp	r5, #0
 80142e4:	da10      	bge.n	8014308 <__kernel_rem_pio2+0x5a8>
 80142e6:	9b02      	ldr	r3, [sp, #8]
 80142e8:	b113      	cbz	r3, 80142f0 <__kernel_rem_pio2+0x590>
 80142ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80142ee:	4619      	mov	r1, r3
 80142f0:	9b01      	ldr	r3, [sp, #4]
 80142f2:	e9c3 0100 	strd	r0, r1, [r3]
 80142f6:	9b06      	ldr	r3, [sp, #24]
 80142f8:	f003 0007 	and.w	r0, r3, #7
 80142fc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8014300:	ecbd 8b02 	vpop	{d8}
 8014304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014308:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801430c:	f7eb ffd6 	bl	80002bc <__adddf3>
 8014310:	3d01      	subs	r5, #1
 8014312:	e7e6      	b.n	80142e2 <__kernel_rem_pio2+0x582>
 8014314:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014318:	f7eb ffd0 	bl	80002bc <__adddf3>
 801431c:	3e01      	subs	r6, #1
 801431e:	e7bc      	b.n	801429a <__kernel_rem_pio2+0x53a>
 8014320:	4602      	mov	r2, r0
 8014322:	460b      	mov	r3, r1
 8014324:	e7c1      	b.n	80142aa <__kernel_rem_pio2+0x54a>
 8014326:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801432a:	f7eb ffc7 	bl	80002bc <__adddf3>
 801432e:	3401      	adds	r4, #1
 8014330:	e7c6      	b.n	80142c0 <__kernel_rem_pio2+0x560>
 8014332:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8014336:	ed3a 7b02 	vldmdb	sl!, {d7}
 801433a:	4640      	mov	r0, r8
 801433c:	ec53 2b17 	vmov	r2, r3, d7
 8014340:	4649      	mov	r1, r9
 8014342:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014346:	f7eb ffb9 	bl	80002bc <__adddf3>
 801434a:	4602      	mov	r2, r0
 801434c:	460b      	mov	r3, r1
 801434e:	4606      	mov	r6, r0
 8014350:	460f      	mov	r7, r1
 8014352:	4640      	mov	r0, r8
 8014354:	4649      	mov	r1, r9
 8014356:	f7eb ffaf 	bl	80002b8 <__aeabi_dsub>
 801435a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801435e:	f7eb ffad 	bl	80002bc <__adddf3>
 8014362:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014366:	e9ca 0100 	strd	r0, r1, [sl]
 801436a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801436e:	e770      	b.n	8014252 <__kernel_rem_pio2+0x4f2>
 8014370:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8014374:	ed3a 7b02 	vldmdb	sl!, {d7}
 8014378:	4630      	mov	r0, r6
 801437a:	ec53 2b17 	vmov	r2, r3, d7
 801437e:	4639      	mov	r1, r7
 8014380:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014384:	f7eb ff9a 	bl	80002bc <__adddf3>
 8014388:	4602      	mov	r2, r0
 801438a:	460b      	mov	r3, r1
 801438c:	4680      	mov	r8, r0
 801438e:	4689      	mov	r9, r1
 8014390:	4630      	mov	r0, r6
 8014392:	4639      	mov	r1, r7
 8014394:	f7eb ff90 	bl	80002b8 <__aeabi_dsub>
 8014398:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801439c:	f7eb ff8e 	bl	80002bc <__adddf3>
 80143a0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80143a4:	e9ca 0100 	strd	r0, r1, [sl]
 80143a8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80143ac:	e756      	b.n	801425c <__kernel_rem_pio2+0x4fc>
 80143ae:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80143b2:	f7eb ff83 	bl	80002bc <__adddf3>
 80143b6:	3d01      	subs	r5, #1
 80143b8:	e756      	b.n	8014268 <__kernel_rem_pio2+0x508>
 80143ba:	9b01      	ldr	r3, [sp, #4]
 80143bc:	9a01      	ldr	r2, [sp, #4]
 80143be:	601f      	str	r7, [r3, #0]
 80143c0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80143c4:	605c      	str	r4, [r3, #4]
 80143c6:	609d      	str	r5, [r3, #8]
 80143c8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80143cc:	60d3      	str	r3, [r2, #12]
 80143ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80143d2:	6110      	str	r0, [r2, #16]
 80143d4:	6153      	str	r3, [r2, #20]
 80143d6:	e78e      	b.n	80142f6 <__kernel_rem_pio2+0x596>
 80143d8:	41700000 	.word	0x41700000
 80143dc:	3e700000 	.word	0x3e700000

080143e0 <__kernel_sin>:
 80143e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143e4:	ec55 4b10 	vmov	r4, r5, d0
 80143e8:	b085      	sub	sp, #20
 80143ea:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80143ee:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80143f2:	ed8d 1b00 	vstr	d1, [sp]
 80143f6:	9002      	str	r0, [sp, #8]
 80143f8:	da06      	bge.n	8014408 <__kernel_sin+0x28>
 80143fa:	ee10 0a10 	vmov	r0, s0
 80143fe:	4629      	mov	r1, r5
 8014400:	f7ec fbc2 	bl	8000b88 <__aeabi_d2iz>
 8014404:	2800      	cmp	r0, #0
 8014406:	d051      	beq.n	80144ac <__kernel_sin+0xcc>
 8014408:	4622      	mov	r2, r4
 801440a:	462b      	mov	r3, r5
 801440c:	4620      	mov	r0, r4
 801440e:	4629      	mov	r1, r5
 8014410:	f7ec f90a 	bl	8000628 <__aeabi_dmul>
 8014414:	4682      	mov	sl, r0
 8014416:	468b      	mov	fp, r1
 8014418:	4602      	mov	r2, r0
 801441a:	460b      	mov	r3, r1
 801441c:	4620      	mov	r0, r4
 801441e:	4629      	mov	r1, r5
 8014420:	f7ec f902 	bl	8000628 <__aeabi_dmul>
 8014424:	a341      	add	r3, pc, #260	; (adr r3, 801452c <__kernel_sin+0x14c>)
 8014426:	e9d3 2300 	ldrd	r2, r3, [r3]
 801442a:	4680      	mov	r8, r0
 801442c:	4689      	mov	r9, r1
 801442e:	4650      	mov	r0, sl
 8014430:	4659      	mov	r1, fp
 8014432:	f7ec f8f9 	bl	8000628 <__aeabi_dmul>
 8014436:	a33f      	add	r3, pc, #252	; (adr r3, 8014534 <__kernel_sin+0x154>)
 8014438:	e9d3 2300 	ldrd	r2, r3, [r3]
 801443c:	f7eb ff3c 	bl	80002b8 <__aeabi_dsub>
 8014440:	4652      	mov	r2, sl
 8014442:	465b      	mov	r3, fp
 8014444:	f7ec f8f0 	bl	8000628 <__aeabi_dmul>
 8014448:	a33c      	add	r3, pc, #240	; (adr r3, 801453c <__kernel_sin+0x15c>)
 801444a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801444e:	f7eb ff35 	bl	80002bc <__adddf3>
 8014452:	4652      	mov	r2, sl
 8014454:	465b      	mov	r3, fp
 8014456:	f7ec f8e7 	bl	8000628 <__aeabi_dmul>
 801445a:	a33a      	add	r3, pc, #232	; (adr r3, 8014544 <__kernel_sin+0x164>)
 801445c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014460:	f7eb ff2a 	bl	80002b8 <__aeabi_dsub>
 8014464:	4652      	mov	r2, sl
 8014466:	465b      	mov	r3, fp
 8014468:	f7ec f8de 	bl	8000628 <__aeabi_dmul>
 801446c:	a337      	add	r3, pc, #220	; (adr r3, 801454c <__kernel_sin+0x16c>)
 801446e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014472:	f7eb ff23 	bl	80002bc <__adddf3>
 8014476:	9b02      	ldr	r3, [sp, #8]
 8014478:	4606      	mov	r6, r0
 801447a:	460f      	mov	r7, r1
 801447c:	b9db      	cbnz	r3, 80144b6 <__kernel_sin+0xd6>
 801447e:	4602      	mov	r2, r0
 8014480:	460b      	mov	r3, r1
 8014482:	4650      	mov	r0, sl
 8014484:	4659      	mov	r1, fp
 8014486:	f7ec f8cf 	bl	8000628 <__aeabi_dmul>
 801448a:	a325      	add	r3, pc, #148	; (adr r3, 8014520 <__kernel_sin+0x140>)
 801448c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014490:	f7eb ff12 	bl	80002b8 <__aeabi_dsub>
 8014494:	4642      	mov	r2, r8
 8014496:	464b      	mov	r3, r9
 8014498:	f7ec f8c6 	bl	8000628 <__aeabi_dmul>
 801449c:	4602      	mov	r2, r0
 801449e:	460b      	mov	r3, r1
 80144a0:	4620      	mov	r0, r4
 80144a2:	4629      	mov	r1, r5
 80144a4:	f7eb ff0a 	bl	80002bc <__adddf3>
 80144a8:	4604      	mov	r4, r0
 80144aa:	460d      	mov	r5, r1
 80144ac:	ec45 4b10 	vmov	d0, r4, r5
 80144b0:	b005      	add	sp, #20
 80144b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144b6:	2200      	movs	r2, #0
 80144b8:	4b1b      	ldr	r3, [pc, #108]	; (8014528 <__kernel_sin+0x148>)
 80144ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80144be:	f7ec f8b3 	bl	8000628 <__aeabi_dmul>
 80144c2:	4632      	mov	r2, r6
 80144c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80144c8:	463b      	mov	r3, r7
 80144ca:	4640      	mov	r0, r8
 80144cc:	4649      	mov	r1, r9
 80144ce:	f7ec f8ab 	bl	8000628 <__aeabi_dmul>
 80144d2:	4602      	mov	r2, r0
 80144d4:	460b      	mov	r3, r1
 80144d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80144da:	f7eb feed 	bl	80002b8 <__aeabi_dsub>
 80144de:	4652      	mov	r2, sl
 80144e0:	465b      	mov	r3, fp
 80144e2:	f7ec f8a1 	bl	8000628 <__aeabi_dmul>
 80144e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80144ea:	f7eb fee5 	bl	80002b8 <__aeabi_dsub>
 80144ee:	a30c      	add	r3, pc, #48	; (adr r3, 8014520 <__kernel_sin+0x140>)
 80144f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144f4:	4606      	mov	r6, r0
 80144f6:	460f      	mov	r7, r1
 80144f8:	4640      	mov	r0, r8
 80144fa:	4649      	mov	r1, r9
 80144fc:	f7ec f894 	bl	8000628 <__aeabi_dmul>
 8014500:	4602      	mov	r2, r0
 8014502:	460b      	mov	r3, r1
 8014504:	4630      	mov	r0, r6
 8014506:	4639      	mov	r1, r7
 8014508:	f7eb fed8 	bl	80002bc <__adddf3>
 801450c:	4602      	mov	r2, r0
 801450e:	460b      	mov	r3, r1
 8014510:	4620      	mov	r0, r4
 8014512:	4629      	mov	r1, r5
 8014514:	f7eb fed0 	bl	80002b8 <__aeabi_dsub>
 8014518:	e7c6      	b.n	80144a8 <__kernel_sin+0xc8>
 801451a:	bf00      	nop
 801451c:	f3af 8000 	nop.w
 8014520:	55555549 	.word	0x55555549
 8014524:	3fc55555 	.word	0x3fc55555
 8014528:	3fe00000 	.word	0x3fe00000
 801452c:	5acfd57c 	.word	0x5acfd57c
 8014530:	3de5d93a 	.word	0x3de5d93a
 8014534:	8a2b9ceb 	.word	0x8a2b9ceb
 8014538:	3e5ae5e6 	.word	0x3e5ae5e6
 801453c:	57b1fe7d 	.word	0x57b1fe7d
 8014540:	3ec71de3 	.word	0x3ec71de3
 8014544:	19c161d5 	.word	0x19c161d5
 8014548:	3f2a01a0 	.word	0x3f2a01a0
 801454c:	1110f8a6 	.word	0x1110f8a6
 8014550:	3f811111 	.word	0x3f811111

08014554 <fabs>:
 8014554:	ec51 0b10 	vmov	r0, r1, d0
 8014558:	ee10 2a10 	vmov	r2, s0
 801455c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014560:	ec43 2b10 	vmov	d0, r2, r3
 8014564:	4770      	bx	lr
	...

08014568 <floor>:
 8014568:	ec51 0b10 	vmov	r0, r1, d0
 801456c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014570:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8014574:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8014578:	2e13      	cmp	r6, #19
 801457a:	460c      	mov	r4, r1
 801457c:	ee10 5a10 	vmov	r5, s0
 8014580:	4680      	mov	r8, r0
 8014582:	dc34      	bgt.n	80145ee <floor+0x86>
 8014584:	2e00      	cmp	r6, #0
 8014586:	da16      	bge.n	80145b6 <floor+0x4e>
 8014588:	a335      	add	r3, pc, #212	; (adr r3, 8014660 <floor+0xf8>)
 801458a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801458e:	f7eb fe95 	bl	80002bc <__adddf3>
 8014592:	2200      	movs	r2, #0
 8014594:	2300      	movs	r3, #0
 8014596:	f7ec fad7 	bl	8000b48 <__aeabi_dcmpgt>
 801459a:	b148      	cbz	r0, 80145b0 <floor+0x48>
 801459c:	2c00      	cmp	r4, #0
 801459e:	da59      	bge.n	8014654 <floor+0xec>
 80145a0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80145a4:	4a30      	ldr	r2, [pc, #192]	; (8014668 <floor+0x100>)
 80145a6:	432b      	orrs	r3, r5
 80145a8:	2500      	movs	r5, #0
 80145aa:	42ab      	cmp	r3, r5
 80145ac:	bf18      	it	ne
 80145ae:	4614      	movne	r4, r2
 80145b0:	4621      	mov	r1, r4
 80145b2:	4628      	mov	r0, r5
 80145b4:	e025      	b.n	8014602 <floor+0x9a>
 80145b6:	4f2d      	ldr	r7, [pc, #180]	; (801466c <floor+0x104>)
 80145b8:	4137      	asrs	r7, r6
 80145ba:	ea01 0307 	and.w	r3, r1, r7
 80145be:	4303      	orrs	r3, r0
 80145c0:	d01f      	beq.n	8014602 <floor+0x9a>
 80145c2:	a327      	add	r3, pc, #156	; (adr r3, 8014660 <floor+0xf8>)
 80145c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145c8:	f7eb fe78 	bl	80002bc <__adddf3>
 80145cc:	2200      	movs	r2, #0
 80145ce:	2300      	movs	r3, #0
 80145d0:	f7ec faba 	bl	8000b48 <__aeabi_dcmpgt>
 80145d4:	2800      	cmp	r0, #0
 80145d6:	d0eb      	beq.n	80145b0 <floor+0x48>
 80145d8:	2c00      	cmp	r4, #0
 80145da:	bfbe      	ittt	lt
 80145dc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80145e0:	fa43 f606 	asrlt.w	r6, r3, r6
 80145e4:	19a4      	addlt	r4, r4, r6
 80145e6:	ea24 0407 	bic.w	r4, r4, r7
 80145ea:	2500      	movs	r5, #0
 80145ec:	e7e0      	b.n	80145b0 <floor+0x48>
 80145ee:	2e33      	cmp	r6, #51	; 0x33
 80145f0:	dd0b      	ble.n	801460a <floor+0xa2>
 80145f2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80145f6:	d104      	bne.n	8014602 <floor+0x9a>
 80145f8:	ee10 2a10 	vmov	r2, s0
 80145fc:	460b      	mov	r3, r1
 80145fe:	f7eb fe5d 	bl	80002bc <__adddf3>
 8014602:	ec41 0b10 	vmov	d0, r0, r1
 8014606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801460a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801460e:	f04f 33ff 	mov.w	r3, #4294967295
 8014612:	fa23 f707 	lsr.w	r7, r3, r7
 8014616:	4207      	tst	r7, r0
 8014618:	d0f3      	beq.n	8014602 <floor+0x9a>
 801461a:	a311      	add	r3, pc, #68	; (adr r3, 8014660 <floor+0xf8>)
 801461c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014620:	f7eb fe4c 	bl	80002bc <__adddf3>
 8014624:	2200      	movs	r2, #0
 8014626:	2300      	movs	r3, #0
 8014628:	f7ec fa8e 	bl	8000b48 <__aeabi_dcmpgt>
 801462c:	2800      	cmp	r0, #0
 801462e:	d0bf      	beq.n	80145b0 <floor+0x48>
 8014630:	2c00      	cmp	r4, #0
 8014632:	da02      	bge.n	801463a <floor+0xd2>
 8014634:	2e14      	cmp	r6, #20
 8014636:	d103      	bne.n	8014640 <floor+0xd8>
 8014638:	3401      	adds	r4, #1
 801463a:	ea25 0507 	bic.w	r5, r5, r7
 801463e:	e7b7      	b.n	80145b0 <floor+0x48>
 8014640:	2301      	movs	r3, #1
 8014642:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8014646:	fa03 f606 	lsl.w	r6, r3, r6
 801464a:	4435      	add	r5, r6
 801464c:	4545      	cmp	r5, r8
 801464e:	bf38      	it	cc
 8014650:	18e4      	addcc	r4, r4, r3
 8014652:	e7f2      	b.n	801463a <floor+0xd2>
 8014654:	2500      	movs	r5, #0
 8014656:	462c      	mov	r4, r5
 8014658:	e7aa      	b.n	80145b0 <floor+0x48>
 801465a:	bf00      	nop
 801465c:	f3af 8000 	nop.w
 8014660:	8800759c 	.word	0x8800759c
 8014664:	7e37e43c 	.word	0x7e37e43c
 8014668:	bff00000 	.word	0xbff00000
 801466c:	000fffff 	.word	0x000fffff

08014670 <scalbn>:
 8014670:	b570      	push	{r4, r5, r6, lr}
 8014672:	ec55 4b10 	vmov	r4, r5, d0
 8014676:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801467a:	4606      	mov	r6, r0
 801467c:	462b      	mov	r3, r5
 801467e:	b9aa      	cbnz	r2, 80146ac <scalbn+0x3c>
 8014680:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014684:	4323      	orrs	r3, r4
 8014686:	d03b      	beq.n	8014700 <scalbn+0x90>
 8014688:	4b31      	ldr	r3, [pc, #196]	; (8014750 <scalbn+0xe0>)
 801468a:	4629      	mov	r1, r5
 801468c:	2200      	movs	r2, #0
 801468e:	ee10 0a10 	vmov	r0, s0
 8014692:	f7eb ffc9 	bl	8000628 <__aeabi_dmul>
 8014696:	4b2f      	ldr	r3, [pc, #188]	; (8014754 <scalbn+0xe4>)
 8014698:	429e      	cmp	r6, r3
 801469a:	4604      	mov	r4, r0
 801469c:	460d      	mov	r5, r1
 801469e:	da12      	bge.n	80146c6 <scalbn+0x56>
 80146a0:	a327      	add	r3, pc, #156	; (adr r3, 8014740 <scalbn+0xd0>)
 80146a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146a6:	f7eb ffbf 	bl	8000628 <__aeabi_dmul>
 80146aa:	e009      	b.n	80146c0 <scalbn+0x50>
 80146ac:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80146b0:	428a      	cmp	r2, r1
 80146b2:	d10c      	bne.n	80146ce <scalbn+0x5e>
 80146b4:	ee10 2a10 	vmov	r2, s0
 80146b8:	4620      	mov	r0, r4
 80146ba:	4629      	mov	r1, r5
 80146bc:	f7eb fdfe 	bl	80002bc <__adddf3>
 80146c0:	4604      	mov	r4, r0
 80146c2:	460d      	mov	r5, r1
 80146c4:	e01c      	b.n	8014700 <scalbn+0x90>
 80146c6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80146ca:	460b      	mov	r3, r1
 80146cc:	3a36      	subs	r2, #54	; 0x36
 80146ce:	4432      	add	r2, r6
 80146d0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80146d4:	428a      	cmp	r2, r1
 80146d6:	dd0b      	ble.n	80146f0 <scalbn+0x80>
 80146d8:	ec45 4b11 	vmov	d1, r4, r5
 80146dc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8014748 <scalbn+0xd8>
 80146e0:	f000 f83c 	bl	801475c <copysign>
 80146e4:	a318      	add	r3, pc, #96	; (adr r3, 8014748 <scalbn+0xd8>)
 80146e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146ea:	ec51 0b10 	vmov	r0, r1, d0
 80146ee:	e7da      	b.n	80146a6 <scalbn+0x36>
 80146f0:	2a00      	cmp	r2, #0
 80146f2:	dd08      	ble.n	8014706 <scalbn+0x96>
 80146f4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80146f8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80146fc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014700:	ec45 4b10 	vmov	d0, r4, r5
 8014704:	bd70      	pop	{r4, r5, r6, pc}
 8014706:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801470a:	da0d      	bge.n	8014728 <scalbn+0xb8>
 801470c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014710:	429e      	cmp	r6, r3
 8014712:	ec45 4b11 	vmov	d1, r4, r5
 8014716:	dce1      	bgt.n	80146dc <scalbn+0x6c>
 8014718:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8014740 <scalbn+0xd0>
 801471c:	f000 f81e 	bl	801475c <copysign>
 8014720:	a307      	add	r3, pc, #28	; (adr r3, 8014740 <scalbn+0xd0>)
 8014722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014726:	e7e0      	b.n	80146ea <scalbn+0x7a>
 8014728:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801472c:	3236      	adds	r2, #54	; 0x36
 801472e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014732:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014736:	4620      	mov	r0, r4
 8014738:	4629      	mov	r1, r5
 801473a:	2200      	movs	r2, #0
 801473c:	4b06      	ldr	r3, [pc, #24]	; (8014758 <scalbn+0xe8>)
 801473e:	e7b2      	b.n	80146a6 <scalbn+0x36>
 8014740:	c2f8f359 	.word	0xc2f8f359
 8014744:	01a56e1f 	.word	0x01a56e1f
 8014748:	8800759c 	.word	0x8800759c
 801474c:	7e37e43c 	.word	0x7e37e43c
 8014750:	43500000 	.word	0x43500000
 8014754:	ffff3cb0 	.word	0xffff3cb0
 8014758:	3c900000 	.word	0x3c900000

0801475c <copysign>:
 801475c:	ec51 0b10 	vmov	r0, r1, d0
 8014760:	ee11 0a90 	vmov	r0, s3
 8014764:	ee10 2a10 	vmov	r2, s0
 8014768:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801476c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8014770:	ea41 0300 	orr.w	r3, r1, r0
 8014774:	ec43 2b10 	vmov	d0, r2, r3
 8014778:	4770      	bx	lr
	...

0801477c <__errno>:
 801477c:	4b01      	ldr	r3, [pc, #4]	; (8014784 <__errno+0x8>)
 801477e:	6818      	ldr	r0, [r3, #0]
 8014780:	4770      	bx	lr
 8014782:	bf00      	nop
 8014784:	2000000c 	.word	0x2000000c

08014788 <__libc_init_array>:
 8014788:	b570      	push	{r4, r5, r6, lr}
 801478a:	4e0d      	ldr	r6, [pc, #52]	; (80147c0 <__libc_init_array+0x38>)
 801478c:	4c0d      	ldr	r4, [pc, #52]	; (80147c4 <__libc_init_array+0x3c>)
 801478e:	1ba4      	subs	r4, r4, r6
 8014790:	10a4      	asrs	r4, r4, #2
 8014792:	2500      	movs	r5, #0
 8014794:	42a5      	cmp	r5, r4
 8014796:	d109      	bne.n	80147ac <__libc_init_array+0x24>
 8014798:	4e0b      	ldr	r6, [pc, #44]	; (80147c8 <__libc_init_array+0x40>)
 801479a:	4c0c      	ldr	r4, [pc, #48]	; (80147cc <__libc_init_array+0x44>)
 801479c:	f004 f9e8 	bl	8018b70 <_init>
 80147a0:	1ba4      	subs	r4, r4, r6
 80147a2:	10a4      	asrs	r4, r4, #2
 80147a4:	2500      	movs	r5, #0
 80147a6:	42a5      	cmp	r5, r4
 80147a8:	d105      	bne.n	80147b6 <__libc_init_array+0x2e>
 80147aa:	bd70      	pop	{r4, r5, r6, pc}
 80147ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80147b0:	4798      	blx	r3
 80147b2:	3501      	adds	r5, #1
 80147b4:	e7ee      	b.n	8014794 <__libc_init_array+0xc>
 80147b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80147ba:	4798      	blx	r3
 80147bc:	3501      	adds	r5, #1
 80147be:	e7f2      	b.n	80147a6 <__libc_init_array+0x1e>
 80147c0:	0801970c 	.word	0x0801970c
 80147c4:	0801970c 	.word	0x0801970c
 80147c8:	0801970c 	.word	0x0801970c
 80147cc:	08019714 	.word	0x08019714

080147d0 <memcpy>:
 80147d0:	b510      	push	{r4, lr}
 80147d2:	1e43      	subs	r3, r0, #1
 80147d4:	440a      	add	r2, r1
 80147d6:	4291      	cmp	r1, r2
 80147d8:	d100      	bne.n	80147dc <memcpy+0xc>
 80147da:	bd10      	pop	{r4, pc}
 80147dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80147e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80147e4:	e7f7      	b.n	80147d6 <memcpy+0x6>

080147e6 <memset>:
 80147e6:	4402      	add	r2, r0
 80147e8:	4603      	mov	r3, r0
 80147ea:	4293      	cmp	r3, r2
 80147ec:	d100      	bne.n	80147f0 <memset+0xa>
 80147ee:	4770      	bx	lr
 80147f0:	f803 1b01 	strb.w	r1, [r3], #1
 80147f4:	e7f9      	b.n	80147ea <memset+0x4>

080147f6 <__cvt>:
 80147f6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80147fa:	ec55 4b10 	vmov	r4, r5, d0
 80147fe:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8014800:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8014804:	2d00      	cmp	r5, #0
 8014806:	460e      	mov	r6, r1
 8014808:	4691      	mov	r9, r2
 801480a:	4619      	mov	r1, r3
 801480c:	bfb8      	it	lt
 801480e:	4622      	movlt	r2, r4
 8014810:	462b      	mov	r3, r5
 8014812:	f027 0720 	bic.w	r7, r7, #32
 8014816:	bfbb      	ittet	lt
 8014818:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801481c:	461d      	movlt	r5, r3
 801481e:	2300      	movge	r3, #0
 8014820:	232d      	movlt	r3, #45	; 0x2d
 8014822:	bfb8      	it	lt
 8014824:	4614      	movlt	r4, r2
 8014826:	2f46      	cmp	r7, #70	; 0x46
 8014828:	700b      	strb	r3, [r1, #0]
 801482a:	d004      	beq.n	8014836 <__cvt+0x40>
 801482c:	2f45      	cmp	r7, #69	; 0x45
 801482e:	d100      	bne.n	8014832 <__cvt+0x3c>
 8014830:	3601      	adds	r6, #1
 8014832:	2102      	movs	r1, #2
 8014834:	e000      	b.n	8014838 <__cvt+0x42>
 8014836:	2103      	movs	r1, #3
 8014838:	ab03      	add	r3, sp, #12
 801483a:	9301      	str	r3, [sp, #4]
 801483c:	ab02      	add	r3, sp, #8
 801483e:	9300      	str	r3, [sp, #0]
 8014840:	4632      	mov	r2, r6
 8014842:	4653      	mov	r3, sl
 8014844:	ec45 4b10 	vmov	d0, r4, r5
 8014848:	f001 fdfe 	bl	8016448 <_dtoa_r>
 801484c:	2f47      	cmp	r7, #71	; 0x47
 801484e:	4680      	mov	r8, r0
 8014850:	d102      	bne.n	8014858 <__cvt+0x62>
 8014852:	f019 0f01 	tst.w	r9, #1
 8014856:	d026      	beq.n	80148a6 <__cvt+0xb0>
 8014858:	2f46      	cmp	r7, #70	; 0x46
 801485a:	eb08 0906 	add.w	r9, r8, r6
 801485e:	d111      	bne.n	8014884 <__cvt+0x8e>
 8014860:	f898 3000 	ldrb.w	r3, [r8]
 8014864:	2b30      	cmp	r3, #48	; 0x30
 8014866:	d10a      	bne.n	801487e <__cvt+0x88>
 8014868:	2200      	movs	r2, #0
 801486a:	2300      	movs	r3, #0
 801486c:	4620      	mov	r0, r4
 801486e:	4629      	mov	r1, r5
 8014870:	f7ec f942 	bl	8000af8 <__aeabi_dcmpeq>
 8014874:	b918      	cbnz	r0, 801487e <__cvt+0x88>
 8014876:	f1c6 0601 	rsb	r6, r6, #1
 801487a:	f8ca 6000 	str.w	r6, [sl]
 801487e:	f8da 3000 	ldr.w	r3, [sl]
 8014882:	4499      	add	r9, r3
 8014884:	2200      	movs	r2, #0
 8014886:	2300      	movs	r3, #0
 8014888:	4620      	mov	r0, r4
 801488a:	4629      	mov	r1, r5
 801488c:	f7ec f934 	bl	8000af8 <__aeabi_dcmpeq>
 8014890:	b938      	cbnz	r0, 80148a2 <__cvt+0xac>
 8014892:	2230      	movs	r2, #48	; 0x30
 8014894:	9b03      	ldr	r3, [sp, #12]
 8014896:	454b      	cmp	r3, r9
 8014898:	d205      	bcs.n	80148a6 <__cvt+0xb0>
 801489a:	1c59      	adds	r1, r3, #1
 801489c:	9103      	str	r1, [sp, #12]
 801489e:	701a      	strb	r2, [r3, #0]
 80148a0:	e7f8      	b.n	8014894 <__cvt+0x9e>
 80148a2:	f8cd 900c 	str.w	r9, [sp, #12]
 80148a6:	9b03      	ldr	r3, [sp, #12]
 80148a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80148aa:	eba3 0308 	sub.w	r3, r3, r8
 80148ae:	4640      	mov	r0, r8
 80148b0:	6013      	str	r3, [r2, #0]
 80148b2:	b004      	add	sp, #16
 80148b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080148b8 <__exponent>:
 80148b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80148ba:	2900      	cmp	r1, #0
 80148bc:	4604      	mov	r4, r0
 80148be:	bfba      	itte	lt
 80148c0:	4249      	neglt	r1, r1
 80148c2:	232d      	movlt	r3, #45	; 0x2d
 80148c4:	232b      	movge	r3, #43	; 0x2b
 80148c6:	2909      	cmp	r1, #9
 80148c8:	f804 2b02 	strb.w	r2, [r4], #2
 80148cc:	7043      	strb	r3, [r0, #1]
 80148ce:	dd20      	ble.n	8014912 <__exponent+0x5a>
 80148d0:	f10d 0307 	add.w	r3, sp, #7
 80148d4:	461f      	mov	r7, r3
 80148d6:	260a      	movs	r6, #10
 80148d8:	fb91 f5f6 	sdiv	r5, r1, r6
 80148dc:	fb06 1115 	mls	r1, r6, r5, r1
 80148e0:	3130      	adds	r1, #48	; 0x30
 80148e2:	2d09      	cmp	r5, #9
 80148e4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80148e8:	f103 32ff 	add.w	r2, r3, #4294967295
 80148ec:	4629      	mov	r1, r5
 80148ee:	dc09      	bgt.n	8014904 <__exponent+0x4c>
 80148f0:	3130      	adds	r1, #48	; 0x30
 80148f2:	3b02      	subs	r3, #2
 80148f4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80148f8:	42bb      	cmp	r3, r7
 80148fa:	4622      	mov	r2, r4
 80148fc:	d304      	bcc.n	8014908 <__exponent+0x50>
 80148fe:	1a10      	subs	r0, r2, r0
 8014900:	b003      	add	sp, #12
 8014902:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014904:	4613      	mov	r3, r2
 8014906:	e7e7      	b.n	80148d8 <__exponent+0x20>
 8014908:	f813 2b01 	ldrb.w	r2, [r3], #1
 801490c:	f804 2b01 	strb.w	r2, [r4], #1
 8014910:	e7f2      	b.n	80148f8 <__exponent+0x40>
 8014912:	2330      	movs	r3, #48	; 0x30
 8014914:	4419      	add	r1, r3
 8014916:	7083      	strb	r3, [r0, #2]
 8014918:	1d02      	adds	r2, r0, #4
 801491a:	70c1      	strb	r1, [r0, #3]
 801491c:	e7ef      	b.n	80148fe <__exponent+0x46>
	...

08014920 <_printf_float>:
 8014920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014924:	b08d      	sub	sp, #52	; 0x34
 8014926:	460c      	mov	r4, r1
 8014928:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801492c:	4616      	mov	r6, r2
 801492e:	461f      	mov	r7, r3
 8014930:	4605      	mov	r5, r0
 8014932:	f002 fe7b 	bl	801762c <_localeconv_r>
 8014936:	6803      	ldr	r3, [r0, #0]
 8014938:	9304      	str	r3, [sp, #16]
 801493a:	4618      	mov	r0, r3
 801493c:	f7eb fc60 	bl	8000200 <strlen>
 8014940:	2300      	movs	r3, #0
 8014942:	930a      	str	r3, [sp, #40]	; 0x28
 8014944:	f8d8 3000 	ldr.w	r3, [r8]
 8014948:	9005      	str	r0, [sp, #20]
 801494a:	3307      	adds	r3, #7
 801494c:	f023 0307 	bic.w	r3, r3, #7
 8014950:	f103 0208 	add.w	r2, r3, #8
 8014954:	f894 a018 	ldrb.w	sl, [r4, #24]
 8014958:	f8d4 b000 	ldr.w	fp, [r4]
 801495c:	f8c8 2000 	str.w	r2, [r8]
 8014960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014964:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8014968:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801496c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014970:	9307      	str	r3, [sp, #28]
 8014972:	f8cd 8018 	str.w	r8, [sp, #24]
 8014976:	f04f 32ff 	mov.w	r2, #4294967295
 801497a:	4ba7      	ldr	r3, [pc, #668]	; (8014c18 <_printf_float+0x2f8>)
 801497c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014980:	f7ec f8ec 	bl	8000b5c <__aeabi_dcmpun>
 8014984:	bb70      	cbnz	r0, 80149e4 <_printf_float+0xc4>
 8014986:	f04f 32ff 	mov.w	r2, #4294967295
 801498a:	4ba3      	ldr	r3, [pc, #652]	; (8014c18 <_printf_float+0x2f8>)
 801498c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014990:	f7ec f8c6 	bl	8000b20 <__aeabi_dcmple>
 8014994:	bb30      	cbnz	r0, 80149e4 <_printf_float+0xc4>
 8014996:	2200      	movs	r2, #0
 8014998:	2300      	movs	r3, #0
 801499a:	4640      	mov	r0, r8
 801499c:	4649      	mov	r1, r9
 801499e:	f7ec f8b5 	bl	8000b0c <__aeabi_dcmplt>
 80149a2:	b110      	cbz	r0, 80149aa <_printf_float+0x8a>
 80149a4:	232d      	movs	r3, #45	; 0x2d
 80149a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80149aa:	4a9c      	ldr	r2, [pc, #624]	; (8014c1c <_printf_float+0x2fc>)
 80149ac:	4b9c      	ldr	r3, [pc, #624]	; (8014c20 <_printf_float+0x300>)
 80149ae:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80149b2:	bf8c      	ite	hi
 80149b4:	4690      	movhi	r8, r2
 80149b6:	4698      	movls	r8, r3
 80149b8:	2303      	movs	r3, #3
 80149ba:	f02b 0204 	bic.w	r2, fp, #4
 80149be:	6123      	str	r3, [r4, #16]
 80149c0:	6022      	str	r2, [r4, #0]
 80149c2:	f04f 0900 	mov.w	r9, #0
 80149c6:	9700      	str	r7, [sp, #0]
 80149c8:	4633      	mov	r3, r6
 80149ca:	aa0b      	add	r2, sp, #44	; 0x2c
 80149cc:	4621      	mov	r1, r4
 80149ce:	4628      	mov	r0, r5
 80149d0:	f000 f9e6 	bl	8014da0 <_printf_common>
 80149d4:	3001      	adds	r0, #1
 80149d6:	f040 808d 	bne.w	8014af4 <_printf_float+0x1d4>
 80149da:	f04f 30ff 	mov.w	r0, #4294967295
 80149de:	b00d      	add	sp, #52	; 0x34
 80149e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149e4:	4642      	mov	r2, r8
 80149e6:	464b      	mov	r3, r9
 80149e8:	4640      	mov	r0, r8
 80149ea:	4649      	mov	r1, r9
 80149ec:	f7ec f8b6 	bl	8000b5c <__aeabi_dcmpun>
 80149f0:	b110      	cbz	r0, 80149f8 <_printf_float+0xd8>
 80149f2:	4a8c      	ldr	r2, [pc, #560]	; (8014c24 <_printf_float+0x304>)
 80149f4:	4b8c      	ldr	r3, [pc, #560]	; (8014c28 <_printf_float+0x308>)
 80149f6:	e7da      	b.n	80149ae <_printf_float+0x8e>
 80149f8:	6861      	ldr	r1, [r4, #4]
 80149fa:	1c4b      	adds	r3, r1, #1
 80149fc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8014a00:	a80a      	add	r0, sp, #40	; 0x28
 8014a02:	d13e      	bne.n	8014a82 <_printf_float+0x162>
 8014a04:	2306      	movs	r3, #6
 8014a06:	6063      	str	r3, [r4, #4]
 8014a08:	2300      	movs	r3, #0
 8014a0a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8014a0e:	ab09      	add	r3, sp, #36	; 0x24
 8014a10:	9300      	str	r3, [sp, #0]
 8014a12:	ec49 8b10 	vmov	d0, r8, r9
 8014a16:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014a1a:	6022      	str	r2, [r4, #0]
 8014a1c:	f8cd a004 	str.w	sl, [sp, #4]
 8014a20:	6861      	ldr	r1, [r4, #4]
 8014a22:	4628      	mov	r0, r5
 8014a24:	f7ff fee7 	bl	80147f6 <__cvt>
 8014a28:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8014a2c:	2b47      	cmp	r3, #71	; 0x47
 8014a2e:	4680      	mov	r8, r0
 8014a30:	d109      	bne.n	8014a46 <_printf_float+0x126>
 8014a32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a34:	1cd8      	adds	r0, r3, #3
 8014a36:	db02      	blt.n	8014a3e <_printf_float+0x11e>
 8014a38:	6862      	ldr	r2, [r4, #4]
 8014a3a:	4293      	cmp	r3, r2
 8014a3c:	dd47      	ble.n	8014ace <_printf_float+0x1ae>
 8014a3e:	f1aa 0a02 	sub.w	sl, sl, #2
 8014a42:	fa5f fa8a 	uxtb.w	sl, sl
 8014a46:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8014a4a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014a4c:	d824      	bhi.n	8014a98 <_printf_float+0x178>
 8014a4e:	3901      	subs	r1, #1
 8014a50:	4652      	mov	r2, sl
 8014a52:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014a56:	9109      	str	r1, [sp, #36]	; 0x24
 8014a58:	f7ff ff2e 	bl	80148b8 <__exponent>
 8014a5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014a5e:	1813      	adds	r3, r2, r0
 8014a60:	2a01      	cmp	r2, #1
 8014a62:	4681      	mov	r9, r0
 8014a64:	6123      	str	r3, [r4, #16]
 8014a66:	dc02      	bgt.n	8014a6e <_printf_float+0x14e>
 8014a68:	6822      	ldr	r2, [r4, #0]
 8014a6a:	07d1      	lsls	r1, r2, #31
 8014a6c:	d501      	bpl.n	8014a72 <_printf_float+0x152>
 8014a6e:	3301      	adds	r3, #1
 8014a70:	6123      	str	r3, [r4, #16]
 8014a72:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	d0a5      	beq.n	80149c6 <_printf_float+0xa6>
 8014a7a:	232d      	movs	r3, #45	; 0x2d
 8014a7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014a80:	e7a1      	b.n	80149c6 <_printf_float+0xa6>
 8014a82:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8014a86:	f000 8177 	beq.w	8014d78 <_printf_float+0x458>
 8014a8a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8014a8e:	d1bb      	bne.n	8014a08 <_printf_float+0xe8>
 8014a90:	2900      	cmp	r1, #0
 8014a92:	d1b9      	bne.n	8014a08 <_printf_float+0xe8>
 8014a94:	2301      	movs	r3, #1
 8014a96:	e7b6      	b.n	8014a06 <_printf_float+0xe6>
 8014a98:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8014a9c:	d119      	bne.n	8014ad2 <_printf_float+0x1b2>
 8014a9e:	2900      	cmp	r1, #0
 8014aa0:	6863      	ldr	r3, [r4, #4]
 8014aa2:	dd0c      	ble.n	8014abe <_printf_float+0x19e>
 8014aa4:	6121      	str	r1, [r4, #16]
 8014aa6:	b913      	cbnz	r3, 8014aae <_printf_float+0x18e>
 8014aa8:	6822      	ldr	r2, [r4, #0]
 8014aaa:	07d2      	lsls	r2, r2, #31
 8014aac:	d502      	bpl.n	8014ab4 <_printf_float+0x194>
 8014aae:	3301      	adds	r3, #1
 8014ab0:	440b      	add	r3, r1
 8014ab2:	6123      	str	r3, [r4, #16]
 8014ab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ab6:	65a3      	str	r3, [r4, #88]	; 0x58
 8014ab8:	f04f 0900 	mov.w	r9, #0
 8014abc:	e7d9      	b.n	8014a72 <_printf_float+0x152>
 8014abe:	b913      	cbnz	r3, 8014ac6 <_printf_float+0x1a6>
 8014ac0:	6822      	ldr	r2, [r4, #0]
 8014ac2:	07d0      	lsls	r0, r2, #31
 8014ac4:	d501      	bpl.n	8014aca <_printf_float+0x1aa>
 8014ac6:	3302      	adds	r3, #2
 8014ac8:	e7f3      	b.n	8014ab2 <_printf_float+0x192>
 8014aca:	2301      	movs	r3, #1
 8014acc:	e7f1      	b.n	8014ab2 <_printf_float+0x192>
 8014ace:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8014ad2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8014ad6:	4293      	cmp	r3, r2
 8014ad8:	db05      	blt.n	8014ae6 <_printf_float+0x1c6>
 8014ada:	6822      	ldr	r2, [r4, #0]
 8014adc:	6123      	str	r3, [r4, #16]
 8014ade:	07d1      	lsls	r1, r2, #31
 8014ae0:	d5e8      	bpl.n	8014ab4 <_printf_float+0x194>
 8014ae2:	3301      	adds	r3, #1
 8014ae4:	e7e5      	b.n	8014ab2 <_printf_float+0x192>
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	bfd4      	ite	le
 8014aea:	f1c3 0302 	rsble	r3, r3, #2
 8014aee:	2301      	movgt	r3, #1
 8014af0:	4413      	add	r3, r2
 8014af2:	e7de      	b.n	8014ab2 <_printf_float+0x192>
 8014af4:	6823      	ldr	r3, [r4, #0]
 8014af6:	055a      	lsls	r2, r3, #21
 8014af8:	d407      	bmi.n	8014b0a <_printf_float+0x1ea>
 8014afa:	6923      	ldr	r3, [r4, #16]
 8014afc:	4642      	mov	r2, r8
 8014afe:	4631      	mov	r1, r6
 8014b00:	4628      	mov	r0, r5
 8014b02:	47b8      	blx	r7
 8014b04:	3001      	adds	r0, #1
 8014b06:	d12b      	bne.n	8014b60 <_printf_float+0x240>
 8014b08:	e767      	b.n	80149da <_printf_float+0xba>
 8014b0a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8014b0e:	f240 80dc 	bls.w	8014cca <_printf_float+0x3aa>
 8014b12:	2200      	movs	r2, #0
 8014b14:	2300      	movs	r3, #0
 8014b16:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014b1a:	f7eb ffed 	bl	8000af8 <__aeabi_dcmpeq>
 8014b1e:	2800      	cmp	r0, #0
 8014b20:	d033      	beq.n	8014b8a <_printf_float+0x26a>
 8014b22:	2301      	movs	r3, #1
 8014b24:	4a41      	ldr	r2, [pc, #260]	; (8014c2c <_printf_float+0x30c>)
 8014b26:	4631      	mov	r1, r6
 8014b28:	4628      	mov	r0, r5
 8014b2a:	47b8      	blx	r7
 8014b2c:	3001      	adds	r0, #1
 8014b2e:	f43f af54 	beq.w	80149da <_printf_float+0xba>
 8014b32:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014b36:	429a      	cmp	r2, r3
 8014b38:	db02      	blt.n	8014b40 <_printf_float+0x220>
 8014b3a:	6823      	ldr	r3, [r4, #0]
 8014b3c:	07d8      	lsls	r0, r3, #31
 8014b3e:	d50f      	bpl.n	8014b60 <_printf_float+0x240>
 8014b40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014b44:	4631      	mov	r1, r6
 8014b46:	4628      	mov	r0, r5
 8014b48:	47b8      	blx	r7
 8014b4a:	3001      	adds	r0, #1
 8014b4c:	f43f af45 	beq.w	80149da <_printf_float+0xba>
 8014b50:	f04f 0800 	mov.w	r8, #0
 8014b54:	f104 091a 	add.w	r9, r4, #26
 8014b58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b5a:	3b01      	subs	r3, #1
 8014b5c:	4543      	cmp	r3, r8
 8014b5e:	dc09      	bgt.n	8014b74 <_printf_float+0x254>
 8014b60:	6823      	ldr	r3, [r4, #0]
 8014b62:	079b      	lsls	r3, r3, #30
 8014b64:	f100 8103 	bmi.w	8014d6e <_printf_float+0x44e>
 8014b68:	68e0      	ldr	r0, [r4, #12]
 8014b6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014b6c:	4298      	cmp	r0, r3
 8014b6e:	bfb8      	it	lt
 8014b70:	4618      	movlt	r0, r3
 8014b72:	e734      	b.n	80149de <_printf_float+0xbe>
 8014b74:	2301      	movs	r3, #1
 8014b76:	464a      	mov	r2, r9
 8014b78:	4631      	mov	r1, r6
 8014b7a:	4628      	mov	r0, r5
 8014b7c:	47b8      	blx	r7
 8014b7e:	3001      	adds	r0, #1
 8014b80:	f43f af2b 	beq.w	80149da <_printf_float+0xba>
 8014b84:	f108 0801 	add.w	r8, r8, #1
 8014b88:	e7e6      	b.n	8014b58 <_printf_float+0x238>
 8014b8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	dc2b      	bgt.n	8014be8 <_printf_float+0x2c8>
 8014b90:	2301      	movs	r3, #1
 8014b92:	4a26      	ldr	r2, [pc, #152]	; (8014c2c <_printf_float+0x30c>)
 8014b94:	4631      	mov	r1, r6
 8014b96:	4628      	mov	r0, r5
 8014b98:	47b8      	blx	r7
 8014b9a:	3001      	adds	r0, #1
 8014b9c:	f43f af1d 	beq.w	80149da <_printf_float+0xba>
 8014ba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ba2:	b923      	cbnz	r3, 8014bae <_printf_float+0x28e>
 8014ba4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014ba6:	b913      	cbnz	r3, 8014bae <_printf_float+0x28e>
 8014ba8:	6823      	ldr	r3, [r4, #0]
 8014baa:	07d9      	lsls	r1, r3, #31
 8014bac:	d5d8      	bpl.n	8014b60 <_printf_float+0x240>
 8014bae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014bb2:	4631      	mov	r1, r6
 8014bb4:	4628      	mov	r0, r5
 8014bb6:	47b8      	blx	r7
 8014bb8:	3001      	adds	r0, #1
 8014bba:	f43f af0e 	beq.w	80149da <_printf_float+0xba>
 8014bbe:	f04f 0900 	mov.w	r9, #0
 8014bc2:	f104 0a1a 	add.w	sl, r4, #26
 8014bc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014bc8:	425b      	negs	r3, r3
 8014bca:	454b      	cmp	r3, r9
 8014bcc:	dc01      	bgt.n	8014bd2 <_printf_float+0x2b2>
 8014bce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014bd0:	e794      	b.n	8014afc <_printf_float+0x1dc>
 8014bd2:	2301      	movs	r3, #1
 8014bd4:	4652      	mov	r2, sl
 8014bd6:	4631      	mov	r1, r6
 8014bd8:	4628      	mov	r0, r5
 8014bda:	47b8      	blx	r7
 8014bdc:	3001      	adds	r0, #1
 8014bde:	f43f aefc 	beq.w	80149da <_printf_float+0xba>
 8014be2:	f109 0901 	add.w	r9, r9, #1
 8014be6:	e7ee      	b.n	8014bc6 <_printf_float+0x2a6>
 8014be8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014bea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014bec:	429a      	cmp	r2, r3
 8014bee:	bfa8      	it	ge
 8014bf0:	461a      	movge	r2, r3
 8014bf2:	2a00      	cmp	r2, #0
 8014bf4:	4691      	mov	r9, r2
 8014bf6:	dd07      	ble.n	8014c08 <_printf_float+0x2e8>
 8014bf8:	4613      	mov	r3, r2
 8014bfa:	4631      	mov	r1, r6
 8014bfc:	4642      	mov	r2, r8
 8014bfe:	4628      	mov	r0, r5
 8014c00:	47b8      	blx	r7
 8014c02:	3001      	adds	r0, #1
 8014c04:	f43f aee9 	beq.w	80149da <_printf_float+0xba>
 8014c08:	f104 031a 	add.w	r3, r4, #26
 8014c0c:	f04f 0b00 	mov.w	fp, #0
 8014c10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014c14:	9306      	str	r3, [sp, #24]
 8014c16:	e015      	b.n	8014c44 <_printf_float+0x324>
 8014c18:	7fefffff 	.word	0x7fefffff
 8014c1c:	080193d4 	.word	0x080193d4
 8014c20:	080193d0 	.word	0x080193d0
 8014c24:	080193dc 	.word	0x080193dc
 8014c28:	080193d8 	.word	0x080193d8
 8014c2c:	080195fb 	.word	0x080195fb
 8014c30:	2301      	movs	r3, #1
 8014c32:	9a06      	ldr	r2, [sp, #24]
 8014c34:	4631      	mov	r1, r6
 8014c36:	4628      	mov	r0, r5
 8014c38:	47b8      	blx	r7
 8014c3a:	3001      	adds	r0, #1
 8014c3c:	f43f aecd 	beq.w	80149da <_printf_float+0xba>
 8014c40:	f10b 0b01 	add.w	fp, fp, #1
 8014c44:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8014c48:	ebaa 0309 	sub.w	r3, sl, r9
 8014c4c:	455b      	cmp	r3, fp
 8014c4e:	dcef      	bgt.n	8014c30 <_printf_float+0x310>
 8014c50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014c54:	429a      	cmp	r2, r3
 8014c56:	44d0      	add	r8, sl
 8014c58:	db15      	blt.n	8014c86 <_printf_float+0x366>
 8014c5a:	6823      	ldr	r3, [r4, #0]
 8014c5c:	07da      	lsls	r2, r3, #31
 8014c5e:	d412      	bmi.n	8014c86 <_printf_float+0x366>
 8014c60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c62:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014c64:	eba3 020a 	sub.w	r2, r3, sl
 8014c68:	eba3 0a01 	sub.w	sl, r3, r1
 8014c6c:	4592      	cmp	sl, r2
 8014c6e:	bfa8      	it	ge
 8014c70:	4692      	movge	sl, r2
 8014c72:	f1ba 0f00 	cmp.w	sl, #0
 8014c76:	dc0e      	bgt.n	8014c96 <_printf_float+0x376>
 8014c78:	f04f 0800 	mov.w	r8, #0
 8014c7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014c80:	f104 091a 	add.w	r9, r4, #26
 8014c84:	e019      	b.n	8014cba <_printf_float+0x39a>
 8014c86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014c8a:	4631      	mov	r1, r6
 8014c8c:	4628      	mov	r0, r5
 8014c8e:	47b8      	blx	r7
 8014c90:	3001      	adds	r0, #1
 8014c92:	d1e5      	bne.n	8014c60 <_printf_float+0x340>
 8014c94:	e6a1      	b.n	80149da <_printf_float+0xba>
 8014c96:	4653      	mov	r3, sl
 8014c98:	4642      	mov	r2, r8
 8014c9a:	4631      	mov	r1, r6
 8014c9c:	4628      	mov	r0, r5
 8014c9e:	47b8      	blx	r7
 8014ca0:	3001      	adds	r0, #1
 8014ca2:	d1e9      	bne.n	8014c78 <_printf_float+0x358>
 8014ca4:	e699      	b.n	80149da <_printf_float+0xba>
 8014ca6:	2301      	movs	r3, #1
 8014ca8:	464a      	mov	r2, r9
 8014caa:	4631      	mov	r1, r6
 8014cac:	4628      	mov	r0, r5
 8014cae:	47b8      	blx	r7
 8014cb0:	3001      	adds	r0, #1
 8014cb2:	f43f ae92 	beq.w	80149da <_printf_float+0xba>
 8014cb6:	f108 0801 	add.w	r8, r8, #1
 8014cba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014cbe:	1a9b      	subs	r3, r3, r2
 8014cc0:	eba3 030a 	sub.w	r3, r3, sl
 8014cc4:	4543      	cmp	r3, r8
 8014cc6:	dcee      	bgt.n	8014ca6 <_printf_float+0x386>
 8014cc8:	e74a      	b.n	8014b60 <_printf_float+0x240>
 8014cca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014ccc:	2a01      	cmp	r2, #1
 8014cce:	dc01      	bgt.n	8014cd4 <_printf_float+0x3b4>
 8014cd0:	07db      	lsls	r3, r3, #31
 8014cd2:	d53a      	bpl.n	8014d4a <_printf_float+0x42a>
 8014cd4:	2301      	movs	r3, #1
 8014cd6:	4642      	mov	r2, r8
 8014cd8:	4631      	mov	r1, r6
 8014cda:	4628      	mov	r0, r5
 8014cdc:	47b8      	blx	r7
 8014cde:	3001      	adds	r0, #1
 8014ce0:	f43f ae7b 	beq.w	80149da <_printf_float+0xba>
 8014ce4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014ce8:	4631      	mov	r1, r6
 8014cea:	4628      	mov	r0, r5
 8014cec:	47b8      	blx	r7
 8014cee:	3001      	adds	r0, #1
 8014cf0:	f108 0801 	add.w	r8, r8, #1
 8014cf4:	f43f ae71 	beq.w	80149da <_printf_float+0xba>
 8014cf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014cfa:	2200      	movs	r2, #0
 8014cfc:	f103 3aff 	add.w	sl, r3, #4294967295
 8014d00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014d04:	2300      	movs	r3, #0
 8014d06:	f7eb fef7 	bl	8000af8 <__aeabi_dcmpeq>
 8014d0a:	b9c8      	cbnz	r0, 8014d40 <_printf_float+0x420>
 8014d0c:	4653      	mov	r3, sl
 8014d0e:	4642      	mov	r2, r8
 8014d10:	4631      	mov	r1, r6
 8014d12:	4628      	mov	r0, r5
 8014d14:	47b8      	blx	r7
 8014d16:	3001      	adds	r0, #1
 8014d18:	d10e      	bne.n	8014d38 <_printf_float+0x418>
 8014d1a:	e65e      	b.n	80149da <_printf_float+0xba>
 8014d1c:	2301      	movs	r3, #1
 8014d1e:	4652      	mov	r2, sl
 8014d20:	4631      	mov	r1, r6
 8014d22:	4628      	mov	r0, r5
 8014d24:	47b8      	blx	r7
 8014d26:	3001      	adds	r0, #1
 8014d28:	f43f ae57 	beq.w	80149da <_printf_float+0xba>
 8014d2c:	f108 0801 	add.w	r8, r8, #1
 8014d30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d32:	3b01      	subs	r3, #1
 8014d34:	4543      	cmp	r3, r8
 8014d36:	dcf1      	bgt.n	8014d1c <_printf_float+0x3fc>
 8014d38:	464b      	mov	r3, r9
 8014d3a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014d3e:	e6de      	b.n	8014afe <_printf_float+0x1de>
 8014d40:	f04f 0800 	mov.w	r8, #0
 8014d44:	f104 0a1a 	add.w	sl, r4, #26
 8014d48:	e7f2      	b.n	8014d30 <_printf_float+0x410>
 8014d4a:	2301      	movs	r3, #1
 8014d4c:	e7df      	b.n	8014d0e <_printf_float+0x3ee>
 8014d4e:	2301      	movs	r3, #1
 8014d50:	464a      	mov	r2, r9
 8014d52:	4631      	mov	r1, r6
 8014d54:	4628      	mov	r0, r5
 8014d56:	47b8      	blx	r7
 8014d58:	3001      	adds	r0, #1
 8014d5a:	f43f ae3e 	beq.w	80149da <_printf_float+0xba>
 8014d5e:	f108 0801 	add.w	r8, r8, #1
 8014d62:	68e3      	ldr	r3, [r4, #12]
 8014d64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014d66:	1a9b      	subs	r3, r3, r2
 8014d68:	4543      	cmp	r3, r8
 8014d6a:	dcf0      	bgt.n	8014d4e <_printf_float+0x42e>
 8014d6c:	e6fc      	b.n	8014b68 <_printf_float+0x248>
 8014d6e:	f04f 0800 	mov.w	r8, #0
 8014d72:	f104 0919 	add.w	r9, r4, #25
 8014d76:	e7f4      	b.n	8014d62 <_printf_float+0x442>
 8014d78:	2900      	cmp	r1, #0
 8014d7a:	f43f ae8b 	beq.w	8014a94 <_printf_float+0x174>
 8014d7e:	2300      	movs	r3, #0
 8014d80:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8014d84:	ab09      	add	r3, sp, #36	; 0x24
 8014d86:	9300      	str	r3, [sp, #0]
 8014d88:	ec49 8b10 	vmov	d0, r8, r9
 8014d8c:	6022      	str	r2, [r4, #0]
 8014d8e:	f8cd a004 	str.w	sl, [sp, #4]
 8014d92:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014d96:	4628      	mov	r0, r5
 8014d98:	f7ff fd2d 	bl	80147f6 <__cvt>
 8014d9c:	4680      	mov	r8, r0
 8014d9e:	e648      	b.n	8014a32 <_printf_float+0x112>

08014da0 <_printf_common>:
 8014da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014da4:	4691      	mov	r9, r2
 8014da6:	461f      	mov	r7, r3
 8014da8:	688a      	ldr	r2, [r1, #8]
 8014daa:	690b      	ldr	r3, [r1, #16]
 8014dac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014db0:	4293      	cmp	r3, r2
 8014db2:	bfb8      	it	lt
 8014db4:	4613      	movlt	r3, r2
 8014db6:	f8c9 3000 	str.w	r3, [r9]
 8014dba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014dbe:	4606      	mov	r6, r0
 8014dc0:	460c      	mov	r4, r1
 8014dc2:	b112      	cbz	r2, 8014dca <_printf_common+0x2a>
 8014dc4:	3301      	adds	r3, #1
 8014dc6:	f8c9 3000 	str.w	r3, [r9]
 8014dca:	6823      	ldr	r3, [r4, #0]
 8014dcc:	0699      	lsls	r1, r3, #26
 8014dce:	bf42      	ittt	mi
 8014dd0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8014dd4:	3302      	addmi	r3, #2
 8014dd6:	f8c9 3000 	strmi.w	r3, [r9]
 8014dda:	6825      	ldr	r5, [r4, #0]
 8014ddc:	f015 0506 	ands.w	r5, r5, #6
 8014de0:	d107      	bne.n	8014df2 <_printf_common+0x52>
 8014de2:	f104 0a19 	add.w	sl, r4, #25
 8014de6:	68e3      	ldr	r3, [r4, #12]
 8014de8:	f8d9 2000 	ldr.w	r2, [r9]
 8014dec:	1a9b      	subs	r3, r3, r2
 8014dee:	42ab      	cmp	r3, r5
 8014df0:	dc28      	bgt.n	8014e44 <_printf_common+0xa4>
 8014df2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8014df6:	6822      	ldr	r2, [r4, #0]
 8014df8:	3300      	adds	r3, #0
 8014dfa:	bf18      	it	ne
 8014dfc:	2301      	movne	r3, #1
 8014dfe:	0692      	lsls	r2, r2, #26
 8014e00:	d42d      	bmi.n	8014e5e <_printf_common+0xbe>
 8014e02:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014e06:	4639      	mov	r1, r7
 8014e08:	4630      	mov	r0, r6
 8014e0a:	47c0      	blx	r8
 8014e0c:	3001      	adds	r0, #1
 8014e0e:	d020      	beq.n	8014e52 <_printf_common+0xb2>
 8014e10:	6823      	ldr	r3, [r4, #0]
 8014e12:	68e5      	ldr	r5, [r4, #12]
 8014e14:	f8d9 2000 	ldr.w	r2, [r9]
 8014e18:	f003 0306 	and.w	r3, r3, #6
 8014e1c:	2b04      	cmp	r3, #4
 8014e1e:	bf08      	it	eq
 8014e20:	1aad      	subeq	r5, r5, r2
 8014e22:	68a3      	ldr	r3, [r4, #8]
 8014e24:	6922      	ldr	r2, [r4, #16]
 8014e26:	bf0c      	ite	eq
 8014e28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014e2c:	2500      	movne	r5, #0
 8014e2e:	4293      	cmp	r3, r2
 8014e30:	bfc4      	itt	gt
 8014e32:	1a9b      	subgt	r3, r3, r2
 8014e34:	18ed      	addgt	r5, r5, r3
 8014e36:	f04f 0900 	mov.w	r9, #0
 8014e3a:	341a      	adds	r4, #26
 8014e3c:	454d      	cmp	r5, r9
 8014e3e:	d11a      	bne.n	8014e76 <_printf_common+0xd6>
 8014e40:	2000      	movs	r0, #0
 8014e42:	e008      	b.n	8014e56 <_printf_common+0xb6>
 8014e44:	2301      	movs	r3, #1
 8014e46:	4652      	mov	r2, sl
 8014e48:	4639      	mov	r1, r7
 8014e4a:	4630      	mov	r0, r6
 8014e4c:	47c0      	blx	r8
 8014e4e:	3001      	adds	r0, #1
 8014e50:	d103      	bne.n	8014e5a <_printf_common+0xba>
 8014e52:	f04f 30ff 	mov.w	r0, #4294967295
 8014e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e5a:	3501      	adds	r5, #1
 8014e5c:	e7c3      	b.n	8014de6 <_printf_common+0x46>
 8014e5e:	18e1      	adds	r1, r4, r3
 8014e60:	1c5a      	adds	r2, r3, #1
 8014e62:	2030      	movs	r0, #48	; 0x30
 8014e64:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014e68:	4422      	add	r2, r4
 8014e6a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014e6e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014e72:	3302      	adds	r3, #2
 8014e74:	e7c5      	b.n	8014e02 <_printf_common+0x62>
 8014e76:	2301      	movs	r3, #1
 8014e78:	4622      	mov	r2, r4
 8014e7a:	4639      	mov	r1, r7
 8014e7c:	4630      	mov	r0, r6
 8014e7e:	47c0      	blx	r8
 8014e80:	3001      	adds	r0, #1
 8014e82:	d0e6      	beq.n	8014e52 <_printf_common+0xb2>
 8014e84:	f109 0901 	add.w	r9, r9, #1
 8014e88:	e7d8      	b.n	8014e3c <_printf_common+0x9c>
	...

08014e8c <_printf_i>:
 8014e8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014e90:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8014e94:	460c      	mov	r4, r1
 8014e96:	7e09      	ldrb	r1, [r1, #24]
 8014e98:	b085      	sub	sp, #20
 8014e9a:	296e      	cmp	r1, #110	; 0x6e
 8014e9c:	4617      	mov	r7, r2
 8014e9e:	4606      	mov	r6, r0
 8014ea0:	4698      	mov	r8, r3
 8014ea2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014ea4:	f000 80b3 	beq.w	801500e <_printf_i+0x182>
 8014ea8:	d822      	bhi.n	8014ef0 <_printf_i+0x64>
 8014eaa:	2963      	cmp	r1, #99	; 0x63
 8014eac:	d036      	beq.n	8014f1c <_printf_i+0x90>
 8014eae:	d80a      	bhi.n	8014ec6 <_printf_i+0x3a>
 8014eb0:	2900      	cmp	r1, #0
 8014eb2:	f000 80b9 	beq.w	8015028 <_printf_i+0x19c>
 8014eb6:	2958      	cmp	r1, #88	; 0x58
 8014eb8:	f000 8083 	beq.w	8014fc2 <_printf_i+0x136>
 8014ebc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014ec0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8014ec4:	e032      	b.n	8014f2c <_printf_i+0xa0>
 8014ec6:	2964      	cmp	r1, #100	; 0x64
 8014ec8:	d001      	beq.n	8014ece <_printf_i+0x42>
 8014eca:	2969      	cmp	r1, #105	; 0x69
 8014ecc:	d1f6      	bne.n	8014ebc <_printf_i+0x30>
 8014ece:	6820      	ldr	r0, [r4, #0]
 8014ed0:	6813      	ldr	r3, [r2, #0]
 8014ed2:	0605      	lsls	r5, r0, #24
 8014ed4:	f103 0104 	add.w	r1, r3, #4
 8014ed8:	d52a      	bpl.n	8014f30 <_printf_i+0xa4>
 8014eda:	681b      	ldr	r3, [r3, #0]
 8014edc:	6011      	str	r1, [r2, #0]
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	da03      	bge.n	8014eea <_printf_i+0x5e>
 8014ee2:	222d      	movs	r2, #45	; 0x2d
 8014ee4:	425b      	negs	r3, r3
 8014ee6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8014eea:	486f      	ldr	r0, [pc, #444]	; (80150a8 <_printf_i+0x21c>)
 8014eec:	220a      	movs	r2, #10
 8014eee:	e039      	b.n	8014f64 <_printf_i+0xd8>
 8014ef0:	2973      	cmp	r1, #115	; 0x73
 8014ef2:	f000 809d 	beq.w	8015030 <_printf_i+0x1a4>
 8014ef6:	d808      	bhi.n	8014f0a <_printf_i+0x7e>
 8014ef8:	296f      	cmp	r1, #111	; 0x6f
 8014efa:	d020      	beq.n	8014f3e <_printf_i+0xb2>
 8014efc:	2970      	cmp	r1, #112	; 0x70
 8014efe:	d1dd      	bne.n	8014ebc <_printf_i+0x30>
 8014f00:	6823      	ldr	r3, [r4, #0]
 8014f02:	f043 0320 	orr.w	r3, r3, #32
 8014f06:	6023      	str	r3, [r4, #0]
 8014f08:	e003      	b.n	8014f12 <_printf_i+0x86>
 8014f0a:	2975      	cmp	r1, #117	; 0x75
 8014f0c:	d017      	beq.n	8014f3e <_printf_i+0xb2>
 8014f0e:	2978      	cmp	r1, #120	; 0x78
 8014f10:	d1d4      	bne.n	8014ebc <_printf_i+0x30>
 8014f12:	2378      	movs	r3, #120	; 0x78
 8014f14:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014f18:	4864      	ldr	r0, [pc, #400]	; (80150ac <_printf_i+0x220>)
 8014f1a:	e055      	b.n	8014fc8 <_printf_i+0x13c>
 8014f1c:	6813      	ldr	r3, [r2, #0]
 8014f1e:	1d19      	adds	r1, r3, #4
 8014f20:	681b      	ldr	r3, [r3, #0]
 8014f22:	6011      	str	r1, [r2, #0]
 8014f24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014f28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014f2c:	2301      	movs	r3, #1
 8014f2e:	e08c      	b.n	801504a <_printf_i+0x1be>
 8014f30:	681b      	ldr	r3, [r3, #0]
 8014f32:	6011      	str	r1, [r2, #0]
 8014f34:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014f38:	bf18      	it	ne
 8014f3a:	b21b      	sxthne	r3, r3
 8014f3c:	e7cf      	b.n	8014ede <_printf_i+0x52>
 8014f3e:	6813      	ldr	r3, [r2, #0]
 8014f40:	6825      	ldr	r5, [r4, #0]
 8014f42:	1d18      	adds	r0, r3, #4
 8014f44:	6010      	str	r0, [r2, #0]
 8014f46:	0628      	lsls	r0, r5, #24
 8014f48:	d501      	bpl.n	8014f4e <_printf_i+0xc2>
 8014f4a:	681b      	ldr	r3, [r3, #0]
 8014f4c:	e002      	b.n	8014f54 <_printf_i+0xc8>
 8014f4e:	0668      	lsls	r0, r5, #25
 8014f50:	d5fb      	bpl.n	8014f4a <_printf_i+0xbe>
 8014f52:	881b      	ldrh	r3, [r3, #0]
 8014f54:	4854      	ldr	r0, [pc, #336]	; (80150a8 <_printf_i+0x21c>)
 8014f56:	296f      	cmp	r1, #111	; 0x6f
 8014f58:	bf14      	ite	ne
 8014f5a:	220a      	movne	r2, #10
 8014f5c:	2208      	moveq	r2, #8
 8014f5e:	2100      	movs	r1, #0
 8014f60:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014f64:	6865      	ldr	r5, [r4, #4]
 8014f66:	60a5      	str	r5, [r4, #8]
 8014f68:	2d00      	cmp	r5, #0
 8014f6a:	f2c0 8095 	blt.w	8015098 <_printf_i+0x20c>
 8014f6e:	6821      	ldr	r1, [r4, #0]
 8014f70:	f021 0104 	bic.w	r1, r1, #4
 8014f74:	6021      	str	r1, [r4, #0]
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	d13d      	bne.n	8014ff6 <_printf_i+0x16a>
 8014f7a:	2d00      	cmp	r5, #0
 8014f7c:	f040 808e 	bne.w	801509c <_printf_i+0x210>
 8014f80:	4665      	mov	r5, ip
 8014f82:	2a08      	cmp	r2, #8
 8014f84:	d10b      	bne.n	8014f9e <_printf_i+0x112>
 8014f86:	6823      	ldr	r3, [r4, #0]
 8014f88:	07db      	lsls	r3, r3, #31
 8014f8a:	d508      	bpl.n	8014f9e <_printf_i+0x112>
 8014f8c:	6923      	ldr	r3, [r4, #16]
 8014f8e:	6862      	ldr	r2, [r4, #4]
 8014f90:	429a      	cmp	r2, r3
 8014f92:	bfde      	ittt	le
 8014f94:	2330      	movle	r3, #48	; 0x30
 8014f96:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014f9a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014f9e:	ebac 0305 	sub.w	r3, ip, r5
 8014fa2:	6123      	str	r3, [r4, #16]
 8014fa4:	f8cd 8000 	str.w	r8, [sp]
 8014fa8:	463b      	mov	r3, r7
 8014faa:	aa03      	add	r2, sp, #12
 8014fac:	4621      	mov	r1, r4
 8014fae:	4630      	mov	r0, r6
 8014fb0:	f7ff fef6 	bl	8014da0 <_printf_common>
 8014fb4:	3001      	adds	r0, #1
 8014fb6:	d14d      	bne.n	8015054 <_printf_i+0x1c8>
 8014fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8014fbc:	b005      	add	sp, #20
 8014fbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014fc2:	4839      	ldr	r0, [pc, #228]	; (80150a8 <_printf_i+0x21c>)
 8014fc4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8014fc8:	6813      	ldr	r3, [r2, #0]
 8014fca:	6821      	ldr	r1, [r4, #0]
 8014fcc:	1d1d      	adds	r5, r3, #4
 8014fce:	681b      	ldr	r3, [r3, #0]
 8014fd0:	6015      	str	r5, [r2, #0]
 8014fd2:	060a      	lsls	r2, r1, #24
 8014fd4:	d50b      	bpl.n	8014fee <_printf_i+0x162>
 8014fd6:	07ca      	lsls	r2, r1, #31
 8014fd8:	bf44      	itt	mi
 8014fda:	f041 0120 	orrmi.w	r1, r1, #32
 8014fde:	6021      	strmi	r1, [r4, #0]
 8014fe0:	b91b      	cbnz	r3, 8014fea <_printf_i+0x15e>
 8014fe2:	6822      	ldr	r2, [r4, #0]
 8014fe4:	f022 0220 	bic.w	r2, r2, #32
 8014fe8:	6022      	str	r2, [r4, #0]
 8014fea:	2210      	movs	r2, #16
 8014fec:	e7b7      	b.n	8014f5e <_printf_i+0xd2>
 8014fee:	064d      	lsls	r5, r1, #25
 8014ff0:	bf48      	it	mi
 8014ff2:	b29b      	uxthmi	r3, r3
 8014ff4:	e7ef      	b.n	8014fd6 <_printf_i+0x14a>
 8014ff6:	4665      	mov	r5, ip
 8014ff8:	fbb3 f1f2 	udiv	r1, r3, r2
 8014ffc:	fb02 3311 	mls	r3, r2, r1, r3
 8015000:	5cc3      	ldrb	r3, [r0, r3]
 8015002:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8015006:	460b      	mov	r3, r1
 8015008:	2900      	cmp	r1, #0
 801500a:	d1f5      	bne.n	8014ff8 <_printf_i+0x16c>
 801500c:	e7b9      	b.n	8014f82 <_printf_i+0xf6>
 801500e:	6813      	ldr	r3, [r2, #0]
 8015010:	6825      	ldr	r5, [r4, #0]
 8015012:	6961      	ldr	r1, [r4, #20]
 8015014:	1d18      	adds	r0, r3, #4
 8015016:	6010      	str	r0, [r2, #0]
 8015018:	0628      	lsls	r0, r5, #24
 801501a:	681b      	ldr	r3, [r3, #0]
 801501c:	d501      	bpl.n	8015022 <_printf_i+0x196>
 801501e:	6019      	str	r1, [r3, #0]
 8015020:	e002      	b.n	8015028 <_printf_i+0x19c>
 8015022:	066a      	lsls	r2, r5, #25
 8015024:	d5fb      	bpl.n	801501e <_printf_i+0x192>
 8015026:	8019      	strh	r1, [r3, #0]
 8015028:	2300      	movs	r3, #0
 801502a:	6123      	str	r3, [r4, #16]
 801502c:	4665      	mov	r5, ip
 801502e:	e7b9      	b.n	8014fa4 <_printf_i+0x118>
 8015030:	6813      	ldr	r3, [r2, #0]
 8015032:	1d19      	adds	r1, r3, #4
 8015034:	6011      	str	r1, [r2, #0]
 8015036:	681d      	ldr	r5, [r3, #0]
 8015038:	6862      	ldr	r2, [r4, #4]
 801503a:	2100      	movs	r1, #0
 801503c:	4628      	mov	r0, r5
 801503e:	f7eb f8e7 	bl	8000210 <memchr>
 8015042:	b108      	cbz	r0, 8015048 <_printf_i+0x1bc>
 8015044:	1b40      	subs	r0, r0, r5
 8015046:	6060      	str	r0, [r4, #4]
 8015048:	6863      	ldr	r3, [r4, #4]
 801504a:	6123      	str	r3, [r4, #16]
 801504c:	2300      	movs	r3, #0
 801504e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015052:	e7a7      	b.n	8014fa4 <_printf_i+0x118>
 8015054:	6923      	ldr	r3, [r4, #16]
 8015056:	462a      	mov	r2, r5
 8015058:	4639      	mov	r1, r7
 801505a:	4630      	mov	r0, r6
 801505c:	47c0      	blx	r8
 801505e:	3001      	adds	r0, #1
 8015060:	d0aa      	beq.n	8014fb8 <_printf_i+0x12c>
 8015062:	6823      	ldr	r3, [r4, #0]
 8015064:	079b      	lsls	r3, r3, #30
 8015066:	d413      	bmi.n	8015090 <_printf_i+0x204>
 8015068:	68e0      	ldr	r0, [r4, #12]
 801506a:	9b03      	ldr	r3, [sp, #12]
 801506c:	4298      	cmp	r0, r3
 801506e:	bfb8      	it	lt
 8015070:	4618      	movlt	r0, r3
 8015072:	e7a3      	b.n	8014fbc <_printf_i+0x130>
 8015074:	2301      	movs	r3, #1
 8015076:	464a      	mov	r2, r9
 8015078:	4639      	mov	r1, r7
 801507a:	4630      	mov	r0, r6
 801507c:	47c0      	blx	r8
 801507e:	3001      	adds	r0, #1
 8015080:	d09a      	beq.n	8014fb8 <_printf_i+0x12c>
 8015082:	3501      	adds	r5, #1
 8015084:	68e3      	ldr	r3, [r4, #12]
 8015086:	9a03      	ldr	r2, [sp, #12]
 8015088:	1a9b      	subs	r3, r3, r2
 801508a:	42ab      	cmp	r3, r5
 801508c:	dcf2      	bgt.n	8015074 <_printf_i+0x1e8>
 801508e:	e7eb      	b.n	8015068 <_printf_i+0x1dc>
 8015090:	2500      	movs	r5, #0
 8015092:	f104 0919 	add.w	r9, r4, #25
 8015096:	e7f5      	b.n	8015084 <_printf_i+0x1f8>
 8015098:	2b00      	cmp	r3, #0
 801509a:	d1ac      	bne.n	8014ff6 <_printf_i+0x16a>
 801509c:	7803      	ldrb	r3, [r0, #0]
 801509e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80150a2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80150a6:	e76c      	b.n	8014f82 <_printf_i+0xf6>
 80150a8:	080193e0 	.word	0x080193e0
 80150ac:	080193f1 	.word	0x080193f1

080150b0 <_scanf_float>:
 80150b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150b4:	469a      	mov	sl, r3
 80150b6:	688b      	ldr	r3, [r1, #8]
 80150b8:	4616      	mov	r6, r2
 80150ba:	1e5a      	subs	r2, r3, #1
 80150bc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80150c0:	b087      	sub	sp, #28
 80150c2:	bf83      	ittte	hi
 80150c4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80150c8:	189b      	addhi	r3, r3, r2
 80150ca:	9301      	strhi	r3, [sp, #4]
 80150cc:	2300      	movls	r3, #0
 80150ce:	bf86      	itte	hi
 80150d0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80150d4:	608b      	strhi	r3, [r1, #8]
 80150d6:	9301      	strls	r3, [sp, #4]
 80150d8:	680b      	ldr	r3, [r1, #0]
 80150da:	4688      	mov	r8, r1
 80150dc:	f04f 0b00 	mov.w	fp, #0
 80150e0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80150e4:	f848 3b1c 	str.w	r3, [r8], #28
 80150e8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80150ec:	4607      	mov	r7, r0
 80150ee:	460c      	mov	r4, r1
 80150f0:	4645      	mov	r5, r8
 80150f2:	465a      	mov	r2, fp
 80150f4:	46d9      	mov	r9, fp
 80150f6:	f8cd b008 	str.w	fp, [sp, #8]
 80150fa:	68a1      	ldr	r1, [r4, #8]
 80150fc:	b181      	cbz	r1, 8015120 <_scanf_float+0x70>
 80150fe:	6833      	ldr	r3, [r6, #0]
 8015100:	781b      	ldrb	r3, [r3, #0]
 8015102:	2b49      	cmp	r3, #73	; 0x49
 8015104:	d071      	beq.n	80151ea <_scanf_float+0x13a>
 8015106:	d84d      	bhi.n	80151a4 <_scanf_float+0xf4>
 8015108:	2b39      	cmp	r3, #57	; 0x39
 801510a:	d840      	bhi.n	801518e <_scanf_float+0xde>
 801510c:	2b31      	cmp	r3, #49	; 0x31
 801510e:	f080 8088 	bcs.w	8015222 <_scanf_float+0x172>
 8015112:	2b2d      	cmp	r3, #45	; 0x2d
 8015114:	f000 8090 	beq.w	8015238 <_scanf_float+0x188>
 8015118:	d815      	bhi.n	8015146 <_scanf_float+0x96>
 801511a:	2b2b      	cmp	r3, #43	; 0x2b
 801511c:	f000 808c 	beq.w	8015238 <_scanf_float+0x188>
 8015120:	f1b9 0f00 	cmp.w	r9, #0
 8015124:	d003      	beq.n	801512e <_scanf_float+0x7e>
 8015126:	6823      	ldr	r3, [r4, #0]
 8015128:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801512c:	6023      	str	r3, [r4, #0]
 801512e:	3a01      	subs	r2, #1
 8015130:	2a01      	cmp	r2, #1
 8015132:	f200 80ea 	bhi.w	801530a <_scanf_float+0x25a>
 8015136:	4545      	cmp	r5, r8
 8015138:	f200 80dc 	bhi.w	80152f4 <_scanf_float+0x244>
 801513c:	2601      	movs	r6, #1
 801513e:	4630      	mov	r0, r6
 8015140:	b007      	add	sp, #28
 8015142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015146:	2b2e      	cmp	r3, #46	; 0x2e
 8015148:	f000 809f 	beq.w	801528a <_scanf_float+0x1da>
 801514c:	2b30      	cmp	r3, #48	; 0x30
 801514e:	d1e7      	bne.n	8015120 <_scanf_float+0x70>
 8015150:	6820      	ldr	r0, [r4, #0]
 8015152:	f410 7f80 	tst.w	r0, #256	; 0x100
 8015156:	d064      	beq.n	8015222 <_scanf_float+0x172>
 8015158:	9b01      	ldr	r3, [sp, #4]
 801515a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 801515e:	6020      	str	r0, [r4, #0]
 8015160:	f109 0901 	add.w	r9, r9, #1
 8015164:	b11b      	cbz	r3, 801516e <_scanf_float+0xbe>
 8015166:	3b01      	subs	r3, #1
 8015168:	3101      	adds	r1, #1
 801516a:	9301      	str	r3, [sp, #4]
 801516c:	60a1      	str	r1, [r4, #8]
 801516e:	68a3      	ldr	r3, [r4, #8]
 8015170:	3b01      	subs	r3, #1
 8015172:	60a3      	str	r3, [r4, #8]
 8015174:	6923      	ldr	r3, [r4, #16]
 8015176:	3301      	adds	r3, #1
 8015178:	6123      	str	r3, [r4, #16]
 801517a:	6873      	ldr	r3, [r6, #4]
 801517c:	3b01      	subs	r3, #1
 801517e:	2b00      	cmp	r3, #0
 8015180:	6073      	str	r3, [r6, #4]
 8015182:	f340 80ac 	ble.w	80152de <_scanf_float+0x22e>
 8015186:	6833      	ldr	r3, [r6, #0]
 8015188:	3301      	adds	r3, #1
 801518a:	6033      	str	r3, [r6, #0]
 801518c:	e7b5      	b.n	80150fa <_scanf_float+0x4a>
 801518e:	2b45      	cmp	r3, #69	; 0x45
 8015190:	f000 8085 	beq.w	801529e <_scanf_float+0x1ee>
 8015194:	2b46      	cmp	r3, #70	; 0x46
 8015196:	d06a      	beq.n	801526e <_scanf_float+0x1be>
 8015198:	2b41      	cmp	r3, #65	; 0x41
 801519a:	d1c1      	bne.n	8015120 <_scanf_float+0x70>
 801519c:	2a01      	cmp	r2, #1
 801519e:	d1bf      	bne.n	8015120 <_scanf_float+0x70>
 80151a0:	2202      	movs	r2, #2
 80151a2:	e046      	b.n	8015232 <_scanf_float+0x182>
 80151a4:	2b65      	cmp	r3, #101	; 0x65
 80151a6:	d07a      	beq.n	801529e <_scanf_float+0x1ee>
 80151a8:	d818      	bhi.n	80151dc <_scanf_float+0x12c>
 80151aa:	2b54      	cmp	r3, #84	; 0x54
 80151ac:	d066      	beq.n	801527c <_scanf_float+0x1cc>
 80151ae:	d811      	bhi.n	80151d4 <_scanf_float+0x124>
 80151b0:	2b4e      	cmp	r3, #78	; 0x4e
 80151b2:	d1b5      	bne.n	8015120 <_scanf_float+0x70>
 80151b4:	2a00      	cmp	r2, #0
 80151b6:	d146      	bne.n	8015246 <_scanf_float+0x196>
 80151b8:	f1b9 0f00 	cmp.w	r9, #0
 80151bc:	d145      	bne.n	801524a <_scanf_float+0x19a>
 80151be:	6821      	ldr	r1, [r4, #0]
 80151c0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80151c4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80151c8:	d13f      	bne.n	801524a <_scanf_float+0x19a>
 80151ca:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80151ce:	6021      	str	r1, [r4, #0]
 80151d0:	2201      	movs	r2, #1
 80151d2:	e02e      	b.n	8015232 <_scanf_float+0x182>
 80151d4:	2b59      	cmp	r3, #89	; 0x59
 80151d6:	d01e      	beq.n	8015216 <_scanf_float+0x166>
 80151d8:	2b61      	cmp	r3, #97	; 0x61
 80151da:	e7de      	b.n	801519a <_scanf_float+0xea>
 80151dc:	2b6e      	cmp	r3, #110	; 0x6e
 80151de:	d0e9      	beq.n	80151b4 <_scanf_float+0x104>
 80151e0:	d815      	bhi.n	801520e <_scanf_float+0x15e>
 80151e2:	2b66      	cmp	r3, #102	; 0x66
 80151e4:	d043      	beq.n	801526e <_scanf_float+0x1be>
 80151e6:	2b69      	cmp	r3, #105	; 0x69
 80151e8:	d19a      	bne.n	8015120 <_scanf_float+0x70>
 80151ea:	f1bb 0f00 	cmp.w	fp, #0
 80151ee:	d138      	bne.n	8015262 <_scanf_float+0x1b2>
 80151f0:	f1b9 0f00 	cmp.w	r9, #0
 80151f4:	d197      	bne.n	8015126 <_scanf_float+0x76>
 80151f6:	6821      	ldr	r1, [r4, #0]
 80151f8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80151fc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8015200:	d195      	bne.n	801512e <_scanf_float+0x7e>
 8015202:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015206:	6021      	str	r1, [r4, #0]
 8015208:	f04f 0b01 	mov.w	fp, #1
 801520c:	e011      	b.n	8015232 <_scanf_float+0x182>
 801520e:	2b74      	cmp	r3, #116	; 0x74
 8015210:	d034      	beq.n	801527c <_scanf_float+0x1cc>
 8015212:	2b79      	cmp	r3, #121	; 0x79
 8015214:	d184      	bne.n	8015120 <_scanf_float+0x70>
 8015216:	f1bb 0f07 	cmp.w	fp, #7
 801521a:	d181      	bne.n	8015120 <_scanf_float+0x70>
 801521c:	f04f 0b08 	mov.w	fp, #8
 8015220:	e007      	b.n	8015232 <_scanf_float+0x182>
 8015222:	eb12 0f0b 	cmn.w	r2, fp
 8015226:	f47f af7b 	bne.w	8015120 <_scanf_float+0x70>
 801522a:	6821      	ldr	r1, [r4, #0]
 801522c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8015230:	6021      	str	r1, [r4, #0]
 8015232:	702b      	strb	r3, [r5, #0]
 8015234:	3501      	adds	r5, #1
 8015236:	e79a      	b.n	801516e <_scanf_float+0xbe>
 8015238:	6821      	ldr	r1, [r4, #0]
 801523a:	0608      	lsls	r0, r1, #24
 801523c:	f57f af70 	bpl.w	8015120 <_scanf_float+0x70>
 8015240:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8015244:	e7f4      	b.n	8015230 <_scanf_float+0x180>
 8015246:	2a02      	cmp	r2, #2
 8015248:	d047      	beq.n	80152da <_scanf_float+0x22a>
 801524a:	f1bb 0f01 	cmp.w	fp, #1
 801524e:	d003      	beq.n	8015258 <_scanf_float+0x1a8>
 8015250:	f1bb 0f04 	cmp.w	fp, #4
 8015254:	f47f af64 	bne.w	8015120 <_scanf_float+0x70>
 8015258:	f10b 0b01 	add.w	fp, fp, #1
 801525c:	fa5f fb8b 	uxtb.w	fp, fp
 8015260:	e7e7      	b.n	8015232 <_scanf_float+0x182>
 8015262:	f1bb 0f03 	cmp.w	fp, #3
 8015266:	d0f7      	beq.n	8015258 <_scanf_float+0x1a8>
 8015268:	f1bb 0f05 	cmp.w	fp, #5
 801526c:	e7f2      	b.n	8015254 <_scanf_float+0x1a4>
 801526e:	f1bb 0f02 	cmp.w	fp, #2
 8015272:	f47f af55 	bne.w	8015120 <_scanf_float+0x70>
 8015276:	f04f 0b03 	mov.w	fp, #3
 801527a:	e7da      	b.n	8015232 <_scanf_float+0x182>
 801527c:	f1bb 0f06 	cmp.w	fp, #6
 8015280:	f47f af4e 	bne.w	8015120 <_scanf_float+0x70>
 8015284:	f04f 0b07 	mov.w	fp, #7
 8015288:	e7d3      	b.n	8015232 <_scanf_float+0x182>
 801528a:	6821      	ldr	r1, [r4, #0]
 801528c:	0588      	lsls	r0, r1, #22
 801528e:	f57f af47 	bpl.w	8015120 <_scanf_float+0x70>
 8015292:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8015296:	6021      	str	r1, [r4, #0]
 8015298:	f8cd 9008 	str.w	r9, [sp, #8]
 801529c:	e7c9      	b.n	8015232 <_scanf_float+0x182>
 801529e:	6821      	ldr	r1, [r4, #0]
 80152a0:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80152a4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80152a8:	d006      	beq.n	80152b8 <_scanf_float+0x208>
 80152aa:	0548      	lsls	r0, r1, #21
 80152ac:	f57f af38 	bpl.w	8015120 <_scanf_float+0x70>
 80152b0:	f1b9 0f00 	cmp.w	r9, #0
 80152b4:	f43f af3b 	beq.w	801512e <_scanf_float+0x7e>
 80152b8:	0588      	lsls	r0, r1, #22
 80152ba:	bf58      	it	pl
 80152bc:	9802      	ldrpl	r0, [sp, #8]
 80152be:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80152c2:	bf58      	it	pl
 80152c4:	eba9 0000 	subpl.w	r0, r9, r0
 80152c8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80152cc:	bf58      	it	pl
 80152ce:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80152d2:	6021      	str	r1, [r4, #0]
 80152d4:	f04f 0900 	mov.w	r9, #0
 80152d8:	e7ab      	b.n	8015232 <_scanf_float+0x182>
 80152da:	2203      	movs	r2, #3
 80152dc:	e7a9      	b.n	8015232 <_scanf_float+0x182>
 80152de:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80152e2:	9205      	str	r2, [sp, #20]
 80152e4:	4631      	mov	r1, r6
 80152e6:	4638      	mov	r0, r7
 80152e8:	4798      	blx	r3
 80152ea:	9a05      	ldr	r2, [sp, #20]
 80152ec:	2800      	cmp	r0, #0
 80152ee:	f43f af04 	beq.w	80150fa <_scanf_float+0x4a>
 80152f2:	e715      	b.n	8015120 <_scanf_float+0x70>
 80152f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80152f8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80152fc:	4632      	mov	r2, r6
 80152fe:	4638      	mov	r0, r7
 8015300:	4798      	blx	r3
 8015302:	6923      	ldr	r3, [r4, #16]
 8015304:	3b01      	subs	r3, #1
 8015306:	6123      	str	r3, [r4, #16]
 8015308:	e715      	b.n	8015136 <_scanf_float+0x86>
 801530a:	f10b 33ff 	add.w	r3, fp, #4294967295
 801530e:	2b06      	cmp	r3, #6
 8015310:	d80a      	bhi.n	8015328 <_scanf_float+0x278>
 8015312:	f1bb 0f02 	cmp.w	fp, #2
 8015316:	d968      	bls.n	80153ea <_scanf_float+0x33a>
 8015318:	f1ab 0b03 	sub.w	fp, fp, #3
 801531c:	fa5f fb8b 	uxtb.w	fp, fp
 8015320:	eba5 0b0b 	sub.w	fp, r5, fp
 8015324:	455d      	cmp	r5, fp
 8015326:	d14b      	bne.n	80153c0 <_scanf_float+0x310>
 8015328:	6823      	ldr	r3, [r4, #0]
 801532a:	05da      	lsls	r2, r3, #23
 801532c:	d51f      	bpl.n	801536e <_scanf_float+0x2be>
 801532e:	055b      	lsls	r3, r3, #21
 8015330:	d468      	bmi.n	8015404 <_scanf_float+0x354>
 8015332:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8015336:	6923      	ldr	r3, [r4, #16]
 8015338:	2965      	cmp	r1, #101	; 0x65
 801533a:	f103 33ff 	add.w	r3, r3, #4294967295
 801533e:	f105 3bff 	add.w	fp, r5, #4294967295
 8015342:	6123      	str	r3, [r4, #16]
 8015344:	d00d      	beq.n	8015362 <_scanf_float+0x2b2>
 8015346:	2945      	cmp	r1, #69	; 0x45
 8015348:	d00b      	beq.n	8015362 <_scanf_float+0x2b2>
 801534a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801534e:	4632      	mov	r2, r6
 8015350:	4638      	mov	r0, r7
 8015352:	4798      	blx	r3
 8015354:	6923      	ldr	r3, [r4, #16]
 8015356:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 801535a:	3b01      	subs	r3, #1
 801535c:	f1a5 0b02 	sub.w	fp, r5, #2
 8015360:	6123      	str	r3, [r4, #16]
 8015362:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015366:	4632      	mov	r2, r6
 8015368:	4638      	mov	r0, r7
 801536a:	4798      	blx	r3
 801536c:	465d      	mov	r5, fp
 801536e:	6826      	ldr	r6, [r4, #0]
 8015370:	f016 0610 	ands.w	r6, r6, #16
 8015374:	d17a      	bne.n	801546c <_scanf_float+0x3bc>
 8015376:	702e      	strb	r6, [r5, #0]
 8015378:	6823      	ldr	r3, [r4, #0]
 801537a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801537e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015382:	d142      	bne.n	801540a <_scanf_float+0x35a>
 8015384:	9b02      	ldr	r3, [sp, #8]
 8015386:	eba9 0303 	sub.w	r3, r9, r3
 801538a:	425a      	negs	r2, r3
 801538c:	2b00      	cmp	r3, #0
 801538e:	d149      	bne.n	8015424 <_scanf_float+0x374>
 8015390:	2200      	movs	r2, #0
 8015392:	4641      	mov	r1, r8
 8015394:	4638      	mov	r0, r7
 8015396:	f000 ff0b 	bl	80161b0 <_strtod_r>
 801539a:	6825      	ldr	r5, [r4, #0]
 801539c:	f8da 3000 	ldr.w	r3, [sl]
 80153a0:	f015 0f02 	tst.w	r5, #2
 80153a4:	f103 0204 	add.w	r2, r3, #4
 80153a8:	ec59 8b10 	vmov	r8, r9, d0
 80153ac:	f8ca 2000 	str.w	r2, [sl]
 80153b0:	d043      	beq.n	801543a <_scanf_float+0x38a>
 80153b2:	681b      	ldr	r3, [r3, #0]
 80153b4:	e9c3 8900 	strd	r8, r9, [r3]
 80153b8:	68e3      	ldr	r3, [r4, #12]
 80153ba:	3301      	adds	r3, #1
 80153bc:	60e3      	str	r3, [r4, #12]
 80153be:	e6be      	b.n	801513e <_scanf_float+0x8e>
 80153c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80153c4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80153c8:	4632      	mov	r2, r6
 80153ca:	4638      	mov	r0, r7
 80153cc:	4798      	blx	r3
 80153ce:	6923      	ldr	r3, [r4, #16]
 80153d0:	3b01      	subs	r3, #1
 80153d2:	6123      	str	r3, [r4, #16]
 80153d4:	e7a6      	b.n	8015324 <_scanf_float+0x274>
 80153d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80153da:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80153de:	4632      	mov	r2, r6
 80153e0:	4638      	mov	r0, r7
 80153e2:	4798      	blx	r3
 80153e4:	6923      	ldr	r3, [r4, #16]
 80153e6:	3b01      	subs	r3, #1
 80153e8:	6123      	str	r3, [r4, #16]
 80153ea:	4545      	cmp	r5, r8
 80153ec:	d8f3      	bhi.n	80153d6 <_scanf_float+0x326>
 80153ee:	e6a5      	b.n	801513c <_scanf_float+0x8c>
 80153f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80153f4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80153f8:	4632      	mov	r2, r6
 80153fa:	4638      	mov	r0, r7
 80153fc:	4798      	blx	r3
 80153fe:	6923      	ldr	r3, [r4, #16]
 8015400:	3b01      	subs	r3, #1
 8015402:	6123      	str	r3, [r4, #16]
 8015404:	4545      	cmp	r5, r8
 8015406:	d8f3      	bhi.n	80153f0 <_scanf_float+0x340>
 8015408:	e698      	b.n	801513c <_scanf_float+0x8c>
 801540a:	9b03      	ldr	r3, [sp, #12]
 801540c:	2b00      	cmp	r3, #0
 801540e:	d0bf      	beq.n	8015390 <_scanf_float+0x2e0>
 8015410:	9904      	ldr	r1, [sp, #16]
 8015412:	230a      	movs	r3, #10
 8015414:	4632      	mov	r2, r6
 8015416:	3101      	adds	r1, #1
 8015418:	4638      	mov	r0, r7
 801541a:	f000 ff55 	bl	80162c8 <_strtol_r>
 801541e:	9b03      	ldr	r3, [sp, #12]
 8015420:	9d04      	ldr	r5, [sp, #16]
 8015422:	1ac2      	subs	r2, r0, r3
 8015424:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8015428:	429d      	cmp	r5, r3
 801542a:	bf28      	it	cs
 801542c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8015430:	490f      	ldr	r1, [pc, #60]	; (8015470 <_scanf_float+0x3c0>)
 8015432:	4628      	mov	r0, r5
 8015434:	f000 f858 	bl	80154e8 <siprintf>
 8015438:	e7aa      	b.n	8015390 <_scanf_float+0x2e0>
 801543a:	f015 0504 	ands.w	r5, r5, #4
 801543e:	d1b8      	bne.n	80153b2 <_scanf_float+0x302>
 8015440:	681f      	ldr	r7, [r3, #0]
 8015442:	ee10 2a10 	vmov	r2, s0
 8015446:	464b      	mov	r3, r9
 8015448:	ee10 0a10 	vmov	r0, s0
 801544c:	4649      	mov	r1, r9
 801544e:	f7eb fb85 	bl	8000b5c <__aeabi_dcmpun>
 8015452:	b128      	cbz	r0, 8015460 <_scanf_float+0x3b0>
 8015454:	4628      	mov	r0, r5
 8015456:	f000 f80d 	bl	8015474 <nanf>
 801545a:	ed87 0a00 	vstr	s0, [r7]
 801545e:	e7ab      	b.n	80153b8 <_scanf_float+0x308>
 8015460:	4640      	mov	r0, r8
 8015462:	4649      	mov	r1, r9
 8015464:	f7eb fbd8 	bl	8000c18 <__aeabi_d2f>
 8015468:	6038      	str	r0, [r7, #0]
 801546a:	e7a5      	b.n	80153b8 <_scanf_float+0x308>
 801546c:	2600      	movs	r6, #0
 801546e:	e666      	b.n	801513e <_scanf_float+0x8e>
 8015470:	08019402 	.word	0x08019402

08015474 <nanf>:
 8015474:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801547c <nanf+0x8>
 8015478:	4770      	bx	lr
 801547a:	bf00      	nop
 801547c:	7fc00000 	.word	0x7fc00000

08015480 <sniprintf>:
 8015480:	b40c      	push	{r2, r3}
 8015482:	b530      	push	{r4, r5, lr}
 8015484:	4b17      	ldr	r3, [pc, #92]	; (80154e4 <sniprintf+0x64>)
 8015486:	1e0c      	subs	r4, r1, #0
 8015488:	b09d      	sub	sp, #116	; 0x74
 801548a:	681d      	ldr	r5, [r3, #0]
 801548c:	da08      	bge.n	80154a0 <sniprintf+0x20>
 801548e:	238b      	movs	r3, #139	; 0x8b
 8015490:	602b      	str	r3, [r5, #0]
 8015492:	f04f 30ff 	mov.w	r0, #4294967295
 8015496:	b01d      	add	sp, #116	; 0x74
 8015498:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801549c:	b002      	add	sp, #8
 801549e:	4770      	bx	lr
 80154a0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80154a4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80154a8:	bf14      	ite	ne
 80154aa:	f104 33ff 	addne.w	r3, r4, #4294967295
 80154ae:	4623      	moveq	r3, r4
 80154b0:	9304      	str	r3, [sp, #16]
 80154b2:	9307      	str	r3, [sp, #28]
 80154b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80154b8:	9002      	str	r0, [sp, #8]
 80154ba:	9006      	str	r0, [sp, #24]
 80154bc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80154c0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80154c2:	ab21      	add	r3, sp, #132	; 0x84
 80154c4:	a902      	add	r1, sp, #8
 80154c6:	4628      	mov	r0, r5
 80154c8:	9301      	str	r3, [sp, #4]
 80154ca:	f002 fde7 	bl	801809c <_svfiprintf_r>
 80154ce:	1c43      	adds	r3, r0, #1
 80154d0:	bfbc      	itt	lt
 80154d2:	238b      	movlt	r3, #139	; 0x8b
 80154d4:	602b      	strlt	r3, [r5, #0]
 80154d6:	2c00      	cmp	r4, #0
 80154d8:	d0dd      	beq.n	8015496 <sniprintf+0x16>
 80154da:	9b02      	ldr	r3, [sp, #8]
 80154dc:	2200      	movs	r2, #0
 80154de:	701a      	strb	r2, [r3, #0]
 80154e0:	e7d9      	b.n	8015496 <sniprintf+0x16>
 80154e2:	bf00      	nop
 80154e4:	2000000c 	.word	0x2000000c

080154e8 <siprintf>:
 80154e8:	b40e      	push	{r1, r2, r3}
 80154ea:	b500      	push	{lr}
 80154ec:	b09c      	sub	sp, #112	; 0x70
 80154ee:	ab1d      	add	r3, sp, #116	; 0x74
 80154f0:	9002      	str	r0, [sp, #8]
 80154f2:	9006      	str	r0, [sp, #24]
 80154f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80154f8:	4809      	ldr	r0, [pc, #36]	; (8015520 <siprintf+0x38>)
 80154fa:	9107      	str	r1, [sp, #28]
 80154fc:	9104      	str	r1, [sp, #16]
 80154fe:	4909      	ldr	r1, [pc, #36]	; (8015524 <siprintf+0x3c>)
 8015500:	f853 2b04 	ldr.w	r2, [r3], #4
 8015504:	9105      	str	r1, [sp, #20]
 8015506:	6800      	ldr	r0, [r0, #0]
 8015508:	9301      	str	r3, [sp, #4]
 801550a:	a902      	add	r1, sp, #8
 801550c:	f002 fdc6 	bl	801809c <_svfiprintf_r>
 8015510:	9b02      	ldr	r3, [sp, #8]
 8015512:	2200      	movs	r2, #0
 8015514:	701a      	strb	r2, [r3, #0]
 8015516:	b01c      	add	sp, #112	; 0x70
 8015518:	f85d eb04 	ldr.w	lr, [sp], #4
 801551c:	b003      	add	sp, #12
 801551e:	4770      	bx	lr
 8015520:	2000000c 	.word	0x2000000c
 8015524:	ffff0208 	.word	0xffff0208

08015528 <siscanf>:
 8015528:	b40e      	push	{r1, r2, r3}
 801552a:	b530      	push	{r4, r5, lr}
 801552c:	b09c      	sub	sp, #112	; 0x70
 801552e:	ac1f      	add	r4, sp, #124	; 0x7c
 8015530:	f44f 7201 	mov.w	r2, #516	; 0x204
 8015534:	f854 5b04 	ldr.w	r5, [r4], #4
 8015538:	f8ad 2014 	strh.w	r2, [sp, #20]
 801553c:	9002      	str	r0, [sp, #8]
 801553e:	9006      	str	r0, [sp, #24]
 8015540:	f7ea fe5e 	bl	8000200 <strlen>
 8015544:	4b0b      	ldr	r3, [pc, #44]	; (8015574 <siscanf+0x4c>)
 8015546:	9003      	str	r0, [sp, #12]
 8015548:	9007      	str	r0, [sp, #28]
 801554a:	930b      	str	r3, [sp, #44]	; 0x2c
 801554c:	480a      	ldr	r0, [pc, #40]	; (8015578 <siscanf+0x50>)
 801554e:	9401      	str	r4, [sp, #4]
 8015550:	2300      	movs	r3, #0
 8015552:	930f      	str	r3, [sp, #60]	; 0x3c
 8015554:	9314      	str	r3, [sp, #80]	; 0x50
 8015556:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801555a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801555e:	462a      	mov	r2, r5
 8015560:	4623      	mov	r3, r4
 8015562:	a902      	add	r1, sp, #8
 8015564:	6800      	ldr	r0, [r0, #0]
 8015566:	f002 feeb 	bl	8018340 <__ssvfiscanf_r>
 801556a:	b01c      	add	sp, #112	; 0x70
 801556c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015570:	b003      	add	sp, #12
 8015572:	4770      	bx	lr
 8015574:	0801557d 	.word	0x0801557d
 8015578:	2000000c 	.word	0x2000000c

0801557c <__seofread>:
 801557c:	2000      	movs	r0, #0
 801557e:	4770      	bx	lr

08015580 <strcpy>:
 8015580:	4603      	mov	r3, r0
 8015582:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015586:	f803 2b01 	strb.w	r2, [r3], #1
 801558a:	2a00      	cmp	r2, #0
 801558c:	d1f9      	bne.n	8015582 <strcpy+0x2>
 801558e:	4770      	bx	lr

08015590 <sulp>:
 8015590:	b570      	push	{r4, r5, r6, lr}
 8015592:	4604      	mov	r4, r0
 8015594:	460d      	mov	r5, r1
 8015596:	ec45 4b10 	vmov	d0, r4, r5
 801559a:	4616      	mov	r6, r2
 801559c:	f002 fb3a 	bl	8017c14 <__ulp>
 80155a0:	ec51 0b10 	vmov	r0, r1, d0
 80155a4:	b17e      	cbz	r6, 80155c6 <sulp+0x36>
 80155a6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80155aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80155ae:	2b00      	cmp	r3, #0
 80155b0:	dd09      	ble.n	80155c6 <sulp+0x36>
 80155b2:	051b      	lsls	r3, r3, #20
 80155b4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80155b8:	2400      	movs	r4, #0
 80155ba:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80155be:	4622      	mov	r2, r4
 80155c0:	462b      	mov	r3, r5
 80155c2:	f7eb f831 	bl	8000628 <__aeabi_dmul>
 80155c6:	bd70      	pop	{r4, r5, r6, pc}

080155c8 <_strtod_l>:
 80155c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155cc:	461f      	mov	r7, r3
 80155ce:	b0a1      	sub	sp, #132	; 0x84
 80155d0:	2300      	movs	r3, #0
 80155d2:	4681      	mov	r9, r0
 80155d4:	4638      	mov	r0, r7
 80155d6:	460e      	mov	r6, r1
 80155d8:	9217      	str	r2, [sp, #92]	; 0x5c
 80155da:	931c      	str	r3, [sp, #112]	; 0x70
 80155dc:	f002 f824 	bl	8017628 <__localeconv_l>
 80155e0:	4680      	mov	r8, r0
 80155e2:	6800      	ldr	r0, [r0, #0]
 80155e4:	f7ea fe0c 	bl	8000200 <strlen>
 80155e8:	f04f 0a00 	mov.w	sl, #0
 80155ec:	4604      	mov	r4, r0
 80155ee:	f04f 0b00 	mov.w	fp, #0
 80155f2:	961b      	str	r6, [sp, #108]	; 0x6c
 80155f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80155f6:	781a      	ldrb	r2, [r3, #0]
 80155f8:	2a0d      	cmp	r2, #13
 80155fa:	d832      	bhi.n	8015662 <_strtod_l+0x9a>
 80155fc:	2a09      	cmp	r2, #9
 80155fe:	d236      	bcs.n	801566e <_strtod_l+0xa6>
 8015600:	2a00      	cmp	r2, #0
 8015602:	d03e      	beq.n	8015682 <_strtod_l+0xba>
 8015604:	2300      	movs	r3, #0
 8015606:	930d      	str	r3, [sp, #52]	; 0x34
 8015608:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801560a:	782b      	ldrb	r3, [r5, #0]
 801560c:	2b30      	cmp	r3, #48	; 0x30
 801560e:	f040 80ac 	bne.w	801576a <_strtod_l+0x1a2>
 8015612:	786b      	ldrb	r3, [r5, #1]
 8015614:	2b58      	cmp	r3, #88	; 0x58
 8015616:	d001      	beq.n	801561c <_strtod_l+0x54>
 8015618:	2b78      	cmp	r3, #120	; 0x78
 801561a:	d167      	bne.n	80156ec <_strtod_l+0x124>
 801561c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801561e:	9301      	str	r3, [sp, #4]
 8015620:	ab1c      	add	r3, sp, #112	; 0x70
 8015622:	9300      	str	r3, [sp, #0]
 8015624:	9702      	str	r7, [sp, #8]
 8015626:	ab1d      	add	r3, sp, #116	; 0x74
 8015628:	4a88      	ldr	r2, [pc, #544]	; (801584c <_strtod_l+0x284>)
 801562a:	a91b      	add	r1, sp, #108	; 0x6c
 801562c:	4648      	mov	r0, r9
 801562e:	f001 fd12 	bl	8017056 <__gethex>
 8015632:	f010 0407 	ands.w	r4, r0, #7
 8015636:	4606      	mov	r6, r0
 8015638:	d005      	beq.n	8015646 <_strtod_l+0x7e>
 801563a:	2c06      	cmp	r4, #6
 801563c:	d12b      	bne.n	8015696 <_strtod_l+0xce>
 801563e:	3501      	adds	r5, #1
 8015640:	2300      	movs	r3, #0
 8015642:	951b      	str	r5, [sp, #108]	; 0x6c
 8015644:	930d      	str	r3, [sp, #52]	; 0x34
 8015646:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015648:	2b00      	cmp	r3, #0
 801564a:	f040 859a 	bne.w	8016182 <_strtod_l+0xbba>
 801564e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015650:	b1e3      	cbz	r3, 801568c <_strtod_l+0xc4>
 8015652:	4652      	mov	r2, sl
 8015654:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8015658:	ec43 2b10 	vmov	d0, r2, r3
 801565c:	b021      	add	sp, #132	; 0x84
 801565e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015662:	2a2b      	cmp	r2, #43	; 0x2b
 8015664:	d015      	beq.n	8015692 <_strtod_l+0xca>
 8015666:	2a2d      	cmp	r2, #45	; 0x2d
 8015668:	d004      	beq.n	8015674 <_strtod_l+0xac>
 801566a:	2a20      	cmp	r2, #32
 801566c:	d1ca      	bne.n	8015604 <_strtod_l+0x3c>
 801566e:	3301      	adds	r3, #1
 8015670:	931b      	str	r3, [sp, #108]	; 0x6c
 8015672:	e7bf      	b.n	80155f4 <_strtod_l+0x2c>
 8015674:	2201      	movs	r2, #1
 8015676:	920d      	str	r2, [sp, #52]	; 0x34
 8015678:	1c5a      	adds	r2, r3, #1
 801567a:	921b      	str	r2, [sp, #108]	; 0x6c
 801567c:	785b      	ldrb	r3, [r3, #1]
 801567e:	2b00      	cmp	r3, #0
 8015680:	d1c2      	bne.n	8015608 <_strtod_l+0x40>
 8015682:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015684:	961b      	str	r6, [sp, #108]	; 0x6c
 8015686:	2b00      	cmp	r3, #0
 8015688:	f040 8579 	bne.w	801617e <_strtod_l+0xbb6>
 801568c:	4652      	mov	r2, sl
 801568e:	465b      	mov	r3, fp
 8015690:	e7e2      	b.n	8015658 <_strtod_l+0x90>
 8015692:	2200      	movs	r2, #0
 8015694:	e7ef      	b.n	8015676 <_strtod_l+0xae>
 8015696:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015698:	b13a      	cbz	r2, 80156aa <_strtod_l+0xe2>
 801569a:	2135      	movs	r1, #53	; 0x35
 801569c:	a81e      	add	r0, sp, #120	; 0x78
 801569e:	f002 fbb1 	bl	8017e04 <__copybits>
 80156a2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80156a4:	4648      	mov	r0, r9
 80156a6:	f002 f81d 	bl	80176e4 <_Bfree>
 80156aa:	3c01      	subs	r4, #1
 80156ac:	2c04      	cmp	r4, #4
 80156ae:	d806      	bhi.n	80156be <_strtod_l+0xf6>
 80156b0:	e8df f004 	tbb	[pc, r4]
 80156b4:	1714030a 	.word	0x1714030a
 80156b8:	0a          	.byte	0x0a
 80156b9:	00          	.byte	0x00
 80156ba:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80156be:	0730      	lsls	r0, r6, #28
 80156c0:	d5c1      	bpl.n	8015646 <_strtod_l+0x7e>
 80156c2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80156c6:	e7be      	b.n	8015646 <_strtod_l+0x7e>
 80156c8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80156cc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80156ce:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80156d2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80156d6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80156da:	e7f0      	b.n	80156be <_strtod_l+0xf6>
 80156dc:	f8df b170 	ldr.w	fp, [pc, #368]	; 8015850 <_strtod_l+0x288>
 80156e0:	e7ed      	b.n	80156be <_strtod_l+0xf6>
 80156e2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80156e6:	f04f 3aff 	mov.w	sl, #4294967295
 80156ea:	e7e8      	b.n	80156be <_strtod_l+0xf6>
 80156ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80156ee:	1c5a      	adds	r2, r3, #1
 80156f0:	921b      	str	r2, [sp, #108]	; 0x6c
 80156f2:	785b      	ldrb	r3, [r3, #1]
 80156f4:	2b30      	cmp	r3, #48	; 0x30
 80156f6:	d0f9      	beq.n	80156ec <_strtod_l+0x124>
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d0a4      	beq.n	8015646 <_strtod_l+0x7e>
 80156fc:	2301      	movs	r3, #1
 80156fe:	2500      	movs	r5, #0
 8015700:	9306      	str	r3, [sp, #24]
 8015702:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015704:	9308      	str	r3, [sp, #32]
 8015706:	9507      	str	r5, [sp, #28]
 8015708:	9505      	str	r5, [sp, #20]
 801570a:	220a      	movs	r2, #10
 801570c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801570e:	7807      	ldrb	r7, [r0, #0]
 8015710:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8015714:	b2d9      	uxtb	r1, r3
 8015716:	2909      	cmp	r1, #9
 8015718:	d929      	bls.n	801576e <_strtod_l+0x1a6>
 801571a:	4622      	mov	r2, r4
 801571c:	f8d8 1000 	ldr.w	r1, [r8]
 8015720:	f003 f8f8 	bl	8018914 <strncmp>
 8015724:	2800      	cmp	r0, #0
 8015726:	d031      	beq.n	801578c <_strtod_l+0x1c4>
 8015728:	2000      	movs	r0, #0
 801572a:	9c05      	ldr	r4, [sp, #20]
 801572c:	9004      	str	r0, [sp, #16]
 801572e:	463b      	mov	r3, r7
 8015730:	4602      	mov	r2, r0
 8015732:	2b65      	cmp	r3, #101	; 0x65
 8015734:	d001      	beq.n	801573a <_strtod_l+0x172>
 8015736:	2b45      	cmp	r3, #69	; 0x45
 8015738:	d114      	bne.n	8015764 <_strtod_l+0x19c>
 801573a:	b924      	cbnz	r4, 8015746 <_strtod_l+0x17e>
 801573c:	b910      	cbnz	r0, 8015744 <_strtod_l+0x17c>
 801573e:	9b06      	ldr	r3, [sp, #24]
 8015740:	2b00      	cmp	r3, #0
 8015742:	d09e      	beq.n	8015682 <_strtod_l+0xba>
 8015744:	2400      	movs	r4, #0
 8015746:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8015748:	1c73      	adds	r3, r6, #1
 801574a:	931b      	str	r3, [sp, #108]	; 0x6c
 801574c:	7873      	ldrb	r3, [r6, #1]
 801574e:	2b2b      	cmp	r3, #43	; 0x2b
 8015750:	d078      	beq.n	8015844 <_strtod_l+0x27c>
 8015752:	2b2d      	cmp	r3, #45	; 0x2d
 8015754:	d070      	beq.n	8015838 <_strtod_l+0x270>
 8015756:	f04f 0c00 	mov.w	ip, #0
 801575a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 801575e:	2f09      	cmp	r7, #9
 8015760:	d97c      	bls.n	801585c <_strtod_l+0x294>
 8015762:	961b      	str	r6, [sp, #108]	; 0x6c
 8015764:	f04f 0e00 	mov.w	lr, #0
 8015768:	e09a      	b.n	80158a0 <_strtod_l+0x2d8>
 801576a:	2300      	movs	r3, #0
 801576c:	e7c7      	b.n	80156fe <_strtod_l+0x136>
 801576e:	9905      	ldr	r1, [sp, #20]
 8015770:	2908      	cmp	r1, #8
 8015772:	bfdd      	ittte	le
 8015774:	9907      	ldrle	r1, [sp, #28]
 8015776:	fb02 3301 	mlale	r3, r2, r1, r3
 801577a:	9307      	strle	r3, [sp, #28]
 801577c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8015780:	9b05      	ldr	r3, [sp, #20]
 8015782:	3001      	adds	r0, #1
 8015784:	3301      	adds	r3, #1
 8015786:	9305      	str	r3, [sp, #20]
 8015788:	901b      	str	r0, [sp, #108]	; 0x6c
 801578a:	e7bf      	b.n	801570c <_strtod_l+0x144>
 801578c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801578e:	191a      	adds	r2, r3, r4
 8015790:	921b      	str	r2, [sp, #108]	; 0x6c
 8015792:	9a05      	ldr	r2, [sp, #20]
 8015794:	5d1b      	ldrb	r3, [r3, r4]
 8015796:	2a00      	cmp	r2, #0
 8015798:	d037      	beq.n	801580a <_strtod_l+0x242>
 801579a:	9c05      	ldr	r4, [sp, #20]
 801579c:	4602      	mov	r2, r0
 801579e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80157a2:	2909      	cmp	r1, #9
 80157a4:	d913      	bls.n	80157ce <_strtod_l+0x206>
 80157a6:	2101      	movs	r1, #1
 80157a8:	9104      	str	r1, [sp, #16]
 80157aa:	e7c2      	b.n	8015732 <_strtod_l+0x16a>
 80157ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80157ae:	1c5a      	adds	r2, r3, #1
 80157b0:	921b      	str	r2, [sp, #108]	; 0x6c
 80157b2:	785b      	ldrb	r3, [r3, #1]
 80157b4:	3001      	adds	r0, #1
 80157b6:	2b30      	cmp	r3, #48	; 0x30
 80157b8:	d0f8      	beq.n	80157ac <_strtod_l+0x1e4>
 80157ba:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80157be:	2a08      	cmp	r2, #8
 80157c0:	f200 84e4 	bhi.w	801618c <_strtod_l+0xbc4>
 80157c4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80157c6:	9208      	str	r2, [sp, #32]
 80157c8:	4602      	mov	r2, r0
 80157ca:	2000      	movs	r0, #0
 80157cc:	4604      	mov	r4, r0
 80157ce:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80157d2:	f100 0101 	add.w	r1, r0, #1
 80157d6:	d012      	beq.n	80157fe <_strtod_l+0x236>
 80157d8:	440a      	add	r2, r1
 80157da:	eb00 0c04 	add.w	ip, r0, r4
 80157de:	4621      	mov	r1, r4
 80157e0:	270a      	movs	r7, #10
 80157e2:	458c      	cmp	ip, r1
 80157e4:	d113      	bne.n	801580e <_strtod_l+0x246>
 80157e6:	1821      	adds	r1, r4, r0
 80157e8:	2908      	cmp	r1, #8
 80157ea:	f104 0401 	add.w	r4, r4, #1
 80157ee:	4404      	add	r4, r0
 80157f0:	dc19      	bgt.n	8015826 <_strtod_l+0x25e>
 80157f2:	9b07      	ldr	r3, [sp, #28]
 80157f4:	210a      	movs	r1, #10
 80157f6:	fb01 e303 	mla	r3, r1, r3, lr
 80157fa:	9307      	str	r3, [sp, #28]
 80157fc:	2100      	movs	r1, #0
 80157fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015800:	1c58      	adds	r0, r3, #1
 8015802:	901b      	str	r0, [sp, #108]	; 0x6c
 8015804:	785b      	ldrb	r3, [r3, #1]
 8015806:	4608      	mov	r0, r1
 8015808:	e7c9      	b.n	801579e <_strtod_l+0x1d6>
 801580a:	9805      	ldr	r0, [sp, #20]
 801580c:	e7d3      	b.n	80157b6 <_strtod_l+0x1ee>
 801580e:	2908      	cmp	r1, #8
 8015810:	f101 0101 	add.w	r1, r1, #1
 8015814:	dc03      	bgt.n	801581e <_strtod_l+0x256>
 8015816:	9b07      	ldr	r3, [sp, #28]
 8015818:	437b      	muls	r3, r7
 801581a:	9307      	str	r3, [sp, #28]
 801581c:	e7e1      	b.n	80157e2 <_strtod_l+0x21a>
 801581e:	2910      	cmp	r1, #16
 8015820:	bfd8      	it	le
 8015822:	437d      	mulle	r5, r7
 8015824:	e7dd      	b.n	80157e2 <_strtod_l+0x21a>
 8015826:	2c10      	cmp	r4, #16
 8015828:	bfdc      	itt	le
 801582a:	210a      	movle	r1, #10
 801582c:	fb01 e505 	mlale	r5, r1, r5, lr
 8015830:	e7e4      	b.n	80157fc <_strtod_l+0x234>
 8015832:	2301      	movs	r3, #1
 8015834:	9304      	str	r3, [sp, #16]
 8015836:	e781      	b.n	801573c <_strtod_l+0x174>
 8015838:	f04f 0c01 	mov.w	ip, #1
 801583c:	1cb3      	adds	r3, r6, #2
 801583e:	931b      	str	r3, [sp, #108]	; 0x6c
 8015840:	78b3      	ldrb	r3, [r6, #2]
 8015842:	e78a      	b.n	801575a <_strtod_l+0x192>
 8015844:	f04f 0c00 	mov.w	ip, #0
 8015848:	e7f8      	b.n	801583c <_strtod_l+0x274>
 801584a:	bf00      	nop
 801584c:	08019408 	.word	0x08019408
 8015850:	7ff00000 	.word	0x7ff00000
 8015854:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015856:	1c5f      	adds	r7, r3, #1
 8015858:	971b      	str	r7, [sp, #108]	; 0x6c
 801585a:	785b      	ldrb	r3, [r3, #1]
 801585c:	2b30      	cmp	r3, #48	; 0x30
 801585e:	d0f9      	beq.n	8015854 <_strtod_l+0x28c>
 8015860:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8015864:	2f08      	cmp	r7, #8
 8015866:	f63f af7d 	bhi.w	8015764 <_strtod_l+0x19c>
 801586a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801586e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015870:	930a      	str	r3, [sp, #40]	; 0x28
 8015872:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015874:	1c5f      	adds	r7, r3, #1
 8015876:	971b      	str	r7, [sp, #108]	; 0x6c
 8015878:	785b      	ldrb	r3, [r3, #1]
 801587a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 801587e:	f1b8 0f09 	cmp.w	r8, #9
 8015882:	d937      	bls.n	80158f4 <_strtod_l+0x32c>
 8015884:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015886:	1a7f      	subs	r7, r7, r1
 8015888:	2f08      	cmp	r7, #8
 801588a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801588e:	dc37      	bgt.n	8015900 <_strtod_l+0x338>
 8015890:	45be      	cmp	lr, r7
 8015892:	bfa8      	it	ge
 8015894:	46be      	movge	lr, r7
 8015896:	f1bc 0f00 	cmp.w	ip, #0
 801589a:	d001      	beq.n	80158a0 <_strtod_l+0x2d8>
 801589c:	f1ce 0e00 	rsb	lr, lr, #0
 80158a0:	2c00      	cmp	r4, #0
 80158a2:	d151      	bne.n	8015948 <_strtod_l+0x380>
 80158a4:	2800      	cmp	r0, #0
 80158a6:	f47f aece 	bne.w	8015646 <_strtod_l+0x7e>
 80158aa:	9a06      	ldr	r2, [sp, #24]
 80158ac:	2a00      	cmp	r2, #0
 80158ae:	f47f aeca 	bne.w	8015646 <_strtod_l+0x7e>
 80158b2:	9a04      	ldr	r2, [sp, #16]
 80158b4:	2a00      	cmp	r2, #0
 80158b6:	f47f aee4 	bne.w	8015682 <_strtod_l+0xba>
 80158ba:	2b4e      	cmp	r3, #78	; 0x4e
 80158bc:	d027      	beq.n	801590e <_strtod_l+0x346>
 80158be:	dc21      	bgt.n	8015904 <_strtod_l+0x33c>
 80158c0:	2b49      	cmp	r3, #73	; 0x49
 80158c2:	f47f aede 	bne.w	8015682 <_strtod_l+0xba>
 80158c6:	49a0      	ldr	r1, [pc, #640]	; (8015b48 <_strtod_l+0x580>)
 80158c8:	a81b      	add	r0, sp, #108	; 0x6c
 80158ca:	f001 fdf7 	bl	80174bc <__match>
 80158ce:	2800      	cmp	r0, #0
 80158d0:	f43f aed7 	beq.w	8015682 <_strtod_l+0xba>
 80158d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80158d6:	499d      	ldr	r1, [pc, #628]	; (8015b4c <_strtod_l+0x584>)
 80158d8:	3b01      	subs	r3, #1
 80158da:	a81b      	add	r0, sp, #108	; 0x6c
 80158dc:	931b      	str	r3, [sp, #108]	; 0x6c
 80158de:	f001 fded 	bl	80174bc <__match>
 80158e2:	b910      	cbnz	r0, 80158ea <_strtod_l+0x322>
 80158e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80158e6:	3301      	adds	r3, #1
 80158e8:	931b      	str	r3, [sp, #108]	; 0x6c
 80158ea:	f8df b274 	ldr.w	fp, [pc, #628]	; 8015b60 <_strtod_l+0x598>
 80158ee:	f04f 0a00 	mov.w	sl, #0
 80158f2:	e6a8      	b.n	8015646 <_strtod_l+0x7e>
 80158f4:	210a      	movs	r1, #10
 80158f6:	fb01 3e0e 	mla	lr, r1, lr, r3
 80158fa:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80158fe:	e7b8      	b.n	8015872 <_strtod_l+0x2aa>
 8015900:	46be      	mov	lr, r7
 8015902:	e7c8      	b.n	8015896 <_strtod_l+0x2ce>
 8015904:	2b69      	cmp	r3, #105	; 0x69
 8015906:	d0de      	beq.n	80158c6 <_strtod_l+0x2fe>
 8015908:	2b6e      	cmp	r3, #110	; 0x6e
 801590a:	f47f aeba 	bne.w	8015682 <_strtod_l+0xba>
 801590e:	4990      	ldr	r1, [pc, #576]	; (8015b50 <_strtod_l+0x588>)
 8015910:	a81b      	add	r0, sp, #108	; 0x6c
 8015912:	f001 fdd3 	bl	80174bc <__match>
 8015916:	2800      	cmp	r0, #0
 8015918:	f43f aeb3 	beq.w	8015682 <_strtod_l+0xba>
 801591c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801591e:	781b      	ldrb	r3, [r3, #0]
 8015920:	2b28      	cmp	r3, #40	; 0x28
 8015922:	d10e      	bne.n	8015942 <_strtod_l+0x37a>
 8015924:	aa1e      	add	r2, sp, #120	; 0x78
 8015926:	498b      	ldr	r1, [pc, #556]	; (8015b54 <_strtod_l+0x58c>)
 8015928:	a81b      	add	r0, sp, #108	; 0x6c
 801592a:	f001 fddb 	bl	80174e4 <__hexnan>
 801592e:	2805      	cmp	r0, #5
 8015930:	d107      	bne.n	8015942 <_strtod_l+0x37a>
 8015932:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015934:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8015938:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801593c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8015940:	e681      	b.n	8015646 <_strtod_l+0x7e>
 8015942:	f8df b224 	ldr.w	fp, [pc, #548]	; 8015b68 <_strtod_l+0x5a0>
 8015946:	e7d2      	b.n	80158ee <_strtod_l+0x326>
 8015948:	ebae 0302 	sub.w	r3, lr, r2
 801594c:	9306      	str	r3, [sp, #24]
 801594e:	9b05      	ldr	r3, [sp, #20]
 8015950:	9807      	ldr	r0, [sp, #28]
 8015952:	2b00      	cmp	r3, #0
 8015954:	bf08      	it	eq
 8015956:	4623      	moveq	r3, r4
 8015958:	2c10      	cmp	r4, #16
 801595a:	9305      	str	r3, [sp, #20]
 801595c:	46a0      	mov	r8, r4
 801595e:	bfa8      	it	ge
 8015960:	f04f 0810 	movge.w	r8, #16
 8015964:	f7ea fde6 	bl	8000534 <__aeabi_ui2d>
 8015968:	2c09      	cmp	r4, #9
 801596a:	4682      	mov	sl, r0
 801596c:	468b      	mov	fp, r1
 801596e:	dc13      	bgt.n	8015998 <_strtod_l+0x3d0>
 8015970:	9b06      	ldr	r3, [sp, #24]
 8015972:	2b00      	cmp	r3, #0
 8015974:	f43f ae67 	beq.w	8015646 <_strtod_l+0x7e>
 8015978:	9b06      	ldr	r3, [sp, #24]
 801597a:	dd7a      	ble.n	8015a72 <_strtod_l+0x4aa>
 801597c:	2b16      	cmp	r3, #22
 801597e:	dc61      	bgt.n	8015a44 <_strtod_l+0x47c>
 8015980:	4a75      	ldr	r2, [pc, #468]	; (8015b58 <_strtod_l+0x590>)
 8015982:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8015986:	e9de 0100 	ldrd	r0, r1, [lr]
 801598a:	4652      	mov	r2, sl
 801598c:	465b      	mov	r3, fp
 801598e:	f7ea fe4b 	bl	8000628 <__aeabi_dmul>
 8015992:	4682      	mov	sl, r0
 8015994:	468b      	mov	fp, r1
 8015996:	e656      	b.n	8015646 <_strtod_l+0x7e>
 8015998:	4b6f      	ldr	r3, [pc, #444]	; (8015b58 <_strtod_l+0x590>)
 801599a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801599e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80159a2:	f7ea fe41 	bl	8000628 <__aeabi_dmul>
 80159a6:	4606      	mov	r6, r0
 80159a8:	4628      	mov	r0, r5
 80159aa:	460f      	mov	r7, r1
 80159ac:	f7ea fdc2 	bl	8000534 <__aeabi_ui2d>
 80159b0:	4602      	mov	r2, r0
 80159b2:	460b      	mov	r3, r1
 80159b4:	4630      	mov	r0, r6
 80159b6:	4639      	mov	r1, r7
 80159b8:	f7ea fc80 	bl	80002bc <__adddf3>
 80159bc:	2c0f      	cmp	r4, #15
 80159be:	4682      	mov	sl, r0
 80159c0:	468b      	mov	fp, r1
 80159c2:	ddd5      	ble.n	8015970 <_strtod_l+0x3a8>
 80159c4:	9b06      	ldr	r3, [sp, #24]
 80159c6:	eba4 0808 	sub.w	r8, r4, r8
 80159ca:	4498      	add	r8, r3
 80159cc:	f1b8 0f00 	cmp.w	r8, #0
 80159d0:	f340 8096 	ble.w	8015b00 <_strtod_l+0x538>
 80159d4:	f018 030f 	ands.w	r3, r8, #15
 80159d8:	d00a      	beq.n	80159f0 <_strtod_l+0x428>
 80159da:	495f      	ldr	r1, [pc, #380]	; (8015b58 <_strtod_l+0x590>)
 80159dc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80159e0:	4652      	mov	r2, sl
 80159e2:	465b      	mov	r3, fp
 80159e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80159e8:	f7ea fe1e 	bl	8000628 <__aeabi_dmul>
 80159ec:	4682      	mov	sl, r0
 80159ee:	468b      	mov	fp, r1
 80159f0:	f038 080f 	bics.w	r8, r8, #15
 80159f4:	d073      	beq.n	8015ade <_strtod_l+0x516>
 80159f6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80159fa:	dd47      	ble.n	8015a8c <_strtod_l+0x4c4>
 80159fc:	2400      	movs	r4, #0
 80159fe:	46a0      	mov	r8, r4
 8015a00:	9407      	str	r4, [sp, #28]
 8015a02:	9405      	str	r4, [sp, #20]
 8015a04:	2322      	movs	r3, #34	; 0x22
 8015a06:	f8df b158 	ldr.w	fp, [pc, #344]	; 8015b60 <_strtod_l+0x598>
 8015a0a:	f8c9 3000 	str.w	r3, [r9]
 8015a0e:	f04f 0a00 	mov.w	sl, #0
 8015a12:	9b07      	ldr	r3, [sp, #28]
 8015a14:	2b00      	cmp	r3, #0
 8015a16:	f43f ae16 	beq.w	8015646 <_strtod_l+0x7e>
 8015a1a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015a1c:	4648      	mov	r0, r9
 8015a1e:	f001 fe61 	bl	80176e4 <_Bfree>
 8015a22:	9905      	ldr	r1, [sp, #20]
 8015a24:	4648      	mov	r0, r9
 8015a26:	f001 fe5d 	bl	80176e4 <_Bfree>
 8015a2a:	4641      	mov	r1, r8
 8015a2c:	4648      	mov	r0, r9
 8015a2e:	f001 fe59 	bl	80176e4 <_Bfree>
 8015a32:	9907      	ldr	r1, [sp, #28]
 8015a34:	4648      	mov	r0, r9
 8015a36:	f001 fe55 	bl	80176e4 <_Bfree>
 8015a3a:	4621      	mov	r1, r4
 8015a3c:	4648      	mov	r0, r9
 8015a3e:	f001 fe51 	bl	80176e4 <_Bfree>
 8015a42:	e600      	b.n	8015646 <_strtod_l+0x7e>
 8015a44:	9a06      	ldr	r2, [sp, #24]
 8015a46:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8015a4a:	4293      	cmp	r3, r2
 8015a4c:	dbba      	blt.n	80159c4 <_strtod_l+0x3fc>
 8015a4e:	4d42      	ldr	r5, [pc, #264]	; (8015b58 <_strtod_l+0x590>)
 8015a50:	f1c4 040f 	rsb	r4, r4, #15
 8015a54:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8015a58:	4652      	mov	r2, sl
 8015a5a:	465b      	mov	r3, fp
 8015a5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015a60:	f7ea fde2 	bl	8000628 <__aeabi_dmul>
 8015a64:	9b06      	ldr	r3, [sp, #24]
 8015a66:	1b1c      	subs	r4, r3, r4
 8015a68:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8015a6c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015a70:	e78d      	b.n	801598e <_strtod_l+0x3c6>
 8015a72:	f113 0f16 	cmn.w	r3, #22
 8015a76:	dba5      	blt.n	80159c4 <_strtod_l+0x3fc>
 8015a78:	4a37      	ldr	r2, [pc, #220]	; (8015b58 <_strtod_l+0x590>)
 8015a7a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8015a7e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8015a82:	4650      	mov	r0, sl
 8015a84:	4659      	mov	r1, fp
 8015a86:	f7ea fef9 	bl	800087c <__aeabi_ddiv>
 8015a8a:	e782      	b.n	8015992 <_strtod_l+0x3ca>
 8015a8c:	2300      	movs	r3, #0
 8015a8e:	4e33      	ldr	r6, [pc, #204]	; (8015b5c <_strtod_l+0x594>)
 8015a90:	ea4f 1828 	mov.w	r8, r8, asr #4
 8015a94:	4650      	mov	r0, sl
 8015a96:	4659      	mov	r1, fp
 8015a98:	461d      	mov	r5, r3
 8015a9a:	f1b8 0f01 	cmp.w	r8, #1
 8015a9e:	dc21      	bgt.n	8015ae4 <_strtod_l+0x51c>
 8015aa0:	b10b      	cbz	r3, 8015aa6 <_strtod_l+0x4de>
 8015aa2:	4682      	mov	sl, r0
 8015aa4:	468b      	mov	fp, r1
 8015aa6:	4b2d      	ldr	r3, [pc, #180]	; (8015b5c <_strtod_l+0x594>)
 8015aa8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8015aac:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8015ab0:	4652      	mov	r2, sl
 8015ab2:	465b      	mov	r3, fp
 8015ab4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015ab8:	f7ea fdb6 	bl	8000628 <__aeabi_dmul>
 8015abc:	4b28      	ldr	r3, [pc, #160]	; (8015b60 <_strtod_l+0x598>)
 8015abe:	460a      	mov	r2, r1
 8015ac0:	400b      	ands	r3, r1
 8015ac2:	4928      	ldr	r1, [pc, #160]	; (8015b64 <_strtod_l+0x59c>)
 8015ac4:	428b      	cmp	r3, r1
 8015ac6:	4682      	mov	sl, r0
 8015ac8:	d898      	bhi.n	80159fc <_strtod_l+0x434>
 8015aca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8015ace:	428b      	cmp	r3, r1
 8015ad0:	bf86      	itte	hi
 8015ad2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8015b6c <_strtod_l+0x5a4>
 8015ad6:	f04f 3aff 	movhi.w	sl, #4294967295
 8015ada:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8015ade:	2300      	movs	r3, #0
 8015ae0:	9304      	str	r3, [sp, #16]
 8015ae2:	e077      	b.n	8015bd4 <_strtod_l+0x60c>
 8015ae4:	f018 0f01 	tst.w	r8, #1
 8015ae8:	d006      	beq.n	8015af8 <_strtod_l+0x530>
 8015aea:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8015aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015af2:	f7ea fd99 	bl	8000628 <__aeabi_dmul>
 8015af6:	2301      	movs	r3, #1
 8015af8:	3501      	adds	r5, #1
 8015afa:	ea4f 0868 	mov.w	r8, r8, asr #1
 8015afe:	e7cc      	b.n	8015a9a <_strtod_l+0x4d2>
 8015b00:	d0ed      	beq.n	8015ade <_strtod_l+0x516>
 8015b02:	f1c8 0800 	rsb	r8, r8, #0
 8015b06:	f018 020f 	ands.w	r2, r8, #15
 8015b0a:	d00a      	beq.n	8015b22 <_strtod_l+0x55a>
 8015b0c:	4b12      	ldr	r3, [pc, #72]	; (8015b58 <_strtod_l+0x590>)
 8015b0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015b12:	4650      	mov	r0, sl
 8015b14:	4659      	mov	r1, fp
 8015b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b1a:	f7ea feaf 	bl	800087c <__aeabi_ddiv>
 8015b1e:	4682      	mov	sl, r0
 8015b20:	468b      	mov	fp, r1
 8015b22:	ea5f 1828 	movs.w	r8, r8, asr #4
 8015b26:	d0da      	beq.n	8015ade <_strtod_l+0x516>
 8015b28:	f1b8 0f1f 	cmp.w	r8, #31
 8015b2c:	dd20      	ble.n	8015b70 <_strtod_l+0x5a8>
 8015b2e:	2400      	movs	r4, #0
 8015b30:	46a0      	mov	r8, r4
 8015b32:	9407      	str	r4, [sp, #28]
 8015b34:	9405      	str	r4, [sp, #20]
 8015b36:	2322      	movs	r3, #34	; 0x22
 8015b38:	f04f 0a00 	mov.w	sl, #0
 8015b3c:	f04f 0b00 	mov.w	fp, #0
 8015b40:	f8c9 3000 	str.w	r3, [r9]
 8015b44:	e765      	b.n	8015a12 <_strtod_l+0x44a>
 8015b46:	bf00      	nop
 8015b48:	080193d5 	.word	0x080193d5
 8015b4c:	0801945b 	.word	0x0801945b
 8015b50:	080193dd 	.word	0x080193dd
 8015b54:	0801941c 	.word	0x0801941c
 8015b58:	08019500 	.word	0x08019500
 8015b5c:	080194d8 	.word	0x080194d8
 8015b60:	7ff00000 	.word	0x7ff00000
 8015b64:	7ca00000 	.word	0x7ca00000
 8015b68:	fff80000 	.word	0xfff80000
 8015b6c:	7fefffff 	.word	0x7fefffff
 8015b70:	f018 0310 	ands.w	r3, r8, #16
 8015b74:	bf18      	it	ne
 8015b76:	236a      	movne	r3, #106	; 0x6a
 8015b78:	4da0      	ldr	r5, [pc, #640]	; (8015dfc <_strtod_l+0x834>)
 8015b7a:	9304      	str	r3, [sp, #16]
 8015b7c:	4650      	mov	r0, sl
 8015b7e:	4659      	mov	r1, fp
 8015b80:	2300      	movs	r3, #0
 8015b82:	f1b8 0f00 	cmp.w	r8, #0
 8015b86:	f300 810a 	bgt.w	8015d9e <_strtod_l+0x7d6>
 8015b8a:	b10b      	cbz	r3, 8015b90 <_strtod_l+0x5c8>
 8015b8c:	4682      	mov	sl, r0
 8015b8e:	468b      	mov	fp, r1
 8015b90:	9b04      	ldr	r3, [sp, #16]
 8015b92:	b1bb      	cbz	r3, 8015bc4 <_strtod_l+0x5fc>
 8015b94:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8015b98:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	4659      	mov	r1, fp
 8015ba0:	dd10      	ble.n	8015bc4 <_strtod_l+0x5fc>
 8015ba2:	2b1f      	cmp	r3, #31
 8015ba4:	f340 8107 	ble.w	8015db6 <_strtod_l+0x7ee>
 8015ba8:	2b34      	cmp	r3, #52	; 0x34
 8015baa:	bfde      	ittt	le
 8015bac:	3b20      	suble	r3, #32
 8015bae:	f04f 32ff 	movle.w	r2, #4294967295
 8015bb2:	fa02 f303 	lslle.w	r3, r2, r3
 8015bb6:	f04f 0a00 	mov.w	sl, #0
 8015bba:	bfcc      	ite	gt
 8015bbc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8015bc0:	ea03 0b01 	andle.w	fp, r3, r1
 8015bc4:	2200      	movs	r2, #0
 8015bc6:	2300      	movs	r3, #0
 8015bc8:	4650      	mov	r0, sl
 8015bca:	4659      	mov	r1, fp
 8015bcc:	f7ea ff94 	bl	8000af8 <__aeabi_dcmpeq>
 8015bd0:	2800      	cmp	r0, #0
 8015bd2:	d1ac      	bne.n	8015b2e <_strtod_l+0x566>
 8015bd4:	9b07      	ldr	r3, [sp, #28]
 8015bd6:	9300      	str	r3, [sp, #0]
 8015bd8:	9a05      	ldr	r2, [sp, #20]
 8015bda:	9908      	ldr	r1, [sp, #32]
 8015bdc:	4623      	mov	r3, r4
 8015bde:	4648      	mov	r0, r9
 8015be0:	f001 fdd2 	bl	8017788 <__s2b>
 8015be4:	9007      	str	r0, [sp, #28]
 8015be6:	2800      	cmp	r0, #0
 8015be8:	f43f af08 	beq.w	80159fc <_strtod_l+0x434>
 8015bec:	9a06      	ldr	r2, [sp, #24]
 8015bee:	9b06      	ldr	r3, [sp, #24]
 8015bf0:	2a00      	cmp	r2, #0
 8015bf2:	f1c3 0300 	rsb	r3, r3, #0
 8015bf6:	bfa8      	it	ge
 8015bf8:	2300      	movge	r3, #0
 8015bfa:	930e      	str	r3, [sp, #56]	; 0x38
 8015bfc:	2400      	movs	r4, #0
 8015bfe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8015c02:	9316      	str	r3, [sp, #88]	; 0x58
 8015c04:	46a0      	mov	r8, r4
 8015c06:	9b07      	ldr	r3, [sp, #28]
 8015c08:	4648      	mov	r0, r9
 8015c0a:	6859      	ldr	r1, [r3, #4]
 8015c0c:	f001 fd36 	bl	801767c <_Balloc>
 8015c10:	9005      	str	r0, [sp, #20]
 8015c12:	2800      	cmp	r0, #0
 8015c14:	f43f aef6 	beq.w	8015a04 <_strtod_l+0x43c>
 8015c18:	9b07      	ldr	r3, [sp, #28]
 8015c1a:	691a      	ldr	r2, [r3, #16]
 8015c1c:	3202      	adds	r2, #2
 8015c1e:	f103 010c 	add.w	r1, r3, #12
 8015c22:	0092      	lsls	r2, r2, #2
 8015c24:	300c      	adds	r0, #12
 8015c26:	f7fe fdd3 	bl	80147d0 <memcpy>
 8015c2a:	aa1e      	add	r2, sp, #120	; 0x78
 8015c2c:	a91d      	add	r1, sp, #116	; 0x74
 8015c2e:	ec4b ab10 	vmov	d0, sl, fp
 8015c32:	4648      	mov	r0, r9
 8015c34:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8015c38:	f002 f862 	bl	8017d00 <__d2b>
 8015c3c:	901c      	str	r0, [sp, #112]	; 0x70
 8015c3e:	2800      	cmp	r0, #0
 8015c40:	f43f aee0 	beq.w	8015a04 <_strtod_l+0x43c>
 8015c44:	2101      	movs	r1, #1
 8015c46:	4648      	mov	r0, r9
 8015c48:	f001 fe2a 	bl	80178a0 <__i2b>
 8015c4c:	4680      	mov	r8, r0
 8015c4e:	2800      	cmp	r0, #0
 8015c50:	f43f aed8 	beq.w	8015a04 <_strtod_l+0x43c>
 8015c54:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8015c56:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8015c58:	2e00      	cmp	r6, #0
 8015c5a:	bfab      	itete	ge
 8015c5c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8015c5e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8015c60:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8015c62:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8015c64:	bfac      	ite	ge
 8015c66:	18f7      	addge	r7, r6, r3
 8015c68:	1b9d      	sublt	r5, r3, r6
 8015c6a:	9b04      	ldr	r3, [sp, #16]
 8015c6c:	1af6      	subs	r6, r6, r3
 8015c6e:	4416      	add	r6, r2
 8015c70:	4b63      	ldr	r3, [pc, #396]	; (8015e00 <_strtod_l+0x838>)
 8015c72:	3e01      	subs	r6, #1
 8015c74:	429e      	cmp	r6, r3
 8015c76:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8015c7a:	f280 80af 	bge.w	8015ddc <_strtod_l+0x814>
 8015c7e:	1b9b      	subs	r3, r3, r6
 8015c80:	2b1f      	cmp	r3, #31
 8015c82:	eba2 0203 	sub.w	r2, r2, r3
 8015c86:	f04f 0101 	mov.w	r1, #1
 8015c8a:	f300 809b 	bgt.w	8015dc4 <_strtod_l+0x7fc>
 8015c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8015c92:	930f      	str	r3, [sp, #60]	; 0x3c
 8015c94:	2300      	movs	r3, #0
 8015c96:	930a      	str	r3, [sp, #40]	; 0x28
 8015c98:	18be      	adds	r6, r7, r2
 8015c9a:	9b04      	ldr	r3, [sp, #16]
 8015c9c:	42b7      	cmp	r7, r6
 8015c9e:	4415      	add	r5, r2
 8015ca0:	441d      	add	r5, r3
 8015ca2:	463b      	mov	r3, r7
 8015ca4:	bfa8      	it	ge
 8015ca6:	4633      	movge	r3, r6
 8015ca8:	42ab      	cmp	r3, r5
 8015caa:	bfa8      	it	ge
 8015cac:	462b      	movge	r3, r5
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	bfc2      	ittt	gt
 8015cb2:	1af6      	subgt	r6, r6, r3
 8015cb4:	1aed      	subgt	r5, r5, r3
 8015cb6:	1aff      	subgt	r7, r7, r3
 8015cb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015cba:	b1bb      	cbz	r3, 8015cec <_strtod_l+0x724>
 8015cbc:	4641      	mov	r1, r8
 8015cbe:	461a      	mov	r2, r3
 8015cc0:	4648      	mov	r0, r9
 8015cc2:	f001 fe8d 	bl	80179e0 <__pow5mult>
 8015cc6:	4680      	mov	r8, r0
 8015cc8:	2800      	cmp	r0, #0
 8015cca:	f43f ae9b 	beq.w	8015a04 <_strtod_l+0x43c>
 8015cce:	4601      	mov	r1, r0
 8015cd0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015cd2:	4648      	mov	r0, r9
 8015cd4:	f001 fded 	bl	80178b2 <__multiply>
 8015cd8:	900c      	str	r0, [sp, #48]	; 0x30
 8015cda:	2800      	cmp	r0, #0
 8015cdc:	f43f ae92 	beq.w	8015a04 <_strtod_l+0x43c>
 8015ce0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015ce2:	4648      	mov	r0, r9
 8015ce4:	f001 fcfe 	bl	80176e4 <_Bfree>
 8015ce8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015cea:	931c      	str	r3, [sp, #112]	; 0x70
 8015cec:	2e00      	cmp	r6, #0
 8015cee:	dc7a      	bgt.n	8015de6 <_strtod_l+0x81e>
 8015cf0:	9b06      	ldr	r3, [sp, #24]
 8015cf2:	2b00      	cmp	r3, #0
 8015cf4:	dd08      	ble.n	8015d08 <_strtod_l+0x740>
 8015cf6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015cf8:	9905      	ldr	r1, [sp, #20]
 8015cfa:	4648      	mov	r0, r9
 8015cfc:	f001 fe70 	bl	80179e0 <__pow5mult>
 8015d00:	9005      	str	r0, [sp, #20]
 8015d02:	2800      	cmp	r0, #0
 8015d04:	f43f ae7e 	beq.w	8015a04 <_strtod_l+0x43c>
 8015d08:	2d00      	cmp	r5, #0
 8015d0a:	dd08      	ble.n	8015d1e <_strtod_l+0x756>
 8015d0c:	462a      	mov	r2, r5
 8015d0e:	9905      	ldr	r1, [sp, #20]
 8015d10:	4648      	mov	r0, r9
 8015d12:	f001 feb3 	bl	8017a7c <__lshift>
 8015d16:	9005      	str	r0, [sp, #20]
 8015d18:	2800      	cmp	r0, #0
 8015d1a:	f43f ae73 	beq.w	8015a04 <_strtod_l+0x43c>
 8015d1e:	2f00      	cmp	r7, #0
 8015d20:	dd08      	ble.n	8015d34 <_strtod_l+0x76c>
 8015d22:	4641      	mov	r1, r8
 8015d24:	463a      	mov	r2, r7
 8015d26:	4648      	mov	r0, r9
 8015d28:	f001 fea8 	bl	8017a7c <__lshift>
 8015d2c:	4680      	mov	r8, r0
 8015d2e:	2800      	cmp	r0, #0
 8015d30:	f43f ae68 	beq.w	8015a04 <_strtod_l+0x43c>
 8015d34:	9a05      	ldr	r2, [sp, #20]
 8015d36:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015d38:	4648      	mov	r0, r9
 8015d3a:	f001 ff0d 	bl	8017b58 <__mdiff>
 8015d3e:	4604      	mov	r4, r0
 8015d40:	2800      	cmp	r0, #0
 8015d42:	f43f ae5f 	beq.w	8015a04 <_strtod_l+0x43c>
 8015d46:	68c3      	ldr	r3, [r0, #12]
 8015d48:	930c      	str	r3, [sp, #48]	; 0x30
 8015d4a:	2300      	movs	r3, #0
 8015d4c:	60c3      	str	r3, [r0, #12]
 8015d4e:	4641      	mov	r1, r8
 8015d50:	f001 fee8 	bl	8017b24 <__mcmp>
 8015d54:	2800      	cmp	r0, #0
 8015d56:	da55      	bge.n	8015e04 <_strtod_l+0x83c>
 8015d58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015d5a:	b9e3      	cbnz	r3, 8015d96 <_strtod_l+0x7ce>
 8015d5c:	f1ba 0f00 	cmp.w	sl, #0
 8015d60:	d119      	bne.n	8015d96 <_strtod_l+0x7ce>
 8015d62:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015d66:	b9b3      	cbnz	r3, 8015d96 <_strtod_l+0x7ce>
 8015d68:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015d6c:	0d1b      	lsrs	r3, r3, #20
 8015d6e:	051b      	lsls	r3, r3, #20
 8015d70:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8015d74:	d90f      	bls.n	8015d96 <_strtod_l+0x7ce>
 8015d76:	6963      	ldr	r3, [r4, #20]
 8015d78:	b913      	cbnz	r3, 8015d80 <_strtod_l+0x7b8>
 8015d7a:	6923      	ldr	r3, [r4, #16]
 8015d7c:	2b01      	cmp	r3, #1
 8015d7e:	dd0a      	ble.n	8015d96 <_strtod_l+0x7ce>
 8015d80:	4621      	mov	r1, r4
 8015d82:	2201      	movs	r2, #1
 8015d84:	4648      	mov	r0, r9
 8015d86:	f001 fe79 	bl	8017a7c <__lshift>
 8015d8a:	4641      	mov	r1, r8
 8015d8c:	4604      	mov	r4, r0
 8015d8e:	f001 fec9 	bl	8017b24 <__mcmp>
 8015d92:	2800      	cmp	r0, #0
 8015d94:	dc67      	bgt.n	8015e66 <_strtod_l+0x89e>
 8015d96:	9b04      	ldr	r3, [sp, #16]
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	d171      	bne.n	8015e80 <_strtod_l+0x8b8>
 8015d9c:	e63d      	b.n	8015a1a <_strtod_l+0x452>
 8015d9e:	f018 0f01 	tst.w	r8, #1
 8015da2:	d004      	beq.n	8015dae <_strtod_l+0x7e6>
 8015da4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015da8:	f7ea fc3e 	bl	8000628 <__aeabi_dmul>
 8015dac:	2301      	movs	r3, #1
 8015dae:	ea4f 0868 	mov.w	r8, r8, asr #1
 8015db2:	3508      	adds	r5, #8
 8015db4:	e6e5      	b.n	8015b82 <_strtod_l+0x5ba>
 8015db6:	f04f 32ff 	mov.w	r2, #4294967295
 8015dba:	fa02 f303 	lsl.w	r3, r2, r3
 8015dbe:	ea03 0a0a 	and.w	sl, r3, sl
 8015dc2:	e6ff      	b.n	8015bc4 <_strtod_l+0x5fc>
 8015dc4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8015dc8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8015dcc:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8015dd0:	36e2      	adds	r6, #226	; 0xe2
 8015dd2:	fa01 f306 	lsl.w	r3, r1, r6
 8015dd6:	930a      	str	r3, [sp, #40]	; 0x28
 8015dd8:	910f      	str	r1, [sp, #60]	; 0x3c
 8015dda:	e75d      	b.n	8015c98 <_strtod_l+0x6d0>
 8015ddc:	2300      	movs	r3, #0
 8015dde:	930a      	str	r3, [sp, #40]	; 0x28
 8015de0:	2301      	movs	r3, #1
 8015de2:	930f      	str	r3, [sp, #60]	; 0x3c
 8015de4:	e758      	b.n	8015c98 <_strtod_l+0x6d0>
 8015de6:	4632      	mov	r2, r6
 8015de8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015dea:	4648      	mov	r0, r9
 8015dec:	f001 fe46 	bl	8017a7c <__lshift>
 8015df0:	901c      	str	r0, [sp, #112]	; 0x70
 8015df2:	2800      	cmp	r0, #0
 8015df4:	f47f af7c 	bne.w	8015cf0 <_strtod_l+0x728>
 8015df8:	e604      	b.n	8015a04 <_strtod_l+0x43c>
 8015dfa:	bf00      	nop
 8015dfc:	08019430 	.word	0x08019430
 8015e00:	fffffc02 	.word	0xfffffc02
 8015e04:	465d      	mov	r5, fp
 8015e06:	f040 8086 	bne.w	8015f16 <_strtod_l+0x94e>
 8015e0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015e0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015e10:	b32a      	cbz	r2, 8015e5e <_strtod_l+0x896>
 8015e12:	4aaf      	ldr	r2, [pc, #700]	; (80160d0 <_strtod_l+0xb08>)
 8015e14:	4293      	cmp	r3, r2
 8015e16:	d153      	bne.n	8015ec0 <_strtod_l+0x8f8>
 8015e18:	9b04      	ldr	r3, [sp, #16]
 8015e1a:	4650      	mov	r0, sl
 8015e1c:	b1d3      	cbz	r3, 8015e54 <_strtod_l+0x88c>
 8015e1e:	4aad      	ldr	r2, [pc, #692]	; (80160d4 <_strtod_l+0xb0c>)
 8015e20:	402a      	ands	r2, r5
 8015e22:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8015e26:	f04f 31ff 	mov.w	r1, #4294967295
 8015e2a:	d816      	bhi.n	8015e5a <_strtod_l+0x892>
 8015e2c:	0d12      	lsrs	r2, r2, #20
 8015e2e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8015e32:	fa01 f303 	lsl.w	r3, r1, r3
 8015e36:	4298      	cmp	r0, r3
 8015e38:	d142      	bne.n	8015ec0 <_strtod_l+0x8f8>
 8015e3a:	4ba7      	ldr	r3, [pc, #668]	; (80160d8 <_strtod_l+0xb10>)
 8015e3c:	429d      	cmp	r5, r3
 8015e3e:	d102      	bne.n	8015e46 <_strtod_l+0x87e>
 8015e40:	3001      	adds	r0, #1
 8015e42:	f43f addf 	beq.w	8015a04 <_strtod_l+0x43c>
 8015e46:	4ba3      	ldr	r3, [pc, #652]	; (80160d4 <_strtod_l+0xb0c>)
 8015e48:	402b      	ands	r3, r5
 8015e4a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8015e4e:	f04f 0a00 	mov.w	sl, #0
 8015e52:	e7a0      	b.n	8015d96 <_strtod_l+0x7ce>
 8015e54:	f04f 33ff 	mov.w	r3, #4294967295
 8015e58:	e7ed      	b.n	8015e36 <_strtod_l+0x86e>
 8015e5a:	460b      	mov	r3, r1
 8015e5c:	e7eb      	b.n	8015e36 <_strtod_l+0x86e>
 8015e5e:	bb7b      	cbnz	r3, 8015ec0 <_strtod_l+0x8f8>
 8015e60:	f1ba 0f00 	cmp.w	sl, #0
 8015e64:	d12c      	bne.n	8015ec0 <_strtod_l+0x8f8>
 8015e66:	9904      	ldr	r1, [sp, #16]
 8015e68:	4a9a      	ldr	r2, [pc, #616]	; (80160d4 <_strtod_l+0xb0c>)
 8015e6a:	465b      	mov	r3, fp
 8015e6c:	b1f1      	cbz	r1, 8015eac <_strtod_l+0x8e4>
 8015e6e:	ea02 010b 	and.w	r1, r2, fp
 8015e72:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8015e76:	dc19      	bgt.n	8015eac <_strtod_l+0x8e4>
 8015e78:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8015e7c:	f77f ae5b 	ble.w	8015b36 <_strtod_l+0x56e>
 8015e80:	4a96      	ldr	r2, [pc, #600]	; (80160dc <_strtod_l+0xb14>)
 8015e82:	2300      	movs	r3, #0
 8015e84:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8015e88:	4650      	mov	r0, sl
 8015e8a:	4659      	mov	r1, fp
 8015e8c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8015e90:	f7ea fbca 	bl	8000628 <__aeabi_dmul>
 8015e94:	4682      	mov	sl, r0
 8015e96:	468b      	mov	fp, r1
 8015e98:	2900      	cmp	r1, #0
 8015e9a:	f47f adbe 	bne.w	8015a1a <_strtod_l+0x452>
 8015e9e:	2800      	cmp	r0, #0
 8015ea0:	f47f adbb 	bne.w	8015a1a <_strtod_l+0x452>
 8015ea4:	2322      	movs	r3, #34	; 0x22
 8015ea6:	f8c9 3000 	str.w	r3, [r9]
 8015eaa:	e5b6      	b.n	8015a1a <_strtod_l+0x452>
 8015eac:	4013      	ands	r3, r2
 8015eae:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8015eb2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8015eb6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8015eba:	f04f 3aff 	mov.w	sl, #4294967295
 8015ebe:	e76a      	b.n	8015d96 <_strtod_l+0x7ce>
 8015ec0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015ec2:	b193      	cbz	r3, 8015eea <_strtod_l+0x922>
 8015ec4:	422b      	tst	r3, r5
 8015ec6:	f43f af66 	beq.w	8015d96 <_strtod_l+0x7ce>
 8015eca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015ecc:	9a04      	ldr	r2, [sp, #16]
 8015ece:	4650      	mov	r0, sl
 8015ed0:	4659      	mov	r1, fp
 8015ed2:	b173      	cbz	r3, 8015ef2 <_strtod_l+0x92a>
 8015ed4:	f7ff fb5c 	bl	8015590 <sulp>
 8015ed8:	4602      	mov	r2, r0
 8015eda:	460b      	mov	r3, r1
 8015edc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015ee0:	f7ea f9ec 	bl	80002bc <__adddf3>
 8015ee4:	4682      	mov	sl, r0
 8015ee6:	468b      	mov	fp, r1
 8015ee8:	e755      	b.n	8015d96 <_strtod_l+0x7ce>
 8015eea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015eec:	ea13 0f0a 	tst.w	r3, sl
 8015ef0:	e7e9      	b.n	8015ec6 <_strtod_l+0x8fe>
 8015ef2:	f7ff fb4d 	bl	8015590 <sulp>
 8015ef6:	4602      	mov	r2, r0
 8015ef8:	460b      	mov	r3, r1
 8015efa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015efe:	f7ea f9db 	bl	80002b8 <__aeabi_dsub>
 8015f02:	2200      	movs	r2, #0
 8015f04:	2300      	movs	r3, #0
 8015f06:	4682      	mov	sl, r0
 8015f08:	468b      	mov	fp, r1
 8015f0a:	f7ea fdf5 	bl	8000af8 <__aeabi_dcmpeq>
 8015f0e:	2800      	cmp	r0, #0
 8015f10:	f47f ae11 	bne.w	8015b36 <_strtod_l+0x56e>
 8015f14:	e73f      	b.n	8015d96 <_strtod_l+0x7ce>
 8015f16:	4641      	mov	r1, r8
 8015f18:	4620      	mov	r0, r4
 8015f1a:	f001 ff40 	bl	8017d9e <__ratio>
 8015f1e:	ec57 6b10 	vmov	r6, r7, d0
 8015f22:	2200      	movs	r2, #0
 8015f24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015f28:	ee10 0a10 	vmov	r0, s0
 8015f2c:	4639      	mov	r1, r7
 8015f2e:	f7ea fdf7 	bl	8000b20 <__aeabi_dcmple>
 8015f32:	2800      	cmp	r0, #0
 8015f34:	d077      	beq.n	8016026 <_strtod_l+0xa5e>
 8015f36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	d04a      	beq.n	8015fd2 <_strtod_l+0xa0a>
 8015f3c:	4b68      	ldr	r3, [pc, #416]	; (80160e0 <_strtod_l+0xb18>)
 8015f3e:	2200      	movs	r2, #0
 8015f40:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015f44:	4f66      	ldr	r7, [pc, #408]	; (80160e0 <_strtod_l+0xb18>)
 8015f46:	2600      	movs	r6, #0
 8015f48:	4b62      	ldr	r3, [pc, #392]	; (80160d4 <_strtod_l+0xb0c>)
 8015f4a:	402b      	ands	r3, r5
 8015f4c:	930f      	str	r3, [sp, #60]	; 0x3c
 8015f4e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015f50:	4b64      	ldr	r3, [pc, #400]	; (80160e4 <_strtod_l+0xb1c>)
 8015f52:	429a      	cmp	r2, r3
 8015f54:	f040 80ce 	bne.w	80160f4 <_strtod_l+0xb2c>
 8015f58:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015f5c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015f60:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8015f64:	ec4b ab10 	vmov	d0, sl, fp
 8015f68:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8015f6c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8015f70:	f001 fe50 	bl	8017c14 <__ulp>
 8015f74:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015f78:	ec53 2b10 	vmov	r2, r3, d0
 8015f7c:	f7ea fb54 	bl	8000628 <__aeabi_dmul>
 8015f80:	4652      	mov	r2, sl
 8015f82:	465b      	mov	r3, fp
 8015f84:	f7ea f99a 	bl	80002bc <__adddf3>
 8015f88:	460b      	mov	r3, r1
 8015f8a:	4952      	ldr	r1, [pc, #328]	; (80160d4 <_strtod_l+0xb0c>)
 8015f8c:	4a56      	ldr	r2, [pc, #344]	; (80160e8 <_strtod_l+0xb20>)
 8015f8e:	4019      	ands	r1, r3
 8015f90:	4291      	cmp	r1, r2
 8015f92:	4682      	mov	sl, r0
 8015f94:	d95b      	bls.n	801604e <_strtod_l+0xa86>
 8015f96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f98:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8015f9c:	4293      	cmp	r3, r2
 8015f9e:	d103      	bne.n	8015fa8 <_strtod_l+0x9e0>
 8015fa0:	9b08      	ldr	r3, [sp, #32]
 8015fa2:	3301      	adds	r3, #1
 8015fa4:	f43f ad2e 	beq.w	8015a04 <_strtod_l+0x43c>
 8015fa8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80160d8 <_strtod_l+0xb10>
 8015fac:	f04f 3aff 	mov.w	sl, #4294967295
 8015fb0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015fb2:	4648      	mov	r0, r9
 8015fb4:	f001 fb96 	bl	80176e4 <_Bfree>
 8015fb8:	9905      	ldr	r1, [sp, #20]
 8015fba:	4648      	mov	r0, r9
 8015fbc:	f001 fb92 	bl	80176e4 <_Bfree>
 8015fc0:	4641      	mov	r1, r8
 8015fc2:	4648      	mov	r0, r9
 8015fc4:	f001 fb8e 	bl	80176e4 <_Bfree>
 8015fc8:	4621      	mov	r1, r4
 8015fca:	4648      	mov	r0, r9
 8015fcc:	f001 fb8a 	bl	80176e4 <_Bfree>
 8015fd0:	e619      	b.n	8015c06 <_strtod_l+0x63e>
 8015fd2:	f1ba 0f00 	cmp.w	sl, #0
 8015fd6:	d11a      	bne.n	801600e <_strtod_l+0xa46>
 8015fd8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015fdc:	b9eb      	cbnz	r3, 801601a <_strtod_l+0xa52>
 8015fde:	2200      	movs	r2, #0
 8015fe0:	4b3f      	ldr	r3, [pc, #252]	; (80160e0 <_strtod_l+0xb18>)
 8015fe2:	4630      	mov	r0, r6
 8015fe4:	4639      	mov	r1, r7
 8015fe6:	f7ea fd91 	bl	8000b0c <__aeabi_dcmplt>
 8015fea:	b9c8      	cbnz	r0, 8016020 <_strtod_l+0xa58>
 8015fec:	4630      	mov	r0, r6
 8015fee:	4639      	mov	r1, r7
 8015ff0:	2200      	movs	r2, #0
 8015ff2:	4b3e      	ldr	r3, [pc, #248]	; (80160ec <_strtod_l+0xb24>)
 8015ff4:	f7ea fb18 	bl	8000628 <__aeabi_dmul>
 8015ff8:	4606      	mov	r6, r0
 8015ffa:	460f      	mov	r7, r1
 8015ffc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8016000:	9618      	str	r6, [sp, #96]	; 0x60
 8016002:	9319      	str	r3, [sp, #100]	; 0x64
 8016004:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8016008:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801600c:	e79c      	b.n	8015f48 <_strtod_l+0x980>
 801600e:	f1ba 0f01 	cmp.w	sl, #1
 8016012:	d102      	bne.n	801601a <_strtod_l+0xa52>
 8016014:	2d00      	cmp	r5, #0
 8016016:	f43f ad8e 	beq.w	8015b36 <_strtod_l+0x56e>
 801601a:	2200      	movs	r2, #0
 801601c:	4b34      	ldr	r3, [pc, #208]	; (80160f0 <_strtod_l+0xb28>)
 801601e:	e78f      	b.n	8015f40 <_strtod_l+0x978>
 8016020:	2600      	movs	r6, #0
 8016022:	4f32      	ldr	r7, [pc, #200]	; (80160ec <_strtod_l+0xb24>)
 8016024:	e7ea      	b.n	8015ffc <_strtod_l+0xa34>
 8016026:	4b31      	ldr	r3, [pc, #196]	; (80160ec <_strtod_l+0xb24>)
 8016028:	4630      	mov	r0, r6
 801602a:	4639      	mov	r1, r7
 801602c:	2200      	movs	r2, #0
 801602e:	f7ea fafb 	bl	8000628 <__aeabi_dmul>
 8016032:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016034:	4606      	mov	r6, r0
 8016036:	460f      	mov	r7, r1
 8016038:	b933      	cbnz	r3, 8016048 <_strtod_l+0xa80>
 801603a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801603e:	9010      	str	r0, [sp, #64]	; 0x40
 8016040:	9311      	str	r3, [sp, #68]	; 0x44
 8016042:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8016046:	e7df      	b.n	8016008 <_strtod_l+0xa40>
 8016048:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801604c:	e7f9      	b.n	8016042 <_strtod_l+0xa7a>
 801604e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8016052:	9b04      	ldr	r3, [sp, #16]
 8016054:	2b00      	cmp	r3, #0
 8016056:	d1ab      	bne.n	8015fb0 <_strtod_l+0x9e8>
 8016058:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801605c:	0d1b      	lsrs	r3, r3, #20
 801605e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016060:	051b      	lsls	r3, r3, #20
 8016062:	429a      	cmp	r2, r3
 8016064:	465d      	mov	r5, fp
 8016066:	d1a3      	bne.n	8015fb0 <_strtod_l+0x9e8>
 8016068:	4639      	mov	r1, r7
 801606a:	4630      	mov	r0, r6
 801606c:	f7ea fd8c 	bl	8000b88 <__aeabi_d2iz>
 8016070:	f7ea fa70 	bl	8000554 <__aeabi_i2d>
 8016074:	460b      	mov	r3, r1
 8016076:	4602      	mov	r2, r0
 8016078:	4639      	mov	r1, r7
 801607a:	4630      	mov	r0, r6
 801607c:	f7ea f91c 	bl	80002b8 <__aeabi_dsub>
 8016080:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016082:	4606      	mov	r6, r0
 8016084:	460f      	mov	r7, r1
 8016086:	b933      	cbnz	r3, 8016096 <_strtod_l+0xace>
 8016088:	f1ba 0f00 	cmp.w	sl, #0
 801608c:	d103      	bne.n	8016096 <_strtod_l+0xace>
 801608e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8016092:	2d00      	cmp	r5, #0
 8016094:	d06d      	beq.n	8016172 <_strtod_l+0xbaa>
 8016096:	a30a      	add	r3, pc, #40	; (adr r3, 80160c0 <_strtod_l+0xaf8>)
 8016098:	e9d3 2300 	ldrd	r2, r3, [r3]
 801609c:	4630      	mov	r0, r6
 801609e:	4639      	mov	r1, r7
 80160a0:	f7ea fd34 	bl	8000b0c <__aeabi_dcmplt>
 80160a4:	2800      	cmp	r0, #0
 80160a6:	f47f acb8 	bne.w	8015a1a <_strtod_l+0x452>
 80160aa:	a307      	add	r3, pc, #28	; (adr r3, 80160c8 <_strtod_l+0xb00>)
 80160ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160b0:	4630      	mov	r0, r6
 80160b2:	4639      	mov	r1, r7
 80160b4:	f7ea fd48 	bl	8000b48 <__aeabi_dcmpgt>
 80160b8:	2800      	cmp	r0, #0
 80160ba:	f43f af79 	beq.w	8015fb0 <_strtod_l+0x9e8>
 80160be:	e4ac      	b.n	8015a1a <_strtod_l+0x452>
 80160c0:	94a03595 	.word	0x94a03595
 80160c4:	3fdfffff 	.word	0x3fdfffff
 80160c8:	35afe535 	.word	0x35afe535
 80160cc:	3fe00000 	.word	0x3fe00000
 80160d0:	000fffff 	.word	0x000fffff
 80160d4:	7ff00000 	.word	0x7ff00000
 80160d8:	7fefffff 	.word	0x7fefffff
 80160dc:	39500000 	.word	0x39500000
 80160e0:	3ff00000 	.word	0x3ff00000
 80160e4:	7fe00000 	.word	0x7fe00000
 80160e8:	7c9fffff 	.word	0x7c9fffff
 80160ec:	3fe00000 	.word	0x3fe00000
 80160f0:	bff00000 	.word	0xbff00000
 80160f4:	9b04      	ldr	r3, [sp, #16]
 80160f6:	b333      	cbz	r3, 8016146 <_strtod_l+0xb7e>
 80160f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80160fa:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80160fe:	d822      	bhi.n	8016146 <_strtod_l+0xb7e>
 8016100:	a327      	add	r3, pc, #156	; (adr r3, 80161a0 <_strtod_l+0xbd8>)
 8016102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016106:	4630      	mov	r0, r6
 8016108:	4639      	mov	r1, r7
 801610a:	f7ea fd09 	bl	8000b20 <__aeabi_dcmple>
 801610e:	b1a0      	cbz	r0, 801613a <_strtod_l+0xb72>
 8016110:	4639      	mov	r1, r7
 8016112:	4630      	mov	r0, r6
 8016114:	f7ea fd60 	bl	8000bd8 <__aeabi_d2uiz>
 8016118:	2800      	cmp	r0, #0
 801611a:	bf08      	it	eq
 801611c:	2001      	moveq	r0, #1
 801611e:	f7ea fa09 	bl	8000534 <__aeabi_ui2d>
 8016122:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016124:	4606      	mov	r6, r0
 8016126:	460f      	mov	r7, r1
 8016128:	bb03      	cbnz	r3, 801616c <_strtod_l+0xba4>
 801612a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801612e:	9012      	str	r0, [sp, #72]	; 0x48
 8016130:	9313      	str	r3, [sp, #76]	; 0x4c
 8016132:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8016136:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801613a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801613c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801613e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8016142:	1a9b      	subs	r3, r3, r2
 8016144:	930b      	str	r3, [sp, #44]	; 0x2c
 8016146:	ed9d 0b08 	vldr	d0, [sp, #32]
 801614a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 801614e:	f001 fd61 	bl	8017c14 <__ulp>
 8016152:	4650      	mov	r0, sl
 8016154:	ec53 2b10 	vmov	r2, r3, d0
 8016158:	4659      	mov	r1, fp
 801615a:	f7ea fa65 	bl	8000628 <__aeabi_dmul>
 801615e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016162:	f7ea f8ab 	bl	80002bc <__adddf3>
 8016166:	4682      	mov	sl, r0
 8016168:	468b      	mov	fp, r1
 801616a:	e772      	b.n	8016052 <_strtod_l+0xa8a>
 801616c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8016170:	e7df      	b.n	8016132 <_strtod_l+0xb6a>
 8016172:	a30d      	add	r3, pc, #52	; (adr r3, 80161a8 <_strtod_l+0xbe0>)
 8016174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016178:	f7ea fcc8 	bl	8000b0c <__aeabi_dcmplt>
 801617c:	e79c      	b.n	80160b8 <_strtod_l+0xaf0>
 801617e:	2300      	movs	r3, #0
 8016180:	930d      	str	r3, [sp, #52]	; 0x34
 8016182:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016184:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016186:	6013      	str	r3, [r2, #0]
 8016188:	f7ff ba61 	b.w	801564e <_strtod_l+0x86>
 801618c:	2b65      	cmp	r3, #101	; 0x65
 801618e:	f04f 0200 	mov.w	r2, #0
 8016192:	f43f ab4e 	beq.w	8015832 <_strtod_l+0x26a>
 8016196:	2101      	movs	r1, #1
 8016198:	4614      	mov	r4, r2
 801619a:	9104      	str	r1, [sp, #16]
 801619c:	f7ff bacb 	b.w	8015736 <_strtod_l+0x16e>
 80161a0:	ffc00000 	.word	0xffc00000
 80161a4:	41dfffff 	.word	0x41dfffff
 80161a8:	94a03595 	.word	0x94a03595
 80161ac:	3fcfffff 	.word	0x3fcfffff

080161b0 <_strtod_r>:
 80161b0:	4b05      	ldr	r3, [pc, #20]	; (80161c8 <_strtod_r+0x18>)
 80161b2:	681b      	ldr	r3, [r3, #0]
 80161b4:	b410      	push	{r4}
 80161b6:	6a1b      	ldr	r3, [r3, #32]
 80161b8:	4c04      	ldr	r4, [pc, #16]	; (80161cc <_strtod_r+0x1c>)
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	bf08      	it	eq
 80161be:	4623      	moveq	r3, r4
 80161c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80161c4:	f7ff ba00 	b.w	80155c8 <_strtod_l>
 80161c8:	2000000c 	.word	0x2000000c
 80161cc:	20000070 	.word	0x20000070

080161d0 <_strtol_l.isra.0>:
 80161d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80161d4:	4680      	mov	r8, r0
 80161d6:	4689      	mov	r9, r1
 80161d8:	4692      	mov	sl, r2
 80161da:	461e      	mov	r6, r3
 80161dc:	460f      	mov	r7, r1
 80161de:	463d      	mov	r5, r7
 80161e0:	9808      	ldr	r0, [sp, #32]
 80161e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80161e6:	f001 fa0d 	bl	8017604 <__locale_ctype_ptr_l>
 80161ea:	4420      	add	r0, r4
 80161ec:	7843      	ldrb	r3, [r0, #1]
 80161ee:	f013 0308 	ands.w	r3, r3, #8
 80161f2:	d132      	bne.n	801625a <_strtol_l.isra.0+0x8a>
 80161f4:	2c2d      	cmp	r4, #45	; 0x2d
 80161f6:	d132      	bne.n	801625e <_strtol_l.isra.0+0x8e>
 80161f8:	787c      	ldrb	r4, [r7, #1]
 80161fa:	1cbd      	adds	r5, r7, #2
 80161fc:	2201      	movs	r2, #1
 80161fe:	2e00      	cmp	r6, #0
 8016200:	d05d      	beq.n	80162be <_strtol_l.isra.0+0xee>
 8016202:	2e10      	cmp	r6, #16
 8016204:	d109      	bne.n	801621a <_strtol_l.isra.0+0x4a>
 8016206:	2c30      	cmp	r4, #48	; 0x30
 8016208:	d107      	bne.n	801621a <_strtol_l.isra.0+0x4a>
 801620a:	782b      	ldrb	r3, [r5, #0]
 801620c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016210:	2b58      	cmp	r3, #88	; 0x58
 8016212:	d14f      	bne.n	80162b4 <_strtol_l.isra.0+0xe4>
 8016214:	786c      	ldrb	r4, [r5, #1]
 8016216:	2610      	movs	r6, #16
 8016218:	3502      	adds	r5, #2
 801621a:	2a00      	cmp	r2, #0
 801621c:	bf14      	ite	ne
 801621e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8016222:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8016226:	2700      	movs	r7, #0
 8016228:	fbb1 fcf6 	udiv	ip, r1, r6
 801622c:	4638      	mov	r0, r7
 801622e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8016232:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8016236:	2b09      	cmp	r3, #9
 8016238:	d817      	bhi.n	801626a <_strtol_l.isra.0+0x9a>
 801623a:	461c      	mov	r4, r3
 801623c:	42a6      	cmp	r6, r4
 801623e:	dd23      	ble.n	8016288 <_strtol_l.isra.0+0xb8>
 8016240:	1c7b      	adds	r3, r7, #1
 8016242:	d007      	beq.n	8016254 <_strtol_l.isra.0+0x84>
 8016244:	4584      	cmp	ip, r0
 8016246:	d31c      	bcc.n	8016282 <_strtol_l.isra.0+0xb2>
 8016248:	d101      	bne.n	801624e <_strtol_l.isra.0+0x7e>
 801624a:	45a6      	cmp	lr, r4
 801624c:	db19      	blt.n	8016282 <_strtol_l.isra.0+0xb2>
 801624e:	fb00 4006 	mla	r0, r0, r6, r4
 8016252:	2701      	movs	r7, #1
 8016254:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016258:	e7eb      	b.n	8016232 <_strtol_l.isra.0+0x62>
 801625a:	462f      	mov	r7, r5
 801625c:	e7bf      	b.n	80161de <_strtol_l.isra.0+0xe>
 801625e:	2c2b      	cmp	r4, #43	; 0x2b
 8016260:	bf04      	itt	eq
 8016262:	1cbd      	addeq	r5, r7, #2
 8016264:	787c      	ldrbeq	r4, [r7, #1]
 8016266:	461a      	mov	r2, r3
 8016268:	e7c9      	b.n	80161fe <_strtol_l.isra.0+0x2e>
 801626a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801626e:	2b19      	cmp	r3, #25
 8016270:	d801      	bhi.n	8016276 <_strtol_l.isra.0+0xa6>
 8016272:	3c37      	subs	r4, #55	; 0x37
 8016274:	e7e2      	b.n	801623c <_strtol_l.isra.0+0x6c>
 8016276:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801627a:	2b19      	cmp	r3, #25
 801627c:	d804      	bhi.n	8016288 <_strtol_l.isra.0+0xb8>
 801627e:	3c57      	subs	r4, #87	; 0x57
 8016280:	e7dc      	b.n	801623c <_strtol_l.isra.0+0x6c>
 8016282:	f04f 37ff 	mov.w	r7, #4294967295
 8016286:	e7e5      	b.n	8016254 <_strtol_l.isra.0+0x84>
 8016288:	1c7b      	adds	r3, r7, #1
 801628a:	d108      	bne.n	801629e <_strtol_l.isra.0+0xce>
 801628c:	2322      	movs	r3, #34	; 0x22
 801628e:	f8c8 3000 	str.w	r3, [r8]
 8016292:	4608      	mov	r0, r1
 8016294:	f1ba 0f00 	cmp.w	sl, #0
 8016298:	d107      	bne.n	80162aa <_strtol_l.isra.0+0xda>
 801629a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801629e:	b102      	cbz	r2, 80162a2 <_strtol_l.isra.0+0xd2>
 80162a0:	4240      	negs	r0, r0
 80162a2:	f1ba 0f00 	cmp.w	sl, #0
 80162a6:	d0f8      	beq.n	801629a <_strtol_l.isra.0+0xca>
 80162a8:	b10f      	cbz	r7, 80162ae <_strtol_l.isra.0+0xde>
 80162aa:	f105 39ff 	add.w	r9, r5, #4294967295
 80162ae:	f8ca 9000 	str.w	r9, [sl]
 80162b2:	e7f2      	b.n	801629a <_strtol_l.isra.0+0xca>
 80162b4:	2430      	movs	r4, #48	; 0x30
 80162b6:	2e00      	cmp	r6, #0
 80162b8:	d1af      	bne.n	801621a <_strtol_l.isra.0+0x4a>
 80162ba:	2608      	movs	r6, #8
 80162bc:	e7ad      	b.n	801621a <_strtol_l.isra.0+0x4a>
 80162be:	2c30      	cmp	r4, #48	; 0x30
 80162c0:	d0a3      	beq.n	801620a <_strtol_l.isra.0+0x3a>
 80162c2:	260a      	movs	r6, #10
 80162c4:	e7a9      	b.n	801621a <_strtol_l.isra.0+0x4a>
	...

080162c8 <_strtol_r>:
 80162c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80162ca:	4c06      	ldr	r4, [pc, #24]	; (80162e4 <_strtol_r+0x1c>)
 80162cc:	4d06      	ldr	r5, [pc, #24]	; (80162e8 <_strtol_r+0x20>)
 80162ce:	6824      	ldr	r4, [r4, #0]
 80162d0:	6a24      	ldr	r4, [r4, #32]
 80162d2:	2c00      	cmp	r4, #0
 80162d4:	bf08      	it	eq
 80162d6:	462c      	moveq	r4, r5
 80162d8:	9400      	str	r4, [sp, #0]
 80162da:	f7ff ff79 	bl	80161d0 <_strtol_l.isra.0>
 80162de:	b003      	add	sp, #12
 80162e0:	bd30      	pop	{r4, r5, pc}
 80162e2:	bf00      	nop
 80162e4:	2000000c 	.word	0x2000000c
 80162e8:	20000070 	.word	0x20000070

080162ec <_vsiprintf_r>:
 80162ec:	b500      	push	{lr}
 80162ee:	b09b      	sub	sp, #108	; 0x6c
 80162f0:	9100      	str	r1, [sp, #0]
 80162f2:	9104      	str	r1, [sp, #16]
 80162f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80162f8:	9105      	str	r1, [sp, #20]
 80162fa:	9102      	str	r1, [sp, #8]
 80162fc:	4905      	ldr	r1, [pc, #20]	; (8016314 <_vsiprintf_r+0x28>)
 80162fe:	9103      	str	r1, [sp, #12]
 8016300:	4669      	mov	r1, sp
 8016302:	f001 fecb 	bl	801809c <_svfiprintf_r>
 8016306:	9b00      	ldr	r3, [sp, #0]
 8016308:	2200      	movs	r2, #0
 801630a:	701a      	strb	r2, [r3, #0]
 801630c:	b01b      	add	sp, #108	; 0x6c
 801630e:	f85d fb04 	ldr.w	pc, [sp], #4
 8016312:	bf00      	nop
 8016314:	ffff0208 	.word	0xffff0208

08016318 <vsiprintf>:
 8016318:	4613      	mov	r3, r2
 801631a:	460a      	mov	r2, r1
 801631c:	4601      	mov	r1, r0
 801631e:	4802      	ldr	r0, [pc, #8]	; (8016328 <vsiprintf+0x10>)
 8016320:	6800      	ldr	r0, [r0, #0]
 8016322:	f7ff bfe3 	b.w	80162ec <_vsiprintf_r>
 8016326:	bf00      	nop
 8016328:	2000000c 	.word	0x2000000c

0801632c <quorem>:
 801632c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016330:	6903      	ldr	r3, [r0, #16]
 8016332:	690c      	ldr	r4, [r1, #16]
 8016334:	42a3      	cmp	r3, r4
 8016336:	4680      	mov	r8, r0
 8016338:	f2c0 8082 	blt.w	8016440 <quorem+0x114>
 801633c:	3c01      	subs	r4, #1
 801633e:	f101 0714 	add.w	r7, r1, #20
 8016342:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8016346:	f100 0614 	add.w	r6, r0, #20
 801634a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801634e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8016352:	eb06 030c 	add.w	r3, r6, ip
 8016356:	3501      	adds	r5, #1
 8016358:	eb07 090c 	add.w	r9, r7, ip
 801635c:	9301      	str	r3, [sp, #4]
 801635e:	fbb0 f5f5 	udiv	r5, r0, r5
 8016362:	b395      	cbz	r5, 80163ca <quorem+0x9e>
 8016364:	f04f 0a00 	mov.w	sl, #0
 8016368:	4638      	mov	r0, r7
 801636a:	46b6      	mov	lr, r6
 801636c:	46d3      	mov	fp, sl
 801636e:	f850 2b04 	ldr.w	r2, [r0], #4
 8016372:	b293      	uxth	r3, r2
 8016374:	fb05 a303 	mla	r3, r5, r3, sl
 8016378:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801637c:	b29b      	uxth	r3, r3
 801637e:	ebab 0303 	sub.w	r3, fp, r3
 8016382:	0c12      	lsrs	r2, r2, #16
 8016384:	f8de b000 	ldr.w	fp, [lr]
 8016388:	fb05 a202 	mla	r2, r5, r2, sl
 801638c:	fa13 f38b 	uxtah	r3, r3, fp
 8016390:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8016394:	fa1f fb82 	uxth.w	fp, r2
 8016398:	f8de 2000 	ldr.w	r2, [lr]
 801639c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80163a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80163a4:	b29b      	uxth	r3, r3
 80163a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80163aa:	4581      	cmp	r9, r0
 80163ac:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80163b0:	f84e 3b04 	str.w	r3, [lr], #4
 80163b4:	d2db      	bcs.n	801636e <quorem+0x42>
 80163b6:	f856 300c 	ldr.w	r3, [r6, ip]
 80163ba:	b933      	cbnz	r3, 80163ca <quorem+0x9e>
 80163bc:	9b01      	ldr	r3, [sp, #4]
 80163be:	3b04      	subs	r3, #4
 80163c0:	429e      	cmp	r6, r3
 80163c2:	461a      	mov	r2, r3
 80163c4:	d330      	bcc.n	8016428 <quorem+0xfc>
 80163c6:	f8c8 4010 	str.w	r4, [r8, #16]
 80163ca:	4640      	mov	r0, r8
 80163cc:	f001 fbaa 	bl	8017b24 <__mcmp>
 80163d0:	2800      	cmp	r0, #0
 80163d2:	db25      	blt.n	8016420 <quorem+0xf4>
 80163d4:	3501      	adds	r5, #1
 80163d6:	4630      	mov	r0, r6
 80163d8:	f04f 0c00 	mov.w	ip, #0
 80163dc:	f857 2b04 	ldr.w	r2, [r7], #4
 80163e0:	f8d0 e000 	ldr.w	lr, [r0]
 80163e4:	b293      	uxth	r3, r2
 80163e6:	ebac 0303 	sub.w	r3, ip, r3
 80163ea:	0c12      	lsrs	r2, r2, #16
 80163ec:	fa13 f38e 	uxtah	r3, r3, lr
 80163f0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80163f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80163f8:	b29b      	uxth	r3, r3
 80163fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80163fe:	45b9      	cmp	r9, r7
 8016400:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8016404:	f840 3b04 	str.w	r3, [r0], #4
 8016408:	d2e8      	bcs.n	80163dc <quorem+0xb0>
 801640a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801640e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8016412:	b92a      	cbnz	r2, 8016420 <quorem+0xf4>
 8016414:	3b04      	subs	r3, #4
 8016416:	429e      	cmp	r6, r3
 8016418:	461a      	mov	r2, r3
 801641a:	d30b      	bcc.n	8016434 <quorem+0x108>
 801641c:	f8c8 4010 	str.w	r4, [r8, #16]
 8016420:	4628      	mov	r0, r5
 8016422:	b003      	add	sp, #12
 8016424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016428:	6812      	ldr	r2, [r2, #0]
 801642a:	3b04      	subs	r3, #4
 801642c:	2a00      	cmp	r2, #0
 801642e:	d1ca      	bne.n	80163c6 <quorem+0x9a>
 8016430:	3c01      	subs	r4, #1
 8016432:	e7c5      	b.n	80163c0 <quorem+0x94>
 8016434:	6812      	ldr	r2, [r2, #0]
 8016436:	3b04      	subs	r3, #4
 8016438:	2a00      	cmp	r2, #0
 801643a:	d1ef      	bne.n	801641c <quorem+0xf0>
 801643c:	3c01      	subs	r4, #1
 801643e:	e7ea      	b.n	8016416 <quorem+0xea>
 8016440:	2000      	movs	r0, #0
 8016442:	e7ee      	b.n	8016422 <quorem+0xf6>
 8016444:	0000      	movs	r0, r0
	...

08016448 <_dtoa_r>:
 8016448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801644c:	ec57 6b10 	vmov	r6, r7, d0
 8016450:	b097      	sub	sp, #92	; 0x5c
 8016452:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016454:	9106      	str	r1, [sp, #24]
 8016456:	4604      	mov	r4, r0
 8016458:	920b      	str	r2, [sp, #44]	; 0x2c
 801645a:	9312      	str	r3, [sp, #72]	; 0x48
 801645c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8016460:	e9cd 6700 	strd	r6, r7, [sp]
 8016464:	b93d      	cbnz	r5, 8016476 <_dtoa_r+0x2e>
 8016466:	2010      	movs	r0, #16
 8016468:	f001 f8ee 	bl	8017648 <malloc>
 801646c:	6260      	str	r0, [r4, #36]	; 0x24
 801646e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016472:	6005      	str	r5, [r0, #0]
 8016474:	60c5      	str	r5, [r0, #12]
 8016476:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016478:	6819      	ldr	r1, [r3, #0]
 801647a:	b151      	cbz	r1, 8016492 <_dtoa_r+0x4a>
 801647c:	685a      	ldr	r2, [r3, #4]
 801647e:	604a      	str	r2, [r1, #4]
 8016480:	2301      	movs	r3, #1
 8016482:	4093      	lsls	r3, r2
 8016484:	608b      	str	r3, [r1, #8]
 8016486:	4620      	mov	r0, r4
 8016488:	f001 f92c 	bl	80176e4 <_Bfree>
 801648c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801648e:	2200      	movs	r2, #0
 8016490:	601a      	str	r2, [r3, #0]
 8016492:	1e3b      	subs	r3, r7, #0
 8016494:	bfbb      	ittet	lt
 8016496:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801649a:	9301      	strlt	r3, [sp, #4]
 801649c:	2300      	movge	r3, #0
 801649e:	2201      	movlt	r2, #1
 80164a0:	bfac      	ite	ge
 80164a2:	f8c8 3000 	strge.w	r3, [r8]
 80164a6:	f8c8 2000 	strlt.w	r2, [r8]
 80164aa:	4baf      	ldr	r3, [pc, #700]	; (8016768 <_dtoa_r+0x320>)
 80164ac:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80164b0:	ea33 0308 	bics.w	r3, r3, r8
 80164b4:	d114      	bne.n	80164e0 <_dtoa_r+0x98>
 80164b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80164b8:	f242 730f 	movw	r3, #9999	; 0x270f
 80164bc:	6013      	str	r3, [r2, #0]
 80164be:	9b00      	ldr	r3, [sp, #0]
 80164c0:	b923      	cbnz	r3, 80164cc <_dtoa_r+0x84>
 80164c2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80164c6:	2800      	cmp	r0, #0
 80164c8:	f000 8542 	beq.w	8016f50 <_dtoa_r+0xb08>
 80164cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80164ce:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801677c <_dtoa_r+0x334>
 80164d2:	2b00      	cmp	r3, #0
 80164d4:	f000 8544 	beq.w	8016f60 <_dtoa_r+0xb18>
 80164d8:	f10b 0303 	add.w	r3, fp, #3
 80164dc:	f000 bd3e 	b.w	8016f5c <_dtoa_r+0xb14>
 80164e0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80164e4:	2200      	movs	r2, #0
 80164e6:	2300      	movs	r3, #0
 80164e8:	4630      	mov	r0, r6
 80164ea:	4639      	mov	r1, r7
 80164ec:	f7ea fb04 	bl	8000af8 <__aeabi_dcmpeq>
 80164f0:	4681      	mov	r9, r0
 80164f2:	b168      	cbz	r0, 8016510 <_dtoa_r+0xc8>
 80164f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80164f6:	2301      	movs	r3, #1
 80164f8:	6013      	str	r3, [r2, #0]
 80164fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	f000 8524 	beq.w	8016f4a <_dtoa_r+0xb02>
 8016502:	4b9a      	ldr	r3, [pc, #616]	; (801676c <_dtoa_r+0x324>)
 8016504:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016506:	f103 3bff 	add.w	fp, r3, #4294967295
 801650a:	6013      	str	r3, [r2, #0]
 801650c:	f000 bd28 	b.w	8016f60 <_dtoa_r+0xb18>
 8016510:	aa14      	add	r2, sp, #80	; 0x50
 8016512:	a915      	add	r1, sp, #84	; 0x54
 8016514:	ec47 6b10 	vmov	d0, r6, r7
 8016518:	4620      	mov	r0, r4
 801651a:	f001 fbf1 	bl	8017d00 <__d2b>
 801651e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8016522:	9004      	str	r0, [sp, #16]
 8016524:	2d00      	cmp	r5, #0
 8016526:	d07c      	beq.n	8016622 <_dtoa_r+0x1da>
 8016528:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801652c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8016530:	46b2      	mov	sl, r6
 8016532:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8016536:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801653a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801653e:	2200      	movs	r2, #0
 8016540:	4b8b      	ldr	r3, [pc, #556]	; (8016770 <_dtoa_r+0x328>)
 8016542:	4650      	mov	r0, sl
 8016544:	4659      	mov	r1, fp
 8016546:	f7e9 feb7 	bl	80002b8 <__aeabi_dsub>
 801654a:	a381      	add	r3, pc, #516	; (adr r3, 8016750 <_dtoa_r+0x308>)
 801654c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016550:	f7ea f86a 	bl	8000628 <__aeabi_dmul>
 8016554:	a380      	add	r3, pc, #512	; (adr r3, 8016758 <_dtoa_r+0x310>)
 8016556:	e9d3 2300 	ldrd	r2, r3, [r3]
 801655a:	f7e9 feaf 	bl	80002bc <__adddf3>
 801655e:	4606      	mov	r6, r0
 8016560:	4628      	mov	r0, r5
 8016562:	460f      	mov	r7, r1
 8016564:	f7e9 fff6 	bl	8000554 <__aeabi_i2d>
 8016568:	a37d      	add	r3, pc, #500	; (adr r3, 8016760 <_dtoa_r+0x318>)
 801656a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801656e:	f7ea f85b 	bl	8000628 <__aeabi_dmul>
 8016572:	4602      	mov	r2, r0
 8016574:	460b      	mov	r3, r1
 8016576:	4630      	mov	r0, r6
 8016578:	4639      	mov	r1, r7
 801657a:	f7e9 fe9f 	bl	80002bc <__adddf3>
 801657e:	4606      	mov	r6, r0
 8016580:	460f      	mov	r7, r1
 8016582:	f7ea fb01 	bl	8000b88 <__aeabi_d2iz>
 8016586:	2200      	movs	r2, #0
 8016588:	4682      	mov	sl, r0
 801658a:	2300      	movs	r3, #0
 801658c:	4630      	mov	r0, r6
 801658e:	4639      	mov	r1, r7
 8016590:	f7ea fabc 	bl	8000b0c <__aeabi_dcmplt>
 8016594:	b148      	cbz	r0, 80165aa <_dtoa_r+0x162>
 8016596:	4650      	mov	r0, sl
 8016598:	f7e9 ffdc 	bl	8000554 <__aeabi_i2d>
 801659c:	4632      	mov	r2, r6
 801659e:	463b      	mov	r3, r7
 80165a0:	f7ea faaa 	bl	8000af8 <__aeabi_dcmpeq>
 80165a4:	b908      	cbnz	r0, 80165aa <_dtoa_r+0x162>
 80165a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80165aa:	f1ba 0f16 	cmp.w	sl, #22
 80165ae:	d859      	bhi.n	8016664 <_dtoa_r+0x21c>
 80165b0:	4970      	ldr	r1, [pc, #448]	; (8016774 <_dtoa_r+0x32c>)
 80165b2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80165b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80165ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80165be:	f7ea fac3 	bl	8000b48 <__aeabi_dcmpgt>
 80165c2:	2800      	cmp	r0, #0
 80165c4:	d050      	beq.n	8016668 <_dtoa_r+0x220>
 80165c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80165ca:	2300      	movs	r3, #0
 80165cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80165ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80165d0:	1b5d      	subs	r5, r3, r5
 80165d2:	f1b5 0801 	subs.w	r8, r5, #1
 80165d6:	bf49      	itett	mi
 80165d8:	f1c5 0301 	rsbmi	r3, r5, #1
 80165dc:	2300      	movpl	r3, #0
 80165de:	9305      	strmi	r3, [sp, #20]
 80165e0:	f04f 0800 	movmi.w	r8, #0
 80165e4:	bf58      	it	pl
 80165e6:	9305      	strpl	r3, [sp, #20]
 80165e8:	f1ba 0f00 	cmp.w	sl, #0
 80165ec:	db3e      	blt.n	801666c <_dtoa_r+0x224>
 80165ee:	2300      	movs	r3, #0
 80165f0:	44d0      	add	r8, sl
 80165f2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80165f6:	9307      	str	r3, [sp, #28]
 80165f8:	9b06      	ldr	r3, [sp, #24]
 80165fa:	2b09      	cmp	r3, #9
 80165fc:	f200 8090 	bhi.w	8016720 <_dtoa_r+0x2d8>
 8016600:	2b05      	cmp	r3, #5
 8016602:	bfc4      	itt	gt
 8016604:	3b04      	subgt	r3, #4
 8016606:	9306      	strgt	r3, [sp, #24]
 8016608:	9b06      	ldr	r3, [sp, #24]
 801660a:	f1a3 0302 	sub.w	r3, r3, #2
 801660e:	bfcc      	ite	gt
 8016610:	2500      	movgt	r5, #0
 8016612:	2501      	movle	r5, #1
 8016614:	2b03      	cmp	r3, #3
 8016616:	f200 808f 	bhi.w	8016738 <_dtoa_r+0x2f0>
 801661a:	e8df f003 	tbb	[pc, r3]
 801661e:	7f7d      	.short	0x7f7d
 8016620:	7131      	.short	0x7131
 8016622:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8016626:	441d      	add	r5, r3
 8016628:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801662c:	2820      	cmp	r0, #32
 801662e:	dd13      	ble.n	8016658 <_dtoa_r+0x210>
 8016630:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8016634:	9b00      	ldr	r3, [sp, #0]
 8016636:	fa08 f800 	lsl.w	r8, r8, r0
 801663a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801663e:	fa23 f000 	lsr.w	r0, r3, r0
 8016642:	ea48 0000 	orr.w	r0, r8, r0
 8016646:	f7e9 ff75 	bl	8000534 <__aeabi_ui2d>
 801664a:	2301      	movs	r3, #1
 801664c:	4682      	mov	sl, r0
 801664e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8016652:	3d01      	subs	r5, #1
 8016654:	9313      	str	r3, [sp, #76]	; 0x4c
 8016656:	e772      	b.n	801653e <_dtoa_r+0xf6>
 8016658:	9b00      	ldr	r3, [sp, #0]
 801665a:	f1c0 0020 	rsb	r0, r0, #32
 801665e:	fa03 f000 	lsl.w	r0, r3, r0
 8016662:	e7f0      	b.n	8016646 <_dtoa_r+0x1fe>
 8016664:	2301      	movs	r3, #1
 8016666:	e7b1      	b.n	80165cc <_dtoa_r+0x184>
 8016668:	900f      	str	r0, [sp, #60]	; 0x3c
 801666a:	e7b0      	b.n	80165ce <_dtoa_r+0x186>
 801666c:	9b05      	ldr	r3, [sp, #20]
 801666e:	eba3 030a 	sub.w	r3, r3, sl
 8016672:	9305      	str	r3, [sp, #20]
 8016674:	f1ca 0300 	rsb	r3, sl, #0
 8016678:	9307      	str	r3, [sp, #28]
 801667a:	2300      	movs	r3, #0
 801667c:	930e      	str	r3, [sp, #56]	; 0x38
 801667e:	e7bb      	b.n	80165f8 <_dtoa_r+0x1b0>
 8016680:	2301      	movs	r3, #1
 8016682:	930a      	str	r3, [sp, #40]	; 0x28
 8016684:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016686:	2b00      	cmp	r3, #0
 8016688:	dd59      	ble.n	801673e <_dtoa_r+0x2f6>
 801668a:	9302      	str	r3, [sp, #8]
 801668c:	4699      	mov	r9, r3
 801668e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8016690:	2200      	movs	r2, #0
 8016692:	6072      	str	r2, [r6, #4]
 8016694:	2204      	movs	r2, #4
 8016696:	f102 0014 	add.w	r0, r2, #20
 801669a:	4298      	cmp	r0, r3
 801669c:	6871      	ldr	r1, [r6, #4]
 801669e:	d953      	bls.n	8016748 <_dtoa_r+0x300>
 80166a0:	4620      	mov	r0, r4
 80166a2:	f000 ffeb 	bl	801767c <_Balloc>
 80166a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80166a8:	6030      	str	r0, [r6, #0]
 80166aa:	f1b9 0f0e 	cmp.w	r9, #14
 80166ae:	f8d3 b000 	ldr.w	fp, [r3]
 80166b2:	f200 80e6 	bhi.w	8016882 <_dtoa_r+0x43a>
 80166b6:	2d00      	cmp	r5, #0
 80166b8:	f000 80e3 	beq.w	8016882 <_dtoa_r+0x43a>
 80166bc:	ed9d 7b00 	vldr	d7, [sp]
 80166c0:	f1ba 0f00 	cmp.w	sl, #0
 80166c4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80166c8:	dd74      	ble.n	80167b4 <_dtoa_r+0x36c>
 80166ca:	4a2a      	ldr	r2, [pc, #168]	; (8016774 <_dtoa_r+0x32c>)
 80166cc:	f00a 030f 	and.w	r3, sl, #15
 80166d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80166d4:	ed93 7b00 	vldr	d7, [r3]
 80166d8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80166dc:	06f0      	lsls	r0, r6, #27
 80166de:	ed8d 7b08 	vstr	d7, [sp, #32]
 80166e2:	d565      	bpl.n	80167b0 <_dtoa_r+0x368>
 80166e4:	4b24      	ldr	r3, [pc, #144]	; (8016778 <_dtoa_r+0x330>)
 80166e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80166ea:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80166ee:	f7ea f8c5 	bl	800087c <__aeabi_ddiv>
 80166f2:	e9cd 0100 	strd	r0, r1, [sp]
 80166f6:	f006 060f 	and.w	r6, r6, #15
 80166fa:	2503      	movs	r5, #3
 80166fc:	4f1e      	ldr	r7, [pc, #120]	; (8016778 <_dtoa_r+0x330>)
 80166fe:	e04c      	b.n	801679a <_dtoa_r+0x352>
 8016700:	2301      	movs	r3, #1
 8016702:	930a      	str	r3, [sp, #40]	; 0x28
 8016704:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016706:	4453      	add	r3, sl
 8016708:	f103 0901 	add.w	r9, r3, #1
 801670c:	9302      	str	r3, [sp, #8]
 801670e:	464b      	mov	r3, r9
 8016710:	2b01      	cmp	r3, #1
 8016712:	bfb8      	it	lt
 8016714:	2301      	movlt	r3, #1
 8016716:	e7ba      	b.n	801668e <_dtoa_r+0x246>
 8016718:	2300      	movs	r3, #0
 801671a:	e7b2      	b.n	8016682 <_dtoa_r+0x23a>
 801671c:	2300      	movs	r3, #0
 801671e:	e7f0      	b.n	8016702 <_dtoa_r+0x2ba>
 8016720:	2501      	movs	r5, #1
 8016722:	2300      	movs	r3, #0
 8016724:	9306      	str	r3, [sp, #24]
 8016726:	950a      	str	r5, [sp, #40]	; 0x28
 8016728:	f04f 33ff 	mov.w	r3, #4294967295
 801672c:	9302      	str	r3, [sp, #8]
 801672e:	4699      	mov	r9, r3
 8016730:	2200      	movs	r2, #0
 8016732:	2312      	movs	r3, #18
 8016734:	920b      	str	r2, [sp, #44]	; 0x2c
 8016736:	e7aa      	b.n	801668e <_dtoa_r+0x246>
 8016738:	2301      	movs	r3, #1
 801673a:	930a      	str	r3, [sp, #40]	; 0x28
 801673c:	e7f4      	b.n	8016728 <_dtoa_r+0x2e0>
 801673e:	2301      	movs	r3, #1
 8016740:	9302      	str	r3, [sp, #8]
 8016742:	4699      	mov	r9, r3
 8016744:	461a      	mov	r2, r3
 8016746:	e7f5      	b.n	8016734 <_dtoa_r+0x2ec>
 8016748:	3101      	adds	r1, #1
 801674a:	6071      	str	r1, [r6, #4]
 801674c:	0052      	lsls	r2, r2, #1
 801674e:	e7a2      	b.n	8016696 <_dtoa_r+0x24e>
 8016750:	636f4361 	.word	0x636f4361
 8016754:	3fd287a7 	.word	0x3fd287a7
 8016758:	8b60c8b3 	.word	0x8b60c8b3
 801675c:	3fc68a28 	.word	0x3fc68a28
 8016760:	509f79fb 	.word	0x509f79fb
 8016764:	3fd34413 	.word	0x3fd34413
 8016768:	7ff00000 	.word	0x7ff00000
 801676c:	080195fc 	.word	0x080195fc
 8016770:	3ff80000 	.word	0x3ff80000
 8016774:	08019500 	.word	0x08019500
 8016778:	080194d8 	.word	0x080194d8
 801677c:	08019461 	.word	0x08019461
 8016780:	07f1      	lsls	r1, r6, #31
 8016782:	d508      	bpl.n	8016796 <_dtoa_r+0x34e>
 8016784:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016788:	e9d7 2300 	ldrd	r2, r3, [r7]
 801678c:	f7e9 ff4c 	bl	8000628 <__aeabi_dmul>
 8016790:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016794:	3501      	adds	r5, #1
 8016796:	1076      	asrs	r6, r6, #1
 8016798:	3708      	adds	r7, #8
 801679a:	2e00      	cmp	r6, #0
 801679c:	d1f0      	bne.n	8016780 <_dtoa_r+0x338>
 801679e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80167a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80167a6:	f7ea f869 	bl	800087c <__aeabi_ddiv>
 80167aa:	e9cd 0100 	strd	r0, r1, [sp]
 80167ae:	e01a      	b.n	80167e6 <_dtoa_r+0x39e>
 80167b0:	2502      	movs	r5, #2
 80167b2:	e7a3      	b.n	80166fc <_dtoa_r+0x2b4>
 80167b4:	f000 80a0 	beq.w	80168f8 <_dtoa_r+0x4b0>
 80167b8:	f1ca 0600 	rsb	r6, sl, #0
 80167bc:	4b9f      	ldr	r3, [pc, #636]	; (8016a3c <_dtoa_r+0x5f4>)
 80167be:	4fa0      	ldr	r7, [pc, #640]	; (8016a40 <_dtoa_r+0x5f8>)
 80167c0:	f006 020f 	and.w	r2, r6, #15
 80167c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80167c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80167d0:	f7e9 ff2a 	bl	8000628 <__aeabi_dmul>
 80167d4:	e9cd 0100 	strd	r0, r1, [sp]
 80167d8:	1136      	asrs	r6, r6, #4
 80167da:	2300      	movs	r3, #0
 80167dc:	2502      	movs	r5, #2
 80167de:	2e00      	cmp	r6, #0
 80167e0:	d17f      	bne.n	80168e2 <_dtoa_r+0x49a>
 80167e2:	2b00      	cmp	r3, #0
 80167e4:	d1e1      	bne.n	80167aa <_dtoa_r+0x362>
 80167e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	f000 8087 	beq.w	80168fc <_dtoa_r+0x4b4>
 80167ee:	e9dd 6700 	ldrd	r6, r7, [sp]
 80167f2:	2200      	movs	r2, #0
 80167f4:	4b93      	ldr	r3, [pc, #588]	; (8016a44 <_dtoa_r+0x5fc>)
 80167f6:	4630      	mov	r0, r6
 80167f8:	4639      	mov	r1, r7
 80167fa:	f7ea f987 	bl	8000b0c <__aeabi_dcmplt>
 80167fe:	2800      	cmp	r0, #0
 8016800:	d07c      	beq.n	80168fc <_dtoa_r+0x4b4>
 8016802:	f1b9 0f00 	cmp.w	r9, #0
 8016806:	d079      	beq.n	80168fc <_dtoa_r+0x4b4>
 8016808:	9b02      	ldr	r3, [sp, #8]
 801680a:	2b00      	cmp	r3, #0
 801680c:	dd35      	ble.n	801687a <_dtoa_r+0x432>
 801680e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8016812:	9308      	str	r3, [sp, #32]
 8016814:	4639      	mov	r1, r7
 8016816:	2200      	movs	r2, #0
 8016818:	4b8b      	ldr	r3, [pc, #556]	; (8016a48 <_dtoa_r+0x600>)
 801681a:	4630      	mov	r0, r6
 801681c:	f7e9 ff04 	bl	8000628 <__aeabi_dmul>
 8016820:	e9cd 0100 	strd	r0, r1, [sp]
 8016824:	9f02      	ldr	r7, [sp, #8]
 8016826:	3501      	adds	r5, #1
 8016828:	4628      	mov	r0, r5
 801682a:	f7e9 fe93 	bl	8000554 <__aeabi_i2d>
 801682e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016832:	f7e9 fef9 	bl	8000628 <__aeabi_dmul>
 8016836:	2200      	movs	r2, #0
 8016838:	4b84      	ldr	r3, [pc, #528]	; (8016a4c <_dtoa_r+0x604>)
 801683a:	f7e9 fd3f 	bl	80002bc <__adddf3>
 801683e:	4605      	mov	r5, r0
 8016840:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8016844:	2f00      	cmp	r7, #0
 8016846:	d15d      	bne.n	8016904 <_dtoa_r+0x4bc>
 8016848:	2200      	movs	r2, #0
 801684a:	4b81      	ldr	r3, [pc, #516]	; (8016a50 <_dtoa_r+0x608>)
 801684c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016850:	f7e9 fd32 	bl	80002b8 <__aeabi_dsub>
 8016854:	462a      	mov	r2, r5
 8016856:	4633      	mov	r3, r6
 8016858:	e9cd 0100 	strd	r0, r1, [sp]
 801685c:	f7ea f974 	bl	8000b48 <__aeabi_dcmpgt>
 8016860:	2800      	cmp	r0, #0
 8016862:	f040 8288 	bne.w	8016d76 <_dtoa_r+0x92e>
 8016866:	462a      	mov	r2, r5
 8016868:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801686c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016870:	f7ea f94c 	bl	8000b0c <__aeabi_dcmplt>
 8016874:	2800      	cmp	r0, #0
 8016876:	f040 827c 	bne.w	8016d72 <_dtoa_r+0x92a>
 801687a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801687e:	e9cd 2300 	strd	r2, r3, [sp]
 8016882:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016884:	2b00      	cmp	r3, #0
 8016886:	f2c0 8150 	blt.w	8016b2a <_dtoa_r+0x6e2>
 801688a:	f1ba 0f0e 	cmp.w	sl, #14
 801688e:	f300 814c 	bgt.w	8016b2a <_dtoa_r+0x6e2>
 8016892:	4b6a      	ldr	r3, [pc, #424]	; (8016a3c <_dtoa_r+0x5f4>)
 8016894:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8016898:	ed93 7b00 	vldr	d7, [r3]
 801689c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801689e:	2b00      	cmp	r3, #0
 80168a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80168a4:	f280 80d8 	bge.w	8016a58 <_dtoa_r+0x610>
 80168a8:	f1b9 0f00 	cmp.w	r9, #0
 80168ac:	f300 80d4 	bgt.w	8016a58 <_dtoa_r+0x610>
 80168b0:	f040 825e 	bne.w	8016d70 <_dtoa_r+0x928>
 80168b4:	2200      	movs	r2, #0
 80168b6:	4b66      	ldr	r3, [pc, #408]	; (8016a50 <_dtoa_r+0x608>)
 80168b8:	ec51 0b17 	vmov	r0, r1, d7
 80168bc:	f7e9 feb4 	bl	8000628 <__aeabi_dmul>
 80168c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80168c4:	f7ea f936 	bl	8000b34 <__aeabi_dcmpge>
 80168c8:	464f      	mov	r7, r9
 80168ca:	464e      	mov	r6, r9
 80168cc:	2800      	cmp	r0, #0
 80168ce:	f040 8234 	bne.w	8016d3a <_dtoa_r+0x8f2>
 80168d2:	2331      	movs	r3, #49	; 0x31
 80168d4:	f10b 0501 	add.w	r5, fp, #1
 80168d8:	f88b 3000 	strb.w	r3, [fp]
 80168dc:	f10a 0a01 	add.w	sl, sl, #1
 80168e0:	e22f      	b.n	8016d42 <_dtoa_r+0x8fa>
 80168e2:	07f2      	lsls	r2, r6, #31
 80168e4:	d505      	bpl.n	80168f2 <_dtoa_r+0x4aa>
 80168e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80168ea:	f7e9 fe9d 	bl	8000628 <__aeabi_dmul>
 80168ee:	3501      	adds	r5, #1
 80168f0:	2301      	movs	r3, #1
 80168f2:	1076      	asrs	r6, r6, #1
 80168f4:	3708      	adds	r7, #8
 80168f6:	e772      	b.n	80167de <_dtoa_r+0x396>
 80168f8:	2502      	movs	r5, #2
 80168fa:	e774      	b.n	80167e6 <_dtoa_r+0x39e>
 80168fc:	f8cd a020 	str.w	sl, [sp, #32]
 8016900:	464f      	mov	r7, r9
 8016902:	e791      	b.n	8016828 <_dtoa_r+0x3e0>
 8016904:	4b4d      	ldr	r3, [pc, #308]	; (8016a3c <_dtoa_r+0x5f4>)
 8016906:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801690a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801690e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016910:	2b00      	cmp	r3, #0
 8016912:	d047      	beq.n	80169a4 <_dtoa_r+0x55c>
 8016914:	4602      	mov	r2, r0
 8016916:	460b      	mov	r3, r1
 8016918:	2000      	movs	r0, #0
 801691a:	494e      	ldr	r1, [pc, #312]	; (8016a54 <_dtoa_r+0x60c>)
 801691c:	f7e9 ffae 	bl	800087c <__aeabi_ddiv>
 8016920:	462a      	mov	r2, r5
 8016922:	4633      	mov	r3, r6
 8016924:	f7e9 fcc8 	bl	80002b8 <__aeabi_dsub>
 8016928:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801692c:	465d      	mov	r5, fp
 801692e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016932:	f7ea f929 	bl	8000b88 <__aeabi_d2iz>
 8016936:	4606      	mov	r6, r0
 8016938:	f7e9 fe0c 	bl	8000554 <__aeabi_i2d>
 801693c:	4602      	mov	r2, r0
 801693e:	460b      	mov	r3, r1
 8016940:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016944:	f7e9 fcb8 	bl	80002b8 <__aeabi_dsub>
 8016948:	3630      	adds	r6, #48	; 0x30
 801694a:	f805 6b01 	strb.w	r6, [r5], #1
 801694e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016952:	e9cd 0100 	strd	r0, r1, [sp]
 8016956:	f7ea f8d9 	bl	8000b0c <__aeabi_dcmplt>
 801695a:	2800      	cmp	r0, #0
 801695c:	d163      	bne.n	8016a26 <_dtoa_r+0x5de>
 801695e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016962:	2000      	movs	r0, #0
 8016964:	4937      	ldr	r1, [pc, #220]	; (8016a44 <_dtoa_r+0x5fc>)
 8016966:	f7e9 fca7 	bl	80002b8 <__aeabi_dsub>
 801696a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801696e:	f7ea f8cd 	bl	8000b0c <__aeabi_dcmplt>
 8016972:	2800      	cmp	r0, #0
 8016974:	f040 80b7 	bne.w	8016ae6 <_dtoa_r+0x69e>
 8016978:	eba5 030b 	sub.w	r3, r5, fp
 801697c:	429f      	cmp	r7, r3
 801697e:	f77f af7c 	ble.w	801687a <_dtoa_r+0x432>
 8016982:	2200      	movs	r2, #0
 8016984:	4b30      	ldr	r3, [pc, #192]	; (8016a48 <_dtoa_r+0x600>)
 8016986:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801698a:	f7e9 fe4d 	bl	8000628 <__aeabi_dmul>
 801698e:	2200      	movs	r2, #0
 8016990:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016994:	4b2c      	ldr	r3, [pc, #176]	; (8016a48 <_dtoa_r+0x600>)
 8016996:	e9dd 0100 	ldrd	r0, r1, [sp]
 801699a:	f7e9 fe45 	bl	8000628 <__aeabi_dmul>
 801699e:	e9cd 0100 	strd	r0, r1, [sp]
 80169a2:	e7c4      	b.n	801692e <_dtoa_r+0x4e6>
 80169a4:	462a      	mov	r2, r5
 80169a6:	4633      	mov	r3, r6
 80169a8:	f7e9 fe3e 	bl	8000628 <__aeabi_dmul>
 80169ac:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80169b0:	eb0b 0507 	add.w	r5, fp, r7
 80169b4:	465e      	mov	r6, fp
 80169b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80169ba:	f7ea f8e5 	bl	8000b88 <__aeabi_d2iz>
 80169be:	4607      	mov	r7, r0
 80169c0:	f7e9 fdc8 	bl	8000554 <__aeabi_i2d>
 80169c4:	3730      	adds	r7, #48	; 0x30
 80169c6:	4602      	mov	r2, r0
 80169c8:	460b      	mov	r3, r1
 80169ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80169ce:	f7e9 fc73 	bl	80002b8 <__aeabi_dsub>
 80169d2:	f806 7b01 	strb.w	r7, [r6], #1
 80169d6:	42ae      	cmp	r6, r5
 80169d8:	e9cd 0100 	strd	r0, r1, [sp]
 80169dc:	f04f 0200 	mov.w	r2, #0
 80169e0:	d126      	bne.n	8016a30 <_dtoa_r+0x5e8>
 80169e2:	4b1c      	ldr	r3, [pc, #112]	; (8016a54 <_dtoa_r+0x60c>)
 80169e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80169e8:	f7e9 fc68 	bl	80002bc <__adddf3>
 80169ec:	4602      	mov	r2, r0
 80169ee:	460b      	mov	r3, r1
 80169f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80169f4:	f7ea f8a8 	bl	8000b48 <__aeabi_dcmpgt>
 80169f8:	2800      	cmp	r0, #0
 80169fa:	d174      	bne.n	8016ae6 <_dtoa_r+0x69e>
 80169fc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016a00:	2000      	movs	r0, #0
 8016a02:	4914      	ldr	r1, [pc, #80]	; (8016a54 <_dtoa_r+0x60c>)
 8016a04:	f7e9 fc58 	bl	80002b8 <__aeabi_dsub>
 8016a08:	4602      	mov	r2, r0
 8016a0a:	460b      	mov	r3, r1
 8016a0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016a10:	f7ea f87c 	bl	8000b0c <__aeabi_dcmplt>
 8016a14:	2800      	cmp	r0, #0
 8016a16:	f43f af30 	beq.w	801687a <_dtoa_r+0x432>
 8016a1a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016a1e:	2b30      	cmp	r3, #48	; 0x30
 8016a20:	f105 32ff 	add.w	r2, r5, #4294967295
 8016a24:	d002      	beq.n	8016a2c <_dtoa_r+0x5e4>
 8016a26:	f8dd a020 	ldr.w	sl, [sp, #32]
 8016a2a:	e04a      	b.n	8016ac2 <_dtoa_r+0x67a>
 8016a2c:	4615      	mov	r5, r2
 8016a2e:	e7f4      	b.n	8016a1a <_dtoa_r+0x5d2>
 8016a30:	4b05      	ldr	r3, [pc, #20]	; (8016a48 <_dtoa_r+0x600>)
 8016a32:	f7e9 fdf9 	bl	8000628 <__aeabi_dmul>
 8016a36:	e9cd 0100 	strd	r0, r1, [sp]
 8016a3a:	e7bc      	b.n	80169b6 <_dtoa_r+0x56e>
 8016a3c:	08019500 	.word	0x08019500
 8016a40:	080194d8 	.word	0x080194d8
 8016a44:	3ff00000 	.word	0x3ff00000
 8016a48:	40240000 	.word	0x40240000
 8016a4c:	401c0000 	.word	0x401c0000
 8016a50:	40140000 	.word	0x40140000
 8016a54:	3fe00000 	.word	0x3fe00000
 8016a58:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016a5c:	465d      	mov	r5, fp
 8016a5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016a62:	4630      	mov	r0, r6
 8016a64:	4639      	mov	r1, r7
 8016a66:	f7e9 ff09 	bl	800087c <__aeabi_ddiv>
 8016a6a:	f7ea f88d 	bl	8000b88 <__aeabi_d2iz>
 8016a6e:	4680      	mov	r8, r0
 8016a70:	f7e9 fd70 	bl	8000554 <__aeabi_i2d>
 8016a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016a78:	f7e9 fdd6 	bl	8000628 <__aeabi_dmul>
 8016a7c:	4602      	mov	r2, r0
 8016a7e:	460b      	mov	r3, r1
 8016a80:	4630      	mov	r0, r6
 8016a82:	4639      	mov	r1, r7
 8016a84:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8016a88:	f7e9 fc16 	bl	80002b8 <__aeabi_dsub>
 8016a8c:	f805 6b01 	strb.w	r6, [r5], #1
 8016a90:	eba5 060b 	sub.w	r6, r5, fp
 8016a94:	45b1      	cmp	r9, r6
 8016a96:	4602      	mov	r2, r0
 8016a98:	460b      	mov	r3, r1
 8016a9a:	d139      	bne.n	8016b10 <_dtoa_r+0x6c8>
 8016a9c:	f7e9 fc0e 	bl	80002bc <__adddf3>
 8016aa0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016aa4:	4606      	mov	r6, r0
 8016aa6:	460f      	mov	r7, r1
 8016aa8:	f7ea f84e 	bl	8000b48 <__aeabi_dcmpgt>
 8016aac:	b9c8      	cbnz	r0, 8016ae2 <_dtoa_r+0x69a>
 8016aae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016ab2:	4630      	mov	r0, r6
 8016ab4:	4639      	mov	r1, r7
 8016ab6:	f7ea f81f 	bl	8000af8 <__aeabi_dcmpeq>
 8016aba:	b110      	cbz	r0, 8016ac2 <_dtoa_r+0x67a>
 8016abc:	f018 0f01 	tst.w	r8, #1
 8016ac0:	d10f      	bne.n	8016ae2 <_dtoa_r+0x69a>
 8016ac2:	9904      	ldr	r1, [sp, #16]
 8016ac4:	4620      	mov	r0, r4
 8016ac6:	f000 fe0d 	bl	80176e4 <_Bfree>
 8016aca:	2300      	movs	r3, #0
 8016acc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016ace:	702b      	strb	r3, [r5, #0]
 8016ad0:	f10a 0301 	add.w	r3, sl, #1
 8016ad4:	6013      	str	r3, [r2, #0]
 8016ad6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	f000 8241 	beq.w	8016f60 <_dtoa_r+0xb18>
 8016ade:	601d      	str	r5, [r3, #0]
 8016ae0:	e23e      	b.n	8016f60 <_dtoa_r+0xb18>
 8016ae2:	f8cd a020 	str.w	sl, [sp, #32]
 8016ae6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8016aea:	2a39      	cmp	r2, #57	; 0x39
 8016aec:	f105 33ff 	add.w	r3, r5, #4294967295
 8016af0:	d108      	bne.n	8016b04 <_dtoa_r+0x6bc>
 8016af2:	459b      	cmp	fp, r3
 8016af4:	d10a      	bne.n	8016b0c <_dtoa_r+0x6c4>
 8016af6:	9b08      	ldr	r3, [sp, #32]
 8016af8:	3301      	adds	r3, #1
 8016afa:	9308      	str	r3, [sp, #32]
 8016afc:	2330      	movs	r3, #48	; 0x30
 8016afe:	f88b 3000 	strb.w	r3, [fp]
 8016b02:	465b      	mov	r3, fp
 8016b04:	781a      	ldrb	r2, [r3, #0]
 8016b06:	3201      	adds	r2, #1
 8016b08:	701a      	strb	r2, [r3, #0]
 8016b0a:	e78c      	b.n	8016a26 <_dtoa_r+0x5de>
 8016b0c:	461d      	mov	r5, r3
 8016b0e:	e7ea      	b.n	8016ae6 <_dtoa_r+0x69e>
 8016b10:	2200      	movs	r2, #0
 8016b12:	4b9b      	ldr	r3, [pc, #620]	; (8016d80 <_dtoa_r+0x938>)
 8016b14:	f7e9 fd88 	bl	8000628 <__aeabi_dmul>
 8016b18:	2200      	movs	r2, #0
 8016b1a:	2300      	movs	r3, #0
 8016b1c:	4606      	mov	r6, r0
 8016b1e:	460f      	mov	r7, r1
 8016b20:	f7e9 ffea 	bl	8000af8 <__aeabi_dcmpeq>
 8016b24:	2800      	cmp	r0, #0
 8016b26:	d09a      	beq.n	8016a5e <_dtoa_r+0x616>
 8016b28:	e7cb      	b.n	8016ac2 <_dtoa_r+0x67a>
 8016b2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016b2c:	2a00      	cmp	r2, #0
 8016b2e:	f000 808b 	beq.w	8016c48 <_dtoa_r+0x800>
 8016b32:	9a06      	ldr	r2, [sp, #24]
 8016b34:	2a01      	cmp	r2, #1
 8016b36:	dc6e      	bgt.n	8016c16 <_dtoa_r+0x7ce>
 8016b38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016b3a:	2a00      	cmp	r2, #0
 8016b3c:	d067      	beq.n	8016c0e <_dtoa_r+0x7c6>
 8016b3e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8016b42:	9f07      	ldr	r7, [sp, #28]
 8016b44:	9d05      	ldr	r5, [sp, #20]
 8016b46:	9a05      	ldr	r2, [sp, #20]
 8016b48:	2101      	movs	r1, #1
 8016b4a:	441a      	add	r2, r3
 8016b4c:	4620      	mov	r0, r4
 8016b4e:	9205      	str	r2, [sp, #20]
 8016b50:	4498      	add	r8, r3
 8016b52:	f000 fea5 	bl	80178a0 <__i2b>
 8016b56:	4606      	mov	r6, r0
 8016b58:	2d00      	cmp	r5, #0
 8016b5a:	dd0c      	ble.n	8016b76 <_dtoa_r+0x72e>
 8016b5c:	f1b8 0f00 	cmp.w	r8, #0
 8016b60:	dd09      	ble.n	8016b76 <_dtoa_r+0x72e>
 8016b62:	4545      	cmp	r5, r8
 8016b64:	9a05      	ldr	r2, [sp, #20]
 8016b66:	462b      	mov	r3, r5
 8016b68:	bfa8      	it	ge
 8016b6a:	4643      	movge	r3, r8
 8016b6c:	1ad2      	subs	r2, r2, r3
 8016b6e:	9205      	str	r2, [sp, #20]
 8016b70:	1aed      	subs	r5, r5, r3
 8016b72:	eba8 0803 	sub.w	r8, r8, r3
 8016b76:	9b07      	ldr	r3, [sp, #28]
 8016b78:	b1eb      	cbz	r3, 8016bb6 <_dtoa_r+0x76e>
 8016b7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016b7c:	2b00      	cmp	r3, #0
 8016b7e:	d067      	beq.n	8016c50 <_dtoa_r+0x808>
 8016b80:	b18f      	cbz	r7, 8016ba6 <_dtoa_r+0x75e>
 8016b82:	4631      	mov	r1, r6
 8016b84:	463a      	mov	r2, r7
 8016b86:	4620      	mov	r0, r4
 8016b88:	f000 ff2a 	bl	80179e0 <__pow5mult>
 8016b8c:	9a04      	ldr	r2, [sp, #16]
 8016b8e:	4601      	mov	r1, r0
 8016b90:	4606      	mov	r6, r0
 8016b92:	4620      	mov	r0, r4
 8016b94:	f000 fe8d 	bl	80178b2 <__multiply>
 8016b98:	9904      	ldr	r1, [sp, #16]
 8016b9a:	9008      	str	r0, [sp, #32]
 8016b9c:	4620      	mov	r0, r4
 8016b9e:	f000 fda1 	bl	80176e4 <_Bfree>
 8016ba2:	9b08      	ldr	r3, [sp, #32]
 8016ba4:	9304      	str	r3, [sp, #16]
 8016ba6:	9b07      	ldr	r3, [sp, #28]
 8016ba8:	1bda      	subs	r2, r3, r7
 8016baa:	d004      	beq.n	8016bb6 <_dtoa_r+0x76e>
 8016bac:	9904      	ldr	r1, [sp, #16]
 8016bae:	4620      	mov	r0, r4
 8016bb0:	f000 ff16 	bl	80179e0 <__pow5mult>
 8016bb4:	9004      	str	r0, [sp, #16]
 8016bb6:	2101      	movs	r1, #1
 8016bb8:	4620      	mov	r0, r4
 8016bba:	f000 fe71 	bl	80178a0 <__i2b>
 8016bbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016bc0:	4607      	mov	r7, r0
 8016bc2:	2b00      	cmp	r3, #0
 8016bc4:	f000 81d0 	beq.w	8016f68 <_dtoa_r+0xb20>
 8016bc8:	461a      	mov	r2, r3
 8016bca:	4601      	mov	r1, r0
 8016bcc:	4620      	mov	r0, r4
 8016bce:	f000 ff07 	bl	80179e0 <__pow5mult>
 8016bd2:	9b06      	ldr	r3, [sp, #24]
 8016bd4:	2b01      	cmp	r3, #1
 8016bd6:	4607      	mov	r7, r0
 8016bd8:	dc40      	bgt.n	8016c5c <_dtoa_r+0x814>
 8016bda:	9b00      	ldr	r3, [sp, #0]
 8016bdc:	2b00      	cmp	r3, #0
 8016bde:	d139      	bne.n	8016c54 <_dtoa_r+0x80c>
 8016be0:	9b01      	ldr	r3, [sp, #4]
 8016be2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016be6:	2b00      	cmp	r3, #0
 8016be8:	d136      	bne.n	8016c58 <_dtoa_r+0x810>
 8016bea:	9b01      	ldr	r3, [sp, #4]
 8016bec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016bf0:	0d1b      	lsrs	r3, r3, #20
 8016bf2:	051b      	lsls	r3, r3, #20
 8016bf4:	b12b      	cbz	r3, 8016c02 <_dtoa_r+0x7ba>
 8016bf6:	9b05      	ldr	r3, [sp, #20]
 8016bf8:	3301      	adds	r3, #1
 8016bfa:	9305      	str	r3, [sp, #20]
 8016bfc:	f108 0801 	add.w	r8, r8, #1
 8016c00:	2301      	movs	r3, #1
 8016c02:	9307      	str	r3, [sp, #28]
 8016c04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016c06:	2b00      	cmp	r3, #0
 8016c08:	d12a      	bne.n	8016c60 <_dtoa_r+0x818>
 8016c0a:	2001      	movs	r0, #1
 8016c0c:	e030      	b.n	8016c70 <_dtoa_r+0x828>
 8016c0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016c10:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8016c14:	e795      	b.n	8016b42 <_dtoa_r+0x6fa>
 8016c16:	9b07      	ldr	r3, [sp, #28]
 8016c18:	f109 37ff 	add.w	r7, r9, #4294967295
 8016c1c:	42bb      	cmp	r3, r7
 8016c1e:	bfbf      	itttt	lt
 8016c20:	9b07      	ldrlt	r3, [sp, #28]
 8016c22:	9707      	strlt	r7, [sp, #28]
 8016c24:	1afa      	sublt	r2, r7, r3
 8016c26:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8016c28:	bfbb      	ittet	lt
 8016c2a:	189b      	addlt	r3, r3, r2
 8016c2c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8016c2e:	1bdf      	subge	r7, r3, r7
 8016c30:	2700      	movlt	r7, #0
 8016c32:	f1b9 0f00 	cmp.w	r9, #0
 8016c36:	bfb5      	itete	lt
 8016c38:	9b05      	ldrlt	r3, [sp, #20]
 8016c3a:	9d05      	ldrge	r5, [sp, #20]
 8016c3c:	eba3 0509 	sublt.w	r5, r3, r9
 8016c40:	464b      	movge	r3, r9
 8016c42:	bfb8      	it	lt
 8016c44:	2300      	movlt	r3, #0
 8016c46:	e77e      	b.n	8016b46 <_dtoa_r+0x6fe>
 8016c48:	9f07      	ldr	r7, [sp, #28]
 8016c4a:	9d05      	ldr	r5, [sp, #20]
 8016c4c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8016c4e:	e783      	b.n	8016b58 <_dtoa_r+0x710>
 8016c50:	9a07      	ldr	r2, [sp, #28]
 8016c52:	e7ab      	b.n	8016bac <_dtoa_r+0x764>
 8016c54:	2300      	movs	r3, #0
 8016c56:	e7d4      	b.n	8016c02 <_dtoa_r+0x7ba>
 8016c58:	9b00      	ldr	r3, [sp, #0]
 8016c5a:	e7d2      	b.n	8016c02 <_dtoa_r+0x7ba>
 8016c5c:	2300      	movs	r3, #0
 8016c5e:	9307      	str	r3, [sp, #28]
 8016c60:	693b      	ldr	r3, [r7, #16]
 8016c62:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8016c66:	6918      	ldr	r0, [r3, #16]
 8016c68:	f000 fdcc 	bl	8017804 <__hi0bits>
 8016c6c:	f1c0 0020 	rsb	r0, r0, #32
 8016c70:	4440      	add	r0, r8
 8016c72:	f010 001f 	ands.w	r0, r0, #31
 8016c76:	d047      	beq.n	8016d08 <_dtoa_r+0x8c0>
 8016c78:	f1c0 0320 	rsb	r3, r0, #32
 8016c7c:	2b04      	cmp	r3, #4
 8016c7e:	dd3b      	ble.n	8016cf8 <_dtoa_r+0x8b0>
 8016c80:	9b05      	ldr	r3, [sp, #20]
 8016c82:	f1c0 001c 	rsb	r0, r0, #28
 8016c86:	4403      	add	r3, r0
 8016c88:	9305      	str	r3, [sp, #20]
 8016c8a:	4405      	add	r5, r0
 8016c8c:	4480      	add	r8, r0
 8016c8e:	9b05      	ldr	r3, [sp, #20]
 8016c90:	2b00      	cmp	r3, #0
 8016c92:	dd05      	ble.n	8016ca0 <_dtoa_r+0x858>
 8016c94:	461a      	mov	r2, r3
 8016c96:	9904      	ldr	r1, [sp, #16]
 8016c98:	4620      	mov	r0, r4
 8016c9a:	f000 feef 	bl	8017a7c <__lshift>
 8016c9e:	9004      	str	r0, [sp, #16]
 8016ca0:	f1b8 0f00 	cmp.w	r8, #0
 8016ca4:	dd05      	ble.n	8016cb2 <_dtoa_r+0x86a>
 8016ca6:	4639      	mov	r1, r7
 8016ca8:	4642      	mov	r2, r8
 8016caa:	4620      	mov	r0, r4
 8016cac:	f000 fee6 	bl	8017a7c <__lshift>
 8016cb0:	4607      	mov	r7, r0
 8016cb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016cb4:	b353      	cbz	r3, 8016d0c <_dtoa_r+0x8c4>
 8016cb6:	4639      	mov	r1, r7
 8016cb8:	9804      	ldr	r0, [sp, #16]
 8016cba:	f000 ff33 	bl	8017b24 <__mcmp>
 8016cbe:	2800      	cmp	r0, #0
 8016cc0:	da24      	bge.n	8016d0c <_dtoa_r+0x8c4>
 8016cc2:	2300      	movs	r3, #0
 8016cc4:	220a      	movs	r2, #10
 8016cc6:	9904      	ldr	r1, [sp, #16]
 8016cc8:	4620      	mov	r0, r4
 8016cca:	f000 fd22 	bl	8017712 <__multadd>
 8016cce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016cd0:	9004      	str	r0, [sp, #16]
 8016cd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	f000 814d 	beq.w	8016f76 <_dtoa_r+0xb2e>
 8016cdc:	2300      	movs	r3, #0
 8016cde:	4631      	mov	r1, r6
 8016ce0:	220a      	movs	r2, #10
 8016ce2:	4620      	mov	r0, r4
 8016ce4:	f000 fd15 	bl	8017712 <__multadd>
 8016ce8:	9b02      	ldr	r3, [sp, #8]
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	4606      	mov	r6, r0
 8016cee:	dc4f      	bgt.n	8016d90 <_dtoa_r+0x948>
 8016cf0:	9b06      	ldr	r3, [sp, #24]
 8016cf2:	2b02      	cmp	r3, #2
 8016cf4:	dd4c      	ble.n	8016d90 <_dtoa_r+0x948>
 8016cf6:	e011      	b.n	8016d1c <_dtoa_r+0x8d4>
 8016cf8:	d0c9      	beq.n	8016c8e <_dtoa_r+0x846>
 8016cfa:	9a05      	ldr	r2, [sp, #20]
 8016cfc:	331c      	adds	r3, #28
 8016cfe:	441a      	add	r2, r3
 8016d00:	9205      	str	r2, [sp, #20]
 8016d02:	441d      	add	r5, r3
 8016d04:	4498      	add	r8, r3
 8016d06:	e7c2      	b.n	8016c8e <_dtoa_r+0x846>
 8016d08:	4603      	mov	r3, r0
 8016d0a:	e7f6      	b.n	8016cfa <_dtoa_r+0x8b2>
 8016d0c:	f1b9 0f00 	cmp.w	r9, #0
 8016d10:	dc38      	bgt.n	8016d84 <_dtoa_r+0x93c>
 8016d12:	9b06      	ldr	r3, [sp, #24]
 8016d14:	2b02      	cmp	r3, #2
 8016d16:	dd35      	ble.n	8016d84 <_dtoa_r+0x93c>
 8016d18:	f8cd 9008 	str.w	r9, [sp, #8]
 8016d1c:	9b02      	ldr	r3, [sp, #8]
 8016d1e:	b963      	cbnz	r3, 8016d3a <_dtoa_r+0x8f2>
 8016d20:	4639      	mov	r1, r7
 8016d22:	2205      	movs	r2, #5
 8016d24:	4620      	mov	r0, r4
 8016d26:	f000 fcf4 	bl	8017712 <__multadd>
 8016d2a:	4601      	mov	r1, r0
 8016d2c:	4607      	mov	r7, r0
 8016d2e:	9804      	ldr	r0, [sp, #16]
 8016d30:	f000 fef8 	bl	8017b24 <__mcmp>
 8016d34:	2800      	cmp	r0, #0
 8016d36:	f73f adcc 	bgt.w	80168d2 <_dtoa_r+0x48a>
 8016d3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016d3c:	465d      	mov	r5, fp
 8016d3e:	ea6f 0a03 	mvn.w	sl, r3
 8016d42:	f04f 0900 	mov.w	r9, #0
 8016d46:	4639      	mov	r1, r7
 8016d48:	4620      	mov	r0, r4
 8016d4a:	f000 fccb 	bl	80176e4 <_Bfree>
 8016d4e:	2e00      	cmp	r6, #0
 8016d50:	f43f aeb7 	beq.w	8016ac2 <_dtoa_r+0x67a>
 8016d54:	f1b9 0f00 	cmp.w	r9, #0
 8016d58:	d005      	beq.n	8016d66 <_dtoa_r+0x91e>
 8016d5a:	45b1      	cmp	r9, r6
 8016d5c:	d003      	beq.n	8016d66 <_dtoa_r+0x91e>
 8016d5e:	4649      	mov	r1, r9
 8016d60:	4620      	mov	r0, r4
 8016d62:	f000 fcbf 	bl	80176e4 <_Bfree>
 8016d66:	4631      	mov	r1, r6
 8016d68:	4620      	mov	r0, r4
 8016d6a:	f000 fcbb 	bl	80176e4 <_Bfree>
 8016d6e:	e6a8      	b.n	8016ac2 <_dtoa_r+0x67a>
 8016d70:	2700      	movs	r7, #0
 8016d72:	463e      	mov	r6, r7
 8016d74:	e7e1      	b.n	8016d3a <_dtoa_r+0x8f2>
 8016d76:	f8dd a020 	ldr.w	sl, [sp, #32]
 8016d7a:	463e      	mov	r6, r7
 8016d7c:	e5a9      	b.n	80168d2 <_dtoa_r+0x48a>
 8016d7e:	bf00      	nop
 8016d80:	40240000 	.word	0x40240000
 8016d84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016d86:	f8cd 9008 	str.w	r9, [sp, #8]
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	f000 80fa 	beq.w	8016f84 <_dtoa_r+0xb3c>
 8016d90:	2d00      	cmp	r5, #0
 8016d92:	dd05      	ble.n	8016da0 <_dtoa_r+0x958>
 8016d94:	4631      	mov	r1, r6
 8016d96:	462a      	mov	r2, r5
 8016d98:	4620      	mov	r0, r4
 8016d9a:	f000 fe6f 	bl	8017a7c <__lshift>
 8016d9e:	4606      	mov	r6, r0
 8016da0:	9b07      	ldr	r3, [sp, #28]
 8016da2:	2b00      	cmp	r3, #0
 8016da4:	d04c      	beq.n	8016e40 <_dtoa_r+0x9f8>
 8016da6:	6871      	ldr	r1, [r6, #4]
 8016da8:	4620      	mov	r0, r4
 8016daa:	f000 fc67 	bl	801767c <_Balloc>
 8016dae:	6932      	ldr	r2, [r6, #16]
 8016db0:	3202      	adds	r2, #2
 8016db2:	4605      	mov	r5, r0
 8016db4:	0092      	lsls	r2, r2, #2
 8016db6:	f106 010c 	add.w	r1, r6, #12
 8016dba:	300c      	adds	r0, #12
 8016dbc:	f7fd fd08 	bl	80147d0 <memcpy>
 8016dc0:	2201      	movs	r2, #1
 8016dc2:	4629      	mov	r1, r5
 8016dc4:	4620      	mov	r0, r4
 8016dc6:	f000 fe59 	bl	8017a7c <__lshift>
 8016dca:	9b00      	ldr	r3, [sp, #0]
 8016dcc:	f8cd b014 	str.w	fp, [sp, #20]
 8016dd0:	f003 0301 	and.w	r3, r3, #1
 8016dd4:	46b1      	mov	r9, r6
 8016dd6:	9307      	str	r3, [sp, #28]
 8016dd8:	4606      	mov	r6, r0
 8016dda:	4639      	mov	r1, r7
 8016ddc:	9804      	ldr	r0, [sp, #16]
 8016dde:	f7ff faa5 	bl	801632c <quorem>
 8016de2:	4649      	mov	r1, r9
 8016de4:	4605      	mov	r5, r0
 8016de6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8016dea:	9804      	ldr	r0, [sp, #16]
 8016dec:	f000 fe9a 	bl	8017b24 <__mcmp>
 8016df0:	4632      	mov	r2, r6
 8016df2:	9000      	str	r0, [sp, #0]
 8016df4:	4639      	mov	r1, r7
 8016df6:	4620      	mov	r0, r4
 8016df8:	f000 feae 	bl	8017b58 <__mdiff>
 8016dfc:	68c3      	ldr	r3, [r0, #12]
 8016dfe:	4602      	mov	r2, r0
 8016e00:	bb03      	cbnz	r3, 8016e44 <_dtoa_r+0x9fc>
 8016e02:	4601      	mov	r1, r0
 8016e04:	9008      	str	r0, [sp, #32]
 8016e06:	9804      	ldr	r0, [sp, #16]
 8016e08:	f000 fe8c 	bl	8017b24 <__mcmp>
 8016e0c:	9a08      	ldr	r2, [sp, #32]
 8016e0e:	4603      	mov	r3, r0
 8016e10:	4611      	mov	r1, r2
 8016e12:	4620      	mov	r0, r4
 8016e14:	9308      	str	r3, [sp, #32]
 8016e16:	f000 fc65 	bl	80176e4 <_Bfree>
 8016e1a:	9b08      	ldr	r3, [sp, #32]
 8016e1c:	b9a3      	cbnz	r3, 8016e48 <_dtoa_r+0xa00>
 8016e1e:	9a06      	ldr	r2, [sp, #24]
 8016e20:	b992      	cbnz	r2, 8016e48 <_dtoa_r+0xa00>
 8016e22:	9a07      	ldr	r2, [sp, #28]
 8016e24:	b982      	cbnz	r2, 8016e48 <_dtoa_r+0xa00>
 8016e26:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8016e2a:	d029      	beq.n	8016e80 <_dtoa_r+0xa38>
 8016e2c:	9b00      	ldr	r3, [sp, #0]
 8016e2e:	2b00      	cmp	r3, #0
 8016e30:	dd01      	ble.n	8016e36 <_dtoa_r+0x9ee>
 8016e32:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8016e36:	9b05      	ldr	r3, [sp, #20]
 8016e38:	1c5d      	adds	r5, r3, #1
 8016e3a:	f883 8000 	strb.w	r8, [r3]
 8016e3e:	e782      	b.n	8016d46 <_dtoa_r+0x8fe>
 8016e40:	4630      	mov	r0, r6
 8016e42:	e7c2      	b.n	8016dca <_dtoa_r+0x982>
 8016e44:	2301      	movs	r3, #1
 8016e46:	e7e3      	b.n	8016e10 <_dtoa_r+0x9c8>
 8016e48:	9a00      	ldr	r2, [sp, #0]
 8016e4a:	2a00      	cmp	r2, #0
 8016e4c:	db04      	blt.n	8016e58 <_dtoa_r+0xa10>
 8016e4e:	d125      	bne.n	8016e9c <_dtoa_r+0xa54>
 8016e50:	9a06      	ldr	r2, [sp, #24]
 8016e52:	bb1a      	cbnz	r2, 8016e9c <_dtoa_r+0xa54>
 8016e54:	9a07      	ldr	r2, [sp, #28]
 8016e56:	bb0a      	cbnz	r2, 8016e9c <_dtoa_r+0xa54>
 8016e58:	2b00      	cmp	r3, #0
 8016e5a:	ddec      	ble.n	8016e36 <_dtoa_r+0x9ee>
 8016e5c:	2201      	movs	r2, #1
 8016e5e:	9904      	ldr	r1, [sp, #16]
 8016e60:	4620      	mov	r0, r4
 8016e62:	f000 fe0b 	bl	8017a7c <__lshift>
 8016e66:	4639      	mov	r1, r7
 8016e68:	9004      	str	r0, [sp, #16]
 8016e6a:	f000 fe5b 	bl	8017b24 <__mcmp>
 8016e6e:	2800      	cmp	r0, #0
 8016e70:	dc03      	bgt.n	8016e7a <_dtoa_r+0xa32>
 8016e72:	d1e0      	bne.n	8016e36 <_dtoa_r+0x9ee>
 8016e74:	f018 0f01 	tst.w	r8, #1
 8016e78:	d0dd      	beq.n	8016e36 <_dtoa_r+0x9ee>
 8016e7a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8016e7e:	d1d8      	bne.n	8016e32 <_dtoa_r+0x9ea>
 8016e80:	9b05      	ldr	r3, [sp, #20]
 8016e82:	9a05      	ldr	r2, [sp, #20]
 8016e84:	1c5d      	adds	r5, r3, #1
 8016e86:	2339      	movs	r3, #57	; 0x39
 8016e88:	7013      	strb	r3, [r2, #0]
 8016e8a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016e8e:	2b39      	cmp	r3, #57	; 0x39
 8016e90:	f105 32ff 	add.w	r2, r5, #4294967295
 8016e94:	d04f      	beq.n	8016f36 <_dtoa_r+0xaee>
 8016e96:	3301      	adds	r3, #1
 8016e98:	7013      	strb	r3, [r2, #0]
 8016e9a:	e754      	b.n	8016d46 <_dtoa_r+0x8fe>
 8016e9c:	9a05      	ldr	r2, [sp, #20]
 8016e9e:	2b00      	cmp	r3, #0
 8016ea0:	f102 0501 	add.w	r5, r2, #1
 8016ea4:	dd06      	ble.n	8016eb4 <_dtoa_r+0xa6c>
 8016ea6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8016eaa:	d0e9      	beq.n	8016e80 <_dtoa_r+0xa38>
 8016eac:	f108 0801 	add.w	r8, r8, #1
 8016eb0:	9b05      	ldr	r3, [sp, #20]
 8016eb2:	e7c2      	b.n	8016e3a <_dtoa_r+0x9f2>
 8016eb4:	9a02      	ldr	r2, [sp, #8]
 8016eb6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8016eba:	eba5 030b 	sub.w	r3, r5, fp
 8016ebe:	4293      	cmp	r3, r2
 8016ec0:	d021      	beq.n	8016f06 <_dtoa_r+0xabe>
 8016ec2:	2300      	movs	r3, #0
 8016ec4:	220a      	movs	r2, #10
 8016ec6:	9904      	ldr	r1, [sp, #16]
 8016ec8:	4620      	mov	r0, r4
 8016eca:	f000 fc22 	bl	8017712 <__multadd>
 8016ece:	45b1      	cmp	r9, r6
 8016ed0:	9004      	str	r0, [sp, #16]
 8016ed2:	f04f 0300 	mov.w	r3, #0
 8016ed6:	f04f 020a 	mov.w	r2, #10
 8016eda:	4649      	mov	r1, r9
 8016edc:	4620      	mov	r0, r4
 8016ede:	d105      	bne.n	8016eec <_dtoa_r+0xaa4>
 8016ee0:	f000 fc17 	bl	8017712 <__multadd>
 8016ee4:	4681      	mov	r9, r0
 8016ee6:	4606      	mov	r6, r0
 8016ee8:	9505      	str	r5, [sp, #20]
 8016eea:	e776      	b.n	8016dda <_dtoa_r+0x992>
 8016eec:	f000 fc11 	bl	8017712 <__multadd>
 8016ef0:	4631      	mov	r1, r6
 8016ef2:	4681      	mov	r9, r0
 8016ef4:	2300      	movs	r3, #0
 8016ef6:	220a      	movs	r2, #10
 8016ef8:	4620      	mov	r0, r4
 8016efa:	f000 fc0a 	bl	8017712 <__multadd>
 8016efe:	4606      	mov	r6, r0
 8016f00:	e7f2      	b.n	8016ee8 <_dtoa_r+0xaa0>
 8016f02:	f04f 0900 	mov.w	r9, #0
 8016f06:	2201      	movs	r2, #1
 8016f08:	9904      	ldr	r1, [sp, #16]
 8016f0a:	4620      	mov	r0, r4
 8016f0c:	f000 fdb6 	bl	8017a7c <__lshift>
 8016f10:	4639      	mov	r1, r7
 8016f12:	9004      	str	r0, [sp, #16]
 8016f14:	f000 fe06 	bl	8017b24 <__mcmp>
 8016f18:	2800      	cmp	r0, #0
 8016f1a:	dcb6      	bgt.n	8016e8a <_dtoa_r+0xa42>
 8016f1c:	d102      	bne.n	8016f24 <_dtoa_r+0xadc>
 8016f1e:	f018 0f01 	tst.w	r8, #1
 8016f22:	d1b2      	bne.n	8016e8a <_dtoa_r+0xa42>
 8016f24:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016f28:	2b30      	cmp	r3, #48	; 0x30
 8016f2a:	f105 32ff 	add.w	r2, r5, #4294967295
 8016f2e:	f47f af0a 	bne.w	8016d46 <_dtoa_r+0x8fe>
 8016f32:	4615      	mov	r5, r2
 8016f34:	e7f6      	b.n	8016f24 <_dtoa_r+0xadc>
 8016f36:	4593      	cmp	fp, r2
 8016f38:	d105      	bne.n	8016f46 <_dtoa_r+0xafe>
 8016f3a:	2331      	movs	r3, #49	; 0x31
 8016f3c:	f10a 0a01 	add.w	sl, sl, #1
 8016f40:	f88b 3000 	strb.w	r3, [fp]
 8016f44:	e6ff      	b.n	8016d46 <_dtoa_r+0x8fe>
 8016f46:	4615      	mov	r5, r2
 8016f48:	e79f      	b.n	8016e8a <_dtoa_r+0xa42>
 8016f4a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8016fb0 <_dtoa_r+0xb68>
 8016f4e:	e007      	b.n	8016f60 <_dtoa_r+0xb18>
 8016f50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016f52:	f8df b060 	ldr.w	fp, [pc, #96]	; 8016fb4 <_dtoa_r+0xb6c>
 8016f56:	b11b      	cbz	r3, 8016f60 <_dtoa_r+0xb18>
 8016f58:	f10b 0308 	add.w	r3, fp, #8
 8016f5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016f5e:	6013      	str	r3, [r2, #0]
 8016f60:	4658      	mov	r0, fp
 8016f62:	b017      	add	sp, #92	; 0x5c
 8016f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f68:	9b06      	ldr	r3, [sp, #24]
 8016f6a:	2b01      	cmp	r3, #1
 8016f6c:	f77f ae35 	ble.w	8016bda <_dtoa_r+0x792>
 8016f70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016f72:	9307      	str	r3, [sp, #28]
 8016f74:	e649      	b.n	8016c0a <_dtoa_r+0x7c2>
 8016f76:	9b02      	ldr	r3, [sp, #8]
 8016f78:	2b00      	cmp	r3, #0
 8016f7a:	dc03      	bgt.n	8016f84 <_dtoa_r+0xb3c>
 8016f7c:	9b06      	ldr	r3, [sp, #24]
 8016f7e:	2b02      	cmp	r3, #2
 8016f80:	f73f aecc 	bgt.w	8016d1c <_dtoa_r+0x8d4>
 8016f84:	465d      	mov	r5, fp
 8016f86:	4639      	mov	r1, r7
 8016f88:	9804      	ldr	r0, [sp, #16]
 8016f8a:	f7ff f9cf 	bl	801632c <quorem>
 8016f8e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8016f92:	f805 8b01 	strb.w	r8, [r5], #1
 8016f96:	9a02      	ldr	r2, [sp, #8]
 8016f98:	eba5 030b 	sub.w	r3, r5, fp
 8016f9c:	429a      	cmp	r2, r3
 8016f9e:	ddb0      	ble.n	8016f02 <_dtoa_r+0xaba>
 8016fa0:	2300      	movs	r3, #0
 8016fa2:	220a      	movs	r2, #10
 8016fa4:	9904      	ldr	r1, [sp, #16]
 8016fa6:	4620      	mov	r0, r4
 8016fa8:	f000 fbb3 	bl	8017712 <__multadd>
 8016fac:	9004      	str	r0, [sp, #16]
 8016fae:	e7ea      	b.n	8016f86 <_dtoa_r+0xb3e>
 8016fb0:	080195fb 	.word	0x080195fb
 8016fb4:	08019458 	.word	0x08019458

08016fb8 <rshift>:
 8016fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016fba:	6906      	ldr	r6, [r0, #16]
 8016fbc:	114b      	asrs	r3, r1, #5
 8016fbe:	429e      	cmp	r6, r3
 8016fc0:	f100 0414 	add.w	r4, r0, #20
 8016fc4:	dd30      	ble.n	8017028 <rshift+0x70>
 8016fc6:	f011 011f 	ands.w	r1, r1, #31
 8016fca:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8016fce:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8016fd2:	d108      	bne.n	8016fe6 <rshift+0x2e>
 8016fd4:	4621      	mov	r1, r4
 8016fd6:	42b2      	cmp	r2, r6
 8016fd8:	460b      	mov	r3, r1
 8016fda:	d211      	bcs.n	8017000 <rshift+0x48>
 8016fdc:	f852 3b04 	ldr.w	r3, [r2], #4
 8016fe0:	f841 3b04 	str.w	r3, [r1], #4
 8016fe4:	e7f7      	b.n	8016fd6 <rshift+0x1e>
 8016fe6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8016fea:	f1c1 0c20 	rsb	ip, r1, #32
 8016fee:	40cd      	lsrs	r5, r1
 8016ff0:	3204      	adds	r2, #4
 8016ff2:	4623      	mov	r3, r4
 8016ff4:	42b2      	cmp	r2, r6
 8016ff6:	4617      	mov	r7, r2
 8016ff8:	d30c      	bcc.n	8017014 <rshift+0x5c>
 8016ffa:	601d      	str	r5, [r3, #0]
 8016ffc:	b105      	cbz	r5, 8017000 <rshift+0x48>
 8016ffe:	3304      	adds	r3, #4
 8017000:	1b1a      	subs	r2, r3, r4
 8017002:	42a3      	cmp	r3, r4
 8017004:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017008:	bf08      	it	eq
 801700a:	2300      	moveq	r3, #0
 801700c:	6102      	str	r2, [r0, #16]
 801700e:	bf08      	it	eq
 8017010:	6143      	streq	r3, [r0, #20]
 8017012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017014:	683f      	ldr	r7, [r7, #0]
 8017016:	fa07 f70c 	lsl.w	r7, r7, ip
 801701a:	433d      	orrs	r5, r7
 801701c:	f843 5b04 	str.w	r5, [r3], #4
 8017020:	f852 5b04 	ldr.w	r5, [r2], #4
 8017024:	40cd      	lsrs	r5, r1
 8017026:	e7e5      	b.n	8016ff4 <rshift+0x3c>
 8017028:	4623      	mov	r3, r4
 801702a:	e7e9      	b.n	8017000 <rshift+0x48>

0801702c <__hexdig_fun>:
 801702c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8017030:	2b09      	cmp	r3, #9
 8017032:	d802      	bhi.n	801703a <__hexdig_fun+0xe>
 8017034:	3820      	subs	r0, #32
 8017036:	b2c0      	uxtb	r0, r0
 8017038:	4770      	bx	lr
 801703a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801703e:	2b05      	cmp	r3, #5
 8017040:	d801      	bhi.n	8017046 <__hexdig_fun+0x1a>
 8017042:	3847      	subs	r0, #71	; 0x47
 8017044:	e7f7      	b.n	8017036 <__hexdig_fun+0xa>
 8017046:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801704a:	2b05      	cmp	r3, #5
 801704c:	d801      	bhi.n	8017052 <__hexdig_fun+0x26>
 801704e:	3827      	subs	r0, #39	; 0x27
 8017050:	e7f1      	b.n	8017036 <__hexdig_fun+0xa>
 8017052:	2000      	movs	r0, #0
 8017054:	4770      	bx	lr

08017056 <__gethex>:
 8017056:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801705a:	b08b      	sub	sp, #44	; 0x2c
 801705c:	468a      	mov	sl, r1
 801705e:	9002      	str	r0, [sp, #8]
 8017060:	9816      	ldr	r0, [sp, #88]	; 0x58
 8017062:	9306      	str	r3, [sp, #24]
 8017064:	4690      	mov	r8, r2
 8017066:	f000 fadf 	bl	8017628 <__localeconv_l>
 801706a:	6803      	ldr	r3, [r0, #0]
 801706c:	9303      	str	r3, [sp, #12]
 801706e:	4618      	mov	r0, r3
 8017070:	f7e9 f8c6 	bl	8000200 <strlen>
 8017074:	9b03      	ldr	r3, [sp, #12]
 8017076:	9001      	str	r0, [sp, #4]
 8017078:	4403      	add	r3, r0
 801707a:	f04f 0b00 	mov.w	fp, #0
 801707e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8017082:	9307      	str	r3, [sp, #28]
 8017084:	f8da 3000 	ldr.w	r3, [sl]
 8017088:	3302      	adds	r3, #2
 801708a:	461f      	mov	r7, r3
 801708c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8017090:	2830      	cmp	r0, #48	; 0x30
 8017092:	d06c      	beq.n	801716e <__gethex+0x118>
 8017094:	f7ff ffca 	bl	801702c <__hexdig_fun>
 8017098:	4604      	mov	r4, r0
 801709a:	2800      	cmp	r0, #0
 801709c:	d16a      	bne.n	8017174 <__gethex+0x11e>
 801709e:	9a01      	ldr	r2, [sp, #4]
 80170a0:	9903      	ldr	r1, [sp, #12]
 80170a2:	4638      	mov	r0, r7
 80170a4:	f001 fc36 	bl	8018914 <strncmp>
 80170a8:	2800      	cmp	r0, #0
 80170aa:	d166      	bne.n	801717a <__gethex+0x124>
 80170ac:	9b01      	ldr	r3, [sp, #4]
 80170ae:	5cf8      	ldrb	r0, [r7, r3]
 80170b0:	18fe      	adds	r6, r7, r3
 80170b2:	f7ff ffbb 	bl	801702c <__hexdig_fun>
 80170b6:	2800      	cmp	r0, #0
 80170b8:	d062      	beq.n	8017180 <__gethex+0x12a>
 80170ba:	4633      	mov	r3, r6
 80170bc:	7818      	ldrb	r0, [r3, #0]
 80170be:	2830      	cmp	r0, #48	; 0x30
 80170c0:	461f      	mov	r7, r3
 80170c2:	f103 0301 	add.w	r3, r3, #1
 80170c6:	d0f9      	beq.n	80170bc <__gethex+0x66>
 80170c8:	f7ff ffb0 	bl	801702c <__hexdig_fun>
 80170cc:	fab0 f580 	clz	r5, r0
 80170d0:	096d      	lsrs	r5, r5, #5
 80170d2:	4634      	mov	r4, r6
 80170d4:	f04f 0b01 	mov.w	fp, #1
 80170d8:	463a      	mov	r2, r7
 80170da:	4616      	mov	r6, r2
 80170dc:	3201      	adds	r2, #1
 80170de:	7830      	ldrb	r0, [r6, #0]
 80170e0:	f7ff ffa4 	bl	801702c <__hexdig_fun>
 80170e4:	2800      	cmp	r0, #0
 80170e6:	d1f8      	bne.n	80170da <__gethex+0x84>
 80170e8:	9a01      	ldr	r2, [sp, #4]
 80170ea:	9903      	ldr	r1, [sp, #12]
 80170ec:	4630      	mov	r0, r6
 80170ee:	f001 fc11 	bl	8018914 <strncmp>
 80170f2:	b950      	cbnz	r0, 801710a <__gethex+0xb4>
 80170f4:	b954      	cbnz	r4, 801710c <__gethex+0xb6>
 80170f6:	9b01      	ldr	r3, [sp, #4]
 80170f8:	18f4      	adds	r4, r6, r3
 80170fa:	4622      	mov	r2, r4
 80170fc:	4616      	mov	r6, r2
 80170fe:	3201      	adds	r2, #1
 8017100:	7830      	ldrb	r0, [r6, #0]
 8017102:	f7ff ff93 	bl	801702c <__hexdig_fun>
 8017106:	2800      	cmp	r0, #0
 8017108:	d1f8      	bne.n	80170fc <__gethex+0xa6>
 801710a:	b10c      	cbz	r4, 8017110 <__gethex+0xba>
 801710c:	1ba4      	subs	r4, r4, r6
 801710e:	00a4      	lsls	r4, r4, #2
 8017110:	7833      	ldrb	r3, [r6, #0]
 8017112:	2b50      	cmp	r3, #80	; 0x50
 8017114:	d001      	beq.n	801711a <__gethex+0xc4>
 8017116:	2b70      	cmp	r3, #112	; 0x70
 8017118:	d140      	bne.n	801719c <__gethex+0x146>
 801711a:	7873      	ldrb	r3, [r6, #1]
 801711c:	2b2b      	cmp	r3, #43	; 0x2b
 801711e:	d031      	beq.n	8017184 <__gethex+0x12e>
 8017120:	2b2d      	cmp	r3, #45	; 0x2d
 8017122:	d033      	beq.n	801718c <__gethex+0x136>
 8017124:	1c71      	adds	r1, r6, #1
 8017126:	f04f 0900 	mov.w	r9, #0
 801712a:	7808      	ldrb	r0, [r1, #0]
 801712c:	f7ff ff7e 	bl	801702c <__hexdig_fun>
 8017130:	1e43      	subs	r3, r0, #1
 8017132:	b2db      	uxtb	r3, r3
 8017134:	2b18      	cmp	r3, #24
 8017136:	d831      	bhi.n	801719c <__gethex+0x146>
 8017138:	f1a0 0210 	sub.w	r2, r0, #16
 801713c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017140:	f7ff ff74 	bl	801702c <__hexdig_fun>
 8017144:	1e43      	subs	r3, r0, #1
 8017146:	b2db      	uxtb	r3, r3
 8017148:	2b18      	cmp	r3, #24
 801714a:	d922      	bls.n	8017192 <__gethex+0x13c>
 801714c:	f1b9 0f00 	cmp.w	r9, #0
 8017150:	d000      	beq.n	8017154 <__gethex+0xfe>
 8017152:	4252      	negs	r2, r2
 8017154:	4414      	add	r4, r2
 8017156:	f8ca 1000 	str.w	r1, [sl]
 801715a:	b30d      	cbz	r5, 80171a0 <__gethex+0x14a>
 801715c:	f1bb 0f00 	cmp.w	fp, #0
 8017160:	bf0c      	ite	eq
 8017162:	2706      	moveq	r7, #6
 8017164:	2700      	movne	r7, #0
 8017166:	4638      	mov	r0, r7
 8017168:	b00b      	add	sp, #44	; 0x2c
 801716a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801716e:	f10b 0b01 	add.w	fp, fp, #1
 8017172:	e78a      	b.n	801708a <__gethex+0x34>
 8017174:	2500      	movs	r5, #0
 8017176:	462c      	mov	r4, r5
 8017178:	e7ae      	b.n	80170d8 <__gethex+0x82>
 801717a:	463e      	mov	r6, r7
 801717c:	2501      	movs	r5, #1
 801717e:	e7c7      	b.n	8017110 <__gethex+0xba>
 8017180:	4604      	mov	r4, r0
 8017182:	e7fb      	b.n	801717c <__gethex+0x126>
 8017184:	f04f 0900 	mov.w	r9, #0
 8017188:	1cb1      	adds	r1, r6, #2
 801718a:	e7ce      	b.n	801712a <__gethex+0xd4>
 801718c:	f04f 0901 	mov.w	r9, #1
 8017190:	e7fa      	b.n	8017188 <__gethex+0x132>
 8017192:	230a      	movs	r3, #10
 8017194:	fb03 0202 	mla	r2, r3, r2, r0
 8017198:	3a10      	subs	r2, #16
 801719a:	e7cf      	b.n	801713c <__gethex+0xe6>
 801719c:	4631      	mov	r1, r6
 801719e:	e7da      	b.n	8017156 <__gethex+0x100>
 80171a0:	1bf3      	subs	r3, r6, r7
 80171a2:	3b01      	subs	r3, #1
 80171a4:	4629      	mov	r1, r5
 80171a6:	2b07      	cmp	r3, #7
 80171a8:	dc49      	bgt.n	801723e <__gethex+0x1e8>
 80171aa:	9802      	ldr	r0, [sp, #8]
 80171ac:	f000 fa66 	bl	801767c <_Balloc>
 80171b0:	9b01      	ldr	r3, [sp, #4]
 80171b2:	f100 0914 	add.w	r9, r0, #20
 80171b6:	f04f 0b00 	mov.w	fp, #0
 80171ba:	f1c3 0301 	rsb	r3, r3, #1
 80171be:	4605      	mov	r5, r0
 80171c0:	f8cd 9010 	str.w	r9, [sp, #16]
 80171c4:	46da      	mov	sl, fp
 80171c6:	9308      	str	r3, [sp, #32]
 80171c8:	42b7      	cmp	r7, r6
 80171ca:	d33b      	bcc.n	8017244 <__gethex+0x1ee>
 80171cc:	9804      	ldr	r0, [sp, #16]
 80171ce:	f840 ab04 	str.w	sl, [r0], #4
 80171d2:	eba0 0009 	sub.w	r0, r0, r9
 80171d6:	1080      	asrs	r0, r0, #2
 80171d8:	6128      	str	r0, [r5, #16]
 80171da:	0147      	lsls	r7, r0, #5
 80171dc:	4650      	mov	r0, sl
 80171de:	f000 fb11 	bl	8017804 <__hi0bits>
 80171e2:	f8d8 6000 	ldr.w	r6, [r8]
 80171e6:	1a3f      	subs	r7, r7, r0
 80171e8:	42b7      	cmp	r7, r6
 80171ea:	dd64      	ble.n	80172b6 <__gethex+0x260>
 80171ec:	1bbf      	subs	r7, r7, r6
 80171ee:	4639      	mov	r1, r7
 80171f0:	4628      	mov	r0, r5
 80171f2:	f000 fe21 	bl	8017e38 <__any_on>
 80171f6:	4682      	mov	sl, r0
 80171f8:	b178      	cbz	r0, 801721a <__gethex+0x1c4>
 80171fa:	1e7b      	subs	r3, r7, #1
 80171fc:	1159      	asrs	r1, r3, #5
 80171fe:	f003 021f 	and.w	r2, r3, #31
 8017202:	f04f 0a01 	mov.w	sl, #1
 8017206:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801720a:	fa0a f202 	lsl.w	r2, sl, r2
 801720e:	420a      	tst	r2, r1
 8017210:	d003      	beq.n	801721a <__gethex+0x1c4>
 8017212:	4553      	cmp	r3, sl
 8017214:	dc46      	bgt.n	80172a4 <__gethex+0x24e>
 8017216:	f04f 0a02 	mov.w	sl, #2
 801721a:	4639      	mov	r1, r7
 801721c:	4628      	mov	r0, r5
 801721e:	f7ff fecb 	bl	8016fb8 <rshift>
 8017222:	443c      	add	r4, r7
 8017224:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017228:	42a3      	cmp	r3, r4
 801722a:	da52      	bge.n	80172d2 <__gethex+0x27c>
 801722c:	4629      	mov	r1, r5
 801722e:	9802      	ldr	r0, [sp, #8]
 8017230:	f000 fa58 	bl	80176e4 <_Bfree>
 8017234:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017236:	2300      	movs	r3, #0
 8017238:	6013      	str	r3, [r2, #0]
 801723a:	27a3      	movs	r7, #163	; 0xa3
 801723c:	e793      	b.n	8017166 <__gethex+0x110>
 801723e:	3101      	adds	r1, #1
 8017240:	105b      	asrs	r3, r3, #1
 8017242:	e7b0      	b.n	80171a6 <__gethex+0x150>
 8017244:	1e73      	subs	r3, r6, #1
 8017246:	9305      	str	r3, [sp, #20]
 8017248:	9a07      	ldr	r2, [sp, #28]
 801724a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801724e:	4293      	cmp	r3, r2
 8017250:	d018      	beq.n	8017284 <__gethex+0x22e>
 8017252:	f1bb 0f20 	cmp.w	fp, #32
 8017256:	d107      	bne.n	8017268 <__gethex+0x212>
 8017258:	9b04      	ldr	r3, [sp, #16]
 801725a:	f8c3 a000 	str.w	sl, [r3]
 801725e:	3304      	adds	r3, #4
 8017260:	f04f 0a00 	mov.w	sl, #0
 8017264:	9304      	str	r3, [sp, #16]
 8017266:	46d3      	mov	fp, sl
 8017268:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801726c:	f7ff fede 	bl	801702c <__hexdig_fun>
 8017270:	f000 000f 	and.w	r0, r0, #15
 8017274:	fa00 f00b 	lsl.w	r0, r0, fp
 8017278:	ea4a 0a00 	orr.w	sl, sl, r0
 801727c:	f10b 0b04 	add.w	fp, fp, #4
 8017280:	9b05      	ldr	r3, [sp, #20]
 8017282:	e00d      	b.n	80172a0 <__gethex+0x24a>
 8017284:	9b05      	ldr	r3, [sp, #20]
 8017286:	9a08      	ldr	r2, [sp, #32]
 8017288:	4413      	add	r3, r2
 801728a:	42bb      	cmp	r3, r7
 801728c:	d3e1      	bcc.n	8017252 <__gethex+0x1fc>
 801728e:	4618      	mov	r0, r3
 8017290:	9a01      	ldr	r2, [sp, #4]
 8017292:	9903      	ldr	r1, [sp, #12]
 8017294:	9309      	str	r3, [sp, #36]	; 0x24
 8017296:	f001 fb3d 	bl	8018914 <strncmp>
 801729a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801729c:	2800      	cmp	r0, #0
 801729e:	d1d8      	bne.n	8017252 <__gethex+0x1fc>
 80172a0:	461e      	mov	r6, r3
 80172a2:	e791      	b.n	80171c8 <__gethex+0x172>
 80172a4:	1eb9      	subs	r1, r7, #2
 80172a6:	4628      	mov	r0, r5
 80172a8:	f000 fdc6 	bl	8017e38 <__any_on>
 80172ac:	2800      	cmp	r0, #0
 80172ae:	d0b2      	beq.n	8017216 <__gethex+0x1c0>
 80172b0:	f04f 0a03 	mov.w	sl, #3
 80172b4:	e7b1      	b.n	801721a <__gethex+0x1c4>
 80172b6:	da09      	bge.n	80172cc <__gethex+0x276>
 80172b8:	1bf7      	subs	r7, r6, r7
 80172ba:	4629      	mov	r1, r5
 80172bc:	463a      	mov	r2, r7
 80172be:	9802      	ldr	r0, [sp, #8]
 80172c0:	f000 fbdc 	bl	8017a7c <__lshift>
 80172c4:	1be4      	subs	r4, r4, r7
 80172c6:	4605      	mov	r5, r0
 80172c8:	f100 0914 	add.w	r9, r0, #20
 80172cc:	f04f 0a00 	mov.w	sl, #0
 80172d0:	e7a8      	b.n	8017224 <__gethex+0x1ce>
 80172d2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80172d6:	42a0      	cmp	r0, r4
 80172d8:	dd6a      	ble.n	80173b0 <__gethex+0x35a>
 80172da:	1b04      	subs	r4, r0, r4
 80172dc:	42a6      	cmp	r6, r4
 80172de:	dc2e      	bgt.n	801733e <__gethex+0x2e8>
 80172e0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80172e4:	2b02      	cmp	r3, #2
 80172e6:	d022      	beq.n	801732e <__gethex+0x2d8>
 80172e8:	2b03      	cmp	r3, #3
 80172ea:	d024      	beq.n	8017336 <__gethex+0x2e0>
 80172ec:	2b01      	cmp	r3, #1
 80172ee:	d115      	bne.n	801731c <__gethex+0x2c6>
 80172f0:	42a6      	cmp	r6, r4
 80172f2:	d113      	bne.n	801731c <__gethex+0x2c6>
 80172f4:	2e01      	cmp	r6, #1
 80172f6:	dc0b      	bgt.n	8017310 <__gethex+0x2ba>
 80172f8:	9a06      	ldr	r2, [sp, #24]
 80172fa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80172fe:	6013      	str	r3, [r2, #0]
 8017300:	2301      	movs	r3, #1
 8017302:	612b      	str	r3, [r5, #16]
 8017304:	f8c9 3000 	str.w	r3, [r9]
 8017308:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801730a:	2762      	movs	r7, #98	; 0x62
 801730c:	601d      	str	r5, [r3, #0]
 801730e:	e72a      	b.n	8017166 <__gethex+0x110>
 8017310:	1e71      	subs	r1, r6, #1
 8017312:	4628      	mov	r0, r5
 8017314:	f000 fd90 	bl	8017e38 <__any_on>
 8017318:	2800      	cmp	r0, #0
 801731a:	d1ed      	bne.n	80172f8 <__gethex+0x2a2>
 801731c:	4629      	mov	r1, r5
 801731e:	9802      	ldr	r0, [sp, #8]
 8017320:	f000 f9e0 	bl	80176e4 <_Bfree>
 8017324:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017326:	2300      	movs	r3, #0
 8017328:	6013      	str	r3, [r2, #0]
 801732a:	2750      	movs	r7, #80	; 0x50
 801732c:	e71b      	b.n	8017166 <__gethex+0x110>
 801732e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017330:	2b00      	cmp	r3, #0
 8017332:	d0e1      	beq.n	80172f8 <__gethex+0x2a2>
 8017334:	e7f2      	b.n	801731c <__gethex+0x2c6>
 8017336:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017338:	2b00      	cmp	r3, #0
 801733a:	d1dd      	bne.n	80172f8 <__gethex+0x2a2>
 801733c:	e7ee      	b.n	801731c <__gethex+0x2c6>
 801733e:	1e67      	subs	r7, r4, #1
 8017340:	f1ba 0f00 	cmp.w	sl, #0
 8017344:	d131      	bne.n	80173aa <__gethex+0x354>
 8017346:	b127      	cbz	r7, 8017352 <__gethex+0x2fc>
 8017348:	4639      	mov	r1, r7
 801734a:	4628      	mov	r0, r5
 801734c:	f000 fd74 	bl	8017e38 <__any_on>
 8017350:	4682      	mov	sl, r0
 8017352:	117a      	asrs	r2, r7, #5
 8017354:	2301      	movs	r3, #1
 8017356:	f007 071f 	and.w	r7, r7, #31
 801735a:	fa03 f707 	lsl.w	r7, r3, r7
 801735e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8017362:	4621      	mov	r1, r4
 8017364:	421f      	tst	r7, r3
 8017366:	4628      	mov	r0, r5
 8017368:	bf18      	it	ne
 801736a:	f04a 0a02 	orrne.w	sl, sl, #2
 801736e:	1b36      	subs	r6, r6, r4
 8017370:	f7ff fe22 	bl	8016fb8 <rshift>
 8017374:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8017378:	2702      	movs	r7, #2
 801737a:	f1ba 0f00 	cmp.w	sl, #0
 801737e:	d048      	beq.n	8017412 <__gethex+0x3bc>
 8017380:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017384:	2b02      	cmp	r3, #2
 8017386:	d015      	beq.n	80173b4 <__gethex+0x35e>
 8017388:	2b03      	cmp	r3, #3
 801738a:	d017      	beq.n	80173bc <__gethex+0x366>
 801738c:	2b01      	cmp	r3, #1
 801738e:	d109      	bne.n	80173a4 <__gethex+0x34e>
 8017390:	f01a 0f02 	tst.w	sl, #2
 8017394:	d006      	beq.n	80173a4 <__gethex+0x34e>
 8017396:	f8d9 3000 	ldr.w	r3, [r9]
 801739a:	ea4a 0a03 	orr.w	sl, sl, r3
 801739e:	f01a 0f01 	tst.w	sl, #1
 80173a2:	d10e      	bne.n	80173c2 <__gethex+0x36c>
 80173a4:	f047 0710 	orr.w	r7, r7, #16
 80173a8:	e033      	b.n	8017412 <__gethex+0x3bc>
 80173aa:	f04f 0a01 	mov.w	sl, #1
 80173ae:	e7d0      	b.n	8017352 <__gethex+0x2fc>
 80173b0:	2701      	movs	r7, #1
 80173b2:	e7e2      	b.n	801737a <__gethex+0x324>
 80173b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80173b6:	f1c3 0301 	rsb	r3, r3, #1
 80173ba:	9315      	str	r3, [sp, #84]	; 0x54
 80173bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80173be:	2b00      	cmp	r3, #0
 80173c0:	d0f0      	beq.n	80173a4 <__gethex+0x34e>
 80173c2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80173c6:	f105 0314 	add.w	r3, r5, #20
 80173ca:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80173ce:	eb03 010a 	add.w	r1, r3, sl
 80173d2:	f04f 0c00 	mov.w	ip, #0
 80173d6:	4618      	mov	r0, r3
 80173d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80173dc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80173e0:	d01c      	beq.n	801741c <__gethex+0x3c6>
 80173e2:	3201      	adds	r2, #1
 80173e4:	6002      	str	r2, [r0, #0]
 80173e6:	2f02      	cmp	r7, #2
 80173e8:	f105 0314 	add.w	r3, r5, #20
 80173ec:	d138      	bne.n	8017460 <__gethex+0x40a>
 80173ee:	f8d8 2000 	ldr.w	r2, [r8]
 80173f2:	3a01      	subs	r2, #1
 80173f4:	42b2      	cmp	r2, r6
 80173f6:	d10a      	bne.n	801740e <__gethex+0x3b8>
 80173f8:	1171      	asrs	r1, r6, #5
 80173fa:	2201      	movs	r2, #1
 80173fc:	f006 061f 	and.w	r6, r6, #31
 8017400:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017404:	fa02 f606 	lsl.w	r6, r2, r6
 8017408:	421e      	tst	r6, r3
 801740a:	bf18      	it	ne
 801740c:	4617      	movne	r7, r2
 801740e:	f047 0720 	orr.w	r7, r7, #32
 8017412:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017414:	601d      	str	r5, [r3, #0]
 8017416:	9b06      	ldr	r3, [sp, #24]
 8017418:	601c      	str	r4, [r3, #0]
 801741a:	e6a4      	b.n	8017166 <__gethex+0x110>
 801741c:	4299      	cmp	r1, r3
 801741e:	f843 cc04 	str.w	ip, [r3, #-4]
 8017422:	d8d8      	bhi.n	80173d6 <__gethex+0x380>
 8017424:	68ab      	ldr	r3, [r5, #8]
 8017426:	4599      	cmp	r9, r3
 8017428:	db12      	blt.n	8017450 <__gethex+0x3fa>
 801742a:	6869      	ldr	r1, [r5, #4]
 801742c:	9802      	ldr	r0, [sp, #8]
 801742e:	3101      	adds	r1, #1
 8017430:	f000 f924 	bl	801767c <_Balloc>
 8017434:	692a      	ldr	r2, [r5, #16]
 8017436:	3202      	adds	r2, #2
 8017438:	f105 010c 	add.w	r1, r5, #12
 801743c:	4683      	mov	fp, r0
 801743e:	0092      	lsls	r2, r2, #2
 8017440:	300c      	adds	r0, #12
 8017442:	f7fd f9c5 	bl	80147d0 <memcpy>
 8017446:	4629      	mov	r1, r5
 8017448:	9802      	ldr	r0, [sp, #8]
 801744a:	f000 f94b 	bl	80176e4 <_Bfree>
 801744e:	465d      	mov	r5, fp
 8017450:	692b      	ldr	r3, [r5, #16]
 8017452:	1c5a      	adds	r2, r3, #1
 8017454:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8017458:	612a      	str	r2, [r5, #16]
 801745a:	2201      	movs	r2, #1
 801745c:	615a      	str	r2, [r3, #20]
 801745e:	e7c2      	b.n	80173e6 <__gethex+0x390>
 8017460:	692a      	ldr	r2, [r5, #16]
 8017462:	454a      	cmp	r2, r9
 8017464:	dd0b      	ble.n	801747e <__gethex+0x428>
 8017466:	2101      	movs	r1, #1
 8017468:	4628      	mov	r0, r5
 801746a:	f7ff fda5 	bl	8016fb8 <rshift>
 801746e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017472:	3401      	adds	r4, #1
 8017474:	42a3      	cmp	r3, r4
 8017476:	f6ff aed9 	blt.w	801722c <__gethex+0x1d6>
 801747a:	2701      	movs	r7, #1
 801747c:	e7c7      	b.n	801740e <__gethex+0x3b8>
 801747e:	f016 061f 	ands.w	r6, r6, #31
 8017482:	d0fa      	beq.n	801747a <__gethex+0x424>
 8017484:	449a      	add	sl, r3
 8017486:	f1c6 0620 	rsb	r6, r6, #32
 801748a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801748e:	f000 f9b9 	bl	8017804 <__hi0bits>
 8017492:	42b0      	cmp	r0, r6
 8017494:	dbe7      	blt.n	8017466 <__gethex+0x410>
 8017496:	e7f0      	b.n	801747a <__gethex+0x424>

08017498 <L_shift>:
 8017498:	f1c2 0208 	rsb	r2, r2, #8
 801749c:	0092      	lsls	r2, r2, #2
 801749e:	b570      	push	{r4, r5, r6, lr}
 80174a0:	f1c2 0620 	rsb	r6, r2, #32
 80174a4:	6843      	ldr	r3, [r0, #4]
 80174a6:	6804      	ldr	r4, [r0, #0]
 80174a8:	fa03 f506 	lsl.w	r5, r3, r6
 80174ac:	432c      	orrs	r4, r5
 80174ae:	40d3      	lsrs	r3, r2
 80174b0:	6004      	str	r4, [r0, #0]
 80174b2:	f840 3f04 	str.w	r3, [r0, #4]!
 80174b6:	4288      	cmp	r0, r1
 80174b8:	d3f4      	bcc.n	80174a4 <L_shift+0xc>
 80174ba:	bd70      	pop	{r4, r5, r6, pc}

080174bc <__match>:
 80174bc:	b530      	push	{r4, r5, lr}
 80174be:	6803      	ldr	r3, [r0, #0]
 80174c0:	3301      	adds	r3, #1
 80174c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80174c6:	b914      	cbnz	r4, 80174ce <__match+0x12>
 80174c8:	6003      	str	r3, [r0, #0]
 80174ca:	2001      	movs	r0, #1
 80174cc:	bd30      	pop	{r4, r5, pc}
 80174ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80174d2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80174d6:	2d19      	cmp	r5, #25
 80174d8:	bf98      	it	ls
 80174da:	3220      	addls	r2, #32
 80174dc:	42a2      	cmp	r2, r4
 80174de:	d0f0      	beq.n	80174c2 <__match+0x6>
 80174e0:	2000      	movs	r0, #0
 80174e2:	e7f3      	b.n	80174cc <__match+0x10>

080174e4 <__hexnan>:
 80174e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174e8:	680b      	ldr	r3, [r1, #0]
 80174ea:	6801      	ldr	r1, [r0, #0]
 80174ec:	115f      	asrs	r7, r3, #5
 80174ee:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80174f2:	f013 031f 	ands.w	r3, r3, #31
 80174f6:	b087      	sub	sp, #28
 80174f8:	bf18      	it	ne
 80174fa:	3704      	addne	r7, #4
 80174fc:	2500      	movs	r5, #0
 80174fe:	1f3e      	subs	r6, r7, #4
 8017500:	4682      	mov	sl, r0
 8017502:	4690      	mov	r8, r2
 8017504:	9301      	str	r3, [sp, #4]
 8017506:	f847 5c04 	str.w	r5, [r7, #-4]
 801750a:	46b1      	mov	r9, r6
 801750c:	4634      	mov	r4, r6
 801750e:	9502      	str	r5, [sp, #8]
 8017510:	46ab      	mov	fp, r5
 8017512:	784a      	ldrb	r2, [r1, #1]
 8017514:	1c4b      	adds	r3, r1, #1
 8017516:	9303      	str	r3, [sp, #12]
 8017518:	b342      	cbz	r2, 801756c <__hexnan+0x88>
 801751a:	4610      	mov	r0, r2
 801751c:	9105      	str	r1, [sp, #20]
 801751e:	9204      	str	r2, [sp, #16]
 8017520:	f7ff fd84 	bl	801702c <__hexdig_fun>
 8017524:	2800      	cmp	r0, #0
 8017526:	d143      	bne.n	80175b0 <__hexnan+0xcc>
 8017528:	9a04      	ldr	r2, [sp, #16]
 801752a:	9905      	ldr	r1, [sp, #20]
 801752c:	2a20      	cmp	r2, #32
 801752e:	d818      	bhi.n	8017562 <__hexnan+0x7e>
 8017530:	9b02      	ldr	r3, [sp, #8]
 8017532:	459b      	cmp	fp, r3
 8017534:	dd13      	ble.n	801755e <__hexnan+0x7a>
 8017536:	454c      	cmp	r4, r9
 8017538:	d206      	bcs.n	8017548 <__hexnan+0x64>
 801753a:	2d07      	cmp	r5, #7
 801753c:	dc04      	bgt.n	8017548 <__hexnan+0x64>
 801753e:	462a      	mov	r2, r5
 8017540:	4649      	mov	r1, r9
 8017542:	4620      	mov	r0, r4
 8017544:	f7ff ffa8 	bl	8017498 <L_shift>
 8017548:	4544      	cmp	r4, r8
 801754a:	d944      	bls.n	80175d6 <__hexnan+0xf2>
 801754c:	2300      	movs	r3, #0
 801754e:	f1a4 0904 	sub.w	r9, r4, #4
 8017552:	f844 3c04 	str.w	r3, [r4, #-4]
 8017556:	f8cd b008 	str.w	fp, [sp, #8]
 801755a:	464c      	mov	r4, r9
 801755c:	461d      	mov	r5, r3
 801755e:	9903      	ldr	r1, [sp, #12]
 8017560:	e7d7      	b.n	8017512 <__hexnan+0x2e>
 8017562:	2a29      	cmp	r2, #41	; 0x29
 8017564:	d14a      	bne.n	80175fc <__hexnan+0x118>
 8017566:	3102      	adds	r1, #2
 8017568:	f8ca 1000 	str.w	r1, [sl]
 801756c:	f1bb 0f00 	cmp.w	fp, #0
 8017570:	d044      	beq.n	80175fc <__hexnan+0x118>
 8017572:	454c      	cmp	r4, r9
 8017574:	d206      	bcs.n	8017584 <__hexnan+0xa0>
 8017576:	2d07      	cmp	r5, #7
 8017578:	dc04      	bgt.n	8017584 <__hexnan+0xa0>
 801757a:	462a      	mov	r2, r5
 801757c:	4649      	mov	r1, r9
 801757e:	4620      	mov	r0, r4
 8017580:	f7ff ff8a 	bl	8017498 <L_shift>
 8017584:	4544      	cmp	r4, r8
 8017586:	d928      	bls.n	80175da <__hexnan+0xf6>
 8017588:	4643      	mov	r3, r8
 801758a:	f854 2b04 	ldr.w	r2, [r4], #4
 801758e:	f843 2b04 	str.w	r2, [r3], #4
 8017592:	42a6      	cmp	r6, r4
 8017594:	d2f9      	bcs.n	801758a <__hexnan+0xa6>
 8017596:	2200      	movs	r2, #0
 8017598:	f843 2b04 	str.w	r2, [r3], #4
 801759c:	429e      	cmp	r6, r3
 801759e:	d2fb      	bcs.n	8017598 <__hexnan+0xb4>
 80175a0:	6833      	ldr	r3, [r6, #0]
 80175a2:	b91b      	cbnz	r3, 80175ac <__hexnan+0xc8>
 80175a4:	4546      	cmp	r6, r8
 80175a6:	d127      	bne.n	80175f8 <__hexnan+0x114>
 80175a8:	2301      	movs	r3, #1
 80175aa:	6033      	str	r3, [r6, #0]
 80175ac:	2005      	movs	r0, #5
 80175ae:	e026      	b.n	80175fe <__hexnan+0x11a>
 80175b0:	3501      	adds	r5, #1
 80175b2:	2d08      	cmp	r5, #8
 80175b4:	f10b 0b01 	add.w	fp, fp, #1
 80175b8:	dd06      	ble.n	80175c8 <__hexnan+0xe4>
 80175ba:	4544      	cmp	r4, r8
 80175bc:	d9cf      	bls.n	801755e <__hexnan+0x7a>
 80175be:	2300      	movs	r3, #0
 80175c0:	f844 3c04 	str.w	r3, [r4, #-4]
 80175c4:	2501      	movs	r5, #1
 80175c6:	3c04      	subs	r4, #4
 80175c8:	6822      	ldr	r2, [r4, #0]
 80175ca:	f000 000f 	and.w	r0, r0, #15
 80175ce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80175d2:	6020      	str	r0, [r4, #0]
 80175d4:	e7c3      	b.n	801755e <__hexnan+0x7a>
 80175d6:	2508      	movs	r5, #8
 80175d8:	e7c1      	b.n	801755e <__hexnan+0x7a>
 80175da:	9b01      	ldr	r3, [sp, #4]
 80175dc:	2b00      	cmp	r3, #0
 80175de:	d0df      	beq.n	80175a0 <__hexnan+0xbc>
 80175e0:	f04f 32ff 	mov.w	r2, #4294967295
 80175e4:	f1c3 0320 	rsb	r3, r3, #32
 80175e8:	fa22 f303 	lsr.w	r3, r2, r3
 80175ec:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80175f0:	401a      	ands	r2, r3
 80175f2:	f847 2c04 	str.w	r2, [r7, #-4]
 80175f6:	e7d3      	b.n	80175a0 <__hexnan+0xbc>
 80175f8:	3e04      	subs	r6, #4
 80175fa:	e7d1      	b.n	80175a0 <__hexnan+0xbc>
 80175fc:	2004      	movs	r0, #4
 80175fe:	b007      	add	sp, #28
 8017600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017604 <__locale_ctype_ptr_l>:
 8017604:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8017608:	4770      	bx	lr
	...

0801760c <__locale_ctype_ptr>:
 801760c:	4b04      	ldr	r3, [pc, #16]	; (8017620 <__locale_ctype_ptr+0x14>)
 801760e:	4a05      	ldr	r2, [pc, #20]	; (8017624 <__locale_ctype_ptr+0x18>)
 8017610:	681b      	ldr	r3, [r3, #0]
 8017612:	6a1b      	ldr	r3, [r3, #32]
 8017614:	2b00      	cmp	r3, #0
 8017616:	bf08      	it	eq
 8017618:	4613      	moveq	r3, r2
 801761a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801761e:	4770      	bx	lr
 8017620:	2000000c 	.word	0x2000000c
 8017624:	20000070 	.word	0x20000070

08017628 <__localeconv_l>:
 8017628:	30f0      	adds	r0, #240	; 0xf0
 801762a:	4770      	bx	lr

0801762c <_localeconv_r>:
 801762c:	4b04      	ldr	r3, [pc, #16]	; (8017640 <_localeconv_r+0x14>)
 801762e:	681b      	ldr	r3, [r3, #0]
 8017630:	6a18      	ldr	r0, [r3, #32]
 8017632:	4b04      	ldr	r3, [pc, #16]	; (8017644 <_localeconv_r+0x18>)
 8017634:	2800      	cmp	r0, #0
 8017636:	bf08      	it	eq
 8017638:	4618      	moveq	r0, r3
 801763a:	30f0      	adds	r0, #240	; 0xf0
 801763c:	4770      	bx	lr
 801763e:	bf00      	nop
 8017640:	2000000c 	.word	0x2000000c
 8017644:	20000070 	.word	0x20000070

08017648 <malloc>:
 8017648:	4b02      	ldr	r3, [pc, #8]	; (8017654 <malloc+0xc>)
 801764a:	4601      	mov	r1, r0
 801764c:	6818      	ldr	r0, [r3, #0]
 801764e:	f000 bc71 	b.w	8017f34 <_malloc_r>
 8017652:	bf00      	nop
 8017654:	2000000c 	.word	0x2000000c

08017658 <__ascii_mbtowc>:
 8017658:	b082      	sub	sp, #8
 801765a:	b901      	cbnz	r1, 801765e <__ascii_mbtowc+0x6>
 801765c:	a901      	add	r1, sp, #4
 801765e:	b142      	cbz	r2, 8017672 <__ascii_mbtowc+0x1a>
 8017660:	b14b      	cbz	r3, 8017676 <__ascii_mbtowc+0x1e>
 8017662:	7813      	ldrb	r3, [r2, #0]
 8017664:	600b      	str	r3, [r1, #0]
 8017666:	7812      	ldrb	r2, [r2, #0]
 8017668:	1c10      	adds	r0, r2, #0
 801766a:	bf18      	it	ne
 801766c:	2001      	movne	r0, #1
 801766e:	b002      	add	sp, #8
 8017670:	4770      	bx	lr
 8017672:	4610      	mov	r0, r2
 8017674:	e7fb      	b.n	801766e <__ascii_mbtowc+0x16>
 8017676:	f06f 0001 	mvn.w	r0, #1
 801767a:	e7f8      	b.n	801766e <__ascii_mbtowc+0x16>

0801767c <_Balloc>:
 801767c:	b570      	push	{r4, r5, r6, lr}
 801767e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017680:	4604      	mov	r4, r0
 8017682:	460e      	mov	r6, r1
 8017684:	b93d      	cbnz	r5, 8017696 <_Balloc+0x1a>
 8017686:	2010      	movs	r0, #16
 8017688:	f7ff ffde 	bl	8017648 <malloc>
 801768c:	6260      	str	r0, [r4, #36]	; 0x24
 801768e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017692:	6005      	str	r5, [r0, #0]
 8017694:	60c5      	str	r5, [r0, #12]
 8017696:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8017698:	68eb      	ldr	r3, [r5, #12]
 801769a:	b183      	cbz	r3, 80176be <_Balloc+0x42>
 801769c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801769e:	68db      	ldr	r3, [r3, #12]
 80176a0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80176a4:	b9b8      	cbnz	r0, 80176d6 <_Balloc+0x5a>
 80176a6:	2101      	movs	r1, #1
 80176a8:	fa01 f506 	lsl.w	r5, r1, r6
 80176ac:	1d6a      	adds	r2, r5, #5
 80176ae:	0092      	lsls	r2, r2, #2
 80176b0:	4620      	mov	r0, r4
 80176b2:	f000 fbe2 	bl	8017e7a <_calloc_r>
 80176b6:	b160      	cbz	r0, 80176d2 <_Balloc+0x56>
 80176b8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80176bc:	e00e      	b.n	80176dc <_Balloc+0x60>
 80176be:	2221      	movs	r2, #33	; 0x21
 80176c0:	2104      	movs	r1, #4
 80176c2:	4620      	mov	r0, r4
 80176c4:	f000 fbd9 	bl	8017e7a <_calloc_r>
 80176c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80176ca:	60e8      	str	r0, [r5, #12]
 80176cc:	68db      	ldr	r3, [r3, #12]
 80176ce:	2b00      	cmp	r3, #0
 80176d0:	d1e4      	bne.n	801769c <_Balloc+0x20>
 80176d2:	2000      	movs	r0, #0
 80176d4:	bd70      	pop	{r4, r5, r6, pc}
 80176d6:	6802      	ldr	r2, [r0, #0]
 80176d8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80176dc:	2300      	movs	r3, #0
 80176de:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80176e2:	e7f7      	b.n	80176d4 <_Balloc+0x58>

080176e4 <_Bfree>:
 80176e4:	b570      	push	{r4, r5, r6, lr}
 80176e6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80176e8:	4606      	mov	r6, r0
 80176ea:	460d      	mov	r5, r1
 80176ec:	b93c      	cbnz	r4, 80176fe <_Bfree+0x1a>
 80176ee:	2010      	movs	r0, #16
 80176f0:	f7ff ffaa 	bl	8017648 <malloc>
 80176f4:	6270      	str	r0, [r6, #36]	; 0x24
 80176f6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80176fa:	6004      	str	r4, [r0, #0]
 80176fc:	60c4      	str	r4, [r0, #12]
 80176fe:	b13d      	cbz	r5, 8017710 <_Bfree+0x2c>
 8017700:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8017702:	686a      	ldr	r2, [r5, #4]
 8017704:	68db      	ldr	r3, [r3, #12]
 8017706:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801770a:	6029      	str	r1, [r5, #0]
 801770c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8017710:	bd70      	pop	{r4, r5, r6, pc}

08017712 <__multadd>:
 8017712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017716:	690d      	ldr	r5, [r1, #16]
 8017718:	461f      	mov	r7, r3
 801771a:	4606      	mov	r6, r0
 801771c:	460c      	mov	r4, r1
 801771e:	f101 0c14 	add.w	ip, r1, #20
 8017722:	2300      	movs	r3, #0
 8017724:	f8dc 0000 	ldr.w	r0, [ip]
 8017728:	b281      	uxth	r1, r0
 801772a:	fb02 7101 	mla	r1, r2, r1, r7
 801772e:	0c0f      	lsrs	r7, r1, #16
 8017730:	0c00      	lsrs	r0, r0, #16
 8017732:	fb02 7000 	mla	r0, r2, r0, r7
 8017736:	b289      	uxth	r1, r1
 8017738:	3301      	adds	r3, #1
 801773a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801773e:	429d      	cmp	r5, r3
 8017740:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8017744:	f84c 1b04 	str.w	r1, [ip], #4
 8017748:	dcec      	bgt.n	8017724 <__multadd+0x12>
 801774a:	b1d7      	cbz	r7, 8017782 <__multadd+0x70>
 801774c:	68a3      	ldr	r3, [r4, #8]
 801774e:	42ab      	cmp	r3, r5
 8017750:	dc12      	bgt.n	8017778 <__multadd+0x66>
 8017752:	6861      	ldr	r1, [r4, #4]
 8017754:	4630      	mov	r0, r6
 8017756:	3101      	adds	r1, #1
 8017758:	f7ff ff90 	bl	801767c <_Balloc>
 801775c:	6922      	ldr	r2, [r4, #16]
 801775e:	3202      	adds	r2, #2
 8017760:	f104 010c 	add.w	r1, r4, #12
 8017764:	4680      	mov	r8, r0
 8017766:	0092      	lsls	r2, r2, #2
 8017768:	300c      	adds	r0, #12
 801776a:	f7fd f831 	bl	80147d0 <memcpy>
 801776e:	4621      	mov	r1, r4
 8017770:	4630      	mov	r0, r6
 8017772:	f7ff ffb7 	bl	80176e4 <_Bfree>
 8017776:	4644      	mov	r4, r8
 8017778:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801777c:	3501      	adds	r5, #1
 801777e:	615f      	str	r7, [r3, #20]
 8017780:	6125      	str	r5, [r4, #16]
 8017782:	4620      	mov	r0, r4
 8017784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017788 <__s2b>:
 8017788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801778c:	460c      	mov	r4, r1
 801778e:	4615      	mov	r5, r2
 8017790:	461f      	mov	r7, r3
 8017792:	2209      	movs	r2, #9
 8017794:	3308      	adds	r3, #8
 8017796:	4606      	mov	r6, r0
 8017798:	fb93 f3f2 	sdiv	r3, r3, r2
 801779c:	2100      	movs	r1, #0
 801779e:	2201      	movs	r2, #1
 80177a0:	429a      	cmp	r2, r3
 80177a2:	db20      	blt.n	80177e6 <__s2b+0x5e>
 80177a4:	4630      	mov	r0, r6
 80177a6:	f7ff ff69 	bl	801767c <_Balloc>
 80177aa:	9b08      	ldr	r3, [sp, #32]
 80177ac:	6143      	str	r3, [r0, #20]
 80177ae:	2d09      	cmp	r5, #9
 80177b0:	f04f 0301 	mov.w	r3, #1
 80177b4:	6103      	str	r3, [r0, #16]
 80177b6:	dd19      	ble.n	80177ec <__s2b+0x64>
 80177b8:	f104 0809 	add.w	r8, r4, #9
 80177bc:	46c1      	mov	r9, r8
 80177be:	442c      	add	r4, r5
 80177c0:	f819 3b01 	ldrb.w	r3, [r9], #1
 80177c4:	4601      	mov	r1, r0
 80177c6:	3b30      	subs	r3, #48	; 0x30
 80177c8:	220a      	movs	r2, #10
 80177ca:	4630      	mov	r0, r6
 80177cc:	f7ff ffa1 	bl	8017712 <__multadd>
 80177d0:	45a1      	cmp	r9, r4
 80177d2:	d1f5      	bne.n	80177c0 <__s2b+0x38>
 80177d4:	eb08 0405 	add.w	r4, r8, r5
 80177d8:	3c08      	subs	r4, #8
 80177da:	1b2d      	subs	r5, r5, r4
 80177dc:	1963      	adds	r3, r4, r5
 80177de:	42bb      	cmp	r3, r7
 80177e0:	db07      	blt.n	80177f2 <__s2b+0x6a>
 80177e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80177e6:	0052      	lsls	r2, r2, #1
 80177e8:	3101      	adds	r1, #1
 80177ea:	e7d9      	b.n	80177a0 <__s2b+0x18>
 80177ec:	340a      	adds	r4, #10
 80177ee:	2509      	movs	r5, #9
 80177f0:	e7f3      	b.n	80177da <__s2b+0x52>
 80177f2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80177f6:	4601      	mov	r1, r0
 80177f8:	3b30      	subs	r3, #48	; 0x30
 80177fa:	220a      	movs	r2, #10
 80177fc:	4630      	mov	r0, r6
 80177fe:	f7ff ff88 	bl	8017712 <__multadd>
 8017802:	e7eb      	b.n	80177dc <__s2b+0x54>

08017804 <__hi0bits>:
 8017804:	0c02      	lsrs	r2, r0, #16
 8017806:	0412      	lsls	r2, r2, #16
 8017808:	4603      	mov	r3, r0
 801780a:	b9b2      	cbnz	r2, 801783a <__hi0bits+0x36>
 801780c:	0403      	lsls	r3, r0, #16
 801780e:	2010      	movs	r0, #16
 8017810:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8017814:	bf04      	itt	eq
 8017816:	021b      	lsleq	r3, r3, #8
 8017818:	3008      	addeq	r0, #8
 801781a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801781e:	bf04      	itt	eq
 8017820:	011b      	lsleq	r3, r3, #4
 8017822:	3004      	addeq	r0, #4
 8017824:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8017828:	bf04      	itt	eq
 801782a:	009b      	lsleq	r3, r3, #2
 801782c:	3002      	addeq	r0, #2
 801782e:	2b00      	cmp	r3, #0
 8017830:	db06      	blt.n	8017840 <__hi0bits+0x3c>
 8017832:	005b      	lsls	r3, r3, #1
 8017834:	d503      	bpl.n	801783e <__hi0bits+0x3a>
 8017836:	3001      	adds	r0, #1
 8017838:	4770      	bx	lr
 801783a:	2000      	movs	r0, #0
 801783c:	e7e8      	b.n	8017810 <__hi0bits+0xc>
 801783e:	2020      	movs	r0, #32
 8017840:	4770      	bx	lr

08017842 <__lo0bits>:
 8017842:	6803      	ldr	r3, [r0, #0]
 8017844:	f013 0207 	ands.w	r2, r3, #7
 8017848:	4601      	mov	r1, r0
 801784a:	d00b      	beq.n	8017864 <__lo0bits+0x22>
 801784c:	07da      	lsls	r2, r3, #31
 801784e:	d423      	bmi.n	8017898 <__lo0bits+0x56>
 8017850:	0798      	lsls	r0, r3, #30
 8017852:	bf49      	itett	mi
 8017854:	085b      	lsrmi	r3, r3, #1
 8017856:	089b      	lsrpl	r3, r3, #2
 8017858:	2001      	movmi	r0, #1
 801785a:	600b      	strmi	r3, [r1, #0]
 801785c:	bf5c      	itt	pl
 801785e:	600b      	strpl	r3, [r1, #0]
 8017860:	2002      	movpl	r0, #2
 8017862:	4770      	bx	lr
 8017864:	b298      	uxth	r0, r3
 8017866:	b9a8      	cbnz	r0, 8017894 <__lo0bits+0x52>
 8017868:	0c1b      	lsrs	r3, r3, #16
 801786a:	2010      	movs	r0, #16
 801786c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8017870:	bf04      	itt	eq
 8017872:	0a1b      	lsreq	r3, r3, #8
 8017874:	3008      	addeq	r0, #8
 8017876:	071a      	lsls	r2, r3, #28
 8017878:	bf04      	itt	eq
 801787a:	091b      	lsreq	r3, r3, #4
 801787c:	3004      	addeq	r0, #4
 801787e:	079a      	lsls	r2, r3, #30
 8017880:	bf04      	itt	eq
 8017882:	089b      	lsreq	r3, r3, #2
 8017884:	3002      	addeq	r0, #2
 8017886:	07da      	lsls	r2, r3, #31
 8017888:	d402      	bmi.n	8017890 <__lo0bits+0x4e>
 801788a:	085b      	lsrs	r3, r3, #1
 801788c:	d006      	beq.n	801789c <__lo0bits+0x5a>
 801788e:	3001      	adds	r0, #1
 8017890:	600b      	str	r3, [r1, #0]
 8017892:	4770      	bx	lr
 8017894:	4610      	mov	r0, r2
 8017896:	e7e9      	b.n	801786c <__lo0bits+0x2a>
 8017898:	2000      	movs	r0, #0
 801789a:	4770      	bx	lr
 801789c:	2020      	movs	r0, #32
 801789e:	4770      	bx	lr

080178a0 <__i2b>:
 80178a0:	b510      	push	{r4, lr}
 80178a2:	460c      	mov	r4, r1
 80178a4:	2101      	movs	r1, #1
 80178a6:	f7ff fee9 	bl	801767c <_Balloc>
 80178aa:	2201      	movs	r2, #1
 80178ac:	6144      	str	r4, [r0, #20]
 80178ae:	6102      	str	r2, [r0, #16]
 80178b0:	bd10      	pop	{r4, pc}

080178b2 <__multiply>:
 80178b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178b6:	4614      	mov	r4, r2
 80178b8:	690a      	ldr	r2, [r1, #16]
 80178ba:	6923      	ldr	r3, [r4, #16]
 80178bc:	429a      	cmp	r2, r3
 80178be:	bfb8      	it	lt
 80178c0:	460b      	movlt	r3, r1
 80178c2:	4688      	mov	r8, r1
 80178c4:	bfbc      	itt	lt
 80178c6:	46a0      	movlt	r8, r4
 80178c8:	461c      	movlt	r4, r3
 80178ca:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80178ce:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80178d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80178d6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80178da:	eb07 0609 	add.w	r6, r7, r9
 80178de:	42b3      	cmp	r3, r6
 80178e0:	bfb8      	it	lt
 80178e2:	3101      	addlt	r1, #1
 80178e4:	f7ff feca 	bl	801767c <_Balloc>
 80178e8:	f100 0514 	add.w	r5, r0, #20
 80178ec:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80178f0:	462b      	mov	r3, r5
 80178f2:	2200      	movs	r2, #0
 80178f4:	4573      	cmp	r3, lr
 80178f6:	d316      	bcc.n	8017926 <__multiply+0x74>
 80178f8:	f104 0214 	add.w	r2, r4, #20
 80178fc:	f108 0114 	add.w	r1, r8, #20
 8017900:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8017904:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8017908:	9300      	str	r3, [sp, #0]
 801790a:	9b00      	ldr	r3, [sp, #0]
 801790c:	9201      	str	r2, [sp, #4]
 801790e:	4293      	cmp	r3, r2
 8017910:	d80c      	bhi.n	801792c <__multiply+0x7a>
 8017912:	2e00      	cmp	r6, #0
 8017914:	dd03      	ble.n	801791e <__multiply+0x6c>
 8017916:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801791a:	2b00      	cmp	r3, #0
 801791c:	d05d      	beq.n	80179da <__multiply+0x128>
 801791e:	6106      	str	r6, [r0, #16]
 8017920:	b003      	add	sp, #12
 8017922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017926:	f843 2b04 	str.w	r2, [r3], #4
 801792a:	e7e3      	b.n	80178f4 <__multiply+0x42>
 801792c:	f8b2 b000 	ldrh.w	fp, [r2]
 8017930:	f1bb 0f00 	cmp.w	fp, #0
 8017934:	d023      	beq.n	801797e <__multiply+0xcc>
 8017936:	4689      	mov	r9, r1
 8017938:	46ac      	mov	ip, r5
 801793a:	f04f 0800 	mov.w	r8, #0
 801793e:	f859 4b04 	ldr.w	r4, [r9], #4
 8017942:	f8dc a000 	ldr.w	sl, [ip]
 8017946:	b2a3      	uxth	r3, r4
 8017948:	fa1f fa8a 	uxth.w	sl, sl
 801794c:	fb0b a303 	mla	r3, fp, r3, sl
 8017950:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8017954:	f8dc 4000 	ldr.w	r4, [ip]
 8017958:	4443      	add	r3, r8
 801795a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801795e:	fb0b 840a 	mla	r4, fp, sl, r8
 8017962:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8017966:	46e2      	mov	sl, ip
 8017968:	b29b      	uxth	r3, r3
 801796a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801796e:	454f      	cmp	r7, r9
 8017970:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8017974:	f84a 3b04 	str.w	r3, [sl], #4
 8017978:	d82b      	bhi.n	80179d2 <__multiply+0x120>
 801797a:	f8cc 8004 	str.w	r8, [ip, #4]
 801797e:	9b01      	ldr	r3, [sp, #4]
 8017980:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8017984:	3204      	adds	r2, #4
 8017986:	f1ba 0f00 	cmp.w	sl, #0
 801798a:	d020      	beq.n	80179ce <__multiply+0x11c>
 801798c:	682b      	ldr	r3, [r5, #0]
 801798e:	4689      	mov	r9, r1
 8017990:	46a8      	mov	r8, r5
 8017992:	f04f 0b00 	mov.w	fp, #0
 8017996:	f8b9 c000 	ldrh.w	ip, [r9]
 801799a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801799e:	fb0a 440c 	mla	r4, sl, ip, r4
 80179a2:	445c      	add	r4, fp
 80179a4:	46c4      	mov	ip, r8
 80179a6:	b29b      	uxth	r3, r3
 80179a8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80179ac:	f84c 3b04 	str.w	r3, [ip], #4
 80179b0:	f859 3b04 	ldr.w	r3, [r9], #4
 80179b4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80179b8:	0c1b      	lsrs	r3, r3, #16
 80179ba:	fb0a b303 	mla	r3, sl, r3, fp
 80179be:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80179c2:	454f      	cmp	r7, r9
 80179c4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80179c8:	d805      	bhi.n	80179d6 <__multiply+0x124>
 80179ca:	f8c8 3004 	str.w	r3, [r8, #4]
 80179ce:	3504      	adds	r5, #4
 80179d0:	e79b      	b.n	801790a <__multiply+0x58>
 80179d2:	46d4      	mov	ip, sl
 80179d4:	e7b3      	b.n	801793e <__multiply+0x8c>
 80179d6:	46e0      	mov	r8, ip
 80179d8:	e7dd      	b.n	8017996 <__multiply+0xe4>
 80179da:	3e01      	subs	r6, #1
 80179dc:	e799      	b.n	8017912 <__multiply+0x60>
	...

080179e0 <__pow5mult>:
 80179e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80179e4:	4615      	mov	r5, r2
 80179e6:	f012 0203 	ands.w	r2, r2, #3
 80179ea:	4606      	mov	r6, r0
 80179ec:	460f      	mov	r7, r1
 80179ee:	d007      	beq.n	8017a00 <__pow5mult+0x20>
 80179f0:	3a01      	subs	r2, #1
 80179f2:	4c21      	ldr	r4, [pc, #132]	; (8017a78 <__pow5mult+0x98>)
 80179f4:	2300      	movs	r3, #0
 80179f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80179fa:	f7ff fe8a 	bl	8017712 <__multadd>
 80179fe:	4607      	mov	r7, r0
 8017a00:	10ad      	asrs	r5, r5, #2
 8017a02:	d035      	beq.n	8017a70 <__pow5mult+0x90>
 8017a04:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8017a06:	b93c      	cbnz	r4, 8017a18 <__pow5mult+0x38>
 8017a08:	2010      	movs	r0, #16
 8017a0a:	f7ff fe1d 	bl	8017648 <malloc>
 8017a0e:	6270      	str	r0, [r6, #36]	; 0x24
 8017a10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017a14:	6004      	str	r4, [r0, #0]
 8017a16:	60c4      	str	r4, [r0, #12]
 8017a18:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8017a1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017a20:	b94c      	cbnz	r4, 8017a36 <__pow5mult+0x56>
 8017a22:	f240 2171 	movw	r1, #625	; 0x271
 8017a26:	4630      	mov	r0, r6
 8017a28:	f7ff ff3a 	bl	80178a0 <__i2b>
 8017a2c:	2300      	movs	r3, #0
 8017a2e:	f8c8 0008 	str.w	r0, [r8, #8]
 8017a32:	4604      	mov	r4, r0
 8017a34:	6003      	str	r3, [r0, #0]
 8017a36:	f04f 0800 	mov.w	r8, #0
 8017a3a:	07eb      	lsls	r3, r5, #31
 8017a3c:	d50a      	bpl.n	8017a54 <__pow5mult+0x74>
 8017a3e:	4639      	mov	r1, r7
 8017a40:	4622      	mov	r2, r4
 8017a42:	4630      	mov	r0, r6
 8017a44:	f7ff ff35 	bl	80178b2 <__multiply>
 8017a48:	4639      	mov	r1, r7
 8017a4a:	4681      	mov	r9, r0
 8017a4c:	4630      	mov	r0, r6
 8017a4e:	f7ff fe49 	bl	80176e4 <_Bfree>
 8017a52:	464f      	mov	r7, r9
 8017a54:	106d      	asrs	r5, r5, #1
 8017a56:	d00b      	beq.n	8017a70 <__pow5mult+0x90>
 8017a58:	6820      	ldr	r0, [r4, #0]
 8017a5a:	b938      	cbnz	r0, 8017a6c <__pow5mult+0x8c>
 8017a5c:	4622      	mov	r2, r4
 8017a5e:	4621      	mov	r1, r4
 8017a60:	4630      	mov	r0, r6
 8017a62:	f7ff ff26 	bl	80178b2 <__multiply>
 8017a66:	6020      	str	r0, [r4, #0]
 8017a68:	f8c0 8000 	str.w	r8, [r0]
 8017a6c:	4604      	mov	r4, r0
 8017a6e:	e7e4      	b.n	8017a3a <__pow5mult+0x5a>
 8017a70:	4638      	mov	r0, r7
 8017a72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017a76:	bf00      	nop
 8017a78:	080195c8 	.word	0x080195c8

08017a7c <__lshift>:
 8017a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a80:	460c      	mov	r4, r1
 8017a82:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017a86:	6923      	ldr	r3, [r4, #16]
 8017a88:	6849      	ldr	r1, [r1, #4]
 8017a8a:	eb0a 0903 	add.w	r9, sl, r3
 8017a8e:	68a3      	ldr	r3, [r4, #8]
 8017a90:	4607      	mov	r7, r0
 8017a92:	4616      	mov	r6, r2
 8017a94:	f109 0501 	add.w	r5, r9, #1
 8017a98:	42ab      	cmp	r3, r5
 8017a9a:	db32      	blt.n	8017b02 <__lshift+0x86>
 8017a9c:	4638      	mov	r0, r7
 8017a9e:	f7ff fded 	bl	801767c <_Balloc>
 8017aa2:	2300      	movs	r3, #0
 8017aa4:	4680      	mov	r8, r0
 8017aa6:	f100 0114 	add.w	r1, r0, #20
 8017aaa:	461a      	mov	r2, r3
 8017aac:	4553      	cmp	r3, sl
 8017aae:	db2b      	blt.n	8017b08 <__lshift+0x8c>
 8017ab0:	6920      	ldr	r0, [r4, #16]
 8017ab2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017ab6:	f104 0314 	add.w	r3, r4, #20
 8017aba:	f016 021f 	ands.w	r2, r6, #31
 8017abe:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017ac2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8017ac6:	d025      	beq.n	8017b14 <__lshift+0x98>
 8017ac8:	f1c2 0e20 	rsb	lr, r2, #32
 8017acc:	2000      	movs	r0, #0
 8017ace:	681e      	ldr	r6, [r3, #0]
 8017ad0:	468a      	mov	sl, r1
 8017ad2:	4096      	lsls	r6, r2
 8017ad4:	4330      	orrs	r0, r6
 8017ad6:	f84a 0b04 	str.w	r0, [sl], #4
 8017ada:	f853 0b04 	ldr.w	r0, [r3], #4
 8017ade:	459c      	cmp	ip, r3
 8017ae0:	fa20 f00e 	lsr.w	r0, r0, lr
 8017ae4:	d814      	bhi.n	8017b10 <__lshift+0x94>
 8017ae6:	6048      	str	r0, [r1, #4]
 8017ae8:	b108      	cbz	r0, 8017aee <__lshift+0x72>
 8017aea:	f109 0502 	add.w	r5, r9, #2
 8017aee:	3d01      	subs	r5, #1
 8017af0:	4638      	mov	r0, r7
 8017af2:	f8c8 5010 	str.w	r5, [r8, #16]
 8017af6:	4621      	mov	r1, r4
 8017af8:	f7ff fdf4 	bl	80176e4 <_Bfree>
 8017afc:	4640      	mov	r0, r8
 8017afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b02:	3101      	adds	r1, #1
 8017b04:	005b      	lsls	r3, r3, #1
 8017b06:	e7c7      	b.n	8017a98 <__lshift+0x1c>
 8017b08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8017b0c:	3301      	adds	r3, #1
 8017b0e:	e7cd      	b.n	8017aac <__lshift+0x30>
 8017b10:	4651      	mov	r1, sl
 8017b12:	e7dc      	b.n	8017ace <__lshift+0x52>
 8017b14:	3904      	subs	r1, #4
 8017b16:	f853 2b04 	ldr.w	r2, [r3], #4
 8017b1a:	f841 2f04 	str.w	r2, [r1, #4]!
 8017b1e:	459c      	cmp	ip, r3
 8017b20:	d8f9      	bhi.n	8017b16 <__lshift+0x9a>
 8017b22:	e7e4      	b.n	8017aee <__lshift+0x72>

08017b24 <__mcmp>:
 8017b24:	6903      	ldr	r3, [r0, #16]
 8017b26:	690a      	ldr	r2, [r1, #16]
 8017b28:	1a9b      	subs	r3, r3, r2
 8017b2a:	b530      	push	{r4, r5, lr}
 8017b2c:	d10c      	bne.n	8017b48 <__mcmp+0x24>
 8017b2e:	0092      	lsls	r2, r2, #2
 8017b30:	3014      	adds	r0, #20
 8017b32:	3114      	adds	r1, #20
 8017b34:	1884      	adds	r4, r0, r2
 8017b36:	4411      	add	r1, r2
 8017b38:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8017b3c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8017b40:	4295      	cmp	r5, r2
 8017b42:	d003      	beq.n	8017b4c <__mcmp+0x28>
 8017b44:	d305      	bcc.n	8017b52 <__mcmp+0x2e>
 8017b46:	2301      	movs	r3, #1
 8017b48:	4618      	mov	r0, r3
 8017b4a:	bd30      	pop	{r4, r5, pc}
 8017b4c:	42a0      	cmp	r0, r4
 8017b4e:	d3f3      	bcc.n	8017b38 <__mcmp+0x14>
 8017b50:	e7fa      	b.n	8017b48 <__mcmp+0x24>
 8017b52:	f04f 33ff 	mov.w	r3, #4294967295
 8017b56:	e7f7      	b.n	8017b48 <__mcmp+0x24>

08017b58 <__mdiff>:
 8017b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017b5c:	460d      	mov	r5, r1
 8017b5e:	4607      	mov	r7, r0
 8017b60:	4611      	mov	r1, r2
 8017b62:	4628      	mov	r0, r5
 8017b64:	4614      	mov	r4, r2
 8017b66:	f7ff ffdd 	bl	8017b24 <__mcmp>
 8017b6a:	1e06      	subs	r6, r0, #0
 8017b6c:	d108      	bne.n	8017b80 <__mdiff+0x28>
 8017b6e:	4631      	mov	r1, r6
 8017b70:	4638      	mov	r0, r7
 8017b72:	f7ff fd83 	bl	801767c <_Balloc>
 8017b76:	2301      	movs	r3, #1
 8017b78:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8017b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b80:	bfa4      	itt	ge
 8017b82:	4623      	movge	r3, r4
 8017b84:	462c      	movge	r4, r5
 8017b86:	4638      	mov	r0, r7
 8017b88:	6861      	ldr	r1, [r4, #4]
 8017b8a:	bfa6      	itte	ge
 8017b8c:	461d      	movge	r5, r3
 8017b8e:	2600      	movge	r6, #0
 8017b90:	2601      	movlt	r6, #1
 8017b92:	f7ff fd73 	bl	801767c <_Balloc>
 8017b96:	692b      	ldr	r3, [r5, #16]
 8017b98:	60c6      	str	r6, [r0, #12]
 8017b9a:	6926      	ldr	r6, [r4, #16]
 8017b9c:	f105 0914 	add.w	r9, r5, #20
 8017ba0:	f104 0214 	add.w	r2, r4, #20
 8017ba4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8017ba8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8017bac:	f100 0514 	add.w	r5, r0, #20
 8017bb0:	f04f 0e00 	mov.w	lr, #0
 8017bb4:	f852 ab04 	ldr.w	sl, [r2], #4
 8017bb8:	f859 4b04 	ldr.w	r4, [r9], #4
 8017bbc:	fa1e f18a 	uxtah	r1, lr, sl
 8017bc0:	b2a3      	uxth	r3, r4
 8017bc2:	1ac9      	subs	r1, r1, r3
 8017bc4:	0c23      	lsrs	r3, r4, #16
 8017bc6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8017bca:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8017bce:	b289      	uxth	r1, r1
 8017bd0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8017bd4:	45c8      	cmp	r8, r9
 8017bd6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8017bda:	4694      	mov	ip, r2
 8017bdc:	f845 3b04 	str.w	r3, [r5], #4
 8017be0:	d8e8      	bhi.n	8017bb4 <__mdiff+0x5c>
 8017be2:	45bc      	cmp	ip, r7
 8017be4:	d304      	bcc.n	8017bf0 <__mdiff+0x98>
 8017be6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8017bea:	b183      	cbz	r3, 8017c0e <__mdiff+0xb6>
 8017bec:	6106      	str	r6, [r0, #16]
 8017bee:	e7c5      	b.n	8017b7c <__mdiff+0x24>
 8017bf0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8017bf4:	fa1e f381 	uxtah	r3, lr, r1
 8017bf8:	141a      	asrs	r2, r3, #16
 8017bfa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8017bfe:	b29b      	uxth	r3, r3
 8017c00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017c04:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8017c08:	f845 3b04 	str.w	r3, [r5], #4
 8017c0c:	e7e9      	b.n	8017be2 <__mdiff+0x8a>
 8017c0e:	3e01      	subs	r6, #1
 8017c10:	e7e9      	b.n	8017be6 <__mdiff+0x8e>
	...

08017c14 <__ulp>:
 8017c14:	4b12      	ldr	r3, [pc, #72]	; (8017c60 <__ulp+0x4c>)
 8017c16:	ee10 2a90 	vmov	r2, s1
 8017c1a:	401a      	ands	r2, r3
 8017c1c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	dd04      	ble.n	8017c2e <__ulp+0x1a>
 8017c24:	2000      	movs	r0, #0
 8017c26:	4619      	mov	r1, r3
 8017c28:	ec41 0b10 	vmov	d0, r0, r1
 8017c2c:	4770      	bx	lr
 8017c2e:	425b      	negs	r3, r3
 8017c30:	151b      	asrs	r3, r3, #20
 8017c32:	2b13      	cmp	r3, #19
 8017c34:	f04f 0000 	mov.w	r0, #0
 8017c38:	f04f 0100 	mov.w	r1, #0
 8017c3c:	dc04      	bgt.n	8017c48 <__ulp+0x34>
 8017c3e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8017c42:	fa42 f103 	asr.w	r1, r2, r3
 8017c46:	e7ef      	b.n	8017c28 <__ulp+0x14>
 8017c48:	3b14      	subs	r3, #20
 8017c4a:	2b1e      	cmp	r3, #30
 8017c4c:	f04f 0201 	mov.w	r2, #1
 8017c50:	bfda      	itte	le
 8017c52:	f1c3 031f 	rsble	r3, r3, #31
 8017c56:	fa02 f303 	lslle.w	r3, r2, r3
 8017c5a:	4613      	movgt	r3, r2
 8017c5c:	4618      	mov	r0, r3
 8017c5e:	e7e3      	b.n	8017c28 <__ulp+0x14>
 8017c60:	7ff00000 	.word	0x7ff00000

08017c64 <__b2d>:
 8017c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c66:	6905      	ldr	r5, [r0, #16]
 8017c68:	f100 0714 	add.w	r7, r0, #20
 8017c6c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8017c70:	1f2e      	subs	r6, r5, #4
 8017c72:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8017c76:	4620      	mov	r0, r4
 8017c78:	f7ff fdc4 	bl	8017804 <__hi0bits>
 8017c7c:	f1c0 0320 	rsb	r3, r0, #32
 8017c80:	280a      	cmp	r0, #10
 8017c82:	600b      	str	r3, [r1, #0]
 8017c84:	f8df c074 	ldr.w	ip, [pc, #116]	; 8017cfc <__b2d+0x98>
 8017c88:	dc14      	bgt.n	8017cb4 <__b2d+0x50>
 8017c8a:	f1c0 0e0b 	rsb	lr, r0, #11
 8017c8e:	fa24 f10e 	lsr.w	r1, r4, lr
 8017c92:	42b7      	cmp	r7, r6
 8017c94:	ea41 030c 	orr.w	r3, r1, ip
 8017c98:	bf34      	ite	cc
 8017c9a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8017c9e:	2100      	movcs	r1, #0
 8017ca0:	3015      	adds	r0, #21
 8017ca2:	fa04 f000 	lsl.w	r0, r4, r0
 8017ca6:	fa21 f10e 	lsr.w	r1, r1, lr
 8017caa:	ea40 0201 	orr.w	r2, r0, r1
 8017cae:	ec43 2b10 	vmov	d0, r2, r3
 8017cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017cb4:	42b7      	cmp	r7, r6
 8017cb6:	bf3a      	itte	cc
 8017cb8:	f1a5 0608 	subcc.w	r6, r5, #8
 8017cbc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8017cc0:	2100      	movcs	r1, #0
 8017cc2:	380b      	subs	r0, #11
 8017cc4:	d015      	beq.n	8017cf2 <__b2d+0x8e>
 8017cc6:	4084      	lsls	r4, r0
 8017cc8:	f1c0 0520 	rsb	r5, r0, #32
 8017ccc:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8017cd0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8017cd4:	42be      	cmp	r6, r7
 8017cd6:	fa21 fc05 	lsr.w	ip, r1, r5
 8017cda:	ea44 030c 	orr.w	r3, r4, ip
 8017cde:	bf8c      	ite	hi
 8017ce0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8017ce4:	2400      	movls	r4, #0
 8017ce6:	fa01 f000 	lsl.w	r0, r1, r0
 8017cea:	40ec      	lsrs	r4, r5
 8017cec:	ea40 0204 	orr.w	r2, r0, r4
 8017cf0:	e7dd      	b.n	8017cae <__b2d+0x4a>
 8017cf2:	ea44 030c 	orr.w	r3, r4, ip
 8017cf6:	460a      	mov	r2, r1
 8017cf8:	e7d9      	b.n	8017cae <__b2d+0x4a>
 8017cfa:	bf00      	nop
 8017cfc:	3ff00000 	.word	0x3ff00000

08017d00 <__d2b>:
 8017d00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017d04:	460e      	mov	r6, r1
 8017d06:	2101      	movs	r1, #1
 8017d08:	ec59 8b10 	vmov	r8, r9, d0
 8017d0c:	4615      	mov	r5, r2
 8017d0e:	f7ff fcb5 	bl	801767c <_Balloc>
 8017d12:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8017d16:	4607      	mov	r7, r0
 8017d18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017d1c:	bb34      	cbnz	r4, 8017d6c <__d2b+0x6c>
 8017d1e:	9301      	str	r3, [sp, #4]
 8017d20:	f1b8 0300 	subs.w	r3, r8, #0
 8017d24:	d027      	beq.n	8017d76 <__d2b+0x76>
 8017d26:	a802      	add	r0, sp, #8
 8017d28:	f840 3d08 	str.w	r3, [r0, #-8]!
 8017d2c:	f7ff fd89 	bl	8017842 <__lo0bits>
 8017d30:	9900      	ldr	r1, [sp, #0]
 8017d32:	b1f0      	cbz	r0, 8017d72 <__d2b+0x72>
 8017d34:	9a01      	ldr	r2, [sp, #4]
 8017d36:	f1c0 0320 	rsb	r3, r0, #32
 8017d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8017d3e:	430b      	orrs	r3, r1
 8017d40:	40c2      	lsrs	r2, r0
 8017d42:	617b      	str	r3, [r7, #20]
 8017d44:	9201      	str	r2, [sp, #4]
 8017d46:	9b01      	ldr	r3, [sp, #4]
 8017d48:	61bb      	str	r3, [r7, #24]
 8017d4a:	2b00      	cmp	r3, #0
 8017d4c:	bf14      	ite	ne
 8017d4e:	2102      	movne	r1, #2
 8017d50:	2101      	moveq	r1, #1
 8017d52:	6139      	str	r1, [r7, #16]
 8017d54:	b1c4      	cbz	r4, 8017d88 <__d2b+0x88>
 8017d56:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8017d5a:	4404      	add	r4, r0
 8017d5c:	6034      	str	r4, [r6, #0]
 8017d5e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8017d62:	6028      	str	r0, [r5, #0]
 8017d64:	4638      	mov	r0, r7
 8017d66:	b003      	add	sp, #12
 8017d68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017d6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017d70:	e7d5      	b.n	8017d1e <__d2b+0x1e>
 8017d72:	6179      	str	r1, [r7, #20]
 8017d74:	e7e7      	b.n	8017d46 <__d2b+0x46>
 8017d76:	a801      	add	r0, sp, #4
 8017d78:	f7ff fd63 	bl	8017842 <__lo0bits>
 8017d7c:	9b01      	ldr	r3, [sp, #4]
 8017d7e:	617b      	str	r3, [r7, #20]
 8017d80:	2101      	movs	r1, #1
 8017d82:	6139      	str	r1, [r7, #16]
 8017d84:	3020      	adds	r0, #32
 8017d86:	e7e5      	b.n	8017d54 <__d2b+0x54>
 8017d88:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8017d8c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8017d90:	6030      	str	r0, [r6, #0]
 8017d92:	6918      	ldr	r0, [r3, #16]
 8017d94:	f7ff fd36 	bl	8017804 <__hi0bits>
 8017d98:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8017d9c:	e7e1      	b.n	8017d62 <__d2b+0x62>

08017d9e <__ratio>:
 8017d9e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017da2:	4688      	mov	r8, r1
 8017da4:	4669      	mov	r1, sp
 8017da6:	4681      	mov	r9, r0
 8017da8:	f7ff ff5c 	bl	8017c64 <__b2d>
 8017dac:	a901      	add	r1, sp, #4
 8017dae:	4640      	mov	r0, r8
 8017db0:	ec57 6b10 	vmov	r6, r7, d0
 8017db4:	f7ff ff56 	bl	8017c64 <__b2d>
 8017db8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017dbc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8017dc0:	eba3 0c02 	sub.w	ip, r3, r2
 8017dc4:	e9dd 3200 	ldrd	r3, r2, [sp]
 8017dc8:	1a9b      	subs	r3, r3, r2
 8017dca:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8017dce:	ec5b ab10 	vmov	sl, fp, d0
 8017dd2:	2b00      	cmp	r3, #0
 8017dd4:	bfce      	itee	gt
 8017dd6:	463a      	movgt	r2, r7
 8017dd8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8017ddc:	465a      	movle	r2, fp
 8017dde:	4659      	mov	r1, fp
 8017de0:	463d      	mov	r5, r7
 8017de2:	bfd4      	ite	le
 8017de4:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8017de8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8017dec:	4630      	mov	r0, r6
 8017dee:	ee10 2a10 	vmov	r2, s0
 8017df2:	460b      	mov	r3, r1
 8017df4:	4629      	mov	r1, r5
 8017df6:	f7e8 fd41 	bl	800087c <__aeabi_ddiv>
 8017dfa:	ec41 0b10 	vmov	d0, r0, r1
 8017dfe:	b003      	add	sp, #12
 8017e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017e04 <__copybits>:
 8017e04:	3901      	subs	r1, #1
 8017e06:	b510      	push	{r4, lr}
 8017e08:	1149      	asrs	r1, r1, #5
 8017e0a:	6914      	ldr	r4, [r2, #16]
 8017e0c:	3101      	adds	r1, #1
 8017e0e:	f102 0314 	add.w	r3, r2, #20
 8017e12:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017e16:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8017e1a:	42a3      	cmp	r3, r4
 8017e1c:	4602      	mov	r2, r0
 8017e1e:	d303      	bcc.n	8017e28 <__copybits+0x24>
 8017e20:	2300      	movs	r3, #0
 8017e22:	428a      	cmp	r2, r1
 8017e24:	d305      	bcc.n	8017e32 <__copybits+0x2e>
 8017e26:	bd10      	pop	{r4, pc}
 8017e28:	f853 2b04 	ldr.w	r2, [r3], #4
 8017e2c:	f840 2b04 	str.w	r2, [r0], #4
 8017e30:	e7f3      	b.n	8017e1a <__copybits+0x16>
 8017e32:	f842 3b04 	str.w	r3, [r2], #4
 8017e36:	e7f4      	b.n	8017e22 <__copybits+0x1e>

08017e38 <__any_on>:
 8017e38:	f100 0214 	add.w	r2, r0, #20
 8017e3c:	6900      	ldr	r0, [r0, #16]
 8017e3e:	114b      	asrs	r3, r1, #5
 8017e40:	4298      	cmp	r0, r3
 8017e42:	b510      	push	{r4, lr}
 8017e44:	db11      	blt.n	8017e6a <__any_on+0x32>
 8017e46:	dd0a      	ble.n	8017e5e <__any_on+0x26>
 8017e48:	f011 011f 	ands.w	r1, r1, #31
 8017e4c:	d007      	beq.n	8017e5e <__any_on+0x26>
 8017e4e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8017e52:	fa24 f001 	lsr.w	r0, r4, r1
 8017e56:	fa00 f101 	lsl.w	r1, r0, r1
 8017e5a:	428c      	cmp	r4, r1
 8017e5c:	d10b      	bne.n	8017e76 <__any_on+0x3e>
 8017e5e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017e62:	4293      	cmp	r3, r2
 8017e64:	d803      	bhi.n	8017e6e <__any_on+0x36>
 8017e66:	2000      	movs	r0, #0
 8017e68:	bd10      	pop	{r4, pc}
 8017e6a:	4603      	mov	r3, r0
 8017e6c:	e7f7      	b.n	8017e5e <__any_on+0x26>
 8017e6e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017e72:	2900      	cmp	r1, #0
 8017e74:	d0f5      	beq.n	8017e62 <__any_on+0x2a>
 8017e76:	2001      	movs	r0, #1
 8017e78:	e7f6      	b.n	8017e68 <__any_on+0x30>

08017e7a <_calloc_r>:
 8017e7a:	b538      	push	{r3, r4, r5, lr}
 8017e7c:	fb02 f401 	mul.w	r4, r2, r1
 8017e80:	4621      	mov	r1, r4
 8017e82:	f000 f857 	bl	8017f34 <_malloc_r>
 8017e86:	4605      	mov	r5, r0
 8017e88:	b118      	cbz	r0, 8017e92 <_calloc_r+0x18>
 8017e8a:	4622      	mov	r2, r4
 8017e8c:	2100      	movs	r1, #0
 8017e8e:	f7fc fcaa 	bl	80147e6 <memset>
 8017e92:	4628      	mov	r0, r5
 8017e94:	bd38      	pop	{r3, r4, r5, pc}
	...

08017e98 <_free_r>:
 8017e98:	b538      	push	{r3, r4, r5, lr}
 8017e9a:	4605      	mov	r5, r0
 8017e9c:	2900      	cmp	r1, #0
 8017e9e:	d045      	beq.n	8017f2c <_free_r+0x94>
 8017ea0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017ea4:	1f0c      	subs	r4, r1, #4
 8017ea6:	2b00      	cmp	r3, #0
 8017ea8:	bfb8      	it	lt
 8017eaa:	18e4      	addlt	r4, r4, r3
 8017eac:	f000 fe30 	bl	8018b10 <__malloc_lock>
 8017eb0:	4a1f      	ldr	r2, [pc, #124]	; (8017f30 <_free_r+0x98>)
 8017eb2:	6813      	ldr	r3, [r2, #0]
 8017eb4:	4610      	mov	r0, r2
 8017eb6:	b933      	cbnz	r3, 8017ec6 <_free_r+0x2e>
 8017eb8:	6063      	str	r3, [r4, #4]
 8017eba:	6014      	str	r4, [r2, #0]
 8017ebc:	4628      	mov	r0, r5
 8017ebe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017ec2:	f000 be26 	b.w	8018b12 <__malloc_unlock>
 8017ec6:	42a3      	cmp	r3, r4
 8017ec8:	d90c      	bls.n	8017ee4 <_free_r+0x4c>
 8017eca:	6821      	ldr	r1, [r4, #0]
 8017ecc:	1862      	adds	r2, r4, r1
 8017ece:	4293      	cmp	r3, r2
 8017ed0:	bf04      	itt	eq
 8017ed2:	681a      	ldreq	r2, [r3, #0]
 8017ed4:	685b      	ldreq	r3, [r3, #4]
 8017ed6:	6063      	str	r3, [r4, #4]
 8017ed8:	bf04      	itt	eq
 8017eda:	1852      	addeq	r2, r2, r1
 8017edc:	6022      	streq	r2, [r4, #0]
 8017ede:	6004      	str	r4, [r0, #0]
 8017ee0:	e7ec      	b.n	8017ebc <_free_r+0x24>
 8017ee2:	4613      	mov	r3, r2
 8017ee4:	685a      	ldr	r2, [r3, #4]
 8017ee6:	b10a      	cbz	r2, 8017eec <_free_r+0x54>
 8017ee8:	42a2      	cmp	r2, r4
 8017eea:	d9fa      	bls.n	8017ee2 <_free_r+0x4a>
 8017eec:	6819      	ldr	r1, [r3, #0]
 8017eee:	1858      	adds	r0, r3, r1
 8017ef0:	42a0      	cmp	r0, r4
 8017ef2:	d10b      	bne.n	8017f0c <_free_r+0x74>
 8017ef4:	6820      	ldr	r0, [r4, #0]
 8017ef6:	4401      	add	r1, r0
 8017ef8:	1858      	adds	r0, r3, r1
 8017efa:	4282      	cmp	r2, r0
 8017efc:	6019      	str	r1, [r3, #0]
 8017efe:	d1dd      	bne.n	8017ebc <_free_r+0x24>
 8017f00:	6810      	ldr	r0, [r2, #0]
 8017f02:	6852      	ldr	r2, [r2, #4]
 8017f04:	605a      	str	r2, [r3, #4]
 8017f06:	4401      	add	r1, r0
 8017f08:	6019      	str	r1, [r3, #0]
 8017f0a:	e7d7      	b.n	8017ebc <_free_r+0x24>
 8017f0c:	d902      	bls.n	8017f14 <_free_r+0x7c>
 8017f0e:	230c      	movs	r3, #12
 8017f10:	602b      	str	r3, [r5, #0]
 8017f12:	e7d3      	b.n	8017ebc <_free_r+0x24>
 8017f14:	6820      	ldr	r0, [r4, #0]
 8017f16:	1821      	adds	r1, r4, r0
 8017f18:	428a      	cmp	r2, r1
 8017f1a:	bf04      	itt	eq
 8017f1c:	6811      	ldreq	r1, [r2, #0]
 8017f1e:	6852      	ldreq	r2, [r2, #4]
 8017f20:	6062      	str	r2, [r4, #4]
 8017f22:	bf04      	itt	eq
 8017f24:	1809      	addeq	r1, r1, r0
 8017f26:	6021      	streq	r1, [r4, #0]
 8017f28:	605c      	str	r4, [r3, #4]
 8017f2a:	e7c7      	b.n	8017ebc <_free_r+0x24>
 8017f2c:	bd38      	pop	{r3, r4, r5, pc}
 8017f2e:	bf00      	nop
 8017f30:	2003c4d0 	.word	0x2003c4d0

08017f34 <_malloc_r>:
 8017f34:	b570      	push	{r4, r5, r6, lr}
 8017f36:	1ccd      	adds	r5, r1, #3
 8017f38:	f025 0503 	bic.w	r5, r5, #3
 8017f3c:	3508      	adds	r5, #8
 8017f3e:	2d0c      	cmp	r5, #12
 8017f40:	bf38      	it	cc
 8017f42:	250c      	movcc	r5, #12
 8017f44:	2d00      	cmp	r5, #0
 8017f46:	4606      	mov	r6, r0
 8017f48:	db01      	blt.n	8017f4e <_malloc_r+0x1a>
 8017f4a:	42a9      	cmp	r1, r5
 8017f4c:	d903      	bls.n	8017f56 <_malloc_r+0x22>
 8017f4e:	230c      	movs	r3, #12
 8017f50:	6033      	str	r3, [r6, #0]
 8017f52:	2000      	movs	r0, #0
 8017f54:	bd70      	pop	{r4, r5, r6, pc}
 8017f56:	f000 fddb 	bl	8018b10 <__malloc_lock>
 8017f5a:	4a21      	ldr	r2, [pc, #132]	; (8017fe0 <_malloc_r+0xac>)
 8017f5c:	6814      	ldr	r4, [r2, #0]
 8017f5e:	4621      	mov	r1, r4
 8017f60:	b991      	cbnz	r1, 8017f88 <_malloc_r+0x54>
 8017f62:	4c20      	ldr	r4, [pc, #128]	; (8017fe4 <_malloc_r+0xb0>)
 8017f64:	6823      	ldr	r3, [r4, #0]
 8017f66:	b91b      	cbnz	r3, 8017f70 <_malloc_r+0x3c>
 8017f68:	4630      	mov	r0, r6
 8017f6a:	f000 fc91 	bl	8018890 <_sbrk_r>
 8017f6e:	6020      	str	r0, [r4, #0]
 8017f70:	4629      	mov	r1, r5
 8017f72:	4630      	mov	r0, r6
 8017f74:	f000 fc8c 	bl	8018890 <_sbrk_r>
 8017f78:	1c43      	adds	r3, r0, #1
 8017f7a:	d124      	bne.n	8017fc6 <_malloc_r+0x92>
 8017f7c:	230c      	movs	r3, #12
 8017f7e:	6033      	str	r3, [r6, #0]
 8017f80:	4630      	mov	r0, r6
 8017f82:	f000 fdc6 	bl	8018b12 <__malloc_unlock>
 8017f86:	e7e4      	b.n	8017f52 <_malloc_r+0x1e>
 8017f88:	680b      	ldr	r3, [r1, #0]
 8017f8a:	1b5b      	subs	r3, r3, r5
 8017f8c:	d418      	bmi.n	8017fc0 <_malloc_r+0x8c>
 8017f8e:	2b0b      	cmp	r3, #11
 8017f90:	d90f      	bls.n	8017fb2 <_malloc_r+0x7e>
 8017f92:	600b      	str	r3, [r1, #0]
 8017f94:	50cd      	str	r5, [r1, r3]
 8017f96:	18cc      	adds	r4, r1, r3
 8017f98:	4630      	mov	r0, r6
 8017f9a:	f000 fdba 	bl	8018b12 <__malloc_unlock>
 8017f9e:	f104 000b 	add.w	r0, r4, #11
 8017fa2:	1d23      	adds	r3, r4, #4
 8017fa4:	f020 0007 	bic.w	r0, r0, #7
 8017fa8:	1ac3      	subs	r3, r0, r3
 8017faa:	d0d3      	beq.n	8017f54 <_malloc_r+0x20>
 8017fac:	425a      	negs	r2, r3
 8017fae:	50e2      	str	r2, [r4, r3]
 8017fb0:	e7d0      	b.n	8017f54 <_malloc_r+0x20>
 8017fb2:	428c      	cmp	r4, r1
 8017fb4:	684b      	ldr	r3, [r1, #4]
 8017fb6:	bf16      	itet	ne
 8017fb8:	6063      	strne	r3, [r4, #4]
 8017fba:	6013      	streq	r3, [r2, #0]
 8017fbc:	460c      	movne	r4, r1
 8017fbe:	e7eb      	b.n	8017f98 <_malloc_r+0x64>
 8017fc0:	460c      	mov	r4, r1
 8017fc2:	6849      	ldr	r1, [r1, #4]
 8017fc4:	e7cc      	b.n	8017f60 <_malloc_r+0x2c>
 8017fc6:	1cc4      	adds	r4, r0, #3
 8017fc8:	f024 0403 	bic.w	r4, r4, #3
 8017fcc:	42a0      	cmp	r0, r4
 8017fce:	d005      	beq.n	8017fdc <_malloc_r+0xa8>
 8017fd0:	1a21      	subs	r1, r4, r0
 8017fd2:	4630      	mov	r0, r6
 8017fd4:	f000 fc5c 	bl	8018890 <_sbrk_r>
 8017fd8:	3001      	adds	r0, #1
 8017fda:	d0cf      	beq.n	8017f7c <_malloc_r+0x48>
 8017fdc:	6025      	str	r5, [r4, #0]
 8017fde:	e7db      	b.n	8017f98 <_malloc_r+0x64>
 8017fe0:	2003c4d0 	.word	0x2003c4d0
 8017fe4:	2003c4d4 	.word	0x2003c4d4

08017fe8 <__ssputs_r>:
 8017fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017fec:	688e      	ldr	r6, [r1, #8]
 8017fee:	429e      	cmp	r6, r3
 8017ff0:	4682      	mov	sl, r0
 8017ff2:	460c      	mov	r4, r1
 8017ff4:	4690      	mov	r8, r2
 8017ff6:	4699      	mov	r9, r3
 8017ff8:	d837      	bhi.n	801806a <__ssputs_r+0x82>
 8017ffa:	898a      	ldrh	r2, [r1, #12]
 8017ffc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018000:	d031      	beq.n	8018066 <__ssputs_r+0x7e>
 8018002:	6825      	ldr	r5, [r4, #0]
 8018004:	6909      	ldr	r1, [r1, #16]
 8018006:	1a6f      	subs	r7, r5, r1
 8018008:	6965      	ldr	r5, [r4, #20]
 801800a:	2302      	movs	r3, #2
 801800c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018010:	fb95 f5f3 	sdiv	r5, r5, r3
 8018014:	f109 0301 	add.w	r3, r9, #1
 8018018:	443b      	add	r3, r7
 801801a:	429d      	cmp	r5, r3
 801801c:	bf38      	it	cc
 801801e:	461d      	movcc	r5, r3
 8018020:	0553      	lsls	r3, r2, #21
 8018022:	d530      	bpl.n	8018086 <__ssputs_r+0x9e>
 8018024:	4629      	mov	r1, r5
 8018026:	f7ff ff85 	bl	8017f34 <_malloc_r>
 801802a:	4606      	mov	r6, r0
 801802c:	b950      	cbnz	r0, 8018044 <__ssputs_r+0x5c>
 801802e:	230c      	movs	r3, #12
 8018030:	f8ca 3000 	str.w	r3, [sl]
 8018034:	89a3      	ldrh	r3, [r4, #12]
 8018036:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801803a:	81a3      	strh	r3, [r4, #12]
 801803c:	f04f 30ff 	mov.w	r0, #4294967295
 8018040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018044:	463a      	mov	r2, r7
 8018046:	6921      	ldr	r1, [r4, #16]
 8018048:	f7fc fbc2 	bl	80147d0 <memcpy>
 801804c:	89a3      	ldrh	r3, [r4, #12]
 801804e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018056:	81a3      	strh	r3, [r4, #12]
 8018058:	6126      	str	r6, [r4, #16]
 801805a:	6165      	str	r5, [r4, #20]
 801805c:	443e      	add	r6, r7
 801805e:	1bed      	subs	r5, r5, r7
 8018060:	6026      	str	r6, [r4, #0]
 8018062:	60a5      	str	r5, [r4, #8]
 8018064:	464e      	mov	r6, r9
 8018066:	454e      	cmp	r6, r9
 8018068:	d900      	bls.n	801806c <__ssputs_r+0x84>
 801806a:	464e      	mov	r6, r9
 801806c:	4632      	mov	r2, r6
 801806e:	4641      	mov	r1, r8
 8018070:	6820      	ldr	r0, [r4, #0]
 8018072:	f000 fd34 	bl	8018ade <memmove>
 8018076:	68a3      	ldr	r3, [r4, #8]
 8018078:	1b9b      	subs	r3, r3, r6
 801807a:	60a3      	str	r3, [r4, #8]
 801807c:	6823      	ldr	r3, [r4, #0]
 801807e:	441e      	add	r6, r3
 8018080:	6026      	str	r6, [r4, #0]
 8018082:	2000      	movs	r0, #0
 8018084:	e7dc      	b.n	8018040 <__ssputs_r+0x58>
 8018086:	462a      	mov	r2, r5
 8018088:	f000 fd44 	bl	8018b14 <_realloc_r>
 801808c:	4606      	mov	r6, r0
 801808e:	2800      	cmp	r0, #0
 8018090:	d1e2      	bne.n	8018058 <__ssputs_r+0x70>
 8018092:	6921      	ldr	r1, [r4, #16]
 8018094:	4650      	mov	r0, sl
 8018096:	f7ff feff 	bl	8017e98 <_free_r>
 801809a:	e7c8      	b.n	801802e <__ssputs_r+0x46>

0801809c <_svfiprintf_r>:
 801809c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180a0:	461d      	mov	r5, r3
 80180a2:	898b      	ldrh	r3, [r1, #12]
 80180a4:	061f      	lsls	r7, r3, #24
 80180a6:	b09d      	sub	sp, #116	; 0x74
 80180a8:	4680      	mov	r8, r0
 80180aa:	460c      	mov	r4, r1
 80180ac:	4616      	mov	r6, r2
 80180ae:	d50f      	bpl.n	80180d0 <_svfiprintf_r+0x34>
 80180b0:	690b      	ldr	r3, [r1, #16]
 80180b2:	b96b      	cbnz	r3, 80180d0 <_svfiprintf_r+0x34>
 80180b4:	2140      	movs	r1, #64	; 0x40
 80180b6:	f7ff ff3d 	bl	8017f34 <_malloc_r>
 80180ba:	6020      	str	r0, [r4, #0]
 80180bc:	6120      	str	r0, [r4, #16]
 80180be:	b928      	cbnz	r0, 80180cc <_svfiprintf_r+0x30>
 80180c0:	230c      	movs	r3, #12
 80180c2:	f8c8 3000 	str.w	r3, [r8]
 80180c6:	f04f 30ff 	mov.w	r0, #4294967295
 80180ca:	e0c8      	b.n	801825e <_svfiprintf_r+0x1c2>
 80180cc:	2340      	movs	r3, #64	; 0x40
 80180ce:	6163      	str	r3, [r4, #20]
 80180d0:	2300      	movs	r3, #0
 80180d2:	9309      	str	r3, [sp, #36]	; 0x24
 80180d4:	2320      	movs	r3, #32
 80180d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80180da:	2330      	movs	r3, #48	; 0x30
 80180dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80180e0:	9503      	str	r5, [sp, #12]
 80180e2:	f04f 0b01 	mov.w	fp, #1
 80180e6:	4637      	mov	r7, r6
 80180e8:	463d      	mov	r5, r7
 80180ea:	f815 3b01 	ldrb.w	r3, [r5], #1
 80180ee:	b10b      	cbz	r3, 80180f4 <_svfiprintf_r+0x58>
 80180f0:	2b25      	cmp	r3, #37	; 0x25
 80180f2:	d13e      	bne.n	8018172 <_svfiprintf_r+0xd6>
 80180f4:	ebb7 0a06 	subs.w	sl, r7, r6
 80180f8:	d00b      	beq.n	8018112 <_svfiprintf_r+0x76>
 80180fa:	4653      	mov	r3, sl
 80180fc:	4632      	mov	r2, r6
 80180fe:	4621      	mov	r1, r4
 8018100:	4640      	mov	r0, r8
 8018102:	f7ff ff71 	bl	8017fe8 <__ssputs_r>
 8018106:	3001      	adds	r0, #1
 8018108:	f000 80a4 	beq.w	8018254 <_svfiprintf_r+0x1b8>
 801810c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801810e:	4453      	add	r3, sl
 8018110:	9309      	str	r3, [sp, #36]	; 0x24
 8018112:	783b      	ldrb	r3, [r7, #0]
 8018114:	2b00      	cmp	r3, #0
 8018116:	f000 809d 	beq.w	8018254 <_svfiprintf_r+0x1b8>
 801811a:	2300      	movs	r3, #0
 801811c:	f04f 32ff 	mov.w	r2, #4294967295
 8018120:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018124:	9304      	str	r3, [sp, #16]
 8018126:	9307      	str	r3, [sp, #28]
 8018128:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801812c:	931a      	str	r3, [sp, #104]	; 0x68
 801812e:	462f      	mov	r7, r5
 8018130:	2205      	movs	r2, #5
 8018132:	f817 1b01 	ldrb.w	r1, [r7], #1
 8018136:	4850      	ldr	r0, [pc, #320]	; (8018278 <_svfiprintf_r+0x1dc>)
 8018138:	f7e8 f86a 	bl	8000210 <memchr>
 801813c:	9b04      	ldr	r3, [sp, #16]
 801813e:	b9d0      	cbnz	r0, 8018176 <_svfiprintf_r+0xda>
 8018140:	06d9      	lsls	r1, r3, #27
 8018142:	bf44      	itt	mi
 8018144:	2220      	movmi	r2, #32
 8018146:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801814a:	071a      	lsls	r2, r3, #28
 801814c:	bf44      	itt	mi
 801814e:	222b      	movmi	r2, #43	; 0x2b
 8018150:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018154:	782a      	ldrb	r2, [r5, #0]
 8018156:	2a2a      	cmp	r2, #42	; 0x2a
 8018158:	d015      	beq.n	8018186 <_svfiprintf_r+0xea>
 801815a:	9a07      	ldr	r2, [sp, #28]
 801815c:	462f      	mov	r7, r5
 801815e:	2000      	movs	r0, #0
 8018160:	250a      	movs	r5, #10
 8018162:	4639      	mov	r1, r7
 8018164:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018168:	3b30      	subs	r3, #48	; 0x30
 801816a:	2b09      	cmp	r3, #9
 801816c:	d94d      	bls.n	801820a <_svfiprintf_r+0x16e>
 801816e:	b1b8      	cbz	r0, 80181a0 <_svfiprintf_r+0x104>
 8018170:	e00f      	b.n	8018192 <_svfiprintf_r+0xf6>
 8018172:	462f      	mov	r7, r5
 8018174:	e7b8      	b.n	80180e8 <_svfiprintf_r+0x4c>
 8018176:	4a40      	ldr	r2, [pc, #256]	; (8018278 <_svfiprintf_r+0x1dc>)
 8018178:	1a80      	subs	r0, r0, r2
 801817a:	fa0b f000 	lsl.w	r0, fp, r0
 801817e:	4318      	orrs	r0, r3
 8018180:	9004      	str	r0, [sp, #16]
 8018182:	463d      	mov	r5, r7
 8018184:	e7d3      	b.n	801812e <_svfiprintf_r+0x92>
 8018186:	9a03      	ldr	r2, [sp, #12]
 8018188:	1d11      	adds	r1, r2, #4
 801818a:	6812      	ldr	r2, [r2, #0]
 801818c:	9103      	str	r1, [sp, #12]
 801818e:	2a00      	cmp	r2, #0
 8018190:	db01      	blt.n	8018196 <_svfiprintf_r+0xfa>
 8018192:	9207      	str	r2, [sp, #28]
 8018194:	e004      	b.n	80181a0 <_svfiprintf_r+0x104>
 8018196:	4252      	negs	r2, r2
 8018198:	f043 0302 	orr.w	r3, r3, #2
 801819c:	9207      	str	r2, [sp, #28]
 801819e:	9304      	str	r3, [sp, #16]
 80181a0:	783b      	ldrb	r3, [r7, #0]
 80181a2:	2b2e      	cmp	r3, #46	; 0x2e
 80181a4:	d10c      	bne.n	80181c0 <_svfiprintf_r+0x124>
 80181a6:	787b      	ldrb	r3, [r7, #1]
 80181a8:	2b2a      	cmp	r3, #42	; 0x2a
 80181aa:	d133      	bne.n	8018214 <_svfiprintf_r+0x178>
 80181ac:	9b03      	ldr	r3, [sp, #12]
 80181ae:	1d1a      	adds	r2, r3, #4
 80181b0:	681b      	ldr	r3, [r3, #0]
 80181b2:	9203      	str	r2, [sp, #12]
 80181b4:	2b00      	cmp	r3, #0
 80181b6:	bfb8      	it	lt
 80181b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80181bc:	3702      	adds	r7, #2
 80181be:	9305      	str	r3, [sp, #20]
 80181c0:	4d2e      	ldr	r5, [pc, #184]	; (801827c <_svfiprintf_r+0x1e0>)
 80181c2:	7839      	ldrb	r1, [r7, #0]
 80181c4:	2203      	movs	r2, #3
 80181c6:	4628      	mov	r0, r5
 80181c8:	f7e8 f822 	bl	8000210 <memchr>
 80181cc:	b138      	cbz	r0, 80181de <_svfiprintf_r+0x142>
 80181ce:	2340      	movs	r3, #64	; 0x40
 80181d0:	1b40      	subs	r0, r0, r5
 80181d2:	fa03 f000 	lsl.w	r0, r3, r0
 80181d6:	9b04      	ldr	r3, [sp, #16]
 80181d8:	4303      	orrs	r3, r0
 80181da:	3701      	adds	r7, #1
 80181dc:	9304      	str	r3, [sp, #16]
 80181de:	7839      	ldrb	r1, [r7, #0]
 80181e0:	4827      	ldr	r0, [pc, #156]	; (8018280 <_svfiprintf_r+0x1e4>)
 80181e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80181e6:	2206      	movs	r2, #6
 80181e8:	1c7e      	adds	r6, r7, #1
 80181ea:	f7e8 f811 	bl	8000210 <memchr>
 80181ee:	2800      	cmp	r0, #0
 80181f0:	d038      	beq.n	8018264 <_svfiprintf_r+0x1c8>
 80181f2:	4b24      	ldr	r3, [pc, #144]	; (8018284 <_svfiprintf_r+0x1e8>)
 80181f4:	bb13      	cbnz	r3, 801823c <_svfiprintf_r+0x1a0>
 80181f6:	9b03      	ldr	r3, [sp, #12]
 80181f8:	3307      	adds	r3, #7
 80181fa:	f023 0307 	bic.w	r3, r3, #7
 80181fe:	3308      	adds	r3, #8
 8018200:	9303      	str	r3, [sp, #12]
 8018202:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018204:	444b      	add	r3, r9
 8018206:	9309      	str	r3, [sp, #36]	; 0x24
 8018208:	e76d      	b.n	80180e6 <_svfiprintf_r+0x4a>
 801820a:	fb05 3202 	mla	r2, r5, r2, r3
 801820e:	2001      	movs	r0, #1
 8018210:	460f      	mov	r7, r1
 8018212:	e7a6      	b.n	8018162 <_svfiprintf_r+0xc6>
 8018214:	2300      	movs	r3, #0
 8018216:	3701      	adds	r7, #1
 8018218:	9305      	str	r3, [sp, #20]
 801821a:	4619      	mov	r1, r3
 801821c:	250a      	movs	r5, #10
 801821e:	4638      	mov	r0, r7
 8018220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018224:	3a30      	subs	r2, #48	; 0x30
 8018226:	2a09      	cmp	r2, #9
 8018228:	d903      	bls.n	8018232 <_svfiprintf_r+0x196>
 801822a:	2b00      	cmp	r3, #0
 801822c:	d0c8      	beq.n	80181c0 <_svfiprintf_r+0x124>
 801822e:	9105      	str	r1, [sp, #20]
 8018230:	e7c6      	b.n	80181c0 <_svfiprintf_r+0x124>
 8018232:	fb05 2101 	mla	r1, r5, r1, r2
 8018236:	2301      	movs	r3, #1
 8018238:	4607      	mov	r7, r0
 801823a:	e7f0      	b.n	801821e <_svfiprintf_r+0x182>
 801823c:	ab03      	add	r3, sp, #12
 801823e:	9300      	str	r3, [sp, #0]
 8018240:	4622      	mov	r2, r4
 8018242:	4b11      	ldr	r3, [pc, #68]	; (8018288 <_svfiprintf_r+0x1ec>)
 8018244:	a904      	add	r1, sp, #16
 8018246:	4640      	mov	r0, r8
 8018248:	f7fc fb6a 	bl	8014920 <_printf_float>
 801824c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8018250:	4681      	mov	r9, r0
 8018252:	d1d6      	bne.n	8018202 <_svfiprintf_r+0x166>
 8018254:	89a3      	ldrh	r3, [r4, #12]
 8018256:	065b      	lsls	r3, r3, #25
 8018258:	f53f af35 	bmi.w	80180c6 <_svfiprintf_r+0x2a>
 801825c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801825e:	b01d      	add	sp, #116	; 0x74
 8018260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018264:	ab03      	add	r3, sp, #12
 8018266:	9300      	str	r3, [sp, #0]
 8018268:	4622      	mov	r2, r4
 801826a:	4b07      	ldr	r3, [pc, #28]	; (8018288 <_svfiprintf_r+0x1ec>)
 801826c:	a904      	add	r1, sp, #16
 801826e:	4640      	mov	r0, r8
 8018270:	f7fc fe0c 	bl	8014e8c <_printf_i>
 8018274:	e7ea      	b.n	801824c <_svfiprintf_r+0x1b0>
 8018276:	bf00      	nop
 8018278:	080195d4 	.word	0x080195d4
 801827c:	080195da 	.word	0x080195da
 8018280:	080195de 	.word	0x080195de
 8018284:	08014921 	.word	0x08014921
 8018288:	08017fe9 	.word	0x08017fe9

0801828c <_sungetc_r>:
 801828c:	b538      	push	{r3, r4, r5, lr}
 801828e:	1c4b      	adds	r3, r1, #1
 8018290:	4614      	mov	r4, r2
 8018292:	d103      	bne.n	801829c <_sungetc_r+0x10>
 8018294:	f04f 35ff 	mov.w	r5, #4294967295
 8018298:	4628      	mov	r0, r5
 801829a:	bd38      	pop	{r3, r4, r5, pc}
 801829c:	8993      	ldrh	r3, [r2, #12]
 801829e:	f023 0320 	bic.w	r3, r3, #32
 80182a2:	8193      	strh	r3, [r2, #12]
 80182a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80182a6:	6852      	ldr	r2, [r2, #4]
 80182a8:	b2cd      	uxtb	r5, r1
 80182aa:	b18b      	cbz	r3, 80182d0 <_sungetc_r+0x44>
 80182ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80182ae:	4293      	cmp	r3, r2
 80182b0:	dd08      	ble.n	80182c4 <_sungetc_r+0x38>
 80182b2:	6823      	ldr	r3, [r4, #0]
 80182b4:	1e5a      	subs	r2, r3, #1
 80182b6:	6022      	str	r2, [r4, #0]
 80182b8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80182bc:	6863      	ldr	r3, [r4, #4]
 80182be:	3301      	adds	r3, #1
 80182c0:	6063      	str	r3, [r4, #4]
 80182c2:	e7e9      	b.n	8018298 <_sungetc_r+0xc>
 80182c4:	4621      	mov	r1, r4
 80182c6:	f000 fbc3 	bl	8018a50 <__submore>
 80182ca:	2800      	cmp	r0, #0
 80182cc:	d0f1      	beq.n	80182b2 <_sungetc_r+0x26>
 80182ce:	e7e1      	b.n	8018294 <_sungetc_r+0x8>
 80182d0:	6921      	ldr	r1, [r4, #16]
 80182d2:	6823      	ldr	r3, [r4, #0]
 80182d4:	b151      	cbz	r1, 80182ec <_sungetc_r+0x60>
 80182d6:	4299      	cmp	r1, r3
 80182d8:	d208      	bcs.n	80182ec <_sungetc_r+0x60>
 80182da:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80182de:	42a9      	cmp	r1, r5
 80182e0:	d104      	bne.n	80182ec <_sungetc_r+0x60>
 80182e2:	3b01      	subs	r3, #1
 80182e4:	3201      	adds	r2, #1
 80182e6:	6023      	str	r3, [r4, #0]
 80182e8:	6062      	str	r2, [r4, #4]
 80182ea:	e7d5      	b.n	8018298 <_sungetc_r+0xc>
 80182ec:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80182f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80182f4:	6363      	str	r3, [r4, #52]	; 0x34
 80182f6:	2303      	movs	r3, #3
 80182f8:	63a3      	str	r3, [r4, #56]	; 0x38
 80182fa:	4623      	mov	r3, r4
 80182fc:	f803 5f46 	strb.w	r5, [r3, #70]!
 8018300:	6023      	str	r3, [r4, #0]
 8018302:	2301      	movs	r3, #1
 8018304:	e7dc      	b.n	80182c0 <_sungetc_r+0x34>

08018306 <__ssrefill_r>:
 8018306:	b510      	push	{r4, lr}
 8018308:	460c      	mov	r4, r1
 801830a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801830c:	b169      	cbz	r1, 801832a <__ssrefill_r+0x24>
 801830e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018312:	4299      	cmp	r1, r3
 8018314:	d001      	beq.n	801831a <__ssrefill_r+0x14>
 8018316:	f7ff fdbf 	bl	8017e98 <_free_r>
 801831a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801831c:	6063      	str	r3, [r4, #4]
 801831e:	2000      	movs	r0, #0
 8018320:	6360      	str	r0, [r4, #52]	; 0x34
 8018322:	b113      	cbz	r3, 801832a <__ssrefill_r+0x24>
 8018324:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018326:	6023      	str	r3, [r4, #0]
 8018328:	bd10      	pop	{r4, pc}
 801832a:	6923      	ldr	r3, [r4, #16]
 801832c:	6023      	str	r3, [r4, #0]
 801832e:	2300      	movs	r3, #0
 8018330:	6063      	str	r3, [r4, #4]
 8018332:	89a3      	ldrh	r3, [r4, #12]
 8018334:	f043 0320 	orr.w	r3, r3, #32
 8018338:	81a3      	strh	r3, [r4, #12]
 801833a:	f04f 30ff 	mov.w	r0, #4294967295
 801833e:	e7f3      	b.n	8018328 <__ssrefill_r+0x22>

08018340 <__ssvfiscanf_r>:
 8018340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018344:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8018348:	460c      	mov	r4, r1
 801834a:	2100      	movs	r1, #0
 801834c:	9144      	str	r1, [sp, #272]	; 0x110
 801834e:	9145      	str	r1, [sp, #276]	; 0x114
 8018350:	499f      	ldr	r1, [pc, #636]	; (80185d0 <__ssvfiscanf_r+0x290>)
 8018352:	91a0      	str	r1, [sp, #640]	; 0x280
 8018354:	f10d 0804 	add.w	r8, sp, #4
 8018358:	499e      	ldr	r1, [pc, #632]	; (80185d4 <__ssvfiscanf_r+0x294>)
 801835a:	f8df 927c 	ldr.w	r9, [pc, #636]	; 80185d8 <__ssvfiscanf_r+0x298>
 801835e:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8018362:	4606      	mov	r6, r0
 8018364:	4692      	mov	sl, r2
 8018366:	91a1      	str	r1, [sp, #644]	; 0x284
 8018368:	9300      	str	r3, [sp, #0]
 801836a:	270a      	movs	r7, #10
 801836c:	f89a 3000 	ldrb.w	r3, [sl]
 8018370:	2b00      	cmp	r3, #0
 8018372:	f000 812a 	beq.w	80185ca <__ssvfiscanf_r+0x28a>
 8018376:	4655      	mov	r5, sl
 8018378:	f7ff f948 	bl	801760c <__locale_ctype_ptr>
 801837c:	f815 bb01 	ldrb.w	fp, [r5], #1
 8018380:	4458      	add	r0, fp
 8018382:	7843      	ldrb	r3, [r0, #1]
 8018384:	f013 0308 	ands.w	r3, r3, #8
 8018388:	d01c      	beq.n	80183c4 <__ssvfiscanf_r+0x84>
 801838a:	6863      	ldr	r3, [r4, #4]
 801838c:	2b00      	cmp	r3, #0
 801838e:	dd12      	ble.n	80183b6 <__ssvfiscanf_r+0x76>
 8018390:	f7ff f93c 	bl	801760c <__locale_ctype_ptr>
 8018394:	6823      	ldr	r3, [r4, #0]
 8018396:	781a      	ldrb	r2, [r3, #0]
 8018398:	4410      	add	r0, r2
 801839a:	7842      	ldrb	r2, [r0, #1]
 801839c:	0712      	lsls	r2, r2, #28
 801839e:	d401      	bmi.n	80183a4 <__ssvfiscanf_r+0x64>
 80183a0:	46aa      	mov	sl, r5
 80183a2:	e7e3      	b.n	801836c <__ssvfiscanf_r+0x2c>
 80183a4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80183a6:	3201      	adds	r2, #1
 80183a8:	9245      	str	r2, [sp, #276]	; 0x114
 80183aa:	6862      	ldr	r2, [r4, #4]
 80183ac:	3301      	adds	r3, #1
 80183ae:	3a01      	subs	r2, #1
 80183b0:	6062      	str	r2, [r4, #4]
 80183b2:	6023      	str	r3, [r4, #0]
 80183b4:	e7e9      	b.n	801838a <__ssvfiscanf_r+0x4a>
 80183b6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80183b8:	4621      	mov	r1, r4
 80183ba:	4630      	mov	r0, r6
 80183bc:	4798      	blx	r3
 80183be:	2800      	cmp	r0, #0
 80183c0:	d0e6      	beq.n	8018390 <__ssvfiscanf_r+0x50>
 80183c2:	e7ed      	b.n	80183a0 <__ssvfiscanf_r+0x60>
 80183c4:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80183c8:	f040 8082 	bne.w	80184d0 <__ssvfiscanf_r+0x190>
 80183cc:	9343      	str	r3, [sp, #268]	; 0x10c
 80183ce:	9341      	str	r3, [sp, #260]	; 0x104
 80183d0:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80183d4:	2b2a      	cmp	r3, #42	; 0x2a
 80183d6:	d103      	bne.n	80183e0 <__ssvfiscanf_r+0xa0>
 80183d8:	2310      	movs	r3, #16
 80183da:	9341      	str	r3, [sp, #260]	; 0x104
 80183dc:	f10a 0502 	add.w	r5, sl, #2
 80183e0:	46aa      	mov	sl, r5
 80183e2:	f815 1b01 	ldrb.w	r1, [r5], #1
 80183e6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80183ea:	2a09      	cmp	r2, #9
 80183ec:	d922      	bls.n	8018434 <__ssvfiscanf_r+0xf4>
 80183ee:	2203      	movs	r2, #3
 80183f0:	4879      	ldr	r0, [pc, #484]	; (80185d8 <__ssvfiscanf_r+0x298>)
 80183f2:	f7e7 ff0d 	bl	8000210 <memchr>
 80183f6:	b138      	cbz	r0, 8018408 <__ssvfiscanf_r+0xc8>
 80183f8:	eba0 0309 	sub.w	r3, r0, r9
 80183fc:	2001      	movs	r0, #1
 80183fe:	4098      	lsls	r0, r3
 8018400:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018402:	4318      	orrs	r0, r3
 8018404:	9041      	str	r0, [sp, #260]	; 0x104
 8018406:	46aa      	mov	sl, r5
 8018408:	f89a 3000 	ldrb.w	r3, [sl]
 801840c:	2b67      	cmp	r3, #103	; 0x67
 801840e:	f10a 0501 	add.w	r5, sl, #1
 8018412:	d82b      	bhi.n	801846c <__ssvfiscanf_r+0x12c>
 8018414:	2b65      	cmp	r3, #101	; 0x65
 8018416:	f080 809f 	bcs.w	8018558 <__ssvfiscanf_r+0x218>
 801841a:	2b47      	cmp	r3, #71	; 0x47
 801841c:	d810      	bhi.n	8018440 <__ssvfiscanf_r+0x100>
 801841e:	2b45      	cmp	r3, #69	; 0x45
 8018420:	f080 809a 	bcs.w	8018558 <__ssvfiscanf_r+0x218>
 8018424:	2b00      	cmp	r3, #0
 8018426:	d06c      	beq.n	8018502 <__ssvfiscanf_r+0x1c2>
 8018428:	2b25      	cmp	r3, #37	; 0x25
 801842a:	d051      	beq.n	80184d0 <__ssvfiscanf_r+0x190>
 801842c:	2303      	movs	r3, #3
 801842e:	9347      	str	r3, [sp, #284]	; 0x11c
 8018430:	9742      	str	r7, [sp, #264]	; 0x108
 8018432:	e027      	b.n	8018484 <__ssvfiscanf_r+0x144>
 8018434:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8018436:	fb07 1303 	mla	r3, r7, r3, r1
 801843a:	3b30      	subs	r3, #48	; 0x30
 801843c:	9343      	str	r3, [sp, #268]	; 0x10c
 801843e:	e7cf      	b.n	80183e0 <__ssvfiscanf_r+0xa0>
 8018440:	2b5b      	cmp	r3, #91	; 0x5b
 8018442:	d06a      	beq.n	801851a <__ssvfiscanf_r+0x1da>
 8018444:	d80c      	bhi.n	8018460 <__ssvfiscanf_r+0x120>
 8018446:	2b58      	cmp	r3, #88	; 0x58
 8018448:	d1f0      	bne.n	801842c <__ssvfiscanf_r+0xec>
 801844a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801844c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018450:	9241      	str	r2, [sp, #260]	; 0x104
 8018452:	2210      	movs	r2, #16
 8018454:	9242      	str	r2, [sp, #264]	; 0x108
 8018456:	2b6e      	cmp	r3, #110	; 0x6e
 8018458:	bf8c      	ite	hi
 801845a:	2304      	movhi	r3, #4
 801845c:	2303      	movls	r3, #3
 801845e:	e010      	b.n	8018482 <__ssvfiscanf_r+0x142>
 8018460:	2b63      	cmp	r3, #99	; 0x63
 8018462:	d065      	beq.n	8018530 <__ssvfiscanf_r+0x1f0>
 8018464:	2b64      	cmp	r3, #100	; 0x64
 8018466:	d1e1      	bne.n	801842c <__ssvfiscanf_r+0xec>
 8018468:	9742      	str	r7, [sp, #264]	; 0x108
 801846a:	e7f4      	b.n	8018456 <__ssvfiscanf_r+0x116>
 801846c:	2b70      	cmp	r3, #112	; 0x70
 801846e:	d04b      	beq.n	8018508 <__ssvfiscanf_r+0x1c8>
 8018470:	d826      	bhi.n	80184c0 <__ssvfiscanf_r+0x180>
 8018472:	2b6e      	cmp	r3, #110	; 0x6e
 8018474:	d062      	beq.n	801853c <__ssvfiscanf_r+0x1fc>
 8018476:	d84c      	bhi.n	8018512 <__ssvfiscanf_r+0x1d2>
 8018478:	2b69      	cmp	r3, #105	; 0x69
 801847a:	d1d7      	bne.n	801842c <__ssvfiscanf_r+0xec>
 801847c:	2300      	movs	r3, #0
 801847e:	9342      	str	r3, [sp, #264]	; 0x108
 8018480:	2303      	movs	r3, #3
 8018482:	9347      	str	r3, [sp, #284]	; 0x11c
 8018484:	6863      	ldr	r3, [r4, #4]
 8018486:	2b00      	cmp	r3, #0
 8018488:	dd68      	ble.n	801855c <__ssvfiscanf_r+0x21c>
 801848a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801848c:	0659      	lsls	r1, r3, #25
 801848e:	d407      	bmi.n	80184a0 <__ssvfiscanf_r+0x160>
 8018490:	f7ff f8bc 	bl	801760c <__locale_ctype_ptr>
 8018494:	6823      	ldr	r3, [r4, #0]
 8018496:	781a      	ldrb	r2, [r3, #0]
 8018498:	4410      	add	r0, r2
 801849a:	7842      	ldrb	r2, [r0, #1]
 801849c:	0712      	lsls	r2, r2, #28
 801849e:	d464      	bmi.n	801856a <__ssvfiscanf_r+0x22a>
 80184a0:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80184a2:	2b02      	cmp	r3, #2
 80184a4:	dc73      	bgt.n	801858e <__ssvfiscanf_r+0x24e>
 80184a6:	466b      	mov	r3, sp
 80184a8:	4622      	mov	r2, r4
 80184aa:	a941      	add	r1, sp, #260	; 0x104
 80184ac:	4630      	mov	r0, r6
 80184ae:	f000 f897 	bl	80185e0 <_scanf_chars>
 80184b2:	2801      	cmp	r0, #1
 80184b4:	f000 8089 	beq.w	80185ca <__ssvfiscanf_r+0x28a>
 80184b8:	2802      	cmp	r0, #2
 80184ba:	f47f af71 	bne.w	80183a0 <__ssvfiscanf_r+0x60>
 80184be:	e01d      	b.n	80184fc <__ssvfiscanf_r+0x1bc>
 80184c0:	2b75      	cmp	r3, #117	; 0x75
 80184c2:	d0d1      	beq.n	8018468 <__ssvfiscanf_r+0x128>
 80184c4:	2b78      	cmp	r3, #120	; 0x78
 80184c6:	d0c0      	beq.n	801844a <__ssvfiscanf_r+0x10a>
 80184c8:	2b73      	cmp	r3, #115	; 0x73
 80184ca:	d1af      	bne.n	801842c <__ssvfiscanf_r+0xec>
 80184cc:	2302      	movs	r3, #2
 80184ce:	e7d8      	b.n	8018482 <__ssvfiscanf_r+0x142>
 80184d0:	6863      	ldr	r3, [r4, #4]
 80184d2:	2b00      	cmp	r3, #0
 80184d4:	dd0c      	ble.n	80184f0 <__ssvfiscanf_r+0x1b0>
 80184d6:	6823      	ldr	r3, [r4, #0]
 80184d8:	781a      	ldrb	r2, [r3, #0]
 80184da:	455a      	cmp	r2, fp
 80184dc:	d175      	bne.n	80185ca <__ssvfiscanf_r+0x28a>
 80184de:	3301      	adds	r3, #1
 80184e0:	6862      	ldr	r2, [r4, #4]
 80184e2:	6023      	str	r3, [r4, #0]
 80184e4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80184e6:	3a01      	subs	r2, #1
 80184e8:	3301      	adds	r3, #1
 80184ea:	6062      	str	r2, [r4, #4]
 80184ec:	9345      	str	r3, [sp, #276]	; 0x114
 80184ee:	e757      	b.n	80183a0 <__ssvfiscanf_r+0x60>
 80184f0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80184f2:	4621      	mov	r1, r4
 80184f4:	4630      	mov	r0, r6
 80184f6:	4798      	blx	r3
 80184f8:	2800      	cmp	r0, #0
 80184fa:	d0ec      	beq.n	80184d6 <__ssvfiscanf_r+0x196>
 80184fc:	9844      	ldr	r0, [sp, #272]	; 0x110
 80184fe:	2800      	cmp	r0, #0
 8018500:	d159      	bne.n	80185b6 <__ssvfiscanf_r+0x276>
 8018502:	f04f 30ff 	mov.w	r0, #4294967295
 8018506:	e05c      	b.n	80185c2 <__ssvfiscanf_r+0x282>
 8018508:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801850a:	f042 0220 	orr.w	r2, r2, #32
 801850e:	9241      	str	r2, [sp, #260]	; 0x104
 8018510:	e79b      	b.n	801844a <__ssvfiscanf_r+0x10a>
 8018512:	2308      	movs	r3, #8
 8018514:	9342      	str	r3, [sp, #264]	; 0x108
 8018516:	2304      	movs	r3, #4
 8018518:	e7b3      	b.n	8018482 <__ssvfiscanf_r+0x142>
 801851a:	4629      	mov	r1, r5
 801851c:	4640      	mov	r0, r8
 801851e:	f000 f9c7 	bl	80188b0 <__sccl>
 8018522:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018528:	9341      	str	r3, [sp, #260]	; 0x104
 801852a:	4605      	mov	r5, r0
 801852c:	2301      	movs	r3, #1
 801852e:	e7a8      	b.n	8018482 <__ssvfiscanf_r+0x142>
 8018530:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018532:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018536:	9341      	str	r3, [sp, #260]	; 0x104
 8018538:	2300      	movs	r3, #0
 801853a:	e7a2      	b.n	8018482 <__ssvfiscanf_r+0x142>
 801853c:	9841      	ldr	r0, [sp, #260]	; 0x104
 801853e:	06c3      	lsls	r3, r0, #27
 8018540:	f53f af2e 	bmi.w	80183a0 <__ssvfiscanf_r+0x60>
 8018544:	9b00      	ldr	r3, [sp, #0]
 8018546:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018548:	1d19      	adds	r1, r3, #4
 801854a:	9100      	str	r1, [sp, #0]
 801854c:	681b      	ldr	r3, [r3, #0]
 801854e:	07c0      	lsls	r0, r0, #31
 8018550:	bf4c      	ite	mi
 8018552:	801a      	strhmi	r2, [r3, #0]
 8018554:	601a      	strpl	r2, [r3, #0]
 8018556:	e723      	b.n	80183a0 <__ssvfiscanf_r+0x60>
 8018558:	2305      	movs	r3, #5
 801855a:	e792      	b.n	8018482 <__ssvfiscanf_r+0x142>
 801855c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801855e:	4621      	mov	r1, r4
 8018560:	4630      	mov	r0, r6
 8018562:	4798      	blx	r3
 8018564:	2800      	cmp	r0, #0
 8018566:	d090      	beq.n	801848a <__ssvfiscanf_r+0x14a>
 8018568:	e7c8      	b.n	80184fc <__ssvfiscanf_r+0x1bc>
 801856a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801856c:	3201      	adds	r2, #1
 801856e:	9245      	str	r2, [sp, #276]	; 0x114
 8018570:	6862      	ldr	r2, [r4, #4]
 8018572:	3a01      	subs	r2, #1
 8018574:	2a00      	cmp	r2, #0
 8018576:	6062      	str	r2, [r4, #4]
 8018578:	dd02      	ble.n	8018580 <__ssvfiscanf_r+0x240>
 801857a:	3301      	adds	r3, #1
 801857c:	6023      	str	r3, [r4, #0]
 801857e:	e787      	b.n	8018490 <__ssvfiscanf_r+0x150>
 8018580:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018582:	4621      	mov	r1, r4
 8018584:	4630      	mov	r0, r6
 8018586:	4798      	blx	r3
 8018588:	2800      	cmp	r0, #0
 801858a:	d081      	beq.n	8018490 <__ssvfiscanf_r+0x150>
 801858c:	e7b6      	b.n	80184fc <__ssvfiscanf_r+0x1bc>
 801858e:	2b04      	cmp	r3, #4
 8018590:	dc06      	bgt.n	80185a0 <__ssvfiscanf_r+0x260>
 8018592:	466b      	mov	r3, sp
 8018594:	4622      	mov	r2, r4
 8018596:	a941      	add	r1, sp, #260	; 0x104
 8018598:	4630      	mov	r0, r6
 801859a:	f000 f885 	bl	80186a8 <_scanf_i>
 801859e:	e788      	b.n	80184b2 <__ssvfiscanf_r+0x172>
 80185a0:	4b0e      	ldr	r3, [pc, #56]	; (80185dc <__ssvfiscanf_r+0x29c>)
 80185a2:	2b00      	cmp	r3, #0
 80185a4:	f43f aefc 	beq.w	80183a0 <__ssvfiscanf_r+0x60>
 80185a8:	466b      	mov	r3, sp
 80185aa:	4622      	mov	r2, r4
 80185ac:	a941      	add	r1, sp, #260	; 0x104
 80185ae:	4630      	mov	r0, r6
 80185b0:	f7fc fd7e 	bl	80150b0 <_scanf_float>
 80185b4:	e77d      	b.n	80184b2 <__ssvfiscanf_r+0x172>
 80185b6:	89a3      	ldrh	r3, [r4, #12]
 80185b8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80185bc:	bf18      	it	ne
 80185be:	f04f 30ff 	movne.w	r0, #4294967295
 80185c2:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80185c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185ca:	9844      	ldr	r0, [sp, #272]	; 0x110
 80185cc:	e7f9      	b.n	80185c2 <__ssvfiscanf_r+0x282>
 80185ce:	bf00      	nop
 80185d0:	0801828d 	.word	0x0801828d
 80185d4:	08018307 	.word	0x08018307
 80185d8:	080195da 	.word	0x080195da
 80185dc:	080150b1 	.word	0x080150b1

080185e0 <_scanf_chars>:
 80185e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80185e4:	4615      	mov	r5, r2
 80185e6:	688a      	ldr	r2, [r1, #8]
 80185e8:	4680      	mov	r8, r0
 80185ea:	460c      	mov	r4, r1
 80185ec:	b932      	cbnz	r2, 80185fc <_scanf_chars+0x1c>
 80185ee:	698a      	ldr	r2, [r1, #24]
 80185f0:	2a00      	cmp	r2, #0
 80185f2:	bf14      	ite	ne
 80185f4:	f04f 32ff 	movne.w	r2, #4294967295
 80185f8:	2201      	moveq	r2, #1
 80185fa:	608a      	str	r2, [r1, #8]
 80185fc:	6822      	ldr	r2, [r4, #0]
 80185fe:	06d1      	lsls	r1, r2, #27
 8018600:	bf5f      	itttt	pl
 8018602:	681a      	ldrpl	r2, [r3, #0]
 8018604:	1d11      	addpl	r1, r2, #4
 8018606:	6019      	strpl	r1, [r3, #0]
 8018608:	6817      	ldrpl	r7, [r2, #0]
 801860a:	2600      	movs	r6, #0
 801860c:	69a3      	ldr	r3, [r4, #24]
 801860e:	b1db      	cbz	r3, 8018648 <_scanf_chars+0x68>
 8018610:	2b01      	cmp	r3, #1
 8018612:	d107      	bne.n	8018624 <_scanf_chars+0x44>
 8018614:	682b      	ldr	r3, [r5, #0]
 8018616:	6962      	ldr	r2, [r4, #20]
 8018618:	781b      	ldrb	r3, [r3, #0]
 801861a:	5cd3      	ldrb	r3, [r2, r3]
 801861c:	b9a3      	cbnz	r3, 8018648 <_scanf_chars+0x68>
 801861e:	2e00      	cmp	r6, #0
 8018620:	d132      	bne.n	8018688 <_scanf_chars+0xa8>
 8018622:	e006      	b.n	8018632 <_scanf_chars+0x52>
 8018624:	2b02      	cmp	r3, #2
 8018626:	d007      	beq.n	8018638 <_scanf_chars+0x58>
 8018628:	2e00      	cmp	r6, #0
 801862a:	d12d      	bne.n	8018688 <_scanf_chars+0xa8>
 801862c:	69a3      	ldr	r3, [r4, #24]
 801862e:	2b01      	cmp	r3, #1
 8018630:	d12a      	bne.n	8018688 <_scanf_chars+0xa8>
 8018632:	2001      	movs	r0, #1
 8018634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018638:	f7fe ffe8 	bl	801760c <__locale_ctype_ptr>
 801863c:	682b      	ldr	r3, [r5, #0]
 801863e:	781b      	ldrb	r3, [r3, #0]
 8018640:	4418      	add	r0, r3
 8018642:	7843      	ldrb	r3, [r0, #1]
 8018644:	071b      	lsls	r3, r3, #28
 8018646:	d4ef      	bmi.n	8018628 <_scanf_chars+0x48>
 8018648:	6823      	ldr	r3, [r4, #0]
 801864a:	06da      	lsls	r2, r3, #27
 801864c:	bf5e      	ittt	pl
 801864e:	682b      	ldrpl	r3, [r5, #0]
 8018650:	781b      	ldrbpl	r3, [r3, #0]
 8018652:	703b      	strbpl	r3, [r7, #0]
 8018654:	682a      	ldr	r2, [r5, #0]
 8018656:	686b      	ldr	r3, [r5, #4]
 8018658:	f102 0201 	add.w	r2, r2, #1
 801865c:	602a      	str	r2, [r5, #0]
 801865e:	68a2      	ldr	r2, [r4, #8]
 8018660:	f103 33ff 	add.w	r3, r3, #4294967295
 8018664:	f102 32ff 	add.w	r2, r2, #4294967295
 8018668:	606b      	str	r3, [r5, #4]
 801866a:	f106 0601 	add.w	r6, r6, #1
 801866e:	bf58      	it	pl
 8018670:	3701      	addpl	r7, #1
 8018672:	60a2      	str	r2, [r4, #8]
 8018674:	b142      	cbz	r2, 8018688 <_scanf_chars+0xa8>
 8018676:	2b00      	cmp	r3, #0
 8018678:	dcc8      	bgt.n	801860c <_scanf_chars+0x2c>
 801867a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801867e:	4629      	mov	r1, r5
 8018680:	4640      	mov	r0, r8
 8018682:	4798      	blx	r3
 8018684:	2800      	cmp	r0, #0
 8018686:	d0c1      	beq.n	801860c <_scanf_chars+0x2c>
 8018688:	6823      	ldr	r3, [r4, #0]
 801868a:	f013 0310 	ands.w	r3, r3, #16
 801868e:	d105      	bne.n	801869c <_scanf_chars+0xbc>
 8018690:	68e2      	ldr	r2, [r4, #12]
 8018692:	3201      	adds	r2, #1
 8018694:	60e2      	str	r2, [r4, #12]
 8018696:	69a2      	ldr	r2, [r4, #24]
 8018698:	b102      	cbz	r2, 801869c <_scanf_chars+0xbc>
 801869a:	703b      	strb	r3, [r7, #0]
 801869c:	6923      	ldr	r3, [r4, #16]
 801869e:	441e      	add	r6, r3
 80186a0:	6126      	str	r6, [r4, #16]
 80186a2:	2000      	movs	r0, #0
 80186a4:	e7c6      	b.n	8018634 <_scanf_chars+0x54>
	...

080186a8 <_scanf_i>:
 80186a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186ac:	469a      	mov	sl, r3
 80186ae:	4b74      	ldr	r3, [pc, #464]	; (8018880 <_scanf_i+0x1d8>)
 80186b0:	460c      	mov	r4, r1
 80186b2:	4683      	mov	fp, r0
 80186b4:	4616      	mov	r6, r2
 80186b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80186ba:	b087      	sub	sp, #28
 80186bc:	ab03      	add	r3, sp, #12
 80186be:	68a7      	ldr	r7, [r4, #8]
 80186c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80186c4:	4b6f      	ldr	r3, [pc, #444]	; (8018884 <_scanf_i+0x1dc>)
 80186c6:	69a1      	ldr	r1, [r4, #24]
 80186c8:	4a6f      	ldr	r2, [pc, #444]	; (8018888 <_scanf_i+0x1e0>)
 80186ca:	2903      	cmp	r1, #3
 80186cc:	bf08      	it	eq
 80186ce:	461a      	moveq	r2, r3
 80186d0:	1e7b      	subs	r3, r7, #1
 80186d2:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80186d6:	bf84      	itt	hi
 80186d8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80186dc:	60a3      	strhi	r3, [r4, #8]
 80186de:	6823      	ldr	r3, [r4, #0]
 80186e0:	9200      	str	r2, [sp, #0]
 80186e2:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80186e6:	bf88      	it	hi
 80186e8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80186ec:	f104 091c 	add.w	r9, r4, #28
 80186f0:	6023      	str	r3, [r4, #0]
 80186f2:	bf8c      	ite	hi
 80186f4:	197f      	addhi	r7, r7, r5
 80186f6:	2700      	movls	r7, #0
 80186f8:	464b      	mov	r3, r9
 80186fa:	f04f 0800 	mov.w	r8, #0
 80186fe:	9301      	str	r3, [sp, #4]
 8018700:	6831      	ldr	r1, [r6, #0]
 8018702:	ab03      	add	r3, sp, #12
 8018704:	2202      	movs	r2, #2
 8018706:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801870a:	7809      	ldrb	r1, [r1, #0]
 801870c:	f7e7 fd80 	bl	8000210 <memchr>
 8018710:	9b01      	ldr	r3, [sp, #4]
 8018712:	b330      	cbz	r0, 8018762 <_scanf_i+0xba>
 8018714:	f1b8 0f01 	cmp.w	r8, #1
 8018718:	d15a      	bne.n	80187d0 <_scanf_i+0x128>
 801871a:	6862      	ldr	r2, [r4, #4]
 801871c:	b92a      	cbnz	r2, 801872a <_scanf_i+0x82>
 801871e:	6822      	ldr	r2, [r4, #0]
 8018720:	2108      	movs	r1, #8
 8018722:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018726:	6061      	str	r1, [r4, #4]
 8018728:	6022      	str	r2, [r4, #0]
 801872a:	6822      	ldr	r2, [r4, #0]
 801872c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8018730:	6022      	str	r2, [r4, #0]
 8018732:	68a2      	ldr	r2, [r4, #8]
 8018734:	1e51      	subs	r1, r2, #1
 8018736:	60a1      	str	r1, [r4, #8]
 8018738:	b19a      	cbz	r2, 8018762 <_scanf_i+0xba>
 801873a:	6832      	ldr	r2, [r6, #0]
 801873c:	1c51      	adds	r1, r2, #1
 801873e:	6031      	str	r1, [r6, #0]
 8018740:	7812      	ldrb	r2, [r2, #0]
 8018742:	701a      	strb	r2, [r3, #0]
 8018744:	1c5d      	adds	r5, r3, #1
 8018746:	6873      	ldr	r3, [r6, #4]
 8018748:	3b01      	subs	r3, #1
 801874a:	2b00      	cmp	r3, #0
 801874c:	6073      	str	r3, [r6, #4]
 801874e:	dc07      	bgt.n	8018760 <_scanf_i+0xb8>
 8018750:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018754:	4631      	mov	r1, r6
 8018756:	4658      	mov	r0, fp
 8018758:	4798      	blx	r3
 801875a:	2800      	cmp	r0, #0
 801875c:	f040 8086 	bne.w	801886c <_scanf_i+0x1c4>
 8018760:	462b      	mov	r3, r5
 8018762:	f108 0801 	add.w	r8, r8, #1
 8018766:	f1b8 0f03 	cmp.w	r8, #3
 801876a:	d1c8      	bne.n	80186fe <_scanf_i+0x56>
 801876c:	6862      	ldr	r2, [r4, #4]
 801876e:	b90a      	cbnz	r2, 8018774 <_scanf_i+0xcc>
 8018770:	220a      	movs	r2, #10
 8018772:	6062      	str	r2, [r4, #4]
 8018774:	6862      	ldr	r2, [r4, #4]
 8018776:	4945      	ldr	r1, [pc, #276]	; (801888c <_scanf_i+0x1e4>)
 8018778:	6960      	ldr	r0, [r4, #20]
 801877a:	9301      	str	r3, [sp, #4]
 801877c:	1a89      	subs	r1, r1, r2
 801877e:	f000 f897 	bl	80188b0 <__sccl>
 8018782:	9b01      	ldr	r3, [sp, #4]
 8018784:	f04f 0800 	mov.w	r8, #0
 8018788:	461d      	mov	r5, r3
 801878a:	68a3      	ldr	r3, [r4, #8]
 801878c:	6822      	ldr	r2, [r4, #0]
 801878e:	2b00      	cmp	r3, #0
 8018790:	d03a      	beq.n	8018808 <_scanf_i+0x160>
 8018792:	6831      	ldr	r1, [r6, #0]
 8018794:	6960      	ldr	r0, [r4, #20]
 8018796:	f891 c000 	ldrb.w	ip, [r1]
 801879a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801879e:	2800      	cmp	r0, #0
 80187a0:	d032      	beq.n	8018808 <_scanf_i+0x160>
 80187a2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80187a6:	d121      	bne.n	80187ec <_scanf_i+0x144>
 80187a8:	0510      	lsls	r0, r2, #20
 80187aa:	d51f      	bpl.n	80187ec <_scanf_i+0x144>
 80187ac:	f108 0801 	add.w	r8, r8, #1
 80187b0:	b117      	cbz	r7, 80187b8 <_scanf_i+0x110>
 80187b2:	3301      	adds	r3, #1
 80187b4:	3f01      	subs	r7, #1
 80187b6:	60a3      	str	r3, [r4, #8]
 80187b8:	6873      	ldr	r3, [r6, #4]
 80187ba:	3b01      	subs	r3, #1
 80187bc:	2b00      	cmp	r3, #0
 80187be:	6073      	str	r3, [r6, #4]
 80187c0:	dd1b      	ble.n	80187fa <_scanf_i+0x152>
 80187c2:	6833      	ldr	r3, [r6, #0]
 80187c4:	3301      	adds	r3, #1
 80187c6:	6033      	str	r3, [r6, #0]
 80187c8:	68a3      	ldr	r3, [r4, #8]
 80187ca:	3b01      	subs	r3, #1
 80187cc:	60a3      	str	r3, [r4, #8]
 80187ce:	e7dc      	b.n	801878a <_scanf_i+0xe2>
 80187d0:	f1b8 0f02 	cmp.w	r8, #2
 80187d4:	d1ad      	bne.n	8018732 <_scanf_i+0x8a>
 80187d6:	6822      	ldr	r2, [r4, #0]
 80187d8:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80187dc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80187e0:	d1bf      	bne.n	8018762 <_scanf_i+0xba>
 80187e2:	2110      	movs	r1, #16
 80187e4:	6061      	str	r1, [r4, #4]
 80187e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80187ea:	e7a1      	b.n	8018730 <_scanf_i+0x88>
 80187ec:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80187f0:	6022      	str	r2, [r4, #0]
 80187f2:	780b      	ldrb	r3, [r1, #0]
 80187f4:	702b      	strb	r3, [r5, #0]
 80187f6:	3501      	adds	r5, #1
 80187f8:	e7de      	b.n	80187b8 <_scanf_i+0x110>
 80187fa:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80187fe:	4631      	mov	r1, r6
 8018800:	4658      	mov	r0, fp
 8018802:	4798      	blx	r3
 8018804:	2800      	cmp	r0, #0
 8018806:	d0df      	beq.n	80187c8 <_scanf_i+0x120>
 8018808:	6823      	ldr	r3, [r4, #0]
 801880a:	05d9      	lsls	r1, r3, #23
 801880c:	d50c      	bpl.n	8018828 <_scanf_i+0x180>
 801880e:	454d      	cmp	r5, r9
 8018810:	d908      	bls.n	8018824 <_scanf_i+0x17c>
 8018812:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8018816:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801881a:	4632      	mov	r2, r6
 801881c:	4658      	mov	r0, fp
 801881e:	4798      	blx	r3
 8018820:	1e6f      	subs	r7, r5, #1
 8018822:	463d      	mov	r5, r7
 8018824:	454d      	cmp	r5, r9
 8018826:	d029      	beq.n	801887c <_scanf_i+0x1d4>
 8018828:	6822      	ldr	r2, [r4, #0]
 801882a:	f012 0210 	ands.w	r2, r2, #16
 801882e:	d113      	bne.n	8018858 <_scanf_i+0x1b0>
 8018830:	702a      	strb	r2, [r5, #0]
 8018832:	6863      	ldr	r3, [r4, #4]
 8018834:	9e00      	ldr	r6, [sp, #0]
 8018836:	4649      	mov	r1, r9
 8018838:	4658      	mov	r0, fp
 801883a:	47b0      	blx	r6
 801883c:	f8da 3000 	ldr.w	r3, [sl]
 8018840:	6821      	ldr	r1, [r4, #0]
 8018842:	1d1a      	adds	r2, r3, #4
 8018844:	f8ca 2000 	str.w	r2, [sl]
 8018848:	f011 0f20 	tst.w	r1, #32
 801884c:	681b      	ldr	r3, [r3, #0]
 801884e:	d010      	beq.n	8018872 <_scanf_i+0x1ca>
 8018850:	6018      	str	r0, [r3, #0]
 8018852:	68e3      	ldr	r3, [r4, #12]
 8018854:	3301      	adds	r3, #1
 8018856:	60e3      	str	r3, [r4, #12]
 8018858:	eba5 0509 	sub.w	r5, r5, r9
 801885c:	44a8      	add	r8, r5
 801885e:	6925      	ldr	r5, [r4, #16]
 8018860:	4445      	add	r5, r8
 8018862:	6125      	str	r5, [r4, #16]
 8018864:	2000      	movs	r0, #0
 8018866:	b007      	add	sp, #28
 8018868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801886c:	f04f 0800 	mov.w	r8, #0
 8018870:	e7ca      	b.n	8018808 <_scanf_i+0x160>
 8018872:	07ca      	lsls	r2, r1, #31
 8018874:	bf4c      	ite	mi
 8018876:	8018      	strhmi	r0, [r3, #0]
 8018878:	6018      	strpl	r0, [r3, #0]
 801887a:	e7ea      	b.n	8018852 <_scanf_i+0x1aa>
 801887c:	2001      	movs	r0, #1
 801887e:	e7f2      	b.n	8018866 <_scanf_i+0x1be>
 8018880:	08019138 	.word	0x08019138
 8018884:	080162c9 	.word	0x080162c9
 8018888:	08018a2d 	.word	0x08018a2d
 801888c:	080195f5 	.word	0x080195f5

08018890 <_sbrk_r>:
 8018890:	b538      	push	{r3, r4, r5, lr}
 8018892:	4c06      	ldr	r4, [pc, #24]	; (80188ac <_sbrk_r+0x1c>)
 8018894:	2300      	movs	r3, #0
 8018896:	4605      	mov	r5, r0
 8018898:	4608      	mov	r0, r1
 801889a:	6023      	str	r3, [r4, #0]
 801889c:	f7ee fbb4 	bl	8007008 <_sbrk>
 80188a0:	1c43      	adds	r3, r0, #1
 80188a2:	d102      	bne.n	80188aa <_sbrk_r+0x1a>
 80188a4:	6823      	ldr	r3, [r4, #0]
 80188a6:	b103      	cbz	r3, 80188aa <_sbrk_r+0x1a>
 80188a8:	602b      	str	r3, [r5, #0]
 80188aa:	bd38      	pop	{r3, r4, r5, pc}
 80188ac:	20040e6c 	.word	0x20040e6c

080188b0 <__sccl>:
 80188b0:	b570      	push	{r4, r5, r6, lr}
 80188b2:	780b      	ldrb	r3, [r1, #0]
 80188b4:	2b5e      	cmp	r3, #94	; 0x5e
 80188b6:	bf13      	iteet	ne
 80188b8:	1c4a      	addne	r2, r1, #1
 80188ba:	1c8a      	addeq	r2, r1, #2
 80188bc:	784b      	ldrbeq	r3, [r1, #1]
 80188be:	2100      	movne	r1, #0
 80188c0:	bf08      	it	eq
 80188c2:	2101      	moveq	r1, #1
 80188c4:	1e44      	subs	r4, r0, #1
 80188c6:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80188ca:	f804 1f01 	strb.w	r1, [r4, #1]!
 80188ce:	42ac      	cmp	r4, r5
 80188d0:	d1fb      	bne.n	80188ca <__sccl+0x1a>
 80188d2:	b913      	cbnz	r3, 80188da <__sccl+0x2a>
 80188d4:	3a01      	subs	r2, #1
 80188d6:	4610      	mov	r0, r2
 80188d8:	bd70      	pop	{r4, r5, r6, pc}
 80188da:	f081 0401 	eor.w	r4, r1, #1
 80188de:	54c4      	strb	r4, [r0, r3]
 80188e0:	1c51      	adds	r1, r2, #1
 80188e2:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80188e6:	2d2d      	cmp	r5, #45	; 0x2d
 80188e8:	f101 36ff 	add.w	r6, r1, #4294967295
 80188ec:	460a      	mov	r2, r1
 80188ee:	d006      	beq.n	80188fe <__sccl+0x4e>
 80188f0:	2d5d      	cmp	r5, #93	; 0x5d
 80188f2:	d0f0      	beq.n	80188d6 <__sccl+0x26>
 80188f4:	b90d      	cbnz	r5, 80188fa <__sccl+0x4a>
 80188f6:	4632      	mov	r2, r6
 80188f8:	e7ed      	b.n	80188d6 <__sccl+0x26>
 80188fa:	462b      	mov	r3, r5
 80188fc:	e7ef      	b.n	80188de <__sccl+0x2e>
 80188fe:	780e      	ldrb	r6, [r1, #0]
 8018900:	2e5d      	cmp	r6, #93	; 0x5d
 8018902:	d0fa      	beq.n	80188fa <__sccl+0x4a>
 8018904:	42b3      	cmp	r3, r6
 8018906:	dcf8      	bgt.n	80188fa <__sccl+0x4a>
 8018908:	3301      	adds	r3, #1
 801890a:	429e      	cmp	r6, r3
 801890c:	54c4      	strb	r4, [r0, r3]
 801890e:	dcfb      	bgt.n	8018908 <__sccl+0x58>
 8018910:	3102      	adds	r1, #2
 8018912:	e7e6      	b.n	80188e2 <__sccl+0x32>

08018914 <strncmp>:
 8018914:	b510      	push	{r4, lr}
 8018916:	b16a      	cbz	r2, 8018934 <strncmp+0x20>
 8018918:	3901      	subs	r1, #1
 801891a:	1884      	adds	r4, r0, r2
 801891c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8018920:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8018924:	4293      	cmp	r3, r2
 8018926:	d103      	bne.n	8018930 <strncmp+0x1c>
 8018928:	42a0      	cmp	r0, r4
 801892a:	d001      	beq.n	8018930 <strncmp+0x1c>
 801892c:	2b00      	cmp	r3, #0
 801892e:	d1f5      	bne.n	801891c <strncmp+0x8>
 8018930:	1a98      	subs	r0, r3, r2
 8018932:	bd10      	pop	{r4, pc}
 8018934:	4610      	mov	r0, r2
 8018936:	e7fc      	b.n	8018932 <strncmp+0x1e>

08018938 <_strtoul_l.isra.0>:
 8018938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801893c:	4680      	mov	r8, r0
 801893e:	4689      	mov	r9, r1
 8018940:	4692      	mov	sl, r2
 8018942:	461e      	mov	r6, r3
 8018944:	460f      	mov	r7, r1
 8018946:	463d      	mov	r5, r7
 8018948:	9808      	ldr	r0, [sp, #32]
 801894a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801894e:	f7fe fe59 	bl	8017604 <__locale_ctype_ptr_l>
 8018952:	4420      	add	r0, r4
 8018954:	7843      	ldrb	r3, [r0, #1]
 8018956:	f013 0308 	ands.w	r3, r3, #8
 801895a:	d130      	bne.n	80189be <_strtoul_l.isra.0+0x86>
 801895c:	2c2d      	cmp	r4, #45	; 0x2d
 801895e:	d130      	bne.n	80189c2 <_strtoul_l.isra.0+0x8a>
 8018960:	787c      	ldrb	r4, [r7, #1]
 8018962:	1cbd      	adds	r5, r7, #2
 8018964:	2101      	movs	r1, #1
 8018966:	2e00      	cmp	r6, #0
 8018968:	d05c      	beq.n	8018a24 <_strtoul_l.isra.0+0xec>
 801896a:	2e10      	cmp	r6, #16
 801896c:	d109      	bne.n	8018982 <_strtoul_l.isra.0+0x4a>
 801896e:	2c30      	cmp	r4, #48	; 0x30
 8018970:	d107      	bne.n	8018982 <_strtoul_l.isra.0+0x4a>
 8018972:	782b      	ldrb	r3, [r5, #0]
 8018974:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018978:	2b58      	cmp	r3, #88	; 0x58
 801897a:	d14e      	bne.n	8018a1a <_strtoul_l.isra.0+0xe2>
 801897c:	786c      	ldrb	r4, [r5, #1]
 801897e:	2610      	movs	r6, #16
 8018980:	3502      	adds	r5, #2
 8018982:	f04f 32ff 	mov.w	r2, #4294967295
 8018986:	2300      	movs	r3, #0
 8018988:	fbb2 f2f6 	udiv	r2, r2, r6
 801898c:	fb06 fc02 	mul.w	ip, r6, r2
 8018990:	ea6f 0c0c 	mvn.w	ip, ip
 8018994:	4618      	mov	r0, r3
 8018996:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801899a:	2f09      	cmp	r7, #9
 801899c:	d817      	bhi.n	80189ce <_strtoul_l.isra.0+0x96>
 801899e:	463c      	mov	r4, r7
 80189a0:	42a6      	cmp	r6, r4
 80189a2:	dd23      	ble.n	80189ec <_strtoul_l.isra.0+0xb4>
 80189a4:	2b00      	cmp	r3, #0
 80189a6:	db1e      	blt.n	80189e6 <_strtoul_l.isra.0+0xae>
 80189a8:	4282      	cmp	r2, r0
 80189aa:	d31c      	bcc.n	80189e6 <_strtoul_l.isra.0+0xae>
 80189ac:	d101      	bne.n	80189b2 <_strtoul_l.isra.0+0x7a>
 80189ae:	45a4      	cmp	ip, r4
 80189b0:	db19      	blt.n	80189e6 <_strtoul_l.isra.0+0xae>
 80189b2:	fb00 4006 	mla	r0, r0, r6, r4
 80189b6:	2301      	movs	r3, #1
 80189b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80189bc:	e7eb      	b.n	8018996 <_strtoul_l.isra.0+0x5e>
 80189be:	462f      	mov	r7, r5
 80189c0:	e7c1      	b.n	8018946 <_strtoul_l.isra.0+0xe>
 80189c2:	2c2b      	cmp	r4, #43	; 0x2b
 80189c4:	bf04      	itt	eq
 80189c6:	1cbd      	addeq	r5, r7, #2
 80189c8:	787c      	ldrbeq	r4, [r7, #1]
 80189ca:	4619      	mov	r1, r3
 80189cc:	e7cb      	b.n	8018966 <_strtoul_l.isra.0+0x2e>
 80189ce:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80189d2:	2f19      	cmp	r7, #25
 80189d4:	d801      	bhi.n	80189da <_strtoul_l.isra.0+0xa2>
 80189d6:	3c37      	subs	r4, #55	; 0x37
 80189d8:	e7e2      	b.n	80189a0 <_strtoul_l.isra.0+0x68>
 80189da:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80189de:	2f19      	cmp	r7, #25
 80189e0:	d804      	bhi.n	80189ec <_strtoul_l.isra.0+0xb4>
 80189e2:	3c57      	subs	r4, #87	; 0x57
 80189e4:	e7dc      	b.n	80189a0 <_strtoul_l.isra.0+0x68>
 80189e6:	f04f 33ff 	mov.w	r3, #4294967295
 80189ea:	e7e5      	b.n	80189b8 <_strtoul_l.isra.0+0x80>
 80189ec:	2b00      	cmp	r3, #0
 80189ee:	da09      	bge.n	8018a04 <_strtoul_l.isra.0+0xcc>
 80189f0:	2322      	movs	r3, #34	; 0x22
 80189f2:	f8c8 3000 	str.w	r3, [r8]
 80189f6:	f04f 30ff 	mov.w	r0, #4294967295
 80189fa:	f1ba 0f00 	cmp.w	sl, #0
 80189fe:	d107      	bne.n	8018a10 <_strtoul_l.isra.0+0xd8>
 8018a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018a04:	b101      	cbz	r1, 8018a08 <_strtoul_l.isra.0+0xd0>
 8018a06:	4240      	negs	r0, r0
 8018a08:	f1ba 0f00 	cmp.w	sl, #0
 8018a0c:	d0f8      	beq.n	8018a00 <_strtoul_l.isra.0+0xc8>
 8018a0e:	b10b      	cbz	r3, 8018a14 <_strtoul_l.isra.0+0xdc>
 8018a10:	f105 39ff 	add.w	r9, r5, #4294967295
 8018a14:	f8ca 9000 	str.w	r9, [sl]
 8018a18:	e7f2      	b.n	8018a00 <_strtoul_l.isra.0+0xc8>
 8018a1a:	2430      	movs	r4, #48	; 0x30
 8018a1c:	2e00      	cmp	r6, #0
 8018a1e:	d1b0      	bne.n	8018982 <_strtoul_l.isra.0+0x4a>
 8018a20:	2608      	movs	r6, #8
 8018a22:	e7ae      	b.n	8018982 <_strtoul_l.isra.0+0x4a>
 8018a24:	2c30      	cmp	r4, #48	; 0x30
 8018a26:	d0a4      	beq.n	8018972 <_strtoul_l.isra.0+0x3a>
 8018a28:	260a      	movs	r6, #10
 8018a2a:	e7aa      	b.n	8018982 <_strtoul_l.isra.0+0x4a>

08018a2c <_strtoul_r>:
 8018a2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018a2e:	4c06      	ldr	r4, [pc, #24]	; (8018a48 <_strtoul_r+0x1c>)
 8018a30:	4d06      	ldr	r5, [pc, #24]	; (8018a4c <_strtoul_r+0x20>)
 8018a32:	6824      	ldr	r4, [r4, #0]
 8018a34:	6a24      	ldr	r4, [r4, #32]
 8018a36:	2c00      	cmp	r4, #0
 8018a38:	bf08      	it	eq
 8018a3a:	462c      	moveq	r4, r5
 8018a3c:	9400      	str	r4, [sp, #0]
 8018a3e:	f7ff ff7b 	bl	8018938 <_strtoul_l.isra.0>
 8018a42:	b003      	add	sp, #12
 8018a44:	bd30      	pop	{r4, r5, pc}
 8018a46:	bf00      	nop
 8018a48:	2000000c 	.word	0x2000000c
 8018a4c:	20000070 	.word	0x20000070

08018a50 <__submore>:
 8018a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018a54:	460c      	mov	r4, r1
 8018a56:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8018a58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018a5c:	4299      	cmp	r1, r3
 8018a5e:	d11d      	bne.n	8018a9c <__submore+0x4c>
 8018a60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8018a64:	f7ff fa66 	bl	8017f34 <_malloc_r>
 8018a68:	b918      	cbnz	r0, 8018a72 <__submore+0x22>
 8018a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8018a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018a76:	63a3      	str	r3, [r4, #56]	; 0x38
 8018a78:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8018a7c:	6360      	str	r0, [r4, #52]	; 0x34
 8018a7e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8018a82:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8018a86:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8018a8a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8018a8e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8018a92:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8018a96:	6020      	str	r0, [r4, #0]
 8018a98:	2000      	movs	r0, #0
 8018a9a:	e7e8      	b.n	8018a6e <__submore+0x1e>
 8018a9c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8018a9e:	0077      	lsls	r7, r6, #1
 8018aa0:	463a      	mov	r2, r7
 8018aa2:	f000 f837 	bl	8018b14 <_realloc_r>
 8018aa6:	4605      	mov	r5, r0
 8018aa8:	2800      	cmp	r0, #0
 8018aaa:	d0de      	beq.n	8018a6a <__submore+0x1a>
 8018aac:	eb00 0806 	add.w	r8, r0, r6
 8018ab0:	4601      	mov	r1, r0
 8018ab2:	4632      	mov	r2, r6
 8018ab4:	4640      	mov	r0, r8
 8018ab6:	f7fb fe8b 	bl	80147d0 <memcpy>
 8018aba:	f8c4 8000 	str.w	r8, [r4]
 8018abe:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8018ac2:	e7e9      	b.n	8018a98 <__submore+0x48>

08018ac4 <__ascii_wctomb>:
 8018ac4:	b149      	cbz	r1, 8018ada <__ascii_wctomb+0x16>
 8018ac6:	2aff      	cmp	r2, #255	; 0xff
 8018ac8:	bf85      	ittet	hi
 8018aca:	238a      	movhi	r3, #138	; 0x8a
 8018acc:	6003      	strhi	r3, [r0, #0]
 8018ace:	700a      	strbls	r2, [r1, #0]
 8018ad0:	f04f 30ff 	movhi.w	r0, #4294967295
 8018ad4:	bf98      	it	ls
 8018ad6:	2001      	movls	r0, #1
 8018ad8:	4770      	bx	lr
 8018ada:	4608      	mov	r0, r1
 8018adc:	4770      	bx	lr

08018ade <memmove>:
 8018ade:	4288      	cmp	r0, r1
 8018ae0:	b510      	push	{r4, lr}
 8018ae2:	eb01 0302 	add.w	r3, r1, r2
 8018ae6:	d807      	bhi.n	8018af8 <memmove+0x1a>
 8018ae8:	1e42      	subs	r2, r0, #1
 8018aea:	4299      	cmp	r1, r3
 8018aec:	d00a      	beq.n	8018b04 <memmove+0x26>
 8018aee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018af2:	f802 4f01 	strb.w	r4, [r2, #1]!
 8018af6:	e7f8      	b.n	8018aea <memmove+0xc>
 8018af8:	4283      	cmp	r3, r0
 8018afa:	d9f5      	bls.n	8018ae8 <memmove+0xa>
 8018afc:	1881      	adds	r1, r0, r2
 8018afe:	1ad2      	subs	r2, r2, r3
 8018b00:	42d3      	cmn	r3, r2
 8018b02:	d100      	bne.n	8018b06 <memmove+0x28>
 8018b04:	bd10      	pop	{r4, pc}
 8018b06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018b0a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8018b0e:	e7f7      	b.n	8018b00 <memmove+0x22>

08018b10 <__malloc_lock>:
 8018b10:	4770      	bx	lr

08018b12 <__malloc_unlock>:
 8018b12:	4770      	bx	lr

08018b14 <_realloc_r>:
 8018b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b16:	4607      	mov	r7, r0
 8018b18:	4614      	mov	r4, r2
 8018b1a:	460e      	mov	r6, r1
 8018b1c:	b921      	cbnz	r1, 8018b28 <_realloc_r+0x14>
 8018b1e:	4611      	mov	r1, r2
 8018b20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018b24:	f7ff ba06 	b.w	8017f34 <_malloc_r>
 8018b28:	b922      	cbnz	r2, 8018b34 <_realloc_r+0x20>
 8018b2a:	f7ff f9b5 	bl	8017e98 <_free_r>
 8018b2e:	4625      	mov	r5, r4
 8018b30:	4628      	mov	r0, r5
 8018b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018b34:	f000 f814 	bl	8018b60 <_malloc_usable_size_r>
 8018b38:	42a0      	cmp	r0, r4
 8018b3a:	d20f      	bcs.n	8018b5c <_realloc_r+0x48>
 8018b3c:	4621      	mov	r1, r4
 8018b3e:	4638      	mov	r0, r7
 8018b40:	f7ff f9f8 	bl	8017f34 <_malloc_r>
 8018b44:	4605      	mov	r5, r0
 8018b46:	2800      	cmp	r0, #0
 8018b48:	d0f2      	beq.n	8018b30 <_realloc_r+0x1c>
 8018b4a:	4631      	mov	r1, r6
 8018b4c:	4622      	mov	r2, r4
 8018b4e:	f7fb fe3f 	bl	80147d0 <memcpy>
 8018b52:	4631      	mov	r1, r6
 8018b54:	4638      	mov	r0, r7
 8018b56:	f7ff f99f 	bl	8017e98 <_free_r>
 8018b5a:	e7e9      	b.n	8018b30 <_realloc_r+0x1c>
 8018b5c:	4635      	mov	r5, r6
 8018b5e:	e7e7      	b.n	8018b30 <_realloc_r+0x1c>

08018b60 <_malloc_usable_size_r>:
 8018b60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018b64:	1f18      	subs	r0, r3, #4
 8018b66:	2b00      	cmp	r3, #0
 8018b68:	bfbc      	itt	lt
 8018b6a:	580b      	ldrlt	r3, [r1, r0]
 8018b6c:	18c0      	addlt	r0, r0, r3
 8018b6e:	4770      	bx	lr

08018b70 <_init>:
 8018b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b72:	bf00      	nop
 8018b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018b76:	bc08      	pop	{r3}
 8018b78:	469e      	mov	lr, r3
 8018b7a:	4770      	bx	lr

08018b7c <_fini>:
 8018b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b7e:	bf00      	nop
 8018b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018b82:	bc08      	pop	{r3}
 8018b84:	469e      	mov	lr, r3
 8018b86:	4770      	bx	lr
