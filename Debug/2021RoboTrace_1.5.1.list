
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017ed8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b0c  08018098  08018098  00028098  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018ba4  08018ba4  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08018ba4  08018ba4  00028ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018bac  08018bac  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08018bac  08018bac  00028bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018bb4  08018bb4  00028bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08018bb8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00037de0  200001e0  08018d94  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20037fc0  08018d94  00037fc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000384bb  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007ae6  00000000  00000000  000686c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002238  00000000  00000000  000701b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001f68  00000000  00000000  000723e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003777e  00000000  00000000  00074350  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00025d48  00000000  00000000  000abace  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00110c4c  00000000  00000000  000d1816  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e2462  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a6a4  00000000  00000000  001e24e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08018080 	.word	0x08018080

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08018080 	.word	0x08018080

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f007 ffa4 	bl	8008f24 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20035ab4 	.word	0x20035ab4

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f007 ff8c 	bl	8008f24 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20035ab4 	.word	0x20035ab4

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f007 fe15 	bl	8008c50 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f006 fb7c 	bl	8007724 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f006 fb76 	bl	8007724 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f006 fb70 	bl	8007724 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f006 fb6a 	bl	8007724 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f006 fb64 	bl	8007724 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f006 fb5e 	bl	8007724 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f006 fb58 	bl	8007724 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f006 fb52 	bl	8007724 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f006 fb4c 	bl	8007724 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f006 fb46 	bl	8007724 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f006 fb3a 	bl	8007724 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f006 fb34 	bl	8007724 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f013 ff01 	bl	8014f30 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), total_distance_(0), cross_line_ignore_distance_(0){}
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	615a      	str	r2, [r3, #20]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f04f 0200 	mov.w	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4618      	mov	r0, r3
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
	...

080011a4 <_ZN7Encoder4initEv>:

void Encoder::init()
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80011ac:	213c      	movs	r1, #60	; 0x3c
 80011ae:	4809      	ldr	r0, [pc, #36]	; (80011d4 <_ZN7Encoder4initEv+0x30>)
 80011b0:	f00b fd50 	bl	800cc54 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 80011b4:	213c      	movs	r1, #60	; 0x3c
 80011b6:	4808      	ldr	r0, [pc, #32]	; (80011d8 <_ZN7Encoder4initEv+0x34>)
 80011b8:	f00b fd4c 	bl	800cc54 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 80011bc:	4b07      	ldr	r3, [pc, #28]	; (80011dc <_ZN7Encoder4initEv+0x38>)
 80011be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011c2:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80011c4:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <_ZN7Encoder4initEv+0x3c>)
 80011c6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011ca:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20035d08 	.word	0x20035d08
 80011d8:	200359ec 	.word	0x200359ec
 80011dc:	40010000 	.word	0x40010000
 80011e0:	40010400 	.word	0x40010400
 80011e4:	00000000 	.word	0x00000000

080011e8 <_ZN7Encoder9updateCntEv>:

void Encoder::updateCnt()
{
 80011e8:	b5b0      	push	{r4, r5, r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 80011f0:	4b6f      	ldr	r3, [pc, #444]	; (80013b0 <_ZN7Encoder9updateCntEv+0x1c8>)
 80011f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f4:	ee07 3a90 	vmov	s15, r3
 80011f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011fc:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80013b4 <_ZN7Encoder9updateCntEv+0x1cc>
 8001200:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001204:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80013b8 <_ZN7Encoder9updateCntEv+0x1d0>
 8001208:	ee67 7a87 	vmul.f32	s15, s15, s14
 800120c:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001210:	4b6a      	ldr	r3, [pc, #424]	; (80013bc <_ZN7Encoder9updateCntEv+0x1d4>)
 8001212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001214:	ee07 3a90 	vmov	s15, r3
 8001218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800121c:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80013b4 <_ZN7Encoder9updateCntEv+0x1cc>
 8001220:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001224:	ed9f 7a64 	vldr	s14, [pc, #400]	; 80013b8 <_ZN7Encoder9updateCntEv+0x1d0>
 8001228:	ee67 7a87 	vmul.f32	s15, s15, s14
 800122c:	edc7 7a02 	vstr	s15, [r7, #8]
	monitor_cnt_l = cnt_l;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	4a63      	ldr	r2, [pc, #396]	; (80013c0 <_ZN7Encoder9updateCntEv+0x1d8>)
 8001234:	6013      	str	r3, [r2, #0]

	cnt_l_ = ((R_ENC)*(cnt_l) + (1.0 - (R_ENC))* (pre_cnt_l)); // lowpath filter
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff f99d 	bl	8000578 <__aeabi_f2d>
 800123e:	a356      	add	r3, pc, #344	; (adr r3, 8001398 <_ZN7Encoder9updateCntEv+0x1b0>)
 8001240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001244:	f7ff f9f0 	bl	8000628 <__aeabi_dmul>
 8001248:	4603      	mov	r3, r0
 800124a:	460c      	mov	r4, r1
 800124c:	4625      	mov	r5, r4
 800124e:	461c      	mov	r4, r3
 8001250:	4b5c      	ldr	r3, [pc, #368]	; (80013c4 <_ZN7Encoder9updateCntEv+0x1dc>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff f98f 	bl	8000578 <__aeabi_f2d>
 800125a:	a351      	add	r3, pc, #324	; (adr r3, 80013a0 <_ZN7Encoder9updateCntEv+0x1b8>)
 800125c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001260:	f7ff f9e2 	bl	8000628 <__aeabi_dmul>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4620      	mov	r0, r4
 800126a:	4629      	mov	r1, r5
 800126c:	f7ff f826 	bl	80002bc <__adddf3>
 8001270:	4603      	mov	r3, r0
 8001272:	460c      	mov	r4, r1
 8001274:	4618      	mov	r0, r3
 8001276:	4621      	mov	r1, r4
 8001278:	f7ff fcce 	bl	8000c18 <__aeabi_d2f>
 800127c:	4602      	mov	r2, r0
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	601a      	str	r2, [r3, #0]
	cnt_r_ = ((R_ENC)*(cnt_r) + (1.0 - (R_ENC))* (pre_cnt_r)); // lowpath filter
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff f977 	bl	8000578 <__aeabi_f2d>
 800128a:	a343      	add	r3, pc, #268	; (adr r3, 8001398 <_ZN7Encoder9updateCntEv+0x1b0>)
 800128c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001290:	f7ff f9ca 	bl	8000628 <__aeabi_dmul>
 8001294:	4603      	mov	r3, r0
 8001296:	460c      	mov	r4, r1
 8001298:	4625      	mov	r5, r4
 800129a:	461c      	mov	r4, r3
 800129c:	4b4a      	ldr	r3, [pc, #296]	; (80013c8 <_ZN7Encoder9updateCntEv+0x1e0>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff f969 	bl	8000578 <__aeabi_f2d>
 80012a6:	a33e      	add	r3, pc, #248	; (adr r3, 80013a0 <_ZN7Encoder9updateCntEv+0x1b8>)
 80012a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ac:	f7ff f9bc 	bl	8000628 <__aeabi_dmul>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	4620      	mov	r0, r4
 80012b6:	4629      	mov	r1, r5
 80012b8:	f7ff f800 	bl	80002bc <__adddf3>
 80012bc:	4603      	mov	r3, r0
 80012be:	460c      	mov	r4, r1
 80012c0:	4618      	mov	r0, r3
 80012c2:	4621      	mov	r1, r4
 80012c4:	f7ff fca8 	bl	8000c18 <__aeabi_d2f>
 80012c8:	4602      	mov	r2, r0
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	605a      	str	r2, [r3, #4]
	monitor_cnt_l_lpf = cnt_l_;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a3e      	ldr	r2, [pc, #248]	; (80013cc <_ZN7Encoder9updateCntEv+0x1e4>)
 80012d4:	6013      	str	r3, [r2, #0]

	pre_cnt_l = cnt_l_;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a3a      	ldr	r2, [pc, #232]	; (80013c4 <_ZN7Encoder9updateCntEv+0x1dc>)
 80012dc:	6013      	str	r3, [r2, #0]
	pre_cnt_r = cnt_r_;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	4a39      	ldr	r2, [pc, #228]	; (80013c8 <_ZN7Encoder9updateCntEv+0x1e0>)
 80012e4:	6013      	str	r3, [r2, #0]


	total_cnt_l_ += cnt_l_;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	ed93 7a03 	vldr	s14, [r3, #12]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	edd3 7a00 	vldr	s15, [r3]
 80012f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	edc3 7a03 	vstr	s15, [r3, #12]
	total_cnt_r_ += cnt_r_;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	ed93 7a04 	vldr	s14, [r3, #16]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	edd3 7a01 	vldr	s15, [r3, #4]
 8001308:	ee77 7a27 	vadd.f32	s15, s14, s15
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	edc3 7a04 	vstr	s15, [r3, #16]

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	ed93 7a00 	vldr	s14, [r3]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	edd3 7a01 	vldr	s15, [r3, #4]
 800131e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001322:	ee17 0a90 	vmov	r0, s15
 8001326:	f7ff f927 	bl	8000578 <__aeabi_f2d>
 800132a:	a31f      	add	r3, pc, #124	; (adr r3, 80013a8 <_ZN7Encoder9updateCntEv+0x1c0>)
 800132c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001330:	f7ff f97a 	bl	8000628 <__aeabi_dmul>
 8001334:	4603      	mov	r3, r0
 8001336:	460c      	mov	r4, r1
 8001338:	4618      	mov	r0, r3
 800133a:	4621      	mov	r1, r4
 800133c:	f04f 0200 	mov.w	r2, #0
 8001340:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001344:	f7ff fa9a 	bl	800087c <__aeabi_ddiv>
 8001348:	4603      	mov	r3, r0
 800134a:	460c      	mov	r4, r1
 800134c:	4618      	mov	r0, r3
 800134e:	4621      	mov	r1, r4
 8001350:	f7ff fc62 	bl	8000c18 <__aeabi_d2f>
 8001354:	4602      	mov	r2, r0
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	609a      	str	r2, [r3, #8]
	total_distance_ += distance_;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	edd3 7a02 	vldr	s15, [r3, #8]
 8001366:	ee77 7a27 	vadd.f32	s15, s14, s15
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	edc3 7a05 	vstr	s15, [r3, #20]
	cross_line_ignore_distance_ += distance_;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	ed93 7a06 	vldr	s14, [r3, #24]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	edd3 7a02 	vldr	s15, [r3, #8]
 800137c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	edc3 7a06 	vstr	s15, [r3, #24]
	monitor_distance = total_distance_;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	4a11      	ldr	r2, [pc, #68]	; (80013d0 <_ZN7Encoder9updateCntEv+0x1e8>)
 800138c:	6013      	str	r3, [r2, #0]
}
 800138e:	bf00      	nop
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bdb0      	pop	{r4, r5, r7, pc}
 8001396:	bf00      	nop
 8001398:	9999999a 	.word	0x9999999a
 800139c:	3fa99999 	.word	0x3fa99999
 80013a0:	66666666 	.word	0x66666666
 80013a4:	3fee6666 	.word	0x3fee6666
 80013a8:	1ab1d998 	.word	0x1ab1d998
 80013ac:	3f7830b5 	.word	0x3f7830b5
 80013b0:	40010000 	.word	0x40010000
 80013b4:	47000000 	.word	0x47000000
 80013b8:	3f912547 	.word	0x3f912547
 80013bc:	40010400 	.word	0x40010400
 80013c0:	20000200 	.word	0x20000200
 80013c4:	20000208 	.word	0x20000208
 80013c8:	2000020c 	.word	0x2000020c
 80013cc:	20000204 	.word	0x20000204
 80013d0:	200001fc 	.word	0x200001fc

080013d4 <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	601a      	str	r2, [r3, #0]
}
 80013f0:	bf00      	nop
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	return distance_;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	ee07 3a90 	vmov	s15, r3
}
 800140c:	eeb0 0a67 	vmov.f32	s0, s15
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
	return total_distance_;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	ee07 3a90 	vmov	s15, r3
}
 800142a:	eeb0 0a67 	vmov.f32	s0, s15
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <_ZN7Encoder13clearDistanceEv>:

void Encoder::clearDistance()
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
	distance_ = 0;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f04f 0200 	mov.w	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <_ZN7Encoder8clearCntEv>:

void Encoder::clearCnt()
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f04f 0200 	mov.w	r2, #0
 800146a:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 800146c:	4b08      	ldr	r3, [pc, #32]	; (8001490 <_ZN7Encoder8clearCntEv+0x3c>)
 800146e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001472:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001474:	4b07      	ldr	r3, [pc, #28]	; (8001494 <_ZN7Encoder8clearCntEv+0x40>)
 8001476:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800147a:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f04f 0200 	mov.w	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	40010000 	.word	0x40010000
 8001494:	40010400 	.word	0x40010400

08001498 <_ZN7Encoder13clearTotalCntEv>:
{
	return (total_cnt_l_ + total_cnt_r_) / 2;
}

void Encoder::clearTotalCnt()
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	total_cnt_l_ = 0;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f04f 0200 	mov.w	r2, #0
 80014a6:	60da      	str	r2, [r3, #12]
	total_cnt_r_ = 0;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f04f 0200 	mov.w	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
	total_distance_ = 0;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f04f 0200 	mov.w	r2, #0
 80014b6:	615a      	str	r2, [r3, #20]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:

float Encoder::getCrossLineIgnoreDistance()
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	ee07 3a90 	vmov	s15, r3
}
 80014d4:	eeb0 0a67 	vmov.f32	s0, s15
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 80014e2:	b480      	push	{r7}
 80014e4:	b083      	sub	sp, #12
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f04f 0200 	mov.w	r2, #0
 80014f0:	619a      	str	r2, [r3, #24]
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 80014fe:	b580      	push	{r7, lr}
 8001500:	b084      	sub	sp, #16
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
 8001506:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 800150c:	6839      	ldr	r1, [r7, #0]
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f000 f978 	bl	8001804 <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 8001514:	f000 f98c 	bl	8001830 <fopen_folder_and_file>

	return ret;
 8001518:	7bfb      	ldrb	r3, [r7, #15]
}
 800151a:	4618      	mov	r0, r3
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 800152e:	4804      	ldr	r0, [pc, #16]	; (8001540 <user_fclose+0x1c>)
 8001530:	f010 f8ea 	bl	8011708 <f_close>

	return ret;
 8001534:	79fb      	ldrb	r3, [r7, #7]
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200348f8 	.word	0x200348f8

08001544 <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 8001544:	b590      	push	{r4, r7, lr}
 8001546:	b087      	sub	sp, #28
 8001548:	af02      	add	r7, sp, #8
 800154a:	4603      	mov	r3, r0
 800154c:	6039      	str	r1, [r7, #0]
 800154e:	80fb      	strh	r3, [r7, #6]
 8001550:	4613      	mov	r3, r2
 8001552:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 8001558:	2300      	movs	r3, #0
 800155a:	81fb      	strh	r3, [r7, #14]
 800155c:	e030      	b.n	80015c0 <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 800155e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	683a      	ldr	r2, [r7, #0]
 8001566:	4413      	add	r3, r2
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff f804 	bl	8000578 <__aeabi_f2d>
 8001570:	4603      	mov	r3, r0
 8001572:	460c      	mov	r4, r1
 8001574:	e9cd 3400 	strd	r3, r4, [sp]
 8001578:	4a17      	ldr	r2, [pc, #92]	; (80015d8 <sd_write_float+0x94>)
 800157a:	2180      	movs	r1, #128	; 0x80
 800157c:	4817      	ldr	r0, [pc, #92]	; (80015dc <sd_write_float+0x98>)
 800157e:	f012 fd47 	bl	8014010 <sniprintf>

		if(state == ADD_WRITE){
 8001582:	797b      	ldrb	r3, [r7, #5]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d106      	bne.n	8001596 <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 8001588:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <sd_write_float+0x9c>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	4619      	mov	r1, r3
 800158e:	4814      	ldr	r0, [pc, #80]	; (80015e0 <sd_write_float+0x9c>)
 8001590:	f010 f92e 	bl	80117f0 <f_lseek>
 8001594:	e003      	b.n	800159e <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 8001596:	2100      	movs	r1, #0
 8001598:	4811      	ldr	r0, [pc, #68]	; (80015e0 <sd_write_float+0x9c>)
 800159a:	f010 f929 	bl	80117f0 <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 800159e:	480f      	ldr	r0, [pc, #60]	; (80015dc <sd_write_float+0x98>)
 80015a0:	f7fe fe2e 	bl	8000200 <strlen>
 80015a4:	4602      	mov	r2, r0
 80015a6:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <sd_write_float+0xa0>)
 80015a8:	490c      	ldr	r1, [pc, #48]	; (80015dc <sd_write_float+0x98>)
 80015aa:	480d      	ldr	r0, [pc, #52]	; (80015e0 <sd_write_float+0x9c>)
 80015ac:	f00f fe97 	bl	80112de <f_write>

		bufclear();	//書き込み用のバッファをクリア
 80015b0:	f000 f958 	bl	8001864 <bufclear>
	for(short i = 0 ; i < size; i++){
 80015b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	3301      	adds	r3, #1
 80015bc:	b29b      	uxth	r3, r3
 80015be:	81fb      	strh	r3, [r7, #14]
 80015c0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80015c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	dbc8      	blt.n	800155e <sd_write_float+0x1a>
	}
	return ret;
 80015cc:	7b7b      	ldrb	r3, [r7, #13]
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd90      	pop	{r4, r7, pc}
 80015d6:	bf00      	nop
 80015d8:	08018098 	.word	0x08018098
 80015dc:	20034868 	.word	0x20034868
 80015e0:	200348f8 	.word	0x200348f8
 80015e4:	200348e8 	.word	0x200348e8

080015e8 <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 80015e8:	b590      	push	{r4, r7, lr}
 80015ea:	b089      	sub	sp, #36	; 0x24
 80015ec:	af02      	add	r7, sp, #8
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	603b      	str	r3, [r7, #0]
 80015f4:	4613      	mov	r3, r2
 80015f6:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 80015fc:	68b9      	ldr	r1, [r7, #8]
 80015fe:	68f8      	ldr	r0, [r7, #12]
 8001600:	f000 f900 	bl	8001804 <create_path>

	if(state == OVER_WRITE){
 8001604:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001608:	2b00      	cmp	r3, #0
 800160a:	d108      	bne.n	800161e <sd_write_array_float+0x36>
		f_chdir(dirpath);
 800160c:	4822      	ldr	r0, [pc, #136]	; (8001698 <sd_write_array_float+0xb0>)
 800160e:	f010 f8a5 	bl	801175c <f_chdir>
		f_unlink(filepath);	//	一回消す
 8001612:	4822      	ldr	r0, [pc, #136]	; (800169c <sd_write_array_float+0xb4>)
 8001614:	f010 fb10 	bl	8011c38 <f_unlink>
		f_chdir("..");
 8001618:	4821      	ldr	r0, [pc, #132]	; (80016a0 <sd_write_array_float+0xb8>)
 800161a:	f010 f89f 	bl	801175c <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 800161e:	f000 f907 	bl	8001830 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 8001622:	2300      	movs	r3, #0
 8001624:	82fb      	strh	r3, [r7, #22]
 8001626:	e028      	b.n	800167a <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 8001628:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	683a      	ldr	r2, [r7, #0]
 8001630:	4413      	add	r3, r2
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f7fe ff9f 	bl	8000578 <__aeabi_f2d>
 800163a:	4603      	mov	r3, r0
 800163c:	460c      	mov	r4, r1
 800163e:	e9cd 3400 	strd	r3, r4, [sp]
 8001642:	4a18      	ldr	r2, [pc, #96]	; (80016a4 <sd_write_array_float+0xbc>)
 8001644:	2180      	movs	r1, #128	; 0x80
 8001646:	4818      	ldr	r0, [pc, #96]	; (80016a8 <sd_write_array_float+0xc0>)
 8001648:	f012 fce2 	bl	8014010 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 800164c:	4b17      	ldr	r3, [pc, #92]	; (80016ac <sd_write_array_float+0xc4>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	4619      	mov	r1, r3
 8001652:	4816      	ldr	r0, [pc, #88]	; (80016ac <sd_write_array_float+0xc4>)
 8001654:	f010 f8cc 	bl	80117f0 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 8001658:	4813      	ldr	r0, [pc, #76]	; (80016a8 <sd_write_array_float+0xc0>)
 800165a:	f7fe fdd1 	bl	8000200 <strlen>
 800165e:	4602      	mov	r2, r0
 8001660:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <sd_write_array_float+0xc8>)
 8001662:	4911      	ldr	r1, [pc, #68]	; (80016a8 <sd_write_array_float+0xc0>)
 8001664:	4811      	ldr	r0, [pc, #68]	; (80016ac <sd_write_array_float+0xc4>)
 8001666:	f00f fe3a 	bl	80112de <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 800166a:	f000 f8fb 	bl	8001864 <bufclear>
	for(short i = 0 ; i < size; i++){
 800166e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001672:	b29b      	uxth	r3, r3
 8001674:	3301      	adds	r3, #1
 8001676:	b29b      	uxth	r3, r3
 8001678:	82fb      	strh	r3, [r7, #22]
 800167a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800167e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001682:	429a      	cmp	r2, r3
 8001684:	dbd0      	blt.n	8001628 <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 8001686:	4809      	ldr	r0, [pc, #36]	; (80016ac <sd_write_array_float+0xc4>)
 8001688:	f010 f83e 	bl	8011708 <f_close>

	return ret;
 800168c:	7d7b      	ldrb	r3, [r7, #21]
}
 800168e:	4618      	mov	r0, r3
 8001690:	371c      	adds	r7, #28
 8001692:	46bd      	mov	sp, r7
 8001694:	bd90      	pop	{r4, r7, pc}
 8001696:	bf00      	nop
 8001698:	20034768 	.word	0x20034768
 800169c:	20033628 	.word	0x20033628
 80016a0:	080180b4 	.word	0x080180b4
 80016a4:	08018098 	.word	0x08018098
 80016a8:	20034868 	.word	0x20034868
 80016ac:	200348f8 	.word	0x200348f8
 80016b0:	200348e8 	.word	0x200348e8

080016b4 <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	603b      	str	r3, [r7, #0]
 80016c0:	4613      	mov	r3, r2
 80016c2:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80016cc:	68b9      	ldr	r1, [r7, #8]
 80016ce:	68f8      	ldr	r0, [r7, #12]
 80016d0:	f000 f898 	bl	8001804 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80016d4:	f000 f8ac 	bl	8001830 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80016d8:	e019      	b.n	800170e <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 80016da:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	4413      	add	r3, r2
 80016e4:	461a      	mov	r2, r3
 80016e6:	4913      	ldr	r1, [pc, #76]	; (8001734 <sd_read_array_float+0x80>)
 80016e8:	4813      	ldr	r0, [pc, #76]	; (8001738 <sd_read_array_float+0x84>)
 80016ea:	f012 fce5 	bl	80140b8 <siscanf>
		i++;
 80016ee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	3301      	adds	r3, #1
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 80016fa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80016fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001702:	429a      	cmp	r2, r3
 8001704:	db03      	blt.n	800170e <sd_read_array_float+0x5a>
 8001706:	88fb      	ldrh	r3, [r7, #6]
 8001708:	3b01      	subs	r3, #1
 800170a:	b29b      	uxth	r3, r3
 800170c:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800170e:	4a0b      	ldr	r2, [pc, #44]	; (800173c <sd_read_array_float+0x88>)
 8001710:	2180      	movs	r1, #128	; 0x80
 8001712:	4809      	ldr	r0, [pc, #36]	; (8001738 <sd_read_array_float+0x84>)
 8001714:	f010 fc6e 	bl	8011ff4 <f_gets>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1dd      	bne.n	80016da <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 800171e:	f000 f8a1 	bl	8001864 <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001722:	4806      	ldr	r0, [pc, #24]	; (800173c <sd_read_array_float+0x88>)
 8001724:	f00f fff0 	bl	8011708 <f_close>

	return ret;
 8001728:	7d7b      	ldrb	r3, [r7, #21]
}
 800172a:	4618      	mov	r0, r3
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	080180a4 	.word	0x080180a4
 8001738:	20034868 	.word	0x20034868
 800173c:	200348f8 	.word	0x200348f8

08001740 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	603b      	str	r3, [r7, #0]
 800174c:	4613      	mov	r3, r2
 800174e:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	757b      	strb	r3, [r7, #21]
	short i = 0;
 8001754:	2300      	movs	r3, #0
 8001756:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001758:	68b9      	ldr	r1, [r7, #8]
 800175a:	68f8      	ldr	r0, [r7, #12]
 800175c:	f000 f852 	bl	8001804 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001760:	f000 f866 	bl	8001830 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001764:	e019      	b.n	800179a <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 8001766:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	683a      	ldr	r2, [r7, #0]
 800176e:	4413      	add	r3, r2
 8001770:	461a      	mov	r2, r3
 8001772:	4913      	ldr	r1, [pc, #76]	; (80017c0 <sd_read_array_double+0x80>)
 8001774:	4813      	ldr	r0, [pc, #76]	; (80017c4 <sd_read_array_double+0x84>)
 8001776:	f012 fc9f 	bl	80140b8 <siscanf>
		i++;
 800177a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800177e:	b29b      	uxth	r3, r3
 8001780:	3301      	adds	r3, #1
 8001782:	b29b      	uxth	r3, r3
 8001784:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001786:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800178a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800178e:	429a      	cmp	r2, r3
 8001790:	db03      	blt.n	800179a <sd_read_array_double+0x5a>
 8001792:	88fb      	ldrh	r3, [r7, #6]
 8001794:	3b01      	subs	r3, #1
 8001796:	b29b      	uxth	r3, r3
 8001798:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800179a:	4a0b      	ldr	r2, [pc, #44]	; (80017c8 <sd_read_array_double+0x88>)
 800179c:	2180      	movs	r1, #128	; 0x80
 800179e:	4809      	ldr	r0, [pc, #36]	; (80017c4 <sd_read_array_double+0x84>)
 80017a0:	f010 fc28 	bl	8011ff4 <f_gets>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1dd      	bne.n	8001766 <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80017aa:	f000 f85b 	bl	8001864 <bufclear>

	f_close(&fil);	//ファイル閉じる
 80017ae:	4806      	ldr	r0, [pc, #24]	; (80017c8 <sd_read_array_double+0x88>)
 80017b0:	f00f ffaa 	bl	8011708 <f_close>

	return ret;
 80017b4:	7d7b      	ldrb	r3, [r7, #21]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3718      	adds	r7, #24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	080180b0 	.word	0x080180b0
 80017c4:	20034868 	.word	0x20034868
 80017c8:	200348f8 	.word	0x200348f8

080017cc <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 80017d6:	2201      	movs	r2, #1
 80017d8:	4908      	ldr	r1, [pc, #32]	; (80017fc <sd_mount+0x30>)
 80017da:	4809      	ldr	r0, [pc, #36]	; (8001800 <sd_mount+0x34>)
 80017dc:	f00f fa0c 	bl	8010bf8 <f_mount>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d102      	bne.n	80017ec <sd_mount+0x20>
 80017e6:	2301      	movs	r3, #1
 80017e8:	71fb      	strb	r3, [r7, #7]
 80017ea:	e001      	b.n	80017f0 <sd_mount+0x24>
	else ret = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	71fb      	strb	r3, [r7, #7]

	return ret;
 80017f0:	79fb      	ldrb	r3, [r7, #7]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	080180c0 	.word	0x080180c0
 8001800:	20033728 	.word	0x20033728

08001804 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	4805      	ldr	r0, [pc, #20]	; (8001828 <create_path+0x24>)
 8001812:	f012 fcc0 	bl	8014196 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 8001816:	6839      	ldr	r1, [r7, #0]
 8001818:	4804      	ldr	r0, [pc, #16]	; (800182c <create_path+0x28>)
 800181a:	f012 fcbc 	bl	8014196 <strcpy>

}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20034768 	.word	0x20034768
 800182c:	20033628 	.word	0x20033628

08001830 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001834:	4807      	ldr	r0, [pc, #28]	; (8001854 <fopen_folder_and_file+0x24>)
 8001836:	f010 fac1 	bl	8011dbc <f_mkdir>

	f_chdir(dirpath);
 800183a:	4806      	ldr	r0, [pc, #24]	; (8001854 <fopen_folder_and_file+0x24>)
 800183c:	f00f ff8e 	bl	801175c <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001840:	2213      	movs	r2, #19
 8001842:	4905      	ldr	r1, [pc, #20]	; (8001858 <fopen_folder_and_file+0x28>)
 8001844:	4805      	ldr	r0, [pc, #20]	; (800185c <fopen_folder_and_file+0x2c>)
 8001846:	f00f fa1d 	bl	8010c84 <f_open>

	f_chdir("..");
 800184a:	4805      	ldr	r0, [pc, #20]	; (8001860 <fopen_folder_and_file+0x30>)
 800184c:	f00f ff86 	bl	801175c <f_chdir>


}
 8001850:	bf00      	nop
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20034768 	.word	0x20034768
 8001858:	20033628 	.word	0x20033628
 800185c:	200348f8 	.word	0x200348f8
 8001860:	080180b4 	.word	0x080180b4

08001864 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 800186a:	2300      	movs	r3, #0
 800186c:	607b      	str	r3, [r7, #4]
 800186e:	e007      	b.n	8001880 <bufclear+0x1c>
		buffer[i] = '\0';
 8001870:	4a08      	ldr	r2, [pc, #32]	; (8001894 <bufclear+0x30>)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4413      	add	r3, r2
 8001876:	2200      	movs	r2, #0
 8001878:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	3301      	adds	r3, #1
 800187e:	607b      	str	r3, [r7, #4]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b7f      	cmp	r3, #127	; 0x7f
 8001884:	ddf4      	ble.n	8001870 <bufclear+0xc>
	}
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	20034868 	.word	0x20034868

08001898 <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 80018ac:	2200      	movs	r2, #0
 80018ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018b2:	480e      	ldr	r0, [pc, #56]	; (80018ec <read_byte+0x54>)
 80018b4:	f007 f9cc 	bl	8008c50 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 80018b8:	f107 010f 	add.w	r1, r7, #15
 80018bc:	2364      	movs	r3, #100	; 0x64
 80018be:	2201      	movs	r2, #1
 80018c0:	480b      	ldr	r0, [pc, #44]	; (80018f0 <read_byte+0x58>)
 80018c2:	f00a fb8d 	bl	800bfe0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 80018c6:	f107 010e 	add.w	r1, r7, #14
 80018ca:	2364      	movs	r3, #100	; 0x64
 80018cc:	2201      	movs	r2, #1
 80018ce:	4808      	ldr	r0, [pc, #32]	; (80018f0 <read_byte+0x58>)
 80018d0:	f00a fcba 	bl	800c248 <HAL_SPI_Receive>
	CS_SET;
 80018d4:	2201      	movs	r2, #1
 80018d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018da:	4804      	ldr	r0, [pc, #16]	; (80018ec <read_byte+0x54>)
 80018dc:	f007 f9b8 	bl	8008c50 <HAL_GPIO_WritePin>

	return val;
 80018e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40020400 	.word	0x40020400
 80018f0:	20035994 	.word	0x20035994

080018f4 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	460a      	mov	r2, r1
 80018fe:	71fb      	strb	r3, [r7, #7]
 8001900:	4613      	mov	r3, r2
 8001902:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800190a:	b2db      	uxtb	r3, r3
 800190c:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800190e:	2200      	movs	r2, #0
 8001910:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001914:	480c      	ldr	r0, [pc, #48]	; (8001948 <write_byte+0x54>)
 8001916:	f007 f99b 	bl	8008c50 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 800191a:	f107 010f 	add.w	r1, r7, #15
 800191e:	2364      	movs	r3, #100	; 0x64
 8001920:	2201      	movs	r2, #1
 8001922:	480a      	ldr	r0, [pc, #40]	; (800194c <write_byte+0x58>)
 8001924:	f00a fb5c 	bl	800bfe0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001928:	1db9      	adds	r1, r7, #6
 800192a:	2364      	movs	r3, #100	; 0x64
 800192c:	2201      	movs	r2, #1
 800192e:	4807      	ldr	r0, [pc, #28]	; (800194c <write_byte+0x58>)
 8001930:	f00a fb56 	bl	800bfe0 <HAL_SPI_Transmit>
	CS_SET;
 8001934:	2201      	movs	r2, #1
 8001936:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800193a:	4803      	ldr	r0, [pc, #12]	; (8001948 <write_byte+0x54>)
 800193c:	f007 f988 	bl	8008c50 <HAL_GPIO_WritePin>
}
 8001940:	bf00      	nop
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40020400 	.word	0x40020400
 800194c:	20035994 	.word	0x20035994

08001950 <IMU_init>:

uint16_t IMU_init() {
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001956:	2300      	movs	r3, #0
 8001958:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 800195a:	2000      	movs	r0, #0
 800195c:	f7ff ff9c 	bl	8001898 <read_byte>
 8001960:	4603      	mov	r3, r0
 8001962:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001964:	797b      	ldrb	r3, [r7, #5]
 8001966:	2be0      	cmp	r3, #224	; 0xe0
 8001968:	d119      	bne.n	800199e <IMU_init+0x4e>
		ret = 1;
 800196a:	2301      	movs	r3, #1
 800196c:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 800196e:	2101      	movs	r1, #1
 8001970:	2006      	movs	r0, #6
 8001972:	f7ff ffbf 	bl	80018f4 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001976:	2110      	movs	r1, #16
 8001978:	2003      	movs	r0, #3
 800197a:	f7ff ffbb 	bl	80018f4 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 800197e:	2120      	movs	r1, #32
 8001980:	207f      	movs	r0, #127	; 0x7f
 8001982:	f7ff ffb7 	bl	80018f4 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 8001986:	2106      	movs	r1, #6
 8001988:	2001      	movs	r0, #1
 800198a:	f7ff ffb3 	bl	80018f4 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 800198e:	2106      	movs	r1, #6
 8001990:	2014      	movs	r0, #20
 8001992:	f7ff ffaf 	bl	80018f4 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8001996:	2100      	movs	r1, #0
 8001998:	207f      	movs	r0, #127	; 0x7f
 800199a:	f7ff ffab 	bl	80018f4 <write_byte>
	}
	return ret;
 800199e:	88fb      	ldrh	r3, [r7, #6]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <read_gyro_data>:

void read_gyro_data() {
 80019a8:	b598      	push	{r3, r4, r7, lr}
 80019aa:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 80019ac:	2033      	movs	r0, #51	; 0x33
 80019ae:	f7ff ff73 	bl	8001898 <read_byte>
 80019b2:	4603      	mov	r3, r0
 80019b4:	021b      	lsls	r3, r3, #8
 80019b6:	b21c      	sxth	r4, r3
 80019b8:	2034      	movs	r0, #52	; 0x34
 80019ba:	f7ff ff6d 	bl	8001898 <read_byte>
 80019be:	4603      	mov	r3, r0
 80019c0:	b21b      	sxth	r3, r3
 80019c2:	4323      	orrs	r3, r4
 80019c4:	b21a      	sxth	r2, r3
 80019c6:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <read_gyro_data+0x64>)
 80019c8:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 80019ca:	2035      	movs	r0, #53	; 0x35
 80019cc:	f7ff ff64 	bl	8001898 <read_byte>
 80019d0:	4603      	mov	r3, r0
 80019d2:	021b      	lsls	r3, r3, #8
 80019d4:	b21c      	sxth	r4, r3
 80019d6:	2036      	movs	r0, #54	; 0x36
 80019d8:	f7ff ff5e 	bl	8001898 <read_byte>
 80019dc:	4603      	mov	r3, r0
 80019de:	b21b      	sxth	r3, r3
 80019e0:	4323      	orrs	r3, r4
 80019e2:	b21a      	sxth	r2, r3
 80019e4:	4b0a      	ldr	r3, [pc, #40]	; (8001a10 <read_gyro_data+0x68>)
 80019e6:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 80019e8:	2037      	movs	r0, #55	; 0x37
 80019ea:	f7ff ff55 	bl	8001898 <read_byte>
 80019ee:	4603      	mov	r3, r0
 80019f0:	021b      	lsls	r3, r3, #8
 80019f2:	b21c      	sxth	r4, r3
 80019f4:	2038      	movs	r0, #56	; 0x38
 80019f6:	f7ff ff4f 	bl	8001898 <read_byte>
 80019fa:	4603      	mov	r3, r0
 80019fc:	b21b      	sxth	r3, r3
 80019fe:	4323      	orrs	r3, r4
 8001a00:	b21a      	sxth	r2, r3
 8001a02:	4b04      	ldr	r3, [pc, #16]	; (8001a14 <read_gyro_data+0x6c>)
 8001a04:	801a      	strh	r2, [r3, #0]
}
 8001a06:	bf00      	nop
 8001a08:	bd98      	pop	{r3, r4, r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20035930 	.word	0x20035930
 8001a10:	2003592e 	.word	0x2003592e
 8001a14:	20035928 	.word	0x20035928

08001a18 <_ZN3IMUC1Ev>:

#define PI 3.1415926535

//int16_t mon_zg_;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	801a      	strh	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	805a      	strh	r2, [r3, #2]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	809a      	strh	r2, [r3, #4]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	80da      	strh	r2, [r3, #6]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	811a      	strh	r2, [r3, #8]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	815a      	strh	r2, [r3, #10]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	60da      	str	r2, [r3, #12]
{

}
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
	...

08001a5c <_ZN3IMU4initEv>:

void IMU::init()
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001a64:	f7ff ff74 	bl	8001950 <IMU_init>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	81fb      	strh	r3, [r7, #14]
	printf("who i am: %d\n", who_i_am);
 8001a6c:	89fb      	ldrh	r3, [r7, #14]
 8001a6e:	4619      	mov	r1, r3
 8001a70:	480e      	ldr	r0, [pc, #56]	; (8001aac <_ZN3IMU4initEv+0x50>)
 8001a72:	f012 fa37 	bl	8013ee4 <iprintf>

	lcd_clear();
 8001a76:	f7ff fb13 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	f7ff fb1f 	bl	80010c0 <lcd_locate>
	lcd_printf("Who I am");
 8001a82:	480b      	ldr	r0, [pc, #44]	; (8001ab0 <_ZN3IMU4initEv+0x54>)
 8001a84:	f7ff fb46 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001a88:	2101      	movs	r1, #1
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	f7ff fb18 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001a90:	89fb      	ldrh	r3, [r7, #14]
 8001a92:	4619      	mov	r1, r3
 8001a94:	4807      	ldr	r0, [pc, #28]	; (8001ab4 <_ZN3IMU4initEv+0x58>)
 8001a96:	f7ff fb3d 	bl	8001114 <lcd_printf>

	HAL_Delay(1000);
 8001a9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a9e:	f005 fe41 	bl	8007724 <HAL_Delay>

}
 8001aa2:	bf00      	nop
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	080180c4 	.word	0x080180c4
 8001ab0:	080180d4 	.word	0x080180d4
 8001ab4:	080180e0 	.word	0x080180e0

08001ab8 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001ab8:	b5b0      	push	{r4, r5, r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001ac0:	f7ff ff72 	bl	80019a8 <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001ac4:	4b24      	ldr	r3, [pc, #144]	; (8001b58 <_ZN3IMU12updateValuesEv+0xa0>)
 8001ac6:	881b      	ldrh	r3, [r3, #0]
 8001ac8:	b21a      	sxth	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001ace:	4b23      	ldr	r3, [pc, #140]	; (8001b5c <_ZN3IMU12updateValuesEv+0xa4>)
 8001ad0:	881b      	ldrh	r3, [r3, #0]
 8001ad2:	b21a      	sxth	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001ad8:	4b21      	ldr	r3, [pc, #132]	; (8001b60 <_ZN3IMU12updateValuesEv+0xa8>)
 8001ada:	881b      	ldrh	r3, [r3, #0]
 8001adc:	b21a      	sxth	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7fe fd33 	bl	8000554 <__aeabi_i2d>
 8001aee:	a316      	add	r3, pc, #88	; (adr r3, 8001b48 <_ZN3IMU12updateValuesEv+0x90>)
 8001af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af4:	f7fe fd98 	bl	8000628 <__aeabi_dmul>
 8001af8:	4603      	mov	r3, r0
 8001afa:	460c      	mov	r4, r1
 8001afc:	4625      	mov	r5, r4
 8001afe:	461c      	mov	r4, r3
 8001b00:	4b18      	ldr	r3, [pc, #96]	; (8001b64 <_ZN3IMU12updateValuesEv+0xac>)
 8001b02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7fe fd24 	bl	8000554 <__aeabi_i2d>
 8001b0c:	a310      	add	r3, pc, #64	; (adr r3, 8001b50 <_ZN3IMU12updateValuesEv+0x98>)
 8001b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b12:	f7fe fd89 	bl	8000628 <__aeabi_dmul>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	4620      	mov	r0, r4
 8001b1c:	4629      	mov	r1, r5
 8001b1e:	f7fe fbcd 	bl	80002bc <__adddf3>
 8001b22:	4603      	mov	r3, r0
 8001b24:	460c      	mov	r4, r1
 8001b26:	4618      	mov	r0, r3
 8001b28:	4621      	mov	r1, r4
 8001b2a:	f7ff f82d 	bl	8000b88 <__aeabi_d2iz>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	b21a      	sxth	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001b3c:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <_ZN3IMU12updateValuesEv+0xac>)
 8001b3e:	801a      	strh	r2, [r3, #0]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001b40:	bf00      	nop
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bdb0      	pop	{r4, r5, r7, pc}
 8001b48:	eb851eb8 	.word	0xeb851eb8
 8001b4c:	3f9eb851 	.word	0x3f9eb851
 8001b50:	70a3d70a 	.word	0x70a3d70a
 8001b54:	3fef0a3d 	.word	0x3fef0a3d
 8001b58:	20035930 	.word	0x20035930
 8001b5c:	2003592e 	.word	0x2003592e
 8001b60:	20035928 	.word	0x20035928
 8001b64:	20000210 	.word	0x20000210

08001b68 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001b68:	b5b0      	push	{r4, r5, r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b76:	ee07 3a90 	vmov	s15, r3
 8001b7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b88:	edc7 7a03 	vstr	s15, [r7, #12]
	return -(corrected_zg / 16.4) * PI / 180;
 8001b8c:	68f8      	ldr	r0, [r7, #12]
 8001b8e:	f7fe fcf3 	bl	8000578 <__aeabi_f2d>
 8001b92:	a316      	add	r3, pc, #88	; (adr r3, 8001bec <_ZN3IMU8getOmegaEv+0x84>)
 8001b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b98:	f7fe fe70 	bl	800087c <__aeabi_ddiv>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	4614      	mov	r4, r2
 8001ba2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001ba6:	a313      	add	r3, pc, #76	; (adr r3, 8001bf4 <_ZN3IMU8getOmegaEv+0x8c>)
 8001ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bac:	4620      	mov	r0, r4
 8001bae:	4629      	mov	r1, r5
 8001bb0:	f7fe fd3a 	bl	8000628 <__aeabi_dmul>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	460c      	mov	r4, r1
 8001bb8:	4618      	mov	r0, r3
 8001bba:	4621      	mov	r1, r4
 8001bbc:	f04f 0200 	mov.w	r2, #0
 8001bc0:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <_ZN3IMU8getOmegaEv+0x80>)
 8001bc2:	f7fe fe5b 	bl	800087c <__aeabi_ddiv>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	460c      	mov	r4, r1
 8001bca:	4618      	mov	r0, r3
 8001bcc:	4621      	mov	r1, r4
 8001bce:	f7ff f823 	bl	8000c18 <__aeabi_d2f>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	ee07 3a90 	vmov	s15, r3
}
 8001bd8:	eeb0 0a67 	vmov.f32	s0, s15
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bdb0      	pop	{r4, r5, r7, pc}
 8001be2:	bf00      	nop
 8001be4:	f3af 8000 	nop.w
 8001be8:	40668000 	.word	0x40668000
 8001bec:	66666666 	.word	0x66666666
 8001bf0:	40306666 	.word	0x40306666
 8001bf4:	54411744 	.word	0x54411744
 8001bf8:	400921fb 	.word	0x400921fb

08001bfc <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bfe:	b08b      	sub	sp, #44	; 0x2c
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001c04:	466b      	mov	r3, sp
 8001c06:	461e      	mov	r6, r3
	HAL_Delay(1000);
 8001c08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c0c:	f005 fd8a 	bl	8007724 <HAL_Delay>
	lcd_clear();
 8001c10:	f7ff fa46 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001c14:	2100      	movs	r1, #0
 8001c16:	2000      	movs	r0, #0
 8001c18:	f7ff fa52 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001c1c:	4840      	ldr	r0, [pc, #256]	; (8001d20 <_ZN3IMU11calibrationEv+0x124>)
 8001c1e:	f7ff fa79 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001c22:	2101      	movs	r1, #1
 8001c24:	2000      	movs	r0, #0
 8001c26:	f7ff fa4b 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001c2a:	483e      	ldr	r0, [pc, #248]	; (8001d24 <_ZN3IMU11calibrationEv+0x128>)
 8001c2c:	f7ff fa72 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001c30:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001c34:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001c36:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c3a:	1e5d      	subs	r5, r3, #1
 8001c3c:	61bd      	str	r5, [r7, #24]
 8001c3e:	462b      	mov	r3, r5
 8001c40:	3301      	adds	r3, #1
 8001c42:	4619      	mov	r1, r3
 8001c44:	f04f 0200 	mov.w	r2, #0
 8001c48:	f04f 0300 	mov.w	r3, #0
 8001c4c:	f04f 0400 	mov.w	r4, #0
 8001c50:	0154      	lsls	r4, r2, #5
 8001c52:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c56:	014b      	lsls	r3, r1, #5
 8001c58:	462b      	mov	r3, r5
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	f04f 0200 	mov.w	r2, #0
 8001c62:	f04f 0300 	mov.w	r3, #0
 8001c66:	f04f 0400 	mov.w	r4, #0
 8001c6a:	0154      	lsls	r4, r2, #5
 8001c6c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c70:	014b      	lsls	r3, r1, #5
 8001c72:	462b      	mov	r3, r5
 8001c74:	3301      	adds	r3, #1
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	3303      	adds	r3, #3
 8001c7a:	3307      	adds	r3, #7
 8001c7c:	08db      	lsrs	r3, r3, #3
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	ebad 0d03 	sub.w	sp, sp, r3
 8001c84:	466b      	mov	r3, sp
 8001c86:	3303      	adds	r3, #3
 8001c88:	089b      	lsrs	r3, r3, #2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001c8e:	2300      	movs	r3, #0
 8001c90:	83fb      	strh	r3, [r7, #30]
 8001c92:	8bfa      	ldrh	r2, [r7, #30]
 8001c94:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	da13      	bge.n	8001cc4 <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001ca2:	8bfb      	ldrh	r3, [r7, #30]
 8001ca4:	ee07 2a90 	vmov	s15, r2
 8001ca8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	4413      	add	r3, r2
 8001cb2:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 8001cb6:	2002      	movs	r0, #2
 8001cb8:	f005 fd34 	bl	8007724 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001cbc:	8bfb      	ldrh	r3, [r7, #30]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	83fb      	strh	r3, [r7, #30]
 8001cc2:	e7e6      	b.n	8001c92 <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8001cc8:	697a      	ldr	r2, [r7, #20]
 8001cca:	462b      	mov	r3, r5
 8001ccc:	3301      	adds	r3, #1
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4413      	add	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
 8001cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d00e      	beq.n	8001cfa <_ZN3IMU11calibrationEv+0xfe>
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cde:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	edd3 7a00 	vldr	s15, [r3]
 8001ce6:	ed97 7a08 	vldr	s14, [r7, #32]
 8001cea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cee:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8001cf8:	e7ec      	b.n	8001cd4 <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8001cfa:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001cfe:	ee07 3a90 	vmov	s15, r3
 8001d02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d06:	edd7 6a08 	vldr	s13, [r7, #32]
 8001d0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	edc3 7a03 	vstr	s15, [r3, #12]
 8001d14:	46b5      	mov	sp, r6
}
 8001d16:	bf00      	nop
 8001d18:	372c      	adds	r7, #44	; 0x2c
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	080180e4 	.word	0x080180e4
 8001d24:	080180f0 	.word	0x080180f0

08001d28 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af02      	add	r7, sp, #8
 8001d2e:	4603      	mov	r3, r0
 8001d30:	460a      	mov	r2, r1
 8001d32:	71fb      	strb	r3, [r7, #7]
 8001d34:	4613      	mov	r3, r2
 8001d36:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001d38:	79bb      	ldrb	r3, [r7, #6]
 8001d3a:	b299      	uxth	r1, r3
 8001d3c:	1dfa      	adds	r2, r7, #7
 8001d3e:	2364      	movs	r3, #100	; 0x64
 8001d40:	9300      	str	r3, [sp, #0]
 8001d42:	2301      	movs	r3, #1
 8001d44:	480c      	ldr	r0, [pc, #48]	; (8001d78 <INA260_read+0x50>)
 8001d46:	f007 f8ed 	bl	8008f24 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001d4a:	79bb      	ldrb	r3, [r7, #6]
 8001d4c:	b299      	uxth	r1, r3
 8001d4e:	f107 020c 	add.w	r2, r7, #12
 8001d52:	2364      	movs	r3, #100	; 0x64
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	2302      	movs	r3, #2
 8001d58:	4807      	ldr	r0, [pc, #28]	; (8001d78 <INA260_read+0x50>)
 8001d5a:	f007 f9e1 	bl	8009120 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001d5e:	7b3b      	ldrb	r3, [r7, #12]
 8001d60:	021b      	lsls	r3, r3, #8
 8001d62:	b21a      	sxth	r2, r3
 8001d64:	7b7b      	ldrb	r3, [r7, #13]
 8001d66:	b21b      	sxth	r3, r3
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	b21b      	sxth	r3, r3
 8001d6c:	81fb      	strh	r3, [r7, #14]
	return val;
 8001d6e:	89fb      	ldrh	r3, [r7, #14]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	20035b48 	.word	0x20035b48

08001d7c <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001d7c:	b590      	push	{r4, r7, lr}
 8001d7e:	b087      	sub	sp, #28
 8001d80:	af02      	add	r7, sp, #8
 8001d82:	4604      	mov	r4, r0
 8001d84:	4608      	mov	r0, r1
 8001d86:	4611      	mov	r1, r2
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4623      	mov	r3, r4
 8001d8c:	71fb      	strb	r3, [r7, #7]
 8001d8e:	4603      	mov	r3, r0
 8001d90:	71bb      	strb	r3, [r7, #6]
 8001d92:	460b      	mov	r3, r1
 8001d94:	717b      	strb	r3, [r7, #5]
 8001d96:	4613      	mov	r3, r2
 8001d98:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
 8001d9c:	733b      	strb	r3, [r7, #12]
 8001d9e:	79bb      	ldrb	r3, [r7, #6]
 8001da0:	737b      	strb	r3, [r7, #13]
 8001da2:	797b      	ldrb	r3, [r7, #5]
 8001da4:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8001da6:	793b      	ldrb	r3, [r7, #4]
 8001da8:	b299      	uxth	r1, r3
 8001daa:	f107 020c 	add.w	r2, r7, #12
 8001dae:	2364      	movs	r3, #100	; 0x64
 8001db0:	9300      	str	r3, [sp, #0]
 8001db2:	2303      	movs	r3, #3
 8001db4:	4803      	ldr	r0, [pc, #12]	; (8001dc4 <INA260_write+0x48>)
 8001db6:	f007 f8b5 	bl	8008f24 <HAL_I2C_Master_Transmit>
}
 8001dba:	bf00      	nop
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd90      	pop	{r4, r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20035b48 	.word	0x20035b48

08001dc8 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	71fb      	strb	r3, [r7, #7]
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	71bb      	strb	r3, [r7, #6]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8001dda:	797b      	ldrb	r3, [r7, #5]
 8001ddc:	79ba      	ldrb	r2, [r7, #6]
 8001dde:	79f9      	ldrb	r1, [r7, #7]
 8001de0:	2000      	movs	r0, #0
 8001de2:	f7ff ffcb 	bl	8001d7c <INA260_write>
}
 8001de6:	bf00      	nop
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b082      	sub	sp, #8
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	4603      	mov	r3, r0
 8001df6:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8001df8:	79fb      	ldrb	r3, [r7, #7]
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	21df      	movs	r1, #223	; 0xdf
 8001dfe:	2000      	movs	r0, #0
 8001e00:	f7ff ffe2 	bl	8001dc8 <setConfig>
}
 8001e04:	bf00      	nop
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
{

}
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4618      	mov	r0, r3
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
	...

08001e24 <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8001e30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e34:	482a      	ldr	r0, [pc, #168]	; (8001ee0 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e36:	f006 fef3 	bl	8008c20 <HAL_GPIO_ReadPin>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	bf0c      	ite	eq
 8001e40:	2301      	moveq	r3, #1
 8001e42:	2300      	movne	r3, #0
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <_ZN8JoyStick8getValueEv+0x2e>
 8001e4a:	89fb      	ldrh	r3, [r7, #14]
 8001e4c:	f043 0301 	orr.w	r3, r3, #1
 8001e50:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 8001e52:	2101      	movs	r1, #1
 8001e54:	4823      	ldr	r0, [pc, #140]	; (8001ee4 <_ZN8JoyStick8getValueEv+0xc0>)
 8001e56:	f006 fee3 	bl	8008c20 <HAL_GPIO_ReadPin>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	bf0c      	ite	eq
 8001e60:	2301      	moveq	r3, #1
 8001e62:	2300      	movne	r3, #0
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <_ZN8JoyStick8getValueEv+0x4e>
 8001e6a:	89fb      	ldrh	r3, [r7, #14]
 8001e6c:	f043 0302 	orr.w	r3, r3, #2
 8001e70:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 8001e72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e76:	481a      	ldr	r0, [pc, #104]	; (8001ee0 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e78:	f006 fed2 	bl	8008c20 <HAL_GPIO_ReadPin>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	bf0c      	ite	eq
 8001e82:	2301      	moveq	r3, #1
 8001e84:	2300      	movne	r3, #0
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d003      	beq.n	8001e94 <_ZN8JoyStick8getValueEv+0x70>
 8001e8c:	89fb      	ldrh	r3, [r7, #14]
 8001e8e:	f043 0304 	orr.w	r3, r3, #4
 8001e92:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 8001e94:	2104      	movs	r1, #4
 8001e96:	4814      	ldr	r0, [pc, #80]	; (8001ee8 <_ZN8JoyStick8getValueEv+0xc4>)
 8001e98:	f006 fec2 	bl	8008c20 <HAL_GPIO_ReadPin>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	bf0c      	ite	eq
 8001ea2:	2301      	moveq	r3, #1
 8001ea4:	2300      	movne	r3, #0
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d003      	beq.n	8001eb4 <_ZN8JoyStick8getValueEv+0x90>
 8001eac:	89fb      	ldrh	r3, [r7, #14]
 8001eae:	f043 0308 	orr.w	r3, r3, #8
 8001eb2:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 8001eb4:	2180      	movs	r1, #128	; 0x80
 8001eb6:	480a      	ldr	r0, [pc, #40]	; (8001ee0 <_ZN8JoyStick8getValueEv+0xbc>)
 8001eb8:	f006 feb2 	bl	8008c20 <HAL_GPIO_ReadPin>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	bf0c      	ite	eq
 8001ec2:	2301      	moveq	r3, #1
 8001ec4:	2300      	movne	r3, #0
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <_ZN8JoyStick8getValueEv+0xb0>
 8001ecc:	89fb      	ldrh	r3, [r7, #14]
 8001ece:	f043 0310 	orr.w	r3, r3, #16
 8001ed2:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8001ed4:	89fb      	ldrh	r3, [r7, #14]
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	40020c00 	.word	0x40020c00
 8001ee8:	40020400 	.word	0x40020400

08001eec <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8001ef8:	78fb      	ldrb	r3, [r7, #3]
 8001efa:	2b52      	cmp	r3, #82	; 0x52
 8001efc:	d112      	bne.n	8001f24 <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001efe:	2200      	movs	r2, #0
 8001f00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f04:	4856      	ldr	r0, [pc, #344]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001f06:	f006 fea3 	bl	8008c50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f10:	4853      	ldr	r0, [pc, #332]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001f12:	f006 fe9d 	bl	8008c50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f16:	2201      	movs	r2, #1
 8001f18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f1c:	4850      	ldr	r0, [pc, #320]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001f1e:	f006 fe97 	bl	8008c50 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 8001f22:	e098      	b.n	8002056 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 8001f24:	78fb      	ldrb	r3, [r7, #3]
 8001f26:	2b47      	cmp	r3, #71	; 0x47
 8001f28:	d112      	bne.n	8001f50 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f30:	484b      	ldr	r0, [pc, #300]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001f32:	f006 fe8d 	bl	8008c50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f36:	2200      	movs	r2, #0
 8001f38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f3c:	4848      	ldr	r0, [pc, #288]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001f3e:	f006 fe87 	bl	8008c50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f42:	2201      	movs	r2, #1
 8001f44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f48:	4845      	ldr	r0, [pc, #276]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001f4a:	f006 fe81 	bl	8008c50 <HAL_GPIO_WritePin>
}
 8001f4e:	e082      	b.n	8002056 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8001f50:	78fb      	ldrb	r3, [r7, #3]
 8001f52:	2b42      	cmp	r3, #66	; 0x42
 8001f54:	d112      	bne.n	8001f7c <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f56:	2201      	movs	r2, #1
 8001f58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f5c:	4840      	ldr	r0, [pc, #256]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001f5e:	f006 fe77 	bl	8008c50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f62:	2201      	movs	r2, #1
 8001f64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f68:	483d      	ldr	r0, [pc, #244]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001f6a:	f006 fe71 	bl	8008c50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f74:	483a      	ldr	r0, [pc, #232]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001f76:	f006 fe6b 	bl	8008c50 <HAL_GPIO_WritePin>
}
 8001f7a:	e06c      	b.n	8002056 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8001f7c:	78fb      	ldrb	r3, [r7, #3]
 8001f7e:	2b43      	cmp	r3, #67	; 0x43
 8001f80:	d112      	bne.n	8001fa8 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f82:	2201      	movs	r2, #1
 8001f84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f88:	4835      	ldr	r0, [pc, #212]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001f8a:	f006 fe61 	bl	8008c50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f94:	4832      	ldr	r0, [pc, #200]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001f96:	f006 fe5b 	bl	8008c50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fa0:	482f      	ldr	r0, [pc, #188]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001fa2:	f006 fe55 	bl	8008c50 <HAL_GPIO_WritePin>
}
 8001fa6:	e056      	b.n	8002056 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8001fa8:	78fb      	ldrb	r3, [r7, #3]
 8001faa:	2b4d      	cmp	r3, #77	; 0x4d
 8001fac:	d112      	bne.n	8001fd4 <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fb4:	482a      	ldr	r0, [pc, #168]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001fb6:	f006 fe4b 	bl	8008c50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fc0:	4827      	ldr	r0, [pc, #156]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001fc2:	f006 fe45 	bl	8008c50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fcc:	4824      	ldr	r0, [pc, #144]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001fce:	f006 fe3f 	bl	8008c50 <HAL_GPIO_WritePin>
}
 8001fd2:	e040      	b.n	8002056 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 8001fd4:	78fb      	ldrb	r3, [r7, #3]
 8001fd6:	2b59      	cmp	r3, #89	; 0x59
 8001fd8:	d112      	bne.n	8002000 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fe0:	481f      	ldr	r0, [pc, #124]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001fe2:	f006 fe35 	bl	8008c50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fec:	481c      	ldr	r0, [pc, #112]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001fee:	f006 fe2f 	bl	8008c50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ff8:	4819      	ldr	r0, [pc, #100]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001ffa:	f006 fe29 	bl	8008c50 <HAL_GPIO_WritePin>
}
 8001ffe:	e02a      	b.n	8002056 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8002000:	78fb      	ldrb	r3, [r7, #3]
 8002002:	2b57      	cmp	r3, #87	; 0x57
 8002004:	d112      	bne.n	800202c <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002006:	2200      	movs	r2, #0
 8002008:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800200c:	4814      	ldr	r0, [pc, #80]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 800200e:	f006 fe1f 	bl	8008c50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8002012:	2200      	movs	r2, #0
 8002014:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002018:	4811      	ldr	r0, [pc, #68]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 800201a:	f006 fe19 	bl	8008c50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800201e:	2200      	movs	r2, #0
 8002020:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002024:	480e      	ldr	r0, [pc, #56]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8002026:	f006 fe13 	bl	8008c50 <HAL_GPIO_WritePin>
}
 800202a:	e014      	b.n	8002056 <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 800202c:	78fb      	ldrb	r3, [r7, #3]
 800202e:	2b7e      	cmp	r3, #126	; 0x7e
 8002030:	d111      	bne.n	8002056 <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002032:	2201      	movs	r2, #1
 8002034:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002038:	4809      	ldr	r0, [pc, #36]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 800203a:	f006 fe09 	bl	8008c50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800203e:	2201      	movs	r2, #1
 8002040:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002044:	4806      	ldr	r0, [pc, #24]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8002046:	f006 fe03 	bl	8008c50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800204a:	2201      	movs	r2, #1
 800204c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002050:	4803      	ldr	r0, [pc, #12]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8002052:	f006 fdfd 	bl	8008c50 <HAL_GPIO_WritePin>
}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40020000 	.word	0x40020000

08002064 <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	460b      	mov	r3, r1
 800206e:	70fb      	strb	r3, [r7, #3]
 8002070:	4613      	mov	r3, r2
 8002072:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 8002074:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d106      	bne.n	800208a <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800207c:	2201      	movs	r2, #1
 800207e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002082:	4813      	ldr	r0, [pc, #76]	; (80020d0 <_ZN3LED2LREaa+0x6c>)
 8002084:	f006 fde4 	bl	8008c50 <HAL_GPIO_WritePin>
 8002088:	e009      	b.n	800209e <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 800208a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d105      	bne.n	800209e <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002092:	2200      	movs	r2, #0
 8002094:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002098:	480d      	ldr	r0, [pc, #52]	; (80020d0 <_ZN3LED2LREaa+0x6c>)
 800209a:	f006 fdd9 	bl	8008c50 <HAL_GPIO_WritePin>

	if(r_status == 1)
 800209e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d106      	bne.n	80020b4 <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80020a6:	2201      	movs	r2, #1
 80020a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020ac:	4808      	ldr	r0, [pc, #32]	; (80020d0 <_ZN3LED2LREaa+0x6c>)
 80020ae:	f006 fdcf 	bl	8008c50 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 80020b2:	e009      	b.n	80020c8 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 80020b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d105      	bne.n	80020c8 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80020bc:	2200      	movs	r2, #0
 80020be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020c2:	4803      	ldr	r0, [pc, #12]	; (80020d0 <_ZN3LED2LREaa+0x6c>)
 80020c4:	f006 fdc4 	bl	8008c50 <HAL_GPIO_WritePin>
}
 80020c8:	bf00      	nop
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40020000 	.word	0x40020000

080020d4 <_ZN10LineSensorC1Ev>:
#include "Macro.h"
#include "AQM0802.h"

float mon_sens, mon_sens_lpf;

LineSensor::LineSensor()
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b092      	sub	sp, #72	; 0x48
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff fe92 	bl	8001e0c <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	637b      	str	r3, [r7, #52]	; 0x34
 80020ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ee:	647b      	str	r3, [r7, #68]	; 0x44
 80020f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020f2:	331c      	adds	r3, #28
 80020f4:	633b      	str	r3, [r7, #48]	; 0x30
 80020f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80020f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d008      	beq.n	8002110 <_ZN10LineSensorC1Ev+0x3c>
 80020fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002100:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 8002102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002104:	2200      	movs	r2, #0
 8002106:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8002108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800210a:	3302      	adds	r3, #2
 800210c:	647b      	str	r3, [r7, #68]	; 0x44
 800210e:	e7f2      	b.n	80020f6 <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002116:	62bb      	str	r3, [r7, #40]	; 0x28
 8002118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800211a:	643b      	str	r3, [r7, #64]	; 0x40
 800211c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800211e:	3338      	adds	r3, #56	; 0x38
 8002120:	627b      	str	r3, [r7, #36]	; 0x24
 8002122:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	429a      	cmp	r2, r3
 8002128:	d009      	beq.n	800213e <_ZN10LineSensorC1Ev+0x6a>
 800212a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800212c:	623b      	str	r3, [r7, #32]
		s = 0;
 800212e:	6a3b      	ldr	r3, [r7, #32]
 8002130:	f04f 0200 	mov.w	r2, #0
 8002134:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 8002136:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002138:	3304      	adds	r3, #4
 800213a:	643b      	str	r3, [r7, #64]	; 0x40
 800213c:	e7f1      	b.n	8002122 <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002144:	61fb      	str	r3, [r7, #28]
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	63fb      	str	r3, [r7, #60]	; 0x3c
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	3338      	adds	r3, #56	; 0x38
 800214e:	61bb      	str	r3, [r7, #24]
 8002150:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	429a      	cmp	r2, r3
 8002156:	d009      	beq.n	800216c <_ZN10LineSensorC1Ev+0x98>
 8002158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800215a:	617b      	str	r3, [r7, #20]
		m = 0;
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	f04f 0200 	mov.w	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 8002164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002166:	3304      	adds	r3, #4
 8002168:	63fb      	str	r3, [r7, #60]	; 0x3c
 800216a:	e7f1      	b.n	8002150 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8002172:	613b      	str	r3, [r7, #16]
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	63bb      	str	r3, [r7, #56]	; 0x38
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	3338      	adds	r3, #56	; 0x38
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	429a      	cmp	r2, r3
 8002184:	d009      	beq.n	800219a <_ZN10LineSensorC1Ev+0xc6>
 8002186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002188:	60bb      	str	r3, [r7, #8]
		s = 1;
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002190:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 8002192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002194:	3304      	adds	r3, #4
 8002196:	63bb      	str	r3, [r7, #56]	; 0x38
 8002198:	e7f1      	b.n	800217e <_ZN10LineSensorC1Ev+0xaa>
	}

}
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4618      	mov	r0, r3
 800219e:	3748      	adds	r7, #72	; 0x48
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	220e      	movs	r2, #14
 80021b0:	4619      	mov	r1, r3
 80021b2:	4803      	ldr	r0, [pc, #12]	; (80021c0 <_ZN10LineSensor8ADCStartEv+0x1c>)
 80021b4:	f005 fb1c 	bl	80077f0 <HAL_ADC_Start_DMA>
}
 80021b8:	bf00      	nop
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	20035a6c 	.word	0x20035a6c

080021c4 <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 80021cc:	2300      	movs	r3, #0
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2b0d      	cmp	r3, #13
 80021d4:	dc2f      	bgt.n	8002236 <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	3392      	adds	r3, #146	; 0x92
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	3304      	adds	r3, #4
 80021e2:	ed93 7a00 	vldr	s14, [r3]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80021ee:	ee07 3a90 	vmov	s15, r3
 80021f2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	33a0      	adds	r3, #160	; 0xa0
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	3304      	adds	r3, #4
 8002202:	edd3 7a00 	vldr	s15, [r3]
 8002206:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800220a:	4b14      	ldr	r3, [pc, #80]	; (800225c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	4619      	mov	r1, r3
 8002210:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	460b      	mov	r3, r1
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	1a5b      	subs	r3, r3, r1
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	68f9      	ldr	r1, [r7, #12]
 8002220:	440b      	add	r3, r1
 8002222:	3306      	adds	r3, #6
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4413      	add	r3, r2
 8002228:	3304      	adds	r3, #4
 800222a:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	3301      	adds	r3, #1
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	e7cc      	b.n	80021d0 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 8002236:	4b09      	ldr	r3, [pc, #36]	; (800225c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	3301      	adds	r3, #1
 800223c:	b2da      	uxtb	r2, r3
 800223e:	4b07      	ldr	r3, [pc, #28]	; (800225c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002240:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 8002242:	4b06      	ldr	r3, [pc, #24]	; (800225c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	2b09      	cmp	r3, #9
 8002248:	d902      	bls.n	8002250 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 800224a:	4b04      	ldr	r3, [pc, #16]	; (800225c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800224c:	2200      	movs	r2, #0
 800224e:	701a      	strb	r2, [r3, #0]


}
 8002250:	bf00      	nop
 8002252:	3714      	adds	r7, #20
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	2000021c 	.word	0x2000021c

08002260 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 8002260:	b5b0      	push	{r4, r5, r7, lr}
 8002262:	b08e      	sub	sp, #56	; 0x38
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
	float temp_val[10];
	static float pre_sensor[AD_DATA_SIZE];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002268:	2300      	movs	r3, #0
 800226a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800226e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002272:	2b0d      	cmp	r3, #13
 8002274:	f200 80b8 	bhi.w	80023e8 <_ZN10LineSensor18updateSensorValuesEv+0x188>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002278:	2300      	movs	r3, #0
 800227a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800227e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002282:	2b09      	cmp	r3, #9
 8002284:	d81c      	bhi.n	80022c0 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 8002286:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800228a:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 800228e:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	4613      	mov	r3, r2
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	1a9b      	subs	r3, r3, r2
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	4423      	add	r3, r4
 800229e:	3306      	adds	r3, #6
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4403      	add	r3, r0
 80022a4:	3304      	adds	r3, #4
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	008b      	lsls	r3, r1, #2
 80022aa:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022ae:	440b      	add	r3, r1
 80022b0:	3b30      	subs	r3, #48	; 0x30
 80022b2:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80022b4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80022b8:	3301      	adds	r3, #1
 80022ba:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80022be:	e7de      	b.n	800227e <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 80022c0:	2300      	movs	r3, #0
 80022c2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80022c6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022ca:	2b09      	cmp	r3, #9
 80022cc:	d84d      	bhi.n	800236a <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 80022ce:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022d2:	3301      	adds	r3, #1
 80022d4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80022d8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022dc:	2b09      	cmp	r3, #9
 80022de:	d83e      	bhi.n	800235e <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 80022e0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022ea:	4413      	add	r3, r2
 80022ec:	3b30      	subs	r3, #48	; 0x30
 80022ee:	ed93 7a00 	vldr	s14, [r3]
 80022f2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022fc:	4413      	add	r3, r2
 80022fe:	3b30      	subs	r3, #48	; 0x30
 8002300:	edd3 7a00 	vldr	s15, [r3]
 8002304:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800230c:	d521      	bpl.n	8002352 <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 800230e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002318:	4413      	add	r3, r2
 800231a:	3b30      	subs	r3, #48	; 0x30
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 8002320:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8002324:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002328:	0092      	lsls	r2, r2, #2
 800232a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800232e:	440a      	add	r2, r1
 8002330:	3a30      	subs	r2, #48	; 0x30
 8002332:	6812      	ldr	r2, [r2, #0]
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800233a:	440b      	add	r3, r1
 800233c:	3b30      	subs	r3, #48	; 0x30
 800233e:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 8002340:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800234a:	4413      	add	r3, r2
 800234c:	3b30      	subs	r3, #48	; 0x30
 800234e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002350:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 8002352:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002356:	3301      	adds	r3, #1
 8002358:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800235c:	e7bc      	b.n	80022d8 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 800235e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002362:	3301      	adds	r3, #1
 8002364:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002368:	e7ad      	b.n	80022c6 <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = ((R_LINESENSE)*(temp_val[5]) + (1.0 - (R_LINESENSE))* (pre_sensor[ad_cnt]));
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	4618      	mov	r0, r3
 800236e:	f7fe f903 	bl	8000578 <__aeabi_f2d>
 8002372:	a32a      	add	r3, pc, #168	; (adr r3, 800241c <_ZN10LineSensor18updateSensorValuesEv+0x1bc>)
 8002374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002378:	f7fe f956 	bl	8000628 <__aeabi_dmul>
 800237c:	4603      	mov	r3, r0
 800237e:	460c      	mov	r4, r1
 8002380:	4625      	mov	r5, r4
 8002382:	461c      	mov	r4, r3
 8002384:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002388:	4a21      	ldr	r2, [pc, #132]	; (8002410 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4413      	add	r3, r2
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4618      	mov	r0, r3
 8002392:	f7fe f8f1 	bl	8000578 <__aeabi_f2d>
 8002396:	a31c      	add	r3, pc, #112	; (adr r3, 8002408 <_ZN10LineSensor18updateSensorValuesEv+0x1a8>)
 8002398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800239c:	f7fe f944 	bl	8000628 <__aeabi_dmul>
 80023a0:	4602      	mov	r2, r0
 80023a2:	460b      	mov	r3, r1
 80023a4:	4620      	mov	r0, r4
 80023a6:	4629      	mov	r1, r5
 80023a8:	f7fd ff88 	bl	80002bc <__adddf3>
 80023ac:	4603      	mov	r3, r0
 80023ae:	460c      	mov	r4, r1
 80023b0:	461a      	mov	r2, r3
 80023b2:	4623      	mov	r3, r4
 80023b4:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 80023b8:	4610      	mov	r0, r2
 80023ba:	4619      	mov	r1, r3
 80023bc:	f7fe fc2c 	bl	8000c18 <__aeabi_d2f>
 80023c0:	4601      	mov	r1, r0
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	6019      	str	r1, [r3, #0]
		pre_sensor[ad_cnt] = temp_val[5];
 80023ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80023d2:	69fa      	ldr	r2, [r7, #28]
 80023d4:	490e      	ldr	r1, [pc, #56]	; (8002410 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	440b      	add	r3, r1
 80023da:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80023dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80023e0:	3301      	adds	r3, #1
 80023e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80023e6:	e742      	b.n	800226e <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}

	mon_sens = store_vals_[5][5];
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80023ee:	4a09      	ldr	r2, [pc, #36]	; (8002414 <_ZN10LineSensor18updateSensorValuesEv+0x1b4>)
 80023f0:	6013      	str	r3, [r2, #0]
	mon_sens_lpf = sensor[5];
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80023f8:	4a07      	ldr	r2, [pc, #28]	; (8002418 <_ZN10LineSensor18updateSensorValuesEv+0x1b8>)
 80023fa:	6013      	str	r3, [r2, #0]
}
 80023fc:	bf00      	nop
 80023fe:	3738      	adds	r7, #56	; 0x38
 8002400:	46bd      	mov	sp, r7
 8002402:	bdb0      	pop	{r4, r5, r7, pc}
 8002404:	f3af 8000 	nop.w
 8002408:	66666666 	.word	0x66666666
 800240c:	3fee6666 	.word	0x3fee6666
 8002410:	20000220 	.word	0x20000220
 8002414:	20000214 	.word	0x20000214
 8002418:	20000218 	.word	0x20000218
 800241c:	9999999a 	.word	0x9999999a
 8002420:	3fa99999 	.word	0x3fa99999

08002424 <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 8002424:	b590      	push	{r4, r7, lr}
 8002426:	b0a9      	sub	sp, #164	; 0xa4
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 800242c:	2064      	movs	r0, #100	; 0x64
 800242e:	f005 f979 	bl	8007724 <HAL_Delay>

	lcd_clear();
 8002432:	f7fe fe35 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8002436:	2100      	movs	r1, #0
 8002438:	2000      	movs	r0, #0
 800243a:	f7fe fe41 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 800243e:	48b1      	ldr	r0, [pc, #708]	; (8002704 <_ZN10LineSensor11calibrationEv+0x2e0>)
 8002440:	f7fe fe68 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8002444:	2101      	movs	r1, #1
 8002446:	2000      	movs	r0, #0
 8002448:	f7fe fe3a 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 800244c:	48ae      	ldr	r0, [pc, #696]	; (8002708 <_ZN10LineSensor11calibrationEv+0x2e4>)
 800244e:	f7fe fe61 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002452:	2300      	movs	r3, #0
 8002454:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8002458:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800245c:	2b0d      	cmp	r3, #13
 800245e:	d823      	bhi.n	80024a8 <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 8002460:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8002464:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002468:	6879      	ldr	r1, [r7, #4]
 800246a:	32b0      	adds	r2, #176	; 0xb0
 800246c:	0092      	lsls	r2, r2, #2
 800246e:	440a      	add	r2, r1
 8002470:	6812      	ldr	r2, [r2, #0]
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002478:	440b      	add	r3, r1
 800247a:	3b60      	subs	r3, #96	; 0x60
 800247c:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 800247e:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8002482:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	32b0      	adds	r2, #176	; 0xb0
 800248a:	0092      	lsls	r2, r2, #2
 800248c:	440a      	add	r2, r1
 800248e:	6812      	ldr	r2, [r2, #0]
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002496:	440b      	add	r3, r1
 8002498:	3b98      	subs	r3, #152	; 0x98
 800249a:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800249c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80024a0:	3301      	adds	r3, #1
 80024a2:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 80024a6:	e7d7      	b.n	8002458 <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff fcb8 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	bf14      	ite	ne
 80024ba:	2301      	movne	r3, #1
 80024bc:	2300      	moveq	r3, #0
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d079      	beq.n	80025b8 <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80024c4:	2300      	movs	r3, #0
 80024c6:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 80024ca:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80024ce:	2b0d      	cmp	r3, #13
 80024d0:	d850      	bhi.n	8002574 <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 80024d2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80024dc:	4413      	add	r3, r2
 80024de:	3b60      	subs	r3, #96	; 0x60
 80024e0:	ed93 7a00 	vldr	s14, [r3]
 80024e4:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	33b0      	adds	r3, #176	; 0xb0
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	edd3 7a00 	vldr	s15, [r3]
 80024f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024fc:	d50f      	bpl.n	800251e <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 80024fe:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8002502:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002506:	6879      	ldr	r1, [r7, #4]
 8002508:	32b0      	adds	r2, #176	; 0xb0
 800250a:	0092      	lsls	r2, r2, #2
 800250c:	440a      	add	r2, r1
 800250e:	6812      	ldr	r2, [r2, #0]
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002516:	440b      	add	r3, r1
 8002518:	3b60      	subs	r3, #96	; 0x60
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	e024      	b.n	8002568 <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 800251e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002528:	4413      	add	r3, r2
 800252a:	3b98      	subs	r3, #152	; 0x98
 800252c:	ed93 7a00 	vldr	s14, [r3]
 8002530:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	33b0      	adds	r3, #176	; 0xb0
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	edd3 7a00 	vldr	s15, [r3]
 8002540:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002548:	dd0e      	ble.n	8002568 <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 800254a:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 800254e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	32b0      	adds	r2, #176	; 0xb0
 8002556:	0092      	lsls	r2, r2, #2
 8002558:	440a      	add	r2, r1
 800255a:	6812      	ldr	r2, [r2, #0]
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002562:	440b      	add	r3, r1
 8002564:	3b98      	subs	r3, #152	; 0x98
 8002566:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002568:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800256c:	3301      	adds	r3, #1
 800256e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8002572:	e7aa      	b.n	80024ca <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f203 23be 	addw	r3, r3, #702	; 0x2be
 800257a:	4618      	mov	r0, r3
 800257c:	f001 fb4e 	bl	8003c1c <_ZN12RotarySwitch8getValueEv>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	bf0c      	ite	eq
 8002586:	2301      	moveq	r3, #1
 8002588:	2300      	movne	r3, #0
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2b00      	cmp	r3, #0
 800258e:	d009      	beq.n	80025a4 <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8002596:	2201      	movs	r2, #1
 8002598:	f04f 31ff 	mov.w	r1, #4294967295
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff fd61 	bl	8002064 <_ZN3LED2LREaa>
 80025a2:	e781      	b.n	80024a8 <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80025aa:	2200      	movs	r2, #0
 80025ac:	f04f 31ff 	mov.w	r1, #4294967295
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff fd57 	bl	8002064 <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 80025b6:	e777      	b.n	80024a8 <_ZN10LineSensor11calibrationEv+0x84>

		}
	}

	for(const auto &m : max_values){
 80025b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80025bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80025c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80025c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025cc:	3338      	adds	r3, #56	; 0x38
 80025ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80025d2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80025d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025da:	429a      	cmp	r2, r3
 80025dc:	d016      	beq.n	800260c <_ZN10LineSensor11calibrationEv+0x1e8>
 80025de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		printf("%f, ", m);
 80025e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7fd ffc3 	bl	8000578 <__aeabi_f2d>
 80025f2:	4603      	mov	r3, r0
 80025f4:	460c      	mov	r4, r1
 80025f6:	461a      	mov	r2, r3
 80025f8:	4623      	mov	r3, r4
 80025fa:	4844      	ldr	r0, [pc, #272]	; (800270c <_ZN10LineSensor11calibrationEv+0x2e8>)
 80025fc:	f011 fc72 	bl	8013ee4 <iprintf>
	for(const auto &m : max_values){
 8002600:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002604:	3304      	adds	r3, #4
 8002606:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800260a:	e7e2      	b.n	80025d2 <_ZN10LineSensor11calibrationEv+0x1ae>
	}
		printf("\n");
 800260c:	200a      	movs	r0, #10
 800260e:	f011 fc81 	bl	8013f14 <putchar>
	for(const auto &m : min_values){
 8002612:	f107 0308 	add.w	r3, r7, #8
 8002616:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800261a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800261e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002622:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002626:	3338      	adds	r3, #56	; 0x38
 8002628:	67fb      	str	r3, [r7, #124]	; 0x7c
 800262a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800262e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002630:	429a      	cmp	r2, r3
 8002632:	d014      	beq.n	800265e <_ZN10LineSensor11calibrationEv+0x23a>
 8002634:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002638:	67bb      	str	r3, [r7, #120]	; 0x78
		printf("%f, ", m);
 800263a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4618      	mov	r0, r3
 8002640:	f7fd ff9a 	bl	8000578 <__aeabi_f2d>
 8002644:	4603      	mov	r3, r0
 8002646:	460c      	mov	r4, r1
 8002648:	461a      	mov	r2, r3
 800264a:	4623      	mov	r3, r4
 800264c:	482f      	ldr	r0, [pc, #188]	; (800270c <_ZN10LineSensor11calibrationEv+0x2e8>)
 800264e:	f011 fc49 	bl	8013ee4 <iprintf>
	for(const auto &m : min_values){
 8002652:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002656:	3304      	adds	r3, #4
 8002658:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800265c:	e7e5      	b.n	800262a <_ZN10LineSensor11calibrationEv+0x206>
	}
		printf("\n");
 800265e:	200a      	movs	r0, #10
 8002660:	f011 fc58 	bl	8013f14 <putchar>


	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002664:	2300      	movs	r3, #0
 8002666:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 800266a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800266e:	2b0d      	cmp	r3, #13
 8002670:	d826      	bhi.n	80026c0 <_ZN10LineSensor11calibrationEv+0x29c>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 8002672:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800267c:	4413      	add	r3, r2
 800267e:	3b60      	subs	r3, #96	; 0x60
 8002680:	ed93 7a00 	vldr	s14, [r3]
 8002684:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800268e:	4413      	add	r3, r2
 8002690:	3b98      	subs	r3, #152	; 0x98
 8002692:	edd3 7a00 	vldr	s15, [r3]
 8002696:	ee37 7a67 	vsub.f32	s14, s14, s15
 800269a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800269e:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8002710 <_ZN10LineSensor11calibrationEv+0x2ec>
 80026a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	3392      	adds	r3, #146	; 0x92
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	4413      	add	r3, r2
 80026ae:	3304      	adds	r3, #4
 80026b0:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80026b4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80026b8:	3301      	adds	r3, #1
 80026ba:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 80026be:	e7d4      	b.n	800266a <_ZN10LineSensor11calibrationEv+0x246>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80026c0:	2300      	movs	r3, #0
 80026c2:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 80026c6:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 80026ca:	2b0d      	cmp	r3, #13
 80026cc:	d815      	bhi.n	80026fa <_ZN10LineSensor11calibrationEv+0x2d6>
		offset_values_[i] = min_values[i];
 80026ce:	f8b7 2090 	ldrh.w	r2, [r7, #144]	; 0x90
 80026d2:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 80026d6:	0092      	lsls	r2, r2, #2
 80026d8:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80026dc:	440a      	add	r2, r1
 80026de:	3a98      	subs	r2, #152	; 0x98
 80026e0:	6812      	ldr	r2, [r2, #0]
 80026e2:	6879      	ldr	r1, [r7, #4]
 80026e4:	33a0      	adds	r3, #160	; 0xa0
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	440b      	add	r3, r1
 80026ea:	3304      	adds	r3, #4
 80026ec:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80026ee:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 80026f2:	3301      	adds	r3, #1
 80026f4:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 80026f8:	e7e5      	b.n	80026c6 <_ZN10LineSensor11calibrationEv+0x2a2>
	}


}
 80026fa:	bf00      	nop
 80026fc:	37a4      	adds	r7, #164	; 0xa4
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd90      	pop	{r4, r7, pc}
 8002702:	bf00      	nop
 8002704:	080180fc 	.word	0x080180fc
 8002708:	08018108 	.word	0x08018108
 800270c:	08018114 	.word	0x08018114
 8002710:	447a0000 	.word	0x447a0000

08002714 <_ZN10LineSensor13emergencyStopEv>:
{
	printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 8002714:	b480      	push	{r7}
 8002716:	b089      	sub	sp, #36	; 0x24
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
	uint8_t out_cnt = 0;
 800271c:	2300      	movs	r3, #0
 800271e:	77fb      	strb	r3, [r7, #31]
	static uint8_t cnt = 0;

	for(const auto & s : sensor){
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002726:	613b      	str	r3, [r7, #16]
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	61bb      	str	r3, [r7, #24]
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	3338      	adds	r3, #56	; 0x38
 8002730:	60fb      	str	r3, [r7, #12]
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	429a      	cmp	r2, r3
 8002738:	d012      	beq.n	8002760 <_ZN10LineSensor13emergencyStopEv+0x4c>
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	60bb      	str	r3, [r7, #8]
		if(s >= 700) out_cnt++;
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	edd3 7a00 	vldr	s15, [r3]
 8002744:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800279c <_ZN10LineSensor13emergencyStopEv+0x88>
 8002748:	eef4 7ac7 	vcmpe.f32	s15, s14
 800274c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002750:	db02      	blt.n	8002758 <_ZN10LineSensor13emergencyStopEv+0x44>
 8002752:	7ffb      	ldrb	r3, [r7, #31]
 8002754:	3301      	adds	r3, #1
 8002756:	77fb      	strb	r3, [r7, #31]
	for(const auto & s : sensor){
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	3304      	adds	r3, #4
 800275c:	61bb      	str	r3, [r7, #24]
 800275e:	e7e8      	b.n	8002732 <_ZN10LineSensor13emergencyStopEv+0x1e>
	}

	bool flag;
	if(out_cnt >= AD_DATA_SIZE){
 8002760:	7ffb      	ldrb	r3, [r7, #31]
 8002762:	2b0d      	cmp	r3, #13
 8002764:	d906      	bls.n	8002774 <_ZN10LineSensor13emergencyStopEv+0x60>
		cnt++;
 8002766:	4b0e      	ldr	r3, [pc, #56]	; (80027a0 <_ZN10LineSensor13emergencyStopEv+0x8c>)
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	3301      	adds	r3, #1
 800276c:	b2da      	uxtb	r2, r3
 800276e:	4b0c      	ldr	r3, [pc, #48]	; (80027a0 <_ZN10LineSensor13emergencyStopEv+0x8c>)
 8002770:	701a      	strb	r2, [r3, #0]
 8002772:	e002      	b.n	800277a <_ZN10LineSensor13emergencyStopEv+0x66>
	}
	else{
		cnt = 0;
 8002774:	4b0a      	ldr	r3, [pc, #40]	; (80027a0 <_ZN10LineSensor13emergencyStopEv+0x8c>)
 8002776:	2200      	movs	r2, #0
 8002778:	701a      	strb	r2, [r3, #0]
	}

	if(cnt >= 100){
 800277a:	4b09      	ldr	r3, [pc, #36]	; (80027a0 <_ZN10LineSensor13emergencyStopEv+0x8c>)
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	2b63      	cmp	r3, #99	; 0x63
 8002780:	d902      	bls.n	8002788 <_ZN10LineSensor13emergencyStopEv+0x74>
		flag = true;
 8002782:	2301      	movs	r3, #1
 8002784:	75fb      	strb	r3, [r7, #23]
 8002786:	e001      	b.n	800278c <_ZN10LineSensor13emergencyStopEv+0x78>
	}
	else flag = false;
 8002788:	2300      	movs	r3, #0
 800278a:	75fb      	strb	r3, [r7, #23]

	return flag;
 800278c:	7dfb      	ldrb	r3, [r7, #23]

}
 800278e:	4618      	mov	r0, r3
 8002790:	3724      	adds	r7, #36	; 0x24
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	442f0000 	.word	0x442f0000
 80027a0:	20000258 	.word	0x20000258

080027a4 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6Logger>:

float mon_diff, mon_diff_lpf;

uint16_t mon_store_cnt;

LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger) :
 80027a4:	b480      	push	{r7}
 80027a6:	b087      	sub	sp, #28
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
 80027b0:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0), kp_velo_(0), kd_velo_(0), ki_velo_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0), target_velocity_(0), logging_flag_(false)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f04f 0200 	mov.w	r2, #0
 80027b8:	621a      	str	r2, [r3, #32]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f04f 0200 	mov.w	r2, #0
 80027c0:	625a      	str	r2, [r3, #36]	; 0x24
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f04f 0200 	mov.w	r2, #0
 80027c8:	629a      	str	r2, [r3, #40]	; 0x28
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f04f 0200 	mov.w	r2, #0
 80027d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f04f 0200 	mov.w	r2, #0
 80027d8:	631a      	str	r2, [r3, #48]	; 0x30
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f04f 0200 	mov.w	r2, #0
 80027e0:	635a      	str	r2, [r3, #52]	; 0x34
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f04f 0200 	mov.w	r2, #0
 80027f8:	63da      	str	r2, [r3, #60]	; 0x3c
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f04f 0200 	mov.w	r2, #0
 8002800:	675a      	str	r2, [r3, #116]	; 0x74
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
{
	motor_ = motor;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	68ba      	ldr	r2, [r7, #8]
 800280e:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6a3a      	ldr	r2, [r7, #32]
 8002820:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002826:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800282c:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002832:	61da      	str	r2, [r3, #28]

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002834:	2300      	movs	r3, #0
 8002836:	82fb      	strh	r3, [r7, #22]
 8002838:	8afb      	ldrh	r3, [r7, #22]
 800283a:	f241 726f 	movw	r2, #5999	; 0x176f
 800283e:	4293      	cmp	r3, r2
 8002840:	d80c      	bhi.n	800285c <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6Logger+0xb8>
		velocityTable[i] = 0;
 8002842:	8afb      	ldrh	r3, [r7, #22]
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	331e      	adds	r3, #30
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	3304      	adds	r3, #4
 800284e:	f04f 0200 	mov.w	r2, #0
 8002852:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002854:	8afb      	ldrh	r3, [r7, #22]
 8002856:	3301      	adds	r3, #1
 8002858:	82fb      	strh	r3, [r7, #22]
 800285a:	e7ed      	b.n	8002838 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6Logger+0x94>
	}
}
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	4618      	mov	r0, r3
 8002860:	371c      	adds	r7, #28
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	0000      	movs	r0, r0
 800286c:	0000      	movs	r0, r0
	...

08002870 <_ZN9LineTrace9calcErrorEv>:

// --------private--------- //
float LineTrace::calcError()
{
 8002870:	b5b0      	push	{r4, r5, r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
	static float pre_diff;
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002888:	ee37 7a27 	vadd.f32	s14, s14, s15
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8002894:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 80028a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 80028ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 80028b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 80028c4:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	edd3 6ab7 	vldr	s13, [r3, #732]	; 0x2dc
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 80028d8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 80028e4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 80028f0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 80028fc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002908:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8002914:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002918:	ee77 7a67 	vsub.f32	s15, s14, s15
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 800291c:	edc7 7a03 	vstr	s15, [r7, #12]
	mon_diff = diff;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4a1f      	ldr	r2, [pc, #124]	; (80029a0 <_ZN9LineTrace9calcErrorEv+0x130>)
 8002924:	6013      	str	r3, [r2, #0]

	diff = ((R_DIFF)*(diff) + (1.0 - (R_DIFF))* (pre_diff));
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	4618      	mov	r0, r3
 800292a:	f7fd fe25 	bl	8000578 <__aeabi_f2d>
 800292e:	a318      	add	r3, pc, #96	; (adr r3, 8002990 <_ZN9LineTrace9calcErrorEv+0x120>)
 8002930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002934:	f7fd fe78 	bl	8000628 <__aeabi_dmul>
 8002938:	4603      	mov	r3, r0
 800293a:	460c      	mov	r4, r1
 800293c:	4625      	mov	r5, r4
 800293e:	461c      	mov	r4, r3
 8002940:	4b18      	ldr	r3, [pc, #96]	; (80029a4 <_ZN9LineTrace9calcErrorEv+0x134>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4618      	mov	r0, r3
 8002946:	f7fd fe17 	bl	8000578 <__aeabi_f2d>
 800294a:	a313      	add	r3, pc, #76	; (adr r3, 8002998 <_ZN9LineTrace9calcErrorEv+0x128>)
 800294c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002950:	f7fd fe6a 	bl	8000628 <__aeabi_dmul>
 8002954:	4602      	mov	r2, r0
 8002956:	460b      	mov	r3, r1
 8002958:	4620      	mov	r0, r4
 800295a:	4629      	mov	r1, r5
 800295c:	f7fd fcae 	bl	80002bc <__adddf3>
 8002960:	4603      	mov	r3, r0
 8002962:	460c      	mov	r4, r1
 8002964:	4618      	mov	r0, r3
 8002966:	4621      	mov	r1, r4
 8002968:	f7fe f956 	bl	8000c18 <__aeabi_d2f>
 800296c:	4603      	mov	r3, r0
 800296e:	60fb      	str	r3, [r7, #12]
	mon_diff_lpf = diff;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	4a0d      	ldr	r2, [pc, #52]	; (80029a8 <_ZN9LineTrace9calcErrorEv+0x138>)
 8002974:	6013      	str	r3, [r2, #0]

	pre_diff = diff;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	4a0a      	ldr	r2, [pc, #40]	; (80029a4 <_ZN9LineTrace9calcErrorEv+0x134>)
 800297a:	6013      	str	r3, [r2, #0]

	return diff;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	ee07 3a90 	vmov	s15, r3

}
 8002982:	eeb0 0a67 	vmov.f32	s0, s15
 8002986:	3710      	adds	r7, #16
 8002988:	46bd      	mov	sp, r7
 800298a:	bdb0      	pop	{r4, r5, r7, pc}
 800298c:	f3af 8000 	nop.w
 8002990:	47ae147b 	.word	0x47ae147b
 8002994:	3fb47ae1 	.word	0x3fb47ae1
 8002998:	d70a3d71 	.word	0xd70a3d71
 800299c:	3fed70a3 	.word	0x3fed70a3
 80029a0:	2000025c 	.word	0x2000025c
 80029a4:	20000268 	.word	0x20000268
 80029a8:	20000260 	.word	0x20000260
 80029ac:	00000000 	.word	0x00000000

080029b0 <_ZN9LineTrace8pidTraceEv>:
	float phi = atan2(norm_l - norm_r, 1.0);
	delta_theta = (phi * ANGLE_BETWEEN_SENSORS/2) / (PI / 4);
}

void LineTrace::pidTrace()
{
 80029b0:	b5b0      	push	{r4, r5, r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f7ff ff59 	bl	8002870 <_ZN9LineTrace9calcErrorEv>
 80029be:	ed87 0a05 	vstr	s0, [r7, #20]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d007      	beq.n	80029dc <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 80029cc:	4b3c      	ldr	r3, [pc, #240]	; (8002ac0 <_ZN9LineTrace8pidTraceEv+0x110>)
 80029ce:	f04f 0200 	mov.w	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	}

	p = kp_ * diff;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	edd3 7a08 	vldr	s15, [r3, #32]
 80029e2:	ed97 7a05 	vldr	s14, [r7, #20]
 80029e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029ea:	edc7 7a04 	vstr	s15, [r7, #16]
	d = kd_ * (diff - pre_diff) / DELTA_T;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80029f4:	4b33      	ldr	r3, [pc, #204]	; (8002ac4 <_ZN9LineTrace8pidTraceEv+0x114>)
 80029f6:	edd3 7a00 	vldr	s15, [r3]
 80029fa:	edd7 6a05 	vldr	s13, [r7, #20]
 80029fe:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a06:	ee17 0a90 	vmov	r0, s15
 8002a0a:	f7fd fdb5 	bl	8000578 <__aeabi_f2d>
 8002a0e:	a32a      	add	r3, pc, #168	; (adr r3, 8002ab8 <_ZN9LineTrace8pidTraceEv+0x108>)
 8002a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a14:	f7fd ff32 	bl	800087c <__aeabi_ddiv>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	460c      	mov	r4, r1
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	4621      	mov	r1, r4
 8002a20:	f7fe f8fa 	bl	8000c18 <__aeabi_d2f>
 8002a24:	4603      	mov	r3, r0
 8002a26:	60fb      	str	r3, [r7, #12]
	i += ki_ * diff * DELTA_T;
 8002a28:	4b25      	ldr	r3, [pc, #148]	; (8002ac0 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7fd fda3 	bl	8000578 <__aeabi_f2d>
 8002a32:	4604      	mov	r4, r0
 8002a34:	460d      	mov	r5, r1
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002a3c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a44:	ee17 0a90 	vmov	r0, s15
 8002a48:	f7fd fd96 	bl	8000578 <__aeabi_f2d>
 8002a4c:	a31a      	add	r3, pc, #104	; (adr r3, 8002ab8 <_ZN9LineTrace8pidTraceEv+0x108>)
 8002a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a52:	f7fd fde9 	bl	8000628 <__aeabi_dmul>
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	4620      	mov	r0, r4
 8002a5c:	4629      	mov	r1, r5
 8002a5e:	f7fd fc2d 	bl	80002bc <__adddf3>
 8002a62:	4603      	mov	r3, r0
 8002a64:	460c      	mov	r4, r1
 8002a66:	4618      	mov	r0, r3
 8002a68:	4621      	mov	r1, r4
 8002a6a:	f7fe f8d5 	bl	8000c18 <__aeabi_d2f>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	4b13      	ldr	r3, [pc, #76]	; (8002ac0 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002a72:	601a      	str	r2, [r3, #0]

	float rotation_ratio = p + d + i;
 8002a74:	ed97 7a04 	vldr	s14, [r7, #16]
 8002a78:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a80:	4b0f      	ldr	r3, [pc, #60]	; (8002ac0 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002a82:	edd3 7a00 	vldr	s15, [r3]
 8002a86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a8a:	edc7 7a02 	vstr	s15, [r7, #8]

	//motor_->setRatio(left_ratio, right_ratio);
	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	689a      	ldr	r2, [r3, #8]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8002a98:	edd7 0a02 	vldr	s1, [r7, #8]
 8002a9c:	eeb0 0a67 	vmov.f32	s0, s15
 8002aa0:	4610      	mov	r0, r2
 8002aa2:	f001 fc29 	bl	80042f8 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002aa6:	4a07      	ldr	r2, [pc, #28]	; (8002ac4 <_ZN9LineTrace8pidTraceEv+0x114>)
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	6013      	str	r3, [r2, #0]

}
 8002aac:	bf00      	nop
 8002aae:	3718      	adds	r7, #24
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bdb0      	pop	{r4, r5, r7, pc}
 8002ab4:	f3af 8000 	nop.w
 8002ab8:	d2f1a9fc 	.word	0xd2f1a9fc
 8002abc:	3f50624d 	.word	0x3f50624d
 8002ac0:	20000270 	.word	0x20000270
 8002ac4:	2000026c 	.word	0x2000026c

08002ac8 <_ZN9LineTrace11loggerStartEv>:
	monitor_target_omega = target_omega;
	monitor_r = r;
}

void LineTrace::loggerStart()
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalCnt();
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	695b      	ldr	r3, [r3, #20]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7fe fcdf 	bl	8001498 <_ZN7Encoder13clearTotalCntEv>
	odometry_->clearPotition();
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f000 feee 	bl	80038c0 <_ZN8Odometry13clearPotitionEv>
	//logger_->start();

	logging_flag_ = true;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
}
 8002aec:	bf00      	nop
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	69db      	ldr	r3, [r3, #28]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f000 fc82 	bl	800340a <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
}
 8002b0e:	bf00      	nop
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
	...

08002b18 <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b087      	sub	sp, #28
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
	static uint16_t cnt;
	float sensor_edge_val_l = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2]) / 3;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002b30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8002b3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b40:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002b44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b48:	edc7 7a04 	vstr	s15, [r7, #16]
	float sensor_edge_val_r = (line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]) / 3;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	ed93 7abb 	vldr	s14, [r3, #748]	; 0x2ec
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002b5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8002b68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b6c:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002b70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b74:	edc7 7a03 	vstr	s15, [r7, #12]
	bool flag = false;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	75fb      	strb	r3, [r7, #23]

	if(sensor_edge_val_l < 500 && sensor_edge_val_r < 500){
 8002b7c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b80:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002bd0 <_ZN9LineTrace11isCrossLineEv+0xb8>
 8002b84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b8c:	d50f      	bpl.n	8002bae <_ZN9LineTrace11isCrossLineEv+0x96>
 8002b8e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b92:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002bd0 <_ZN9LineTrace11isCrossLineEv+0xb8>
 8002b96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b9e:	d506      	bpl.n	8002bae <_ZN9LineTrace11isCrossLineEv+0x96>
		cnt++;
 8002ba0:	4b0c      	ldr	r3, [pc, #48]	; (8002bd4 <_ZN9LineTrace11isCrossLineEv+0xbc>)
 8002ba2:	881b      	ldrh	r3, [r3, #0]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	4b0a      	ldr	r3, [pc, #40]	; (8002bd4 <_ZN9LineTrace11isCrossLineEv+0xbc>)
 8002baa:	801a      	strh	r2, [r3, #0]
 8002bac:	e002      	b.n	8002bb4 <_ZN9LineTrace11isCrossLineEv+0x9c>
	}
	else{
		cnt = 0;
 8002bae:	4b09      	ldr	r3, [pc, #36]	; (8002bd4 <_ZN9LineTrace11isCrossLineEv+0xbc>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 5){
 8002bb4:	4b07      	ldr	r3, [pc, #28]	; (8002bd4 <_ZN9LineTrace11isCrossLineEv+0xbc>)
 8002bb6:	881b      	ldrh	r3, [r3, #0]
 8002bb8:	2b04      	cmp	r3, #4
 8002bba:	d901      	bls.n	8002bc0 <_ZN9LineTrace11isCrossLineEv+0xa8>
		flag = true;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	75fb      	strb	r3, [r7, #23]
		//cnt = 0;
	}

	return flag;
 8002bc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	371c      	adds	r7, #28
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	43fa0000 	.word	0x43fa0000
 8002bd4:	20000274 	.word	0x20000274

08002bd8 <_ZN9LineTrace4initEv>:

}

// -------public---------- //
void LineTrace::init()
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 8002be0:	f107 0314 	add.w	r3, r7, #20
 8002be4:	2201      	movs	r2, #1
 8002be6:	4912      	ldr	r1, [pc, #72]	; (8002c30 <_ZN9LineTrace4initEv+0x58>)
 8002be8:	4812      	ldr	r0, [pc, #72]	; (8002c34 <_ZN9LineTrace4initEv+0x5c>)
 8002bea:	f7fe fd63 	bl	80016b4 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 8002bee:	f107 0310 	add.w	r3, r7, #16
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	4910      	ldr	r1, [pc, #64]	; (8002c38 <_ZN9LineTrace4initEv+0x60>)
 8002bf6:	480f      	ldr	r0, [pc, #60]	; (8002c34 <_ZN9LineTrace4initEv+0x5c>)
 8002bf8:	f7fe fd5c 	bl	80016b4 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8002bfc:	f107 030c 	add.w	r3, r7, #12
 8002c00:	2201      	movs	r2, #1
 8002c02:	490e      	ldr	r1, [pc, #56]	; (8002c3c <_ZN9LineTrace4initEv+0x64>)
 8002c04:	480b      	ldr	r0, [pc, #44]	; (8002c34 <_ZN9LineTrace4initEv+0x5c>)
 8002c06:	f7fe fd55 	bl	80016b4 <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 8002c0a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c0e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c12:	edd7 6a03 	vldr	s13, [r7, #12]
 8002c16:	eeb0 1a66 	vmov.f32	s2, s13
 8002c1a:	eef0 0a47 	vmov.f32	s1, s14
 8002c1e:	eeb0 0a67 	vmov.f32	s0, s15
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 f80c 	bl	8002c40 <_ZN9LineTrace7setGainEfff>

}
 8002c28:	bf00      	nop
 8002c2a:	3718      	adds	r7, #24
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	08018154 	.word	0x08018154
 8002c34:	0801815c 	.word	0x0801815c
 8002c38:	08018164 	.word	0x08018164
 8002c3c:	0801816c 	.word	0x0801816c

08002c40 <_ZN9LineTrace7setGainEfff>:

void LineTrace::setGain(float kp, float ki, float kd)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	ed87 0a02 	vstr	s0, [r7, #8]
 8002c4c:	edc7 0a01 	vstr	s1, [r7, #4]
 8002c50:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	68ba      	ldr	r2, [r7, #8]
 8002c58:	621a      	str	r2, [r3, #32]
	ki_ = ki;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	629a      	str	r2, [r3, #40]	; 0x28
	kd_ = kd;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002c66:	bf00      	nop
 8002c68:	3714      	adds	r7, #20
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr

08002c72 <_ZN9LineTrace5getKpEv>:
	ki_velo_ = ki;
	kd_velo_ = kd;
}

float LineTrace::getKp()
{
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
	return kp_;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	ee07 3a90 	vmov	s15, r3
}
 8002c82:	eeb0 0a67 	vmov.f32	s0, s15
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
	return ki_;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9c:	ee07 3a90 	vmov	s15, r3
}
 8002ca0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
	return kd_;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cba:	ee07 3a90 	vmov	s15, r3
}
 8002cbe:	eeb0 0a67 	vmov.f32	s0, s15
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <_ZN9LineTrace14setNormalRatioEf>:
{
	return kd_velo_;
}

void LineTrace::setNormalRatio(float ratio)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002cde:	bf00      	nop
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b083      	sub	sp, #12
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
 8002cf2:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	675a      	str	r2, [r3, #116]	; 0x74
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <_ZN9LineTrace4flipEv>:

void LineTrace::flip()
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d053      	beq.n	8002dc2 <_ZN9LineTrace4flipEv+0xba>
		// ---- line following processing -----//
		pidTrace();
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f7ff fe48 	bl	80029b0 <_ZN9LineTrace8pidTraceEv>
		//pidAngularVelocityTrace();
		//steeringAngleTrace();

		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f7ff fef9 	bl	8002b18 <_ZN9LineTrace11isCrossLineEv>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d011      	beq.n	8002d50 <_ZN9LineTrace4flipEv+0x48>
			led_.LR(1, -1);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	330c      	adds	r3, #12
 8002d30:	f04f 32ff 	mov.w	r2, #4294967295
 8002d34:	2101      	movs	r1, #1
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7ff f994 	bl	8002064 <_ZN3LED2LREaa>
			side_sensor_->enableIgnore();
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f001 f871 	bl	8003e28 <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearCrossLineIgnoreDistance();
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fe fbc9 	bl	80014e2 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
		}
		else{
		}
		if(side_sensor_->getIgnoreFlag() == true && encoder_->getCrossLineIgnoreDistance() >= 200){
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f001 f881 	bl	8003e5c <_ZN10SideSensor13getIgnoreFlagEv>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00f      	beq.n	8002d80 <_ZN9LineTrace4flipEv+0x78>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	695b      	ldr	r3, [r3, #20]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7fe fbad 	bl	80014c4 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 8002d6a:	eeb0 7a40 	vmov.f32	s14, s0
 8002d6e:	eddf 7a17 	vldr	s15, [pc, #92]	; 8002dcc <_ZN9LineTrace4flipEv+0xc4>
 8002d72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d7a:	db01      	blt.n	8002d80 <_ZN9LineTrace4flipEv+0x78>
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e000      	b.n	8002d82 <_ZN9LineTrace4flipEv+0x7a>
 8002d80:	2300      	movs	r3, #0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00c      	beq.n	8002da0 <_ZN9LineTrace4flipEv+0x98>
			side_sensor_->disableIgnore();
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f001 f859 	bl	8003e42 <_ZN10SideSensor13disableIgnoreEv>
			led_.LR(0, -1);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	330c      	adds	r3, #12
 8002d94:	f04f 32ff 	mov.w	r2, #4294967295
 8002d98:	2100      	movs	r1, #0
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff f962 	bl	8002064 <_ZN3LED2LREaa>
		}

		// ----- emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff fcb5 	bl	8002714 <_ZN10LineSensor13emergencyStopEv>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d008      	beq.n	8002dc2 <_ZN9LineTrace4flipEv+0xba>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	eddf 0a06 	vldr	s1, [pc, #24]	; 8002dd0 <_ZN9LineTrace4flipEv+0xc8>
 8002db8:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8002dd0 <_ZN9LineTrace4flipEv+0xc8>
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f001 fa9b 	bl	80042f8 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
		}
		else{
			//led_.LR(0, -1);
		}
	}
}
 8002dc2:	bf00      	nop
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	43480000 	.word	0x43480000
 8002dd0:	00000000 	.word	0x00000000

08002dd4 <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	i_reset_flag_ = true;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	velocity_ctrl_->start();
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f001 fada 	bl	80043aa <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f001 f804 	bl	8003e08 <_ZN10SideSensor17resetWhiteLineCntEv>
}
 8002e00:	bf00      	nop
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	velocity_ctrl_->stop();
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f001 fad7 	bl	80043d0 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	330c      	adds	r3, #12
 8002e26:	2201      	movs	r2, #1
 8002e28:	f04f 31ff 	mov.w	r1, #4294967295
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff f919 	bl	8002064 <_ZN3LED2LREaa>
	logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	69d8      	ldr	r0, [r3, #28]
 8002e36:	4b0b      	ldr	r3, [pc, #44]	; (8002e64 <_ZN9LineTrace4stopEv+0x5c>)
 8002e38:	4a0b      	ldr	r2, [pc, #44]	; (8002e68 <_ZN9LineTrace4stopEv+0x60>)
 8002e3a:	490c      	ldr	r1, [pc, #48]	; (8002e6c <_ZN9LineTrace4stopEv+0x64>)
 8002e3c:	f000 fa35 	bl	80032aa <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
	led_.LR(-1, 0);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	330c      	adds	r3, #12
 8002e44:	2200      	movs	r2, #0
 8002e46:	f04f 31ff 	mov.w	r1, #4294967295
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff f90a 	bl	8002064 <_ZN3LED2LREaa>
	logger_->resetLogs();
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	69db      	ldr	r3, [r3, #28]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f000 fa4b 	bl	80032f0 <_ZN6Logger9resetLogsEv>
}
 8002e5a:	bf00      	nop
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	08018174 	.word	0x08018174
 8002e68:	08018180 	.word	0x08018180
 8002e6c:	08018190 	.word	0x08018190

08002e70 <_ZN9LineTrace7runningEv>:

void LineTrace::running()
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	737b      	strb	r3, [r7, #13]
	start();
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f7ff ffa7 	bl	8002dd4 <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 8002e86:	7b7b      	ldrb	r3, [r7, #13]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d148      	bne.n	8002f1e <_ZN9LineTrace7runningEv+0xae>
		switch(stage){
 8002e8c:	89fb      	ldrh	r3, [r7, #14]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d002      	beq.n	8002e98 <_ZN9LineTrace7runningEv+0x28>
 8002e92:	2b0a      	cmp	r3, #10
 8002e94:	d020      	beq.n	8002ed8 <_ZN9LineTrace7runningEv+0x68>
 8002e96:	e041      	b.n	8002f1c <_ZN9LineTrace7runningEv+0xac>
		case 0:
			if(side_sensor_->getWhiteLineCntR() == 1){
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f000 ffa7 	bl	8003df0 <_ZN10SideSensor16getWhiteLineCntREv>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	bf0c      	ite	eq
 8002ea8:	2301      	moveq	r3, #1
 8002eaa:	2300      	movne	r3, #0
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d031      	beq.n	8002f16 <_ZN9LineTrace7runningEv+0xa6>
				loggerStart();
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f7ff fe08 	bl	8002ac8 <_ZN9LineTrace11loggerStartEv>
				encoder_->clearCrossLineIgnoreDistance();
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7fe fb10 	bl	80014e2 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				led_.LR(1, -1);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	330c      	adds	r3, #12
 8002ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8002eca:	2101      	movs	r1, #1
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff f8c9 	bl	8002064 <_ZN3LED2LREaa>
				stage = 10;
 8002ed2:	230a      	movs	r3, #10
 8002ed4:	81fb      	strh	r3, [r7, #14]
			}

			break;
 8002ed6:	e01e      	b.n	8002f16 <_ZN9LineTrace7runningEv+0xa6>

		case 10:
			if(side_sensor_->getWhiteLineCntR() == 2){
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f000 ff87 	bl	8003df0 <_ZN10SideSensor16getWhiteLineCntREv>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	bf0c      	ite	eq
 8002ee8:	2301      	moveq	r3, #1
 8002eea:	2300      	movne	r3, #0
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d013      	beq.n	8002f1a <_ZN9LineTrace7runningEv+0xaa>
				loggerStop();
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7ff fdfe 	bl	8002af4 <_ZN9LineTrace10loggerStopEv>
				HAL_Delay(100); //Run through after the goal
 8002ef8:	2064      	movs	r0, #100	; 0x64
 8002efa:	f004 fc13 	bl	8007724 <HAL_Delay>

				setTargetVelocity(0);
 8002efe:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8002f2c <_ZN9LineTrace7runningEv+0xbc>
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f7ff fef1 	bl	8002cea <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 8002f08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002f0c:	f004 fc0a 	bl	8007724 <HAL_Delay>

				goal_flag = true;
 8002f10:	2301      	movs	r3, #1
 8002f12:	737b      	strb	r3, [r7, #13]

			}

			break;
 8002f14:	e001      	b.n	8002f1a <_ZN9LineTrace7runningEv+0xaa>
			break;
 8002f16:	bf00      	nop
 8002f18:	e7b5      	b.n	8002e86 <_ZN9LineTrace7runningEv+0x16>
			break;
 8002f1a:	bf00      	nop
	while(goal_flag == false){
 8002f1c:	e7b3      	b.n	8002e86 <_ZN9LineTrace7runningEv+0x16>
		}
	}

	stop();
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f7ff ff72 	bl	8002e08 <_ZN9LineTrace4stopEv>

}
 8002f24:	bf00      	nop
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	00000000 	.word	0x00000000

08002f30 <_ZN9LineTrace9storeLogsEv>:

void LineTrace::storeLogs()
{
 8002f30:	b590      	push	{r4, r7, lr}
 8002f32:	ed2d 8b02 	vpush	{d8}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true && encoder_->getTotalDistance() >= 10){
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00f      	beq.n	8002f66 <_ZN9LineTrace9storeLogsEv+0x36>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fe fa65 	bl	800141a <_ZN7Encoder16getTotalDistanceEv>
 8002f50:	eeb0 7a40 	vmov.f32	s14, s0
 8002f54:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8002f58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f60:	db01      	blt.n	8002f66 <_ZN9LineTrace9storeLogsEv+0x36>
 8002f62:	2301      	movs	r3, #1
 8002f64:	e000      	b.n	8002f68 <_ZN9LineTrace9storeLogsEv+0x38>
 8002f66:	2300      	movs	r3, #0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d02b      	beq.n	8002fc4 <_ZN9LineTrace9storeLogsEv+0x94>
		logger_->storeDistanceAndTheta(encoder_->getTotalDistance(), odometry_->getTheta());
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	69dc      	ldr	r4, [r3, #28]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	695b      	ldr	r3, [r3, #20]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7fe fa50 	bl	800141a <_ZN7Encoder16getTotalDistanceEv>
 8002f7a:	eeb0 8a40 	vmov.f32	s16, s0
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f000 fc8b 	bl	800389e <_ZN8Odometry8getThetaEv>
 8002f88:	ec53 2b10 	vmov	r2, r3, d0
 8002f8c:	4610      	mov	r0, r2
 8002f8e:	4619      	mov	r1, r3
 8002f90:	f7fd fe42 	bl	8000c18 <__aeabi_d2f>
 8002f94:	4603      	mov	r3, r0
 8002f96:	ee00 3a90 	vmov	s1, r3
 8002f9a:	eeb0 0a48 	vmov.f32	s0, s16
 8002f9e:	4620      	mov	r0, r4
 8002fa0:	f000 f911 	bl	80031c6 <_ZN6Logger21storeDistanceAndThetaEff>
		encoder_->clearTotalCnt();
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	695b      	ldr	r3, [r3, #20]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7fe fa75 	bl	8001498 <_ZN7Encoder13clearTotalCntEv>
		odometry_->clearPotition();
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f000 fc84 	bl	80038c0 <_ZN8Odometry13clearPotitionEv>
		mon_store_cnt++;
 8002fb8:	4b05      	ldr	r3, [pc, #20]	; (8002fd0 <_ZN9LineTrace9storeLogsEv+0xa0>)
 8002fba:	881b      	ldrh	r3, [r3, #0]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	4b03      	ldr	r3, [pc, #12]	; (8002fd0 <_ZN9LineTrace9storeLogsEv+0xa0>)
 8002fc2:	801a      	strh	r2, [r3, #0]
	}
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	ecbd 8b02 	vpop	{d8}
 8002fce:	bd90      	pop	{r4, r7, pc}
 8002fd0:	20000264 	.word	0x20000264

08002fd4 <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_dis_(0){}
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8002fe2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	701a      	strb	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8002ff0:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	801a      	strh	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8002ffe:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8003002:	2200      	movs	r2, #0
 8003004:	801a      	strh	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800300c:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 8003010:	2200      	movs	r2, #0
 8003012:	801a      	strh	r2, [r3, #0]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4618      	mov	r0, r3
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
	...

08003024 <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
	bool ret = false;
 800302c:	2300      	movs	r3, #0
 800302e:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 8003030:	f7fe fbcc 	bl	80017cc <sd_mount>
 8003034:	4603      	mov	r3, r0
 8003036:	2b01      	cmp	r3, #1
 8003038:	bf0c      	ite	eq
 800303a:	2301      	moveq	r3, #1
 800303c:	2300      	movne	r3, #0
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2b00      	cmp	r3, #0
 8003042:	d019      	beq.n	8003078 <_ZN6Logger10sdCardInitEv+0x54>
	  printf("mount success\r\n");
 8003044:	481b      	ldr	r0, [pc, #108]	; (80030b4 <_ZN6Logger10sdCardInitEv+0x90>)
 8003046:	f010 ffd5 	bl	8013ff4 <puts>

	  lcd_clear();
 800304a:	f7fe f829 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 800304e:	2100      	movs	r1, #0
 8003050:	2000      	movs	r0, #0
 8003052:	f7fe f835 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8003056:	4818      	ldr	r0, [pc, #96]	; (80030b8 <_ZN6Logger10sdCardInitEv+0x94>)
 8003058:	f7fe f85c 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 800305c:	2101      	movs	r1, #1
 800305e:	2000      	movs	r0, #0
 8003060:	f7fe f82e 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 8003064:	4815      	ldr	r0, [pc, #84]	; (80030bc <_ZN6Logger10sdCardInitEv+0x98>)
 8003066:	f7fe f855 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 800306a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800306e:	f004 fb59 	bl	8007724 <HAL_Delay>

	  ret = true;
 8003072:	2301      	movs	r3, #1
 8003074:	73fb      	strb	r3, [r7, #15]
 8003076:	e018      	b.n	80030aa <_ZN6Logger10sdCardInitEv+0x86>
	}
	else{
	  printf("mount error\r\n");
 8003078:	4811      	ldr	r0, [pc, #68]	; (80030c0 <_ZN6Logger10sdCardInitEv+0x9c>)
 800307a:	f010 ffbb 	bl	8013ff4 <puts>

	  lcd_clear();
 800307e:	f7fe f80f 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8003082:	2100      	movs	r1, #0
 8003084:	2000      	movs	r0, #0
 8003086:	f7fe f81b 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 800308a:	480b      	ldr	r0, [pc, #44]	; (80030b8 <_ZN6Logger10sdCardInitEv+0x94>)
 800308c:	f7fe f842 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8003090:	2101      	movs	r1, #1
 8003092:	2000      	movs	r0, #0
 8003094:	f7fe f814 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 8003098:	480a      	ldr	r0, [pc, #40]	; (80030c4 <_ZN6Logger10sdCardInitEv+0xa0>)
 800309a:	f7fe f83b 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 800309e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80030a2:	f004 fb3f 	bl	8007724 <HAL_Delay>

	  ret = false;
 80030a6:	2300      	movs	r3, #0
 80030a8:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 80030aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	0801819c 	.word	0x0801819c
 80030b8:	080181ac 	.word	0x080181ac
 80030bc:	080181b8 	.word	0x080181b8
 80030c0:	080181c0 	.word	0x080181c0
 80030c4:	080181d0 	.word	0x080181d0

080030c8 <_ZN6Logger8storeLogEf>:

	}

}
void Logger::storeLog(float data)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80030da:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d029      	beq.n	8003138 <_ZN6Logger8storeLogEf+0x70>
		store_data_float_[log_index_tim_] = data;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80030ea:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 80030ee:	881b      	ldrh	r3, [r3, #0]
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4413      	add	r3, r2
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003100:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 8003104:	881b      	ldrh	r3, [r3, #0]
 8003106:	3301      	adds	r3, #1
 8003108:	b29a      	uxth	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003110:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 8003114:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800311c:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 8003120:	881b      	ldrh	r3, [r3, #0]
 8003122:	f241 3287 	movw	r2, #4999	; 0x1387
 8003126:	4293      	cmp	r3, r2
 8003128:	d906      	bls.n	8003138 <_ZN6Logger8storeLogEf+0x70>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003130:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 8003134:	2200      	movs	r2, #0
 8003136:	801a      	strh	r2, [r3, #0]
	}
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <_ZN6Logger9storeLog2Ef>:
void Logger::storeLog2(float data)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003156:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d02c      	beq.n	80031ba <_ZN6Logger9storeLog2Ef+0x76>
		store_data_float2_[log_index_tim2_] = data;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003166:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 800316a:	881b      	ldrh	r3, [r3, #0]
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8003172:	3308      	adds	r3, #8
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4413      	add	r3, r2
 8003178:	683a      	ldr	r2, [r7, #0]
 800317a:	601a      	str	r2, [r3, #0]

		log_index_tim2_++;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003182:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8003186:	881b      	ldrh	r3, [r3, #0]
 8003188:	3301      	adds	r3, #1
 800318a:	b29a      	uxth	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003192:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8003196:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800319e:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 80031a2:	881b      	ldrh	r3, [r3, #0]
 80031a4:	f241 3287 	movw	r2, #4999	; 0x1387
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d906      	bls.n	80031ba <_ZN6Logger9storeLog2Ef+0x76>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80031b2:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 80031b6:	2200      	movs	r2, #0
 80031b8:	801a      	strh	r2, [r3, #0]
	}
}
 80031ba:	bf00      	nop
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr

080031c6 <_ZN6Logger21storeDistanceAndThetaEff>:
{

}

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 80031c6:	b480      	push	{r7}
 80031c8:	b085      	sub	sp, #20
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	60f8      	str	r0, [r7, #12]
 80031ce:	ed87 0a02 	vstr	s0, [r7, #8]
 80031d2:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80031dc:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 80031e0:	881b      	ldrh	r3, [r3, #0]
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80031e8:	3310      	adds	r3, #16
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4413      	add	r3, r2
 80031ee:	68ba      	ldr	r2, [r7, #8]
 80031f0:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80031f8:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 80031fc:	881b      	ldrh	r3, [r3, #0]
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003212:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 8003216:	881b      	ldrh	r3, [r3, #0]
 8003218:	3301      	adds	r3, #1
 800321a:	b29a      	uxth	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003222:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 8003226:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800322e:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 8003232:	881b      	ldrh	r3, [r3, #0]
 8003234:	f241 726f 	movw	r2, #5999	; 0x176f
 8003238:	4293      	cmp	r3, r2
 800323a:	d906      	bls.n	800324a <_ZN6Logger21storeDistanceAndThetaEff+0x84>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003242:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 8003246:	2200      	movs	r2, #0
 8003248:	801a      	strh	r2, [r3, #0]
	//}
}
 800324a:	bf00      	nop
 800324c:	3714      	adds	r7, #20
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr

08003256 <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b086      	sub	sp, #24
 800325a:	af02      	add	r7, sp, #8
 800325c:	60f8      	str	r0, [r7, #12]
 800325e:	60b9      	str	r1, [r7, #8]
 8003260:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	2300      	movs	r3, #0
 8003266:	9300      	str	r3, [sp, #0]
 8003268:	4613      	mov	r3, r2
 800326a:	f241 3288 	movw	r2, #5000	; 0x1388
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	68b8      	ldr	r0, [r7, #8]
 8003272:	f7fe f9b9 	bl	80015e8 <sd_write_array_float>
}
 8003276:	bf00      	nop
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <_ZN6Logger9saveLogs2EPKcS1_>:
void Logger::saveLogs2(const char *folder_name, const char *file_name)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b086      	sub	sp, #24
 8003282:	af02      	add	r7, sp, #8
 8003284:	60f8      	str	r0, [r7, #12]
 8003286:	60b9      	str	r1, [r7, #8]
 8003288:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8003290:	3320      	adds	r3, #32
 8003292:	2200      	movs	r2, #0
 8003294:	9200      	str	r2, [sp, #0]
 8003296:	f241 3288 	movw	r2, #5000	; 0x1388
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	68b8      	ldr	r0, [r7, #8]
 800329e:	f7fe f9a3 	bl	80015e8 <sd_write_array_float>
}
 80032a2:	bf00      	nop
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:

void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b086      	sub	sp, #24
 80032ae:	af02      	add	r7, sp, #8
 80032b0:	60f8      	str	r0, [r7, #12]
 80032b2:	60b9      	str	r1, [r7, #8]
 80032b4:	607a      	str	r2, [r7, #4]
 80032b6:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 80032be:	3340      	adds	r3, #64	; 0x40
 80032c0:	2200      	movs	r2, #0
 80032c2:	9200      	str	r2, [sp, #0]
 80032c4:	f241 7270 	movw	r2, #6000	; 0x1770
 80032c8:	6879      	ldr	r1, [r7, #4]
 80032ca:	68b8      	ldr	r0, [r7, #8]
 80032cc:	f7fe f98c 	bl	80015e8 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f503 427a 	add.w	r2, r3, #64000	; 0xfa00
 80032d6:	2300      	movs	r3, #0
 80032d8:	9300      	str	r3, [sp, #0]
 80032da:	4613      	mov	r3, r2
 80032dc:	f241 7270 	movw	r2, #6000	; 0x1770
 80032e0:	6839      	ldr	r1, [r7, #0]
 80032e2:	68b8      	ldr	r0, [r7, #8]
 80032e4:	f7fe f980 	bl	80015e8 <sd_write_array_float>
}
 80032e8:	bf00      	nop
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <_ZN6Logger9resetLogsEv>:
	user_fclose();
}
*/

void Logger::resetLogs()
{
 80032f0:	b480      	push	{r7}
 80032f2:	b093      	sub	sp, #76	; 0x4c
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
	for(auto &log : store_data_float_){
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	637b      	str	r3, [r7, #52]	; 0x34
 80032fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032fe:	647b      	str	r3, [r7, #68]	; 0x44
 8003300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003302:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8003306:	3320      	adds	r3, #32
 8003308:	633b      	str	r3, [r7, #48]	; 0x30
 800330a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800330c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800330e:	429a      	cmp	r2, r3
 8003310:	d009      	beq.n	8003326 <_ZN6Logger9resetLogsEv+0x36>
 8003312:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003314:	62fb      	str	r3, [r7, #44]	; 0x2c
		log = 0;
 8003316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003318:	f04f 0200 	mov.w	r2, #0
 800331c:	601a      	str	r2, [r3, #0]
	for(auto &log : store_data_float_){
 800331e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003320:	3304      	adds	r3, #4
 8003322:	647b      	str	r3, [r7, #68]	; 0x44
 8003324:	e7f1      	b.n	800330a <_ZN6Logger9resetLogsEv+0x1a>
	}
	for(auto &log : store_data_float2_){
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 800332c:	3320      	adds	r3, #32
 800332e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003332:	643b      	str	r3, [r7, #64]	; 0x40
 8003334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003336:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 800333a:	3320      	adds	r3, #32
 800333c:	627b      	str	r3, [r7, #36]	; 0x24
 800333e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003342:	429a      	cmp	r2, r3
 8003344:	d009      	beq.n	800335a <_ZN6Logger9resetLogsEv+0x6a>
 8003346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003348:	623b      	str	r3, [r7, #32]
		log = 0;
 800334a:	6a3b      	ldr	r3, [r7, #32]
 800334c:	f04f 0200 	mov.w	r2, #0
 8003350:	601a      	str	r2, [r3, #0]
	for(auto &log : store_data_float2_){
 8003352:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003354:	3304      	adds	r3, #4
 8003356:	643b      	str	r3, [r7, #64]	; 0x40
 8003358:	e7f1      	b.n	800333e <_ZN6Logger9resetLogsEv+0x4e>
	/*
	for(auto &log : store_data_uint16_){
		log = 0;
	}
	*/
	for(auto &log : store_distance_){
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8003360:	3340      	adds	r3, #64	; 0x40
 8003362:	61fb      	str	r3, [r7, #28]
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 800336e:	3340      	adds	r3, #64	; 0x40
 8003370:	61bb      	str	r3, [r7, #24]
 8003372:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	429a      	cmp	r2, r3
 8003378:	d009      	beq.n	800338e <_ZN6Logger9resetLogsEv+0x9e>
 800337a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800337c:	617b      	str	r3, [r7, #20]
		log = 0;
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	f04f 0200 	mov.w	r2, #0
 8003384:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance_){
 8003386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003388:	3304      	adds	r3, #4
 800338a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800338c:	e7f1      	b.n	8003372 <_ZN6Logger9resetLogsEv+0x82>
	}
	for(auto &log : store_theta_){
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f503 437a 	add.w	r3, r3, #64000	; 0xfa00
 8003394:	613b      	str	r3, [r7, #16]
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	63bb      	str	r3, [r7, #56]	; 0x38
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 80033a0:	3340      	adds	r3, #64	; 0x40
 80033a2:	60fb      	str	r3, [r7, #12]
 80033a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d009      	beq.n	80033c0 <_ZN6Logger9resetLogsEv+0xd0>
 80033ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ae:	60bb      	str	r3, [r7, #8]
		log = 0;
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	f04f 0200 	mov.w	r2, #0
 80033b6:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta_){
 80033b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ba:	3304      	adds	r3, #4
 80033bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80033be:	e7f1      	b.n	80033a4 <_ZN6Logger9resetLogsEv+0xb4>
	}

	log_index_tim_ = 0;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80033c6:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 80033ca:	2200      	movs	r2, #0
 80033cc:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80033d4:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 80033d8:	2200      	movs	r2, #0
 80033da:	801a      	strh	r2, [r3, #0]
}
 80033dc:	bf00      	nop
 80033de:	374c      	adds	r7, #76	; 0x4c
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <_ZN6Logger5startEv>:

void Logger::start()
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80033f6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 80033fa:	2201      	movs	r2, #1
 80033fc:	701a      	strb	r2, [r3, #0]
}
 80033fe:	bf00      	nop
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr

0800340a <_ZN6Logger4stopEv>:

void Logger::stop()
{
 800340a:	b480      	push	{r7}
 800340c:	b083      	sub	sp, #12
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003418:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 800341c:	2200      	movs	r2, #0
 800341e:	701a      	strb	r2, [r3, #0]
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	801a      	strh	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	805a      	strh	r2, [r3, #2]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4618      	mov	r0, r3
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
	...

08003450 <_ZN5Motor4initEv>:

void Motor::init()
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8003458:	2108      	movs	r1, #8
 800345a:	4805      	ldr	r0, [pc, #20]	; (8003470 <_ZN5Motor4initEv+0x20>)
 800345c:	f009 fb2a 	bl	800cab4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8003460:	210c      	movs	r1, #12
 8003462:	4803      	ldr	r0, [pc, #12]	; (8003470 <_ZN5Motor4initEv+0x20>)
 8003464:	f009 fb26 	bl	800cab4 <HAL_TIM_PWM_Start>

}
 8003468:	bf00      	nop
 800346a:	3708      	adds	r7, #8
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	20035a2c 	.word	0x20035a2c

08003474 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003482:	2b00      	cmp	r3, #0
 8003484:	da0d      	bge.n	80034a2 <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8003486:	2200      	movs	r2, #0
 8003488:	f44f 7100 	mov.w	r1, #512	; 0x200
 800348c:	481f      	ldr	r0, [pc, #124]	; (800350c <_ZN5Motor9motorCtrlEv+0x98>)
 800348e:	f005 fbdf 	bl	8008c50 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003498:	b29b      	uxth	r3, r3
 800349a:	425b      	negs	r3, r3
 800349c:	b29b      	uxth	r3, r3
 800349e:	81fb      	strh	r3, [r7, #14]
 80034a0:	e00a      	b.n	80034b8 <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 80034a2:	2201      	movs	r2, #1
 80034a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80034a8:	4818      	ldr	r0, [pc, #96]	; (800350c <_ZN5Motor9motorCtrlEv+0x98>)
 80034aa:	f005 fbd1 	bl	8008c50 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	da0d      	bge.n	80034de <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 80034c2:	2201      	movs	r2, #1
 80034c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80034c8:	4810      	ldr	r0, [pc, #64]	; (800350c <_ZN5Motor9motorCtrlEv+0x98>)
 80034ca:	f005 fbc1 	bl	8008c50 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	425b      	negs	r3, r3
 80034d8:	b29b      	uxth	r3, r3
 80034da:	81bb      	strh	r3, [r7, #12]
 80034dc:	e00a      	b.n	80034f4 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 80034de:	2200      	movs	r2, #0
 80034e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80034e4:	4809      	ldr	r0, [pc, #36]	; (800350c <_ZN5Motor9motorCtrlEv+0x98>)
 80034e6:	f005 fbb3 	bl	8008c50 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 80034f4:	89fa      	ldrh	r2, [r7, #14]
 80034f6:	4b06      	ldr	r3, [pc, #24]	; (8003510 <_ZN5Motor9motorCtrlEv+0x9c>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 80034fc:	89ba      	ldrh	r2, [r7, #12]
 80034fe:	4b04      	ldr	r3, [pc, #16]	; (8003510 <_ZN5Motor9motorCtrlEv+0x9c>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003504:	bf00      	nop
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	40020c00 	.word	0x40020c00
 8003510:	20035a2c 	.word	0x20035a2c

08003514 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8003514:	b590      	push	{r4, r7, lr}
 8003516:	b087      	sub	sp, #28
 8003518:	af00      	add	r7, sp, #0
 800351a:	6178      	str	r0, [r7, #20]
 800351c:	ed87 0b02 	vstr	d0, [r7, #8]
 8003520:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8003524:	f04f 0200 	mov.w	r2, #0
 8003528:	4b30      	ldr	r3, [pc, #192]	; (80035ec <_ZN5Motor8setRatioEdd+0xd8>)
 800352a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800352e:	f7fd fb0b 	bl	8000b48 <__aeabi_dcmpgt>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d005      	beq.n	8003544 <_ZN5Motor8setRatioEdd+0x30>
 8003538:	f04f 0300 	mov.w	r3, #0
 800353c:	4c2b      	ldr	r4, [pc, #172]	; (80035ec <_ZN5Motor8setRatioEdd+0xd8>)
 800353e:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8003542:	e00e      	b.n	8003562 <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8003544:	f04f 0200 	mov.w	r2, #0
 8003548:	4b29      	ldr	r3, [pc, #164]	; (80035f0 <_ZN5Motor8setRatioEdd+0xdc>)
 800354a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800354e:	f7fd fadd 	bl	8000b0c <__aeabi_dcmplt>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d004      	beq.n	8003562 <_ZN5Motor8setRatioEdd+0x4e>
 8003558:	f04f 0300 	mov.w	r3, #0
 800355c:	4c24      	ldr	r4, [pc, #144]	; (80035f0 <_ZN5Motor8setRatioEdd+0xdc>)
 800355e:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8003562:	f04f 0200 	mov.w	r2, #0
 8003566:	4b21      	ldr	r3, [pc, #132]	; (80035ec <_ZN5Motor8setRatioEdd+0xd8>)
 8003568:	e9d7 0100 	ldrd	r0, r1, [r7]
 800356c:	f7fd faec 	bl	8000b48 <__aeabi_dcmpgt>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d005      	beq.n	8003582 <_ZN5Motor8setRatioEdd+0x6e>
 8003576:	f04f 0300 	mov.w	r3, #0
 800357a:	4c1c      	ldr	r4, [pc, #112]	; (80035ec <_ZN5Motor8setRatioEdd+0xd8>)
 800357c:	e9c7 3400 	strd	r3, r4, [r7]
 8003580:	e00e      	b.n	80035a0 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8003582:	f04f 0200 	mov.w	r2, #0
 8003586:	4b1a      	ldr	r3, [pc, #104]	; (80035f0 <_ZN5Motor8setRatioEdd+0xdc>)
 8003588:	e9d7 0100 	ldrd	r0, r1, [r7]
 800358c:	f7fd fabe 	bl	8000b0c <__aeabi_dcmplt>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d004      	beq.n	80035a0 <_ZN5Motor8setRatioEdd+0x8c>
 8003596:	f04f 0300 	mov.w	r3, #0
 800359a:	4c15      	ldr	r4, [pc, #84]	; (80035f0 <_ZN5Motor8setRatioEdd+0xdc>)
 800359c:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 80035a0:	f04f 0200 	mov.w	r2, #0
 80035a4:	4b13      	ldr	r3, [pc, #76]	; (80035f4 <_ZN5Motor8setRatioEdd+0xe0>)
 80035a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80035aa:	f7fd f83d 	bl	8000628 <__aeabi_dmul>
 80035ae:	4603      	mov	r3, r0
 80035b0:	460c      	mov	r4, r1
 80035b2:	4618      	mov	r0, r3
 80035b4:	4621      	mov	r1, r4
 80035b6:	f7fd fae7 	bl	8000b88 <__aeabi_d2iz>
 80035ba:	4603      	mov	r3, r0
 80035bc:	b21a      	sxth	r2, r3
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 80035c2:	f04f 0200 	mov.w	r2, #0
 80035c6:	4b0b      	ldr	r3, [pc, #44]	; (80035f4 <_ZN5Motor8setRatioEdd+0xe0>)
 80035c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035cc:	f7fd f82c 	bl	8000628 <__aeabi_dmul>
 80035d0:	4603      	mov	r3, r0
 80035d2:	460c      	mov	r4, r1
 80035d4:	4618      	mov	r0, r3
 80035d6:	4621      	mov	r1, r4
 80035d8:	f7fd fad6 	bl	8000b88 <__aeabi_d2iz>
 80035dc:	4603      	mov	r3, r0
 80035de:	b21a      	sxth	r2, r3
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	805a      	strh	r2, [r3, #2]

}
 80035e4:	bf00      	nop
 80035e6:	371c      	adds	r7, #28
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd90      	pop	{r4, r7, pc}
 80035ec:	3ff00000 	.word	0x3ff00000
 80035f0:	bff00000 	.word	0xbff00000
 80035f4:	409c2000 	.word	0x409c2000

080035f8 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 80035f8:	b490      	push	{r4, r7}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
 8003604:	603b      	str	r3, [r7, #0]
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	f04f 0300 	mov.w	r3, #0
 800360c:	f04f 0400 	mov.w	r4, #0
 8003610:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	f04f 0300 	mov.w	r3, #0
 800361a:	f04f 0400 	mov.w	r4, #0
 800361e:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	f04f 0300 	mov.w	r3, #0
 8003628:	f04f 0400 	mov.w	r4, #0
 800362c:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	f04f 0300 	mov.w	r3, #0
 8003636:	f04f 0400 	mov.w	r4, #0
 800363a:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	f04f 0300 	mov.w	r3, #0
 8003644:	f04f 0400 	mov.w	r4, #0
 8003648:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
{
	encoder_ = encoder;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	68ba      	ldr	r2, [r7, #8]
 8003650:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	683a      	ldr	r2, [r7, #0]
 800365c:	609a      	str	r2, [r3, #8]
}
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	4618      	mov	r0, r3
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bc90      	pop	{r4, r7}
 8003668:	4770      	bx	lr
 800366a:	0000      	movs	r0, r0
 800366c:	0000      	movs	r0, r0
	...

08003670 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8003670:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003674:	b086      	sub	sp, #24
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	4618      	mov	r0, r3
 8003680:	f7fe fa72 	bl	8001b68 <_ZN3IMU8getOmegaEv>
 8003684:	ee10 3a10 	vmov	r3, s0
 8003688:	4618      	mov	r0, r3
 800368a:	f7fc ff75 	bl	8000578 <__aeabi_f2d>
 800368e:	4603      	mov	r3, r0
 8003690:	460c      	mov	r4, r1
 8003692:	e9c7 3404 	strd	r3, r4, [r7, #16]
	float distance = encoder_->getDistance();
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4618      	mov	r0, r3
 800369c:	f7fd feae 	bl	80013fc <_ZN7Encoder11getDistanceEv>
 80036a0:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 80036a4:	a376      	add	r3, pc, #472	; (adr r3, 8003880 <_ZN8Odometry12calcPotitionEv+0x210>)
 80036a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80036ae:	f7fc ffbb 	bl	8000628 <__aeabi_dmul>
 80036b2:	4603      	mov	r3, r0
 80036b4:	460c      	mov	r4, r1
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f7fc ff58 	bl	8000578 <__aeabi_f2d>
 80036c8:	4682      	mov	sl, r0
 80036ca:	468b      	mov	fp, r1
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80036d8:	f04f 0200 	mov.w	r2, #0
 80036dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80036e0:	f7fd f8cc 	bl	800087c <__aeabi_ddiv>
 80036e4:	4602      	mov	r2, r0
 80036e6:	460b      	mov	r3, r1
 80036e8:	4640      	mov	r0, r8
 80036ea:	4649      	mov	r1, r9
 80036ec:	f7fc fde6 	bl	80002bc <__adddf3>
 80036f0:	4602      	mov	r2, r0
 80036f2:	460b      	mov	r3, r1
 80036f4:	ec43 2b17 	vmov	d7, r2, r3
 80036f8:	eeb0 0a47 	vmov.f32	s0, s14
 80036fc:	eef0 0a67 	vmov.f32	s1, s15
 8003700:	f00e fd1e 	bl	8012140 <cos>
 8003704:	ec53 2b10 	vmov	r2, r3, d0
 8003708:	4650      	mov	r0, sl
 800370a:	4659      	mov	r1, fp
 800370c:	f7fc ff8c 	bl	8000628 <__aeabi_dmul>
 8003710:	4602      	mov	r2, r0
 8003712:	460b      	mov	r3, r1
 8003714:	4620      	mov	r0, r4
 8003716:	4629      	mov	r1, r5
 8003718:	f7fc fdd0 	bl	80002bc <__adddf3>
 800371c:	4603      	mov	r3, r0
 800371e:	460c      	mov	r4, r1
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f7fc ff23 	bl	8000578 <__aeabi_f2d>
 8003732:	4682      	mov	sl, r0
 8003734:	468b      	mov	fp, r1
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003742:	f04f 0200 	mov.w	r2, #0
 8003746:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800374a:	f7fd f897 	bl	800087c <__aeabi_ddiv>
 800374e:	4602      	mov	r2, r0
 8003750:	460b      	mov	r3, r1
 8003752:	4640      	mov	r0, r8
 8003754:	4649      	mov	r1, r9
 8003756:	f7fc fdb1 	bl	80002bc <__adddf3>
 800375a:	4602      	mov	r2, r0
 800375c:	460b      	mov	r3, r1
 800375e:	ec43 2b17 	vmov	d7, r2, r3
 8003762:	eeb0 0a47 	vmov.f32	s0, s14
 8003766:	eef0 0a67 	vmov.f32	s1, s15
 800376a:	f00e fd2d 	bl	80121c8 <sin>
 800376e:	ec53 2b10 	vmov	r2, r3, d0
 8003772:	4650      	mov	r0, sl
 8003774:	4659      	mov	r1, fp
 8003776:	f7fc ff57 	bl	8000628 <__aeabi_dmul>
 800377a:	4602      	mov	r2, r0
 800377c:	460b      	mov	r3, r1
 800377e:	4620      	mov	r0, r4
 8003780:	4629      	mov	r1, r5
 8003782:	f7fc fd9b 	bl	80002bc <__adddf3>
 8003786:	4603      	mov	r3, r0
 8003788:	460c      	mov	r4, r1
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_= theta_ + delta_theta_;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800379c:	461a      	mov	r2, r3
 800379e:	4623      	mov	r3, r4
 80037a0:	f7fc fd8c 	bl	80002bc <__adddf3>
 80037a4:	4603      	mov	r3, r0
 80037a6:	460c      	mov	r4, r1
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	e9c2 3408 	strd	r3, r4, [r2, #32]

	x_sens_ = x_robot_ + SENSOR_LENGTH * cos(theta_); //calculate a sensor position from robot's center position
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	ed93 7b08 	vldr	d7, [r3, #32]
 80037ba:	eeb0 0a47 	vmov.f32	s0, s14
 80037be:	eef0 0a67 	vmov.f32	s1, s15
 80037c2:	f00e fcbd 	bl	8012140 <cos>
 80037c6:	ec51 0b10 	vmov	r0, r1, d0
 80037ca:	f04f 0200 	mov.w	r2, #0
 80037ce:	4b28      	ldr	r3, [pc, #160]	; (8003870 <_ZN8Odometry12calcPotitionEv+0x200>)
 80037d0:	f7fc ff2a 	bl	8000628 <__aeabi_dmul>
 80037d4:	4602      	mov	r2, r0
 80037d6:	460b      	mov	r3, r1
 80037d8:	4620      	mov	r0, r4
 80037da:	4629      	mov	r1, r5
 80037dc:	f7fc fd6e 	bl	80002bc <__adddf3>
 80037e0:	4603      	mov	r3, r0
 80037e2:	460c      	mov	r4, r1
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	ed93 7b08 	vldr	d7, [r3, #32]
 80037f6:	eeb0 0a47 	vmov.f32	s0, s14
 80037fa:	eef0 0a67 	vmov.f32	s1, s15
 80037fe:	f00e fce3 	bl	80121c8 <sin>
 8003802:	ec51 0b10 	vmov	r0, r1, d0
 8003806:	f04f 0200 	mov.w	r2, #0
 800380a:	4b19      	ldr	r3, [pc, #100]	; (8003870 <_ZN8Odometry12calcPotitionEv+0x200>)
 800380c:	f7fc ff0c 	bl	8000628 <__aeabi_dmul>
 8003810:	4602      	mov	r2, r0
 8003812:	460b      	mov	r3, r1
 8003814:	4620      	mov	r0, r4
 8003816:	4629      	mov	r1, r5
 8003818:	f7fc fd50 	bl	80002bc <__adddf3>
 800381c:	4603      	mov	r3, r0
 800381e:	460c      	mov	r4, r1
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

	monitor_x = x_sens_;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 800382c:	4618      	mov	r0, r3
 800382e:	4621      	mov	r1, r4
 8003830:	f7fd f9f2 	bl	8000c18 <__aeabi_d2f>
 8003834:	4602      	mov	r2, r0
 8003836:	4b0f      	ldr	r3, [pc, #60]	; (8003874 <_ZN8Odometry12calcPotitionEv+0x204>)
 8003838:	601a      	str	r2, [r3, #0]
	monitor_y = y_sens_;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8003840:	4618      	mov	r0, r3
 8003842:	4621      	mov	r1, r4
 8003844:	f7fd f9e8 	bl	8000c18 <__aeabi_d2f>
 8003848:	4602      	mov	r2, r0
 800384a:	4b0b      	ldr	r3, [pc, #44]	; (8003878 <_ZN8Odometry12calcPotitionEv+0x208>)
 800384c:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8003854:	4618      	mov	r0, r3
 8003856:	4621      	mov	r1, r4
 8003858:	f7fd f9de 	bl	8000c18 <__aeabi_d2f>
 800385c:	4602      	mov	r2, r0
 800385e:	4b07      	ldr	r3, [pc, #28]	; (800387c <_ZN8Odometry12calcPotitionEv+0x20c>)
 8003860:	601a      	str	r2, [r3, #0]
}
 8003862:	bf00      	nop
 8003864:	3718      	adds	r7, #24
 8003866:	46bd      	mov	sp, r7
 8003868:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800386c:	f3af 8000 	nop.w
 8003870:	405b8000 	.word	0x405b8000
 8003874:	20000278 	.word	0x20000278
 8003878:	2000027c 	.word	0x2000027c
 800387c:	20000280 	.word	0x20000280
 8003880:	d2f1a9fc 	.word	0xd2f1a9fc
 8003884:	3f50624d 	.word	0x3f50624d

08003888 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
	calcPotition();
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f7ff feed 	bl	8003670 <_ZN8Odometry12calcPotitionEv>
}
 8003896:	bf00      	nop
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <_ZN8Odometry8getThetaEv>:
{
	return y_sens_;
}

double Odometry::getTheta()
{
 800389e:	b490      	push	{r4, r7}
 80038a0:	b082      	sub	sp, #8
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
	return theta_;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 80038ac:	ec44 3b17 	vmov	d7, r3, r4
}
 80038b0:	eeb0 0a47 	vmov.f32	s0, s14
 80038b4:	eef0 0a67 	vmov.f32	s1, s15
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bc90      	pop	{r4, r7}
 80038be:	4770      	bx	lr

080038c0 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 80038c0:	b490      	push	{r4, r7}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	f04f 0300 	mov.w	r3, #0
 80038ce:	f04f 0400 	mov.w	r4, #0
 80038d2:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = 0;
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	f04f 0300 	mov.w	r3, #0
 80038dc:	f04f 0400 	mov.w	r4, #0
 80038e0:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	theta_ = 0;
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	f04f 0300 	mov.w	r3, #0
 80038ea:	f04f 0400 	mov.w	r4, #0
 80038ee:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 80038f2:	bf00      	nop
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bc90      	pop	{r4, r7}
 80038fa:	4770      	bx	lr

080038fc <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 80038fc:	b490      	push	{r4, r7}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	701a      	strb	r2, [r3, #0]
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	f04f 0300 	mov.w	r3, #0
 8003910:	f04f 0400 	mov.w	r4, #0
 8003914:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	f04f 0300 	mov.w	r3, #0
 800391e:	f04f 0400 	mov.w	r4, #0
 8003922:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	f04f 0300 	mov.w	r3, #0
 800392c:	f04f 0400 	mov.w	r4, #0
 8003930:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800393a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800393e:	2200      	movs	r2, #0
 8003940:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 8003942:	4a29      	ldr	r2, [pc, #164]	; (80039e8 <_ZN13PathFollowingC1Ev+0xec>)
 8003944:	f04f 0300 	mov.w	r3, #0
 8003948:	f04f 0400 	mov.w	r4, #0
 800394c:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 8003950:	4a25      	ldr	r2, [pc, #148]	; (80039e8 <_ZN13PathFollowingC1Ev+0xec>)
 8003952:	f04f 0300 	mov.w	r3, #0
 8003956:	f04f 0400 	mov.w	r4, #0
 800395a:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 800395e:	4a22      	ldr	r2, [pc, #136]	; (80039e8 <_ZN13PathFollowingC1Ev+0xec>)
 8003960:	f04f 0300 	mov.w	r3, #0
 8003964:	f04f 0400 	mov.w	r4, #0
 8003968:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 800396c:	4a1f      	ldr	r2, [pc, #124]	; (80039ec <_ZN13PathFollowingC1Ev+0xf0>)
 800396e:	f04f 0300 	mov.w	r3, #0
 8003972:	f04f 0400 	mov.w	r4, #0
 8003976:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 800397a:	4a1c      	ldr	r2, [pc, #112]	; (80039ec <_ZN13PathFollowingC1Ev+0xf0>)
 800397c:	f04f 0300 	mov.w	r3, #0
 8003980:	f04f 0400 	mov.w	r4, #0
 8003984:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 8003988:	4a18      	ldr	r2, [pc, #96]	; (80039ec <_ZN13PathFollowingC1Ev+0xf0>)
 800398a:	f04f 0300 	mov.w	r3, #0
 800398e:	f04f 0400 	mov.w	r4, #0
 8003992:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 8003996:	4a15      	ldr	r2, [pc, #84]	; (80039ec <_ZN13PathFollowingC1Ev+0xf0>)
 8003998:	f04f 0300 	mov.w	r3, #0
 800399c:	f04f 0400 	mov.w	r4, #0
 80039a0:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 80039a4:	4a11      	ldr	r2, [pc, #68]	; (80039ec <_ZN13PathFollowingC1Ev+0xf0>)
 80039a6:	f04f 0300 	mov.w	r3, #0
 80039aa:	f04f 0400 	mov.w	r4, #0
 80039ae:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 80039b2:	4a0e      	ldr	r2, [pc, #56]	; (80039ec <_ZN13PathFollowingC1Ev+0xf0>)
 80039b4:	f04f 0300 	mov.w	r3, #0
 80039b8:	f04f 0400 	mov.w	r4, #0
 80039bc:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 80039c0:	4a0b      	ldr	r2, [pc, #44]	; (80039f0 <_ZN13PathFollowingC1Ev+0xf4>)
 80039c2:	f04f 0300 	mov.w	r3, #0
 80039c6:	f04f 0400 	mov.w	r4, #0
 80039ca:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 80039ce:	4a08      	ldr	r2, [pc, #32]	; (80039f0 <_ZN13PathFollowingC1Ev+0xf4>)
 80039d0:	f04f 0300 	mov.w	r3, #0
 80039d4:	f04f 0400 	mov.w	r4, #0
 80039d8:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4618      	mov	r0, r3
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bc90      	pop	{r4, r7}
 80039e6:	4770      	bx	lr
 80039e8:	20035f30 	.word	0x20035f30
 80039ec:	20035ec0 	.word	0x20035ec0
 80039f0:	20035f20 	.word	0x20035f20

080039f4 <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b088      	sub	sp, #32
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 80039fc:	f001 fce0 	bl	80053c0 <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 8003a00:	f107 0318 	add.w	r3, r7, #24
 8003a04:	2201      	movs	r2, #1
 8003a06:	4915      	ldr	r1, [pc, #84]	; (8003a5c <_ZN13PathFollowing4initEv+0x68>)
 8003a08:	4815      	ldr	r0, [pc, #84]	; (8003a60 <_ZN13PathFollowing4initEv+0x6c>)
 8003a0a:	f7fd fe99 	bl	8001740 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 8003a0e:	f107 0310 	add.w	r3, r7, #16
 8003a12:	2201      	movs	r2, #1
 8003a14:	4913      	ldr	r1, [pc, #76]	; (8003a64 <_ZN13PathFollowing4initEv+0x70>)
 8003a16:	4812      	ldr	r0, [pc, #72]	; (8003a60 <_ZN13PathFollowing4initEv+0x6c>)
 8003a18:	f7fd fe92 	bl	8001740 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 8003a1c:	f107 0308 	add.w	r3, r7, #8
 8003a20:	2201      	movs	r2, #1
 8003a22:	4911      	ldr	r1, [pc, #68]	; (8003a68 <_ZN13PathFollowing4initEv+0x74>)
 8003a24:	480e      	ldr	r0, [pc, #56]	; (8003a60 <_ZN13PathFollowing4initEv+0x6c>)
 8003a26:	f7fd fe8b 	bl	8001740 <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 8003a2a:	ed97 7b06 	vldr	d7, [r7, #24]
 8003a2e:	ed97 6b04 	vldr	d6, [r7, #16]
 8003a32:	ed97 5b02 	vldr	d5, [r7, #8]
 8003a36:	eeb0 2a45 	vmov.f32	s4, s10
 8003a3a:	eef0 2a65 	vmov.f32	s5, s11
 8003a3e:	eeb0 1a46 	vmov.f32	s2, s12
 8003a42:	eef0 1a66 	vmov.f32	s3, s13
 8003a46:	eeb0 0a47 	vmov.f32	s0, s14
 8003a4a:	eef0 0a67 	vmov.f32	s1, s15
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 f80c 	bl	8003a6c <_ZN13PathFollowing7setGainEddd>
}
 8003a54:	bf00      	nop
 8003a56:	3720      	adds	r7, #32
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	080181d8 	.word	0x080181d8
 8003a60:	080181e0 	.word	0x080181e0
 8003a64:	080181e8 	.word	0x080181e8
 8003a68:	080181f0 	.word	0x080181f0

08003a6c <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 8003a6c:	b490      	push	{r4, r7}
 8003a6e:	b088      	sub	sp, #32
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	61f8      	str	r0, [r7, #28]
 8003a74:	ed87 0b04 	vstr	d0, [r7, #16]
 8003a78:	ed87 1b02 	vstr	d1, [r7, #8]
 8003a7c:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 8003a80:	4a09      	ldr	r2, [pc, #36]	; (8003aa8 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8003a82:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003a86:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 8003a8a:	4a07      	ldr	r2, [pc, #28]	; (8003aa8 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8003a8c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003a90:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 8003a94:	4a04      	ldr	r2, [pc, #16]	; (8003aa8 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8003a96:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003a9a:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 8003a9e:	bf00      	nop
 8003aa0:	3720      	adds	r7, #32
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bc90      	pop	{r4, r7}
 8003aa6:	4770      	bx	lr
 8003aa8:	20035f30 	.word	0x20035f30

08003aac <_ZN13PathFollowing8getKxValEv>:

double PathFollowing::getKxVal()
{
 8003aac:	b490      	push	{r4, r7}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
	return rtParam.kx;
 8003ab4:	4b06      	ldr	r3, [pc, #24]	; (8003ad0 <_ZN13PathFollowing8getKxValEv+0x24>)
 8003ab6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003aba:	ec44 3b17 	vmov	d7, r3, r4
}
 8003abe:	eeb0 0a47 	vmov.f32	s0, s14
 8003ac2:	eef0 0a67 	vmov.f32	s1, s15
 8003ac6:	3708      	adds	r7, #8
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bc90      	pop	{r4, r7}
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	20035f30 	.word	0x20035f30

08003ad4 <_ZN13PathFollowing8getKyValEv>:

double PathFollowing::getKyVal()
{
 8003ad4:	b490      	push	{r4, r7}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
	return rtParam.ky;
 8003adc:	4b06      	ldr	r3, [pc, #24]	; (8003af8 <_ZN13PathFollowing8getKyValEv+0x24>)
 8003ade:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8003ae2:	ec44 3b17 	vmov	d7, r3, r4
}
 8003ae6:	eeb0 0a47 	vmov.f32	s0, s14
 8003aea:	eef0 0a67 	vmov.f32	s1, s15
 8003aee:	3708      	adds	r7, #8
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bc90      	pop	{r4, r7}
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	20035f30 	.word	0x20035f30

08003afc <_ZN13PathFollowing8getKtValEv>:

double PathFollowing::getKtVal()
{
 8003afc:	b490      	push	{r4, r7}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
	return rtParam.kt;
 8003b04:	4b06      	ldr	r3, [pc, #24]	; (8003b20 <_ZN13PathFollowing8getKtValEv+0x24>)
 8003b06:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8003b0a:	ec44 3b17 	vmov	d7, r3, r4
}
 8003b0e:	eeb0 0a47 	vmov.f32	s0, s14
 8003b12:	eef0 0a67 	vmov.f32	s1, s15
 8003b16:	3708      	adds	r7, #8
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bc90      	pop	{r4, r7}
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	20035f30 	.word	0x20035f30

08003b24 <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 8003b2c:	2088      	movs	r0, #136	; 0x88
 8003b2e:	f7fe f95e 	bl	8001dee <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 8003b32:	2080      	movs	r0, #128	; 0x80
 8003b34:	f7fe f95b 	bl	8001dee <INA260_init>
}
 8003b38:	bf00      	nop
 8003b3a:	3708      	adds	r7, #8
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 8003b40:	b590      	push	{r4, r7, lr}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 8003b48:	2188      	movs	r1, #136	; 0x88
 8003b4a:	2002      	movs	r0, #2
 8003b4c:	f7fe f8ec 	bl	8001d28 <INA260_read>
 8003b50:	4603      	mov	r3, r0
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7fc fcfe 	bl	8000554 <__aeabi_i2d>
 8003b58:	a30c      	add	r3, pc, #48	; (adr r3, 8003b8c <_ZN11PowerSensor12updateValuesEv+0x4c>)
 8003b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b5e:	f7fc fd63 	bl	8000628 <__aeabi_dmul>
 8003b62:	4603      	mov	r3, r0
 8003b64:	460c      	mov	r4, r1
 8003b66:	4618      	mov	r0, r3
 8003b68:	4621      	mov	r1, r4
 8003b6a:	f7fd f855 	bl	8000c18 <__aeabi_d2f>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	4a03      	ldr	r2, [pc, #12]	; (8003b88 <_ZN11PowerSensor12updateValuesEv+0x48>)
 8003b7a:	6013      	str	r3, [r2, #0]
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd90      	pop	{r4, r7, pc}
 8003b84:	f3af 8000 	nop.w
 8003b88:	20000284 	.word	0x20000284
 8003b8c:	47ae147b 	.word	0x47ae147b
 8003b90:	3f547ae1 	.word	0x3f547ae1

08003b94 <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	ee07 3a90 	vmov	s15, r3

}
 8003ba4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	0000      	movs	r0, r0
 8003bb4:	0000      	movs	r0, r0
	...

08003bb8 <_ZN11PowerSensor12butteryCheckEv>:

bool PowerSensor::butteryCheck()
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
	static uint16_t cnt;
	bool ret = false;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	73fb      	strb	r3, [r7, #15]

	if(buttery_voltage_ < LOW_VOLTAGE_THRESHOLD) cnt++;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7fc fcd5 	bl	8000578 <__aeabi_f2d>
 8003bce:	a311      	add	r3, pc, #68	; (adr r3, 8003c14 <_ZN11PowerSensor12butteryCheckEv+0x5c>)
 8003bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd4:	f7fc ff9a 	bl	8000b0c <__aeabi_dcmplt>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d006      	beq.n	8003bec <_ZN11PowerSensor12butteryCheckEv+0x34>
 8003bde:	4b0c      	ldr	r3, [pc, #48]	; (8003c10 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003be0:	881b      	ldrh	r3, [r3, #0]
 8003be2:	3301      	adds	r3, #1
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	4b0a      	ldr	r3, [pc, #40]	; (8003c10 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003be8:	801a      	strh	r2, [r3, #0]
 8003bea:	e002      	b.n	8003bf2 <_ZN11PowerSensor12butteryCheckEv+0x3a>
	else cnt = 0;
 8003bec:	4b08      	ldr	r3, [pc, #32]	; (8003c10 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	801a      	strh	r2, [r3, #0]

	if(cnt >= 1) {
 8003bf2:	4b07      	ldr	r3, [pc, #28]	; (8003c10 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003bf4:	881b      	ldrh	r3, [r3, #0]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d004      	beq.n	8003c04 <_ZN11PowerSensor12butteryCheckEv+0x4c>
		ret = true;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	73fb      	strb	r3, [r7, #15]
		cnt = 1;
 8003bfe:	4b04      	ldr	r3, [pc, #16]	; (8003c10 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003c00:	2201      	movs	r2, #1
 8003c02:	801a      	strh	r2, [r3, #0]
	}

	return ret;
 8003c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3710      	adds	r7, #16
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	20000288 	.word	0x20000288
 8003c14:	9999999a 	.word	0x9999999a
 8003c18:	401d9999 	.word	0x401d9999

08003c1c <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8003c24:	2300      	movs	r3, #0
 8003c26:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8003c28:	2102      	movs	r1, #2
 8003c2a:	4822      	ldr	r0, [pc, #136]	; (8003cb4 <_ZN12RotarySwitch8getValueEv+0x98>)
 8003c2c:	f004 fff8 	bl	8008c20 <HAL_GPIO_ReadPin>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	bf0c      	ite	eq
 8003c36:	2301      	moveq	r3, #1
 8003c38:	2300      	movne	r3, #0
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d003      	beq.n	8003c48 <_ZN12RotarySwitch8getValueEv+0x2c>
 8003c40:	89fb      	ldrh	r3, [r7, #14]
 8003c42:	f043 0301 	orr.w	r3, r3, #1
 8003c46:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8003c48:	2108      	movs	r1, #8
 8003c4a:	481a      	ldr	r0, [pc, #104]	; (8003cb4 <_ZN12RotarySwitch8getValueEv+0x98>)
 8003c4c:	f004 ffe8 	bl	8008c20 <HAL_GPIO_ReadPin>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	bf0c      	ite	eq
 8003c56:	2301      	moveq	r3, #1
 8003c58:	2300      	movne	r3, #0
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d003      	beq.n	8003c68 <_ZN12RotarySwitch8getValueEv+0x4c>
 8003c60:	89fb      	ldrh	r3, [r7, #14]
 8003c62:	f043 0302 	orr.w	r3, r3, #2
 8003c66:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8003c68:	2110      	movs	r1, #16
 8003c6a:	4812      	ldr	r0, [pc, #72]	; (8003cb4 <_ZN12RotarySwitch8getValueEv+0x98>)
 8003c6c:	f004 ffd8 	bl	8008c20 <HAL_GPIO_ReadPin>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	bf0c      	ite	eq
 8003c76:	2301      	moveq	r3, #1
 8003c78:	2300      	movne	r3, #0
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d003      	beq.n	8003c88 <_ZN12RotarySwitch8getValueEv+0x6c>
 8003c80:	89fb      	ldrh	r3, [r7, #14]
 8003c82:	f043 0304 	orr.w	r3, r3, #4
 8003c86:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 8003c88:	2180      	movs	r1, #128	; 0x80
 8003c8a:	480a      	ldr	r0, [pc, #40]	; (8003cb4 <_ZN12RotarySwitch8getValueEv+0x98>)
 8003c8c:	f004 ffc8 	bl	8008c20 <HAL_GPIO_ReadPin>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	bf0c      	ite	eq
 8003c96:	2301      	moveq	r3, #1
 8003c98:	2300      	movne	r3, #0
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d003      	beq.n	8003ca8 <_ZN12RotarySwitch8getValueEv+0x8c>
 8003ca0:	89fb      	ldrh	r3, [r7, #14]
 8003ca2:	f043 0308 	orr.w	r3, r3, #8
 8003ca6:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8003ca8:	89fb      	ldrh	r3, [r7, #14]

}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	40020c00 	.word	0x40020c00

08003cb8 <_ZN10SideSensorC1Ev>:
#include "SideSensor.hpp"

uint16_t mon_status;
uint16_t mon_cnt_l, mon_cnt_r;

SideSensor::SideSensor() : status_(0), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false)
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	801a      	strh	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	805a      	strh	r2, [r3, #2]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	809a      	strh	r2, [r3, #4]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	719a      	strb	r2, [r3, #6]
{

}
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
	...

08003ce8 <_ZN10SideSensor12updateStatusEt>:

void SideSensor::updateStatus(uint16_t gpio_pin)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	807b      	strh	r3, [r7, #2]
	static bool white_flag1 = false;
	static bool white_flag2 = false;

	if(ignore_flag_ == false){
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	799b      	ldrb	r3, [r3, #6]
 8003cf8:	f083 0301 	eor.w	r3, r3, #1
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d065      	beq.n	8003dce <_ZN10SideSensor12updateStatusEt+0xe6>

		if (gpio_pin == GPIO_PIN_2 && white_flag1 == false){
 8003d02:	887b      	ldrh	r3, [r7, #2]
 8003d04:	2b04      	cmp	r3, #4
 8003d06:	d111      	bne.n	8003d2c <_ZN10SideSensor12updateStatusEt+0x44>
 8003d08:	4b34      	ldr	r3, [pc, #208]	; (8003ddc <_ZN10SideSensor12updateStatusEt+0xf4>)
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	f083 0301 	eor.w	r3, r3, #1
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00a      	beq.n	8003d2c <_ZN10SideSensor12updateStatusEt+0x44>
			status_ |= 0x01;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	881b      	ldrh	r3, [r3, #0]
 8003d1a:	f043 0301 	orr.w	r3, r3, #1
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	801a      	strh	r2, [r3, #0]
			white_flag1 = true;
 8003d24:	4b2d      	ldr	r3, [pc, #180]	; (8003ddc <_ZN10SideSensor12updateStatusEt+0xf4>)
 8003d26:	2201      	movs	r2, #1
 8003d28:	701a      	strb	r2, [r3, #0]
 8003d2a:	e01a      	b.n	8003d62 <_ZN10SideSensor12updateStatusEt+0x7a>
		}
		else if(gpio_pin == GPIO_PIN_2 && white_flag1 == true){
 8003d2c:	887b      	ldrh	r3, [r7, #2]
 8003d2e:	2b04      	cmp	r3, #4
 8003d30:	d117      	bne.n	8003d62 <_ZN10SideSensor12updateStatusEt+0x7a>
 8003d32:	4b2a      	ldr	r3, [pc, #168]	; (8003ddc <_ZN10SideSensor12updateStatusEt+0xf4>)
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d013      	beq.n	8003d62 <_ZN10SideSensor12updateStatusEt+0x7a>
			status_ ^= 0x01;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	881b      	ldrh	r3, [r3, #0]
 8003d3e:	f083 0301 	eor.w	r3, r3, #1
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	801a      	strh	r2, [r3, #0]
			white_flag1 = false;
 8003d48:	4b24      	ldr	r3, [pc, #144]	; (8003ddc <_ZN10SideSensor12updateStatusEt+0xf4>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	701a      	strb	r2, [r3, #0]

			white_line_cnt_r_++;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	889b      	ldrh	r3, [r3, #4]
 8003d52:	3301      	adds	r3, #1
 8003d54:	b29a      	uxth	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	809a      	strh	r2, [r3, #4]
			mon_cnt_r = white_line_cnt_r_;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	889a      	ldrh	r2, [r3, #4]
 8003d5e:	4b20      	ldr	r3, [pc, #128]	; (8003de0 <_ZN10SideSensor12updateStatusEt+0xf8>)
 8003d60:	801a      	strh	r2, [r3, #0]

		}

		if (gpio_pin == GPIO_PIN_8 && white_flag2 == false){
 8003d62:	887b      	ldrh	r3, [r7, #2]
 8003d64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d68:	d111      	bne.n	8003d8e <_ZN10SideSensor12updateStatusEt+0xa6>
 8003d6a:	4b1e      	ldr	r3, [pc, #120]	; (8003de4 <_ZN10SideSensor12updateStatusEt+0xfc>)
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	f083 0301 	eor.w	r3, r3, #1
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00a      	beq.n	8003d8e <_ZN10SideSensor12updateStatusEt+0xa6>
			status_ |= 0x02;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	881b      	ldrh	r3, [r3, #0]
 8003d7c:	f043 0302 	orr.w	r3, r3, #2
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	801a      	strh	r2, [r3, #0]
			white_flag2 = true;
 8003d86:	4b17      	ldr	r3, [pc, #92]	; (8003de4 <_ZN10SideSensor12updateStatusEt+0xfc>)
 8003d88:	2201      	movs	r2, #1
 8003d8a:	701a      	strb	r2, [r3, #0]
 8003d8c:	e01b      	b.n	8003dc6 <_ZN10SideSensor12updateStatusEt+0xde>
		}
		else if(gpio_pin == GPIO_PIN_8 && white_flag2 == true){
 8003d8e:	887b      	ldrh	r3, [r7, #2]
 8003d90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d94:	d117      	bne.n	8003dc6 <_ZN10SideSensor12updateStatusEt+0xde>
 8003d96:	4b13      	ldr	r3, [pc, #76]	; (8003de4 <_ZN10SideSensor12updateStatusEt+0xfc>)
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d013      	beq.n	8003dc6 <_ZN10SideSensor12updateStatusEt+0xde>
			status_ ^= 0x02;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	881b      	ldrh	r3, [r3, #0]
 8003da2:	f083 0302 	eor.w	r3, r3, #2
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	801a      	strh	r2, [r3, #0]
			white_flag2 = false;
 8003dac:	4b0d      	ldr	r3, [pc, #52]	; (8003de4 <_ZN10SideSensor12updateStatusEt+0xfc>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	701a      	strb	r2, [r3, #0]

			white_line_cnt_l_++;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	885b      	ldrh	r3, [r3, #2]
 8003db6:	3301      	adds	r3, #1
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	805a      	strh	r2, [r3, #2]
			mon_cnt_l = white_line_cnt_l_;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	885a      	ldrh	r2, [r3, #2]
 8003dc2:	4b09      	ldr	r3, [pc, #36]	; (8003de8 <_ZN10SideSensor12updateStatusEt+0x100>)
 8003dc4:	801a      	strh	r2, [r3, #0]
		}

		mon_status = status_;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	881a      	ldrh	r2, [r3, #0]
 8003dca:	4b08      	ldr	r3, [pc, #32]	; (8003dec <_ZN10SideSensor12updateStatusEt+0x104>)
 8003dcc:	801a      	strh	r2, [r3, #0]
	}

}
 8003dce:	bf00      	nop
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	20000290 	.word	0x20000290
 8003de0:	2000028e 	.word	0x2000028e
 8003de4:	20000291 	.word	0x20000291
 8003de8:	2000028c 	.word	0x2000028c
 8003dec:	2000028a 	.word	0x2000028a

08003df0 <_ZN10SideSensor16getWhiteLineCntREv>:
{
	return white_line_cnt_l_;
}

uint16_t SideSensor::getWhiteLineCntR()
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
	return white_line_cnt_r_;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	889b      	ldrh	r3, [r3, #4]
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <_ZN10SideSensor17resetWhiteLineCntEv>:

void SideSensor::resetWhiteLineCnt()
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	805a      	strh	r2, [r3, #2]
	white_line_cnt_r_ = 0;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	809a      	strh	r2, [r3, #4]
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	719a      	strb	r2, [r3, #6]
}
 8003e36:	bf00      	nop
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr

08003e42 <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 8003e42:	b480      	push	{r7}
 8003e44:	b083      	sub	sp, #12
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	719a      	strb	r2, [r3, #6]
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	799b      	ldrb	r3, [r3, #6]
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4a10      	ldr	r2, [pc, #64]	; (8003ec4 <_ZN20SystemIdentificationC1EP6LoggerP5Motor+0x50>)
 8003e84:	3308      	adds	r3, #8
 8003e86:	4611      	mov	r1, r2
 8003e88:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f00f f9d7 	bl	8013240 <memcpy>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f04f 0200 	mov.w	r2, #0
 8003ea0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	68ba      	ldr	r2, [r7, #8]
 8003eb0:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3710      	adds	r7, #16
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	08018214 	.word	0x08018214

08003ec8 <_ZN20SystemIdentification13inOutputStoreEf>:
{

}

void SystemIdentification::inOutputStore(float output)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	ed87 0a00 	vstr	s0, [r7]
	if(processing_flag_ == true){
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d010      	beq.n	8003f00 <_ZN20SystemIdentification13inOutputStoreEf+0x38>
		logger_->storeLog(output);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	ed97 0a00 	vldr	s0, [r7]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7ff f8ee 	bl	80030c8 <_ZN6Logger8storeLogEf>
		logger_->storeLog2(inputVal_);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 8003ef6:	eeb0 0a67 	vmov.f32	s0, s15
 8003efa:	4610      	mov	r0, r2
 8003efc:	f7ff f922 	bl	8003144 <_ZN6Logger9storeLog2Ef>
	}

}
 8003f00:	bf00      	nop
 8003f02:	3708      	adds	r7, #8
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <_ZN20SystemIdentification12inOutputSaveEv>:

void SystemIdentification::inOutputSave()
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
	logger_->saveLogs("sysident", "MSIGRES.txt");
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a07      	ldr	r2, [pc, #28]	; (8003f34 <_ZN20SystemIdentification12inOutputSaveEv+0x2c>)
 8003f16:	4908      	ldr	r1, [pc, #32]	; (8003f38 <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7ff f99c 	bl	8003256 <_ZN6Logger8saveLogsEPKcS1_>
	logger_->saveLogs2("sysident", "INPUT.txt");
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a06      	ldr	r2, [pc, #24]	; (8003f3c <_ZN20SystemIdentification12inOutputSaveEv+0x34>)
 8003f24:	4904      	ldr	r1, [pc, #16]	; (8003f38 <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7ff f9a9 	bl	800327e <_ZN6Logger9saveLogs2EPKcS1_>
}
 8003f2c:	bf00      	nop
 8003f2e:	3708      	adds	r7, #8
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	08018408 	.word	0x08018408
 8003f38:	08018414 	.word	0x08018414
 8003f3c:	08018420 	.word	0x08018420

08003f40 <_ZN20SystemIdentification10updateMsigEv>:

void SystemIdentification::updateMsig()
{
 8003f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
	if(processing_flag_ == true){
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d046      	beq.n	8003fe0 <_ZN20SystemIdentification10updateMsigEv+0xa0>
		inputVal_ = inputRatio_ * msigArray_[msigArrayIdx_];
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	ed93 7a81 	vldr	s14, [r3, #516]	; 0x204
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8003f5e:	461a      	mov	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	3204      	adds	r2, #4
 8003f64:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8003f68:	ee07 3a90 	vmov	s15, r3
 8003f6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		msigArrayIdx_++;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8003f80:	3301      	adds	r3, #1
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
		mon_msig = inputVal_;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003f90:	4a15      	ldr	r2, [pc, #84]	; (8003fe8 <_ZN20SystemIdentification10updateMsigEv+0xa8>)
 8003f92:	6013      	str	r3, [r2, #0]

		if(msigArrayIdx_ >= MSIG_SIZE) msigArrayIdx_ = MSIG_SIZE;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8003f9a:	2bf9      	cmp	r3, #249	; 0xf9
 8003f9c:	d903      	bls.n	8003fa6 <_ZN20SystemIdentification10updateMsigEv+0x66>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	22fa      	movs	r2, #250	; 0xfa
 8003fa2:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc

		motor_->setRatio(inputVal_, -inputVal_);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685c      	ldr	r4, [r3, #4]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7fc fae1 	bl	8000578 <__aeabi_f2d>
 8003fb6:	4605      	mov	r5, r0
 8003fb8:	460e      	mov	r6, r1
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 8003fc0:	eef1 7a67 	vneg.f32	s15, s15
 8003fc4:	ee17 3a90 	vmov	r3, s15
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7fc fad5 	bl	8000578 <__aeabi_f2d>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	ec43 2b11 	vmov	d1, r2, r3
 8003fd6:	ec46 5b10 	vmov	d0, r5, r6
 8003fda:	4620      	mov	r0, r4
 8003fdc:	f7ff fa9a 	bl	8003514 <_ZN5Motor8setRatioEdd>

	}

}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fe8:	20000294 	.word	0x20000294

08003fec <_ZN20SystemIdentification13setInputRatioEf>:
void SystemIdentification::setInputRatio(float ratio)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	ed87 0a00 	vstr	s0, [r7]
	inputRatio_ = ratio;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	683a      	ldr	r2, [r7, #0]
 8003ffc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <_ZN20SystemIdentification5startEv>:

void SystemIdentification::start()
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
	//logger_->resetLogs();
	logger_->start();
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4618      	mov	r0, r3
 800401a:	f7ff f9e5 	bl	80033e8 <_ZN6Logger5startEv>
	processing_flag_ = true;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
}
 8004026:	bf00      	nop
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
	...

08004030 <_ZN20SystemIdentification4stopEv>:

void SystemIdentification::stop()
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4618      	mov	r0, r3
 800403e:	f7ff f9e4 	bl	800340a <_ZN6Logger4stopEv>
	processing_flag_ = false;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
	msigArrayIdx_ = 0;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
	motor_->setRatio(0, 0);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8004070 <_ZN20SystemIdentification4stopEv+0x40>
 800405a:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8004070 <_ZN20SystemIdentification4stopEv+0x40>
 800405e:	4618      	mov	r0, r3
 8004060:	f7ff fa58 	bl	8003514 <_ZN5Motor8setRatioEdd>
}
 8004064:	bf00      	nop
 8004066:	3708      	adds	r7, #8
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	f3af 8000 	nop.w
	...

08004078 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
//#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]
 8004084:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f04f 0200 	mov.w	r2, #0
 800408c:	601a      	str	r2, [r3, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f04f 0200 	mov.w	r2, #0
 8004094:	605a      	str	r2, [r3, #4]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f04f 0200 	mov.w	r2, #0
 800409c:	609a      	str	r2, [r3, #8]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f04f 0200 	mov.w	r2, #0
 80040a4:	60da      	str	r2, [r3, #12]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f04f 0200 	mov.w	r2, #0
 80040ac:	611a      	str	r2, [r3, #16]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f04f 0200 	mov.w	r2, #0
 80040b4:	615a      	str	r2, [r3, #20]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f04f 0200 	mov.w	r2, #0
 80040bc:	619a      	str	r2, [r3, #24]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f04f 0200 	mov.w	r2, #0
 80040c4:	61da      	str	r2, [r3, #28]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f04f 0200 	mov.w	r2, #0
 80040cc:	621a      	str	r2, [r3, #32]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f04f 0200 	mov.w	r2, #0
 80040d4:	625a      	str	r2, [r3, #36]	; 0x24
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f04f 0200 	mov.w	r2, #0
 80040ec:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	68ba      	ldr	r2, [r7, #8]
 80040f2:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	683a      	ldr	r2, [r7, #0]
 80040fe:	639a      	str	r2, [r3, #56]	; 0x38

}
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	4618      	mov	r0, r3
 8004104:	3714      	adds	r7, #20
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
	...

08004110 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8004110:	b590      	push	{r4, r7, lr}
 8004112:	b087      	sub	sp, #28
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800411c:	f107 020c 	add.w	r2, r7, #12
 8004120:	f107 0110 	add.w	r1, r7, #16
 8004124:	4618      	mov	r0, r3
 8004126:	f7fd f955 	bl	80013d4 <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 800412a:	ed97 7a04 	vldr	s14, [r7, #16]
 800412e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004132:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004136:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800413a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800413e:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 8004142:	6978      	ldr	r0, [r7, #20]
 8004144:	f7fc fa18 	bl	8000578 <__aeabi_f2d>
 8004148:	a30b      	add	r3, pc, #44	; (adr r3, 8004178 <_ZN12VelocityCtrl12calcVelocityEv+0x68>)
 800414a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414e:	f7fc fa6b 	bl	8000628 <__aeabi_dmul>
 8004152:	4603      	mov	r3, r0
 8004154:	460c      	mov	r4, r1
 8004156:	4618      	mov	r0, r3
 8004158:	4621      	mov	r1, r4
 800415a:	f7fc fd5d 	bl	8000c18 <__aeabi_d2f>
 800415e:	4602      	mov	r2, r0
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	ee07 3a90 	vmov	s15, r3
}
 800416c:	eeb0 0a67 	vmov.f32	s0, s15
 8004170:	371c      	adds	r7, #28
 8004172:	46bd      	mov	sp, r7
 8004174:	bd90      	pop	{r4, r7, pc}
 8004176:	bf00      	nop
 8004178:	1ab1d998 	.word	0x1ab1d998
 800417c:	3f7830b5 	.word	0x3f7830b5

08004180 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 8004180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004182:	b087      	sub	sp, #28
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	ed93 7a00 	vldr	s14, [r3]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	edd3 7a02 	vldr	s15, [r3, #8]
 8004194:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004198:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d007      	beq.n	80041b6 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 80041a6:	4b48      	ldr	r3, [pc, #288]	; (80042c8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 80041a8:	f04f 0200 	mov.w	r2, #0
 80041ac:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	edd3 7a04 	vldr	s15, [r3, #16]
 80041bc:	ed97 7a05 	vldr	s14, [r7, #20]
 80041c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041c4:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 80041c8:	4b3f      	ldr	r3, [pc, #252]	; (80042c8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7fc f9d3 	bl	8000578 <__aeabi_f2d>
 80041d2:	4604      	mov	r4, r0
 80041d4:	460d      	mov	r5, r1
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	ed93 7a06 	vldr	s14, [r3, #24]
 80041dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80041e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041e4:	ee17 0a90 	vmov	r0, s15
 80041e8:	f7fc f9c6 	bl	8000578 <__aeabi_f2d>
 80041ec:	a334      	add	r3, pc, #208	; (adr r3, 80042c0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 80041ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f2:	f7fc fa19 	bl	8000628 <__aeabi_dmul>
 80041f6:	4602      	mov	r2, r0
 80041f8:	460b      	mov	r3, r1
 80041fa:	4620      	mov	r0, r4
 80041fc:	4629      	mov	r1, r5
 80041fe:	f7fc f85d 	bl	80002bc <__adddf3>
 8004202:	4603      	mov	r3, r0
 8004204:	460c      	mov	r4, r1
 8004206:	4618      	mov	r0, r3
 8004208:	4621      	mov	r1, r4
 800420a:	f7fc fd05 	bl	8000c18 <__aeabi_d2f>
 800420e:	4602      	mov	r2, r0
 8004210:	4b2d      	ldr	r3, [pc, #180]	; (80042c8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8004212:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	ed93 7a05 	vldr	s14, [r3, #20]
 800421a:	4b2c      	ldr	r3, [pc, #176]	; (80042cc <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 800421c:	edd3 7a00 	vldr	s15, [r3]
 8004220:	edd7 6a05 	vldr	s13, [r7, #20]
 8004224:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004228:	ee67 7a27 	vmul.f32	s15, s14, s15
 800422c:	ee17 0a90 	vmov	r0, s15
 8004230:	f7fc f9a2 	bl	8000578 <__aeabi_f2d>
 8004234:	a322      	add	r3, pc, #136	; (adr r3, 80042c0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8004236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423a:	f7fc fb1f 	bl	800087c <__aeabi_ddiv>
 800423e:	4603      	mov	r3, r0
 8004240:	460c      	mov	r4, r1
 8004242:	4618      	mov	r0, r3
 8004244:	4621      	mov	r1, r4
 8004246:	f7fc fce7 	bl	8000c18 <__aeabi_d2f>
 800424a:	4603      	mov	r3, r0
 800424c:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 800424e:	ed97 7a04 	vldr	s14, [r7, #16]
 8004252:	edd7 7a03 	vldr	s15, [r7, #12]
 8004256:	ee37 7a27 	vadd.f32	s14, s14, s15
 800425a:	4b1b      	ldr	r3, [pc, #108]	; (80042c8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 800425c:	edd3 7a00 	vldr	s15, [r3]
 8004260:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004264:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8004272:	edd7 7a02 	vldr	s15, [r7, #8]
 8004276:	ee77 7a27 	vadd.f32	s15, s14, s15
 800427a:	ee17 0a90 	vmov	r0, s15
 800427e:	f7fc f97b 	bl	8000578 <__aeabi_f2d>
 8004282:	4605      	mov	r5, r0
 8004284:	460e      	mov	r6, r1
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800428c:	ed97 7a02 	vldr	s14, [r7, #8]
 8004290:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004294:	ee17 0a90 	vmov	r0, s15
 8004298:	f7fc f96e 	bl	8000578 <__aeabi_f2d>
 800429c:	4602      	mov	r2, r0
 800429e:	460b      	mov	r3, r1
 80042a0:	ec43 2b11 	vmov	d1, r2, r3
 80042a4:	ec46 5b10 	vmov	d0, r5, r6
 80042a8:	4620      	mov	r0, r4
 80042aa:	f7ff f933 	bl	8003514 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 80042ae:	4a07      	ldr	r2, [pc, #28]	; (80042cc <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	6013      	str	r3, [r2, #0]
}
 80042b4:	bf00      	nop
 80042b6:	371c      	adds	r7, #28
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042bc:	f3af 8000 	nop.w
 80042c0:	d2f1a9fc 	.word	0xd2f1a9fc
 80042c4:	3f50624d 	.word	0x3f50624d
 80042c8:	2000029c 	.word	0x2000029c
 80042cc:	20000298 	.word	0x20000298

080042d0 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	ed87 0a02 	vstr	s0, [r7, #8]
 80042dc:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	68ba      	ldr	r2, [r7, #8]
 80042e4:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	605a      	str	r2, [r3, #4]
}
 80042ec:	bf00      	nop
 80042ee:	3714      	adds	r7, #20
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b085      	sub	sp, #20
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	ed87 0a02 	vstr	s0, [r7, #8]
 8004304:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004314:	bf00      	nop
 8004316:	3714      	adds	r7, #20
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	ed87 0a02 	vstr	s0, [r7, #8]
 800432c:	edc7 0a01 	vstr	s1, [r7, #4]
 8004330:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	68ba      	ldr	r2, [r7, #8]
 8004338:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	683a      	ldr	r2, [r7, #0]
 8004344:	615a      	str	r2, [r3, #20]
}
 8004346:	bf00      	nop
 8004348:	3714      	adds	r7, #20
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 8004352:	b480      	push	{r7}
 8004354:	b085      	sub	sp, #20
 8004356:	af00      	add	r7, sp, #0
 8004358:	60f8      	str	r0, [r7, #12]
 800435a:	ed87 0a02 	vstr	s0, [r7, #8]
 800435e:	edc7 0a01 	vstr	s1, [r7, #4]
 8004362:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	683a      	ldr	r2, [r7, #0]
 8004376:	621a      	str	r2, [r3, #32]
}
 8004378:	bf00      	nop
 800437a:	3714      	adds	r7, #20
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
    calcVelocity();
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f7ff febf 	bl	8004110 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004398:	2b00      	cmp	r3, #0
 800439a:	d002      	beq.n	80043a2 <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f7ff feef 	bl	8004180 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 80043a2:	bf00      	nop
 80043a4:	3708      	adds	r7, #8
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 80043aa:	b480      	push	{r7}
 80043ac:	b083      	sub	sp, #12
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2201      	movs	r2, #1
 80043be:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 80043c2:	bf00      	nop
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
	...

080043d0 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e4:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8004400 <_ZN12VelocityCtrl4stopEv+0x30>
 80043e8:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8004400 <_ZN12VelocityCtrl4stopEv+0x30>
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7ff f891 	bl	8003514 <_ZN5Motor8setRatioEdd>

}
 80043f2:	bf00      	nop
 80043f4:	3708      	adds	r7, #8
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	f3af 8000 	nop.w
	...

08004408 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8004410:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004414:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8004418:	f003 0301 	and.w	r3, r3, #1
 800441c:	2b00      	cmp	r3, #0
 800441e:	d013      	beq.n	8004448 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8004420:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004424:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8004428:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800442c:	2b00      	cmp	r3, #0
 800442e:	d00b      	beq.n	8004448 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8004430:	e000      	b.n	8004434 <ITM_SendChar+0x2c>
    {
      __NOP();
 8004432:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8004434:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d0f9      	beq.n	8004432 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800443e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	b2d2      	uxtb	r2, r2
 8004446:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8004448:	687b      	ldr	r3, [r7, #4]
}
 800444a:	4618      	mov	r0, r3
 800444c:	370c      	adds	r7, #12
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr

08004456 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


int _write(int file, char *ptr, int len)
{
 8004456:	b580      	push	{r7, lr}
 8004458:	b086      	sub	sp, #24
 800445a:	af00      	add	r7, sp, #0
 800445c:	60f8      	str	r0, [r7, #12]
 800445e:	60b9      	str	r1, [r7, #8]
 8004460:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8004462:	2300      	movs	r3, #0
 8004464:	617b      	str	r3, [r7, #20]
 8004466:	e009      	b.n	800447c <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	1c5a      	adds	r2, r3, #1
 800446c:	60ba      	str	r2, [r7, #8]
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	4618      	mov	r0, r3
 8004472:	f7ff ffc9 	bl	8004408 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	3301      	adds	r3, #1
 800447a:	617b      	str	r3, [r7, #20]
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	429a      	cmp	r2, r3
 8004482:	dbf1      	blt.n	8004468 <_write+0x12>
  }
  return len;
 8004484:	687b      	ldr	r3, [r7, #4]
}
 8004486:	4618      	mov	r0, r3
 8004488:	3718      	adds	r7, #24
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}

0800448e <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800448e:	b580      	push	{r7, lr}
 8004490:	b082      	sub	sp, #8
 8004492:	af00      	add	r7, sp, #0
 8004494:	4603      	mov	r3, r0
 8004496:	80fb      	strh	r3, [r7, #6]
	cppExit(GPIO_Pin);
 8004498:	88fb      	ldrh	r3, [r7, #6]
 800449a:	4618      	mov	r0, r3
 800449c:	f001 ff14 	bl	80062c8 <cppExit>
}
 80044a0:	bf00      	nop
 80044a2:	3708      	adds	r7, #8
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a1e      	ldr	r2, [pc, #120]	; (8004530 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d10e      	bne.n	80044d8 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip1ms();
 80044ba:	f001 fe95 	bl	80061e8 <cppFlip1ms>

		tim6_timer++;
 80044be:	4b1d      	ldr	r3, [pc, #116]	; (8004534 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	3301      	adds	r3, #1
 80044c4:	4a1b      	ldr	r2, [pc, #108]	; (8004534 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80044c6:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 80044c8:	4b1a      	ldr	r3, [pc, #104]	; (8004534 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a1a      	ldr	r2, [pc, #104]	; (8004538 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d902      	bls.n	80044d8 <HAL_TIM_PeriodElapsedCallback+0x30>
 80044d2:	4b18      	ldr	r3, [pc, #96]	; (8004534 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM7){
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a17      	ldr	r2, [pc, #92]	; (800453c <HAL_TIM_PeriodElapsedCallback+0x94>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d10e      	bne.n	8004500 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip100ns();
 80044e2:	f001 fec9 	bl	8006278 <cppFlip100ns>

		tim7_timer++;
 80044e6:	4b16      	ldr	r3, [pc, #88]	; (8004540 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	3301      	adds	r3, #1
 80044ec:	4a14      	ldr	r2, [pc, #80]	; (8004540 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80044ee:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 80044f0:	4b13      	ldr	r3, [pc, #76]	; (8004540 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a10      	ldr	r2, [pc, #64]	; (8004538 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d902      	bls.n	8004500 <HAL_TIM_PeriodElapsedCallback+0x58>
 80044fa:	4b11      	ldr	r3, [pc, #68]	; (8004540 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == TIM13){
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a0f      	ldr	r2, [pc, #60]	; (8004544 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d10e      	bne.n	8004528 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 800450a:	f001 febf 	bl	800628c <cppFlip10ms>

		tim13_timer++;
 800450e:	4b0e      	ldr	r3, [pc, #56]	; (8004548 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	3301      	adds	r3, #1
 8004514:	4a0c      	ldr	r2, [pc, #48]	; (8004548 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8004516:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8004518:	4b0b      	ldr	r3, [pc, #44]	; (8004548 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a06      	ldr	r2, [pc, #24]	; (8004538 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d902      	bls.n	8004528 <HAL_TIM_PeriodElapsedCallback+0x80>
 8004522:	4b09      	ldr	r3, [pc, #36]	; (8004548 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8004524:	2200      	movs	r2, #0
 8004526:	601a      	str	r2, [r3, #0]
	}

}
 8004528:	bf00      	nop
 800452a:	3708      	adds	r7, #8
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	40001000 	.word	0x40001000
 8004534:	20035b9c 	.word	0x20035b9c
 8004538:	0001869f 	.word	0x0001869f
 800453c:	40001400 	.word	0x40001400
 8004540:	20035be0 	.word	0x20035be0
 8004544:	40001c00 	.word	0x40001c00
 8004548:	20035be4 	.word	0x20035be4

0800454c <init>:

void init()
{
 800454c:	b580      	push	{r7, lr}
 800454e:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8004550:	2201      	movs	r2, #1
 8004552:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004556:	4808      	ldr	r0, [pc, #32]	; (8004578 <init+0x2c>)
 8004558:	f004 fb7a 	bl	8008c50 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 800455c:	4807      	ldr	r0, [pc, #28]	; (800457c <init+0x30>)
 800455e:	f008 fa5a 	bl	800ca16 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8004562:	4807      	ldr	r0, [pc, #28]	; (8004580 <init+0x34>)
 8004564:	f008 fa57 	bl	800ca16 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8004568:	4806      	ldr	r0, [pc, #24]	; (8004584 <init+0x38>)
 800456a:	f008 fa54 	bl	800ca16 <HAL_TIM_Base_Start_IT>

	cppInit();
 800456e:	f001 fd91 	bl	8006094 <cppInit>

	//path_following_initialize();

}
 8004572:	bf00      	nop
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	40021000 	.word	0x40021000
 800457c:	20035cc8 	.word	0x20035cc8
 8004580:	20035e6c 	.word	0x20035e6c
 8004584:	20035be8 	.word	0x20035be8

08004588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800458c:	f003 f858 	bl	8007640 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004590:	f000 f82a 	bl	80045e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004594:	f000 fdbc 	bl	8005110 <MX_GPIO_Init>
  MX_DMA_Init();
 8004598:	f000 fd8a 	bl	80050b0 <MX_DMA_Init>
  MX_I2C2_Init();
 800459c:	f000 f9e8 	bl	8004970 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 80045a0:	f000 fa14 	bl	80049cc <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 80045a4:	f000 fa32 	bl	8004a0c <MX_SPI2_Init>
  MX_TIM1_Init();
 80045a8:	f000 fa66 	bl	8004a78 <MX_TIM1_Init>
  MX_TIM4_Init();
 80045ac:	f000 fb70 	bl	8004c90 <MX_TIM4_Init>
  MX_TIM8_Init();
 80045b0:	f000 fc3c 	bl	8004e2c <MX_TIM8_Init>
  MX_USART2_UART_Init();
 80045b4:	f000 fd52 	bl	800505c <MX_USART2_UART_Init>
  MX_FATFS_Init();
 80045b8:	f00a fa00 	bl	800e9bc <MX_FATFS_Init>
  MX_TIM6_Init();
 80045bc:	f000 fbcc 	bl	8004d58 <MX_TIM6_Init>
  MX_I2C1_Init();
 80045c0:	f000 f9a8 	bl	8004914 <MX_I2C1_Init>
  MX_TIM3_Init();
 80045c4:	f000 fb00 	bl	8004bc8 <MX_TIM3_Init>
  MX_TIM10_Init();
 80045c8:	f000 fc88 	bl	8004edc <MX_TIM10_Init>
  MX_TIM11_Init();
 80045cc:	f000 fcd4 	bl	8004f78 <MX_TIM11_Init>
  MX_ADC2_Init();
 80045d0:	f000 f898 	bl	8004704 <MX_ADC2_Init>
  MX_TIM7_Init();
 80045d4:	f000 fbf6 	bl	8004dc4 <MX_TIM7_Init>
  MX_TIM13_Init();
 80045d8:	f000 fd1c 	bl	8005014 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 80045dc:	f7ff ffb6 	bl	800454c <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 80045e0:	f001 fe82 	bl	80062e8 <cppLoop>
 80045e4:	e7fc      	b.n	80045e0 <main+0x58>
	...

080045e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b0a4      	sub	sp, #144	; 0x90
 80045ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80045ee:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80045f2:	2234      	movs	r2, #52	; 0x34
 80045f4:	2100      	movs	r1, #0
 80045f6:	4618      	mov	r0, r3
 80045f8:	f00e fe2d 	bl	8013256 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80045fc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004600:	2200      	movs	r2, #0
 8004602:	601a      	str	r2, [r3, #0]
 8004604:	605a      	str	r2, [r3, #4]
 8004606:	609a      	str	r2, [r3, #8]
 8004608:	60da      	str	r2, [r3, #12]
 800460a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800460c:	f107 030c 	add.w	r3, r7, #12
 8004610:	223c      	movs	r2, #60	; 0x3c
 8004612:	2100      	movs	r1, #0
 8004614:	4618      	mov	r0, r3
 8004616:	f00e fe1e 	bl	8013256 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800461a:	2300      	movs	r3, #0
 800461c:	60bb      	str	r3, [r7, #8]
 800461e:	4b37      	ldr	r3, [pc, #220]	; (80046fc <SystemClock_Config+0x114>)
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	4a36      	ldr	r2, [pc, #216]	; (80046fc <SystemClock_Config+0x114>)
 8004624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004628:	6413      	str	r3, [r2, #64]	; 0x40
 800462a:	4b34      	ldr	r3, [pc, #208]	; (80046fc <SystemClock_Config+0x114>)
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004632:	60bb      	str	r3, [r7, #8]
 8004634:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004636:	2300      	movs	r3, #0
 8004638:	607b      	str	r3, [r7, #4]
 800463a:	4b31      	ldr	r3, [pc, #196]	; (8004700 <SystemClock_Config+0x118>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a30      	ldr	r2, [pc, #192]	; (8004700 <SystemClock_Config+0x118>)
 8004640:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004644:	6013      	str	r3, [r2, #0]
 8004646:	4b2e      	ldr	r3, [pc, #184]	; (8004700 <SystemClock_Config+0x118>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800464e:	607b      	str	r3, [r7, #4]
 8004650:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004652:	2301      	movs	r3, #1
 8004654:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004656:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800465a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800465c:	2302      	movs	r3, #2
 800465e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004660:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004664:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004666:	2308      	movs	r3, #8
 8004668:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800466a:	23b4      	movs	r3, #180	; 0xb4
 800466c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004670:	2302      	movs	r3, #2
 8004672:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8004676:	2308      	movs	r3, #8
 8004678:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 800467c:	2302      	movs	r3, #2
 800467e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004682:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004686:	4618      	mov	r0, r3
 8004688:	f005 ff1c 	bl	800a4c4 <HAL_RCC_OscConfig>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8004692:	f000 fe91 	bl	80053b8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004696:	f005 fa97 	bl	8009bc8 <HAL_PWREx_EnableOverDrive>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d001      	beq.n	80046a4 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80046a0:	f000 fe8a 	bl	80053b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80046a4:	230f      	movs	r3, #15
 80046a6:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80046a8:	2302      	movs	r3, #2
 80046aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80046ac:	2300      	movs	r3, #0
 80046ae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80046b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80046b4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80046b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046ba:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80046bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80046c0:	2105      	movs	r1, #5
 80046c2:	4618      	mov	r0, r3
 80046c4:	f005 fad0 	bl	8009c68 <HAL_RCC_ClockConfig>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d001      	beq.n	80046d2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80046ce:	f000 fe73 	bl	80053b8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 80046d2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80046d6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80046d8:	2300      	movs	r3, #0
 80046da:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80046dc:	2300      	movs	r3, #0
 80046de:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80046e0:	f107 030c 	add.w	r3, r7, #12
 80046e4:	4618      	mov	r0, r3
 80046e6:	f005 fcaf 	bl	800a048 <HAL_RCCEx_PeriphCLKConfig>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d001      	beq.n	80046f4 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 80046f0:	f000 fe62 	bl	80053b8 <Error_Handler>
  }
}
 80046f4:	bf00      	nop
 80046f6:	3790      	adds	r7, #144	; 0x90
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	40023800 	.word	0x40023800
 8004700:	40007000 	.word	0x40007000

08004704 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800470a:	463b      	mov	r3, r7
 800470c:	2200      	movs	r2, #0
 800470e:	601a      	str	r2, [r3, #0]
 8004710:	605a      	str	r2, [r3, #4]
 8004712:	609a      	str	r2, [r3, #8]
 8004714:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8004716:	4b7c      	ldr	r3, [pc, #496]	; (8004908 <MX_ADC2_Init+0x204>)
 8004718:	4a7c      	ldr	r2, [pc, #496]	; (800490c <MX_ADC2_Init+0x208>)
 800471a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800471c:	4b7a      	ldr	r3, [pc, #488]	; (8004908 <MX_ADC2_Init+0x204>)
 800471e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004722:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004724:	4b78      	ldr	r3, [pc, #480]	; (8004908 <MX_ADC2_Init+0x204>)
 8004726:	2200      	movs	r2, #0
 8004728:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800472a:	4b77      	ldr	r3, [pc, #476]	; (8004908 <MX_ADC2_Init+0x204>)
 800472c:	2201      	movs	r2, #1
 800472e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8004730:	4b75      	ldr	r3, [pc, #468]	; (8004908 <MX_ADC2_Init+0x204>)
 8004732:	2201      	movs	r2, #1
 8004734:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004736:	4b74      	ldr	r3, [pc, #464]	; (8004908 <MX_ADC2_Init+0x204>)
 8004738:	2200      	movs	r2, #0
 800473a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800473e:	4b72      	ldr	r3, [pc, #456]	; (8004908 <MX_ADC2_Init+0x204>)
 8004740:	2200      	movs	r2, #0
 8004742:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004744:	4b70      	ldr	r3, [pc, #448]	; (8004908 <MX_ADC2_Init+0x204>)
 8004746:	4a72      	ldr	r2, [pc, #456]	; (8004910 <MX_ADC2_Init+0x20c>)
 8004748:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800474a:	4b6f      	ldr	r3, [pc, #444]	; (8004908 <MX_ADC2_Init+0x204>)
 800474c:	2200      	movs	r2, #0
 800474e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8004750:	4b6d      	ldr	r3, [pc, #436]	; (8004908 <MX_ADC2_Init+0x204>)
 8004752:	220e      	movs	r2, #14
 8004754:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8004756:	4b6c      	ldr	r3, [pc, #432]	; (8004908 <MX_ADC2_Init+0x204>)
 8004758:	2201      	movs	r2, #1
 800475a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800475e:	4b6a      	ldr	r3, [pc, #424]	; (8004908 <MX_ADC2_Init+0x204>)
 8004760:	2201      	movs	r2, #1
 8004762:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004764:	4868      	ldr	r0, [pc, #416]	; (8004908 <MX_ADC2_Init+0x204>)
 8004766:	f002 ffff 	bl	8007768 <HAL_ADC_Init>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d001      	beq.n	8004774 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8004770:	f000 fe22 	bl	80053b8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8004774:	230a      	movs	r3, #10
 8004776:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004778:	2301      	movs	r3, #1
 800477a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 800477c:	2306      	movs	r3, #6
 800477e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004780:	463b      	mov	r3, r7
 8004782:	4619      	mov	r1, r3
 8004784:	4860      	ldr	r0, [pc, #384]	; (8004908 <MX_ADC2_Init+0x204>)
 8004786:	f003 f943 	bl	8007a10 <HAL_ADC_ConfigChannel>
 800478a:	4603      	mov	r3, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	d001      	beq.n	8004794 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8004790:	f000 fe12 	bl	80053b8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8004794:	230b      	movs	r3, #11
 8004796:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8004798:	2302      	movs	r3, #2
 800479a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800479c:	463b      	mov	r3, r7
 800479e:	4619      	mov	r1, r3
 80047a0:	4859      	ldr	r0, [pc, #356]	; (8004908 <MX_ADC2_Init+0x204>)
 80047a2:	f003 f935 	bl	8007a10 <HAL_ADC_ConfigChannel>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d001      	beq.n	80047b0 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80047ac:	f000 fe04 	bl	80053b8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80047b0:	230c      	movs	r3, #12
 80047b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80047b4:	2303      	movs	r3, #3
 80047b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80047b8:	463b      	mov	r3, r7
 80047ba:	4619      	mov	r1, r3
 80047bc:	4852      	ldr	r0, [pc, #328]	; (8004908 <MX_ADC2_Init+0x204>)
 80047be:	f003 f927 	bl	8007a10 <HAL_ADC_ConfigChannel>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d001      	beq.n	80047cc <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80047c8:	f000 fdf6 	bl	80053b8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80047cc:	230d      	movs	r3, #13
 80047ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80047d0:	2304      	movs	r3, #4
 80047d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80047d4:	463b      	mov	r3, r7
 80047d6:	4619      	mov	r1, r3
 80047d8:	484b      	ldr	r0, [pc, #300]	; (8004908 <MX_ADC2_Init+0x204>)
 80047da:	f003 f919 	bl	8007a10 <HAL_ADC_ConfigChannel>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d001      	beq.n	80047e8 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80047e4:	f000 fde8 	bl	80053b8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80047e8:	2300      	movs	r3, #0
 80047ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80047ec:	2305      	movs	r3, #5
 80047ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80047f0:	463b      	mov	r3, r7
 80047f2:	4619      	mov	r1, r3
 80047f4:	4844      	ldr	r0, [pc, #272]	; (8004908 <MX_ADC2_Init+0x204>)
 80047f6:	f003 f90b 	bl	8007a10 <HAL_ADC_ConfigChannel>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d001      	beq.n	8004804 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8004800:	f000 fdda 	bl	80053b8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004804:	2301      	movs	r3, #1
 8004806:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8004808:	2306      	movs	r3, #6
 800480a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800480c:	463b      	mov	r3, r7
 800480e:	4619      	mov	r1, r3
 8004810:	483d      	ldr	r0, [pc, #244]	; (8004908 <MX_ADC2_Init+0x204>)
 8004812:	f003 f8fd 	bl	8007a10 <HAL_ADC_ConfigChannel>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d001      	beq.n	8004820 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 800481c:	f000 fdcc 	bl	80053b8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8004820:	2302      	movs	r3, #2
 8004822:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8004824:	2307      	movs	r3, #7
 8004826:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004828:	463b      	mov	r3, r7
 800482a:	4619      	mov	r1, r3
 800482c:	4836      	ldr	r0, [pc, #216]	; (8004908 <MX_ADC2_Init+0x204>)
 800482e:	f003 f8ef 	bl	8007a10 <HAL_ADC_ConfigChannel>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d001      	beq.n	800483c <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8004838:	f000 fdbe 	bl	80053b8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800483c:	2303      	movs	r3, #3
 800483e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8004840:	2308      	movs	r3, #8
 8004842:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004844:	463b      	mov	r3, r7
 8004846:	4619      	mov	r1, r3
 8004848:	482f      	ldr	r0, [pc, #188]	; (8004908 <MX_ADC2_Init+0x204>)
 800484a:	f003 f8e1 	bl	8007a10 <HAL_ADC_ConfigChannel>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d001      	beq.n	8004858 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8004854:	f000 fdb0 	bl	80053b8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8004858:	2304      	movs	r3, #4
 800485a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 800485c:	2309      	movs	r3, #9
 800485e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004860:	463b      	mov	r3, r7
 8004862:	4619      	mov	r1, r3
 8004864:	4828      	ldr	r0, [pc, #160]	; (8004908 <MX_ADC2_Init+0x204>)
 8004866:	f003 f8d3 	bl	8007a10 <HAL_ADC_ConfigChannel>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d001      	beq.n	8004874 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8004870:	f000 fda2 	bl	80053b8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8004874:	2305      	movs	r3, #5
 8004876:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8004878:	230a      	movs	r3, #10
 800487a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800487c:	463b      	mov	r3, r7
 800487e:	4619      	mov	r1, r3
 8004880:	4821      	ldr	r0, [pc, #132]	; (8004908 <MX_ADC2_Init+0x204>)
 8004882:	f003 f8c5 	bl	8007a10 <HAL_ADC_ConfigChannel>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d001      	beq.n	8004890 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 800488c:	f000 fd94 	bl	80053b8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004890:	2306      	movs	r3, #6
 8004892:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8004894:	230b      	movs	r3, #11
 8004896:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004898:	463b      	mov	r3, r7
 800489a:	4619      	mov	r1, r3
 800489c:	481a      	ldr	r0, [pc, #104]	; (8004908 <MX_ADC2_Init+0x204>)
 800489e:	f003 f8b7 	bl	8007a10 <HAL_ADC_ConfigChannel>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d001      	beq.n	80048ac <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 80048a8:	f000 fd86 	bl	80053b8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80048ac:	2307      	movs	r3, #7
 80048ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 80048b0:	230c      	movs	r3, #12
 80048b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80048b4:	463b      	mov	r3, r7
 80048b6:	4619      	mov	r1, r3
 80048b8:	4813      	ldr	r0, [pc, #76]	; (8004908 <MX_ADC2_Init+0x204>)
 80048ba:	f003 f8a9 	bl	8007a10 <HAL_ADC_ConfigChannel>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d001      	beq.n	80048c8 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 80048c4:	f000 fd78 	bl	80053b8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80048c8:	2308      	movs	r3, #8
 80048ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 80048cc:	230d      	movs	r3, #13
 80048ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80048d0:	463b      	mov	r3, r7
 80048d2:	4619      	mov	r1, r3
 80048d4:	480c      	ldr	r0, [pc, #48]	; (8004908 <MX_ADC2_Init+0x204>)
 80048d6:	f003 f89b 	bl	8007a10 <HAL_ADC_ConfigChannel>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d001      	beq.n	80048e4 <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 80048e0:	f000 fd6a 	bl	80053b8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80048e4:	2309      	movs	r3, #9
 80048e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 80048e8:	230e      	movs	r3, #14
 80048ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80048ec:	463b      	mov	r3, r7
 80048ee:	4619      	mov	r1, r3
 80048f0:	4805      	ldr	r0, [pc, #20]	; (8004908 <MX_ADC2_Init+0x204>)
 80048f2:	f003 f88d 	bl	8007a10 <HAL_ADC_ConfigChannel>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d001      	beq.n	8004900 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 80048fc:	f000 fd5c 	bl	80053b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8004900:	bf00      	nop
 8004902:	3710      	adds	r7, #16
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	20035a6c 	.word	0x20035a6c
 800490c:	40012100 	.word	0x40012100
 8004910:	0f000001 	.word	0x0f000001

08004914 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004918:	4b12      	ldr	r3, [pc, #72]	; (8004964 <MX_I2C1_Init+0x50>)
 800491a:	4a13      	ldr	r2, [pc, #76]	; (8004968 <MX_I2C1_Init+0x54>)
 800491c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800491e:	4b11      	ldr	r3, [pc, #68]	; (8004964 <MX_I2C1_Init+0x50>)
 8004920:	4a12      	ldr	r2, [pc, #72]	; (800496c <MX_I2C1_Init+0x58>)
 8004922:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004924:	4b0f      	ldr	r3, [pc, #60]	; (8004964 <MX_I2C1_Init+0x50>)
 8004926:	2200      	movs	r2, #0
 8004928:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800492a:	4b0e      	ldr	r3, [pc, #56]	; (8004964 <MX_I2C1_Init+0x50>)
 800492c:	2200      	movs	r2, #0
 800492e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004930:	4b0c      	ldr	r3, [pc, #48]	; (8004964 <MX_I2C1_Init+0x50>)
 8004932:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004936:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004938:	4b0a      	ldr	r3, [pc, #40]	; (8004964 <MX_I2C1_Init+0x50>)
 800493a:	2200      	movs	r2, #0
 800493c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800493e:	4b09      	ldr	r3, [pc, #36]	; (8004964 <MX_I2C1_Init+0x50>)
 8004940:	2200      	movs	r2, #0
 8004942:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004944:	4b07      	ldr	r3, [pc, #28]	; (8004964 <MX_I2C1_Init+0x50>)
 8004946:	2200      	movs	r2, #0
 8004948:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800494a:	4b06      	ldr	r3, [pc, #24]	; (8004964 <MX_I2C1_Init+0x50>)
 800494c:	2280      	movs	r2, #128	; 0x80
 800494e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004950:	4804      	ldr	r0, [pc, #16]	; (8004964 <MX_I2C1_Init+0x50>)
 8004952:	f004 f9af 	bl	8008cb4 <HAL_I2C_Init>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d001      	beq.n	8004960 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800495c:	f000 fd2c 	bl	80053b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004960:	bf00      	nop
 8004962:	bd80      	pop	{r7, pc}
 8004964:	20035ab4 	.word	0x20035ab4
 8004968:	40005400 	.word	0x40005400
 800496c:	000186a0 	.word	0x000186a0

08004970 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004974:	4b12      	ldr	r3, [pc, #72]	; (80049c0 <MX_I2C2_Init+0x50>)
 8004976:	4a13      	ldr	r2, [pc, #76]	; (80049c4 <MX_I2C2_Init+0x54>)
 8004978:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800497a:	4b11      	ldr	r3, [pc, #68]	; (80049c0 <MX_I2C2_Init+0x50>)
 800497c:	4a12      	ldr	r2, [pc, #72]	; (80049c8 <MX_I2C2_Init+0x58>)
 800497e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004980:	4b0f      	ldr	r3, [pc, #60]	; (80049c0 <MX_I2C2_Init+0x50>)
 8004982:	2200      	movs	r2, #0
 8004984:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8004986:	4b0e      	ldr	r3, [pc, #56]	; (80049c0 <MX_I2C2_Init+0x50>)
 8004988:	2200      	movs	r2, #0
 800498a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800498c:	4b0c      	ldr	r3, [pc, #48]	; (80049c0 <MX_I2C2_Init+0x50>)
 800498e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004992:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004994:	4b0a      	ldr	r3, [pc, #40]	; (80049c0 <MX_I2C2_Init+0x50>)
 8004996:	2200      	movs	r2, #0
 8004998:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800499a:	4b09      	ldr	r3, [pc, #36]	; (80049c0 <MX_I2C2_Init+0x50>)
 800499c:	2200      	movs	r2, #0
 800499e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80049a0:	4b07      	ldr	r3, [pc, #28]	; (80049c0 <MX_I2C2_Init+0x50>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80049a6:	4b06      	ldr	r3, [pc, #24]	; (80049c0 <MX_I2C2_Init+0x50>)
 80049a8:	2280      	movs	r2, #128	; 0x80
 80049aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80049ac:	4804      	ldr	r0, [pc, #16]	; (80049c0 <MX_I2C2_Init+0x50>)
 80049ae:	f004 f981 	bl	8008cb4 <HAL_I2C_Init>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d001      	beq.n	80049bc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80049b8:	f000 fcfe 	bl	80053b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80049bc:	bf00      	nop
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	20035b48 	.word	0x20035b48
 80049c4:	40005800 	.word	0x40005800
 80049c8:	000186a0 	.word	0x000186a0

080049cc <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80049cc:	b480      	push	{r7}
 80049ce:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80049d0:	4b0c      	ldr	r3, [pc, #48]	; (8004a04 <MX_SDIO_SD_Init+0x38>)
 80049d2:	4a0d      	ldr	r2, [pc, #52]	; (8004a08 <MX_SDIO_SD_Init+0x3c>)
 80049d4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80049d6:	4b0b      	ldr	r3, [pc, #44]	; (8004a04 <MX_SDIO_SD_Init+0x38>)
 80049d8:	2200      	movs	r2, #0
 80049da:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80049dc:	4b09      	ldr	r3, [pc, #36]	; (8004a04 <MX_SDIO_SD_Init+0x38>)
 80049de:	2200      	movs	r2, #0
 80049e0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80049e2:	4b08      	ldr	r3, [pc, #32]	; (8004a04 <MX_SDIO_SD_Init+0x38>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80049e8:	4b06      	ldr	r3, [pc, #24]	; (8004a04 <MX_SDIO_SD_Init+0x38>)
 80049ea:	2200      	movs	r2, #0
 80049ec:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80049ee:	4b05      	ldr	r3, [pc, #20]	; (8004a04 <MX_SDIO_SD_Init+0x38>)
 80049f0:	2200      	movs	r2, #0
 80049f2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80049f4:	4b03      	ldr	r3, [pc, #12]	; (8004a04 <MX_SDIO_SD_Init+0x38>)
 80049f6:	2200      	movs	r2, #0
 80049f8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80049fa:	bf00      	nop
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr
 8004a04:	20035d48 	.word	0x20035d48
 8004a08:	40012c00 	.word	0x40012c00

08004a0c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004a10:	4b17      	ldr	r3, [pc, #92]	; (8004a70 <MX_SPI2_Init+0x64>)
 8004a12:	4a18      	ldr	r2, [pc, #96]	; (8004a74 <MX_SPI2_Init+0x68>)
 8004a14:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004a16:	4b16      	ldr	r3, [pc, #88]	; (8004a70 <MX_SPI2_Init+0x64>)
 8004a18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004a1c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004a1e:	4b14      	ldr	r3, [pc, #80]	; (8004a70 <MX_SPI2_Init+0x64>)
 8004a20:	2200      	movs	r2, #0
 8004a22:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004a24:	4b12      	ldr	r3, [pc, #72]	; (8004a70 <MX_SPI2_Init+0x64>)
 8004a26:	2200      	movs	r2, #0
 8004a28:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004a2a:	4b11      	ldr	r3, [pc, #68]	; (8004a70 <MX_SPI2_Init+0x64>)
 8004a2c:	2202      	movs	r2, #2
 8004a2e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004a30:	4b0f      	ldr	r3, [pc, #60]	; (8004a70 <MX_SPI2_Init+0x64>)
 8004a32:	2201      	movs	r2, #1
 8004a34:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004a36:	4b0e      	ldr	r3, [pc, #56]	; (8004a70 <MX_SPI2_Init+0x64>)
 8004a38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a3c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8004a3e:	4b0c      	ldr	r3, [pc, #48]	; (8004a70 <MX_SPI2_Init+0x64>)
 8004a40:	2228      	movs	r2, #40	; 0x28
 8004a42:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004a44:	4b0a      	ldr	r3, [pc, #40]	; (8004a70 <MX_SPI2_Init+0x64>)
 8004a46:	2200      	movs	r2, #0
 8004a48:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004a4a:	4b09      	ldr	r3, [pc, #36]	; (8004a70 <MX_SPI2_Init+0x64>)
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a50:	4b07      	ldr	r3, [pc, #28]	; (8004a70 <MX_SPI2_Init+0x64>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8004a56:	4b06      	ldr	r3, [pc, #24]	; (8004a70 <MX_SPI2_Init+0x64>)
 8004a58:	220a      	movs	r2, #10
 8004a5a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004a5c:	4804      	ldr	r0, [pc, #16]	; (8004a70 <MX_SPI2_Init+0x64>)
 8004a5e:	f007 fa5b 	bl	800bf18 <HAL_SPI_Init>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d001      	beq.n	8004a6c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004a68:	f000 fca6 	bl	80053b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004a6c:	bf00      	nop
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	20035994 	.word	0x20035994
 8004a74:	40003800 	.word	0x40003800

08004a78 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b09a      	sub	sp, #104	; 0x68
 8004a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004a7e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004a82:	2224      	movs	r2, #36	; 0x24
 8004a84:	2100      	movs	r1, #0
 8004a86:	4618      	mov	r0, r3
 8004a88:	f00e fbe5 	bl	8013256 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a8c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004a90:	2200      	movs	r2, #0
 8004a92:	601a      	str	r2, [r3, #0]
 8004a94:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004a96:	f107 0320 	add.w	r3, r7, #32
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	601a      	str	r2, [r3, #0]
 8004a9e:	605a      	str	r2, [r3, #4]
 8004aa0:	609a      	str	r2, [r3, #8]
 8004aa2:	60da      	str	r2, [r3, #12]
 8004aa4:	611a      	str	r2, [r3, #16]
 8004aa6:	615a      	str	r2, [r3, #20]
 8004aa8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004aaa:	463b      	mov	r3, r7
 8004aac:	2220      	movs	r2, #32
 8004aae:	2100      	movs	r1, #0
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f00e fbd0 	bl	8013256 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004ab6:	4b42      	ldr	r3, [pc, #264]	; (8004bc0 <MX_TIM1_Init+0x148>)
 8004ab8:	4a42      	ldr	r2, [pc, #264]	; (8004bc4 <MX_TIM1_Init+0x14c>)
 8004aba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004abc:	4b40      	ldr	r3, [pc, #256]	; (8004bc0 <MX_TIM1_Init+0x148>)
 8004abe:	2200      	movs	r2, #0
 8004ac0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ac2:	4b3f      	ldr	r3, [pc, #252]	; (8004bc0 <MX_TIM1_Init+0x148>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004ac8:	4b3d      	ldr	r3, [pc, #244]	; (8004bc0 <MX_TIM1_Init+0x148>)
 8004aca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ace:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ad0:	4b3b      	ldr	r3, [pc, #236]	; (8004bc0 <MX_TIM1_Init+0x148>)
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004ad6:	4b3a      	ldr	r3, [pc, #232]	; (8004bc0 <MX_TIM1_Init+0x148>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004adc:	4b38      	ldr	r3, [pc, #224]	; (8004bc0 <MX_TIM1_Init+0x148>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004ae2:	4837      	ldr	r0, [pc, #220]	; (8004bc0 <MX_TIM1_Init+0x148>)
 8004ae4:	f007 ffbb 	bl	800ca5e <HAL_TIM_PWM_Init>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8004aee:	f000 fc63 	bl	80053b8 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004af2:	2303      	movs	r3, #3
 8004af4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004af6:	2300      	movs	r3, #0
 8004af8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004afa:	2301      	movs	r3, #1
 8004afc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004afe:	2300      	movs	r3, #0
 8004b00:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8004b02:	2300      	movs	r3, #0
 8004b04:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004b06:	2300      	movs	r3, #0
 8004b08:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8004b12:	2300      	movs	r3, #0
 8004b14:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8004b16:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	4828      	ldr	r0, [pc, #160]	; (8004bc0 <MX_TIM1_Init+0x148>)
 8004b1e:	f008 f807 	bl	800cb30 <HAL_TIM_Encoder_Init>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d001      	beq.n	8004b2c <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8004b28:	f000 fc46 	bl	80053b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b30:	2300      	movs	r3, #0
 8004b32:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004b34:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004b38:	4619      	mov	r1, r3
 8004b3a:	4821      	ldr	r0, [pc, #132]	; (8004bc0 <MX_TIM1_Init+0x148>)
 8004b3c:	f008 fd2e 	bl	800d59c <HAL_TIMEx_MasterConfigSynchronization>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8004b46:	f000 fc37 	bl	80053b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004b4a:	2360      	movs	r3, #96	; 0x60
 8004b4c:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004b52:	2300      	movs	r3, #0
 8004b54:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004b56:	2300      	movs	r3, #0
 8004b58:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004b62:	2300      	movs	r3, #0
 8004b64:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004b66:	f107 0320 	add.w	r3, r7, #32
 8004b6a:	2208      	movs	r2, #8
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	4814      	ldr	r0, [pc, #80]	; (8004bc0 <MX_TIM1_Init+0x148>)
 8004b70:	f008 f9b0 	bl	800ced4 <HAL_TIM_PWM_ConfigChannel>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d001      	beq.n	8004b7e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8004b7a:	f000 fc1d 	bl	80053b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004b82:	2300      	movs	r3, #0
 8004b84:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004b86:	2300      	movs	r3, #0
 8004b88:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004b92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b96:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004b9c:	463b      	mov	r3, r7
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	4807      	ldr	r0, [pc, #28]	; (8004bc0 <MX_TIM1_Init+0x148>)
 8004ba2:	f008 fd77 	bl	800d694 <HAL_TIMEx_ConfigBreakDeadTime>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d001      	beq.n	8004bb0 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8004bac:	f000 fc04 	bl	80053b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004bb0:	4803      	ldr	r0, [pc, #12]	; (8004bc0 <MX_TIM1_Init+0x148>)
 8004bb2:	f000 fff1 	bl	8005b98 <HAL_TIM_MspPostInit>

}
 8004bb6:	bf00      	nop
 8004bb8:	3768      	adds	r7, #104	; 0x68
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	20035d08 	.word	0x20035d08
 8004bc4:	40010000 	.word	0x40010000

08004bc8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b08a      	sub	sp, #40	; 0x28
 8004bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004bce:	f107 0320 	add.w	r3, r7, #32
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	601a      	str	r2, [r3, #0]
 8004bd6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004bd8:	1d3b      	adds	r3, r7, #4
 8004bda:	2200      	movs	r2, #0
 8004bdc:	601a      	str	r2, [r3, #0]
 8004bde:	605a      	str	r2, [r3, #4]
 8004be0:	609a      	str	r2, [r3, #8]
 8004be2:	60da      	str	r2, [r3, #12]
 8004be4:	611a      	str	r2, [r3, #16]
 8004be6:	615a      	str	r2, [r3, #20]
 8004be8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004bea:	4b27      	ldr	r3, [pc, #156]	; (8004c88 <MX_TIM3_Init+0xc0>)
 8004bec:	4a27      	ldr	r2, [pc, #156]	; (8004c8c <MX_TIM3_Init+0xc4>)
 8004bee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004bf0:	4b25      	ldr	r3, [pc, #148]	; (8004c88 <MX_TIM3_Init+0xc0>)
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bf6:	4b24      	ldr	r3, [pc, #144]	; (8004c88 <MX_TIM3_Init+0xc0>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004bfc:	4b22      	ldr	r3, [pc, #136]	; (8004c88 <MX_TIM3_Init+0xc0>)
 8004bfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c02:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c04:	4b20      	ldr	r3, [pc, #128]	; (8004c88 <MX_TIM3_Init+0xc0>)
 8004c06:	2200      	movs	r2, #0
 8004c08:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c0a:	4b1f      	ldr	r3, [pc, #124]	; (8004c88 <MX_TIM3_Init+0xc0>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004c10:	481d      	ldr	r0, [pc, #116]	; (8004c88 <MX_TIM3_Init+0xc0>)
 8004c12:	f007 ff24 	bl	800ca5e <HAL_TIM_PWM_Init>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d001      	beq.n	8004c20 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8004c1c:	f000 fbcc 	bl	80053b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c20:	2300      	movs	r3, #0
 8004c22:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c24:	2300      	movs	r3, #0
 8004c26:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004c28:	f107 0320 	add.w	r3, r7, #32
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	4816      	ldr	r0, [pc, #88]	; (8004c88 <MX_TIM3_Init+0xc0>)
 8004c30:	f008 fcb4 	bl	800d59c <HAL_TIMEx_MasterConfigSynchronization>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8004c3a:	f000 fbbd 	bl	80053b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004c3e:	2360      	movs	r3, #96	; 0x60
 8004c40:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004c42:	2300      	movs	r3, #0
 8004c44:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004c46:	2300      	movs	r3, #0
 8004c48:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004c4e:	1d3b      	adds	r3, r7, #4
 8004c50:	2200      	movs	r2, #0
 8004c52:	4619      	mov	r1, r3
 8004c54:	480c      	ldr	r0, [pc, #48]	; (8004c88 <MX_TIM3_Init+0xc0>)
 8004c56:	f008 f93d 	bl	800ced4 <HAL_TIM_PWM_ConfigChannel>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d001      	beq.n	8004c64 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8004c60:	f000 fbaa 	bl	80053b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004c64:	1d3b      	adds	r3, r7, #4
 8004c66:	2204      	movs	r2, #4
 8004c68:	4619      	mov	r1, r3
 8004c6a:	4807      	ldr	r0, [pc, #28]	; (8004c88 <MX_TIM3_Init+0xc0>)
 8004c6c:	f008 f932 	bl	800ced4 <HAL_TIM_PWM_ConfigChannel>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d001      	beq.n	8004c7a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8004c76:	f000 fb9f 	bl	80053b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004c7a:	4803      	ldr	r0, [pc, #12]	; (8004c88 <MX_TIM3_Init+0xc0>)
 8004c7c:	f000 ff8c 	bl	8005b98 <HAL_TIM_MspPostInit>

}
 8004c80:	bf00      	nop
 8004c82:	3728      	adds	r7, #40	; 0x28
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	20035ba0 	.word	0x20035ba0
 8004c8c:	40000400 	.word	0x40000400

08004c90 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b08a      	sub	sp, #40	; 0x28
 8004c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c96:	f107 0320 	add.w	r3, r7, #32
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	601a      	str	r2, [r3, #0]
 8004c9e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004ca0:	1d3b      	adds	r3, r7, #4
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	601a      	str	r2, [r3, #0]
 8004ca6:	605a      	str	r2, [r3, #4]
 8004ca8:	609a      	str	r2, [r3, #8]
 8004caa:	60da      	str	r2, [r3, #12]
 8004cac:	611a      	str	r2, [r3, #16]
 8004cae:	615a      	str	r2, [r3, #20]
 8004cb0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004cb2:	4b27      	ldr	r3, [pc, #156]	; (8004d50 <MX_TIM4_Init+0xc0>)
 8004cb4:	4a27      	ldr	r2, [pc, #156]	; (8004d54 <MX_TIM4_Init+0xc4>)
 8004cb6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004cb8:	4b25      	ldr	r3, [pc, #148]	; (8004d50 <MX_TIM4_Init+0xc0>)
 8004cba:	2200      	movs	r2, #0
 8004cbc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cbe:	4b24      	ldr	r3, [pc, #144]	; (8004d50 <MX_TIM4_Init+0xc0>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 8004cc4:	4b22      	ldr	r3, [pc, #136]	; (8004d50 <MX_TIM4_Init+0xc0>)
 8004cc6:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8004cca:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ccc:	4b20      	ldr	r3, [pc, #128]	; (8004d50 <MX_TIM4_Init+0xc0>)
 8004cce:	2200      	movs	r2, #0
 8004cd0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004cd2:	4b1f      	ldr	r3, [pc, #124]	; (8004d50 <MX_TIM4_Init+0xc0>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004cd8:	481d      	ldr	r0, [pc, #116]	; (8004d50 <MX_TIM4_Init+0xc0>)
 8004cda:	f007 fec0 	bl	800ca5e <HAL_TIM_PWM_Init>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d001      	beq.n	8004ce8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8004ce4:	f000 fb68 	bl	80053b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004cec:	2300      	movs	r3, #0
 8004cee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004cf0:	f107 0320 	add.w	r3, r7, #32
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	4816      	ldr	r0, [pc, #88]	; (8004d50 <MX_TIM4_Init+0xc0>)
 8004cf8:	f008 fc50 	bl	800d59c <HAL_TIMEx_MasterConfigSynchronization>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d001      	beq.n	8004d06 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8004d02:	f000 fb59 	bl	80053b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004d06:	2360      	movs	r3, #96	; 0x60
 8004d08:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004d12:	2300      	movs	r3, #0
 8004d14:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004d16:	1d3b      	adds	r3, r7, #4
 8004d18:	2208      	movs	r2, #8
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	480c      	ldr	r0, [pc, #48]	; (8004d50 <MX_TIM4_Init+0xc0>)
 8004d1e:	f008 f8d9 	bl	800ced4 <HAL_TIM_PWM_ConfigChannel>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d001      	beq.n	8004d2c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8004d28:	f000 fb46 	bl	80053b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004d2c:	1d3b      	adds	r3, r7, #4
 8004d2e:	220c      	movs	r2, #12
 8004d30:	4619      	mov	r1, r3
 8004d32:	4807      	ldr	r0, [pc, #28]	; (8004d50 <MX_TIM4_Init+0xc0>)
 8004d34:	f008 f8ce 	bl	800ced4 <HAL_TIM_PWM_ConfigChannel>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d001      	beq.n	8004d42 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8004d3e:	f000 fb3b 	bl	80053b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8004d42:	4803      	ldr	r0, [pc, #12]	; (8004d50 <MX_TIM4_Init+0xc0>)
 8004d44:	f000 ff28 	bl	8005b98 <HAL_TIM_MspPostInit>

}
 8004d48:	bf00      	nop
 8004d4a:	3728      	adds	r7, #40	; 0x28
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	20035a2c 	.word	0x20035a2c
 8004d54:	40000800 	.word	0x40000800

08004d58 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d5e:	463b      	mov	r3, r7
 8004d60:	2200      	movs	r2, #0
 8004d62:	601a      	str	r2, [r3, #0]
 8004d64:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004d66:	4b15      	ldr	r3, [pc, #84]	; (8004dbc <MX_TIM6_Init+0x64>)
 8004d68:	4a15      	ldr	r2, [pc, #84]	; (8004dc0 <MX_TIM6_Init+0x68>)
 8004d6a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8004d6c:	4b13      	ldr	r3, [pc, #76]	; (8004dbc <MX_TIM6_Init+0x64>)
 8004d6e:	2259      	movs	r2, #89	; 0x59
 8004d70:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d72:	4b12      	ldr	r3, [pc, #72]	; (8004dbc <MX_TIM6_Init+0x64>)
 8004d74:	2200      	movs	r2, #0
 8004d76:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8004d78:	4b10      	ldr	r3, [pc, #64]	; (8004dbc <MX_TIM6_Init+0x64>)
 8004d7a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004d7e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004d80:	4b0e      	ldr	r3, [pc, #56]	; (8004dbc <MX_TIM6_Init+0x64>)
 8004d82:	2280      	movs	r2, #128	; 0x80
 8004d84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004d86:	480d      	ldr	r0, [pc, #52]	; (8004dbc <MX_TIM6_Init+0x64>)
 8004d88:	f007 fe1a 	bl	800c9c0 <HAL_TIM_Base_Init>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d001      	beq.n	8004d96 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8004d92:	f000 fb11 	bl	80053b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d96:	2300      	movs	r3, #0
 8004d98:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004d9e:	463b      	mov	r3, r7
 8004da0:	4619      	mov	r1, r3
 8004da2:	4806      	ldr	r0, [pc, #24]	; (8004dbc <MX_TIM6_Init+0x64>)
 8004da4:	f008 fbfa 	bl	800d59c <HAL_TIMEx_MasterConfigSynchronization>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d001      	beq.n	8004db2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8004dae:	f000 fb03 	bl	80053b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004db2:	bf00      	nop
 8004db4:	3708      	adds	r7, #8
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	20035cc8 	.word	0x20035cc8
 8004dc0:	40001000 	.word	0x40001000

08004dc4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004dca:	463b      	mov	r3, r7
 8004dcc:	2200      	movs	r2, #0
 8004dce:	601a      	str	r2, [r3, #0]
 8004dd0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004dd2:	4b14      	ldr	r3, [pc, #80]	; (8004e24 <MX_TIM7_Init+0x60>)
 8004dd4:	4a14      	ldr	r2, [pc, #80]	; (8004e28 <MX_TIM7_Init+0x64>)
 8004dd6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 8004dd8:	4b12      	ldr	r3, [pc, #72]	; (8004e24 <MX_TIM7_Init+0x60>)
 8004dda:	22b3      	movs	r2, #179	; 0xb3
 8004ddc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004dde:	4b11      	ldr	r3, [pc, #68]	; (8004e24 <MX_TIM7_Init+0x60>)
 8004de0:	2200      	movs	r2, #0
 8004de2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 8004de4:	4b0f      	ldr	r3, [pc, #60]	; (8004e24 <MX_TIM7_Init+0x60>)
 8004de6:	2231      	movs	r2, #49	; 0x31
 8004de8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004dea:	4b0e      	ldr	r3, [pc, #56]	; (8004e24 <MX_TIM7_Init+0x60>)
 8004dec:	2280      	movs	r2, #128	; 0x80
 8004dee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004df0:	480c      	ldr	r0, [pc, #48]	; (8004e24 <MX_TIM7_Init+0x60>)
 8004df2:	f007 fde5 	bl	800c9c0 <HAL_TIM_Base_Init>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d001      	beq.n	8004e00 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8004dfc:	f000 fadc 	bl	80053b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e00:	2300      	movs	r3, #0
 8004e02:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e04:	2300      	movs	r3, #0
 8004e06:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004e08:	463b      	mov	r3, r7
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	4805      	ldr	r0, [pc, #20]	; (8004e24 <MX_TIM7_Init+0x60>)
 8004e0e:	f008 fbc5 	bl	800d59c <HAL_TIMEx_MasterConfigSynchronization>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d001      	beq.n	8004e1c <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8004e18:	f000 face 	bl	80053b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004e1c:	bf00      	nop
 8004e1e:	3708      	adds	r7, #8
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	20035e6c 	.word	0x20035e6c
 8004e28:	40001400 	.word	0x40001400

08004e2c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b08c      	sub	sp, #48	; 0x30
 8004e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004e32:	f107 030c 	add.w	r3, r7, #12
 8004e36:	2224      	movs	r2, #36	; 0x24
 8004e38:	2100      	movs	r1, #0
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f00e fa0b 	bl	8013256 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e40:	1d3b      	adds	r3, r7, #4
 8004e42:	2200      	movs	r2, #0
 8004e44:	601a      	str	r2, [r3, #0]
 8004e46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004e48:	4b22      	ldr	r3, [pc, #136]	; (8004ed4 <MX_TIM8_Init+0xa8>)
 8004e4a:	4a23      	ldr	r2, [pc, #140]	; (8004ed8 <MX_TIM8_Init+0xac>)
 8004e4c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8004e4e:	4b21      	ldr	r3, [pc, #132]	; (8004ed4 <MX_TIM8_Init+0xa8>)
 8004e50:	2200      	movs	r2, #0
 8004e52:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8004e54:	4b1f      	ldr	r3, [pc, #124]	; (8004ed4 <MX_TIM8_Init+0xa8>)
 8004e56:	2210      	movs	r2, #16
 8004e58:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8004e5a:	4b1e      	ldr	r3, [pc, #120]	; (8004ed4 <MX_TIM8_Init+0xa8>)
 8004e5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e60:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e62:	4b1c      	ldr	r3, [pc, #112]	; (8004ed4 <MX_TIM8_Init+0xa8>)
 8004e64:	2200      	movs	r2, #0
 8004e66:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004e68:	4b1a      	ldr	r3, [pc, #104]	; (8004ed4 <MX_TIM8_Init+0xa8>)
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e6e:	4b19      	ldr	r3, [pc, #100]	; (8004ed4 <MX_TIM8_Init+0xa8>)
 8004e70:	2200      	movs	r2, #0
 8004e72:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004e74:	2303      	movs	r3, #3
 8004e76:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004e80:	2300      	movs	r3, #0
 8004e82:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004e84:	2300      	movs	r3, #0
 8004e86:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004e90:	2300      	movs	r3, #0
 8004e92:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004e94:	2300      	movs	r3, #0
 8004e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8004e98:	f107 030c 	add.w	r3, r7, #12
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	480d      	ldr	r0, [pc, #52]	; (8004ed4 <MX_TIM8_Init+0xa8>)
 8004ea0:	f007 fe46 	bl	800cb30 <HAL_TIM_Encoder_Init>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d001      	beq.n	8004eae <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8004eaa:	f000 fa85 	bl	80053b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004eb6:	1d3b      	adds	r3, r7, #4
 8004eb8:	4619      	mov	r1, r3
 8004eba:	4806      	ldr	r0, [pc, #24]	; (8004ed4 <MX_TIM8_Init+0xa8>)
 8004ebc:	f008 fb6e 	bl	800d59c <HAL_TIMEx_MasterConfigSynchronization>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d001      	beq.n	8004eca <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8004ec6:	f000 fa77 	bl	80053b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8004eca:	bf00      	nop
 8004ecc:	3730      	adds	r7, #48	; 0x30
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	200359ec 	.word	0x200359ec
 8004ed8:	40010400 	.word	0x40010400

08004edc <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b088      	sub	sp, #32
 8004ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004ee2:	1d3b      	adds	r3, r7, #4
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	601a      	str	r2, [r3, #0]
 8004ee8:	605a      	str	r2, [r3, #4]
 8004eea:	609a      	str	r2, [r3, #8]
 8004eec:	60da      	str	r2, [r3, #12]
 8004eee:	611a      	str	r2, [r3, #16]
 8004ef0:	615a      	str	r2, [r3, #20]
 8004ef2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8004ef4:	4b1e      	ldr	r3, [pc, #120]	; (8004f70 <MX_TIM10_Init+0x94>)
 8004ef6:	4a1f      	ldr	r2, [pc, #124]	; (8004f74 <MX_TIM10_Init+0x98>)
 8004ef8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8004efa:	4b1d      	ldr	r3, [pc, #116]	; (8004f70 <MX_TIM10_Init+0x94>)
 8004efc:	2200      	movs	r2, #0
 8004efe:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f00:	4b1b      	ldr	r3, [pc, #108]	; (8004f70 <MX_TIM10_Init+0x94>)
 8004f02:	2200      	movs	r2, #0
 8004f04:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8004f06:	4b1a      	ldr	r3, [pc, #104]	; (8004f70 <MX_TIM10_Init+0x94>)
 8004f08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f0c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f0e:	4b18      	ldr	r3, [pc, #96]	; (8004f70 <MX_TIM10_Init+0x94>)
 8004f10:	2200      	movs	r2, #0
 8004f12:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f14:	4b16      	ldr	r3, [pc, #88]	; (8004f70 <MX_TIM10_Init+0x94>)
 8004f16:	2200      	movs	r2, #0
 8004f18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8004f1a:	4815      	ldr	r0, [pc, #84]	; (8004f70 <MX_TIM10_Init+0x94>)
 8004f1c:	f007 fd50 	bl	800c9c0 <HAL_TIM_Base_Init>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d001      	beq.n	8004f2a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8004f26:	f000 fa47 	bl	80053b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8004f2a:	4811      	ldr	r0, [pc, #68]	; (8004f70 <MX_TIM10_Init+0x94>)
 8004f2c:	f007 fd97 	bl	800ca5e <HAL_TIM_PWM_Init>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d001      	beq.n	8004f3a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8004f36:	f000 fa3f 	bl	80053b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004f3a:	2360      	movs	r3, #96	; 0x60
 8004f3c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004f42:	2300      	movs	r3, #0
 8004f44:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004f46:	2300      	movs	r3, #0
 8004f48:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004f4a:	1d3b      	adds	r3, r7, #4
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	4619      	mov	r1, r3
 8004f50:	4807      	ldr	r0, [pc, #28]	; (8004f70 <MX_TIM10_Init+0x94>)
 8004f52:	f007 ffbf 	bl	800ced4 <HAL_TIM_PWM_ConfigChannel>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d001      	beq.n	8004f60 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8004f5c:	f000 fa2c 	bl	80053b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8004f60:	4803      	ldr	r0, [pc, #12]	; (8004f70 <MX_TIM10_Init+0x94>)
 8004f62:	f000 fe19 	bl	8005b98 <HAL_TIM_MspPostInit>

}
 8004f66:	bf00      	nop
 8004f68:	3720      	adds	r7, #32
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	20035b08 	.word	0x20035b08
 8004f74:	40014400 	.word	0x40014400

08004f78 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b088      	sub	sp, #32
 8004f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004f7e:	1d3b      	adds	r3, r7, #4
 8004f80:	2200      	movs	r2, #0
 8004f82:	601a      	str	r2, [r3, #0]
 8004f84:	605a      	str	r2, [r3, #4]
 8004f86:	609a      	str	r2, [r3, #8]
 8004f88:	60da      	str	r2, [r3, #12]
 8004f8a:	611a      	str	r2, [r3, #16]
 8004f8c:	615a      	str	r2, [r3, #20]
 8004f8e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8004f90:	4b1e      	ldr	r3, [pc, #120]	; (800500c <MX_TIM11_Init+0x94>)
 8004f92:	4a1f      	ldr	r2, [pc, #124]	; (8005010 <MX_TIM11_Init+0x98>)
 8004f94:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8004f96:	4b1d      	ldr	r3, [pc, #116]	; (800500c <MX_TIM11_Init+0x94>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f9c:	4b1b      	ldr	r3, [pc, #108]	; (800500c <MX_TIM11_Init+0x94>)
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8004fa2:	4b1a      	ldr	r3, [pc, #104]	; (800500c <MX_TIM11_Init+0x94>)
 8004fa4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004fa8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004faa:	4b18      	ldr	r3, [pc, #96]	; (800500c <MX_TIM11_Init+0x94>)
 8004fac:	2200      	movs	r2, #0
 8004fae:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004fb0:	4b16      	ldr	r3, [pc, #88]	; (800500c <MX_TIM11_Init+0x94>)
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8004fb6:	4815      	ldr	r0, [pc, #84]	; (800500c <MX_TIM11_Init+0x94>)
 8004fb8:	f007 fd02 	bl	800c9c0 <HAL_TIM_Base_Init>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d001      	beq.n	8004fc6 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8004fc2:	f000 f9f9 	bl	80053b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8004fc6:	4811      	ldr	r0, [pc, #68]	; (800500c <MX_TIM11_Init+0x94>)
 8004fc8:	f007 fd49 	bl	800ca5e <HAL_TIM_PWM_Init>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d001      	beq.n	8004fd6 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8004fd2:	f000 f9f1 	bl	80053b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004fd6:	2360      	movs	r3, #96	; 0x60
 8004fd8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004fe6:	1d3b      	adds	r3, r7, #4
 8004fe8:	2200      	movs	r2, #0
 8004fea:	4619      	mov	r1, r3
 8004fec:	4807      	ldr	r0, [pc, #28]	; (800500c <MX_TIM11_Init+0x94>)
 8004fee:	f007 ff71 	bl	800ced4 <HAL_TIM_PWM_ConfigChannel>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d001      	beq.n	8004ffc <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8004ff8:	f000 f9de 	bl	80053b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8004ffc:	4803      	ldr	r0, [pc, #12]	; (800500c <MX_TIM11_Init+0x94>)
 8004ffe:	f000 fdcb 	bl	8005b98 <HAL_TIM_MspPostInit>

}
 8005002:	bf00      	nop
 8005004:	3720      	adds	r7, #32
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	20035c28 	.word	0x20035c28
 8005010:	40014800 	.word	0x40014800

08005014 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8005018:	4b0e      	ldr	r3, [pc, #56]	; (8005054 <MX_TIM13_Init+0x40>)
 800501a:	4a0f      	ldr	r2, [pc, #60]	; (8005058 <MX_TIM13_Init+0x44>)
 800501c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 800501e:	4b0d      	ldr	r3, [pc, #52]	; (8005054 <MX_TIM13_Init+0x40>)
 8005020:	2259      	movs	r2, #89	; 0x59
 8005022:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005024:	4b0b      	ldr	r3, [pc, #44]	; (8005054 <MX_TIM13_Init+0x40>)
 8005026:	2200      	movs	r2, #0
 8005028:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 800502a:	4b0a      	ldr	r3, [pc, #40]	; (8005054 <MX_TIM13_Init+0x40>)
 800502c:	f242 720f 	movw	r2, #9999	; 0x270f
 8005030:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005032:	4b08      	ldr	r3, [pc, #32]	; (8005054 <MX_TIM13_Init+0x40>)
 8005034:	2200      	movs	r2, #0
 8005036:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005038:	4b06      	ldr	r3, [pc, #24]	; (8005054 <MX_TIM13_Init+0x40>)
 800503a:	2280      	movs	r2, #128	; 0x80
 800503c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800503e:	4805      	ldr	r0, [pc, #20]	; (8005054 <MX_TIM13_Init+0x40>)
 8005040:	f007 fcbe 	bl	800c9c0 <HAL_TIM_Base_Init>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d001      	beq.n	800504e <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 800504a:	f000 f9b5 	bl	80053b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800504e:	bf00      	nop
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	20035be8 	.word	0x20035be8
 8005058:	40001c00 	.word	0x40001c00

0800505c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005060:	4b11      	ldr	r3, [pc, #68]	; (80050a8 <MX_USART2_UART_Init+0x4c>)
 8005062:	4a12      	ldr	r2, [pc, #72]	; (80050ac <MX_USART2_UART_Init+0x50>)
 8005064:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005066:	4b10      	ldr	r3, [pc, #64]	; (80050a8 <MX_USART2_UART_Init+0x4c>)
 8005068:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800506c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800506e:	4b0e      	ldr	r3, [pc, #56]	; (80050a8 <MX_USART2_UART_Init+0x4c>)
 8005070:	2200      	movs	r2, #0
 8005072:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005074:	4b0c      	ldr	r3, [pc, #48]	; (80050a8 <MX_USART2_UART_Init+0x4c>)
 8005076:	2200      	movs	r2, #0
 8005078:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800507a:	4b0b      	ldr	r3, [pc, #44]	; (80050a8 <MX_USART2_UART_Init+0x4c>)
 800507c:	2200      	movs	r2, #0
 800507e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005080:	4b09      	ldr	r3, [pc, #36]	; (80050a8 <MX_USART2_UART_Init+0x4c>)
 8005082:	220c      	movs	r2, #12
 8005084:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005086:	4b08      	ldr	r3, [pc, #32]	; (80050a8 <MX_USART2_UART_Init+0x4c>)
 8005088:	2200      	movs	r2, #0
 800508a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800508c:	4b06      	ldr	r3, [pc, #24]	; (80050a8 <MX_USART2_UART_Init+0x4c>)
 800508e:	2200      	movs	r2, #0
 8005090:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005092:	4805      	ldr	r0, [pc, #20]	; (80050a8 <MX_USART2_UART_Init+0x4c>)
 8005094:	f008 fb64 	bl	800d760 <HAL_UART_Init>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d001      	beq.n	80050a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800509e:	f000 f98b 	bl	80053b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80050a2:	bf00      	nop
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	20035dcc 	.word	0x20035dcc
 80050ac:	40004400 	.word	0x40004400

080050b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80050b6:	2300      	movs	r3, #0
 80050b8:	607b      	str	r3, [r7, #4]
 80050ba:	4b14      	ldr	r3, [pc, #80]	; (800510c <MX_DMA_Init+0x5c>)
 80050bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050be:	4a13      	ldr	r2, [pc, #76]	; (800510c <MX_DMA_Init+0x5c>)
 80050c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80050c4:	6313      	str	r3, [r2, #48]	; 0x30
 80050c6:	4b11      	ldr	r3, [pc, #68]	; (800510c <MX_DMA_Init+0x5c>)
 80050c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050ce:	607b      	str	r3, [r7, #4]
 80050d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80050d2:	2200      	movs	r2, #0
 80050d4:	2100      	movs	r1, #0
 80050d6:	203a      	movs	r0, #58	; 0x3a
 80050d8:	f003 f825 	bl	8008126 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80050dc:	203a      	movs	r0, #58	; 0x3a
 80050de:	f003 f83e 	bl	800815e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80050e2:	2200      	movs	r2, #0
 80050e4:	2100      	movs	r1, #0
 80050e6:	203b      	movs	r0, #59	; 0x3b
 80050e8:	f003 f81d 	bl	8008126 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80050ec:	203b      	movs	r0, #59	; 0x3b
 80050ee:	f003 f836 	bl	800815e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80050f2:	2200      	movs	r2, #0
 80050f4:	2100      	movs	r1, #0
 80050f6:	2045      	movs	r0, #69	; 0x45
 80050f8:	f003 f815 	bl	8008126 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80050fc:	2045      	movs	r0, #69	; 0x45
 80050fe:	f003 f82e 	bl	800815e <HAL_NVIC_EnableIRQ>

}
 8005102:	bf00      	nop
 8005104:	3708      	adds	r7, #8
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	40023800 	.word	0x40023800

08005110 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b08c      	sub	sp, #48	; 0x30
 8005114:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005116:	f107 031c 	add.w	r3, r7, #28
 800511a:	2200      	movs	r2, #0
 800511c:	601a      	str	r2, [r3, #0]
 800511e:	605a      	str	r2, [r3, #4]
 8005120:	609a      	str	r2, [r3, #8]
 8005122:	60da      	str	r2, [r3, #12]
 8005124:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005126:	2300      	movs	r3, #0
 8005128:	61bb      	str	r3, [r7, #24]
 800512a:	4b9c      	ldr	r3, [pc, #624]	; (800539c <MX_GPIO_Init+0x28c>)
 800512c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512e:	4a9b      	ldr	r2, [pc, #620]	; (800539c <MX_GPIO_Init+0x28c>)
 8005130:	f043 0310 	orr.w	r3, r3, #16
 8005134:	6313      	str	r3, [r2, #48]	; 0x30
 8005136:	4b99      	ldr	r3, [pc, #612]	; (800539c <MX_GPIO_Init+0x28c>)
 8005138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513a:	f003 0310 	and.w	r3, r3, #16
 800513e:	61bb      	str	r3, [r7, #24]
 8005140:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005142:	2300      	movs	r3, #0
 8005144:	617b      	str	r3, [r7, #20]
 8005146:	4b95      	ldr	r3, [pc, #596]	; (800539c <MX_GPIO_Init+0x28c>)
 8005148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514a:	4a94      	ldr	r2, [pc, #592]	; (800539c <MX_GPIO_Init+0x28c>)
 800514c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005150:	6313      	str	r3, [r2, #48]	; 0x30
 8005152:	4b92      	ldr	r3, [pc, #584]	; (800539c <MX_GPIO_Init+0x28c>)
 8005154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800515a:	617b      	str	r3, [r7, #20]
 800515c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800515e:	2300      	movs	r3, #0
 8005160:	613b      	str	r3, [r7, #16]
 8005162:	4b8e      	ldr	r3, [pc, #568]	; (800539c <MX_GPIO_Init+0x28c>)
 8005164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005166:	4a8d      	ldr	r2, [pc, #564]	; (800539c <MX_GPIO_Init+0x28c>)
 8005168:	f043 0304 	orr.w	r3, r3, #4
 800516c:	6313      	str	r3, [r2, #48]	; 0x30
 800516e:	4b8b      	ldr	r3, [pc, #556]	; (800539c <MX_GPIO_Init+0x28c>)
 8005170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005172:	f003 0304 	and.w	r3, r3, #4
 8005176:	613b      	str	r3, [r7, #16]
 8005178:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800517a:	2300      	movs	r3, #0
 800517c:	60fb      	str	r3, [r7, #12]
 800517e:	4b87      	ldr	r3, [pc, #540]	; (800539c <MX_GPIO_Init+0x28c>)
 8005180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005182:	4a86      	ldr	r2, [pc, #536]	; (800539c <MX_GPIO_Init+0x28c>)
 8005184:	f043 0301 	orr.w	r3, r3, #1
 8005188:	6313      	str	r3, [r2, #48]	; 0x30
 800518a:	4b84      	ldr	r3, [pc, #528]	; (800539c <MX_GPIO_Init+0x28c>)
 800518c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518e:	f003 0301 	and.w	r3, r3, #1
 8005192:	60fb      	str	r3, [r7, #12]
 8005194:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005196:	2300      	movs	r3, #0
 8005198:	60bb      	str	r3, [r7, #8]
 800519a:	4b80      	ldr	r3, [pc, #512]	; (800539c <MX_GPIO_Init+0x28c>)
 800519c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519e:	4a7f      	ldr	r2, [pc, #508]	; (800539c <MX_GPIO_Init+0x28c>)
 80051a0:	f043 0302 	orr.w	r3, r3, #2
 80051a4:	6313      	str	r3, [r2, #48]	; 0x30
 80051a6:	4b7d      	ldr	r3, [pc, #500]	; (800539c <MX_GPIO_Init+0x28c>)
 80051a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051aa:	f003 0302 	and.w	r3, r3, #2
 80051ae:	60bb      	str	r3, [r7, #8]
 80051b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80051b2:	2300      	movs	r3, #0
 80051b4:	607b      	str	r3, [r7, #4]
 80051b6:	4b79      	ldr	r3, [pc, #484]	; (800539c <MX_GPIO_Init+0x28c>)
 80051b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ba:	4a78      	ldr	r2, [pc, #480]	; (800539c <MX_GPIO_Init+0x28c>)
 80051bc:	f043 0308 	orr.w	r3, r3, #8
 80051c0:	6313      	str	r3, [r2, #48]	; 0x30
 80051c2:	4b76      	ldr	r3, [pc, #472]	; (800539c <MX_GPIO_Init+0x28c>)
 80051c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c6:	f003 0308 	and.w	r3, r3, #8
 80051ca:	607b      	str	r3, [r7, #4]
 80051cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 80051ce:	2200      	movs	r2, #0
 80051d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80051d4:	4872      	ldr	r0, [pc, #456]	; (80053a0 <MX_GPIO_Init+0x290>)
 80051d6:	f003 fd3b 	bl	8008c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80051da:	2200      	movs	r2, #0
 80051dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80051e0:	4870      	ldr	r0, [pc, #448]	; (80053a4 <MX_GPIO_Init+0x294>)
 80051e2:	f003 fd35 	bl	8008c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80051e6:	2200      	movs	r2, #0
 80051e8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80051ec:	486e      	ldr	r0, [pc, #440]	; (80053a8 <MX_GPIO_Init+0x298>)
 80051ee:	f003 fd2f 	bl	8008c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80051f2:	2200      	movs	r2, #0
 80051f4:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 80051f8:	486c      	ldr	r0, [pc, #432]	; (80053ac <MX_GPIO_Init+0x29c>)
 80051fa:	f003 fd29 	bl	8008c50 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80051fe:	2304      	movs	r3, #4
 8005200:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8005202:	4b6b      	ldr	r3, [pc, #428]	; (80053b0 <MX_GPIO_Init+0x2a0>)
 8005204:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005206:	2300      	movs	r3, #0
 8005208:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800520a:	f107 031c 	add.w	r3, r7, #28
 800520e:	4619      	mov	r1, r3
 8005210:	4863      	ldr	r0, [pc, #396]	; (80053a0 <MX_GPIO_Init+0x290>)
 8005212:	f003 fb5b 	bl	80088cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8005216:	230f      	movs	r3, #15
 8005218:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800521a:	2303      	movs	r3, #3
 800521c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800521e:	2300      	movs	r3, #0
 8005220:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005222:	f107 031c 	add.w	r3, r7, #28
 8005226:	4619      	mov	r1, r3
 8005228:	4862      	ldr	r0, [pc, #392]	; (80053b4 <MX_GPIO_Init+0x2a4>)
 800522a:	f003 fb4f 	bl	80088cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800522e:	23e1      	movs	r3, #225	; 0xe1
 8005230:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005232:	2303      	movs	r3, #3
 8005234:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005236:	2300      	movs	r3, #0
 8005238:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800523a:	f107 031c 	add.w	r3, r7, #28
 800523e:	4619      	mov	r1, r3
 8005240:	485a      	ldr	r0, [pc, #360]	; (80053ac <MX_GPIO_Init+0x29c>)
 8005242:	f003 fb43 	bl	80088cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005246:	2303      	movs	r3, #3
 8005248:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800524a:	2303      	movs	r3, #3
 800524c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800524e:	2300      	movs	r3, #0
 8005250:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005252:	f107 031c 	add.w	r3, r7, #28
 8005256:	4619      	mov	r1, r3
 8005258:	4852      	ldr	r0, [pc, #328]	; (80053a4 <MX_GPIO_Init+0x294>)
 800525a:	f003 fb37 	bl	80088cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800525e:	2304      	movs	r3, #4
 8005260:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005262:	2300      	movs	r3, #0
 8005264:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005266:	2301      	movs	r3, #1
 8005268:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800526a:	f107 031c 	add.w	r3, r7, #28
 800526e:	4619      	mov	r1, r3
 8005270:	484c      	ldr	r0, [pc, #304]	; (80053a4 <MX_GPIO_Init+0x294>)
 8005272:	f003 fb2b 	bl	80088cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8005276:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 800527a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800527c:	2300      	movs	r3, #0
 800527e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005280:	2301      	movs	r3, #1
 8005282:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005284:	f107 031c 	add.w	r3, r7, #28
 8005288:	4619      	mov	r1, r3
 800528a:	4845      	ldr	r0, [pc, #276]	; (80053a0 <MX_GPIO_Init+0x290>)
 800528c:	f003 fb1e 	bl	80088cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8005290:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005294:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005296:	2301      	movs	r3, #1
 8005298:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800529a:	2300      	movs	r3, #0
 800529c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800529e:	2300      	movs	r3, #0
 80052a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80052a2:	f107 031c 	add.w	r3, r7, #28
 80052a6:	4619      	mov	r1, r3
 80052a8:	483d      	ldr	r0, [pc, #244]	; (80053a0 <MX_GPIO_Init+0x290>)
 80052aa:	f003 fb0f 	bl	80088cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80052ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80052b4:	2301      	movs	r3, #1
 80052b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052b8:	2300      	movs	r3, #0
 80052ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052bc:	2300      	movs	r3, #0
 80052be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052c0:	f107 031c 	add.w	r3, r7, #28
 80052c4:	4619      	mov	r1, r3
 80052c6:	4837      	ldr	r0, [pc, #220]	; (80053a4 <MX_GPIO_Init+0x294>)
 80052c8:	f003 fb00 	bl	80088cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80052cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80052d2:	4b37      	ldr	r3, [pc, #220]	; (80053b0 <MX_GPIO_Init+0x2a0>)
 80052d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052d6:	2300      	movs	r3, #0
 80052d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80052da:	f107 031c 	add.w	r3, r7, #28
 80052de:	4619      	mov	r1, r3
 80052e0:	4831      	ldr	r0, [pc, #196]	; (80053a8 <MX_GPIO_Init+0x298>)
 80052e2:	f003 faf3 	bl	80088cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80052e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80052ec:	2301      	movs	r3, #1
 80052ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052f0:	2300      	movs	r3, #0
 80052f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052f4:	2300      	movs	r3, #0
 80052f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80052f8:	f107 031c 	add.w	r3, r7, #28
 80052fc:	4619      	mov	r1, r3
 80052fe:	482a      	ldr	r0, [pc, #168]	; (80053a8 <MX_GPIO_Init+0x298>)
 8005300:	f003 fae4 	bl	80088cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005304:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005308:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800530a:	2301      	movs	r3, #1
 800530c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800530e:	2301      	movs	r3, #1
 8005310:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005312:	2300      	movs	r3, #0
 8005314:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005316:	f107 031c 	add.w	r3, r7, #28
 800531a:	4619      	mov	r1, r3
 800531c:	4822      	ldr	r0, [pc, #136]	; (80053a8 <MX_GPIO_Init+0x298>)
 800531e:	f003 fad5 	bl	80088cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8005322:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8005326:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005328:	2301      	movs	r3, #1
 800532a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800532c:	2300      	movs	r3, #0
 800532e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005330:	2300      	movs	r3, #0
 8005332:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005334:	f107 031c 	add.w	r3, r7, #28
 8005338:	4619      	mov	r1, r3
 800533a:	481c      	ldr	r0, [pc, #112]	; (80053ac <MX_GPIO_Init+0x29c>)
 800533c:	f003 fac6 	bl	80088cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005340:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005344:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005346:	2300      	movs	r3, #0
 8005348:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800534a:	2300      	movs	r3, #0
 800534c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800534e:	f107 031c 	add.w	r3, r7, #28
 8005352:	4619      	mov	r1, r3
 8005354:	4815      	ldr	r0, [pc, #84]	; (80053ac <MX_GPIO_Init+0x29c>)
 8005356:	f003 fab9 	bl	80088cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 800535a:	239b      	movs	r3, #155	; 0x9b
 800535c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800535e:	2300      	movs	r3, #0
 8005360:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005362:	2301      	movs	r3, #1
 8005364:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005366:	f107 031c 	add.w	r3, r7, #28
 800536a:	4619      	mov	r1, r3
 800536c:	480e      	ldr	r0, [pc, #56]	; (80053a8 <MX_GPIO_Init+0x298>)
 800536e:	f003 faad 	bl	80088cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8005372:	2200      	movs	r2, #0
 8005374:	2100      	movs	r1, #0
 8005376:	2008      	movs	r0, #8
 8005378:	f002 fed5 	bl	8008126 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800537c:	2008      	movs	r0, #8
 800537e:	f002 feee 	bl	800815e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8005382:	2200      	movs	r2, #0
 8005384:	2100      	movs	r1, #0
 8005386:	2017      	movs	r0, #23
 8005388:	f002 fecd 	bl	8008126 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800538c:	2017      	movs	r0, #23
 800538e:	f002 fee6 	bl	800815e <HAL_NVIC_EnableIRQ>

}
 8005392:	bf00      	nop
 8005394:	3730      	adds	r7, #48	; 0x30
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	40023800 	.word	0x40023800
 80053a0:	40021000 	.word	0x40021000
 80053a4:	40020400 	.word	0x40020400
 80053a8:	40020c00 	.word	0x40020c00
 80053ac:	40020000 	.word	0x40020000
 80053b0:	10310000 	.word	0x10310000
 80053b4:	40020800 	.word	0x40020800

080053b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80053b8:	b480      	push	{r7}
 80053ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80053bc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80053be:	e7fe      	b.n	80053be <Error_Handler+0x6>

080053c0 <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 80053c0:	b480      	push	{r7}
 80053c2:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 80053c4:	bf00      	nop
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
	...

080053d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053d6:	2300      	movs	r3, #0
 80053d8:	607b      	str	r3, [r7, #4]
 80053da:	4b10      	ldr	r3, [pc, #64]	; (800541c <HAL_MspInit+0x4c>)
 80053dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053de:	4a0f      	ldr	r2, [pc, #60]	; (800541c <HAL_MspInit+0x4c>)
 80053e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053e4:	6453      	str	r3, [r2, #68]	; 0x44
 80053e6:	4b0d      	ldr	r3, [pc, #52]	; (800541c <HAL_MspInit+0x4c>)
 80053e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053ee:	607b      	str	r3, [r7, #4]
 80053f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80053f2:	2300      	movs	r3, #0
 80053f4:	603b      	str	r3, [r7, #0]
 80053f6:	4b09      	ldr	r3, [pc, #36]	; (800541c <HAL_MspInit+0x4c>)
 80053f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fa:	4a08      	ldr	r2, [pc, #32]	; (800541c <HAL_MspInit+0x4c>)
 80053fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005400:	6413      	str	r3, [r2, #64]	; 0x40
 8005402:	4b06      	ldr	r3, [pc, #24]	; (800541c <HAL_MspInit+0x4c>)
 8005404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800540a:	603b      	str	r3, [r7, #0]
 800540c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800540e:	bf00      	nop
 8005410:	370c      	adds	r7, #12
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop
 800541c:	40023800 	.word	0x40023800

08005420 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b08c      	sub	sp, #48	; 0x30
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005428:	f107 031c 	add.w	r3, r7, #28
 800542c:	2200      	movs	r2, #0
 800542e:	601a      	str	r2, [r3, #0]
 8005430:	605a      	str	r2, [r3, #4]
 8005432:	609a      	str	r2, [r3, #8]
 8005434:	60da      	str	r2, [r3, #12]
 8005436:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a4a      	ldr	r2, [pc, #296]	; (8005568 <HAL_ADC_MspInit+0x148>)
 800543e:	4293      	cmp	r3, r2
 8005440:	f040 808e 	bne.w	8005560 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005444:	2300      	movs	r3, #0
 8005446:	61bb      	str	r3, [r7, #24]
 8005448:	4b48      	ldr	r3, [pc, #288]	; (800556c <HAL_ADC_MspInit+0x14c>)
 800544a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800544c:	4a47      	ldr	r2, [pc, #284]	; (800556c <HAL_ADC_MspInit+0x14c>)
 800544e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005452:	6453      	str	r3, [r2, #68]	; 0x44
 8005454:	4b45      	ldr	r3, [pc, #276]	; (800556c <HAL_ADC_MspInit+0x14c>)
 8005456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005458:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800545c:	61bb      	str	r3, [r7, #24]
 800545e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005460:	2300      	movs	r3, #0
 8005462:	617b      	str	r3, [r7, #20]
 8005464:	4b41      	ldr	r3, [pc, #260]	; (800556c <HAL_ADC_MspInit+0x14c>)
 8005466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005468:	4a40      	ldr	r2, [pc, #256]	; (800556c <HAL_ADC_MspInit+0x14c>)
 800546a:	f043 0304 	orr.w	r3, r3, #4
 800546e:	6313      	str	r3, [r2, #48]	; 0x30
 8005470:	4b3e      	ldr	r3, [pc, #248]	; (800556c <HAL_ADC_MspInit+0x14c>)
 8005472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005474:	f003 0304 	and.w	r3, r3, #4
 8005478:	617b      	str	r3, [r7, #20]
 800547a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800547c:	2300      	movs	r3, #0
 800547e:	613b      	str	r3, [r7, #16]
 8005480:	4b3a      	ldr	r3, [pc, #232]	; (800556c <HAL_ADC_MspInit+0x14c>)
 8005482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005484:	4a39      	ldr	r2, [pc, #228]	; (800556c <HAL_ADC_MspInit+0x14c>)
 8005486:	f043 0301 	orr.w	r3, r3, #1
 800548a:	6313      	str	r3, [r2, #48]	; 0x30
 800548c:	4b37      	ldr	r3, [pc, #220]	; (800556c <HAL_ADC_MspInit+0x14c>)
 800548e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005490:	f003 0301 	and.w	r3, r3, #1
 8005494:	613b      	str	r3, [r7, #16]
 8005496:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005498:	2300      	movs	r3, #0
 800549a:	60fb      	str	r3, [r7, #12]
 800549c:	4b33      	ldr	r3, [pc, #204]	; (800556c <HAL_ADC_MspInit+0x14c>)
 800549e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a0:	4a32      	ldr	r2, [pc, #200]	; (800556c <HAL_ADC_MspInit+0x14c>)
 80054a2:	f043 0302 	orr.w	r3, r3, #2
 80054a6:	6313      	str	r3, [r2, #48]	; 0x30
 80054a8:	4b30      	ldr	r3, [pc, #192]	; (800556c <HAL_ADC_MspInit+0x14c>)
 80054aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ac:	f003 0302 	and.w	r3, r3, #2
 80054b0:	60fb      	str	r3, [r7, #12]
 80054b2:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80054b4:	230f      	movs	r3, #15
 80054b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80054b8:	2303      	movs	r3, #3
 80054ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054bc:	2300      	movs	r3, #0
 80054be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80054c0:	f107 031c 	add.w	r3, r7, #28
 80054c4:	4619      	mov	r1, r3
 80054c6:	482a      	ldr	r0, [pc, #168]	; (8005570 <HAL_ADC_MspInit+0x150>)
 80054c8:	f003 fa00 	bl	80088cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80054cc:	23ff      	movs	r3, #255	; 0xff
 80054ce:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80054d0:	2303      	movs	r3, #3
 80054d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054d4:	2300      	movs	r3, #0
 80054d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054d8:	f107 031c 	add.w	r3, r7, #28
 80054dc:	4619      	mov	r1, r3
 80054de:	4825      	ldr	r0, [pc, #148]	; (8005574 <HAL_ADC_MspInit+0x154>)
 80054e0:	f003 f9f4 	bl	80088cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80054e4:	2303      	movs	r3, #3
 80054e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80054e8:	2303      	movs	r3, #3
 80054ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ec:	2300      	movs	r3, #0
 80054ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054f0:	f107 031c 	add.w	r3, r7, #28
 80054f4:	4619      	mov	r1, r3
 80054f6:	4820      	ldr	r0, [pc, #128]	; (8005578 <HAL_ADC_MspInit+0x158>)
 80054f8:	f003 f9e8 	bl	80088cc <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 80054fc:	4b1f      	ldr	r3, [pc, #124]	; (800557c <HAL_ADC_MspInit+0x15c>)
 80054fe:	4a20      	ldr	r2, [pc, #128]	; (8005580 <HAL_ADC_MspInit+0x160>)
 8005500:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8005502:	4b1e      	ldr	r3, [pc, #120]	; (800557c <HAL_ADC_MspInit+0x15c>)
 8005504:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005508:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800550a:	4b1c      	ldr	r3, [pc, #112]	; (800557c <HAL_ADC_MspInit+0x15c>)
 800550c:	2200      	movs	r2, #0
 800550e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8005510:	4b1a      	ldr	r3, [pc, #104]	; (800557c <HAL_ADC_MspInit+0x15c>)
 8005512:	2200      	movs	r2, #0
 8005514:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8005516:	4b19      	ldr	r3, [pc, #100]	; (800557c <HAL_ADC_MspInit+0x15c>)
 8005518:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800551c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800551e:	4b17      	ldr	r3, [pc, #92]	; (800557c <HAL_ADC_MspInit+0x15c>)
 8005520:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005524:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005526:	4b15      	ldr	r3, [pc, #84]	; (800557c <HAL_ADC_MspInit+0x15c>)
 8005528:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800552c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800552e:	4b13      	ldr	r3, [pc, #76]	; (800557c <HAL_ADC_MspInit+0x15c>)
 8005530:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005534:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005536:	4b11      	ldr	r3, [pc, #68]	; (800557c <HAL_ADC_MspInit+0x15c>)
 8005538:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800553c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800553e:	4b0f      	ldr	r3, [pc, #60]	; (800557c <HAL_ADC_MspInit+0x15c>)
 8005540:	2200      	movs	r2, #0
 8005542:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8005544:	480d      	ldr	r0, [pc, #52]	; (800557c <HAL_ADC_MspInit+0x15c>)
 8005546:	f002 fe25 	bl	8008194 <HAL_DMA_Init>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d001      	beq.n	8005554 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8005550:	f7ff ff32 	bl	80053b8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a09      	ldr	r2, [pc, #36]	; (800557c <HAL_ADC_MspInit+0x15c>)
 8005558:	639a      	str	r2, [r3, #56]	; 0x38
 800555a:	4a08      	ldr	r2, [pc, #32]	; (800557c <HAL_ADC_MspInit+0x15c>)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8005560:	bf00      	nop
 8005562:	3730      	adds	r7, #48	; 0x30
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	40012100 	.word	0x40012100
 800556c:	40023800 	.word	0x40023800
 8005570:	40020800 	.word	0x40020800
 8005574:	40020000 	.word	0x40020000
 8005578:	40020400 	.word	0x40020400
 800557c:	20035e0c 	.word	0x20035e0c
 8005580:	40026440 	.word	0x40026440

08005584 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b08c      	sub	sp, #48	; 0x30
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800558c:	f107 031c 	add.w	r3, r7, #28
 8005590:	2200      	movs	r2, #0
 8005592:	601a      	str	r2, [r3, #0]
 8005594:	605a      	str	r2, [r3, #4]
 8005596:	609a      	str	r2, [r3, #8]
 8005598:	60da      	str	r2, [r3, #12]
 800559a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a32      	ldr	r2, [pc, #200]	; (800566c <HAL_I2C_MspInit+0xe8>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d12c      	bne.n	8005600 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055a6:	2300      	movs	r3, #0
 80055a8:	61bb      	str	r3, [r7, #24]
 80055aa:	4b31      	ldr	r3, [pc, #196]	; (8005670 <HAL_I2C_MspInit+0xec>)
 80055ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ae:	4a30      	ldr	r2, [pc, #192]	; (8005670 <HAL_I2C_MspInit+0xec>)
 80055b0:	f043 0302 	orr.w	r3, r3, #2
 80055b4:	6313      	str	r3, [r2, #48]	; 0x30
 80055b6:	4b2e      	ldr	r3, [pc, #184]	; (8005670 <HAL_I2C_MspInit+0xec>)
 80055b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	61bb      	str	r3, [r7, #24]
 80055c0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80055c2:	23c0      	movs	r3, #192	; 0xc0
 80055c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80055c6:	2312      	movs	r3, #18
 80055c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80055ca:	2301      	movs	r3, #1
 80055cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055ce:	2303      	movs	r3, #3
 80055d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80055d2:	2304      	movs	r3, #4
 80055d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055d6:	f107 031c 	add.w	r3, r7, #28
 80055da:	4619      	mov	r1, r3
 80055dc:	4825      	ldr	r0, [pc, #148]	; (8005674 <HAL_I2C_MspInit+0xf0>)
 80055de:	f003 f975 	bl	80088cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80055e2:	2300      	movs	r3, #0
 80055e4:	617b      	str	r3, [r7, #20]
 80055e6:	4b22      	ldr	r3, [pc, #136]	; (8005670 <HAL_I2C_MspInit+0xec>)
 80055e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ea:	4a21      	ldr	r2, [pc, #132]	; (8005670 <HAL_I2C_MspInit+0xec>)
 80055ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80055f0:	6413      	str	r3, [r2, #64]	; 0x40
 80055f2:	4b1f      	ldr	r3, [pc, #124]	; (8005670 <HAL_I2C_MspInit+0xec>)
 80055f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055fa:	617b      	str	r3, [r7, #20]
 80055fc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80055fe:	e031      	b.n	8005664 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a1c      	ldr	r2, [pc, #112]	; (8005678 <HAL_I2C_MspInit+0xf4>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d12c      	bne.n	8005664 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800560a:	2300      	movs	r3, #0
 800560c:	613b      	str	r3, [r7, #16]
 800560e:	4b18      	ldr	r3, [pc, #96]	; (8005670 <HAL_I2C_MspInit+0xec>)
 8005610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005612:	4a17      	ldr	r2, [pc, #92]	; (8005670 <HAL_I2C_MspInit+0xec>)
 8005614:	f043 0302 	orr.w	r3, r3, #2
 8005618:	6313      	str	r3, [r2, #48]	; 0x30
 800561a:	4b15      	ldr	r3, [pc, #84]	; (8005670 <HAL_I2C_MspInit+0xec>)
 800561c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561e:	f003 0302 	and.w	r3, r3, #2
 8005622:	613b      	str	r3, [r7, #16]
 8005624:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005626:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800562a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800562c:	2312      	movs	r3, #18
 800562e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005630:	2301      	movs	r3, #1
 8005632:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005634:	2303      	movs	r3, #3
 8005636:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005638:	2304      	movs	r3, #4
 800563a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800563c:	f107 031c 	add.w	r3, r7, #28
 8005640:	4619      	mov	r1, r3
 8005642:	480c      	ldr	r0, [pc, #48]	; (8005674 <HAL_I2C_MspInit+0xf0>)
 8005644:	f003 f942 	bl	80088cc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005648:	2300      	movs	r3, #0
 800564a:	60fb      	str	r3, [r7, #12]
 800564c:	4b08      	ldr	r3, [pc, #32]	; (8005670 <HAL_I2C_MspInit+0xec>)
 800564e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005650:	4a07      	ldr	r2, [pc, #28]	; (8005670 <HAL_I2C_MspInit+0xec>)
 8005652:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005656:	6413      	str	r3, [r2, #64]	; 0x40
 8005658:	4b05      	ldr	r3, [pc, #20]	; (8005670 <HAL_I2C_MspInit+0xec>)
 800565a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005660:	60fb      	str	r3, [r7, #12]
 8005662:	68fb      	ldr	r3, [r7, #12]
}
 8005664:	bf00      	nop
 8005666:	3730      	adds	r7, #48	; 0x30
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}
 800566c:	40005400 	.word	0x40005400
 8005670:	40023800 	.word	0x40023800
 8005674:	40020400 	.word	0x40020400
 8005678:	40005800 	.word	0x40005800

0800567c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b08a      	sub	sp, #40	; 0x28
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005684:	f107 0314 	add.w	r3, r7, #20
 8005688:	2200      	movs	r2, #0
 800568a:	601a      	str	r2, [r3, #0]
 800568c:	605a      	str	r2, [r3, #4]
 800568e:	609a      	str	r2, [r3, #8]
 8005690:	60da      	str	r2, [r3, #12]
 8005692:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a69      	ldr	r2, [pc, #420]	; (8005840 <HAL_SD_MspInit+0x1c4>)
 800569a:	4293      	cmp	r3, r2
 800569c:	f040 80cb 	bne.w	8005836 <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80056a0:	2300      	movs	r3, #0
 80056a2:	613b      	str	r3, [r7, #16]
 80056a4:	4b67      	ldr	r3, [pc, #412]	; (8005844 <HAL_SD_MspInit+0x1c8>)
 80056a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056a8:	4a66      	ldr	r2, [pc, #408]	; (8005844 <HAL_SD_MspInit+0x1c8>)
 80056aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80056ae:	6453      	str	r3, [r2, #68]	; 0x44
 80056b0:	4b64      	ldr	r3, [pc, #400]	; (8005844 <HAL_SD_MspInit+0x1c8>)
 80056b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056b8:	613b      	str	r3, [r7, #16]
 80056ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80056bc:	2300      	movs	r3, #0
 80056be:	60fb      	str	r3, [r7, #12]
 80056c0:	4b60      	ldr	r3, [pc, #384]	; (8005844 <HAL_SD_MspInit+0x1c8>)
 80056c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c4:	4a5f      	ldr	r2, [pc, #380]	; (8005844 <HAL_SD_MspInit+0x1c8>)
 80056c6:	f043 0304 	orr.w	r3, r3, #4
 80056ca:	6313      	str	r3, [r2, #48]	; 0x30
 80056cc:	4b5d      	ldr	r3, [pc, #372]	; (8005844 <HAL_SD_MspInit+0x1c8>)
 80056ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d0:	f003 0304 	and.w	r3, r3, #4
 80056d4:	60fb      	str	r3, [r7, #12]
 80056d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80056d8:	2300      	movs	r3, #0
 80056da:	60bb      	str	r3, [r7, #8]
 80056dc:	4b59      	ldr	r3, [pc, #356]	; (8005844 <HAL_SD_MspInit+0x1c8>)
 80056de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e0:	4a58      	ldr	r2, [pc, #352]	; (8005844 <HAL_SD_MspInit+0x1c8>)
 80056e2:	f043 0308 	orr.w	r3, r3, #8
 80056e6:	6313      	str	r3, [r2, #48]	; 0x30
 80056e8:	4b56      	ldr	r3, [pc, #344]	; (8005844 <HAL_SD_MspInit+0x1c8>)
 80056ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ec:	f003 0308 	and.w	r3, r3, #8
 80056f0:	60bb      	str	r3, [r7, #8]
 80056f2:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80056f4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80056f8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056fa:	2302      	movs	r3, #2
 80056fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056fe:	2300      	movs	r3, #0
 8005700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005702:	2303      	movs	r3, #3
 8005704:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8005706:	230c      	movs	r3, #12
 8005708:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800570a:	f107 0314 	add.w	r3, r7, #20
 800570e:	4619      	mov	r1, r3
 8005710:	484d      	ldr	r0, [pc, #308]	; (8005848 <HAL_SD_MspInit+0x1cc>)
 8005712:	f003 f8db 	bl	80088cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005716:	2304      	movs	r3, #4
 8005718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800571a:	2302      	movs	r3, #2
 800571c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800571e:	2300      	movs	r3, #0
 8005720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005722:	2303      	movs	r3, #3
 8005724:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8005726:	230c      	movs	r3, #12
 8005728:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800572a:	f107 0314 	add.w	r3, r7, #20
 800572e:	4619      	mov	r1, r3
 8005730:	4846      	ldr	r0, [pc, #280]	; (800584c <HAL_SD_MspInit+0x1d0>)
 8005732:	f003 f8cb 	bl	80088cc <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8005736:	4b46      	ldr	r3, [pc, #280]	; (8005850 <HAL_SD_MspInit+0x1d4>)
 8005738:	4a46      	ldr	r2, [pc, #280]	; (8005854 <HAL_SD_MspInit+0x1d8>)
 800573a:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800573c:	4b44      	ldr	r3, [pc, #272]	; (8005850 <HAL_SD_MspInit+0x1d4>)
 800573e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005742:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005744:	4b42      	ldr	r3, [pc, #264]	; (8005850 <HAL_SD_MspInit+0x1d4>)
 8005746:	2200      	movs	r2, #0
 8005748:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800574a:	4b41      	ldr	r3, [pc, #260]	; (8005850 <HAL_SD_MspInit+0x1d4>)
 800574c:	2200      	movs	r2, #0
 800574e:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005750:	4b3f      	ldr	r3, [pc, #252]	; (8005850 <HAL_SD_MspInit+0x1d4>)
 8005752:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005756:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005758:	4b3d      	ldr	r3, [pc, #244]	; (8005850 <HAL_SD_MspInit+0x1d4>)
 800575a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800575e:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005760:	4b3b      	ldr	r3, [pc, #236]	; (8005850 <HAL_SD_MspInit+0x1d4>)
 8005762:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005766:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8005768:	4b39      	ldr	r3, [pc, #228]	; (8005850 <HAL_SD_MspInit+0x1d4>)
 800576a:	2220      	movs	r2, #32
 800576c:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800576e:	4b38      	ldr	r3, [pc, #224]	; (8005850 <HAL_SD_MspInit+0x1d4>)
 8005770:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005774:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005776:	4b36      	ldr	r3, [pc, #216]	; (8005850 <HAL_SD_MspInit+0x1d4>)
 8005778:	2204      	movs	r2, #4
 800577a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800577c:	4b34      	ldr	r3, [pc, #208]	; (8005850 <HAL_SD_MspInit+0x1d4>)
 800577e:	2203      	movs	r2, #3
 8005780:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8005782:	4b33      	ldr	r3, [pc, #204]	; (8005850 <HAL_SD_MspInit+0x1d4>)
 8005784:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005788:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800578a:	4b31      	ldr	r3, [pc, #196]	; (8005850 <HAL_SD_MspInit+0x1d4>)
 800578c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005790:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8005792:	482f      	ldr	r0, [pc, #188]	; (8005850 <HAL_SD_MspInit+0x1d4>)
 8005794:	f002 fcfe 	bl	8008194 <HAL_DMA_Init>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d001      	beq.n	80057a2 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 800579e:	f7ff fe0b 	bl	80053b8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a2a      	ldr	r2, [pc, #168]	; (8005850 <HAL_SD_MspInit+0x1d4>)
 80057a6:	641a      	str	r2, [r3, #64]	; 0x40
 80057a8:	4a29      	ldr	r2, [pc, #164]	; (8005850 <HAL_SD_MspInit+0x1d4>)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80057ae:	4b2a      	ldr	r3, [pc, #168]	; (8005858 <HAL_SD_MspInit+0x1dc>)
 80057b0:	4a2a      	ldr	r2, [pc, #168]	; (800585c <HAL_SD_MspInit+0x1e0>)
 80057b2:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80057b4:	4b28      	ldr	r3, [pc, #160]	; (8005858 <HAL_SD_MspInit+0x1dc>)
 80057b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80057ba:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80057bc:	4b26      	ldr	r3, [pc, #152]	; (8005858 <HAL_SD_MspInit+0x1dc>)
 80057be:	2240      	movs	r2, #64	; 0x40
 80057c0:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80057c2:	4b25      	ldr	r3, [pc, #148]	; (8005858 <HAL_SD_MspInit+0x1dc>)
 80057c4:	2200      	movs	r2, #0
 80057c6:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80057c8:	4b23      	ldr	r3, [pc, #140]	; (8005858 <HAL_SD_MspInit+0x1dc>)
 80057ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80057ce:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80057d0:	4b21      	ldr	r3, [pc, #132]	; (8005858 <HAL_SD_MspInit+0x1dc>)
 80057d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80057d6:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80057d8:	4b1f      	ldr	r3, [pc, #124]	; (8005858 <HAL_SD_MspInit+0x1dc>)
 80057da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80057de:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80057e0:	4b1d      	ldr	r3, [pc, #116]	; (8005858 <HAL_SD_MspInit+0x1dc>)
 80057e2:	2220      	movs	r2, #32
 80057e4:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80057e6:	4b1c      	ldr	r3, [pc, #112]	; (8005858 <HAL_SD_MspInit+0x1dc>)
 80057e8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80057ec:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80057ee:	4b1a      	ldr	r3, [pc, #104]	; (8005858 <HAL_SD_MspInit+0x1dc>)
 80057f0:	2204      	movs	r2, #4
 80057f2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80057f4:	4b18      	ldr	r3, [pc, #96]	; (8005858 <HAL_SD_MspInit+0x1dc>)
 80057f6:	2203      	movs	r2, #3
 80057f8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80057fa:	4b17      	ldr	r3, [pc, #92]	; (8005858 <HAL_SD_MspInit+0x1dc>)
 80057fc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005800:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8005802:	4b15      	ldr	r3, [pc, #84]	; (8005858 <HAL_SD_MspInit+0x1dc>)
 8005804:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005808:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800580a:	4813      	ldr	r0, [pc, #76]	; (8005858 <HAL_SD_MspInit+0x1dc>)
 800580c:	f002 fcc2 	bl	8008194 <HAL_DMA_Init>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d001      	beq.n	800581a <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8005816:	f7ff fdcf 	bl	80053b8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a0e      	ldr	r2, [pc, #56]	; (8005858 <HAL_SD_MspInit+0x1dc>)
 800581e:	63da      	str	r2, [r3, #60]	; 0x3c
 8005820:	4a0d      	ldr	r2, [pc, #52]	; (8005858 <HAL_SD_MspInit+0x1dc>)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8005826:	2200      	movs	r2, #0
 8005828:	2100      	movs	r1, #0
 800582a:	2031      	movs	r0, #49	; 0x31
 800582c:	f002 fc7b 	bl	8008126 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8005830:	2031      	movs	r0, #49	; 0x31
 8005832:	f002 fc94 	bl	800815e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8005836:	bf00      	nop
 8005838:	3728      	adds	r7, #40	; 0x28
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	40012c00 	.word	0x40012c00
 8005844:	40023800 	.word	0x40023800
 8005848:	40020800 	.word	0x40020800
 800584c:	40020c00 	.word	0x40020c00
 8005850:	20035934 	.word	0x20035934
 8005854:	40026458 	.word	0x40026458
 8005858:	20035c68 	.word	0x20035c68
 800585c:	400264a0 	.word	0x400264a0

08005860 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b08a      	sub	sp, #40	; 0x28
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005868:	f107 0314 	add.w	r3, r7, #20
 800586c:	2200      	movs	r2, #0
 800586e:	601a      	str	r2, [r3, #0]
 8005870:	605a      	str	r2, [r3, #4]
 8005872:	609a      	str	r2, [r3, #8]
 8005874:	60da      	str	r2, [r3, #12]
 8005876:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a19      	ldr	r2, [pc, #100]	; (80058e4 <HAL_SPI_MspInit+0x84>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d12c      	bne.n	80058dc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005882:	2300      	movs	r3, #0
 8005884:	613b      	str	r3, [r7, #16]
 8005886:	4b18      	ldr	r3, [pc, #96]	; (80058e8 <HAL_SPI_MspInit+0x88>)
 8005888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588a:	4a17      	ldr	r2, [pc, #92]	; (80058e8 <HAL_SPI_MspInit+0x88>)
 800588c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005890:	6413      	str	r3, [r2, #64]	; 0x40
 8005892:	4b15      	ldr	r3, [pc, #84]	; (80058e8 <HAL_SPI_MspInit+0x88>)
 8005894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005896:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800589a:	613b      	str	r3, [r7, #16]
 800589c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800589e:	2300      	movs	r3, #0
 80058a0:	60fb      	str	r3, [r7, #12]
 80058a2:	4b11      	ldr	r3, [pc, #68]	; (80058e8 <HAL_SPI_MspInit+0x88>)
 80058a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a6:	4a10      	ldr	r2, [pc, #64]	; (80058e8 <HAL_SPI_MspInit+0x88>)
 80058a8:	f043 0302 	orr.w	r3, r3, #2
 80058ac:	6313      	str	r3, [r2, #48]	; 0x30
 80058ae:	4b0e      	ldr	r3, [pc, #56]	; (80058e8 <HAL_SPI_MspInit+0x88>)
 80058b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b2:	f003 0302 	and.w	r3, r3, #2
 80058b6:	60fb      	str	r3, [r7, #12]
 80058b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80058ba:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80058be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058c0:	2302      	movs	r3, #2
 80058c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058c4:	2300      	movs	r3, #0
 80058c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058c8:	2303      	movs	r3, #3
 80058ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80058cc:	2305      	movs	r3, #5
 80058ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058d0:	f107 0314 	add.w	r3, r7, #20
 80058d4:	4619      	mov	r1, r3
 80058d6:	4805      	ldr	r0, [pc, #20]	; (80058ec <HAL_SPI_MspInit+0x8c>)
 80058d8:	f002 fff8 	bl	80088cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80058dc:	bf00      	nop
 80058de:	3728      	adds	r7, #40	; 0x28
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	40003800 	.word	0x40003800
 80058e8:	40023800 	.word	0x40023800
 80058ec:	40020400 	.word	0x40020400

080058f0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b08c      	sub	sp, #48	; 0x30
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058f8:	f107 031c 	add.w	r3, r7, #28
 80058fc:	2200      	movs	r2, #0
 80058fe:	601a      	str	r2, [r3, #0]
 8005900:	605a      	str	r2, [r3, #4]
 8005902:	609a      	str	r2, [r3, #8]
 8005904:	60da      	str	r2, [r3, #12]
 8005906:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a2d      	ldr	r2, [pc, #180]	; (80059c4 <HAL_TIM_PWM_MspInit+0xd4>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d12d      	bne.n	800596e <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005912:	2300      	movs	r3, #0
 8005914:	61bb      	str	r3, [r7, #24]
 8005916:	4b2c      	ldr	r3, [pc, #176]	; (80059c8 <HAL_TIM_PWM_MspInit+0xd8>)
 8005918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800591a:	4a2b      	ldr	r2, [pc, #172]	; (80059c8 <HAL_TIM_PWM_MspInit+0xd8>)
 800591c:	f043 0301 	orr.w	r3, r3, #1
 8005920:	6453      	str	r3, [r2, #68]	; 0x44
 8005922:	4b29      	ldr	r3, [pc, #164]	; (80059c8 <HAL_TIM_PWM_MspInit+0xd8>)
 8005924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	61bb      	str	r3, [r7, #24]
 800592c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800592e:	2300      	movs	r3, #0
 8005930:	617b      	str	r3, [r7, #20]
 8005932:	4b25      	ldr	r3, [pc, #148]	; (80059c8 <HAL_TIM_PWM_MspInit+0xd8>)
 8005934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005936:	4a24      	ldr	r2, [pc, #144]	; (80059c8 <HAL_TIM_PWM_MspInit+0xd8>)
 8005938:	f043 0310 	orr.w	r3, r3, #16
 800593c:	6313      	str	r3, [r2, #48]	; 0x30
 800593e:	4b22      	ldr	r3, [pc, #136]	; (80059c8 <HAL_TIM_PWM_MspInit+0xd8>)
 8005940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005942:	f003 0310 	and.w	r3, r3, #16
 8005946:	617b      	str	r3, [r7, #20]
 8005948:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800594a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800594e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005950:	2302      	movs	r3, #2
 8005952:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005954:	2300      	movs	r3, #0
 8005956:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005958:	2300      	movs	r3, #0
 800595a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800595c:	2301      	movs	r3, #1
 800595e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005960:	f107 031c 	add.w	r3, r7, #28
 8005964:	4619      	mov	r1, r3
 8005966:	4819      	ldr	r0, [pc, #100]	; (80059cc <HAL_TIM_PWM_MspInit+0xdc>)
 8005968:	f002 ffb0 	bl	80088cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800596c:	e026      	b.n	80059bc <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a17      	ldr	r2, [pc, #92]	; (80059d0 <HAL_TIM_PWM_MspInit+0xe0>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d10e      	bne.n	8005996 <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005978:	2300      	movs	r3, #0
 800597a:	613b      	str	r3, [r7, #16]
 800597c:	4b12      	ldr	r3, [pc, #72]	; (80059c8 <HAL_TIM_PWM_MspInit+0xd8>)
 800597e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005980:	4a11      	ldr	r2, [pc, #68]	; (80059c8 <HAL_TIM_PWM_MspInit+0xd8>)
 8005982:	f043 0302 	orr.w	r3, r3, #2
 8005986:	6413      	str	r3, [r2, #64]	; 0x40
 8005988:	4b0f      	ldr	r3, [pc, #60]	; (80059c8 <HAL_TIM_PWM_MspInit+0xd8>)
 800598a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598c:	f003 0302 	and.w	r3, r3, #2
 8005990:	613b      	str	r3, [r7, #16]
 8005992:	693b      	ldr	r3, [r7, #16]
}
 8005994:	e012      	b.n	80059bc <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a0e      	ldr	r2, [pc, #56]	; (80059d4 <HAL_TIM_PWM_MspInit+0xe4>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d10d      	bne.n	80059bc <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80059a0:	2300      	movs	r3, #0
 80059a2:	60fb      	str	r3, [r7, #12]
 80059a4:	4b08      	ldr	r3, [pc, #32]	; (80059c8 <HAL_TIM_PWM_MspInit+0xd8>)
 80059a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a8:	4a07      	ldr	r2, [pc, #28]	; (80059c8 <HAL_TIM_PWM_MspInit+0xd8>)
 80059aa:	f043 0304 	orr.w	r3, r3, #4
 80059ae:	6413      	str	r3, [r2, #64]	; 0x40
 80059b0:	4b05      	ldr	r3, [pc, #20]	; (80059c8 <HAL_TIM_PWM_MspInit+0xd8>)
 80059b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b4:	f003 0304 	and.w	r3, r3, #4
 80059b8:	60fb      	str	r3, [r7, #12]
 80059ba:	68fb      	ldr	r3, [r7, #12]
}
 80059bc:	bf00      	nop
 80059be:	3730      	adds	r7, #48	; 0x30
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	40010000 	.word	0x40010000
 80059c8:	40023800 	.word	0x40023800
 80059cc:	40021000 	.word	0x40021000
 80059d0:	40000400 	.word	0x40000400
 80059d4:	40000800 	.word	0x40000800

080059d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b088      	sub	sp, #32
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a3e      	ldr	r2, [pc, #248]	; (8005ae0 <HAL_TIM_Base_MspInit+0x108>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d116      	bne.n	8005a18 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80059ea:	2300      	movs	r3, #0
 80059ec:	61fb      	str	r3, [r7, #28]
 80059ee:	4b3d      	ldr	r3, [pc, #244]	; (8005ae4 <HAL_TIM_Base_MspInit+0x10c>)
 80059f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f2:	4a3c      	ldr	r2, [pc, #240]	; (8005ae4 <HAL_TIM_Base_MspInit+0x10c>)
 80059f4:	f043 0310 	orr.w	r3, r3, #16
 80059f8:	6413      	str	r3, [r2, #64]	; 0x40
 80059fa:	4b3a      	ldr	r3, [pc, #232]	; (8005ae4 <HAL_TIM_Base_MspInit+0x10c>)
 80059fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fe:	f003 0310 	and.w	r3, r3, #16
 8005a02:	61fb      	str	r3, [r7, #28]
 8005a04:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8005a06:	2200      	movs	r2, #0
 8005a08:	2101      	movs	r1, #1
 8005a0a:	2036      	movs	r0, #54	; 0x36
 8005a0c:	f002 fb8b 	bl	8008126 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005a10:	2036      	movs	r0, #54	; 0x36
 8005a12:	f002 fba4 	bl	800815e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8005a16:	e05e      	b.n	8005ad6 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a32      	ldr	r2, [pc, #200]	; (8005ae8 <HAL_TIM_Base_MspInit+0x110>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d116      	bne.n	8005a50 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005a22:	2300      	movs	r3, #0
 8005a24:	61bb      	str	r3, [r7, #24]
 8005a26:	4b2f      	ldr	r3, [pc, #188]	; (8005ae4 <HAL_TIM_Base_MspInit+0x10c>)
 8005a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2a:	4a2e      	ldr	r2, [pc, #184]	; (8005ae4 <HAL_TIM_Base_MspInit+0x10c>)
 8005a2c:	f043 0320 	orr.w	r3, r3, #32
 8005a30:	6413      	str	r3, [r2, #64]	; 0x40
 8005a32:	4b2c      	ldr	r3, [pc, #176]	; (8005ae4 <HAL_TIM_Base_MspInit+0x10c>)
 8005a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a36:	f003 0320 	and.w	r3, r3, #32
 8005a3a:	61bb      	str	r3, [r7, #24]
 8005a3c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005a3e:	2200      	movs	r2, #0
 8005a40:	2100      	movs	r1, #0
 8005a42:	2037      	movs	r0, #55	; 0x37
 8005a44:	f002 fb6f 	bl	8008126 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005a48:	2037      	movs	r0, #55	; 0x37
 8005a4a:	f002 fb88 	bl	800815e <HAL_NVIC_EnableIRQ>
}
 8005a4e:	e042      	b.n	8005ad6 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a25      	ldr	r2, [pc, #148]	; (8005aec <HAL_TIM_Base_MspInit+0x114>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d10e      	bne.n	8005a78 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	617b      	str	r3, [r7, #20]
 8005a5e:	4b21      	ldr	r3, [pc, #132]	; (8005ae4 <HAL_TIM_Base_MspInit+0x10c>)
 8005a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a62:	4a20      	ldr	r2, [pc, #128]	; (8005ae4 <HAL_TIM_Base_MspInit+0x10c>)
 8005a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a68:	6453      	str	r3, [r2, #68]	; 0x44
 8005a6a:	4b1e      	ldr	r3, [pc, #120]	; (8005ae4 <HAL_TIM_Base_MspInit+0x10c>)
 8005a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a72:	617b      	str	r3, [r7, #20]
 8005a74:	697b      	ldr	r3, [r7, #20]
}
 8005a76:	e02e      	b.n	8005ad6 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a1c      	ldr	r2, [pc, #112]	; (8005af0 <HAL_TIM_Base_MspInit+0x118>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d10e      	bne.n	8005aa0 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8005a82:	2300      	movs	r3, #0
 8005a84:	613b      	str	r3, [r7, #16]
 8005a86:	4b17      	ldr	r3, [pc, #92]	; (8005ae4 <HAL_TIM_Base_MspInit+0x10c>)
 8005a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a8a:	4a16      	ldr	r2, [pc, #88]	; (8005ae4 <HAL_TIM_Base_MspInit+0x10c>)
 8005a8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a90:	6453      	str	r3, [r2, #68]	; 0x44
 8005a92:	4b14      	ldr	r3, [pc, #80]	; (8005ae4 <HAL_TIM_Base_MspInit+0x10c>)
 8005a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a9a:	613b      	str	r3, [r7, #16]
 8005a9c:	693b      	ldr	r3, [r7, #16]
}
 8005a9e:	e01a      	b.n	8005ad6 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a13      	ldr	r2, [pc, #76]	; (8005af4 <HAL_TIM_Base_MspInit+0x11c>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d115      	bne.n	8005ad6 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8005aaa:	2300      	movs	r3, #0
 8005aac:	60fb      	str	r3, [r7, #12]
 8005aae:	4b0d      	ldr	r3, [pc, #52]	; (8005ae4 <HAL_TIM_Base_MspInit+0x10c>)
 8005ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab2:	4a0c      	ldr	r2, [pc, #48]	; (8005ae4 <HAL_TIM_Base_MspInit+0x10c>)
 8005ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8005aba:	4b0a      	ldr	r3, [pc, #40]	; (8005ae4 <HAL_TIM_Base_MspInit+0x10c>)
 8005abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ac2:	60fb      	str	r3, [r7, #12]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	2100      	movs	r1, #0
 8005aca:	202c      	movs	r0, #44	; 0x2c
 8005acc:	f002 fb2b 	bl	8008126 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005ad0:	202c      	movs	r0, #44	; 0x2c
 8005ad2:	f002 fb44 	bl	800815e <HAL_NVIC_EnableIRQ>
}
 8005ad6:	bf00      	nop
 8005ad8:	3720      	adds	r7, #32
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	40001000 	.word	0x40001000
 8005ae4:	40023800 	.word	0x40023800
 8005ae8:	40001400 	.word	0x40001400
 8005aec:	40014400 	.word	0x40014400
 8005af0:	40014800 	.word	0x40014800
 8005af4:	40001c00 	.word	0x40001c00

08005af8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b08a      	sub	sp, #40	; 0x28
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b00:	f107 0314 	add.w	r3, r7, #20
 8005b04:	2200      	movs	r2, #0
 8005b06:	601a      	str	r2, [r3, #0]
 8005b08:	605a      	str	r2, [r3, #4]
 8005b0a:	609a      	str	r2, [r3, #8]
 8005b0c:	60da      	str	r2, [r3, #12]
 8005b0e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a1d      	ldr	r2, [pc, #116]	; (8005b8c <HAL_TIM_Encoder_MspInit+0x94>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d133      	bne.n	8005b82 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	613b      	str	r3, [r7, #16]
 8005b1e:	4b1c      	ldr	r3, [pc, #112]	; (8005b90 <HAL_TIM_Encoder_MspInit+0x98>)
 8005b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b22:	4a1b      	ldr	r2, [pc, #108]	; (8005b90 <HAL_TIM_Encoder_MspInit+0x98>)
 8005b24:	f043 0302 	orr.w	r3, r3, #2
 8005b28:	6453      	str	r3, [r2, #68]	; 0x44
 8005b2a:	4b19      	ldr	r3, [pc, #100]	; (8005b90 <HAL_TIM_Encoder_MspInit+0x98>)
 8005b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b2e:	f003 0302 	and.w	r3, r3, #2
 8005b32:	613b      	str	r3, [r7, #16]
 8005b34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b36:	2300      	movs	r3, #0
 8005b38:	60fb      	str	r3, [r7, #12]
 8005b3a:	4b15      	ldr	r3, [pc, #84]	; (8005b90 <HAL_TIM_Encoder_MspInit+0x98>)
 8005b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b3e:	4a14      	ldr	r2, [pc, #80]	; (8005b90 <HAL_TIM_Encoder_MspInit+0x98>)
 8005b40:	f043 0304 	orr.w	r3, r3, #4
 8005b44:	6313      	str	r3, [r2, #48]	; 0x30
 8005b46:	4b12      	ldr	r3, [pc, #72]	; (8005b90 <HAL_TIM_Encoder_MspInit+0x98>)
 8005b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b4a:	f003 0304 	and.w	r3, r3, #4
 8005b4e:	60fb      	str	r3, [r7, #12]
 8005b50:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005b52:	23c0      	movs	r3, #192	; 0xc0
 8005b54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b56:	2302      	movs	r3, #2
 8005b58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005b62:	2303      	movs	r3, #3
 8005b64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b66:	f107 0314 	add.w	r3, r7, #20
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	4809      	ldr	r0, [pc, #36]	; (8005b94 <HAL_TIM_Encoder_MspInit+0x9c>)
 8005b6e:	f002 fead 	bl	80088cc <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8005b72:	2200      	movs	r2, #0
 8005b74:	2100      	movs	r1, #0
 8005b76:	202c      	movs	r0, #44	; 0x2c
 8005b78:	f002 fad5 	bl	8008126 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005b7c:	202c      	movs	r0, #44	; 0x2c
 8005b7e:	f002 faee 	bl	800815e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8005b82:	bf00      	nop
 8005b84:	3728      	adds	r7, #40	; 0x28
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	40010400 	.word	0x40010400
 8005b90:	40023800 	.word	0x40023800
 8005b94:	40020800 	.word	0x40020800

08005b98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b08c      	sub	sp, #48	; 0x30
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ba0:	f107 031c 	add.w	r3, r7, #28
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	601a      	str	r2, [r3, #0]
 8005ba8:	605a      	str	r2, [r3, #4]
 8005baa:	609a      	str	r2, [r3, #8]
 8005bac:	60da      	str	r2, [r3, #12]
 8005bae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a5c      	ldr	r2, [pc, #368]	; (8005d28 <HAL_TIM_MspPostInit+0x190>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d11f      	bne.n	8005bfa <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005bba:	2300      	movs	r3, #0
 8005bbc:	61bb      	str	r3, [r7, #24]
 8005bbe:	4b5b      	ldr	r3, [pc, #364]	; (8005d2c <HAL_TIM_MspPostInit+0x194>)
 8005bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc2:	4a5a      	ldr	r2, [pc, #360]	; (8005d2c <HAL_TIM_MspPostInit+0x194>)
 8005bc4:	f043 0310 	orr.w	r3, r3, #16
 8005bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8005bca:	4b58      	ldr	r3, [pc, #352]	; (8005d2c <HAL_TIM_MspPostInit+0x194>)
 8005bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bce:	f003 0310 	and.w	r3, r3, #16
 8005bd2:	61bb      	str	r3, [r7, #24]
 8005bd4:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005bd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005bda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bdc:	2302      	movs	r3, #2
 8005bde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005be0:	2300      	movs	r3, #0
 8005be2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005be4:	2300      	movs	r3, #0
 8005be6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005be8:	2301      	movs	r3, #1
 8005bea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005bec:	f107 031c 	add.w	r3, r7, #28
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	484f      	ldr	r0, [pc, #316]	; (8005d30 <HAL_TIM_MspPostInit+0x198>)
 8005bf4:	f002 fe6a 	bl	80088cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8005bf8:	e091      	b.n	8005d1e <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a4d      	ldr	r2, [pc, #308]	; (8005d34 <HAL_TIM_MspPostInit+0x19c>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d11e      	bne.n	8005c42 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c04:	2300      	movs	r3, #0
 8005c06:	617b      	str	r3, [r7, #20]
 8005c08:	4b48      	ldr	r3, [pc, #288]	; (8005d2c <HAL_TIM_MspPostInit+0x194>)
 8005c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c0c:	4a47      	ldr	r2, [pc, #284]	; (8005d2c <HAL_TIM_MspPostInit+0x194>)
 8005c0e:	f043 0302 	orr.w	r3, r3, #2
 8005c12:	6313      	str	r3, [r2, #48]	; 0x30
 8005c14:	4b45      	ldr	r3, [pc, #276]	; (8005d2c <HAL_TIM_MspPostInit+0x194>)
 8005c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c18:	f003 0302 	and.w	r3, r3, #2
 8005c1c:	617b      	str	r3, [r7, #20]
 8005c1e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005c20:	2330      	movs	r3, #48	; 0x30
 8005c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c24:	2302      	movs	r3, #2
 8005c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005c30:	2302      	movs	r3, #2
 8005c32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c34:	f107 031c 	add.w	r3, r7, #28
 8005c38:	4619      	mov	r1, r3
 8005c3a:	483f      	ldr	r0, [pc, #252]	; (8005d38 <HAL_TIM_MspPostInit+0x1a0>)
 8005c3c:	f002 fe46 	bl	80088cc <HAL_GPIO_Init>
}
 8005c40:	e06d      	b.n	8005d1e <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a3d      	ldr	r2, [pc, #244]	; (8005d3c <HAL_TIM_MspPostInit+0x1a4>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d11f      	bne.n	8005c8c <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	613b      	str	r3, [r7, #16]
 8005c50:	4b36      	ldr	r3, [pc, #216]	; (8005d2c <HAL_TIM_MspPostInit+0x194>)
 8005c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c54:	4a35      	ldr	r2, [pc, #212]	; (8005d2c <HAL_TIM_MspPostInit+0x194>)
 8005c56:	f043 0308 	orr.w	r3, r3, #8
 8005c5a:	6313      	str	r3, [r2, #48]	; 0x30
 8005c5c:	4b33      	ldr	r3, [pc, #204]	; (8005d2c <HAL_TIM_MspPostInit+0x194>)
 8005c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c60:	f003 0308 	and.w	r3, r3, #8
 8005c64:	613b      	str	r3, [r7, #16]
 8005c66:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8005c68:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005c6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c6e:	2302      	movs	r3, #2
 8005c70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c72:	2300      	movs	r3, #0
 8005c74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c76:	2300      	movs	r3, #0
 8005c78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005c7a:	2302      	movs	r3, #2
 8005c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005c7e:	f107 031c 	add.w	r3, r7, #28
 8005c82:	4619      	mov	r1, r3
 8005c84:	482e      	ldr	r0, [pc, #184]	; (8005d40 <HAL_TIM_MspPostInit+0x1a8>)
 8005c86:	f002 fe21 	bl	80088cc <HAL_GPIO_Init>
}
 8005c8a:	e048      	b.n	8005d1e <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a2c      	ldr	r2, [pc, #176]	; (8005d44 <HAL_TIM_MspPostInit+0x1ac>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d11f      	bne.n	8005cd6 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c96:	2300      	movs	r3, #0
 8005c98:	60fb      	str	r3, [r7, #12]
 8005c9a:	4b24      	ldr	r3, [pc, #144]	; (8005d2c <HAL_TIM_MspPostInit+0x194>)
 8005c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c9e:	4a23      	ldr	r2, [pc, #140]	; (8005d2c <HAL_TIM_MspPostInit+0x194>)
 8005ca0:	f043 0302 	orr.w	r3, r3, #2
 8005ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8005ca6:	4b21      	ldr	r3, [pc, #132]	; (8005d2c <HAL_TIM_MspPostInit+0x194>)
 8005ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005caa:	f003 0302 	and.w	r3, r3, #2
 8005cae:	60fb      	str	r3, [r7, #12]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005cb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005cb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cb8:	2302      	movs	r3, #2
 8005cba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005cc8:	f107 031c 	add.w	r3, r7, #28
 8005ccc:	4619      	mov	r1, r3
 8005cce:	481a      	ldr	r0, [pc, #104]	; (8005d38 <HAL_TIM_MspPostInit+0x1a0>)
 8005cd0:	f002 fdfc 	bl	80088cc <HAL_GPIO_Init>
}
 8005cd4:	e023      	b.n	8005d1e <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a1b      	ldr	r2, [pc, #108]	; (8005d48 <HAL_TIM_MspPostInit+0x1b0>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d11e      	bne.n	8005d1e <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	60bb      	str	r3, [r7, #8]
 8005ce4:	4b11      	ldr	r3, [pc, #68]	; (8005d2c <HAL_TIM_MspPostInit+0x194>)
 8005ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce8:	4a10      	ldr	r2, [pc, #64]	; (8005d2c <HAL_TIM_MspPostInit+0x194>)
 8005cea:	f043 0302 	orr.w	r3, r3, #2
 8005cee:	6313      	str	r3, [r2, #48]	; 0x30
 8005cf0:	4b0e      	ldr	r3, [pc, #56]	; (8005d2c <HAL_TIM_MspPostInit+0x194>)
 8005cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf4:	f003 0302 	and.w	r3, r3, #2
 8005cf8:	60bb      	str	r3, [r7, #8]
 8005cfa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005cfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d02:	2302      	movs	r3, #2
 8005d04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d06:	2300      	movs	r3, #0
 8005d08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d12:	f107 031c 	add.w	r3, r7, #28
 8005d16:	4619      	mov	r1, r3
 8005d18:	4807      	ldr	r0, [pc, #28]	; (8005d38 <HAL_TIM_MspPostInit+0x1a0>)
 8005d1a:	f002 fdd7 	bl	80088cc <HAL_GPIO_Init>
}
 8005d1e:	bf00      	nop
 8005d20:	3730      	adds	r7, #48	; 0x30
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	40010000 	.word	0x40010000
 8005d2c:	40023800 	.word	0x40023800
 8005d30:	40021000 	.word	0x40021000
 8005d34:	40000400 	.word	0x40000400
 8005d38:	40020400 	.word	0x40020400
 8005d3c:	40000800 	.word	0x40000800
 8005d40:	40020c00 	.word	0x40020c00
 8005d44:	40014400 	.word	0x40014400
 8005d48:	40014800 	.word	0x40014800

08005d4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b08a      	sub	sp, #40	; 0x28
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d54:	f107 0314 	add.w	r3, r7, #20
 8005d58:	2200      	movs	r2, #0
 8005d5a:	601a      	str	r2, [r3, #0]
 8005d5c:	605a      	str	r2, [r3, #4]
 8005d5e:	609a      	str	r2, [r3, #8]
 8005d60:	60da      	str	r2, [r3, #12]
 8005d62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a19      	ldr	r2, [pc, #100]	; (8005dd0 <HAL_UART_MspInit+0x84>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d12b      	bne.n	8005dc6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005d6e:	2300      	movs	r3, #0
 8005d70:	613b      	str	r3, [r7, #16]
 8005d72:	4b18      	ldr	r3, [pc, #96]	; (8005dd4 <HAL_UART_MspInit+0x88>)
 8005d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d76:	4a17      	ldr	r2, [pc, #92]	; (8005dd4 <HAL_UART_MspInit+0x88>)
 8005d78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8005d7e:	4b15      	ldr	r3, [pc, #84]	; (8005dd4 <HAL_UART_MspInit+0x88>)
 8005d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d86:	613b      	str	r3, [r7, #16]
 8005d88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	60fb      	str	r3, [r7, #12]
 8005d8e:	4b11      	ldr	r3, [pc, #68]	; (8005dd4 <HAL_UART_MspInit+0x88>)
 8005d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d92:	4a10      	ldr	r2, [pc, #64]	; (8005dd4 <HAL_UART_MspInit+0x88>)
 8005d94:	f043 0308 	orr.w	r3, r3, #8
 8005d98:	6313      	str	r3, [r2, #48]	; 0x30
 8005d9a:	4b0e      	ldr	r3, [pc, #56]	; (8005dd4 <HAL_UART_MspInit+0x88>)
 8005d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d9e:	f003 0308 	and.w	r3, r3, #8
 8005da2:	60fb      	str	r3, [r7, #12]
 8005da4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8005da6:	2360      	movs	r3, #96	; 0x60
 8005da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005daa:	2302      	movs	r3, #2
 8005dac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dae:	2300      	movs	r3, #0
 8005db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005db2:	2303      	movs	r3, #3
 8005db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005db6:	2307      	movs	r3, #7
 8005db8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005dba:	f107 0314 	add.w	r3, r7, #20
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	4805      	ldr	r0, [pc, #20]	; (8005dd8 <HAL_UART_MspInit+0x8c>)
 8005dc2:	f002 fd83 	bl	80088cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005dc6:	bf00      	nop
 8005dc8:	3728      	adds	r7, #40	; 0x28
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	40004400 	.word	0x40004400
 8005dd4:	40023800 	.word	0x40023800
 8005dd8:	40020c00 	.word	0x40020c00

08005ddc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005de0:	e7fe      	b.n	8005de0 <NMI_Handler+0x4>

08005de2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005de2:	b480      	push	{r7}
 8005de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005de6:	e7fe      	b.n	8005de6 <HardFault_Handler+0x4>

08005de8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005de8:	b480      	push	{r7}
 8005dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005dec:	e7fe      	b.n	8005dec <MemManage_Handler+0x4>

08005dee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005dee:	b480      	push	{r7}
 8005df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005df2:	e7fe      	b.n	8005df2 <BusFault_Handler+0x4>

08005df4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005df4:	b480      	push	{r7}
 8005df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005df8:	e7fe      	b.n	8005df8 <UsageFault_Handler+0x4>

08005dfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005dfe:	bf00      	nop
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005e0c:	bf00      	nop
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr

08005e16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005e16:	b480      	push	{r7}
 8005e18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005e1a:	bf00      	nop
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005e28:	f001 fc5c 	bl	80076e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005e2c:	bf00      	nop
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8005e34:	2004      	movs	r0, #4
 8005e36:	f002 ff25 	bl	8008c84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8005e3a:	bf00      	nop
 8005e3c:	bd80      	pop	{r7, pc}

08005e3e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005e3e:	b580      	push	{r7, lr}
 8005e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8005e42:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005e46:	f002 ff1d 	bl	8008c84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005e4a:	bf00      	nop
 8005e4c:	bd80      	pop	{r7, pc}
	...

08005e50 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005e54:	4803      	ldr	r0, [pc, #12]	; (8005e64 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8005e56:	f006 ff34 	bl	800ccc2 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8005e5a:	4803      	ldr	r0, [pc, #12]	; (8005e68 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8005e5c:	f006 ff31 	bl	800ccc2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8005e60:	bf00      	nop
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	200359ec 	.word	0x200359ec
 8005e68:	20035be8 	.word	0x20035be8

08005e6c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8005e70:	4802      	ldr	r0, [pc, #8]	; (8005e7c <SDIO_IRQHandler+0x10>)
 8005e72:	f004 ffcd 	bl	800ae10 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8005e76:	bf00      	nop
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	20035d48 	.word	0x20035d48

08005e80 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005e84:	4802      	ldr	r0, [pc, #8]	; (8005e90 <TIM6_DAC_IRQHandler+0x10>)
 8005e86:	f006 ff1c 	bl	800ccc2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005e8a:	bf00      	nop
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	20035cc8 	.word	0x20035cc8

08005e94 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005e98:	4802      	ldr	r0, [pc, #8]	; (8005ea4 <TIM7_IRQHandler+0x10>)
 8005e9a:	f006 ff12 	bl	800ccc2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005e9e:	bf00      	nop
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	20035e6c 	.word	0x20035e6c

08005ea8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8005eac:	4802      	ldr	r0, [pc, #8]	; (8005eb8 <DMA2_Stream2_IRQHandler+0x10>)
 8005eae:	f002 fa99 	bl	80083e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8005eb2:	bf00      	nop
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	20035e0c 	.word	0x20035e0c

08005ebc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8005ec0:	4802      	ldr	r0, [pc, #8]	; (8005ecc <DMA2_Stream3_IRQHandler+0x10>)
 8005ec2:	f002 fa8f 	bl	80083e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8005ec6:	bf00      	nop
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	20035934 	.word	0x20035934

08005ed0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8005ed4:	4802      	ldr	r0, [pc, #8]	; (8005ee0 <DMA2_Stream6_IRQHandler+0x10>)
 8005ed6:	f002 fa85 	bl	80083e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8005eda:	bf00      	nop
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	20035c68 	.word	0x20035c68

08005ee4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b086      	sub	sp, #24
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	617b      	str	r3, [r7, #20]
 8005ef4:	e00a      	b.n	8005f0c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005ef6:	f3af 8000 	nop.w
 8005efa:	4601      	mov	r1, r0
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	1c5a      	adds	r2, r3, #1
 8005f00:	60ba      	str	r2, [r7, #8]
 8005f02:	b2ca      	uxtb	r2, r1
 8005f04:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	3301      	adds	r3, #1
 8005f0a:	617b      	str	r3, [r7, #20]
 8005f0c:	697a      	ldr	r2, [r7, #20]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	dbf0      	blt.n	8005ef6 <_read+0x12>
	}

return len;
 8005f14:	687b      	ldr	r3, [r7, #4]
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3718      	adds	r7, #24
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}

08005f1e <_close>:
	}
	return len;
}

int _close(int file)
{
 8005f1e:	b480      	push	{r7}
 8005f20:	b083      	sub	sp, #12
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
	return -1;
 8005f26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	370c      	adds	r7, #12
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr

08005f36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005f36:	b480      	push	{r7}
 8005f38:	b083      	sub	sp, #12
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
 8005f3e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005f46:	605a      	str	r2, [r3, #4]
	return 0;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	370c      	adds	r7, #12
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr

08005f56 <_isatty>:

int _isatty(int file)
{
 8005f56:	b480      	push	{r7}
 8005f58:	b083      	sub	sp, #12
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
	return 1;
 8005f5e:	2301      	movs	r3, #1
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	607a      	str	r2, [r7, #4]
	return 0;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3714      	adds	r7, #20
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr
	...

08005f88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b086      	sub	sp, #24
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005f90:	4a14      	ldr	r2, [pc, #80]	; (8005fe4 <_sbrk+0x5c>)
 8005f92:	4b15      	ldr	r3, [pc, #84]	; (8005fe8 <_sbrk+0x60>)
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005f9c:	4b13      	ldr	r3, [pc, #76]	; (8005fec <_sbrk+0x64>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d102      	bne.n	8005faa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005fa4:	4b11      	ldr	r3, [pc, #68]	; (8005fec <_sbrk+0x64>)
 8005fa6:	4a12      	ldr	r2, [pc, #72]	; (8005ff0 <_sbrk+0x68>)
 8005fa8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005faa:	4b10      	ldr	r3, [pc, #64]	; (8005fec <_sbrk+0x64>)
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4413      	add	r3, r2
 8005fb2:	693a      	ldr	r2, [r7, #16]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d207      	bcs.n	8005fc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005fb8:	f00d f918 	bl	80131ec <__errno>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	230c      	movs	r3, #12
 8005fc0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8005fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8005fc6:	e009      	b.n	8005fdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005fc8:	4b08      	ldr	r3, [pc, #32]	; (8005fec <_sbrk+0x64>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005fce:	4b07      	ldr	r3, [pc, #28]	; (8005fec <_sbrk+0x64>)
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	4a05      	ldr	r2, [pc, #20]	; (8005fec <_sbrk+0x64>)
 8005fd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005fda:	68fb      	ldr	r3, [r7, #12]
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3718      	adds	r7, #24
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	20050000 	.word	0x20050000
 8005fe8:	00000800 	.word	0x00000800
 8005fec:	200002a0 	.word	0x200002a0
 8005ff0:	20037fc0 	.word	0x20037fc0

08005ff4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005ff8:	4b08      	ldr	r3, [pc, #32]	; (800601c <SystemInit+0x28>)
 8005ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ffe:	4a07      	ldr	r2, [pc, #28]	; (800601c <SystemInit+0x28>)
 8006000:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006004:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006008:	4b04      	ldr	r3, [pc, #16]	; (800601c <SystemInit+0x28>)
 800600a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800600e:	609a      	str	r2, [r3, #8]
#endif
}
 8006010:	bf00      	nop
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	e000ed00 	.word	0xe000ed00

08006020 <batteryLowMode>:
float mon_v, mon_w;
uint16_t mon_cnt;
float mon_zg, mon_offset;

void batteryLowMode()
{
 8006020:	b580      	push	{r7, lr}
 8006022:	af00      	add	r7, sp, #0
	lcd_clear();
 8006024:	f7fb f83c 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8006028:	2100      	movs	r1, #0
 800602a:	2000      	movs	r0, #0
 800602c:	f7fb f848 	bl	80010c0 <lcd_locate>
	lcd_printf("Battery");
 8006030:	4814      	ldr	r0, [pc, #80]	; (8006084 <batteryLowMode+0x64>)
 8006032:	f7fb f86f 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8006036:	2101      	movs	r1, #1
 8006038:	2000      	movs	r0, #0
 800603a:	f7fb f841 	bl	80010c0 <lcd_locate>
	lcd_printf("Low");
 800603e:	4812      	ldr	r0, [pc, #72]	; (8006088 <batteryLowMode+0x68>)
 8006040:	f7fb f868 	bl	8001114 <lcd_printf>

	while(1){
		led.fullColor('R');
 8006044:	2152      	movs	r1, #82	; 0x52
 8006046:	4811      	ldr	r0, [pc, #68]	; (800608c <batteryLowMode+0x6c>)
 8006048:	f7fb ff50 	bl	8001eec <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 800604c:	2064      	movs	r0, #100	; 0x64
 800604e:	f001 fb69 	bl	8007724 <HAL_Delay>
		led.fullColor('Y');
 8006052:	2159      	movs	r1, #89	; 0x59
 8006054:	480d      	ldr	r0, [pc, #52]	; (800608c <batteryLowMode+0x6c>)
 8006056:	f7fb ff49 	bl	8001eec <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 800605a:	2064      	movs	r0, #100	; 0x64
 800605c:	f001 fb62 	bl	8007724 <HAL_Delay>

		if(joy_stick.getValue() == JOY_C){
 8006060:	480b      	ldr	r0, [pc, #44]	; (8006090 <batteryLowMode+0x70>)
 8006062:	f7fb fedf 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 8006066:	4603      	mov	r3, r0
 8006068:	2b02      	cmp	r3, #2
 800606a:	bf0c      	ite	eq
 800606c:	2301      	moveq	r3, #1
 800606e:	2300      	movne	r3, #0
 8006070:	b2db      	uxtb	r3, r3
 8006072:	2b00      	cmp	r3, #0
 8006074:	d0e6      	beq.n	8006044 <batteryLowMode+0x24>
			HAL_Delay(500);
 8006076:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800607a:	f001 fb53 	bl	8007724 <HAL_Delay>
			break;
 800607e:	bf00      	nop
		}
	}
}
 8006080:	bf00      	nop
 8006082:	bd80      	pop	{r7, pc}
 8006084:	0801842c 	.word	0x0801842c
 8006088:	08018434 	.word	0x08018434
 800608c:	200005b0 	.word	0x200005b0
 8006090:	200005a4 	.word	0x200005a4

08006094 <cppInit>:

void cppInit(void)
{
 8006094:	b598      	push	{r3, r4, r7, lr}
 8006096:	af00      	add	r7, sp, #0
	lcd_init();
 8006098:	f7fa ffbe 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 800609c:	483f      	ldr	r0, [pc, #252]	; (800619c <cppInit+0x108>)
 800609e:	f7fd fd41 	bl	8003b24 <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 80060a2:	2064      	movs	r0, #100	; 0x64
 80060a4:	f001 fb3e 	bl	8007724 <HAL_Delay>
	power_sensor.updateValues();
 80060a8:	483c      	ldr	r0, [pc, #240]	; (800619c <cppInit+0x108>)
 80060aa:	f7fd fd49 	bl	8003b40 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 80060ae:	f7fa fff7 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 80060b2:	2100      	movs	r1, #0
 80060b4:	2000      	movs	r0, #0
 80060b6:	f7fb f803 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 80060ba:	4839      	ldr	r0, [pc, #228]	; (80061a0 <cppInit+0x10c>)
 80060bc:	f7fb f82a 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 80060c0:	2101      	movs	r1, #1
 80060c2:	2000      	movs	r0, #0
 80060c4:	f7fa fffc 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 80060c8:	4834      	ldr	r0, [pc, #208]	; (800619c <cppInit+0x108>)
 80060ca:	f7fd fd63 	bl	8003b94 <_ZN11PowerSensor17getButteryVoltageEv>
 80060ce:	ee10 3a10 	vmov	r3, s0
 80060d2:	4618      	mov	r0, r3
 80060d4:	f7fa fa50 	bl	8000578 <__aeabi_f2d>
 80060d8:	4603      	mov	r3, r0
 80060da:	460c      	mov	r4, r1
 80060dc:	461a      	mov	r2, r3
 80060de:	4623      	mov	r3, r4
 80060e0:	4830      	ldr	r0, [pc, #192]	; (80061a4 <cppInit+0x110>)
 80060e2:	f7fb f817 	bl	8001114 <lcd_printf>
	HAL_Delay(1000);
 80060e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80060ea:	f001 fb1b 	bl	8007724 <HAL_Delay>

	if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed
 80060ee:	482b      	ldr	r0, [pc, #172]	; (800619c <cppInit+0x108>)
 80060f0:	f7fd fd62 	bl	8003bb8 <_ZN11PowerSensor12butteryCheckEv>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d001      	beq.n	80060fe <cppInit+0x6a>
 80060fa:	f7ff ff91 	bl	8006020 <batteryLowMode>

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 80060fe:	482a      	ldr	r0, [pc, #168]	; (80061a8 <cppInit+0x114>)
 8006100:	f7fc ff90 	bl	8003024 <_ZN6Logger10sdCardInitEv>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d007      	beq.n	800611a <cppInit+0x86>
		led.fullColor('G');
 800610a:	2147      	movs	r1, #71	; 0x47
 800610c:	4827      	ldr	r0, [pc, #156]	; (80061ac <cppInit+0x118>)
 800610e:	f7fb feed 	bl	8001eec <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8006112:	2064      	movs	r0, #100	; 0x64
 8006114:	f001 fb06 	bl	8007724 <HAL_Delay>
 8006118:	e006      	b.n	8006128 <cppInit+0x94>
	}
	else{ //sd mount fali
		led.fullColor('R');
 800611a:	2152      	movs	r1, #82	; 0x52
 800611c:	4823      	ldr	r0, [pc, #140]	; (80061ac <cppInit+0x118>)
 800611e:	f7fb fee5 	bl	8001eec <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8006122:	2064      	movs	r0, #100	; 0x64
 8006124:	f001 fafe 	bl	8007724 <HAL_Delay>
	}

	line_sensor.ADCStart();
 8006128:	4821      	ldr	r0, [pc, #132]	; (80061b0 <cppInit+0x11c>)
 800612a:	f7fc f83b 	bl	80021a4 <_ZN10LineSensor8ADCStartEv>
	motor.init();
 800612e:	4821      	ldr	r0, [pc, #132]	; (80061b4 <cppInit+0x120>)
 8006130:	f7fd f98e 	bl	8003450 <_ZN5Motor4initEv>
	encoder.init();
 8006134:	4820      	ldr	r0, [pc, #128]	; (80061b8 <cppInit+0x124>)
 8006136:	f7fb f835 	bl	80011a4 <_ZN7Encoder4initEv>
	imu.init();
 800613a:	4820      	ldr	r0, [pc, #128]	; (80061bc <cppInit+0x128>)
 800613c:	f7fb fc8e 	bl	8001a5c <_ZN3IMU4initEv>
	line_trace.init();
 8006140:	481f      	ldr	r0, [pc, #124]	; (80061c0 <cppInit+0x12c>)
 8006142:	f7fc fd49 	bl	8002bd8 <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 8006146:	481a      	ldr	r0, [pc, #104]	; (80061b0 <cppInit+0x11c>)
 8006148:	f7fc f96c 	bl	8002424 <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 800614c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006150:	f001 fae8 	bl	8007724 <HAL_Delay>

	led.fullColor('M');
 8006154:	214d      	movs	r1, #77	; 0x4d
 8006156:	4815      	ldr	r0, [pc, #84]	; (80061ac <cppInit+0x118>)
 8006158:	f7fb fec8 	bl	8001eec <_ZN3LED9fullColorEc>
	imu.calibration();
 800615c:	4817      	ldr	r0, [pc, #92]	; (80061bc <cppInit+0x128>)
 800615e:	f7fb fd4d 	bl	8001bfc <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.5, 20, 0);
	velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243);
 8006162:	ed9f 1a18 	vldr	s2, [pc, #96]	; 80061c4 <cppInit+0x130>
 8006166:	eddf 0a18 	vldr	s1, [pc, #96]	; 80061c8 <cppInit+0x134>
 800616a:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80061cc <cppInit+0x138>
 800616e:	4818      	ldr	r0, [pc, #96]	; (80061d0 <cppInit+0x13c>)
 8006170:	f7fe f8d6 	bl	8004320 <_ZN12VelocityCtrl15setVelocityGainEfff>
	//velocity_ctrl.setVelocityGain(1.9842, 22.9078, 0.02079);
	//velocity_ctrl.setOmegaGain(0.5, 5, 0);
	//velocity_ctrl.setOmegaGain(0.05, 7, 0);
	velocity_ctrl.setOmegaGain(0.069793, 0.86816, 0.0014027);
 8006174:	ed9f 1a17 	vldr	s2, [pc, #92]	; 80061d4 <cppInit+0x140>
 8006178:	eddf 0a17 	vldr	s1, [pc, #92]	; 80061d8 <cppInit+0x144>
 800617c:	ed9f 0a17 	vldr	s0, [pc, #92]	; 80061dc <cppInit+0x148>
 8006180:	4813      	ldr	r0, [pc, #76]	; (80061d0 <cppInit+0x13c>)
 8006182:	f7fe f8e6 	bl	8004352 <_ZN12VelocityCtrl12setOmegaGainEfff>
	//velocity_ctrl.setOmegaGain(0.12175, 1.0604, 0.002614);
	//velocity_ctrl.setOmegaGain(0.0, 0, 0);


	encoder.clearDistance();
 8006186:	480c      	ldr	r0, [pc, #48]	; (80061b8 <cppInit+0x124>)
 8006188:	f7fb f956 	bl	8001438 <_ZN7Encoder13clearDistanceEv>
	odometry.clearPotition();
 800618c:	4814      	ldr	r0, [pc, #80]	; (80061e0 <cppInit+0x14c>)
 800618e:	f7fd fb97 	bl	80038c0 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 8006192:	4814      	ldr	r0, [pc, #80]	; (80061e4 <cppInit+0x150>)
 8006194:	f7fd fc2e 	bl	80039f4 <_ZN13PathFollowing4initEv>

}
 8006198:	bf00      	nop
 800619a:	bd98      	pop	{r3, r4, r7, pc}
 800619c:	200005b4 	.word	0x200005b4
 80061a0:	08018438 	.word	0x08018438
 80061a4:	08018440 	.word	0x08018440
 80061a8:	200005d4 	.word	0x200005d4
 80061ac:	200005b0 	.word	0x200005b0
 80061b0:	200002a4 	.word	0x200002a4
 80061b4:	200005ac 	.word	0x200005ac
 80061b8:	20015d9c 	.word	0x20015d9c
 80061bc:	200005c0 	.word	0x200005c0
 80061c0:	20015e38 	.word	0x20015e38
 80061c4:	3cceca68 	.word	0x3cceca68
 80061c8:	4180f06f 	.word	0x4180f06f
 80061cc:	3fea2d0e 	.word	0x3fea2d0e
 80061d0:	20015db8 	.word	0x20015db8
 80061d4:	3ab7dacd 	.word	0x3ab7dacd
 80061d8:	3f5e3fbc 	.word	0x3f5e3fbc
 80061dc:	3d8eefa2 	.word	0x3d8eefa2
 80061e0:	20015df8 	.word	0x20015df8
 80061e4:	2001be80 	.word	0x2001be80

080061e8 <cppFlip1ms>:

void cppFlip1ms(void)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 80061ec:	4819      	ldr	r0, [pc, #100]	; (8006254 <cppFlip1ms+0x6c>)
 80061ee:	f7fc f837 	bl	8002260 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 80061f2:	4819      	ldr	r0, [pc, #100]	; (8006258 <cppFlip1ms+0x70>)
 80061f4:	f7fb fc60 	bl	8001ab8 <_ZN3IMU12updateValuesEv>
	encoder.updateCnt();
 80061f8:	4818      	ldr	r0, [pc, #96]	; (800625c <cppFlip1ms+0x74>)
 80061fa:	f7fa fff5 	bl	80011e8 <_ZN7Encoder9updateCntEv>

	line_trace.flip();
 80061fe:	4818      	ldr	r0, [pc, #96]	; (8006260 <cppFlip1ms+0x78>)
 8006200:	f7fc fd82 	bl	8002d08 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 8006204:	4817      	ldr	r0, [pc, #92]	; (8006264 <cppFlip1ms+0x7c>)
 8006206:	f7fe f8bd 	bl	8004384 <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 800620a:	4817      	ldr	r0, [pc, #92]	; (8006268 <cppFlip1ms+0x80>)
 800620c:	f7fd fb3c 	bl	8003888 <_ZN8Odometry4flipEv>

	motor.motorCtrl();
 8006210:	4816      	ldr	r0, [pc, #88]	; (800626c <cppFlip1ms+0x84>)
 8006212:	f7fd f92f 	bl	8003474 <_ZN5Motor9motorCtrlEv>

	//logger.storeLog(velocity_ctrl.getCurrentVelocity());
	//logger.storeLog(imu.getOmega());

	static uint16_t twice_cnt;
	twice_cnt++;
 8006216:	4b16      	ldr	r3, [pc, #88]	; (8006270 <cppFlip1ms+0x88>)
 8006218:	881b      	ldrh	r3, [r3, #0]
 800621a:	3301      	adds	r3, #1
 800621c:	b29a      	uxth	r2, r3
 800621e:	4b14      	ldr	r3, [pc, #80]	; (8006270 <cppFlip1ms+0x88>)
 8006220:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 2){ //2ms
 8006222:	4b13      	ldr	r3, [pc, #76]	; (8006270 <cppFlip1ms+0x88>)
 8006224:	881b      	ldrh	r3, [r3, #0]
 8006226:	2b01      	cmp	r3, #1
 8006228:	d90c      	bls.n	8006244 <cppFlip1ms+0x5c>
		sys_ident.inOutputStore(imu.getOmega());
 800622a:	480b      	ldr	r0, [pc, #44]	; (8006258 <cppFlip1ms+0x70>)
 800622c:	f7fb fc9c 	bl	8001b68 <_ZN3IMU8getOmegaEv>
 8006230:	eef0 7a40 	vmov.f32	s15, s0
 8006234:	eeb0 0a67 	vmov.f32	s0, s15
 8006238:	480e      	ldr	r0, [pc, #56]	; (8006274 <cppFlip1ms+0x8c>)
 800623a:	f7fd fe45 	bl	8003ec8 <_ZN20SystemIdentification13inOutputStoreEf>
		twice_cnt = 0;
 800623e:	4b0c      	ldr	r3, [pc, #48]	; (8006270 <cppFlip1ms+0x88>)
 8006240:	2200      	movs	r2, #0
 8006242:	801a      	strh	r2, [r3, #0]
	}

	line_trace.storeLogs();
 8006244:	4806      	ldr	r0, [pc, #24]	; (8006260 <cppFlip1ms+0x78>)
 8006246:	f7fc fe73 	bl	8002f30 <_ZN9LineTrace9storeLogsEv>

	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clearCnt();
 800624a:	4804      	ldr	r0, [pc, #16]	; (800625c <cppFlip1ms+0x74>)
 800624c:	f7fb f902 	bl	8001454 <_ZN7Encoder8clearCntEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8006250:	bf00      	nop
 8006252:	bd80      	pop	{r7, pc}
 8006254:	200002a4 	.word	0x200002a4
 8006258:	200005c0 	.word	0x200005c0
 800625c:	20015d9c 	.word	0x20015d9c
 8006260:	20015e38 	.word	0x20015e38
 8006264:	20015db8 	.word	0x20015db8
 8006268:	20015df8 	.word	0x20015df8
 800626c:	200005ac 	.word	0x200005ac
 8006270:	200335aa 	.word	0x200335aa
 8006274:	2001bc74 	.word	0x2001bc74

08006278 <cppFlip100ns>:

void cppFlip100ns(void)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 800627c:	4802      	ldr	r0, [pc, #8]	; (8006288 <cppFlip100ns+0x10>)
 800627e:	f7fb ffa1 	bl	80021c4 <_ZN10LineSensor17storeSensorValuesEv>
}
 8006282:	bf00      	nop
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	200002a4 	.word	0x200002a4

0800628c <cppFlip10ms>:

void cppFlip10ms(void)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	af00      	add	r7, sp, #0
	static uint16_t twice_cnt;
	twice_cnt++;
 8006290:	4b0a      	ldr	r3, [pc, #40]	; (80062bc <cppFlip10ms+0x30>)
 8006292:	881b      	ldrh	r3, [r3, #0]
 8006294:	3301      	adds	r3, #1
 8006296:	b29a      	uxth	r2, r3
 8006298:	4b08      	ldr	r3, [pc, #32]	; (80062bc <cppFlip10ms+0x30>)
 800629a:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 7){ //70ms
 800629c:	4b07      	ldr	r3, [pc, #28]	; (80062bc <cppFlip10ms+0x30>)
 800629e:	881b      	ldrh	r3, [r3, #0]
 80062a0:	2b06      	cmp	r3, #6
 80062a2:	d905      	bls.n	80062b0 <cppFlip10ms+0x24>
		sys_ident.updateMsig();
 80062a4:	4806      	ldr	r0, [pc, #24]	; (80062c0 <cppFlip10ms+0x34>)
 80062a6:	f7fd fe4b 	bl	8003f40 <_ZN20SystemIdentification10updateMsigEv>
		twice_cnt = 0;
 80062aa:	4b04      	ldr	r3, [pc, #16]	; (80062bc <cppFlip10ms+0x30>)
 80062ac:	2200      	movs	r2, #0
 80062ae:	801a      	strh	r2, [r3, #0]
	}

	mon_cnt = twice_cnt;
 80062b0:	4b02      	ldr	r3, [pc, #8]	; (80062bc <cppFlip10ms+0x30>)
 80062b2:	881a      	ldrh	r2, [r3, #0]
 80062b4:	4b03      	ldr	r3, [pc, #12]	; (80062c4 <cppFlip10ms+0x38>)
 80062b6:	801a      	strh	r2, [r3, #0]
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 80062b8:	bf00      	nop
 80062ba:	bd80      	pop	{r7, pc}
 80062bc:	200335ac 	.word	0x200335ac
 80062c0:	2001bc74 	.word	0x2001bc74
 80062c4:	200335a8 	.word	0x200335a8

080062c8 <cppExit>:

void cppExit(uint16_t gpio_pin)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	4603      	mov	r3, r0
 80062d0:	80fb      	strh	r3, [r7, #6]
	side_sensor.updateStatus(gpio_pin);
 80062d2:	88fb      	ldrh	r3, [r7, #6]
 80062d4:	4619      	mov	r1, r3
 80062d6:	4803      	ldr	r0, [pc, #12]	; (80062e4 <cppExit+0x1c>)
 80062d8:	f7fd fd06 	bl	8003ce8 <_ZN10SideSensor12updateStatusEt>
}
 80062dc:	bf00      	nop
 80062de:	3708      	adds	r7, #8
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	2000059c 	.word	0x2000059c

080062e8 <cppLoop>:

void cppLoop(void)
{
 80062e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80062ec:	b08b      	sub	sp, #44	; 0x2c
 80062ee:	af02      	add	r7, sp, #8
	switch(rotary_switch.getValue()){
 80062f0:	48bf      	ldr	r0, [pc, #764]	; (80065f0 <cppLoop+0x308>)
 80062f2:	f7fd fc93 	bl	8003c1c <_ZN12RotarySwitch8getValueEv>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b0f      	cmp	r3, #15
 80062fa:	f201 80bb 	bhi.w	8007474 <cppLoop+0x118c>
 80062fe:	a201      	add	r2, pc, #4	; (adr r2, 8006304 <cppLoop+0x1c>)
 8006300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006304:	08006345 	.word	0x08006345
 8006308:	0800681f 	.word	0x0800681f
 800630c:	08006893 	.word	0x08006893
 8006310:	0800697d 	.word	0x0800697d
 8006314:	08006a2d 	.word	0x08006a2d
 8006318:	08006abb 	.word	0x08006abb
 800631c:	08006b81 	.word	0x08006b81
 8006320:	08006c95 	.word	0x08006c95
 8006324:	08006d35 	.word	0x08006d35
 8006328:	0800726d 	.word	0x0800726d
 800632c:	08007309 	.word	0x08007309
 8006330:	080073a3 	.word	0x080073a3
 8006334:	080073cd 	.word	0x080073cd
 8006338:	080073f7 	.word	0x080073f7
 800633c:	08007421 	.word	0x08007421
 8006340:	0800744b 	.word	0x0800744b
	static int16_t selector;

	case 0:
		led.fullColor('R');
 8006344:	2152      	movs	r1, #82	; 0x52
 8006346:	48ab      	ldr	r0, [pc, #684]	; (80065f4 <cppLoop+0x30c>)
 8006348:	f7fb fdd0 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 800634c:	f7fa fea8 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006350:	2100      	movs	r1, #0
 8006352:	2000      	movs	r0, #0
 8006354:	f7fa feb4 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", line_trace.getKp()*1000);
 8006358:	48a7      	ldr	r0, [pc, #668]	; (80065f8 <cppLoop+0x310>)
 800635a:	f7fc fc8a 	bl	8002c72 <_ZN9LineTrace5getKpEv>
 800635e:	eeb0 7a40 	vmov.f32	s14, s0
 8006362:	eddf 7aa6 	vldr	s15, [pc, #664]	; 80065fc <cppLoop+0x314>
 8006366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800636a:	ee17 0a90 	vmov	r0, s15
 800636e:	f7fa f903 	bl	8000578 <__aeabi_f2d>
 8006372:	4603      	mov	r3, r0
 8006374:	460c      	mov	r4, r1
 8006376:	461a      	mov	r2, r3
 8006378:	4623      	mov	r3, r4
 800637a:	48a1      	ldr	r0, [pc, #644]	; (8006600 <cppLoop+0x318>)
 800637c:	f7fa feca 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006380:	2101      	movs	r1, #1
 8006382:	2000      	movs	r0, #0
 8006384:	f7fa fe9c 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", line_trace.getKi()*100, line_trace.getKd()*10000);
 8006388:	489b      	ldr	r0, [pc, #620]	; (80065f8 <cppLoop+0x310>)
 800638a:	f7fc fc81 	bl	8002c90 <_ZN9LineTrace5getKiEv>
 800638e:	eeb0 7a40 	vmov.f32	s14, s0
 8006392:	eddf 7a9c 	vldr	s15, [pc, #624]	; 8006604 <cppLoop+0x31c>
 8006396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800639a:	ee17 0a90 	vmov	r0, s15
 800639e:	f7fa f8eb 	bl	8000578 <__aeabi_f2d>
 80063a2:	4605      	mov	r5, r0
 80063a4:	460e      	mov	r6, r1
 80063a6:	4894      	ldr	r0, [pc, #592]	; (80065f8 <cppLoop+0x310>)
 80063a8:	f7fc fc81 	bl	8002cae <_ZN9LineTrace5getKdEv>
 80063ac:	eeb0 7a40 	vmov.f32	s14, s0
 80063b0:	eddf 7a95 	vldr	s15, [pc, #596]	; 8006608 <cppLoop+0x320>
 80063b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063b8:	ee17 0a90 	vmov	r0, s15
 80063bc:	f7fa f8dc 	bl	8000578 <__aeabi_f2d>
 80063c0:	4603      	mov	r3, r0
 80063c2:	460c      	mov	r4, r1
 80063c4:	e9cd 3400 	strd	r3, r4, [sp]
 80063c8:	462a      	mov	r2, r5
 80063ca:	4633      	mov	r3, r6
 80063cc:	488f      	ldr	r0, [pc, #572]	; (800660c <cppLoop+0x324>)
 80063ce:	f7fa fea1 	bl	8001114 <lcd_printf>

		static float adj_kp = line_trace.getKp();
 80063d2:	4b8f      	ldr	r3, [pc, #572]	; (8006610 <cppLoop+0x328>)
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	f3bf 8f5b 	dmb	ish
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	f003 0301 	and.w	r3, r3, #1
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	bf0c      	ite	eq
 80063e4:	2301      	moveq	r3, #1
 80063e6:	2300      	movne	r3, #0
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d015      	beq.n	800641a <cppLoop+0x132>
 80063ee:	4888      	ldr	r0, [pc, #544]	; (8006610 <cppLoop+0x328>)
 80063f0:	f00b fe95 	bl	801211e <__cxa_guard_acquire>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	bf14      	ite	ne
 80063fa:	2301      	movne	r3, #1
 80063fc:	2300      	moveq	r3, #0
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	2b00      	cmp	r3, #0
 8006402:	d00a      	beq.n	800641a <cppLoop+0x132>
 8006404:	487c      	ldr	r0, [pc, #496]	; (80065f8 <cppLoop+0x310>)
 8006406:	f7fc fc34 	bl	8002c72 <_ZN9LineTrace5getKpEv>
 800640a:	eef0 7a40 	vmov.f32	s15, s0
 800640e:	4b81      	ldr	r3, [pc, #516]	; (8006614 <cppLoop+0x32c>)
 8006410:	edc3 7a00 	vstr	s15, [r3]
 8006414:	487e      	ldr	r0, [pc, #504]	; (8006610 <cppLoop+0x328>)
 8006416:	f00b fe8e 	bl	8012136 <__cxa_guard_release>
		static float adj_ki = line_trace.getKi();
 800641a:	4b7f      	ldr	r3, [pc, #508]	; (8006618 <cppLoop+0x330>)
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	f3bf 8f5b 	dmb	ish
 8006422:	b2db      	uxtb	r3, r3
 8006424:	f003 0301 	and.w	r3, r3, #1
 8006428:	2b00      	cmp	r3, #0
 800642a:	bf0c      	ite	eq
 800642c:	2301      	moveq	r3, #1
 800642e:	2300      	movne	r3, #0
 8006430:	b2db      	uxtb	r3, r3
 8006432:	2b00      	cmp	r3, #0
 8006434:	d015      	beq.n	8006462 <cppLoop+0x17a>
 8006436:	4878      	ldr	r0, [pc, #480]	; (8006618 <cppLoop+0x330>)
 8006438:	f00b fe71 	bl	801211e <__cxa_guard_acquire>
 800643c:	4603      	mov	r3, r0
 800643e:	2b00      	cmp	r3, #0
 8006440:	bf14      	ite	ne
 8006442:	2301      	movne	r3, #1
 8006444:	2300      	moveq	r3, #0
 8006446:	b2db      	uxtb	r3, r3
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00a      	beq.n	8006462 <cppLoop+0x17a>
 800644c:	486a      	ldr	r0, [pc, #424]	; (80065f8 <cppLoop+0x310>)
 800644e:	f7fc fc1f 	bl	8002c90 <_ZN9LineTrace5getKiEv>
 8006452:	eef0 7a40 	vmov.f32	s15, s0
 8006456:	4b71      	ldr	r3, [pc, #452]	; (800661c <cppLoop+0x334>)
 8006458:	edc3 7a00 	vstr	s15, [r3]
 800645c:	486e      	ldr	r0, [pc, #440]	; (8006618 <cppLoop+0x330>)
 800645e:	f00b fe6a 	bl	8012136 <__cxa_guard_release>
		static float adj_kd = line_trace.getKd();
 8006462:	4b6f      	ldr	r3, [pc, #444]	; (8006620 <cppLoop+0x338>)
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	f3bf 8f5b 	dmb	ish
 800646a:	b2db      	uxtb	r3, r3
 800646c:	f003 0301 	and.w	r3, r3, #1
 8006470:	2b00      	cmp	r3, #0
 8006472:	bf0c      	ite	eq
 8006474:	2301      	moveq	r3, #1
 8006476:	2300      	movne	r3, #0
 8006478:	b2db      	uxtb	r3, r3
 800647a:	2b00      	cmp	r3, #0
 800647c:	d015      	beq.n	80064aa <cppLoop+0x1c2>
 800647e:	4868      	ldr	r0, [pc, #416]	; (8006620 <cppLoop+0x338>)
 8006480:	f00b fe4d 	bl	801211e <__cxa_guard_acquire>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	bf14      	ite	ne
 800648a:	2301      	movne	r3, #1
 800648c:	2300      	moveq	r3, #0
 800648e:	b2db      	uxtb	r3, r3
 8006490:	2b00      	cmp	r3, #0
 8006492:	d00a      	beq.n	80064aa <cppLoop+0x1c2>
 8006494:	4858      	ldr	r0, [pc, #352]	; (80065f8 <cppLoop+0x310>)
 8006496:	f7fc fc0a 	bl	8002cae <_ZN9LineTrace5getKdEv>
 800649a:	eef0 7a40 	vmov.f32	s15, s0
 800649e:	4b61      	ldr	r3, [pc, #388]	; (8006624 <cppLoop+0x33c>)
 80064a0:	edc3 7a00 	vstr	s15, [r3]
 80064a4:	485e      	ldr	r0, [pc, #376]	; (8006620 <cppLoop+0x338>)
 80064a6:	f00b fe46 	bl	8012136 <__cxa_guard_release>

		if(joy_stick.getValue() == JOY_U){
 80064aa:	485f      	ldr	r0, [pc, #380]	; (8006628 <cppLoop+0x340>)
 80064ac:	f7fb fcba 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 80064b0:	4603      	mov	r3, r0
 80064b2:	2b08      	cmp	r3, #8
 80064b4:	bf0c      	ite	eq
 80064b6:	2301      	moveq	r3, #1
 80064b8:	2300      	movne	r3, #0
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d022      	beq.n	8006506 <cppLoop+0x21e>
			led.LR(-1, 1);
 80064c0:	2201      	movs	r2, #1
 80064c2:	f04f 31ff 	mov.w	r1, #4294967295
 80064c6:	484b      	ldr	r0, [pc, #300]	; (80065f4 <cppLoop+0x30c>)
 80064c8:	f7fb fdcc 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80064cc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80064d0:	f001 f928 	bl	8007724 <HAL_Delay>

			selector++;
 80064d4:	4b55      	ldr	r3, [pc, #340]	; (800662c <cppLoop+0x344>)
 80064d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064da:	b29b      	uxth	r3, r3
 80064dc:	3301      	adds	r3, #1
 80064de:	b29b      	uxth	r3, r3
 80064e0:	b21a      	sxth	r2, r3
 80064e2:	4b52      	ldr	r3, [pc, #328]	; (800662c <cppLoop+0x344>)
 80064e4:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 80064e6:	4b51      	ldr	r3, [pc, #324]	; (800662c <cppLoop+0x344>)
 80064e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064ec:	2b02      	cmp	r3, #2
 80064ee:	dd02      	ble.n	80064f6 <cppLoop+0x20e>
 80064f0:	4b4e      	ldr	r3, [pc, #312]	; (800662c <cppLoop+0x344>)
 80064f2:	2200      	movs	r2, #0
 80064f4:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80064f6:	2200      	movs	r2, #0
 80064f8:	f04f 31ff 	mov.w	r1, #4294967295
 80064fc:	483d      	ldr	r0, [pc, #244]	; (80065f4 <cppLoop+0x30c>)
 80064fe:	f7fb fdb1 	bl	8002064 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 8006502:	f000 bfb9 	b.w	8007478 <cppLoop+0x1190>
		else if(joy_stick.getValue() == JOY_R){
 8006506:	4848      	ldr	r0, [pc, #288]	; (8006628 <cppLoop+0x340>)
 8006508:	f7fb fc8c 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 800650c:	4603      	mov	r3, r0
 800650e:	2b10      	cmp	r3, #16
 8006510:	bf0c      	ite	eq
 8006512:	2301      	moveq	r3, #1
 8006514:	2300      	movne	r3, #0
 8006516:	b2db      	uxtb	r3, r3
 8006518:	2b00      	cmp	r3, #0
 800651a:	f000 8089 	beq.w	8006630 <cppLoop+0x348>
			led.LR(-1, 1);
 800651e:	2201      	movs	r2, #1
 8006520:	f04f 31ff 	mov.w	r1, #4294967295
 8006524:	4833      	ldr	r0, [pc, #204]	; (80065f4 <cppLoop+0x30c>)
 8006526:	f7fb fd9d 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(100);
 800652a:	2064      	movs	r0, #100	; 0x64
 800652c:	f001 f8fa 	bl	8007724 <HAL_Delay>
			if(selector == 0){
 8006530:	4b3e      	ldr	r3, [pc, #248]	; (800662c <cppLoop+0x344>)
 8006532:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d113      	bne.n	8006562 <cppLoop+0x27a>
				adj_kp = adj_kp + 0.00001;
 800653a:	4b36      	ldr	r3, [pc, #216]	; (8006614 <cppLoop+0x32c>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4618      	mov	r0, r3
 8006540:	f7fa f81a 	bl	8000578 <__aeabi_f2d>
 8006544:	a324      	add	r3, pc, #144	; (adr r3, 80065d8 <cppLoop+0x2f0>)
 8006546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654a:	f7f9 feb7 	bl	80002bc <__adddf3>
 800654e:	4603      	mov	r3, r0
 8006550:	460c      	mov	r4, r1
 8006552:	4618      	mov	r0, r3
 8006554:	4621      	mov	r1, r4
 8006556:	f7fa fb5f 	bl	8000c18 <__aeabi_d2f>
 800655a:	4602      	mov	r2, r0
 800655c:	4b2d      	ldr	r3, [pc, #180]	; (8006614 <cppLoop+0x32c>)
 800655e:	601a      	str	r2, [r3, #0]
 8006560:	e02b      	b.n	80065ba <cppLoop+0x2d2>
			else if(selector == 1){
 8006562:	4b32      	ldr	r3, [pc, #200]	; (800662c <cppLoop+0x344>)
 8006564:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006568:	2b01      	cmp	r3, #1
 800656a:	d113      	bne.n	8006594 <cppLoop+0x2ac>
				adj_ki = adj_ki + 0.0001;
 800656c:	4b2b      	ldr	r3, [pc, #172]	; (800661c <cppLoop+0x334>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4618      	mov	r0, r3
 8006572:	f7fa f801 	bl	8000578 <__aeabi_f2d>
 8006576:	a31a      	add	r3, pc, #104	; (adr r3, 80065e0 <cppLoop+0x2f8>)
 8006578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800657c:	f7f9 fe9e 	bl	80002bc <__adddf3>
 8006580:	4603      	mov	r3, r0
 8006582:	460c      	mov	r4, r1
 8006584:	4618      	mov	r0, r3
 8006586:	4621      	mov	r1, r4
 8006588:	f7fa fb46 	bl	8000c18 <__aeabi_d2f>
 800658c:	4602      	mov	r2, r0
 800658e:	4b23      	ldr	r3, [pc, #140]	; (800661c <cppLoop+0x334>)
 8006590:	601a      	str	r2, [r3, #0]
 8006592:	e012      	b.n	80065ba <cppLoop+0x2d2>
				adj_kd = adj_kd + 0.000001;
 8006594:	4b23      	ldr	r3, [pc, #140]	; (8006624 <cppLoop+0x33c>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4618      	mov	r0, r3
 800659a:	f7f9 ffed 	bl	8000578 <__aeabi_f2d>
 800659e:	a312      	add	r3, pc, #72	; (adr r3, 80065e8 <cppLoop+0x300>)
 80065a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a4:	f7f9 fe8a 	bl	80002bc <__adddf3>
 80065a8:	4603      	mov	r3, r0
 80065aa:	460c      	mov	r4, r1
 80065ac:	4618      	mov	r0, r3
 80065ae:	4621      	mov	r1, r4
 80065b0:	f7fa fb32 	bl	8000c18 <__aeabi_d2f>
 80065b4:	4602      	mov	r2, r0
 80065b6:	4b1b      	ldr	r3, [pc, #108]	; (8006624 <cppLoop+0x33c>)
 80065b8:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80065ba:	2152      	movs	r1, #82	; 0x52
 80065bc:	480d      	ldr	r0, [pc, #52]	; (80065f4 <cppLoop+0x30c>)
 80065be:	f7fb fc95 	bl	8001eec <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80065c2:	2200      	movs	r2, #0
 80065c4:	f04f 31ff 	mov.w	r1, #4294967295
 80065c8:	480a      	ldr	r0, [pc, #40]	; (80065f4 <cppLoop+0x30c>)
 80065ca:	f7fb fd4b 	bl	8002064 <_ZN3LED2LREaa>
		break;
 80065ce:	f000 bf53 	b.w	8007478 <cppLoop+0x1190>
 80065d2:	bf00      	nop
 80065d4:	f3af 8000 	nop.w
 80065d8:	88e368f1 	.word	0x88e368f1
 80065dc:	3ee4f8b5 	.word	0x3ee4f8b5
 80065e0:	eb1c432d 	.word	0xeb1c432d
 80065e4:	3f1a36e2 	.word	0x3f1a36e2
 80065e8:	a0b5ed8d 	.word	0xa0b5ed8d
 80065ec:	3eb0c6f7 	.word	0x3eb0c6f7
 80065f0:	200005a8 	.word	0x200005a8
 80065f4:	200005b0 	.word	0x200005b0
 80065f8:	20015e38 	.word	0x20015e38
 80065fc:	447a0000 	.word	0x447a0000
 8006600:	08018444 	.word	0x08018444
 8006604:	42c80000 	.word	0x42c80000
 8006608:	461c4000 	.word	0x461c4000
 800660c:	08018450 	.word	0x08018450
 8006610:	200335b4 	.word	0x200335b4
 8006614:	200335b0 	.word	0x200335b0
 8006618:	200335bc 	.word	0x200335bc
 800661c:	200335b8 	.word	0x200335b8
 8006620:	200335c4 	.word	0x200335c4
 8006624:	200335c0 	.word	0x200335c0
 8006628:	200005a4 	.word	0x200005a4
 800662c:	200335ae 	.word	0x200335ae
		else if(joy_stick.getValue() == JOY_L){
 8006630:	48c1      	ldr	r0, [pc, #772]	; (8006938 <cppLoop+0x650>)
 8006632:	f7fb fbf7 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 8006636:	4603      	mov	r3, r0
 8006638:	2b01      	cmp	r3, #1
 800663a:	bf0c      	ite	eq
 800663c:	2301      	moveq	r3, #1
 800663e:	2300      	movne	r3, #0
 8006640:	b2db      	uxtb	r3, r3
 8006642:	2b00      	cmp	r3, #0
 8006644:	d059      	beq.n	80066fa <cppLoop+0x412>
			led.LR(-1, 1);
 8006646:	2201      	movs	r2, #1
 8006648:	f04f 31ff 	mov.w	r1, #4294967295
 800664c:	48bb      	ldr	r0, [pc, #748]	; (800693c <cppLoop+0x654>)
 800664e:	f7fb fd09 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8006652:	2064      	movs	r0, #100	; 0x64
 8006654:	f001 f866 	bl	8007724 <HAL_Delay>
			if(selector == 0){
 8006658:	4bb9      	ldr	r3, [pc, #740]	; (8006940 <cppLoop+0x658>)
 800665a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d113      	bne.n	800668a <cppLoop+0x3a2>
				adj_kp = adj_kp - 0.00001;
 8006662:	4bb8      	ldr	r3, [pc, #736]	; (8006944 <cppLoop+0x65c>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4618      	mov	r0, r3
 8006668:	f7f9 ff86 	bl	8000578 <__aeabi_f2d>
 800666c:	a3ac      	add	r3, pc, #688	; (adr r3, 8006920 <cppLoop+0x638>)
 800666e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006672:	f7f9 fe21 	bl	80002b8 <__aeabi_dsub>
 8006676:	4603      	mov	r3, r0
 8006678:	460c      	mov	r4, r1
 800667a:	4618      	mov	r0, r3
 800667c:	4621      	mov	r1, r4
 800667e:	f7fa facb 	bl	8000c18 <__aeabi_d2f>
 8006682:	4602      	mov	r2, r0
 8006684:	4baf      	ldr	r3, [pc, #700]	; (8006944 <cppLoop+0x65c>)
 8006686:	601a      	str	r2, [r3, #0]
 8006688:	e02b      	b.n	80066e2 <cppLoop+0x3fa>
			else if(selector == 1){
 800668a:	4bad      	ldr	r3, [pc, #692]	; (8006940 <cppLoop+0x658>)
 800668c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006690:	2b01      	cmp	r3, #1
 8006692:	d113      	bne.n	80066bc <cppLoop+0x3d4>
				adj_ki = adj_ki - 0.0001;
 8006694:	4bac      	ldr	r3, [pc, #688]	; (8006948 <cppLoop+0x660>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4618      	mov	r0, r3
 800669a:	f7f9 ff6d 	bl	8000578 <__aeabi_f2d>
 800669e:	a3a2      	add	r3, pc, #648	; (adr r3, 8006928 <cppLoop+0x640>)
 80066a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a4:	f7f9 fe08 	bl	80002b8 <__aeabi_dsub>
 80066a8:	4603      	mov	r3, r0
 80066aa:	460c      	mov	r4, r1
 80066ac:	4618      	mov	r0, r3
 80066ae:	4621      	mov	r1, r4
 80066b0:	f7fa fab2 	bl	8000c18 <__aeabi_d2f>
 80066b4:	4602      	mov	r2, r0
 80066b6:	4ba4      	ldr	r3, [pc, #656]	; (8006948 <cppLoop+0x660>)
 80066b8:	601a      	str	r2, [r3, #0]
 80066ba:	e012      	b.n	80066e2 <cppLoop+0x3fa>
				adj_kd = adj_kd - 0.000001;
 80066bc:	4ba3      	ldr	r3, [pc, #652]	; (800694c <cppLoop+0x664>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4618      	mov	r0, r3
 80066c2:	f7f9 ff59 	bl	8000578 <__aeabi_f2d>
 80066c6:	a39a      	add	r3, pc, #616	; (adr r3, 8006930 <cppLoop+0x648>)
 80066c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066cc:	f7f9 fdf4 	bl	80002b8 <__aeabi_dsub>
 80066d0:	4603      	mov	r3, r0
 80066d2:	460c      	mov	r4, r1
 80066d4:	4618      	mov	r0, r3
 80066d6:	4621      	mov	r1, r4
 80066d8:	f7fa fa9e 	bl	8000c18 <__aeabi_d2f>
 80066dc:	4602      	mov	r2, r0
 80066de:	4b9b      	ldr	r3, [pc, #620]	; (800694c <cppLoop+0x664>)
 80066e0:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80066e2:	2152      	movs	r1, #82	; 0x52
 80066e4:	4895      	ldr	r0, [pc, #596]	; (800693c <cppLoop+0x654>)
 80066e6:	f7fb fc01 	bl	8001eec <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80066ea:	2200      	movs	r2, #0
 80066ec:	f04f 31ff 	mov.w	r1, #4294967295
 80066f0:	4892      	ldr	r0, [pc, #584]	; (800693c <cppLoop+0x654>)
 80066f2:	f7fb fcb7 	bl	8002064 <_ZN3LED2LREaa>
		break;
 80066f6:	f000 bebf 	b.w	8007478 <cppLoop+0x1190>
		else if(joy_stick.getValue() == JOY_D){
 80066fa:	488f      	ldr	r0, [pc, #572]	; (8006938 <cppLoop+0x650>)
 80066fc:	f7fb fb92 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 8006700:	4603      	mov	r3, r0
 8006702:	2b04      	cmp	r3, #4
 8006704:	bf0c      	ite	eq
 8006706:	2301      	moveq	r3, #1
 8006708:	2300      	movne	r3, #0
 800670a:	b2db      	uxtb	r3, r3
 800670c:	2b00      	cmp	r3, #0
 800670e:	d03e      	beq.n	800678e <cppLoop+0x4a6>
			led.LR(-1, 1);
 8006710:	2201      	movs	r2, #1
 8006712:	f04f 31ff 	mov.w	r1, #4294967295
 8006716:	4889      	ldr	r0, [pc, #548]	; (800693c <cppLoop+0x654>)
 8006718:	f7fb fca4 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(300);
 800671c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006720:	f001 f800 	bl	8007724 <HAL_Delay>
			sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 8006724:	f107 031c 	add.w	r3, r7, #28
 8006728:	2201      	movs	r2, #1
 800672a:	4989      	ldr	r1, [pc, #548]	; (8006950 <cppLoop+0x668>)
 800672c:	4889      	ldr	r0, [pc, #548]	; (8006954 <cppLoop+0x66c>)
 800672e:	f7fa ffc1 	bl	80016b4 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 8006732:	f107 0318 	add.w	r3, r7, #24
 8006736:	2201      	movs	r2, #1
 8006738:	4987      	ldr	r1, [pc, #540]	; (8006958 <cppLoop+0x670>)
 800673a:	4886      	ldr	r0, [pc, #536]	; (8006954 <cppLoop+0x66c>)
 800673c:	f7fa ffba 	bl	80016b4 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8006740:	f107 0314 	add.w	r3, r7, #20
 8006744:	2201      	movs	r2, #1
 8006746:	4985      	ldr	r1, [pc, #532]	; (800695c <cppLoop+0x674>)
 8006748:	4882      	ldr	r0, [pc, #520]	; (8006954 <cppLoop+0x66c>)
 800674a:	f7fa ffb3 	bl	80016b4 <sd_read_array_float>
			line_trace.setGain(temp_kp, temp_ki, temp_kd);
 800674e:	edd7 7a07 	vldr	s15, [r7, #28]
 8006752:	ed97 7a06 	vldr	s14, [r7, #24]
 8006756:	edd7 6a05 	vldr	s13, [r7, #20]
 800675a:	eeb0 1a66 	vmov.f32	s2, s13
 800675e:	eef0 0a47 	vmov.f32	s1, s14
 8006762:	eeb0 0a67 	vmov.f32	s0, s15
 8006766:	487e      	ldr	r0, [pc, #504]	; (8006960 <cppLoop+0x678>)
 8006768:	f7fc fa6a 	bl	8002c40 <_ZN9LineTrace7setGainEfff>
			adj_kp = temp_kp;
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	4a75      	ldr	r2, [pc, #468]	; (8006944 <cppLoop+0x65c>)
 8006770:	6013      	str	r3, [r2, #0]
			adj_ki = temp_kp;
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	4a74      	ldr	r2, [pc, #464]	; (8006948 <cppLoop+0x660>)
 8006776:	6013      	str	r3, [r2, #0]
			adj_kd = temp_kp;
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	4a74      	ldr	r2, [pc, #464]	; (800694c <cppLoop+0x664>)
 800677c:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 800677e:	2200      	movs	r2, #0
 8006780:	f04f 31ff 	mov.w	r1, #4294967295
 8006784:	486d      	ldr	r0, [pc, #436]	; (800693c <cppLoop+0x654>)
 8006786:	f7fb fc6d 	bl	8002064 <_ZN3LED2LREaa>
		break;
 800678a:	f000 be75 	b.w	8007478 <cppLoop+0x1190>
		else if(joy_stick.getValue() == JOY_C){
 800678e:	486a      	ldr	r0, [pc, #424]	; (8006938 <cppLoop+0x650>)
 8006790:	f7fb fb48 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 8006794:	4603      	mov	r3, r0
 8006796:	2b02      	cmp	r3, #2
 8006798:	bf0c      	ite	eq
 800679a:	2301      	moveq	r3, #1
 800679c:	2300      	movne	r3, #0
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	f000 8669 	beq.w	8007478 <cppLoop+0x1190>
			led.LR(-1, 1);
 80067a6:	2201      	movs	r2, #1
 80067a8:	f04f 31ff 	mov.w	r1, #4294967295
 80067ac:	4863      	ldr	r0, [pc, #396]	; (800693c <cppLoop+0x654>)
 80067ae:	f7fb fc59 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80067b2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80067b6:	f000 ffb5 	bl	8007724 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 80067ba:	2300      	movs	r3, #0
 80067bc:	9300      	str	r3, [sp, #0]
 80067be:	4b61      	ldr	r3, [pc, #388]	; (8006944 <cppLoop+0x65c>)
 80067c0:	2201      	movs	r2, #1
 80067c2:	4963      	ldr	r1, [pc, #396]	; (8006950 <cppLoop+0x668>)
 80067c4:	4863      	ldr	r0, [pc, #396]	; (8006954 <cppLoop+0x66c>)
 80067c6:	f7fa ff0f 	bl	80015e8 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 80067ca:	2300      	movs	r3, #0
 80067cc:	9300      	str	r3, [sp, #0]
 80067ce:	4b5e      	ldr	r3, [pc, #376]	; (8006948 <cppLoop+0x660>)
 80067d0:	2201      	movs	r2, #1
 80067d2:	4961      	ldr	r1, [pc, #388]	; (8006958 <cppLoop+0x670>)
 80067d4:	485f      	ldr	r0, [pc, #380]	; (8006954 <cppLoop+0x66c>)
 80067d6:	f7fa ff07 	bl	80015e8 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 80067da:	2300      	movs	r3, #0
 80067dc:	9300      	str	r3, [sp, #0]
 80067de:	4b5b      	ldr	r3, [pc, #364]	; (800694c <cppLoop+0x664>)
 80067e0:	2201      	movs	r2, #1
 80067e2:	495e      	ldr	r1, [pc, #376]	; (800695c <cppLoop+0x674>)
 80067e4:	485b      	ldr	r0, [pc, #364]	; (8006954 <cppLoop+0x66c>)
 80067e6:	f7fa feff 	bl	80015e8 <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 80067ea:	4b56      	ldr	r3, [pc, #344]	; (8006944 <cppLoop+0x65c>)
 80067ec:	edd3 7a00 	vldr	s15, [r3]
 80067f0:	4b55      	ldr	r3, [pc, #340]	; (8006948 <cppLoop+0x660>)
 80067f2:	ed93 7a00 	vldr	s14, [r3]
 80067f6:	4b55      	ldr	r3, [pc, #340]	; (800694c <cppLoop+0x664>)
 80067f8:	edd3 6a00 	vldr	s13, [r3]
 80067fc:	eeb0 1a66 	vmov.f32	s2, s13
 8006800:	eef0 0a47 	vmov.f32	s1, s14
 8006804:	eeb0 0a67 	vmov.f32	s0, s15
 8006808:	4855      	ldr	r0, [pc, #340]	; (8006960 <cppLoop+0x678>)
 800680a:	f7fc fa19 	bl	8002c40 <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 800680e:	2200      	movs	r2, #0
 8006810:	f04f 31ff 	mov.w	r1, #4294967295
 8006814:	4849      	ldr	r0, [pc, #292]	; (800693c <cppLoop+0x654>)
 8006816:	f7fb fc25 	bl	8002064 <_ZN3LED2LREaa>
		break;
 800681a:	f000 be2d 	b.w	8007478 <cppLoop+0x1190>

	case 1:
		led.fullColor('B');
 800681e:	2142      	movs	r1, #66	; 0x42
 8006820:	4846      	ldr	r0, [pc, #280]	; (800693c <cppLoop+0x654>)
 8006822:	f7fb fb63 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 8006826:	f7fa fc3b 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800682a:	2100      	movs	r1, #0
 800682c:	2000      	movs	r0, #0
 800682e:	f7fa fc47 	bl	80010c0 <lcd_locate>
		lcd_printf("velocity");
 8006832:	484c      	ldr	r0, [pc, #304]	; (8006964 <cppLoop+0x67c>)
 8006834:	f7fa fc6e 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006838:	2101      	movs	r1, #1
 800683a:	2000      	movs	r0, #0
 800683c:	f7fa fc40 	bl	80010c0 <lcd_locate>
		lcd_printf("trace");
 8006840:	4849      	ldr	r0, [pc, #292]	; (8006968 <cppLoop+0x680>)
 8006842:	f7fa fc67 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006846:	483c      	ldr	r0, [pc, #240]	; (8006938 <cppLoop+0x650>)
 8006848:	f7fb faec 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 800684c:	4603      	mov	r3, r0
 800684e:	2b02      	cmp	r3, #2
 8006850:	bf0c      	ite	eq
 8006852:	2301      	moveq	r3, #1
 8006854:	2300      	movne	r3, #0
 8006856:	b2db      	uxtb	r3, r3
 8006858:	2b00      	cmp	r3, #0
 800685a:	f000 860f 	beq.w	800747c <cppLoop+0x1194>
			HAL_Delay(500);
 800685e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006862:	f000 ff5f 	bl	8007724 <HAL_Delay>

			line_trace.setTargetVelocity(1.0);
 8006866:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800686a:	483d      	ldr	r0, [pc, #244]	; (8006960 <cppLoop+0x678>)
 800686c:	f7fc fa3d 	bl	8002cea <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 8006870:	f04f 32ff 	mov.w	r2, #4294967295
 8006874:	2101      	movs	r1, #1
 8006876:	4831      	ldr	r0, [pc, #196]	; (800693c <cppLoop+0x654>)
 8006878:	f7fb fbf4 	bl	8002064 <_ZN3LED2LREaa>

			line_trace.running();
 800687c:	4838      	ldr	r0, [pc, #224]	; (8006960 <cppLoop+0x678>)
 800687e:	f7fc faf7 	bl	8002e70 <_ZN9LineTrace7runningEv>
			//HAL_Delay(3000);

			//line_trace.stop();
			led.LR(0, -1);
 8006882:	f04f 32ff 	mov.w	r2, #4294967295
 8006886:	2100      	movs	r1, #0
 8006888:	482c      	ldr	r0, [pc, #176]	; (800693c <cppLoop+0x654>)
 800688a:	f7fb fbeb 	bl	8002064 <_ZN3LED2LREaa>

			//logger.stop();
		}

		break;
 800688e:	f000 bdf5 	b.w	800747c <cppLoop+0x1194>

	case 2:
		led.fullColor('G');
 8006892:	2147      	movs	r1, #71	; 0x47
 8006894:	4829      	ldr	r0, [pc, #164]	; (800693c <cppLoop+0x654>)
 8006896:	f7fb fb29 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 800689a:	f7fa fc01 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800689e:	2100      	movs	r1, #0
 80068a0:	2000      	movs	r0, #0
 80068a2:	f7fa fc0d 	bl	80010c0 <lcd_locate>
		lcd_printf("Msig");
 80068a6:	4831      	ldr	r0, [pc, #196]	; (800696c <cppLoop+0x684>)
 80068a8:	f7fa fc34 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80068ac:	2101      	movs	r1, #1
 80068ae:	2000      	movs	r0, #0
 80068b0:	f7fa fc06 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 80068b4:	482e      	ldr	r0, [pc, #184]	; (8006970 <cppLoop+0x688>)
 80068b6:	f7fa fc2d 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80068ba:	481f      	ldr	r0, [pc, #124]	; (8006938 <cppLoop+0x650>)
 80068bc:	f7fb fab2 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b02      	cmp	r3, #2
 80068c4:	bf0c      	ite	eq
 80068c6:	2301      	moveq	r3, #1
 80068c8:	2300      	movne	r3, #0
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f000 85d7 	beq.w	8007480 <cppLoop+0x1198>
			led.LR(-1, 1);
 80068d2:	2201      	movs	r2, #1
 80068d4:	f04f 31ff 	mov.w	r1, #4294967295
 80068d8:	4818      	ldr	r0, [pc, #96]	; (800693c <cppLoop+0x654>)
 80068da:	f7fb fbc3 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(1500);
 80068de:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80068e2:	f000 ff1f 	bl	8007724 <HAL_Delay>

			sys_ident.setInputRatio(0.3);
 80068e6:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8006974 <cppLoop+0x68c>
 80068ea:	4823      	ldr	r0, [pc, #140]	; (8006978 <cppLoop+0x690>)
 80068ec:	f7fd fb7e 	bl	8003fec <_ZN20SystemIdentification13setInputRatioEf>
			sys_ident.start();
 80068f0:	4821      	ldr	r0, [pc, #132]	; (8006978 <cppLoop+0x690>)
 80068f2:	f7fd fb8b 	bl	800400c <_ZN20SystemIdentification5startEv>
			HAL_Delay(17500);
 80068f6:	f244 405c 	movw	r0, #17500	; 0x445c
 80068fa:	f000 ff13 	bl	8007724 <HAL_Delay>
			sys_ident.stop();
 80068fe:	481e      	ldr	r0, [pc, #120]	; (8006978 <cppLoop+0x690>)
 8006900:	f7fd fb96 	bl	8004030 <_ZN20SystemIdentification4stopEv>
			sys_ident.inOutputSave();
 8006904:	481c      	ldr	r0, [pc, #112]	; (8006978 <cppLoop+0x690>)
 8006906:	f7fd faff 	bl	8003f08 <_ZN20SystemIdentification12inOutputSaveEv>

			led.LR(-1, 0);
 800690a:	2200      	movs	r2, #0
 800690c:	f04f 31ff 	mov.w	r1, #4294967295
 8006910:	480a      	ldr	r0, [pc, #40]	; (800693c <cppLoop+0x654>)
 8006912:	f7fb fba7 	bl	8002064 <_ZN3LED2LREaa>
		}
		break;
 8006916:	f000 bdb3 	b.w	8007480 <cppLoop+0x1198>
 800691a:	bf00      	nop
 800691c:	f3af 8000 	nop.w
 8006920:	88e368f1 	.word	0x88e368f1
 8006924:	3ee4f8b5 	.word	0x3ee4f8b5
 8006928:	eb1c432d 	.word	0xeb1c432d
 800692c:	3f1a36e2 	.word	0x3f1a36e2
 8006930:	a0b5ed8d 	.word	0xa0b5ed8d
 8006934:	3eb0c6f7 	.word	0x3eb0c6f7
 8006938:	200005a4 	.word	0x200005a4
 800693c:	200005b0 	.word	0x200005b0
 8006940:	200335ae 	.word	0x200335ae
 8006944:	200335b0 	.word	0x200335b0
 8006948:	200335b8 	.word	0x200335b8
 800694c:	200335c0 	.word	0x200335c0
 8006950:	08018460 	.word	0x08018460
 8006954:	08018468 	.word	0x08018468
 8006958:	08018470 	.word	0x08018470
 800695c:	08018478 	.word	0x08018478
 8006960:	20015e38 	.word	0x20015e38
 8006964:	08018480 	.word	0x08018480
 8006968:	0801848c 	.word	0x0801848c
 800696c:	08018494 	.word	0x08018494
 8006970:	0801849c 	.word	0x0801849c
 8006974:	3e99999a 	.word	0x3e99999a
 8006978:	2001bc74 	.word	0x2001bc74

	case 3:
		led.fullColor('M');
 800697c:	214d      	movs	r1, #77	; 0x4d
 800697e:	48af      	ldr	r0, [pc, #700]	; (8006c3c <cppLoop+0x954>)
 8006980:	f7fb fab4 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 8006984:	f7fa fb8c 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006988:	2100      	movs	r1, #0
 800698a:	2000      	movs	r0, #0
 800698c:	f7fa fb98 	bl	80010c0 <lcd_locate>
		lcd_printf("Line");
 8006990:	48ab      	ldr	r0, [pc, #684]	; (8006c40 <cppLoop+0x958>)
 8006992:	f7fa fbbf 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006996:	2101      	movs	r1, #1
 8006998:	2000      	movs	r0, #0
 800699a:	f7fa fb91 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 800699e:	48a9      	ldr	r0, [pc, #676]	; (8006c44 <cppLoop+0x95c>)
 80069a0:	f7fa fbb8 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80069a4:	48a8      	ldr	r0, [pc, #672]	; (8006c48 <cppLoop+0x960>)
 80069a6:	f7fb fa3d 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 80069aa:	4603      	mov	r3, r0
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	bf0c      	ite	eq
 80069b0:	2301      	moveq	r3, #1
 80069b2:	2300      	movne	r3, #0
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f000 8564 	beq.w	8007484 <cppLoop+0x119c>
			led.LR(-1, 1);
 80069bc:	2201      	movs	r2, #1
 80069be:	f04f 31ff 	mov.w	r1, #4294967295
 80069c2:	489e      	ldr	r0, [pc, #632]	; (8006c3c <cppLoop+0x954>)
 80069c4:	f7fb fb4e 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(500);
 80069c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80069cc:	f000 feaa 	bl	8007724 <HAL_Delay>

			logger.start();
 80069d0:	489e      	ldr	r0, [pc, #632]	; (8006c4c <cppLoop+0x964>)
 80069d2:	f7fc fd09 	bl	80033e8 <_ZN6Logger5startEv>
			line_trace.setNormalRatio(0.1);
 80069d6:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 8006c50 <cppLoop+0x968>
 80069da:	489e      	ldr	r0, [pc, #632]	; (8006c54 <cppLoop+0x96c>)
 80069dc:	f7fc f976 	bl	8002ccc <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 80069e0:	489c      	ldr	r0, [pc, #624]	; (8006c54 <cppLoop+0x96c>)
 80069e2:	f7fc f9f7 	bl	8002dd4 <_ZN9LineTrace5startEv>

			HAL_Delay(5000);
 80069e6:	f241 3088 	movw	r0, #5000	; 0x1388
 80069ea:	f000 fe9b 	bl	8007724 <HAL_Delay>

			logger.stop();
 80069ee:	4897      	ldr	r0, [pc, #604]	; (8006c4c <cppLoop+0x964>)
 80069f0:	f7fc fd0b 	bl	800340a <_ZN6Logger4stopEv>
			line_trace.setNormalRatio(0.1);
 80069f4:	ed9f 0a96 	vldr	s0, [pc, #600]	; 8006c50 <cppLoop+0x968>
 80069f8:	4896      	ldr	r0, [pc, #600]	; (8006c54 <cppLoop+0x96c>)
 80069fa:	f7fc f967 	bl	8002ccc <_ZN9LineTrace14setNormalRatioEf>
			line_trace.stop();
 80069fe:	4895      	ldr	r0, [pc, #596]	; (8006c54 <cppLoop+0x96c>)
 8006a00:	f7fc fa02 	bl	8002e08 <_ZN9LineTrace4stopEv>

			led.LR(1, -1);
 8006a04:	f04f 32ff 	mov.w	r2, #4294967295
 8006a08:	2101      	movs	r1, #1
 8006a0a:	488c      	ldr	r0, [pc, #560]	; (8006c3c <cppLoop+0x954>)
 8006a0c:	f7fb fb2a 	bl	8002064 <_ZN3LED2LREaa>
			//logger.saveLogs("line_sensors", "sensor7.csv");
			led.LR(0, -1);
 8006a10:	f04f 32ff 	mov.w	r2, #4294967295
 8006a14:	2100      	movs	r1, #0
 8006a16:	4889      	ldr	r0, [pc, #548]	; (8006c3c <cppLoop+0x954>)
 8006a18:	f7fb fb24 	bl	8002064 <_ZN3LED2LREaa>

			led.LR(-1, 0);
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f04f 31ff 	mov.w	r1, #4294967295
 8006a22:	4886      	ldr	r0, [pc, #536]	; (8006c3c <cppLoop+0x954>)
 8006a24:	f7fb fb1e 	bl	8002064 <_ZN3LED2LREaa>
		}

		break;
 8006a28:	f000 bd2c 	b.w	8007484 <cppLoop+0x119c>

	case 4:
		led.fullColor('Y');
 8006a2c:	2159      	movs	r1, #89	; 0x59
 8006a2e:	4883      	ldr	r0, [pc, #524]	; (8006c3c <cppLoop+0x954>)
 8006a30:	f7fb fa5c 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 8006a34:	f7fa fb34 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006a38:	2100      	movs	r1, #0
 8006a3a:	2000      	movs	r0, #0
 8006a3c:	f7fa fb40 	bl	80010c0 <lcd_locate>
		lcd_printf("Steering");
 8006a40:	4885      	ldr	r0, [pc, #532]	; (8006c58 <cppLoop+0x970>)
 8006a42:	f7fa fb67 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006a46:	2101      	movs	r1, #1
 8006a48:	2000      	movs	r0, #0
 8006a4a:	f7fa fb39 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 8006a4e:	487d      	ldr	r0, [pc, #500]	; (8006c44 <cppLoop+0x95c>)
 8006a50:	f7fa fb60 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006a54:	487c      	ldr	r0, [pc, #496]	; (8006c48 <cppLoop+0x960>)
 8006a56:	f7fb f9e5 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b02      	cmp	r3, #2
 8006a5e:	bf0c      	ite	eq
 8006a60:	2301      	moveq	r3, #1
 8006a62:	2300      	movne	r3, #0
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	f000 850e 	beq.w	8007488 <cppLoop+0x11a0>
			led.LR(-1, 1);
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	f04f 31ff 	mov.w	r1, #4294967295
 8006a72:	4872      	ldr	r0, [pc, #456]	; (8006c3c <cppLoop+0x954>)
 8006a74:	f7fb faf6 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8006a78:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006a7c:	f000 fe52 	bl	8007724 <HAL_Delay>

			line_trace.setTargetVelocity(0.1);
 8006a80:	ed9f 0a73 	vldr	s0, [pc, #460]	; 8006c50 <cppLoop+0x968>
 8006a84:	4873      	ldr	r0, [pc, #460]	; (8006c54 <cppLoop+0x96c>)
 8006a86:	f7fc f930 	bl	8002cea <_ZN9LineTrace17setTargetVelocityEf>
			velocity_ctrl.start();
 8006a8a:	4874      	ldr	r0, [pc, #464]	; (8006c5c <cppLoop+0x974>)
 8006a8c:	f7fd fc8d 	bl	80043aa <_ZN12VelocityCtrl5startEv>
			line_trace.start();
 8006a90:	4870      	ldr	r0, [pc, #448]	; (8006c54 <cppLoop+0x96c>)
 8006a92:	f7fc f99f 	bl	8002dd4 <_ZN9LineTrace5startEv>

			HAL_Delay(10000);
 8006a96:	f242 7010 	movw	r0, #10000	; 0x2710
 8006a9a:	f000 fe43 	bl	8007724 <HAL_Delay>

			line_trace.stop();
 8006a9e:	486d      	ldr	r0, [pc, #436]	; (8006c54 <cppLoop+0x96c>)
 8006aa0:	f7fc f9b2 	bl	8002e08 <_ZN9LineTrace4stopEv>
			velocity_ctrl.stop();
 8006aa4:	486d      	ldr	r0, [pc, #436]	; (8006c5c <cppLoop+0x974>)
 8006aa6:	f7fd fc93 	bl	80043d0 <_ZN12VelocityCtrl4stopEv>


			led.LR(-1, 0);
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f04f 31ff 	mov.w	r1, #4294967295
 8006ab0:	4862      	ldr	r0, [pc, #392]	; (8006c3c <cppLoop+0x954>)
 8006ab2:	f7fb fad7 	bl	8002064 <_ZN3LED2LREaa>
		}
		break;
 8006ab6:	f000 bce7 	b.w	8007488 <cppLoop+0x11a0>

	case 5:
		led.fullColor('C');
 8006aba:	2143      	movs	r1, #67	; 0x43
 8006abc:	485f      	ldr	r0, [pc, #380]	; (8006c3c <cppLoop+0x954>)
 8006abe:	f7fb fa15 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 8006ac2:	f7fa faed 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006ac6:	2100      	movs	r1, #0
 8006ac8:	2000      	movs	r0, #0
 8006aca:	f7fa faf9 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 8006ace:	4864      	ldr	r0, [pc, #400]	; (8006c60 <cppLoop+0x978>)
 8006ad0:	f7fa fb20 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006ad4:	2101      	movs	r1, #1
 8006ad6:	2000      	movs	r0, #0
 8006ad8:	f7fa faf2 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 8006adc:	4861      	ldr	r0, [pc, #388]	; (8006c64 <cppLoop+0x97c>)
 8006ade:	f7fa fb19 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006ae2:	4859      	ldr	r0, [pc, #356]	; (8006c48 <cppLoop+0x960>)
 8006ae4:	f7fb f99e 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	bf0c      	ite	eq
 8006aee:	2301      	moveq	r3, #1
 8006af0:	2300      	movne	r3, #0
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	f000 84c9 	beq.w	800748c <cppLoop+0x11a4>
			led.LR(-1, 1);
 8006afa:	2201      	movs	r2, #1
 8006afc:	f04f 31ff 	mov.w	r1, #4294967295
 8006b00:	484e      	ldr	r0, [pc, #312]	; (8006c3c <cppLoop+0x954>)
 8006b02:	f7fb faaf 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8006b06:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006b0a:	f000 fe0b 	bl	8007724 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 8006b0e:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8006c68 <cppLoop+0x980>
 8006b12:	4850      	ldr	r0, [pc, #320]	; (8006c54 <cppLoop+0x96c>)
 8006b14:	f7fc f8da 	bl	8002ccc <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8006b18:	484e      	ldr	r0, [pc, #312]	; (8006c54 <cppLoop+0x96c>)
 8006b1a:	f7fc f95b 	bl	8002dd4 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 8006b1e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006b22:	f000 fdff 	bl	8007724 <HAL_Delay>

			led.fullColor('R');
 8006b26:	2152      	movs	r1, #82	; 0x52
 8006b28:	4844      	ldr	r0, [pc, #272]	; (8006c3c <cppLoop+0x954>)
 8006b2a:	f7fb f9df 	bl	8001eec <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 8006b2e:	484f      	ldr	r0, [pc, #316]	; (8006c6c <cppLoop+0x984>)
 8006b30:	f7fa fcb2 	bl	8001498 <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 8006b34:	484d      	ldr	r0, [pc, #308]	; (8006c6c <cppLoop+0x984>)
 8006b36:	f7fa fc7f 	bl	8001438 <_ZN7Encoder13clearDistanceEv>

			HAL_Delay(10000);
 8006b3a:	f242 7010 	movw	r0, #10000	; 0x2710
 8006b3e:	f000 fdf1 	bl	8007724 <HAL_Delay>

			line_trace.stop();
 8006b42:	4844      	ldr	r0, [pc, #272]	; (8006c54 <cppLoop+0x96c>)
 8006b44:	f7fc f960 	bl	8002e08 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 8006b48:	4949      	ldr	r1, [pc, #292]	; (8006c70 <cppLoop+0x988>)
 8006b4a:	484a      	ldr	r0, [pc, #296]	; (8006c74 <cppLoop+0x98c>)
 8006b4c:	f7fa fcd7 	bl	80014fe <user_fopen>
			float d = encoder.getDistance();
 8006b50:	4846      	ldr	r0, [pc, #280]	; (8006c6c <cppLoop+0x984>)
 8006b52:	f7fa fc53 	bl	80013fc <_ZN7Encoder11getDistanceEv>
 8006b56:	eef0 7a40 	vmov.f32	s15, s0
 8006b5a:	edc7 7a04 	vstr	s15, [r7, #16]
			sd_write_float(1, &d, ADD_WRITE);
 8006b5e:	f107 0310 	add.w	r3, r7, #16
 8006b62:	2201      	movs	r2, #1
 8006b64:	4619      	mov	r1, r3
 8006b66:	2001      	movs	r0, #1
 8006b68:	f7fa fcec 	bl	8001544 <sd_write_float>
			user_fclose();
 8006b6c:	f7fa fcda 	bl	8001524 <user_fclose>

			led.LR(-1, 0);
 8006b70:	2200      	movs	r2, #0
 8006b72:	f04f 31ff 	mov.w	r1, #4294967295
 8006b76:	4831      	ldr	r0, [pc, #196]	; (8006c3c <cppLoop+0x954>)
 8006b78:	f7fb fa74 	bl	8002064 <_ZN3LED2LREaa>
		}

		break;
 8006b7c:	f000 bc86 	b.w	800748c <cppLoop+0x11a4>

	case 6:
		led.fullColor('R');
 8006b80:	2152      	movs	r1, #82	; 0x52
 8006b82:	482e      	ldr	r0, [pc, #184]	; (8006c3c <cppLoop+0x954>)
 8006b84:	f7fb f9b2 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 8006b88:	f7fa fa8a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	2000      	movs	r0, #0
 8006b90:	f7fa fa96 	bl	80010c0 <lcd_locate>
		lcd_printf("Position");
 8006b94:	4838      	ldr	r0, [pc, #224]	; (8006c78 <cppLoop+0x990>)
 8006b96:	f7fa fabd 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006b9a:	2101      	movs	r1, #1
 8006b9c:	2000      	movs	r0, #0
 8006b9e:	f7fa fa8f 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 8006ba2:	4836      	ldr	r0, [pc, #216]	; (8006c7c <cppLoop+0x994>)
 8006ba4:	f7fa fab6 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006ba8:	4827      	ldr	r0, [pc, #156]	; (8006c48 <cppLoop+0x960>)
 8006baa:	f7fb f93b 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	bf0c      	ite	eq
 8006bb4:	2301      	moveq	r3, #1
 8006bb6:	2300      	movne	r3, #0
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	f000 8468 	beq.w	8007490 <cppLoop+0x11a8>
			HAL_Delay(500);
 8006bc0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006bc4:	f000 fdae 	bl	8007724 <HAL_Delay>
			led.LR(-1, 1);
 8006bc8:	2201      	movs	r2, #1
 8006bca:	f04f 31ff 	mov.w	r1, #4294967295
 8006bce:	481b      	ldr	r0, [pc, #108]	; (8006c3c <cppLoop+0x954>)
 8006bd0:	f7fb fa48 	bl	8002064 <_ZN3LED2LREaa>

			line_trace.setNormalRatio(0.07);
 8006bd4:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8006c80 <cppLoop+0x998>
 8006bd8:	481e      	ldr	r0, [pc, #120]	; (8006c54 <cppLoop+0x96c>)
 8006bda:	f7fc f877 	bl	8002ccc <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8006bde:	481d      	ldr	r0, [pc, #116]	; (8006c54 <cppLoop+0x96c>)
 8006be0:	f7fc f8f8 	bl	8002dd4 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 8006be4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006be8:	f000 fd9c 	bl	8007724 <HAL_Delay>

			led.fullColor('R');
 8006bec:	2152      	movs	r1, #82	; 0x52
 8006bee:	4813      	ldr	r0, [pc, #76]	; (8006c3c <cppLoop+0x954>)
 8006bf0:	f7fb f97c 	bl	8001eec <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 8006bf4:	481d      	ldr	r0, [pc, #116]	; (8006c6c <cppLoop+0x984>)
 8006bf6:	f7fa fc4f 	bl	8001498 <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 8006bfa:	481c      	ldr	r0, [pc, #112]	; (8006c6c <cppLoop+0x984>)
 8006bfc:	f7fa fc1c 	bl	8001438 <_ZN7Encoder13clearDistanceEv>
			odometry.clearPotition();
 8006c00:	4820      	ldr	r0, [pc, #128]	; (8006c84 <cppLoop+0x99c>)
 8006c02:	f7fc fe5d 	bl	80038c0 <_ZN8Odometry13clearPotitionEv>
			logger.start();
 8006c06:	4811      	ldr	r0, [pc, #68]	; (8006c4c <cppLoop+0x964>)
 8006c08:	f7fc fbee 	bl	80033e8 <_ZN6Logger5startEv>

			HAL_Delay(3000);
 8006c0c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8006c10:	f000 fd88 	bl	8007724 <HAL_Delay>

			line_trace.stop();
 8006c14:	480f      	ldr	r0, [pc, #60]	; (8006c54 <cppLoop+0x96c>)
 8006c16:	f7fc f8f7 	bl	8002e08 <_ZN9LineTrace4stopEv>
			logger.stop();
 8006c1a:	480c      	ldr	r0, [pc, #48]	; (8006c4c <cppLoop+0x964>)
 8006c1c:	f7fc fbf5 	bl	800340a <_ZN6Logger4stopEv>

			logger.saveDistanceAndTheta("Pos", "dis_s2.txt", "th_s2.txt");
 8006c20:	4b19      	ldr	r3, [pc, #100]	; (8006c88 <cppLoop+0x9a0>)
 8006c22:	4a1a      	ldr	r2, [pc, #104]	; (8006c8c <cppLoop+0x9a4>)
 8006c24:	491a      	ldr	r1, [pc, #104]	; (8006c90 <cppLoop+0x9a8>)
 8006c26:	4809      	ldr	r0, [pc, #36]	; (8006c4c <cppLoop+0x964>)
 8006c28:	f7fc fb3f 	bl	80032aa <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>

			led.LR(-1, 0);
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f04f 31ff 	mov.w	r1, #4294967295
 8006c32:	4802      	ldr	r0, [pc, #8]	; (8006c3c <cppLoop+0x954>)
 8006c34:	f7fb fa16 	bl	8002064 <_ZN3LED2LREaa>
		}

		break;
 8006c38:	f000 bc2a 	b.w	8007490 <cppLoop+0x11a8>
 8006c3c:	200005b0 	.word	0x200005b0
 8006c40:	080184a4 	.word	0x080184a4
 8006c44:	080184ac 	.word	0x080184ac
 8006c48:	200005a4 	.word	0x200005a4
 8006c4c:	200005d4 	.word	0x200005d4
 8006c50:	3dcccccd 	.word	0x3dcccccd
 8006c54:	20015e38 	.word	0x20015e38
 8006c58:	080184b4 	.word	0x080184b4
 8006c5c:	20015db8 	.word	0x20015db8
 8006c60:	080184c0 	.word	0x080184c0
 8006c64:	080184c8 	.word	0x080184c8
 8006c68:	00000000 	.word	0x00000000
 8006c6c:	20015d9c 	.word	0x20015d9c
 8006c70:	080184d4 	.word	0x080184d4
 8006c74:	080184dc 	.word	0x080184dc
 8006c78:	080184e8 	.word	0x080184e8
 8006c7c:	0801849c 	.word	0x0801849c
 8006c80:	3d8f5c29 	.word	0x3d8f5c29
 8006c84:	20015df8 	.word	0x20015df8
 8006c88:	080184f4 	.word	0x080184f4
 8006c8c:	08018500 	.word	0x08018500
 8006c90:	0801850c 	.word	0x0801850c

	case 7:
		led.fullColor('G');
 8006c94:	2147      	movs	r1, #71	; 0x47
 8006c96:	48b4      	ldr	r0, [pc, #720]	; (8006f68 <cppLoop+0xc80>)
 8006c98:	f7fb f928 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 8006c9c:	f7fa fa00 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006ca0:	2100      	movs	r1, #0
 8006ca2:	2000      	movs	r0, #0
 8006ca4:	f7fa fa0c 	bl	80010c0 <lcd_locate>
		lcd_printf("Velocity");
 8006ca8:	48b0      	ldr	r0, [pc, #704]	; (8006f6c <cppLoop+0xc84>)
 8006caa:	f7fa fa33 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006cae:	2101      	movs	r1, #1
 8006cb0:	2000      	movs	r0, #0
 8006cb2:	f7fa fa05 	bl	80010c0 <lcd_locate>
		lcd_printf("Test");
 8006cb6:	48ae      	ldr	r0, [pc, #696]	; (8006f70 <cppLoop+0xc88>)
 8006cb8:	f7fa fa2c 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006cbc:	48ad      	ldr	r0, [pc, #692]	; (8006f74 <cppLoop+0xc8c>)
 8006cbe:	f7fb f8b1 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b02      	cmp	r3, #2
 8006cc6:	bf0c      	ite	eq
 8006cc8:	2301      	moveq	r3, #1
 8006cca:	2300      	movne	r3, #0
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f000 83e0 	beq.w	8007494 <cppLoop+0x11ac>
			led.LR(-1, 1);
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	f04f 31ff 	mov.w	r1, #4294967295
 8006cda:	48a3      	ldr	r0, [pc, #652]	; (8006f68 <cppLoop+0xc80>)
 8006cdc:	f7fb f9c2 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8006ce0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006ce4:	f000 fd1e 	bl	8007724 <HAL_Delay>

			led.fullColor('R');
 8006ce8:	2152      	movs	r1, #82	; 0x52
 8006cea:	489f      	ldr	r0, [pc, #636]	; (8006f68 <cppLoop+0xc80>)
 8006cec:	f7fb f8fe 	bl	8001eec <_ZN3LED9fullColorEc>
			velocity_ctrl.setVelocity(0, 1.57);
 8006cf0:	eddf 0aa1 	vldr	s1, [pc, #644]	; 8006f78 <cppLoop+0xc90>
 8006cf4:	ed9f 0aa1 	vldr	s0, [pc, #644]	; 8006f7c <cppLoop+0xc94>
 8006cf8:	48a1      	ldr	r0, [pc, #644]	; (8006f80 <cppLoop+0xc98>)
 8006cfa:	f7fd fae9 	bl	80042d0 <_ZN12VelocityCtrl11setVelocityEff>
			velocity_ctrl.start();
 8006cfe:	48a0      	ldr	r0, [pc, #640]	; (8006f80 <cppLoop+0xc98>)
 8006d00:	f7fd fb53 	bl	80043aa <_ZN12VelocityCtrl5startEv>

			HAL_Delay(1000);
 8006d04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006d08:	f000 fd0c 	bl	8007724 <HAL_Delay>
			velocity_ctrl.setVelocity(0, 0);
 8006d0c:	eddf 0a9b 	vldr	s1, [pc, #620]	; 8006f7c <cppLoop+0xc94>
 8006d10:	ed9f 0a9a 	vldr	s0, [pc, #616]	; 8006f7c <cppLoop+0xc94>
 8006d14:	489a      	ldr	r0, [pc, #616]	; (8006f80 <cppLoop+0xc98>)
 8006d16:	f7fd fadb 	bl	80042d0 <_ZN12VelocityCtrl11setVelocityEff>
			HAL_Delay(100);
 8006d1a:	2064      	movs	r0, #100	; 0x64
 8006d1c:	f000 fd02 	bl	8007724 <HAL_Delay>
			velocity_ctrl.stop();
 8006d20:	4897      	ldr	r0, [pc, #604]	; (8006f80 <cppLoop+0xc98>)
 8006d22:	f7fd fb55 	bl	80043d0 <_ZN12VelocityCtrl4stopEv>

			led.LR(-1, 0);
 8006d26:	2200      	movs	r2, #0
 8006d28:	f04f 31ff 	mov.w	r1, #4294967295
 8006d2c:	488e      	ldr	r0, [pc, #568]	; (8006f68 <cppLoop+0xc80>)
 8006d2e:	f7fb f999 	bl	8002064 <_ZN3LED2LREaa>
		}
		break;
 8006d32:	e3af      	b.n	8007494 <cppLoop+0x11ac>

	case 8:
		led.fullColor('B');
 8006d34:	2142      	movs	r1, #66	; 0x42
 8006d36:	488c      	ldr	r0, [pc, #560]	; (8006f68 <cppLoop+0xc80>)
 8006d38:	f7fb f8d8 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 8006d3c:	f7fa f9b0 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006d40:	2100      	movs	r1, #0
 8006d42:	2000      	movs	r0, #0
 8006d44:	f7fa f9bc 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", path_following.getKxVal()*1000);
 8006d48:	488e      	ldr	r0, [pc, #568]	; (8006f84 <cppLoop+0xc9c>)
 8006d4a:	f7fc feaf 	bl	8003aac <_ZN13PathFollowing8getKxValEv>
 8006d4e:	ec51 0b10 	vmov	r0, r1, d0
 8006d52:	f04f 0200 	mov.w	r2, #0
 8006d56:	4b8c      	ldr	r3, [pc, #560]	; (8006f88 <cppLoop+0xca0>)
 8006d58:	f7f9 fc66 	bl	8000628 <__aeabi_dmul>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	460c      	mov	r4, r1
 8006d60:	461a      	mov	r2, r3
 8006d62:	4623      	mov	r3, r4
 8006d64:	4889      	ldr	r0, [pc, #548]	; (8006f8c <cppLoop+0xca4>)
 8006d66:	f7fa f9d5 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006d6a:	2101      	movs	r1, #1
 8006d6c:	2000      	movs	r0, #0
 8006d6e:	f7fa f9a7 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", path_following.getKyVal()*1000, path_following.getKtVal()*1000);
 8006d72:	4884      	ldr	r0, [pc, #528]	; (8006f84 <cppLoop+0xc9c>)
 8006d74:	f7fc feae 	bl	8003ad4 <_ZN13PathFollowing8getKyValEv>
 8006d78:	ec51 0b10 	vmov	r0, r1, d0
 8006d7c:	f04f 0200 	mov.w	r2, #0
 8006d80:	4b81      	ldr	r3, [pc, #516]	; (8006f88 <cppLoop+0xca0>)
 8006d82:	f7f9 fc51 	bl	8000628 <__aeabi_dmul>
 8006d86:	4603      	mov	r3, r0
 8006d88:	460c      	mov	r4, r1
 8006d8a:	461d      	mov	r5, r3
 8006d8c:	4626      	mov	r6, r4
 8006d8e:	487d      	ldr	r0, [pc, #500]	; (8006f84 <cppLoop+0xc9c>)
 8006d90:	f7fc feb4 	bl	8003afc <_ZN13PathFollowing8getKtValEv>
 8006d94:	ec51 0b10 	vmov	r0, r1, d0
 8006d98:	f04f 0200 	mov.w	r2, #0
 8006d9c:	4b7a      	ldr	r3, [pc, #488]	; (8006f88 <cppLoop+0xca0>)
 8006d9e:	f7f9 fc43 	bl	8000628 <__aeabi_dmul>
 8006da2:	4603      	mov	r3, r0
 8006da4:	460c      	mov	r4, r1
 8006da6:	e9cd 3400 	strd	r3, r4, [sp]
 8006daa:	462a      	mov	r2, r5
 8006dac:	4633      	mov	r3, r6
 8006dae:	4878      	ldr	r0, [pc, #480]	; (8006f90 <cppLoop+0xca8>)
 8006db0:	f7fa f9b0 	bl	8001114 <lcd_printf>

		static float adj_kx = path_following.getKxVal();
 8006db4:	4b77      	ldr	r3, [pc, #476]	; (8006f94 <cppLoop+0xcac>)
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	f3bf 8f5b 	dmb	ish
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	f003 0301 	and.w	r3, r3, #1
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	bf0c      	ite	eq
 8006dc6:	2301      	moveq	r3, #1
 8006dc8:	2300      	movne	r3, #0
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d019      	beq.n	8006e04 <cppLoop+0xb1c>
 8006dd0:	4870      	ldr	r0, [pc, #448]	; (8006f94 <cppLoop+0xcac>)
 8006dd2:	f00b f9a4 	bl	801211e <__cxa_guard_acquire>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	bf14      	ite	ne
 8006ddc:	2301      	movne	r3, #1
 8006dde:	2300      	moveq	r3, #0
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d00e      	beq.n	8006e04 <cppLoop+0xb1c>
 8006de6:	4867      	ldr	r0, [pc, #412]	; (8006f84 <cppLoop+0xc9c>)
 8006de8:	f7fc fe60 	bl	8003aac <_ZN13PathFollowing8getKxValEv>
 8006dec:	ec54 3b10 	vmov	r3, r4, d0
 8006df0:	4618      	mov	r0, r3
 8006df2:	4621      	mov	r1, r4
 8006df4:	f7f9 ff10 	bl	8000c18 <__aeabi_d2f>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	4b67      	ldr	r3, [pc, #412]	; (8006f98 <cppLoop+0xcb0>)
 8006dfc:	601a      	str	r2, [r3, #0]
 8006dfe:	4865      	ldr	r0, [pc, #404]	; (8006f94 <cppLoop+0xcac>)
 8006e00:	f00b f999 	bl	8012136 <__cxa_guard_release>
		static float adj_ky = path_following.getKyVal();
 8006e04:	4b65      	ldr	r3, [pc, #404]	; (8006f9c <cppLoop+0xcb4>)
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	f3bf 8f5b 	dmb	ish
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	f003 0301 	and.w	r3, r3, #1
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	bf0c      	ite	eq
 8006e16:	2301      	moveq	r3, #1
 8006e18:	2300      	movne	r3, #0
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d019      	beq.n	8006e54 <cppLoop+0xb6c>
 8006e20:	485e      	ldr	r0, [pc, #376]	; (8006f9c <cppLoop+0xcb4>)
 8006e22:	f00b f97c 	bl	801211e <__cxa_guard_acquire>
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	bf14      	ite	ne
 8006e2c:	2301      	movne	r3, #1
 8006e2e:	2300      	moveq	r3, #0
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d00e      	beq.n	8006e54 <cppLoop+0xb6c>
 8006e36:	4853      	ldr	r0, [pc, #332]	; (8006f84 <cppLoop+0xc9c>)
 8006e38:	f7fc fe4c 	bl	8003ad4 <_ZN13PathFollowing8getKyValEv>
 8006e3c:	ec54 3b10 	vmov	r3, r4, d0
 8006e40:	4618      	mov	r0, r3
 8006e42:	4621      	mov	r1, r4
 8006e44:	f7f9 fee8 	bl	8000c18 <__aeabi_d2f>
 8006e48:	4602      	mov	r2, r0
 8006e4a:	4b55      	ldr	r3, [pc, #340]	; (8006fa0 <cppLoop+0xcb8>)
 8006e4c:	601a      	str	r2, [r3, #0]
 8006e4e:	4853      	ldr	r0, [pc, #332]	; (8006f9c <cppLoop+0xcb4>)
 8006e50:	f00b f971 	bl	8012136 <__cxa_guard_release>
		static float adj_kt = path_following.getKtVal();
 8006e54:	4b53      	ldr	r3, [pc, #332]	; (8006fa4 <cppLoop+0xcbc>)
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	f3bf 8f5b 	dmb	ish
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	f003 0301 	and.w	r3, r3, #1
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	bf0c      	ite	eq
 8006e66:	2301      	moveq	r3, #1
 8006e68:	2300      	movne	r3, #0
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d019      	beq.n	8006ea4 <cppLoop+0xbbc>
 8006e70:	484c      	ldr	r0, [pc, #304]	; (8006fa4 <cppLoop+0xcbc>)
 8006e72:	f00b f954 	bl	801211e <__cxa_guard_acquire>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	bf14      	ite	ne
 8006e7c:	2301      	movne	r3, #1
 8006e7e:	2300      	moveq	r3, #0
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d00e      	beq.n	8006ea4 <cppLoop+0xbbc>
 8006e86:	483f      	ldr	r0, [pc, #252]	; (8006f84 <cppLoop+0xc9c>)
 8006e88:	f7fc fe38 	bl	8003afc <_ZN13PathFollowing8getKtValEv>
 8006e8c:	ec54 3b10 	vmov	r3, r4, d0
 8006e90:	4618      	mov	r0, r3
 8006e92:	4621      	mov	r1, r4
 8006e94:	f7f9 fec0 	bl	8000c18 <__aeabi_d2f>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	4b43      	ldr	r3, [pc, #268]	; (8006fa8 <cppLoop+0xcc0>)
 8006e9c:	601a      	str	r2, [r3, #0]
 8006e9e:	4841      	ldr	r0, [pc, #260]	; (8006fa4 <cppLoop+0xcbc>)
 8006ea0:	f00b f949 	bl	8012136 <__cxa_guard_release>

		if(joy_stick.getValue() == JOY_U){
 8006ea4:	4833      	ldr	r0, [pc, #204]	; (8006f74 <cppLoop+0xc8c>)
 8006ea6:	f7fa ffbd 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	2b08      	cmp	r3, #8
 8006eae:	bf0c      	ite	eq
 8006eb0:	2301      	moveq	r3, #1
 8006eb2:	2300      	movne	r3, #0
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d021      	beq.n	8006efe <cppLoop+0xc16>
			led.LR(-1, 1);
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8006ec0:	4829      	ldr	r0, [pc, #164]	; (8006f68 <cppLoop+0xc80>)
 8006ec2:	f7fb f8cf 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8006ec6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006eca:	f000 fc2b 	bl	8007724 <HAL_Delay>

			selector++;
 8006ece:	4b37      	ldr	r3, [pc, #220]	; (8006fac <cppLoop+0xcc4>)
 8006ed0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	b21a      	sxth	r2, r3
 8006edc:	4b33      	ldr	r3, [pc, #204]	; (8006fac <cppLoop+0xcc4>)
 8006ede:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8006ee0:	4b32      	ldr	r3, [pc, #200]	; (8006fac <cppLoop+0xcc4>)
 8006ee2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	dd02      	ble.n	8006ef0 <cppLoop+0xc08>
 8006eea:	4b30      	ldr	r3, [pc, #192]	; (8006fac <cppLoop+0xcc4>)
 8006eec:	2200      	movs	r2, #0
 8006eee:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f04f 31ff 	mov.w	r1, #4294967295
 8006ef6:	481c      	ldr	r0, [pc, #112]	; (8006f68 <cppLoop+0xc80>)
 8006ef8:	f7fb f8b4 	bl	8002064 <_ZN3LED2LREaa>

			led.LR(-1, 0);
		}


		break;
 8006efc:	e2cc      	b.n	8007498 <cppLoop+0x11b0>
		else if(joy_stick.getValue() == JOY_R){
 8006efe:	481d      	ldr	r0, [pc, #116]	; (8006f74 <cppLoop+0xc8c>)
 8006f00:	f7fa ff90 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 8006f04:	4603      	mov	r3, r0
 8006f06:	2b10      	cmp	r3, #16
 8006f08:	bf0c      	ite	eq
 8006f0a:	2301      	moveq	r3, #1
 8006f0c:	2300      	movne	r3, #0
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	f000 8084 	beq.w	800701e <cppLoop+0xd36>
			led.LR(-1, 1);
 8006f16:	2201      	movs	r2, #1
 8006f18:	f04f 31ff 	mov.w	r1, #4294967295
 8006f1c:	4812      	ldr	r0, [pc, #72]	; (8006f68 <cppLoop+0xc80>)
 8006f1e:	f7fb f8a1 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8006f22:	2064      	movs	r0, #100	; 0x64
 8006f24:	f000 fbfe 	bl	8007724 <HAL_Delay>
			if(selector == 0){
 8006f28:	4b20      	ldr	r3, [pc, #128]	; (8006fac <cppLoop+0xcc4>)
 8006f2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d13e      	bne.n	8006fb0 <cppLoop+0xcc8>
				adj_kx = adj_kx + 0.00001;
 8006f32:	4b19      	ldr	r3, [pc, #100]	; (8006f98 <cppLoop+0xcb0>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4618      	mov	r0, r3
 8006f38:	f7f9 fb1e 	bl	8000578 <__aeabi_f2d>
 8006f3c:	a308      	add	r3, pc, #32	; (adr r3, 8006f60 <cppLoop+0xc78>)
 8006f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f42:	f7f9 f9bb 	bl	80002bc <__adddf3>
 8006f46:	4603      	mov	r3, r0
 8006f48:	460c      	mov	r4, r1
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	4621      	mov	r1, r4
 8006f4e:	f7f9 fe63 	bl	8000c18 <__aeabi_d2f>
 8006f52:	4602      	mov	r2, r0
 8006f54:	4b10      	ldr	r3, [pc, #64]	; (8006f98 <cppLoop+0xcb0>)
 8006f56:	601a      	str	r2, [r3, #0]
 8006f58:	e056      	b.n	8007008 <cppLoop+0xd20>
 8006f5a:	bf00      	nop
 8006f5c:	f3af 8000 	nop.w
 8006f60:	88e368f1 	.word	0x88e368f1
 8006f64:	3ee4f8b5 	.word	0x3ee4f8b5
 8006f68:	200005b0 	.word	0x200005b0
 8006f6c:	08018510 	.word	0x08018510
 8006f70:	0801851c 	.word	0x0801851c
 8006f74:	200005a4 	.word	0x200005a4
 8006f78:	3fc8f5c3 	.word	0x3fc8f5c3
 8006f7c:	00000000 	.word	0x00000000
 8006f80:	20015db8 	.word	0x20015db8
 8006f84:	2001be80 	.word	0x2001be80
 8006f88:	408f4000 	.word	0x408f4000
 8006f8c:	08018444 	.word	0x08018444
 8006f90:	08018450 	.word	0x08018450
 8006f94:	200335cc 	.word	0x200335cc
 8006f98:	200335c8 	.word	0x200335c8
 8006f9c:	200335d4 	.word	0x200335d4
 8006fa0:	200335d0 	.word	0x200335d0
 8006fa4:	200335dc 	.word	0x200335dc
 8006fa8:	200335d8 	.word	0x200335d8
 8006fac:	200335ae 	.word	0x200335ae
			else if(selector == 1){
 8006fb0:	4ba3      	ldr	r3, [pc, #652]	; (8007240 <cppLoop+0xf58>)
 8006fb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d113      	bne.n	8006fe2 <cppLoop+0xcfa>
				adj_ky = adj_ky + 0.00001;
 8006fba:	4ba2      	ldr	r3, [pc, #648]	; (8007244 <cppLoop+0xf5c>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f7f9 fada 	bl	8000578 <__aeabi_f2d>
 8006fc4:	a39c      	add	r3, pc, #624	; (adr r3, 8007238 <cppLoop+0xf50>)
 8006fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fca:	f7f9 f977 	bl	80002bc <__adddf3>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	460c      	mov	r4, r1
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	4621      	mov	r1, r4
 8006fd6:	f7f9 fe1f 	bl	8000c18 <__aeabi_d2f>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	4b99      	ldr	r3, [pc, #612]	; (8007244 <cppLoop+0xf5c>)
 8006fde:	601a      	str	r2, [r3, #0]
 8006fe0:	e012      	b.n	8007008 <cppLoop+0xd20>
				adj_kt = adj_kt + 0.00001;
 8006fe2:	4b99      	ldr	r3, [pc, #612]	; (8007248 <cppLoop+0xf60>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f7f9 fac6 	bl	8000578 <__aeabi_f2d>
 8006fec:	a392      	add	r3, pc, #584	; (adr r3, 8007238 <cppLoop+0xf50>)
 8006fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff2:	f7f9 f963 	bl	80002bc <__adddf3>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	460c      	mov	r4, r1
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	4621      	mov	r1, r4
 8006ffe:	f7f9 fe0b 	bl	8000c18 <__aeabi_d2f>
 8007002:	4602      	mov	r2, r0
 8007004:	4b90      	ldr	r3, [pc, #576]	; (8007248 <cppLoop+0xf60>)
 8007006:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8007008:	2152      	movs	r1, #82	; 0x52
 800700a:	4890      	ldr	r0, [pc, #576]	; (800724c <cppLoop+0xf64>)
 800700c:	f7fa ff6e 	bl	8001eec <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8007010:	2200      	movs	r2, #0
 8007012:	f04f 31ff 	mov.w	r1, #4294967295
 8007016:	488d      	ldr	r0, [pc, #564]	; (800724c <cppLoop+0xf64>)
 8007018:	f7fb f824 	bl	8002064 <_ZN3LED2LREaa>
		break;
 800701c:	e23c      	b.n	8007498 <cppLoop+0x11b0>
		else if(joy_stick.getValue() == JOY_L){
 800701e:	488c      	ldr	r0, [pc, #560]	; (8007250 <cppLoop+0xf68>)
 8007020:	f7fa ff00 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 8007024:	4603      	mov	r3, r0
 8007026:	2b01      	cmp	r3, #1
 8007028:	bf0c      	ite	eq
 800702a:	2301      	moveq	r3, #1
 800702c:	2300      	movne	r3, #0
 800702e:	b2db      	uxtb	r3, r3
 8007030:	2b00      	cmp	r3, #0
 8007032:	d058      	beq.n	80070e6 <cppLoop+0xdfe>
			led.LR(-1, 1);
 8007034:	2201      	movs	r2, #1
 8007036:	f04f 31ff 	mov.w	r1, #4294967295
 800703a:	4884      	ldr	r0, [pc, #528]	; (800724c <cppLoop+0xf64>)
 800703c:	f7fb f812 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007040:	2064      	movs	r0, #100	; 0x64
 8007042:	f000 fb6f 	bl	8007724 <HAL_Delay>
			if(selector == 0){
 8007046:	4b7e      	ldr	r3, [pc, #504]	; (8007240 <cppLoop+0xf58>)
 8007048:	f9b3 3000 	ldrsh.w	r3, [r3]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d113      	bne.n	8007078 <cppLoop+0xd90>
				adj_kx = adj_kx - 0.00001;
 8007050:	4b80      	ldr	r3, [pc, #512]	; (8007254 <cppLoop+0xf6c>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4618      	mov	r0, r3
 8007056:	f7f9 fa8f 	bl	8000578 <__aeabi_f2d>
 800705a:	a377      	add	r3, pc, #476	; (adr r3, 8007238 <cppLoop+0xf50>)
 800705c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007060:	f7f9 f92a 	bl	80002b8 <__aeabi_dsub>
 8007064:	4603      	mov	r3, r0
 8007066:	460c      	mov	r4, r1
 8007068:	4618      	mov	r0, r3
 800706a:	4621      	mov	r1, r4
 800706c:	f7f9 fdd4 	bl	8000c18 <__aeabi_d2f>
 8007070:	4602      	mov	r2, r0
 8007072:	4b78      	ldr	r3, [pc, #480]	; (8007254 <cppLoop+0xf6c>)
 8007074:	601a      	str	r2, [r3, #0]
 8007076:	e02b      	b.n	80070d0 <cppLoop+0xde8>
			else if(selector == 1){
 8007078:	4b71      	ldr	r3, [pc, #452]	; (8007240 <cppLoop+0xf58>)
 800707a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800707e:	2b01      	cmp	r3, #1
 8007080:	d113      	bne.n	80070aa <cppLoop+0xdc2>
				adj_ky = adj_ky - 0.00001;
 8007082:	4b70      	ldr	r3, [pc, #448]	; (8007244 <cppLoop+0xf5c>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4618      	mov	r0, r3
 8007088:	f7f9 fa76 	bl	8000578 <__aeabi_f2d>
 800708c:	a36a      	add	r3, pc, #424	; (adr r3, 8007238 <cppLoop+0xf50>)
 800708e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007092:	f7f9 f911 	bl	80002b8 <__aeabi_dsub>
 8007096:	4603      	mov	r3, r0
 8007098:	460c      	mov	r4, r1
 800709a:	4618      	mov	r0, r3
 800709c:	4621      	mov	r1, r4
 800709e:	f7f9 fdbb 	bl	8000c18 <__aeabi_d2f>
 80070a2:	4602      	mov	r2, r0
 80070a4:	4b67      	ldr	r3, [pc, #412]	; (8007244 <cppLoop+0xf5c>)
 80070a6:	601a      	str	r2, [r3, #0]
 80070a8:	e012      	b.n	80070d0 <cppLoop+0xde8>
				adj_kt = adj_kt - 0.00001;
 80070aa:	4b67      	ldr	r3, [pc, #412]	; (8007248 <cppLoop+0xf60>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4618      	mov	r0, r3
 80070b0:	f7f9 fa62 	bl	8000578 <__aeabi_f2d>
 80070b4:	a360      	add	r3, pc, #384	; (adr r3, 8007238 <cppLoop+0xf50>)
 80070b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ba:	f7f9 f8fd 	bl	80002b8 <__aeabi_dsub>
 80070be:	4603      	mov	r3, r0
 80070c0:	460c      	mov	r4, r1
 80070c2:	4618      	mov	r0, r3
 80070c4:	4621      	mov	r1, r4
 80070c6:	f7f9 fda7 	bl	8000c18 <__aeabi_d2f>
 80070ca:	4602      	mov	r2, r0
 80070cc:	4b5e      	ldr	r3, [pc, #376]	; (8007248 <cppLoop+0xf60>)
 80070ce:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80070d0:	2152      	movs	r1, #82	; 0x52
 80070d2:	485e      	ldr	r0, [pc, #376]	; (800724c <cppLoop+0xf64>)
 80070d4:	f7fa ff0a 	bl	8001eec <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80070d8:	2200      	movs	r2, #0
 80070da:	f04f 31ff 	mov.w	r1, #4294967295
 80070de:	485b      	ldr	r0, [pc, #364]	; (800724c <cppLoop+0xf64>)
 80070e0:	f7fa ffc0 	bl	8002064 <_ZN3LED2LREaa>
		break;
 80070e4:	e1d8      	b.n	8007498 <cppLoop+0x11b0>
		else if(joy_stick.getValue() == JOY_D){
 80070e6:	485a      	ldr	r0, [pc, #360]	; (8007250 <cppLoop+0xf68>)
 80070e8:	f7fa fe9c 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 80070ec:	4603      	mov	r3, r0
 80070ee:	2b04      	cmp	r3, #4
 80070f0:	bf0c      	ite	eq
 80070f2:	2301      	moveq	r3, #1
 80070f4:	2300      	movne	r3, #0
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d048      	beq.n	800718e <cppLoop+0xea6>
			led.LR(-1, 1);
 80070fc:	2201      	movs	r2, #1
 80070fe:	f04f 31ff 	mov.w	r1, #4294967295
 8007102:	4852      	ldr	r0, [pc, #328]	; (800724c <cppLoop+0xf64>)
 8007104:	f7fa ffae 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007108:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800710c:	f000 fb0a 	bl	8007724 <HAL_Delay>
			sd_read_array_float("PARAMS", "KX.TXT", 1, &temp_kx);
 8007110:	f107 030c 	add.w	r3, r7, #12
 8007114:	2201      	movs	r2, #1
 8007116:	4950      	ldr	r1, [pc, #320]	; (8007258 <cppLoop+0xf70>)
 8007118:	4850      	ldr	r0, [pc, #320]	; (800725c <cppLoop+0xf74>)
 800711a:	f7fa facb 	bl	80016b4 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KY.TXT", 1, &temp_ky);
 800711e:	f107 0308 	add.w	r3, r7, #8
 8007122:	2201      	movs	r2, #1
 8007124:	494e      	ldr	r1, [pc, #312]	; (8007260 <cppLoop+0xf78>)
 8007126:	484d      	ldr	r0, [pc, #308]	; (800725c <cppLoop+0xf74>)
 8007128:	f7fa fac4 	bl	80016b4 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KT.TXT", 1, &temp_kt);
 800712c:	1d3b      	adds	r3, r7, #4
 800712e:	2201      	movs	r2, #1
 8007130:	494c      	ldr	r1, [pc, #304]	; (8007264 <cppLoop+0xf7c>)
 8007132:	484a      	ldr	r0, [pc, #296]	; (800725c <cppLoop+0xf74>)
 8007134:	f7fa fabe 	bl	80016b4 <sd_read_array_float>
			path_following.setGain(temp_kx, temp_ky, temp_kt);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	4618      	mov	r0, r3
 800713c:	f7f9 fa1c 	bl	8000578 <__aeabi_f2d>
 8007140:	4604      	mov	r4, r0
 8007142:	460d      	mov	r5, r1
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	4618      	mov	r0, r3
 8007148:	f7f9 fa16 	bl	8000578 <__aeabi_f2d>
 800714c:	4680      	mov	r8, r0
 800714e:	4689      	mov	r9, r1
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	4618      	mov	r0, r3
 8007154:	f7f9 fa10 	bl	8000578 <__aeabi_f2d>
 8007158:	4602      	mov	r2, r0
 800715a:	460b      	mov	r3, r1
 800715c:	ec43 2b12 	vmov	d2, r2, r3
 8007160:	ec49 8b11 	vmov	d1, r8, r9
 8007164:	ec45 4b10 	vmov	d0, r4, r5
 8007168:	483f      	ldr	r0, [pc, #252]	; (8007268 <cppLoop+0xf80>)
 800716a:	f7fc fc7f 	bl	8003a6c <_ZN13PathFollowing7setGainEddd>
			adj_kx = temp_kx;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	4a38      	ldr	r2, [pc, #224]	; (8007254 <cppLoop+0xf6c>)
 8007172:	6013      	str	r3, [r2, #0]
			adj_ky = temp_ky;
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	4a33      	ldr	r2, [pc, #204]	; (8007244 <cppLoop+0xf5c>)
 8007178:	6013      	str	r3, [r2, #0]
			adj_kt = temp_kt;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4a32      	ldr	r2, [pc, #200]	; (8007248 <cppLoop+0xf60>)
 800717e:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 8007180:	2200      	movs	r2, #0
 8007182:	f04f 31ff 	mov.w	r1, #4294967295
 8007186:	4831      	ldr	r0, [pc, #196]	; (800724c <cppLoop+0xf64>)
 8007188:	f7fa ff6c 	bl	8002064 <_ZN3LED2LREaa>
		break;
 800718c:	e184      	b.n	8007498 <cppLoop+0x11b0>
		else if(joy_stick.getValue() == JOY_C){
 800718e:	4830      	ldr	r0, [pc, #192]	; (8007250 <cppLoop+0xf68>)
 8007190:	f7fa fe48 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 8007194:	4603      	mov	r3, r0
 8007196:	2b02      	cmp	r3, #2
 8007198:	bf0c      	ite	eq
 800719a:	2301      	moveq	r3, #1
 800719c:	2300      	movne	r3, #0
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	f000 8179 	beq.w	8007498 <cppLoop+0x11b0>
			led.LR(-1, 1);
 80071a6:	2201      	movs	r2, #1
 80071a8:	f04f 31ff 	mov.w	r1, #4294967295
 80071ac:	4827      	ldr	r0, [pc, #156]	; (800724c <cppLoop+0xf64>)
 80071ae:	f7fa ff59 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80071b2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80071b6:	f000 fab5 	bl	8007724 <HAL_Delay>
			sd_write_array_float("PARAMS", "KX.TXT", 1, &adj_kx, OVER_WRITE);
 80071ba:	2300      	movs	r3, #0
 80071bc:	9300      	str	r3, [sp, #0]
 80071be:	4b25      	ldr	r3, [pc, #148]	; (8007254 <cppLoop+0xf6c>)
 80071c0:	2201      	movs	r2, #1
 80071c2:	4925      	ldr	r1, [pc, #148]	; (8007258 <cppLoop+0xf70>)
 80071c4:	4825      	ldr	r0, [pc, #148]	; (800725c <cppLoop+0xf74>)
 80071c6:	f7fa fa0f 	bl	80015e8 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KY.TXT", 1, &adj_ky, OVER_WRITE);
 80071ca:	2300      	movs	r3, #0
 80071cc:	9300      	str	r3, [sp, #0]
 80071ce:	4b1d      	ldr	r3, [pc, #116]	; (8007244 <cppLoop+0xf5c>)
 80071d0:	2201      	movs	r2, #1
 80071d2:	4923      	ldr	r1, [pc, #140]	; (8007260 <cppLoop+0xf78>)
 80071d4:	4821      	ldr	r0, [pc, #132]	; (800725c <cppLoop+0xf74>)
 80071d6:	f7fa fa07 	bl	80015e8 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KT.TXT", 1, &adj_kt, OVER_WRITE);
 80071da:	2300      	movs	r3, #0
 80071dc:	9300      	str	r3, [sp, #0]
 80071de:	4b1a      	ldr	r3, [pc, #104]	; (8007248 <cppLoop+0xf60>)
 80071e0:	2201      	movs	r2, #1
 80071e2:	4920      	ldr	r1, [pc, #128]	; (8007264 <cppLoop+0xf7c>)
 80071e4:	481d      	ldr	r0, [pc, #116]	; (800725c <cppLoop+0xf74>)
 80071e6:	f7fa f9ff 	bl	80015e8 <sd_write_array_float>
			path_following.setGain(adj_kx, adj_ky, adj_kt);
 80071ea:	4b1a      	ldr	r3, [pc, #104]	; (8007254 <cppLoop+0xf6c>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7f9 f9c2 	bl	8000578 <__aeabi_f2d>
 80071f4:	4604      	mov	r4, r0
 80071f6:	460d      	mov	r5, r1
 80071f8:	4b12      	ldr	r3, [pc, #72]	; (8007244 <cppLoop+0xf5c>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4618      	mov	r0, r3
 80071fe:	f7f9 f9bb 	bl	8000578 <__aeabi_f2d>
 8007202:	4680      	mov	r8, r0
 8007204:	4689      	mov	r9, r1
 8007206:	4b10      	ldr	r3, [pc, #64]	; (8007248 <cppLoop+0xf60>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4618      	mov	r0, r3
 800720c:	f7f9 f9b4 	bl	8000578 <__aeabi_f2d>
 8007210:	4602      	mov	r2, r0
 8007212:	460b      	mov	r3, r1
 8007214:	ec43 2b12 	vmov	d2, r2, r3
 8007218:	ec49 8b11 	vmov	d1, r8, r9
 800721c:	ec45 4b10 	vmov	d0, r4, r5
 8007220:	4811      	ldr	r0, [pc, #68]	; (8007268 <cppLoop+0xf80>)
 8007222:	f7fc fc23 	bl	8003a6c <_ZN13PathFollowing7setGainEddd>
			led.LR(-1, 0);
 8007226:	2200      	movs	r2, #0
 8007228:	f04f 31ff 	mov.w	r1, #4294967295
 800722c:	4807      	ldr	r0, [pc, #28]	; (800724c <cppLoop+0xf64>)
 800722e:	f7fa ff19 	bl	8002064 <_ZN3LED2LREaa>
		break;
 8007232:	e131      	b.n	8007498 <cppLoop+0x11b0>
 8007234:	f3af 8000 	nop.w
 8007238:	88e368f1 	.word	0x88e368f1
 800723c:	3ee4f8b5 	.word	0x3ee4f8b5
 8007240:	200335ae 	.word	0x200335ae
 8007244:	200335d0 	.word	0x200335d0
 8007248:	200335d8 	.word	0x200335d8
 800724c:	200005b0 	.word	0x200005b0
 8007250:	200005a4 	.word	0x200005a4
 8007254:	200335c8 	.word	0x200335c8
 8007258:	08018524 	.word	0x08018524
 800725c:	08018468 	.word	0x08018468
 8007260:	0801852c 	.word	0x0801852c
 8007264:	08018534 	.word	0x08018534
 8007268:	2001be80 	.word	0x2001be80

	case 9:
		led.fullColor('M');
 800726c:	214d      	movs	r1, #77	; 0x4d
 800726e:	4898      	ldr	r0, [pc, #608]	; (80074d0 <cppLoop+0x11e8>)
 8007270:	f7fa fe3c 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 8007274:	f7f9 ff14 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007278:	2100      	movs	r1, #0
 800727a:	2000      	movs	r0, #0
 800727c:	f7f9 ff20 	bl	80010c0 <lcd_locate>
		lcd_printf("Step");
 8007280:	4894      	ldr	r0, [pc, #592]	; (80074d4 <cppLoop+0x11ec>)
 8007282:	f7f9 ff47 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007286:	2101      	movs	r1, #1
 8007288:	2000      	movs	r0, #0
 800728a:	f7f9 ff19 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 800728e:	4892      	ldr	r0, [pc, #584]	; (80074d8 <cppLoop+0x11f0>)
 8007290:	f7f9 ff40 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007294:	4891      	ldr	r0, [pc, #580]	; (80074dc <cppLoop+0x11f4>)
 8007296:	f7fa fdc5 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 800729a:	4603      	mov	r3, r0
 800729c:	2b02      	cmp	r3, #2
 800729e:	bf0c      	ite	eq
 80072a0:	2301      	moveq	r3, #1
 80072a2:	2300      	movne	r3, #0
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	f000 80f8 	beq.w	800749c <cppLoop+0x11b4>
			HAL_Delay(1500);
 80072ac:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80072b0:	f000 fa38 	bl	8007724 <HAL_Delay>
			led.LR(-1, 1);
 80072b4:	2201      	movs	r2, #1
 80072b6:	f04f 31ff 	mov.w	r1, #4294967295
 80072ba:	4885      	ldr	r0, [pc, #532]	; (80074d0 <cppLoop+0x11e8>)
 80072bc:	f7fa fed2 	bl	8002064 <_ZN3LED2LREaa>

			logger.start();
 80072c0:	4887      	ldr	r0, [pc, #540]	; (80074e0 <cppLoop+0x11f8>)
 80072c2:	f7fc f891 	bl	80033e8 <_ZN6Logger5startEv>
			motor.setRatio(0.3, -0.3);
 80072c6:	ed9f 1b7c 	vldr	d1, [pc, #496]	; 80074b8 <cppLoop+0x11d0>
 80072ca:	ed9f 0b7d 	vldr	d0, [pc, #500]	; 80074c0 <cppLoop+0x11d8>
 80072ce:	4885      	ldr	r0, [pc, #532]	; (80074e4 <cppLoop+0x11fc>)
 80072d0:	f7fc f920 	bl	8003514 <_ZN5Motor8setRatioEdd>

			HAL_Delay(1000);
 80072d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80072d8:	f000 fa24 	bl	8007724 <HAL_Delay>

			logger.stop();
 80072dc:	4880      	ldr	r0, [pc, #512]	; (80074e0 <cppLoop+0x11f8>)
 80072de:	f7fc f894 	bl	800340a <_ZN6Logger4stopEv>
			motor.setRatio(0.0, 0.0);
 80072e2:	ed9f 1b79 	vldr	d1, [pc, #484]	; 80074c8 <cppLoop+0x11e0>
 80072e6:	ed9f 0b78 	vldr	d0, [pc, #480]	; 80074c8 <cppLoop+0x11e0>
 80072ea:	487e      	ldr	r0, [pc, #504]	; (80074e4 <cppLoop+0x11fc>)
 80072ec:	f7fc f912 	bl	8003514 <_ZN5Motor8setRatioEdd>

			logger.saveLogs("SYSIDENT", "STEPRES.txt");
 80072f0:	4a7d      	ldr	r2, [pc, #500]	; (80074e8 <cppLoop+0x1200>)
 80072f2:	497e      	ldr	r1, [pc, #504]	; (80074ec <cppLoop+0x1204>)
 80072f4:	487a      	ldr	r0, [pc, #488]	; (80074e0 <cppLoop+0x11f8>)
 80072f6:	f7fb ffae 	bl	8003256 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 80072fa:	2200      	movs	r2, #0
 80072fc:	f04f 31ff 	mov.w	r1, #4294967295
 8007300:	4873      	ldr	r0, [pc, #460]	; (80074d0 <cppLoop+0x11e8>)
 8007302:	f7fa feaf 	bl	8002064 <_ZN3LED2LREaa>
		}
		break;
 8007306:	e0c9      	b.n	800749c <cppLoop+0x11b4>

	case 10:
		led.fullColor('Y');
 8007308:	2159      	movs	r1, #89	; 0x59
 800730a:	4871      	ldr	r0, [pc, #452]	; (80074d0 <cppLoop+0x11e8>)
 800730c:	f7fa fdee 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 8007310:	f7f9 fec6 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007314:	2100      	movs	r1, #0
 8007316:	2000      	movs	r0, #0
 8007318:	f7f9 fed2 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 800731c:	4874      	ldr	r0, [pc, #464]	; (80074f0 <cppLoop+0x1208>)
 800731e:	f7f9 fef9 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007322:	2101      	movs	r1, #1
 8007324:	2000      	movs	r0, #0
 8007326:	f7f9 fecb 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 800732a:	4872      	ldr	r0, [pc, #456]	; (80074f4 <cppLoop+0x120c>)
 800732c:	f7f9 fef2 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007330:	486a      	ldr	r0, [pc, #424]	; (80074dc <cppLoop+0x11f4>)
 8007332:	f7fa fd77 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 8007336:	4603      	mov	r3, r0
 8007338:	2b02      	cmp	r3, #2
 800733a:	bf0c      	ite	eq
 800733c:	2301      	moveq	r3, #1
 800733e:	2300      	movne	r3, #0
 8007340:	b2db      	uxtb	r3, r3
 8007342:	2b00      	cmp	r3, #0
 8007344:	f000 80ac 	beq.w	80074a0 <cppLoop+0x11b8>
			HAL_Delay(1500);
 8007348:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800734c:	f000 f9ea 	bl	8007724 <HAL_Delay>
			led.LR(-1, 1);
 8007350:	2201      	movs	r2, #1
 8007352:	f04f 31ff 	mov.w	r1, #4294967295
 8007356:	485e      	ldr	r0, [pc, #376]	; (80074d0 <cppLoop+0x11e8>)
 8007358:	f7fa fe84 	bl	8002064 <_ZN3LED2LREaa>

			logger.start();
 800735c:	4860      	ldr	r0, [pc, #384]	; (80074e0 <cppLoop+0x11f8>)
 800735e:	f7fc f843 	bl	80033e8 <_ZN6Logger5startEv>
			velocity_ctrl.start();
 8007362:	4865      	ldr	r0, [pc, #404]	; (80074f8 <cppLoop+0x1210>)
 8007364:	f7fd f821 	bl	80043aa <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(1, 0);
 8007368:	eddf 0a64 	vldr	s1, [pc, #400]	; 80074fc <cppLoop+0x1214>
 800736c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007370:	4861      	ldr	r0, [pc, #388]	; (80074f8 <cppLoop+0x1210>)
 8007372:	f7fc ffad 	bl	80042d0 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 8007376:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800737a:	f000 f9d3 	bl	8007724 <HAL_Delay>

			logger.stop();
 800737e:	4858      	ldr	r0, [pc, #352]	; (80074e0 <cppLoop+0x11f8>)
 8007380:	f7fc f843 	bl	800340a <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 8007384:	485c      	ldr	r0, [pc, #368]	; (80074f8 <cppLoop+0x1210>)
 8007386:	f7fd f823 	bl	80043d0 <_ZN12VelocityCtrl4stopEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 800738a:	4a5d      	ldr	r2, [pc, #372]	; (8007500 <cppLoop+0x1218>)
 800738c:	4957      	ldr	r1, [pc, #348]	; (80074ec <cppLoop+0x1204>)
 800738e:	4854      	ldr	r0, [pc, #336]	; (80074e0 <cppLoop+0x11f8>)
 8007390:	f7fb ff61 	bl	8003256 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 8007394:	2200      	movs	r2, #0
 8007396:	f04f 31ff 	mov.w	r1, #4294967295
 800739a:	484d      	ldr	r0, [pc, #308]	; (80074d0 <cppLoop+0x11e8>)
 800739c:	f7fa fe62 	bl	8002064 <_ZN3LED2LREaa>
		}

		break;
 80073a0:	e07e      	b.n	80074a0 <cppLoop+0x11b8>

	case 11:
		led.fullColor('C');
 80073a2:	2143      	movs	r1, #67	; 0x43
 80073a4:	484a      	ldr	r0, [pc, #296]	; (80074d0 <cppLoop+0x11e8>)
 80073a6:	f7fa fda1 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 80073aa:	f7f9 fe79 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80073ae:	2100      	movs	r1, #0
 80073b0:	2000      	movs	r0, #0
 80073b2:	f7f9 fe85 	bl	80010c0 <lcd_locate>
		lcd_printf("11      ");
 80073b6:	4853      	ldr	r0, [pc, #332]	; (8007504 <cppLoop+0x121c>)
 80073b8:	f7f9 feac 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80073bc:	2101      	movs	r1, #1
 80073be:	2000      	movs	r0, #0
 80073c0:	f7f9 fe7e 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 80073c4:	4850      	ldr	r0, [pc, #320]	; (8007508 <cppLoop+0x1220>)
 80073c6:	f7f9 fea5 	bl	8001114 <lcd_printf>

		break;
 80073ca:	e06a      	b.n	80074a2 <cppLoop+0x11ba>

	case 12:
		led.fullColor('R');
 80073cc:	2152      	movs	r1, #82	; 0x52
 80073ce:	4840      	ldr	r0, [pc, #256]	; (80074d0 <cppLoop+0x11e8>)
 80073d0:	f7fa fd8c 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 80073d4:	f7f9 fe64 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80073d8:	2100      	movs	r1, #0
 80073da:	2000      	movs	r0, #0
 80073dc:	f7f9 fe70 	bl	80010c0 <lcd_locate>
		lcd_printf("12      ");
 80073e0:	484a      	ldr	r0, [pc, #296]	; (800750c <cppLoop+0x1224>)
 80073e2:	f7f9 fe97 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80073e6:	2101      	movs	r1, #1
 80073e8:	2000      	movs	r0, #0
 80073ea:	f7f9 fe69 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 80073ee:	4846      	ldr	r0, [pc, #280]	; (8007508 <cppLoop+0x1220>)
 80073f0:	f7f9 fe90 	bl	8001114 <lcd_printf>

		break;
 80073f4:	e055      	b.n	80074a2 <cppLoop+0x11ba>

	case 13:
		led.fullColor('G');
 80073f6:	2147      	movs	r1, #71	; 0x47
 80073f8:	4835      	ldr	r0, [pc, #212]	; (80074d0 <cppLoop+0x11e8>)
 80073fa:	f7fa fd77 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 80073fe:	f7f9 fe4f 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007402:	2100      	movs	r1, #0
 8007404:	2000      	movs	r0, #0
 8007406:	f7f9 fe5b 	bl	80010c0 <lcd_locate>
		lcd_printf("13      ");
 800740a:	4841      	ldr	r0, [pc, #260]	; (8007510 <cppLoop+0x1228>)
 800740c:	f7f9 fe82 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007410:	2101      	movs	r1, #1
 8007412:	2000      	movs	r0, #0
 8007414:	f7f9 fe54 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 8007418:	483b      	ldr	r0, [pc, #236]	; (8007508 <cppLoop+0x1220>)
 800741a:	f7f9 fe7b 	bl	8001114 <lcd_printf>

		break;
 800741e:	e040      	b.n	80074a2 <cppLoop+0x11ba>

	case 14:
		led.fullColor('B');
 8007420:	2142      	movs	r1, #66	; 0x42
 8007422:	482b      	ldr	r0, [pc, #172]	; (80074d0 <cppLoop+0x11e8>)
 8007424:	f7fa fd62 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 8007428:	f7f9 fe3a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800742c:	2100      	movs	r1, #0
 800742e:	2000      	movs	r0, #0
 8007430:	f7f9 fe46 	bl	80010c0 <lcd_locate>
		lcd_printf("14      ");
 8007434:	4837      	ldr	r0, [pc, #220]	; (8007514 <cppLoop+0x122c>)
 8007436:	f7f9 fe6d 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800743a:	2101      	movs	r1, #1
 800743c:	2000      	movs	r0, #0
 800743e:	f7f9 fe3f 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 8007442:	4831      	ldr	r0, [pc, #196]	; (8007508 <cppLoop+0x1220>)
 8007444:	f7f9 fe66 	bl	8001114 <lcd_printf>

		break;
 8007448:	e02b      	b.n	80074a2 <cppLoop+0x11ba>

	case 15:
		led.fullColor('M');
 800744a:	214d      	movs	r1, #77	; 0x4d
 800744c:	4820      	ldr	r0, [pc, #128]	; (80074d0 <cppLoop+0x11e8>)
 800744e:	f7fa fd4d 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 8007452:	f7f9 fe25 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007456:	2100      	movs	r1, #0
 8007458:	2000      	movs	r0, #0
 800745a:	f7f9 fe31 	bl	80010c0 <lcd_locate>
		lcd_printf("15      ");
 800745e:	482e      	ldr	r0, [pc, #184]	; (8007518 <cppLoop+0x1230>)
 8007460:	f7f9 fe58 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007464:	2101      	movs	r1, #1
 8007466:	2000      	movs	r0, #0
 8007468:	f7f9 fe2a 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 800746c:	4826      	ldr	r0, [pc, #152]	; (8007508 <cppLoop+0x1220>)
 800746e:	f7f9 fe51 	bl	8001114 <lcd_printf>

		break;
 8007472:	e016      	b.n	80074a2 <cppLoop+0x11ba>

	default:
		break;
 8007474:	bf00      	nop
 8007476:	e014      	b.n	80074a2 <cppLoop+0x11ba>
		break;
 8007478:	bf00      	nop
 800747a:	e012      	b.n	80074a2 <cppLoop+0x11ba>
		break;
 800747c:	bf00      	nop
 800747e:	e010      	b.n	80074a2 <cppLoop+0x11ba>
		break;
 8007480:	bf00      	nop
 8007482:	e00e      	b.n	80074a2 <cppLoop+0x11ba>
		break;
 8007484:	bf00      	nop
 8007486:	e00c      	b.n	80074a2 <cppLoop+0x11ba>
		break;
 8007488:	bf00      	nop
 800748a:	e00a      	b.n	80074a2 <cppLoop+0x11ba>
		break;
 800748c:	bf00      	nop
 800748e:	e008      	b.n	80074a2 <cppLoop+0x11ba>
		break;
 8007490:	bf00      	nop
 8007492:	e006      	b.n	80074a2 <cppLoop+0x11ba>
		break;
 8007494:	bf00      	nop
 8007496:	e004      	b.n	80074a2 <cppLoop+0x11ba>
		break;
 8007498:	bf00      	nop
 800749a:	e002      	b.n	80074a2 <cppLoop+0x11ba>
		break;
 800749c:	bf00      	nop
 800749e:	e000      	b.n	80074a2 <cppLoop+0x11ba>
		break;
 80074a0:	bf00      	nop

	}

	HAL_Delay(30);
 80074a2:	201e      	movs	r0, #30
 80074a4:	f000 f93e 	bl	8007724 <HAL_Delay>

}
 80074a8:	bf00      	nop
 80074aa:	3724      	adds	r7, #36	; 0x24
 80074ac:	46bd      	mov	sp, r7
 80074ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074b2:	bf00      	nop
 80074b4:	f3af 8000 	nop.w
 80074b8:	33333333 	.word	0x33333333
 80074bc:	bfd33333 	.word	0xbfd33333
 80074c0:	33333333 	.word	0x33333333
 80074c4:	3fd33333 	.word	0x3fd33333
	...
 80074d0:	200005b0 	.word	0x200005b0
 80074d4:	0801853c 	.word	0x0801853c
 80074d8:	0801849c 	.word	0x0801849c
 80074dc:	200005a4 	.word	0x200005a4
 80074e0:	200005d4 	.word	0x200005d4
 80074e4:	200005ac 	.word	0x200005ac
 80074e8:	08018544 	.word	0x08018544
 80074ec:	08018550 	.word	0x08018550
 80074f0:	0801855c 	.word	0x0801855c
 80074f4:	08018560 	.word	0x08018560
 80074f8:	20015db8 	.word	0x20015db8
 80074fc:	00000000 	.word	0x00000000
 8007500:	0801856c 	.word	0x0801856c
 8007504:	08018578 	.word	0x08018578
 8007508:	08018584 	.word	0x08018584
 800750c:	08018590 	.word	0x08018590
 8007510:	0801859c 	.word	0x0801859c
 8007514:	080185a8 	.word	0x080185a8
 8007518:	080185b4 	.word	0x080185b4

0800751c <_Z41__static_initialization_and_destruction_0ii>:
 800751c:	b580      	push	{r7, lr}
 800751e:	b086      	sub	sp, #24
 8007520:	af04      	add	r7, sp, #16
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2b01      	cmp	r3, #1
 800752a:	d13b      	bne.n	80075a4 <_Z41__static_initialization_and_destruction_0ii+0x88>
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007532:	4293      	cmp	r3, r2
 8007534:	d136      	bne.n	80075a4 <_Z41__static_initialization_and_destruction_0ii+0x88>
LineSensor line_sensor;
 8007536:	481d      	ldr	r0, [pc, #116]	; (80075ac <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8007538:	f7fa fdcc 	bl	80020d4 <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 800753c:	481c      	ldr	r0, [pc, #112]	; (80075b0 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800753e:	f7fc fbbb 	bl	8003cb8 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 8007542:	481c      	ldr	r0, [pc, #112]	; (80075b4 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8007544:	f7fa fc62 	bl	8001e0c <_ZN8JoyStickC1Ev>
Motor motor;
 8007548:	481b      	ldr	r0, [pc, #108]	; (80075b8 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 800754a:	f7fb ff6f 	bl	800342c <_ZN5MotorC1Ev>
IMU imu;
 800754e:	481b      	ldr	r0, [pc, #108]	; (80075bc <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8007550:	f7fa fa62 	bl	8001a18 <_ZN3IMUC1Ev>
Logger logger;
 8007554:	481a      	ldr	r0, [pc, #104]	; (80075c0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8007556:	f7fb fd3d 	bl	8002fd4 <_ZN6LoggerC1Ev>
Encoder encoder;
 800755a:	481a      	ldr	r0, [pc, #104]	; (80075c4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800755c:	f7f9 fdfa 	bl	8001154 <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 8007560:	4b16      	ldr	r3, [pc, #88]	; (80075bc <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8007562:	4a18      	ldr	r2, [pc, #96]	; (80075c4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8007564:	4914      	ldr	r1, [pc, #80]	; (80075b8 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8007566:	4818      	ldr	r0, [pc, #96]	; (80075c8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8007568:	f7fc fd86 	bl	8004078 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 800756c:	4b16      	ldr	r3, [pc, #88]	; (80075c8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800756e:	4a13      	ldr	r2, [pc, #76]	; (80075bc <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8007570:	4914      	ldr	r1, [pc, #80]	; (80075c4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8007572:	4816      	ldr	r0, [pc, #88]	; (80075cc <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8007574:	f7fc f840 	bl	80035f8 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger);
 8007578:	4b11      	ldr	r3, [pc, #68]	; (80075c0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800757a:	9303      	str	r3, [sp, #12]
 800757c:	4b13      	ldr	r3, [pc, #76]	; (80075cc <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800757e:	9302      	str	r3, [sp, #8]
 8007580:	4b10      	ldr	r3, [pc, #64]	; (80075c4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8007582:	9301      	str	r3, [sp, #4]
 8007584:	4b0a      	ldr	r3, [pc, #40]	; (80075b0 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8007586:	9300      	str	r3, [sp, #0]
 8007588:	4b0f      	ldr	r3, [pc, #60]	; (80075c8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800758a:	4a08      	ldr	r2, [pc, #32]	; (80075ac <_Z41__static_initialization_and_destruction_0ii+0x90>)
 800758c:	490a      	ldr	r1, [pc, #40]	; (80075b8 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 800758e:	4810      	ldr	r0, [pc, #64]	; (80075d0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8007590:	f7fb f908 	bl	80027a4 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6Logger>
SystemIdentification sys_ident(&logger, &motor);
 8007594:	4a08      	ldr	r2, [pc, #32]	; (80075b8 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8007596:	490a      	ldr	r1, [pc, #40]	; (80075c0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8007598:	480e      	ldr	r0, [pc, #56]	; (80075d4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800759a:	f7fc fc6b 	bl	8003e74 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 800759e:	480e      	ldr	r0, [pc, #56]	; (80075d8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80075a0:	f7fc f9ac 	bl	80038fc <_ZN13PathFollowingC1Ev>
}
 80075a4:	bf00      	nop
 80075a6:	3708      	adds	r7, #8
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	200002a4 	.word	0x200002a4
 80075b0:	2000059c 	.word	0x2000059c
 80075b4:	200005a4 	.word	0x200005a4
 80075b8:	200005ac 	.word	0x200005ac
 80075bc:	200005c0 	.word	0x200005c0
 80075c0:	200005d4 	.word	0x200005d4
 80075c4:	20015d9c 	.word	0x20015d9c
 80075c8:	20015db8 	.word	0x20015db8
 80075cc:	20015df8 	.word	0x20015df8
 80075d0:	20015e38 	.word	0x20015e38
 80075d4:	2001bc74 	.word	0x2001bc74
 80075d8:	2001be80 	.word	0x2001be80

080075dc <_GLOBAL__sub_I_line_sensor>:
 80075dc:	b580      	push	{r7, lr}
 80075de:	af00      	add	r7, sp, #0
 80075e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80075e4:	2001      	movs	r0, #1
 80075e6:	f7ff ff99 	bl	800751c <_Z41__static_initialization_and_destruction_0ii>
 80075ea:	bd80      	pop	{r7, pc}

080075ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80075ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007624 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80075f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80075f2:	e003      	b.n	80075fc <LoopCopyDataInit>

080075f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80075f4:	4b0c      	ldr	r3, [pc, #48]	; (8007628 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80075f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80075f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80075fa:	3104      	adds	r1, #4

080075fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80075fc:	480b      	ldr	r0, [pc, #44]	; (800762c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80075fe:	4b0c      	ldr	r3, [pc, #48]	; (8007630 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007600:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007602:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007604:	d3f6      	bcc.n	80075f4 <CopyDataInit>
  ldr  r2, =_sbss
 8007606:	4a0b      	ldr	r2, [pc, #44]	; (8007634 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007608:	e002      	b.n	8007610 <LoopFillZerobss>

0800760a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800760a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800760c:	f842 3b04 	str.w	r3, [r2], #4

08007610 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007610:	4b09      	ldr	r3, [pc, #36]	; (8007638 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007612:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007614:	d3f9      	bcc.n	800760a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007616:	f7fe fced 	bl	8005ff4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800761a:	f00b fded 	bl	80131f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800761e:	f7fc ffb3 	bl	8004588 <main>
  bx  lr    
 8007622:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8007624:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8007628:	08018bb8 	.word	0x08018bb8
  ldr  r0, =_sdata
 800762c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007630:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8007634:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8007638:	20037fc0 	.word	0x20037fc0

0800763c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800763c:	e7fe      	b.n	800763c <ADC_IRQHandler>
	...

08007640 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007644:	4b0e      	ldr	r3, [pc, #56]	; (8007680 <HAL_Init+0x40>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a0d      	ldr	r2, [pc, #52]	; (8007680 <HAL_Init+0x40>)
 800764a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800764e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007650:	4b0b      	ldr	r3, [pc, #44]	; (8007680 <HAL_Init+0x40>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a0a      	ldr	r2, [pc, #40]	; (8007680 <HAL_Init+0x40>)
 8007656:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800765a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800765c:	4b08      	ldr	r3, [pc, #32]	; (8007680 <HAL_Init+0x40>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a07      	ldr	r2, [pc, #28]	; (8007680 <HAL_Init+0x40>)
 8007662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007666:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007668:	2003      	movs	r0, #3
 800766a:	f000 fd51 	bl	8008110 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800766e:	2000      	movs	r0, #0
 8007670:	f000 f808 	bl	8007684 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007674:	f7fd feac 	bl	80053d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007678:	2300      	movs	r3, #0
}
 800767a:	4618      	mov	r0, r3
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	40023c00 	.word	0x40023c00

08007684 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b082      	sub	sp, #8
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800768c:	4b12      	ldr	r3, [pc, #72]	; (80076d8 <HAL_InitTick+0x54>)
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	4b12      	ldr	r3, [pc, #72]	; (80076dc <HAL_InitTick+0x58>)
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	4619      	mov	r1, r3
 8007696:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800769a:	fbb3 f3f1 	udiv	r3, r3, r1
 800769e:	fbb2 f3f3 	udiv	r3, r2, r3
 80076a2:	4618      	mov	r0, r3
 80076a4:	f000 fd69 	bl	800817a <HAL_SYSTICK_Config>
 80076a8:	4603      	mov	r3, r0
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d001      	beq.n	80076b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80076ae:	2301      	movs	r3, #1
 80076b0:	e00e      	b.n	80076d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2b0f      	cmp	r3, #15
 80076b6:	d80a      	bhi.n	80076ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80076b8:	2200      	movs	r2, #0
 80076ba:	6879      	ldr	r1, [r7, #4]
 80076bc:	f04f 30ff 	mov.w	r0, #4294967295
 80076c0:	f000 fd31 	bl	8008126 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80076c4:	4a06      	ldr	r2, [pc, #24]	; (80076e0 <HAL_InitTick+0x5c>)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80076ca:	2300      	movs	r3, #0
 80076cc:	e000      	b.n	80076d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80076ce:	2301      	movs	r3, #1
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3708      	adds	r7, #8
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	20000000 	.word	0x20000000
 80076dc:	20000008 	.word	0x20000008
 80076e0:	20000004 	.word	0x20000004

080076e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80076e4:	b480      	push	{r7}
 80076e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80076e8:	4b06      	ldr	r3, [pc, #24]	; (8007704 <HAL_IncTick+0x20>)
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	461a      	mov	r2, r3
 80076ee:	4b06      	ldr	r3, [pc, #24]	; (8007708 <HAL_IncTick+0x24>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4413      	add	r3, r2
 80076f4:	4a04      	ldr	r2, [pc, #16]	; (8007708 <HAL_IncTick+0x24>)
 80076f6:	6013      	str	r3, [r2, #0]
}
 80076f8:	bf00      	nop
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	20000008 	.word	0x20000008
 8007708:	20035f48 	.word	0x20035f48

0800770c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800770c:	b480      	push	{r7}
 800770e:	af00      	add	r7, sp, #0
  return uwTick;
 8007710:	4b03      	ldr	r3, [pc, #12]	; (8007720 <HAL_GetTick+0x14>)
 8007712:	681b      	ldr	r3, [r3, #0]
}
 8007714:	4618      	mov	r0, r3
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr
 800771e:	bf00      	nop
 8007720:	20035f48 	.word	0x20035f48

08007724 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800772c:	f7ff ffee 	bl	800770c <HAL_GetTick>
 8007730:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800773c:	d005      	beq.n	800774a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800773e:	4b09      	ldr	r3, [pc, #36]	; (8007764 <HAL_Delay+0x40>)
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	461a      	mov	r2, r3
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	4413      	add	r3, r2
 8007748:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800774a:	bf00      	nop
 800774c:	f7ff ffde 	bl	800770c <HAL_GetTick>
 8007750:	4602      	mov	r2, r0
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	1ad3      	subs	r3, r2, r3
 8007756:	68fa      	ldr	r2, [r7, #12]
 8007758:	429a      	cmp	r2, r3
 800775a:	d8f7      	bhi.n	800774c <HAL_Delay+0x28>
  {
  }
}
 800775c:	bf00      	nop
 800775e:	3710      	adds	r7, #16
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}
 8007764:	20000008 	.word	0x20000008

08007768 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007770:	2300      	movs	r3, #0
 8007772:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d101      	bne.n	800777e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	e033      	b.n	80077e6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007782:	2b00      	cmp	r3, #0
 8007784:	d109      	bne.n	800779a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f7fd fe4a 	bl	8005420 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2200      	movs	r2, #0
 8007790:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800779e:	f003 0310 	and.w	r3, r3, #16
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d118      	bne.n	80077d8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077aa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80077ae:	f023 0302 	bic.w	r3, r3, #2
 80077b2:	f043 0202 	orr.w	r2, r3, #2
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 fa5a 	bl	8007c74 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ca:	f023 0303 	bic.w	r3, r3, #3
 80077ce:	f043 0201 	orr.w	r2, r3, #1
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	641a      	str	r2, [r3, #64]	; 0x40
 80077d6:	e001      	b.n	80077dc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80077e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3710      	adds	r7, #16
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
	...

080077f0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b086      	sub	sp, #24
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	60b9      	str	r1, [r7, #8]
 80077fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80077fc:	2300      	movs	r3, #0
 80077fe:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007806:	2b01      	cmp	r3, #1
 8007808:	d101      	bne.n	800780e <HAL_ADC_Start_DMA+0x1e>
 800780a:	2302      	movs	r3, #2
 800780c:	e0cc      	b.n	80079a8 <HAL_ADC_Start_DMA+0x1b8>
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2201      	movs	r2, #1
 8007812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	f003 0301 	and.w	r3, r3, #1
 8007820:	2b01      	cmp	r3, #1
 8007822:	d018      	beq.n	8007856 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	689a      	ldr	r2, [r3, #8]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f042 0201 	orr.w	r2, r2, #1
 8007832:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007834:	4b5e      	ldr	r3, [pc, #376]	; (80079b0 <HAL_ADC_Start_DMA+0x1c0>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a5e      	ldr	r2, [pc, #376]	; (80079b4 <HAL_ADC_Start_DMA+0x1c4>)
 800783a:	fba2 2303 	umull	r2, r3, r2, r3
 800783e:	0c9a      	lsrs	r2, r3, #18
 8007840:	4613      	mov	r3, r2
 8007842:	005b      	lsls	r3, r3, #1
 8007844:	4413      	add	r3, r2
 8007846:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007848:	e002      	b.n	8007850 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	3b01      	subs	r3, #1
 800784e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d1f9      	bne.n	800784a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	f003 0301 	and.w	r3, r3, #1
 8007860:	2b01      	cmp	r3, #1
 8007862:	f040 80a0 	bne.w	80079a6 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800786a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800786e:	f023 0301 	bic.w	r3, r3, #1
 8007872:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007884:	2b00      	cmp	r3, #0
 8007886:	d007      	beq.n	8007898 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800788c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007890:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800789c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80078a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078a4:	d106      	bne.n	80078b4 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078aa:	f023 0206 	bic.w	r2, r3, #6
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	645a      	str	r2, [r3, #68]	; 0x44
 80078b2:	e002      	b.n	80078ba <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2200      	movs	r2, #0
 80078b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2200      	movs	r2, #0
 80078be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80078c2:	4b3d      	ldr	r3, [pc, #244]	; (80079b8 <HAL_ADC_Start_DMA+0x1c8>)
 80078c4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ca:	4a3c      	ldr	r2, [pc, #240]	; (80079bc <HAL_ADC_Start_DMA+0x1cc>)
 80078cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d2:	4a3b      	ldr	r2, [pc, #236]	; (80079c0 <HAL_ADC_Start_DMA+0x1d0>)
 80078d4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078da:	4a3a      	ldr	r2, [pc, #232]	; (80079c4 <HAL_ADC_Start_DMA+0x1d4>)
 80078dc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80078e6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	685a      	ldr	r2, [r3, #4]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80078f6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	689a      	ldr	r2, [r3, #8]
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007906:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	334c      	adds	r3, #76	; 0x4c
 8007912:	4619      	mov	r1, r3
 8007914:	68ba      	ldr	r2, [r7, #8]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f000 fcea 	bl	80082f0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	f003 031f 	and.w	r3, r3, #31
 8007924:	2b00      	cmp	r3, #0
 8007926:	d12a      	bne.n	800797e <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a26      	ldr	r2, [pc, #152]	; (80079c8 <HAL_ADC_Start_DMA+0x1d8>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d015      	beq.n	800795e <HAL_ADC_Start_DMA+0x16e>
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a25      	ldr	r2, [pc, #148]	; (80079cc <HAL_ADC_Start_DMA+0x1dc>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d105      	bne.n	8007948 <HAL_ADC_Start_DMA+0x158>
 800793c:	4b1e      	ldr	r3, [pc, #120]	; (80079b8 <HAL_ADC_Start_DMA+0x1c8>)
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	f003 031f 	and.w	r3, r3, #31
 8007944:	2b00      	cmp	r3, #0
 8007946:	d00a      	beq.n	800795e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a20      	ldr	r2, [pc, #128]	; (80079d0 <HAL_ADC_Start_DMA+0x1e0>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d129      	bne.n	80079a6 <HAL_ADC_Start_DMA+0x1b6>
 8007952:	4b19      	ldr	r3, [pc, #100]	; (80079b8 <HAL_ADC_Start_DMA+0x1c8>)
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	f003 031f 	and.w	r3, r3, #31
 800795a:	2b0f      	cmp	r3, #15
 800795c:	d823      	bhi.n	80079a6 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007968:	2b00      	cmp	r3, #0
 800796a:	d11c      	bne.n	80079a6 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	689a      	ldr	r2, [r3, #8]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800797a:	609a      	str	r2, [r3, #8]
 800797c:	e013      	b.n	80079a6 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a11      	ldr	r2, [pc, #68]	; (80079c8 <HAL_ADC_Start_DMA+0x1d8>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d10e      	bne.n	80079a6 <HAL_ADC_Start_DMA+0x1b6>
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007992:	2b00      	cmp	r3, #0
 8007994:	d107      	bne.n	80079a6 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	689a      	ldr	r2, [r3, #8]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80079a4:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80079a6:	2300      	movs	r3, #0
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3718      	adds	r7, #24
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}
 80079b0:	20000000 	.word	0x20000000
 80079b4:	431bde83 	.word	0x431bde83
 80079b8:	40012300 	.word	0x40012300
 80079bc:	08007e6d 	.word	0x08007e6d
 80079c0:	08007f27 	.word	0x08007f27
 80079c4:	08007f43 	.word	0x08007f43
 80079c8:	40012000 	.word	0x40012000
 80079cc:	40012100 	.word	0x40012100
 80079d0:	40012200 	.word	0x40012200

080079d4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b083      	sub	sp, #12
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80079dc:	bf00      	nop
 80079de:	370c      	adds	r7, #12
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr

080079e8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b083      	sub	sp, #12
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80079f0:	bf00      	nop
 80079f2:	370c      	adds	r7, #12
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr

080079fc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8007a04:	bf00      	nop
 8007a06:	370c      	adds	r7, #12
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr

08007a10 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b085      	sub	sp, #20
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d101      	bne.n	8007a2c <HAL_ADC_ConfigChannel+0x1c>
 8007a28:	2302      	movs	r3, #2
 8007a2a:	e113      	b.n	8007c54 <HAL_ADC_ConfigChannel+0x244>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	2b09      	cmp	r3, #9
 8007a3a:	d925      	bls.n	8007a88 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	68d9      	ldr	r1, [r3, #12]
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	461a      	mov	r2, r3
 8007a4a:	4613      	mov	r3, r2
 8007a4c:	005b      	lsls	r3, r3, #1
 8007a4e:	4413      	add	r3, r2
 8007a50:	3b1e      	subs	r3, #30
 8007a52:	2207      	movs	r2, #7
 8007a54:	fa02 f303 	lsl.w	r3, r2, r3
 8007a58:	43da      	mvns	r2, r3
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	400a      	ands	r2, r1
 8007a60:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	68d9      	ldr	r1, [r3, #12]
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	689a      	ldr	r2, [r3, #8]
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	4618      	mov	r0, r3
 8007a74:	4603      	mov	r3, r0
 8007a76:	005b      	lsls	r3, r3, #1
 8007a78:	4403      	add	r3, r0
 8007a7a:	3b1e      	subs	r3, #30
 8007a7c:	409a      	lsls	r2, r3
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	430a      	orrs	r2, r1
 8007a84:	60da      	str	r2, [r3, #12]
 8007a86:	e022      	b.n	8007ace <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	6919      	ldr	r1, [r3, #16]
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	461a      	mov	r2, r3
 8007a96:	4613      	mov	r3, r2
 8007a98:	005b      	lsls	r3, r3, #1
 8007a9a:	4413      	add	r3, r2
 8007a9c:	2207      	movs	r2, #7
 8007a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007aa2:	43da      	mvns	r2, r3
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	400a      	ands	r2, r1
 8007aaa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	6919      	ldr	r1, [r3, #16]
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	689a      	ldr	r2, [r3, #8]
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	4618      	mov	r0, r3
 8007abe:	4603      	mov	r3, r0
 8007ac0:	005b      	lsls	r3, r3, #1
 8007ac2:	4403      	add	r3, r0
 8007ac4:	409a      	lsls	r2, r3
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	430a      	orrs	r2, r1
 8007acc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	2b06      	cmp	r3, #6
 8007ad4:	d824      	bhi.n	8007b20 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	685a      	ldr	r2, [r3, #4]
 8007ae0:	4613      	mov	r3, r2
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	4413      	add	r3, r2
 8007ae6:	3b05      	subs	r3, #5
 8007ae8:	221f      	movs	r2, #31
 8007aea:	fa02 f303 	lsl.w	r3, r2, r3
 8007aee:	43da      	mvns	r2, r3
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	400a      	ands	r2, r1
 8007af6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	4618      	mov	r0, r3
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	685a      	ldr	r2, [r3, #4]
 8007b0a:	4613      	mov	r3, r2
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	4413      	add	r3, r2
 8007b10:	3b05      	subs	r3, #5
 8007b12:	fa00 f203 	lsl.w	r2, r0, r3
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	430a      	orrs	r2, r1
 8007b1c:	635a      	str	r2, [r3, #52]	; 0x34
 8007b1e:	e04c      	b.n	8007bba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	2b0c      	cmp	r3, #12
 8007b26:	d824      	bhi.n	8007b72 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	685a      	ldr	r2, [r3, #4]
 8007b32:	4613      	mov	r3, r2
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	4413      	add	r3, r2
 8007b38:	3b23      	subs	r3, #35	; 0x23
 8007b3a:	221f      	movs	r2, #31
 8007b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b40:	43da      	mvns	r2, r3
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	400a      	ands	r2, r1
 8007b48:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	4618      	mov	r0, r3
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	685a      	ldr	r2, [r3, #4]
 8007b5c:	4613      	mov	r3, r2
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	4413      	add	r3, r2
 8007b62:	3b23      	subs	r3, #35	; 0x23
 8007b64:	fa00 f203 	lsl.w	r2, r0, r3
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	430a      	orrs	r2, r1
 8007b6e:	631a      	str	r2, [r3, #48]	; 0x30
 8007b70:	e023      	b.n	8007bba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	685a      	ldr	r2, [r3, #4]
 8007b7c:	4613      	mov	r3, r2
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	4413      	add	r3, r2
 8007b82:	3b41      	subs	r3, #65	; 0x41
 8007b84:	221f      	movs	r2, #31
 8007b86:	fa02 f303 	lsl.w	r3, r2, r3
 8007b8a:	43da      	mvns	r2, r3
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	400a      	ands	r2, r1
 8007b92:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	685a      	ldr	r2, [r3, #4]
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	4413      	add	r3, r2
 8007bac:	3b41      	subs	r3, #65	; 0x41
 8007bae:	fa00 f203 	lsl.w	r2, r0, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	430a      	orrs	r2, r1
 8007bb8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007bba:	4b29      	ldr	r3, [pc, #164]	; (8007c60 <HAL_ADC_ConfigChannel+0x250>)
 8007bbc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a28      	ldr	r2, [pc, #160]	; (8007c64 <HAL_ADC_ConfigChannel+0x254>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d10f      	bne.n	8007be8 <HAL_ADC_ConfigChannel+0x1d8>
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2b12      	cmp	r3, #18
 8007bce:	d10b      	bne.n	8007be8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a1d      	ldr	r2, [pc, #116]	; (8007c64 <HAL_ADC_ConfigChannel+0x254>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d12b      	bne.n	8007c4a <HAL_ADC_ConfigChannel+0x23a>
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a1c      	ldr	r2, [pc, #112]	; (8007c68 <HAL_ADC_ConfigChannel+0x258>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d003      	beq.n	8007c04 <HAL_ADC_ConfigChannel+0x1f4>
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	2b11      	cmp	r3, #17
 8007c02:	d122      	bne.n	8007c4a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a11      	ldr	r2, [pc, #68]	; (8007c68 <HAL_ADC_ConfigChannel+0x258>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d111      	bne.n	8007c4a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007c26:	4b11      	ldr	r3, [pc, #68]	; (8007c6c <HAL_ADC_ConfigChannel+0x25c>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a11      	ldr	r2, [pc, #68]	; (8007c70 <HAL_ADC_ConfigChannel+0x260>)
 8007c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8007c30:	0c9a      	lsrs	r2, r3, #18
 8007c32:	4613      	mov	r3, r2
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	4413      	add	r3, r2
 8007c38:	005b      	lsls	r3, r3, #1
 8007c3a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007c3c:	e002      	b.n	8007c44 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	3b01      	subs	r3, #1
 8007c42:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d1f9      	bne.n	8007c3e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007c52:	2300      	movs	r3, #0
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3714      	adds	r7, #20
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr
 8007c60:	40012300 	.word	0x40012300
 8007c64:	40012000 	.word	0x40012000
 8007c68:	10000012 	.word	0x10000012
 8007c6c:	20000000 	.word	0x20000000
 8007c70:	431bde83 	.word	0x431bde83

08007c74 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b085      	sub	sp, #20
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007c7c:	4b79      	ldr	r3, [pc, #484]	; (8007e64 <ADC_Init+0x1f0>)
 8007c7e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	685a      	ldr	r2, [r3, #4]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	431a      	orrs	r2, r3
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	685a      	ldr	r2, [r3, #4]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007ca8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	6859      	ldr	r1, [r3, #4]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	691b      	ldr	r3, [r3, #16]
 8007cb4:	021a      	lsls	r2, r3, #8
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	430a      	orrs	r2, r1
 8007cbc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	685a      	ldr	r2, [r3, #4]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007ccc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	6859      	ldr	r1, [r3, #4]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	689a      	ldr	r2, [r3, #8]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	430a      	orrs	r2, r1
 8007cde:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	689a      	ldr	r2, [r3, #8]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007cee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	6899      	ldr	r1, [r3, #8]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	68da      	ldr	r2, [r3, #12]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	430a      	orrs	r2, r1
 8007d00:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d06:	4a58      	ldr	r2, [pc, #352]	; (8007e68 <ADC_Init+0x1f4>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d022      	beq.n	8007d52 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	689a      	ldr	r2, [r3, #8]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007d1a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	6899      	ldr	r1, [r3, #8]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	430a      	orrs	r2, r1
 8007d2c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	689a      	ldr	r2, [r3, #8]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007d3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	6899      	ldr	r1, [r3, #8]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	430a      	orrs	r2, r1
 8007d4e:	609a      	str	r2, [r3, #8]
 8007d50:	e00f      	b.n	8007d72 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	689a      	ldr	r2, [r3, #8]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007d60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	689a      	ldr	r2, [r3, #8]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007d70:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	689a      	ldr	r2, [r3, #8]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f022 0202 	bic.w	r2, r2, #2
 8007d80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	6899      	ldr	r1, [r3, #8]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	7e1b      	ldrb	r3, [r3, #24]
 8007d8c:	005a      	lsls	r2, r3, #1
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	430a      	orrs	r2, r1
 8007d94:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d01b      	beq.n	8007dd8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	685a      	ldr	r2, [r3, #4]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007dae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	685a      	ldr	r2, [r3, #4]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007dbe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	6859      	ldr	r1, [r3, #4]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dca:	3b01      	subs	r3, #1
 8007dcc:	035a      	lsls	r2, r3, #13
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	430a      	orrs	r2, r1
 8007dd4:	605a      	str	r2, [r3, #4]
 8007dd6:	e007      	b.n	8007de8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	685a      	ldr	r2, [r3, #4]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007de6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007df6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	69db      	ldr	r3, [r3, #28]
 8007e02:	3b01      	subs	r3, #1
 8007e04:	051a      	lsls	r2, r3, #20
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	430a      	orrs	r2, r1
 8007e0c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	689a      	ldr	r2, [r3, #8]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007e1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	6899      	ldr	r1, [r3, #8]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007e2a:	025a      	lsls	r2, r3, #9
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	430a      	orrs	r2, r1
 8007e32:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	689a      	ldr	r2, [r3, #8]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	6899      	ldr	r1, [r3, #8]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	695b      	ldr	r3, [r3, #20]
 8007e4e:	029a      	lsls	r2, r3, #10
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	430a      	orrs	r2, r1
 8007e56:	609a      	str	r2, [r3, #8]
}
 8007e58:	bf00      	nop
 8007e5a:	3714      	adds	r7, #20
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr
 8007e64:	40012300 	.word	0x40012300
 8007e68:	0f000001 	.word	0x0f000001

08007e6c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e78:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e7e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d13c      	bne.n	8007f00 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e8a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d12b      	bne.n	8007ef8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d127      	bne.n	8007ef8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eae:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d006      	beq.n	8007ec4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d119      	bne.n	8007ef8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	685a      	ldr	r2, [r3, #4]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f022 0220 	bic.w	r2, r2, #32
 8007ed2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d105      	bne.n	8007ef8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef0:	f043 0201 	orr.w	r2, r3, #1
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007ef8:	68f8      	ldr	r0, [r7, #12]
 8007efa:	f7ff fd6b 	bl	80079d4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007efe:	e00e      	b.n	8007f1e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f04:	f003 0310 	and.w	r3, r3, #16
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d003      	beq.n	8007f14 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8007f0c:	68f8      	ldr	r0, [r7, #12]
 8007f0e:	f7ff fd75 	bl	80079fc <HAL_ADC_ErrorCallback>
}
 8007f12:	e004      	b.n	8007f1e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	4798      	blx	r3
}
 8007f1e:	bf00      	nop
 8007f20:	3710      	adds	r7, #16
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007f26:	b580      	push	{r7, lr}
 8007f28:	b084      	sub	sp, #16
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f32:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007f34:	68f8      	ldr	r0, [r7, #12]
 8007f36:	f7ff fd57 	bl	80079e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007f3a:	bf00      	nop
 8007f3c:	3710      	adds	r7, #16
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}

08007f42 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007f42:	b580      	push	{r7, lr}
 8007f44:	b084      	sub	sp, #16
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f4e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2240      	movs	r2, #64	; 0x40
 8007f54:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f5a:	f043 0204 	orr.w	r2, r3, #4
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007f62:	68f8      	ldr	r0, [r7, #12]
 8007f64:	f7ff fd4a 	bl	80079fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007f68:	bf00      	nop
 8007f6a:	3710      	adds	r7, #16
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <__NVIC_SetPriorityGrouping>:
{
 8007f70:	b480      	push	{r7}
 8007f72:	b085      	sub	sp, #20
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f003 0307 	and.w	r3, r3, #7
 8007f7e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007f80:	4b0c      	ldr	r3, [pc, #48]	; (8007fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8007f82:	68db      	ldr	r3, [r3, #12]
 8007f84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007f86:	68ba      	ldr	r2, [r7, #8]
 8007f88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007f8c:	4013      	ands	r3, r2
 8007f8e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007f98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007fa2:	4a04      	ldr	r2, [pc, #16]	; (8007fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	60d3      	str	r3, [r2, #12]
}
 8007fa8:	bf00      	nop
 8007faa:	3714      	adds	r7, #20
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr
 8007fb4:	e000ed00 	.word	0xe000ed00

08007fb8 <__NVIC_GetPriorityGrouping>:
{
 8007fb8:	b480      	push	{r7}
 8007fba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007fbc:	4b04      	ldr	r3, [pc, #16]	; (8007fd0 <__NVIC_GetPriorityGrouping+0x18>)
 8007fbe:	68db      	ldr	r3, [r3, #12]
 8007fc0:	0a1b      	lsrs	r3, r3, #8
 8007fc2:	f003 0307 	and.w	r3, r3, #7
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr
 8007fd0:	e000ed00 	.word	0xe000ed00

08007fd4 <__NVIC_EnableIRQ>:
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b083      	sub	sp, #12
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	4603      	mov	r3, r0
 8007fdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	db0b      	blt.n	8007ffe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007fe6:	79fb      	ldrb	r3, [r7, #7]
 8007fe8:	f003 021f 	and.w	r2, r3, #31
 8007fec:	4907      	ldr	r1, [pc, #28]	; (800800c <__NVIC_EnableIRQ+0x38>)
 8007fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ff2:	095b      	lsrs	r3, r3, #5
 8007ff4:	2001      	movs	r0, #1
 8007ff6:	fa00 f202 	lsl.w	r2, r0, r2
 8007ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007ffe:	bf00      	nop
 8008000:	370c      	adds	r7, #12
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr
 800800a:	bf00      	nop
 800800c:	e000e100 	.word	0xe000e100

08008010 <__NVIC_SetPriority>:
{
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	4603      	mov	r3, r0
 8008018:	6039      	str	r1, [r7, #0]
 800801a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800801c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008020:	2b00      	cmp	r3, #0
 8008022:	db0a      	blt.n	800803a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	b2da      	uxtb	r2, r3
 8008028:	490c      	ldr	r1, [pc, #48]	; (800805c <__NVIC_SetPriority+0x4c>)
 800802a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800802e:	0112      	lsls	r2, r2, #4
 8008030:	b2d2      	uxtb	r2, r2
 8008032:	440b      	add	r3, r1
 8008034:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008038:	e00a      	b.n	8008050 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	b2da      	uxtb	r2, r3
 800803e:	4908      	ldr	r1, [pc, #32]	; (8008060 <__NVIC_SetPriority+0x50>)
 8008040:	79fb      	ldrb	r3, [r7, #7]
 8008042:	f003 030f 	and.w	r3, r3, #15
 8008046:	3b04      	subs	r3, #4
 8008048:	0112      	lsls	r2, r2, #4
 800804a:	b2d2      	uxtb	r2, r2
 800804c:	440b      	add	r3, r1
 800804e:	761a      	strb	r2, [r3, #24]
}
 8008050:	bf00      	nop
 8008052:	370c      	adds	r7, #12
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr
 800805c:	e000e100 	.word	0xe000e100
 8008060:	e000ed00 	.word	0xe000ed00

08008064 <NVIC_EncodePriority>:
{
 8008064:	b480      	push	{r7}
 8008066:	b089      	sub	sp, #36	; 0x24
 8008068:	af00      	add	r7, sp, #0
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	60b9      	str	r1, [r7, #8]
 800806e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f003 0307 	and.w	r3, r3, #7
 8008076:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008078:	69fb      	ldr	r3, [r7, #28]
 800807a:	f1c3 0307 	rsb	r3, r3, #7
 800807e:	2b04      	cmp	r3, #4
 8008080:	bf28      	it	cs
 8008082:	2304      	movcs	r3, #4
 8008084:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008086:	69fb      	ldr	r3, [r7, #28]
 8008088:	3304      	adds	r3, #4
 800808a:	2b06      	cmp	r3, #6
 800808c:	d902      	bls.n	8008094 <NVIC_EncodePriority+0x30>
 800808e:	69fb      	ldr	r3, [r7, #28]
 8008090:	3b03      	subs	r3, #3
 8008092:	e000      	b.n	8008096 <NVIC_EncodePriority+0x32>
 8008094:	2300      	movs	r3, #0
 8008096:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008098:	f04f 32ff 	mov.w	r2, #4294967295
 800809c:	69bb      	ldr	r3, [r7, #24]
 800809e:	fa02 f303 	lsl.w	r3, r2, r3
 80080a2:	43da      	mvns	r2, r3
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	401a      	ands	r2, r3
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80080ac:	f04f 31ff 	mov.w	r1, #4294967295
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	fa01 f303 	lsl.w	r3, r1, r3
 80080b6:	43d9      	mvns	r1, r3
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80080bc:	4313      	orrs	r3, r2
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3724      	adds	r7, #36	; 0x24
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr
	...

080080cc <SysTick_Config>:
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b082      	sub	sp, #8
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	3b01      	subs	r3, #1
 80080d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80080dc:	d301      	bcc.n	80080e2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80080de:	2301      	movs	r3, #1
 80080e0:	e00f      	b.n	8008102 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80080e2:	4a0a      	ldr	r2, [pc, #40]	; (800810c <SysTick_Config+0x40>)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	3b01      	subs	r3, #1
 80080e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80080ea:	210f      	movs	r1, #15
 80080ec:	f04f 30ff 	mov.w	r0, #4294967295
 80080f0:	f7ff ff8e 	bl	8008010 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80080f4:	4b05      	ldr	r3, [pc, #20]	; (800810c <SysTick_Config+0x40>)
 80080f6:	2200      	movs	r2, #0
 80080f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80080fa:	4b04      	ldr	r3, [pc, #16]	; (800810c <SysTick_Config+0x40>)
 80080fc:	2207      	movs	r2, #7
 80080fe:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8008100:	2300      	movs	r3, #0
}
 8008102:	4618      	mov	r0, r3
 8008104:	3708      	adds	r7, #8
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
 800810a:	bf00      	nop
 800810c:	e000e010 	.word	0xe000e010

08008110 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b082      	sub	sp, #8
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f7ff ff29 	bl	8007f70 <__NVIC_SetPriorityGrouping>
}
 800811e:	bf00      	nop
 8008120:	3708      	adds	r7, #8
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}

08008126 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008126:	b580      	push	{r7, lr}
 8008128:	b086      	sub	sp, #24
 800812a:	af00      	add	r7, sp, #0
 800812c:	4603      	mov	r3, r0
 800812e:	60b9      	str	r1, [r7, #8]
 8008130:	607a      	str	r2, [r7, #4]
 8008132:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008134:	2300      	movs	r3, #0
 8008136:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008138:	f7ff ff3e 	bl	8007fb8 <__NVIC_GetPriorityGrouping>
 800813c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	68b9      	ldr	r1, [r7, #8]
 8008142:	6978      	ldr	r0, [r7, #20]
 8008144:	f7ff ff8e 	bl	8008064 <NVIC_EncodePriority>
 8008148:	4602      	mov	r2, r0
 800814a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800814e:	4611      	mov	r1, r2
 8008150:	4618      	mov	r0, r3
 8008152:	f7ff ff5d 	bl	8008010 <__NVIC_SetPriority>
}
 8008156:	bf00      	nop
 8008158:	3718      	adds	r7, #24
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}

0800815e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800815e:	b580      	push	{r7, lr}
 8008160:	b082      	sub	sp, #8
 8008162:	af00      	add	r7, sp, #0
 8008164:	4603      	mov	r3, r0
 8008166:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800816c:	4618      	mov	r0, r3
 800816e:	f7ff ff31 	bl	8007fd4 <__NVIC_EnableIRQ>
}
 8008172:	bf00      	nop
 8008174:	3708      	adds	r7, #8
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}

0800817a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800817a:	b580      	push	{r7, lr}
 800817c:	b082      	sub	sp, #8
 800817e:	af00      	add	r7, sp, #0
 8008180:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f7ff ffa2 	bl	80080cc <SysTick_Config>
 8008188:	4603      	mov	r3, r0
}
 800818a:	4618      	mov	r0, r3
 800818c:	3708      	adds	r7, #8
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
	...

08008194 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b086      	sub	sp, #24
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800819c:	2300      	movs	r3, #0
 800819e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80081a0:	f7ff fab4 	bl	800770c <HAL_GetTick>
 80081a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d101      	bne.n	80081b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80081ac:	2301      	movs	r3, #1
 80081ae:	e099      	b.n	80082e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2202      	movs	r2, #2
 80081bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	681a      	ldr	r2, [r3, #0]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f022 0201 	bic.w	r2, r2, #1
 80081ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80081d0:	e00f      	b.n	80081f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80081d2:	f7ff fa9b 	bl	800770c <HAL_GetTick>
 80081d6:	4602      	mov	r2, r0
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	1ad3      	subs	r3, r2, r3
 80081dc:	2b05      	cmp	r3, #5
 80081de:	d908      	bls.n	80081f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2220      	movs	r2, #32
 80081e4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2203      	movs	r2, #3
 80081ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80081ee:	2303      	movs	r3, #3
 80081f0:	e078      	b.n	80082e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f003 0301 	and.w	r3, r3, #1
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d1e8      	bne.n	80081d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008208:	697a      	ldr	r2, [r7, #20]
 800820a:	4b38      	ldr	r3, [pc, #224]	; (80082ec <HAL_DMA_Init+0x158>)
 800820c:	4013      	ands	r3, r2
 800820e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	685a      	ldr	r2, [r3, #4]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800821e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	691b      	ldr	r3, [r3, #16]
 8008224:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800822a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	699b      	ldr	r3, [r3, #24]
 8008230:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008236:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6a1b      	ldr	r3, [r3, #32]
 800823c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800823e:	697a      	ldr	r2, [r7, #20]
 8008240:	4313      	orrs	r3, r2
 8008242:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008248:	2b04      	cmp	r3, #4
 800824a:	d107      	bne.n	800825c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008254:	4313      	orrs	r3, r2
 8008256:	697a      	ldr	r2, [r7, #20]
 8008258:	4313      	orrs	r3, r2
 800825a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	697a      	ldr	r2, [r7, #20]
 8008262:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	695b      	ldr	r3, [r3, #20]
 800826a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	f023 0307 	bic.w	r3, r3, #7
 8008272:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008278:	697a      	ldr	r2, [r7, #20]
 800827a:	4313      	orrs	r3, r2
 800827c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008282:	2b04      	cmp	r3, #4
 8008284:	d117      	bne.n	80082b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800828a:	697a      	ldr	r2, [r7, #20]
 800828c:	4313      	orrs	r3, r2
 800828e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008294:	2b00      	cmp	r3, #0
 8008296:	d00e      	beq.n	80082b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 fa9d 	bl	80087d8 <DMA_CheckFifoParam>
 800829e:	4603      	mov	r3, r0
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d008      	beq.n	80082b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2240      	movs	r2, #64	; 0x40
 80082a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2201      	movs	r2, #1
 80082ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80082b2:	2301      	movs	r3, #1
 80082b4:	e016      	b.n	80082e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	697a      	ldr	r2, [r7, #20]
 80082bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 fa54 	bl	800876c <DMA_CalcBaseAndBitshift>
 80082c4:	4603      	mov	r3, r0
 80082c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082cc:	223f      	movs	r2, #63	; 0x3f
 80082ce:	409a      	lsls	r2, r3
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2200      	movs	r2, #0
 80082d8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2201      	movs	r2, #1
 80082de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80082e2:	2300      	movs	r3, #0
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3718      	adds	r7, #24
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}
 80082ec:	f010803f 	.word	0xf010803f

080082f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b086      	sub	sp, #24
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	607a      	str	r2, [r7, #4]
 80082fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80082fe:	2300      	movs	r3, #0
 8008300:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008306:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800830e:	2b01      	cmp	r3, #1
 8008310:	d101      	bne.n	8008316 <HAL_DMA_Start_IT+0x26>
 8008312:	2302      	movs	r3, #2
 8008314:	e040      	b.n	8008398 <HAL_DMA_Start_IT+0xa8>
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2201      	movs	r2, #1
 800831a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008324:	b2db      	uxtb	r3, r3
 8008326:	2b01      	cmp	r3, #1
 8008328:	d12f      	bne.n	800838a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2202      	movs	r2, #2
 800832e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2200      	movs	r2, #0
 8008336:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	687a      	ldr	r2, [r7, #4]
 800833c:	68b9      	ldr	r1, [r7, #8]
 800833e:	68f8      	ldr	r0, [r7, #12]
 8008340:	f000 f9e6 	bl	8008710 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008348:	223f      	movs	r2, #63	; 0x3f
 800834a:	409a      	lsls	r2, r3
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f042 0216 	orr.w	r2, r2, #22
 800835e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008364:	2b00      	cmp	r3, #0
 8008366:	d007      	beq.n	8008378 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f042 0208 	orr.w	r2, r2, #8
 8008376:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	681a      	ldr	r2, [r3, #0]
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f042 0201 	orr.w	r2, r2, #1
 8008386:	601a      	str	r2, [r3, #0]
 8008388:	e005      	b.n	8008396 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2200      	movs	r2, #0
 800838e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008392:	2302      	movs	r3, #2
 8008394:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008396:	7dfb      	ldrb	r3, [r7, #23]
}
 8008398:	4618      	mov	r0, r3
 800839a:	3718      	adds	r7, #24
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b083      	sub	sp, #12
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80083ae:	b2db      	uxtb	r3, r3
 80083b0:	2b02      	cmp	r3, #2
 80083b2:	d004      	beq.n	80083be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2280      	movs	r2, #128	; 0x80
 80083b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	e00c      	b.n	80083d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2205      	movs	r2, #5
 80083c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f022 0201 	bic.w	r2, r2, #1
 80083d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80083d6:	2300      	movs	r3, #0
}
 80083d8:	4618      	mov	r0, r3
 80083da:	370c      	adds	r7, #12
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr

080083e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b086      	sub	sp, #24
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80083ec:	2300      	movs	r3, #0
 80083ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80083f0:	4b92      	ldr	r3, [pc, #584]	; (800863c <HAL_DMA_IRQHandler+0x258>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a92      	ldr	r2, [pc, #584]	; (8008640 <HAL_DMA_IRQHandler+0x25c>)
 80083f6:	fba2 2303 	umull	r2, r3, r2, r3
 80083fa:	0a9b      	lsrs	r3, r3, #10
 80083fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008402:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800840e:	2208      	movs	r2, #8
 8008410:	409a      	lsls	r2, r3
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	4013      	ands	r3, r2
 8008416:	2b00      	cmp	r3, #0
 8008418:	d01a      	beq.n	8008450 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f003 0304 	and.w	r3, r3, #4
 8008424:	2b00      	cmp	r3, #0
 8008426:	d013      	beq.n	8008450 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f022 0204 	bic.w	r2, r2, #4
 8008436:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800843c:	2208      	movs	r2, #8
 800843e:	409a      	lsls	r2, r3
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008448:	f043 0201 	orr.w	r2, r3, #1
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008454:	2201      	movs	r2, #1
 8008456:	409a      	lsls	r2, r3
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	4013      	ands	r3, r2
 800845c:	2b00      	cmp	r3, #0
 800845e:	d012      	beq.n	8008486 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	695b      	ldr	r3, [r3, #20]
 8008466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800846a:	2b00      	cmp	r3, #0
 800846c:	d00b      	beq.n	8008486 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008472:	2201      	movs	r2, #1
 8008474:	409a      	lsls	r2, r3
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800847e:	f043 0202 	orr.w	r2, r3, #2
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800848a:	2204      	movs	r2, #4
 800848c:	409a      	lsls	r2, r3
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	4013      	ands	r3, r2
 8008492:	2b00      	cmp	r3, #0
 8008494:	d012      	beq.n	80084bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f003 0302 	and.w	r3, r3, #2
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d00b      	beq.n	80084bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084a8:	2204      	movs	r2, #4
 80084aa:	409a      	lsls	r2, r3
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084b4:	f043 0204 	orr.w	r2, r3, #4
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084c0:	2210      	movs	r2, #16
 80084c2:	409a      	lsls	r2, r3
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	4013      	ands	r3, r2
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d043      	beq.n	8008554 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f003 0308 	and.w	r3, r3, #8
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d03c      	beq.n	8008554 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084de:	2210      	movs	r2, #16
 80084e0:	409a      	lsls	r2, r3
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d018      	beq.n	8008526 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d108      	bne.n	8008514 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008506:	2b00      	cmp	r3, #0
 8008508:	d024      	beq.n	8008554 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	4798      	blx	r3
 8008512:	e01f      	b.n	8008554 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008518:	2b00      	cmp	r3, #0
 800851a:	d01b      	beq.n	8008554 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	4798      	blx	r3
 8008524:	e016      	b.n	8008554 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008530:	2b00      	cmp	r3, #0
 8008532:	d107      	bne.n	8008544 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f022 0208 	bic.w	r2, r2, #8
 8008542:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008548:	2b00      	cmp	r3, #0
 800854a:	d003      	beq.n	8008554 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008558:	2220      	movs	r2, #32
 800855a:	409a      	lsls	r2, r3
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	4013      	ands	r3, r2
 8008560:	2b00      	cmp	r3, #0
 8008562:	f000 808e 	beq.w	8008682 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f003 0310 	and.w	r3, r3, #16
 8008570:	2b00      	cmp	r3, #0
 8008572:	f000 8086 	beq.w	8008682 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800857a:	2220      	movs	r2, #32
 800857c:	409a      	lsls	r2, r3
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008588:	b2db      	uxtb	r3, r3
 800858a:	2b05      	cmp	r3, #5
 800858c:	d136      	bne.n	80085fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	681a      	ldr	r2, [r3, #0]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f022 0216 	bic.w	r2, r2, #22
 800859c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	695a      	ldr	r2, [r3, #20]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80085ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d103      	bne.n	80085be <HAL_DMA_IRQHandler+0x1da>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d007      	beq.n	80085ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f022 0208 	bic.w	r2, r2, #8
 80085cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085d2:	223f      	movs	r2, #63	; 0x3f
 80085d4:	409a      	lsls	r2, r3
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2200      	movs	r2, #0
 80085de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2201      	movs	r2, #1
 80085e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d07d      	beq.n	80086ee <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	4798      	blx	r3
        }
        return;
 80085fa:	e078      	b.n	80086ee <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008606:	2b00      	cmp	r3, #0
 8008608:	d01c      	beq.n	8008644 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008614:	2b00      	cmp	r3, #0
 8008616:	d108      	bne.n	800862a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800861c:	2b00      	cmp	r3, #0
 800861e:	d030      	beq.n	8008682 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	4798      	blx	r3
 8008628:	e02b      	b.n	8008682 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800862e:	2b00      	cmp	r3, #0
 8008630:	d027      	beq.n	8008682 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	4798      	blx	r3
 800863a:	e022      	b.n	8008682 <HAL_DMA_IRQHandler+0x29e>
 800863c:	20000000 	.word	0x20000000
 8008640:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800864e:	2b00      	cmp	r3, #0
 8008650:	d10f      	bne.n	8008672 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	681a      	ldr	r2, [r3, #0]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f022 0210 	bic.w	r2, r2, #16
 8008660:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2200      	movs	r2, #0
 8008666:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2201      	movs	r2, #1
 800866e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008676:	2b00      	cmp	r3, #0
 8008678:	d003      	beq.n	8008682 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008686:	2b00      	cmp	r3, #0
 8008688:	d032      	beq.n	80086f0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800868e:	f003 0301 	and.w	r3, r3, #1
 8008692:	2b00      	cmp	r3, #0
 8008694:	d022      	beq.n	80086dc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2205      	movs	r2, #5
 800869a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	681a      	ldr	r2, [r3, #0]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f022 0201 	bic.w	r2, r2, #1
 80086ac:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	3301      	adds	r3, #1
 80086b2:	60bb      	str	r3, [r7, #8]
 80086b4:	697a      	ldr	r2, [r7, #20]
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d307      	bcc.n	80086ca <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f003 0301 	and.w	r3, r3, #1
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d1f2      	bne.n	80086ae <HAL_DMA_IRQHandler+0x2ca>
 80086c8:	e000      	b.n	80086cc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80086ca:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2200      	movs	r2, #0
 80086d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2201      	movs	r2, #1
 80086d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d005      	beq.n	80086f0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	4798      	blx	r3
 80086ec:	e000      	b.n	80086f0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80086ee:	bf00      	nop
    }
  }
}
 80086f0:	3718      	adds	r7, #24
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
 80086f6:	bf00      	nop

080086f8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b083      	sub	sp, #12
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008704:	4618      	mov	r0, r3
 8008706:	370c      	adds	r7, #12
 8008708:	46bd      	mov	sp, r7
 800870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870e:	4770      	bx	lr

08008710 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008710:	b480      	push	{r7}
 8008712:	b085      	sub	sp, #20
 8008714:	af00      	add	r7, sp, #0
 8008716:	60f8      	str	r0, [r7, #12]
 8008718:	60b9      	str	r1, [r7, #8]
 800871a:	607a      	str	r2, [r7, #4]
 800871c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800872c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	683a      	ldr	r2, [r7, #0]
 8008734:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	689b      	ldr	r3, [r3, #8]
 800873a:	2b40      	cmp	r3, #64	; 0x40
 800873c:	d108      	bne.n	8008750 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	68ba      	ldr	r2, [r7, #8]
 800874c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800874e:	e007      	b.n	8008760 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	68ba      	ldr	r2, [r7, #8]
 8008756:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	60da      	str	r2, [r3, #12]
}
 8008760:	bf00      	nop
 8008762:	3714      	adds	r7, #20
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr

0800876c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800876c:	b480      	push	{r7}
 800876e:	b085      	sub	sp, #20
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	b2db      	uxtb	r3, r3
 800877a:	3b10      	subs	r3, #16
 800877c:	4a14      	ldr	r2, [pc, #80]	; (80087d0 <DMA_CalcBaseAndBitshift+0x64>)
 800877e:	fba2 2303 	umull	r2, r3, r2, r3
 8008782:	091b      	lsrs	r3, r3, #4
 8008784:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008786:	4a13      	ldr	r2, [pc, #76]	; (80087d4 <DMA_CalcBaseAndBitshift+0x68>)
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	4413      	add	r3, r2
 800878c:	781b      	ldrb	r3, [r3, #0]
 800878e:	461a      	mov	r2, r3
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2b03      	cmp	r3, #3
 8008798:	d909      	bls.n	80087ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80087a2:	f023 0303 	bic.w	r3, r3, #3
 80087a6:	1d1a      	adds	r2, r3, #4
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	659a      	str	r2, [r3, #88]	; 0x58
 80087ac:	e007      	b.n	80087be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80087b6:	f023 0303 	bic.w	r3, r3, #3
 80087ba:	687a      	ldr	r2, [r7, #4]
 80087bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3714      	adds	r7, #20
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr
 80087ce:	bf00      	nop
 80087d0:	aaaaaaab 	.word	0xaaaaaaab
 80087d4:	080185f4 	.word	0x080185f4

080087d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80087d8:	b480      	push	{r7}
 80087da:	b085      	sub	sp, #20
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80087e0:	2300      	movs	r3, #0
 80087e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	699b      	ldr	r3, [r3, #24]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d11f      	bne.n	8008832 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	2b03      	cmp	r3, #3
 80087f6:	d855      	bhi.n	80088a4 <DMA_CheckFifoParam+0xcc>
 80087f8:	a201      	add	r2, pc, #4	; (adr r2, 8008800 <DMA_CheckFifoParam+0x28>)
 80087fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087fe:	bf00      	nop
 8008800:	08008811 	.word	0x08008811
 8008804:	08008823 	.word	0x08008823
 8008808:	08008811 	.word	0x08008811
 800880c:	080088a5 	.word	0x080088a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008814:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008818:	2b00      	cmp	r3, #0
 800881a:	d045      	beq.n	80088a8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800881c:	2301      	movs	r3, #1
 800881e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008820:	e042      	b.n	80088a8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008826:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800882a:	d13f      	bne.n	80088ac <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800882c:	2301      	movs	r3, #1
 800882e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008830:	e03c      	b.n	80088ac <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	699b      	ldr	r3, [r3, #24]
 8008836:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800883a:	d121      	bne.n	8008880 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	2b03      	cmp	r3, #3
 8008840:	d836      	bhi.n	80088b0 <DMA_CheckFifoParam+0xd8>
 8008842:	a201      	add	r2, pc, #4	; (adr r2, 8008848 <DMA_CheckFifoParam+0x70>)
 8008844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008848:	08008859 	.word	0x08008859
 800884c:	0800885f 	.word	0x0800885f
 8008850:	08008859 	.word	0x08008859
 8008854:	08008871 	.word	0x08008871
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008858:	2301      	movs	r3, #1
 800885a:	73fb      	strb	r3, [r7, #15]
      break;
 800885c:	e02f      	b.n	80088be <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008862:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008866:	2b00      	cmp	r3, #0
 8008868:	d024      	beq.n	80088b4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800886a:	2301      	movs	r3, #1
 800886c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800886e:	e021      	b.n	80088b4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008874:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008878:	d11e      	bne.n	80088b8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800887a:	2301      	movs	r3, #1
 800887c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800887e:	e01b      	b.n	80088b8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	2b02      	cmp	r3, #2
 8008884:	d902      	bls.n	800888c <DMA_CheckFifoParam+0xb4>
 8008886:	2b03      	cmp	r3, #3
 8008888:	d003      	beq.n	8008892 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800888a:	e018      	b.n	80088be <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800888c:	2301      	movs	r3, #1
 800888e:	73fb      	strb	r3, [r7, #15]
      break;
 8008890:	e015      	b.n	80088be <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008896:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800889a:	2b00      	cmp	r3, #0
 800889c:	d00e      	beq.n	80088bc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800889e:	2301      	movs	r3, #1
 80088a0:	73fb      	strb	r3, [r7, #15]
      break;
 80088a2:	e00b      	b.n	80088bc <DMA_CheckFifoParam+0xe4>
      break;
 80088a4:	bf00      	nop
 80088a6:	e00a      	b.n	80088be <DMA_CheckFifoParam+0xe6>
      break;
 80088a8:	bf00      	nop
 80088aa:	e008      	b.n	80088be <DMA_CheckFifoParam+0xe6>
      break;
 80088ac:	bf00      	nop
 80088ae:	e006      	b.n	80088be <DMA_CheckFifoParam+0xe6>
      break;
 80088b0:	bf00      	nop
 80088b2:	e004      	b.n	80088be <DMA_CheckFifoParam+0xe6>
      break;
 80088b4:	bf00      	nop
 80088b6:	e002      	b.n	80088be <DMA_CheckFifoParam+0xe6>
      break;   
 80088b8:	bf00      	nop
 80088ba:	e000      	b.n	80088be <DMA_CheckFifoParam+0xe6>
      break;
 80088bc:	bf00      	nop
    }
  } 
  
  return status; 
 80088be:	7bfb      	ldrb	r3, [r7, #15]
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3714      	adds	r7, #20
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b089      	sub	sp, #36	; 0x24
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80088d6:	2300      	movs	r3, #0
 80088d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80088da:	2300      	movs	r3, #0
 80088dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80088de:	2300      	movs	r3, #0
 80088e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80088e2:	2300      	movs	r3, #0
 80088e4:	61fb      	str	r3, [r7, #28]
 80088e6:	e177      	b.n	8008bd8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80088e8:	2201      	movs	r2, #1
 80088ea:	69fb      	ldr	r3, [r7, #28]
 80088ec:	fa02 f303 	lsl.w	r3, r2, r3
 80088f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	697a      	ldr	r2, [r7, #20]
 80088f8:	4013      	ands	r3, r2
 80088fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80088fc:	693a      	ldr	r2, [r7, #16]
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	429a      	cmp	r2, r3
 8008902:	f040 8166 	bne.w	8008bd2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	2b01      	cmp	r3, #1
 800890c:	d00b      	beq.n	8008926 <HAL_GPIO_Init+0x5a>
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	2b02      	cmp	r3, #2
 8008914:	d007      	beq.n	8008926 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800891a:	2b11      	cmp	r3, #17
 800891c:	d003      	beq.n	8008926 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	2b12      	cmp	r3, #18
 8008924:	d130      	bne.n	8008988 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	689b      	ldr	r3, [r3, #8]
 800892a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800892c:	69fb      	ldr	r3, [r7, #28]
 800892e:	005b      	lsls	r3, r3, #1
 8008930:	2203      	movs	r2, #3
 8008932:	fa02 f303 	lsl.w	r3, r2, r3
 8008936:	43db      	mvns	r3, r3
 8008938:	69ba      	ldr	r2, [r7, #24]
 800893a:	4013      	ands	r3, r2
 800893c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	68da      	ldr	r2, [r3, #12]
 8008942:	69fb      	ldr	r3, [r7, #28]
 8008944:	005b      	lsls	r3, r3, #1
 8008946:	fa02 f303 	lsl.w	r3, r2, r3
 800894a:	69ba      	ldr	r2, [r7, #24]
 800894c:	4313      	orrs	r3, r2
 800894e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	69ba      	ldr	r2, [r7, #24]
 8008954:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800895c:	2201      	movs	r2, #1
 800895e:	69fb      	ldr	r3, [r7, #28]
 8008960:	fa02 f303 	lsl.w	r3, r2, r3
 8008964:	43db      	mvns	r3, r3
 8008966:	69ba      	ldr	r2, [r7, #24]
 8008968:	4013      	ands	r3, r2
 800896a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	091b      	lsrs	r3, r3, #4
 8008972:	f003 0201 	and.w	r2, r3, #1
 8008976:	69fb      	ldr	r3, [r7, #28]
 8008978:	fa02 f303 	lsl.w	r3, r2, r3
 800897c:	69ba      	ldr	r2, [r7, #24]
 800897e:	4313      	orrs	r3, r2
 8008980:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	69ba      	ldr	r2, [r7, #24]
 8008986:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	68db      	ldr	r3, [r3, #12]
 800898c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800898e:	69fb      	ldr	r3, [r7, #28]
 8008990:	005b      	lsls	r3, r3, #1
 8008992:	2203      	movs	r2, #3
 8008994:	fa02 f303 	lsl.w	r3, r2, r3
 8008998:	43db      	mvns	r3, r3
 800899a:	69ba      	ldr	r2, [r7, #24]
 800899c:	4013      	ands	r3, r2
 800899e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	689a      	ldr	r2, [r3, #8]
 80089a4:	69fb      	ldr	r3, [r7, #28]
 80089a6:	005b      	lsls	r3, r3, #1
 80089a8:	fa02 f303 	lsl.w	r3, r2, r3
 80089ac:	69ba      	ldr	r2, [r7, #24]
 80089ae:	4313      	orrs	r3, r2
 80089b0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	69ba      	ldr	r2, [r7, #24]
 80089b6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	2b02      	cmp	r3, #2
 80089be:	d003      	beq.n	80089c8 <HAL_GPIO_Init+0xfc>
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	2b12      	cmp	r3, #18
 80089c6:	d123      	bne.n	8008a10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	08da      	lsrs	r2, r3, #3
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	3208      	adds	r2, #8
 80089d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80089d6:	69fb      	ldr	r3, [r7, #28]
 80089d8:	f003 0307 	and.w	r3, r3, #7
 80089dc:	009b      	lsls	r3, r3, #2
 80089de:	220f      	movs	r2, #15
 80089e0:	fa02 f303 	lsl.w	r3, r2, r3
 80089e4:	43db      	mvns	r3, r3
 80089e6:	69ba      	ldr	r2, [r7, #24]
 80089e8:	4013      	ands	r3, r2
 80089ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	691a      	ldr	r2, [r3, #16]
 80089f0:	69fb      	ldr	r3, [r7, #28]
 80089f2:	f003 0307 	and.w	r3, r3, #7
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	fa02 f303 	lsl.w	r3, r2, r3
 80089fc:	69ba      	ldr	r2, [r7, #24]
 80089fe:	4313      	orrs	r3, r2
 8008a00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008a02:	69fb      	ldr	r3, [r7, #28]
 8008a04:	08da      	lsrs	r2, r3, #3
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	3208      	adds	r2, #8
 8008a0a:	69b9      	ldr	r1, [r7, #24]
 8008a0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008a16:	69fb      	ldr	r3, [r7, #28]
 8008a18:	005b      	lsls	r3, r3, #1
 8008a1a:	2203      	movs	r2, #3
 8008a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a20:	43db      	mvns	r3, r3
 8008a22:	69ba      	ldr	r2, [r7, #24]
 8008a24:	4013      	ands	r3, r2
 8008a26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	f003 0203 	and.w	r2, r3, #3
 8008a30:	69fb      	ldr	r3, [r7, #28]
 8008a32:	005b      	lsls	r3, r3, #1
 8008a34:	fa02 f303 	lsl.w	r3, r2, r3
 8008a38:	69ba      	ldr	r2, [r7, #24]
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	69ba      	ldr	r2, [r7, #24]
 8008a42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	f000 80c0 	beq.w	8008bd2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008a52:	2300      	movs	r3, #0
 8008a54:	60fb      	str	r3, [r7, #12]
 8008a56:	4b65      	ldr	r3, [pc, #404]	; (8008bec <HAL_GPIO_Init+0x320>)
 8008a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a5a:	4a64      	ldr	r2, [pc, #400]	; (8008bec <HAL_GPIO_Init+0x320>)
 8008a5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008a60:	6453      	str	r3, [r2, #68]	; 0x44
 8008a62:	4b62      	ldr	r3, [pc, #392]	; (8008bec <HAL_GPIO_Init+0x320>)
 8008a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a6a:	60fb      	str	r3, [r7, #12]
 8008a6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008a6e:	4a60      	ldr	r2, [pc, #384]	; (8008bf0 <HAL_GPIO_Init+0x324>)
 8008a70:	69fb      	ldr	r3, [r7, #28]
 8008a72:	089b      	lsrs	r3, r3, #2
 8008a74:	3302      	adds	r3, #2
 8008a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008a7c:	69fb      	ldr	r3, [r7, #28]
 8008a7e:	f003 0303 	and.w	r3, r3, #3
 8008a82:	009b      	lsls	r3, r3, #2
 8008a84:	220f      	movs	r2, #15
 8008a86:	fa02 f303 	lsl.w	r3, r2, r3
 8008a8a:	43db      	mvns	r3, r3
 8008a8c:	69ba      	ldr	r2, [r7, #24]
 8008a8e:	4013      	ands	r3, r2
 8008a90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	4a57      	ldr	r2, [pc, #348]	; (8008bf4 <HAL_GPIO_Init+0x328>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d037      	beq.n	8008b0a <HAL_GPIO_Init+0x23e>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	4a56      	ldr	r2, [pc, #344]	; (8008bf8 <HAL_GPIO_Init+0x32c>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d031      	beq.n	8008b06 <HAL_GPIO_Init+0x23a>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	4a55      	ldr	r2, [pc, #340]	; (8008bfc <HAL_GPIO_Init+0x330>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d02b      	beq.n	8008b02 <HAL_GPIO_Init+0x236>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	4a54      	ldr	r2, [pc, #336]	; (8008c00 <HAL_GPIO_Init+0x334>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d025      	beq.n	8008afe <HAL_GPIO_Init+0x232>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	4a53      	ldr	r2, [pc, #332]	; (8008c04 <HAL_GPIO_Init+0x338>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d01f      	beq.n	8008afa <HAL_GPIO_Init+0x22e>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	4a52      	ldr	r2, [pc, #328]	; (8008c08 <HAL_GPIO_Init+0x33c>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d019      	beq.n	8008af6 <HAL_GPIO_Init+0x22a>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	4a51      	ldr	r2, [pc, #324]	; (8008c0c <HAL_GPIO_Init+0x340>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d013      	beq.n	8008af2 <HAL_GPIO_Init+0x226>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	4a50      	ldr	r2, [pc, #320]	; (8008c10 <HAL_GPIO_Init+0x344>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d00d      	beq.n	8008aee <HAL_GPIO_Init+0x222>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	4a4f      	ldr	r2, [pc, #316]	; (8008c14 <HAL_GPIO_Init+0x348>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d007      	beq.n	8008aea <HAL_GPIO_Init+0x21e>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	4a4e      	ldr	r2, [pc, #312]	; (8008c18 <HAL_GPIO_Init+0x34c>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d101      	bne.n	8008ae6 <HAL_GPIO_Init+0x21a>
 8008ae2:	2309      	movs	r3, #9
 8008ae4:	e012      	b.n	8008b0c <HAL_GPIO_Init+0x240>
 8008ae6:	230a      	movs	r3, #10
 8008ae8:	e010      	b.n	8008b0c <HAL_GPIO_Init+0x240>
 8008aea:	2308      	movs	r3, #8
 8008aec:	e00e      	b.n	8008b0c <HAL_GPIO_Init+0x240>
 8008aee:	2307      	movs	r3, #7
 8008af0:	e00c      	b.n	8008b0c <HAL_GPIO_Init+0x240>
 8008af2:	2306      	movs	r3, #6
 8008af4:	e00a      	b.n	8008b0c <HAL_GPIO_Init+0x240>
 8008af6:	2305      	movs	r3, #5
 8008af8:	e008      	b.n	8008b0c <HAL_GPIO_Init+0x240>
 8008afa:	2304      	movs	r3, #4
 8008afc:	e006      	b.n	8008b0c <HAL_GPIO_Init+0x240>
 8008afe:	2303      	movs	r3, #3
 8008b00:	e004      	b.n	8008b0c <HAL_GPIO_Init+0x240>
 8008b02:	2302      	movs	r3, #2
 8008b04:	e002      	b.n	8008b0c <HAL_GPIO_Init+0x240>
 8008b06:	2301      	movs	r3, #1
 8008b08:	e000      	b.n	8008b0c <HAL_GPIO_Init+0x240>
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	69fa      	ldr	r2, [r7, #28]
 8008b0e:	f002 0203 	and.w	r2, r2, #3
 8008b12:	0092      	lsls	r2, r2, #2
 8008b14:	4093      	lsls	r3, r2
 8008b16:	69ba      	ldr	r2, [r7, #24]
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008b1c:	4934      	ldr	r1, [pc, #208]	; (8008bf0 <HAL_GPIO_Init+0x324>)
 8008b1e:	69fb      	ldr	r3, [r7, #28]
 8008b20:	089b      	lsrs	r3, r3, #2
 8008b22:	3302      	adds	r3, #2
 8008b24:	69ba      	ldr	r2, [r7, #24]
 8008b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008b2a:	4b3c      	ldr	r3, [pc, #240]	; (8008c1c <HAL_GPIO_Init+0x350>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	43db      	mvns	r3, r3
 8008b34:	69ba      	ldr	r2, [r7, #24]
 8008b36:	4013      	ands	r3, r2
 8008b38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d003      	beq.n	8008b4e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8008b46:	69ba      	ldr	r2, [r7, #24]
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008b4e:	4a33      	ldr	r2, [pc, #204]	; (8008c1c <HAL_GPIO_Init+0x350>)
 8008b50:	69bb      	ldr	r3, [r7, #24]
 8008b52:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008b54:	4b31      	ldr	r3, [pc, #196]	; (8008c1c <HAL_GPIO_Init+0x350>)
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	43db      	mvns	r3, r3
 8008b5e:	69ba      	ldr	r2, [r7, #24]
 8008b60:	4013      	ands	r3, r2
 8008b62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d003      	beq.n	8008b78 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008b70:	69ba      	ldr	r2, [r7, #24]
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	4313      	orrs	r3, r2
 8008b76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008b78:	4a28      	ldr	r2, [pc, #160]	; (8008c1c <HAL_GPIO_Init+0x350>)
 8008b7a:	69bb      	ldr	r3, [r7, #24]
 8008b7c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008b7e:	4b27      	ldr	r3, [pc, #156]	; (8008c1c <HAL_GPIO_Init+0x350>)
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	43db      	mvns	r3, r3
 8008b88:	69ba      	ldr	r2, [r7, #24]
 8008b8a:	4013      	ands	r3, r2
 8008b8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d003      	beq.n	8008ba2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008b9a:	69ba      	ldr	r2, [r7, #24]
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008ba2:	4a1e      	ldr	r2, [pc, #120]	; (8008c1c <HAL_GPIO_Init+0x350>)
 8008ba4:	69bb      	ldr	r3, [r7, #24]
 8008ba6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008ba8:	4b1c      	ldr	r3, [pc, #112]	; (8008c1c <HAL_GPIO_Init+0x350>)
 8008baa:	68db      	ldr	r3, [r3, #12]
 8008bac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	43db      	mvns	r3, r3
 8008bb2:	69ba      	ldr	r2, [r7, #24]
 8008bb4:	4013      	ands	r3, r2
 8008bb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d003      	beq.n	8008bcc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008bc4:	69ba      	ldr	r2, [r7, #24]
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008bcc:	4a13      	ldr	r2, [pc, #76]	; (8008c1c <HAL_GPIO_Init+0x350>)
 8008bce:	69bb      	ldr	r3, [r7, #24]
 8008bd0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	61fb      	str	r3, [r7, #28]
 8008bd8:	69fb      	ldr	r3, [r7, #28]
 8008bda:	2b0f      	cmp	r3, #15
 8008bdc:	f67f ae84 	bls.w	80088e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008be0:	bf00      	nop
 8008be2:	3724      	adds	r7, #36	; 0x24
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr
 8008bec:	40023800 	.word	0x40023800
 8008bf0:	40013800 	.word	0x40013800
 8008bf4:	40020000 	.word	0x40020000
 8008bf8:	40020400 	.word	0x40020400
 8008bfc:	40020800 	.word	0x40020800
 8008c00:	40020c00 	.word	0x40020c00
 8008c04:	40021000 	.word	0x40021000
 8008c08:	40021400 	.word	0x40021400
 8008c0c:	40021800 	.word	0x40021800
 8008c10:	40021c00 	.word	0x40021c00
 8008c14:	40022000 	.word	0x40022000
 8008c18:	40022400 	.word	0x40022400
 8008c1c:	40013c00 	.word	0x40013c00

08008c20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b085      	sub	sp, #20
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	460b      	mov	r3, r1
 8008c2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	691a      	ldr	r2, [r3, #16]
 8008c30:	887b      	ldrh	r3, [r7, #2]
 8008c32:	4013      	ands	r3, r2
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d002      	beq.n	8008c3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	73fb      	strb	r3, [r7, #15]
 8008c3c:	e001      	b.n	8008c42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3714      	adds	r7, #20
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr

08008c50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b083      	sub	sp, #12
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	460b      	mov	r3, r1
 8008c5a:	807b      	strh	r3, [r7, #2]
 8008c5c:	4613      	mov	r3, r2
 8008c5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008c60:	787b      	ldrb	r3, [r7, #1]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d003      	beq.n	8008c6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008c66:	887a      	ldrh	r2, [r7, #2]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008c6c:	e003      	b.n	8008c76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008c6e:	887b      	ldrh	r3, [r7, #2]
 8008c70:	041a      	lsls	r2, r3, #16
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	619a      	str	r2, [r3, #24]
}
 8008c76:	bf00      	nop
 8008c78:	370c      	adds	r7, #12
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c80:	4770      	bx	lr
	...

08008c84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b082      	sub	sp, #8
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008c8e:	4b08      	ldr	r3, [pc, #32]	; (8008cb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008c90:	695a      	ldr	r2, [r3, #20]
 8008c92:	88fb      	ldrh	r3, [r7, #6]
 8008c94:	4013      	ands	r3, r2
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d006      	beq.n	8008ca8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008c9a:	4a05      	ldr	r2, [pc, #20]	; (8008cb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008c9c:	88fb      	ldrh	r3, [r7, #6]
 8008c9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008ca0:	88fb      	ldrh	r3, [r7, #6]
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f7fb fbf3 	bl	800448e <HAL_GPIO_EXTI_Callback>
  }
}
 8008ca8:	bf00      	nop
 8008caa:	3708      	adds	r7, #8
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}
 8008cb0:	40013c00 	.word	0x40013c00

08008cb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d101      	bne.n	8008cc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	e11f      	b.n	8008f06 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d106      	bne.n	8008ce0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f7fc fc52 	bl	8005584 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2224      	movs	r2, #36	; 0x24
 8008ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	681a      	ldr	r2, [r3, #0]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f022 0201 	bic.w	r2, r2, #1
 8008cf6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	681a      	ldr	r2, [r3, #0]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008d06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	681a      	ldr	r2, [r3, #0]
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008d16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008d18:	f001 f96e 	bl	8009ff8 <HAL_RCC_GetPCLK1Freq>
 8008d1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	4a7b      	ldr	r2, [pc, #492]	; (8008f10 <HAL_I2C_Init+0x25c>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d807      	bhi.n	8008d38 <HAL_I2C_Init+0x84>
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	4a7a      	ldr	r2, [pc, #488]	; (8008f14 <HAL_I2C_Init+0x260>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	bf94      	ite	ls
 8008d30:	2301      	movls	r3, #1
 8008d32:	2300      	movhi	r3, #0
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	e006      	b.n	8008d46 <HAL_I2C_Init+0x92>
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	4a77      	ldr	r2, [pc, #476]	; (8008f18 <HAL_I2C_Init+0x264>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	bf94      	ite	ls
 8008d40:	2301      	movls	r3, #1
 8008d42:	2300      	movhi	r3, #0
 8008d44:	b2db      	uxtb	r3, r3
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d001      	beq.n	8008d4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	e0db      	b.n	8008f06 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	4a72      	ldr	r2, [pc, #456]	; (8008f1c <HAL_I2C_Init+0x268>)
 8008d52:	fba2 2303 	umull	r2, r3, r2, r3
 8008d56:	0c9b      	lsrs	r3, r3, #18
 8008d58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	68ba      	ldr	r2, [r7, #8]
 8008d6a:	430a      	orrs	r2, r1
 8008d6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	6a1b      	ldr	r3, [r3, #32]
 8008d74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	4a64      	ldr	r2, [pc, #400]	; (8008f10 <HAL_I2C_Init+0x25c>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d802      	bhi.n	8008d88 <HAL_I2C_Init+0xd4>
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	3301      	adds	r3, #1
 8008d86:	e009      	b.n	8008d9c <HAL_I2C_Init+0xe8>
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008d8e:	fb02 f303 	mul.w	r3, r2, r3
 8008d92:	4a63      	ldr	r2, [pc, #396]	; (8008f20 <HAL_I2C_Init+0x26c>)
 8008d94:	fba2 2303 	umull	r2, r3, r2, r3
 8008d98:	099b      	lsrs	r3, r3, #6
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	687a      	ldr	r2, [r7, #4]
 8008d9e:	6812      	ldr	r2, [r2, #0]
 8008da0:	430b      	orrs	r3, r1
 8008da2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	69db      	ldr	r3, [r3, #28]
 8008daa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008dae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	4956      	ldr	r1, [pc, #344]	; (8008f10 <HAL_I2C_Init+0x25c>)
 8008db8:	428b      	cmp	r3, r1
 8008dba:	d80d      	bhi.n	8008dd8 <HAL_I2C_Init+0x124>
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	1e59      	subs	r1, r3, #1
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	005b      	lsls	r3, r3, #1
 8008dc6:	fbb1 f3f3 	udiv	r3, r1, r3
 8008dca:	3301      	adds	r3, #1
 8008dcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008dd0:	2b04      	cmp	r3, #4
 8008dd2:	bf38      	it	cc
 8008dd4:	2304      	movcc	r3, #4
 8008dd6:	e04f      	b.n	8008e78 <HAL_I2C_Init+0x1c4>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	689b      	ldr	r3, [r3, #8]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d111      	bne.n	8008e04 <HAL_I2C_Init+0x150>
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	1e58      	subs	r0, r3, #1
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6859      	ldr	r1, [r3, #4]
 8008de8:	460b      	mov	r3, r1
 8008dea:	005b      	lsls	r3, r3, #1
 8008dec:	440b      	add	r3, r1
 8008dee:	fbb0 f3f3 	udiv	r3, r0, r3
 8008df2:	3301      	adds	r3, #1
 8008df4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	bf0c      	ite	eq
 8008dfc:	2301      	moveq	r3, #1
 8008dfe:	2300      	movne	r3, #0
 8008e00:	b2db      	uxtb	r3, r3
 8008e02:	e012      	b.n	8008e2a <HAL_I2C_Init+0x176>
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	1e58      	subs	r0, r3, #1
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6859      	ldr	r1, [r3, #4]
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	440b      	add	r3, r1
 8008e12:	0099      	lsls	r1, r3, #2
 8008e14:	440b      	add	r3, r1
 8008e16:	fbb0 f3f3 	udiv	r3, r0, r3
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	bf0c      	ite	eq
 8008e24:	2301      	moveq	r3, #1
 8008e26:	2300      	movne	r3, #0
 8008e28:	b2db      	uxtb	r3, r3
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d001      	beq.n	8008e32 <HAL_I2C_Init+0x17e>
 8008e2e:	2301      	movs	r3, #1
 8008e30:	e022      	b.n	8008e78 <HAL_I2C_Init+0x1c4>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	689b      	ldr	r3, [r3, #8]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d10e      	bne.n	8008e58 <HAL_I2C_Init+0x1a4>
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	1e58      	subs	r0, r3, #1
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6859      	ldr	r1, [r3, #4]
 8008e42:	460b      	mov	r3, r1
 8008e44:	005b      	lsls	r3, r3, #1
 8008e46:	440b      	add	r3, r1
 8008e48:	fbb0 f3f3 	udiv	r3, r0, r3
 8008e4c:	3301      	adds	r3, #1
 8008e4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e56:	e00f      	b.n	8008e78 <HAL_I2C_Init+0x1c4>
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	1e58      	subs	r0, r3, #1
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6859      	ldr	r1, [r3, #4]
 8008e60:	460b      	mov	r3, r1
 8008e62:	009b      	lsls	r3, r3, #2
 8008e64:	440b      	add	r3, r1
 8008e66:	0099      	lsls	r1, r3, #2
 8008e68:	440b      	add	r3, r1
 8008e6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8008e6e:	3301      	adds	r3, #1
 8008e70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008e78:	6879      	ldr	r1, [r7, #4]
 8008e7a:	6809      	ldr	r1, [r1, #0]
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	69da      	ldr	r2, [r3, #28]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6a1b      	ldr	r3, [r3, #32]
 8008e92:	431a      	orrs	r2, r3
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	430a      	orrs	r2, r1
 8008e9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	689b      	ldr	r3, [r3, #8]
 8008ea2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008ea6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008eaa:	687a      	ldr	r2, [r7, #4]
 8008eac:	6911      	ldr	r1, [r2, #16]
 8008eae:	687a      	ldr	r2, [r7, #4]
 8008eb0:	68d2      	ldr	r2, [r2, #12]
 8008eb2:	4311      	orrs	r1, r2
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	6812      	ldr	r2, [r2, #0]
 8008eb8:	430b      	orrs	r3, r1
 8008eba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	68db      	ldr	r3, [r3, #12]
 8008ec2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	695a      	ldr	r2, [r3, #20]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	699b      	ldr	r3, [r3, #24]
 8008ece:	431a      	orrs	r2, r3
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	430a      	orrs	r2, r1
 8008ed6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	681a      	ldr	r2, [r3, #0]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f042 0201 	orr.w	r2, r2, #1
 8008ee6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2200      	movs	r2, #0
 8008eec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2220      	movs	r2, #32
 8008ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2200      	movs	r2, #0
 8008f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008f04:	2300      	movs	r3, #0
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3710      	adds	r7, #16
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	bf00      	nop
 8008f10:	000186a0 	.word	0x000186a0
 8008f14:	001e847f 	.word	0x001e847f
 8008f18:	003d08ff 	.word	0x003d08ff
 8008f1c:	431bde83 	.word	0x431bde83
 8008f20:	10624dd3 	.word	0x10624dd3

08008f24 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b088      	sub	sp, #32
 8008f28:	af02      	add	r7, sp, #8
 8008f2a:	60f8      	str	r0, [r7, #12]
 8008f2c:	607a      	str	r2, [r7, #4]
 8008f2e:	461a      	mov	r2, r3
 8008f30:	460b      	mov	r3, r1
 8008f32:	817b      	strh	r3, [r7, #10]
 8008f34:	4613      	mov	r3, r2
 8008f36:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008f38:	f7fe fbe8 	bl	800770c <HAL_GetTick>
 8008f3c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f44:	b2db      	uxtb	r3, r3
 8008f46:	2b20      	cmp	r3, #32
 8008f48:	f040 80e0 	bne.w	800910c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	9300      	str	r3, [sp, #0]
 8008f50:	2319      	movs	r3, #25
 8008f52:	2201      	movs	r2, #1
 8008f54:	4970      	ldr	r1, [pc, #448]	; (8009118 <HAL_I2C_Master_Transmit+0x1f4>)
 8008f56:	68f8      	ldr	r0, [r7, #12]
 8008f58:	f000 fc58 	bl	800980c <I2C_WaitOnFlagUntilTimeout>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d001      	beq.n	8008f66 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8008f62:	2302      	movs	r3, #2
 8008f64:	e0d3      	b.n	800910e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d101      	bne.n	8008f74 <HAL_I2C_Master_Transmit+0x50>
 8008f70:	2302      	movs	r3, #2
 8008f72:	e0cc      	b.n	800910e <HAL_I2C_Master_Transmit+0x1ea>
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2201      	movs	r2, #1
 8008f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f003 0301 	and.w	r3, r3, #1
 8008f86:	2b01      	cmp	r3, #1
 8008f88:	d007      	beq.n	8008f9a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	681a      	ldr	r2, [r3, #0]
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f042 0201 	orr.w	r2, r2, #1
 8008f98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	681a      	ldr	r2, [r3, #0]
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008fa8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	2221      	movs	r2, #33	; 0x21
 8008fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	2210      	movs	r2, #16
 8008fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	687a      	ldr	r2, [r7, #4]
 8008fc4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	893a      	ldrh	r2, [r7, #8]
 8008fca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fd0:	b29a      	uxth	r2, r3
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	4a50      	ldr	r2, [pc, #320]	; (800911c <HAL_I2C_Master_Transmit+0x1f8>)
 8008fda:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008fdc:	8979      	ldrh	r1, [r7, #10]
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	6a3a      	ldr	r2, [r7, #32]
 8008fe2:	68f8      	ldr	r0, [r7, #12]
 8008fe4:	f000 fac2 	bl	800956c <I2C_MasterRequestWrite>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d001      	beq.n	8008ff2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	e08d      	b.n	800910e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	613b      	str	r3, [r7, #16]
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	695b      	ldr	r3, [r3, #20]
 8008ffc:	613b      	str	r3, [r7, #16]
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	699b      	ldr	r3, [r3, #24]
 8009004:	613b      	str	r3, [r7, #16]
 8009006:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009008:	e066      	b.n	80090d8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800900a:	697a      	ldr	r2, [r7, #20]
 800900c:	6a39      	ldr	r1, [r7, #32]
 800900e:	68f8      	ldr	r0, [r7, #12]
 8009010:	f000 fcd2 	bl	80099b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8009014:	4603      	mov	r3, r0
 8009016:	2b00      	cmp	r3, #0
 8009018:	d00d      	beq.n	8009036 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800901e:	2b04      	cmp	r3, #4
 8009020:	d107      	bne.n	8009032 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	681a      	ldr	r2, [r3, #0]
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009030:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009032:	2301      	movs	r3, #1
 8009034:	e06b      	b.n	800910e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800903a:	781a      	ldrb	r2, [r3, #0]
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009046:	1c5a      	adds	r2, r3, #1
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009050:	b29b      	uxth	r3, r3
 8009052:	3b01      	subs	r3, #1
 8009054:	b29a      	uxth	r2, r3
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800905e:	3b01      	subs	r3, #1
 8009060:	b29a      	uxth	r2, r3
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	695b      	ldr	r3, [r3, #20]
 800906c:	f003 0304 	and.w	r3, r3, #4
 8009070:	2b04      	cmp	r3, #4
 8009072:	d11b      	bne.n	80090ac <HAL_I2C_Master_Transmit+0x188>
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009078:	2b00      	cmp	r3, #0
 800907a:	d017      	beq.n	80090ac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009080:	781a      	ldrb	r2, [r3, #0]
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800908c:	1c5a      	adds	r2, r3, #1
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009096:	b29b      	uxth	r3, r3
 8009098:	3b01      	subs	r3, #1
 800909a:	b29a      	uxth	r2, r3
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090a4:	3b01      	subs	r3, #1
 80090a6:	b29a      	uxth	r2, r3
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80090ac:	697a      	ldr	r2, [r7, #20]
 80090ae:	6a39      	ldr	r1, [r7, #32]
 80090b0:	68f8      	ldr	r0, [r7, #12]
 80090b2:	f000 fcc2 	bl	8009a3a <I2C_WaitOnBTFFlagUntilTimeout>
 80090b6:	4603      	mov	r3, r0
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d00d      	beq.n	80090d8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090c0:	2b04      	cmp	r3, #4
 80090c2:	d107      	bne.n	80090d4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090d2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80090d4:	2301      	movs	r3, #1
 80090d6:	e01a      	b.n	800910e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d194      	bne.n	800900a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	681a      	ldr	r2, [r3, #0]
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2220      	movs	r2, #32
 80090f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2200      	movs	r2, #0
 80090fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	2200      	movs	r2, #0
 8009104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009108:	2300      	movs	r3, #0
 800910a:	e000      	b.n	800910e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800910c:	2302      	movs	r3, #2
  }
}
 800910e:	4618      	mov	r0, r3
 8009110:	3718      	adds	r7, #24
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
 8009116:	bf00      	nop
 8009118:	00100002 	.word	0x00100002
 800911c:	ffff0000 	.word	0xffff0000

08009120 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b08c      	sub	sp, #48	; 0x30
 8009124:	af02      	add	r7, sp, #8
 8009126:	60f8      	str	r0, [r7, #12]
 8009128:	607a      	str	r2, [r7, #4]
 800912a:	461a      	mov	r2, r3
 800912c:	460b      	mov	r3, r1
 800912e:	817b      	strh	r3, [r7, #10]
 8009130:	4613      	mov	r3, r2
 8009132:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009134:	f7fe faea 	bl	800770c <HAL_GetTick>
 8009138:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009140:	b2db      	uxtb	r3, r3
 8009142:	2b20      	cmp	r3, #32
 8009144:	f040 820b 	bne.w	800955e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800914a:	9300      	str	r3, [sp, #0]
 800914c:	2319      	movs	r3, #25
 800914e:	2201      	movs	r2, #1
 8009150:	497c      	ldr	r1, [pc, #496]	; (8009344 <HAL_I2C_Master_Receive+0x224>)
 8009152:	68f8      	ldr	r0, [r7, #12]
 8009154:	f000 fb5a 	bl	800980c <I2C_WaitOnFlagUntilTimeout>
 8009158:	4603      	mov	r3, r0
 800915a:	2b00      	cmp	r3, #0
 800915c:	d001      	beq.n	8009162 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800915e:	2302      	movs	r3, #2
 8009160:	e1fe      	b.n	8009560 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009168:	2b01      	cmp	r3, #1
 800916a:	d101      	bne.n	8009170 <HAL_I2C_Master_Receive+0x50>
 800916c:	2302      	movs	r3, #2
 800916e:	e1f7      	b.n	8009560 <HAL_I2C_Master_Receive+0x440>
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	2201      	movs	r2, #1
 8009174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f003 0301 	and.w	r3, r3, #1
 8009182:	2b01      	cmp	r3, #1
 8009184:	d007      	beq.n	8009196 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	681a      	ldr	r2, [r3, #0]
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f042 0201 	orr.w	r2, r2, #1
 8009194:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	681a      	ldr	r2, [r3, #0]
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80091a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2222      	movs	r2, #34	; 0x22
 80091aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	2210      	movs	r2, #16
 80091b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	2200      	movs	r2, #0
 80091ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	687a      	ldr	r2, [r7, #4]
 80091c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	893a      	ldrh	r2, [r7, #8]
 80091c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091cc:	b29a      	uxth	r2, r3
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	4a5c      	ldr	r2, [pc, #368]	; (8009348 <HAL_I2C_Master_Receive+0x228>)
 80091d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80091d8:	8979      	ldrh	r1, [r7, #10]
 80091da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091de:	68f8      	ldr	r0, [r7, #12]
 80091e0:	f000 fa46 	bl	8009670 <I2C_MasterRequestRead>
 80091e4:	4603      	mov	r3, r0
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d001      	beq.n	80091ee <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80091ea:	2301      	movs	r3, #1
 80091ec:	e1b8      	b.n	8009560 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d113      	bne.n	800921e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80091f6:	2300      	movs	r3, #0
 80091f8:	623b      	str	r3, [r7, #32]
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	695b      	ldr	r3, [r3, #20]
 8009200:	623b      	str	r3, [r7, #32]
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	699b      	ldr	r3, [r3, #24]
 8009208:	623b      	str	r3, [r7, #32]
 800920a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	681a      	ldr	r2, [r3, #0]
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800921a:	601a      	str	r2, [r3, #0]
 800921c:	e18c      	b.n	8009538 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009222:	2b01      	cmp	r3, #1
 8009224:	d11b      	bne.n	800925e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	681a      	ldr	r2, [r3, #0]
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009234:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009236:	2300      	movs	r3, #0
 8009238:	61fb      	str	r3, [r7, #28]
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	695b      	ldr	r3, [r3, #20]
 8009240:	61fb      	str	r3, [r7, #28]
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	699b      	ldr	r3, [r3, #24]
 8009248:	61fb      	str	r3, [r7, #28]
 800924a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	681a      	ldr	r2, [r3, #0]
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800925a:	601a      	str	r2, [r3, #0]
 800925c:	e16c      	b.n	8009538 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009262:	2b02      	cmp	r3, #2
 8009264:	d11b      	bne.n	800929e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009274:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	681a      	ldr	r2, [r3, #0]
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009284:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009286:	2300      	movs	r3, #0
 8009288:	61bb      	str	r3, [r7, #24]
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	695b      	ldr	r3, [r3, #20]
 8009290:	61bb      	str	r3, [r7, #24]
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	699b      	ldr	r3, [r3, #24]
 8009298:	61bb      	str	r3, [r7, #24]
 800929a:	69bb      	ldr	r3, [r7, #24]
 800929c:	e14c      	b.n	8009538 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80092ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80092ae:	2300      	movs	r3, #0
 80092b0:	617b      	str	r3, [r7, #20]
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	695b      	ldr	r3, [r3, #20]
 80092b8:	617b      	str	r3, [r7, #20]
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	699b      	ldr	r3, [r3, #24]
 80092c0:	617b      	str	r3, [r7, #20]
 80092c2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80092c4:	e138      	b.n	8009538 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092ca:	2b03      	cmp	r3, #3
 80092cc:	f200 80f1 	bhi.w	80094b2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d123      	bne.n	8009320 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80092d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80092dc:	68f8      	ldr	r0, [r7, #12]
 80092de:	f000 fbed 	bl	8009abc <I2C_WaitOnRXNEFlagUntilTimeout>
 80092e2:	4603      	mov	r3, r0
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d001      	beq.n	80092ec <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80092e8:	2301      	movs	r3, #1
 80092ea:	e139      	b.n	8009560 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	691a      	ldr	r2, [r3, #16]
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f6:	b2d2      	uxtb	r2, r2
 80092f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092fe:	1c5a      	adds	r2, r3, #1
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009308:	3b01      	subs	r3, #1
 800930a:	b29a      	uxth	r2, r3
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009314:	b29b      	uxth	r3, r3
 8009316:	3b01      	subs	r3, #1
 8009318:	b29a      	uxth	r2, r3
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800931e:	e10b      	b.n	8009538 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009324:	2b02      	cmp	r3, #2
 8009326:	d14e      	bne.n	80093c6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800932a:	9300      	str	r3, [sp, #0]
 800932c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800932e:	2200      	movs	r2, #0
 8009330:	4906      	ldr	r1, [pc, #24]	; (800934c <HAL_I2C_Master_Receive+0x22c>)
 8009332:	68f8      	ldr	r0, [r7, #12]
 8009334:	f000 fa6a 	bl	800980c <I2C_WaitOnFlagUntilTimeout>
 8009338:	4603      	mov	r3, r0
 800933a:	2b00      	cmp	r3, #0
 800933c:	d008      	beq.n	8009350 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800933e:	2301      	movs	r3, #1
 8009340:	e10e      	b.n	8009560 <HAL_I2C_Master_Receive+0x440>
 8009342:	bf00      	nop
 8009344:	00100002 	.word	0x00100002
 8009348:	ffff0000 	.word	0xffff0000
 800934c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	681a      	ldr	r2, [r3, #0]
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800935e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	691a      	ldr	r2, [r3, #16]
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800936a:	b2d2      	uxtb	r2, r2
 800936c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009372:	1c5a      	adds	r2, r3, #1
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800937c:	3b01      	subs	r3, #1
 800937e:	b29a      	uxth	r2, r3
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009388:	b29b      	uxth	r3, r3
 800938a:	3b01      	subs	r3, #1
 800938c:	b29a      	uxth	r2, r3
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	691a      	ldr	r2, [r3, #16]
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800939c:	b2d2      	uxtb	r2, r2
 800939e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a4:	1c5a      	adds	r2, r3, #1
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093ae:	3b01      	subs	r3, #1
 80093b0:	b29a      	uxth	r2, r3
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	3b01      	subs	r3, #1
 80093be:	b29a      	uxth	r2, r3
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80093c4:	e0b8      	b.n	8009538 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80093c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c8:	9300      	str	r3, [sp, #0]
 80093ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093cc:	2200      	movs	r2, #0
 80093ce:	4966      	ldr	r1, [pc, #408]	; (8009568 <HAL_I2C_Master_Receive+0x448>)
 80093d0:	68f8      	ldr	r0, [r7, #12]
 80093d2:	f000 fa1b 	bl	800980c <I2C_WaitOnFlagUntilTimeout>
 80093d6:	4603      	mov	r3, r0
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d001      	beq.n	80093e0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80093dc:	2301      	movs	r3, #1
 80093de:	e0bf      	b.n	8009560 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	681a      	ldr	r2, [r3, #0]
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	691a      	ldr	r2, [r3, #16]
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093fa:	b2d2      	uxtb	r2, r2
 80093fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009402:	1c5a      	adds	r2, r3, #1
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800940c:	3b01      	subs	r3, #1
 800940e:	b29a      	uxth	r2, r3
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009418:	b29b      	uxth	r3, r3
 800941a:	3b01      	subs	r3, #1
 800941c:	b29a      	uxth	r2, r3
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009424:	9300      	str	r3, [sp, #0]
 8009426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009428:	2200      	movs	r2, #0
 800942a:	494f      	ldr	r1, [pc, #316]	; (8009568 <HAL_I2C_Master_Receive+0x448>)
 800942c:	68f8      	ldr	r0, [r7, #12]
 800942e:	f000 f9ed 	bl	800980c <I2C_WaitOnFlagUntilTimeout>
 8009432:	4603      	mov	r3, r0
 8009434:	2b00      	cmp	r3, #0
 8009436:	d001      	beq.n	800943c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8009438:	2301      	movs	r3, #1
 800943a:	e091      	b.n	8009560 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	681a      	ldr	r2, [r3, #0]
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800944a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	691a      	ldr	r2, [r3, #16]
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009456:	b2d2      	uxtb	r2, r2
 8009458:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800945e:	1c5a      	adds	r2, r3, #1
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009468:	3b01      	subs	r3, #1
 800946a:	b29a      	uxth	r2, r3
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009474:	b29b      	uxth	r3, r3
 8009476:	3b01      	subs	r3, #1
 8009478:	b29a      	uxth	r2, r3
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	691a      	ldr	r2, [r3, #16]
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009488:	b2d2      	uxtb	r2, r2
 800948a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009490:	1c5a      	adds	r2, r3, #1
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800949a:	3b01      	subs	r3, #1
 800949c:	b29a      	uxth	r2, r3
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094a6:	b29b      	uxth	r3, r3
 80094a8:	3b01      	subs	r3, #1
 80094aa:	b29a      	uxth	r2, r3
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80094b0:	e042      	b.n	8009538 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80094b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80094b6:	68f8      	ldr	r0, [r7, #12]
 80094b8:	f000 fb00 	bl	8009abc <I2C_WaitOnRXNEFlagUntilTimeout>
 80094bc:	4603      	mov	r3, r0
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d001      	beq.n	80094c6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80094c2:	2301      	movs	r3, #1
 80094c4:	e04c      	b.n	8009560 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	691a      	ldr	r2, [r3, #16]
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d0:	b2d2      	uxtb	r2, r2
 80094d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d8:	1c5a      	adds	r2, r3, #1
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094e2:	3b01      	subs	r3, #1
 80094e4:	b29a      	uxth	r2, r3
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094ee:	b29b      	uxth	r3, r3
 80094f0:	3b01      	subs	r3, #1
 80094f2:	b29a      	uxth	r2, r3
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	695b      	ldr	r3, [r3, #20]
 80094fe:	f003 0304 	and.w	r3, r3, #4
 8009502:	2b04      	cmp	r3, #4
 8009504:	d118      	bne.n	8009538 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	691a      	ldr	r2, [r3, #16]
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009510:	b2d2      	uxtb	r2, r2
 8009512:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009518:	1c5a      	adds	r2, r3, #1
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009522:	3b01      	subs	r3, #1
 8009524:	b29a      	uxth	r2, r3
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800952e:	b29b      	uxth	r3, r3
 8009530:	3b01      	subs	r3, #1
 8009532:	b29a      	uxth	r2, r3
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800953c:	2b00      	cmp	r3, #0
 800953e:	f47f aec2 	bne.w	80092c6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2220      	movs	r2, #32
 8009546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	2200      	movs	r2, #0
 800954e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2200      	movs	r2, #0
 8009556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800955a:	2300      	movs	r3, #0
 800955c:	e000      	b.n	8009560 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800955e:	2302      	movs	r3, #2
  }
}
 8009560:	4618      	mov	r0, r3
 8009562:	3728      	adds	r7, #40	; 0x28
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}
 8009568:	00010004 	.word	0x00010004

0800956c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b088      	sub	sp, #32
 8009570:	af02      	add	r7, sp, #8
 8009572:	60f8      	str	r0, [r7, #12]
 8009574:	607a      	str	r2, [r7, #4]
 8009576:	603b      	str	r3, [r7, #0]
 8009578:	460b      	mov	r3, r1
 800957a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009580:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	2b08      	cmp	r3, #8
 8009586:	d006      	beq.n	8009596 <I2C_MasterRequestWrite+0x2a>
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	2b01      	cmp	r3, #1
 800958c:	d003      	beq.n	8009596 <I2C_MasterRequestWrite+0x2a>
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009594:	d108      	bne.n	80095a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	681a      	ldr	r2, [r3, #0]
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80095a4:	601a      	str	r2, [r3, #0]
 80095a6:	e00b      	b.n	80095c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ac:	2b12      	cmp	r3, #18
 80095ae:	d107      	bne.n	80095c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	681a      	ldr	r2, [r3, #0]
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80095be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	9300      	str	r3, [sp, #0]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2200      	movs	r2, #0
 80095c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80095cc:	68f8      	ldr	r0, [r7, #12]
 80095ce:	f000 f91d 	bl	800980c <I2C_WaitOnFlagUntilTimeout>
 80095d2:	4603      	mov	r3, r0
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d00d      	beq.n	80095f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095e6:	d103      	bne.n	80095f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80095ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80095f0:	2303      	movs	r3, #3
 80095f2:	e035      	b.n	8009660 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	691b      	ldr	r3, [r3, #16]
 80095f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80095fc:	d108      	bne.n	8009610 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80095fe:	897b      	ldrh	r3, [r7, #10]
 8009600:	b2db      	uxtb	r3, r3
 8009602:	461a      	mov	r2, r3
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800960c:	611a      	str	r2, [r3, #16]
 800960e:	e01b      	b.n	8009648 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009610:	897b      	ldrh	r3, [r7, #10]
 8009612:	11db      	asrs	r3, r3, #7
 8009614:	b2db      	uxtb	r3, r3
 8009616:	f003 0306 	and.w	r3, r3, #6
 800961a:	b2db      	uxtb	r3, r3
 800961c:	f063 030f 	orn	r3, r3, #15
 8009620:	b2da      	uxtb	r2, r3
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	687a      	ldr	r2, [r7, #4]
 800962c:	490e      	ldr	r1, [pc, #56]	; (8009668 <I2C_MasterRequestWrite+0xfc>)
 800962e:	68f8      	ldr	r0, [r7, #12]
 8009630:	f000 f943 	bl	80098ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009634:	4603      	mov	r3, r0
 8009636:	2b00      	cmp	r3, #0
 8009638:	d001      	beq.n	800963e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800963a:	2301      	movs	r3, #1
 800963c:	e010      	b.n	8009660 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800963e:	897b      	ldrh	r3, [r7, #10]
 8009640:	b2da      	uxtb	r2, r3
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	687a      	ldr	r2, [r7, #4]
 800964c:	4907      	ldr	r1, [pc, #28]	; (800966c <I2C_MasterRequestWrite+0x100>)
 800964e:	68f8      	ldr	r0, [r7, #12]
 8009650:	f000 f933 	bl	80098ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009654:	4603      	mov	r3, r0
 8009656:	2b00      	cmp	r3, #0
 8009658:	d001      	beq.n	800965e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800965a:	2301      	movs	r3, #1
 800965c:	e000      	b.n	8009660 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800965e:	2300      	movs	r3, #0
}
 8009660:	4618      	mov	r0, r3
 8009662:	3718      	adds	r7, #24
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}
 8009668:	00010008 	.word	0x00010008
 800966c:	00010002 	.word	0x00010002

08009670 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b088      	sub	sp, #32
 8009674:	af02      	add	r7, sp, #8
 8009676:	60f8      	str	r0, [r7, #12]
 8009678:	607a      	str	r2, [r7, #4]
 800967a:	603b      	str	r3, [r7, #0]
 800967c:	460b      	mov	r3, r1
 800967e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009684:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009694:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	2b08      	cmp	r3, #8
 800969a:	d006      	beq.n	80096aa <I2C_MasterRequestRead+0x3a>
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	2b01      	cmp	r3, #1
 80096a0:	d003      	beq.n	80096aa <I2C_MasterRequestRead+0x3a>
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80096a8:	d108      	bne.n	80096bc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	681a      	ldr	r2, [r3, #0]
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80096b8:	601a      	str	r2, [r3, #0]
 80096ba:	e00b      	b.n	80096d4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096c0:	2b11      	cmp	r3, #17
 80096c2:	d107      	bne.n	80096d4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	681a      	ldr	r2, [r3, #0]
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80096d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	9300      	str	r3, [sp, #0]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2200      	movs	r2, #0
 80096dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80096e0:	68f8      	ldr	r0, [r7, #12]
 80096e2:	f000 f893 	bl	800980c <I2C_WaitOnFlagUntilTimeout>
 80096e6:	4603      	mov	r3, r0
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d00d      	beq.n	8009708 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096fa:	d103      	bne.n	8009704 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009702:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009704:	2303      	movs	r3, #3
 8009706:	e079      	b.n	80097fc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	691b      	ldr	r3, [r3, #16]
 800970c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009710:	d108      	bne.n	8009724 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009712:	897b      	ldrh	r3, [r7, #10]
 8009714:	b2db      	uxtb	r3, r3
 8009716:	f043 0301 	orr.w	r3, r3, #1
 800971a:	b2da      	uxtb	r2, r3
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	611a      	str	r2, [r3, #16]
 8009722:	e05f      	b.n	80097e4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009724:	897b      	ldrh	r3, [r7, #10]
 8009726:	11db      	asrs	r3, r3, #7
 8009728:	b2db      	uxtb	r3, r3
 800972a:	f003 0306 	and.w	r3, r3, #6
 800972e:	b2db      	uxtb	r3, r3
 8009730:	f063 030f 	orn	r3, r3, #15
 8009734:	b2da      	uxtb	r2, r3
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	687a      	ldr	r2, [r7, #4]
 8009740:	4930      	ldr	r1, [pc, #192]	; (8009804 <I2C_MasterRequestRead+0x194>)
 8009742:	68f8      	ldr	r0, [r7, #12]
 8009744:	f000 f8b9 	bl	80098ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009748:	4603      	mov	r3, r0
 800974a:	2b00      	cmp	r3, #0
 800974c:	d001      	beq.n	8009752 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800974e:	2301      	movs	r3, #1
 8009750:	e054      	b.n	80097fc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009752:	897b      	ldrh	r3, [r7, #10]
 8009754:	b2da      	uxtb	r2, r3
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	687a      	ldr	r2, [r7, #4]
 8009760:	4929      	ldr	r1, [pc, #164]	; (8009808 <I2C_MasterRequestRead+0x198>)
 8009762:	68f8      	ldr	r0, [r7, #12]
 8009764:	f000 f8a9 	bl	80098ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009768:	4603      	mov	r3, r0
 800976a:	2b00      	cmp	r3, #0
 800976c:	d001      	beq.n	8009772 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800976e:	2301      	movs	r3, #1
 8009770:	e044      	b.n	80097fc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009772:	2300      	movs	r3, #0
 8009774:	613b      	str	r3, [r7, #16]
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	695b      	ldr	r3, [r3, #20]
 800977c:	613b      	str	r3, [r7, #16]
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	699b      	ldr	r3, [r3, #24]
 8009784:	613b      	str	r3, [r7, #16]
 8009786:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	681a      	ldr	r2, [r3, #0]
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009796:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	9300      	str	r3, [sp, #0]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2200      	movs	r2, #0
 80097a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80097a4:	68f8      	ldr	r0, [r7, #12]
 80097a6:	f000 f831 	bl	800980c <I2C_WaitOnFlagUntilTimeout>
 80097aa:	4603      	mov	r3, r0
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d00d      	beq.n	80097cc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097be:	d103      	bne.n	80097c8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80097c6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80097c8:	2303      	movs	r3, #3
 80097ca:	e017      	b.n	80097fc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80097cc:	897b      	ldrh	r3, [r7, #10]
 80097ce:	11db      	asrs	r3, r3, #7
 80097d0:	b2db      	uxtb	r3, r3
 80097d2:	f003 0306 	and.w	r3, r3, #6
 80097d6:	b2db      	uxtb	r3, r3
 80097d8:	f063 030e 	orn	r3, r3, #14
 80097dc:	b2da      	uxtb	r2, r3
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	4907      	ldr	r1, [pc, #28]	; (8009808 <I2C_MasterRequestRead+0x198>)
 80097ea:	68f8      	ldr	r0, [r7, #12]
 80097ec:	f000 f865 	bl	80098ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80097f0:	4603      	mov	r3, r0
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d001      	beq.n	80097fa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80097f6:	2301      	movs	r3, #1
 80097f8:	e000      	b.n	80097fc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80097fa:	2300      	movs	r3, #0
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3718      	adds	r7, #24
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}
 8009804:	00010008 	.word	0x00010008
 8009808:	00010002 	.word	0x00010002

0800980c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b084      	sub	sp, #16
 8009810:	af00      	add	r7, sp, #0
 8009812:	60f8      	str	r0, [r7, #12]
 8009814:	60b9      	str	r1, [r7, #8]
 8009816:	603b      	str	r3, [r7, #0]
 8009818:	4613      	mov	r3, r2
 800981a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800981c:	e025      	b.n	800986a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009824:	d021      	beq.n	800986a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009826:	f7fd ff71 	bl	800770c <HAL_GetTick>
 800982a:	4602      	mov	r2, r0
 800982c:	69bb      	ldr	r3, [r7, #24]
 800982e:	1ad3      	subs	r3, r2, r3
 8009830:	683a      	ldr	r2, [r7, #0]
 8009832:	429a      	cmp	r2, r3
 8009834:	d302      	bcc.n	800983c <I2C_WaitOnFlagUntilTimeout+0x30>
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d116      	bne.n	800986a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	2200      	movs	r2, #0
 8009840:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	2220      	movs	r2, #32
 8009846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	2200      	movs	r2, #0
 800984e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009856:	f043 0220 	orr.w	r2, r3, #32
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2200      	movs	r2, #0
 8009862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009866:	2301      	movs	r3, #1
 8009868:	e023      	b.n	80098b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	0c1b      	lsrs	r3, r3, #16
 800986e:	b2db      	uxtb	r3, r3
 8009870:	2b01      	cmp	r3, #1
 8009872:	d10d      	bne.n	8009890 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	695b      	ldr	r3, [r3, #20]
 800987a:	43da      	mvns	r2, r3
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	4013      	ands	r3, r2
 8009880:	b29b      	uxth	r3, r3
 8009882:	2b00      	cmp	r3, #0
 8009884:	bf0c      	ite	eq
 8009886:	2301      	moveq	r3, #1
 8009888:	2300      	movne	r3, #0
 800988a:	b2db      	uxtb	r3, r3
 800988c:	461a      	mov	r2, r3
 800988e:	e00c      	b.n	80098aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	699b      	ldr	r3, [r3, #24]
 8009896:	43da      	mvns	r2, r3
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	4013      	ands	r3, r2
 800989c:	b29b      	uxth	r3, r3
 800989e:	2b00      	cmp	r3, #0
 80098a0:	bf0c      	ite	eq
 80098a2:	2301      	moveq	r3, #1
 80098a4:	2300      	movne	r3, #0
 80098a6:	b2db      	uxtb	r3, r3
 80098a8:	461a      	mov	r2, r3
 80098aa:	79fb      	ldrb	r3, [r7, #7]
 80098ac:	429a      	cmp	r2, r3
 80098ae:	d0b6      	beq.n	800981e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80098b0:	2300      	movs	r3, #0
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3710      	adds	r7, #16
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}

080098ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80098ba:	b580      	push	{r7, lr}
 80098bc:	b084      	sub	sp, #16
 80098be:	af00      	add	r7, sp, #0
 80098c0:	60f8      	str	r0, [r7, #12]
 80098c2:	60b9      	str	r1, [r7, #8]
 80098c4:	607a      	str	r2, [r7, #4]
 80098c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80098c8:	e051      	b.n	800996e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	695b      	ldr	r3, [r3, #20]
 80098d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80098d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098d8:	d123      	bne.n	8009922 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	681a      	ldr	r2, [r3, #0]
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80098f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	2200      	movs	r2, #0
 80098f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2220      	movs	r2, #32
 80098fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2200      	movs	r2, #0
 8009906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800990e:	f043 0204 	orr.w	r2, r3, #4
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	2200      	movs	r2, #0
 800991a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800991e:	2301      	movs	r3, #1
 8009920:	e046      	b.n	80099b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009928:	d021      	beq.n	800996e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800992a:	f7fd feef 	bl	800770c <HAL_GetTick>
 800992e:	4602      	mov	r2, r0
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	1ad3      	subs	r3, r2, r3
 8009934:	687a      	ldr	r2, [r7, #4]
 8009936:	429a      	cmp	r2, r3
 8009938:	d302      	bcc.n	8009940 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d116      	bne.n	800996e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	2200      	movs	r2, #0
 8009944:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	2220      	movs	r2, #32
 800994a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2200      	movs	r2, #0
 8009952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800995a:	f043 0220 	orr.w	r2, r3, #32
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	2200      	movs	r2, #0
 8009966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800996a:	2301      	movs	r3, #1
 800996c:	e020      	b.n	80099b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	0c1b      	lsrs	r3, r3, #16
 8009972:	b2db      	uxtb	r3, r3
 8009974:	2b01      	cmp	r3, #1
 8009976:	d10c      	bne.n	8009992 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	695b      	ldr	r3, [r3, #20]
 800997e:	43da      	mvns	r2, r3
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	4013      	ands	r3, r2
 8009984:	b29b      	uxth	r3, r3
 8009986:	2b00      	cmp	r3, #0
 8009988:	bf14      	ite	ne
 800998a:	2301      	movne	r3, #1
 800998c:	2300      	moveq	r3, #0
 800998e:	b2db      	uxtb	r3, r3
 8009990:	e00b      	b.n	80099aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	699b      	ldr	r3, [r3, #24]
 8009998:	43da      	mvns	r2, r3
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	4013      	ands	r3, r2
 800999e:	b29b      	uxth	r3, r3
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	bf14      	ite	ne
 80099a4:	2301      	movne	r3, #1
 80099a6:	2300      	moveq	r3, #0
 80099a8:	b2db      	uxtb	r3, r3
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d18d      	bne.n	80098ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80099ae:	2300      	movs	r3, #0
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3710      	adds	r7, #16
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}

080099b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b084      	sub	sp, #16
 80099bc:	af00      	add	r7, sp, #0
 80099be:	60f8      	str	r0, [r7, #12]
 80099c0:	60b9      	str	r1, [r7, #8]
 80099c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80099c4:	e02d      	b.n	8009a22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80099c6:	68f8      	ldr	r0, [r7, #12]
 80099c8:	f000 f8ce 	bl	8009b68 <I2C_IsAcknowledgeFailed>
 80099cc:	4603      	mov	r3, r0
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d001      	beq.n	80099d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80099d2:	2301      	movs	r3, #1
 80099d4:	e02d      	b.n	8009a32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099dc:	d021      	beq.n	8009a22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099de:	f7fd fe95 	bl	800770c <HAL_GetTick>
 80099e2:	4602      	mov	r2, r0
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	1ad3      	subs	r3, r2, r3
 80099e8:	68ba      	ldr	r2, [r7, #8]
 80099ea:	429a      	cmp	r2, r3
 80099ec:	d302      	bcc.n	80099f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d116      	bne.n	8009a22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2200      	movs	r2, #0
 80099f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	2220      	movs	r2, #32
 80099fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2200      	movs	r2, #0
 8009a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a0e:	f043 0220 	orr.w	r2, r3, #32
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009a1e:	2301      	movs	r3, #1
 8009a20:	e007      	b.n	8009a32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	695b      	ldr	r3, [r3, #20]
 8009a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a2c:	2b80      	cmp	r3, #128	; 0x80
 8009a2e:	d1ca      	bne.n	80099c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009a30:	2300      	movs	r3, #0
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3710      	adds	r7, #16
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}

08009a3a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009a3a:	b580      	push	{r7, lr}
 8009a3c:	b084      	sub	sp, #16
 8009a3e:	af00      	add	r7, sp, #0
 8009a40:	60f8      	str	r0, [r7, #12]
 8009a42:	60b9      	str	r1, [r7, #8]
 8009a44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009a46:	e02d      	b.n	8009aa4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009a48:	68f8      	ldr	r0, [r7, #12]
 8009a4a:	f000 f88d 	bl	8009b68 <I2C_IsAcknowledgeFailed>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d001      	beq.n	8009a58 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009a54:	2301      	movs	r3, #1
 8009a56:	e02d      	b.n	8009ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a5e:	d021      	beq.n	8009aa4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a60:	f7fd fe54 	bl	800770c <HAL_GetTick>
 8009a64:	4602      	mov	r2, r0
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	1ad3      	subs	r3, r2, r3
 8009a6a:	68ba      	ldr	r2, [r7, #8]
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d302      	bcc.n	8009a76 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d116      	bne.n	8009aa4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2220      	movs	r2, #32
 8009a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2200      	movs	r2, #0
 8009a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a90:	f043 0220 	orr.w	r2, r3, #32
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	e007      	b.n	8009ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	695b      	ldr	r3, [r3, #20]
 8009aaa:	f003 0304 	and.w	r3, r3, #4
 8009aae:	2b04      	cmp	r3, #4
 8009ab0:	d1ca      	bne.n	8009a48 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009ab2:	2300      	movs	r3, #0
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3710      	adds	r7, #16
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}

08009abc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b084      	sub	sp, #16
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	60f8      	str	r0, [r7, #12]
 8009ac4:	60b9      	str	r1, [r7, #8]
 8009ac6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009ac8:	e042      	b.n	8009b50 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	695b      	ldr	r3, [r3, #20]
 8009ad0:	f003 0310 	and.w	r3, r3, #16
 8009ad4:	2b10      	cmp	r3, #16
 8009ad6:	d119      	bne.n	8009b0c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f06f 0210 	mvn.w	r2, #16
 8009ae0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	2220      	movs	r2, #32
 8009aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	2200      	movs	r2, #0
 8009af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	2200      	movs	r2, #0
 8009b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009b08:	2301      	movs	r3, #1
 8009b0a:	e029      	b.n	8009b60 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b0c:	f7fd fdfe 	bl	800770c <HAL_GetTick>
 8009b10:	4602      	mov	r2, r0
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	1ad3      	subs	r3, r2, r3
 8009b16:	68ba      	ldr	r2, [r7, #8]
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	d302      	bcc.n	8009b22 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d116      	bne.n	8009b50 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	2200      	movs	r2, #0
 8009b26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	2220      	movs	r2, #32
 8009b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	2200      	movs	r2, #0
 8009b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b3c:	f043 0220 	orr.w	r2, r3, #32
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	2200      	movs	r2, #0
 8009b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	e007      	b.n	8009b60 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	695b      	ldr	r3, [r3, #20]
 8009b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b5a:	2b40      	cmp	r3, #64	; 0x40
 8009b5c:	d1b5      	bne.n	8009aca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009b5e:	2300      	movs	r3, #0
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3710      	adds	r7, #16
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b083      	sub	sp, #12
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	695b      	ldr	r3, [r3, #20]
 8009b76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b7e:	d11b      	bne.n	8009bb8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009b88:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2220      	movs	r2, #32
 8009b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ba4:	f043 0204 	orr.w	r2, r3, #4
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	e000      	b.n	8009bba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009bb8:	2300      	movs	r3, #0
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	370c      	adds	r7, #12
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc4:	4770      	bx	lr
	...

08009bc8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b082      	sub	sp, #8
 8009bcc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	603b      	str	r3, [r7, #0]
 8009bd6:	4b20      	ldr	r3, [pc, #128]	; (8009c58 <HAL_PWREx_EnableOverDrive+0x90>)
 8009bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bda:	4a1f      	ldr	r2, [pc, #124]	; (8009c58 <HAL_PWREx_EnableOverDrive+0x90>)
 8009bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009be0:	6413      	str	r3, [r2, #64]	; 0x40
 8009be2:	4b1d      	ldr	r3, [pc, #116]	; (8009c58 <HAL_PWREx_EnableOverDrive+0x90>)
 8009be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009bea:	603b      	str	r3, [r7, #0]
 8009bec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8009bee:	4b1b      	ldr	r3, [pc, #108]	; (8009c5c <HAL_PWREx_EnableOverDrive+0x94>)
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009bf4:	f7fd fd8a 	bl	800770c <HAL_GetTick>
 8009bf8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009bfa:	e009      	b.n	8009c10 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009bfc:	f7fd fd86 	bl	800770c <HAL_GetTick>
 8009c00:	4602      	mov	r2, r0
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	1ad3      	subs	r3, r2, r3
 8009c06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009c0a:	d901      	bls.n	8009c10 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8009c0c:	2303      	movs	r3, #3
 8009c0e:	e01f      	b.n	8009c50 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009c10:	4b13      	ldr	r3, [pc, #76]	; (8009c60 <HAL_PWREx_EnableOverDrive+0x98>)
 8009c12:	685b      	ldr	r3, [r3, #4]
 8009c14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c1c:	d1ee      	bne.n	8009bfc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8009c1e:	4b11      	ldr	r3, [pc, #68]	; (8009c64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009c20:	2201      	movs	r2, #1
 8009c22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009c24:	f7fd fd72 	bl	800770c <HAL_GetTick>
 8009c28:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009c2a:	e009      	b.n	8009c40 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009c2c:	f7fd fd6e 	bl	800770c <HAL_GetTick>
 8009c30:	4602      	mov	r2, r0
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	1ad3      	subs	r3, r2, r3
 8009c36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009c3a:	d901      	bls.n	8009c40 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8009c3c:	2303      	movs	r3, #3
 8009c3e:	e007      	b.n	8009c50 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009c40:	4b07      	ldr	r3, [pc, #28]	; (8009c60 <HAL_PWREx_EnableOverDrive+0x98>)
 8009c42:	685b      	ldr	r3, [r3, #4]
 8009c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c4c:	d1ee      	bne.n	8009c2c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8009c4e:	2300      	movs	r3, #0
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3708      	adds	r7, #8
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}
 8009c58:	40023800 	.word	0x40023800
 8009c5c:	420e0040 	.word	0x420e0040
 8009c60:	40007000 	.word	0x40007000
 8009c64:	420e0044 	.word	0x420e0044

08009c68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b084      	sub	sp, #16
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
 8009c70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d101      	bne.n	8009c7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009c78:	2301      	movs	r3, #1
 8009c7a:	e0cc      	b.n	8009e16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009c7c:	4b68      	ldr	r3, [pc, #416]	; (8009e20 <HAL_RCC_ClockConfig+0x1b8>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f003 030f 	and.w	r3, r3, #15
 8009c84:	683a      	ldr	r2, [r7, #0]
 8009c86:	429a      	cmp	r2, r3
 8009c88:	d90c      	bls.n	8009ca4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c8a:	4b65      	ldr	r3, [pc, #404]	; (8009e20 <HAL_RCC_ClockConfig+0x1b8>)
 8009c8c:	683a      	ldr	r2, [r7, #0]
 8009c8e:	b2d2      	uxtb	r2, r2
 8009c90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c92:	4b63      	ldr	r3, [pc, #396]	; (8009e20 <HAL_RCC_ClockConfig+0x1b8>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f003 030f 	and.w	r3, r3, #15
 8009c9a:	683a      	ldr	r2, [r7, #0]
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	d001      	beq.n	8009ca4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	e0b8      	b.n	8009e16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f003 0302 	and.w	r3, r3, #2
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d020      	beq.n	8009cf2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f003 0304 	and.w	r3, r3, #4
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d005      	beq.n	8009cc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009cbc:	4b59      	ldr	r3, [pc, #356]	; (8009e24 <HAL_RCC_ClockConfig+0x1bc>)
 8009cbe:	689b      	ldr	r3, [r3, #8]
 8009cc0:	4a58      	ldr	r2, [pc, #352]	; (8009e24 <HAL_RCC_ClockConfig+0x1bc>)
 8009cc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009cc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f003 0308 	and.w	r3, r3, #8
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d005      	beq.n	8009ce0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009cd4:	4b53      	ldr	r3, [pc, #332]	; (8009e24 <HAL_RCC_ClockConfig+0x1bc>)
 8009cd6:	689b      	ldr	r3, [r3, #8]
 8009cd8:	4a52      	ldr	r2, [pc, #328]	; (8009e24 <HAL_RCC_ClockConfig+0x1bc>)
 8009cda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009cde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009ce0:	4b50      	ldr	r3, [pc, #320]	; (8009e24 <HAL_RCC_ClockConfig+0x1bc>)
 8009ce2:	689b      	ldr	r3, [r3, #8]
 8009ce4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	689b      	ldr	r3, [r3, #8]
 8009cec:	494d      	ldr	r1, [pc, #308]	; (8009e24 <HAL_RCC_ClockConfig+0x1bc>)
 8009cee:	4313      	orrs	r3, r2
 8009cf0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f003 0301 	and.w	r3, r3, #1
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d044      	beq.n	8009d88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	685b      	ldr	r3, [r3, #4]
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	d107      	bne.n	8009d16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009d06:	4b47      	ldr	r3, [pc, #284]	; (8009e24 <HAL_RCC_ClockConfig+0x1bc>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d119      	bne.n	8009d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009d12:	2301      	movs	r3, #1
 8009d14:	e07f      	b.n	8009e16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	685b      	ldr	r3, [r3, #4]
 8009d1a:	2b02      	cmp	r3, #2
 8009d1c:	d003      	beq.n	8009d26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009d22:	2b03      	cmp	r3, #3
 8009d24:	d107      	bne.n	8009d36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009d26:	4b3f      	ldr	r3, [pc, #252]	; (8009e24 <HAL_RCC_ClockConfig+0x1bc>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d109      	bne.n	8009d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009d32:	2301      	movs	r3, #1
 8009d34:	e06f      	b.n	8009e16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009d36:	4b3b      	ldr	r3, [pc, #236]	; (8009e24 <HAL_RCC_ClockConfig+0x1bc>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f003 0302 	and.w	r3, r3, #2
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d101      	bne.n	8009d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009d42:	2301      	movs	r3, #1
 8009d44:	e067      	b.n	8009e16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009d46:	4b37      	ldr	r3, [pc, #220]	; (8009e24 <HAL_RCC_ClockConfig+0x1bc>)
 8009d48:	689b      	ldr	r3, [r3, #8]
 8009d4a:	f023 0203 	bic.w	r2, r3, #3
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	685b      	ldr	r3, [r3, #4]
 8009d52:	4934      	ldr	r1, [pc, #208]	; (8009e24 <HAL_RCC_ClockConfig+0x1bc>)
 8009d54:	4313      	orrs	r3, r2
 8009d56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009d58:	f7fd fcd8 	bl	800770c <HAL_GetTick>
 8009d5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d5e:	e00a      	b.n	8009d76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009d60:	f7fd fcd4 	bl	800770c <HAL_GetTick>
 8009d64:	4602      	mov	r2, r0
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	1ad3      	subs	r3, r2, r3
 8009d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d901      	bls.n	8009d76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009d72:	2303      	movs	r3, #3
 8009d74:	e04f      	b.n	8009e16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d76:	4b2b      	ldr	r3, [pc, #172]	; (8009e24 <HAL_RCC_ClockConfig+0x1bc>)
 8009d78:	689b      	ldr	r3, [r3, #8]
 8009d7a:	f003 020c 	and.w	r2, r3, #12
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	685b      	ldr	r3, [r3, #4]
 8009d82:	009b      	lsls	r3, r3, #2
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d1eb      	bne.n	8009d60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009d88:	4b25      	ldr	r3, [pc, #148]	; (8009e20 <HAL_RCC_ClockConfig+0x1b8>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f003 030f 	and.w	r3, r3, #15
 8009d90:	683a      	ldr	r2, [r7, #0]
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d20c      	bcs.n	8009db0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d96:	4b22      	ldr	r3, [pc, #136]	; (8009e20 <HAL_RCC_ClockConfig+0x1b8>)
 8009d98:	683a      	ldr	r2, [r7, #0]
 8009d9a:	b2d2      	uxtb	r2, r2
 8009d9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d9e:	4b20      	ldr	r3, [pc, #128]	; (8009e20 <HAL_RCC_ClockConfig+0x1b8>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f003 030f 	and.w	r3, r3, #15
 8009da6:	683a      	ldr	r2, [r7, #0]
 8009da8:	429a      	cmp	r2, r3
 8009daa:	d001      	beq.n	8009db0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009dac:	2301      	movs	r3, #1
 8009dae:	e032      	b.n	8009e16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f003 0304 	and.w	r3, r3, #4
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d008      	beq.n	8009dce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009dbc:	4b19      	ldr	r3, [pc, #100]	; (8009e24 <HAL_RCC_ClockConfig+0x1bc>)
 8009dbe:	689b      	ldr	r3, [r3, #8]
 8009dc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	68db      	ldr	r3, [r3, #12]
 8009dc8:	4916      	ldr	r1, [pc, #88]	; (8009e24 <HAL_RCC_ClockConfig+0x1bc>)
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f003 0308 	and.w	r3, r3, #8
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d009      	beq.n	8009dee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009dda:	4b12      	ldr	r3, [pc, #72]	; (8009e24 <HAL_RCC_ClockConfig+0x1bc>)
 8009ddc:	689b      	ldr	r3, [r3, #8]
 8009dde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	691b      	ldr	r3, [r3, #16]
 8009de6:	00db      	lsls	r3, r3, #3
 8009de8:	490e      	ldr	r1, [pc, #56]	; (8009e24 <HAL_RCC_ClockConfig+0x1bc>)
 8009dea:	4313      	orrs	r3, r2
 8009dec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009dee:	f000 f821 	bl	8009e34 <HAL_RCC_GetSysClockFreq>
 8009df2:	4601      	mov	r1, r0
 8009df4:	4b0b      	ldr	r3, [pc, #44]	; (8009e24 <HAL_RCC_ClockConfig+0x1bc>)
 8009df6:	689b      	ldr	r3, [r3, #8]
 8009df8:	091b      	lsrs	r3, r3, #4
 8009dfa:	f003 030f 	and.w	r3, r3, #15
 8009dfe:	4a0a      	ldr	r2, [pc, #40]	; (8009e28 <HAL_RCC_ClockConfig+0x1c0>)
 8009e00:	5cd3      	ldrb	r3, [r2, r3]
 8009e02:	fa21 f303 	lsr.w	r3, r1, r3
 8009e06:	4a09      	ldr	r2, [pc, #36]	; (8009e2c <HAL_RCC_ClockConfig+0x1c4>)
 8009e08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009e0a:	4b09      	ldr	r3, [pc, #36]	; (8009e30 <HAL_RCC_ClockConfig+0x1c8>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f7fd fc38 	bl	8007684 <HAL_InitTick>

  return HAL_OK;
 8009e14:	2300      	movs	r3, #0
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3710      	adds	r7, #16
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}
 8009e1e:	bf00      	nop
 8009e20:	40023c00 	.word	0x40023c00
 8009e24:	40023800 	.word	0x40023800
 8009e28:	080185dc 	.word	0x080185dc
 8009e2c:	20000000 	.word	0x20000000
 8009e30:	20000004 	.word	0x20000004

08009e34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e36:	b085      	sub	sp, #20
 8009e38:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	607b      	str	r3, [r7, #4]
 8009e3e:	2300      	movs	r3, #0
 8009e40:	60fb      	str	r3, [r7, #12]
 8009e42:	2300      	movs	r3, #0
 8009e44:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009e46:	2300      	movs	r3, #0
 8009e48:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009e4a:	4b63      	ldr	r3, [pc, #396]	; (8009fd8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009e4c:	689b      	ldr	r3, [r3, #8]
 8009e4e:	f003 030c 	and.w	r3, r3, #12
 8009e52:	2b04      	cmp	r3, #4
 8009e54:	d007      	beq.n	8009e66 <HAL_RCC_GetSysClockFreq+0x32>
 8009e56:	2b08      	cmp	r3, #8
 8009e58:	d008      	beq.n	8009e6c <HAL_RCC_GetSysClockFreq+0x38>
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	f040 80b4 	bne.w	8009fc8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009e60:	4b5e      	ldr	r3, [pc, #376]	; (8009fdc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8009e62:	60bb      	str	r3, [r7, #8]
       break;
 8009e64:	e0b3      	b.n	8009fce <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009e66:	4b5d      	ldr	r3, [pc, #372]	; (8009fdc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8009e68:	60bb      	str	r3, [r7, #8]
      break;
 8009e6a:	e0b0      	b.n	8009fce <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009e6c:	4b5a      	ldr	r3, [pc, #360]	; (8009fd8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009e6e:	685b      	ldr	r3, [r3, #4]
 8009e70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e74:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009e76:	4b58      	ldr	r3, [pc, #352]	; (8009fd8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009e78:	685b      	ldr	r3, [r3, #4]
 8009e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d04a      	beq.n	8009f18 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009e82:	4b55      	ldr	r3, [pc, #340]	; (8009fd8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009e84:	685b      	ldr	r3, [r3, #4]
 8009e86:	099b      	lsrs	r3, r3, #6
 8009e88:	f04f 0400 	mov.w	r4, #0
 8009e8c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009e90:	f04f 0200 	mov.w	r2, #0
 8009e94:	ea03 0501 	and.w	r5, r3, r1
 8009e98:	ea04 0602 	and.w	r6, r4, r2
 8009e9c:	4629      	mov	r1, r5
 8009e9e:	4632      	mov	r2, r6
 8009ea0:	f04f 0300 	mov.w	r3, #0
 8009ea4:	f04f 0400 	mov.w	r4, #0
 8009ea8:	0154      	lsls	r4, r2, #5
 8009eaa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009eae:	014b      	lsls	r3, r1, #5
 8009eb0:	4619      	mov	r1, r3
 8009eb2:	4622      	mov	r2, r4
 8009eb4:	1b49      	subs	r1, r1, r5
 8009eb6:	eb62 0206 	sbc.w	r2, r2, r6
 8009eba:	f04f 0300 	mov.w	r3, #0
 8009ebe:	f04f 0400 	mov.w	r4, #0
 8009ec2:	0194      	lsls	r4, r2, #6
 8009ec4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009ec8:	018b      	lsls	r3, r1, #6
 8009eca:	1a5b      	subs	r3, r3, r1
 8009ecc:	eb64 0402 	sbc.w	r4, r4, r2
 8009ed0:	f04f 0100 	mov.w	r1, #0
 8009ed4:	f04f 0200 	mov.w	r2, #0
 8009ed8:	00e2      	lsls	r2, r4, #3
 8009eda:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009ede:	00d9      	lsls	r1, r3, #3
 8009ee0:	460b      	mov	r3, r1
 8009ee2:	4614      	mov	r4, r2
 8009ee4:	195b      	adds	r3, r3, r5
 8009ee6:	eb44 0406 	adc.w	r4, r4, r6
 8009eea:	f04f 0100 	mov.w	r1, #0
 8009eee:	f04f 0200 	mov.w	r2, #0
 8009ef2:	02a2      	lsls	r2, r4, #10
 8009ef4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8009ef8:	0299      	lsls	r1, r3, #10
 8009efa:	460b      	mov	r3, r1
 8009efc:	4614      	mov	r4, r2
 8009efe:	4618      	mov	r0, r3
 8009f00:	4621      	mov	r1, r4
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f04f 0400 	mov.w	r4, #0
 8009f08:	461a      	mov	r2, r3
 8009f0a:	4623      	mov	r3, r4
 8009f0c:	f7f6 fed4 	bl	8000cb8 <__aeabi_uldivmod>
 8009f10:	4603      	mov	r3, r0
 8009f12:	460c      	mov	r4, r1
 8009f14:	60fb      	str	r3, [r7, #12]
 8009f16:	e049      	b.n	8009fac <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009f18:	4b2f      	ldr	r3, [pc, #188]	; (8009fd8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	099b      	lsrs	r3, r3, #6
 8009f1e:	f04f 0400 	mov.w	r4, #0
 8009f22:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009f26:	f04f 0200 	mov.w	r2, #0
 8009f2a:	ea03 0501 	and.w	r5, r3, r1
 8009f2e:	ea04 0602 	and.w	r6, r4, r2
 8009f32:	4629      	mov	r1, r5
 8009f34:	4632      	mov	r2, r6
 8009f36:	f04f 0300 	mov.w	r3, #0
 8009f3a:	f04f 0400 	mov.w	r4, #0
 8009f3e:	0154      	lsls	r4, r2, #5
 8009f40:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009f44:	014b      	lsls	r3, r1, #5
 8009f46:	4619      	mov	r1, r3
 8009f48:	4622      	mov	r2, r4
 8009f4a:	1b49      	subs	r1, r1, r5
 8009f4c:	eb62 0206 	sbc.w	r2, r2, r6
 8009f50:	f04f 0300 	mov.w	r3, #0
 8009f54:	f04f 0400 	mov.w	r4, #0
 8009f58:	0194      	lsls	r4, r2, #6
 8009f5a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009f5e:	018b      	lsls	r3, r1, #6
 8009f60:	1a5b      	subs	r3, r3, r1
 8009f62:	eb64 0402 	sbc.w	r4, r4, r2
 8009f66:	f04f 0100 	mov.w	r1, #0
 8009f6a:	f04f 0200 	mov.w	r2, #0
 8009f6e:	00e2      	lsls	r2, r4, #3
 8009f70:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009f74:	00d9      	lsls	r1, r3, #3
 8009f76:	460b      	mov	r3, r1
 8009f78:	4614      	mov	r4, r2
 8009f7a:	195b      	adds	r3, r3, r5
 8009f7c:	eb44 0406 	adc.w	r4, r4, r6
 8009f80:	f04f 0100 	mov.w	r1, #0
 8009f84:	f04f 0200 	mov.w	r2, #0
 8009f88:	02a2      	lsls	r2, r4, #10
 8009f8a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8009f8e:	0299      	lsls	r1, r3, #10
 8009f90:	460b      	mov	r3, r1
 8009f92:	4614      	mov	r4, r2
 8009f94:	4618      	mov	r0, r3
 8009f96:	4621      	mov	r1, r4
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f04f 0400 	mov.w	r4, #0
 8009f9e:	461a      	mov	r2, r3
 8009fa0:	4623      	mov	r3, r4
 8009fa2:	f7f6 fe89 	bl	8000cb8 <__aeabi_uldivmod>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	460c      	mov	r4, r1
 8009faa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009fac:	4b0a      	ldr	r3, [pc, #40]	; (8009fd8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	0c1b      	lsrs	r3, r3, #16
 8009fb2:	f003 0303 	and.w	r3, r3, #3
 8009fb6:	3301      	adds	r3, #1
 8009fb8:	005b      	lsls	r3, r3, #1
 8009fba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009fbc:	68fa      	ldr	r2, [r7, #12]
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fc4:	60bb      	str	r3, [r7, #8]
      break;
 8009fc6:	e002      	b.n	8009fce <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009fc8:	4b04      	ldr	r3, [pc, #16]	; (8009fdc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8009fca:	60bb      	str	r3, [r7, #8]
      break;
 8009fcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009fce:	68bb      	ldr	r3, [r7, #8]
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3714      	adds	r7, #20
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fd8:	40023800 	.word	0x40023800
 8009fdc:	00f42400 	.word	0x00f42400

08009fe0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009fe4:	4b03      	ldr	r3, [pc, #12]	; (8009ff4 <HAL_RCC_GetHCLKFreq+0x14>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	46bd      	mov	sp, r7
 8009fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff0:	4770      	bx	lr
 8009ff2:	bf00      	nop
 8009ff4:	20000000 	.word	0x20000000

08009ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009ffc:	f7ff fff0 	bl	8009fe0 <HAL_RCC_GetHCLKFreq>
 800a000:	4601      	mov	r1, r0
 800a002:	4b05      	ldr	r3, [pc, #20]	; (800a018 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a004:	689b      	ldr	r3, [r3, #8]
 800a006:	0a9b      	lsrs	r3, r3, #10
 800a008:	f003 0307 	and.w	r3, r3, #7
 800a00c:	4a03      	ldr	r2, [pc, #12]	; (800a01c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a00e:	5cd3      	ldrb	r3, [r2, r3]
 800a010:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a014:	4618      	mov	r0, r3
 800a016:	bd80      	pop	{r7, pc}
 800a018:	40023800 	.word	0x40023800
 800a01c:	080185ec 	.word	0x080185ec

0800a020 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a024:	f7ff ffdc 	bl	8009fe0 <HAL_RCC_GetHCLKFreq>
 800a028:	4601      	mov	r1, r0
 800a02a:	4b05      	ldr	r3, [pc, #20]	; (800a040 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a02c:	689b      	ldr	r3, [r3, #8]
 800a02e:	0b5b      	lsrs	r3, r3, #13
 800a030:	f003 0307 	and.w	r3, r3, #7
 800a034:	4a03      	ldr	r2, [pc, #12]	; (800a044 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a036:	5cd3      	ldrb	r3, [r2, r3]
 800a038:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	bd80      	pop	{r7, pc}
 800a040:	40023800 	.word	0x40023800
 800a044:	080185ec 	.word	0x080185ec

0800a048 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b088      	sub	sp, #32
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a050:	2300      	movs	r3, #0
 800a052:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800a054:	2300      	movs	r3, #0
 800a056:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800a058:	2300      	movs	r3, #0
 800a05a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800a05c:	2300      	movs	r3, #0
 800a05e:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800a060:	2300      	movs	r3, #0
 800a062:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d00a      	beq.n	800a086 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800a070:	4b66      	ldr	r3, [pc, #408]	; (800a20c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a072:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a076:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a07e:	4963      	ldr	r1, [pc, #396]	; (800a20c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a080:	4313      	orrs	r3, r2
 800a082:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d00a      	beq.n	800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800a092:	4b5e      	ldr	r3, [pc, #376]	; (800a20c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a094:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a098:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0a0:	495a      	ldr	r1, [pc, #360]	; (800a20c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a0a2:	4313      	orrs	r3, r2
 800a0a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f003 0301 	and.w	r3, r3, #1
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d10b      	bne.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d105      	bne.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d075      	beq.n	800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a0cc:	4b50      	ldr	r3, [pc, #320]	; (800a210 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a0d2:	f7fd fb1b 	bl	800770c <HAL_GetTick>
 800a0d6:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a0d8:	e008      	b.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a0da:	f7fd fb17 	bl	800770c <HAL_GetTick>
 800a0de:	4602      	mov	r2, r0
 800a0e0:	69fb      	ldr	r3, [r7, #28]
 800a0e2:	1ad3      	subs	r3, r2, r3
 800a0e4:	2b02      	cmp	r3, #2
 800a0e6:	d901      	bls.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a0e8:	2303      	movs	r3, #3
 800a0ea:	e1dc      	b.n	800a4a6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a0ec:	4b47      	ldr	r3, [pc, #284]	; (800a20c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d1f0      	bne.n	800a0da <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f003 0301 	and.w	r3, r3, #1
 800a100:	2b00      	cmp	r3, #0
 800a102:	d009      	beq.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	685b      	ldr	r3, [r3, #4]
 800a108:	019a      	lsls	r2, r3, #6
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	689b      	ldr	r3, [r3, #8]
 800a10e:	071b      	lsls	r3, r3, #28
 800a110:	493e      	ldr	r1, [pc, #248]	; (800a20c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a112:	4313      	orrs	r3, r2
 800a114:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f003 0302 	and.w	r3, r3, #2
 800a120:	2b00      	cmp	r3, #0
 800a122:	d01f      	beq.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a124:	4b39      	ldr	r3, [pc, #228]	; (800a20c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a126:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a12a:	0f1b      	lsrs	r3, r3, #28
 800a12c:	f003 0307 	and.w	r3, r3, #7
 800a130:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	019a      	lsls	r2, r3, #6
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	68db      	ldr	r3, [r3, #12]
 800a13c:	061b      	lsls	r3, r3, #24
 800a13e:	431a      	orrs	r2, r3
 800a140:	69bb      	ldr	r3, [r7, #24]
 800a142:	071b      	lsls	r3, r3, #28
 800a144:	4931      	ldr	r1, [pc, #196]	; (800a20c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a146:	4313      	orrs	r3, r2
 800a148:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a14c:	4b2f      	ldr	r3, [pc, #188]	; (800a20c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a14e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a152:	f023 021f 	bic.w	r2, r3, #31
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6a1b      	ldr	r3, [r3, #32]
 800a15a:	3b01      	subs	r3, #1
 800a15c:	492b      	ldr	r1, [pc, #172]	; (800a20c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a15e:	4313      	orrs	r3, r2
 800a160:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d00d      	beq.n	800a18c <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	685b      	ldr	r3, [r3, #4]
 800a174:	019a      	lsls	r2, r3, #6
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	68db      	ldr	r3, [r3, #12]
 800a17a:	061b      	lsls	r3, r3, #24
 800a17c:	431a      	orrs	r2, r3
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	689b      	ldr	r3, [r3, #8]
 800a182:	071b      	lsls	r3, r3, #28
 800a184:	4921      	ldr	r1, [pc, #132]	; (800a20c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a186:	4313      	orrs	r3, r2
 800a188:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a18c:	4b20      	ldr	r3, [pc, #128]	; (800a210 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800a18e:	2201      	movs	r2, #1
 800a190:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a192:	f7fd fabb 	bl	800770c <HAL_GetTick>
 800a196:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a198:	e008      	b.n	800a1ac <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a19a:	f7fd fab7 	bl	800770c <HAL_GetTick>
 800a19e:	4602      	mov	r2, r0
 800a1a0:	69fb      	ldr	r3, [r7, #28]
 800a1a2:	1ad3      	subs	r3, r2, r3
 800a1a4:	2b02      	cmp	r3, #2
 800a1a6:	d901      	bls.n	800a1ac <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a1a8:	2303      	movs	r3, #3
 800a1aa:	e17c      	b.n	800a4a6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a1ac:	4b17      	ldr	r3, [pc, #92]	; (800a20c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d0f0      	beq.n	800a19a <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f003 0304 	and.w	r3, r3, #4
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d112      	bne.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d10c      	bne.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	f000 80ce 	beq.w	800a37a <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800a1e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a1e6:	f040 80c8 	bne.w	800a37a <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a1ea:	4b0a      	ldr	r3, [pc, #40]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a1f0:	f7fd fa8c 	bl	800770c <HAL_GetTick>
 800a1f4:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a1f6:	e00f      	b.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800a1f8:	f7fd fa88 	bl	800770c <HAL_GetTick>
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	69fb      	ldr	r3, [r7, #28]
 800a200:	1ad3      	subs	r3, r2, r3
 800a202:	2b02      	cmp	r3, #2
 800a204:	d908      	bls.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a206:	2303      	movs	r3, #3
 800a208:	e14d      	b.n	800a4a6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800a20a:	bf00      	nop
 800a20c:	40023800 	.word	0x40023800
 800a210:	42470068 	.word	0x42470068
 800a214:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a218:	4ba5      	ldr	r3, [pc, #660]	; (800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a220:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a224:	d0e8      	beq.n	800a1f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f003 0304 	and.w	r3, r3, #4
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d02e      	beq.n	800a290 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800a232:	4b9f      	ldr	r3, [pc, #636]	; (800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a238:	0c1b      	lsrs	r3, r3, #16
 800a23a:	f003 0303 	and.w	r3, r3, #3
 800a23e:	3301      	adds	r3, #1
 800a240:	005b      	lsls	r3, r3, #1
 800a242:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a244:	4b9a      	ldr	r3, [pc, #616]	; (800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a24a:	0f1b      	lsrs	r3, r3, #28
 800a24c:	f003 0307 	and.w	r3, r3, #7
 800a250:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	691b      	ldr	r3, [r3, #16]
 800a256:	019a      	lsls	r2, r3, #6
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	085b      	lsrs	r3, r3, #1
 800a25c:	3b01      	subs	r3, #1
 800a25e:	041b      	lsls	r3, r3, #16
 800a260:	431a      	orrs	r2, r3
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	699b      	ldr	r3, [r3, #24]
 800a266:	061b      	lsls	r3, r3, #24
 800a268:	431a      	orrs	r2, r3
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	071b      	lsls	r3, r3, #28
 800a26e:	4990      	ldr	r1, [pc, #576]	; (800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a270:	4313      	orrs	r3, r2
 800a272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a276:	4b8e      	ldr	r3, [pc, #568]	; (800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a278:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a27c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a284:	3b01      	subs	r3, #1
 800a286:	021b      	lsls	r3, r3, #8
 800a288:	4989      	ldr	r1, [pc, #548]	; (800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a28a:	4313      	orrs	r3, r2
 800a28c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f003 0308 	and.w	r3, r3, #8
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d02c      	beq.n	800a2f6 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800a29c:	4b84      	ldr	r3, [pc, #528]	; (800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a29e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2a2:	0c1b      	lsrs	r3, r3, #16
 800a2a4:	f003 0303 	and.w	r3, r3, #3
 800a2a8:	3301      	adds	r3, #1
 800a2aa:	005b      	lsls	r3, r3, #1
 800a2ac:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a2ae:	4b80      	ldr	r3, [pc, #512]	; (800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a2b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2b4:	0e1b      	lsrs	r3, r3, #24
 800a2b6:	f003 030f 	and.w	r3, r3, #15
 800a2ba:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	691b      	ldr	r3, [r3, #16]
 800a2c0:	019a      	lsls	r2, r3, #6
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	085b      	lsrs	r3, r3, #1
 800a2c6:	3b01      	subs	r3, #1
 800a2c8:	041b      	lsls	r3, r3, #16
 800a2ca:	431a      	orrs	r2, r3
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	061b      	lsls	r3, r3, #24
 800a2d0:	431a      	orrs	r2, r3
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	69db      	ldr	r3, [r3, #28]
 800a2d6:	071b      	lsls	r3, r3, #28
 800a2d8:	4975      	ldr	r1, [pc, #468]	; (800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800a2e0:	4b73      	ldr	r3, [pc, #460]	; (800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a2e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a2e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ee:	4970      	ldr	r1, [pc, #448]	; (800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a2f0:	4313      	orrs	r3, r2
 800a2f2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d024      	beq.n	800a34c <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800a306:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a30a:	d11f      	bne.n	800a34c <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a30c:	4b68      	ldr	r3, [pc, #416]	; (800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a30e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a312:	0e1b      	lsrs	r3, r3, #24
 800a314:	f003 030f 	and.w	r3, r3, #15
 800a318:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a31a:	4b65      	ldr	r3, [pc, #404]	; (800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a31c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a320:	0f1b      	lsrs	r3, r3, #28
 800a322:	f003 0307 	and.w	r3, r3, #7
 800a326:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	691b      	ldr	r3, [r3, #16]
 800a32c:	019a      	lsls	r2, r3, #6
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	695b      	ldr	r3, [r3, #20]
 800a332:	085b      	lsrs	r3, r3, #1
 800a334:	3b01      	subs	r3, #1
 800a336:	041b      	lsls	r3, r3, #16
 800a338:	431a      	orrs	r2, r3
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	061b      	lsls	r3, r3, #24
 800a33e:	431a      	orrs	r2, r3
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	071b      	lsls	r3, r3, #28
 800a344:	495a      	ldr	r1, [pc, #360]	; (800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a346:	4313      	orrs	r3, r2
 800a348:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a34c:	4b59      	ldr	r3, [pc, #356]	; (800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800a34e:	2201      	movs	r2, #1
 800a350:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a352:	f7fd f9db 	bl	800770c <HAL_GetTick>
 800a356:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a358:	e008      	b.n	800a36c <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800a35a:	f7fd f9d7 	bl	800770c <HAL_GetTick>
 800a35e:	4602      	mov	r2, r0
 800a360:	69fb      	ldr	r3, [r7, #28]
 800a362:	1ad3      	subs	r3, r2, r3
 800a364:	2b02      	cmp	r3, #2
 800a366:	d901      	bls.n	800a36c <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a368:	2303      	movs	r3, #3
 800a36a:	e09c      	b.n	800a4a6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a36c:	4b50      	ldr	r3, [pc, #320]	; (800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a374:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a378:	d1ef      	bne.n	800a35a <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f003 0320 	and.w	r3, r3, #32
 800a382:	2b00      	cmp	r3, #0
 800a384:	f000 8083 	beq.w	800a48e <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a388:	2300      	movs	r3, #0
 800a38a:	60bb      	str	r3, [r7, #8]
 800a38c:	4b48      	ldr	r3, [pc, #288]	; (800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a38e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a390:	4a47      	ldr	r2, [pc, #284]	; (800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a392:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a396:	6413      	str	r3, [r2, #64]	; 0x40
 800a398:	4b45      	ldr	r3, [pc, #276]	; (800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a39a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a39c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a3a0:	60bb      	str	r3, [r7, #8]
 800a3a2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800a3a4:	4b44      	ldr	r3, [pc, #272]	; (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	4a43      	ldr	r2, [pc, #268]	; (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800a3aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a3ae:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a3b0:	f7fd f9ac 	bl	800770c <HAL_GetTick>
 800a3b4:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a3b6:	e008      	b.n	800a3ca <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a3b8:	f7fd f9a8 	bl	800770c <HAL_GetTick>
 800a3bc:	4602      	mov	r2, r0
 800a3be:	69fb      	ldr	r3, [r7, #28]
 800a3c0:	1ad3      	subs	r3, r2, r3
 800a3c2:	2b02      	cmp	r3, #2
 800a3c4:	d901      	bls.n	800a3ca <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800a3c6:	2303      	movs	r3, #3
 800a3c8:	e06d      	b.n	800a4a6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a3ca:	4b3b      	ldr	r3, [pc, #236]	; (800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d0f0      	beq.n	800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a3d6:	4b36      	ldr	r3, [pc, #216]	; (800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a3d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a3de:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a3e0:	69bb      	ldr	r3, [r7, #24]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d02f      	beq.n	800a446 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a3ee:	69ba      	ldr	r2, [r7, #24]
 800a3f0:	429a      	cmp	r2, r3
 800a3f2:	d028      	beq.n	800a446 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a3f4:	4b2e      	ldr	r3, [pc, #184]	; (800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a3f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3fc:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a3fe:	4b2f      	ldr	r3, [pc, #188]	; (800a4bc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800a400:	2201      	movs	r2, #1
 800a402:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a404:	4b2d      	ldr	r3, [pc, #180]	; (800a4bc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800a406:	2200      	movs	r2, #0
 800a408:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800a40a:	4a29      	ldr	r2, [pc, #164]	; (800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a40c:	69bb      	ldr	r3, [r7, #24]
 800a40e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a410:	4b27      	ldr	r3, [pc, #156]	; (800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a414:	f003 0301 	and.w	r3, r3, #1
 800a418:	2b01      	cmp	r3, #1
 800a41a:	d114      	bne.n	800a446 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800a41c:	f7fd f976 	bl	800770c <HAL_GetTick>
 800a420:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a422:	e00a      	b.n	800a43a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a424:	f7fd f972 	bl	800770c <HAL_GetTick>
 800a428:	4602      	mov	r2, r0
 800a42a:	69fb      	ldr	r3, [r7, #28]
 800a42c:	1ad3      	subs	r3, r2, r3
 800a42e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a432:	4293      	cmp	r3, r2
 800a434:	d901      	bls.n	800a43a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800a436:	2303      	movs	r3, #3
 800a438:	e035      	b.n	800a4a6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a43a:	4b1d      	ldr	r3, [pc, #116]	; (800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a43c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a43e:	f003 0302 	and.w	r3, r3, #2
 800a442:	2b00      	cmp	r3, #0
 800a444:	d0ee      	beq.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a44a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a44e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a452:	d10d      	bne.n	800a470 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800a454:	4b16      	ldr	r3, [pc, #88]	; (800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a456:	689b      	ldr	r3, [r3, #8]
 800a458:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a460:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a464:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a468:	4911      	ldr	r1, [pc, #68]	; (800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a46a:	4313      	orrs	r3, r2
 800a46c:	608b      	str	r3, [r1, #8]
 800a46e:	e005      	b.n	800a47c <HAL_RCCEx_PeriphCLKConfig+0x434>
 800a470:	4b0f      	ldr	r3, [pc, #60]	; (800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a472:	689b      	ldr	r3, [r3, #8]
 800a474:	4a0e      	ldr	r2, [pc, #56]	; (800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a476:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a47a:	6093      	str	r3, [r2, #8]
 800a47c:	4b0c      	ldr	r3, [pc, #48]	; (800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a47e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a484:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a488:	4909      	ldr	r1, [pc, #36]	; (800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a48a:	4313      	orrs	r3, r2
 800a48c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f003 0310 	and.w	r3, r3, #16
 800a496:	2b00      	cmp	r3, #0
 800a498:	d004      	beq.n	800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800a4a0:	4b07      	ldr	r3, [pc, #28]	; (800a4c0 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800a4a2:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800a4a4:	2300      	movs	r3, #0
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3720      	adds	r7, #32
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}
 800a4ae:	bf00      	nop
 800a4b0:	40023800 	.word	0x40023800
 800a4b4:	42470070 	.word	0x42470070
 800a4b8:	40007000 	.word	0x40007000
 800a4bc:	42470e40 	.word	0x42470e40
 800a4c0:	424711e0 	.word	0x424711e0

0800a4c4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b086      	sub	sp, #24
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f003 0301 	and.w	r3, r3, #1
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d075      	beq.n	800a5c8 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800a4dc:	4ba2      	ldr	r3, [pc, #648]	; (800a768 <HAL_RCC_OscConfig+0x2a4>)
 800a4de:	689b      	ldr	r3, [r3, #8]
 800a4e0:	f003 030c 	and.w	r3, r3, #12
 800a4e4:	2b04      	cmp	r3, #4
 800a4e6:	d00c      	beq.n	800a502 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a4e8:	4b9f      	ldr	r3, [pc, #636]	; (800a768 <HAL_RCC_OscConfig+0x2a4>)
 800a4ea:	689b      	ldr	r3, [r3, #8]
 800a4ec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800a4f0:	2b08      	cmp	r3, #8
 800a4f2:	d112      	bne.n	800a51a <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a4f4:	4b9c      	ldr	r3, [pc, #624]	; (800a768 <HAL_RCC_OscConfig+0x2a4>)
 800a4f6:	685b      	ldr	r3, [r3, #4]
 800a4f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a4fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a500:	d10b      	bne.n	800a51a <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a502:	4b99      	ldr	r3, [pc, #612]	; (800a768 <HAL_RCC_OscConfig+0x2a4>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d05b      	beq.n	800a5c6 <HAL_RCC_OscConfig+0x102>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	685b      	ldr	r3, [r3, #4]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d157      	bne.n	800a5c6 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800a516:	2301      	movs	r3, #1
 800a518:	e20b      	b.n	800a932 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	685b      	ldr	r3, [r3, #4]
 800a51e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a522:	d106      	bne.n	800a532 <HAL_RCC_OscConfig+0x6e>
 800a524:	4b90      	ldr	r3, [pc, #576]	; (800a768 <HAL_RCC_OscConfig+0x2a4>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	4a8f      	ldr	r2, [pc, #572]	; (800a768 <HAL_RCC_OscConfig+0x2a4>)
 800a52a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a52e:	6013      	str	r3, [r2, #0]
 800a530:	e01d      	b.n	800a56e <HAL_RCC_OscConfig+0xaa>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	685b      	ldr	r3, [r3, #4]
 800a536:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a53a:	d10c      	bne.n	800a556 <HAL_RCC_OscConfig+0x92>
 800a53c:	4b8a      	ldr	r3, [pc, #552]	; (800a768 <HAL_RCC_OscConfig+0x2a4>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	4a89      	ldr	r2, [pc, #548]	; (800a768 <HAL_RCC_OscConfig+0x2a4>)
 800a542:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a546:	6013      	str	r3, [r2, #0]
 800a548:	4b87      	ldr	r3, [pc, #540]	; (800a768 <HAL_RCC_OscConfig+0x2a4>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	4a86      	ldr	r2, [pc, #536]	; (800a768 <HAL_RCC_OscConfig+0x2a4>)
 800a54e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a552:	6013      	str	r3, [r2, #0]
 800a554:	e00b      	b.n	800a56e <HAL_RCC_OscConfig+0xaa>
 800a556:	4b84      	ldr	r3, [pc, #528]	; (800a768 <HAL_RCC_OscConfig+0x2a4>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	4a83      	ldr	r2, [pc, #524]	; (800a768 <HAL_RCC_OscConfig+0x2a4>)
 800a55c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a560:	6013      	str	r3, [r2, #0]
 800a562:	4b81      	ldr	r3, [pc, #516]	; (800a768 <HAL_RCC_OscConfig+0x2a4>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	4a80      	ldr	r2, [pc, #512]	; (800a768 <HAL_RCC_OscConfig+0x2a4>)
 800a568:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a56c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	685b      	ldr	r3, [r3, #4]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d013      	beq.n	800a59e <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a576:	f7fd f8c9 	bl	800770c <HAL_GetTick>
 800a57a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a57c:	e008      	b.n	800a590 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a57e:	f7fd f8c5 	bl	800770c <HAL_GetTick>
 800a582:	4602      	mov	r2, r0
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	1ad3      	subs	r3, r2, r3
 800a588:	2b64      	cmp	r3, #100	; 0x64
 800a58a:	d901      	bls.n	800a590 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800a58c:	2303      	movs	r3, #3
 800a58e:	e1d0      	b.n	800a932 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a590:	4b75      	ldr	r3, [pc, #468]	; (800a768 <HAL_RCC_OscConfig+0x2a4>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d0f0      	beq.n	800a57e <HAL_RCC_OscConfig+0xba>
 800a59c:	e014      	b.n	800a5c8 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a59e:	f7fd f8b5 	bl	800770c <HAL_GetTick>
 800a5a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a5a4:	e008      	b.n	800a5b8 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a5a6:	f7fd f8b1 	bl	800770c <HAL_GetTick>
 800a5aa:	4602      	mov	r2, r0
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	1ad3      	subs	r3, r2, r3
 800a5b0:	2b64      	cmp	r3, #100	; 0x64
 800a5b2:	d901      	bls.n	800a5b8 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800a5b4:	2303      	movs	r3, #3
 800a5b6:	e1bc      	b.n	800a932 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a5b8:	4b6b      	ldr	r3, [pc, #428]	; (800a768 <HAL_RCC_OscConfig+0x2a4>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d1f0      	bne.n	800a5a6 <HAL_RCC_OscConfig+0xe2>
 800a5c4:	e000      	b.n	800a5c8 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a5c6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f003 0302 	and.w	r3, r3, #2
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d063      	beq.n	800a69c <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800a5d4:	4b64      	ldr	r3, [pc, #400]	; (800a768 <HAL_RCC_OscConfig+0x2a4>)
 800a5d6:	689b      	ldr	r3, [r3, #8]
 800a5d8:	f003 030c 	and.w	r3, r3, #12
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d00b      	beq.n	800a5f8 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a5e0:	4b61      	ldr	r3, [pc, #388]	; (800a768 <HAL_RCC_OscConfig+0x2a4>)
 800a5e2:	689b      	ldr	r3, [r3, #8]
 800a5e4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800a5e8:	2b08      	cmp	r3, #8
 800a5ea:	d11c      	bne.n	800a626 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a5ec:	4b5e      	ldr	r3, [pc, #376]	; (800a768 <HAL_RCC_OscConfig+0x2a4>)
 800a5ee:	685b      	ldr	r3, [r3, #4]
 800a5f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d116      	bne.n	800a626 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a5f8:	4b5b      	ldr	r3, [pc, #364]	; (800a768 <HAL_RCC_OscConfig+0x2a4>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f003 0302 	and.w	r3, r3, #2
 800a600:	2b00      	cmp	r3, #0
 800a602:	d005      	beq.n	800a610 <HAL_RCC_OscConfig+0x14c>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	68db      	ldr	r3, [r3, #12]
 800a608:	2b01      	cmp	r3, #1
 800a60a:	d001      	beq.n	800a610 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800a60c:	2301      	movs	r3, #1
 800a60e:	e190      	b.n	800a932 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a610:	4b55      	ldr	r3, [pc, #340]	; (800a768 <HAL_RCC_OscConfig+0x2a4>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	691b      	ldr	r3, [r3, #16]
 800a61c:	00db      	lsls	r3, r3, #3
 800a61e:	4952      	ldr	r1, [pc, #328]	; (800a768 <HAL_RCC_OscConfig+0x2a4>)
 800a620:	4313      	orrs	r3, r2
 800a622:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a624:	e03a      	b.n	800a69c <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	68db      	ldr	r3, [r3, #12]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d020      	beq.n	800a670 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a62e:	4b4f      	ldr	r3, [pc, #316]	; (800a76c <HAL_RCC_OscConfig+0x2a8>)
 800a630:	2201      	movs	r2, #1
 800a632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a634:	f7fd f86a 	bl	800770c <HAL_GetTick>
 800a638:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a63a:	e008      	b.n	800a64e <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a63c:	f7fd f866 	bl	800770c <HAL_GetTick>
 800a640:	4602      	mov	r2, r0
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	1ad3      	subs	r3, r2, r3
 800a646:	2b02      	cmp	r3, #2
 800a648:	d901      	bls.n	800a64e <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800a64a:	2303      	movs	r3, #3
 800a64c:	e171      	b.n	800a932 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a64e:	4b46      	ldr	r3, [pc, #280]	; (800a768 <HAL_RCC_OscConfig+0x2a4>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f003 0302 	and.w	r3, r3, #2
 800a656:	2b00      	cmp	r3, #0
 800a658:	d0f0      	beq.n	800a63c <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a65a:	4b43      	ldr	r3, [pc, #268]	; (800a768 <HAL_RCC_OscConfig+0x2a4>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	691b      	ldr	r3, [r3, #16]
 800a666:	00db      	lsls	r3, r3, #3
 800a668:	493f      	ldr	r1, [pc, #252]	; (800a768 <HAL_RCC_OscConfig+0x2a4>)
 800a66a:	4313      	orrs	r3, r2
 800a66c:	600b      	str	r3, [r1, #0]
 800a66e:	e015      	b.n	800a69c <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a670:	4b3e      	ldr	r3, [pc, #248]	; (800a76c <HAL_RCC_OscConfig+0x2a8>)
 800a672:	2200      	movs	r2, #0
 800a674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a676:	f7fd f849 	bl	800770c <HAL_GetTick>
 800a67a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a67c:	e008      	b.n	800a690 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a67e:	f7fd f845 	bl	800770c <HAL_GetTick>
 800a682:	4602      	mov	r2, r0
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	1ad3      	subs	r3, r2, r3
 800a688:	2b02      	cmp	r3, #2
 800a68a:	d901      	bls.n	800a690 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800a68c:	2303      	movs	r3, #3
 800a68e:	e150      	b.n	800a932 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a690:	4b35      	ldr	r3, [pc, #212]	; (800a768 <HAL_RCC_OscConfig+0x2a4>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f003 0302 	and.w	r3, r3, #2
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d1f0      	bne.n	800a67e <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f003 0308 	and.w	r3, r3, #8
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d030      	beq.n	800a70a <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	695b      	ldr	r3, [r3, #20]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d016      	beq.n	800a6de <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a6b0:	4b2f      	ldr	r3, [pc, #188]	; (800a770 <HAL_RCC_OscConfig+0x2ac>)
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a6b6:	f7fd f829 	bl	800770c <HAL_GetTick>
 800a6ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a6bc:	e008      	b.n	800a6d0 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a6be:	f7fd f825 	bl	800770c <HAL_GetTick>
 800a6c2:	4602      	mov	r2, r0
 800a6c4:	693b      	ldr	r3, [r7, #16]
 800a6c6:	1ad3      	subs	r3, r2, r3
 800a6c8:	2b02      	cmp	r3, #2
 800a6ca:	d901      	bls.n	800a6d0 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800a6cc:	2303      	movs	r3, #3
 800a6ce:	e130      	b.n	800a932 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a6d0:	4b25      	ldr	r3, [pc, #148]	; (800a768 <HAL_RCC_OscConfig+0x2a4>)
 800a6d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6d4:	f003 0302 	and.w	r3, r3, #2
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d0f0      	beq.n	800a6be <HAL_RCC_OscConfig+0x1fa>
 800a6dc:	e015      	b.n	800a70a <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a6de:	4b24      	ldr	r3, [pc, #144]	; (800a770 <HAL_RCC_OscConfig+0x2ac>)
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a6e4:	f7fd f812 	bl	800770c <HAL_GetTick>
 800a6e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a6ea:	e008      	b.n	800a6fe <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a6ec:	f7fd f80e 	bl	800770c <HAL_GetTick>
 800a6f0:	4602      	mov	r2, r0
 800a6f2:	693b      	ldr	r3, [r7, #16]
 800a6f4:	1ad3      	subs	r3, r2, r3
 800a6f6:	2b02      	cmp	r3, #2
 800a6f8:	d901      	bls.n	800a6fe <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800a6fa:	2303      	movs	r3, #3
 800a6fc:	e119      	b.n	800a932 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a6fe:	4b1a      	ldr	r3, [pc, #104]	; (800a768 <HAL_RCC_OscConfig+0x2a4>)
 800a700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a702:	f003 0302 	and.w	r3, r3, #2
 800a706:	2b00      	cmp	r3, #0
 800a708:	d1f0      	bne.n	800a6ec <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f003 0304 	and.w	r3, r3, #4
 800a712:	2b00      	cmp	r3, #0
 800a714:	f000 809f 	beq.w	800a856 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a718:	2300      	movs	r3, #0
 800a71a:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a71c:	4b12      	ldr	r3, [pc, #72]	; (800a768 <HAL_RCC_OscConfig+0x2a4>)
 800a71e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a724:	2b00      	cmp	r3, #0
 800a726:	d10f      	bne.n	800a748 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a728:	2300      	movs	r3, #0
 800a72a:	60fb      	str	r3, [r7, #12]
 800a72c:	4b0e      	ldr	r3, [pc, #56]	; (800a768 <HAL_RCC_OscConfig+0x2a4>)
 800a72e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a730:	4a0d      	ldr	r2, [pc, #52]	; (800a768 <HAL_RCC_OscConfig+0x2a4>)
 800a732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a736:	6413      	str	r3, [r2, #64]	; 0x40
 800a738:	4b0b      	ldr	r3, [pc, #44]	; (800a768 <HAL_RCC_OscConfig+0x2a4>)
 800a73a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a73c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a740:	60fb      	str	r3, [r7, #12]
 800a742:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800a744:	2301      	movs	r3, #1
 800a746:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a748:	4b0a      	ldr	r3, [pc, #40]	; (800a774 <HAL_RCC_OscConfig+0x2b0>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a750:	2b00      	cmp	r3, #0
 800a752:	d120      	bne.n	800a796 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a754:	4b07      	ldr	r3, [pc, #28]	; (800a774 <HAL_RCC_OscConfig+0x2b0>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4a06      	ldr	r2, [pc, #24]	; (800a774 <HAL_RCC_OscConfig+0x2b0>)
 800a75a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a75e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a760:	f7fc ffd4 	bl	800770c <HAL_GetTick>
 800a764:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a766:	e010      	b.n	800a78a <HAL_RCC_OscConfig+0x2c6>
 800a768:	40023800 	.word	0x40023800
 800a76c:	42470000 	.word	0x42470000
 800a770:	42470e80 	.word	0x42470e80
 800a774:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a778:	f7fc ffc8 	bl	800770c <HAL_GetTick>
 800a77c:	4602      	mov	r2, r0
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	1ad3      	subs	r3, r2, r3
 800a782:	2b02      	cmp	r3, #2
 800a784:	d901      	bls.n	800a78a <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800a786:	2303      	movs	r3, #3
 800a788:	e0d3      	b.n	800a932 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a78a:	4b6c      	ldr	r3, [pc, #432]	; (800a93c <HAL_RCC_OscConfig+0x478>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a792:	2b00      	cmp	r3, #0
 800a794:	d0f0      	beq.n	800a778 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	689b      	ldr	r3, [r3, #8]
 800a79a:	2b01      	cmp	r3, #1
 800a79c:	d106      	bne.n	800a7ac <HAL_RCC_OscConfig+0x2e8>
 800a79e:	4b68      	ldr	r3, [pc, #416]	; (800a940 <HAL_RCC_OscConfig+0x47c>)
 800a7a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7a2:	4a67      	ldr	r2, [pc, #412]	; (800a940 <HAL_RCC_OscConfig+0x47c>)
 800a7a4:	f043 0301 	orr.w	r3, r3, #1
 800a7a8:	6713      	str	r3, [r2, #112]	; 0x70
 800a7aa:	e01c      	b.n	800a7e6 <HAL_RCC_OscConfig+0x322>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	689b      	ldr	r3, [r3, #8]
 800a7b0:	2b05      	cmp	r3, #5
 800a7b2:	d10c      	bne.n	800a7ce <HAL_RCC_OscConfig+0x30a>
 800a7b4:	4b62      	ldr	r3, [pc, #392]	; (800a940 <HAL_RCC_OscConfig+0x47c>)
 800a7b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7b8:	4a61      	ldr	r2, [pc, #388]	; (800a940 <HAL_RCC_OscConfig+0x47c>)
 800a7ba:	f043 0304 	orr.w	r3, r3, #4
 800a7be:	6713      	str	r3, [r2, #112]	; 0x70
 800a7c0:	4b5f      	ldr	r3, [pc, #380]	; (800a940 <HAL_RCC_OscConfig+0x47c>)
 800a7c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7c4:	4a5e      	ldr	r2, [pc, #376]	; (800a940 <HAL_RCC_OscConfig+0x47c>)
 800a7c6:	f043 0301 	orr.w	r3, r3, #1
 800a7ca:	6713      	str	r3, [r2, #112]	; 0x70
 800a7cc:	e00b      	b.n	800a7e6 <HAL_RCC_OscConfig+0x322>
 800a7ce:	4b5c      	ldr	r3, [pc, #368]	; (800a940 <HAL_RCC_OscConfig+0x47c>)
 800a7d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7d2:	4a5b      	ldr	r2, [pc, #364]	; (800a940 <HAL_RCC_OscConfig+0x47c>)
 800a7d4:	f023 0301 	bic.w	r3, r3, #1
 800a7d8:	6713      	str	r3, [r2, #112]	; 0x70
 800a7da:	4b59      	ldr	r3, [pc, #356]	; (800a940 <HAL_RCC_OscConfig+0x47c>)
 800a7dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7de:	4a58      	ldr	r2, [pc, #352]	; (800a940 <HAL_RCC_OscConfig+0x47c>)
 800a7e0:	f023 0304 	bic.w	r3, r3, #4
 800a7e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	689b      	ldr	r3, [r3, #8]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d015      	beq.n	800a81a <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a7ee:	f7fc ff8d 	bl	800770c <HAL_GetTick>
 800a7f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a7f4:	e00a      	b.n	800a80c <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a7f6:	f7fc ff89 	bl	800770c <HAL_GetTick>
 800a7fa:	4602      	mov	r2, r0
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	1ad3      	subs	r3, r2, r3
 800a800:	f241 3288 	movw	r2, #5000	; 0x1388
 800a804:	4293      	cmp	r3, r2
 800a806:	d901      	bls.n	800a80c <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800a808:	2303      	movs	r3, #3
 800a80a:	e092      	b.n	800a932 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a80c:	4b4c      	ldr	r3, [pc, #304]	; (800a940 <HAL_RCC_OscConfig+0x47c>)
 800a80e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a810:	f003 0302 	and.w	r3, r3, #2
 800a814:	2b00      	cmp	r3, #0
 800a816:	d0ee      	beq.n	800a7f6 <HAL_RCC_OscConfig+0x332>
 800a818:	e014      	b.n	800a844 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a81a:	f7fc ff77 	bl	800770c <HAL_GetTick>
 800a81e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a820:	e00a      	b.n	800a838 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a822:	f7fc ff73 	bl	800770c <HAL_GetTick>
 800a826:	4602      	mov	r2, r0
 800a828:	693b      	ldr	r3, [r7, #16]
 800a82a:	1ad3      	subs	r3, r2, r3
 800a82c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a830:	4293      	cmp	r3, r2
 800a832:	d901      	bls.n	800a838 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800a834:	2303      	movs	r3, #3
 800a836:	e07c      	b.n	800a932 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a838:	4b41      	ldr	r3, [pc, #260]	; (800a940 <HAL_RCC_OscConfig+0x47c>)
 800a83a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a83c:	f003 0302 	and.w	r3, r3, #2
 800a840:	2b00      	cmp	r3, #0
 800a842:	d1ee      	bne.n	800a822 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a844:	7dfb      	ldrb	r3, [r7, #23]
 800a846:	2b01      	cmp	r3, #1
 800a848:	d105      	bne.n	800a856 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a84a:	4b3d      	ldr	r3, [pc, #244]	; (800a940 <HAL_RCC_OscConfig+0x47c>)
 800a84c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a84e:	4a3c      	ldr	r2, [pc, #240]	; (800a940 <HAL_RCC_OscConfig+0x47c>)
 800a850:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a854:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	699b      	ldr	r3, [r3, #24]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d068      	beq.n	800a930 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a85e:	4b38      	ldr	r3, [pc, #224]	; (800a940 <HAL_RCC_OscConfig+0x47c>)
 800a860:	689b      	ldr	r3, [r3, #8]
 800a862:	f003 030c 	and.w	r3, r3, #12
 800a866:	2b08      	cmp	r3, #8
 800a868:	d060      	beq.n	800a92c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	699b      	ldr	r3, [r3, #24]
 800a86e:	2b02      	cmp	r3, #2
 800a870:	d145      	bne.n	800a8fe <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a872:	4b34      	ldr	r3, [pc, #208]	; (800a944 <HAL_RCC_OscConfig+0x480>)
 800a874:	2200      	movs	r2, #0
 800a876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a878:	f7fc ff48 	bl	800770c <HAL_GetTick>
 800a87c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a87e:	e008      	b.n	800a892 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a880:	f7fc ff44 	bl	800770c <HAL_GetTick>
 800a884:	4602      	mov	r2, r0
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	1ad3      	subs	r3, r2, r3
 800a88a:	2b02      	cmp	r3, #2
 800a88c:	d901      	bls.n	800a892 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800a88e:	2303      	movs	r3, #3
 800a890:	e04f      	b.n	800a932 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a892:	4b2b      	ldr	r3, [pc, #172]	; (800a940 <HAL_RCC_OscConfig+0x47c>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d1f0      	bne.n	800a880 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	69da      	ldr	r2, [r3, #28]
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6a1b      	ldr	r3, [r3, #32]
 800a8a6:	431a      	orrs	r2, r3
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ac:	019b      	lsls	r3, r3, #6
 800a8ae:	431a      	orrs	r2, r3
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8b4:	085b      	lsrs	r3, r3, #1
 800a8b6:	3b01      	subs	r3, #1
 800a8b8:	041b      	lsls	r3, r3, #16
 800a8ba:	431a      	orrs	r2, r3
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8c0:	061b      	lsls	r3, r3, #24
 800a8c2:	431a      	orrs	r2, r3
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8c8:	071b      	lsls	r3, r3, #28
 800a8ca:	491d      	ldr	r1, [pc, #116]	; (800a940 <HAL_RCC_OscConfig+0x47c>)
 800a8cc:	4313      	orrs	r3, r2
 800a8ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a8d0:	4b1c      	ldr	r3, [pc, #112]	; (800a944 <HAL_RCC_OscConfig+0x480>)
 800a8d2:	2201      	movs	r2, #1
 800a8d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8d6:	f7fc ff19 	bl	800770c <HAL_GetTick>
 800a8da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a8dc:	e008      	b.n	800a8f0 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a8de:	f7fc ff15 	bl	800770c <HAL_GetTick>
 800a8e2:	4602      	mov	r2, r0
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	1ad3      	subs	r3, r2, r3
 800a8e8:	2b02      	cmp	r3, #2
 800a8ea:	d901      	bls.n	800a8f0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800a8ec:	2303      	movs	r3, #3
 800a8ee:	e020      	b.n	800a932 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a8f0:	4b13      	ldr	r3, [pc, #76]	; (800a940 <HAL_RCC_OscConfig+0x47c>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d0f0      	beq.n	800a8de <HAL_RCC_OscConfig+0x41a>
 800a8fc:	e018      	b.n	800a930 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a8fe:	4b11      	ldr	r3, [pc, #68]	; (800a944 <HAL_RCC_OscConfig+0x480>)
 800a900:	2200      	movs	r2, #0
 800a902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a904:	f7fc ff02 	bl	800770c <HAL_GetTick>
 800a908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a90a:	e008      	b.n	800a91e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a90c:	f7fc fefe 	bl	800770c <HAL_GetTick>
 800a910:	4602      	mov	r2, r0
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	1ad3      	subs	r3, r2, r3
 800a916:	2b02      	cmp	r3, #2
 800a918:	d901      	bls.n	800a91e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800a91a:	2303      	movs	r3, #3
 800a91c:	e009      	b.n	800a932 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a91e:	4b08      	ldr	r3, [pc, #32]	; (800a940 <HAL_RCC_OscConfig+0x47c>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a926:	2b00      	cmp	r3, #0
 800a928:	d1f0      	bne.n	800a90c <HAL_RCC_OscConfig+0x448>
 800a92a:	e001      	b.n	800a930 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800a92c:	2301      	movs	r3, #1
 800a92e:	e000      	b.n	800a932 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800a930:	2300      	movs	r3, #0
}
 800a932:	4618      	mov	r0, r3
 800a934:	3718      	adds	r7, #24
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}
 800a93a:	bf00      	nop
 800a93c:	40007000 	.word	0x40007000
 800a940:	40023800 	.word	0x40023800
 800a944:	42470060 	.word	0x42470060

0800a948 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b082      	sub	sp, #8
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d101      	bne.n	800a95a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a956:	2301      	movs	r3, #1
 800a958:	e022      	b.n	800a9a0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a960:	b2db      	uxtb	r3, r3
 800a962:	2b00      	cmp	r3, #0
 800a964:	d105      	bne.n	800a972 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2200      	movs	r2, #0
 800a96a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f7fa fe85 	bl	800567c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2203      	movs	r2, #3
 800a976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 f814 	bl	800a9a8 <HAL_SD_InitCard>
 800a980:	4603      	mov	r3, r0
 800a982:	2b00      	cmp	r3, #0
 800a984:	d001      	beq.n	800a98a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800a986:	2301      	movs	r3, #1
 800a988:	e00a      	b.n	800a9a0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2200      	movs	r2, #0
 800a98e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2200      	movs	r2, #0
 800a994:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2201      	movs	r2, #1
 800a99a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a99e:	2300      	movs	r3, #0
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3708      	adds	r7, #8
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd80      	pop	{r7, pc}

0800a9a8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a9a8:	b5b0      	push	{r4, r5, r7, lr}
 800a9aa:	b08e      	sub	sp, #56	; 0x38
 800a9ac:	af04      	add	r7, sp, #16
 800a9ae:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800a9c4:	2376      	movs	r3, #118	; 0x76
 800a9c6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681d      	ldr	r5, [r3, #0]
 800a9cc:	466c      	mov	r4, sp
 800a9ce:	f107 0314 	add.w	r3, r7, #20
 800a9d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a9d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a9da:	f107 0308 	add.w	r3, r7, #8
 800a9de:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a9e0:	4628      	mov	r0, r5
 800a9e2:	f003 fa87 	bl	800def4 <SDIO_Init>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800a9ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d001      	beq.n	800a9f8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800a9f4:	2301      	movs	r3, #1
 800a9f6:	e031      	b.n	800aa5c <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800a9f8:	4b1a      	ldr	r3, [pc, #104]	; (800aa64 <HAL_SD_InitCard+0xbc>)
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	4618      	mov	r0, r3
 800aa04:	f003 fabf 	bl	800df86 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800aa08:	4b16      	ldr	r3, [pc, #88]	; (800aa64 <HAL_SD_InitCard+0xbc>)
 800aa0a:	2201      	movs	r2, #1
 800aa0c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f000 ffc6 	bl	800b9a0 <SD_PowerON>
 800aa14:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aa16:	6a3b      	ldr	r3, [r7, #32]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d00b      	beq.n	800aa34 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2201      	movs	r2, #1
 800aa20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa28:	6a3b      	ldr	r3, [r7, #32]
 800aa2a:	431a      	orrs	r2, r3
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800aa30:	2301      	movs	r3, #1
 800aa32:	e013      	b.n	800aa5c <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f000 fee5 	bl	800b804 <SD_InitCard>
 800aa3a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aa3c:	6a3b      	ldr	r3, [r7, #32]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d00b      	beq.n	800aa5a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2201      	movs	r2, #1
 800aa46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa4e:	6a3b      	ldr	r3, [r7, #32]
 800aa50:	431a      	orrs	r2, r3
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800aa56:	2301      	movs	r3, #1
 800aa58:	e000      	b.n	800aa5c <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800aa5a:	2300      	movs	r3, #0
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	3728      	adds	r7, #40	; 0x28
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bdb0      	pop	{r4, r5, r7, pc}
 800aa64:	422580a0 	.word	0x422580a0

0800aa68 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b08c      	sub	sp, #48	; 0x30
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	60f8      	str	r0, [r7, #12]
 800aa70:	60b9      	str	r1, [r7, #8]
 800aa72:	607a      	str	r2, [r7, #4]
 800aa74:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d107      	bne.n	800aa90 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa84:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	e0c7      	b.n	800ac20 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aa96:	b2db      	uxtb	r3, r3
 800aa98:	2b01      	cmp	r3, #1
 800aa9a:	f040 80c0 	bne.w	800ac1e <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800aaa4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	441a      	add	r2, r3
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aaae:	429a      	cmp	r2, r3
 800aab0:	d907      	bls.n	800aac2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aab6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800aabe:	2301      	movs	r3, #1
 800aac0:	e0ae      	b.n	800ac20 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	2203      	movs	r2, #3
 800aac6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	2200      	movs	r2, #0
 800aad0:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800aae0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aae6:	4a50      	ldr	r2, [pc, #320]	; (800ac28 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800aae8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaee:	4a4f      	ldr	r2, [pc, #316]	; (800ac2c <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800aaf0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	3380      	adds	r3, #128	; 0x80
 800ab04:	4619      	mov	r1, r3
 800ab06:	68ba      	ldr	r2, [r7, #8]
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	025b      	lsls	r3, r3, #9
 800ab0c:	089b      	lsrs	r3, r3, #2
 800ab0e:	f7fd fbef 	bl	80082f0 <HAL_DMA_Start_IT>
 800ab12:	4603      	mov	r3, r0
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d017      	beq.n	800ab48 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800ab26:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	4a40      	ldr	r2, [pc, #256]	; (800ac30 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800ab2e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab34:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	2201      	movs	r2, #1
 800ab40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800ab44:	2301      	movs	r3, #1
 800ab46:	e06b      	b.n	800ac20 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800ab48:	4b3a      	ldr	r3, [pc, #232]	; (800ac34 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800ab4a:	2201      	movs	r2, #1
 800ab4c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab52:	2b01      	cmp	r3, #1
 800ab54:	d002      	beq.n	800ab5c <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800ab56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab58:	025b      	lsls	r3, r3, #9
 800ab5a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ab64:	4618      	mov	r0, r3
 800ab66:	f003 faa1 	bl	800e0ac <SDMMC_CmdBlockLength>
 800ab6a:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800ab6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d00f      	beq.n	800ab92 <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	4a2e      	ldr	r2, [pc, #184]	; (800ac30 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800ab78:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab80:	431a      	orrs	r2, r3
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	2201      	movs	r2, #1
 800ab8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800ab8e:	2301      	movs	r3, #1
 800ab90:	e046      	b.n	800ac20 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ab92:	f04f 33ff 	mov.w	r3, #4294967295
 800ab96:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	025b      	lsls	r3, r3, #9
 800ab9c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800ab9e:	2390      	movs	r3, #144	; 0x90
 800aba0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800aba2:	2302      	movs	r3, #2
 800aba4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800aba6:	2300      	movs	r3, #0
 800aba8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800abaa:	2301      	movs	r3, #1
 800abac:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f107 0210 	add.w	r2, r7, #16
 800abb6:	4611      	mov	r1, r2
 800abb8:	4618      	mov	r0, r3
 800abba:	f003 fa4b 	bl	800e054 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	2b01      	cmp	r3, #1
 800abc2:	d90a      	bls.n	800abda <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	2282      	movs	r2, #130	; 0x82
 800abc8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800abd0:	4618      	mov	r0, r3
 800abd2:	f003 faaf 	bl	800e134 <SDMMC_CmdReadMultiBlock>
 800abd6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800abd8:	e009      	b.n	800abee <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	2281      	movs	r2, #129	; 0x81
 800abde:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800abe6:	4618      	mov	r0, r3
 800abe8:	f003 fa82 	bl	800e0f0 <SDMMC_CmdReadSingleBlock>
 800abec:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800abee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d012      	beq.n	800ac1a <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	4a0d      	ldr	r2, [pc, #52]	; (800ac30 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800abfa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac02:	431a      	orrs	r2, r3
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	2201      	movs	r2, #1
 800ac0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	2200      	movs	r2, #0
 800ac14:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800ac16:	2301      	movs	r3, #1
 800ac18:	e002      	b.n	800ac20 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	e000      	b.n	800ac20 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800ac1e:	2302      	movs	r3, #2
  }
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	3730      	adds	r7, #48	; 0x30
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}
 800ac28:	0800b613 	.word	0x0800b613
 800ac2c:	0800b685 	.word	0x0800b685
 800ac30:	004005ff 	.word	0x004005ff
 800ac34:	4225858c 	.word	0x4225858c

0800ac38 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b08c      	sub	sp, #48	; 0x30
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	60f8      	str	r0, [r7, #12]
 800ac40:	60b9      	str	r1, [r7, #8]
 800ac42:	607a      	str	r2, [r7, #4]
 800ac44:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d107      	bne.n	800ac60 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac54:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	e0ca      	b.n	800adf6 <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ac66:	b2db      	uxtb	r3, r3
 800ac68:	2b01      	cmp	r3, #1
 800ac6a:	f040 80c3 	bne.w	800adf4 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	2200      	movs	r2, #0
 800ac72:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ac74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	441a      	add	r2, r3
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac7e:	429a      	cmp	r2, r3
 800ac80:	d907      	bls.n	800ac92 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac86:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800ac8e:	2301      	movs	r3, #1
 800ac90:	e0b1      	b.n	800adf6 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	2203      	movs	r2, #3
 800ac96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	2200      	movs	r2, #0
 800aca0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f042 021a 	orr.w	r2, r2, #26
 800acb0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acb6:	4a52      	ldr	r2, [pc, #328]	; (800ae00 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800acb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acbe:	4a51      	ldr	r2, [pc, #324]	; (800ae04 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800acc0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acc6:	2200      	movs	r2, #0
 800acc8:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acce:	2b01      	cmp	r3, #1
 800acd0:	d002      	beq.n	800acd8 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800acd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acd4:	025b      	lsls	r3, r3, #9
 800acd6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ace0:	4618      	mov	r0, r3
 800ace2:	f003 f9e3 	bl	800e0ac <SDMMC_CmdBlockLength>
 800ace6:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ace8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acea:	2b00      	cmp	r3, #0
 800acec:	d00f      	beq.n	800ad0e <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	4a45      	ldr	r2, [pc, #276]	; (800ae08 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800acf4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acfc:	431a      	orrs	r2, r3
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	2201      	movs	r2, #1
 800ad06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	e073      	b.n	800adf6 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	2b01      	cmp	r3, #1
 800ad12:	d90a      	bls.n	800ad2a <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	22a0      	movs	r2, #160	; 0xa0
 800ad18:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ad20:	4618      	mov	r0, r3
 800ad22:	f003 fa4b 	bl	800e1bc <SDMMC_CmdWriteMultiBlock>
 800ad26:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ad28:	e009      	b.n	800ad3e <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	2290      	movs	r2, #144	; 0x90
 800ad2e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ad36:	4618      	mov	r0, r3
 800ad38:	f003 fa1e 	bl	800e178 <SDMMC_CmdWriteSingleBlock>
 800ad3c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800ad3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d012      	beq.n	800ad6a <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	4a2f      	ldr	r2, [pc, #188]	; (800ae08 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800ad4a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad52:	431a      	orrs	r2, r3
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	2200      	movs	r2, #0
 800ad64:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800ad66:	2301      	movs	r3, #1
 800ad68:	e045      	b.n	800adf6 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800ad6a:	4b28      	ldr	r3, [pc, #160]	; (800ae0c <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800ad6c:	2201      	movs	r2, #1
 800ad6e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800ad74:	68b9      	ldr	r1, [r7, #8]
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	3380      	adds	r3, #128	; 0x80
 800ad7c:	461a      	mov	r2, r3
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	025b      	lsls	r3, r3, #9
 800ad82:	089b      	lsrs	r3, r3, #2
 800ad84:	f7fd fab4 	bl	80082f0 <HAL_DMA_Start_IT>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d01a      	beq.n	800adc4 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	f022 021a 	bic.w	r2, r2, #26
 800ad9c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	4a19      	ldr	r2, [pc, #100]	; (800ae08 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800ada4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adaa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	2201      	movs	r2, #1
 800adb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	2200      	movs	r2, #0
 800adbe:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800adc0:	2301      	movs	r3, #1
 800adc2:	e018      	b.n	800adf6 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800adc4:	f04f 33ff 	mov.w	r3, #4294967295
 800adc8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	025b      	lsls	r3, r3, #9
 800adce:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800add0:	2390      	movs	r3, #144	; 0x90
 800add2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800add4:	2300      	movs	r3, #0
 800add6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800add8:	2300      	movs	r3, #0
 800adda:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800addc:	2301      	movs	r3, #1
 800adde:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f107 0210 	add.w	r2, r7, #16
 800ade8:	4611      	mov	r1, r2
 800adea:	4618      	mov	r0, r3
 800adec:	f003 f932 	bl	800e054 <SDIO_ConfigData>

      return HAL_OK;
 800adf0:	2300      	movs	r3, #0
 800adf2:	e000      	b.n	800adf6 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800adf4:	2302      	movs	r3, #2
  }
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	3730      	adds	r7, #48	; 0x30
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd80      	pop	{r7, pc}
 800adfe:	bf00      	nop
 800ae00:	0800b5e9 	.word	0x0800b5e9
 800ae04:	0800b685 	.word	0x0800b685
 800ae08:	004005ff 	.word	0x004005ff
 800ae0c:	4225858c 	.word	0x4225858c

0800ae10 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b084      	sub	sp, #16
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae1c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d008      	beq.n	800ae3e <HAL_SD_IRQHandler+0x2e>
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	f003 0308 	and.w	r3, r3, #8
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d003      	beq.n	800ae3e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f000 ffc8 	bl	800bdcc <SD_Read_IT>
 800ae3c:	e155      	b.n	800b0ea <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	f000 808f 	beq.w	800af6c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ae56:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae5e:	687a      	ldr	r2, [r7, #4]
 800ae60:	6812      	ldr	r2, [r2, #0]
 800ae62:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800ae66:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800ae6a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f022 0201 	bic.w	r2, r2, #1
 800ae7a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	f003 0308 	and.w	r3, r3, #8
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d039      	beq.n	800aefa <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	f003 0302 	and.w	r3, r3, #2
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d104      	bne.n	800ae9a <HAL_SD_IRQHandler+0x8a>
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f003 0320 	and.w	r3, r3, #32
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d011      	beq.n	800aebe <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f003 f9ae 	bl	800e200 <SDMMC_CmdStopTransfer>
 800aea4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d008      	beq.n	800aebe <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	431a      	orrs	r2, r3
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f000 f91f 	bl	800b0fc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f240 523a 	movw	r2, #1338	; 0x53a
 800aec6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2201      	movs	r2, #1
 800aecc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2200      	movs	r2, #0
 800aed4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	f003 0301 	and.w	r3, r3, #1
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d104      	bne.n	800aeea <HAL_SD_IRQHandler+0xda>
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	f003 0302 	and.w	r3, r3, #2
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d003      	beq.n	800aef2 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f003 fe04 	bl	800eaf8 <HAL_SD_RxCpltCallback>
 800aef0:	e0fb      	b.n	800b0ea <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f003 fdf6 	bl	800eae4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800aef8:	e0f7      	b.n	800b0ea <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af00:	2b00      	cmp	r3, #0
 800af02:	f000 80f2 	beq.w	800b0ea <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	f003 0320 	and.w	r3, r3, #32
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d011      	beq.n	800af34 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	4618      	mov	r0, r3
 800af16:	f003 f973 	bl	800e200 <SDMMC_CmdStopTransfer>
 800af1a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d008      	beq.n	800af34 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	431a      	orrs	r2, r3
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f000 f8e4 	bl	800b0fc <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	f003 0301 	and.w	r3, r3, #1
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	f040 80d5 	bne.w	800b0ea <HAL_SD_IRQHandler+0x2da>
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	f003 0302 	and.w	r3, r3, #2
 800af46:	2b00      	cmp	r3, #0
 800af48:	f040 80cf 	bne.w	800b0ea <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f022 0208 	bic.w	r2, r2, #8
 800af5a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2201      	movs	r2, #1
 800af60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f003 fdbd 	bl	800eae4 <HAL_SD_TxCpltCallback>
}
 800af6a:	e0be      	b.n	800b0ea <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af76:	2b00      	cmp	r3, #0
 800af78:	d008      	beq.n	800af8c <HAL_SD_IRQHandler+0x17c>
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	f003 0308 	and.w	r3, r3, #8
 800af80:	2b00      	cmp	r3, #0
 800af82:	d003      	beq.n	800af8c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800af84:	6878      	ldr	r0, [r7, #4]
 800af86:	f000 ff72 	bl	800be6e <SD_Write_IT>
 800af8a:	e0ae      	b.n	800b0ea <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af92:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800af96:	2b00      	cmp	r3, #0
 800af98:	f000 80a7 	beq.w	800b0ea <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afa2:	f003 0302 	and.w	r3, r3, #2
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d005      	beq.n	800afb6 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afae:	f043 0202 	orr.w	r2, r3, #2
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afbc:	f003 0308 	and.w	r3, r3, #8
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d005      	beq.n	800afd0 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afc8:	f043 0208 	orr.w	r2, r3, #8
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afd6:	f003 0320 	and.w	r3, r3, #32
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d005      	beq.n	800afea <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afe2:	f043 0220 	orr.w	r2, r3, #32
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aff0:	f003 0310 	and.w	r3, r3, #16
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d005      	beq.n	800b004 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800affc:	f043 0210 	orr.w	r2, r3, #16
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f240 523a 	movw	r2, #1338	; 0x53a
 800b00c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800b01c:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	4618      	mov	r0, r3
 800b024:	f003 f8ec 	bl	800e200 <SDMMC_CmdStopTransfer>
 800b028:	4602      	mov	r2, r0
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b02e:	431a      	orrs	r2, r3
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	f003 0308 	and.w	r3, r3, #8
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d00a      	beq.n	800b054 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2201      	movs	r2, #1
 800b042:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2200      	movs	r2, #0
 800b04a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f000 f855 	bl	800b0fc <HAL_SD_ErrorCallback>
}
 800b052:	e04a      	b.n	800b0ea <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d045      	beq.n	800b0ea <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	f003 0310 	and.w	r3, r3, #16
 800b064:	2b00      	cmp	r3, #0
 800b066:	d104      	bne.n	800b072 <HAL_SD_IRQHandler+0x262>
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	f003 0320 	and.w	r3, r3, #32
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d011      	beq.n	800b096 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b076:	4a1f      	ldr	r2, [pc, #124]	; (800b0f4 <HAL_SD_IRQHandler+0x2e4>)
 800b078:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b07e:	4618      	mov	r0, r3
 800b080:	f7fd f98e 	bl	80083a0 <HAL_DMA_Abort_IT>
 800b084:	4603      	mov	r3, r0
 800b086:	2b00      	cmp	r3, #0
 800b088:	d02f      	beq.n	800b0ea <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b08e:	4618      	mov	r0, r3
 800b090:	f000 fb4a 	bl	800b728 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800b094:	e029      	b.n	800b0ea <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	f003 0301 	and.w	r3, r3, #1
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d104      	bne.n	800b0aa <HAL_SD_IRQHandler+0x29a>
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	f003 0302 	and.w	r3, r3, #2
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d011      	beq.n	800b0ce <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0ae:	4a12      	ldr	r2, [pc, #72]	; (800b0f8 <HAL_SD_IRQHandler+0x2e8>)
 800b0b0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f7fd f972 	bl	80083a0 <HAL_DMA_Abort_IT>
 800b0bc:	4603      	mov	r3, r0
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d013      	beq.n	800b0ea <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f000 fb65 	bl	800b796 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800b0cc:	e00d      	b.n	800b0ea <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2201      	movs	r2, #1
 800b0d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2200      	movs	r2, #0
 800b0e0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800b0e2:	6878      	ldr	r0, [r7, #4]
 800b0e4:	f003 fcf4 	bl	800ead0 <HAL_SD_AbortCallback>
}
 800b0e8:	e7ff      	b.n	800b0ea <HAL_SD_IRQHandler+0x2da>
 800b0ea:	bf00      	nop
 800b0ec:	3710      	adds	r7, #16
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}
 800b0f2:	bf00      	nop
 800b0f4:	0800b729 	.word	0x0800b729
 800b0f8:	0800b797 	.word	0x0800b797

0800b0fc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b083      	sub	sp, #12
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800b104:	bf00      	nop
 800b106:	370c      	adds	r7, #12
 800b108:	46bd      	mov	sp, r7
 800b10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10e:	4770      	bx	lr

0800b110 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800b110:	b480      	push	{r7}
 800b112:	b083      	sub	sp, #12
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
 800b118:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b11e:	0f9b      	lsrs	r3, r3, #30
 800b120:	b2da      	uxtb	r2, r3
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b12a:	0e9b      	lsrs	r3, r3, #26
 800b12c:	b2db      	uxtb	r3, r3
 800b12e:	f003 030f 	and.w	r3, r3, #15
 800b132:	b2da      	uxtb	r2, r3
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b13c:	0e1b      	lsrs	r3, r3, #24
 800b13e:	b2db      	uxtb	r3, r3
 800b140:	f003 0303 	and.w	r3, r3, #3
 800b144:	b2da      	uxtb	r2, r3
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b14e:	0c1b      	lsrs	r3, r3, #16
 800b150:	b2da      	uxtb	r2, r3
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b15a:	0a1b      	lsrs	r3, r3, #8
 800b15c:	b2da      	uxtb	r2, r3
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b166:	b2da      	uxtb	r2, r3
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b170:	0d1b      	lsrs	r3, r3, #20
 800b172:	b29a      	uxth	r2, r3
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b17c:	0c1b      	lsrs	r3, r3, #16
 800b17e:	b2db      	uxtb	r3, r3
 800b180:	f003 030f 	and.w	r3, r3, #15
 800b184:	b2da      	uxtb	r2, r3
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b18e:	0bdb      	lsrs	r3, r3, #15
 800b190:	b2db      	uxtb	r3, r3
 800b192:	f003 0301 	and.w	r3, r3, #1
 800b196:	b2da      	uxtb	r2, r3
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b1a0:	0b9b      	lsrs	r3, r3, #14
 800b1a2:	b2db      	uxtb	r3, r3
 800b1a4:	f003 0301 	and.w	r3, r3, #1
 800b1a8:	b2da      	uxtb	r2, r3
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b1b2:	0b5b      	lsrs	r3, r3, #13
 800b1b4:	b2db      	uxtb	r3, r3
 800b1b6:	f003 0301 	and.w	r3, r3, #1
 800b1ba:	b2da      	uxtb	r2, r3
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b1c4:	0b1b      	lsrs	r3, r3, #12
 800b1c6:	b2db      	uxtb	r3, r3
 800b1c8:	f003 0301 	and.w	r3, r3, #1
 800b1cc:	b2da      	uxtb	r2, r3
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d163      	bne.n	800b2a8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b1e4:	009a      	lsls	r2, r3, #2
 800b1e6:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b1ea:	4013      	ands	r3, r2
 800b1ec:	687a      	ldr	r2, [r7, #4]
 800b1ee:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800b1f0:	0f92      	lsrs	r2, r2, #30
 800b1f2:	431a      	orrs	r2, r3
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1fc:	0edb      	lsrs	r3, r3, #27
 800b1fe:	b2db      	uxtb	r3, r3
 800b200:	f003 0307 	and.w	r3, r3, #7
 800b204:	b2da      	uxtb	r2, r3
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b20e:	0e1b      	lsrs	r3, r3, #24
 800b210:	b2db      	uxtb	r3, r3
 800b212:	f003 0307 	and.w	r3, r3, #7
 800b216:	b2da      	uxtb	r2, r3
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b220:	0d5b      	lsrs	r3, r3, #21
 800b222:	b2db      	uxtb	r3, r3
 800b224:	f003 0307 	and.w	r3, r3, #7
 800b228:	b2da      	uxtb	r2, r3
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b232:	0c9b      	lsrs	r3, r3, #18
 800b234:	b2db      	uxtb	r3, r3
 800b236:	f003 0307 	and.w	r3, r3, #7
 800b23a:	b2da      	uxtb	r2, r3
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b244:	0bdb      	lsrs	r3, r3, #15
 800b246:	b2db      	uxtb	r3, r3
 800b248:	f003 0307 	and.w	r3, r3, #7
 800b24c:	b2da      	uxtb	r2, r3
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	691b      	ldr	r3, [r3, #16]
 800b256:	1c5a      	adds	r2, r3, #1
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	7e1b      	ldrb	r3, [r3, #24]
 800b260:	b2db      	uxtb	r3, r3
 800b262:	f003 0307 	and.w	r3, r3, #7
 800b266:	3302      	adds	r3, #2
 800b268:	2201      	movs	r2, #1
 800b26a:	fa02 f303 	lsl.w	r3, r2, r3
 800b26e:	687a      	ldr	r2, [r7, #4]
 800b270:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800b272:	fb02 f203 	mul.w	r2, r2, r3
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	7a1b      	ldrb	r3, [r3, #8]
 800b27e:	b2db      	uxtb	r3, r3
 800b280:	f003 030f 	and.w	r3, r3, #15
 800b284:	2201      	movs	r2, #1
 800b286:	409a      	lsls	r2, r3
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b290:	687a      	ldr	r2, [r7, #4]
 800b292:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800b294:	0a52      	lsrs	r2, r2, #9
 800b296:	fb02 f203 	mul.w	r2, r2, r3
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b2a4:	661a      	str	r2, [r3, #96]	; 0x60
 800b2a6:	e031      	b.n	800b30c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2ac:	2b01      	cmp	r3, #1
 800b2ae:	d11d      	bne.n	800b2ec <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b2b4:	041b      	lsls	r3, r3, #16
 800b2b6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2be:	0c1b      	lsrs	r3, r3, #16
 800b2c0:	431a      	orrs	r2, r3
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	691b      	ldr	r3, [r3, #16]
 800b2ca:	3301      	adds	r3, #1
 800b2cc:	029a      	lsls	r2, r3, #10
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b2e0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	661a      	str	r2, [r3, #96]	; 0x60
 800b2ea:	e00f      	b.n	800b30c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	4a58      	ldr	r2, [pc, #352]	; (800b454 <HAL_SD_GetCardCSD+0x344>)
 800b2f2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2f8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2201      	movs	r2, #1
 800b304:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b308:	2301      	movs	r3, #1
 800b30a:	e09d      	b.n	800b448 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b310:	0b9b      	lsrs	r3, r3, #14
 800b312:	b2db      	uxtb	r3, r3
 800b314:	f003 0301 	and.w	r3, r3, #1
 800b318:	b2da      	uxtb	r2, r3
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b322:	09db      	lsrs	r3, r3, #7
 800b324:	b2db      	uxtb	r3, r3
 800b326:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b32a:	b2da      	uxtb	r2, r3
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b334:	b2db      	uxtb	r3, r3
 800b336:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b33a:	b2da      	uxtb	r2, r3
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b344:	0fdb      	lsrs	r3, r3, #31
 800b346:	b2da      	uxtb	r2, r3
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b350:	0f5b      	lsrs	r3, r3, #29
 800b352:	b2db      	uxtb	r3, r3
 800b354:	f003 0303 	and.w	r3, r3, #3
 800b358:	b2da      	uxtb	r2, r3
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b362:	0e9b      	lsrs	r3, r3, #26
 800b364:	b2db      	uxtb	r3, r3
 800b366:	f003 0307 	and.w	r3, r3, #7
 800b36a:	b2da      	uxtb	r2, r3
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b374:	0d9b      	lsrs	r3, r3, #22
 800b376:	b2db      	uxtb	r3, r3
 800b378:	f003 030f 	and.w	r3, r3, #15
 800b37c:	b2da      	uxtb	r2, r3
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b386:	0d5b      	lsrs	r3, r3, #21
 800b388:	b2db      	uxtb	r3, r3
 800b38a:	f003 0301 	and.w	r3, r3, #1
 800b38e:	b2da      	uxtb	r2, r3
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	2200      	movs	r2, #0
 800b39a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3a2:	0c1b      	lsrs	r3, r3, #16
 800b3a4:	b2db      	uxtb	r3, r3
 800b3a6:	f003 0301 	and.w	r3, r3, #1
 800b3aa:	b2da      	uxtb	r2, r3
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3b6:	0bdb      	lsrs	r3, r3, #15
 800b3b8:	b2db      	uxtb	r3, r3
 800b3ba:	f003 0301 	and.w	r3, r3, #1
 800b3be:	b2da      	uxtb	r2, r3
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3ca:	0b9b      	lsrs	r3, r3, #14
 800b3cc:	b2db      	uxtb	r3, r3
 800b3ce:	f003 0301 	and.w	r3, r3, #1
 800b3d2:	b2da      	uxtb	r2, r3
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3de:	0b5b      	lsrs	r3, r3, #13
 800b3e0:	b2db      	uxtb	r3, r3
 800b3e2:	f003 0301 	and.w	r3, r3, #1
 800b3e6:	b2da      	uxtb	r2, r3
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3f2:	0b1b      	lsrs	r3, r3, #12
 800b3f4:	b2db      	uxtb	r3, r3
 800b3f6:	f003 0301 	and.w	r3, r3, #1
 800b3fa:	b2da      	uxtb	r2, r3
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b406:	0a9b      	lsrs	r3, r3, #10
 800b408:	b2db      	uxtb	r3, r3
 800b40a:	f003 0303 	and.w	r3, r3, #3
 800b40e:	b2da      	uxtb	r2, r3
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b41a:	0a1b      	lsrs	r3, r3, #8
 800b41c:	b2db      	uxtb	r3, r3
 800b41e:	f003 0303 	and.w	r3, r3, #3
 800b422:	b2da      	uxtb	r2, r3
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b42e:	085b      	lsrs	r3, r3, #1
 800b430:	b2db      	uxtb	r3, r3
 800b432:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b436:	b2da      	uxtb	r2, r3
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	2201      	movs	r2, #1
 800b442:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800b446:	2300      	movs	r3, #0
}
 800b448:	4618      	mov	r0, r3
 800b44a:	370c      	adds	r7, #12
 800b44c:	46bd      	mov	sp, r7
 800b44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b452:	4770      	bx	lr
 800b454:	004005ff 	.word	0x004005ff

0800b458 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800b458:	b480      	push	{r7}
 800b45a:	b083      	sub	sp, #12
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
 800b460:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800b4a2:	2300      	movs	r3, #0
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	370c      	adds	r7, #12
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ae:	4770      	bx	lr

0800b4b0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800b4b0:	b5b0      	push	{r4, r5, r7, lr}
 800b4b2:	b08e      	sub	sp, #56	; 0x38
 800b4b4:	af04      	add	r7, sp, #16
 800b4b6:	6078      	str	r0, [r7, #4]
 800b4b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2203      	movs	r2, #3
 800b4be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4c6:	2b03      	cmp	r3, #3
 800b4c8:	d02e      	beq.n	800b528 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4d0:	d106      	bne.n	800b4e0 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4d6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	639a      	str	r2, [r3, #56]	; 0x38
 800b4de:	e029      	b.n	800b534 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b4e6:	d10a      	bne.n	800b4fe <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f000 fb0f 	bl	800bb0c <SD_WideBus_Enable>
 800b4ee:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4f6:	431a      	orrs	r2, r3
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	639a      	str	r2, [r3, #56]	; 0x38
 800b4fc:	e01a      	b.n	800b534 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d10a      	bne.n	800b51a <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f000 fb4c 	bl	800bba2 <SD_WideBus_Disable>
 800b50a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b512:	431a      	orrs	r2, r3
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	639a      	str	r2, [r3, #56]	; 0x38
 800b518:	e00c      	b.n	800b534 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b51e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	639a      	str	r2, [r3, #56]	; 0x38
 800b526:	e005      	b.n	800b534 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b52c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d009      	beq.n	800b550 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4a18      	ldr	r2, [pc, #96]	; (800b5a4 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800b542:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2201      	movs	r2, #1
 800b548:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b54c:	2301      	movs	r3, #1
 800b54e:	e024      	b.n	800b59a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	685b      	ldr	r3, [r3, #4]
 800b554:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	689b      	ldr	r3, [r3, #8]
 800b55a:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	68db      	ldr	r3, [r3, #12]
 800b560:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	695b      	ldr	r3, [r3, #20]
 800b56a:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	699b      	ldr	r3, [r3, #24]
 800b570:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681d      	ldr	r5, [r3, #0]
 800b576:	466c      	mov	r4, sp
 800b578:	f107 0318 	add.w	r3, r7, #24
 800b57c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b580:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b584:	f107 030c 	add.w	r3, r7, #12
 800b588:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b58a:	4628      	mov	r0, r5
 800b58c:	f002 fcb2 	bl	800def4 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2201      	movs	r2, #1
 800b594:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b598:	2300      	movs	r3, #0
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3728      	adds	r7, #40	; 0x28
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bdb0      	pop	{r4, r5, r7, pc}
 800b5a2:	bf00      	nop
 800b5a4:	004005ff 	.word	0x004005ff

0800b5a8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b086      	sub	sp, #24
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800b5b4:	f107 030c 	add.w	r3, r7, #12
 800b5b8:	4619      	mov	r1, r3
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f000 fa7e 	bl	800babc <SD_SendStatus>
 800b5c0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d005      	beq.n	800b5d4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b5cc:	697b      	ldr	r3, [r7, #20]
 800b5ce:	431a      	orrs	r2, r3
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	0a5b      	lsrs	r3, r3, #9
 800b5d8:	f003 030f 	and.w	r3, r3, #15
 800b5dc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800b5de:	693b      	ldr	r3, [r7, #16]
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	3718      	adds	r7, #24
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}

0800b5e8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b085      	sub	sp, #20
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5f4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b604:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800b606:	bf00      	nop
 800b608:	3714      	adds	r7, #20
 800b60a:	46bd      	mov	sp, r7
 800b60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b610:	4770      	bx	lr

0800b612 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b612:	b580      	push	{r7, lr}
 800b614:	b084      	sub	sp, #16
 800b616:	af00      	add	r7, sp, #0
 800b618:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b61e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b624:	2b82      	cmp	r3, #130	; 0x82
 800b626:	d111      	bne.n	800b64c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	4618      	mov	r0, r3
 800b62e:	f002 fde7 	bl	800e200 <SDMMC_CmdStopTransfer>
 800b632:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d008      	beq.n	800b64c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	431a      	orrs	r2, r3
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800b646:	68f8      	ldr	r0, [r7, #12]
 800b648:	f7ff fd58 	bl	800b0fc <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	f022 0208 	bic.w	r2, r2, #8
 800b65a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	f240 523a 	movw	r2, #1338	; 0x53a
 800b664:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	2201      	movs	r2, #1
 800b66a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	2200      	movs	r2, #0
 800b672:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800b674:	68f8      	ldr	r0, [r7, #12]
 800b676:	f003 fa3f 	bl	800eaf8 <HAL_SD_RxCpltCallback>
#endif
}
 800b67a:	bf00      	nop
 800b67c:	3710      	adds	r7, #16
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}
	...

0800b684 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b086      	sub	sp, #24
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b690:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f7fd f830 	bl	80086f8 <HAL_DMA_GetError>
 800b698:	4603      	mov	r3, r0
 800b69a:	2b02      	cmp	r3, #2
 800b69c:	d03e      	beq.n	800b71c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6a4:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800b6a6:	697b      	ldr	r3, [r7, #20]
 800b6a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6ac:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800b6ae:	693b      	ldr	r3, [r7, #16]
 800b6b0:	2b01      	cmp	r3, #1
 800b6b2:	d002      	beq.n	800b6ba <SD_DMAError+0x36>
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	2b01      	cmp	r3, #1
 800b6b8:	d12d      	bne.n	800b716 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b6ba:	697b      	ldr	r3, [r7, #20]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	4a19      	ldr	r2, [pc, #100]	; (800b724 <SD_DMAError+0xa0>)
 800b6c0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b6c8:	697b      	ldr	r3, [r7, #20]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800b6d0:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6d6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b6da:	697b      	ldr	r3, [r7, #20]
 800b6dc:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800b6de:	6978      	ldr	r0, [r7, #20]
 800b6e0:	f7ff ff62 	bl	800b5a8 <HAL_SD_GetCardState>
 800b6e4:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	2b06      	cmp	r3, #6
 800b6ea:	d002      	beq.n	800b6f2 <SD_DMAError+0x6e>
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	2b05      	cmp	r3, #5
 800b6f0:	d10a      	bne.n	800b708 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b6f2:	697b      	ldr	r3, [r7, #20]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f002 fd82 	bl	800e200 <SDMMC_CmdStopTransfer>
 800b6fc:	4602      	mov	r2, r0
 800b6fe:	697b      	ldr	r3, [r7, #20]
 800b700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b702:	431a      	orrs	r2, r3
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800b708:	697b      	ldr	r3, [r7, #20]
 800b70a:	2201      	movs	r2, #1
 800b70c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	2200      	movs	r2, #0
 800b714:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800b716:	6978      	ldr	r0, [r7, #20]
 800b718:	f7ff fcf0 	bl	800b0fc <HAL_SD_ErrorCallback>
#endif
  }
}
 800b71c:	bf00      	nop
 800b71e:	3718      	adds	r7, #24
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}
 800b724:	004005ff 	.word	0x004005ff

0800b728 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b084      	sub	sp, #16
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b734:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	f240 523a 	movw	r2, #1338	; 0x53a
 800b73e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800b740:	68f8      	ldr	r0, [r7, #12]
 800b742:	f7ff ff31 	bl	800b5a8 <HAL_SD_GetCardState>
 800b746:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	2201      	movs	r2, #1
 800b74c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	2200      	movs	r2, #0
 800b754:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	2b06      	cmp	r3, #6
 800b75a:	d002      	beq.n	800b762 <SD_DMATxAbort+0x3a>
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	2b05      	cmp	r3, #5
 800b760:	d10a      	bne.n	800b778 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	4618      	mov	r0, r3
 800b768:	f002 fd4a 	bl	800e200 <SDMMC_CmdStopTransfer>
 800b76c:	4602      	mov	r2, r0
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b772:	431a      	orrs	r2, r3
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d103      	bne.n	800b788 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800b780:	68f8      	ldr	r0, [r7, #12]
 800b782:	f003 f9a5 	bl	800ead0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800b786:	e002      	b.n	800b78e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800b788:	68f8      	ldr	r0, [r7, #12]
 800b78a:	f7ff fcb7 	bl	800b0fc <HAL_SD_ErrorCallback>
}
 800b78e:	bf00      	nop
 800b790:	3710      	adds	r7, #16
 800b792:	46bd      	mov	sp, r7
 800b794:	bd80      	pop	{r7, pc}

0800b796 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800b796:	b580      	push	{r7, lr}
 800b798:	b084      	sub	sp, #16
 800b79a:	af00      	add	r7, sp, #0
 800b79c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7a2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	f240 523a 	movw	r2, #1338	; 0x53a
 800b7ac:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800b7ae:	68f8      	ldr	r0, [r7, #12]
 800b7b0:	f7ff fefa 	bl	800b5a8 <HAL_SD_GetCardState>
 800b7b4:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	2201      	movs	r2, #1
 800b7ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b7c4:	68bb      	ldr	r3, [r7, #8]
 800b7c6:	2b06      	cmp	r3, #6
 800b7c8:	d002      	beq.n	800b7d0 <SD_DMARxAbort+0x3a>
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	2b05      	cmp	r3, #5
 800b7ce:	d10a      	bne.n	800b7e6 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	f002 fd13 	bl	800e200 <SDMMC_CmdStopTransfer>
 800b7da:	4602      	mov	r2, r0
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7e0:	431a      	orrs	r2, r3
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d103      	bne.n	800b7f6 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800b7ee:	68f8      	ldr	r0, [r7, #12]
 800b7f0:	f003 f96e 	bl	800ead0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800b7f4:	e002      	b.n	800b7fc <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800b7f6:	68f8      	ldr	r0, [r7, #12]
 800b7f8:	f7ff fc80 	bl	800b0fc <HAL_SD_ErrorCallback>
}
 800b7fc:	bf00      	nop
 800b7fe:	3710      	adds	r7, #16
 800b800:	46bd      	mov	sp, r7
 800b802:	bd80      	pop	{r7, pc}

0800b804 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b804:	b5b0      	push	{r4, r5, r7, lr}
 800b806:	b094      	sub	sp, #80	; 0x50
 800b808:	af04      	add	r7, sp, #16
 800b80a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800b80c:	2301      	movs	r3, #1
 800b80e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	4618      	mov	r0, r3
 800b816:	f002 fbc5 	bl	800dfa4 <SDIO_GetPowerState>
 800b81a:	4603      	mov	r3, r0
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d102      	bne.n	800b826 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b820:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b824:	e0b7      	b.n	800b996 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b82a:	2b03      	cmp	r3, #3
 800b82c:	d02f      	beq.n	800b88e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	4618      	mov	r0, r3
 800b834:	f002 fdee 	bl	800e414 <SDMMC_CmdSendCID>
 800b838:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b83a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d001      	beq.n	800b844 <SD_InitCard+0x40>
    {
      return errorstate;
 800b840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b842:	e0a8      	b.n	800b996 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	2100      	movs	r1, #0
 800b84a:	4618      	mov	r0, r3
 800b84c:	f002 fbef 	bl	800e02e <SDIO_GetResponse>
 800b850:	4602      	mov	r2, r0
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	2104      	movs	r1, #4
 800b85c:	4618      	mov	r0, r3
 800b85e:	f002 fbe6 	bl	800e02e <SDIO_GetResponse>
 800b862:	4602      	mov	r2, r0
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	2108      	movs	r1, #8
 800b86e:	4618      	mov	r0, r3
 800b870:	f002 fbdd 	bl	800e02e <SDIO_GetResponse>
 800b874:	4602      	mov	r2, r0
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	210c      	movs	r1, #12
 800b880:	4618      	mov	r0, r3
 800b882:	f002 fbd4 	bl	800e02e <SDIO_GetResponse>
 800b886:	4602      	mov	r2, r0
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b892:	2b03      	cmp	r3, #3
 800b894:	d00d      	beq.n	800b8b2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	f107 020e 	add.w	r2, r7, #14
 800b89e:	4611      	mov	r1, r2
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	f002 fdf4 	bl	800e48e <SDMMC_CmdSetRelAdd>
 800b8a6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b8a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d001      	beq.n	800b8b2 <SD_InitCard+0xae>
    {
      return errorstate;
 800b8ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8b0:	e071      	b.n	800b996 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8b6:	2b03      	cmp	r3, #3
 800b8b8:	d036      	beq.n	800b928 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b8ba:	89fb      	ldrh	r3, [r7, #14]
 800b8bc:	461a      	mov	r2, r3
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681a      	ldr	r2, [r3, #0]
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8ca:	041b      	lsls	r3, r3, #16
 800b8cc:	4619      	mov	r1, r3
 800b8ce:	4610      	mov	r0, r2
 800b8d0:	f002 fdbe 	bl	800e450 <SDMMC_CmdSendCSD>
 800b8d4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b8d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d001      	beq.n	800b8e0 <SD_InitCard+0xdc>
    {
      return errorstate;
 800b8dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8de:	e05a      	b.n	800b996 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	2100      	movs	r1, #0
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f002 fba1 	bl	800e02e <SDIO_GetResponse>
 800b8ec:	4602      	mov	r2, r0
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	2104      	movs	r1, #4
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f002 fb98 	bl	800e02e <SDIO_GetResponse>
 800b8fe:	4602      	mov	r2, r0
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	2108      	movs	r1, #8
 800b90a:	4618      	mov	r0, r3
 800b90c:	f002 fb8f 	bl	800e02e <SDIO_GetResponse>
 800b910:	4602      	mov	r2, r0
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	210c      	movs	r1, #12
 800b91c:	4618      	mov	r0, r3
 800b91e:	f002 fb86 	bl	800e02e <SDIO_GetResponse>
 800b922:	4602      	mov	r2, r0
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	2104      	movs	r1, #4
 800b92e:	4618      	mov	r0, r3
 800b930:	f002 fb7d 	bl	800e02e <SDIO_GetResponse>
 800b934:	4603      	mov	r3, r0
 800b936:	0d1a      	lsrs	r2, r3, #20
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b93c:	f107 0310 	add.w	r3, r7, #16
 800b940:	4619      	mov	r1, r3
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	f7ff fbe4 	bl	800b110 <HAL_SD_GetCardCSD>
 800b948:	4603      	mov	r3, r0
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d002      	beq.n	800b954 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b94e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b952:	e020      	b.n	800b996 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	6819      	ldr	r1, [r3, #0]
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b95c:	041b      	lsls	r3, r3, #16
 800b95e:	f04f 0400 	mov.w	r4, #0
 800b962:	461a      	mov	r2, r3
 800b964:	4623      	mov	r3, r4
 800b966:	4608      	mov	r0, r1
 800b968:	f002 fc6c 	bl	800e244 <SDMMC_CmdSelDesel>
 800b96c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800b96e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b970:	2b00      	cmp	r3, #0
 800b972:	d001      	beq.n	800b978 <SD_InitCard+0x174>
  {
    return errorstate;
 800b974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b976:	e00e      	b.n	800b996 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681d      	ldr	r5, [r3, #0]
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	466c      	mov	r4, sp
 800b980:	f103 0210 	add.w	r2, r3, #16
 800b984:	ca07      	ldmia	r2, {r0, r1, r2}
 800b986:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b98a:	3304      	adds	r3, #4
 800b98c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b98e:	4628      	mov	r0, r5
 800b990:	f002 fab0 	bl	800def4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b994:	2300      	movs	r3, #0
}
 800b996:	4618      	mov	r0, r3
 800b998:	3740      	adds	r7, #64	; 0x40
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b9a0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b086      	sub	sp, #24
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	617b      	str	r3, [r7, #20]
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	f002 fc66 	bl	800e28a <SDMMC_CmdGoIdleState>
 800b9be:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d001      	beq.n	800b9ca <SD_PowerON+0x2a>
  {
    return errorstate;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	e072      	b.n	800bab0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f002 fc79 	bl	800e2c6 <SDMMC_CmdOperCond>
 800b9d4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d00d      	beq.n	800b9f8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2200      	movs	r2, #0
 800b9e0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f002 fc4f 	bl	800e28a <SDMMC_CmdGoIdleState>
 800b9ec:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d004      	beq.n	800b9fe <SD_PowerON+0x5e>
    {
      return errorstate;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	e05b      	b.n	800bab0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2201      	movs	r2, #1
 800b9fc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba02:	2b01      	cmp	r3, #1
 800ba04:	d137      	bne.n	800ba76 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	2100      	movs	r1, #0
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	f002 fc79 	bl	800e304 <SDMMC_CmdAppCommand>
 800ba12:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d02d      	beq.n	800ba76 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ba1a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ba1e:	e047      	b.n	800bab0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	2100      	movs	r1, #0
 800ba26:	4618      	mov	r0, r3
 800ba28:	f002 fc6c 	bl	800e304 <SDMMC_CmdAppCommand>
 800ba2c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d001      	beq.n	800ba38 <SD_PowerON+0x98>
    {
      return errorstate;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	e03b      	b.n	800bab0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	491e      	ldr	r1, [pc, #120]	; (800bab8 <SD_PowerON+0x118>)
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f002 fc82 	bl	800e348 <SDMMC_CmdAppOperCommand>
 800ba44:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d002      	beq.n	800ba52 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ba4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ba50:	e02e      	b.n	800bab0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	2100      	movs	r1, #0
 800ba58:	4618      	mov	r0, r3
 800ba5a:	f002 fae8 	bl	800e02e <SDIO_GetResponse>
 800ba5e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800ba60:	697b      	ldr	r3, [r7, #20]
 800ba62:	0fdb      	lsrs	r3, r3, #31
 800ba64:	2b01      	cmp	r3, #1
 800ba66:	d101      	bne.n	800ba6c <SD_PowerON+0xcc>
 800ba68:	2301      	movs	r3, #1
 800ba6a:	e000      	b.n	800ba6e <SD_PowerON+0xce>
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	613b      	str	r3, [r7, #16]

    count++;
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	3301      	adds	r3, #1
 800ba74:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800ba76:	68bb      	ldr	r3, [r7, #8]
 800ba78:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ba7c:	4293      	cmp	r3, r2
 800ba7e:	d802      	bhi.n	800ba86 <SD_PowerON+0xe6>
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d0cc      	beq.n	800ba20 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ba8c:	4293      	cmp	r3, r2
 800ba8e:	d902      	bls.n	800ba96 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800ba90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ba94:	e00c      	b.n	800bab0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d003      	beq.n	800baa8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2201      	movs	r2, #1
 800baa4:	645a      	str	r2, [r3, #68]	; 0x44
 800baa6:	e002      	b.n	800baae <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2200      	movs	r2, #0
 800baac:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800baae:	2300      	movs	r3, #0
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	3718      	adds	r7, #24
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}
 800bab8:	c1100000 	.word	0xc1100000

0800babc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b084      	sub	sp, #16
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
 800bac4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d102      	bne.n	800bad2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800bacc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bad0:	e018      	b.n	800bb04 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681a      	ldr	r2, [r3, #0]
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bada:	041b      	lsls	r3, r3, #16
 800badc:	4619      	mov	r1, r3
 800bade:	4610      	mov	r0, r2
 800bae0:	f002 fcf6 	bl	800e4d0 <SDMMC_CmdSendStatus>
 800bae4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d001      	beq.n	800baf0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	e009      	b.n	800bb04 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	2100      	movs	r1, #0
 800baf6:	4618      	mov	r0, r3
 800baf8:	f002 fa99 	bl	800e02e <SDIO_GetResponse>
 800bafc:	4602      	mov	r2, r0
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800bb02:	2300      	movs	r3, #0
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	3710      	adds	r7, #16
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}

0800bb0c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b086      	sub	sp, #24
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800bb14:	2300      	movs	r3, #0
 800bb16:	60fb      	str	r3, [r7, #12]
 800bb18:	2300      	movs	r3, #0
 800bb1a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	2100      	movs	r1, #0
 800bb22:	4618      	mov	r0, r3
 800bb24:	f002 fa83 	bl	800e02e <SDIO_GetResponse>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bb32:	d102      	bne.n	800bb3a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bb34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bb38:	e02f      	b.n	800bb9a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800bb3a:	f107 030c 	add.w	r3, r7, #12
 800bb3e:	4619      	mov	r1, r3
 800bb40:	6878      	ldr	r0, [r7, #4]
 800bb42:	f000 f879 	bl	800bc38 <SD_FindSCR>
 800bb46:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bb48:	697b      	ldr	r3, [r7, #20]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d001      	beq.n	800bb52 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800bb4e:	697b      	ldr	r3, [r7, #20]
 800bb50:	e023      	b.n	800bb9a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d01c      	beq.n	800bb96 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681a      	ldr	r2, [r3, #0]
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb64:	041b      	lsls	r3, r3, #16
 800bb66:	4619      	mov	r1, r3
 800bb68:	4610      	mov	r0, r2
 800bb6a:	f002 fbcb 	bl	800e304 <SDMMC_CmdAppCommand>
 800bb6e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bb70:	697b      	ldr	r3, [r7, #20]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d001      	beq.n	800bb7a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	e00f      	b.n	800bb9a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	2102      	movs	r1, #2
 800bb80:	4618      	mov	r0, r3
 800bb82:	f002 fc04 	bl	800e38e <SDMMC_CmdBusWidth>
 800bb86:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bb88:	697b      	ldr	r3, [r7, #20]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d001      	beq.n	800bb92 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800bb8e:	697b      	ldr	r3, [r7, #20]
 800bb90:	e003      	b.n	800bb9a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800bb92:	2300      	movs	r3, #0
 800bb94:	e001      	b.n	800bb9a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bb96:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	3718      	adds	r7, #24
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}

0800bba2 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800bba2:	b580      	push	{r7, lr}
 800bba4:	b086      	sub	sp, #24
 800bba6:	af00      	add	r7, sp, #0
 800bba8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800bbaa:	2300      	movs	r3, #0
 800bbac:	60fb      	str	r3, [r7, #12]
 800bbae:	2300      	movs	r3, #0
 800bbb0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	2100      	movs	r1, #0
 800bbb8:	4618      	mov	r0, r3
 800bbba:	f002 fa38 	bl	800e02e <SDIO_GetResponse>
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bbc4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bbc8:	d102      	bne.n	800bbd0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bbca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bbce:	e02f      	b.n	800bc30 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800bbd0:	f107 030c 	add.w	r3, r7, #12
 800bbd4:	4619      	mov	r1, r3
 800bbd6:	6878      	ldr	r0, [r7, #4]
 800bbd8:	f000 f82e 	bl	800bc38 <SD_FindSCR>
 800bbdc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d001      	beq.n	800bbe8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800bbe4:	697b      	ldr	r3, [r7, #20]
 800bbe6:	e023      	b.n	800bc30 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800bbe8:	693b      	ldr	r3, [r7, #16]
 800bbea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d01c      	beq.n	800bc2c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681a      	ldr	r2, [r3, #0]
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbfa:	041b      	lsls	r3, r3, #16
 800bbfc:	4619      	mov	r1, r3
 800bbfe:	4610      	mov	r0, r2
 800bc00:	f002 fb80 	bl	800e304 <SDMMC_CmdAppCommand>
 800bc04:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bc06:	697b      	ldr	r3, [r7, #20]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d001      	beq.n	800bc10 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	e00f      	b.n	800bc30 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	2100      	movs	r1, #0
 800bc16:	4618      	mov	r0, r3
 800bc18:	f002 fbb9 	bl	800e38e <SDMMC_CmdBusWidth>
 800bc1c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bc1e:	697b      	ldr	r3, [r7, #20]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d001      	beq.n	800bc28 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800bc24:	697b      	ldr	r3, [r7, #20]
 800bc26:	e003      	b.n	800bc30 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800bc28:	2300      	movs	r3, #0
 800bc2a:	e001      	b.n	800bc30 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bc2c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	3718      	adds	r7, #24
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}

0800bc38 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800bc38:	b590      	push	{r4, r7, lr}
 800bc3a:	b08f      	sub	sp, #60	; 0x3c
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
 800bc40:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800bc42:	f7fb fd63 	bl	800770c <HAL_GetTick>
 800bc46:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800bc48:	2300      	movs	r3, #0
 800bc4a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	60bb      	str	r3, [r7, #8]
 800bc50:	2300      	movs	r3, #0
 800bc52:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	2108      	movs	r1, #8
 800bc5e:	4618      	mov	r0, r3
 800bc60:	f002 fa24 	bl	800e0ac <SDMMC_CmdBlockLength>
 800bc64:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800bc66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d001      	beq.n	800bc70 <SD_FindSCR+0x38>
  {
    return errorstate;
 800bc6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc6e:	e0a9      	b.n	800bdc4 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681a      	ldr	r2, [r3, #0]
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc78:	041b      	lsls	r3, r3, #16
 800bc7a:	4619      	mov	r1, r3
 800bc7c:	4610      	mov	r0, r2
 800bc7e:	f002 fb41 	bl	800e304 <SDMMC_CmdAppCommand>
 800bc82:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800bc84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d001      	beq.n	800bc8e <SD_FindSCR+0x56>
  {
    return errorstate;
 800bc8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc8c:	e09a      	b.n	800bdc4 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bc8e:	f04f 33ff 	mov.w	r3, #4294967295
 800bc92:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800bc94:	2308      	movs	r3, #8
 800bc96:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800bc98:	2330      	movs	r3, #48	; 0x30
 800bc9a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800bc9c:	2302      	movs	r3, #2
 800bc9e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800bca0:	2300      	movs	r3, #0
 800bca2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800bca4:	2301      	movs	r3, #1
 800bca6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	f107 0210 	add.w	r2, r7, #16
 800bcb0:	4611      	mov	r1, r2
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	f002 f9ce 	bl	800e054 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	f002 fb88 	bl	800e3d2 <SDMMC_CmdSendSCR>
 800bcc2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800bcc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d022      	beq.n	800bd10 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800bcca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bccc:	e07a      	b.n	800bdc4 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d00e      	beq.n	800bcfa <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	6819      	ldr	r1, [r3, #0]
 800bce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bce2:	009b      	lsls	r3, r3, #2
 800bce4:	f107 0208 	add.w	r2, r7, #8
 800bce8:	18d4      	adds	r4, r2, r3
 800bcea:	4608      	mov	r0, r1
 800bcec:	f002 f92d 	bl	800df4a <SDIO_ReadFIFO>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	6023      	str	r3, [r4, #0]
      index++;
 800bcf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcf6:	3301      	adds	r3, #1
 800bcf8:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800bcfa:	f7fb fd07 	bl	800770c <HAL_GetTick>
 800bcfe:	4602      	mov	r2, r0
 800bd00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd02:	1ad3      	subs	r3, r2, r3
 800bd04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd08:	d102      	bne.n	800bd10 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800bd0a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bd0e:	e059      	b.n	800bdc4 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bd16:	f240 432a 	movw	r3, #1066	; 0x42a
 800bd1a:	4013      	ands	r3, r2
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d0d6      	beq.n	800bcce <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd26:	f003 0308 	and.w	r3, r3, #8
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d005      	beq.n	800bd3a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	2208      	movs	r2, #8
 800bd34:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800bd36:	2308      	movs	r3, #8
 800bd38:	e044      	b.n	800bdc4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd40:	f003 0302 	and.w	r3, r3, #2
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d005      	beq.n	800bd54 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	2202      	movs	r2, #2
 800bd4e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800bd50:	2302      	movs	r3, #2
 800bd52:	e037      	b.n	800bdc4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd5a:	f003 0320 	and.w	r3, r3, #32
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d005      	beq.n	800bd6e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	2220      	movs	r2, #32
 800bd68:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800bd6a:	2320      	movs	r3, #32
 800bd6c:	e02a      	b.n	800bdc4 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	f240 523a 	movw	r2, #1338	; 0x53a
 800bd76:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	061a      	lsls	r2, r3, #24
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	021b      	lsls	r3, r3, #8
 800bd80:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bd84:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	0a1b      	lsrs	r3, r3, #8
 800bd8a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800bd8e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	0e1b      	lsrs	r3, r3, #24
 800bd94:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800bd96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd98:	601a      	str	r2, [r3, #0]
    scr++;
 800bd9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd9c:	3304      	adds	r3, #4
 800bd9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bda0:	68bb      	ldr	r3, [r7, #8]
 800bda2:	061a      	lsls	r2, r3, #24
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	021b      	lsls	r3, r3, #8
 800bda8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bdac:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800bdae:	68bb      	ldr	r3, [r7, #8]
 800bdb0:	0a1b      	lsrs	r3, r3, #8
 800bdb2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bdb6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	0e1b      	lsrs	r3, r3, #24
 800bdbc:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bdbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdc0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800bdc2:	2300      	movs	r3, #0
}
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	373c      	adds	r7, #60	; 0x3c
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd90      	pop	{r4, r7, pc}

0800bdcc <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b086      	sub	sp, #24
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdd8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdde:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800bde0:	693b      	ldr	r3, [r7, #16]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d03f      	beq.n	800be66 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800bde6:	2300      	movs	r3, #0
 800bde8:	617b      	str	r3, [r7, #20]
 800bdea:	e033      	b.n	800be54 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	f002 f8aa 	bl	800df4a <SDIO_ReadFIFO>
 800bdf6:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	b2da      	uxtb	r2, r3
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	701a      	strb	r2, [r3, #0]
      tmp++;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	3301      	adds	r3, #1
 800be04:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800be06:	693b      	ldr	r3, [r7, #16]
 800be08:	3b01      	subs	r3, #1
 800be0a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	0a1b      	lsrs	r3, r3, #8
 800be10:	b2da      	uxtb	r2, r3
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	701a      	strb	r2, [r3, #0]
      tmp++;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	3301      	adds	r3, #1
 800be1a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800be1c:	693b      	ldr	r3, [r7, #16]
 800be1e:	3b01      	subs	r3, #1
 800be20:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800be22:	68bb      	ldr	r3, [r7, #8]
 800be24:	0c1b      	lsrs	r3, r3, #16
 800be26:	b2da      	uxtb	r2, r3
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	3301      	adds	r3, #1
 800be30:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800be32:	693b      	ldr	r3, [r7, #16]
 800be34:	3b01      	subs	r3, #1
 800be36:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	0e1b      	lsrs	r3, r3, #24
 800be3c:	b2da      	uxtb	r2, r3
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	701a      	strb	r2, [r3, #0]
      tmp++;
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	3301      	adds	r3, #1
 800be46:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800be48:	693b      	ldr	r3, [r7, #16]
 800be4a:	3b01      	subs	r3, #1
 800be4c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800be4e:	697b      	ldr	r3, [r7, #20]
 800be50:	3301      	adds	r3, #1
 800be52:	617b      	str	r3, [r7, #20]
 800be54:	697b      	ldr	r3, [r7, #20]
 800be56:	2b07      	cmp	r3, #7
 800be58:	d9c8      	bls.n	800bdec <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	68fa      	ldr	r2, [r7, #12]
 800be5e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	693a      	ldr	r2, [r7, #16]
 800be64:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800be66:	bf00      	nop
 800be68:	3718      	adds	r7, #24
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}

0800be6e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800be6e:	b580      	push	{r7, lr}
 800be70:	b086      	sub	sp, #24
 800be72:	af00      	add	r7, sp, #0
 800be74:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6a1b      	ldr	r3, [r3, #32]
 800be7a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be80:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800be82:	693b      	ldr	r3, [r7, #16]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d043      	beq.n	800bf10 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800be88:	2300      	movs	r3, #0
 800be8a:	617b      	str	r3, [r7, #20]
 800be8c:	e037      	b.n	800befe <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	781b      	ldrb	r3, [r3, #0]
 800be92:	60bb      	str	r3, [r7, #8]
      tmp++;
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	3301      	adds	r3, #1
 800be98:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800be9a:	693b      	ldr	r3, [r7, #16]
 800be9c:	3b01      	subs	r3, #1
 800be9e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	781b      	ldrb	r3, [r3, #0]
 800bea4:	021a      	lsls	r2, r3, #8
 800bea6:	68bb      	ldr	r3, [r7, #8]
 800bea8:	4313      	orrs	r3, r2
 800beaa:	60bb      	str	r3, [r7, #8]
      tmp++;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	3301      	adds	r3, #1
 800beb0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800beb2:	693b      	ldr	r3, [r7, #16]
 800beb4:	3b01      	subs	r3, #1
 800beb6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	781b      	ldrb	r3, [r3, #0]
 800bebc:	041a      	lsls	r2, r3, #16
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	4313      	orrs	r3, r2
 800bec2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	3301      	adds	r3, #1
 800bec8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800beca:	693b      	ldr	r3, [r7, #16]
 800becc:	3b01      	subs	r3, #1
 800bece:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	781b      	ldrb	r3, [r3, #0]
 800bed4:	061a      	lsls	r2, r3, #24
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	4313      	orrs	r3, r2
 800beda:	60bb      	str	r3, [r7, #8]
      tmp++;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	3301      	adds	r3, #1
 800bee0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bee2:	693b      	ldr	r3, [r7, #16]
 800bee4:	3b01      	subs	r3, #1
 800bee6:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	f107 0208 	add.w	r2, r7, #8
 800bef0:	4611      	mov	r1, r2
 800bef2:	4618      	mov	r0, r3
 800bef4:	f002 f836 	bl	800df64 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800bef8:	697b      	ldr	r3, [r7, #20]
 800befa:	3301      	adds	r3, #1
 800befc:	617b      	str	r3, [r7, #20]
 800befe:	697b      	ldr	r3, [r7, #20]
 800bf00:	2b07      	cmp	r3, #7
 800bf02:	d9c4      	bls.n	800be8e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	68fa      	ldr	r2, [r7, #12]
 800bf08:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	693a      	ldr	r2, [r7, #16]
 800bf0e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800bf10:	bf00      	nop
 800bf12:	3718      	adds	r7, #24
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}

0800bf18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b082      	sub	sp, #8
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d101      	bne.n	800bf2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bf26:	2301      	movs	r3, #1
 800bf28:	e056      	b.n	800bfd8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bf36:	b2db      	uxtb	r3, r3
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d106      	bne.n	800bf4a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2200      	movs	r2, #0
 800bf40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bf44:	6878      	ldr	r0, [r7, #4]
 800bf46:	f7f9 fc8b 	bl	8005860 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2202      	movs	r2, #2
 800bf4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	681a      	ldr	r2, [r3, #0]
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bf60:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	685a      	ldr	r2, [r3, #4]
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	689b      	ldr	r3, [r3, #8]
 800bf6a:	431a      	orrs	r2, r3
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	68db      	ldr	r3, [r3, #12]
 800bf70:	431a      	orrs	r2, r3
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	691b      	ldr	r3, [r3, #16]
 800bf76:	431a      	orrs	r2, r3
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	695b      	ldr	r3, [r3, #20]
 800bf7c:	431a      	orrs	r2, r3
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	699b      	ldr	r3, [r3, #24]
 800bf82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bf86:	431a      	orrs	r2, r3
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	69db      	ldr	r3, [r3, #28]
 800bf8c:	431a      	orrs	r2, r3
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6a1b      	ldr	r3, [r3, #32]
 800bf92:	ea42 0103 	orr.w	r1, r2, r3
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	430a      	orrs	r2, r1
 800bfa0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	699b      	ldr	r3, [r3, #24]
 800bfa6:	0c1b      	lsrs	r3, r3, #16
 800bfa8:	f003 0104 	and.w	r1, r3, #4
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	430a      	orrs	r2, r1
 800bfb6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	69da      	ldr	r2, [r3, #28]
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bfc6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2200      	movs	r2, #0
 800bfcc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2201      	movs	r2, #1
 800bfd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800bfd6:	2300      	movs	r3, #0
}
 800bfd8:	4618      	mov	r0, r3
 800bfda:	3708      	adds	r7, #8
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bd80      	pop	{r7, pc}

0800bfe0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b088      	sub	sp, #32
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	60f8      	str	r0, [r7, #12]
 800bfe8:	60b9      	str	r1, [r7, #8]
 800bfea:	603b      	str	r3, [r7, #0]
 800bfec:	4613      	mov	r3, r2
 800bfee:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bff0:	2300      	movs	r3, #0
 800bff2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bffa:	2b01      	cmp	r3, #1
 800bffc:	d101      	bne.n	800c002 <HAL_SPI_Transmit+0x22>
 800bffe:	2302      	movs	r3, #2
 800c000:	e11e      	b.n	800c240 <HAL_SPI_Transmit+0x260>
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	2201      	movs	r2, #1
 800c006:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c00a:	f7fb fb7f 	bl	800770c <HAL_GetTick>
 800c00e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800c010:	88fb      	ldrh	r3, [r7, #6]
 800c012:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c01a:	b2db      	uxtb	r3, r3
 800c01c:	2b01      	cmp	r3, #1
 800c01e:	d002      	beq.n	800c026 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800c020:	2302      	movs	r3, #2
 800c022:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c024:	e103      	b.n	800c22e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800c026:	68bb      	ldr	r3, [r7, #8]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d002      	beq.n	800c032 <HAL_SPI_Transmit+0x52>
 800c02c:	88fb      	ldrh	r3, [r7, #6]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d102      	bne.n	800c038 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800c032:	2301      	movs	r3, #1
 800c034:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c036:	e0fa      	b.n	800c22e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	2203      	movs	r2, #3
 800c03c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	2200      	movs	r2, #0
 800c044:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	68ba      	ldr	r2, [r7, #8]
 800c04a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	88fa      	ldrh	r2, [r7, #6]
 800c050:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	88fa      	ldrh	r2, [r7, #6]
 800c056:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	2200      	movs	r2, #0
 800c05c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	2200      	movs	r2, #0
 800c062:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	2200      	movs	r2, #0
 800c068:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	2200      	movs	r2, #0
 800c06e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	2200      	movs	r2, #0
 800c074:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	689b      	ldr	r3, [r3, #8]
 800c07a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c07e:	d107      	bne.n	800c090 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	681a      	ldr	r2, [r3, #0]
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c08e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c09a:	2b40      	cmp	r3, #64	; 0x40
 800c09c:	d007      	beq.n	800c0ae <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	681a      	ldr	r2, [r3, #0]
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c0ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	68db      	ldr	r3, [r3, #12]
 800c0b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c0b6:	d14b      	bne.n	800c150 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	685b      	ldr	r3, [r3, #4]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d002      	beq.n	800c0c6 <HAL_SPI_Transmit+0xe6>
 800c0c0:	8afb      	ldrh	r3, [r7, #22]
 800c0c2:	2b01      	cmp	r3, #1
 800c0c4:	d13e      	bne.n	800c144 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0ca:	881a      	ldrh	r2, [r3, #0]
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0d6:	1c9a      	adds	r2, r3, #2
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c0e0:	b29b      	uxth	r3, r3
 800c0e2:	3b01      	subs	r3, #1
 800c0e4:	b29a      	uxth	r2, r3
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800c0ea:	e02b      	b.n	800c144 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	689b      	ldr	r3, [r3, #8]
 800c0f2:	f003 0302 	and.w	r3, r3, #2
 800c0f6:	2b02      	cmp	r3, #2
 800c0f8:	d112      	bne.n	800c120 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0fe:	881a      	ldrh	r2, [r3, #0]
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c10a:	1c9a      	adds	r2, r3, #2
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c114:	b29b      	uxth	r3, r3
 800c116:	3b01      	subs	r3, #1
 800c118:	b29a      	uxth	r2, r3
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	86da      	strh	r2, [r3, #54]	; 0x36
 800c11e:	e011      	b.n	800c144 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c120:	f7fb faf4 	bl	800770c <HAL_GetTick>
 800c124:	4602      	mov	r2, r0
 800c126:	69bb      	ldr	r3, [r7, #24]
 800c128:	1ad3      	subs	r3, r2, r3
 800c12a:	683a      	ldr	r2, [r7, #0]
 800c12c:	429a      	cmp	r2, r3
 800c12e:	d803      	bhi.n	800c138 <HAL_SPI_Transmit+0x158>
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c136:	d102      	bne.n	800c13e <HAL_SPI_Transmit+0x15e>
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d102      	bne.n	800c144 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800c13e:	2303      	movs	r3, #3
 800c140:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c142:	e074      	b.n	800c22e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c148:	b29b      	uxth	r3, r3
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d1ce      	bne.n	800c0ec <HAL_SPI_Transmit+0x10c>
 800c14e:	e04c      	b.n	800c1ea <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	685b      	ldr	r3, [r3, #4]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d002      	beq.n	800c15e <HAL_SPI_Transmit+0x17e>
 800c158:	8afb      	ldrh	r3, [r7, #22]
 800c15a:	2b01      	cmp	r3, #1
 800c15c:	d140      	bne.n	800c1e0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	330c      	adds	r3, #12
 800c168:	7812      	ldrb	r2, [r2, #0]
 800c16a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c170:	1c5a      	adds	r2, r3, #1
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c17a:	b29b      	uxth	r3, r3
 800c17c:	3b01      	subs	r3, #1
 800c17e:	b29a      	uxth	r2, r3
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800c184:	e02c      	b.n	800c1e0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	689b      	ldr	r3, [r3, #8]
 800c18c:	f003 0302 	and.w	r3, r3, #2
 800c190:	2b02      	cmp	r3, #2
 800c192:	d113      	bne.n	800c1bc <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	330c      	adds	r3, #12
 800c19e:	7812      	ldrb	r2, [r2, #0]
 800c1a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1a6:	1c5a      	adds	r2, r3, #1
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c1b0:	b29b      	uxth	r3, r3
 800c1b2:	3b01      	subs	r3, #1
 800c1b4:	b29a      	uxth	r2, r3
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	86da      	strh	r2, [r3, #54]	; 0x36
 800c1ba:	e011      	b.n	800c1e0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c1bc:	f7fb faa6 	bl	800770c <HAL_GetTick>
 800c1c0:	4602      	mov	r2, r0
 800c1c2:	69bb      	ldr	r3, [r7, #24]
 800c1c4:	1ad3      	subs	r3, r2, r3
 800c1c6:	683a      	ldr	r2, [r7, #0]
 800c1c8:	429a      	cmp	r2, r3
 800c1ca:	d803      	bhi.n	800c1d4 <HAL_SPI_Transmit+0x1f4>
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1d2:	d102      	bne.n	800c1da <HAL_SPI_Transmit+0x1fa>
 800c1d4:	683b      	ldr	r3, [r7, #0]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d102      	bne.n	800c1e0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800c1da:	2303      	movs	r3, #3
 800c1dc:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c1de:	e026      	b.n	800c22e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c1e4:	b29b      	uxth	r3, r3
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d1cd      	bne.n	800c186 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c1ea:	69ba      	ldr	r2, [r7, #24]
 800c1ec:	6839      	ldr	r1, [r7, #0]
 800c1ee:	68f8      	ldr	r0, [r7, #12]
 800c1f0:	f000 fba4 	bl	800c93c <SPI_EndRxTxTransaction>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d002      	beq.n	800c200 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	2220      	movs	r2, #32
 800c1fe:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	689b      	ldr	r3, [r3, #8]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d10a      	bne.n	800c21e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c208:	2300      	movs	r3, #0
 800c20a:	613b      	str	r3, [r7, #16]
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	68db      	ldr	r3, [r3, #12]
 800c212:	613b      	str	r3, [r7, #16]
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	689b      	ldr	r3, [r3, #8]
 800c21a:	613b      	str	r3, [r7, #16]
 800c21c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c222:	2b00      	cmp	r3, #0
 800c224:	d002      	beq.n	800c22c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800c226:	2301      	movs	r3, #1
 800c228:	77fb      	strb	r3, [r7, #31]
 800c22a:	e000      	b.n	800c22e <HAL_SPI_Transmit+0x24e>
  }

error:
 800c22c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	2201      	movs	r2, #1
 800c232:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	2200      	movs	r2, #0
 800c23a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c23e:	7ffb      	ldrb	r3, [r7, #31]
}
 800c240:	4618      	mov	r0, r3
 800c242:	3720      	adds	r7, #32
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}

0800c248 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b088      	sub	sp, #32
 800c24c:	af02      	add	r7, sp, #8
 800c24e:	60f8      	str	r0, [r7, #12]
 800c250:	60b9      	str	r1, [r7, #8]
 800c252:	603b      	str	r3, [r7, #0]
 800c254:	4613      	mov	r3, r2
 800c256:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c258:	2300      	movs	r3, #0
 800c25a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	685b      	ldr	r3, [r3, #4]
 800c260:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c264:	d112      	bne.n	800c28c <HAL_SPI_Receive+0x44>
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	689b      	ldr	r3, [r3, #8]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d10e      	bne.n	800c28c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	2204      	movs	r2, #4
 800c272:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800c276:	88fa      	ldrh	r2, [r7, #6]
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	9300      	str	r3, [sp, #0]
 800c27c:	4613      	mov	r3, r2
 800c27e:	68ba      	ldr	r2, [r7, #8]
 800c280:	68b9      	ldr	r1, [r7, #8]
 800c282:	68f8      	ldr	r0, [r7, #12]
 800c284:	f000 f8e9 	bl	800c45a <HAL_SPI_TransmitReceive>
 800c288:	4603      	mov	r3, r0
 800c28a:	e0e2      	b.n	800c452 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c292:	2b01      	cmp	r3, #1
 800c294:	d101      	bne.n	800c29a <HAL_SPI_Receive+0x52>
 800c296:	2302      	movs	r3, #2
 800c298:	e0db      	b.n	800c452 <HAL_SPI_Receive+0x20a>
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	2201      	movs	r2, #1
 800c29e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c2a2:	f7fb fa33 	bl	800770c <HAL_GetTick>
 800c2a6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c2ae:	b2db      	uxtb	r3, r3
 800c2b0:	2b01      	cmp	r3, #1
 800c2b2:	d002      	beq.n	800c2ba <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800c2b4:	2302      	movs	r3, #2
 800c2b6:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c2b8:	e0c2      	b.n	800c440 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800c2ba:	68bb      	ldr	r3, [r7, #8]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d002      	beq.n	800c2c6 <HAL_SPI_Receive+0x7e>
 800c2c0:	88fb      	ldrh	r3, [r7, #6]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d102      	bne.n	800c2cc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800c2c6:	2301      	movs	r3, #1
 800c2c8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c2ca:	e0b9      	b.n	800c440 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	2204      	movs	r2, #4
 800c2d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	68ba      	ldr	r2, [r7, #8]
 800c2de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	88fa      	ldrh	r2, [r7, #6]
 800c2e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	88fa      	ldrh	r2, [r7, #6]
 800c2ea:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	2200      	movs	r2, #0
 800c302:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	2200      	movs	r2, #0
 800c308:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	689b      	ldr	r3, [r3, #8]
 800c30e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c312:	d107      	bne.n	800c324 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	681a      	ldr	r2, [r3, #0]
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c322:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c32e:	2b40      	cmp	r3, #64	; 0x40
 800c330:	d007      	beq.n	800c342 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	681a      	ldr	r2, [r3, #0]
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c340:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	68db      	ldr	r3, [r3, #12]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d162      	bne.n	800c410 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800c34a:	e02e      	b.n	800c3aa <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	689b      	ldr	r3, [r3, #8]
 800c352:	f003 0301 	and.w	r3, r3, #1
 800c356:	2b01      	cmp	r3, #1
 800c358:	d115      	bne.n	800c386 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	f103 020c 	add.w	r2, r3, #12
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c366:	7812      	ldrb	r2, [r2, #0]
 800c368:	b2d2      	uxtb	r2, r2
 800c36a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c370:	1c5a      	adds	r2, r3, #1
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c37a:	b29b      	uxth	r3, r3
 800c37c:	3b01      	subs	r3, #1
 800c37e:	b29a      	uxth	r2, r3
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c384:	e011      	b.n	800c3aa <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c386:	f7fb f9c1 	bl	800770c <HAL_GetTick>
 800c38a:	4602      	mov	r2, r0
 800c38c:	693b      	ldr	r3, [r7, #16]
 800c38e:	1ad3      	subs	r3, r2, r3
 800c390:	683a      	ldr	r2, [r7, #0]
 800c392:	429a      	cmp	r2, r3
 800c394:	d803      	bhi.n	800c39e <HAL_SPI_Receive+0x156>
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c39c:	d102      	bne.n	800c3a4 <HAL_SPI_Receive+0x15c>
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d102      	bne.n	800c3aa <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800c3a4:	2303      	movs	r3, #3
 800c3a6:	75fb      	strb	r3, [r7, #23]
          goto error;
 800c3a8:	e04a      	b.n	800c440 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c3ae:	b29b      	uxth	r3, r3
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d1cb      	bne.n	800c34c <HAL_SPI_Receive+0x104>
 800c3b4:	e031      	b.n	800c41a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	689b      	ldr	r3, [r3, #8]
 800c3bc:	f003 0301 	and.w	r3, r3, #1
 800c3c0:	2b01      	cmp	r3, #1
 800c3c2:	d113      	bne.n	800c3ec <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	68da      	ldr	r2, [r3, #12]
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3ce:	b292      	uxth	r2, r2
 800c3d0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3d6:	1c9a      	adds	r2, r3, #2
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c3e0:	b29b      	uxth	r3, r3
 800c3e2:	3b01      	subs	r3, #1
 800c3e4:	b29a      	uxth	r2, r3
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c3ea:	e011      	b.n	800c410 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c3ec:	f7fb f98e 	bl	800770c <HAL_GetTick>
 800c3f0:	4602      	mov	r2, r0
 800c3f2:	693b      	ldr	r3, [r7, #16]
 800c3f4:	1ad3      	subs	r3, r2, r3
 800c3f6:	683a      	ldr	r2, [r7, #0]
 800c3f8:	429a      	cmp	r2, r3
 800c3fa:	d803      	bhi.n	800c404 <HAL_SPI_Receive+0x1bc>
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c402:	d102      	bne.n	800c40a <HAL_SPI_Receive+0x1c2>
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d102      	bne.n	800c410 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800c40a:	2303      	movs	r3, #3
 800c40c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800c40e:	e017      	b.n	800c440 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c414:	b29b      	uxth	r3, r3
 800c416:	2b00      	cmp	r3, #0
 800c418:	d1cd      	bne.n	800c3b6 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c41a:	693a      	ldr	r2, [r7, #16]
 800c41c:	6839      	ldr	r1, [r7, #0]
 800c41e:	68f8      	ldr	r0, [r7, #12]
 800c420:	f000 fa27 	bl	800c872 <SPI_EndRxTransaction>
 800c424:	4603      	mov	r3, r0
 800c426:	2b00      	cmp	r3, #0
 800c428:	d002      	beq.n	800c430 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	2220      	movs	r2, #32
 800c42e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c434:	2b00      	cmp	r3, #0
 800c436:	d002      	beq.n	800c43e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800c438:	2301      	movs	r3, #1
 800c43a:	75fb      	strb	r3, [r7, #23]
 800c43c:	e000      	b.n	800c440 <HAL_SPI_Receive+0x1f8>
  }

error :
 800c43e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	2201      	movs	r2, #1
 800c444:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	2200      	movs	r2, #0
 800c44c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c450:	7dfb      	ldrb	r3, [r7, #23]
}
 800c452:	4618      	mov	r0, r3
 800c454:	3718      	adds	r7, #24
 800c456:	46bd      	mov	sp, r7
 800c458:	bd80      	pop	{r7, pc}

0800c45a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c45a:	b580      	push	{r7, lr}
 800c45c:	b08c      	sub	sp, #48	; 0x30
 800c45e:	af00      	add	r7, sp, #0
 800c460:	60f8      	str	r0, [r7, #12]
 800c462:	60b9      	str	r1, [r7, #8]
 800c464:	607a      	str	r2, [r7, #4]
 800c466:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c468:	2301      	movs	r3, #1
 800c46a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c46c:	2300      	movs	r3, #0
 800c46e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c478:	2b01      	cmp	r3, #1
 800c47a:	d101      	bne.n	800c480 <HAL_SPI_TransmitReceive+0x26>
 800c47c:	2302      	movs	r3, #2
 800c47e:	e18a      	b.n	800c796 <HAL_SPI_TransmitReceive+0x33c>
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	2201      	movs	r2, #1
 800c484:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c488:	f7fb f940 	bl	800770c <HAL_GetTick>
 800c48c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c494:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	685b      	ldr	r3, [r3, #4]
 800c49c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800c49e:	887b      	ldrh	r3, [r7, #2]
 800c4a0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c4a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c4a6:	2b01      	cmp	r3, #1
 800c4a8:	d00f      	beq.n	800c4ca <HAL_SPI_TransmitReceive+0x70>
 800c4aa:	69fb      	ldr	r3, [r7, #28]
 800c4ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c4b0:	d107      	bne.n	800c4c2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	689b      	ldr	r3, [r3, #8]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d103      	bne.n	800c4c2 <HAL_SPI_TransmitReceive+0x68>
 800c4ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c4be:	2b04      	cmp	r3, #4
 800c4c0:	d003      	beq.n	800c4ca <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800c4c2:	2302      	movs	r3, #2
 800c4c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c4c8:	e15b      	b.n	800c782 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c4ca:	68bb      	ldr	r3, [r7, #8]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d005      	beq.n	800c4dc <HAL_SPI_TransmitReceive+0x82>
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d002      	beq.n	800c4dc <HAL_SPI_TransmitReceive+0x82>
 800c4d6:	887b      	ldrh	r3, [r7, #2]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d103      	bne.n	800c4e4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800c4dc:	2301      	movs	r3, #1
 800c4de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c4e2:	e14e      	b.n	800c782 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c4ea:	b2db      	uxtb	r3, r3
 800c4ec:	2b04      	cmp	r3, #4
 800c4ee:	d003      	beq.n	800c4f8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	2205      	movs	r2, #5
 800c4f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	687a      	ldr	r2, [r7, #4]
 800c502:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	887a      	ldrh	r2, [r7, #2]
 800c508:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	887a      	ldrh	r2, [r7, #2]
 800c50e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	68ba      	ldr	r2, [r7, #8]
 800c514:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	887a      	ldrh	r2, [r7, #2]
 800c51a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	887a      	ldrh	r2, [r7, #2]
 800c520:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	2200      	movs	r2, #0
 800c526:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	2200      	movs	r2, #0
 800c52c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c538:	2b40      	cmp	r3, #64	; 0x40
 800c53a:	d007      	beq.n	800c54c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	681a      	ldr	r2, [r3, #0]
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c54a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	68db      	ldr	r3, [r3, #12]
 800c550:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c554:	d178      	bne.n	800c648 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	685b      	ldr	r3, [r3, #4]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d002      	beq.n	800c564 <HAL_SPI_TransmitReceive+0x10a>
 800c55e:	8b7b      	ldrh	r3, [r7, #26]
 800c560:	2b01      	cmp	r3, #1
 800c562:	d166      	bne.n	800c632 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c568:	881a      	ldrh	r2, [r3, #0]
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c574:	1c9a      	adds	r2, r3, #2
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c57e:	b29b      	uxth	r3, r3
 800c580:	3b01      	subs	r3, #1
 800c582:	b29a      	uxth	r2, r3
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c588:	e053      	b.n	800c632 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	689b      	ldr	r3, [r3, #8]
 800c590:	f003 0302 	and.w	r3, r3, #2
 800c594:	2b02      	cmp	r3, #2
 800c596:	d11b      	bne.n	800c5d0 <HAL_SPI_TransmitReceive+0x176>
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c59c:	b29b      	uxth	r3, r3
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d016      	beq.n	800c5d0 <HAL_SPI_TransmitReceive+0x176>
 800c5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5a4:	2b01      	cmp	r3, #1
 800c5a6:	d113      	bne.n	800c5d0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5ac:	881a      	ldrh	r2, [r3, #0]
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5b8:	1c9a      	adds	r2, r3, #2
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c5c2:	b29b      	uxth	r3, r3
 800c5c4:	3b01      	subs	r3, #1
 800c5c6:	b29a      	uxth	r2, r3
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	689b      	ldr	r3, [r3, #8]
 800c5d6:	f003 0301 	and.w	r3, r3, #1
 800c5da:	2b01      	cmp	r3, #1
 800c5dc:	d119      	bne.n	800c612 <HAL_SPI_TransmitReceive+0x1b8>
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c5e2:	b29b      	uxth	r3, r3
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d014      	beq.n	800c612 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	68da      	ldr	r2, [r3, #12]
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5f2:	b292      	uxth	r2, r2
 800c5f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5fa:	1c9a      	adds	r2, r3, #2
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c604:	b29b      	uxth	r3, r3
 800c606:	3b01      	subs	r3, #1
 800c608:	b29a      	uxth	r2, r3
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c60e:	2301      	movs	r3, #1
 800c610:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c612:	f7fb f87b 	bl	800770c <HAL_GetTick>
 800c616:	4602      	mov	r2, r0
 800c618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c61a:	1ad3      	subs	r3, r2, r3
 800c61c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c61e:	429a      	cmp	r2, r3
 800c620:	d807      	bhi.n	800c632 <HAL_SPI_TransmitReceive+0x1d8>
 800c622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c624:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c628:	d003      	beq.n	800c632 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800c62a:	2303      	movs	r3, #3
 800c62c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c630:	e0a7      	b.n	800c782 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c636:	b29b      	uxth	r3, r3
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d1a6      	bne.n	800c58a <HAL_SPI_TransmitReceive+0x130>
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c640:	b29b      	uxth	r3, r3
 800c642:	2b00      	cmp	r3, #0
 800c644:	d1a1      	bne.n	800c58a <HAL_SPI_TransmitReceive+0x130>
 800c646:	e07c      	b.n	800c742 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	685b      	ldr	r3, [r3, #4]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d002      	beq.n	800c656 <HAL_SPI_TransmitReceive+0x1fc>
 800c650:	8b7b      	ldrh	r3, [r7, #26]
 800c652:	2b01      	cmp	r3, #1
 800c654:	d16b      	bne.n	800c72e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	330c      	adds	r3, #12
 800c660:	7812      	ldrb	r2, [r2, #0]
 800c662:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c668:	1c5a      	adds	r2, r3, #1
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c672:	b29b      	uxth	r3, r3
 800c674:	3b01      	subs	r3, #1
 800c676:	b29a      	uxth	r2, r3
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c67c:	e057      	b.n	800c72e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	689b      	ldr	r3, [r3, #8]
 800c684:	f003 0302 	and.w	r3, r3, #2
 800c688:	2b02      	cmp	r3, #2
 800c68a:	d11c      	bne.n	800c6c6 <HAL_SPI_TransmitReceive+0x26c>
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c690:	b29b      	uxth	r3, r3
 800c692:	2b00      	cmp	r3, #0
 800c694:	d017      	beq.n	800c6c6 <HAL_SPI_TransmitReceive+0x26c>
 800c696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c698:	2b01      	cmp	r3, #1
 800c69a:	d114      	bne.n	800c6c6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	330c      	adds	r3, #12
 800c6a6:	7812      	ldrb	r2, [r2, #0]
 800c6a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6ae:	1c5a      	adds	r2, r3, #1
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c6b8:	b29b      	uxth	r3, r3
 800c6ba:	3b01      	subs	r3, #1
 800c6bc:	b29a      	uxth	r2, r3
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	689b      	ldr	r3, [r3, #8]
 800c6cc:	f003 0301 	and.w	r3, r3, #1
 800c6d0:	2b01      	cmp	r3, #1
 800c6d2:	d119      	bne.n	800c708 <HAL_SPI_TransmitReceive+0x2ae>
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c6d8:	b29b      	uxth	r3, r3
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d014      	beq.n	800c708 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	68da      	ldr	r2, [r3, #12]
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6e8:	b2d2      	uxtb	r2, r2
 800c6ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6f0:	1c5a      	adds	r2, r3, #1
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c6fa:	b29b      	uxth	r3, r3
 800c6fc:	3b01      	subs	r3, #1
 800c6fe:	b29a      	uxth	r2, r3
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c704:	2301      	movs	r3, #1
 800c706:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c708:	f7fb f800 	bl	800770c <HAL_GetTick>
 800c70c:	4602      	mov	r2, r0
 800c70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c710:	1ad3      	subs	r3, r2, r3
 800c712:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c714:	429a      	cmp	r2, r3
 800c716:	d803      	bhi.n	800c720 <HAL_SPI_TransmitReceive+0x2c6>
 800c718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c71a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c71e:	d102      	bne.n	800c726 <HAL_SPI_TransmitReceive+0x2cc>
 800c720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c722:	2b00      	cmp	r3, #0
 800c724:	d103      	bne.n	800c72e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800c726:	2303      	movs	r3, #3
 800c728:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c72c:	e029      	b.n	800c782 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c732:	b29b      	uxth	r3, r3
 800c734:	2b00      	cmp	r3, #0
 800c736:	d1a2      	bne.n	800c67e <HAL_SPI_TransmitReceive+0x224>
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c73c:	b29b      	uxth	r3, r3
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d19d      	bne.n	800c67e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c744:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c746:	68f8      	ldr	r0, [r7, #12]
 800c748:	f000 f8f8 	bl	800c93c <SPI_EndRxTxTransaction>
 800c74c:	4603      	mov	r3, r0
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d006      	beq.n	800c760 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800c752:	2301      	movs	r3, #1
 800c754:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	2220      	movs	r2, #32
 800c75c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800c75e:	e010      	b.n	800c782 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	689b      	ldr	r3, [r3, #8]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d10b      	bne.n	800c780 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c768:	2300      	movs	r3, #0
 800c76a:	617b      	str	r3, [r7, #20]
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	68db      	ldr	r3, [r3, #12]
 800c772:	617b      	str	r3, [r7, #20]
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	689b      	ldr	r3, [r3, #8]
 800c77a:	617b      	str	r3, [r7, #20]
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	e000      	b.n	800c782 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800c780:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	2201      	movs	r2, #1
 800c786:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	2200      	movs	r2, #0
 800c78e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c792:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c796:	4618      	mov	r0, r3
 800c798:	3730      	adds	r7, #48	; 0x30
 800c79a:	46bd      	mov	sp, r7
 800c79c:	bd80      	pop	{r7, pc}

0800c79e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c79e:	b580      	push	{r7, lr}
 800c7a0:	b084      	sub	sp, #16
 800c7a2:	af00      	add	r7, sp, #0
 800c7a4:	60f8      	str	r0, [r7, #12]
 800c7a6:	60b9      	str	r1, [r7, #8]
 800c7a8:	603b      	str	r3, [r7, #0]
 800c7aa:	4613      	mov	r3, r2
 800c7ac:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c7ae:	e04c      	b.n	800c84a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7b6:	d048      	beq.n	800c84a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800c7b8:	f7fa ffa8 	bl	800770c <HAL_GetTick>
 800c7bc:	4602      	mov	r2, r0
 800c7be:	69bb      	ldr	r3, [r7, #24]
 800c7c0:	1ad3      	subs	r3, r2, r3
 800c7c2:	683a      	ldr	r2, [r7, #0]
 800c7c4:	429a      	cmp	r2, r3
 800c7c6:	d902      	bls.n	800c7ce <SPI_WaitFlagStateUntilTimeout+0x30>
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d13d      	bne.n	800c84a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	685a      	ldr	r2, [r3, #4]
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c7dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	685b      	ldr	r3, [r3, #4]
 800c7e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c7e6:	d111      	bne.n	800c80c <SPI_WaitFlagStateUntilTimeout+0x6e>
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	689b      	ldr	r3, [r3, #8]
 800c7ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c7f0:	d004      	beq.n	800c7fc <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	689b      	ldr	r3, [r3, #8]
 800c7f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c7fa:	d107      	bne.n	800c80c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	681a      	ldr	r2, [r3, #0]
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c80a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c810:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c814:	d10f      	bne.n	800c836 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	681a      	ldr	r2, [r3, #0]
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c824:	601a      	str	r2, [r3, #0]
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	681a      	ldr	r2, [r3, #0]
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c834:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	2201      	movs	r2, #1
 800c83a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	2200      	movs	r2, #0
 800c842:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800c846:	2303      	movs	r3, #3
 800c848:	e00f      	b.n	800c86a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	689a      	ldr	r2, [r3, #8]
 800c850:	68bb      	ldr	r3, [r7, #8]
 800c852:	4013      	ands	r3, r2
 800c854:	68ba      	ldr	r2, [r7, #8]
 800c856:	429a      	cmp	r2, r3
 800c858:	bf0c      	ite	eq
 800c85a:	2301      	moveq	r3, #1
 800c85c:	2300      	movne	r3, #0
 800c85e:	b2db      	uxtb	r3, r3
 800c860:	461a      	mov	r2, r3
 800c862:	79fb      	ldrb	r3, [r7, #7]
 800c864:	429a      	cmp	r2, r3
 800c866:	d1a3      	bne.n	800c7b0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800c868:	2300      	movs	r3, #0
}
 800c86a:	4618      	mov	r0, r3
 800c86c:	3710      	adds	r7, #16
 800c86e:	46bd      	mov	sp, r7
 800c870:	bd80      	pop	{r7, pc}

0800c872 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800c872:	b580      	push	{r7, lr}
 800c874:	b086      	sub	sp, #24
 800c876:	af02      	add	r7, sp, #8
 800c878:	60f8      	str	r0, [r7, #12]
 800c87a:	60b9      	str	r1, [r7, #8]
 800c87c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	685b      	ldr	r3, [r3, #4]
 800c882:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c886:	d111      	bne.n	800c8ac <SPI_EndRxTransaction+0x3a>
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	689b      	ldr	r3, [r3, #8]
 800c88c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c890:	d004      	beq.n	800c89c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	689b      	ldr	r3, [r3, #8]
 800c896:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c89a:	d107      	bne.n	800c8ac <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	681a      	ldr	r2, [r3, #0]
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c8aa:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	685b      	ldr	r3, [r3, #4]
 800c8b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c8b4:	d12a      	bne.n	800c90c <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	689b      	ldr	r3, [r3, #8]
 800c8ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c8be:	d012      	beq.n	800c8e6 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	9300      	str	r3, [sp, #0]
 800c8c4:	68bb      	ldr	r3, [r7, #8]
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	2180      	movs	r1, #128	; 0x80
 800c8ca:	68f8      	ldr	r0, [r7, #12]
 800c8cc:	f7ff ff67 	bl	800c79e <SPI_WaitFlagStateUntilTimeout>
 800c8d0:	4603      	mov	r3, r0
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d02d      	beq.n	800c932 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8da:	f043 0220 	orr.w	r2, r3, #32
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800c8e2:	2303      	movs	r3, #3
 800c8e4:	e026      	b.n	800c934 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	9300      	str	r3, [sp, #0]
 800c8ea:	68bb      	ldr	r3, [r7, #8]
 800c8ec:	2200      	movs	r2, #0
 800c8ee:	2101      	movs	r1, #1
 800c8f0:	68f8      	ldr	r0, [r7, #12]
 800c8f2:	f7ff ff54 	bl	800c79e <SPI_WaitFlagStateUntilTimeout>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d01a      	beq.n	800c932 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c900:	f043 0220 	orr.w	r2, r3, #32
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800c908:	2303      	movs	r3, #3
 800c90a:	e013      	b.n	800c934 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	9300      	str	r3, [sp, #0]
 800c910:	68bb      	ldr	r3, [r7, #8]
 800c912:	2200      	movs	r2, #0
 800c914:	2101      	movs	r1, #1
 800c916:	68f8      	ldr	r0, [r7, #12]
 800c918:	f7ff ff41 	bl	800c79e <SPI_WaitFlagStateUntilTimeout>
 800c91c:	4603      	mov	r3, r0
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d007      	beq.n	800c932 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c926:	f043 0220 	orr.w	r2, r3, #32
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c92e:	2303      	movs	r3, #3
 800c930:	e000      	b.n	800c934 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800c932:	2300      	movs	r3, #0
}
 800c934:	4618      	mov	r0, r3
 800c936:	3710      	adds	r7, #16
 800c938:	46bd      	mov	sp, r7
 800c93a:	bd80      	pop	{r7, pc}

0800c93c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b088      	sub	sp, #32
 800c940:	af02      	add	r7, sp, #8
 800c942:	60f8      	str	r0, [r7, #12]
 800c944:	60b9      	str	r1, [r7, #8]
 800c946:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c948:	4b1b      	ldr	r3, [pc, #108]	; (800c9b8 <SPI_EndRxTxTransaction+0x7c>)
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	4a1b      	ldr	r2, [pc, #108]	; (800c9bc <SPI_EndRxTxTransaction+0x80>)
 800c94e:	fba2 2303 	umull	r2, r3, r2, r3
 800c952:	0d5b      	lsrs	r3, r3, #21
 800c954:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c958:	fb02 f303 	mul.w	r3, r2, r3
 800c95c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	685b      	ldr	r3, [r3, #4]
 800c962:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c966:	d112      	bne.n	800c98e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	9300      	str	r3, [sp, #0]
 800c96c:	68bb      	ldr	r3, [r7, #8]
 800c96e:	2200      	movs	r2, #0
 800c970:	2180      	movs	r1, #128	; 0x80
 800c972:	68f8      	ldr	r0, [r7, #12]
 800c974:	f7ff ff13 	bl	800c79e <SPI_WaitFlagStateUntilTimeout>
 800c978:	4603      	mov	r3, r0
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d016      	beq.n	800c9ac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c982:	f043 0220 	orr.w	r2, r3, #32
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c98a:	2303      	movs	r3, #3
 800c98c:	e00f      	b.n	800c9ae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c98e:	697b      	ldr	r3, [r7, #20]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d00a      	beq.n	800c9aa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800c994:	697b      	ldr	r3, [r7, #20]
 800c996:	3b01      	subs	r3, #1
 800c998:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	689b      	ldr	r3, [r3, #8]
 800c9a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9a4:	2b80      	cmp	r3, #128	; 0x80
 800c9a6:	d0f2      	beq.n	800c98e <SPI_EndRxTxTransaction+0x52>
 800c9a8:	e000      	b.n	800c9ac <SPI_EndRxTxTransaction+0x70>
        break;
 800c9aa:	bf00      	nop
  }

  return HAL_OK;
 800c9ac:	2300      	movs	r3, #0
}
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	3718      	adds	r7, #24
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	bd80      	pop	{r7, pc}
 800c9b6:	bf00      	nop
 800c9b8:	20000000 	.word	0x20000000
 800c9bc:	165e9f81 	.word	0x165e9f81

0800c9c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b082      	sub	sp, #8
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d101      	bne.n	800c9d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c9ce:	2301      	movs	r3, #1
 800c9d0:	e01d      	b.n	800ca0e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c9d8:	b2db      	uxtb	r3, r3
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d106      	bne.n	800c9ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c9e6:	6878      	ldr	r0, [r7, #4]
 800c9e8:	f7f8 fff6 	bl	80059d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	2202      	movs	r2, #2
 800c9f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681a      	ldr	r2, [r3, #0]
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	3304      	adds	r3, #4
 800c9fc:	4619      	mov	r1, r3
 800c9fe:	4610      	mov	r0, r2
 800ca00:	f000 fb56 	bl	800d0b0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2201      	movs	r2, #1
 800ca08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ca0c:	2300      	movs	r3, #0
}
 800ca0e:	4618      	mov	r0, r3
 800ca10:	3708      	adds	r7, #8
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}

0800ca16 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ca16:	b480      	push	{r7}
 800ca18:	b085      	sub	sp, #20
 800ca1a:	af00      	add	r7, sp, #0
 800ca1c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	68da      	ldr	r2, [r3, #12]
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	f042 0201 	orr.w	r2, r2, #1
 800ca2c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	689b      	ldr	r3, [r3, #8]
 800ca34:	f003 0307 	and.w	r3, r3, #7
 800ca38:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	2b06      	cmp	r3, #6
 800ca3e:	d007      	beq.n	800ca50 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	681a      	ldr	r2, [r3, #0]
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	f042 0201 	orr.w	r2, r2, #1
 800ca4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ca50:	2300      	movs	r3, #0
}
 800ca52:	4618      	mov	r0, r3
 800ca54:	3714      	adds	r7, #20
 800ca56:	46bd      	mov	sp, r7
 800ca58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5c:	4770      	bx	lr

0800ca5e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ca5e:	b580      	push	{r7, lr}
 800ca60:	b082      	sub	sp, #8
 800ca62:	af00      	add	r7, sp, #0
 800ca64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d101      	bne.n	800ca70 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ca6c:	2301      	movs	r3, #1
 800ca6e:	e01d      	b.n	800caac <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ca76:	b2db      	uxtb	r3, r3
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d106      	bne.n	800ca8a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2200      	movs	r2, #0
 800ca80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ca84:	6878      	ldr	r0, [r7, #4]
 800ca86:	f7f8 ff33 	bl	80058f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2202      	movs	r2, #2
 800ca8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681a      	ldr	r2, [r3, #0]
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	3304      	adds	r3, #4
 800ca9a:	4619      	mov	r1, r3
 800ca9c:	4610      	mov	r0, r2
 800ca9e:	f000 fb07 	bl	800d0b0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	2201      	movs	r2, #1
 800caa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800caaa:	2300      	movs	r3, #0
}
 800caac:	4618      	mov	r0, r3
 800caae:	3708      	adds	r7, #8
 800cab0:	46bd      	mov	sp, r7
 800cab2:	bd80      	pop	{r7, pc}

0800cab4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b084      	sub	sp, #16
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
 800cabc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	2201      	movs	r2, #1
 800cac4:	6839      	ldr	r1, [r7, #0]
 800cac6:	4618      	mov	r0, r3
 800cac8:	f000 fd42 	bl	800d550 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	4a15      	ldr	r2, [pc, #84]	; (800cb28 <HAL_TIM_PWM_Start+0x74>)
 800cad2:	4293      	cmp	r3, r2
 800cad4:	d004      	beq.n	800cae0 <HAL_TIM_PWM_Start+0x2c>
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	4a14      	ldr	r2, [pc, #80]	; (800cb2c <HAL_TIM_PWM_Start+0x78>)
 800cadc:	4293      	cmp	r3, r2
 800cade:	d101      	bne.n	800cae4 <HAL_TIM_PWM_Start+0x30>
 800cae0:	2301      	movs	r3, #1
 800cae2:	e000      	b.n	800cae6 <HAL_TIM_PWM_Start+0x32>
 800cae4:	2300      	movs	r3, #0
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d007      	beq.n	800cafa <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800caf8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	689b      	ldr	r3, [r3, #8]
 800cb00:	f003 0307 	and.w	r3, r3, #7
 800cb04:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	2b06      	cmp	r3, #6
 800cb0a:	d007      	beq.n	800cb1c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	681a      	ldr	r2, [r3, #0]
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	f042 0201 	orr.w	r2, r2, #1
 800cb1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cb1c:	2300      	movs	r3, #0
}
 800cb1e:	4618      	mov	r0, r3
 800cb20:	3710      	adds	r7, #16
 800cb22:	46bd      	mov	sp, r7
 800cb24:	bd80      	pop	{r7, pc}
 800cb26:	bf00      	nop
 800cb28:	40010000 	.word	0x40010000
 800cb2c:	40010400 	.word	0x40010400

0800cb30 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b086      	sub	sp, #24
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
 800cb38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d101      	bne.n	800cb44 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800cb40:	2301      	movs	r3, #1
 800cb42:	e083      	b.n	800cc4c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cb4a:	b2db      	uxtb	r3, r3
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d106      	bne.n	800cb5e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2200      	movs	r2, #0
 800cb54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800cb58:	6878      	ldr	r0, [r7, #4]
 800cb5a:	f7f8 ffcd 	bl	8005af8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	2202      	movs	r2, #2
 800cb62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	689b      	ldr	r3, [r3, #8]
 800cb6c:	687a      	ldr	r2, [r7, #4]
 800cb6e:	6812      	ldr	r2, [r2, #0]
 800cb70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cb74:	f023 0307 	bic.w	r3, r3, #7
 800cb78:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681a      	ldr	r2, [r3, #0]
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	3304      	adds	r3, #4
 800cb82:	4619      	mov	r1, r3
 800cb84:	4610      	mov	r0, r2
 800cb86:	f000 fa93 	bl	800d0b0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	689b      	ldr	r3, [r3, #8]
 800cb90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	699b      	ldr	r3, [r3, #24]
 800cb98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	6a1b      	ldr	r3, [r3, #32]
 800cba0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	697a      	ldr	r2, [r7, #20]
 800cba8:	4313      	orrs	r3, r2
 800cbaa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800cbac:	693b      	ldr	r3, [r7, #16]
 800cbae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cbb2:	f023 0303 	bic.w	r3, r3, #3
 800cbb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	689a      	ldr	r2, [r3, #8]
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	699b      	ldr	r3, [r3, #24]
 800cbc0:	021b      	lsls	r3, r3, #8
 800cbc2:	4313      	orrs	r3, r2
 800cbc4:	693a      	ldr	r2, [r7, #16]
 800cbc6:	4313      	orrs	r3, r2
 800cbc8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800cbca:	693b      	ldr	r3, [r7, #16]
 800cbcc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800cbd0:	f023 030c 	bic.w	r3, r3, #12
 800cbd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800cbd6:	693b      	ldr	r3, [r7, #16]
 800cbd8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cbdc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cbe0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	68da      	ldr	r2, [r3, #12]
 800cbe6:	683b      	ldr	r3, [r7, #0]
 800cbe8:	69db      	ldr	r3, [r3, #28]
 800cbea:	021b      	lsls	r3, r3, #8
 800cbec:	4313      	orrs	r3, r2
 800cbee:	693a      	ldr	r2, [r7, #16]
 800cbf0:	4313      	orrs	r3, r2
 800cbf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	691b      	ldr	r3, [r3, #16]
 800cbf8:	011a      	lsls	r2, r3, #4
 800cbfa:	683b      	ldr	r3, [r7, #0]
 800cbfc:	6a1b      	ldr	r3, [r3, #32]
 800cbfe:	031b      	lsls	r3, r3, #12
 800cc00:	4313      	orrs	r3, r2
 800cc02:	693a      	ldr	r2, [r7, #16]
 800cc04:	4313      	orrs	r3, r2
 800cc06:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800cc0e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800cc16:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	685a      	ldr	r2, [r3, #4]
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	695b      	ldr	r3, [r3, #20]
 800cc20:	011b      	lsls	r3, r3, #4
 800cc22:	4313      	orrs	r3, r2
 800cc24:	68fa      	ldr	r2, [r7, #12]
 800cc26:	4313      	orrs	r3, r2
 800cc28:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	697a      	ldr	r2, [r7, #20]
 800cc30:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	693a      	ldr	r2, [r7, #16]
 800cc38:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	68fa      	ldr	r2, [r7, #12]
 800cc40:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	2201      	movs	r2, #1
 800cc46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cc4a:	2300      	movs	r3, #0
}
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	3718      	adds	r7, #24
 800cc50:	46bd      	mov	sp, r7
 800cc52:	bd80      	pop	{r7, pc}

0800cc54 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b082      	sub	sp, #8
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
 800cc5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d002      	beq.n	800cc6a <HAL_TIM_Encoder_Start+0x16>
 800cc64:	2b04      	cmp	r3, #4
 800cc66:	d008      	beq.n	800cc7a <HAL_TIM_Encoder_Start+0x26>
 800cc68:	e00f      	b.n	800cc8a <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	2201      	movs	r2, #1
 800cc70:	2100      	movs	r1, #0
 800cc72:	4618      	mov	r0, r3
 800cc74:	f000 fc6c 	bl	800d550 <TIM_CCxChannelCmd>
      break;
 800cc78:	e016      	b.n	800cca8 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	2201      	movs	r2, #1
 800cc80:	2104      	movs	r1, #4
 800cc82:	4618      	mov	r0, r3
 800cc84:	f000 fc64 	bl	800d550 <TIM_CCxChannelCmd>
      break;
 800cc88:	e00e      	b.n	800cca8 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	2201      	movs	r2, #1
 800cc90:	2100      	movs	r1, #0
 800cc92:	4618      	mov	r0, r3
 800cc94:	f000 fc5c 	bl	800d550 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	2201      	movs	r2, #1
 800cc9e:	2104      	movs	r1, #4
 800cca0:	4618      	mov	r0, r3
 800cca2:	f000 fc55 	bl	800d550 <TIM_CCxChannelCmd>
      break;
 800cca6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	681a      	ldr	r2, [r3, #0]
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	f042 0201 	orr.w	r2, r2, #1
 800ccb6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ccb8:	2300      	movs	r3, #0
}
 800ccba:	4618      	mov	r0, r3
 800ccbc:	3708      	adds	r7, #8
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	bd80      	pop	{r7, pc}

0800ccc2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ccc2:	b580      	push	{r7, lr}
 800ccc4:	b082      	sub	sp, #8
 800ccc6:	af00      	add	r7, sp, #0
 800ccc8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	691b      	ldr	r3, [r3, #16]
 800ccd0:	f003 0302 	and.w	r3, r3, #2
 800ccd4:	2b02      	cmp	r3, #2
 800ccd6:	d122      	bne.n	800cd1e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	68db      	ldr	r3, [r3, #12]
 800ccde:	f003 0302 	and.w	r3, r3, #2
 800cce2:	2b02      	cmp	r3, #2
 800cce4:	d11b      	bne.n	800cd1e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	f06f 0202 	mvn.w	r2, #2
 800ccee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2201      	movs	r2, #1
 800ccf4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	699b      	ldr	r3, [r3, #24]
 800ccfc:	f003 0303 	and.w	r3, r3, #3
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d003      	beq.n	800cd0c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f000 f9b5 	bl	800d074 <HAL_TIM_IC_CaptureCallback>
 800cd0a:	e005      	b.n	800cd18 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd0c:	6878      	ldr	r0, [r7, #4]
 800cd0e:	f000 f9a7 	bl	800d060 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd12:	6878      	ldr	r0, [r7, #4]
 800cd14:	f000 f9b8 	bl	800d088 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	691b      	ldr	r3, [r3, #16]
 800cd24:	f003 0304 	and.w	r3, r3, #4
 800cd28:	2b04      	cmp	r3, #4
 800cd2a:	d122      	bne.n	800cd72 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	68db      	ldr	r3, [r3, #12]
 800cd32:	f003 0304 	and.w	r3, r3, #4
 800cd36:	2b04      	cmp	r3, #4
 800cd38:	d11b      	bne.n	800cd72 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	f06f 0204 	mvn.w	r2, #4
 800cd42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	2202      	movs	r2, #2
 800cd48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	699b      	ldr	r3, [r3, #24]
 800cd50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d003      	beq.n	800cd60 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cd58:	6878      	ldr	r0, [r7, #4]
 800cd5a:	f000 f98b 	bl	800d074 <HAL_TIM_IC_CaptureCallback>
 800cd5e:	e005      	b.n	800cd6c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd60:	6878      	ldr	r0, [r7, #4]
 800cd62:	f000 f97d 	bl	800d060 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd66:	6878      	ldr	r0, [r7, #4]
 800cd68:	f000 f98e 	bl	800d088 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	2200      	movs	r2, #0
 800cd70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	691b      	ldr	r3, [r3, #16]
 800cd78:	f003 0308 	and.w	r3, r3, #8
 800cd7c:	2b08      	cmp	r3, #8
 800cd7e:	d122      	bne.n	800cdc6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	68db      	ldr	r3, [r3, #12]
 800cd86:	f003 0308 	and.w	r3, r3, #8
 800cd8a:	2b08      	cmp	r3, #8
 800cd8c:	d11b      	bne.n	800cdc6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	f06f 0208 	mvn.w	r2, #8
 800cd96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	2204      	movs	r2, #4
 800cd9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	69db      	ldr	r3, [r3, #28]
 800cda4:	f003 0303 	and.w	r3, r3, #3
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d003      	beq.n	800cdb4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	f000 f961 	bl	800d074 <HAL_TIM_IC_CaptureCallback>
 800cdb2:	e005      	b.n	800cdc0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cdb4:	6878      	ldr	r0, [r7, #4]
 800cdb6:	f000 f953 	bl	800d060 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cdba:	6878      	ldr	r0, [r7, #4]
 800cdbc:	f000 f964 	bl	800d088 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	691b      	ldr	r3, [r3, #16]
 800cdcc:	f003 0310 	and.w	r3, r3, #16
 800cdd0:	2b10      	cmp	r3, #16
 800cdd2:	d122      	bne.n	800ce1a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	68db      	ldr	r3, [r3, #12]
 800cdda:	f003 0310 	and.w	r3, r3, #16
 800cdde:	2b10      	cmp	r3, #16
 800cde0:	d11b      	bne.n	800ce1a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	f06f 0210 	mvn.w	r2, #16
 800cdea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2208      	movs	r2, #8
 800cdf0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	69db      	ldr	r3, [r3, #28]
 800cdf8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d003      	beq.n	800ce08 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ce00:	6878      	ldr	r0, [r7, #4]
 800ce02:	f000 f937 	bl	800d074 <HAL_TIM_IC_CaptureCallback>
 800ce06:	e005      	b.n	800ce14 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ce08:	6878      	ldr	r0, [r7, #4]
 800ce0a:	f000 f929 	bl	800d060 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ce0e:	6878      	ldr	r0, [r7, #4]
 800ce10:	f000 f93a 	bl	800d088 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2200      	movs	r2, #0
 800ce18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	691b      	ldr	r3, [r3, #16]
 800ce20:	f003 0301 	and.w	r3, r3, #1
 800ce24:	2b01      	cmp	r3, #1
 800ce26:	d10e      	bne.n	800ce46 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	68db      	ldr	r3, [r3, #12]
 800ce2e:	f003 0301 	and.w	r3, r3, #1
 800ce32:	2b01      	cmp	r3, #1
 800ce34:	d107      	bne.n	800ce46 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	f06f 0201 	mvn.w	r2, #1
 800ce3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ce40:	6878      	ldr	r0, [r7, #4]
 800ce42:	f7f7 fb31 	bl	80044a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	691b      	ldr	r3, [r3, #16]
 800ce4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce50:	2b80      	cmp	r3, #128	; 0x80
 800ce52:	d10e      	bne.n	800ce72 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	68db      	ldr	r3, [r3, #12]
 800ce5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce5e:	2b80      	cmp	r3, #128	; 0x80
 800ce60:	d107      	bne.n	800ce72 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ce6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ce6c:	6878      	ldr	r0, [r7, #4]
 800ce6e:	f000 fc6d 	bl	800d74c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	691b      	ldr	r3, [r3, #16]
 800ce78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce7c:	2b40      	cmp	r3, #64	; 0x40
 800ce7e:	d10e      	bne.n	800ce9e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	68db      	ldr	r3, [r3, #12]
 800ce86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce8a:	2b40      	cmp	r3, #64	; 0x40
 800ce8c:	d107      	bne.n	800ce9e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ce96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ce98:	6878      	ldr	r0, [r7, #4]
 800ce9a:	f000 f8ff 	bl	800d09c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	691b      	ldr	r3, [r3, #16]
 800cea4:	f003 0320 	and.w	r3, r3, #32
 800cea8:	2b20      	cmp	r3, #32
 800ceaa:	d10e      	bne.n	800ceca <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	68db      	ldr	r3, [r3, #12]
 800ceb2:	f003 0320 	and.w	r3, r3, #32
 800ceb6:	2b20      	cmp	r3, #32
 800ceb8:	d107      	bne.n	800ceca <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	f06f 0220 	mvn.w	r2, #32
 800cec2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cec4:	6878      	ldr	r0, [r7, #4]
 800cec6:	f000 fc37 	bl	800d738 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ceca:	bf00      	nop
 800cecc:	3708      	adds	r7, #8
 800cece:	46bd      	mov	sp, r7
 800ced0:	bd80      	pop	{r7, pc}
	...

0800ced4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b084      	sub	sp, #16
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	60f8      	str	r0, [r7, #12]
 800cedc:	60b9      	str	r1, [r7, #8]
 800cede:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cee6:	2b01      	cmp	r3, #1
 800cee8:	d101      	bne.n	800ceee <HAL_TIM_PWM_ConfigChannel+0x1a>
 800ceea:	2302      	movs	r3, #2
 800ceec:	e0b4      	b.n	800d058 <HAL_TIM_PWM_ConfigChannel+0x184>
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	2201      	movs	r2, #1
 800cef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	2202      	movs	r2, #2
 800cefa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2b0c      	cmp	r3, #12
 800cf02:	f200 809f 	bhi.w	800d044 <HAL_TIM_PWM_ConfigChannel+0x170>
 800cf06:	a201      	add	r2, pc, #4	; (adr r2, 800cf0c <HAL_TIM_PWM_ConfigChannel+0x38>)
 800cf08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf0c:	0800cf41 	.word	0x0800cf41
 800cf10:	0800d045 	.word	0x0800d045
 800cf14:	0800d045 	.word	0x0800d045
 800cf18:	0800d045 	.word	0x0800d045
 800cf1c:	0800cf81 	.word	0x0800cf81
 800cf20:	0800d045 	.word	0x0800d045
 800cf24:	0800d045 	.word	0x0800d045
 800cf28:	0800d045 	.word	0x0800d045
 800cf2c:	0800cfc3 	.word	0x0800cfc3
 800cf30:	0800d045 	.word	0x0800d045
 800cf34:	0800d045 	.word	0x0800d045
 800cf38:	0800d045 	.word	0x0800d045
 800cf3c:	0800d003 	.word	0x0800d003
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	68b9      	ldr	r1, [r7, #8]
 800cf46:	4618      	mov	r0, r3
 800cf48:	f000 f952 	bl	800d1f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	699a      	ldr	r2, [r3, #24]
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	f042 0208 	orr.w	r2, r2, #8
 800cf5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	699a      	ldr	r2, [r3, #24]
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	f022 0204 	bic.w	r2, r2, #4
 800cf6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	6999      	ldr	r1, [r3, #24]
 800cf72:	68bb      	ldr	r3, [r7, #8]
 800cf74:	691a      	ldr	r2, [r3, #16]
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	430a      	orrs	r2, r1
 800cf7c:	619a      	str	r2, [r3, #24]
      break;
 800cf7e:	e062      	b.n	800d046 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	68b9      	ldr	r1, [r7, #8]
 800cf86:	4618      	mov	r0, r3
 800cf88:	f000 f9a2 	bl	800d2d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	699a      	ldr	r2, [r3, #24]
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cf9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	699a      	ldr	r2, [r3, #24]
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cfaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	6999      	ldr	r1, [r3, #24]
 800cfb2:	68bb      	ldr	r3, [r7, #8]
 800cfb4:	691b      	ldr	r3, [r3, #16]
 800cfb6:	021a      	lsls	r2, r3, #8
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	430a      	orrs	r2, r1
 800cfbe:	619a      	str	r2, [r3, #24]
      break;
 800cfc0:	e041      	b.n	800d046 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	68b9      	ldr	r1, [r7, #8]
 800cfc8:	4618      	mov	r0, r3
 800cfca:	f000 f9f7 	bl	800d3bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	69da      	ldr	r2, [r3, #28]
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	f042 0208 	orr.w	r2, r2, #8
 800cfdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	69da      	ldr	r2, [r3, #28]
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	f022 0204 	bic.w	r2, r2, #4
 800cfec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	69d9      	ldr	r1, [r3, #28]
 800cff4:	68bb      	ldr	r3, [r7, #8]
 800cff6:	691a      	ldr	r2, [r3, #16]
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	430a      	orrs	r2, r1
 800cffe:	61da      	str	r2, [r3, #28]
      break;
 800d000:	e021      	b.n	800d046 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	68b9      	ldr	r1, [r7, #8]
 800d008:	4618      	mov	r0, r3
 800d00a:	f000 fa4b 	bl	800d4a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	69da      	ldr	r2, [r3, #28]
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d01c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	69da      	ldr	r2, [r3, #28]
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d02c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	69d9      	ldr	r1, [r3, #28]
 800d034:	68bb      	ldr	r3, [r7, #8]
 800d036:	691b      	ldr	r3, [r3, #16]
 800d038:	021a      	lsls	r2, r3, #8
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	430a      	orrs	r2, r1
 800d040:	61da      	str	r2, [r3, #28]
      break;
 800d042:	e000      	b.n	800d046 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800d044:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	2201      	movs	r2, #1
 800d04a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	2200      	movs	r2, #0
 800d052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d056:	2300      	movs	r3, #0
}
 800d058:	4618      	mov	r0, r3
 800d05a:	3710      	adds	r7, #16
 800d05c:	46bd      	mov	sp, r7
 800d05e:	bd80      	pop	{r7, pc}

0800d060 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d060:	b480      	push	{r7}
 800d062:	b083      	sub	sp, #12
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d068:	bf00      	nop
 800d06a:	370c      	adds	r7, #12
 800d06c:	46bd      	mov	sp, r7
 800d06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d072:	4770      	bx	lr

0800d074 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d074:	b480      	push	{r7}
 800d076:	b083      	sub	sp, #12
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d07c:	bf00      	nop
 800d07e:	370c      	adds	r7, #12
 800d080:	46bd      	mov	sp, r7
 800d082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d086:	4770      	bx	lr

0800d088 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d088:	b480      	push	{r7}
 800d08a:	b083      	sub	sp, #12
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d090:	bf00      	nop
 800d092:	370c      	adds	r7, #12
 800d094:	46bd      	mov	sp, r7
 800d096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09a:	4770      	bx	lr

0800d09c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d09c:	b480      	push	{r7}
 800d09e:	b083      	sub	sp, #12
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d0a4:	bf00      	nop
 800d0a6:	370c      	adds	r7, #12
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ae:	4770      	bx	lr

0800d0b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d0b0:	b480      	push	{r7}
 800d0b2:	b085      	sub	sp, #20
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
 800d0b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	4a40      	ldr	r2, [pc, #256]	; (800d1c4 <TIM_Base_SetConfig+0x114>)
 800d0c4:	4293      	cmp	r3, r2
 800d0c6:	d013      	beq.n	800d0f0 <TIM_Base_SetConfig+0x40>
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d0ce:	d00f      	beq.n	800d0f0 <TIM_Base_SetConfig+0x40>
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	4a3d      	ldr	r2, [pc, #244]	; (800d1c8 <TIM_Base_SetConfig+0x118>)
 800d0d4:	4293      	cmp	r3, r2
 800d0d6:	d00b      	beq.n	800d0f0 <TIM_Base_SetConfig+0x40>
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	4a3c      	ldr	r2, [pc, #240]	; (800d1cc <TIM_Base_SetConfig+0x11c>)
 800d0dc:	4293      	cmp	r3, r2
 800d0de:	d007      	beq.n	800d0f0 <TIM_Base_SetConfig+0x40>
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	4a3b      	ldr	r2, [pc, #236]	; (800d1d0 <TIM_Base_SetConfig+0x120>)
 800d0e4:	4293      	cmp	r3, r2
 800d0e6:	d003      	beq.n	800d0f0 <TIM_Base_SetConfig+0x40>
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	4a3a      	ldr	r2, [pc, #232]	; (800d1d4 <TIM_Base_SetConfig+0x124>)
 800d0ec:	4293      	cmp	r3, r2
 800d0ee:	d108      	bne.n	800d102 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d0f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d0f8:	683b      	ldr	r3, [r7, #0]
 800d0fa:	685b      	ldr	r3, [r3, #4]
 800d0fc:	68fa      	ldr	r2, [r7, #12]
 800d0fe:	4313      	orrs	r3, r2
 800d100:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	4a2f      	ldr	r2, [pc, #188]	; (800d1c4 <TIM_Base_SetConfig+0x114>)
 800d106:	4293      	cmp	r3, r2
 800d108:	d02b      	beq.n	800d162 <TIM_Base_SetConfig+0xb2>
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d110:	d027      	beq.n	800d162 <TIM_Base_SetConfig+0xb2>
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	4a2c      	ldr	r2, [pc, #176]	; (800d1c8 <TIM_Base_SetConfig+0x118>)
 800d116:	4293      	cmp	r3, r2
 800d118:	d023      	beq.n	800d162 <TIM_Base_SetConfig+0xb2>
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	4a2b      	ldr	r2, [pc, #172]	; (800d1cc <TIM_Base_SetConfig+0x11c>)
 800d11e:	4293      	cmp	r3, r2
 800d120:	d01f      	beq.n	800d162 <TIM_Base_SetConfig+0xb2>
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	4a2a      	ldr	r2, [pc, #168]	; (800d1d0 <TIM_Base_SetConfig+0x120>)
 800d126:	4293      	cmp	r3, r2
 800d128:	d01b      	beq.n	800d162 <TIM_Base_SetConfig+0xb2>
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	4a29      	ldr	r2, [pc, #164]	; (800d1d4 <TIM_Base_SetConfig+0x124>)
 800d12e:	4293      	cmp	r3, r2
 800d130:	d017      	beq.n	800d162 <TIM_Base_SetConfig+0xb2>
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	4a28      	ldr	r2, [pc, #160]	; (800d1d8 <TIM_Base_SetConfig+0x128>)
 800d136:	4293      	cmp	r3, r2
 800d138:	d013      	beq.n	800d162 <TIM_Base_SetConfig+0xb2>
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	4a27      	ldr	r2, [pc, #156]	; (800d1dc <TIM_Base_SetConfig+0x12c>)
 800d13e:	4293      	cmp	r3, r2
 800d140:	d00f      	beq.n	800d162 <TIM_Base_SetConfig+0xb2>
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	4a26      	ldr	r2, [pc, #152]	; (800d1e0 <TIM_Base_SetConfig+0x130>)
 800d146:	4293      	cmp	r3, r2
 800d148:	d00b      	beq.n	800d162 <TIM_Base_SetConfig+0xb2>
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	4a25      	ldr	r2, [pc, #148]	; (800d1e4 <TIM_Base_SetConfig+0x134>)
 800d14e:	4293      	cmp	r3, r2
 800d150:	d007      	beq.n	800d162 <TIM_Base_SetConfig+0xb2>
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	4a24      	ldr	r2, [pc, #144]	; (800d1e8 <TIM_Base_SetConfig+0x138>)
 800d156:	4293      	cmp	r3, r2
 800d158:	d003      	beq.n	800d162 <TIM_Base_SetConfig+0xb2>
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	4a23      	ldr	r2, [pc, #140]	; (800d1ec <TIM_Base_SetConfig+0x13c>)
 800d15e:	4293      	cmp	r3, r2
 800d160:	d108      	bne.n	800d174 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d168:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	68db      	ldr	r3, [r3, #12]
 800d16e:	68fa      	ldr	r2, [r7, #12]
 800d170:	4313      	orrs	r3, r2
 800d172:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d17a:	683b      	ldr	r3, [r7, #0]
 800d17c:	695b      	ldr	r3, [r3, #20]
 800d17e:	4313      	orrs	r3, r2
 800d180:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	68fa      	ldr	r2, [r7, #12]
 800d186:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	689a      	ldr	r2, [r3, #8]
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d190:	683b      	ldr	r3, [r7, #0]
 800d192:	681a      	ldr	r2, [r3, #0]
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	4a0a      	ldr	r2, [pc, #40]	; (800d1c4 <TIM_Base_SetConfig+0x114>)
 800d19c:	4293      	cmp	r3, r2
 800d19e:	d003      	beq.n	800d1a8 <TIM_Base_SetConfig+0xf8>
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	4a0c      	ldr	r2, [pc, #48]	; (800d1d4 <TIM_Base_SetConfig+0x124>)
 800d1a4:	4293      	cmp	r3, r2
 800d1a6:	d103      	bne.n	800d1b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	691a      	ldr	r2, [r3, #16]
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2201      	movs	r2, #1
 800d1b4:	615a      	str	r2, [r3, #20]
}
 800d1b6:	bf00      	nop
 800d1b8:	3714      	adds	r7, #20
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c0:	4770      	bx	lr
 800d1c2:	bf00      	nop
 800d1c4:	40010000 	.word	0x40010000
 800d1c8:	40000400 	.word	0x40000400
 800d1cc:	40000800 	.word	0x40000800
 800d1d0:	40000c00 	.word	0x40000c00
 800d1d4:	40010400 	.word	0x40010400
 800d1d8:	40014000 	.word	0x40014000
 800d1dc:	40014400 	.word	0x40014400
 800d1e0:	40014800 	.word	0x40014800
 800d1e4:	40001800 	.word	0x40001800
 800d1e8:	40001c00 	.word	0x40001c00
 800d1ec:	40002000 	.word	0x40002000

0800d1f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d1f0:	b480      	push	{r7}
 800d1f2:	b087      	sub	sp, #28
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
 800d1f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	6a1b      	ldr	r3, [r3, #32]
 800d1fe:	f023 0201 	bic.w	r2, r3, #1
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	6a1b      	ldr	r3, [r3, #32]
 800d20a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	685b      	ldr	r3, [r3, #4]
 800d210:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	699b      	ldr	r3, [r3, #24]
 800d216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d21e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	f023 0303 	bic.w	r3, r3, #3
 800d226:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	68fa      	ldr	r2, [r7, #12]
 800d22e:	4313      	orrs	r3, r2
 800d230:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d232:	697b      	ldr	r3, [r7, #20]
 800d234:	f023 0302 	bic.w	r3, r3, #2
 800d238:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d23a:	683b      	ldr	r3, [r7, #0]
 800d23c:	689b      	ldr	r3, [r3, #8]
 800d23e:	697a      	ldr	r2, [r7, #20]
 800d240:	4313      	orrs	r3, r2
 800d242:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	4a20      	ldr	r2, [pc, #128]	; (800d2c8 <TIM_OC1_SetConfig+0xd8>)
 800d248:	4293      	cmp	r3, r2
 800d24a:	d003      	beq.n	800d254 <TIM_OC1_SetConfig+0x64>
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	4a1f      	ldr	r2, [pc, #124]	; (800d2cc <TIM_OC1_SetConfig+0xdc>)
 800d250:	4293      	cmp	r3, r2
 800d252:	d10c      	bne.n	800d26e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d254:	697b      	ldr	r3, [r7, #20]
 800d256:	f023 0308 	bic.w	r3, r3, #8
 800d25a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	68db      	ldr	r3, [r3, #12]
 800d260:	697a      	ldr	r2, [r7, #20]
 800d262:	4313      	orrs	r3, r2
 800d264:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d266:	697b      	ldr	r3, [r7, #20]
 800d268:	f023 0304 	bic.w	r3, r3, #4
 800d26c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	4a15      	ldr	r2, [pc, #84]	; (800d2c8 <TIM_OC1_SetConfig+0xd8>)
 800d272:	4293      	cmp	r3, r2
 800d274:	d003      	beq.n	800d27e <TIM_OC1_SetConfig+0x8e>
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	4a14      	ldr	r2, [pc, #80]	; (800d2cc <TIM_OC1_SetConfig+0xdc>)
 800d27a:	4293      	cmp	r3, r2
 800d27c:	d111      	bne.n	800d2a2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d27e:	693b      	ldr	r3, [r7, #16]
 800d280:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d284:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d286:	693b      	ldr	r3, [r7, #16]
 800d288:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d28c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	695b      	ldr	r3, [r3, #20]
 800d292:	693a      	ldr	r2, [r7, #16]
 800d294:	4313      	orrs	r3, r2
 800d296:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d298:	683b      	ldr	r3, [r7, #0]
 800d29a:	699b      	ldr	r3, [r3, #24]
 800d29c:	693a      	ldr	r2, [r7, #16]
 800d29e:	4313      	orrs	r3, r2
 800d2a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	693a      	ldr	r2, [r7, #16]
 800d2a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	68fa      	ldr	r2, [r7, #12]
 800d2ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	685a      	ldr	r2, [r3, #4]
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	697a      	ldr	r2, [r7, #20]
 800d2ba:	621a      	str	r2, [r3, #32]
}
 800d2bc:	bf00      	nop
 800d2be:	371c      	adds	r7, #28
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c6:	4770      	bx	lr
 800d2c8:	40010000 	.word	0x40010000
 800d2cc:	40010400 	.word	0x40010400

0800d2d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d2d0:	b480      	push	{r7}
 800d2d2:	b087      	sub	sp, #28
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
 800d2d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	6a1b      	ldr	r3, [r3, #32]
 800d2de:	f023 0210 	bic.w	r2, r3, #16
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	6a1b      	ldr	r3, [r3, #32]
 800d2ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	685b      	ldr	r3, [r3, #4]
 800d2f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	699b      	ldr	r3, [r3, #24]
 800d2f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d2fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d306:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	021b      	lsls	r3, r3, #8
 800d30e:	68fa      	ldr	r2, [r7, #12]
 800d310:	4313      	orrs	r3, r2
 800d312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d314:	697b      	ldr	r3, [r7, #20]
 800d316:	f023 0320 	bic.w	r3, r3, #32
 800d31a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d31c:	683b      	ldr	r3, [r7, #0]
 800d31e:	689b      	ldr	r3, [r3, #8]
 800d320:	011b      	lsls	r3, r3, #4
 800d322:	697a      	ldr	r2, [r7, #20]
 800d324:	4313      	orrs	r3, r2
 800d326:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	4a22      	ldr	r2, [pc, #136]	; (800d3b4 <TIM_OC2_SetConfig+0xe4>)
 800d32c:	4293      	cmp	r3, r2
 800d32e:	d003      	beq.n	800d338 <TIM_OC2_SetConfig+0x68>
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	4a21      	ldr	r2, [pc, #132]	; (800d3b8 <TIM_OC2_SetConfig+0xe8>)
 800d334:	4293      	cmp	r3, r2
 800d336:	d10d      	bne.n	800d354 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d338:	697b      	ldr	r3, [r7, #20]
 800d33a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d33e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	68db      	ldr	r3, [r3, #12]
 800d344:	011b      	lsls	r3, r3, #4
 800d346:	697a      	ldr	r2, [r7, #20]
 800d348:	4313      	orrs	r3, r2
 800d34a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d34c:	697b      	ldr	r3, [r7, #20]
 800d34e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d352:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	4a17      	ldr	r2, [pc, #92]	; (800d3b4 <TIM_OC2_SetConfig+0xe4>)
 800d358:	4293      	cmp	r3, r2
 800d35a:	d003      	beq.n	800d364 <TIM_OC2_SetConfig+0x94>
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	4a16      	ldr	r2, [pc, #88]	; (800d3b8 <TIM_OC2_SetConfig+0xe8>)
 800d360:	4293      	cmp	r3, r2
 800d362:	d113      	bne.n	800d38c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d364:	693b      	ldr	r3, [r7, #16]
 800d366:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d36a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d36c:	693b      	ldr	r3, [r7, #16]
 800d36e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d372:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d374:	683b      	ldr	r3, [r7, #0]
 800d376:	695b      	ldr	r3, [r3, #20]
 800d378:	009b      	lsls	r3, r3, #2
 800d37a:	693a      	ldr	r2, [r7, #16]
 800d37c:	4313      	orrs	r3, r2
 800d37e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	699b      	ldr	r3, [r3, #24]
 800d384:	009b      	lsls	r3, r3, #2
 800d386:	693a      	ldr	r2, [r7, #16]
 800d388:	4313      	orrs	r3, r2
 800d38a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	693a      	ldr	r2, [r7, #16]
 800d390:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	68fa      	ldr	r2, [r7, #12]
 800d396:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d398:	683b      	ldr	r3, [r7, #0]
 800d39a:	685a      	ldr	r2, [r3, #4]
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	697a      	ldr	r2, [r7, #20]
 800d3a4:	621a      	str	r2, [r3, #32]
}
 800d3a6:	bf00      	nop
 800d3a8:	371c      	adds	r7, #28
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b0:	4770      	bx	lr
 800d3b2:	bf00      	nop
 800d3b4:	40010000 	.word	0x40010000
 800d3b8:	40010400 	.word	0x40010400

0800d3bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d3bc:	b480      	push	{r7}
 800d3be:	b087      	sub	sp, #28
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
 800d3c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	6a1b      	ldr	r3, [r3, #32]
 800d3ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	6a1b      	ldr	r3, [r3, #32]
 800d3d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	685b      	ldr	r3, [r3, #4]
 800d3dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	69db      	ldr	r3, [r3, #28]
 800d3e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d3ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	f023 0303 	bic.w	r3, r3, #3
 800d3f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	68fa      	ldr	r2, [r7, #12]
 800d3fa:	4313      	orrs	r3, r2
 800d3fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d3fe:	697b      	ldr	r3, [r7, #20]
 800d400:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d404:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d406:	683b      	ldr	r3, [r7, #0]
 800d408:	689b      	ldr	r3, [r3, #8]
 800d40a:	021b      	lsls	r3, r3, #8
 800d40c:	697a      	ldr	r2, [r7, #20]
 800d40e:	4313      	orrs	r3, r2
 800d410:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	4a21      	ldr	r2, [pc, #132]	; (800d49c <TIM_OC3_SetConfig+0xe0>)
 800d416:	4293      	cmp	r3, r2
 800d418:	d003      	beq.n	800d422 <TIM_OC3_SetConfig+0x66>
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	4a20      	ldr	r2, [pc, #128]	; (800d4a0 <TIM_OC3_SetConfig+0xe4>)
 800d41e:	4293      	cmp	r3, r2
 800d420:	d10d      	bne.n	800d43e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d422:	697b      	ldr	r3, [r7, #20]
 800d424:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d428:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	68db      	ldr	r3, [r3, #12]
 800d42e:	021b      	lsls	r3, r3, #8
 800d430:	697a      	ldr	r2, [r7, #20]
 800d432:	4313      	orrs	r3, r2
 800d434:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d436:	697b      	ldr	r3, [r7, #20]
 800d438:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d43c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	4a16      	ldr	r2, [pc, #88]	; (800d49c <TIM_OC3_SetConfig+0xe0>)
 800d442:	4293      	cmp	r3, r2
 800d444:	d003      	beq.n	800d44e <TIM_OC3_SetConfig+0x92>
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	4a15      	ldr	r2, [pc, #84]	; (800d4a0 <TIM_OC3_SetConfig+0xe4>)
 800d44a:	4293      	cmp	r3, r2
 800d44c:	d113      	bne.n	800d476 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d44e:	693b      	ldr	r3, [r7, #16]
 800d450:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d454:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d456:	693b      	ldr	r3, [r7, #16]
 800d458:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d45c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d45e:	683b      	ldr	r3, [r7, #0]
 800d460:	695b      	ldr	r3, [r3, #20]
 800d462:	011b      	lsls	r3, r3, #4
 800d464:	693a      	ldr	r2, [r7, #16]
 800d466:	4313      	orrs	r3, r2
 800d468:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d46a:	683b      	ldr	r3, [r7, #0]
 800d46c:	699b      	ldr	r3, [r3, #24]
 800d46e:	011b      	lsls	r3, r3, #4
 800d470:	693a      	ldr	r2, [r7, #16]
 800d472:	4313      	orrs	r3, r2
 800d474:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	693a      	ldr	r2, [r7, #16]
 800d47a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	68fa      	ldr	r2, [r7, #12]
 800d480:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d482:	683b      	ldr	r3, [r7, #0]
 800d484:	685a      	ldr	r2, [r3, #4]
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	697a      	ldr	r2, [r7, #20]
 800d48e:	621a      	str	r2, [r3, #32]
}
 800d490:	bf00      	nop
 800d492:	371c      	adds	r7, #28
 800d494:	46bd      	mov	sp, r7
 800d496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49a:	4770      	bx	lr
 800d49c:	40010000 	.word	0x40010000
 800d4a0:	40010400 	.word	0x40010400

0800d4a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d4a4:	b480      	push	{r7}
 800d4a6:	b087      	sub	sp, #28
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
 800d4ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	6a1b      	ldr	r3, [r3, #32]
 800d4b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	6a1b      	ldr	r3, [r3, #32]
 800d4be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	685b      	ldr	r3, [r3, #4]
 800d4c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	69db      	ldr	r3, [r3, #28]
 800d4ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d4d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d4da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	021b      	lsls	r3, r3, #8
 800d4e2:	68fa      	ldr	r2, [r7, #12]
 800d4e4:	4313      	orrs	r3, r2
 800d4e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d4e8:	693b      	ldr	r3, [r7, #16]
 800d4ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d4ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d4f0:	683b      	ldr	r3, [r7, #0]
 800d4f2:	689b      	ldr	r3, [r3, #8]
 800d4f4:	031b      	lsls	r3, r3, #12
 800d4f6:	693a      	ldr	r2, [r7, #16]
 800d4f8:	4313      	orrs	r3, r2
 800d4fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	4a12      	ldr	r2, [pc, #72]	; (800d548 <TIM_OC4_SetConfig+0xa4>)
 800d500:	4293      	cmp	r3, r2
 800d502:	d003      	beq.n	800d50c <TIM_OC4_SetConfig+0x68>
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	4a11      	ldr	r2, [pc, #68]	; (800d54c <TIM_OC4_SetConfig+0xa8>)
 800d508:	4293      	cmp	r3, r2
 800d50a:	d109      	bne.n	800d520 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d50c:	697b      	ldr	r3, [r7, #20]
 800d50e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d512:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	695b      	ldr	r3, [r3, #20]
 800d518:	019b      	lsls	r3, r3, #6
 800d51a:	697a      	ldr	r2, [r7, #20]
 800d51c:	4313      	orrs	r3, r2
 800d51e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	697a      	ldr	r2, [r7, #20]
 800d524:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	68fa      	ldr	r2, [r7, #12]
 800d52a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	685a      	ldr	r2, [r3, #4]
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	693a      	ldr	r2, [r7, #16]
 800d538:	621a      	str	r2, [r3, #32]
}
 800d53a:	bf00      	nop
 800d53c:	371c      	adds	r7, #28
 800d53e:	46bd      	mov	sp, r7
 800d540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d544:	4770      	bx	lr
 800d546:	bf00      	nop
 800d548:	40010000 	.word	0x40010000
 800d54c:	40010400 	.word	0x40010400

0800d550 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d550:	b480      	push	{r7}
 800d552:	b087      	sub	sp, #28
 800d554:	af00      	add	r7, sp, #0
 800d556:	60f8      	str	r0, [r7, #12]
 800d558:	60b9      	str	r1, [r7, #8]
 800d55a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d55c:	68bb      	ldr	r3, [r7, #8]
 800d55e:	f003 031f 	and.w	r3, r3, #31
 800d562:	2201      	movs	r2, #1
 800d564:	fa02 f303 	lsl.w	r3, r2, r3
 800d568:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	6a1a      	ldr	r2, [r3, #32]
 800d56e:	697b      	ldr	r3, [r7, #20]
 800d570:	43db      	mvns	r3, r3
 800d572:	401a      	ands	r2, r3
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	6a1a      	ldr	r2, [r3, #32]
 800d57c:	68bb      	ldr	r3, [r7, #8]
 800d57e:	f003 031f 	and.w	r3, r3, #31
 800d582:	6879      	ldr	r1, [r7, #4]
 800d584:	fa01 f303 	lsl.w	r3, r1, r3
 800d588:	431a      	orrs	r2, r3
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	621a      	str	r2, [r3, #32]
}
 800d58e:	bf00      	nop
 800d590:	371c      	adds	r7, #28
 800d592:	46bd      	mov	sp, r7
 800d594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d598:	4770      	bx	lr
	...

0800d59c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d59c:	b480      	push	{r7}
 800d59e:	b085      	sub	sp, #20
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
 800d5a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d5ac:	2b01      	cmp	r3, #1
 800d5ae:	d101      	bne.n	800d5b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d5b0:	2302      	movs	r3, #2
 800d5b2:	e05a      	b.n	800d66a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	2201      	movs	r2, #1
 800d5b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	2202      	movs	r2, #2
 800d5c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	685b      	ldr	r3, [r3, #4]
 800d5ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	689b      	ldr	r3, [r3, #8]
 800d5d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d5da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d5dc:	683b      	ldr	r3, [r7, #0]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	68fa      	ldr	r2, [r7, #12]
 800d5e2:	4313      	orrs	r3, r2
 800d5e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	68fa      	ldr	r2, [r7, #12]
 800d5ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	4a21      	ldr	r2, [pc, #132]	; (800d678 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800d5f4:	4293      	cmp	r3, r2
 800d5f6:	d022      	beq.n	800d63e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d600:	d01d      	beq.n	800d63e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	4a1d      	ldr	r2, [pc, #116]	; (800d67c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800d608:	4293      	cmp	r3, r2
 800d60a:	d018      	beq.n	800d63e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	4a1b      	ldr	r2, [pc, #108]	; (800d680 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800d612:	4293      	cmp	r3, r2
 800d614:	d013      	beq.n	800d63e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	4a1a      	ldr	r2, [pc, #104]	; (800d684 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800d61c:	4293      	cmp	r3, r2
 800d61e:	d00e      	beq.n	800d63e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	4a18      	ldr	r2, [pc, #96]	; (800d688 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800d626:	4293      	cmp	r3, r2
 800d628:	d009      	beq.n	800d63e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	4a17      	ldr	r2, [pc, #92]	; (800d68c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d630:	4293      	cmp	r3, r2
 800d632:	d004      	beq.n	800d63e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	4a15      	ldr	r2, [pc, #84]	; (800d690 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800d63a:	4293      	cmp	r3, r2
 800d63c:	d10c      	bne.n	800d658 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d63e:	68bb      	ldr	r3, [r7, #8]
 800d640:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d644:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d646:	683b      	ldr	r3, [r7, #0]
 800d648:	685b      	ldr	r3, [r3, #4]
 800d64a:	68ba      	ldr	r2, [r7, #8]
 800d64c:	4313      	orrs	r3, r2
 800d64e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	68ba      	ldr	r2, [r7, #8]
 800d656:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	2201      	movs	r2, #1
 800d65c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	2200      	movs	r2, #0
 800d664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d668:	2300      	movs	r3, #0
}
 800d66a:	4618      	mov	r0, r3
 800d66c:	3714      	adds	r7, #20
 800d66e:	46bd      	mov	sp, r7
 800d670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d674:	4770      	bx	lr
 800d676:	bf00      	nop
 800d678:	40010000 	.word	0x40010000
 800d67c:	40000400 	.word	0x40000400
 800d680:	40000800 	.word	0x40000800
 800d684:	40000c00 	.word	0x40000c00
 800d688:	40010400 	.word	0x40010400
 800d68c:	40014000 	.word	0x40014000
 800d690:	40001800 	.word	0x40001800

0800d694 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d694:	b480      	push	{r7}
 800d696:	b085      	sub	sp, #20
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
 800d69c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d69e:	2300      	movs	r3, #0
 800d6a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d6a8:	2b01      	cmp	r3, #1
 800d6aa:	d101      	bne.n	800d6b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d6ac:	2302      	movs	r3, #2
 800d6ae:	e03d      	b.n	800d72c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	2201      	movs	r2, #1
 800d6b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d6be:	683b      	ldr	r3, [r7, #0]
 800d6c0:	68db      	ldr	r3, [r3, #12]
 800d6c2:	4313      	orrs	r3, r2
 800d6c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d6cc:	683b      	ldr	r3, [r7, #0]
 800d6ce:	689b      	ldr	r3, [r3, #8]
 800d6d0:	4313      	orrs	r3, r2
 800d6d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d6da:	683b      	ldr	r3, [r7, #0]
 800d6dc:	685b      	ldr	r3, [r3, #4]
 800d6de:	4313      	orrs	r3, r2
 800d6e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	4313      	orrs	r3, r2
 800d6ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d6f6:	683b      	ldr	r3, [r7, #0]
 800d6f8:	691b      	ldr	r3, [r3, #16]
 800d6fa:	4313      	orrs	r3, r2
 800d6fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d704:	683b      	ldr	r3, [r7, #0]
 800d706:	695b      	ldr	r3, [r3, #20]
 800d708:	4313      	orrs	r3, r2
 800d70a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d712:	683b      	ldr	r3, [r7, #0]
 800d714:	69db      	ldr	r3, [r3, #28]
 800d716:	4313      	orrs	r3, r2
 800d718:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	68fa      	ldr	r2, [r7, #12]
 800d720:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	2200      	movs	r2, #0
 800d726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d72a:	2300      	movs	r3, #0
}
 800d72c:	4618      	mov	r0, r3
 800d72e:	3714      	adds	r7, #20
 800d730:	46bd      	mov	sp, r7
 800d732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d736:	4770      	bx	lr

0800d738 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d738:	b480      	push	{r7}
 800d73a:	b083      	sub	sp, #12
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d740:	bf00      	nop
 800d742:	370c      	adds	r7, #12
 800d744:	46bd      	mov	sp, r7
 800d746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74a:	4770      	bx	lr

0800d74c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d74c:	b480      	push	{r7}
 800d74e:	b083      	sub	sp, #12
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d754:	bf00      	nop
 800d756:	370c      	adds	r7, #12
 800d758:	46bd      	mov	sp, r7
 800d75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75e:	4770      	bx	lr

0800d760 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d760:	b580      	push	{r7, lr}
 800d762:	b082      	sub	sp, #8
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d101      	bne.n	800d772 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d76e:	2301      	movs	r3, #1
 800d770:	e03f      	b.n	800d7f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d778:	b2db      	uxtb	r3, r3
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d106      	bne.n	800d78c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	2200      	movs	r2, #0
 800d782:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d786:	6878      	ldr	r0, [r7, #4]
 800d788:	f7f8 fae0 	bl	8005d4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	2224      	movs	r2, #36	; 0x24
 800d790:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	68da      	ldr	r2, [r3, #12]
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d7a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d7a4:	6878      	ldr	r0, [r7, #4]
 800d7a6:	f000 f829 	bl	800d7fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	691a      	ldr	r2, [r3, #16]
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d7b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	695a      	ldr	r2, [r3, #20]
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d7c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	68da      	ldr	r2, [r3, #12]
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d7d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	2200      	movs	r2, #0
 800d7de:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	2220      	movs	r2, #32
 800d7e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	2220      	movs	r2, #32
 800d7ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800d7f0:	2300      	movs	r3, #0
}
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	3708      	adds	r7, #8
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	bd80      	pop	{r7, pc}
	...

0800d7fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d800:	b085      	sub	sp, #20
 800d802:	af00      	add	r7, sp, #0
 800d804:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	691b      	ldr	r3, [r3, #16]
 800d80c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	68da      	ldr	r2, [r3, #12]
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	430a      	orrs	r2, r1
 800d81a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	689a      	ldr	r2, [r3, #8]
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	691b      	ldr	r3, [r3, #16]
 800d824:	431a      	orrs	r2, r3
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	695b      	ldr	r3, [r3, #20]
 800d82a:	431a      	orrs	r2, r3
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	69db      	ldr	r3, [r3, #28]
 800d830:	4313      	orrs	r3, r2
 800d832:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	68db      	ldr	r3, [r3, #12]
 800d83a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800d83e:	f023 030c 	bic.w	r3, r3, #12
 800d842:	687a      	ldr	r2, [r7, #4]
 800d844:	6812      	ldr	r2, [r2, #0]
 800d846:	68f9      	ldr	r1, [r7, #12]
 800d848:	430b      	orrs	r3, r1
 800d84a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	695b      	ldr	r3, [r3, #20]
 800d852:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	699a      	ldr	r2, [r3, #24]
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	430a      	orrs	r2, r1
 800d860:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	69db      	ldr	r3, [r3, #28]
 800d866:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d86a:	f040 818b 	bne.w	800db84 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	4ac1      	ldr	r2, [pc, #772]	; (800db78 <UART_SetConfig+0x37c>)
 800d874:	4293      	cmp	r3, r2
 800d876:	d005      	beq.n	800d884 <UART_SetConfig+0x88>
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	4abf      	ldr	r2, [pc, #764]	; (800db7c <UART_SetConfig+0x380>)
 800d87e:	4293      	cmp	r3, r2
 800d880:	f040 80bd 	bne.w	800d9fe <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d884:	f7fc fbcc 	bl	800a020 <HAL_RCC_GetPCLK2Freq>
 800d888:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d88a:	68bb      	ldr	r3, [r7, #8]
 800d88c:	461d      	mov	r5, r3
 800d88e:	f04f 0600 	mov.w	r6, #0
 800d892:	46a8      	mov	r8, r5
 800d894:	46b1      	mov	r9, r6
 800d896:	eb18 0308 	adds.w	r3, r8, r8
 800d89a:	eb49 0409 	adc.w	r4, r9, r9
 800d89e:	4698      	mov	r8, r3
 800d8a0:	46a1      	mov	r9, r4
 800d8a2:	eb18 0805 	adds.w	r8, r8, r5
 800d8a6:	eb49 0906 	adc.w	r9, r9, r6
 800d8aa:	f04f 0100 	mov.w	r1, #0
 800d8ae:	f04f 0200 	mov.w	r2, #0
 800d8b2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d8b6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d8ba:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d8be:	4688      	mov	r8, r1
 800d8c0:	4691      	mov	r9, r2
 800d8c2:	eb18 0005 	adds.w	r0, r8, r5
 800d8c6:	eb49 0106 	adc.w	r1, r9, r6
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	685b      	ldr	r3, [r3, #4]
 800d8ce:	461d      	mov	r5, r3
 800d8d0:	f04f 0600 	mov.w	r6, #0
 800d8d4:	196b      	adds	r3, r5, r5
 800d8d6:	eb46 0406 	adc.w	r4, r6, r6
 800d8da:	461a      	mov	r2, r3
 800d8dc:	4623      	mov	r3, r4
 800d8de:	f7f3 f9eb 	bl	8000cb8 <__aeabi_uldivmod>
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	460c      	mov	r4, r1
 800d8e6:	461a      	mov	r2, r3
 800d8e8:	4ba5      	ldr	r3, [pc, #660]	; (800db80 <UART_SetConfig+0x384>)
 800d8ea:	fba3 2302 	umull	r2, r3, r3, r2
 800d8ee:	095b      	lsrs	r3, r3, #5
 800d8f0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	461d      	mov	r5, r3
 800d8f8:	f04f 0600 	mov.w	r6, #0
 800d8fc:	46a9      	mov	r9, r5
 800d8fe:	46b2      	mov	sl, r6
 800d900:	eb19 0309 	adds.w	r3, r9, r9
 800d904:	eb4a 040a 	adc.w	r4, sl, sl
 800d908:	4699      	mov	r9, r3
 800d90a:	46a2      	mov	sl, r4
 800d90c:	eb19 0905 	adds.w	r9, r9, r5
 800d910:	eb4a 0a06 	adc.w	sl, sl, r6
 800d914:	f04f 0100 	mov.w	r1, #0
 800d918:	f04f 0200 	mov.w	r2, #0
 800d91c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d920:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d924:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d928:	4689      	mov	r9, r1
 800d92a:	4692      	mov	sl, r2
 800d92c:	eb19 0005 	adds.w	r0, r9, r5
 800d930:	eb4a 0106 	adc.w	r1, sl, r6
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	685b      	ldr	r3, [r3, #4]
 800d938:	461d      	mov	r5, r3
 800d93a:	f04f 0600 	mov.w	r6, #0
 800d93e:	196b      	adds	r3, r5, r5
 800d940:	eb46 0406 	adc.w	r4, r6, r6
 800d944:	461a      	mov	r2, r3
 800d946:	4623      	mov	r3, r4
 800d948:	f7f3 f9b6 	bl	8000cb8 <__aeabi_uldivmod>
 800d94c:	4603      	mov	r3, r0
 800d94e:	460c      	mov	r4, r1
 800d950:	461a      	mov	r2, r3
 800d952:	4b8b      	ldr	r3, [pc, #556]	; (800db80 <UART_SetConfig+0x384>)
 800d954:	fba3 1302 	umull	r1, r3, r3, r2
 800d958:	095b      	lsrs	r3, r3, #5
 800d95a:	2164      	movs	r1, #100	; 0x64
 800d95c:	fb01 f303 	mul.w	r3, r1, r3
 800d960:	1ad3      	subs	r3, r2, r3
 800d962:	00db      	lsls	r3, r3, #3
 800d964:	3332      	adds	r3, #50	; 0x32
 800d966:	4a86      	ldr	r2, [pc, #536]	; (800db80 <UART_SetConfig+0x384>)
 800d968:	fba2 2303 	umull	r2, r3, r2, r3
 800d96c:	095b      	lsrs	r3, r3, #5
 800d96e:	005b      	lsls	r3, r3, #1
 800d970:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d974:	4498      	add	r8, r3
 800d976:	68bb      	ldr	r3, [r7, #8]
 800d978:	461d      	mov	r5, r3
 800d97a:	f04f 0600 	mov.w	r6, #0
 800d97e:	46a9      	mov	r9, r5
 800d980:	46b2      	mov	sl, r6
 800d982:	eb19 0309 	adds.w	r3, r9, r9
 800d986:	eb4a 040a 	adc.w	r4, sl, sl
 800d98a:	4699      	mov	r9, r3
 800d98c:	46a2      	mov	sl, r4
 800d98e:	eb19 0905 	adds.w	r9, r9, r5
 800d992:	eb4a 0a06 	adc.w	sl, sl, r6
 800d996:	f04f 0100 	mov.w	r1, #0
 800d99a:	f04f 0200 	mov.w	r2, #0
 800d99e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d9a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d9a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d9aa:	4689      	mov	r9, r1
 800d9ac:	4692      	mov	sl, r2
 800d9ae:	eb19 0005 	adds.w	r0, r9, r5
 800d9b2:	eb4a 0106 	adc.w	r1, sl, r6
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	685b      	ldr	r3, [r3, #4]
 800d9ba:	461d      	mov	r5, r3
 800d9bc:	f04f 0600 	mov.w	r6, #0
 800d9c0:	196b      	adds	r3, r5, r5
 800d9c2:	eb46 0406 	adc.w	r4, r6, r6
 800d9c6:	461a      	mov	r2, r3
 800d9c8:	4623      	mov	r3, r4
 800d9ca:	f7f3 f975 	bl	8000cb8 <__aeabi_uldivmod>
 800d9ce:	4603      	mov	r3, r0
 800d9d0:	460c      	mov	r4, r1
 800d9d2:	461a      	mov	r2, r3
 800d9d4:	4b6a      	ldr	r3, [pc, #424]	; (800db80 <UART_SetConfig+0x384>)
 800d9d6:	fba3 1302 	umull	r1, r3, r3, r2
 800d9da:	095b      	lsrs	r3, r3, #5
 800d9dc:	2164      	movs	r1, #100	; 0x64
 800d9de:	fb01 f303 	mul.w	r3, r1, r3
 800d9e2:	1ad3      	subs	r3, r2, r3
 800d9e4:	00db      	lsls	r3, r3, #3
 800d9e6:	3332      	adds	r3, #50	; 0x32
 800d9e8:	4a65      	ldr	r2, [pc, #404]	; (800db80 <UART_SetConfig+0x384>)
 800d9ea:	fba2 2303 	umull	r2, r3, r2, r3
 800d9ee:	095b      	lsrs	r3, r3, #5
 800d9f0:	f003 0207 	and.w	r2, r3, #7
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	4442      	add	r2, r8
 800d9fa:	609a      	str	r2, [r3, #8]
 800d9fc:	e26f      	b.n	800dede <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d9fe:	f7fc fafb 	bl	8009ff8 <HAL_RCC_GetPCLK1Freq>
 800da02:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800da04:	68bb      	ldr	r3, [r7, #8]
 800da06:	461d      	mov	r5, r3
 800da08:	f04f 0600 	mov.w	r6, #0
 800da0c:	46a8      	mov	r8, r5
 800da0e:	46b1      	mov	r9, r6
 800da10:	eb18 0308 	adds.w	r3, r8, r8
 800da14:	eb49 0409 	adc.w	r4, r9, r9
 800da18:	4698      	mov	r8, r3
 800da1a:	46a1      	mov	r9, r4
 800da1c:	eb18 0805 	adds.w	r8, r8, r5
 800da20:	eb49 0906 	adc.w	r9, r9, r6
 800da24:	f04f 0100 	mov.w	r1, #0
 800da28:	f04f 0200 	mov.w	r2, #0
 800da2c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800da30:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800da34:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800da38:	4688      	mov	r8, r1
 800da3a:	4691      	mov	r9, r2
 800da3c:	eb18 0005 	adds.w	r0, r8, r5
 800da40:	eb49 0106 	adc.w	r1, r9, r6
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	685b      	ldr	r3, [r3, #4]
 800da48:	461d      	mov	r5, r3
 800da4a:	f04f 0600 	mov.w	r6, #0
 800da4e:	196b      	adds	r3, r5, r5
 800da50:	eb46 0406 	adc.w	r4, r6, r6
 800da54:	461a      	mov	r2, r3
 800da56:	4623      	mov	r3, r4
 800da58:	f7f3 f92e 	bl	8000cb8 <__aeabi_uldivmod>
 800da5c:	4603      	mov	r3, r0
 800da5e:	460c      	mov	r4, r1
 800da60:	461a      	mov	r2, r3
 800da62:	4b47      	ldr	r3, [pc, #284]	; (800db80 <UART_SetConfig+0x384>)
 800da64:	fba3 2302 	umull	r2, r3, r3, r2
 800da68:	095b      	lsrs	r3, r3, #5
 800da6a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800da6e:	68bb      	ldr	r3, [r7, #8]
 800da70:	461d      	mov	r5, r3
 800da72:	f04f 0600 	mov.w	r6, #0
 800da76:	46a9      	mov	r9, r5
 800da78:	46b2      	mov	sl, r6
 800da7a:	eb19 0309 	adds.w	r3, r9, r9
 800da7e:	eb4a 040a 	adc.w	r4, sl, sl
 800da82:	4699      	mov	r9, r3
 800da84:	46a2      	mov	sl, r4
 800da86:	eb19 0905 	adds.w	r9, r9, r5
 800da8a:	eb4a 0a06 	adc.w	sl, sl, r6
 800da8e:	f04f 0100 	mov.w	r1, #0
 800da92:	f04f 0200 	mov.w	r2, #0
 800da96:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800da9a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800da9e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800daa2:	4689      	mov	r9, r1
 800daa4:	4692      	mov	sl, r2
 800daa6:	eb19 0005 	adds.w	r0, r9, r5
 800daaa:	eb4a 0106 	adc.w	r1, sl, r6
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	685b      	ldr	r3, [r3, #4]
 800dab2:	461d      	mov	r5, r3
 800dab4:	f04f 0600 	mov.w	r6, #0
 800dab8:	196b      	adds	r3, r5, r5
 800daba:	eb46 0406 	adc.w	r4, r6, r6
 800dabe:	461a      	mov	r2, r3
 800dac0:	4623      	mov	r3, r4
 800dac2:	f7f3 f8f9 	bl	8000cb8 <__aeabi_uldivmod>
 800dac6:	4603      	mov	r3, r0
 800dac8:	460c      	mov	r4, r1
 800daca:	461a      	mov	r2, r3
 800dacc:	4b2c      	ldr	r3, [pc, #176]	; (800db80 <UART_SetConfig+0x384>)
 800dace:	fba3 1302 	umull	r1, r3, r3, r2
 800dad2:	095b      	lsrs	r3, r3, #5
 800dad4:	2164      	movs	r1, #100	; 0x64
 800dad6:	fb01 f303 	mul.w	r3, r1, r3
 800dada:	1ad3      	subs	r3, r2, r3
 800dadc:	00db      	lsls	r3, r3, #3
 800dade:	3332      	adds	r3, #50	; 0x32
 800dae0:	4a27      	ldr	r2, [pc, #156]	; (800db80 <UART_SetConfig+0x384>)
 800dae2:	fba2 2303 	umull	r2, r3, r2, r3
 800dae6:	095b      	lsrs	r3, r3, #5
 800dae8:	005b      	lsls	r3, r3, #1
 800daea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800daee:	4498      	add	r8, r3
 800daf0:	68bb      	ldr	r3, [r7, #8]
 800daf2:	461d      	mov	r5, r3
 800daf4:	f04f 0600 	mov.w	r6, #0
 800daf8:	46a9      	mov	r9, r5
 800dafa:	46b2      	mov	sl, r6
 800dafc:	eb19 0309 	adds.w	r3, r9, r9
 800db00:	eb4a 040a 	adc.w	r4, sl, sl
 800db04:	4699      	mov	r9, r3
 800db06:	46a2      	mov	sl, r4
 800db08:	eb19 0905 	adds.w	r9, r9, r5
 800db0c:	eb4a 0a06 	adc.w	sl, sl, r6
 800db10:	f04f 0100 	mov.w	r1, #0
 800db14:	f04f 0200 	mov.w	r2, #0
 800db18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800db1c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800db20:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800db24:	4689      	mov	r9, r1
 800db26:	4692      	mov	sl, r2
 800db28:	eb19 0005 	adds.w	r0, r9, r5
 800db2c:	eb4a 0106 	adc.w	r1, sl, r6
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	685b      	ldr	r3, [r3, #4]
 800db34:	461d      	mov	r5, r3
 800db36:	f04f 0600 	mov.w	r6, #0
 800db3a:	196b      	adds	r3, r5, r5
 800db3c:	eb46 0406 	adc.w	r4, r6, r6
 800db40:	461a      	mov	r2, r3
 800db42:	4623      	mov	r3, r4
 800db44:	f7f3 f8b8 	bl	8000cb8 <__aeabi_uldivmod>
 800db48:	4603      	mov	r3, r0
 800db4a:	460c      	mov	r4, r1
 800db4c:	461a      	mov	r2, r3
 800db4e:	4b0c      	ldr	r3, [pc, #48]	; (800db80 <UART_SetConfig+0x384>)
 800db50:	fba3 1302 	umull	r1, r3, r3, r2
 800db54:	095b      	lsrs	r3, r3, #5
 800db56:	2164      	movs	r1, #100	; 0x64
 800db58:	fb01 f303 	mul.w	r3, r1, r3
 800db5c:	1ad3      	subs	r3, r2, r3
 800db5e:	00db      	lsls	r3, r3, #3
 800db60:	3332      	adds	r3, #50	; 0x32
 800db62:	4a07      	ldr	r2, [pc, #28]	; (800db80 <UART_SetConfig+0x384>)
 800db64:	fba2 2303 	umull	r2, r3, r2, r3
 800db68:	095b      	lsrs	r3, r3, #5
 800db6a:	f003 0207 	and.w	r2, r3, #7
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	4442      	add	r2, r8
 800db74:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800db76:	e1b2      	b.n	800dede <UART_SetConfig+0x6e2>
 800db78:	40011000 	.word	0x40011000
 800db7c:	40011400 	.word	0x40011400
 800db80:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	4ad7      	ldr	r2, [pc, #860]	; (800dee8 <UART_SetConfig+0x6ec>)
 800db8a:	4293      	cmp	r3, r2
 800db8c:	d005      	beq.n	800db9a <UART_SetConfig+0x39e>
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	4ad6      	ldr	r2, [pc, #856]	; (800deec <UART_SetConfig+0x6f0>)
 800db94:	4293      	cmp	r3, r2
 800db96:	f040 80d1 	bne.w	800dd3c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800db9a:	f7fc fa41 	bl	800a020 <HAL_RCC_GetPCLK2Freq>
 800db9e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800dba0:	68bb      	ldr	r3, [r7, #8]
 800dba2:	469a      	mov	sl, r3
 800dba4:	f04f 0b00 	mov.w	fp, #0
 800dba8:	46d0      	mov	r8, sl
 800dbaa:	46d9      	mov	r9, fp
 800dbac:	eb18 0308 	adds.w	r3, r8, r8
 800dbb0:	eb49 0409 	adc.w	r4, r9, r9
 800dbb4:	4698      	mov	r8, r3
 800dbb6:	46a1      	mov	r9, r4
 800dbb8:	eb18 080a 	adds.w	r8, r8, sl
 800dbbc:	eb49 090b 	adc.w	r9, r9, fp
 800dbc0:	f04f 0100 	mov.w	r1, #0
 800dbc4:	f04f 0200 	mov.w	r2, #0
 800dbc8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800dbcc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800dbd0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800dbd4:	4688      	mov	r8, r1
 800dbd6:	4691      	mov	r9, r2
 800dbd8:	eb1a 0508 	adds.w	r5, sl, r8
 800dbdc:	eb4b 0609 	adc.w	r6, fp, r9
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	685b      	ldr	r3, [r3, #4]
 800dbe4:	4619      	mov	r1, r3
 800dbe6:	f04f 0200 	mov.w	r2, #0
 800dbea:	f04f 0300 	mov.w	r3, #0
 800dbee:	f04f 0400 	mov.w	r4, #0
 800dbf2:	0094      	lsls	r4, r2, #2
 800dbf4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800dbf8:	008b      	lsls	r3, r1, #2
 800dbfa:	461a      	mov	r2, r3
 800dbfc:	4623      	mov	r3, r4
 800dbfe:	4628      	mov	r0, r5
 800dc00:	4631      	mov	r1, r6
 800dc02:	f7f3 f859 	bl	8000cb8 <__aeabi_uldivmod>
 800dc06:	4603      	mov	r3, r0
 800dc08:	460c      	mov	r4, r1
 800dc0a:	461a      	mov	r2, r3
 800dc0c:	4bb8      	ldr	r3, [pc, #736]	; (800def0 <UART_SetConfig+0x6f4>)
 800dc0e:	fba3 2302 	umull	r2, r3, r3, r2
 800dc12:	095b      	lsrs	r3, r3, #5
 800dc14:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800dc18:	68bb      	ldr	r3, [r7, #8]
 800dc1a:	469b      	mov	fp, r3
 800dc1c:	f04f 0c00 	mov.w	ip, #0
 800dc20:	46d9      	mov	r9, fp
 800dc22:	46e2      	mov	sl, ip
 800dc24:	eb19 0309 	adds.w	r3, r9, r9
 800dc28:	eb4a 040a 	adc.w	r4, sl, sl
 800dc2c:	4699      	mov	r9, r3
 800dc2e:	46a2      	mov	sl, r4
 800dc30:	eb19 090b 	adds.w	r9, r9, fp
 800dc34:	eb4a 0a0c 	adc.w	sl, sl, ip
 800dc38:	f04f 0100 	mov.w	r1, #0
 800dc3c:	f04f 0200 	mov.w	r2, #0
 800dc40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800dc44:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800dc48:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800dc4c:	4689      	mov	r9, r1
 800dc4e:	4692      	mov	sl, r2
 800dc50:	eb1b 0509 	adds.w	r5, fp, r9
 800dc54:	eb4c 060a 	adc.w	r6, ip, sl
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	685b      	ldr	r3, [r3, #4]
 800dc5c:	4619      	mov	r1, r3
 800dc5e:	f04f 0200 	mov.w	r2, #0
 800dc62:	f04f 0300 	mov.w	r3, #0
 800dc66:	f04f 0400 	mov.w	r4, #0
 800dc6a:	0094      	lsls	r4, r2, #2
 800dc6c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800dc70:	008b      	lsls	r3, r1, #2
 800dc72:	461a      	mov	r2, r3
 800dc74:	4623      	mov	r3, r4
 800dc76:	4628      	mov	r0, r5
 800dc78:	4631      	mov	r1, r6
 800dc7a:	f7f3 f81d 	bl	8000cb8 <__aeabi_uldivmod>
 800dc7e:	4603      	mov	r3, r0
 800dc80:	460c      	mov	r4, r1
 800dc82:	461a      	mov	r2, r3
 800dc84:	4b9a      	ldr	r3, [pc, #616]	; (800def0 <UART_SetConfig+0x6f4>)
 800dc86:	fba3 1302 	umull	r1, r3, r3, r2
 800dc8a:	095b      	lsrs	r3, r3, #5
 800dc8c:	2164      	movs	r1, #100	; 0x64
 800dc8e:	fb01 f303 	mul.w	r3, r1, r3
 800dc92:	1ad3      	subs	r3, r2, r3
 800dc94:	011b      	lsls	r3, r3, #4
 800dc96:	3332      	adds	r3, #50	; 0x32
 800dc98:	4a95      	ldr	r2, [pc, #596]	; (800def0 <UART_SetConfig+0x6f4>)
 800dc9a:	fba2 2303 	umull	r2, r3, r2, r3
 800dc9e:	095b      	lsrs	r3, r3, #5
 800dca0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dca4:	4498      	add	r8, r3
 800dca6:	68bb      	ldr	r3, [r7, #8]
 800dca8:	469b      	mov	fp, r3
 800dcaa:	f04f 0c00 	mov.w	ip, #0
 800dcae:	46d9      	mov	r9, fp
 800dcb0:	46e2      	mov	sl, ip
 800dcb2:	eb19 0309 	adds.w	r3, r9, r9
 800dcb6:	eb4a 040a 	adc.w	r4, sl, sl
 800dcba:	4699      	mov	r9, r3
 800dcbc:	46a2      	mov	sl, r4
 800dcbe:	eb19 090b 	adds.w	r9, r9, fp
 800dcc2:	eb4a 0a0c 	adc.w	sl, sl, ip
 800dcc6:	f04f 0100 	mov.w	r1, #0
 800dcca:	f04f 0200 	mov.w	r2, #0
 800dcce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800dcd2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800dcd6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800dcda:	4689      	mov	r9, r1
 800dcdc:	4692      	mov	sl, r2
 800dcde:	eb1b 0509 	adds.w	r5, fp, r9
 800dce2:	eb4c 060a 	adc.w	r6, ip, sl
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	685b      	ldr	r3, [r3, #4]
 800dcea:	4619      	mov	r1, r3
 800dcec:	f04f 0200 	mov.w	r2, #0
 800dcf0:	f04f 0300 	mov.w	r3, #0
 800dcf4:	f04f 0400 	mov.w	r4, #0
 800dcf8:	0094      	lsls	r4, r2, #2
 800dcfa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800dcfe:	008b      	lsls	r3, r1, #2
 800dd00:	461a      	mov	r2, r3
 800dd02:	4623      	mov	r3, r4
 800dd04:	4628      	mov	r0, r5
 800dd06:	4631      	mov	r1, r6
 800dd08:	f7f2 ffd6 	bl	8000cb8 <__aeabi_uldivmod>
 800dd0c:	4603      	mov	r3, r0
 800dd0e:	460c      	mov	r4, r1
 800dd10:	461a      	mov	r2, r3
 800dd12:	4b77      	ldr	r3, [pc, #476]	; (800def0 <UART_SetConfig+0x6f4>)
 800dd14:	fba3 1302 	umull	r1, r3, r3, r2
 800dd18:	095b      	lsrs	r3, r3, #5
 800dd1a:	2164      	movs	r1, #100	; 0x64
 800dd1c:	fb01 f303 	mul.w	r3, r1, r3
 800dd20:	1ad3      	subs	r3, r2, r3
 800dd22:	011b      	lsls	r3, r3, #4
 800dd24:	3332      	adds	r3, #50	; 0x32
 800dd26:	4a72      	ldr	r2, [pc, #456]	; (800def0 <UART_SetConfig+0x6f4>)
 800dd28:	fba2 2303 	umull	r2, r3, r2, r3
 800dd2c:	095b      	lsrs	r3, r3, #5
 800dd2e:	f003 020f 	and.w	r2, r3, #15
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	4442      	add	r2, r8
 800dd38:	609a      	str	r2, [r3, #8]
 800dd3a:	e0d0      	b.n	800dede <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800dd3c:	f7fc f95c 	bl	8009ff8 <HAL_RCC_GetPCLK1Freq>
 800dd40:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800dd42:	68bb      	ldr	r3, [r7, #8]
 800dd44:	469a      	mov	sl, r3
 800dd46:	f04f 0b00 	mov.w	fp, #0
 800dd4a:	46d0      	mov	r8, sl
 800dd4c:	46d9      	mov	r9, fp
 800dd4e:	eb18 0308 	adds.w	r3, r8, r8
 800dd52:	eb49 0409 	adc.w	r4, r9, r9
 800dd56:	4698      	mov	r8, r3
 800dd58:	46a1      	mov	r9, r4
 800dd5a:	eb18 080a 	adds.w	r8, r8, sl
 800dd5e:	eb49 090b 	adc.w	r9, r9, fp
 800dd62:	f04f 0100 	mov.w	r1, #0
 800dd66:	f04f 0200 	mov.w	r2, #0
 800dd6a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800dd6e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800dd72:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800dd76:	4688      	mov	r8, r1
 800dd78:	4691      	mov	r9, r2
 800dd7a:	eb1a 0508 	adds.w	r5, sl, r8
 800dd7e:	eb4b 0609 	adc.w	r6, fp, r9
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	685b      	ldr	r3, [r3, #4]
 800dd86:	4619      	mov	r1, r3
 800dd88:	f04f 0200 	mov.w	r2, #0
 800dd8c:	f04f 0300 	mov.w	r3, #0
 800dd90:	f04f 0400 	mov.w	r4, #0
 800dd94:	0094      	lsls	r4, r2, #2
 800dd96:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800dd9a:	008b      	lsls	r3, r1, #2
 800dd9c:	461a      	mov	r2, r3
 800dd9e:	4623      	mov	r3, r4
 800dda0:	4628      	mov	r0, r5
 800dda2:	4631      	mov	r1, r6
 800dda4:	f7f2 ff88 	bl	8000cb8 <__aeabi_uldivmod>
 800dda8:	4603      	mov	r3, r0
 800ddaa:	460c      	mov	r4, r1
 800ddac:	461a      	mov	r2, r3
 800ddae:	4b50      	ldr	r3, [pc, #320]	; (800def0 <UART_SetConfig+0x6f4>)
 800ddb0:	fba3 2302 	umull	r2, r3, r3, r2
 800ddb4:	095b      	lsrs	r3, r3, #5
 800ddb6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ddba:	68bb      	ldr	r3, [r7, #8]
 800ddbc:	469b      	mov	fp, r3
 800ddbe:	f04f 0c00 	mov.w	ip, #0
 800ddc2:	46d9      	mov	r9, fp
 800ddc4:	46e2      	mov	sl, ip
 800ddc6:	eb19 0309 	adds.w	r3, r9, r9
 800ddca:	eb4a 040a 	adc.w	r4, sl, sl
 800ddce:	4699      	mov	r9, r3
 800ddd0:	46a2      	mov	sl, r4
 800ddd2:	eb19 090b 	adds.w	r9, r9, fp
 800ddd6:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ddda:	f04f 0100 	mov.w	r1, #0
 800ddde:	f04f 0200 	mov.w	r2, #0
 800dde2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800dde6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ddea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ddee:	4689      	mov	r9, r1
 800ddf0:	4692      	mov	sl, r2
 800ddf2:	eb1b 0509 	adds.w	r5, fp, r9
 800ddf6:	eb4c 060a 	adc.w	r6, ip, sl
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	685b      	ldr	r3, [r3, #4]
 800ddfe:	4619      	mov	r1, r3
 800de00:	f04f 0200 	mov.w	r2, #0
 800de04:	f04f 0300 	mov.w	r3, #0
 800de08:	f04f 0400 	mov.w	r4, #0
 800de0c:	0094      	lsls	r4, r2, #2
 800de0e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800de12:	008b      	lsls	r3, r1, #2
 800de14:	461a      	mov	r2, r3
 800de16:	4623      	mov	r3, r4
 800de18:	4628      	mov	r0, r5
 800de1a:	4631      	mov	r1, r6
 800de1c:	f7f2 ff4c 	bl	8000cb8 <__aeabi_uldivmod>
 800de20:	4603      	mov	r3, r0
 800de22:	460c      	mov	r4, r1
 800de24:	461a      	mov	r2, r3
 800de26:	4b32      	ldr	r3, [pc, #200]	; (800def0 <UART_SetConfig+0x6f4>)
 800de28:	fba3 1302 	umull	r1, r3, r3, r2
 800de2c:	095b      	lsrs	r3, r3, #5
 800de2e:	2164      	movs	r1, #100	; 0x64
 800de30:	fb01 f303 	mul.w	r3, r1, r3
 800de34:	1ad3      	subs	r3, r2, r3
 800de36:	011b      	lsls	r3, r3, #4
 800de38:	3332      	adds	r3, #50	; 0x32
 800de3a:	4a2d      	ldr	r2, [pc, #180]	; (800def0 <UART_SetConfig+0x6f4>)
 800de3c:	fba2 2303 	umull	r2, r3, r2, r3
 800de40:	095b      	lsrs	r3, r3, #5
 800de42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800de46:	4498      	add	r8, r3
 800de48:	68bb      	ldr	r3, [r7, #8]
 800de4a:	469b      	mov	fp, r3
 800de4c:	f04f 0c00 	mov.w	ip, #0
 800de50:	46d9      	mov	r9, fp
 800de52:	46e2      	mov	sl, ip
 800de54:	eb19 0309 	adds.w	r3, r9, r9
 800de58:	eb4a 040a 	adc.w	r4, sl, sl
 800de5c:	4699      	mov	r9, r3
 800de5e:	46a2      	mov	sl, r4
 800de60:	eb19 090b 	adds.w	r9, r9, fp
 800de64:	eb4a 0a0c 	adc.w	sl, sl, ip
 800de68:	f04f 0100 	mov.w	r1, #0
 800de6c:	f04f 0200 	mov.w	r2, #0
 800de70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800de74:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800de78:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800de7c:	4689      	mov	r9, r1
 800de7e:	4692      	mov	sl, r2
 800de80:	eb1b 0509 	adds.w	r5, fp, r9
 800de84:	eb4c 060a 	adc.w	r6, ip, sl
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	685b      	ldr	r3, [r3, #4]
 800de8c:	4619      	mov	r1, r3
 800de8e:	f04f 0200 	mov.w	r2, #0
 800de92:	f04f 0300 	mov.w	r3, #0
 800de96:	f04f 0400 	mov.w	r4, #0
 800de9a:	0094      	lsls	r4, r2, #2
 800de9c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800dea0:	008b      	lsls	r3, r1, #2
 800dea2:	461a      	mov	r2, r3
 800dea4:	4623      	mov	r3, r4
 800dea6:	4628      	mov	r0, r5
 800dea8:	4631      	mov	r1, r6
 800deaa:	f7f2 ff05 	bl	8000cb8 <__aeabi_uldivmod>
 800deae:	4603      	mov	r3, r0
 800deb0:	460c      	mov	r4, r1
 800deb2:	461a      	mov	r2, r3
 800deb4:	4b0e      	ldr	r3, [pc, #56]	; (800def0 <UART_SetConfig+0x6f4>)
 800deb6:	fba3 1302 	umull	r1, r3, r3, r2
 800deba:	095b      	lsrs	r3, r3, #5
 800debc:	2164      	movs	r1, #100	; 0x64
 800debe:	fb01 f303 	mul.w	r3, r1, r3
 800dec2:	1ad3      	subs	r3, r2, r3
 800dec4:	011b      	lsls	r3, r3, #4
 800dec6:	3332      	adds	r3, #50	; 0x32
 800dec8:	4a09      	ldr	r2, [pc, #36]	; (800def0 <UART_SetConfig+0x6f4>)
 800deca:	fba2 2303 	umull	r2, r3, r2, r3
 800dece:	095b      	lsrs	r3, r3, #5
 800ded0:	f003 020f 	and.w	r2, r3, #15
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	4442      	add	r2, r8
 800deda:	609a      	str	r2, [r3, #8]
}
 800dedc:	e7ff      	b.n	800dede <UART_SetConfig+0x6e2>
 800dede:	bf00      	nop
 800dee0:	3714      	adds	r7, #20
 800dee2:	46bd      	mov	sp, r7
 800dee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dee8:	40011000 	.word	0x40011000
 800deec:	40011400 	.word	0x40011400
 800def0:	51eb851f 	.word	0x51eb851f

0800def4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800def4:	b084      	sub	sp, #16
 800def6:	b480      	push	{r7}
 800def8:	b085      	sub	sp, #20
 800defa:	af00      	add	r7, sp, #0
 800defc:	6078      	str	r0, [r7, #4]
 800defe:	f107 001c 	add.w	r0, r7, #28
 800df02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800df06:	2300      	movs	r3, #0
 800df08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800df0a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800df0c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800df0e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800df10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800df12:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800df14:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800df16:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800df18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800df1a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800df1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800df1e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800df20:	68fa      	ldr	r2, [r7, #12]
 800df22:	4313      	orrs	r3, r2
 800df24:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	685b      	ldr	r3, [r3, #4]
 800df2a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800df2e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800df32:	68fa      	ldr	r2, [r7, #12]
 800df34:	431a      	orrs	r2, r3
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800df3a:	2300      	movs	r3, #0
}
 800df3c:	4618      	mov	r0, r3
 800df3e:	3714      	adds	r7, #20
 800df40:	46bd      	mov	sp, r7
 800df42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df46:	b004      	add	sp, #16
 800df48:	4770      	bx	lr

0800df4a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800df4a:	b480      	push	{r7}
 800df4c:	b083      	sub	sp, #12
 800df4e:	af00      	add	r7, sp, #0
 800df50:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800df58:	4618      	mov	r0, r3
 800df5a:	370c      	adds	r7, #12
 800df5c:	46bd      	mov	sp, r7
 800df5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df62:	4770      	bx	lr

0800df64 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800df64:	b480      	push	{r7}
 800df66:	b083      	sub	sp, #12
 800df68:	af00      	add	r7, sp, #0
 800df6a:	6078      	str	r0, [r7, #4]
 800df6c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800df6e:	683b      	ldr	r3, [r7, #0]
 800df70:	681a      	ldr	r2, [r3, #0]
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800df78:	2300      	movs	r3, #0
}
 800df7a:	4618      	mov	r0, r3
 800df7c:	370c      	adds	r7, #12
 800df7e:	46bd      	mov	sp, r7
 800df80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df84:	4770      	bx	lr

0800df86 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800df86:	b580      	push	{r7, lr}
 800df88:	b082      	sub	sp, #8
 800df8a:	af00      	add	r7, sp, #0
 800df8c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	2203      	movs	r2, #3
 800df92:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800df94:	2002      	movs	r0, #2
 800df96:	f7f9 fbc5 	bl	8007724 <HAL_Delay>
  
  return HAL_OK;
 800df9a:	2300      	movs	r3, #0
}
 800df9c:	4618      	mov	r0, r3
 800df9e:	3708      	adds	r7, #8
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	bd80      	pop	{r7, pc}

0800dfa4 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800dfa4:	b480      	push	{r7}
 800dfa6:	b083      	sub	sp, #12
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	f003 0303 	and.w	r3, r3, #3
}
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	370c      	adds	r7, #12
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbe:	4770      	bx	lr

0800dfc0 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800dfc0:	b480      	push	{r7}
 800dfc2:	b085      	sub	sp, #20
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]
 800dfc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800dfca:	2300      	movs	r3, #0
 800dfcc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800dfce:	683b      	ldr	r3, [r7, #0]
 800dfd0:	681a      	ldr	r2, [r3, #0]
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800dfd6:	683b      	ldr	r3, [r7, #0]
 800dfd8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800dfda:	683b      	ldr	r3, [r7, #0]
 800dfdc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800dfde:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800dfe0:	683b      	ldr	r3, [r7, #0]
 800dfe2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800dfe4:	431a      	orrs	r2, r3
                       Command->CPSM);
 800dfe6:	683b      	ldr	r3, [r7, #0]
 800dfe8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800dfea:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800dfec:	68fa      	ldr	r2, [r7, #12]
 800dfee:	4313      	orrs	r3, r2
 800dff0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	68db      	ldr	r3, [r3, #12]
 800dff6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800dffa:	f023 030f 	bic.w	r3, r3, #15
 800dffe:	68fa      	ldr	r2, [r7, #12]
 800e000:	431a      	orrs	r2, r3
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800e006:	2300      	movs	r3, #0
}
 800e008:	4618      	mov	r0, r3
 800e00a:	3714      	adds	r7, #20
 800e00c:	46bd      	mov	sp, r7
 800e00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e012:	4770      	bx	lr

0800e014 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800e014:	b480      	push	{r7}
 800e016:	b083      	sub	sp, #12
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	691b      	ldr	r3, [r3, #16]
 800e020:	b2db      	uxtb	r3, r3
}
 800e022:	4618      	mov	r0, r3
 800e024:	370c      	adds	r7, #12
 800e026:	46bd      	mov	sp, r7
 800e028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02c:	4770      	bx	lr

0800e02e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800e02e:	b480      	push	{r7}
 800e030:	b085      	sub	sp, #20
 800e032:	af00      	add	r7, sp, #0
 800e034:	6078      	str	r0, [r7, #4]
 800e036:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	3314      	adds	r3, #20
 800e03c:	461a      	mov	r2, r3
 800e03e:	683b      	ldr	r3, [r7, #0]
 800e040:	4413      	add	r3, r2
 800e042:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	681b      	ldr	r3, [r3, #0]
}  
 800e048:	4618      	mov	r0, r3
 800e04a:	3714      	adds	r7, #20
 800e04c:	46bd      	mov	sp, r7
 800e04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e052:	4770      	bx	lr

0800e054 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800e054:	b480      	push	{r7}
 800e056:	b085      	sub	sp, #20
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
 800e05c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e05e:	2300      	movs	r3, #0
 800e060:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	681a      	ldr	r2, [r3, #0]
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800e06a:	683b      	ldr	r3, [r7, #0]
 800e06c:	685a      	ldr	r2, [r3, #4]
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e072:	683b      	ldr	r3, [r7, #0]
 800e074:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800e076:	683b      	ldr	r3, [r7, #0]
 800e078:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e07a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800e07c:	683b      	ldr	r3, [r7, #0]
 800e07e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800e080:	431a      	orrs	r2, r3
                       Data->DPSM);
 800e082:	683b      	ldr	r3, [r7, #0]
 800e084:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800e086:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e088:	68fa      	ldr	r2, [r7, #12]
 800e08a:	4313      	orrs	r3, r2
 800e08c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e092:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	431a      	orrs	r2, r3
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800e09e:	2300      	movs	r3, #0

}
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	3714      	adds	r7, #20
 800e0a4:	46bd      	mov	sp, r7
 800e0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0aa:	4770      	bx	lr

0800e0ac <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b088      	sub	sp, #32
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
 800e0b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800e0b6:	683b      	ldr	r3, [r7, #0]
 800e0b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800e0ba:	2310      	movs	r3, #16
 800e0bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e0be:	2340      	movs	r3, #64	; 0x40
 800e0c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e0c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e0ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e0cc:	f107 0308 	add.w	r3, r7, #8
 800e0d0:	4619      	mov	r1, r3
 800e0d2:	6878      	ldr	r0, [r7, #4]
 800e0d4:	f7ff ff74 	bl	800dfc0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800e0d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800e0dc:	2110      	movs	r1, #16
 800e0de:	6878      	ldr	r0, [r7, #4]
 800e0e0:	f000 fa40 	bl	800e564 <SDMMC_GetCmdResp1>
 800e0e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e0e6:	69fb      	ldr	r3, [r7, #28]
}
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	3720      	adds	r7, #32
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	bd80      	pop	{r7, pc}

0800e0f0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b088      	sub	sp, #32
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]
 800e0f8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e0fa:	683b      	ldr	r3, [r7, #0]
 800e0fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800e0fe:	2311      	movs	r3, #17
 800e100:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e102:	2340      	movs	r3, #64	; 0x40
 800e104:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e106:	2300      	movs	r3, #0
 800e108:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e10a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e10e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e110:	f107 0308 	add.w	r3, r7, #8
 800e114:	4619      	mov	r1, r3
 800e116:	6878      	ldr	r0, [r7, #4]
 800e118:	f7ff ff52 	bl	800dfc0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800e11c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e120:	2111      	movs	r1, #17
 800e122:	6878      	ldr	r0, [r7, #4]
 800e124:	f000 fa1e 	bl	800e564 <SDMMC_GetCmdResp1>
 800e128:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e12a:	69fb      	ldr	r3, [r7, #28]
}
 800e12c:	4618      	mov	r0, r3
 800e12e:	3720      	adds	r7, #32
 800e130:	46bd      	mov	sp, r7
 800e132:	bd80      	pop	{r7, pc}

0800e134 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800e134:	b580      	push	{r7, lr}
 800e136:	b088      	sub	sp, #32
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
 800e13c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e13e:	683b      	ldr	r3, [r7, #0]
 800e140:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800e142:	2312      	movs	r3, #18
 800e144:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e146:	2340      	movs	r3, #64	; 0x40
 800e148:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e14a:	2300      	movs	r3, #0
 800e14c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e14e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e152:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e154:	f107 0308 	add.w	r3, r7, #8
 800e158:	4619      	mov	r1, r3
 800e15a:	6878      	ldr	r0, [r7, #4]
 800e15c:	f7ff ff30 	bl	800dfc0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800e160:	f241 3288 	movw	r2, #5000	; 0x1388
 800e164:	2112      	movs	r1, #18
 800e166:	6878      	ldr	r0, [r7, #4]
 800e168:	f000 f9fc 	bl	800e564 <SDMMC_GetCmdResp1>
 800e16c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e16e:	69fb      	ldr	r3, [r7, #28]
}
 800e170:	4618      	mov	r0, r3
 800e172:	3720      	adds	r7, #32
 800e174:	46bd      	mov	sp, r7
 800e176:	bd80      	pop	{r7, pc}

0800e178 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b088      	sub	sp, #32
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
 800e180:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e182:	683b      	ldr	r3, [r7, #0]
 800e184:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800e186:	2318      	movs	r3, #24
 800e188:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e18a:	2340      	movs	r3, #64	; 0x40
 800e18c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e18e:	2300      	movs	r3, #0
 800e190:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e192:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e196:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e198:	f107 0308 	add.w	r3, r7, #8
 800e19c:	4619      	mov	r1, r3
 800e19e:	6878      	ldr	r0, [r7, #4]
 800e1a0:	f7ff ff0e 	bl	800dfc0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800e1a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800e1a8:	2118      	movs	r1, #24
 800e1aa:	6878      	ldr	r0, [r7, #4]
 800e1ac:	f000 f9da 	bl	800e564 <SDMMC_GetCmdResp1>
 800e1b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e1b2:	69fb      	ldr	r3, [r7, #28]
}
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	3720      	adds	r7, #32
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	bd80      	pop	{r7, pc}

0800e1bc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b088      	sub	sp, #32
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
 800e1c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e1c6:	683b      	ldr	r3, [r7, #0]
 800e1c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800e1ca:	2319      	movs	r3, #25
 800e1cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e1ce:	2340      	movs	r3, #64	; 0x40
 800e1d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e1d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e1da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e1dc:	f107 0308 	add.w	r3, r7, #8
 800e1e0:	4619      	mov	r1, r3
 800e1e2:	6878      	ldr	r0, [r7, #4]
 800e1e4:	f7ff feec 	bl	800dfc0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800e1e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800e1ec:	2119      	movs	r1, #25
 800e1ee:	6878      	ldr	r0, [r7, #4]
 800e1f0:	f000 f9b8 	bl	800e564 <SDMMC_GetCmdResp1>
 800e1f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e1f6:	69fb      	ldr	r3, [r7, #28]
}
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	3720      	adds	r7, #32
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	bd80      	pop	{r7, pc}

0800e200 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b088      	sub	sp, #32
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800e208:	2300      	movs	r3, #0
 800e20a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800e20c:	230c      	movs	r3, #12
 800e20e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e210:	2340      	movs	r3, #64	; 0x40
 800e212:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e214:	2300      	movs	r3, #0
 800e216:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e218:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e21c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e21e:	f107 0308 	add.w	r3, r7, #8
 800e222:	4619      	mov	r1, r3
 800e224:	6878      	ldr	r0, [r7, #4]
 800e226:	f7ff fecb 	bl	800dfc0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800e22a:	4a05      	ldr	r2, [pc, #20]	; (800e240 <SDMMC_CmdStopTransfer+0x40>)
 800e22c:	210c      	movs	r1, #12
 800e22e:	6878      	ldr	r0, [r7, #4]
 800e230:	f000 f998 	bl	800e564 <SDMMC_GetCmdResp1>
 800e234:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e236:	69fb      	ldr	r3, [r7, #28]
}
 800e238:	4618      	mov	r0, r3
 800e23a:	3720      	adds	r7, #32
 800e23c:	46bd      	mov	sp, r7
 800e23e:	bd80      	pop	{r7, pc}
 800e240:	05f5e100 	.word	0x05f5e100

0800e244 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b08a      	sub	sp, #40	; 0x28
 800e248:	af00      	add	r7, sp, #0
 800e24a:	60f8      	str	r0, [r7, #12]
 800e24c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800e250:	683b      	ldr	r3, [r7, #0]
 800e252:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800e254:	2307      	movs	r3, #7
 800e256:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e258:	2340      	movs	r3, #64	; 0x40
 800e25a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e25c:	2300      	movs	r3, #0
 800e25e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e260:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e264:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e266:	f107 0310 	add.w	r3, r7, #16
 800e26a:	4619      	mov	r1, r3
 800e26c:	68f8      	ldr	r0, [r7, #12]
 800e26e:	f7ff fea7 	bl	800dfc0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800e272:	f241 3288 	movw	r2, #5000	; 0x1388
 800e276:	2107      	movs	r1, #7
 800e278:	68f8      	ldr	r0, [r7, #12]
 800e27a:	f000 f973 	bl	800e564 <SDMMC_GetCmdResp1>
 800e27e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800e280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e282:	4618      	mov	r0, r3
 800e284:	3728      	adds	r7, #40	; 0x28
 800e286:	46bd      	mov	sp, r7
 800e288:	bd80      	pop	{r7, pc}

0800e28a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800e28a:	b580      	push	{r7, lr}
 800e28c:	b088      	sub	sp, #32
 800e28e:	af00      	add	r7, sp, #0
 800e290:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800e292:	2300      	movs	r3, #0
 800e294:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800e296:	2300      	movs	r3, #0
 800e298:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800e29a:	2300      	movs	r3, #0
 800e29c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e29e:	2300      	movs	r3, #0
 800e2a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e2a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e2a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e2a8:	f107 0308 	add.w	r3, r7, #8
 800e2ac:	4619      	mov	r1, r3
 800e2ae:	6878      	ldr	r0, [r7, #4]
 800e2b0:	f7ff fe86 	bl	800dfc0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800e2b4:	6878      	ldr	r0, [r7, #4]
 800e2b6:	f000 f92d 	bl	800e514 <SDMMC_GetCmdError>
 800e2ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e2bc:	69fb      	ldr	r3, [r7, #28]
}
 800e2be:	4618      	mov	r0, r3
 800e2c0:	3720      	adds	r7, #32
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	bd80      	pop	{r7, pc}

0800e2c6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800e2c6:	b580      	push	{r7, lr}
 800e2c8:	b088      	sub	sp, #32
 800e2ca:	af00      	add	r7, sp, #0
 800e2cc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800e2ce:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800e2d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800e2d4:	2308      	movs	r3, #8
 800e2d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e2d8:	2340      	movs	r3, #64	; 0x40
 800e2da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e2dc:	2300      	movs	r3, #0
 800e2de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e2e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e2e4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e2e6:	f107 0308 	add.w	r3, r7, #8
 800e2ea:	4619      	mov	r1, r3
 800e2ec:	6878      	ldr	r0, [r7, #4]
 800e2ee:	f7ff fe67 	bl	800dfc0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800e2f2:	6878      	ldr	r0, [r7, #4]
 800e2f4:	f000 fb16 	bl	800e924 <SDMMC_GetCmdResp7>
 800e2f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e2fa:	69fb      	ldr	r3, [r7, #28]
}
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	3720      	adds	r7, #32
 800e300:	46bd      	mov	sp, r7
 800e302:	bd80      	pop	{r7, pc}

0800e304 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e304:	b580      	push	{r7, lr}
 800e306:	b088      	sub	sp, #32
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
 800e30c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e30e:	683b      	ldr	r3, [r7, #0]
 800e310:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800e312:	2337      	movs	r3, #55	; 0x37
 800e314:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e316:	2340      	movs	r3, #64	; 0x40
 800e318:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e31a:	2300      	movs	r3, #0
 800e31c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e31e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e322:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e324:	f107 0308 	add.w	r3, r7, #8
 800e328:	4619      	mov	r1, r3
 800e32a:	6878      	ldr	r0, [r7, #4]
 800e32c:	f7ff fe48 	bl	800dfc0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800e330:	f241 3288 	movw	r2, #5000	; 0x1388
 800e334:	2137      	movs	r1, #55	; 0x37
 800e336:	6878      	ldr	r0, [r7, #4]
 800e338:	f000 f914 	bl	800e564 <SDMMC_GetCmdResp1>
 800e33c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e33e:	69fb      	ldr	r3, [r7, #28]
}
 800e340:	4618      	mov	r0, r3
 800e342:	3720      	adds	r7, #32
 800e344:	46bd      	mov	sp, r7
 800e346:	bd80      	pop	{r7, pc}

0800e348 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b088      	sub	sp, #32
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]
 800e350:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800e352:	683b      	ldr	r3, [r7, #0]
 800e354:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e358:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e35c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800e35e:	2329      	movs	r3, #41	; 0x29
 800e360:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e362:	2340      	movs	r3, #64	; 0x40
 800e364:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e366:	2300      	movs	r3, #0
 800e368:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e36a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e36e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e370:	f107 0308 	add.w	r3, r7, #8
 800e374:	4619      	mov	r1, r3
 800e376:	6878      	ldr	r0, [r7, #4]
 800e378:	f7ff fe22 	bl	800dfc0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800e37c:	6878      	ldr	r0, [r7, #4]
 800e37e:	f000 fa23 	bl	800e7c8 <SDMMC_GetCmdResp3>
 800e382:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e384:	69fb      	ldr	r3, [r7, #28]
}
 800e386:	4618      	mov	r0, r3
 800e388:	3720      	adds	r7, #32
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bd80      	pop	{r7, pc}

0800e38e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800e38e:	b580      	push	{r7, lr}
 800e390:	b088      	sub	sp, #32
 800e392:	af00      	add	r7, sp, #0
 800e394:	6078      	str	r0, [r7, #4]
 800e396:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800e398:	683b      	ldr	r3, [r7, #0]
 800e39a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800e39c:	2306      	movs	r3, #6
 800e39e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e3a0:	2340      	movs	r3, #64	; 0x40
 800e3a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e3a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e3ac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e3ae:	f107 0308 	add.w	r3, r7, #8
 800e3b2:	4619      	mov	r1, r3
 800e3b4:	6878      	ldr	r0, [r7, #4]
 800e3b6:	f7ff fe03 	bl	800dfc0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800e3ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800e3be:	2106      	movs	r1, #6
 800e3c0:	6878      	ldr	r0, [r7, #4]
 800e3c2:	f000 f8cf 	bl	800e564 <SDMMC_GetCmdResp1>
 800e3c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e3c8:	69fb      	ldr	r3, [r7, #28]
}
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	3720      	adds	r7, #32
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	bd80      	pop	{r7, pc}

0800e3d2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800e3d2:	b580      	push	{r7, lr}
 800e3d4:	b088      	sub	sp, #32
 800e3d6:	af00      	add	r7, sp, #0
 800e3d8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800e3da:	2300      	movs	r3, #0
 800e3dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800e3de:	2333      	movs	r3, #51	; 0x33
 800e3e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e3e2:	2340      	movs	r3, #64	; 0x40
 800e3e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e3ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e3ee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e3f0:	f107 0308 	add.w	r3, r7, #8
 800e3f4:	4619      	mov	r1, r3
 800e3f6:	6878      	ldr	r0, [r7, #4]
 800e3f8:	f7ff fde2 	bl	800dfc0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800e3fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800e400:	2133      	movs	r1, #51	; 0x33
 800e402:	6878      	ldr	r0, [r7, #4]
 800e404:	f000 f8ae 	bl	800e564 <SDMMC_GetCmdResp1>
 800e408:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e40a:	69fb      	ldr	r3, [r7, #28]
}
 800e40c:	4618      	mov	r0, r3
 800e40e:	3720      	adds	r7, #32
 800e410:	46bd      	mov	sp, r7
 800e412:	bd80      	pop	{r7, pc}

0800e414 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800e414:	b580      	push	{r7, lr}
 800e416:	b088      	sub	sp, #32
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800e41c:	2300      	movs	r3, #0
 800e41e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800e420:	2302      	movs	r3, #2
 800e422:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800e424:	23c0      	movs	r3, #192	; 0xc0
 800e426:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e428:	2300      	movs	r3, #0
 800e42a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e42c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e430:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e432:	f107 0308 	add.w	r3, r7, #8
 800e436:	4619      	mov	r1, r3
 800e438:	6878      	ldr	r0, [r7, #4]
 800e43a:	f7ff fdc1 	bl	800dfc0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800e43e:	6878      	ldr	r0, [r7, #4]
 800e440:	f000 f97c 	bl	800e73c <SDMMC_GetCmdResp2>
 800e444:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e446:	69fb      	ldr	r3, [r7, #28]
}
 800e448:	4618      	mov	r0, r3
 800e44a:	3720      	adds	r7, #32
 800e44c:	46bd      	mov	sp, r7
 800e44e:	bd80      	pop	{r7, pc}

0800e450 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b088      	sub	sp, #32
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
 800e458:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800e45a:	683b      	ldr	r3, [r7, #0]
 800e45c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800e45e:	2309      	movs	r3, #9
 800e460:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800e462:	23c0      	movs	r3, #192	; 0xc0
 800e464:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e466:	2300      	movs	r3, #0
 800e468:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e46a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e46e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e470:	f107 0308 	add.w	r3, r7, #8
 800e474:	4619      	mov	r1, r3
 800e476:	6878      	ldr	r0, [r7, #4]
 800e478:	f7ff fda2 	bl	800dfc0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800e47c:	6878      	ldr	r0, [r7, #4]
 800e47e:	f000 f95d 	bl	800e73c <SDMMC_GetCmdResp2>
 800e482:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e484:	69fb      	ldr	r3, [r7, #28]
}
 800e486:	4618      	mov	r0, r3
 800e488:	3720      	adds	r7, #32
 800e48a:	46bd      	mov	sp, r7
 800e48c:	bd80      	pop	{r7, pc}

0800e48e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800e48e:	b580      	push	{r7, lr}
 800e490:	b088      	sub	sp, #32
 800e492:	af00      	add	r7, sp, #0
 800e494:	6078      	str	r0, [r7, #4]
 800e496:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800e498:	2300      	movs	r3, #0
 800e49a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800e49c:	2303      	movs	r3, #3
 800e49e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e4a0:	2340      	movs	r3, #64	; 0x40
 800e4a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e4a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e4ac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e4ae:	f107 0308 	add.w	r3, r7, #8
 800e4b2:	4619      	mov	r1, r3
 800e4b4:	6878      	ldr	r0, [r7, #4]
 800e4b6:	f7ff fd83 	bl	800dfc0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800e4ba:	683a      	ldr	r2, [r7, #0]
 800e4bc:	2103      	movs	r1, #3
 800e4be:	6878      	ldr	r0, [r7, #4]
 800e4c0:	f000 f9bc 	bl	800e83c <SDMMC_GetCmdResp6>
 800e4c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e4c6:	69fb      	ldr	r3, [r7, #28]
}
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	3720      	adds	r7, #32
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	bd80      	pop	{r7, pc}

0800e4d0 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b088      	sub	sp, #32
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
 800e4d8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800e4da:	683b      	ldr	r3, [r7, #0]
 800e4dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800e4de:	230d      	movs	r3, #13
 800e4e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e4e2:	2340      	movs	r3, #64	; 0x40
 800e4e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e4ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e4ee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e4f0:	f107 0308 	add.w	r3, r7, #8
 800e4f4:	4619      	mov	r1, r3
 800e4f6:	6878      	ldr	r0, [r7, #4]
 800e4f8:	f7ff fd62 	bl	800dfc0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800e4fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800e500:	210d      	movs	r1, #13
 800e502:	6878      	ldr	r0, [r7, #4]
 800e504:	f000 f82e 	bl	800e564 <SDMMC_GetCmdResp1>
 800e508:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e50a:	69fb      	ldr	r3, [r7, #28]
}
 800e50c:	4618      	mov	r0, r3
 800e50e:	3720      	adds	r7, #32
 800e510:	46bd      	mov	sp, r7
 800e512:	bd80      	pop	{r7, pc}

0800e514 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800e514:	b490      	push	{r4, r7}
 800e516:	b082      	sub	sp, #8
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e51c:	4b0f      	ldr	r3, [pc, #60]	; (800e55c <SDMMC_GetCmdError+0x48>)
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	4a0f      	ldr	r2, [pc, #60]	; (800e560 <SDMMC_GetCmdError+0x4c>)
 800e522:	fba2 2303 	umull	r2, r3, r2, r3
 800e526:	0a5b      	lsrs	r3, r3, #9
 800e528:	f241 3288 	movw	r2, #5000	; 0x1388
 800e52c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e530:	4623      	mov	r3, r4
 800e532:	1e5c      	subs	r4, r3, #1
 800e534:	2b00      	cmp	r3, #0
 800e536:	d102      	bne.n	800e53e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e538:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e53c:	e009      	b.n	800e552 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e546:	2b00      	cmp	r3, #0
 800e548:	d0f2      	beq.n	800e530 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	22c5      	movs	r2, #197	; 0xc5
 800e54e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800e550:	2300      	movs	r3, #0
}
 800e552:	4618      	mov	r0, r3
 800e554:	3708      	adds	r7, #8
 800e556:	46bd      	mov	sp, r7
 800e558:	bc90      	pop	{r4, r7}
 800e55a:	4770      	bx	lr
 800e55c:	20000000 	.word	0x20000000
 800e560:	10624dd3 	.word	0x10624dd3

0800e564 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800e564:	b590      	push	{r4, r7, lr}
 800e566:	b087      	sub	sp, #28
 800e568:	af00      	add	r7, sp, #0
 800e56a:	60f8      	str	r0, [r7, #12]
 800e56c:	460b      	mov	r3, r1
 800e56e:	607a      	str	r2, [r7, #4]
 800e570:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e572:	4b6f      	ldr	r3, [pc, #444]	; (800e730 <SDMMC_GetCmdResp1+0x1cc>)
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	4a6f      	ldr	r2, [pc, #444]	; (800e734 <SDMMC_GetCmdResp1+0x1d0>)
 800e578:	fba2 2303 	umull	r2, r3, r2, r3
 800e57c:	0a5b      	lsrs	r3, r3, #9
 800e57e:	687a      	ldr	r2, [r7, #4]
 800e580:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e584:	4623      	mov	r3, r4
 800e586:	1e5c      	subs	r4, r3, #1
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d102      	bne.n	800e592 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e58c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e590:	e0c9      	b.n	800e726 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e596:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e598:	697b      	ldr	r3, [r7, #20]
 800e59a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d0f0      	beq.n	800e584 <SDMMC_GetCmdResp1+0x20>
 800e5a2:	697b      	ldr	r3, [r7, #20]
 800e5a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d1eb      	bne.n	800e584 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5b0:	f003 0304 	and.w	r3, r3, #4
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d004      	beq.n	800e5c2 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	2204      	movs	r2, #4
 800e5bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e5be:	2304      	movs	r3, #4
 800e5c0:	e0b1      	b.n	800e726 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5c6:	f003 0301 	and.w	r3, r3, #1
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d004      	beq.n	800e5d8 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	2201      	movs	r2, #1
 800e5d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e5d4:	2301      	movs	r3, #1
 800e5d6:	e0a6      	b.n	800e726 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	22c5      	movs	r2, #197	; 0xc5
 800e5dc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800e5de:	68f8      	ldr	r0, [r7, #12]
 800e5e0:	f7ff fd18 	bl	800e014 <SDIO_GetCommandResponse>
 800e5e4:	4603      	mov	r3, r0
 800e5e6:	461a      	mov	r2, r3
 800e5e8:	7afb      	ldrb	r3, [r7, #11]
 800e5ea:	4293      	cmp	r3, r2
 800e5ec:	d001      	beq.n	800e5f2 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e5ee:	2301      	movs	r3, #1
 800e5f0:	e099      	b.n	800e726 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800e5f2:	2100      	movs	r1, #0
 800e5f4:	68f8      	ldr	r0, [r7, #12]
 800e5f6:	f7ff fd1a 	bl	800e02e <SDIO_GetResponse>
 800e5fa:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e5fc:	693a      	ldr	r2, [r7, #16]
 800e5fe:	4b4e      	ldr	r3, [pc, #312]	; (800e738 <SDMMC_GetCmdResp1+0x1d4>)
 800e600:	4013      	ands	r3, r2
 800e602:	2b00      	cmp	r3, #0
 800e604:	d101      	bne.n	800e60a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800e606:	2300      	movs	r3, #0
 800e608:	e08d      	b.n	800e726 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e60a:	693b      	ldr	r3, [r7, #16]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	da02      	bge.n	800e616 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e610:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e614:	e087      	b.n	800e726 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e616:	693b      	ldr	r3, [r7, #16]
 800e618:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d001      	beq.n	800e624 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e620:	2340      	movs	r3, #64	; 0x40
 800e622:	e080      	b.n	800e726 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e624:	693b      	ldr	r3, [r7, #16]
 800e626:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d001      	beq.n	800e632 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e62e:	2380      	movs	r3, #128	; 0x80
 800e630:	e079      	b.n	800e726 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e632:	693b      	ldr	r3, [r7, #16]
 800e634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d002      	beq.n	800e642 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e63c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e640:	e071      	b.n	800e726 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e642:	693b      	ldr	r3, [r7, #16]
 800e644:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d002      	beq.n	800e652 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e64c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e650:	e069      	b.n	800e726 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e652:	693b      	ldr	r3, [r7, #16]
 800e654:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d002      	beq.n	800e662 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e65c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e660:	e061      	b.n	800e726 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e662:	693b      	ldr	r3, [r7, #16]
 800e664:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d002      	beq.n	800e672 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e66c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e670:	e059      	b.n	800e726 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e672:	693b      	ldr	r3, [r7, #16]
 800e674:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d002      	beq.n	800e682 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e67c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e680:	e051      	b.n	800e726 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e682:	693b      	ldr	r3, [r7, #16]
 800e684:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d002      	beq.n	800e692 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e68c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e690:	e049      	b.n	800e726 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e692:	693b      	ldr	r3, [r7, #16]
 800e694:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d002      	beq.n	800e6a2 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e69c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e6a0:	e041      	b.n	800e726 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e6a2:	693b      	ldr	r3, [r7, #16]
 800e6a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d002      	beq.n	800e6b2 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800e6ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e6b0:	e039      	b.n	800e726 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e6b2:	693b      	ldr	r3, [r7, #16]
 800e6b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d002      	beq.n	800e6c2 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e6bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e6c0:	e031      	b.n	800e726 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e6c2:	693b      	ldr	r3, [r7, #16]
 800e6c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d002      	beq.n	800e6d2 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e6cc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e6d0:	e029      	b.n	800e726 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e6d2:	693b      	ldr	r3, [r7, #16]
 800e6d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d002      	beq.n	800e6e2 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e6dc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e6e0:	e021      	b.n	800e726 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e6e2:	693b      	ldr	r3, [r7, #16]
 800e6e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d002      	beq.n	800e6f2 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e6ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e6f0:	e019      	b.n	800e726 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e6f2:	693b      	ldr	r3, [r7, #16]
 800e6f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d002      	beq.n	800e702 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e6fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e700:	e011      	b.n	800e726 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e702:	693b      	ldr	r3, [r7, #16]
 800e704:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d002      	beq.n	800e712 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e70c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e710:	e009      	b.n	800e726 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e712:	693b      	ldr	r3, [r7, #16]
 800e714:	f003 0308 	and.w	r3, r3, #8
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d002      	beq.n	800e722 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e71c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e720:	e001      	b.n	800e726 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e722:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e726:	4618      	mov	r0, r3
 800e728:	371c      	adds	r7, #28
 800e72a:	46bd      	mov	sp, r7
 800e72c:	bd90      	pop	{r4, r7, pc}
 800e72e:	bf00      	nop
 800e730:	20000000 	.word	0x20000000
 800e734:	10624dd3 	.word	0x10624dd3
 800e738:	fdffe008 	.word	0xfdffe008

0800e73c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800e73c:	b490      	push	{r4, r7}
 800e73e:	b084      	sub	sp, #16
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e744:	4b1e      	ldr	r3, [pc, #120]	; (800e7c0 <SDMMC_GetCmdResp2+0x84>)
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	4a1e      	ldr	r2, [pc, #120]	; (800e7c4 <SDMMC_GetCmdResp2+0x88>)
 800e74a:	fba2 2303 	umull	r2, r3, r2, r3
 800e74e:	0a5b      	lsrs	r3, r3, #9
 800e750:	f241 3288 	movw	r2, #5000	; 0x1388
 800e754:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e758:	4623      	mov	r3, r4
 800e75a:	1e5c      	subs	r4, r3, #1
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d102      	bne.n	800e766 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e760:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e764:	e026      	b.n	800e7b4 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e76a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e772:	2b00      	cmp	r3, #0
 800e774:	d0f0      	beq.n	800e758 <SDMMC_GetCmdResp2+0x1c>
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d1eb      	bne.n	800e758 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e784:	f003 0304 	and.w	r3, r3, #4
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d004      	beq.n	800e796 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	2204      	movs	r2, #4
 800e790:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e792:	2304      	movs	r3, #4
 800e794:	e00e      	b.n	800e7b4 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e79a:	f003 0301 	and.w	r3, r3, #1
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d004      	beq.n	800e7ac <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	2201      	movs	r2, #1
 800e7a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e7a8:	2301      	movs	r3, #1
 800e7aa:	e003      	b.n	800e7b4 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	22c5      	movs	r2, #197	; 0xc5
 800e7b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e7b2:	2300      	movs	r3, #0
}
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	3710      	adds	r7, #16
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	bc90      	pop	{r4, r7}
 800e7bc:	4770      	bx	lr
 800e7be:	bf00      	nop
 800e7c0:	20000000 	.word	0x20000000
 800e7c4:	10624dd3 	.word	0x10624dd3

0800e7c8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800e7c8:	b490      	push	{r4, r7}
 800e7ca:	b084      	sub	sp, #16
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e7d0:	4b18      	ldr	r3, [pc, #96]	; (800e834 <SDMMC_GetCmdResp3+0x6c>)
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	4a18      	ldr	r2, [pc, #96]	; (800e838 <SDMMC_GetCmdResp3+0x70>)
 800e7d6:	fba2 2303 	umull	r2, r3, r2, r3
 800e7da:	0a5b      	lsrs	r3, r3, #9
 800e7dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800e7e0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e7e4:	4623      	mov	r3, r4
 800e7e6:	1e5c      	subs	r4, r3, #1
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d102      	bne.n	800e7f2 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e7ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e7f0:	e01b      	b.n	800e82a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7f6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d0f0      	beq.n	800e7e4 <SDMMC_GetCmdResp3+0x1c>
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d1eb      	bne.n	800e7e4 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e810:	f003 0304 	and.w	r3, r3, #4
 800e814:	2b00      	cmp	r3, #0
 800e816:	d004      	beq.n	800e822 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	2204      	movs	r2, #4
 800e81c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e81e:	2304      	movs	r3, #4
 800e820:	e003      	b.n	800e82a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	22c5      	movs	r2, #197	; 0xc5
 800e826:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e828:	2300      	movs	r3, #0
}
 800e82a:	4618      	mov	r0, r3
 800e82c:	3710      	adds	r7, #16
 800e82e:	46bd      	mov	sp, r7
 800e830:	bc90      	pop	{r4, r7}
 800e832:	4770      	bx	lr
 800e834:	20000000 	.word	0x20000000
 800e838:	10624dd3 	.word	0x10624dd3

0800e83c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e83c:	b590      	push	{r4, r7, lr}
 800e83e:	b087      	sub	sp, #28
 800e840:	af00      	add	r7, sp, #0
 800e842:	60f8      	str	r0, [r7, #12]
 800e844:	460b      	mov	r3, r1
 800e846:	607a      	str	r2, [r7, #4]
 800e848:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e84a:	4b34      	ldr	r3, [pc, #208]	; (800e91c <SDMMC_GetCmdResp6+0xe0>)
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	4a34      	ldr	r2, [pc, #208]	; (800e920 <SDMMC_GetCmdResp6+0xe4>)
 800e850:	fba2 2303 	umull	r2, r3, r2, r3
 800e854:	0a5b      	lsrs	r3, r3, #9
 800e856:	f241 3288 	movw	r2, #5000	; 0x1388
 800e85a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e85e:	4623      	mov	r3, r4
 800e860:	1e5c      	subs	r4, r3, #1
 800e862:	2b00      	cmp	r3, #0
 800e864:	d102      	bne.n	800e86c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e866:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e86a:	e052      	b.n	800e912 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e870:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e872:	697b      	ldr	r3, [r7, #20]
 800e874:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d0f0      	beq.n	800e85e <SDMMC_GetCmdResp6+0x22>
 800e87c:	697b      	ldr	r3, [r7, #20]
 800e87e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e882:	2b00      	cmp	r3, #0
 800e884:	d1eb      	bne.n	800e85e <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e88a:	f003 0304 	and.w	r3, r3, #4
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d004      	beq.n	800e89c <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	2204      	movs	r2, #4
 800e896:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e898:	2304      	movs	r3, #4
 800e89a:	e03a      	b.n	800e912 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8a0:	f003 0301 	and.w	r3, r3, #1
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d004      	beq.n	800e8b2 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	2201      	movs	r2, #1
 800e8ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e8ae:	2301      	movs	r3, #1
 800e8b0:	e02f      	b.n	800e912 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800e8b2:	68f8      	ldr	r0, [r7, #12]
 800e8b4:	f7ff fbae 	bl	800e014 <SDIO_GetCommandResponse>
 800e8b8:	4603      	mov	r3, r0
 800e8ba:	461a      	mov	r2, r3
 800e8bc:	7afb      	ldrb	r3, [r7, #11]
 800e8be:	4293      	cmp	r3, r2
 800e8c0:	d001      	beq.n	800e8c6 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e8c2:	2301      	movs	r3, #1
 800e8c4:	e025      	b.n	800e912 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	22c5      	movs	r2, #197	; 0xc5
 800e8ca:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800e8cc:	2100      	movs	r1, #0
 800e8ce:	68f8      	ldr	r0, [r7, #12]
 800e8d0:	f7ff fbad 	bl	800e02e <SDIO_GetResponse>
 800e8d4:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800e8d6:	693b      	ldr	r3, [r7, #16]
 800e8d8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d106      	bne.n	800e8ee <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800e8e0:	693b      	ldr	r3, [r7, #16]
 800e8e2:	0c1b      	lsrs	r3, r3, #16
 800e8e4:	b29a      	uxth	r2, r3
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800e8ea:	2300      	movs	r3, #0
 800e8ec:	e011      	b.n	800e912 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e8ee:	693b      	ldr	r3, [r7, #16]
 800e8f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d002      	beq.n	800e8fe <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e8f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e8fc:	e009      	b.n	800e912 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e8fe:	693b      	ldr	r3, [r7, #16]
 800e900:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e904:	2b00      	cmp	r3, #0
 800e906:	d002      	beq.n	800e90e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e90c:	e001      	b.n	800e912 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e90e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e912:	4618      	mov	r0, r3
 800e914:	371c      	adds	r7, #28
 800e916:	46bd      	mov	sp, r7
 800e918:	bd90      	pop	{r4, r7, pc}
 800e91a:	bf00      	nop
 800e91c:	20000000 	.word	0x20000000
 800e920:	10624dd3 	.word	0x10624dd3

0800e924 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800e924:	b490      	push	{r4, r7}
 800e926:	b084      	sub	sp, #16
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e92c:	4b21      	ldr	r3, [pc, #132]	; (800e9b4 <SDMMC_GetCmdResp7+0x90>)
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	4a21      	ldr	r2, [pc, #132]	; (800e9b8 <SDMMC_GetCmdResp7+0x94>)
 800e932:	fba2 2303 	umull	r2, r3, r2, r3
 800e936:	0a5b      	lsrs	r3, r3, #9
 800e938:	f241 3288 	movw	r2, #5000	; 0x1388
 800e93c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e940:	4623      	mov	r3, r4
 800e942:	1e5c      	subs	r4, r3, #1
 800e944:	2b00      	cmp	r3, #0
 800e946:	d102      	bne.n	800e94e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e948:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e94c:	e02c      	b.n	800e9a8 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e952:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d0f0      	beq.n	800e940 <SDMMC_GetCmdResp7+0x1c>
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e964:	2b00      	cmp	r3, #0
 800e966:	d1eb      	bne.n	800e940 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e96c:	f003 0304 	and.w	r3, r3, #4
 800e970:	2b00      	cmp	r3, #0
 800e972:	d004      	beq.n	800e97e <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	2204      	movs	r2, #4
 800e978:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e97a:	2304      	movs	r3, #4
 800e97c:	e014      	b.n	800e9a8 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e982:	f003 0301 	and.w	r3, r3, #1
 800e986:	2b00      	cmp	r3, #0
 800e988:	d004      	beq.n	800e994 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	2201      	movs	r2, #1
 800e98e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e990:	2301      	movs	r3, #1
 800e992:	e009      	b.n	800e9a8 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d002      	beq.n	800e9a6 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	2240      	movs	r2, #64	; 0x40
 800e9a4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e9a6:	2300      	movs	r3, #0
  
}
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	3710      	adds	r7, #16
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	bc90      	pop	{r4, r7}
 800e9b0:	4770      	bx	lr
 800e9b2:	bf00      	nop
 800e9b4:	20000000 	.word	0x20000000
 800e9b8:	10624dd3 	.word	0x10624dd3

0800e9bc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800e9c0:	4904      	ldr	r1, [pc, #16]	; (800e9d4 <MX_FATFS_Init+0x18>)
 800e9c2:	4805      	ldr	r0, [pc, #20]	; (800e9d8 <MX_FATFS_Init+0x1c>)
 800e9c4:	f003 fb9c 	bl	8012100 <FATFS_LinkDriver>
 800e9c8:	4603      	mov	r3, r0
 800e9ca:	461a      	mov	r2, r3
 800e9cc:	4b03      	ldr	r3, [pc, #12]	; (800e9dc <MX_FATFS_Init+0x20>)
 800e9ce:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e9d0:	bf00      	nop
 800e9d2:	bd80      	pop	{r7, pc}
 800e9d4:	20035f50 	.word	0x20035f50
 800e9d8:	080185fc 	.word	0x080185fc
 800e9dc:	20035f4c 	.word	0x20035f4c

0800e9e0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b082      	sub	sp, #8
 800e9e4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800e9ea:	f000 f896 	bl	800eb1a <BSP_SD_IsDetected>
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	2b01      	cmp	r3, #1
 800e9f2:	d001      	beq.n	800e9f8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800e9f4:	2301      	movs	r3, #1
 800e9f6:	e012      	b.n	800ea1e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800e9f8:	480b      	ldr	r0, [pc, #44]	; (800ea28 <BSP_SD_Init+0x48>)
 800e9fa:	f7fb ffa5 	bl	800a948 <HAL_SD_Init>
 800e9fe:	4603      	mov	r3, r0
 800ea00:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ea02:	79fb      	ldrb	r3, [r7, #7]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d109      	bne.n	800ea1c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800ea08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ea0c:	4806      	ldr	r0, [pc, #24]	; (800ea28 <BSP_SD_Init+0x48>)
 800ea0e:	f7fc fd4f 	bl	800b4b0 <HAL_SD_ConfigWideBusOperation>
 800ea12:	4603      	mov	r3, r0
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d001      	beq.n	800ea1c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800ea18:	2301      	movs	r3, #1
 800ea1a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800ea1c:	79fb      	ldrb	r3, [r7, #7]
}
 800ea1e:	4618      	mov	r0, r3
 800ea20:	3708      	adds	r7, #8
 800ea22:	46bd      	mov	sp, r7
 800ea24:	bd80      	pop	{r7, pc}
 800ea26:	bf00      	nop
 800ea28:	20035d48 	.word	0x20035d48

0800ea2c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b086      	sub	sp, #24
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	60f8      	str	r0, [r7, #12]
 800ea34:	60b9      	str	r1, [r7, #8]
 800ea36:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ea38:	2300      	movs	r3, #0
 800ea3a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	68ba      	ldr	r2, [r7, #8]
 800ea40:	68f9      	ldr	r1, [r7, #12]
 800ea42:	4806      	ldr	r0, [pc, #24]	; (800ea5c <BSP_SD_ReadBlocks_DMA+0x30>)
 800ea44:	f7fc f810 	bl	800aa68 <HAL_SD_ReadBlocks_DMA>
 800ea48:	4603      	mov	r3, r0
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d001      	beq.n	800ea52 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ea4e:	2301      	movs	r3, #1
 800ea50:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ea52:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea54:	4618      	mov	r0, r3
 800ea56:	3718      	adds	r7, #24
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	bd80      	pop	{r7, pc}
 800ea5c:	20035d48 	.word	0x20035d48

0800ea60 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b086      	sub	sp, #24
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	60f8      	str	r0, [r7, #12]
 800ea68:	60b9      	str	r1, [r7, #8]
 800ea6a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	68ba      	ldr	r2, [r7, #8]
 800ea74:	68f9      	ldr	r1, [r7, #12]
 800ea76:	4806      	ldr	r0, [pc, #24]	; (800ea90 <BSP_SD_WriteBlocks_DMA+0x30>)
 800ea78:	f7fc f8de 	bl	800ac38 <HAL_SD_WriteBlocks_DMA>
 800ea7c:	4603      	mov	r3, r0
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d001      	beq.n	800ea86 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ea82:	2301      	movs	r3, #1
 800ea84:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ea86:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea88:	4618      	mov	r0, r3
 800ea8a:	3718      	adds	r7, #24
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	bd80      	pop	{r7, pc}
 800ea90:	20035d48 	.word	0x20035d48

0800ea94 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ea94:	b580      	push	{r7, lr}
 800ea96:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ea98:	4805      	ldr	r0, [pc, #20]	; (800eab0 <BSP_SD_GetCardState+0x1c>)
 800ea9a:	f7fc fd85 	bl	800b5a8 <HAL_SD_GetCardState>
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	2b04      	cmp	r3, #4
 800eaa2:	bf14      	ite	ne
 800eaa4:	2301      	movne	r3, #1
 800eaa6:	2300      	moveq	r3, #0
 800eaa8:	b2db      	uxtb	r3, r3
}
 800eaaa:	4618      	mov	r0, r3
 800eaac:	bd80      	pop	{r7, pc}
 800eaae:	bf00      	nop
 800eab0:	20035d48 	.word	0x20035d48

0800eab4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b082      	sub	sp, #8
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800eabc:	6879      	ldr	r1, [r7, #4]
 800eabe:	4803      	ldr	r0, [pc, #12]	; (800eacc <BSP_SD_GetCardInfo+0x18>)
 800eac0:	f7fc fcca 	bl	800b458 <HAL_SD_GetCardInfo>
}
 800eac4:	bf00      	nop
 800eac6:	3708      	adds	r7, #8
 800eac8:	46bd      	mov	sp, r7
 800eaca:	bd80      	pop	{r7, pc}
 800eacc:	20035d48 	.word	0x20035d48

0800ead0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b082      	sub	sp, #8
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800ead8:	f000 f818 	bl	800eb0c <BSP_SD_AbortCallback>
}
 800eadc:	bf00      	nop
 800eade:	3708      	adds	r7, #8
 800eae0:	46bd      	mov	sp, r7
 800eae2:	bd80      	pop	{r7, pc}

0800eae4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800eae4:	b580      	push	{r7, lr}
 800eae6:	b082      	sub	sp, #8
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800eaec:	f000 f9a8 	bl	800ee40 <BSP_SD_WriteCpltCallback>
}
 800eaf0:	bf00      	nop
 800eaf2:	3708      	adds	r7, #8
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	bd80      	pop	{r7, pc}

0800eaf8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b082      	sub	sp, #8
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800eb00:	f000 f9aa 	bl	800ee58 <BSP_SD_ReadCpltCallback>
}
 800eb04:	bf00      	nop
 800eb06:	3708      	adds	r7, #8
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	bd80      	pop	{r7, pc}

0800eb0c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800eb0c:	b480      	push	{r7}
 800eb0e:	af00      	add	r7, sp, #0

}
 800eb10:	bf00      	nop
 800eb12:	46bd      	mov	sp, r7
 800eb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb18:	4770      	bx	lr

0800eb1a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800eb1a:	b580      	push	{r7, lr}
 800eb1c:	b082      	sub	sp, #8
 800eb1e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800eb20:	2301      	movs	r3, #1
 800eb22:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800eb24:	f000 f80c 	bl	800eb40 <BSP_PlatformIsDetected>
 800eb28:	4603      	mov	r3, r0
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d101      	bne.n	800eb32 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800eb2e:	2300      	movs	r3, #0
 800eb30:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800eb32:	79fb      	ldrb	r3, [r7, #7]
 800eb34:	b2db      	uxtb	r3, r3
}
 800eb36:	4618      	mov	r0, r3
 800eb38:	3708      	adds	r7, #8
 800eb3a:	46bd      	mov	sp, r7
 800eb3c:	bd80      	pop	{r7, pc}
	...

0800eb40 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b082      	sub	sp, #8
 800eb44:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800eb46:	2301      	movs	r3, #1
 800eb48:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800eb4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800eb4e:	4806      	ldr	r0, [pc, #24]	; (800eb68 <BSP_PlatformIsDetected+0x28>)
 800eb50:	f7fa f866 	bl	8008c20 <HAL_GPIO_ReadPin>
 800eb54:	4603      	mov	r3, r0
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d001      	beq.n	800eb5e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800eb5e:	79fb      	ldrb	r3, [r7, #7]
}
 800eb60:	4618      	mov	r0, r3
 800eb62:	3708      	adds	r7, #8
 800eb64:	46bd      	mov	sp, r7
 800eb66:	bd80      	pop	{r7, pc}
 800eb68:	40020000 	.word	0x40020000

0800eb6c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800eb6c:	b580      	push	{r7, lr}
 800eb6e:	b084      	sub	sp, #16
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800eb74:	f7f8 fdca 	bl	800770c <HAL_GetTick>
 800eb78:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800eb7a:	e006      	b.n	800eb8a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800eb7c:	f7ff ff8a 	bl	800ea94 <BSP_SD_GetCardState>
 800eb80:	4603      	mov	r3, r0
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d101      	bne.n	800eb8a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800eb86:	2300      	movs	r3, #0
 800eb88:	e009      	b.n	800eb9e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800eb8a:	f7f8 fdbf 	bl	800770c <HAL_GetTick>
 800eb8e:	4602      	mov	r2, r0
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	1ad3      	subs	r3, r2, r3
 800eb94:	687a      	ldr	r2, [r7, #4]
 800eb96:	429a      	cmp	r2, r3
 800eb98:	d8f0      	bhi.n	800eb7c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800eb9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800eb9e:	4618      	mov	r0, r3
 800eba0:	3710      	adds	r7, #16
 800eba2:	46bd      	mov	sp, r7
 800eba4:	bd80      	pop	{r7, pc}
	...

0800eba8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b082      	sub	sp, #8
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	4603      	mov	r3, r0
 800ebb0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ebb2:	4b0b      	ldr	r3, [pc, #44]	; (800ebe0 <SD_CheckStatus+0x38>)
 800ebb4:	2201      	movs	r2, #1
 800ebb6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800ebb8:	f7ff ff6c 	bl	800ea94 <BSP_SD_GetCardState>
 800ebbc:	4603      	mov	r3, r0
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d107      	bne.n	800ebd2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ebc2:	4b07      	ldr	r3, [pc, #28]	; (800ebe0 <SD_CheckStatus+0x38>)
 800ebc4:	781b      	ldrb	r3, [r3, #0]
 800ebc6:	b2db      	uxtb	r3, r3
 800ebc8:	f023 0301 	bic.w	r3, r3, #1
 800ebcc:	b2da      	uxtb	r2, r3
 800ebce:	4b04      	ldr	r3, [pc, #16]	; (800ebe0 <SD_CheckStatus+0x38>)
 800ebd0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ebd2:	4b03      	ldr	r3, [pc, #12]	; (800ebe0 <SD_CheckStatus+0x38>)
 800ebd4:	781b      	ldrb	r3, [r3, #0]
 800ebd6:	b2db      	uxtb	r3, r3
}
 800ebd8:	4618      	mov	r0, r3
 800ebda:	3708      	adds	r7, #8
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	bd80      	pop	{r7, pc}
 800ebe0:	20000009 	.word	0x20000009

0800ebe4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b082      	sub	sp, #8
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	4603      	mov	r3, r0
 800ebec:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800ebee:	f7ff fef7 	bl	800e9e0 <BSP_SD_Init>
 800ebf2:	4603      	mov	r3, r0
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d107      	bne.n	800ec08 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800ebf8:	79fb      	ldrb	r3, [r7, #7]
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	f7ff ffd4 	bl	800eba8 <SD_CheckStatus>
 800ec00:	4603      	mov	r3, r0
 800ec02:	461a      	mov	r2, r3
 800ec04:	4b04      	ldr	r3, [pc, #16]	; (800ec18 <SD_initialize+0x34>)
 800ec06:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800ec08:	4b03      	ldr	r3, [pc, #12]	; (800ec18 <SD_initialize+0x34>)
 800ec0a:	781b      	ldrb	r3, [r3, #0]
 800ec0c:	b2db      	uxtb	r3, r3
}
 800ec0e:	4618      	mov	r0, r3
 800ec10:	3708      	adds	r7, #8
 800ec12:	46bd      	mov	sp, r7
 800ec14:	bd80      	pop	{r7, pc}
 800ec16:	bf00      	nop
 800ec18:	20000009 	.word	0x20000009

0800ec1c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b082      	sub	sp, #8
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	4603      	mov	r3, r0
 800ec24:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ec26:	79fb      	ldrb	r3, [r7, #7]
 800ec28:	4618      	mov	r0, r3
 800ec2a:	f7ff ffbd 	bl	800eba8 <SD_CheckStatus>
 800ec2e:	4603      	mov	r3, r0
}
 800ec30:	4618      	mov	r0, r3
 800ec32:	3708      	adds	r7, #8
 800ec34:	46bd      	mov	sp, r7
 800ec36:	bd80      	pop	{r7, pc}

0800ec38 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	b086      	sub	sp, #24
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	60b9      	str	r1, [r7, #8]
 800ec40:	607a      	str	r2, [r7, #4]
 800ec42:	603b      	str	r3, [r7, #0]
 800ec44:	4603      	mov	r3, r0
 800ec46:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ec48:	2301      	movs	r3, #1
 800ec4a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ec4c:	f247 5030 	movw	r0, #30000	; 0x7530
 800ec50:	f7ff ff8c 	bl	800eb6c <SD_CheckStatusWithTimeout>
 800ec54:	4603      	mov	r3, r0
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	da01      	bge.n	800ec5e <SD_read+0x26>
  {
    return res;
 800ec5a:	7dfb      	ldrb	r3, [r7, #23]
 800ec5c:	e03b      	b.n	800ecd6 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800ec5e:	683a      	ldr	r2, [r7, #0]
 800ec60:	6879      	ldr	r1, [r7, #4]
 800ec62:	68b8      	ldr	r0, [r7, #8]
 800ec64:	f7ff fee2 	bl	800ea2c <BSP_SD_ReadBlocks_DMA>
 800ec68:	4603      	mov	r3, r0
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d132      	bne.n	800ecd4 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800ec6e:	4b1c      	ldr	r3, [pc, #112]	; (800ece0 <SD_read+0xa8>)
 800ec70:	2200      	movs	r2, #0
 800ec72:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800ec74:	f7f8 fd4a 	bl	800770c <HAL_GetTick>
 800ec78:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800ec7a:	bf00      	nop
 800ec7c:	4b18      	ldr	r3, [pc, #96]	; (800ece0 <SD_read+0xa8>)
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d108      	bne.n	800ec96 <SD_read+0x5e>
 800ec84:	f7f8 fd42 	bl	800770c <HAL_GetTick>
 800ec88:	4602      	mov	r2, r0
 800ec8a:	693b      	ldr	r3, [r7, #16]
 800ec8c:	1ad3      	subs	r3, r2, r3
 800ec8e:	f247 522f 	movw	r2, #29999	; 0x752f
 800ec92:	4293      	cmp	r3, r2
 800ec94:	d9f2      	bls.n	800ec7c <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800ec96:	4b12      	ldr	r3, [pc, #72]	; (800ece0 <SD_read+0xa8>)
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d102      	bne.n	800eca4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800ec9e:	2301      	movs	r3, #1
 800eca0:	75fb      	strb	r3, [r7, #23]
 800eca2:	e017      	b.n	800ecd4 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800eca4:	4b0e      	ldr	r3, [pc, #56]	; (800ece0 <SD_read+0xa8>)
 800eca6:	2200      	movs	r2, #0
 800eca8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800ecaa:	f7f8 fd2f 	bl	800770c <HAL_GetTick>
 800ecae:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ecb0:	e007      	b.n	800ecc2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ecb2:	f7ff feef 	bl	800ea94 <BSP_SD_GetCardState>
 800ecb6:	4603      	mov	r3, r0
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d102      	bne.n	800ecc2 <SD_read+0x8a>
          {
            res = RES_OK;
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800ecc0:	e008      	b.n	800ecd4 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ecc2:	f7f8 fd23 	bl	800770c <HAL_GetTick>
 800ecc6:	4602      	mov	r2, r0
 800ecc8:	693b      	ldr	r3, [r7, #16]
 800ecca:	1ad3      	subs	r3, r2, r3
 800eccc:	f247 522f 	movw	r2, #29999	; 0x752f
 800ecd0:	4293      	cmp	r3, r2
 800ecd2:	d9ee      	bls.n	800ecb2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800ecd4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	3718      	adds	r7, #24
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	bd80      	pop	{r7, pc}
 800ecde:	bf00      	nop
 800ece0:	200335e4 	.word	0x200335e4

0800ece4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b086      	sub	sp, #24
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	60b9      	str	r1, [r7, #8]
 800ecec:	607a      	str	r2, [r7, #4]
 800ecee:	603b      	str	r3, [r7, #0]
 800ecf0:	4603      	mov	r3, r0
 800ecf2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ecf4:	2301      	movs	r3, #1
 800ecf6:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800ecf8:	4b24      	ldr	r3, [pc, #144]	; (800ed8c <SD_write+0xa8>)
 800ecfa:	2200      	movs	r2, #0
 800ecfc:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ecfe:	f247 5030 	movw	r0, #30000	; 0x7530
 800ed02:	f7ff ff33 	bl	800eb6c <SD_CheckStatusWithTimeout>
 800ed06:	4603      	mov	r3, r0
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	da01      	bge.n	800ed10 <SD_write+0x2c>
  {
    return res;
 800ed0c:	7dfb      	ldrb	r3, [r7, #23]
 800ed0e:	e038      	b.n	800ed82 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800ed10:	683a      	ldr	r2, [r7, #0]
 800ed12:	6879      	ldr	r1, [r7, #4]
 800ed14:	68b8      	ldr	r0, [r7, #8]
 800ed16:	f7ff fea3 	bl	800ea60 <BSP_SD_WriteBlocks_DMA>
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d12f      	bne.n	800ed80 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800ed20:	f7f8 fcf4 	bl	800770c <HAL_GetTick>
 800ed24:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800ed26:	bf00      	nop
 800ed28:	4b18      	ldr	r3, [pc, #96]	; (800ed8c <SD_write+0xa8>)
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d108      	bne.n	800ed42 <SD_write+0x5e>
 800ed30:	f7f8 fcec 	bl	800770c <HAL_GetTick>
 800ed34:	4602      	mov	r2, r0
 800ed36:	693b      	ldr	r3, [r7, #16]
 800ed38:	1ad3      	subs	r3, r2, r3
 800ed3a:	f247 522f 	movw	r2, #29999	; 0x752f
 800ed3e:	4293      	cmp	r3, r2
 800ed40:	d9f2      	bls.n	800ed28 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800ed42:	4b12      	ldr	r3, [pc, #72]	; (800ed8c <SD_write+0xa8>)
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d102      	bne.n	800ed50 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800ed4a:	2301      	movs	r3, #1
 800ed4c:	75fb      	strb	r3, [r7, #23]
 800ed4e:	e017      	b.n	800ed80 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800ed50:	4b0e      	ldr	r3, [pc, #56]	; (800ed8c <SD_write+0xa8>)
 800ed52:	2200      	movs	r2, #0
 800ed54:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800ed56:	f7f8 fcd9 	bl	800770c <HAL_GetTick>
 800ed5a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ed5c:	e007      	b.n	800ed6e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ed5e:	f7ff fe99 	bl	800ea94 <BSP_SD_GetCardState>
 800ed62:	4603      	mov	r3, r0
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d102      	bne.n	800ed6e <SD_write+0x8a>
          {
            res = RES_OK;
 800ed68:	2300      	movs	r3, #0
 800ed6a:	75fb      	strb	r3, [r7, #23]
            break;
 800ed6c:	e008      	b.n	800ed80 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ed6e:	f7f8 fccd 	bl	800770c <HAL_GetTick>
 800ed72:	4602      	mov	r2, r0
 800ed74:	693b      	ldr	r3, [r7, #16]
 800ed76:	1ad3      	subs	r3, r2, r3
 800ed78:	f247 522f 	movw	r2, #29999	; 0x752f
 800ed7c:	4293      	cmp	r3, r2
 800ed7e:	d9ee      	bls.n	800ed5e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800ed80:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed82:	4618      	mov	r0, r3
 800ed84:	3718      	adds	r7, #24
 800ed86:	46bd      	mov	sp, r7
 800ed88:	bd80      	pop	{r7, pc}
 800ed8a:	bf00      	nop
 800ed8c:	200335e0 	.word	0x200335e0

0800ed90 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b08c      	sub	sp, #48	; 0x30
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	4603      	mov	r3, r0
 800ed98:	603a      	str	r2, [r7, #0]
 800ed9a:	71fb      	strb	r3, [r7, #7]
 800ed9c:	460b      	mov	r3, r1
 800ed9e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800eda0:	2301      	movs	r3, #1
 800eda2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800eda6:	4b25      	ldr	r3, [pc, #148]	; (800ee3c <SD_ioctl+0xac>)
 800eda8:	781b      	ldrb	r3, [r3, #0]
 800edaa:	b2db      	uxtb	r3, r3
 800edac:	f003 0301 	and.w	r3, r3, #1
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d001      	beq.n	800edb8 <SD_ioctl+0x28>
 800edb4:	2303      	movs	r3, #3
 800edb6:	e03c      	b.n	800ee32 <SD_ioctl+0xa2>

  switch (cmd)
 800edb8:	79bb      	ldrb	r3, [r7, #6]
 800edba:	2b03      	cmp	r3, #3
 800edbc:	d834      	bhi.n	800ee28 <SD_ioctl+0x98>
 800edbe:	a201      	add	r2, pc, #4	; (adr r2, 800edc4 <SD_ioctl+0x34>)
 800edc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edc4:	0800edd5 	.word	0x0800edd5
 800edc8:	0800eddd 	.word	0x0800eddd
 800edcc:	0800edf5 	.word	0x0800edf5
 800edd0:	0800ee0f 	.word	0x0800ee0f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800edd4:	2300      	movs	r3, #0
 800edd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800edda:	e028      	b.n	800ee2e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800eddc:	f107 030c 	add.w	r3, r7, #12
 800ede0:	4618      	mov	r0, r3
 800ede2:	f7ff fe67 	bl	800eab4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ede6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ede8:	683b      	ldr	r3, [r7, #0]
 800edea:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800edec:	2300      	movs	r3, #0
 800edee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800edf2:	e01c      	b.n	800ee2e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800edf4:	f107 030c 	add.w	r3, r7, #12
 800edf8:	4618      	mov	r0, r3
 800edfa:	f7ff fe5b 	bl	800eab4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800edfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee00:	b29a      	uxth	r2, r3
 800ee02:	683b      	ldr	r3, [r7, #0]
 800ee04:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ee06:	2300      	movs	r3, #0
 800ee08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ee0c:	e00f      	b.n	800ee2e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ee0e:	f107 030c 	add.w	r3, r7, #12
 800ee12:	4618      	mov	r0, r3
 800ee14:	f7ff fe4e 	bl	800eab4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ee18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee1a:	0a5a      	lsrs	r2, r3, #9
 800ee1c:	683b      	ldr	r3, [r7, #0]
 800ee1e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ee20:	2300      	movs	r3, #0
 800ee22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ee26:	e002      	b.n	800ee2e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800ee28:	2304      	movs	r3, #4
 800ee2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800ee2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ee32:	4618      	mov	r0, r3
 800ee34:	3730      	adds	r7, #48	; 0x30
 800ee36:	46bd      	mov	sp, r7
 800ee38:	bd80      	pop	{r7, pc}
 800ee3a:	bf00      	nop
 800ee3c:	20000009 	.word	0x20000009

0800ee40 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800ee40:	b480      	push	{r7}
 800ee42:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800ee44:	4b03      	ldr	r3, [pc, #12]	; (800ee54 <BSP_SD_WriteCpltCallback+0x14>)
 800ee46:	2201      	movs	r2, #1
 800ee48:	601a      	str	r2, [r3, #0]
}
 800ee4a:	bf00      	nop
 800ee4c:	46bd      	mov	sp, r7
 800ee4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee52:	4770      	bx	lr
 800ee54:	200335e0 	.word	0x200335e0

0800ee58 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800ee58:	b480      	push	{r7}
 800ee5a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800ee5c:	4b03      	ldr	r3, [pc, #12]	; (800ee6c <BSP_SD_ReadCpltCallback+0x14>)
 800ee5e:	2201      	movs	r2, #1
 800ee60:	601a      	str	r2, [r3, #0]
}
 800ee62:	bf00      	nop
 800ee64:	46bd      	mov	sp, r7
 800ee66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee6a:	4770      	bx	lr
 800ee6c:	200335e4 	.word	0x200335e4

0800ee70 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ee70:	b580      	push	{r7, lr}
 800ee72:	b084      	sub	sp, #16
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	4603      	mov	r3, r0
 800ee78:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ee7a:	79fb      	ldrb	r3, [r7, #7]
 800ee7c:	4a08      	ldr	r2, [pc, #32]	; (800eea0 <disk_status+0x30>)
 800ee7e:	009b      	lsls	r3, r3, #2
 800ee80:	4413      	add	r3, r2
 800ee82:	685b      	ldr	r3, [r3, #4]
 800ee84:	685b      	ldr	r3, [r3, #4]
 800ee86:	79fa      	ldrb	r2, [r7, #7]
 800ee88:	4905      	ldr	r1, [pc, #20]	; (800eea0 <disk_status+0x30>)
 800ee8a:	440a      	add	r2, r1
 800ee8c:	7a12      	ldrb	r2, [r2, #8]
 800ee8e:	4610      	mov	r0, r2
 800ee90:	4798      	blx	r3
 800ee92:	4603      	mov	r3, r0
 800ee94:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ee96:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee98:	4618      	mov	r0, r3
 800ee9a:	3710      	adds	r7, #16
 800ee9c:	46bd      	mov	sp, r7
 800ee9e:	bd80      	pop	{r7, pc}
 800eea0:	20033610 	.word	0x20033610

0800eea4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800eea4:	b580      	push	{r7, lr}
 800eea6:	b084      	sub	sp, #16
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	4603      	mov	r3, r0
 800eeac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800eeae:	2300      	movs	r3, #0
 800eeb0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800eeb2:	79fb      	ldrb	r3, [r7, #7]
 800eeb4:	4a0d      	ldr	r2, [pc, #52]	; (800eeec <disk_initialize+0x48>)
 800eeb6:	5cd3      	ldrb	r3, [r2, r3]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d111      	bne.n	800eee0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800eebc:	79fb      	ldrb	r3, [r7, #7]
 800eebe:	4a0b      	ldr	r2, [pc, #44]	; (800eeec <disk_initialize+0x48>)
 800eec0:	2101      	movs	r1, #1
 800eec2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800eec4:	79fb      	ldrb	r3, [r7, #7]
 800eec6:	4a09      	ldr	r2, [pc, #36]	; (800eeec <disk_initialize+0x48>)
 800eec8:	009b      	lsls	r3, r3, #2
 800eeca:	4413      	add	r3, r2
 800eecc:	685b      	ldr	r3, [r3, #4]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	79fa      	ldrb	r2, [r7, #7]
 800eed2:	4906      	ldr	r1, [pc, #24]	; (800eeec <disk_initialize+0x48>)
 800eed4:	440a      	add	r2, r1
 800eed6:	7a12      	ldrb	r2, [r2, #8]
 800eed8:	4610      	mov	r0, r2
 800eeda:	4798      	blx	r3
 800eedc:	4603      	mov	r3, r0
 800eede:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800eee0:	7bfb      	ldrb	r3, [r7, #15]
}
 800eee2:	4618      	mov	r0, r3
 800eee4:	3710      	adds	r7, #16
 800eee6:	46bd      	mov	sp, r7
 800eee8:	bd80      	pop	{r7, pc}
 800eeea:	bf00      	nop
 800eeec:	20033610 	.word	0x20033610

0800eef0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800eef0:	b590      	push	{r4, r7, lr}
 800eef2:	b087      	sub	sp, #28
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	60b9      	str	r1, [r7, #8]
 800eef8:	607a      	str	r2, [r7, #4]
 800eefa:	603b      	str	r3, [r7, #0]
 800eefc:	4603      	mov	r3, r0
 800eefe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ef00:	7bfb      	ldrb	r3, [r7, #15]
 800ef02:	4a0a      	ldr	r2, [pc, #40]	; (800ef2c <disk_read+0x3c>)
 800ef04:	009b      	lsls	r3, r3, #2
 800ef06:	4413      	add	r3, r2
 800ef08:	685b      	ldr	r3, [r3, #4]
 800ef0a:	689c      	ldr	r4, [r3, #8]
 800ef0c:	7bfb      	ldrb	r3, [r7, #15]
 800ef0e:	4a07      	ldr	r2, [pc, #28]	; (800ef2c <disk_read+0x3c>)
 800ef10:	4413      	add	r3, r2
 800ef12:	7a18      	ldrb	r0, [r3, #8]
 800ef14:	683b      	ldr	r3, [r7, #0]
 800ef16:	687a      	ldr	r2, [r7, #4]
 800ef18:	68b9      	ldr	r1, [r7, #8]
 800ef1a:	47a0      	blx	r4
 800ef1c:	4603      	mov	r3, r0
 800ef1e:	75fb      	strb	r3, [r7, #23]
  return res;
 800ef20:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef22:	4618      	mov	r0, r3
 800ef24:	371c      	adds	r7, #28
 800ef26:	46bd      	mov	sp, r7
 800ef28:	bd90      	pop	{r4, r7, pc}
 800ef2a:	bf00      	nop
 800ef2c:	20033610 	.word	0x20033610

0800ef30 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ef30:	b590      	push	{r4, r7, lr}
 800ef32:	b087      	sub	sp, #28
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	60b9      	str	r1, [r7, #8]
 800ef38:	607a      	str	r2, [r7, #4]
 800ef3a:	603b      	str	r3, [r7, #0]
 800ef3c:	4603      	mov	r3, r0
 800ef3e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ef40:	7bfb      	ldrb	r3, [r7, #15]
 800ef42:	4a0a      	ldr	r2, [pc, #40]	; (800ef6c <disk_write+0x3c>)
 800ef44:	009b      	lsls	r3, r3, #2
 800ef46:	4413      	add	r3, r2
 800ef48:	685b      	ldr	r3, [r3, #4]
 800ef4a:	68dc      	ldr	r4, [r3, #12]
 800ef4c:	7bfb      	ldrb	r3, [r7, #15]
 800ef4e:	4a07      	ldr	r2, [pc, #28]	; (800ef6c <disk_write+0x3c>)
 800ef50:	4413      	add	r3, r2
 800ef52:	7a18      	ldrb	r0, [r3, #8]
 800ef54:	683b      	ldr	r3, [r7, #0]
 800ef56:	687a      	ldr	r2, [r7, #4]
 800ef58:	68b9      	ldr	r1, [r7, #8]
 800ef5a:	47a0      	blx	r4
 800ef5c:	4603      	mov	r3, r0
 800ef5e:	75fb      	strb	r3, [r7, #23]
  return res;
 800ef60:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef62:	4618      	mov	r0, r3
 800ef64:	371c      	adds	r7, #28
 800ef66:	46bd      	mov	sp, r7
 800ef68:	bd90      	pop	{r4, r7, pc}
 800ef6a:	bf00      	nop
 800ef6c:	20033610 	.word	0x20033610

0800ef70 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b084      	sub	sp, #16
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	4603      	mov	r3, r0
 800ef78:	603a      	str	r2, [r7, #0]
 800ef7a:	71fb      	strb	r3, [r7, #7]
 800ef7c:	460b      	mov	r3, r1
 800ef7e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ef80:	79fb      	ldrb	r3, [r7, #7]
 800ef82:	4a09      	ldr	r2, [pc, #36]	; (800efa8 <disk_ioctl+0x38>)
 800ef84:	009b      	lsls	r3, r3, #2
 800ef86:	4413      	add	r3, r2
 800ef88:	685b      	ldr	r3, [r3, #4]
 800ef8a:	691b      	ldr	r3, [r3, #16]
 800ef8c:	79fa      	ldrb	r2, [r7, #7]
 800ef8e:	4906      	ldr	r1, [pc, #24]	; (800efa8 <disk_ioctl+0x38>)
 800ef90:	440a      	add	r2, r1
 800ef92:	7a10      	ldrb	r0, [r2, #8]
 800ef94:	79b9      	ldrb	r1, [r7, #6]
 800ef96:	683a      	ldr	r2, [r7, #0]
 800ef98:	4798      	blx	r3
 800ef9a:	4603      	mov	r3, r0
 800ef9c:	73fb      	strb	r3, [r7, #15]
  return res;
 800ef9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800efa0:	4618      	mov	r0, r3
 800efa2:	3710      	adds	r7, #16
 800efa4:	46bd      	mov	sp, r7
 800efa6:	bd80      	pop	{r7, pc}
 800efa8:	20033610 	.word	0x20033610

0800efac <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800efac:	b480      	push	{r7}
 800efae:	b085      	sub	sp, #20
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	3301      	adds	r3, #1
 800efb8:	781b      	ldrb	r3, [r3, #0]
 800efba:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800efbc:	89fb      	ldrh	r3, [r7, #14]
 800efbe:	021b      	lsls	r3, r3, #8
 800efc0:	b21a      	sxth	r2, r3
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	781b      	ldrb	r3, [r3, #0]
 800efc6:	b21b      	sxth	r3, r3
 800efc8:	4313      	orrs	r3, r2
 800efca:	b21b      	sxth	r3, r3
 800efcc:	81fb      	strh	r3, [r7, #14]
	return rv;
 800efce:	89fb      	ldrh	r3, [r7, #14]
}
 800efd0:	4618      	mov	r0, r3
 800efd2:	3714      	adds	r7, #20
 800efd4:	46bd      	mov	sp, r7
 800efd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efda:	4770      	bx	lr

0800efdc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800efdc:	b480      	push	{r7}
 800efde:	b085      	sub	sp, #20
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	3303      	adds	r3, #3
 800efe8:	781b      	ldrb	r3, [r3, #0]
 800efea:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	021b      	lsls	r3, r3, #8
 800eff0:	687a      	ldr	r2, [r7, #4]
 800eff2:	3202      	adds	r2, #2
 800eff4:	7812      	ldrb	r2, [r2, #0]
 800eff6:	4313      	orrs	r3, r2
 800eff8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	021b      	lsls	r3, r3, #8
 800effe:	687a      	ldr	r2, [r7, #4]
 800f000:	3201      	adds	r2, #1
 800f002:	7812      	ldrb	r2, [r2, #0]
 800f004:	4313      	orrs	r3, r2
 800f006:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	021b      	lsls	r3, r3, #8
 800f00c:	687a      	ldr	r2, [r7, #4]
 800f00e:	7812      	ldrb	r2, [r2, #0]
 800f010:	4313      	orrs	r3, r2
 800f012:	60fb      	str	r3, [r7, #12]
	return rv;
 800f014:	68fb      	ldr	r3, [r7, #12]
}
 800f016:	4618      	mov	r0, r3
 800f018:	3714      	adds	r7, #20
 800f01a:	46bd      	mov	sp, r7
 800f01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f020:	4770      	bx	lr

0800f022 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800f022:	b480      	push	{r7}
 800f024:	b083      	sub	sp, #12
 800f026:	af00      	add	r7, sp, #0
 800f028:	6078      	str	r0, [r7, #4]
 800f02a:	460b      	mov	r3, r1
 800f02c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	1c5a      	adds	r2, r3, #1
 800f032:	607a      	str	r2, [r7, #4]
 800f034:	887a      	ldrh	r2, [r7, #2]
 800f036:	b2d2      	uxtb	r2, r2
 800f038:	701a      	strb	r2, [r3, #0]
 800f03a:	887b      	ldrh	r3, [r7, #2]
 800f03c:	0a1b      	lsrs	r3, r3, #8
 800f03e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	1c5a      	adds	r2, r3, #1
 800f044:	607a      	str	r2, [r7, #4]
 800f046:	887a      	ldrh	r2, [r7, #2]
 800f048:	b2d2      	uxtb	r2, r2
 800f04a:	701a      	strb	r2, [r3, #0]
}
 800f04c:	bf00      	nop
 800f04e:	370c      	adds	r7, #12
 800f050:	46bd      	mov	sp, r7
 800f052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f056:	4770      	bx	lr

0800f058 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800f058:	b480      	push	{r7}
 800f05a:	b083      	sub	sp, #12
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	6078      	str	r0, [r7, #4]
 800f060:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	1c5a      	adds	r2, r3, #1
 800f066:	607a      	str	r2, [r7, #4]
 800f068:	683a      	ldr	r2, [r7, #0]
 800f06a:	b2d2      	uxtb	r2, r2
 800f06c:	701a      	strb	r2, [r3, #0]
 800f06e:	683b      	ldr	r3, [r7, #0]
 800f070:	0a1b      	lsrs	r3, r3, #8
 800f072:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	1c5a      	adds	r2, r3, #1
 800f078:	607a      	str	r2, [r7, #4]
 800f07a:	683a      	ldr	r2, [r7, #0]
 800f07c:	b2d2      	uxtb	r2, r2
 800f07e:	701a      	strb	r2, [r3, #0]
 800f080:	683b      	ldr	r3, [r7, #0]
 800f082:	0a1b      	lsrs	r3, r3, #8
 800f084:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	1c5a      	adds	r2, r3, #1
 800f08a:	607a      	str	r2, [r7, #4]
 800f08c:	683a      	ldr	r2, [r7, #0]
 800f08e:	b2d2      	uxtb	r2, r2
 800f090:	701a      	strb	r2, [r3, #0]
 800f092:	683b      	ldr	r3, [r7, #0]
 800f094:	0a1b      	lsrs	r3, r3, #8
 800f096:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	1c5a      	adds	r2, r3, #1
 800f09c:	607a      	str	r2, [r7, #4]
 800f09e:	683a      	ldr	r2, [r7, #0]
 800f0a0:	b2d2      	uxtb	r2, r2
 800f0a2:	701a      	strb	r2, [r3, #0]
}
 800f0a4:	bf00      	nop
 800f0a6:	370c      	adds	r7, #12
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ae:	4770      	bx	lr

0800f0b0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f0b0:	b480      	push	{r7}
 800f0b2:	b087      	sub	sp, #28
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	60f8      	str	r0, [r7, #12]
 800f0b8:	60b9      	str	r1, [r7, #8]
 800f0ba:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800f0c0:	68bb      	ldr	r3, [r7, #8]
 800f0c2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d00d      	beq.n	800f0e6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800f0ca:	693a      	ldr	r2, [r7, #16]
 800f0cc:	1c53      	adds	r3, r2, #1
 800f0ce:	613b      	str	r3, [r7, #16]
 800f0d0:	697b      	ldr	r3, [r7, #20]
 800f0d2:	1c59      	adds	r1, r3, #1
 800f0d4:	6179      	str	r1, [r7, #20]
 800f0d6:	7812      	ldrb	r2, [r2, #0]
 800f0d8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	3b01      	subs	r3, #1
 800f0de:	607b      	str	r3, [r7, #4]
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d1f1      	bne.n	800f0ca <mem_cpy+0x1a>
	}
}
 800f0e6:	bf00      	nop
 800f0e8:	371c      	adds	r7, #28
 800f0ea:	46bd      	mov	sp, r7
 800f0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f0:	4770      	bx	lr

0800f0f2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800f0f2:	b480      	push	{r7}
 800f0f4:	b087      	sub	sp, #28
 800f0f6:	af00      	add	r7, sp, #0
 800f0f8:	60f8      	str	r0, [r7, #12]
 800f0fa:	60b9      	str	r1, [r7, #8]
 800f0fc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800f102:	697b      	ldr	r3, [r7, #20]
 800f104:	1c5a      	adds	r2, r3, #1
 800f106:	617a      	str	r2, [r7, #20]
 800f108:	68ba      	ldr	r2, [r7, #8]
 800f10a:	b2d2      	uxtb	r2, r2
 800f10c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	3b01      	subs	r3, #1
 800f112:	607b      	str	r3, [r7, #4]
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d1f3      	bne.n	800f102 <mem_set+0x10>
}
 800f11a:	bf00      	nop
 800f11c:	371c      	adds	r7, #28
 800f11e:	46bd      	mov	sp, r7
 800f120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f124:	4770      	bx	lr

0800f126 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800f126:	b480      	push	{r7}
 800f128:	b089      	sub	sp, #36	; 0x24
 800f12a:	af00      	add	r7, sp, #0
 800f12c:	60f8      	str	r0, [r7, #12]
 800f12e:	60b9      	str	r1, [r7, #8]
 800f130:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	61fb      	str	r3, [r7, #28]
 800f136:	68bb      	ldr	r3, [r7, #8]
 800f138:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800f13a:	2300      	movs	r3, #0
 800f13c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800f13e:	69fb      	ldr	r3, [r7, #28]
 800f140:	1c5a      	adds	r2, r3, #1
 800f142:	61fa      	str	r2, [r7, #28]
 800f144:	781b      	ldrb	r3, [r3, #0]
 800f146:	4619      	mov	r1, r3
 800f148:	69bb      	ldr	r3, [r7, #24]
 800f14a:	1c5a      	adds	r2, r3, #1
 800f14c:	61ba      	str	r2, [r7, #24]
 800f14e:	781b      	ldrb	r3, [r3, #0]
 800f150:	1acb      	subs	r3, r1, r3
 800f152:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	3b01      	subs	r3, #1
 800f158:	607b      	str	r3, [r7, #4]
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d002      	beq.n	800f166 <mem_cmp+0x40>
 800f160:	697b      	ldr	r3, [r7, #20]
 800f162:	2b00      	cmp	r3, #0
 800f164:	d0eb      	beq.n	800f13e <mem_cmp+0x18>

	return r;
 800f166:	697b      	ldr	r3, [r7, #20]
}
 800f168:	4618      	mov	r0, r3
 800f16a:	3724      	adds	r7, #36	; 0x24
 800f16c:	46bd      	mov	sp, r7
 800f16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f172:	4770      	bx	lr

0800f174 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800f174:	b480      	push	{r7}
 800f176:	b083      	sub	sp, #12
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
 800f17c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800f17e:	e002      	b.n	800f186 <chk_chr+0x12>
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	3301      	adds	r3, #1
 800f184:	607b      	str	r3, [r7, #4]
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	781b      	ldrb	r3, [r3, #0]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d005      	beq.n	800f19a <chk_chr+0x26>
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	781b      	ldrb	r3, [r3, #0]
 800f192:	461a      	mov	r2, r3
 800f194:	683b      	ldr	r3, [r7, #0]
 800f196:	4293      	cmp	r3, r2
 800f198:	d1f2      	bne.n	800f180 <chk_chr+0xc>
	return *str;
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	781b      	ldrb	r3, [r3, #0]
}
 800f19e:	4618      	mov	r0, r3
 800f1a0:	370c      	adds	r7, #12
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a8:	4770      	bx	lr
	...

0800f1ac <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f1ac:	b480      	push	{r7}
 800f1ae:	b085      	sub	sp, #20
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
 800f1b4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	60bb      	str	r3, [r7, #8]
 800f1ba:	68bb      	ldr	r3, [r7, #8]
 800f1bc:	60fb      	str	r3, [r7, #12]
 800f1be:	e029      	b.n	800f214 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800f1c0:	4a27      	ldr	r2, [pc, #156]	; (800f260 <chk_lock+0xb4>)
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	011b      	lsls	r3, r3, #4
 800f1c6:	4413      	add	r3, r2
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d01d      	beq.n	800f20a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f1ce:	4a24      	ldr	r2, [pc, #144]	; (800f260 <chk_lock+0xb4>)
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	011b      	lsls	r3, r3, #4
 800f1d4:	4413      	add	r3, r2
 800f1d6:	681a      	ldr	r2, [r3, #0]
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	429a      	cmp	r2, r3
 800f1de:	d116      	bne.n	800f20e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800f1e0:	4a1f      	ldr	r2, [pc, #124]	; (800f260 <chk_lock+0xb4>)
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	011b      	lsls	r3, r3, #4
 800f1e6:	4413      	add	r3, r2
 800f1e8:	3304      	adds	r3, #4
 800f1ea:	681a      	ldr	r2, [r3, #0]
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f1f0:	429a      	cmp	r2, r3
 800f1f2:	d10c      	bne.n	800f20e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f1f4:	4a1a      	ldr	r2, [pc, #104]	; (800f260 <chk_lock+0xb4>)
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	011b      	lsls	r3, r3, #4
 800f1fa:	4413      	add	r3, r2
 800f1fc:	3308      	adds	r3, #8
 800f1fe:	681a      	ldr	r2, [r3, #0]
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800f204:	429a      	cmp	r2, r3
 800f206:	d102      	bne.n	800f20e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f208:	e007      	b.n	800f21a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800f20a:	2301      	movs	r3, #1
 800f20c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	3301      	adds	r3, #1
 800f212:	60fb      	str	r3, [r7, #12]
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	2b01      	cmp	r3, #1
 800f218:	d9d2      	bls.n	800f1c0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	2b02      	cmp	r3, #2
 800f21e:	d109      	bne.n	800f234 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800f220:	68bb      	ldr	r3, [r7, #8]
 800f222:	2b00      	cmp	r3, #0
 800f224:	d102      	bne.n	800f22c <chk_lock+0x80>
 800f226:	683b      	ldr	r3, [r7, #0]
 800f228:	2b02      	cmp	r3, #2
 800f22a:	d101      	bne.n	800f230 <chk_lock+0x84>
 800f22c:	2300      	movs	r3, #0
 800f22e:	e010      	b.n	800f252 <chk_lock+0xa6>
 800f230:	2312      	movs	r3, #18
 800f232:	e00e      	b.n	800f252 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800f234:	683b      	ldr	r3, [r7, #0]
 800f236:	2b00      	cmp	r3, #0
 800f238:	d108      	bne.n	800f24c <chk_lock+0xa0>
 800f23a:	4a09      	ldr	r2, [pc, #36]	; (800f260 <chk_lock+0xb4>)
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	011b      	lsls	r3, r3, #4
 800f240:	4413      	add	r3, r2
 800f242:	330c      	adds	r3, #12
 800f244:	881b      	ldrh	r3, [r3, #0]
 800f246:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f24a:	d101      	bne.n	800f250 <chk_lock+0xa4>
 800f24c:	2310      	movs	r3, #16
 800f24e:	e000      	b.n	800f252 <chk_lock+0xa6>
 800f250:	2300      	movs	r3, #0
}
 800f252:	4618      	mov	r0, r3
 800f254:	3714      	adds	r7, #20
 800f256:	46bd      	mov	sp, r7
 800f258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f25c:	4770      	bx	lr
 800f25e:	bf00      	nop
 800f260:	200335f0 	.word	0x200335f0

0800f264 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800f264:	b480      	push	{r7}
 800f266:	b083      	sub	sp, #12
 800f268:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f26a:	2300      	movs	r3, #0
 800f26c:	607b      	str	r3, [r7, #4]
 800f26e:	e002      	b.n	800f276 <enq_lock+0x12>
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	3301      	adds	r3, #1
 800f274:	607b      	str	r3, [r7, #4]
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	2b01      	cmp	r3, #1
 800f27a:	d806      	bhi.n	800f28a <enq_lock+0x26>
 800f27c:	4a09      	ldr	r2, [pc, #36]	; (800f2a4 <enq_lock+0x40>)
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	011b      	lsls	r3, r3, #4
 800f282:	4413      	add	r3, r2
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d1f2      	bne.n	800f270 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	2b02      	cmp	r3, #2
 800f28e:	bf14      	ite	ne
 800f290:	2301      	movne	r3, #1
 800f292:	2300      	moveq	r3, #0
 800f294:	b2db      	uxtb	r3, r3
}
 800f296:	4618      	mov	r0, r3
 800f298:	370c      	adds	r7, #12
 800f29a:	46bd      	mov	sp, r7
 800f29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a0:	4770      	bx	lr
 800f2a2:	bf00      	nop
 800f2a4:	200335f0 	.word	0x200335f0

0800f2a8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f2a8:	b480      	push	{r7}
 800f2aa:	b085      	sub	sp, #20
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	6078      	str	r0, [r7, #4]
 800f2b0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	60fb      	str	r3, [r7, #12]
 800f2b6:	e01f      	b.n	800f2f8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800f2b8:	4a41      	ldr	r2, [pc, #260]	; (800f3c0 <inc_lock+0x118>)
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	011b      	lsls	r3, r3, #4
 800f2be:	4413      	add	r3, r2
 800f2c0:	681a      	ldr	r2, [r3, #0]
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	429a      	cmp	r2, r3
 800f2c8:	d113      	bne.n	800f2f2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800f2ca:	4a3d      	ldr	r2, [pc, #244]	; (800f3c0 <inc_lock+0x118>)
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	011b      	lsls	r3, r3, #4
 800f2d0:	4413      	add	r3, r2
 800f2d2:	3304      	adds	r3, #4
 800f2d4:	681a      	ldr	r2, [r3, #0]
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800f2da:	429a      	cmp	r2, r3
 800f2dc:	d109      	bne.n	800f2f2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800f2de:	4a38      	ldr	r2, [pc, #224]	; (800f3c0 <inc_lock+0x118>)
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	011b      	lsls	r3, r3, #4
 800f2e4:	4413      	add	r3, r2
 800f2e6:	3308      	adds	r3, #8
 800f2e8:	681a      	ldr	r2, [r3, #0]
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800f2ee:	429a      	cmp	r2, r3
 800f2f0:	d006      	beq.n	800f300 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	3301      	adds	r3, #1
 800f2f6:	60fb      	str	r3, [r7, #12]
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	2b01      	cmp	r3, #1
 800f2fc:	d9dc      	bls.n	800f2b8 <inc_lock+0x10>
 800f2fe:	e000      	b.n	800f302 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800f300:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	2b02      	cmp	r3, #2
 800f306:	d132      	bne.n	800f36e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f308:	2300      	movs	r3, #0
 800f30a:	60fb      	str	r3, [r7, #12]
 800f30c:	e002      	b.n	800f314 <inc_lock+0x6c>
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	3301      	adds	r3, #1
 800f312:	60fb      	str	r3, [r7, #12]
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	2b01      	cmp	r3, #1
 800f318:	d806      	bhi.n	800f328 <inc_lock+0x80>
 800f31a:	4a29      	ldr	r2, [pc, #164]	; (800f3c0 <inc_lock+0x118>)
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	011b      	lsls	r3, r3, #4
 800f320:	4413      	add	r3, r2
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	2b00      	cmp	r3, #0
 800f326:	d1f2      	bne.n	800f30e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	2b02      	cmp	r3, #2
 800f32c:	d101      	bne.n	800f332 <inc_lock+0x8a>
 800f32e:	2300      	movs	r3, #0
 800f330:	e040      	b.n	800f3b4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	681a      	ldr	r2, [r3, #0]
 800f336:	4922      	ldr	r1, [pc, #136]	; (800f3c0 <inc_lock+0x118>)
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	011b      	lsls	r3, r3, #4
 800f33c:	440b      	add	r3, r1
 800f33e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	689a      	ldr	r2, [r3, #8]
 800f344:	491e      	ldr	r1, [pc, #120]	; (800f3c0 <inc_lock+0x118>)
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	011b      	lsls	r3, r3, #4
 800f34a:	440b      	add	r3, r1
 800f34c:	3304      	adds	r3, #4
 800f34e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	695a      	ldr	r2, [r3, #20]
 800f354:	491a      	ldr	r1, [pc, #104]	; (800f3c0 <inc_lock+0x118>)
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	011b      	lsls	r3, r3, #4
 800f35a:	440b      	add	r3, r1
 800f35c:	3308      	adds	r3, #8
 800f35e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800f360:	4a17      	ldr	r2, [pc, #92]	; (800f3c0 <inc_lock+0x118>)
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	011b      	lsls	r3, r3, #4
 800f366:	4413      	add	r3, r2
 800f368:	330c      	adds	r3, #12
 800f36a:	2200      	movs	r2, #0
 800f36c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800f36e:	683b      	ldr	r3, [r7, #0]
 800f370:	2b00      	cmp	r3, #0
 800f372:	d009      	beq.n	800f388 <inc_lock+0xe0>
 800f374:	4a12      	ldr	r2, [pc, #72]	; (800f3c0 <inc_lock+0x118>)
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	011b      	lsls	r3, r3, #4
 800f37a:	4413      	add	r3, r2
 800f37c:	330c      	adds	r3, #12
 800f37e:	881b      	ldrh	r3, [r3, #0]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d001      	beq.n	800f388 <inc_lock+0xe0>
 800f384:	2300      	movs	r3, #0
 800f386:	e015      	b.n	800f3b4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800f388:	683b      	ldr	r3, [r7, #0]
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d108      	bne.n	800f3a0 <inc_lock+0xf8>
 800f38e:	4a0c      	ldr	r2, [pc, #48]	; (800f3c0 <inc_lock+0x118>)
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	011b      	lsls	r3, r3, #4
 800f394:	4413      	add	r3, r2
 800f396:	330c      	adds	r3, #12
 800f398:	881b      	ldrh	r3, [r3, #0]
 800f39a:	3301      	adds	r3, #1
 800f39c:	b29a      	uxth	r2, r3
 800f39e:	e001      	b.n	800f3a4 <inc_lock+0xfc>
 800f3a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f3a4:	4906      	ldr	r1, [pc, #24]	; (800f3c0 <inc_lock+0x118>)
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	011b      	lsls	r3, r3, #4
 800f3aa:	440b      	add	r3, r1
 800f3ac:	330c      	adds	r3, #12
 800f3ae:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	3301      	adds	r3, #1
}
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	3714      	adds	r7, #20
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3be:	4770      	bx	lr
 800f3c0:	200335f0 	.word	0x200335f0

0800f3c4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800f3c4:	b480      	push	{r7}
 800f3c6:	b085      	sub	sp, #20
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	3b01      	subs	r3, #1
 800f3d0:	607b      	str	r3, [r7, #4]
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	2b01      	cmp	r3, #1
 800f3d6:	d825      	bhi.n	800f424 <dec_lock+0x60>
		n = Files[i].ctr;
 800f3d8:	4a17      	ldr	r2, [pc, #92]	; (800f438 <dec_lock+0x74>)
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	011b      	lsls	r3, r3, #4
 800f3de:	4413      	add	r3, r2
 800f3e0:	330c      	adds	r3, #12
 800f3e2:	881b      	ldrh	r3, [r3, #0]
 800f3e4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800f3e6:	89fb      	ldrh	r3, [r7, #14]
 800f3e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f3ec:	d101      	bne.n	800f3f2 <dec_lock+0x2e>
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800f3f2:	89fb      	ldrh	r3, [r7, #14]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d002      	beq.n	800f3fe <dec_lock+0x3a>
 800f3f8:	89fb      	ldrh	r3, [r7, #14]
 800f3fa:	3b01      	subs	r3, #1
 800f3fc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800f3fe:	4a0e      	ldr	r2, [pc, #56]	; (800f438 <dec_lock+0x74>)
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	011b      	lsls	r3, r3, #4
 800f404:	4413      	add	r3, r2
 800f406:	330c      	adds	r3, #12
 800f408:	89fa      	ldrh	r2, [r7, #14]
 800f40a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800f40c:	89fb      	ldrh	r3, [r7, #14]
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d105      	bne.n	800f41e <dec_lock+0x5a>
 800f412:	4a09      	ldr	r2, [pc, #36]	; (800f438 <dec_lock+0x74>)
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	011b      	lsls	r3, r3, #4
 800f418:	4413      	add	r3, r2
 800f41a:	2200      	movs	r2, #0
 800f41c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800f41e:	2300      	movs	r3, #0
 800f420:	737b      	strb	r3, [r7, #13]
 800f422:	e001      	b.n	800f428 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800f424:	2302      	movs	r3, #2
 800f426:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800f428:	7b7b      	ldrb	r3, [r7, #13]
}
 800f42a:	4618      	mov	r0, r3
 800f42c:	3714      	adds	r7, #20
 800f42e:	46bd      	mov	sp, r7
 800f430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f434:	4770      	bx	lr
 800f436:	bf00      	nop
 800f438:	200335f0 	.word	0x200335f0

0800f43c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800f43c:	b480      	push	{r7}
 800f43e:	b085      	sub	sp, #20
 800f440:	af00      	add	r7, sp, #0
 800f442:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800f444:	2300      	movs	r3, #0
 800f446:	60fb      	str	r3, [r7, #12]
 800f448:	e010      	b.n	800f46c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f44a:	4a0d      	ldr	r2, [pc, #52]	; (800f480 <clear_lock+0x44>)
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	011b      	lsls	r3, r3, #4
 800f450:	4413      	add	r3, r2
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	687a      	ldr	r2, [r7, #4]
 800f456:	429a      	cmp	r2, r3
 800f458:	d105      	bne.n	800f466 <clear_lock+0x2a>
 800f45a:	4a09      	ldr	r2, [pc, #36]	; (800f480 <clear_lock+0x44>)
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	011b      	lsls	r3, r3, #4
 800f460:	4413      	add	r3, r2
 800f462:	2200      	movs	r2, #0
 800f464:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	3301      	adds	r3, #1
 800f46a:	60fb      	str	r3, [r7, #12]
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	2b01      	cmp	r3, #1
 800f470:	d9eb      	bls.n	800f44a <clear_lock+0xe>
	}
}
 800f472:	bf00      	nop
 800f474:	3714      	adds	r7, #20
 800f476:	46bd      	mov	sp, r7
 800f478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f47c:	4770      	bx	lr
 800f47e:	bf00      	nop
 800f480:	200335f0 	.word	0x200335f0

0800f484 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800f484:	b580      	push	{r7, lr}
 800f486:	b086      	sub	sp, #24
 800f488:	af00      	add	r7, sp, #0
 800f48a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800f48c:	2300      	movs	r3, #0
 800f48e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	78db      	ldrb	r3, [r3, #3]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d034      	beq.n	800f502 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f49c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	7858      	ldrb	r0, [r3, #1]
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f4a8:	2301      	movs	r3, #1
 800f4aa:	697a      	ldr	r2, [r7, #20]
 800f4ac:	f7ff fd40 	bl	800ef30 <disk_write>
 800f4b0:	4603      	mov	r3, r0
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d002      	beq.n	800f4bc <sync_window+0x38>
			res = FR_DISK_ERR;
 800f4b6:	2301      	movs	r3, #1
 800f4b8:	73fb      	strb	r3, [r7, #15]
 800f4ba:	e022      	b.n	800f502 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	2200      	movs	r2, #0
 800f4c0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4c6:	697a      	ldr	r2, [r7, #20]
 800f4c8:	1ad2      	subs	r2, r2, r3
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	6a1b      	ldr	r3, [r3, #32]
 800f4ce:	429a      	cmp	r2, r3
 800f4d0:	d217      	bcs.n	800f502 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	789b      	ldrb	r3, [r3, #2]
 800f4d6:	613b      	str	r3, [r7, #16]
 800f4d8:	e010      	b.n	800f4fc <sync_window+0x78>
					wsect += fs->fsize;
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	6a1b      	ldr	r3, [r3, #32]
 800f4de:	697a      	ldr	r2, [r7, #20]
 800f4e0:	4413      	add	r3, r2
 800f4e2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	7858      	ldrb	r0, [r3, #1]
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f4ee:	2301      	movs	r3, #1
 800f4f0:	697a      	ldr	r2, [r7, #20]
 800f4f2:	f7ff fd1d 	bl	800ef30 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f4f6:	693b      	ldr	r3, [r7, #16]
 800f4f8:	3b01      	subs	r3, #1
 800f4fa:	613b      	str	r3, [r7, #16]
 800f4fc:	693b      	ldr	r3, [r7, #16]
 800f4fe:	2b01      	cmp	r3, #1
 800f500:	d8eb      	bhi.n	800f4da <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800f502:	7bfb      	ldrb	r3, [r7, #15]
}
 800f504:	4618      	mov	r0, r3
 800f506:	3718      	adds	r7, #24
 800f508:	46bd      	mov	sp, r7
 800f50a:	bd80      	pop	{r7, pc}

0800f50c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800f50c:	b580      	push	{r7, lr}
 800f50e:	b084      	sub	sp, #16
 800f510:	af00      	add	r7, sp, #0
 800f512:	6078      	str	r0, [r7, #4]
 800f514:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800f516:	2300      	movs	r3, #0
 800f518:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f51e:	683a      	ldr	r2, [r7, #0]
 800f520:	429a      	cmp	r2, r3
 800f522:	d01b      	beq.n	800f55c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800f524:	6878      	ldr	r0, [r7, #4]
 800f526:	f7ff ffad 	bl	800f484 <sync_window>
 800f52a:	4603      	mov	r3, r0
 800f52c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800f52e:	7bfb      	ldrb	r3, [r7, #15]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d113      	bne.n	800f55c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	7858      	ldrb	r0, [r3, #1]
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f53e:	2301      	movs	r3, #1
 800f540:	683a      	ldr	r2, [r7, #0]
 800f542:	f7ff fcd5 	bl	800eef0 <disk_read>
 800f546:	4603      	mov	r3, r0
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d004      	beq.n	800f556 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800f54c:	f04f 33ff 	mov.w	r3, #4294967295
 800f550:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800f552:	2301      	movs	r3, #1
 800f554:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	683a      	ldr	r2, [r7, #0]
 800f55a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800f55c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f55e:	4618      	mov	r0, r3
 800f560:	3710      	adds	r7, #16
 800f562:	46bd      	mov	sp, r7
 800f564:	bd80      	pop	{r7, pc}
	...

0800f568 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800f568:	b580      	push	{r7, lr}
 800f56a:	b084      	sub	sp, #16
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800f570:	6878      	ldr	r0, [r7, #4]
 800f572:	f7ff ff87 	bl	800f484 <sync_window>
 800f576:	4603      	mov	r3, r0
 800f578:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f57a:	7bfb      	ldrb	r3, [r7, #15]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d159      	bne.n	800f634 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	781b      	ldrb	r3, [r3, #0]
 800f584:	2b03      	cmp	r3, #3
 800f586:	d149      	bne.n	800f61c <sync_fs+0xb4>
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	791b      	ldrb	r3, [r3, #4]
 800f58c:	2b01      	cmp	r3, #1
 800f58e:	d145      	bne.n	800f61c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	899b      	ldrh	r3, [r3, #12]
 800f59a:	461a      	mov	r2, r3
 800f59c:	2100      	movs	r1, #0
 800f59e:	f7ff fda8 	bl	800f0f2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	3338      	adds	r3, #56	; 0x38
 800f5a6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f5aa:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	f7ff fd37 	bl	800f022 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	3338      	adds	r3, #56	; 0x38
 800f5b8:	4921      	ldr	r1, [pc, #132]	; (800f640 <sync_fs+0xd8>)
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	f7ff fd4c 	bl	800f058 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	3338      	adds	r3, #56	; 0x38
 800f5c4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f5c8:	491e      	ldr	r1, [pc, #120]	; (800f644 <sync_fs+0xdc>)
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	f7ff fd44 	bl	800f058 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	3338      	adds	r3, #56	; 0x38
 800f5d4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	695b      	ldr	r3, [r3, #20]
 800f5dc:	4619      	mov	r1, r3
 800f5de:	4610      	mov	r0, r2
 800f5e0:	f7ff fd3a 	bl	800f058 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	3338      	adds	r3, #56	; 0x38
 800f5e8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	691b      	ldr	r3, [r3, #16]
 800f5f0:	4619      	mov	r1, r3
 800f5f2:	4610      	mov	r0, r2
 800f5f4:	f7ff fd30 	bl	800f058 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5fc:	1c5a      	adds	r2, r3, #1
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	7858      	ldrb	r0, [r3, #1]
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f610:	2301      	movs	r3, #1
 800f612:	f7ff fc8d 	bl	800ef30 <disk_write>
			fs->fsi_flag = 0;
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	2200      	movs	r2, #0
 800f61a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	785b      	ldrb	r3, [r3, #1]
 800f620:	2200      	movs	r2, #0
 800f622:	2100      	movs	r1, #0
 800f624:	4618      	mov	r0, r3
 800f626:	f7ff fca3 	bl	800ef70 <disk_ioctl>
 800f62a:	4603      	mov	r3, r0
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d001      	beq.n	800f634 <sync_fs+0xcc>
 800f630:	2301      	movs	r3, #1
 800f632:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800f634:	7bfb      	ldrb	r3, [r7, #15]
}
 800f636:	4618      	mov	r0, r3
 800f638:	3710      	adds	r7, #16
 800f63a:	46bd      	mov	sp, r7
 800f63c:	bd80      	pop	{r7, pc}
 800f63e:	bf00      	nop
 800f640:	41615252 	.word	0x41615252
 800f644:	61417272 	.word	0x61417272

0800f648 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800f648:	b480      	push	{r7}
 800f64a:	b083      	sub	sp, #12
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	6078      	str	r0, [r7, #4]
 800f650:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800f652:	683b      	ldr	r3, [r7, #0]
 800f654:	3b02      	subs	r3, #2
 800f656:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	69db      	ldr	r3, [r3, #28]
 800f65c:	3b02      	subs	r3, #2
 800f65e:	683a      	ldr	r2, [r7, #0]
 800f660:	429a      	cmp	r2, r3
 800f662:	d301      	bcc.n	800f668 <clust2sect+0x20>
 800f664:	2300      	movs	r3, #0
 800f666:	e008      	b.n	800f67a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	895b      	ldrh	r3, [r3, #10]
 800f66c:	461a      	mov	r2, r3
 800f66e:	683b      	ldr	r3, [r7, #0]
 800f670:	fb03 f202 	mul.w	r2, r3, r2
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f678:	4413      	add	r3, r2
}
 800f67a:	4618      	mov	r0, r3
 800f67c:	370c      	adds	r7, #12
 800f67e:	46bd      	mov	sp, r7
 800f680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f684:	4770      	bx	lr

0800f686 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800f686:	b580      	push	{r7, lr}
 800f688:	b086      	sub	sp, #24
 800f68a:	af00      	add	r7, sp, #0
 800f68c:	6078      	str	r0, [r7, #4]
 800f68e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f696:	683b      	ldr	r3, [r7, #0]
 800f698:	2b01      	cmp	r3, #1
 800f69a:	d904      	bls.n	800f6a6 <get_fat+0x20>
 800f69c:	693b      	ldr	r3, [r7, #16]
 800f69e:	69db      	ldr	r3, [r3, #28]
 800f6a0:	683a      	ldr	r2, [r7, #0]
 800f6a2:	429a      	cmp	r2, r3
 800f6a4:	d302      	bcc.n	800f6ac <get_fat+0x26>
		val = 1;	/* Internal error */
 800f6a6:	2301      	movs	r3, #1
 800f6a8:	617b      	str	r3, [r7, #20]
 800f6aa:	e0b7      	b.n	800f81c <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800f6ac:	f04f 33ff 	mov.w	r3, #4294967295
 800f6b0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800f6b2:	693b      	ldr	r3, [r7, #16]
 800f6b4:	781b      	ldrb	r3, [r3, #0]
 800f6b6:	2b02      	cmp	r3, #2
 800f6b8:	d05a      	beq.n	800f770 <get_fat+0xea>
 800f6ba:	2b03      	cmp	r3, #3
 800f6bc:	d07d      	beq.n	800f7ba <get_fat+0x134>
 800f6be:	2b01      	cmp	r3, #1
 800f6c0:	f040 80a2 	bne.w	800f808 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800f6c4:	683b      	ldr	r3, [r7, #0]
 800f6c6:	60fb      	str	r3, [r7, #12]
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	085b      	lsrs	r3, r3, #1
 800f6cc:	68fa      	ldr	r2, [r7, #12]
 800f6ce:	4413      	add	r3, r2
 800f6d0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f6d2:	693b      	ldr	r3, [r7, #16]
 800f6d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f6d6:	693b      	ldr	r3, [r7, #16]
 800f6d8:	899b      	ldrh	r3, [r3, #12]
 800f6da:	4619      	mov	r1, r3
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	fbb3 f3f1 	udiv	r3, r3, r1
 800f6e2:	4413      	add	r3, r2
 800f6e4:	4619      	mov	r1, r3
 800f6e6:	6938      	ldr	r0, [r7, #16]
 800f6e8:	f7ff ff10 	bl	800f50c <move_window>
 800f6ec:	4603      	mov	r3, r0
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	f040 808d 	bne.w	800f80e <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	1c5a      	adds	r2, r3, #1
 800f6f8:	60fa      	str	r2, [r7, #12]
 800f6fa:	693a      	ldr	r2, [r7, #16]
 800f6fc:	8992      	ldrh	r2, [r2, #12]
 800f6fe:	fbb3 f1f2 	udiv	r1, r3, r2
 800f702:	fb02 f201 	mul.w	r2, r2, r1
 800f706:	1a9b      	subs	r3, r3, r2
 800f708:	693a      	ldr	r2, [r7, #16]
 800f70a:	4413      	add	r3, r2
 800f70c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f710:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f712:	693b      	ldr	r3, [r7, #16]
 800f714:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f716:	693b      	ldr	r3, [r7, #16]
 800f718:	899b      	ldrh	r3, [r3, #12]
 800f71a:	4619      	mov	r1, r3
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	fbb3 f3f1 	udiv	r3, r3, r1
 800f722:	4413      	add	r3, r2
 800f724:	4619      	mov	r1, r3
 800f726:	6938      	ldr	r0, [r7, #16]
 800f728:	f7ff fef0 	bl	800f50c <move_window>
 800f72c:	4603      	mov	r3, r0
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d16f      	bne.n	800f812 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800f732:	693b      	ldr	r3, [r7, #16]
 800f734:	899b      	ldrh	r3, [r3, #12]
 800f736:	461a      	mov	r2, r3
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	fbb3 f1f2 	udiv	r1, r3, r2
 800f73e:	fb02 f201 	mul.w	r2, r2, r1
 800f742:	1a9b      	subs	r3, r3, r2
 800f744:	693a      	ldr	r2, [r7, #16]
 800f746:	4413      	add	r3, r2
 800f748:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f74c:	021b      	lsls	r3, r3, #8
 800f74e:	461a      	mov	r2, r3
 800f750:	68bb      	ldr	r3, [r7, #8]
 800f752:	4313      	orrs	r3, r2
 800f754:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f756:	683b      	ldr	r3, [r7, #0]
 800f758:	f003 0301 	and.w	r3, r3, #1
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d002      	beq.n	800f766 <get_fat+0xe0>
 800f760:	68bb      	ldr	r3, [r7, #8]
 800f762:	091b      	lsrs	r3, r3, #4
 800f764:	e002      	b.n	800f76c <get_fat+0xe6>
 800f766:	68bb      	ldr	r3, [r7, #8]
 800f768:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f76c:	617b      	str	r3, [r7, #20]
			break;
 800f76e:	e055      	b.n	800f81c <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f770:	693b      	ldr	r3, [r7, #16]
 800f772:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f774:	693b      	ldr	r3, [r7, #16]
 800f776:	899b      	ldrh	r3, [r3, #12]
 800f778:	085b      	lsrs	r3, r3, #1
 800f77a:	b29b      	uxth	r3, r3
 800f77c:	4619      	mov	r1, r3
 800f77e:	683b      	ldr	r3, [r7, #0]
 800f780:	fbb3 f3f1 	udiv	r3, r3, r1
 800f784:	4413      	add	r3, r2
 800f786:	4619      	mov	r1, r3
 800f788:	6938      	ldr	r0, [r7, #16]
 800f78a:	f7ff febf 	bl	800f50c <move_window>
 800f78e:	4603      	mov	r3, r0
 800f790:	2b00      	cmp	r3, #0
 800f792:	d140      	bne.n	800f816 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800f794:	693b      	ldr	r3, [r7, #16]
 800f796:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f79a:	683b      	ldr	r3, [r7, #0]
 800f79c:	005b      	lsls	r3, r3, #1
 800f79e:	693a      	ldr	r2, [r7, #16]
 800f7a0:	8992      	ldrh	r2, [r2, #12]
 800f7a2:	fbb3 f0f2 	udiv	r0, r3, r2
 800f7a6:	fb02 f200 	mul.w	r2, r2, r0
 800f7aa:	1a9b      	subs	r3, r3, r2
 800f7ac:	440b      	add	r3, r1
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	f7ff fbfc 	bl	800efac <ld_word>
 800f7b4:	4603      	mov	r3, r0
 800f7b6:	617b      	str	r3, [r7, #20]
			break;
 800f7b8:	e030      	b.n	800f81c <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f7ba:	693b      	ldr	r3, [r7, #16]
 800f7bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f7be:	693b      	ldr	r3, [r7, #16]
 800f7c0:	899b      	ldrh	r3, [r3, #12]
 800f7c2:	089b      	lsrs	r3, r3, #2
 800f7c4:	b29b      	uxth	r3, r3
 800f7c6:	4619      	mov	r1, r3
 800f7c8:	683b      	ldr	r3, [r7, #0]
 800f7ca:	fbb3 f3f1 	udiv	r3, r3, r1
 800f7ce:	4413      	add	r3, r2
 800f7d0:	4619      	mov	r1, r3
 800f7d2:	6938      	ldr	r0, [r7, #16]
 800f7d4:	f7ff fe9a 	bl	800f50c <move_window>
 800f7d8:	4603      	mov	r3, r0
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d11d      	bne.n	800f81a <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f7de:	693b      	ldr	r3, [r7, #16]
 800f7e0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f7e4:	683b      	ldr	r3, [r7, #0]
 800f7e6:	009b      	lsls	r3, r3, #2
 800f7e8:	693a      	ldr	r2, [r7, #16]
 800f7ea:	8992      	ldrh	r2, [r2, #12]
 800f7ec:	fbb3 f0f2 	udiv	r0, r3, r2
 800f7f0:	fb02 f200 	mul.w	r2, r2, r0
 800f7f4:	1a9b      	subs	r3, r3, r2
 800f7f6:	440b      	add	r3, r1
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	f7ff fbef 	bl	800efdc <ld_dword>
 800f7fe:	4603      	mov	r3, r0
 800f800:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800f804:	617b      	str	r3, [r7, #20]
			break;
 800f806:	e009      	b.n	800f81c <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800f808:	2301      	movs	r3, #1
 800f80a:	617b      	str	r3, [r7, #20]
 800f80c:	e006      	b.n	800f81c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f80e:	bf00      	nop
 800f810:	e004      	b.n	800f81c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f812:	bf00      	nop
 800f814:	e002      	b.n	800f81c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f816:	bf00      	nop
 800f818:	e000      	b.n	800f81c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f81a:	bf00      	nop
		}
	}

	return val;
 800f81c:	697b      	ldr	r3, [r7, #20]
}
 800f81e:	4618      	mov	r0, r3
 800f820:	3718      	adds	r7, #24
 800f822:	46bd      	mov	sp, r7
 800f824:	bd80      	pop	{r7, pc}

0800f826 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800f826:	b590      	push	{r4, r7, lr}
 800f828:	b089      	sub	sp, #36	; 0x24
 800f82a:	af00      	add	r7, sp, #0
 800f82c:	60f8      	str	r0, [r7, #12]
 800f82e:	60b9      	str	r1, [r7, #8]
 800f830:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800f832:	2302      	movs	r3, #2
 800f834:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800f836:	68bb      	ldr	r3, [r7, #8]
 800f838:	2b01      	cmp	r3, #1
 800f83a:	f240 8106 	bls.w	800fa4a <put_fat+0x224>
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	69db      	ldr	r3, [r3, #28]
 800f842:	68ba      	ldr	r2, [r7, #8]
 800f844:	429a      	cmp	r2, r3
 800f846:	f080 8100 	bcs.w	800fa4a <put_fat+0x224>
		switch (fs->fs_type) {
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	781b      	ldrb	r3, [r3, #0]
 800f84e:	2b02      	cmp	r3, #2
 800f850:	f000 8088 	beq.w	800f964 <put_fat+0x13e>
 800f854:	2b03      	cmp	r3, #3
 800f856:	f000 80b0 	beq.w	800f9ba <put_fat+0x194>
 800f85a:	2b01      	cmp	r3, #1
 800f85c:	f040 80f5 	bne.w	800fa4a <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800f860:	68bb      	ldr	r3, [r7, #8]
 800f862:	61bb      	str	r3, [r7, #24]
 800f864:	69bb      	ldr	r3, [r7, #24]
 800f866:	085b      	lsrs	r3, r3, #1
 800f868:	69ba      	ldr	r2, [r7, #24]
 800f86a:	4413      	add	r3, r2
 800f86c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	899b      	ldrh	r3, [r3, #12]
 800f876:	4619      	mov	r1, r3
 800f878:	69bb      	ldr	r3, [r7, #24]
 800f87a:	fbb3 f3f1 	udiv	r3, r3, r1
 800f87e:	4413      	add	r3, r2
 800f880:	4619      	mov	r1, r3
 800f882:	68f8      	ldr	r0, [r7, #12]
 800f884:	f7ff fe42 	bl	800f50c <move_window>
 800f888:	4603      	mov	r3, r0
 800f88a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f88c:	7ffb      	ldrb	r3, [r7, #31]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	f040 80d4 	bne.w	800fa3c <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f89a:	69bb      	ldr	r3, [r7, #24]
 800f89c:	1c5a      	adds	r2, r3, #1
 800f89e:	61ba      	str	r2, [r7, #24]
 800f8a0:	68fa      	ldr	r2, [r7, #12]
 800f8a2:	8992      	ldrh	r2, [r2, #12]
 800f8a4:	fbb3 f0f2 	udiv	r0, r3, r2
 800f8a8:	fb02 f200 	mul.w	r2, r2, r0
 800f8ac:	1a9b      	subs	r3, r3, r2
 800f8ae:	440b      	add	r3, r1
 800f8b0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f8b2:	68bb      	ldr	r3, [r7, #8]
 800f8b4:	f003 0301 	and.w	r3, r3, #1
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d00d      	beq.n	800f8d8 <put_fat+0xb2>
 800f8bc:	697b      	ldr	r3, [r7, #20]
 800f8be:	781b      	ldrb	r3, [r3, #0]
 800f8c0:	b25b      	sxtb	r3, r3
 800f8c2:	f003 030f 	and.w	r3, r3, #15
 800f8c6:	b25a      	sxtb	r2, r3
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	b2db      	uxtb	r3, r3
 800f8cc:	011b      	lsls	r3, r3, #4
 800f8ce:	b25b      	sxtb	r3, r3
 800f8d0:	4313      	orrs	r3, r2
 800f8d2:	b25b      	sxtb	r3, r3
 800f8d4:	b2db      	uxtb	r3, r3
 800f8d6:	e001      	b.n	800f8dc <put_fat+0xb6>
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	b2db      	uxtb	r3, r3
 800f8dc:	697a      	ldr	r2, [r7, #20]
 800f8de:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	2201      	movs	r2, #1
 800f8e4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	899b      	ldrh	r3, [r3, #12]
 800f8ee:	4619      	mov	r1, r3
 800f8f0:	69bb      	ldr	r3, [r7, #24]
 800f8f2:	fbb3 f3f1 	udiv	r3, r3, r1
 800f8f6:	4413      	add	r3, r2
 800f8f8:	4619      	mov	r1, r3
 800f8fa:	68f8      	ldr	r0, [r7, #12]
 800f8fc:	f7ff fe06 	bl	800f50c <move_window>
 800f900:	4603      	mov	r3, r0
 800f902:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f904:	7ffb      	ldrb	r3, [r7, #31]
 800f906:	2b00      	cmp	r3, #0
 800f908:	f040 809a 	bne.w	800fa40 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	899b      	ldrh	r3, [r3, #12]
 800f916:	461a      	mov	r2, r3
 800f918:	69bb      	ldr	r3, [r7, #24]
 800f91a:	fbb3 f0f2 	udiv	r0, r3, r2
 800f91e:	fb02 f200 	mul.w	r2, r2, r0
 800f922:	1a9b      	subs	r3, r3, r2
 800f924:	440b      	add	r3, r1
 800f926:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f928:	68bb      	ldr	r3, [r7, #8]
 800f92a:	f003 0301 	and.w	r3, r3, #1
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d003      	beq.n	800f93a <put_fat+0x114>
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	091b      	lsrs	r3, r3, #4
 800f936:	b2db      	uxtb	r3, r3
 800f938:	e00e      	b.n	800f958 <put_fat+0x132>
 800f93a:	697b      	ldr	r3, [r7, #20]
 800f93c:	781b      	ldrb	r3, [r3, #0]
 800f93e:	b25b      	sxtb	r3, r3
 800f940:	f023 030f 	bic.w	r3, r3, #15
 800f944:	b25a      	sxtb	r2, r3
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	0a1b      	lsrs	r3, r3, #8
 800f94a:	b25b      	sxtb	r3, r3
 800f94c:	f003 030f 	and.w	r3, r3, #15
 800f950:	b25b      	sxtb	r3, r3
 800f952:	4313      	orrs	r3, r2
 800f954:	b25b      	sxtb	r3, r3
 800f956:	b2db      	uxtb	r3, r3
 800f958:	697a      	ldr	r2, [r7, #20]
 800f95a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	2201      	movs	r2, #1
 800f960:	70da      	strb	r2, [r3, #3]
			break;
 800f962:	e072      	b.n	800fa4a <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	899b      	ldrh	r3, [r3, #12]
 800f96c:	085b      	lsrs	r3, r3, #1
 800f96e:	b29b      	uxth	r3, r3
 800f970:	4619      	mov	r1, r3
 800f972:	68bb      	ldr	r3, [r7, #8]
 800f974:	fbb3 f3f1 	udiv	r3, r3, r1
 800f978:	4413      	add	r3, r2
 800f97a:	4619      	mov	r1, r3
 800f97c:	68f8      	ldr	r0, [r7, #12]
 800f97e:	f7ff fdc5 	bl	800f50c <move_window>
 800f982:	4603      	mov	r3, r0
 800f984:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f986:	7ffb      	ldrb	r3, [r7, #31]
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d15b      	bne.n	800fa44 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f992:	68bb      	ldr	r3, [r7, #8]
 800f994:	005b      	lsls	r3, r3, #1
 800f996:	68fa      	ldr	r2, [r7, #12]
 800f998:	8992      	ldrh	r2, [r2, #12]
 800f99a:	fbb3 f0f2 	udiv	r0, r3, r2
 800f99e:	fb02 f200 	mul.w	r2, r2, r0
 800f9a2:	1a9b      	subs	r3, r3, r2
 800f9a4:	440b      	add	r3, r1
 800f9a6:	687a      	ldr	r2, [r7, #4]
 800f9a8:	b292      	uxth	r2, r2
 800f9aa:	4611      	mov	r1, r2
 800f9ac:	4618      	mov	r0, r3
 800f9ae:	f7ff fb38 	bl	800f022 <st_word>
			fs->wflag = 1;
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	2201      	movs	r2, #1
 800f9b6:	70da      	strb	r2, [r3, #3]
			break;
 800f9b8:	e047      	b.n	800fa4a <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	899b      	ldrh	r3, [r3, #12]
 800f9c2:	089b      	lsrs	r3, r3, #2
 800f9c4:	b29b      	uxth	r3, r3
 800f9c6:	4619      	mov	r1, r3
 800f9c8:	68bb      	ldr	r3, [r7, #8]
 800f9ca:	fbb3 f3f1 	udiv	r3, r3, r1
 800f9ce:	4413      	add	r3, r2
 800f9d0:	4619      	mov	r1, r3
 800f9d2:	68f8      	ldr	r0, [r7, #12]
 800f9d4:	f7ff fd9a 	bl	800f50c <move_window>
 800f9d8:	4603      	mov	r3, r0
 800f9da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f9dc:	7ffb      	ldrb	r3, [r7, #31]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d132      	bne.n	800fa48 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f9ee:	68bb      	ldr	r3, [r7, #8]
 800f9f0:	009b      	lsls	r3, r3, #2
 800f9f2:	68fa      	ldr	r2, [r7, #12]
 800f9f4:	8992      	ldrh	r2, [r2, #12]
 800f9f6:	fbb3 f0f2 	udiv	r0, r3, r2
 800f9fa:	fb02 f200 	mul.w	r2, r2, r0
 800f9fe:	1a9b      	subs	r3, r3, r2
 800fa00:	440b      	add	r3, r1
 800fa02:	4618      	mov	r0, r3
 800fa04:	f7ff faea 	bl	800efdc <ld_dword>
 800fa08:	4603      	mov	r3, r0
 800fa0a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800fa0e:	4323      	orrs	r3, r4
 800fa10:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fa18:	68bb      	ldr	r3, [r7, #8]
 800fa1a:	009b      	lsls	r3, r3, #2
 800fa1c:	68fa      	ldr	r2, [r7, #12]
 800fa1e:	8992      	ldrh	r2, [r2, #12]
 800fa20:	fbb3 f0f2 	udiv	r0, r3, r2
 800fa24:	fb02 f200 	mul.w	r2, r2, r0
 800fa28:	1a9b      	subs	r3, r3, r2
 800fa2a:	440b      	add	r3, r1
 800fa2c:	6879      	ldr	r1, [r7, #4]
 800fa2e:	4618      	mov	r0, r3
 800fa30:	f7ff fb12 	bl	800f058 <st_dword>
			fs->wflag = 1;
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	2201      	movs	r2, #1
 800fa38:	70da      	strb	r2, [r3, #3]
			break;
 800fa3a:	e006      	b.n	800fa4a <put_fat+0x224>
			if (res != FR_OK) break;
 800fa3c:	bf00      	nop
 800fa3e:	e004      	b.n	800fa4a <put_fat+0x224>
			if (res != FR_OK) break;
 800fa40:	bf00      	nop
 800fa42:	e002      	b.n	800fa4a <put_fat+0x224>
			if (res != FR_OK) break;
 800fa44:	bf00      	nop
 800fa46:	e000      	b.n	800fa4a <put_fat+0x224>
			if (res != FR_OK) break;
 800fa48:	bf00      	nop
		}
	}
	return res;
 800fa4a:	7ffb      	ldrb	r3, [r7, #31]
}
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	3724      	adds	r7, #36	; 0x24
 800fa50:	46bd      	mov	sp, r7
 800fa52:	bd90      	pop	{r4, r7, pc}

0800fa54 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800fa54:	b580      	push	{r7, lr}
 800fa56:	b088      	sub	sp, #32
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	60f8      	str	r0, [r7, #12]
 800fa5c:	60b9      	str	r1, [r7, #8]
 800fa5e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800fa60:	2300      	movs	r3, #0
 800fa62:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800fa6a:	68bb      	ldr	r3, [r7, #8]
 800fa6c:	2b01      	cmp	r3, #1
 800fa6e:	d904      	bls.n	800fa7a <remove_chain+0x26>
 800fa70:	69bb      	ldr	r3, [r7, #24]
 800fa72:	69db      	ldr	r3, [r3, #28]
 800fa74:	68ba      	ldr	r2, [r7, #8]
 800fa76:	429a      	cmp	r2, r3
 800fa78:	d301      	bcc.n	800fa7e <remove_chain+0x2a>
 800fa7a:	2302      	movs	r3, #2
 800fa7c:	e04b      	b.n	800fb16 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d00c      	beq.n	800fa9e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800fa84:	f04f 32ff 	mov.w	r2, #4294967295
 800fa88:	6879      	ldr	r1, [r7, #4]
 800fa8a:	69b8      	ldr	r0, [r7, #24]
 800fa8c:	f7ff fecb 	bl	800f826 <put_fat>
 800fa90:	4603      	mov	r3, r0
 800fa92:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800fa94:	7ffb      	ldrb	r3, [r7, #31]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d001      	beq.n	800fa9e <remove_chain+0x4a>
 800fa9a:	7ffb      	ldrb	r3, [r7, #31]
 800fa9c:	e03b      	b.n	800fb16 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800fa9e:	68b9      	ldr	r1, [r7, #8]
 800faa0:	68f8      	ldr	r0, [r7, #12]
 800faa2:	f7ff fdf0 	bl	800f686 <get_fat>
 800faa6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800faa8:	697b      	ldr	r3, [r7, #20]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d031      	beq.n	800fb12 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800faae:	697b      	ldr	r3, [r7, #20]
 800fab0:	2b01      	cmp	r3, #1
 800fab2:	d101      	bne.n	800fab8 <remove_chain+0x64>
 800fab4:	2302      	movs	r3, #2
 800fab6:	e02e      	b.n	800fb16 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800fab8:	697b      	ldr	r3, [r7, #20]
 800faba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fabe:	d101      	bne.n	800fac4 <remove_chain+0x70>
 800fac0:	2301      	movs	r3, #1
 800fac2:	e028      	b.n	800fb16 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800fac4:	2200      	movs	r2, #0
 800fac6:	68b9      	ldr	r1, [r7, #8]
 800fac8:	69b8      	ldr	r0, [r7, #24]
 800faca:	f7ff feac 	bl	800f826 <put_fat>
 800face:	4603      	mov	r3, r0
 800fad0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800fad2:	7ffb      	ldrb	r3, [r7, #31]
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d001      	beq.n	800fadc <remove_chain+0x88>
 800fad8:	7ffb      	ldrb	r3, [r7, #31]
 800fada:	e01c      	b.n	800fb16 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800fadc:	69bb      	ldr	r3, [r7, #24]
 800fade:	695a      	ldr	r2, [r3, #20]
 800fae0:	69bb      	ldr	r3, [r7, #24]
 800fae2:	69db      	ldr	r3, [r3, #28]
 800fae4:	3b02      	subs	r3, #2
 800fae6:	429a      	cmp	r2, r3
 800fae8:	d20b      	bcs.n	800fb02 <remove_chain+0xae>
			fs->free_clst++;
 800faea:	69bb      	ldr	r3, [r7, #24]
 800faec:	695b      	ldr	r3, [r3, #20]
 800faee:	1c5a      	adds	r2, r3, #1
 800faf0:	69bb      	ldr	r3, [r7, #24]
 800faf2:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800faf4:	69bb      	ldr	r3, [r7, #24]
 800faf6:	791b      	ldrb	r3, [r3, #4]
 800faf8:	f043 0301 	orr.w	r3, r3, #1
 800fafc:	b2da      	uxtb	r2, r3
 800fafe:	69bb      	ldr	r3, [r7, #24]
 800fb00:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800fb02:	697b      	ldr	r3, [r7, #20]
 800fb04:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800fb06:	69bb      	ldr	r3, [r7, #24]
 800fb08:	69db      	ldr	r3, [r3, #28]
 800fb0a:	68ba      	ldr	r2, [r7, #8]
 800fb0c:	429a      	cmp	r2, r3
 800fb0e:	d3c6      	bcc.n	800fa9e <remove_chain+0x4a>
 800fb10:	e000      	b.n	800fb14 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800fb12:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800fb14:	2300      	movs	r3, #0
}
 800fb16:	4618      	mov	r0, r3
 800fb18:	3720      	adds	r7, #32
 800fb1a:	46bd      	mov	sp, r7
 800fb1c:	bd80      	pop	{r7, pc}

0800fb1e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800fb1e:	b580      	push	{r7, lr}
 800fb20:	b088      	sub	sp, #32
 800fb22:	af00      	add	r7, sp, #0
 800fb24:	6078      	str	r0, [r7, #4]
 800fb26:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800fb2e:	683b      	ldr	r3, [r7, #0]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d10d      	bne.n	800fb50 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800fb34:	693b      	ldr	r3, [r7, #16]
 800fb36:	691b      	ldr	r3, [r3, #16]
 800fb38:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800fb3a:	69bb      	ldr	r3, [r7, #24]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d004      	beq.n	800fb4a <create_chain+0x2c>
 800fb40:	693b      	ldr	r3, [r7, #16]
 800fb42:	69db      	ldr	r3, [r3, #28]
 800fb44:	69ba      	ldr	r2, [r7, #24]
 800fb46:	429a      	cmp	r2, r3
 800fb48:	d31b      	bcc.n	800fb82 <create_chain+0x64>
 800fb4a:	2301      	movs	r3, #1
 800fb4c:	61bb      	str	r3, [r7, #24]
 800fb4e:	e018      	b.n	800fb82 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800fb50:	6839      	ldr	r1, [r7, #0]
 800fb52:	6878      	ldr	r0, [r7, #4]
 800fb54:	f7ff fd97 	bl	800f686 <get_fat>
 800fb58:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	2b01      	cmp	r3, #1
 800fb5e:	d801      	bhi.n	800fb64 <create_chain+0x46>
 800fb60:	2301      	movs	r3, #1
 800fb62:	e070      	b.n	800fc46 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb6a:	d101      	bne.n	800fb70 <create_chain+0x52>
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	e06a      	b.n	800fc46 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800fb70:	693b      	ldr	r3, [r7, #16]
 800fb72:	69db      	ldr	r3, [r3, #28]
 800fb74:	68fa      	ldr	r2, [r7, #12]
 800fb76:	429a      	cmp	r2, r3
 800fb78:	d201      	bcs.n	800fb7e <create_chain+0x60>
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	e063      	b.n	800fc46 <create_chain+0x128>
		scl = clst;
 800fb7e:	683b      	ldr	r3, [r7, #0]
 800fb80:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800fb82:	69bb      	ldr	r3, [r7, #24]
 800fb84:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800fb86:	69fb      	ldr	r3, [r7, #28]
 800fb88:	3301      	adds	r3, #1
 800fb8a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800fb8c:	693b      	ldr	r3, [r7, #16]
 800fb8e:	69db      	ldr	r3, [r3, #28]
 800fb90:	69fa      	ldr	r2, [r7, #28]
 800fb92:	429a      	cmp	r2, r3
 800fb94:	d307      	bcc.n	800fba6 <create_chain+0x88>
				ncl = 2;
 800fb96:	2302      	movs	r3, #2
 800fb98:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800fb9a:	69fa      	ldr	r2, [r7, #28]
 800fb9c:	69bb      	ldr	r3, [r7, #24]
 800fb9e:	429a      	cmp	r2, r3
 800fba0:	d901      	bls.n	800fba6 <create_chain+0x88>
 800fba2:	2300      	movs	r3, #0
 800fba4:	e04f      	b.n	800fc46 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800fba6:	69f9      	ldr	r1, [r7, #28]
 800fba8:	6878      	ldr	r0, [r7, #4]
 800fbaa:	f7ff fd6c 	bl	800f686 <get_fat>
 800fbae:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d00e      	beq.n	800fbd4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	2b01      	cmp	r3, #1
 800fbba:	d003      	beq.n	800fbc4 <create_chain+0xa6>
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbc2:	d101      	bne.n	800fbc8 <create_chain+0xaa>
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	e03e      	b.n	800fc46 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800fbc8:	69fa      	ldr	r2, [r7, #28]
 800fbca:	69bb      	ldr	r3, [r7, #24]
 800fbcc:	429a      	cmp	r2, r3
 800fbce:	d1da      	bne.n	800fb86 <create_chain+0x68>
 800fbd0:	2300      	movs	r3, #0
 800fbd2:	e038      	b.n	800fc46 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800fbd4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800fbd6:	f04f 32ff 	mov.w	r2, #4294967295
 800fbda:	69f9      	ldr	r1, [r7, #28]
 800fbdc:	6938      	ldr	r0, [r7, #16]
 800fbde:	f7ff fe22 	bl	800f826 <put_fat>
 800fbe2:	4603      	mov	r3, r0
 800fbe4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800fbe6:	7dfb      	ldrb	r3, [r7, #23]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d109      	bne.n	800fc00 <create_chain+0xe2>
 800fbec:	683b      	ldr	r3, [r7, #0]
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d006      	beq.n	800fc00 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800fbf2:	69fa      	ldr	r2, [r7, #28]
 800fbf4:	6839      	ldr	r1, [r7, #0]
 800fbf6:	6938      	ldr	r0, [r7, #16]
 800fbf8:	f7ff fe15 	bl	800f826 <put_fat>
 800fbfc:	4603      	mov	r3, r0
 800fbfe:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800fc00:	7dfb      	ldrb	r3, [r7, #23]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d116      	bne.n	800fc34 <create_chain+0x116>
		fs->last_clst = ncl;
 800fc06:	693b      	ldr	r3, [r7, #16]
 800fc08:	69fa      	ldr	r2, [r7, #28]
 800fc0a:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800fc0c:	693b      	ldr	r3, [r7, #16]
 800fc0e:	695a      	ldr	r2, [r3, #20]
 800fc10:	693b      	ldr	r3, [r7, #16]
 800fc12:	69db      	ldr	r3, [r3, #28]
 800fc14:	3b02      	subs	r3, #2
 800fc16:	429a      	cmp	r2, r3
 800fc18:	d804      	bhi.n	800fc24 <create_chain+0x106>
 800fc1a:	693b      	ldr	r3, [r7, #16]
 800fc1c:	695b      	ldr	r3, [r3, #20]
 800fc1e:	1e5a      	subs	r2, r3, #1
 800fc20:	693b      	ldr	r3, [r7, #16]
 800fc22:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800fc24:	693b      	ldr	r3, [r7, #16]
 800fc26:	791b      	ldrb	r3, [r3, #4]
 800fc28:	f043 0301 	orr.w	r3, r3, #1
 800fc2c:	b2da      	uxtb	r2, r3
 800fc2e:	693b      	ldr	r3, [r7, #16]
 800fc30:	711a      	strb	r2, [r3, #4]
 800fc32:	e007      	b.n	800fc44 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800fc34:	7dfb      	ldrb	r3, [r7, #23]
 800fc36:	2b01      	cmp	r3, #1
 800fc38:	d102      	bne.n	800fc40 <create_chain+0x122>
 800fc3a:	f04f 33ff 	mov.w	r3, #4294967295
 800fc3e:	e000      	b.n	800fc42 <create_chain+0x124>
 800fc40:	2301      	movs	r3, #1
 800fc42:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800fc44:	69fb      	ldr	r3, [r7, #28]
}
 800fc46:	4618      	mov	r0, r3
 800fc48:	3720      	adds	r7, #32
 800fc4a:	46bd      	mov	sp, r7
 800fc4c:	bd80      	pop	{r7, pc}

0800fc4e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800fc4e:	b480      	push	{r7}
 800fc50:	b087      	sub	sp, #28
 800fc52:	af00      	add	r7, sp, #0
 800fc54:	6078      	str	r0, [r7, #4]
 800fc56:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc62:	3304      	adds	r3, #4
 800fc64:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	899b      	ldrh	r3, [r3, #12]
 800fc6a:	461a      	mov	r2, r3
 800fc6c:	683b      	ldr	r3, [r7, #0]
 800fc6e:	fbb3 f3f2 	udiv	r3, r3, r2
 800fc72:	68fa      	ldr	r2, [r7, #12]
 800fc74:	8952      	ldrh	r2, [r2, #10]
 800fc76:	fbb3 f3f2 	udiv	r3, r3, r2
 800fc7a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800fc7c:	693b      	ldr	r3, [r7, #16]
 800fc7e:	1d1a      	adds	r2, r3, #4
 800fc80:	613a      	str	r2, [r7, #16]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800fc86:	68bb      	ldr	r3, [r7, #8]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d101      	bne.n	800fc90 <clmt_clust+0x42>
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	e010      	b.n	800fcb2 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800fc90:	697a      	ldr	r2, [r7, #20]
 800fc92:	68bb      	ldr	r3, [r7, #8]
 800fc94:	429a      	cmp	r2, r3
 800fc96:	d307      	bcc.n	800fca8 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800fc98:	697a      	ldr	r2, [r7, #20]
 800fc9a:	68bb      	ldr	r3, [r7, #8]
 800fc9c:	1ad3      	subs	r3, r2, r3
 800fc9e:	617b      	str	r3, [r7, #20]
 800fca0:	693b      	ldr	r3, [r7, #16]
 800fca2:	3304      	adds	r3, #4
 800fca4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800fca6:	e7e9      	b.n	800fc7c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800fca8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800fcaa:	693b      	ldr	r3, [r7, #16]
 800fcac:	681a      	ldr	r2, [r3, #0]
 800fcae:	697b      	ldr	r3, [r7, #20]
 800fcb0:	4413      	add	r3, r2
}
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	371c      	adds	r7, #28
 800fcb6:	46bd      	mov	sp, r7
 800fcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcbc:	4770      	bx	lr

0800fcbe <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800fcbe:	b580      	push	{r7, lr}
 800fcc0:	b086      	sub	sp, #24
 800fcc2:	af00      	add	r7, sp, #0
 800fcc4:	6078      	str	r0, [r7, #4]
 800fcc6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800fcce:	683b      	ldr	r3, [r7, #0]
 800fcd0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fcd4:	d204      	bcs.n	800fce0 <dir_sdi+0x22>
 800fcd6:	683b      	ldr	r3, [r7, #0]
 800fcd8:	f003 031f 	and.w	r3, r3, #31
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d001      	beq.n	800fce4 <dir_sdi+0x26>
		return FR_INT_ERR;
 800fce0:	2302      	movs	r3, #2
 800fce2:	e071      	b.n	800fdc8 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	683a      	ldr	r2, [r7, #0]
 800fce8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	689b      	ldr	r3, [r3, #8]
 800fcee:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800fcf0:	697b      	ldr	r3, [r7, #20]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d106      	bne.n	800fd04 <dir_sdi+0x46>
 800fcf6:	693b      	ldr	r3, [r7, #16]
 800fcf8:	781b      	ldrb	r3, [r3, #0]
 800fcfa:	2b02      	cmp	r3, #2
 800fcfc:	d902      	bls.n	800fd04 <dir_sdi+0x46>
		clst = fs->dirbase;
 800fcfe:	693b      	ldr	r3, [r7, #16]
 800fd00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd02:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800fd04:	697b      	ldr	r3, [r7, #20]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d10c      	bne.n	800fd24 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800fd0a:	683b      	ldr	r3, [r7, #0]
 800fd0c:	095b      	lsrs	r3, r3, #5
 800fd0e:	693a      	ldr	r2, [r7, #16]
 800fd10:	8912      	ldrh	r2, [r2, #8]
 800fd12:	4293      	cmp	r3, r2
 800fd14:	d301      	bcc.n	800fd1a <dir_sdi+0x5c>
 800fd16:	2302      	movs	r3, #2
 800fd18:	e056      	b.n	800fdc8 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800fd1a:	693b      	ldr	r3, [r7, #16]
 800fd1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	61da      	str	r2, [r3, #28]
 800fd22:	e02d      	b.n	800fd80 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800fd24:	693b      	ldr	r3, [r7, #16]
 800fd26:	895b      	ldrh	r3, [r3, #10]
 800fd28:	461a      	mov	r2, r3
 800fd2a:	693b      	ldr	r3, [r7, #16]
 800fd2c:	899b      	ldrh	r3, [r3, #12]
 800fd2e:	fb03 f302 	mul.w	r3, r3, r2
 800fd32:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800fd34:	e019      	b.n	800fd6a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	6979      	ldr	r1, [r7, #20]
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	f7ff fca3 	bl	800f686 <get_fat>
 800fd40:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800fd42:	697b      	ldr	r3, [r7, #20]
 800fd44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd48:	d101      	bne.n	800fd4e <dir_sdi+0x90>
 800fd4a:	2301      	movs	r3, #1
 800fd4c:	e03c      	b.n	800fdc8 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800fd4e:	697b      	ldr	r3, [r7, #20]
 800fd50:	2b01      	cmp	r3, #1
 800fd52:	d904      	bls.n	800fd5e <dir_sdi+0xa0>
 800fd54:	693b      	ldr	r3, [r7, #16]
 800fd56:	69db      	ldr	r3, [r3, #28]
 800fd58:	697a      	ldr	r2, [r7, #20]
 800fd5a:	429a      	cmp	r2, r3
 800fd5c:	d301      	bcc.n	800fd62 <dir_sdi+0xa4>
 800fd5e:	2302      	movs	r3, #2
 800fd60:	e032      	b.n	800fdc8 <dir_sdi+0x10a>
			ofs -= csz;
 800fd62:	683a      	ldr	r2, [r7, #0]
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	1ad3      	subs	r3, r2, r3
 800fd68:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800fd6a:	683a      	ldr	r2, [r7, #0]
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	429a      	cmp	r2, r3
 800fd70:	d2e1      	bcs.n	800fd36 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800fd72:	6979      	ldr	r1, [r7, #20]
 800fd74:	6938      	ldr	r0, [r7, #16]
 800fd76:	f7ff fc67 	bl	800f648 <clust2sect>
 800fd7a:	4602      	mov	r2, r0
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	697a      	ldr	r2, [r7, #20]
 800fd84:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	69db      	ldr	r3, [r3, #28]
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d101      	bne.n	800fd92 <dir_sdi+0xd4>
 800fd8e:	2302      	movs	r3, #2
 800fd90:	e01a      	b.n	800fdc8 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	69da      	ldr	r2, [r3, #28]
 800fd96:	693b      	ldr	r3, [r7, #16]
 800fd98:	899b      	ldrh	r3, [r3, #12]
 800fd9a:	4619      	mov	r1, r3
 800fd9c:	683b      	ldr	r3, [r7, #0]
 800fd9e:	fbb3 f3f1 	udiv	r3, r3, r1
 800fda2:	441a      	add	r2, r3
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800fda8:	693b      	ldr	r3, [r7, #16]
 800fdaa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fdae:	693b      	ldr	r3, [r7, #16]
 800fdb0:	899b      	ldrh	r3, [r3, #12]
 800fdb2:	461a      	mov	r2, r3
 800fdb4:	683b      	ldr	r3, [r7, #0]
 800fdb6:	fbb3 f0f2 	udiv	r0, r3, r2
 800fdba:	fb02 f200 	mul.w	r2, r2, r0
 800fdbe:	1a9b      	subs	r3, r3, r2
 800fdc0:	18ca      	adds	r2, r1, r3
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800fdc6:	2300      	movs	r3, #0
}
 800fdc8:	4618      	mov	r0, r3
 800fdca:	3718      	adds	r7, #24
 800fdcc:	46bd      	mov	sp, r7
 800fdce:	bd80      	pop	{r7, pc}

0800fdd0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	b086      	sub	sp, #24
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	6078      	str	r0, [r7, #4]
 800fdd8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	695b      	ldr	r3, [r3, #20]
 800fde4:	3320      	adds	r3, #32
 800fde6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	69db      	ldr	r3, [r3, #28]
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d003      	beq.n	800fdf8 <dir_next+0x28>
 800fdf0:	68bb      	ldr	r3, [r7, #8]
 800fdf2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fdf6:	d301      	bcc.n	800fdfc <dir_next+0x2c>
 800fdf8:	2304      	movs	r3, #4
 800fdfa:	e0bb      	b.n	800ff74 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	899b      	ldrh	r3, [r3, #12]
 800fe00:	461a      	mov	r2, r3
 800fe02:	68bb      	ldr	r3, [r7, #8]
 800fe04:	fbb3 f1f2 	udiv	r1, r3, r2
 800fe08:	fb02 f201 	mul.w	r2, r2, r1
 800fe0c:	1a9b      	subs	r3, r3, r2
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	f040 809d 	bne.w	800ff4e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	69db      	ldr	r3, [r3, #28]
 800fe18:	1c5a      	adds	r2, r3, #1
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	699b      	ldr	r3, [r3, #24]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d10b      	bne.n	800fe3e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800fe26:	68bb      	ldr	r3, [r7, #8]
 800fe28:	095b      	lsrs	r3, r3, #5
 800fe2a:	68fa      	ldr	r2, [r7, #12]
 800fe2c:	8912      	ldrh	r2, [r2, #8]
 800fe2e:	4293      	cmp	r3, r2
 800fe30:	f0c0 808d 	bcc.w	800ff4e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	2200      	movs	r2, #0
 800fe38:	61da      	str	r2, [r3, #28]
 800fe3a:	2304      	movs	r3, #4
 800fe3c:	e09a      	b.n	800ff74 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	899b      	ldrh	r3, [r3, #12]
 800fe42:	461a      	mov	r2, r3
 800fe44:	68bb      	ldr	r3, [r7, #8]
 800fe46:	fbb3 f3f2 	udiv	r3, r3, r2
 800fe4a:	68fa      	ldr	r2, [r7, #12]
 800fe4c:	8952      	ldrh	r2, [r2, #10]
 800fe4e:	3a01      	subs	r2, #1
 800fe50:	4013      	ands	r3, r2
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d17b      	bne.n	800ff4e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800fe56:	687a      	ldr	r2, [r7, #4]
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	699b      	ldr	r3, [r3, #24]
 800fe5c:	4619      	mov	r1, r3
 800fe5e:	4610      	mov	r0, r2
 800fe60:	f7ff fc11 	bl	800f686 <get_fat>
 800fe64:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800fe66:	697b      	ldr	r3, [r7, #20]
 800fe68:	2b01      	cmp	r3, #1
 800fe6a:	d801      	bhi.n	800fe70 <dir_next+0xa0>
 800fe6c:	2302      	movs	r3, #2
 800fe6e:	e081      	b.n	800ff74 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800fe70:	697b      	ldr	r3, [r7, #20]
 800fe72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe76:	d101      	bne.n	800fe7c <dir_next+0xac>
 800fe78:	2301      	movs	r3, #1
 800fe7a:	e07b      	b.n	800ff74 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	69db      	ldr	r3, [r3, #28]
 800fe80:	697a      	ldr	r2, [r7, #20]
 800fe82:	429a      	cmp	r2, r3
 800fe84:	d359      	bcc.n	800ff3a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800fe86:	683b      	ldr	r3, [r7, #0]
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d104      	bne.n	800fe96 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	2200      	movs	r2, #0
 800fe90:	61da      	str	r2, [r3, #28]
 800fe92:	2304      	movs	r3, #4
 800fe94:	e06e      	b.n	800ff74 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800fe96:	687a      	ldr	r2, [r7, #4]
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	699b      	ldr	r3, [r3, #24]
 800fe9c:	4619      	mov	r1, r3
 800fe9e:	4610      	mov	r0, r2
 800fea0:	f7ff fe3d 	bl	800fb1e <create_chain>
 800fea4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800fea6:	697b      	ldr	r3, [r7, #20]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d101      	bne.n	800feb0 <dir_next+0xe0>
 800feac:	2307      	movs	r3, #7
 800feae:	e061      	b.n	800ff74 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800feb0:	697b      	ldr	r3, [r7, #20]
 800feb2:	2b01      	cmp	r3, #1
 800feb4:	d101      	bne.n	800feba <dir_next+0xea>
 800feb6:	2302      	movs	r3, #2
 800feb8:	e05c      	b.n	800ff74 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800feba:	697b      	ldr	r3, [r7, #20]
 800febc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fec0:	d101      	bne.n	800fec6 <dir_next+0xf6>
 800fec2:	2301      	movs	r3, #1
 800fec4:	e056      	b.n	800ff74 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800fec6:	68f8      	ldr	r0, [r7, #12]
 800fec8:	f7ff fadc 	bl	800f484 <sync_window>
 800fecc:	4603      	mov	r3, r0
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d001      	beq.n	800fed6 <dir_next+0x106>
 800fed2:	2301      	movs	r3, #1
 800fed4:	e04e      	b.n	800ff74 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	899b      	ldrh	r3, [r3, #12]
 800fee0:	461a      	mov	r2, r3
 800fee2:	2100      	movs	r1, #0
 800fee4:	f7ff f905 	bl	800f0f2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800fee8:	2300      	movs	r3, #0
 800feea:	613b      	str	r3, [r7, #16]
 800feec:	6979      	ldr	r1, [r7, #20]
 800feee:	68f8      	ldr	r0, [r7, #12]
 800fef0:	f7ff fbaa 	bl	800f648 <clust2sect>
 800fef4:	4602      	mov	r2, r0
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	635a      	str	r2, [r3, #52]	; 0x34
 800fefa:	e012      	b.n	800ff22 <dir_next+0x152>
						fs->wflag = 1;
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	2201      	movs	r2, #1
 800ff00:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ff02:	68f8      	ldr	r0, [r7, #12]
 800ff04:	f7ff fabe 	bl	800f484 <sync_window>
 800ff08:	4603      	mov	r3, r0
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d001      	beq.n	800ff12 <dir_next+0x142>
 800ff0e:	2301      	movs	r3, #1
 800ff10:	e030      	b.n	800ff74 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ff12:	693b      	ldr	r3, [r7, #16]
 800ff14:	3301      	adds	r3, #1
 800ff16:	613b      	str	r3, [r7, #16]
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff1c:	1c5a      	adds	r2, r3, #1
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	635a      	str	r2, [r3, #52]	; 0x34
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	895b      	ldrh	r3, [r3, #10]
 800ff26:	461a      	mov	r2, r3
 800ff28:	693b      	ldr	r3, [r7, #16]
 800ff2a:	4293      	cmp	r3, r2
 800ff2c:	d3e6      	bcc.n	800fefc <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ff32:	693b      	ldr	r3, [r7, #16]
 800ff34:	1ad2      	subs	r2, r2, r3
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	697a      	ldr	r2, [r7, #20]
 800ff3e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ff40:	6979      	ldr	r1, [r7, #20]
 800ff42:	68f8      	ldr	r0, [r7, #12]
 800ff44:	f7ff fb80 	bl	800f648 <clust2sect>
 800ff48:	4602      	mov	r2, r0
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	68ba      	ldr	r2, [r7, #8]
 800ff52:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	899b      	ldrh	r3, [r3, #12]
 800ff5e:	461a      	mov	r2, r3
 800ff60:	68bb      	ldr	r3, [r7, #8]
 800ff62:	fbb3 f0f2 	udiv	r0, r3, r2
 800ff66:	fb02 f200 	mul.w	r2, r2, r0
 800ff6a:	1a9b      	subs	r3, r3, r2
 800ff6c:	18ca      	adds	r2, r1, r3
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ff72:	2300      	movs	r3, #0
}
 800ff74:	4618      	mov	r0, r3
 800ff76:	3718      	adds	r7, #24
 800ff78:	46bd      	mov	sp, r7
 800ff7a:	bd80      	pop	{r7, pc}

0800ff7c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b086      	sub	sp, #24
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	6078      	str	r0, [r7, #4]
 800ff84:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ff8c:	2100      	movs	r1, #0
 800ff8e:	6878      	ldr	r0, [r7, #4]
 800ff90:	f7ff fe95 	bl	800fcbe <dir_sdi>
 800ff94:	4603      	mov	r3, r0
 800ff96:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ff98:	7dfb      	ldrb	r3, [r7, #23]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d12b      	bne.n	800fff6 <dir_alloc+0x7a>
		n = 0;
 800ff9e:	2300      	movs	r3, #0
 800ffa0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	69db      	ldr	r3, [r3, #28]
 800ffa6:	4619      	mov	r1, r3
 800ffa8:	68f8      	ldr	r0, [r7, #12]
 800ffaa:	f7ff faaf 	bl	800f50c <move_window>
 800ffae:	4603      	mov	r3, r0
 800ffb0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ffb2:	7dfb      	ldrb	r3, [r7, #23]
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d11d      	bne.n	800fff4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	6a1b      	ldr	r3, [r3, #32]
 800ffbc:	781b      	ldrb	r3, [r3, #0]
 800ffbe:	2be5      	cmp	r3, #229	; 0xe5
 800ffc0:	d004      	beq.n	800ffcc <dir_alloc+0x50>
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	6a1b      	ldr	r3, [r3, #32]
 800ffc6:	781b      	ldrb	r3, [r3, #0]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d107      	bne.n	800ffdc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ffcc:	693b      	ldr	r3, [r7, #16]
 800ffce:	3301      	adds	r3, #1
 800ffd0:	613b      	str	r3, [r7, #16]
 800ffd2:	693a      	ldr	r2, [r7, #16]
 800ffd4:	683b      	ldr	r3, [r7, #0]
 800ffd6:	429a      	cmp	r2, r3
 800ffd8:	d102      	bne.n	800ffe0 <dir_alloc+0x64>
 800ffda:	e00c      	b.n	800fff6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ffdc:	2300      	movs	r3, #0
 800ffde:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ffe0:	2101      	movs	r1, #1
 800ffe2:	6878      	ldr	r0, [r7, #4]
 800ffe4:	f7ff fef4 	bl	800fdd0 <dir_next>
 800ffe8:	4603      	mov	r3, r0
 800ffea:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ffec:	7dfb      	ldrb	r3, [r7, #23]
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d0d7      	beq.n	800ffa2 <dir_alloc+0x26>
 800fff2:	e000      	b.n	800fff6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800fff4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800fff6:	7dfb      	ldrb	r3, [r7, #23]
 800fff8:	2b04      	cmp	r3, #4
 800fffa:	d101      	bne.n	8010000 <dir_alloc+0x84>
 800fffc:	2307      	movs	r3, #7
 800fffe:	75fb      	strb	r3, [r7, #23]
	return res;
 8010000:	7dfb      	ldrb	r3, [r7, #23]
}
 8010002:	4618      	mov	r0, r3
 8010004:	3718      	adds	r7, #24
 8010006:	46bd      	mov	sp, r7
 8010008:	bd80      	pop	{r7, pc}

0801000a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801000a:	b580      	push	{r7, lr}
 801000c:	b084      	sub	sp, #16
 801000e:	af00      	add	r7, sp, #0
 8010010:	6078      	str	r0, [r7, #4]
 8010012:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8010014:	683b      	ldr	r3, [r7, #0]
 8010016:	331a      	adds	r3, #26
 8010018:	4618      	mov	r0, r3
 801001a:	f7fe ffc7 	bl	800efac <ld_word>
 801001e:	4603      	mov	r3, r0
 8010020:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	781b      	ldrb	r3, [r3, #0]
 8010026:	2b03      	cmp	r3, #3
 8010028:	d109      	bne.n	801003e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801002a:	683b      	ldr	r3, [r7, #0]
 801002c:	3314      	adds	r3, #20
 801002e:	4618      	mov	r0, r3
 8010030:	f7fe ffbc 	bl	800efac <ld_word>
 8010034:	4603      	mov	r3, r0
 8010036:	041b      	lsls	r3, r3, #16
 8010038:	68fa      	ldr	r2, [r7, #12]
 801003a:	4313      	orrs	r3, r2
 801003c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801003e:	68fb      	ldr	r3, [r7, #12]
}
 8010040:	4618      	mov	r0, r3
 8010042:	3710      	adds	r7, #16
 8010044:	46bd      	mov	sp, r7
 8010046:	bd80      	pop	{r7, pc}

08010048 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8010048:	b580      	push	{r7, lr}
 801004a:	b084      	sub	sp, #16
 801004c:	af00      	add	r7, sp, #0
 801004e:	60f8      	str	r0, [r7, #12]
 8010050:	60b9      	str	r1, [r7, #8]
 8010052:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8010054:	68bb      	ldr	r3, [r7, #8]
 8010056:	331a      	adds	r3, #26
 8010058:	687a      	ldr	r2, [r7, #4]
 801005a:	b292      	uxth	r2, r2
 801005c:	4611      	mov	r1, r2
 801005e:	4618      	mov	r0, r3
 8010060:	f7fe ffdf 	bl	800f022 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	781b      	ldrb	r3, [r3, #0]
 8010068:	2b03      	cmp	r3, #3
 801006a:	d109      	bne.n	8010080 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801006c:	68bb      	ldr	r3, [r7, #8]
 801006e:	f103 0214 	add.w	r2, r3, #20
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	0c1b      	lsrs	r3, r3, #16
 8010076:	b29b      	uxth	r3, r3
 8010078:	4619      	mov	r1, r3
 801007a:	4610      	mov	r0, r2
 801007c:	f7fe ffd1 	bl	800f022 <st_word>
	}
}
 8010080:	bf00      	nop
 8010082:	3710      	adds	r7, #16
 8010084:	46bd      	mov	sp, r7
 8010086:	bd80      	pop	{r7, pc}

08010088 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8010088:	b580      	push	{r7, lr}
 801008a:	b086      	sub	sp, #24
 801008c:	af00      	add	r7, sp, #0
 801008e:	6078      	str	r0, [r7, #4]
 8010090:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8010092:	2304      	movs	r3, #4
 8010094:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 801009c:	e03c      	b.n	8010118 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	69db      	ldr	r3, [r3, #28]
 80100a2:	4619      	mov	r1, r3
 80100a4:	6938      	ldr	r0, [r7, #16]
 80100a6:	f7ff fa31 	bl	800f50c <move_window>
 80100aa:	4603      	mov	r3, r0
 80100ac:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80100ae:	7dfb      	ldrb	r3, [r7, #23]
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d136      	bne.n	8010122 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	6a1b      	ldr	r3, [r3, #32]
 80100b8:	781b      	ldrb	r3, [r3, #0]
 80100ba:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80100bc:	7bfb      	ldrb	r3, [r7, #15]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d102      	bne.n	80100c8 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80100c2:	2304      	movs	r3, #4
 80100c4:	75fb      	strb	r3, [r7, #23]
 80100c6:	e031      	b.n	801012c <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	6a1b      	ldr	r3, [r3, #32]
 80100cc:	330b      	adds	r3, #11
 80100ce:	781b      	ldrb	r3, [r3, #0]
 80100d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80100d4:	73bb      	strb	r3, [r7, #14]
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	7bba      	ldrb	r2, [r7, #14]
 80100da:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 80100dc:	7bfb      	ldrb	r3, [r7, #15]
 80100de:	2be5      	cmp	r3, #229	; 0xe5
 80100e0:	d011      	beq.n	8010106 <dir_read+0x7e>
 80100e2:	7bfb      	ldrb	r3, [r7, #15]
 80100e4:	2b2e      	cmp	r3, #46	; 0x2e
 80100e6:	d00e      	beq.n	8010106 <dir_read+0x7e>
 80100e8:	7bbb      	ldrb	r3, [r7, #14]
 80100ea:	2b0f      	cmp	r3, #15
 80100ec:	d00b      	beq.n	8010106 <dir_read+0x7e>
 80100ee:	7bbb      	ldrb	r3, [r7, #14]
 80100f0:	f023 0320 	bic.w	r3, r3, #32
 80100f4:	2b08      	cmp	r3, #8
 80100f6:	bf0c      	ite	eq
 80100f8:	2301      	moveq	r3, #1
 80100fa:	2300      	movne	r3, #0
 80100fc:	b2db      	uxtb	r3, r3
 80100fe:	461a      	mov	r2, r3
 8010100:	683b      	ldr	r3, [r7, #0]
 8010102:	4293      	cmp	r3, r2
 8010104:	d00f      	beq.n	8010126 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8010106:	2100      	movs	r1, #0
 8010108:	6878      	ldr	r0, [r7, #4]
 801010a:	f7ff fe61 	bl	800fdd0 <dir_next>
 801010e:	4603      	mov	r3, r0
 8010110:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010112:	7dfb      	ldrb	r3, [r7, #23]
 8010114:	2b00      	cmp	r3, #0
 8010116:	d108      	bne.n	801012a <dir_read+0xa2>
	while (dp->sect) {
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	69db      	ldr	r3, [r3, #28]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d1be      	bne.n	801009e <dir_read+0x16>
 8010120:	e004      	b.n	801012c <dir_read+0xa4>
		if (res != FR_OK) break;
 8010122:	bf00      	nop
 8010124:	e002      	b.n	801012c <dir_read+0xa4>
				break;
 8010126:	bf00      	nop
 8010128:	e000      	b.n	801012c <dir_read+0xa4>
		if (res != FR_OK) break;
 801012a:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 801012c:	7dfb      	ldrb	r3, [r7, #23]
 801012e:	2b00      	cmp	r3, #0
 8010130:	d002      	beq.n	8010138 <dir_read+0xb0>
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	2200      	movs	r2, #0
 8010136:	61da      	str	r2, [r3, #28]
	return res;
 8010138:	7dfb      	ldrb	r3, [r7, #23]
}
 801013a:	4618      	mov	r0, r3
 801013c:	3718      	adds	r7, #24
 801013e:	46bd      	mov	sp, r7
 8010140:	bd80      	pop	{r7, pc}

08010142 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8010142:	b580      	push	{r7, lr}
 8010144:	b086      	sub	sp, #24
 8010146:	af00      	add	r7, sp, #0
 8010148:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8010150:	2100      	movs	r1, #0
 8010152:	6878      	ldr	r0, [r7, #4]
 8010154:	f7ff fdb3 	bl	800fcbe <dir_sdi>
 8010158:	4603      	mov	r3, r0
 801015a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801015c:	7dfb      	ldrb	r3, [r7, #23]
 801015e:	2b00      	cmp	r3, #0
 8010160:	d001      	beq.n	8010166 <dir_find+0x24>
 8010162:	7dfb      	ldrb	r3, [r7, #23]
 8010164:	e03e      	b.n	80101e4 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	69db      	ldr	r3, [r3, #28]
 801016a:	4619      	mov	r1, r3
 801016c:	6938      	ldr	r0, [r7, #16]
 801016e:	f7ff f9cd 	bl	800f50c <move_window>
 8010172:	4603      	mov	r3, r0
 8010174:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010176:	7dfb      	ldrb	r3, [r7, #23]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d12f      	bne.n	80101dc <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	6a1b      	ldr	r3, [r3, #32]
 8010180:	781b      	ldrb	r3, [r3, #0]
 8010182:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8010184:	7bfb      	ldrb	r3, [r7, #15]
 8010186:	2b00      	cmp	r3, #0
 8010188:	d102      	bne.n	8010190 <dir_find+0x4e>
 801018a:	2304      	movs	r3, #4
 801018c:	75fb      	strb	r3, [r7, #23]
 801018e:	e028      	b.n	80101e2 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	6a1b      	ldr	r3, [r3, #32]
 8010194:	330b      	adds	r3, #11
 8010196:	781b      	ldrb	r3, [r3, #0]
 8010198:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801019c:	b2da      	uxtb	r2, r3
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	6a1b      	ldr	r3, [r3, #32]
 80101a6:	330b      	adds	r3, #11
 80101a8:	781b      	ldrb	r3, [r3, #0]
 80101aa:	f003 0308 	and.w	r3, r3, #8
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d10a      	bne.n	80101c8 <dir_find+0x86>
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	6a18      	ldr	r0, [r3, #32]
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	3324      	adds	r3, #36	; 0x24
 80101ba:	220b      	movs	r2, #11
 80101bc:	4619      	mov	r1, r3
 80101be:	f7fe ffb2 	bl	800f126 <mem_cmp>
 80101c2:	4603      	mov	r3, r0
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d00b      	beq.n	80101e0 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80101c8:	2100      	movs	r1, #0
 80101ca:	6878      	ldr	r0, [r7, #4]
 80101cc:	f7ff fe00 	bl	800fdd0 <dir_next>
 80101d0:	4603      	mov	r3, r0
 80101d2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80101d4:	7dfb      	ldrb	r3, [r7, #23]
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d0c5      	beq.n	8010166 <dir_find+0x24>
 80101da:	e002      	b.n	80101e2 <dir_find+0xa0>
		if (res != FR_OK) break;
 80101dc:	bf00      	nop
 80101de:	e000      	b.n	80101e2 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80101e0:	bf00      	nop

	return res;
 80101e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80101e4:	4618      	mov	r0, r3
 80101e6:	3718      	adds	r7, #24
 80101e8:	46bd      	mov	sp, r7
 80101ea:	bd80      	pop	{r7, pc}

080101ec <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80101ec:	b580      	push	{r7, lr}
 80101ee:	b084      	sub	sp, #16
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80101fa:	2101      	movs	r1, #1
 80101fc:	6878      	ldr	r0, [r7, #4]
 80101fe:	f7ff febd 	bl	800ff7c <dir_alloc>
 8010202:	4603      	mov	r3, r0
 8010204:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010206:	7bfb      	ldrb	r3, [r7, #15]
 8010208:	2b00      	cmp	r3, #0
 801020a:	d11c      	bne.n	8010246 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	69db      	ldr	r3, [r3, #28]
 8010210:	4619      	mov	r1, r3
 8010212:	68b8      	ldr	r0, [r7, #8]
 8010214:	f7ff f97a 	bl	800f50c <move_window>
 8010218:	4603      	mov	r3, r0
 801021a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801021c:	7bfb      	ldrb	r3, [r7, #15]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d111      	bne.n	8010246 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	6a1b      	ldr	r3, [r3, #32]
 8010226:	2220      	movs	r2, #32
 8010228:	2100      	movs	r1, #0
 801022a:	4618      	mov	r0, r3
 801022c:	f7fe ff61 	bl	800f0f2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	6a18      	ldr	r0, [r3, #32]
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	3324      	adds	r3, #36	; 0x24
 8010238:	220b      	movs	r2, #11
 801023a:	4619      	mov	r1, r3
 801023c:	f7fe ff38 	bl	800f0b0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8010240:	68bb      	ldr	r3, [r7, #8]
 8010242:	2201      	movs	r2, #1
 8010244:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8010246:	7bfb      	ldrb	r3, [r7, #15]
}
 8010248:	4618      	mov	r0, r3
 801024a:	3710      	adds	r7, #16
 801024c:	46bd      	mov	sp, r7
 801024e:	bd80      	pop	{r7, pc}

08010250 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8010250:	b580      	push	{r7, lr}
 8010252:	b084      	sub	sp, #16
 8010254:	af00      	add	r7, sp, #0
 8010256:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	69db      	ldr	r3, [r3, #28]
 8010262:	4619      	mov	r1, r3
 8010264:	68f8      	ldr	r0, [r7, #12]
 8010266:	f7ff f951 	bl	800f50c <move_window>
 801026a:	4603      	mov	r3, r0
 801026c:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 801026e:	7afb      	ldrb	r3, [r7, #11]
 8010270:	2b00      	cmp	r3, #0
 8010272:	d106      	bne.n	8010282 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	6a1b      	ldr	r3, [r3, #32]
 8010278:	22e5      	movs	r2, #229	; 0xe5
 801027a:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	2201      	movs	r2, #1
 8010280:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8010282:	7afb      	ldrb	r3, [r7, #11]
}
 8010284:	4618      	mov	r0, r3
 8010286:	3710      	adds	r7, #16
 8010288:	46bd      	mov	sp, r7
 801028a:	bd80      	pop	{r7, pc}

0801028c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801028c:	b580      	push	{r7, lr}
 801028e:	b088      	sub	sp, #32
 8010290:	af00      	add	r7, sp, #0
 8010292:	6078      	str	r0, [r7, #4]
 8010294:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8010296:	683b      	ldr	r3, [r7, #0]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	60fb      	str	r3, [r7, #12]
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	3324      	adds	r3, #36	; 0x24
 80102a0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80102a2:	220b      	movs	r2, #11
 80102a4:	2120      	movs	r1, #32
 80102a6:	68b8      	ldr	r0, [r7, #8]
 80102a8:	f7fe ff23 	bl	800f0f2 <mem_set>
	si = i = 0; ni = 8;
 80102ac:	2300      	movs	r3, #0
 80102ae:	613b      	str	r3, [r7, #16]
 80102b0:	693b      	ldr	r3, [r7, #16]
 80102b2:	617b      	str	r3, [r7, #20]
 80102b4:	2308      	movs	r3, #8
 80102b6:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 80102b8:	68fa      	ldr	r2, [r7, #12]
 80102ba:	697b      	ldr	r3, [r7, #20]
 80102bc:	4413      	add	r3, r2
 80102be:	781b      	ldrb	r3, [r3, #0]
 80102c0:	2b2e      	cmp	r3, #46	; 0x2e
 80102c2:	d12f      	bne.n	8010324 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 80102c4:	697b      	ldr	r3, [r7, #20]
 80102c6:	1c5a      	adds	r2, r3, #1
 80102c8:	617a      	str	r2, [r7, #20]
 80102ca:	68fa      	ldr	r2, [r7, #12]
 80102cc:	4413      	add	r3, r2
 80102ce:	781b      	ldrb	r3, [r3, #0]
 80102d0:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 80102d2:	7ffb      	ldrb	r3, [r7, #31]
 80102d4:	2b2e      	cmp	r3, #46	; 0x2e
 80102d6:	d10a      	bne.n	80102ee <create_name+0x62>
 80102d8:	697b      	ldr	r3, [r7, #20]
 80102da:	2b02      	cmp	r3, #2
 80102dc:	d807      	bhi.n	80102ee <create_name+0x62>
			sfn[i++] = c;
 80102de:	693b      	ldr	r3, [r7, #16]
 80102e0:	1c5a      	adds	r2, r3, #1
 80102e2:	613a      	str	r2, [r7, #16]
 80102e4:	68ba      	ldr	r2, [r7, #8]
 80102e6:	4413      	add	r3, r2
 80102e8:	7ffa      	ldrb	r2, [r7, #31]
 80102ea:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 80102ec:	e7ea      	b.n	80102c4 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 80102ee:	7ffb      	ldrb	r3, [r7, #31]
 80102f0:	2b2f      	cmp	r3, #47	; 0x2f
 80102f2:	d007      	beq.n	8010304 <create_name+0x78>
 80102f4:	7ffb      	ldrb	r3, [r7, #31]
 80102f6:	2b5c      	cmp	r3, #92	; 0x5c
 80102f8:	d004      	beq.n	8010304 <create_name+0x78>
 80102fa:	7ffb      	ldrb	r3, [r7, #31]
 80102fc:	2b20      	cmp	r3, #32
 80102fe:	d901      	bls.n	8010304 <create_name+0x78>
 8010300:	2306      	movs	r3, #6
 8010302:	e084      	b.n	801040e <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 8010304:	68fa      	ldr	r2, [r7, #12]
 8010306:	697b      	ldr	r3, [r7, #20]
 8010308:	441a      	add	r2, r3
 801030a:	683b      	ldr	r3, [r7, #0]
 801030c:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 801030e:	7ffb      	ldrb	r3, [r7, #31]
 8010310:	2b20      	cmp	r3, #32
 8010312:	d801      	bhi.n	8010318 <create_name+0x8c>
 8010314:	2224      	movs	r2, #36	; 0x24
 8010316:	e000      	b.n	801031a <create_name+0x8e>
 8010318:	2220      	movs	r2, #32
 801031a:	68bb      	ldr	r3, [r7, #8]
 801031c:	330b      	adds	r3, #11
 801031e:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8010320:	2300      	movs	r3, #0
 8010322:	e074      	b.n	801040e <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8010324:	697b      	ldr	r3, [r7, #20]
 8010326:	1c5a      	adds	r2, r3, #1
 8010328:	617a      	str	r2, [r7, #20]
 801032a:	68fa      	ldr	r2, [r7, #12]
 801032c:	4413      	add	r3, r2
 801032e:	781b      	ldrb	r3, [r3, #0]
 8010330:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010332:	7ffb      	ldrb	r3, [r7, #31]
 8010334:	2b20      	cmp	r3, #32
 8010336:	d94e      	bls.n	80103d6 <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8010338:	7ffb      	ldrb	r3, [r7, #31]
 801033a:	2b2f      	cmp	r3, #47	; 0x2f
 801033c:	d006      	beq.n	801034c <create_name+0xc0>
 801033e:	7ffb      	ldrb	r3, [r7, #31]
 8010340:	2b5c      	cmp	r3, #92	; 0x5c
 8010342:	d110      	bne.n	8010366 <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8010344:	e002      	b.n	801034c <create_name+0xc0>
 8010346:	697b      	ldr	r3, [r7, #20]
 8010348:	3301      	adds	r3, #1
 801034a:	617b      	str	r3, [r7, #20]
 801034c:	68fa      	ldr	r2, [r7, #12]
 801034e:	697b      	ldr	r3, [r7, #20]
 8010350:	4413      	add	r3, r2
 8010352:	781b      	ldrb	r3, [r3, #0]
 8010354:	2b2f      	cmp	r3, #47	; 0x2f
 8010356:	d0f6      	beq.n	8010346 <create_name+0xba>
 8010358:	68fa      	ldr	r2, [r7, #12]
 801035a:	697b      	ldr	r3, [r7, #20]
 801035c:	4413      	add	r3, r2
 801035e:	781b      	ldrb	r3, [r3, #0]
 8010360:	2b5c      	cmp	r3, #92	; 0x5c
 8010362:	d0f0      	beq.n	8010346 <create_name+0xba>
			break;
 8010364:	e038      	b.n	80103d8 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8010366:	7ffb      	ldrb	r3, [r7, #31]
 8010368:	2b2e      	cmp	r3, #46	; 0x2e
 801036a:	d003      	beq.n	8010374 <create_name+0xe8>
 801036c:	693a      	ldr	r2, [r7, #16]
 801036e:	69bb      	ldr	r3, [r7, #24]
 8010370:	429a      	cmp	r2, r3
 8010372:	d30c      	bcc.n	801038e <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8010374:	69bb      	ldr	r3, [r7, #24]
 8010376:	2b0b      	cmp	r3, #11
 8010378:	d002      	beq.n	8010380 <create_name+0xf4>
 801037a:	7ffb      	ldrb	r3, [r7, #31]
 801037c:	2b2e      	cmp	r3, #46	; 0x2e
 801037e:	d001      	beq.n	8010384 <create_name+0xf8>
 8010380:	2306      	movs	r3, #6
 8010382:	e044      	b.n	801040e <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 8010384:	2308      	movs	r3, #8
 8010386:	613b      	str	r3, [r7, #16]
 8010388:	230b      	movs	r3, #11
 801038a:	61bb      	str	r3, [r7, #24]
			continue;
 801038c:	e022      	b.n	80103d4 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 801038e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010392:	2b00      	cmp	r3, #0
 8010394:	da04      	bge.n	80103a0 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8010396:	7ffb      	ldrb	r3, [r7, #31]
 8010398:	3b80      	subs	r3, #128	; 0x80
 801039a:	4a1f      	ldr	r2, [pc, #124]	; (8010418 <create_name+0x18c>)
 801039c:	5cd3      	ldrb	r3, [r2, r3]
 801039e:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80103a0:	7ffb      	ldrb	r3, [r7, #31]
 80103a2:	4619      	mov	r1, r3
 80103a4:	481d      	ldr	r0, [pc, #116]	; (801041c <create_name+0x190>)
 80103a6:	f7fe fee5 	bl	800f174 <chk_chr>
 80103aa:	4603      	mov	r3, r0
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d001      	beq.n	80103b4 <create_name+0x128>
 80103b0:	2306      	movs	r3, #6
 80103b2:	e02c      	b.n	801040e <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80103b4:	7ffb      	ldrb	r3, [r7, #31]
 80103b6:	2b60      	cmp	r3, #96	; 0x60
 80103b8:	d905      	bls.n	80103c6 <create_name+0x13a>
 80103ba:	7ffb      	ldrb	r3, [r7, #31]
 80103bc:	2b7a      	cmp	r3, #122	; 0x7a
 80103be:	d802      	bhi.n	80103c6 <create_name+0x13a>
 80103c0:	7ffb      	ldrb	r3, [r7, #31]
 80103c2:	3b20      	subs	r3, #32
 80103c4:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 80103c6:	693b      	ldr	r3, [r7, #16]
 80103c8:	1c5a      	adds	r2, r3, #1
 80103ca:	613a      	str	r2, [r7, #16]
 80103cc:	68ba      	ldr	r2, [r7, #8]
 80103ce:	4413      	add	r3, r2
 80103d0:	7ffa      	ldrb	r2, [r7, #31]
 80103d2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80103d4:	e7a6      	b.n	8010324 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80103d6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80103d8:	68fa      	ldr	r2, [r7, #12]
 80103da:	697b      	ldr	r3, [r7, #20]
 80103dc:	441a      	add	r2, r3
 80103de:	683b      	ldr	r3, [r7, #0]
 80103e0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80103e2:	693b      	ldr	r3, [r7, #16]
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d101      	bne.n	80103ec <create_name+0x160>
 80103e8:	2306      	movs	r3, #6
 80103ea:	e010      	b.n	801040e <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80103ec:	68bb      	ldr	r3, [r7, #8]
 80103ee:	781b      	ldrb	r3, [r3, #0]
 80103f0:	2be5      	cmp	r3, #229	; 0xe5
 80103f2:	d102      	bne.n	80103fa <create_name+0x16e>
 80103f4:	68bb      	ldr	r3, [r7, #8]
 80103f6:	2205      	movs	r2, #5
 80103f8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80103fa:	7ffb      	ldrb	r3, [r7, #31]
 80103fc:	2b20      	cmp	r3, #32
 80103fe:	d801      	bhi.n	8010404 <create_name+0x178>
 8010400:	2204      	movs	r2, #4
 8010402:	e000      	b.n	8010406 <create_name+0x17a>
 8010404:	2200      	movs	r2, #0
 8010406:	68bb      	ldr	r3, [r7, #8]
 8010408:	330b      	adds	r3, #11
 801040a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 801040c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801040e:	4618      	mov	r0, r3
 8010410:	3720      	adds	r7, #32
 8010412:	46bd      	mov	sp, r7
 8010414:	bd80      	pop	{r7, pc}
 8010416:	bf00      	nop
 8010418:	08018610 	.word	0x08018610
 801041c:	080185c0 	.word	0x080185c0

08010420 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8010420:	b580      	push	{r7, lr}
 8010422:	b086      	sub	sp, #24
 8010424:	af00      	add	r7, sp, #0
 8010426:	6078      	str	r0, [r7, #4]
 8010428:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801042e:	693b      	ldr	r3, [r7, #16]
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8010434:	683b      	ldr	r3, [r7, #0]
 8010436:	781b      	ldrb	r3, [r3, #0]
 8010438:	2b2f      	cmp	r3, #47	; 0x2f
 801043a:	d00b      	beq.n	8010454 <follow_path+0x34>
 801043c:	683b      	ldr	r3, [r7, #0]
 801043e:	781b      	ldrb	r3, [r3, #0]
 8010440:	2b5c      	cmp	r3, #92	; 0x5c
 8010442:	d007      	beq.n	8010454 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	699a      	ldr	r2, [r3, #24]
 8010448:	693b      	ldr	r3, [r7, #16]
 801044a:	609a      	str	r2, [r3, #8]
 801044c:	e00d      	b.n	801046a <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801044e:	683b      	ldr	r3, [r7, #0]
 8010450:	3301      	adds	r3, #1
 8010452:	603b      	str	r3, [r7, #0]
 8010454:	683b      	ldr	r3, [r7, #0]
 8010456:	781b      	ldrb	r3, [r3, #0]
 8010458:	2b2f      	cmp	r3, #47	; 0x2f
 801045a:	d0f8      	beq.n	801044e <follow_path+0x2e>
 801045c:	683b      	ldr	r3, [r7, #0]
 801045e:	781b      	ldrb	r3, [r3, #0]
 8010460:	2b5c      	cmp	r3, #92	; 0x5c
 8010462:	d0f4      	beq.n	801044e <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8010464:	693b      	ldr	r3, [r7, #16]
 8010466:	2200      	movs	r2, #0
 8010468:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801046a:	683b      	ldr	r3, [r7, #0]
 801046c:	781b      	ldrb	r3, [r3, #0]
 801046e:	2b1f      	cmp	r3, #31
 8010470:	d80a      	bhi.n	8010488 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	2280      	movs	r2, #128	; 0x80
 8010476:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801047a:	2100      	movs	r1, #0
 801047c:	6878      	ldr	r0, [r7, #4]
 801047e:	f7ff fc1e 	bl	800fcbe <dir_sdi>
 8010482:	4603      	mov	r3, r0
 8010484:	75fb      	strb	r3, [r7, #23]
 8010486:	e05b      	b.n	8010540 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010488:	463b      	mov	r3, r7
 801048a:	4619      	mov	r1, r3
 801048c:	6878      	ldr	r0, [r7, #4]
 801048e:	f7ff fefd 	bl	801028c <create_name>
 8010492:	4603      	mov	r3, r0
 8010494:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010496:	7dfb      	ldrb	r3, [r7, #23]
 8010498:	2b00      	cmp	r3, #0
 801049a:	d14c      	bne.n	8010536 <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 801049c:	6878      	ldr	r0, [r7, #4]
 801049e:	f7ff fe50 	bl	8010142 <dir_find>
 80104a2:	4603      	mov	r3, r0
 80104a4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80104ac:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80104ae:	7dfb      	ldrb	r3, [r7, #23]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d01b      	beq.n	80104ec <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80104b4:	7dfb      	ldrb	r3, [r7, #23]
 80104b6:	2b04      	cmp	r3, #4
 80104b8:	d13f      	bne.n	801053a <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 80104ba:	7afb      	ldrb	r3, [r7, #11]
 80104bc:	f003 0320 	and.w	r3, r3, #32
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d00b      	beq.n	80104dc <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80104c4:	7afb      	ldrb	r3, [r7, #11]
 80104c6:	f003 0304 	and.w	r3, r3, #4
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d031      	beq.n	8010532 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	2280      	movs	r2, #128	; 0x80
 80104d2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 80104d6:	2300      	movs	r3, #0
 80104d8:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 80104da:	e02e      	b.n	801053a <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80104dc:	7afb      	ldrb	r3, [r7, #11]
 80104de:	f003 0304 	and.w	r3, r3, #4
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d129      	bne.n	801053a <follow_path+0x11a>
 80104e6:	2305      	movs	r3, #5
 80104e8:	75fb      	strb	r3, [r7, #23]
				break;
 80104ea:	e026      	b.n	801053a <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80104ec:	7afb      	ldrb	r3, [r7, #11]
 80104ee:	f003 0304 	and.w	r3, r3, #4
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d123      	bne.n	801053e <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80104f6:	693b      	ldr	r3, [r7, #16]
 80104f8:	799b      	ldrb	r3, [r3, #6]
 80104fa:	f003 0310 	and.w	r3, r3, #16
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d102      	bne.n	8010508 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 8010502:	2305      	movs	r3, #5
 8010504:	75fb      	strb	r3, [r7, #23]
 8010506:	e01b      	b.n	8010540 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	695b      	ldr	r3, [r3, #20]
 8010512:	68fa      	ldr	r2, [r7, #12]
 8010514:	8992      	ldrh	r2, [r2, #12]
 8010516:	fbb3 f0f2 	udiv	r0, r3, r2
 801051a:	fb02 f200 	mul.w	r2, r2, r0
 801051e:	1a9b      	subs	r3, r3, r2
 8010520:	440b      	add	r3, r1
 8010522:	4619      	mov	r1, r3
 8010524:	68f8      	ldr	r0, [r7, #12]
 8010526:	f7ff fd70 	bl	801000a <ld_clust>
 801052a:	4602      	mov	r2, r0
 801052c:	693b      	ldr	r3, [r7, #16]
 801052e:	609a      	str	r2, [r3, #8]
 8010530:	e7aa      	b.n	8010488 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8010532:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010534:	e7a8      	b.n	8010488 <follow_path+0x68>
			if (res != FR_OK) break;
 8010536:	bf00      	nop
 8010538:	e002      	b.n	8010540 <follow_path+0x120>
				break;
 801053a:	bf00      	nop
 801053c:	e000      	b.n	8010540 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801053e:	bf00      	nop
			}
		}
	}

	return res;
 8010540:	7dfb      	ldrb	r3, [r7, #23]
}
 8010542:	4618      	mov	r0, r3
 8010544:	3718      	adds	r7, #24
 8010546:	46bd      	mov	sp, r7
 8010548:	bd80      	pop	{r7, pc}

0801054a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801054a:	b480      	push	{r7}
 801054c:	b087      	sub	sp, #28
 801054e:	af00      	add	r7, sp, #0
 8010550:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010552:	f04f 33ff 	mov.w	r3, #4294967295
 8010556:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d031      	beq.n	80105c4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	617b      	str	r3, [r7, #20]
 8010566:	e002      	b.n	801056e <get_ldnumber+0x24>
 8010568:	697b      	ldr	r3, [r7, #20]
 801056a:	3301      	adds	r3, #1
 801056c:	617b      	str	r3, [r7, #20]
 801056e:	697b      	ldr	r3, [r7, #20]
 8010570:	781b      	ldrb	r3, [r3, #0]
 8010572:	2b20      	cmp	r3, #32
 8010574:	d903      	bls.n	801057e <get_ldnumber+0x34>
 8010576:	697b      	ldr	r3, [r7, #20]
 8010578:	781b      	ldrb	r3, [r3, #0]
 801057a:	2b3a      	cmp	r3, #58	; 0x3a
 801057c:	d1f4      	bne.n	8010568 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801057e:	697b      	ldr	r3, [r7, #20]
 8010580:	781b      	ldrb	r3, [r3, #0]
 8010582:	2b3a      	cmp	r3, #58	; 0x3a
 8010584:	d11c      	bne.n	80105c0 <get_ldnumber+0x76>
			tp = *path;
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	1c5a      	adds	r2, r3, #1
 8010590:	60fa      	str	r2, [r7, #12]
 8010592:	781b      	ldrb	r3, [r3, #0]
 8010594:	3b30      	subs	r3, #48	; 0x30
 8010596:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010598:	68bb      	ldr	r3, [r7, #8]
 801059a:	2b09      	cmp	r3, #9
 801059c:	d80e      	bhi.n	80105bc <get_ldnumber+0x72>
 801059e:	68fa      	ldr	r2, [r7, #12]
 80105a0:	697b      	ldr	r3, [r7, #20]
 80105a2:	429a      	cmp	r2, r3
 80105a4:	d10a      	bne.n	80105bc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80105a6:	68bb      	ldr	r3, [r7, #8]
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d107      	bne.n	80105bc <get_ldnumber+0x72>
					vol = (int)i;
 80105ac:	68bb      	ldr	r3, [r7, #8]
 80105ae:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80105b0:	697b      	ldr	r3, [r7, #20]
 80105b2:	3301      	adds	r3, #1
 80105b4:	617b      	str	r3, [r7, #20]
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	697a      	ldr	r2, [r7, #20]
 80105ba:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80105bc:	693b      	ldr	r3, [r7, #16]
 80105be:	e002      	b.n	80105c6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80105c0:	2300      	movs	r3, #0
 80105c2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80105c4:	693b      	ldr	r3, [r7, #16]
}
 80105c6:	4618      	mov	r0, r3
 80105c8:	371c      	adds	r7, #28
 80105ca:	46bd      	mov	sp, r7
 80105cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d0:	4770      	bx	lr
	...

080105d4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b082      	sub	sp, #8
 80105d8:	af00      	add	r7, sp, #0
 80105da:	6078      	str	r0, [r7, #4]
 80105dc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	2200      	movs	r2, #0
 80105e2:	70da      	strb	r2, [r3, #3]
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	f04f 32ff 	mov.w	r2, #4294967295
 80105ea:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80105ec:	6839      	ldr	r1, [r7, #0]
 80105ee:	6878      	ldr	r0, [r7, #4]
 80105f0:	f7fe ff8c 	bl	800f50c <move_window>
 80105f4:	4603      	mov	r3, r0
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d001      	beq.n	80105fe <check_fs+0x2a>
 80105fa:	2304      	movs	r3, #4
 80105fc:	e038      	b.n	8010670 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	3338      	adds	r3, #56	; 0x38
 8010602:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010606:	4618      	mov	r0, r3
 8010608:	f7fe fcd0 	bl	800efac <ld_word>
 801060c:	4603      	mov	r3, r0
 801060e:	461a      	mov	r2, r3
 8010610:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010614:	429a      	cmp	r2, r3
 8010616:	d001      	beq.n	801061c <check_fs+0x48>
 8010618:	2303      	movs	r3, #3
 801061a:	e029      	b.n	8010670 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010622:	2be9      	cmp	r3, #233	; 0xe9
 8010624:	d009      	beq.n	801063a <check_fs+0x66>
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801062c:	2beb      	cmp	r3, #235	; 0xeb
 801062e:	d11e      	bne.n	801066e <check_fs+0x9a>
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010636:	2b90      	cmp	r3, #144	; 0x90
 8010638:	d119      	bne.n	801066e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	3338      	adds	r3, #56	; 0x38
 801063e:	3336      	adds	r3, #54	; 0x36
 8010640:	4618      	mov	r0, r3
 8010642:	f7fe fccb 	bl	800efdc <ld_dword>
 8010646:	4603      	mov	r3, r0
 8010648:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801064c:	4a0a      	ldr	r2, [pc, #40]	; (8010678 <check_fs+0xa4>)
 801064e:	4293      	cmp	r3, r2
 8010650:	d101      	bne.n	8010656 <check_fs+0x82>
 8010652:	2300      	movs	r3, #0
 8010654:	e00c      	b.n	8010670 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	3338      	adds	r3, #56	; 0x38
 801065a:	3352      	adds	r3, #82	; 0x52
 801065c:	4618      	mov	r0, r3
 801065e:	f7fe fcbd 	bl	800efdc <ld_dword>
 8010662:	4602      	mov	r2, r0
 8010664:	4b05      	ldr	r3, [pc, #20]	; (801067c <check_fs+0xa8>)
 8010666:	429a      	cmp	r2, r3
 8010668:	d101      	bne.n	801066e <check_fs+0x9a>
 801066a:	2300      	movs	r3, #0
 801066c:	e000      	b.n	8010670 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801066e:	2302      	movs	r3, #2
}
 8010670:	4618      	mov	r0, r3
 8010672:	3708      	adds	r7, #8
 8010674:	46bd      	mov	sp, r7
 8010676:	bd80      	pop	{r7, pc}
 8010678:	00544146 	.word	0x00544146
 801067c:	33544146 	.word	0x33544146

08010680 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010680:	b580      	push	{r7, lr}
 8010682:	b096      	sub	sp, #88	; 0x58
 8010684:	af00      	add	r7, sp, #0
 8010686:	60f8      	str	r0, [r7, #12]
 8010688:	60b9      	str	r1, [r7, #8]
 801068a:	4613      	mov	r3, r2
 801068c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801068e:	68bb      	ldr	r3, [r7, #8]
 8010690:	2200      	movs	r2, #0
 8010692:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010694:	68f8      	ldr	r0, [r7, #12]
 8010696:	f7ff ff58 	bl	801054a <get_ldnumber>
 801069a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801069c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801069e:	2b00      	cmp	r3, #0
 80106a0:	da01      	bge.n	80106a6 <find_volume+0x26>
 80106a2:	230b      	movs	r3, #11
 80106a4:	e268      	b.n	8010b78 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80106a6:	4ab0      	ldr	r2, [pc, #704]	; (8010968 <find_volume+0x2e8>)
 80106a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80106ae:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80106b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d101      	bne.n	80106ba <find_volume+0x3a>
 80106b6:	230c      	movs	r3, #12
 80106b8:	e25e      	b.n	8010b78 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80106ba:	68bb      	ldr	r3, [r7, #8]
 80106bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80106be:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80106c0:	79fb      	ldrb	r3, [r7, #7]
 80106c2:	f023 0301 	bic.w	r3, r3, #1
 80106c6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80106c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106ca:	781b      	ldrb	r3, [r3, #0]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d01a      	beq.n	8010706 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80106d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106d2:	785b      	ldrb	r3, [r3, #1]
 80106d4:	4618      	mov	r0, r3
 80106d6:	f7fe fbcb 	bl	800ee70 <disk_status>
 80106da:	4603      	mov	r3, r0
 80106dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80106e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80106e4:	f003 0301 	and.w	r3, r3, #1
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d10c      	bne.n	8010706 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80106ec:	79fb      	ldrb	r3, [r7, #7]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d007      	beq.n	8010702 <find_volume+0x82>
 80106f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80106f6:	f003 0304 	and.w	r3, r3, #4
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d001      	beq.n	8010702 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80106fe:	230a      	movs	r3, #10
 8010700:	e23a      	b.n	8010b78 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8010702:	2300      	movs	r3, #0
 8010704:	e238      	b.n	8010b78 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8010706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010708:	2200      	movs	r2, #0
 801070a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801070c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801070e:	b2da      	uxtb	r2, r3
 8010710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010712:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010716:	785b      	ldrb	r3, [r3, #1]
 8010718:	4618      	mov	r0, r3
 801071a:	f7fe fbc3 	bl	800eea4 <disk_initialize>
 801071e:	4603      	mov	r3, r0
 8010720:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010724:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010728:	f003 0301 	and.w	r3, r3, #1
 801072c:	2b00      	cmp	r3, #0
 801072e:	d001      	beq.n	8010734 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010730:	2303      	movs	r3, #3
 8010732:	e221      	b.n	8010b78 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010734:	79fb      	ldrb	r3, [r7, #7]
 8010736:	2b00      	cmp	r3, #0
 8010738:	d007      	beq.n	801074a <find_volume+0xca>
 801073a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801073e:	f003 0304 	and.w	r3, r3, #4
 8010742:	2b00      	cmp	r3, #0
 8010744:	d001      	beq.n	801074a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8010746:	230a      	movs	r3, #10
 8010748:	e216      	b.n	8010b78 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801074a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801074c:	7858      	ldrb	r0, [r3, #1]
 801074e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010750:	330c      	adds	r3, #12
 8010752:	461a      	mov	r2, r3
 8010754:	2102      	movs	r1, #2
 8010756:	f7fe fc0b 	bl	800ef70 <disk_ioctl>
 801075a:	4603      	mov	r3, r0
 801075c:	2b00      	cmp	r3, #0
 801075e:	d001      	beq.n	8010764 <find_volume+0xe4>
 8010760:	2301      	movs	r3, #1
 8010762:	e209      	b.n	8010b78 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8010764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010766:	899b      	ldrh	r3, [r3, #12]
 8010768:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801076c:	d80d      	bhi.n	801078a <find_volume+0x10a>
 801076e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010770:	899b      	ldrh	r3, [r3, #12]
 8010772:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010776:	d308      	bcc.n	801078a <find_volume+0x10a>
 8010778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801077a:	899b      	ldrh	r3, [r3, #12]
 801077c:	461a      	mov	r2, r3
 801077e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010780:	899b      	ldrh	r3, [r3, #12]
 8010782:	3b01      	subs	r3, #1
 8010784:	4013      	ands	r3, r2
 8010786:	2b00      	cmp	r3, #0
 8010788:	d001      	beq.n	801078e <find_volume+0x10e>
 801078a:	2301      	movs	r3, #1
 801078c:	e1f4      	b.n	8010b78 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801078e:	2300      	movs	r3, #0
 8010790:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8010792:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010794:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010796:	f7ff ff1d 	bl	80105d4 <check_fs>
 801079a:	4603      	mov	r3, r0
 801079c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80107a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80107a4:	2b02      	cmp	r3, #2
 80107a6:	d14b      	bne.n	8010840 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80107a8:	2300      	movs	r3, #0
 80107aa:	643b      	str	r3, [r7, #64]	; 0x40
 80107ac:	e01f      	b.n	80107ee <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80107ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107b0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80107b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107b6:	011b      	lsls	r3, r3, #4
 80107b8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80107bc:	4413      	add	r3, r2
 80107be:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80107c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107c2:	3304      	adds	r3, #4
 80107c4:	781b      	ldrb	r3, [r3, #0]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d006      	beq.n	80107d8 <find_volume+0x158>
 80107ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107cc:	3308      	adds	r3, #8
 80107ce:	4618      	mov	r0, r3
 80107d0:	f7fe fc04 	bl	800efdc <ld_dword>
 80107d4:	4602      	mov	r2, r0
 80107d6:	e000      	b.n	80107da <find_volume+0x15a>
 80107d8:	2200      	movs	r2, #0
 80107da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107dc:	009b      	lsls	r3, r3, #2
 80107de:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80107e2:	440b      	add	r3, r1
 80107e4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80107e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107ea:	3301      	adds	r3, #1
 80107ec:	643b      	str	r3, [r7, #64]	; 0x40
 80107ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107f0:	2b03      	cmp	r3, #3
 80107f2:	d9dc      	bls.n	80107ae <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80107f4:	2300      	movs	r3, #0
 80107f6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80107f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d002      	beq.n	8010804 <find_volume+0x184>
 80107fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010800:	3b01      	subs	r3, #1
 8010802:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8010804:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010806:	009b      	lsls	r3, r3, #2
 8010808:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801080c:	4413      	add	r3, r2
 801080e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010812:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010814:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010816:	2b00      	cmp	r3, #0
 8010818:	d005      	beq.n	8010826 <find_volume+0x1a6>
 801081a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801081c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801081e:	f7ff fed9 	bl	80105d4 <check_fs>
 8010822:	4603      	mov	r3, r0
 8010824:	e000      	b.n	8010828 <find_volume+0x1a8>
 8010826:	2303      	movs	r3, #3
 8010828:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801082c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010830:	2b01      	cmp	r3, #1
 8010832:	d905      	bls.n	8010840 <find_volume+0x1c0>
 8010834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010836:	3301      	adds	r3, #1
 8010838:	643b      	str	r3, [r7, #64]	; 0x40
 801083a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801083c:	2b03      	cmp	r3, #3
 801083e:	d9e1      	bls.n	8010804 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010840:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010844:	2b04      	cmp	r3, #4
 8010846:	d101      	bne.n	801084c <find_volume+0x1cc>
 8010848:	2301      	movs	r3, #1
 801084a:	e195      	b.n	8010b78 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801084c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010850:	2b01      	cmp	r3, #1
 8010852:	d901      	bls.n	8010858 <find_volume+0x1d8>
 8010854:	230d      	movs	r3, #13
 8010856:	e18f      	b.n	8010b78 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801085a:	3338      	adds	r3, #56	; 0x38
 801085c:	330b      	adds	r3, #11
 801085e:	4618      	mov	r0, r3
 8010860:	f7fe fba4 	bl	800efac <ld_word>
 8010864:	4603      	mov	r3, r0
 8010866:	461a      	mov	r2, r3
 8010868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801086a:	899b      	ldrh	r3, [r3, #12]
 801086c:	429a      	cmp	r2, r3
 801086e:	d001      	beq.n	8010874 <find_volume+0x1f4>
 8010870:	230d      	movs	r3, #13
 8010872:	e181      	b.n	8010b78 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010876:	3338      	adds	r3, #56	; 0x38
 8010878:	3316      	adds	r3, #22
 801087a:	4618      	mov	r0, r3
 801087c:	f7fe fb96 	bl	800efac <ld_word>
 8010880:	4603      	mov	r3, r0
 8010882:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010886:	2b00      	cmp	r3, #0
 8010888:	d106      	bne.n	8010898 <find_volume+0x218>
 801088a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801088c:	3338      	adds	r3, #56	; 0x38
 801088e:	3324      	adds	r3, #36	; 0x24
 8010890:	4618      	mov	r0, r3
 8010892:	f7fe fba3 	bl	800efdc <ld_dword>
 8010896:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8010898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801089a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801089c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801089e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108a0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80108a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108a6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80108a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108aa:	789b      	ldrb	r3, [r3, #2]
 80108ac:	2b01      	cmp	r3, #1
 80108ae:	d005      	beq.n	80108bc <find_volume+0x23c>
 80108b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108b2:	789b      	ldrb	r3, [r3, #2]
 80108b4:	2b02      	cmp	r3, #2
 80108b6:	d001      	beq.n	80108bc <find_volume+0x23c>
 80108b8:	230d      	movs	r3, #13
 80108ba:	e15d      	b.n	8010b78 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80108bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108be:	789b      	ldrb	r3, [r3, #2]
 80108c0:	461a      	mov	r2, r3
 80108c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108c4:	fb02 f303 	mul.w	r3, r2, r3
 80108c8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80108ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80108d0:	b29a      	uxth	r2, r3
 80108d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108d4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80108d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108d8:	895b      	ldrh	r3, [r3, #10]
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d008      	beq.n	80108f0 <find_volume+0x270>
 80108de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108e0:	895b      	ldrh	r3, [r3, #10]
 80108e2:	461a      	mov	r2, r3
 80108e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108e6:	895b      	ldrh	r3, [r3, #10]
 80108e8:	3b01      	subs	r3, #1
 80108ea:	4013      	ands	r3, r2
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d001      	beq.n	80108f4 <find_volume+0x274>
 80108f0:	230d      	movs	r3, #13
 80108f2:	e141      	b.n	8010b78 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80108f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108f6:	3338      	adds	r3, #56	; 0x38
 80108f8:	3311      	adds	r3, #17
 80108fa:	4618      	mov	r0, r3
 80108fc:	f7fe fb56 	bl	800efac <ld_word>
 8010900:	4603      	mov	r3, r0
 8010902:	461a      	mov	r2, r3
 8010904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010906:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801090a:	891b      	ldrh	r3, [r3, #8]
 801090c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801090e:	8992      	ldrh	r2, [r2, #12]
 8010910:	0952      	lsrs	r2, r2, #5
 8010912:	b292      	uxth	r2, r2
 8010914:	fbb3 f1f2 	udiv	r1, r3, r2
 8010918:	fb02 f201 	mul.w	r2, r2, r1
 801091c:	1a9b      	subs	r3, r3, r2
 801091e:	b29b      	uxth	r3, r3
 8010920:	2b00      	cmp	r3, #0
 8010922:	d001      	beq.n	8010928 <find_volume+0x2a8>
 8010924:	230d      	movs	r3, #13
 8010926:	e127      	b.n	8010b78 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8010928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801092a:	3338      	adds	r3, #56	; 0x38
 801092c:	3313      	adds	r3, #19
 801092e:	4618      	mov	r0, r3
 8010930:	f7fe fb3c 	bl	800efac <ld_word>
 8010934:	4603      	mov	r3, r0
 8010936:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8010938:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801093a:	2b00      	cmp	r3, #0
 801093c:	d106      	bne.n	801094c <find_volume+0x2cc>
 801093e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010940:	3338      	adds	r3, #56	; 0x38
 8010942:	3320      	adds	r3, #32
 8010944:	4618      	mov	r0, r3
 8010946:	f7fe fb49 	bl	800efdc <ld_dword>
 801094a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801094c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801094e:	3338      	adds	r3, #56	; 0x38
 8010950:	330e      	adds	r3, #14
 8010952:	4618      	mov	r0, r3
 8010954:	f7fe fb2a 	bl	800efac <ld_word>
 8010958:	4603      	mov	r3, r0
 801095a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801095c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801095e:	2b00      	cmp	r3, #0
 8010960:	d104      	bne.n	801096c <find_volume+0x2ec>
 8010962:	230d      	movs	r3, #13
 8010964:	e108      	b.n	8010b78 <find_volume+0x4f8>
 8010966:	bf00      	nop
 8010968:	200335e8 	.word	0x200335e8

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801096c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801096e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010970:	4413      	add	r3, r2
 8010972:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010974:	8911      	ldrh	r1, [r2, #8]
 8010976:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010978:	8992      	ldrh	r2, [r2, #12]
 801097a:	0952      	lsrs	r2, r2, #5
 801097c:	b292      	uxth	r2, r2
 801097e:	fbb1 f2f2 	udiv	r2, r1, r2
 8010982:	b292      	uxth	r2, r2
 8010984:	4413      	add	r3, r2
 8010986:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8010988:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801098a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801098c:	429a      	cmp	r2, r3
 801098e:	d201      	bcs.n	8010994 <find_volume+0x314>
 8010990:	230d      	movs	r3, #13
 8010992:	e0f1      	b.n	8010b78 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010994:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010998:	1ad3      	subs	r3, r2, r3
 801099a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801099c:	8952      	ldrh	r2, [r2, #10]
 801099e:	fbb3 f3f2 	udiv	r3, r3, r2
 80109a2:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80109a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d101      	bne.n	80109ae <find_volume+0x32e>
 80109aa:	230d      	movs	r3, #13
 80109ac:	e0e4      	b.n	8010b78 <find_volume+0x4f8>
		fmt = FS_FAT32;
 80109ae:	2303      	movs	r3, #3
 80109b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80109b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109b6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80109ba:	4293      	cmp	r3, r2
 80109bc:	d802      	bhi.n	80109c4 <find_volume+0x344>
 80109be:	2302      	movs	r3, #2
 80109c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80109c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109c6:	f640 72f5 	movw	r2, #4085	; 0xff5
 80109ca:	4293      	cmp	r3, r2
 80109cc:	d802      	bhi.n	80109d4 <find_volume+0x354>
 80109ce:	2301      	movs	r3, #1
 80109d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80109d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109d6:	1c9a      	adds	r2, r3, #2
 80109d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109da:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80109dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80109e0:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80109e2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80109e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109e6:	441a      	add	r2, r3
 80109e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109ea:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80109ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80109ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109f0:	441a      	add	r2, r3
 80109f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109f4:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80109f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80109fa:	2b03      	cmp	r3, #3
 80109fc:	d11e      	bne.n	8010a3c <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80109fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a00:	3338      	adds	r3, #56	; 0x38
 8010a02:	332a      	adds	r3, #42	; 0x2a
 8010a04:	4618      	mov	r0, r3
 8010a06:	f7fe fad1 	bl	800efac <ld_word>
 8010a0a:	4603      	mov	r3, r0
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d001      	beq.n	8010a14 <find_volume+0x394>
 8010a10:	230d      	movs	r3, #13
 8010a12:	e0b1      	b.n	8010b78 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8010a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a16:	891b      	ldrh	r3, [r3, #8]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d001      	beq.n	8010a20 <find_volume+0x3a0>
 8010a1c:	230d      	movs	r3, #13
 8010a1e:	e0ab      	b.n	8010b78 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a22:	3338      	adds	r3, #56	; 0x38
 8010a24:	332c      	adds	r3, #44	; 0x2c
 8010a26:	4618      	mov	r0, r3
 8010a28:	f7fe fad8 	bl	800efdc <ld_dword>
 8010a2c:	4602      	mov	r2, r0
 8010a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a30:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8010a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a34:	69db      	ldr	r3, [r3, #28]
 8010a36:	009b      	lsls	r3, r3, #2
 8010a38:	647b      	str	r3, [r7, #68]	; 0x44
 8010a3a:	e01f      	b.n	8010a7c <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a3e:	891b      	ldrh	r3, [r3, #8]
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d101      	bne.n	8010a48 <find_volume+0x3c8>
 8010a44:	230d      	movs	r3, #13
 8010a46:	e097      	b.n	8010b78 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010a4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a4e:	441a      	add	r2, r3
 8010a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a52:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010a54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010a58:	2b02      	cmp	r3, #2
 8010a5a:	d103      	bne.n	8010a64 <find_volume+0x3e4>
 8010a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a5e:	69db      	ldr	r3, [r3, #28]
 8010a60:	005b      	lsls	r3, r3, #1
 8010a62:	e00a      	b.n	8010a7a <find_volume+0x3fa>
 8010a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a66:	69da      	ldr	r2, [r3, #28]
 8010a68:	4613      	mov	r3, r2
 8010a6a:	005b      	lsls	r3, r3, #1
 8010a6c:	4413      	add	r3, r2
 8010a6e:	085a      	lsrs	r2, r3, #1
 8010a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a72:	69db      	ldr	r3, [r3, #28]
 8010a74:	f003 0301 	and.w	r3, r3, #1
 8010a78:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8010a7a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a7e:	6a1a      	ldr	r2, [r3, #32]
 8010a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a82:	899b      	ldrh	r3, [r3, #12]
 8010a84:	4619      	mov	r1, r3
 8010a86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a88:	440b      	add	r3, r1
 8010a8a:	3b01      	subs	r3, #1
 8010a8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010a8e:	8989      	ldrh	r1, [r1, #12]
 8010a90:	fbb3 f3f1 	udiv	r3, r3, r1
 8010a94:	429a      	cmp	r2, r3
 8010a96:	d201      	bcs.n	8010a9c <find_volume+0x41c>
 8010a98:	230d      	movs	r3, #13
 8010a9a:	e06d      	b.n	8010b78 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8010aa2:	615a      	str	r2, [r3, #20]
 8010aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010aa6:	695a      	ldr	r2, [r3, #20]
 8010aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010aaa:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8010aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010aae:	2280      	movs	r2, #128	; 0x80
 8010ab0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010ab2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010ab6:	2b03      	cmp	r3, #3
 8010ab8:	d149      	bne.n	8010b4e <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010abc:	3338      	adds	r3, #56	; 0x38
 8010abe:	3330      	adds	r3, #48	; 0x30
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	f7fe fa73 	bl	800efac <ld_word>
 8010ac6:	4603      	mov	r3, r0
 8010ac8:	2b01      	cmp	r3, #1
 8010aca:	d140      	bne.n	8010b4e <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010acc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ace:	3301      	adds	r3, #1
 8010ad0:	4619      	mov	r1, r3
 8010ad2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010ad4:	f7fe fd1a 	bl	800f50c <move_window>
 8010ad8:	4603      	mov	r3, r0
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d137      	bne.n	8010b4e <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8010ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ae0:	2200      	movs	r2, #0
 8010ae2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ae6:	3338      	adds	r3, #56	; 0x38
 8010ae8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010aec:	4618      	mov	r0, r3
 8010aee:	f7fe fa5d 	bl	800efac <ld_word>
 8010af2:	4603      	mov	r3, r0
 8010af4:	461a      	mov	r2, r3
 8010af6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010afa:	429a      	cmp	r2, r3
 8010afc:	d127      	bne.n	8010b4e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8010afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b00:	3338      	adds	r3, #56	; 0x38
 8010b02:	4618      	mov	r0, r3
 8010b04:	f7fe fa6a 	bl	800efdc <ld_dword>
 8010b08:	4602      	mov	r2, r0
 8010b0a:	4b1d      	ldr	r3, [pc, #116]	; (8010b80 <find_volume+0x500>)
 8010b0c:	429a      	cmp	r2, r3
 8010b0e:	d11e      	bne.n	8010b4e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b12:	3338      	adds	r3, #56	; 0x38
 8010b14:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010b18:	4618      	mov	r0, r3
 8010b1a:	f7fe fa5f 	bl	800efdc <ld_dword>
 8010b1e:	4602      	mov	r2, r0
 8010b20:	4b18      	ldr	r3, [pc, #96]	; (8010b84 <find_volume+0x504>)
 8010b22:	429a      	cmp	r2, r3
 8010b24:	d113      	bne.n	8010b4e <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8010b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b28:	3338      	adds	r3, #56	; 0x38
 8010b2a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8010b2e:	4618      	mov	r0, r3
 8010b30:	f7fe fa54 	bl	800efdc <ld_dword>
 8010b34:	4602      	mov	r2, r0
 8010b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b38:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b3c:	3338      	adds	r3, #56	; 0x38
 8010b3e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8010b42:	4618      	mov	r0, r3
 8010b44:	f7fe fa4a 	bl	800efdc <ld_dword>
 8010b48:	4602      	mov	r2, r0
 8010b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b4c:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8010b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b50:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8010b54:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8010b56:	4b0c      	ldr	r3, [pc, #48]	; (8010b88 <find_volume+0x508>)
 8010b58:	881b      	ldrh	r3, [r3, #0]
 8010b5a:	3301      	adds	r3, #1
 8010b5c:	b29a      	uxth	r2, r3
 8010b5e:	4b0a      	ldr	r3, [pc, #40]	; (8010b88 <find_volume+0x508>)
 8010b60:	801a      	strh	r2, [r3, #0]
 8010b62:	4b09      	ldr	r3, [pc, #36]	; (8010b88 <find_volume+0x508>)
 8010b64:	881a      	ldrh	r2, [r3, #0]
 8010b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b68:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8010b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b6c:	2200      	movs	r2, #0
 8010b6e:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8010b70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010b72:	f7fe fc63 	bl	800f43c <clear_lock>
#endif
	return FR_OK;
 8010b76:	2300      	movs	r3, #0
}
 8010b78:	4618      	mov	r0, r3
 8010b7a:	3758      	adds	r7, #88	; 0x58
 8010b7c:	46bd      	mov	sp, r7
 8010b7e:	bd80      	pop	{r7, pc}
 8010b80:	41615252 	.word	0x41615252
 8010b84:	61417272 	.word	0x61417272
 8010b88:	200335ec 	.word	0x200335ec

08010b8c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010b8c:	b580      	push	{r7, lr}
 8010b8e:	b084      	sub	sp, #16
 8010b90:	af00      	add	r7, sp, #0
 8010b92:	6078      	str	r0, [r7, #4]
 8010b94:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8010b96:	2309      	movs	r3, #9
 8010b98:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d01c      	beq.n	8010bda <validate+0x4e>
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d018      	beq.n	8010bda <validate+0x4e>
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	781b      	ldrb	r3, [r3, #0]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d013      	beq.n	8010bda <validate+0x4e>
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	889a      	ldrh	r2, [r3, #4]
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	88db      	ldrh	r3, [r3, #6]
 8010bbc:	429a      	cmp	r2, r3
 8010bbe:	d10c      	bne.n	8010bda <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	785b      	ldrb	r3, [r3, #1]
 8010bc6:	4618      	mov	r0, r3
 8010bc8:	f7fe f952 	bl	800ee70 <disk_status>
 8010bcc:	4603      	mov	r3, r0
 8010bce:	f003 0301 	and.w	r3, r3, #1
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d101      	bne.n	8010bda <validate+0x4e>
			res = FR_OK;
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8010bda:	7bfb      	ldrb	r3, [r7, #15]
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d102      	bne.n	8010be6 <validate+0x5a>
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	e000      	b.n	8010be8 <validate+0x5c>
 8010be6:	2300      	movs	r3, #0
 8010be8:	683a      	ldr	r2, [r7, #0]
 8010bea:	6013      	str	r3, [r2, #0]
	return res;
 8010bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bee:	4618      	mov	r0, r3
 8010bf0:	3710      	adds	r7, #16
 8010bf2:	46bd      	mov	sp, r7
 8010bf4:	bd80      	pop	{r7, pc}
	...

08010bf8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010bf8:	b580      	push	{r7, lr}
 8010bfa:	b088      	sub	sp, #32
 8010bfc:	af00      	add	r7, sp, #0
 8010bfe:	60f8      	str	r0, [r7, #12]
 8010c00:	60b9      	str	r1, [r7, #8]
 8010c02:	4613      	mov	r3, r2
 8010c04:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010c06:	68bb      	ldr	r3, [r7, #8]
 8010c08:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8010c0a:	f107 0310 	add.w	r3, r7, #16
 8010c0e:	4618      	mov	r0, r3
 8010c10:	f7ff fc9b 	bl	801054a <get_ldnumber>
 8010c14:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010c16:	69fb      	ldr	r3, [r7, #28]
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	da01      	bge.n	8010c20 <f_mount+0x28>
 8010c1c:	230b      	movs	r3, #11
 8010c1e:	e02b      	b.n	8010c78 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010c20:	4a17      	ldr	r2, [pc, #92]	; (8010c80 <f_mount+0x88>)
 8010c22:	69fb      	ldr	r3, [r7, #28]
 8010c24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010c28:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8010c2a:	69bb      	ldr	r3, [r7, #24]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d005      	beq.n	8010c3c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010c30:	69b8      	ldr	r0, [r7, #24]
 8010c32:	f7fe fc03 	bl	800f43c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010c36:	69bb      	ldr	r3, [r7, #24]
 8010c38:	2200      	movs	r2, #0
 8010c3a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d002      	beq.n	8010c48 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	2200      	movs	r2, #0
 8010c46:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010c48:	68fa      	ldr	r2, [r7, #12]
 8010c4a:	490d      	ldr	r1, [pc, #52]	; (8010c80 <f_mount+0x88>)
 8010c4c:	69fb      	ldr	r3, [r7, #28]
 8010c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d002      	beq.n	8010c5e <f_mount+0x66>
 8010c58:	79fb      	ldrb	r3, [r7, #7]
 8010c5a:	2b01      	cmp	r3, #1
 8010c5c:	d001      	beq.n	8010c62 <f_mount+0x6a>
 8010c5e:	2300      	movs	r3, #0
 8010c60:	e00a      	b.n	8010c78 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010c62:	f107 010c 	add.w	r1, r7, #12
 8010c66:	f107 0308 	add.w	r3, r7, #8
 8010c6a:	2200      	movs	r2, #0
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	f7ff fd07 	bl	8010680 <find_volume>
 8010c72:	4603      	mov	r3, r0
 8010c74:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c78:	4618      	mov	r0, r3
 8010c7a:	3720      	adds	r7, #32
 8010c7c:	46bd      	mov	sp, r7
 8010c7e:	bd80      	pop	{r7, pc}
 8010c80:	200335e8 	.word	0x200335e8

08010c84 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010c84:	b580      	push	{r7, lr}
 8010c86:	b098      	sub	sp, #96	; 0x60
 8010c88:	af00      	add	r7, sp, #0
 8010c8a:	60f8      	str	r0, [r7, #12]
 8010c8c:	60b9      	str	r1, [r7, #8]
 8010c8e:	4613      	mov	r3, r2
 8010c90:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d101      	bne.n	8010c9c <f_open+0x18>
 8010c98:	2309      	movs	r3, #9
 8010c9a:	e1ba      	b.n	8011012 <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010c9c:	79fb      	ldrb	r3, [r7, #7]
 8010c9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010ca2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8010ca4:	79fa      	ldrb	r2, [r7, #7]
 8010ca6:	f107 0110 	add.w	r1, r7, #16
 8010caa:	f107 0308 	add.w	r3, r7, #8
 8010cae:	4618      	mov	r0, r3
 8010cb0:	f7ff fce6 	bl	8010680 <find_volume>
 8010cb4:	4603      	mov	r3, r0
 8010cb6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8010cba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	f040 819e 	bne.w	8011000 <f_open+0x37c>
		dj.obj.fs = fs;
 8010cc4:	693b      	ldr	r3, [r7, #16]
 8010cc6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010cc8:	68ba      	ldr	r2, [r7, #8]
 8010cca:	f107 0314 	add.w	r3, r7, #20
 8010cce:	4611      	mov	r1, r2
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	f7ff fba5 	bl	8010420 <follow_path>
 8010cd6:	4603      	mov	r3, r0
 8010cd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010cdc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d11a      	bne.n	8010d1a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010ce4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010ce8:	b25b      	sxtb	r3, r3
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	da03      	bge.n	8010cf6 <f_open+0x72>
				res = FR_INVALID_NAME;
 8010cee:	2306      	movs	r3, #6
 8010cf0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010cf4:	e011      	b.n	8010d1a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010cf6:	79fb      	ldrb	r3, [r7, #7]
 8010cf8:	f023 0301 	bic.w	r3, r3, #1
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	bf14      	ite	ne
 8010d00:	2301      	movne	r3, #1
 8010d02:	2300      	moveq	r3, #0
 8010d04:	b2db      	uxtb	r3, r3
 8010d06:	461a      	mov	r2, r3
 8010d08:	f107 0314 	add.w	r3, r7, #20
 8010d0c:	4611      	mov	r1, r2
 8010d0e:	4618      	mov	r0, r3
 8010d10:	f7fe fa4c 	bl	800f1ac <chk_lock>
 8010d14:	4603      	mov	r3, r0
 8010d16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010d1a:	79fb      	ldrb	r3, [r7, #7]
 8010d1c:	f003 031c 	and.w	r3, r3, #28
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d07e      	beq.n	8010e22 <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8010d24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d017      	beq.n	8010d5c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010d2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010d30:	2b04      	cmp	r3, #4
 8010d32:	d10e      	bne.n	8010d52 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010d34:	f7fe fa96 	bl	800f264 <enq_lock>
 8010d38:	4603      	mov	r3, r0
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d006      	beq.n	8010d4c <f_open+0xc8>
 8010d3e:	f107 0314 	add.w	r3, r7, #20
 8010d42:	4618      	mov	r0, r3
 8010d44:	f7ff fa52 	bl	80101ec <dir_register>
 8010d48:	4603      	mov	r3, r0
 8010d4a:	e000      	b.n	8010d4e <f_open+0xca>
 8010d4c:	2312      	movs	r3, #18
 8010d4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010d52:	79fb      	ldrb	r3, [r7, #7]
 8010d54:	f043 0308 	orr.w	r3, r3, #8
 8010d58:	71fb      	strb	r3, [r7, #7]
 8010d5a:	e010      	b.n	8010d7e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010d5c:	7ebb      	ldrb	r3, [r7, #26]
 8010d5e:	f003 0311 	and.w	r3, r3, #17
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d003      	beq.n	8010d6e <f_open+0xea>
					res = FR_DENIED;
 8010d66:	2307      	movs	r3, #7
 8010d68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010d6c:	e007      	b.n	8010d7e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8010d6e:	79fb      	ldrb	r3, [r7, #7]
 8010d70:	f003 0304 	and.w	r3, r3, #4
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d002      	beq.n	8010d7e <f_open+0xfa>
 8010d78:	2308      	movs	r3, #8
 8010d7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8010d7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d167      	bne.n	8010e56 <f_open+0x1d2>
 8010d86:	79fb      	ldrb	r3, [r7, #7]
 8010d88:	f003 0308 	and.w	r3, r3, #8
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d062      	beq.n	8010e56 <f_open+0x1d2>
				dw = GET_FATTIME();
 8010d90:	4ba2      	ldr	r3, [pc, #648]	; (801101c <f_open+0x398>)
 8010d92:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d96:	330e      	adds	r3, #14
 8010d98:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010d9a:	4618      	mov	r0, r3
 8010d9c:	f7fe f95c 	bl	800f058 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8010da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010da2:	3316      	adds	r3, #22
 8010da4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010da6:	4618      	mov	r0, r3
 8010da8:	f7fe f956 	bl	800f058 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8010dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dae:	330b      	adds	r3, #11
 8010db0:	2220      	movs	r2, #32
 8010db2:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010db4:	693b      	ldr	r3, [r7, #16]
 8010db6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010db8:	4611      	mov	r1, r2
 8010dba:	4618      	mov	r0, r3
 8010dbc:	f7ff f925 	bl	801000a <ld_clust>
 8010dc0:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010dc2:	693b      	ldr	r3, [r7, #16]
 8010dc4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010dc6:	2200      	movs	r2, #0
 8010dc8:	4618      	mov	r0, r3
 8010dca:	f7ff f93d 	bl	8010048 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8010dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dd0:	331c      	adds	r3, #28
 8010dd2:	2100      	movs	r1, #0
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	f7fe f93f 	bl	800f058 <st_dword>
					fs->wflag = 1;
 8010dda:	693b      	ldr	r3, [r7, #16]
 8010ddc:	2201      	movs	r2, #1
 8010dde:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8010de0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d037      	beq.n	8010e56 <f_open+0x1d2>
						dw = fs->winsect;
 8010de6:	693b      	ldr	r3, [r7, #16]
 8010de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010dea:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8010dec:	f107 0314 	add.w	r3, r7, #20
 8010df0:	2200      	movs	r2, #0
 8010df2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010df4:	4618      	mov	r0, r3
 8010df6:	f7fe fe2d 	bl	800fa54 <remove_chain>
 8010dfa:	4603      	mov	r3, r0
 8010dfc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8010e00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d126      	bne.n	8010e56 <f_open+0x1d2>
							res = move_window(fs, dw);
 8010e08:	693b      	ldr	r3, [r7, #16]
 8010e0a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	f7fe fb7d 	bl	800f50c <move_window>
 8010e12:	4603      	mov	r3, r0
 8010e14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8010e18:	693b      	ldr	r3, [r7, #16]
 8010e1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010e1c:	3a01      	subs	r2, #1
 8010e1e:	611a      	str	r2, [r3, #16]
 8010e20:	e019      	b.n	8010e56 <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010e22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d115      	bne.n	8010e56 <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010e2a:	7ebb      	ldrb	r3, [r7, #26]
 8010e2c:	f003 0310 	and.w	r3, r3, #16
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d003      	beq.n	8010e3c <f_open+0x1b8>
					res = FR_NO_FILE;
 8010e34:	2304      	movs	r3, #4
 8010e36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010e3a:	e00c      	b.n	8010e56 <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8010e3c:	79fb      	ldrb	r3, [r7, #7]
 8010e3e:	f003 0302 	and.w	r3, r3, #2
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d007      	beq.n	8010e56 <f_open+0x1d2>
 8010e46:	7ebb      	ldrb	r3, [r7, #26]
 8010e48:	f003 0301 	and.w	r3, r3, #1
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d002      	beq.n	8010e56 <f_open+0x1d2>
						res = FR_DENIED;
 8010e50:	2307      	movs	r3, #7
 8010e52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8010e56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d128      	bne.n	8010eb0 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010e5e:	79fb      	ldrb	r3, [r7, #7]
 8010e60:	f003 0308 	and.w	r3, r3, #8
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d003      	beq.n	8010e70 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 8010e68:	79fb      	ldrb	r3, [r7, #7]
 8010e6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010e6e:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8010e70:	693b      	ldr	r3, [r7, #16]
 8010e72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8010e78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010e7e:	79fb      	ldrb	r3, [r7, #7]
 8010e80:	f023 0301 	bic.w	r3, r3, #1
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	bf14      	ite	ne
 8010e88:	2301      	movne	r3, #1
 8010e8a:	2300      	moveq	r3, #0
 8010e8c:	b2db      	uxtb	r3, r3
 8010e8e:	461a      	mov	r2, r3
 8010e90:	f107 0314 	add.w	r3, r7, #20
 8010e94:	4611      	mov	r1, r2
 8010e96:	4618      	mov	r0, r3
 8010e98:	f7fe fa06 	bl	800f2a8 <inc_lock>
 8010e9c:	4602      	mov	r2, r0
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	691b      	ldr	r3, [r3, #16]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d102      	bne.n	8010eb0 <f_open+0x22c>
 8010eaa:	2302      	movs	r3, #2
 8010eac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8010eb0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	f040 80a3 	bne.w	8011000 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010eba:	693b      	ldr	r3, [r7, #16]
 8010ebc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010ebe:	4611      	mov	r1, r2
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	f7ff f8a2 	bl	801000a <ld_clust>
 8010ec6:	4602      	mov	r2, r0
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8010ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ece:	331c      	adds	r3, #28
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	f7fe f883 	bl	800efdc <ld_dword>
 8010ed6:	4602      	mov	r2, r0
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	2200      	movs	r2, #0
 8010ee0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010ee2:	693a      	ldr	r2, [r7, #16]
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010ee8:	693b      	ldr	r3, [r7, #16]
 8010eea:	88da      	ldrh	r2, [r3, #6]
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	79fa      	ldrb	r2, [r7, #7]
 8010ef4:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	2200      	movs	r2, #0
 8010efa:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	2200      	movs	r2, #0
 8010f00:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	2200      	movs	r2, #0
 8010f06:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8010f08:	68fb      	ldr	r3, [r7, #12]
 8010f0a:	3330      	adds	r3, #48	; 0x30
 8010f0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010f10:	2100      	movs	r1, #0
 8010f12:	4618      	mov	r0, r3
 8010f14:	f7fe f8ed 	bl	800f0f2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010f18:	79fb      	ldrb	r3, [r7, #7]
 8010f1a:	f003 0320 	and.w	r3, r3, #32
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d06e      	beq.n	8011000 <f_open+0x37c>
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	68db      	ldr	r3, [r3, #12]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d06a      	beq.n	8011000 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	68da      	ldr	r2, [r3, #12]
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010f32:	693b      	ldr	r3, [r7, #16]
 8010f34:	895b      	ldrh	r3, [r3, #10]
 8010f36:	461a      	mov	r2, r3
 8010f38:	693b      	ldr	r3, [r7, #16]
 8010f3a:	899b      	ldrh	r3, [r3, #12]
 8010f3c:	fb03 f302 	mul.w	r3, r3, r2
 8010f40:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	689b      	ldr	r3, [r3, #8]
 8010f46:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	68db      	ldr	r3, [r3, #12]
 8010f4c:	657b      	str	r3, [r7, #84]	; 0x54
 8010f4e:	e016      	b.n	8010f7e <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010f54:	4618      	mov	r0, r3
 8010f56:	f7fe fb96 	bl	800f686 <get_fat>
 8010f5a:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8010f5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010f5e:	2b01      	cmp	r3, #1
 8010f60:	d802      	bhi.n	8010f68 <f_open+0x2e4>
 8010f62:	2302      	movs	r3, #2
 8010f64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010f68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f6e:	d102      	bne.n	8010f76 <f_open+0x2f2>
 8010f70:	2301      	movs	r3, #1
 8010f72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010f76:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010f78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010f7a:	1ad3      	subs	r3, r2, r3
 8010f7c:	657b      	str	r3, [r7, #84]	; 0x54
 8010f7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d103      	bne.n	8010f8e <f_open+0x30a>
 8010f86:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010f88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010f8a:	429a      	cmp	r2, r3
 8010f8c:	d8e0      	bhi.n	8010f50 <f_open+0x2cc>
				}
				fp->clust = clst;
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010f92:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010f94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d131      	bne.n	8011000 <f_open+0x37c>
 8010f9c:	693b      	ldr	r3, [r7, #16]
 8010f9e:	899b      	ldrh	r3, [r3, #12]
 8010fa0:	461a      	mov	r2, r3
 8010fa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010fa4:	fbb3 f1f2 	udiv	r1, r3, r2
 8010fa8:	fb02 f201 	mul.w	r2, r2, r1
 8010fac:	1a9b      	subs	r3, r3, r2
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d026      	beq.n	8011000 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010fb2:	693b      	ldr	r3, [r7, #16]
 8010fb4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	f7fe fb46 	bl	800f648 <clust2sect>
 8010fbc:	6478      	str	r0, [r7, #68]	; 0x44
 8010fbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d103      	bne.n	8010fcc <f_open+0x348>
						res = FR_INT_ERR;
 8010fc4:	2302      	movs	r3, #2
 8010fc6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010fca:	e019      	b.n	8011000 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8010fcc:	693b      	ldr	r3, [r7, #16]
 8010fce:	899b      	ldrh	r3, [r3, #12]
 8010fd0:	461a      	mov	r2, r3
 8010fd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010fd4:	fbb3 f2f2 	udiv	r2, r3, r2
 8010fd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010fda:	441a      	add	r2, r3
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010fe0:	693b      	ldr	r3, [r7, #16]
 8010fe2:	7858      	ldrb	r0, [r3, #1]
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	6a1a      	ldr	r2, [r3, #32]
 8010fee:	2301      	movs	r3, #1
 8010ff0:	f7fd ff7e 	bl	800eef0 <disk_read>
 8010ff4:	4603      	mov	r3, r0
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d002      	beq.n	8011000 <f_open+0x37c>
 8010ffa:	2301      	movs	r3, #1
 8010ffc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8011000:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011004:	2b00      	cmp	r3, #0
 8011006:	d002      	beq.n	801100e <f_open+0x38a>
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	2200      	movs	r2, #0
 801100c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801100e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8011012:	4618      	mov	r0, r3
 8011014:	3760      	adds	r7, #96	; 0x60
 8011016:	46bd      	mov	sp, r7
 8011018:	bd80      	pop	{r7, pc}
 801101a:	bf00      	nop
 801101c:	274a0000 	.word	0x274a0000

08011020 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8011020:	b580      	push	{r7, lr}
 8011022:	b08e      	sub	sp, #56	; 0x38
 8011024:	af00      	add	r7, sp, #0
 8011026:	60f8      	str	r0, [r7, #12]
 8011028:	60b9      	str	r1, [r7, #8]
 801102a:	607a      	str	r2, [r7, #4]
 801102c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801102e:	68bb      	ldr	r3, [r7, #8]
 8011030:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8011032:	683b      	ldr	r3, [r7, #0]
 8011034:	2200      	movs	r2, #0
 8011036:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	f107 0214 	add.w	r2, r7, #20
 801103e:	4611      	mov	r1, r2
 8011040:	4618      	mov	r0, r3
 8011042:	f7ff fda3 	bl	8010b8c <validate>
 8011046:	4603      	mov	r3, r0
 8011048:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801104c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011050:	2b00      	cmp	r3, #0
 8011052:	d107      	bne.n	8011064 <f_read+0x44>
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	7d5b      	ldrb	r3, [r3, #21]
 8011058:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801105c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011060:	2b00      	cmp	r3, #0
 8011062:	d002      	beq.n	801106a <f_read+0x4a>
 8011064:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011068:	e135      	b.n	80112d6 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	7d1b      	ldrb	r3, [r3, #20]
 801106e:	f003 0301 	and.w	r3, r3, #1
 8011072:	2b00      	cmp	r3, #0
 8011074:	d101      	bne.n	801107a <f_read+0x5a>
 8011076:	2307      	movs	r3, #7
 8011078:	e12d      	b.n	80112d6 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	68da      	ldr	r2, [r3, #12]
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	699b      	ldr	r3, [r3, #24]
 8011082:	1ad3      	subs	r3, r2, r3
 8011084:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8011086:	687a      	ldr	r2, [r7, #4]
 8011088:	6a3b      	ldr	r3, [r7, #32]
 801108a:	429a      	cmp	r2, r3
 801108c:	f240 811e 	bls.w	80112cc <f_read+0x2ac>
 8011090:	6a3b      	ldr	r3, [r7, #32]
 8011092:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8011094:	e11a      	b.n	80112cc <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	699b      	ldr	r3, [r3, #24]
 801109a:	697a      	ldr	r2, [r7, #20]
 801109c:	8992      	ldrh	r2, [r2, #12]
 801109e:	fbb3 f1f2 	udiv	r1, r3, r2
 80110a2:	fb02 f201 	mul.w	r2, r2, r1
 80110a6:	1a9b      	subs	r3, r3, r2
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	f040 80d5 	bne.w	8011258 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	699b      	ldr	r3, [r3, #24]
 80110b2:	697a      	ldr	r2, [r7, #20]
 80110b4:	8992      	ldrh	r2, [r2, #12]
 80110b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80110ba:	697a      	ldr	r2, [r7, #20]
 80110bc:	8952      	ldrh	r2, [r2, #10]
 80110be:	3a01      	subs	r2, #1
 80110c0:	4013      	ands	r3, r2
 80110c2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80110c4:	69fb      	ldr	r3, [r7, #28]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d12f      	bne.n	801112a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	699b      	ldr	r3, [r3, #24]
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d103      	bne.n	80110da <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	689b      	ldr	r3, [r3, #8]
 80110d6:	633b      	str	r3, [r7, #48]	; 0x30
 80110d8:	e013      	b.n	8011102 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d007      	beq.n	80110f2 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	699b      	ldr	r3, [r3, #24]
 80110e6:	4619      	mov	r1, r3
 80110e8:	68f8      	ldr	r0, [r7, #12]
 80110ea:	f7fe fdb0 	bl	800fc4e <clmt_clust>
 80110ee:	6338      	str	r0, [r7, #48]	; 0x30
 80110f0:	e007      	b.n	8011102 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80110f2:	68fa      	ldr	r2, [r7, #12]
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	69db      	ldr	r3, [r3, #28]
 80110f8:	4619      	mov	r1, r3
 80110fa:	4610      	mov	r0, r2
 80110fc:	f7fe fac3 	bl	800f686 <get_fat>
 8011100:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8011102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011104:	2b01      	cmp	r3, #1
 8011106:	d804      	bhi.n	8011112 <f_read+0xf2>
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	2202      	movs	r2, #2
 801110c:	755a      	strb	r2, [r3, #21]
 801110e:	2302      	movs	r3, #2
 8011110:	e0e1      	b.n	80112d6 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011118:	d104      	bne.n	8011124 <f_read+0x104>
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	2201      	movs	r2, #1
 801111e:	755a      	strb	r2, [r3, #21]
 8011120:	2301      	movs	r3, #1
 8011122:	e0d8      	b.n	80112d6 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011128:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801112a:	697a      	ldr	r2, [r7, #20]
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	69db      	ldr	r3, [r3, #28]
 8011130:	4619      	mov	r1, r3
 8011132:	4610      	mov	r0, r2
 8011134:	f7fe fa88 	bl	800f648 <clust2sect>
 8011138:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801113a:	69bb      	ldr	r3, [r7, #24]
 801113c:	2b00      	cmp	r3, #0
 801113e:	d104      	bne.n	801114a <f_read+0x12a>
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	2202      	movs	r2, #2
 8011144:	755a      	strb	r2, [r3, #21]
 8011146:	2302      	movs	r3, #2
 8011148:	e0c5      	b.n	80112d6 <f_read+0x2b6>
			sect += csect;
 801114a:	69ba      	ldr	r2, [r7, #24]
 801114c:	69fb      	ldr	r3, [r7, #28]
 801114e:	4413      	add	r3, r2
 8011150:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8011152:	697b      	ldr	r3, [r7, #20]
 8011154:	899b      	ldrh	r3, [r3, #12]
 8011156:	461a      	mov	r2, r3
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	fbb3 f3f2 	udiv	r3, r3, r2
 801115e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8011160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011162:	2b00      	cmp	r3, #0
 8011164:	d041      	beq.n	80111ea <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011166:	69fa      	ldr	r2, [r7, #28]
 8011168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801116a:	4413      	add	r3, r2
 801116c:	697a      	ldr	r2, [r7, #20]
 801116e:	8952      	ldrh	r2, [r2, #10]
 8011170:	4293      	cmp	r3, r2
 8011172:	d905      	bls.n	8011180 <f_read+0x160>
					cc = fs->csize - csect;
 8011174:	697b      	ldr	r3, [r7, #20]
 8011176:	895b      	ldrh	r3, [r3, #10]
 8011178:	461a      	mov	r2, r3
 801117a:	69fb      	ldr	r3, [r7, #28]
 801117c:	1ad3      	subs	r3, r2, r3
 801117e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011180:	697b      	ldr	r3, [r7, #20]
 8011182:	7858      	ldrb	r0, [r3, #1]
 8011184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011186:	69ba      	ldr	r2, [r7, #24]
 8011188:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801118a:	f7fd feb1 	bl	800eef0 <disk_read>
 801118e:	4603      	mov	r3, r0
 8011190:	2b00      	cmp	r3, #0
 8011192:	d004      	beq.n	801119e <f_read+0x17e>
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	2201      	movs	r2, #1
 8011198:	755a      	strb	r2, [r3, #21]
 801119a:	2301      	movs	r3, #1
 801119c:	e09b      	b.n	80112d6 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	7d1b      	ldrb	r3, [r3, #20]
 80111a2:	b25b      	sxtb	r3, r3
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	da18      	bge.n	80111da <f_read+0x1ba>
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	6a1a      	ldr	r2, [r3, #32]
 80111ac:	69bb      	ldr	r3, [r7, #24]
 80111ae:	1ad3      	subs	r3, r2, r3
 80111b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80111b2:	429a      	cmp	r2, r3
 80111b4:	d911      	bls.n	80111da <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	6a1a      	ldr	r2, [r3, #32]
 80111ba:	69bb      	ldr	r3, [r7, #24]
 80111bc:	1ad3      	subs	r3, r2, r3
 80111be:	697a      	ldr	r2, [r7, #20]
 80111c0:	8992      	ldrh	r2, [r2, #12]
 80111c2:	fb02 f303 	mul.w	r3, r2, r3
 80111c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80111c8:	18d0      	adds	r0, r2, r3
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80111d0:	697b      	ldr	r3, [r7, #20]
 80111d2:	899b      	ldrh	r3, [r3, #12]
 80111d4:	461a      	mov	r2, r3
 80111d6:	f7fd ff6b 	bl	800f0b0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80111da:	697b      	ldr	r3, [r7, #20]
 80111dc:	899b      	ldrh	r3, [r3, #12]
 80111de:	461a      	mov	r2, r3
 80111e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111e2:	fb02 f303 	mul.w	r3, r2, r3
 80111e6:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80111e8:	e05c      	b.n	80112a4 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	6a1b      	ldr	r3, [r3, #32]
 80111ee:	69ba      	ldr	r2, [r7, #24]
 80111f0:	429a      	cmp	r2, r3
 80111f2:	d02e      	beq.n	8011252 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	7d1b      	ldrb	r3, [r3, #20]
 80111f8:	b25b      	sxtb	r3, r3
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	da18      	bge.n	8011230 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80111fe:	697b      	ldr	r3, [r7, #20]
 8011200:	7858      	ldrb	r0, [r3, #1]
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	6a1a      	ldr	r2, [r3, #32]
 801120c:	2301      	movs	r3, #1
 801120e:	f7fd fe8f 	bl	800ef30 <disk_write>
 8011212:	4603      	mov	r3, r0
 8011214:	2b00      	cmp	r3, #0
 8011216:	d004      	beq.n	8011222 <f_read+0x202>
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	2201      	movs	r2, #1
 801121c:	755a      	strb	r2, [r3, #21]
 801121e:	2301      	movs	r3, #1
 8011220:	e059      	b.n	80112d6 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	7d1b      	ldrb	r3, [r3, #20]
 8011226:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801122a:	b2da      	uxtb	r2, r3
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011230:	697b      	ldr	r3, [r7, #20]
 8011232:	7858      	ldrb	r0, [r3, #1]
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801123a:	2301      	movs	r3, #1
 801123c:	69ba      	ldr	r2, [r7, #24]
 801123e:	f7fd fe57 	bl	800eef0 <disk_read>
 8011242:	4603      	mov	r3, r0
 8011244:	2b00      	cmp	r3, #0
 8011246:	d004      	beq.n	8011252 <f_read+0x232>
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	2201      	movs	r2, #1
 801124c:	755a      	strb	r2, [r3, #21]
 801124e:	2301      	movs	r3, #1
 8011250:	e041      	b.n	80112d6 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	69ba      	ldr	r2, [r7, #24]
 8011256:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011258:	697b      	ldr	r3, [r7, #20]
 801125a:	899b      	ldrh	r3, [r3, #12]
 801125c:	4618      	mov	r0, r3
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	699b      	ldr	r3, [r3, #24]
 8011262:	697a      	ldr	r2, [r7, #20]
 8011264:	8992      	ldrh	r2, [r2, #12]
 8011266:	fbb3 f1f2 	udiv	r1, r3, r2
 801126a:	fb02 f201 	mul.w	r2, r2, r1
 801126e:	1a9b      	subs	r3, r3, r2
 8011270:	1ac3      	subs	r3, r0, r3
 8011272:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8011274:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	429a      	cmp	r2, r3
 801127a:	d901      	bls.n	8011280 <f_read+0x260>
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	699b      	ldr	r3, [r3, #24]
 801128a:	697a      	ldr	r2, [r7, #20]
 801128c:	8992      	ldrh	r2, [r2, #12]
 801128e:	fbb3 f0f2 	udiv	r0, r3, r2
 8011292:	fb02 f200 	mul.w	r2, r2, r0
 8011296:	1a9b      	subs	r3, r3, r2
 8011298:	440b      	add	r3, r1
 801129a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801129c:	4619      	mov	r1, r3
 801129e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80112a0:	f7fd ff06 	bl	800f0b0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80112a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80112a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112a8:	4413      	add	r3, r2
 80112aa:	627b      	str	r3, [r7, #36]	; 0x24
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	699a      	ldr	r2, [r3, #24]
 80112b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112b2:	441a      	add	r2, r3
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	619a      	str	r2, [r3, #24]
 80112b8:	683b      	ldr	r3, [r7, #0]
 80112ba:	681a      	ldr	r2, [r3, #0]
 80112bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112be:	441a      	add	r2, r3
 80112c0:	683b      	ldr	r3, [r7, #0]
 80112c2:	601a      	str	r2, [r3, #0]
 80112c4:	687a      	ldr	r2, [r7, #4]
 80112c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112c8:	1ad3      	subs	r3, r2, r3
 80112ca:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	f47f aee1 	bne.w	8011096 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80112d4:	2300      	movs	r3, #0
}
 80112d6:	4618      	mov	r0, r3
 80112d8:	3738      	adds	r7, #56	; 0x38
 80112da:	46bd      	mov	sp, r7
 80112dc:	bd80      	pop	{r7, pc}

080112de <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80112de:	b580      	push	{r7, lr}
 80112e0:	b08c      	sub	sp, #48	; 0x30
 80112e2:	af00      	add	r7, sp, #0
 80112e4:	60f8      	str	r0, [r7, #12]
 80112e6:	60b9      	str	r1, [r7, #8]
 80112e8:	607a      	str	r2, [r7, #4]
 80112ea:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80112ec:	68bb      	ldr	r3, [r7, #8]
 80112ee:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80112f0:	683b      	ldr	r3, [r7, #0]
 80112f2:	2200      	movs	r2, #0
 80112f4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	f107 0210 	add.w	r2, r7, #16
 80112fc:	4611      	mov	r1, r2
 80112fe:	4618      	mov	r0, r3
 8011300:	f7ff fc44 	bl	8010b8c <validate>
 8011304:	4603      	mov	r3, r0
 8011306:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801130a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801130e:	2b00      	cmp	r3, #0
 8011310:	d107      	bne.n	8011322 <f_write+0x44>
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	7d5b      	ldrb	r3, [r3, #21]
 8011316:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801131a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801131e:	2b00      	cmp	r3, #0
 8011320:	d002      	beq.n	8011328 <f_write+0x4a>
 8011322:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011326:	e16a      	b.n	80115fe <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	7d1b      	ldrb	r3, [r3, #20]
 801132c:	f003 0302 	and.w	r3, r3, #2
 8011330:	2b00      	cmp	r3, #0
 8011332:	d101      	bne.n	8011338 <f_write+0x5a>
 8011334:	2307      	movs	r3, #7
 8011336:	e162      	b.n	80115fe <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	699a      	ldr	r2, [r3, #24]
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	441a      	add	r2, r3
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	699b      	ldr	r3, [r3, #24]
 8011344:	429a      	cmp	r2, r3
 8011346:	f080 814c 	bcs.w	80115e2 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	699b      	ldr	r3, [r3, #24]
 801134e:	43db      	mvns	r3, r3
 8011350:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8011352:	e146      	b.n	80115e2 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	699b      	ldr	r3, [r3, #24]
 8011358:	693a      	ldr	r2, [r7, #16]
 801135a:	8992      	ldrh	r2, [r2, #12]
 801135c:	fbb3 f1f2 	udiv	r1, r3, r2
 8011360:	fb02 f201 	mul.w	r2, r2, r1
 8011364:	1a9b      	subs	r3, r3, r2
 8011366:	2b00      	cmp	r3, #0
 8011368:	f040 80f1 	bne.w	801154e <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	699b      	ldr	r3, [r3, #24]
 8011370:	693a      	ldr	r2, [r7, #16]
 8011372:	8992      	ldrh	r2, [r2, #12]
 8011374:	fbb3 f3f2 	udiv	r3, r3, r2
 8011378:	693a      	ldr	r2, [r7, #16]
 801137a:	8952      	ldrh	r2, [r2, #10]
 801137c:	3a01      	subs	r2, #1
 801137e:	4013      	ands	r3, r2
 8011380:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8011382:	69bb      	ldr	r3, [r7, #24]
 8011384:	2b00      	cmp	r3, #0
 8011386:	d143      	bne.n	8011410 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	699b      	ldr	r3, [r3, #24]
 801138c:	2b00      	cmp	r3, #0
 801138e:	d10c      	bne.n	80113aa <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	689b      	ldr	r3, [r3, #8]
 8011394:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8011396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011398:	2b00      	cmp	r3, #0
 801139a:	d11a      	bne.n	80113d2 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	2100      	movs	r1, #0
 80113a0:	4618      	mov	r0, r3
 80113a2:	f7fe fbbc 	bl	800fb1e <create_chain>
 80113a6:	62b8      	str	r0, [r7, #40]	; 0x28
 80113a8:	e013      	b.n	80113d2 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d007      	beq.n	80113c2 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	699b      	ldr	r3, [r3, #24]
 80113b6:	4619      	mov	r1, r3
 80113b8:	68f8      	ldr	r0, [r7, #12]
 80113ba:	f7fe fc48 	bl	800fc4e <clmt_clust>
 80113be:	62b8      	str	r0, [r7, #40]	; 0x28
 80113c0:	e007      	b.n	80113d2 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80113c2:	68fa      	ldr	r2, [r7, #12]
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	69db      	ldr	r3, [r3, #28]
 80113c8:	4619      	mov	r1, r3
 80113ca:	4610      	mov	r0, r2
 80113cc:	f7fe fba7 	bl	800fb1e <create_chain>
 80113d0:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80113d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	f000 8109 	beq.w	80115ec <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80113da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113dc:	2b01      	cmp	r3, #1
 80113de:	d104      	bne.n	80113ea <f_write+0x10c>
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	2202      	movs	r2, #2
 80113e4:	755a      	strb	r2, [r3, #21]
 80113e6:	2302      	movs	r3, #2
 80113e8:	e109      	b.n	80115fe <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80113ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113f0:	d104      	bne.n	80113fc <f_write+0x11e>
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	2201      	movs	r2, #1
 80113f6:	755a      	strb	r2, [r3, #21]
 80113f8:	2301      	movs	r3, #1
 80113fa:	e100      	b.n	80115fe <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011400:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	689b      	ldr	r3, [r3, #8]
 8011406:	2b00      	cmp	r3, #0
 8011408:	d102      	bne.n	8011410 <f_write+0x132>
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801140e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	7d1b      	ldrb	r3, [r3, #20]
 8011414:	b25b      	sxtb	r3, r3
 8011416:	2b00      	cmp	r3, #0
 8011418:	da18      	bge.n	801144c <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801141a:	693b      	ldr	r3, [r7, #16]
 801141c:	7858      	ldrb	r0, [r3, #1]
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	6a1a      	ldr	r2, [r3, #32]
 8011428:	2301      	movs	r3, #1
 801142a:	f7fd fd81 	bl	800ef30 <disk_write>
 801142e:	4603      	mov	r3, r0
 8011430:	2b00      	cmp	r3, #0
 8011432:	d004      	beq.n	801143e <f_write+0x160>
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	2201      	movs	r2, #1
 8011438:	755a      	strb	r2, [r3, #21]
 801143a:	2301      	movs	r3, #1
 801143c:	e0df      	b.n	80115fe <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	7d1b      	ldrb	r3, [r3, #20]
 8011442:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011446:	b2da      	uxtb	r2, r3
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801144c:	693a      	ldr	r2, [r7, #16]
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	69db      	ldr	r3, [r3, #28]
 8011452:	4619      	mov	r1, r3
 8011454:	4610      	mov	r0, r2
 8011456:	f7fe f8f7 	bl	800f648 <clust2sect>
 801145a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801145c:	697b      	ldr	r3, [r7, #20]
 801145e:	2b00      	cmp	r3, #0
 8011460:	d104      	bne.n	801146c <f_write+0x18e>
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	2202      	movs	r2, #2
 8011466:	755a      	strb	r2, [r3, #21]
 8011468:	2302      	movs	r3, #2
 801146a:	e0c8      	b.n	80115fe <f_write+0x320>
			sect += csect;
 801146c:	697a      	ldr	r2, [r7, #20]
 801146e:	69bb      	ldr	r3, [r7, #24]
 8011470:	4413      	add	r3, r2
 8011472:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8011474:	693b      	ldr	r3, [r7, #16]
 8011476:	899b      	ldrh	r3, [r3, #12]
 8011478:	461a      	mov	r2, r3
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011480:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011482:	6a3b      	ldr	r3, [r7, #32]
 8011484:	2b00      	cmp	r3, #0
 8011486:	d043      	beq.n	8011510 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011488:	69ba      	ldr	r2, [r7, #24]
 801148a:	6a3b      	ldr	r3, [r7, #32]
 801148c:	4413      	add	r3, r2
 801148e:	693a      	ldr	r2, [r7, #16]
 8011490:	8952      	ldrh	r2, [r2, #10]
 8011492:	4293      	cmp	r3, r2
 8011494:	d905      	bls.n	80114a2 <f_write+0x1c4>
					cc = fs->csize - csect;
 8011496:	693b      	ldr	r3, [r7, #16]
 8011498:	895b      	ldrh	r3, [r3, #10]
 801149a:	461a      	mov	r2, r3
 801149c:	69bb      	ldr	r3, [r7, #24]
 801149e:	1ad3      	subs	r3, r2, r3
 80114a0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80114a2:	693b      	ldr	r3, [r7, #16]
 80114a4:	7858      	ldrb	r0, [r3, #1]
 80114a6:	6a3b      	ldr	r3, [r7, #32]
 80114a8:	697a      	ldr	r2, [r7, #20]
 80114aa:	69f9      	ldr	r1, [r7, #28]
 80114ac:	f7fd fd40 	bl	800ef30 <disk_write>
 80114b0:	4603      	mov	r3, r0
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d004      	beq.n	80114c0 <f_write+0x1e2>
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	2201      	movs	r2, #1
 80114ba:	755a      	strb	r2, [r3, #21]
 80114bc:	2301      	movs	r3, #1
 80114be:	e09e      	b.n	80115fe <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	6a1a      	ldr	r2, [r3, #32]
 80114c4:	697b      	ldr	r3, [r7, #20]
 80114c6:	1ad3      	subs	r3, r2, r3
 80114c8:	6a3a      	ldr	r2, [r7, #32]
 80114ca:	429a      	cmp	r2, r3
 80114cc:	d918      	bls.n	8011500 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	6a1a      	ldr	r2, [r3, #32]
 80114d8:	697b      	ldr	r3, [r7, #20]
 80114da:	1ad3      	subs	r3, r2, r3
 80114dc:	693a      	ldr	r2, [r7, #16]
 80114de:	8992      	ldrh	r2, [r2, #12]
 80114e0:	fb02 f303 	mul.w	r3, r2, r3
 80114e4:	69fa      	ldr	r2, [r7, #28]
 80114e6:	18d1      	adds	r1, r2, r3
 80114e8:	693b      	ldr	r3, [r7, #16]
 80114ea:	899b      	ldrh	r3, [r3, #12]
 80114ec:	461a      	mov	r2, r3
 80114ee:	f7fd fddf 	bl	800f0b0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	7d1b      	ldrb	r3, [r3, #20]
 80114f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80114fa:	b2da      	uxtb	r2, r3
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8011500:	693b      	ldr	r3, [r7, #16]
 8011502:	899b      	ldrh	r3, [r3, #12]
 8011504:	461a      	mov	r2, r3
 8011506:	6a3b      	ldr	r3, [r7, #32]
 8011508:	fb02 f303 	mul.w	r3, r2, r3
 801150c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801150e:	e04b      	b.n	80115a8 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	6a1b      	ldr	r3, [r3, #32]
 8011514:	697a      	ldr	r2, [r7, #20]
 8011516:	429a      	cmp	r2, r3
 8011518:	d016      	beq.n	8011548 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	699a      	ldr	r2, [r3, #24]
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011522:	429a      	cmp	r2, r3
 8011524:	d210      	bcs.n	8011548 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8011526:	693b      	ldr	r3, [r7, #16]
 8011528:	7858      	ldrb	r0, [r3, #1]
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011530:	2301      	movs	r3, #1
 8011532:	697a      	ldr	r2, [r7, #20]
 8011534:	f7fd fcdc 	bl	800eef0 <disk_read>
 8011538:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801153a:	2b00      	cmp	r3, #0
 801153c:	d004      	beq.n	8011548 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	2201      	movs	r2, #1
 8011542:	755a      	strb	r2, [r3, #21]
 8011544:	2301      	movs	r3, #1
 8011546:	e05a      	b.n	80115fe <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	697a      	ldr	r2, [r7, #20]
 801154c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801154e:	693b      	ldr	r3, [r7, #16]
 8011550:	899b      	ldrh	r3, [r3, #12]
 8011552:	4618      	mov	r0, r3
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	699b      	ldr	r3, [r3, #24]
 8011558:	693a      	ldr	r2, [r7, #16]
 801155a:	8992      	ldrh	r2, [r2, #12]
 801155c:	fbb3 f1f2 	udiv	r1, r3, r2
 8011560:	fb02 f201 	mul.w	r2, r2, r1
 8011564:	1a9b      	subs	r3, r3, r2
 8011566:	1ac3      	subs	r3, r0, r3
 8011568:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801156a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	429a      	cmp	r2, r3
 8011570:	d901      	bls.n	8011576 <f_write+0x298>
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	699b      	ldr	r3, [r3, #24]
 8011580:	693a      	ldr	r2, [r7, #16]
 8011582:	8992      	ldrh	r2, [r2, #12]
 8011584:	fbb3 f0f2 	udiv	r0, r3, r2
 8011588:	fb02 f200 	mul.w	r2, r2, r0
 801158c:	1a9b      	subs	r3, r3, r2
 801158e:	440b      	add	r3, r1
 8011590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011592:	69f9      	ldr	r1, [r7, #28]
 8011594:	4618      	mov	r0, r3
 8011596:	f7fd fd8b 	bl	800f0b0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	7d1b      	ldrb	r3, [r3, #20]
 801159e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80115a2:	b2da      	uxtb	r2, r3
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80115a8:	69fa      	ldr	r2, [r7, #28]
 80115aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115ac:	4413      	add	r3, r2
 80115ae:	61fb      	str	r3, [r7, #28]
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	699a      	ldr	r2, [r3, #24]
 80115b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115b6:	441a      	add	r2, r3
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	619a      	str	r2, [r3, #24]
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	68da      	ldr	r2, [r3, #12]
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	699b      	ldr	r3, [r3, #24]
 80115c4:	429a      	cmp	r2, r3
 80115c6:	bf38      	it	cc
 80115c8:	461a      	movcc	r2, r3
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	60da      	str	r2, [r3, #12]
 80115ce:	683b      	ldr	r3, [r7, #0]
 80115d0:	681a      	ldr	r2, [r3, #0]
 80115d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115d4:	441a      	add	r2, r3
 80115d6:	683b      	ldr	r3, [r7, #0]
 80115d8:	601a      	str	r2, [r3, #0]
 80115da:	687a      	ldr	r2, [r7, #4]
 80115dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115de:	1ad3      	subs	r3, r2, r3
 80115e0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	f47f aeb5 	bne.w	8011354 <f_write+0x76>
 80115ea:	e000      	b.n	80115ee <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80115ec:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	7d1b      	ldrb	r3, [r3, #20]
 80115f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80115f6:	b2da      	uxtb	r2, r3
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80115fc:	2300      	movs	r3, #0
}
 80115fe:	4618      	mov	r0, r3
 8011600:	3730      	adds	r7, #48	; 0x30
 8011602:	46bd      	mov	sp, r7
 8011604:	bd80      	pop	{r7, pc}
	...

08011608 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011608:	b580      	push	{r7, lr}
 801160a:	b086      	sub	sp, #24
 801160c:	af00      	add	r7, sp, #0
 801160e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	f107 0208 	add.w	r2, r7, #8
 8011616:	4611      	mov	r1, r2
 8011618:	4618      	mov	r0, r3
 801161a:	f7ff fab7 	bl	8010b8c <validate>
 801161e:	4603      	mov	r3, r0
 8011620:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011622:	7dfb      	ldrb	r3, [r7, #23]
 8011624:	2b00      	cmp	r3, #0
 8011626:	d167      	bne.n	80116f8 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	7d1b      	ldrb	r3, [r3, #20]
 801162c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011630:	2b00      	cmp	r3, #0
 8011632:	d061      	beq.n	80116f8 <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	7d1b      	ldrb	r3, [r3, #20]
 8011638:	b25b      	sxtb	r3, r3
 801163a:	2b00      	cmp	r3, #0
 801163c:	da15      	bge.n	801166a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801163e:	68bb      	ldr	r3, [r7, #8]
 8011640:	7858      	ldrb	r0, [r3, #1]
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	6a1a      	ldr	r2, [r3, #32]
 801164c:	2301      	movs	r3, #1
 801164e:	f7fd fc6f 	bl	800ef30 <disk_write>
 8011652:	4603      	mov	r3, r0
 8011654:	2b00      	cmp	r3, #0
 8011656:	d001      	beq.n	801165c <f_sync+0x54>
 8011658:	2301      	movs	r3, #1
 801165a:	e04e      	b.n	80116fa <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	7d1b      	ldrb	r3, [r3, #20]
 8011660:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011664:	b2da      	uxtb	r2, r3
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801166a:	4b26      	ldr	r3, [pc, #152]	; (8011704 <f_sync+0xfc>)
 801166c:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801166e:	68ba      	ldr	r2, [r7, #8]
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011674:	4619      	mov	r1, r3
 8011676:	4610      	mov	r0, r2
 8011678:	f7fd ff48 	bl	800f50c <move_window>
 801167c:	4603      	mov	r3, r0
 801167e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8011680:	7dfb      	ldrb	r3, [r7, #23]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d138      	bne.n	80116f8 <f_sync+0xf0>
					dir = fp->dir_ptr;
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801168a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	330b      	adds	r3, #11
 8011690:	781a      	ldrb	r2, [r3, #0]
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	330b      	adds	r3, #11
 8011696:	f042 0220 	orr.w	r2, r2, #32
 801169a:	b2d2      	uxtb	r2, r2
 801169c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	6818      	ldr	r0, [r3, #0]
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	689b      	ldr	r3, [r3, #8]
 80116a6:	461a      	mov	r2, r3
 80116a8:	68f9      	ldr	r1, [r7, #12]
 80116aa:	f7fe fccd 	bl	8010048 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	f103 021c 	add.w	r2, r3, #28
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	68db      	ldr	r3, [r3, #12]
 80116b8:	4619      	mov	r1, r3
 80116ba:	4610      	mov	r0, r2
 80116bc:	f7fd fccc 	bl	800f058 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	3316      	adds	r3, #22
 80116c4:	6939      	ldr	r1, [r7, #16]
 80116c6:	4618      	mov	r0, r3
 80116c8:	f7fd fcc6 	bl	800f058 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	3312      	adds	r3, #18
 80116d0:	2100      	movs	r1, #0
 80116d2:	4618      	mov	r0, r3
 80116d4:	f7fd fca5 	bl	800f022 <st_word>
					fs->wflag = 1;
 80116d8:	68bb      	ldr	r3, [r7, #8]
 80116da:	2201      	movs	r2, #1
 80116dc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80116de:	68bb      	ldr	r3, [r7, #8]
 80116e0:	4618      	mov	r0, r3
 80116e2:	f7fd ff41 	bl	800f568 <sync_fs>
 80116e6:	4603      	mov	r3, r0
 80116e8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	7d1b      	ldrb	r3, [r3, #20]
 80116ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80116f2:	b2da      	uxtb	r2, r3
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80116f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80116fa:	4618      	mov	r0, r3
 80116fc:	3718      	adds	r7, #24
 80116fe:	46bd      	mov	sp, r7
 8011700:	bd80      	pop	{r7, pc}
 8011702:	bf00      	nop
 8011704:	274a0000 	.word	0x274a0000

08011708 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8011708:	b580      	push	{r7, lr}
 801170a:	b084      	sub	sp, #16
 801170c:	af00      	add	r7, sp, #0
 801170e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8011710:	6878      	ldr	r0, [r7, #4]
 8011712:	f7ff ff79 	bl	8011608 <f_sync>
 8011716:	4603      	mov	r3, r0
 8011718:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801171a:	7bfb      	ldrb	r3, [r7, #15]
 801171c:	2b00      	cmp	r3, #0
 801171e:	d118      	bne.n	8011752 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	f107 0208 	add.w	r2, r7, #8
 8011726:	4611      	mov	r1, r2
 8011728:	4618      	mov	r0, r3
 801172a:	f7ff fa2f 	bl	8010b8c <validate>
 801172e:	4603      	mov	r3, r0
 8011730:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011732:	7bfb      	ldrb	r3, [r7, #15]
 8011734:	2b00      	cmp	r3, #0
 8011736:	d10c      	bne.n	8011752 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	691b      	ldr	r3, [r3, #16]
 801173c:	4618      	mov	r0, r3
 801173e:	f7fd fe41 	bl	800f3c4 <dec_lock>
 8011742:	4603      	mov	r3, r0
 8011744:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8011746:	7bfb      	ldrb	r3, [r7, #15]
 8011748:	2b00      	cmp	r3, #0
 801174a:	d102      	bne.n	8011752 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	2200      	movs	r2, #0
 8011750:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8011752:	7bfb      	ldrb	r3, [r7, #15]
}
 8011754:	4618      	mov	r0, r3
 8011756:	3710      	adds	r7, #16
 8011758:	46bd      	mov	sp, r7
 801175a:	bd80      	pop	{r7, pc}

0801175c <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 801175c:	b590      	push	{r4, r7, lr}
 801175e:	b091      	sub	sp, #68	; 0x44
 8011760:	af00      	add	r7, sp, #0
 8011762:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8011764:	f107 0108 	add.w	r1, r7, #8
 8011768:	1d3b      	adds	r3, r7, #4
 801176a:	2200      	movs	r2, #0
 801176c:	4618      	mov	r0, r3
 801176e:	f7fe ff87 	bl	8010680 <find_volume>
 8011772:	4603      	mov	r3, r0
 8011774:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8011778:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801177c:	2b00      	cmp	r3, #0
 801177e:	d131      	bne.n	80117e4 <f_chdir+0x88>
		dj.obj.fs = fs;
 8011780:	68bb      	ldr	r3, [r7, #8]
 8011782:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8011784:	687a      	ldr	r2, [r7, #4]
 8011786:	f107 030c 	add.w	r3, r7, #12
 801178a:	4611      	mov	r1, r2
 801178c:	4618      	mov	r0, r3
 801178e:	f7fe fe47 	bl	8010420 <follow_path>
 8011792:	4603      	mov	r3, r0
 8011794:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 8011798:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801179c:	2b00      	cmp	r3, #0
 801179e:	d11a      	bne.n	80117d6 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80117a0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80117a4:	b25b      	sxtb	r3, r3
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	da03      	bge.n	80117b2 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 80117aa:	68bb      	ldr	r3, [r7, #8]
 80117ac:	697a      	ldr	r2, [r7, #20]
 80117ae:	619a      	str	r2, [r3, #24]
 80117b0:	e011      	b.n	80117d6 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 80117b2:	7cbb      	ldrb	r3, [r7, #18]
 80117b4:	f003 0310 	and.w	r3, r3, #16
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d009      	beq.n	80117d0 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 80117bc:	68bb      	ldr	r3, [r7, #8]
 80117be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80117c0:	68bc      	ldr	r4, [r7, #8]
 80117c2:	4611      	mov	r1, r2
 80117c4:	4618      	mov	r0, r3
 80117c6:	f7fe fc20 	bl	801000a <ld_clust>
 80117ca:	4603      	mov	r3, r0
 80117cc:	61a3      	str	r3, [r4, #24]
 80117ce:	e002      	b.n	80117d6 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 80117d0:	2305      	movs	r3, #5
 80117d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80117d6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80117da:	2b04      	cmp	r3, #4
 80117dc:	d102      	bne.n	80117e4 <f_chdir+0x88>
 80117de:	2305      	movs	r3, #5
 80117e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 80117e4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80117e8:	4618      	mov	r0, r3
 80117ea:	3744      	adds	r7, #68	; 0x44
 80117ec:	46bd      	mov	sp, r7
 80117ee:	bd90      	pop	{r4, r7, pc}

080117f0 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80117f0:	b580      	push	{r7, lr}
 80117f2:	b090      	sub	sp, #64	; 0x40
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	6078      	str	r0, [r7, #4]
 80117f8:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	f107 0208 	add.w	r2, r7, #8
 8011800:	4611      	mov	r1, r2
 8011802:	4618      	mov	r0, r3
 8011804:	f7ff f9c2 	bl	8010b8c <validate>
 8011808:	4603      	mov	r3, r0
 801180a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 801180e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011812:	2b00      	cmp	r3, #0
 8011814:	d103      	bne.n	801181e <f_lseek+0x2e>
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	7d5b      	ldrb	r3, [r3, #21]
 801181a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 801181e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011822:	2b00      	cmp	r3, #0
 8011824:	d002      	beq.n	801182c <f_lseek+0x3c>
 8011826:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801182a:	e201      	b.n	8011c30 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011830:	2b00      	cmp	r3, #0
 8011832:	f000 80d9 	beq.w	80119e8 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8011836:	683b      	ldr	r3, [r7, #0]
 8011838:	f1b3 3fff 	cmp.w	r3, #4294967295
 801183c:	d15a      	bne.n	80118f4 <f_lseek+0x104>
			tbl = fp->cltbl;
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011842:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8011844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011846:	1d1a      	adds	r2, r3, #4
 8011848:	627a      	str	r2, [r7, #36]	; 0x24
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	617b      	str	r3, [r7, #20]
 801184e:	2302      	movs	r3, #2
 8011850:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	689b      	ldr	r3, [r3, #8]
 8011856:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8011858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801185a:	2b00      	cmp	r3, #0
 801185c:	d03a      	beq.n	80118d4 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801185e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011860:	613b      	str	r3, [r7, #16]
 8011862:	2300      	movs	r3, #0
 8011864:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011868:	3302      	adds	r3, #2
 801186a:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 801186c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801186e:	60fb      	str	r3, [r7, #12]
 8011870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011872:	3301      	adds	r3, #1
 8011874:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801187a:	4618      	mov	r0, r3
 801187c:	f7fd ff03 	bl	800f686 <get_fat>
 8011880:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8011882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011884:	2b01      	cmp	r3, #1
 8011886:	d804      	bhi.n	8011892 <f_lseek+0xa2>
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	2202      	movs	r2, #2
 801188c:	755a      	strb	r2, [r3, #21]
 801188e:	2302      	movs	r3, #2
 8011890:	e1ce      	b.n	8011c30 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011898:	d104      	bne.n	80118a4 <f_lseek+0xb4>
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	2201      	movs	r2, #1
 801189e:	755a      	strb	r2, [r3, #21]
 80118a0:	2301      	movs	r3, #1
 80118a2:	e1c5      	b.n	8011c30 <f_lseek+0x440>
					} while (cl == pcl + 1);
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	3301      	adds	r3, #1
 80118a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80118aa:	429a      	cmp	r2, r3
 80118ac:	d0de      	beq.n	801186c <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80118ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80118b0:	697b      	ldr	r3, [r7, #20]
 80118b2:	429a      	cmp	r2, r3
 80118b4:	d809      	bhi.n	80118ca <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80118b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118b8:	1d1a      	adds	r2, r3, #4
 80118ba:	627a      	str	r2, [r7, #36]	; 0x24
 80118bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80118be:	601a      	str	r2, [r3, #0]
 80118c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118c2:	1d1a      	adds	r2, r3, #4
 80118c4:	627a      	str	r2, [r7, #36]	; 0x24
 80118c6:	693a      	ldr	r2, [r7, #16]
 80118c8:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80118ca:	68bb      	ldr	r3, [r7, #8]
 80118cc:	69db      	ldr	r3, [r3, #28]
 80118ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80118d0:	429a      	cmp	r2, r3
 80118d2:	d3c4      	bcc.n	801185e <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80118da:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80118dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80118de:	697b      	ldr	r3, [r7, #20]
 80118e0:	429a      	cmp	r2, r3
 80118e2:	d803      	bhi.n	80118ec <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80118e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118e6:	2200      	movs	r2, #0
 80118e8:	601a      	str	r2, [r3, #0]
 80118ea:	e19f      	b.n	8011c2c <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80118ec:	2311      	movs	r3, #17
 80118ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80118f2:	e19b      	b.n	8011c2c <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	68db      	ldr	r3, [r3, #12]
 80118f8:	683a      	ldr	r2, [r7, #0]
 80118fa:	429a      	cmp	r2, r3
 80118fc:	d902      	bls.n	8011904 <f_lseek+0x114>
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	68db      	ldr	r3, [r3, #12]
 8011902:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	683a      	ldr	r2, [r7, #0]
 8011908:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801190a:	683b      	ldr	r3, [r7, #0]
 801190c:	2b00      	cmp	r3, #0
 801190e:	f000 818d 	beq.w	8011c2c <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8011912:	683b      	ldr	r3, [r7, #0]
 8011914:	3b01      	subs	r3, #1
 8011916:	4619      	mov	r1, r3
 8011918:	6878      	ldr	r0, [r7, #4]
 801191a:	f7fe f998 	bl	800fc4e <clmt_clust>
 801191e:	4602      	mov	r2, r0
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8011924:	68ba      	ldr	r2, [r7, #8]
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	69db      	ldr	r3, [r3, #28]
 801192a:	4619      	mov	r1, r3
 801192c:	4610      	mov	r0, r2
 801192e:	f7fd fe8b 	bl	800f648 <clust2sect>
 8011932:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8011934:	69bb      	ldr	r3, [r7, #24]
 8011936:	2b00      	cmp	r3, #0
 8011938:	d104      	bne.n	8011944 <f_lseek+0x154>
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	2202      	movs	r2, #2
 801193e:	755a      	strb	r2, [r3, #21]
 8011940:	2302      	movs	r3, #2
 8011942:	e175      	b.n	8011c30 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8011944:	683b      	ldr	r3, [r7, #0]
 8011946:	3b01      	subs	r3, #1
 8011948:	68ba      	ldr	r2, [r7, #8]
 801194a:	8992      	ldrh	r2, [r2, #12]
 801194c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011950:	68ba      	ldr	r2, [r7, #8]
 8011952:	8952      	ldrh	r2, [r2, #10]
 8011954:	3a01      	subs	r2, #1
 8011956:	4013      	ands	r3, r2
 8011958:	69ba      	ldr	r2, [r7, #24]
 801195a:	4413      	add	r3, r2
 801195c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	699b      	ldr	r3, [r3, #24]
 8011962:	68ba      	ldr	r2, [r7, #8]
 8011964:	8992      	ldrh	r2, [r2, #12]
 8011966:	fbb3 f1f2 	udiv	r1, r3, r2
 801196a:	fb02 f201 	mul.w	r2, r2, r1
 801196e:	1a9b      	subs	r3, r3, r2
 8011970:	2b00      	cmp	r3, #0
 8011972:	f000 815b 	beq.w	8011c2c <f_lseek+0x43c>
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	6a1b      	ldr	r3, [r3, #32]
 801197a:	69ba      	ldr	r2, [r7, #24]
 801197c:	429a      	cmp	r2, r3
 801197e:	f000 8155 	beq.w	8011c2c <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	7d1b      	ldrb	r3, [r3, #20]
 8011986:	b25b      	sxtb	r3, r3
 8011988:	2b00      	cmp	r3, #0
 801198a:	da18      	bge.n	80119be <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801198c:	68bb      	ldr	r3, [r7, #8]
 801198e:	7858      	ldrb	r0, [r3, #1]
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	6a1a      	ldr	r2, [r3, #32]
 801199a:	2301      	movs	r3, #1
 801199c:	f7fd fac8 	bl	800ef30 <disk_write>
 80119a0:	4603      	mov	r3, r0
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d004      	beq.n	80119b0 <f_lseek+0x1c0>
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	2201      	movs	r2, #1
 80119aa:	755a      	strb	r2, [r3, #21]
 80119ac:	2301      	movs	r3, #1
 80119ae:	e13f      	b.n	8011c30 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	7d1b      	ldrb	r3, [r3, #20]
 80119b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80119b8:	b2da      	uxtb	r2, r3
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80119be:	68bb      	ldr	r3, [r7, #8]
 80119c0:	7858      	ldrb	r0, [r3, #1]
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80119c8:	2301      	movs	r3, #1
 80119ca:	69ba      	ldr	r2, [r7, #24]
 80119cc:	f7fd fa90 	bl	800eef0 <disk_read>
 80119d0:	4603      	mov	r3, r0
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d004      	beq.n	80119e0 <f_lseek+0x1f0>
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	2201      	movs	r2, #1
 80119da:	755a      	strb	r2, [r3, #21]
 80119dc:	2301      	movs	r3, #1
 80119de:	e127      	b.n	8011c30 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	69ba      	ldr	r2, [r7, #24]
 80119e4:	621a      	str	r2, [r3, #32]
 80119e6:	e121      	b.n	8011c2c <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	68db      	ldr	r3, [r3, #12]
 80119ec:	683a      	ldr	r2, [r7, #0]
 80119ee:	429a      	cmp	r2, r3
 80119f0:	d908      	bls.n	8011a04 <f_lseek+0x214>
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	7d1b      	ldrb	r3, [r3, #20]
 80119f6:	f003 0302 	and.w	r3, r3, #2
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d102      	bne.n	8011a04 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	68db      	ldr	r3, [r3, #12]
 8011a02:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	699b      	ldr	r3, [r3, #24]
 8011a08:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8011a0a:	2300      	movs	r3, #0
 8011a0c:	637b      	str	r3, [r7, #52]	; 0x34
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011a12:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8011a14:	683b      	ldr	r3, [r7, #0]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	f000 80b5 	beq.w	8011b86 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8011a1c:	68bb      	ldr	r3, [r7, #8]
 8011a1e:	895b      	ldrh	r3, [r3, #10]
 8011a20:	461a      	mov	r2, r3
 8011a22:	68bb      	ldr	r3, [r7, #8]
 8011a24:	899b      	ldrh	r3, [r3, #12]
 8011a26:	fb03 f302 	mul.w	r3, r3, r2
 8011a2a:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8011a2c:	6a3b      	ldr	r3, [r7, #32]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d01b      	beq.n	8011a6a <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8011a32:	683b      	ldr	r3, [r7, #0]
 8011a34:	1e5a      	subs	r2, r3, #1
 8011a36:	69fb      	ldr	r3, [r7, #28]
 8011a38:	fbb2 f2f3 	udiv	r2, r2, r3
 8011a3c:	6a3b      	ldr	r3, [r7, #32]
 8011a3e:	1e59      	subs	r1, r3, #1
 8011a40:	69fb      	ldr	r3, [r7, #28]
 8011a42:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8011a46:	429a      	cmp	r2, r3
 8011a48:	d30f      	bcc.n	8011a6a <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8011a4a:	6a3b      	ldr	r3, [r7, #32]
 8011a4c:	1e5a      	subs	r2, r3, #1
 8011a4e:	69fb      	ldr	r3, [r7, #28]
 8011a50:	425b      	negs	r3, r3
 8011a52:	401a      	ands	r2, r3
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	699b      	ldr	r3, [r3, #24]
 8011a5c:	683a      	ldr	r2, [r7, #0]
 8011a5e:	1ad3      	subs	r3, r2, r3
 8011a60:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	69db      	ldr	r3, [r3, #28]
 8011a66:	63bb      	str	r3, [r7, #56]	; 0x38
 8011a68:	e022      	b.n	8011ab0 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	689b      	ldr	r3, [r3, #8]
 8011a6e:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8011a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d119      	bne.n	8011aaa <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	2100      	movs	r1, #0
 8011a7a:	4618      	mov	r0, r3
 8011a7c:	f7fe f84f 	bl	800fb1e <create_chain>
 8011a80:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a84:	2b01      	cmp	r3, #1
 8011a86:	d104      	bne.n	8011a92 <f_lseek+0x2a2>
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	2202      	movs	r2, #2
 8011a8c:	755a      	strb	r2, [r3, #21]
 8011a8e:	2302      	movs	r3, #2
 8011a90:	e0ce      	b.n	8011c30 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a98:	d104      	bne.n	8011aa4 <f_lseek+0x2b4>
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	2201      	movs	r2, #1
 8011a9e:	755a      	strb	r2, [r3, #21]
 8011aa0:	2301      	movs	r3, #1
 8011aa2:	e0c5      	b.n	8011c30 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011aa8:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011aae:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8011ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d067      	beq.n	8011b86 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8011ab6:	e03a      	b.n	8011b2e <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8011ab8:	683a      	ldr	r2, [r7, #0]
 8011aba:	69fb      	ldr	r3, [r7, #28]
 8011abc:	1ad3      	subs	r3, r2, r3
 8011abe:	603b      	str	r3, [r7, #0]
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	699a      	ldr	r2, [r3, #24]
 8011ac4:	69fb      	ldr	r3, [r7, #28]
 8011ac6:	441a      	add	r2, r3
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	7d1b      	ldrb	r3, [r3, #20]
 8011ad0:	f003 0302 	and.w	r3, r3, #2
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d00b      	beq.n	8011af0 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011adc:	4618      	mov	r0, r3
 8011ade:	f7fe f81e 	bl	800fb1e <create_chain>
 8011ae2:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8011ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d108      	bne.n	8011afc <f_lseek+0x30c>
							ofs = 0; break;
 8011aea:	2300      	movs	r3, #0
 8011aec:	603b      	str	r3, [r7, #0]
 8011aee:	e022      	b.n	8011b36 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011af4:	4618      	mov	r0, r3
 8011af6:	f7fd fdc6 	bl	800f686 <get_fat>
 8011afa:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b02:	d104      	bne.n	8011b0e <f_lseek+0x31e>
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	2201      	movs	r2, #1
 8011b08:	755a      	strb	r2, [r3, #21]
 8011b0a:	2301      	movs	r3, #1
 8011b0c:	e090      	b.n	8011c30 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8011b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b10:	2b01      	cmp	r3, #1
 8011b12:	d904      	bls.n	8011b1e <f_lseek+0x32e>
 8011b14:	68bb      	ldr	r3, [r7, #8]
 8011b16:	69db      	ldr	r3, [r3, #28]
 8011b18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011b1a:	429a      	cmp	r2, r3
 8011b1c:	d304      	bcc.n	8011b28 <f_lseek+0x338>
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	2202      	movs	r2, #2
 8011b22:	755a      	strb	r2, [r3, #21]
 8011b24:	2302      	movs	r3, #2
 8011b26:	e083      	b.n	8011c30 <f_lseek+0x440>
					fp->clust = clst;
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011b2c:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8011b2e:	683a      	ldr	r2, [r7, #0]
 8011b30:	69fb      	ldr	r3, [r7, #28]
 8011b32:	429a      	cmp	r2, r3
 8011b34:	d8c0      	bhi.n	8011ab8 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	699a      	ldr	r2, [r3, #24]
 8011b3a:	683b      	ldr	r3, [r7, #0]
 8011b3c:	441a      	add	r2, r3
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8011b42:	68bb      	ldr	r3, [r7, #8]
 8011b44:	899b      	ldrh	r3, [r3, #12]
 8011b46:	461a      	mov	r2, r3
 8011b48:	683b      	ldr	r3, [r7, #0]
 8011b4a:	fbb3 f1f2 	udiv	r1, r3, r2
 8011b4e:	fb02 f201 	mul.w	r2, r2, r1
 8011b52:	1a9b      	subs	r3, r3, r2
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d016      	beq.n	8011b86 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8011b58:	68bb      	ldr	r3, [r7, #8]
 8011b5a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011b5c:	4618      	mov	r0, r3
 8011b5e:	f7fd fd73 	bl	800f648 <clust2sect>
 8011b62:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8011b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d104      	bne.n	8011b74 <f_lseek+0x384>
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	2202      	movs	r2, #2
 8011b6e:	755a      	strb	r2, [r3, #21]
 8011b70:	2302      	movs	r3, #2
 8011b72:	e05d      	b.n	8011c30 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8011b74:	68bb      	ldr	r3, [r7, #8]
 8011b76:	899b      	ldrh	r3, [r3, #12]
 8011b78:	461a      	mov	r2, r3
 8011b7a:	683b      	ldr	r3, [r7, #0]
 8011b7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011b80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011b82:	4413      	add	r3, r2
 8011b84:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	699a      	ldr	r2, [r3, #24]
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	68db      	ldr	r3, [r3, #12]
 8011b8e:	429a      	cmp	r2, r3
 8011b90:	d90a      	bls.n	8011ba8 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	699a      	ldr	r2, [r3, #24]
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	7d1b      	ldrb	r3, [r3, #20]
 8011b9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ba2:	b2da      	uxtb	r2, r3
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	699b      	ldr	r3, [r3, #24]
 8011bac:	68ba      	ldr	r2, [r7, #8]
 8011bae:	8992      	ldrh	r2, [r2, #12]
 8011bb0:	fbb3 f1f2 	udiv	r1, r3, r2
 8011bb4:	fb02 f201 	mul.w	r2, r2, r1
 8011bb8:	1a9b      	subs	r3, r3, r2
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d036      	beq.n	8011c2c <f_lseek+0x43c>
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	6a1b      	ldr	r3, [r3, #32]
 8011bc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011bc4:	429a      	cmp	r2, r3
 8011bc6:	d031      	beq.n	8011c2c <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	7d1b      	ldrb	r3, [r3, #20]
 8011bcc:	b25b      	sxtb	r3, r3
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	da18      	bge.n	8011c04 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011bd2:	68bb      	ldr	r3, [r7, #8]
 8011bd4:	7858      	ldrb	r0, [r3, #1]
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	6a1a      	ldr	r2, [r3, #32]
 8011be0:	2301      	movs	r3, #1
 8011be2:	f7fd f9a5 	bl	800ef30 <disk_write>
 8011be6:	4603      	mov	r3, r0
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d004      	beq.n	8011bf6 <f_lseek+0x406>
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	2201      	movs	r2, #1
 8011bf0:	755a      	strb	r2, [r3, #21]
 8011bf2:	2301      	movs	r3, #1
 8011bf4:	e01c      	b.n	8011c30 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	7d1b      	ldrb	r3, [r3, #20]
 8011bfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011bfe:	b2da      	uxtb	r2, r3
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011c04:	68bb      	ldr	r3, [r7, #8]
 8011c06:	7858      	ldrb	r0, [r3, #1]
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011c0e:	2301      	movs	r3, #1
 8011c10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011c12:	f7fd f96d 	bl	800eef0 <disk_read>
 8011c16:	4603      	mov	r3, r0
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d004      	beq.n	8011c26 <f_lseek+0x436>
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	2201      	movs	r2, #1
 8011c20:	755a      	strb	r2, [r3, #21]
 8011c22:	2301      	movs	r3, #1
 8011c24:	e004      	b.n	8011c30 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011c2a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8011c2c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8011c30:	4618      	mov	r0, r3
 8011c32:	3740      	adds	r7, #64	; 0x40
 8011c34:	46bd      	mov	sp, r7
 8011c36:	bd80      	pop	{r7, pc}

08011c38 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8011c38:	b580      	push	{r7, lr}
 8011c3a:	b09e      	sub	sp, #120	; 0x78
 8011c3c:	af00      	add	r7, sp, #0
 8011c3e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8011c40:	2300      	movs	r3, #0
 8011c42:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8011c44:	f107 010c 	add.w	r1, r7, #12
 8011c48:	1d3b      	adds	r3, r7, #4
 8011c4a:	2202      	movs	r2, #2
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	f7fe fd17 	bl	8010680 <find_volume>
 8011c52:	4603      	mov	r3, r0
 8011c54:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8011c5c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	f040 80a4 	bne.w	8011dae <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8011c66:	687a      	ldr	r2, [r7, #4]
 8011c68:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011c6c:	4611      	mov	r1, r2
 8011c6e:	4618      	mov	r0, r3
 8011c70:	f7fe fbd6 	bl	8010420 <follow_path>
 8011c74:	4603      	mov	r3, r0
 8011c76:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8011c7a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d108      	bne.n	8011c94 <f_unlink+0x5c>
 8011c82:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8011c86:	f003 0320 	and.w	r3, r3, #32
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d002      	beq.n	8011c94 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8011c8e:	2306      	movs	r3, #6
 8011c90:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8011c94:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d108      	bne.n	8011cae <f_unlink+0x76>
 8011c9c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011ca0:	2102      	movs	r1, #2
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	f7fd fa82 	bl	800f1ac <chk_lock>
 8011ca8:	4603      	mov	r3, r0
 8011caa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8011cae:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d17b      	bne.n	8011dae <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8011cb6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8011cba:	b25b      	sxtb	r3, r3
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	da03      	bge.n	8011cc8 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8011cc0:	2306      	movs	r3, #6
 8011cc2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8011cc6:	e008      	b.n	8011cda <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8011cc8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8011ccc:	f003 0301 	and.w	r3, r3, #1
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d002      	beq.n	8011cda <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8011cd4:	2307      	movs	r3, #7
 8011cd6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8011cda:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d13d      	bne.n	8011d5e <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011ce6:	4611      	mov	r1, r2
 8011ce8:	4618      	mov	r0, r3
 8011cea:	f7fe f98e 	bl	801000a <ld_clust>
 8011cee:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8011cf0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8011cf4:	f003 0310 	and.w	r3, r3, #16
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d030      	beq.n	8011d5e <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	699b      	ldr	r3, [r3, #24]
 8011d00:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011d02:	429a      	cmp	r2, r3
 8011d04:	d103      	bne.n	8011d0e <f_unlink+0xd6>
						res = FR_DENIED;
 8011d06:	2307      	movs	r3, #7
 8011d08:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8011d0c:	e027      	b.n	8011d5e <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8011d12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011d14:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8011d16:	f107 0310 	add.w	r3, r7, #16
 8011d1a:	2100      	movs	r1, #0
 8011d1c:	4618      	mov	r0, r3
 8011d1e:	f7fd ffce 	bl	800fcbe <dir_sdi>
 8011d22:	4603      	mov	r3, r0
 8011d24:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8011d28:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d116      	bne.n	8011d5e <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8011d30:	f107 0310 	add.w	r3, r7, #16
 8011d34:	2100      	movs	r1, #0
 8011d36:	4618      	mov	r0, r3
 8011d38:	f7fe f9a6 	bl	8010088 <dir_read>
 8011d3c:	4603      	mov	r3, r0
 8011d3e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8011d42:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d102      	bne.n	8011d50 <f_unlink+0x118>
 8011d4a:	2307      	movs	r3, #7
 8011d4c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8011d50:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011d54:	2b04      	cmp	r3, #4
 8011d56:	d102      	bne.n	8011d5e <f_unlink+0x126>
 8011d58:	2300      	movs	r3, #0
 8011d5a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8011d5e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d123      	bne.n	8011dae <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8011d66:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011d6a:	4618      	mov	r0, r3
 8011d6c:	f7fe fa70 	bl	8010250 <dir_remove>
 8011d70:	4603      	mov	r3, r0
 8011d72:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8011d76:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d10c      	bne.n	8011d98 <f_unlink+0x160>
 8011d7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d009      	beq.n	8011d98 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8011d84:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011d88:	2200      	movs	r2, #0
 8011d8a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8011d8c:	4618      	mov	r0, r3
 8011d8e:	f7fd fe61 	bl	800fa54 <remove_chain>
 8011d92:	4603      	mov	r3, r0
 8011d94:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8011d98:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d106      	bne.n	8011dae <f_unlink+0x176>
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	4618      	mov	r0, r3
 8011da4:	f7fd fbe0 	bl	800f568 <sync_fs>
 8011da8:	4603      	mov	r3, r0
 8011daa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8011dae:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8011db2:	4618      	mov	r0, r3
 8011db4:	3778      	adds	r7, #120	; 0x78
 8011db6:	46bd      	mov	sp, r7
 8011db8:	bd80      	pop	{r7, pc}
	...

08011dbc <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8011dbc:	b580      	push	{r7, lr}
 8011dbe:	b096      	sub	sp, #88	; 0x58
 8011dc0:	af00      	add	r7, sp, #0
 8011dc2:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8011dc4:	f107 0108 	add.w	r1, r7, #8
 8011dc8:	1d3b      	adds	r3, r7, #4
 8011dca:	2202      	movs	r2, #2
 8011dcc:	4618      	mov	r0, r3
 8011dce:	f7fe fc57 	bl	8010680 <find_volume>
 8011dd2:	4603      	mov	r3, r0
 8011dd4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8011dd8:	68bb      	ldr	r3, [r7, #8]
 8011dda:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8011ddc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	f040 80fe 	bne.w	8011fe2 <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8011de6:	687a      	ldr	r2, [r7, #4]
 8011de8:	f107 030c 	add.w	r3, r7, #12
 8011dec:	4611      	mov	r1, r2
 8011dee:	4618      	mov	r0, r3
 8011df0:	f7fe fb16 	bl	8010420 <follow_path>
 8011df4:	4603      	mov	r3, r0
 8011df6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8011dfa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d102      	bne.n	8011e08 <f_mkdir+0x4c>
 8011e02:	2308      	movs	r3, #8
 8011e04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8011e08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011e0c:	2b04      	cmp	r3, #4
 8011e0e:	d108      	bne.n	8011e22 <f_mkdir+0x66>
 8011e10:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8011e14:	f003 0320 	and.w	r3, r3, #32
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d002      	beq.n	8011e22 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8011e1c:	2306      	movs	r3, #6
 8011e1e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8011e22:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011e26:	2b04      	cmp	r3, #4
 8011e28:	f040 80db 	bne.w	8011fe2 <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8011e2c:	f107 030c 	add.w	r3, r7, #12
 8011e30:	2100      	movs	r1, #0
 8011e32:	4618      	mov	r0, r3
 8011e34:	f7fd fe73 	bl	800fb1e <create_chain>
 8011e38:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8011e3a:	68bb      	ldr	r3, [r7, #8]
 8011e3c:	895b      	ldrh	r3, [r3, #10]
 8011e3e:	461a      	mov	r2, r3
 8011e40:	68bb      	ldr	r3, [r7, #8]
 8011e42:	899b      	ldrh	r3, [r3, #12]
 8011e44:	fb03 f302 	mul.w	r3, r3, r2
 8011e48:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8011e4a:	2300      	movs	r3, #0
 8011e4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8011e50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d102      	bne.n	8011e5c <f_mkdir+0xa0>
 8011e56:	2307      	movs	r3, #7
 8011e58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8011e5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011e5e:	2b01      	cmp	r3, #1
 8011e60:	d102      	bne.n	8011e68 <f_mkdir+0xac>
 8011e62:	2302      	movs	r3, #2
 8011e64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011e68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e6e:	d102      	bne.n	8011e76 <f_mkdir+0xba>
 8011e70:	2301      	movs	r3, #1
 8011e72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8011e76:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d106      	bne.n	8011e8c <f_mkdir+0xd0>
 8011e7e:	68bb      	ldr	r3, [r7, #8]
 8011e80:	4618      	mov	r0, r3
 8011e82:	f7fd faff 	bl	800f484 <sync_window>
 8011e86:	4603      	mov	r3, r0
 8011e88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8011e8c:	4b58      	ldr	r3, [pc, #352]	; (8011ff0 <f_mkdir+0x234>)
 8011e8e:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8011e90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d16c      	bne.n	8011f72 <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 8011e98:	68bb      	ldr	r3, [r7, #8]
 8011e9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011e9c:	4618      	mov	r0, r3
 8011e9e:	f7fd fbd3 	bl	800f648 <clust2sect>
 8011ea2:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8011ea4:	68bb      	ldr	r3, [r7, #8]
 8011ea6:	3338      	adds	r3, #56	; 0x38
 8011ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8011eaa:	68bb      	ldr	r3, [r7, #8]
 8011eac:	899b      	ldrh	r3, [r3, #12]
 8011eae:	461a      	mov	r2, r3
 8011eb0:	2100      	movs	r1, #0
 8011eb2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011eb4:	f7fd f91d 	bl	800f0f2 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8011eb8:	220b      	movs	r2, #11
 8011eba:	2120      	movs	r1, #32
 8011ebc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011ebe:	f7fd f918 	bl	800f0f2 <mem_set>
					dir[DIR_Name] = '.';
 8011ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ec4:	222e      	movs	r2, #46	; 0x2e
 8011ec6:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8011ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011eca:	330b      	adds	r3, #11
 8011ecc:	2210      	movs	r2, #16
 8011ece:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8011ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ed2:	3316      	adds	r3, #22
 8011ed4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	f7fd f8be 	bl	800f058 <st_dword>
					st_clust(fs, dir, dcl);
 8011edc:	68bb      	ldr	r3, [r7, #8]
 8011ede:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011ee0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	f7fe f8b0 	bl	8010048 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8011ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011eea:	3320      	adds	r3, #32
 8011eec:	2220      	movs	r2, #32
 8011eee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011ef0:	4618      	mov	r0, r3
 8011ef2:	f7fd f8dd 	bl	800f0b0 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8011ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ef8:	3321      	adds	r3, #33	; 0x21
 8011efa:	222e      	movs	r2, #46	; 0x2e
 8011efc:	701a      	strb	r2, [r3, #0]
 8011efe:	697b      	ldr	r3, [r7, #20]
 8011f00:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8011f02:	68bb      	ldr	r3, [r7, #8]
 8011f04:	781b      	ldrb	r3, [r3, #0]
 8011f06:	2b03      	cmp	r3, #3
 8011f08:	d106      	bne.n	8011f18 <f_mkdir+0x15c>
 8011f0a:	68bb      	ldr	r3, [r7, #8]
 8011f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011f10:	429a      	cmp	r2, r3
 8011f12:	d101      	bne.n	8011f18 <f_mkdir+0x15c>
 8011f14:	2300      	movs	r3, #0
 8011f16:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8011f18:	68b8      	ldr	r0, [r7, #8]
 8011f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f1c:	3320      	adds	r3, #32
 8011f1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011f20:	4619      	mov	r1, r3
 8011f22:	f7fe f891 	bl	8010048 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8011f26:	68bb      	ldr	r3, [r7, #8]
 8011f28:	895b      	ldrh	r3, [r3, #10]
 8011f2a:	653b      	str	r3, [r7, #80]	; 0x50
 8011f2c:	e01c      	b.n	8011f68 <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 8011f2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f30:	1c5a      	adds	r2, r3, #1
 8011f32:	64fa      	str	r2, [r7, #76]	; 0x4c
 8011f34:	68ba      	ldr	r2, [r7, #8]
 8011f36:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8011f38:	68bb      	ldr	r3, [r7, #8]
 8011f3a:	2201      	movs	r2, #1
 8011f3c:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8011f3e:	68bb      	ldr	r3, [r7, #8]
 8011f40:	4618      	mov	r0, r3
 8011f42:	f7fd fa9f 	bl	800f484 <sync_window>
 8011f46:	4603      	mov	r3, r0
 8011f48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8011f4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d10d      	bne.n	8011f70 <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 8011f54:	68bb      	ldr	r3, [r7, #8]
 8011f56:	899b      	ldrh	r3, [r3, #12]
 8011f58:	461a      	mov	r2, r3
 8011f5a:	2100      	movs	r1, #0
 8011f5c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011f5e:	f7fd f8c8 	bl	800f0f2 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8011f62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f64:	3b01      	subs	r3, #1
 8011f66:	653b      	str	r3, [r7, #80]	; 0x50
 8011f68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d1df      	bne.n	8011f2e <f_mkdir+0x172>
 8011f6e:	e000      	b.n	8011f72 <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 8011f70:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8011f72:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d107      	bne.n	8011f8a <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8011f7a:	f107 030c 	add.w	r3, r7, #12
 8011f7e:	4618      	mov	r0, r3
 8011f80:	f7fe f934 	bl	80101ec <dir_register>
 8011f84:	4603      	mov	r3, r0
 8011f86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8011f8a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d120      	bne.n	8011fd4 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8011f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f94:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8011f96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f98:	3316      	adds	r3, #22
 8011f9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	f7fd f85b 	bl	800f058 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8011fa2:	68bb      	ldr	r3, [r7, #8]
 8011fa4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011fa6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011fa8:	4618      	mov	r0, r3
 8011faa:	f7fe f84d 	bl	8010048 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8011fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011fb0:	330b      	adds	r3, #11
 8011fb2:	2210      	movs	r2, #16
 8011fb4:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8011fb6:	68bb      	ldr	r3, [r7, #8]
 8011fb8:	2201      	movs	r2, #1
 8011fba:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8011fbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d10e      	bne.n	8011fe2 <f_mkdir+0x226>
					res = sync_fs(fs);
 8011fc4:	68bb      	ldr	r3, [r7, #8]
 8011fc6:	4618      	mov	r0, r3
 8011fc8:	f7fd face 	bl	800f568 <sync_fs>
 8011fcc:	4603      	mov	r3, r0
 8011fce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8011fd2:	e006      	b.n	8011fe2 <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8011fd4:	f107 030c 	add.w	r3, r7, #12
 8011fd8:	2200      	movs	r2, #0
 8011fda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011fdc:	4618      	mov	r0, r3
 8011fde:	f7fd fd39 	bl	800fa54 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8011fe2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	3758      	adds	r7, #88	; 0x58
 8011fea:	46bd      	mov	sp, r7
 8011fec:	bd80      	pop	{r7, pc}
 8011fee:	bf00      	nop
 8011ff0:	274a0000 	.word	0x274a0000

08011ff4 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8011ff4:	b580      	push	{r7, lr}
 8011ff6:	b088      	sub	sp, #32
 8011ff8:	af00      	add	r7, sp, #0
 8011ffa:	60f8      	str	r0, [r7, #12]
 8011ffc:	60b9      	str	r1, [r7, #8]
 8011ffe:	607a      	str	r2, [r7, #4]
	int n = 0;
 8012000:	2300      	movs	r3, #0
 8012002:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8012008:	e017      	b.n	801203a <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 801200a:	f107 0310 	add.w	r3, r7, #16
 801200e:	f107 0114 	add.w	r1, r7, #20
 8012012:	2201      	movs	r2, #1
 8012014:	6878      	ldr	r0, [r7, #4]
 8012016:	f7ff f803 	bl	8011020 <f_read>
		if (rc != 1) break;
 801201a:	693b      	ldr	r3, [r7, #16]
 801201c:	2b01      	cmp	r3, #1
 801201e:	d112      	bne.n	8012046 <f_gets+0x52>
		c = s[0];
 8012020:	7d3b      	ldrb	r3, [r7, #20]
 8012022:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 8012024:	69bb      	ldr	r3, [r7, #24]
 8012026:	1c5a      	adds	r2, r3, #1
 8012028:	61ba      	str	r2, [r7, #24]
 801202a:	7dfa      	ldrb	r2, [r7, #23]
 801202c:	701a      	strb	r2, [r3, #0]
		n++;
 801202e:	69fb      	ldr	r3, [r7, #28]
 8012030:	3301      	adds	r3, #1
 8012032:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8012034:	7dfb      	ldrb	r3, [r7, #23]
 8012036:	2b0a      	cmp	r3, #10
 8012038:	d007      	beq.n	801204a <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 801203a:	68bb      	ldr	r3, [r7, #8]
 801203c:	3b01      	subs	r3, #1
 801203e:	69fa      	ldr	r2, [r7, #28]
 8012040:	429a      	cmp	r2, r3
 8012042:	dbe2      	blt.n	801200a <f_gets+0x16>
 8012044:	e002      	b.n	801204c <f_gets+0x58>
		if (rc != 1) break;
 8012046:	bf00      	nop
 8012048:	e000      	b.n	801204c <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 801204a:	bf00      	nop
	}
	*p = 0;
 801204c:	69bb      	ldr	r3, [r7, #24]
 801204e:	2200      	movs	r2, #0
 8012050:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8012052:	69fb      	ldr	r3, [r7, #28]
 8012054:	2b00      	cmp	r3, #0
 8012056:	d001      	beq.n	801205c <f_gets+0x68>
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	e000      	b.n	801205e <f_gets+0x6a>
 801205c:	2300      	movs	r3, #0
}
 801205e:	4618      	mov	r0, r3
 8012060:	3720      	adds	r7, #32
 8012062:	46bd      	mov	sp, r7
 8012064:	bd80      	pop	{r7, pc}
	...

08012068 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012068:	b480      	push	{r7}
 801206a:	b087      	sub	sp, #28
 801206c:	af00      	add	r7, sp, #0
 801206e:	60f8      	str	r0, [r7, #12]
 8012070:	60b9      	str	r1, [r7, #8]
 8012072:	4613      	mov	r3, r2
 8012074:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8012076:	2301      	movs	r3, #1
 8012078:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801207a:	2300      	movs	r3, #0
 801207c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801207e:	4b1f      	ldr	r3, [pc, #124]	; (80120fc <FATFS_LinkDriverEx+0x94>)
 8012080:	7a5b      	ldrb	r3, [r3, #9]
 8012082:	b2db      	uxtb	r3, r3
 8012084:	2b00      	cmp	r3, #0
 8012086:	d131      	bne.n	80120ec <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012088:	4b1c      	ldr	r3, [pc, #112]	; (80120fc <FATFS_LinkDriverEx+0x94>)
 801208a:	7a5b      	ldrb	r3, [r3, #9]
 801208c:	b2db      	uxtb	r3, r3
 801208e:	461a      	mov	r2, r3
 8012090:	4b1a      	ldr	r3, [pc, #104]	; (80120fc <FATFS_LinkDriverEx+0x94>)
 8012092:	2100      	movs	r1, #0
 8012094:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8012096:	4b19      	ldr	r3, [pc, #100]	; (80120fc <FATFS_LinkDriverEx+0x94>)
 8012098:	7a5b      	ldrb	r3, [r3, #9]
 801209a:	b2db      	uxtb	r3, r3
 801209c:	4a17      	ldr	r2, [pc, #92]	; (80120fc <FATFS_LinkDriverEx+0x94>)
 801209e:	009b      	lsls	r3, r3, #2
 80120a0:	4413      	add	r3, r2
 80120a2:	68fa      	ldr	r2, [r7, #12]
 80120a4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80120a6:	4b15      	ldr	r3, [pc, #84]	; (80120fc <FATFS_LinkDriverEx+0x94>)
 80120a8:	7a5b      	ldrb	r3, [r3, #9]
 80120aa:	b2db      	uxtb	r3, r3
 80120ac:	461a      	mov	r2, r3
 80120ae:	4b13      	ldr	r3, [pc, #76]	; (80120fc <FATFS_LinkDriverEx+0x94>)
 80120b0:	4413      	add	r3, r2
 80120b2:	79fa      	ldrb	r2, [r7, #7]
 80120b4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80120b6:	4b11      	ldr	r3, [pc, #68]	; (80120fc <FATFS_LinkDriverEx+0x94>)
 80120b8:	7a5b      	ldrb	r3, [r3, #9]
 80120ba:	b2db      	uxtb	r3, r3
 80120bc:	1c5a      	adds	r2, r3, #1
 80120be:	b2d1      	uxtb	r1, r2
 80120c0:	4a0e      	ldr	r2, [pc, #56]	; (80120fc <FATFS_LinkDriverEx+0x94>)
 80120c2:	7251      	strb	r1, [r2, #9]
 80120c4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80120c6:	7dbb      	ldrb	r3, [r7, #22]
 80120c8:	3330      	adds	r3, #48	; 0x30
 80120ca:	b2da      	uxtb	r2, r3
 80120cc:	68bb      	ldr	r3, [r7, #8]
 80120ce:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80120d0:	68bb      	ldr	r3, [r7, #8]
 80120d2:	3301      	adds	r3, #1
 80120d4:	223a      	movs	r2, #58	; 0x3a
 80120d6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80120d8:	68bb      	ldr	r3, [r7, #8]
 80120da:	3302      	adds	r3, #2
 80120dc:	222f      	movs	r2, #47	; 0x2f
 80120de:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80120e0:	68bb      	ldr	r3, [r7, #8]
 80120e2:	3303      	adds	r3, #3
 80120e4:	2200      	movs	r2, #0
 80120e6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80120e8:	2300      	movs	r3, #0
 80120ea:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80120ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80120ee:	4618      	mov	r0, r3
 80120f0:	371c      	adds	r7, #28
 80120f2:	46bd      	mov	sp, r7
 80120f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120f8:	4770      	bx	lr
 80120fa:	bf00      	nop
 80120fc:	20033610 	.word	0x20033610

08012100 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012100:	b580      	push	{r7, lr}
 8012102:	b082      	sub	sp, #8
 8012104:	af00      	add	r7, sp, #0
 8012106:	6078      	str	r0, [r7, #4]
 8012108:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801210a:	2200      	movs	r2, #0
 801210c:	6839      	ldr	r1, [r7, #0]
 801210e:	6878      	ldr	r0, [r7, #4]
 8012110:	f7ff ffaa 	bl	8012068 <FATFS_LinkDriverEx>
 8012114:	4603      	mov	r3, r0
}
 8012116:	4618      	mov	r0, r3
 8012118:	3708      	adds	r7, #8
 801211a:	46bd      	mov	sp, r7
 801211c:	bd80      	pop	{r7, pc}

0801211e <__cxa_guard_acquire>:
 801211e:	6803      	ldr	r3, [r0, #0]
 8012120:	07db      	lsls	r3, r3, #31
 8012122:	d406      	bmi.n	8012132 <__cxa_guard_acquire+0x14>
 8012124:	7843      	ldrb	r3, [r0, #1]
 8012126:	b103      	cbz	r3, 801212a <__cxa_guard_acquire+0xc>
 8012128:	deff      	udf	#255	; 0xff
 801212a:	2301      	movs	r3, #1
 801212c:	7043      	strb	r3, [r0, #1]
 801212e:	4618      	mov	r0, r3
 8012130:	4770      	bx	lr
 8012132:	2000      	movs	r0, #0
 8012134:	4770      	bx	lr

08012136 <__cxa_guard_release>:
 8012136:	2301      	movs	r3, #1
 8012138:	6003      	str	r3, [r0, #0]
 801213a:	4770      	bx	lr
 801213c:	0000      	movs	r0, r0
	...

08012140 <cos>:
 8012140:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012142:	ec51 0b10 	vmov	r0, r1, d0
 8012146:	4a1e      	ldr	r2, [pc, #120]	; (80121c0 <cos+0x80>)
 8012148:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801214c:	4293      	cmp	r3, r2
 801214e:	dc06      	bgt.n	801215e <cos+0x1e>
 8012150:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80121b8 <cos+0x78>
 8012154:	f000 fa74 	bl	8012640 <__kernel_cos>
 8012158:	ec51 0b10 	vmov	r0, r1, d0
 801215c:	e007      	b.n	801216e <cos+0x2e>
 801215e:	4a19      	ldr	r2, [pc, #100]	; (80121c4 <cos+0x84>)
 8012160:	4293      	cmp	r3, r2
 8012162:	dd09      	ble.n	8012178 <cos+0x38>
 8012164:	ee10 2a10 	vmov	r2, s0
 8012168:	460b      	mov	r3, r1
 801216a:	f7ee f8a5 	bl	80002b8 <__aeabi_dsub>
 801216e:	ec41 0b10 	vmov	d0, r0, r1
 8012172:	b005      	add	sp, #20
 8012174:	f85d fb04 	ldr.w	pc, [sp], #4
 8012178:	4668      	mov	r0, sp
 801217a:	f000 f86d 	bl	8012258 <__ieee754_rem_pio2>
 801217e:	f000 0003 	and.w	r0, r0, #3
 8012182:	2801      	cmp	r0, #1
 8012184:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012188:	ed9d 0b00 	vldr	d0, [sp]
 801218c:	d007      	beq.n	801219e <cos+0x5e>
 801218e:	2802      	cmp	r0, #2
 8012190:	d00e      	beq.n	80121b0 <cos+0x70>
 8012192:	2800      	cmp	r0, #0
 8012194:	d0de      	beq.n	8012154 <cos+0x14>
 8012196:	2001      	movs	r0, #1
 8012198:	f000 fe5a 	bl	8012e50 <__kernel_sin>
 801219c:	e7dc      	b.n	8012158 <cos+0x18>
 801219e:	f000 fe57 	bl	8012e50 <__kernel_sin>
 80121a2:	ec53 2b10 	vmov	r2, r3, d0
 80121a6:	ee10 0a10 	vmov	r0, s0
 80121aa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80121ae:	e7de      	b.n	801216e <cos+0x2e>
 80121b0:	f000 fa46 	bl	8012640 <__kernel_cos>
 80121b4:	e7f5      	b.n	80121a2 <cos+0x62>
 80121b6:	bf00      	nop
	...
 80121c0:	3fe921fb 	.word	0x3fe921fb
 80121c4:	7fefffff 	.word	0x7fefffff

080121c8 <sin>:
 80121c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80121ca:	ec51 0b10 	vmov	r0, r1, d0
 80121ce:	4a20      	ldr	r2, [pc, #128]	; (8012250 <sin+0x88>)
 80121d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80121d4:	4293      	cmp	r3, r2
 80121d6:	dc07      	bgt.n	80121e8 <sin+0x20>
 80121d8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8012248 <sin+0x80>
 80121dc:	2000      	movs	r0, #0
 80121de:	f000 fe37 	bl	8012e50 <__kernel_sin>
 80121e2:	ec51 0b10 	vmov	r0, r1, d0
 80121e6:	e007      	b.n	80121f8 <sin+0x30>
 80121e8:	4a1a      	ldr	r2, [pc, #104]	; (8012254 <sin+0x8c>)
 80121ea:	4293      	cmp	r3, r2
 80121ec:	dd09      	ble.n	8012202 <sin+0x3a>
 80121ee:	ee10 2a10 	vmov	r2, s0
 80121f2:	460b      	mov	r3, r1
 80121f4:	f7ee f860 	bl	80002b8 <__aeabi_dsub>
 80121f8:	ec41 0b10 	vmov	d0, r0, r1
 80121fc:	b005      	add	sp, #20
 80121fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8012202:	4668      	mov	r0, sp
 8012204:	f000 f828 	bl	8012258 <__ieee754_rem_pio2>
 8012208:	f000 0003 	and.w	r0, r0, #3
 801220c:	2801      	cmp	r0, #1
 801220e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012212:	ed9d 0b00 	vldr	d0, [sp]
 8012216:	d004      	beq.n	8012222 <sin+0x5a>
 8012218:	2802      	cmp	r0, #2
 801221a:	d005      	beq.n	8012228 <sin+0x60>
 801221c:	b970      	cbnz	r0, 801223c <sin+0x74>
 801221e:	2001      	movs	r0, #1
 8012220:	e7dd      	b.n	80121de <sin+0x16>
 8012222:	f000 fa0d 	bl	8012640 <__kernel_cos>
 8012226:	e7dc      	b.n	80121e2 <sin+0x1a>
 8012228:	2001      	movs	r0, #1
 801222a:	f000 fe11 	bl	8012e50 <__kernel_sin>
 801222e:	ec53 2b10 	vmov	r2, r3, d0
 8012232:	ee10 0a10 	vmov	r0, s0
 8012236:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801223a:	e7dd      	b.n	80121f8 <sin+0x30>
 801223c:	f000 fa00 	bl	8012640 <__kernel_cos>
 8012240:	e7f5      	b.n	801222e <sin+0x66>
 8012242:	bf00      	nop
 8012244:	f3af 8000 	nop.w
	...
 8012250:	3fe921fb 	.word	0x3fe921fb
 8012254:	7fefffff 	.word	0x7fefffff

08012258 <__ieee754_rem_pio2>:
 8012258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801225c:	ec57 6b10 	vmov	r6, r7, d0
 8012260:	4bc3      	ldr	r3, [pc, #780]	; (8012570 <__ieee754_rem_pio2+0x318>)
 8012262:	b08d      	sub	sp, #52	; 0x34
 8012264:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8012268:	4598      	cmp	r8, r3
 801226a:	4604      	mov	r4, r0
 801226c:	9704      	str	r7, [sp, #16]
 801226e:	dc07      	bgt.n	8012280 <__ieee754_rem_pio2+0x28>
 8012270:	2200      	movs	r2, #0
 8012272:	2300      	movs	r3, #0
 8012274:	ed84 0b00 	vstr	d0, [r4]
 8012278:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801227c:	2500      	movs	r5, #0
 801227e:	e027      	b.n	80122d0 <__ieee754_rem_pio2+0x78>
 8012280:	4bbc      	ldr	r3, [pc, #752]	; (8012574 <__ieee754_rem_pio2+0x31c>)
 8012282:	4598      	cmp	r8, r3
 8012284:	dc75      	bgt.n	8012372 <__ieee754_rem_pio2+0x11a>
 8012286:	9b04      	ldr	r3, [sp, #16]
 8012288:	4dbb      	ldr	r5, [pc, #748]	; (8012578 <__ieee754_rem_pio2+0x320>)
 801228a:	2b00      	cmp	r3, #0
 801228c:	ee10 0a10 	vmov	r0, s0
 8012290:	a3a9      	add	r3, pc, #676	; (adr r3, 8012538 <__ieee754_rem_pio2+0x2e0>)
 8012292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012296:	4639      	mov	r1, r7
 8012298:	dd36      	ble.n	8012308 <__ieee754_rem_pio2+0xb0>
 801229a:	f7ee f80d 	bl	80002b8 <__aeabi_dsub>
 801229e:	45a8      	cmp	r8, r5
 80122a0:	4606      	mov	r6, r0
 80122a2:	460f      	mov	r7, r1
 80122a4:	d018      	beq.n	80122d8 <__ieee754_rem_pio2+0x80>
 80122a6:	a3a6      	add	r3, pc, #664	; (adr r3, 8012540 <__ieee754_rem_pio2+0x2e8>)
 80122a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122ac:	f7ee f804 	bl	80002b8 <__aeabi_dsub>
 80122b0:	4602      	mov	r2, r0
 80122b2:	460b      	mov	r3, r1
 80122b4:	e9c4 2300 	strd	r2, r3, [r4]
 80122b8:	4630      	mov	r0, r6
 80122ba:	4639      	mov	r1, r7
 80122bc:	f7ed fffc 	bl	80002b8 <__aeabi_dsub>
 80122c0:	a39f      	add	r3, pc, #636	; (adr r3, 8012540 <__ieee754_rem_pio2+0x2e8>)
 80122c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122c6:	f7ed fff7 	bl	80002b8 <__aeabi_dsub>
 80122ca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80122ce:	2501      	movs	r5, #1
 80122d0:	4628      	mov	r0, r5
 80122d2:	b00d      	add	sp, #52	; 0x34
 80122d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122d8:	a39b      	add	r3, pc, #620	; (adr r3, 8012548 <__ieee754_rem_pio2+0x2f0>)
 80122da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122de:	f7ed ffeb 	bl	80002b8 <__aeabi_dsub>
 80122e2:	a39b      	add	r3, pc, #620	; (adr r3, 8012550 <__ieee754_rem_pio2+0x2f8>)
 80122e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122e8:	4606      	mov	r6, r0
 80122ea:	460f      	mov	r7, r1
 80122ec:	f7ed ffe4 	bl	80002b8 <__aeabi_dsub>
 80122f0:	4602      	mov	r2, r0
 80122f2:	460b      	mov	r3, r1
 80122f4:	e9c4 2300 	strd	r2, r3, [r4]
 80122f8:	4630      	mov	r0, r6
 80122fa:	4639      	mov	r1, r7
 80122fc:	f7ed ffdc 	bl	80002b8 <__aeabi_dsub>
 8012300:	a393      	add	r3, pc, #588	; (adr r3, 8012550 <__ieee754_rem_pio2+0x2f8>)
 8012302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012306:	e7de      	b.n	80122c6 <__ieee754_rem_pio2+0x6e>
 8012308:	f7ed ffd8 	bl	80002bc <__adddf3>
 801230c:	45a8      	cmp	r8, r5
 801230e:	4606      	mov	r6, r0
 8012310:	460f      	mov	r7, r1
 8012312:	d016      	beq.n	8012342 <__ieee754_rem_pio2+0xea>
 8012314:	a38a      	add	r3, pc, #552	; (adr r3, 8012540 <__ieee754_rem_pio2+0x2e8>)
 8012316:	e9d3 2300 	ldrd	r2, r3, [r3]
 801231a:	f7ed ffcf 	bl	80002bc <__adddf3>
 801231e:	4602      	mov	r2, r0
 8012320:	460b      	mov	r3, r1
 8012322:	e9c4 2300 	strd	r2, r3, [r4]
 8012326:	4630      	mov	r0, r6
 8012328:	4639      	mov	r1, r7
 801232a:	f7ed ffc5 	bl	80002b8 <__aeabi_dsub>
 801232e:	a384      	add	r3, pc, #528	; (adr r3, 8012540 <__ieee754_rem_pio2+0x2e8>)
 8012330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012334:	f7ed ffc2 	bl	80002bc <__adddf3>
 8012338:	f04f 35ff 	mov.w	r5, #4294967295
 801233c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012340:	e7c6      	b.n	80122d0 <__ieee754_rem_pio2+0x78>
 8012342:	a381      	add	r3, pc, #516	; (adr r3, 8012548 <__ieee754_rem_pio2+0x2f0>)
 8012344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012348:	f7ed ffb8 	bl	80002bc <__adddf3>
 801234c:	a380      	add	r3, pc, #512	; (adr r3, 8012550 <__ieee754_rem_pio2+0x2f8>)
 801234e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012352:	4606      	mov	r6, r0
 8012354:	460f      	mov	r7, r1
 8012356:	f7ed ffb1 	bl	80002bc <__adddf3>
 801235a:	4602      	mov	r2, r0
 801235c:	460b      	mov	r3, r1
 801235e:	e9c4 2300 	strd	r2, r3, [r4]
 8012362:	4630      	mov	r0, r6
 8012364:	4639      	mov	r1, r7
 8012366:	f7ed ffa7 	bl	80002b8 <__aeabi_dsub>
 801236a:	a379      	add	r3, pc, #484	; (adr r3, 8012550 <__ieee754_rem_pio2+0x2f8>)
 801236c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012370:	e7e0      	b.n	8012334 <__ieee754_rem_pio2+0xdc>
 8012372:	4b82      	ldr	r3, [pc, #520]	; (801257c <__ieee754_rem_pio2+0x324>)
 8012374:	4598      	cmp	r8, r3
 8012376:	f300 80d0 	bgt.w	801251a <__ieee754_rem_pio2+0x2c2>
 801237a:	f000 fe23 	bl	8012fc4 <fabs>
 801237e:	ec57 6b10 	vmov	r6, r7, d0
 8012382:	ee10 0a10 	vmov	r0, s0
 8012386:	a374      	add	r3, pc, #464	; (adr r3, 8012558 <__ieee754_rem_pio2+0x300>)
 8012388:	e9d3 2300 	ldrd	r2, r3, [r3]
 801238c:	4639      	mov	r1, r7
 801238e:	f7ee f94b 	bl	8000628 <__aeabi_dmul>
 8012392:	2200      	movs	r2, #0
 8012394:	4b7a      	ldr	r3, [pc, #488]	; (8012580 <__ieee754_rem_pio2+0x328>)
 8012396:	f7ed ff91 	bl	80002bc <__adddf3>
 801239a:	f7ee fbf5 	bl	8000b88 <__aeabi_d2iz>
 801239e:	4605      	mov	r5, r0
 80123a0:	f7ee f8d8 	bl	8000554 <__aeabi_i2d>
 80123a4:	a364      	add	r3, pc, #400	; (adr r3, 8012538 <__ieee754_rem_pio2+0x2e0>)
 80123a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80123ae:	f7ee f93b 	bl	8000628 <__aeabi_dmul>
 80123b2:	4602      	mov	r2, r0
 80123b4:	460b      	mov	r3, r1
 80123b6:	4630      	mov	r0, r6
 80123b8:	4639      	mov	r1, r7
 80123ba:	f7ed ff7d 	bl	80002b8 <__aeabi_dsub>
 80123be:	a360      	add	r3, pc, #384	; (adr r3, 8012540 <__ieee754_rem_pio2+0x2e8>)
 80123c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123c4:	4682      	mov	sl, r0
 80123c6:	468b      	mov	fp, r1
 80123c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80123cc:	f7ee f92c 	bl	8000628 <__aeabi_dmul>
 80123d0:	2d1f      	cmp	r5, #31
 80123d2:	4606      	mov	r6, r0
 80123d4:	460f      	mov	r7, r1
 80123d6:	dc0c      	bgt.n	80123f2 <__ieee754_rem_pio2+0x19a>
 80123d8:	1e6a      	subs	r2, r5, #1
 80123da:	4b6a      	ldr	r3, [pc, #424]	; (8012584 <__ieee754_rem_pio2+0x32c>)
 80123dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80123e0:	4543      	cmp	r3, r8
 80123e2:	d006      	beq.n	80123f2 <__ieee754_rem_pio2+0x19a>
 80123e4:	4632      	mov	r2, r6
 80123e6:	463b      	mov	r3, r7
 80123e8:	4650      	mov	r0, sl
 80123ea:	4659      	mov	r1, fp
 80123ec:	f7ed ff64 	bl	80002b8 <__aeabi_dsub>
 80123f0:	e00e      	b.n	8012410 <__ieee754_rem_pio2+0x1b8>
 80123f2:	4632      	mov	r2, r6
 80123f4:	463b      	mov	r3, r7
 80123f6:	4650      	mov	r0, sl
 80123f8:	4659      	mov	r1, fp
 80123fa:	f7ed ff5d 	bl	80002b8 <__aeabi_dsub>
 80123fe:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012402:	9305      	str	r3, [sp, #20]
 8012404:	9a05      	ldr	r2, [sp, #20]
 8012406:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801240a:	1ad3      	subs	r3, r2, r3
 801240c:	2b10      	cmp	r3, #16
 801240e:	dc02      	bgt.n	8012416 <__ieee754_rem_pio2+0x1be>
 8012410:	e9c4 0100 	strd	r0, r1, [r4]
 8012414:	e039      	b.n	801248a <__ieee754_rem_pio2+0x232>
 8012416:	a34c      	add	r3, pc, #304	; (adr r3, 8012548 <__ieee754_rem_pio2+0x2f0>)
 8012418:	e9d3 2300 	ldrd	r2, r3, [r3]
 801241c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012420:	f7ee f902 	bl	8000628 <__aeabi_dmul>
 8012424:	4606      	mov	r6, r0
 8012426:	460f      	mov	r7, r1
 8012428:	4602      	mov	r2, r0
 801242a:	460b      	mov	r3, r1
 801242c:	4650      	mov	r0, sl
 801242e:	4659      	mov	r1, fp
 8012430:	f7ed ff42 	bl	80002b8 <__aeabi_dsub>
 8012434:	4602      	mov	r2, r0
 8012436:	460b      	mov	r3, r1
 8012438:	4680      	mov	r8, r0
 801243a:	4689      	mov	r9, r1
 801243c:	4650      	mov	r0, sl
 801243e:	4659      	mov	r1, fp
 8012440:	f7ed ff3a 	bl	80002b8 <__aeabi_dsub>
 8012444:	4632      	mov	r2, r6
 8012446:	463b      	mov	r3, r7
 8012448:	f7ed ff36 	bl	80002b8 <__aeabi_dsub>
 801244c:	a340      	add	r3, pc, #256	; (adr r3, 8012550 <__ieee754_rem_pio2+0x2f8>)
 801244e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012452:	4606      	mov	r6, r0
 8012454:	460f      	mov	r7, r1
 8012456:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801245a:	f7ee f8e5 	bl	8000628 <__aeabi_dmul>
 801245e:	4632      	mov	r2, r6
 8012460:	463b      	mov	r3, r7
 8012462:	f7ed ff29 	bl	80002b8 <__aeabi_dsub>
 8012466:	4602      	mov	r2, r0
 8012468:	460b      	mov	r3, r1
 801246a:	4606      	mov	r6, r0
 801246c:	460f      	mov	r7, r1
 801246e:	4640      	mov	r0, r8
 8012470:	4649      	mov	r1, r9
 8012472:	f7ed ff21 	bl	80002b8 <__aeabi_dsub>
 8012476:	9a05      	ldr	r2, [sp, #20]
 8012478:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801247c:	1ad3      	subs	r3, r2, r3
 801247e:	2b31      	cmp	r3, #49	; 0x31
 8012480:	dc20      	bgt.n	80124c4 <__ieee754_rem_pio2+0x26c>
 8012482:	e9c4 0100 	strd	r0, r1, [r4]
 8012486:	46c2      	mov	sl, r8
 8012488:	46cb      	mov	fp, r9
 801248a:	e9d4 8900 	ldrd	r8, r9, [r4]
 801248e:	4650      	mov	r0, sl
 8012490:	4642      	mov	r2, r8
 8012492:	464b      	mov	r3, r9
 8012494:	4659      	mov	r1, fp
 8012496:	f7ed ff0f 	bl	80002b8 <__aeabi_dsub>
 801249a:	463b      	mov	r3, r7
 801249c:	4632      	mov	r2, r6
 801249e:	f7ed ff0b 	bl	80002b8 <__aeabi_dsub>
 80124a2:	9b04      	ldr	r3, [sp, #16]
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80124aa:	f6bf af11 	bge.w	80122d0 <__ieee754_rem_pio2+0x78>
 80124ae:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80124b2:	6063      	str	r3, [r4, #4]
 80124b4:	f8c4 8000 	str.w	r8, [r4]
 80124b8:	60a0      	str	r0, [r4, #8]
 80124ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80124be:	60e3      	str	r3, [r4, #12]
 80124c0:	426d      	negs	r5, r5
 80124c2:	e705      	b.n	80122d0 <__ieee754_rem_pio2+0x78>
 80124c4:	a326      	add	r3, pc, #152	; (adr r3, 8012560 <__ieee754_rem_pio2+0x308>)
 80124c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80124ce:	f7ee f8ab 	bl	8000628 <__aeabi_dmul>
 80124d2:	4606      	mov	r6, r0
 80124d4:	460f      	mov	r7, r1
 80124d6:	4602      	mov	r2, r0
 80124d8:	460b      	mov	r3, r1
 80124da:	4640      	mov	r0, r8
 80124dc:	4649      	mov	r1, r9
 80124de:	f7ed feeb 	bl	80002b8 <__aeabi_dsub>
 80124e2:	4602      	mov	r2, r0
 80124e4:	460b      	mov	r3, r1
 80124e6:	4682      	mov	sl, r0
 80124e8:	468b      	mov	fp, r1
 80124ea:	4640      	mov	r0, r8
 80124ec:	4649      	mov	r1, r9
 80124ee:	f7ed fee3 	bl	80002b8 <__aeabi_dsub>
 80124f2:	4632      	mov	r2, r6
 80124f4:	463b      	mov	r3, r7
 80124f6:	f7ed fedf 	bl	80002b8 <__aeabi_dsub>
 80124fa:	a31b      	add	r3, pc, #108	; (adr r3, 8012568 <__ieee754_rem_pio2+0x310>)
 80124fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012500:	4606      	mov	r6, r0
 8012502:	460f      	mov	r7, r1
 8012504:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012508:	f7ee f88e 	bl	8000628 <__aeabi_dmul>
 801250c:	4632      	mov	r2, r6
 801250e:	463b      	mov	r3, r7
 8012510:	f7ed fed2 	bl	80002b8 <__aeabi_dsub>
 8012514:	4606      	mov	r6, r0
 8012516:	460f      	mov	r7, r1
 8012518:	e764      	b.n	80123e4 <__ieee754_rem_pio2+0x18c>
 801251a:	4b1b      	ldr	r3, [pc, #108]	; (8012588 <__ieee754_rem_pio2+0x330>)
 801251c:	4598      	cmp	r8, r3
 801251e:	dd35      	ble.n	801258c <__ieee754_rem_pio2+0x334>
 8012520:	ee10 2a10 	vmov	r2, s0
 8012524:	463b      	mov	r3, r7
 8012526:	4630      	mov	r0, r6
 8012528:	4639      	mov	r1, r7
 801252a:	f7ed fec5 	bl	80002b8 <__aeabi_dsub>
 801252e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012532:	e9c4 0100 	strd	r0, r1, [r4]
 8012536:	e6a1      	b.n	801227c <__ieee754_rem_pio2+0x24>
 8012538:	54400000 	.word	0x54400000
 801253c:	3ff921fb 	.word	0x3ff921fb
 8012540:	1a626331 	.word	0x1a626331
 8012544:	3dd0b461 	.word	0x3dd0b461
 8012548:	1a600000 	.word	0x1a600000
 801254c:	3dd0b461 	.word	0x3dd0b461
 8012550:	2e037073 	.word	0x2e037073
 8012554:	3ba3198a 	.word	0x3ba3198a
 8012558:	6dc9c883 	.word	0x6dc9c883
 801255c:	3fe45f30 	.word	0x3fe45f30
 8012560:	2e000000 	.word	0x2e000000
 8012564:	3ba3198a 	.word	0x3ba3198a
 8012568:	252049c1 	.word	0x252049c1
 801256c:	397b839a 	.word	0x397b839a
 8012570:	3fe921fb 	.word	0x3fe921fb
 8012574:	4002d97b 	.word	0x4002d97b
 8012578:	3ff921fb 	.word	0x3ff921fb
 801257c:	413921fb 	.word	0x413921fb
 8012580:	3fe00000 	.word	0x3fe00000
 8012584:	08018690 	.word	0x08018690
 8012588:	7fefffff 	.word	0x7fefffff
 801258c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8012590:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8012594:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8012598:	4630      	mov	r0, r6
 801259a:	460f      	mov	r7, r1
 801259c:	f7ee faf4 	bl	8000b88 <__aeabi_d2iz>
 80125a0:	f7ed ffd8 	bl	8000554 <__aeabi_i2d>
 80125a4:	4602      	mov	r2, r0
 80125a6:	460b      	mov	r3, r1
 80125a8:	4630      	mov	r0, r6
 80125aa:	4639      	mov	r1, r7
 80125ac:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80125b0:	f7ed fe82 	bl	80002b8 <__aeabi_dsub>
 80125b4:	2200      	movs	r2, #0
 80125b6:	4b1f      	ldr	r3, [pc, #124]	; (8012634 <__ieee754_rem_pio2+0x3dc>)
 80125b8:	f7ee f836 	bl	8000628 <__aeabi_dmul>
 80125bc:	460f      	mov	r7, r1
 80125be:	4606      	mov	r6, r0
 80125c0:	f7ee fae2 	bl	8000b88 <__aeabi_d2iz>
 80125c4:	f7ed ffc6 	bl	8000554 <__aeabi_i2d>
 80125c8:	4602      	mov	r2, r0
 80125ca:	460b      	mov	r3, r1
 80125cc:	4630      	mov	r0, r6
 80125ce:	4639      	mov	r1, r7
 80125d0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80125d4:	f7ed fe70 	bl	80002b8 <__aeabi_dsub>
 80125d8:	2200      	movs	r2, #0
 80125da:	4b16      	ldr	r3, [pc, #88]	; (8012634 <__ieee754_rem_pio2+0x3dc>)
 80125dc:	f7ee f824 	bl	8000628 <__aeabi_dmul>
 80125e0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80125e4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80125e8:	f04f 0803 	mov.w	r8, #3
 80125ec:	2600      	movs	r6, #0
 80125ee:	2700      	movs	r7, #0
 80125f0:	4632      	mov	r2, r6
 80125f2:	463b      	mov	r3, r7
 80125f4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80125f8:	f108 3aff 	add.w	sl, r8, #4294967295
 80125fc:	f7ee fa7c 	bl	8000af8 <__aeabi_dcmpeq>
 8012600:	b9b0      	cbnz	r0, 8012630 <__ieee754_rem_pio2+0x3d8>
 8012602:	4b0d      	ldr	r3, [pc, #52]	; (8012638 <__ieee754_rem_pio2+0x3e0>)
 8012604:	9301      	str	r3, [sp, #4]
 8012606:	2302      	movs	r3, #2
 8012608:	9300      	str	r3, [sp, #0]
 801260a:	462a      	mov	r2, r5
 801260c:	4643      	mov	r3, r8
 801260e:	4621      	mov	r1, r4
 8012610:	a806      	add	r0, sp, #24
 8012612:	f000 f8dd 	bl	80127d0 <__kernel_rem_pio2>
 8012616:	9b04      	ldr	r3, [sp, #16]
 8012618:	2b00      	cmp	r3, #0
 801261a:	4605      	mov	r5, r0
 801261c:	f6bf ae58 	bge.w	80122d0 <__ieee754_rem_pio2+0x78>
 8012620:	6863      	ldr	r3, [r4, #4]
 8012622:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012626:	6063      	str	r3, [r4, #4]
 8012628:	68e3      	ldr	r3, [r4, #12]
 801262a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801262e:	e746      	b.n	80124be <__ieee754_rem_pio2+0x266>
 8012630:	46d0      	mov	r8, sl
 8012632:	e7dd      	b.n	80125f0 <__ieee754_rem_pio2+0x398>
 8012634:	41700000 	.word	0x41700000
 8012638:	08018710 	.word	0x08018710
 801263c:	00000000 	.word	0x00000000

08012640 <__kernel_cos>:
 8012640:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012644:	ec59 8b10 	vmov	r8, r9, d0
 8012648:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 801264c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8012650:	ed2d 8b02 	vpush	{d8}
 8012654:	eeb0 8a41 	vmov.f32	s16, s2
 8012658:	eef0 8a61 	vmov.f32	s17, s3
 801265c:	da07      	bge.n	801266e <__kernel_cos+0x2e>
 801265e:	ee10 0a10 	vmov	r0, s0
 8012662:	4649      	mov	r1, r9
 8012664:	f7ee fa90 	bl	8000b88 <__aeabi_d2iz>
 8012668:	2800      	cmp	r0, #0
 801266a:	f000 8089 	beq.w	8012780 <__kernel_cos+0x140>
 801266e:	4642      	mov	r2, r8
 8012670:	464b      	mov	r3, r9
 8012672:	4640      	mov	r0, r8
 8012674:	4649      	mov	r1, r9
 8012676:	f7ed ffd7 	bl	8000628 <__aeabi_dmul>
 801267a:	2200      	movs	r2, #0
 801267c:	4b4e      	ldr	r3, [pc, #312]	; (80127b8 <__kernel_cos+0x178>)
 801267e:	4604      	mov	r4, r0
 8012680:	460d      	mov	r5, r1
 8012682:	f7ed ffd1 	bl	8000628 <__aeabi_dmul>
 8012686:	a340      	add	r3, pc, #256	; (adr r3, 8012788 <__kernel_cos+0x148>)
 8012688:	e9d3 2300 	ldrd	r2, r3, [r3]
 801268c:	4682      	mov	sl, r0
 801268e:	468b      	mov	fp, r1
 8012690:	4620      	mov	r0, r4
 8012692:	4629      	mov	r1, r5
 8012694:	f7ed ffc8 	bl	8000628 <__aeabi_dmul>
 8012698:	a33d      	add	r3, pc, #244	; (adr r3, 8012790 <__kernel_cos+0x150>)
 801269a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801269e:	f7ed fe0d 	bl	80002bc <__adddf3>
 80126a2:	4622      	mov	r2, r4
 80126a4:	462b      	mov	r3, r5
 80126a6:	f7ed ffbf 	bl	8000628 <__aeabi_dmul>
 80126aa:	a33b      	add	r3, pc, #236	; (adr r3, 8012798 <__kernel_cos+0x158>)
 80126ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126b0:	f7ed fe02 	bl	80002b8 <__aeabi_dsub>
 80126b4:	4622      	mov	r2, r4
 80126b6:	462b      	mov	r3, r5
 80126b8:	f7ed ffb6 	bl	8000628 <__aeabi_dmul>
 80126bc:	a338      	add	r3, pc, #224	; (adr r3, 80127a0 <__kernel_cos+0x160>)
 80126be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126c2:	f7ed fdfb 	bl	80002bc <__adddf3>
 80126c6:	4622      	mov	r2, r4
 80126c8:	462b      	mov	r3, r5
 80126ca:	f7ed ffad 	bl	8000628 <__aeabi_dmul>
 80126ce:	a336      	add	r3, pc, #216	; (adr r3, 80127a8 <__kernel_cos+0x168>)
 80126d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126d4:	f7ed fdf0 	bl	80002b8 <__aeabi_dsub>
 80126d8:	4622      	mov	r2, r4
 80126da:	462b      	mov	r3, r5
 80126dc:	f7ed ffa4 	bl	8000628 <__aeabi_dmul>
 80126e0:	a333      	add	r3, pc, #204	; (adr r3, 80127b0 <__kernel_cos+0x170>)
 80126e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126e6:	f7ed fde9 	bl	80002bc <__adddf3>
 80126ea:	4622      	mov	r2, r4
 80126ec:	462b      	mov	r3, r5
 80126ee:	f7ed ff9b 	bl	8000628 <__aeabi_dmul>
 80126f2:	4622      	mov	r2, r4
 80126f4:	462b      	mov	r3, r5
 80126f6:	f7ed ff97 	bl	8000628 <__aeabi_dmul>
 80126fa:	ec53 2b18 	vmov	r2, r3, d8
 80126fe:	4604      	mov	r4, r0
 8012700:	460d      	mov	r5, r1
 8012702:	4640      	mov	r0, r8
 8012704:	4649      	mov	r1, r9
 8012706:	f7ed ff8f 	bl	8000628 <__aeabi_dmul>
 801270a:	460b      	mov	r3, r1
 801270c:	4602      	mov	r2, r0
 801270e:	4629      	mov	r1, r5
 8012710:	4620      	mov	r0, r4
 8012712:	f7ed fdd1 	bl	80002b8 <__aeabi_dsub>
 8012716:	4b29      	ldr	r3, [pc, #164]	; (80127bc <__kernel_cos+0x17c>)
 8012718:	429e      	cmp	r6, r3
 801271a:	4680      	mov	r8, r0
 801271c:	4689      	mov	r9, r1
 801271e:	dc11      	bgt.n	8012744 <__kernel_cos+0x104>
 8012720:	4602      	mov	r2, r0
 8012722:	460b      	mov	r3, r1
 8012724:	4650      	mov	r0, sl
 8012726:	4659      	mov	r1, fp
 8012728:	f7ed fdc6 	bl	80002b8 <__aeabi_dsub>
 801272c:	460b      	mov	r3, r1
 801272e:	4924      	ldr	r1, [pc, #144]	; (80127c0 <__kernel_cos+0x180>)
 8012730:	4602      	mov	r2, r0
 8012732:	2000      	movs	r0, #0
 8012734:	f7ed fdc0 	bl	80002b8 <__aeabi_dsub>
 8012738:	ecbd 8b02 	vpop	{d8}
 801273c:	ec41 0b10 	vmov	d0, r0, r1
 8012740:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012744:	4b1f      	ldr	r3, [pc, #124]	; (80127c4 <__kernel_cos+0x184>)
 8012746:	491e      	ldr	r1, [pc, #120]	; (80127c0 <__kernel_cos+0x180>)
 8012748:	429e      	cmp	r6, r3
 801274a:	bfcc      	ite	gt
 801274c:	4d1e      	ldrgt	r5, [pc, #120]	; (80127c8 <__kernel_cos+0x188>)
 801274e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8012752:	2400      	movs	r4, #0
 8012754:	4622      	mov	r2, r4
 8012756:	462b      	mov	r3, r5
 8012758:	2000      	movs	r0, #0
 801275a:	f7ed fdad 	bl	80002b8 <__aeabi_dsub>
 801275e:	4622      	mov	r2, r4
 8012760:	4606      	mov	r6, r0
 8012762:	460f      	mov	r7, r1
 8012764:	462b      	mov	r3, r5
 8012766:	4650      	mov	r0, sl
 8012768:	4659      	mov	r1, fp
 801276a:	f7ed fda5 	bl	80002b8 <__aeabi_dsub>
 801276e:	4642      	mov	r2, r8
 8012770:	464b      	mov	r3, r9
 8012772:	f7ed fda1 	bl	80002b8 <__aeabi_dsub>
 8012776:	4602      	mov	r2, r0
 8012778:	460b      	mov	r3, r1
 801277a:	4630      	mov	r0, r6
 801277c:	4639      	mov	r1, r7
 801277e:	e7d9      	b.n	8012734 <__kernel_cos+0xf4>
 8012780:	2000      	movs	r0, #0
 8012782:	490f      	ldr	r1, [pc, #60]	; (80127c0 <__kernel_cos+0x180>)
 8012784:	e7d8      	b.n	8012738 <__kernel_cos+0xf8>
 8012786:	bf00      	nop
 8012788:	be8838d4 	.word	0xbe8838d4
 801278c:	bda8fae9 	.word	0xbda8fae9
 8012790:	bdb4b1c4 	.word	0xbdb4b1c4
 8012794:	3e21ee9e 	.word	0x3e21ee9e
 8012798:	809c52ad 	.word	0x809c52ad
 801279c:	3e927e4f 	.word	0x3e927e4f
 80127a0:	19cb1590 	.word	0x19cb1590
 80127a4:	3efa01a0 	.word	0x3efa01a0
 80127a8:	16c15177 	.word	0x16c15177
 80127ac:	3f56c16c 	.word	0x3f56c16c
 80127b0:	5555554c 	.word	0x5555554c
 80127b4:	3fa55555 	.word	0x3fa55555
 80127b8:	3fe00000 	.word	0x3fe00000
 80127bc:	3fd33332 	.word	0x3fd33332
 80127c0:	3ff00000 	.word	0x3ff00000
 80127c4:	3fe90000 	.word	0x3fe90000
 80127c8:	3fd20000 	.word	0x3fd20000
 80127cc:	00000000 	.word	0x00000000

080127d0 <__kernel_rem_pio2>:
 80127d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127d4:	ed2d 8b02 	vpush	{d8}
 80127d8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80127dc:	1ed4      	subs	r4, r2, #3
 80127de:	9308      	str	r3, [sp, #32]
 80127e0:	9101      	str	r1, [sp, #4]
 80127e2:	4bc5      	ldr	r3, [pc, #788]	; (8012af8 <__kernel_rem_pio2+0x328>)
 80127e4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80127e6:	9009      	str	r0, [sp, #36]	; 0x24
 80127e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80127ec:	9304      	str	r3, [sp, #16]
 80127ee:	9b08      	ldr	r3, [sp, #32]
 80127f0:	3b01      	subs	r3, #1
 80127f2:	9307      	str	r3, [sp, #28]
 80127f4:	2318      	movs	r3, #24
 80127f6:	fb94 f4f3 	sdiv	r4, r4, r3
 80127fa:	f06f 0317 	mvn.w	r3, #23
 80127fe:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8012802:	fb04 3303 	mla	r3, r4, r3, r3
 8012806:	eb03 0a02 	add.w	sl, r3, r2
 801280a:	9b04      	ldr	r3, [sp, #16]
 801280c:	9a07      	ldr	r2, [sp, #28]
 801280e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8012ae8 <__kernel_rem_pio2+0x318>
 8012812:	eb03 0802 	add.w	r8, r3, r2
 8012816:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8012818:	1aa7      	subs	r7, r4, r2
 801281a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801281e:	ae22      	add	r6, sp, #136	; 0x88
 8012820:	2500      	movs	r5, #0
 8012822:	4545      	cmp	r5, r8
 8012824:	dd13      	ble.n	801284e <__kernel_rem_pio2+0x7e>
 8012826:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8012ae8 <__kernel_rem_pio2+0x318>
 801282a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801282e:	2600      	movs	r6, #0
 8012830:	9b04      	ldr	r3, [sp, #16]
 8012832:	429e      	cmp	r6, r3
 8012834:	dc32      	bgt.n	801289c <__kernel_rem_pio2+0xcc>
 8012836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012838:	9302      	str	r3, [sp, #8]
 801283a:	9b08      	ldr	r3, [sp, #32]
 801283c:	199d      	adds	r5, r3, r6
 801283e:	ab22      	add	r3, sp, #136	; 0x88
 8012840:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012844:	9306      	str	r3, [sp, #24]
 8012846:	ec59 8b18 	vmov	r8, r9, d8
 801284a:	2700      	movs	r7, #0
 801284c:	e01f      	b.n	801288e <__kernel_rem_pio2+0xbe>
 801284e:	42ef      	cmn	r7, r5
 8012850:	d407      	bmi.n	8012862 <__kernel_rem_pio2+0x92>
 8012852:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8012856:	f7ed fe7d 	bl	8000554 <__aeabi_i2d>
 801285a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801285e:	3501      	adds	r5, #1
 8012860:	e7df      	b.n	8012822 <__kernel_rem_pio2+0x52>
 8012862:	ec51 0b18 	vmov	r0, r1, d8
 8012866:	e7f8      	b.n	801285a <__kernel_rem_pio2+0x8a>
 8012868:	9906      	ldr	r1, [sp, #24]
 801286a:	9d02      	ldr	r5, [sp, #8]
 801286c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8012870:	9106      	str	r1, [sp, #24]
 8012872:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8012876:	9502      	str	r5, [sp, #8]
 8012878:	f7ed fed6 	bl	8000628 <__aeabi_dmul>
 801287c:	4602      	mov	r2, r0
 801287e:	460b      	mov	r3, r1
 8012880:	4640      	mov	r0, r8
 8012882:	4649      	mov	r1, r9
 8012884:	f7ed fd1a 	bl	80002bc <__adddf3>
 8012888:	3701      	adds	r7, #1
 801288a:	4680      	mov	r8, r0
 801288c:	4689      	mov	r9, r1
 801288e:	9b07      	ldr	r3, [sp, #28]
 8012890:	429f      	cmp	r7, r3
 8012892:	dde9      	ble.n	8012868 <__kernel_rem_pio2+0x98>
 8012894:	e8eb 8902 	strd	r8, r9, [fp], #8
 8012898:	3601      	adds	r6, #1
 801289a:	e7c9      	b.n	8012830 <__kernel_rem_pio2+0x60>
 801289c:	9b04      	ldr	r3, [sp, #16]
 801289e:	aa0e      	add	r2, sp, #56	; 0x38
 80128a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80128a4:	930c      	str	r3, [sp, #48]	; 0x30
 80128a6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80128a8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80128ac:	9c04      	ldr	r4, [sp, #16]
 80128ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80128b0:	ab9a      	add	r3, sp, #616	; 0x268
 80128b2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 80128b6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80128ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 80128be:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80128c2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80128c6:	ab9a      	add	r3, sp, #616	; 0x268
 80128c8:	445b      	add	r3, fp
 80128ca:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 80128ce:	2500      	movs	r5, #0
 80128d0:	1b63      	subs	r3, r4, r5
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	dc78      	bgt.n	80129c8 <__kernel_rem_pio2+0x1f8>
 80128d6:	4650      	mov	r0, sl
 80128d8:	ec49 8b10 	vmov	d0, r8, r9
 80128dc:	f000 fc00 	bl	80130e0 <scalbn>
 80128e0:	ec57 6b10 	vmov	r6, r7, d0
 80128e4:	2200      	movs	r2, #0
 80128e6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80128ea:	ee10 0a10 	vmov	r0, s0
 80128ee:	4639      	mov	r1, r7
 80128f0:	f7ed fe9a 	bl	8000628 <__aeabi_dmul>
 80128f4:	ec41 0b10 	vmov	d0, r0, r1
 80128f8:	f000 fb6e 	bl	8012fd8 <floor>
 80128fc:	2200      	movs	r2, #0
 80128fe:	ec51 0b10 	vmov	r0, r1, d0
 8012902:	4b7e      	ldr	r3, [pc, #504]	; (8012afc <__kernel_rem_pio2+0x32c>)
 8012904:	f7ed fe90 	bl	8000628 <__aeabi_dmul>
 8012908:	4602      	mov	r2, r0
 801290a:	460b      	mov	r3, r1
 801290c:	4630      	mov	r0, r6
 801290e:	4639      	mov	r1, r7
 8012910:	f7ed fcd2 	bl	80002b8 <__aeabi_dsub>
 8012914:	460f      	mov	r7, r1
 8012916:	4606      	mov	r6, r0
 8012918:	f7ee f936 	bl	8000b88 <__aeabi_d2iz>
 801291c:	9006      	str	r0, [sp, #24]
 801291e:	f7ed fe19 	bl	8000554 <__aeabi_i2d>
 8012922:	4602      	mov	r2, r0
 8012924:	460b      	mov	r3, r1
 8012926:	4630      	mov	r0, r6
 8012928:	4639      	mov	r1, r7
 801292a:	f7ed fcc5 	bl	80002b8 <__aeabi_dsub>
 801292e:	f1ba 0f00 	cmp.w	sl, #0
 8012932:	4606      	mov	r6, r0
 8012934:	460f      	mov	r7, r1
 8012936:	dd6c      	ble.n	8012a12 <__kernel_rem_pio2+0x242>
 8012938:	1e62      	subs	r2, r4, #1
 801293a:	ab0e      	add	r3, sp, #56	; 0x38
 801293c:	f1ca 0118 	rsb	r1, sl, #24
 8012940:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012944:	9d06      	ldr	r5, [sp, #24]
 8012946:	fa40 f301 	asr.w	r3, r0, r1
 801294a:	441d      	add	r5, r3
 801294c:	408b      	lsls	r3, r1
 801294e:	1ac0      	subs	r0, r0, r3
 8012950:	ab0e      	add	r3, sp, #56	; 0x38
 8012952:	9506      	str	r5, [sp, #24]
 8012954:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8012958:	f1ca 0317 	rsb	r3, sl, #23
 801295c:	fa40 f303 	asr.w	r3, r0, r3
 8012960:	9302      	str	r3, [sp, #8]
 8012962:	9b02      	ldr	r3, [sp, #8]
 8012964:	2b00      	cmp	r3, #0
 8012966:	dd62      	ble.n	8012a2e <__kernel_rem_pio2+0x25e>
 8012968:	9b06      	ldr	r3, [sp, #24]
 801296a:	2200      	movs	r2, #0
 801296c:	3301      	adds	r3, #1
 801296e:	9306      	str	r3, [sp, #24]
 8012970:	4615      	mov	r5, r2
 8012972:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8012976:	4294      	cmp	r4, r2
 8012978:	f300 8095 	bgt.w	8012aa6 <__kernel_rem_pio2+0x2d6>
 801297c:	f1ba 0f00 	cmp.w	sl, #0
 8012980:	dd07      	ble.n	8012992 <__kernel_rem_pio2+0x1c2>
 8012982:	f1ba 0f01 	cmp.w	sl, #1
 8012986:	f000 80a2 	beq.w	8012ace <__kernel_rem_pio2+0x2fe>
 801298a:	f1ba 0f02 	cmp.w	sl, #2
 801298e:	f000 80c1 	beq.w	8012b14 <__kernel_rem_pio2+0x344>
 8012992:	9b02      	ldr	r3, [sp, #8]
 8012994:	2b02      	cmp	r3, #2
 8012996:	d14a      	bne.n	8012a2e <__kernel_rem_pio2+0x25e>
 8012998:	4632      	mov	r2, r6
 801299a:	463b      	mov	r3, r7
 801299c:	2000      	movs	r0, #0
 801299e:	4958      	ldr	r1, [pc, #352]	; (8012b00 <__kernel_rem_pio2+0x330>)
 80129a0:	f7ed fc8a 	bl	80002b8 <__aeabi_dsub>
 80129a4:	4606      	mov	r6, r0
 80129a6:	460f      	mov	r7, r1
 80129a8:	2d00      	cmp	r5, #0
 80129aa:	d040      	beq.n	8012a2e <__kernel_rem_pio2+0x25e>
 80129ac:	4650      	mov	r0, sl
 80129ae:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8012af0 <__kernel_rem_pio2+0x320>
 80129b2:	f000 fb95 	bl	80130e0 <scalbn>
 80129b6:	4630      	mov	r0, r6
 80129b8:	4639      	mov	r1, r7
 80129ba:	ec53 2b10 	vmov	r2, r3, d0
 80129be:	f7ed fc7b 	bl	80002b8 <__aeabi_dsub>
 80129c2:	4606      	mov	r6, r0
 80129c4:	460f      	mov	r7, r1
 80129c6:	e032      	b.n	8012a2e <__kernel_rem_pio2+0x25e>
 80129c8:	2200      	movs	r2, #0
 80129ca:	4b4e      	ldr	r3, [pc, #312]	; (8012b04 <__kernel_rem_pio2+0x334>)
 80129cc:	4640      	mov	r0, r8
 80129ce:	4649      	mov	r1, r9
 80129d0:	f7ed fe2a 	bl	8000628 <__aeabi_dmul>
 80129d4:	f7ee f8d8 	bl	8000b88 <__aeabi_d2iz>
 80129d8:	f7ed fdbc 	bl	8000554 <__aeabi_i2d>
 80129dc:	2200      	movs	r2, #0
 80129de:	4b4a      	ldr	r3, [pc, #296]	; (8012b08 <__kernel_rem_pio2+0x338>)
 80129e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80129e4:	f7ed fe20 	bl	8000628 <__aeabi_dmul>
 80129e8:	4602      	mov	r2, r0
 80129ea:	460b      	mov	r3, r1
 80129ec:	4640      	mov	r0, r8
 80129ee:	4649      	mov	r1, r9
 80129f0:	f7ed fc62 	bl	80002b8 <__aeabi_dsub>
 80129f4:	f7ee f8c8 	bl	8000b88 <__aeabi_d2iz>
 80129f8:	ab0e      	add	r3, sp, #56	; 0x38
 80129fa:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 80129fe:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8012a02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012a06:	f7ed fc59 	bl	80002bc <__adddf3>
 8012a0a:	3501      	adds	r5, #1
 8012a0c:	4680      	mov	r8, r0
 8012a0e:	4689      	mov	r9, r1
 8012a10:	e75e      	b.n	80128d0 <__kernel_rem_pio2+0x100>
 8012a12:	d105      	bne.n	8012a20 <__kernel_rem_pio2+0x250>
 8012a14:	1e63      	subs	r3, r4, #1
 8012a16:	aa0e      	add	r2, sp, #56	; 0x38
 8012a18:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8012a1c:	15c3      	asrs	r3, r0, #23
 8012a1e:	e79f      	b.n	8012960 <__kernel_rem_pio2+0x190>
 8012a20:	2200      	movs	r2, #0
 8012a22:	4b3a      	ldr	r3, [pc, #232]	; (8012b0c <__kernel_rem_pio2+0x33c>)
 8012a24:	f7ee f886 	bl	8000b34 <__aeabi_dcmpge>
 8012a28:	2800      	cmp	r0, #0
 8012a2a:	d139      	bne.n	8012aa0 <__kernel_rem_pio2+0x2d0>
 8012a2c:	9002      	str	r0, [sp, #8]
 8012a2e:	2200      	movs	r2, #0
 8012a30:	2300      	movs	r3, #0
 8012a32:	4630      	mov	r0, r6
 8012a34:	4639      	mov	r1, r7
 8012a36:	f7ee f85f 	bl	8000af8 <__aeabi_dcmpeq>
 8012a3a:	2800      	cmp	r0, #0
 8012a3c:	f000 80c7 	beq.w	8012bce <__kernel_rem_pio2+0x3fe>
 8012a40:	1e65      	subs	r5, r4, #1
 8012a42:	462b      	mov	r3, r5
 8012a44:	2200      	movs	r2, #0
 8012a46:	9904      	ldr	r1, [sp, #16]
 8012a48:	428b      	cmp	r3, r1
 8012a4a:	da6a      	bge.n	8012b22 <__kernel_rem_pio2+0x352>
 8012a4c:	2a00      	cmp	r2, #0
 8012a4e:	f000 8088 	beq.w	8012b62 <__kernel_rem_pio2+0x392>
 8012a52:	ab0e      	add	r3, sp, #56	; 0x38
 8012a54:	f1aa 0a18 	sub.w	sl, sl, #24
 8012a58:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	f000 80b4 	beq.w	8012bca <__kernel_rem_pio2+0x3fa>
 8012a62:	4650      	mov	r0, sl
 8012a64:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8012af0 <__kernel_rem_pio2+0x320>
 8012a68:	f000 fb3a 	bl	80130e0 <scalbn>
 8012a6c:	00ec      	lsls	r4, r5, #3
 8012a6e:	ab72      	add	r3, sp, #456	; 0x1c8
 8012a70:	191e      	adds	r6, r3, r4
 8012a72:	ec59 8b10 	vmov	r8, r9, d0
 8012a76:	f106 0a08 	add.w	sl, r6, #8
 8012a7a:	462f      	mov	r7, r5
 8012a7c:	2f00      	cmp	r7, #0
 8012a7e:	f280 80df 	bge.w	8012c40 <__kernel_rem_pio2+0x470>
 8012a82:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8012ae8 <__kernel_rem_pio2+0x318>
 8012a86:	f04f 0a00 	mov.w	sl, #0
 8012a8a:	eba5 030a 	sub.w	r3, r5, sl
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	f2c0 810a 	blt.w	8012ca8 <__kernel_rem_pio2+0x4d8>
 8012a94:	f8df b078 	ldr.w	fp, [pc, #120]	; 8012b10 <__kernel_rem_pio2+0x340>
 8012a98:	ec59 8b18 	vmov	r8, r9, d8
 8012a9c:	2700      	movs	r7, #0
 8012a9e:	e0f5      	b.n	8012c8c <__kernel_rem_pio2+0x4bc>
 8012aa0:	2302      	movs	r3, #2
 8012aa2:	9302      	str	r3, [sp, #8]
 8012aa4:	e760      	b.n	8012968 <__kernel_rem_pio2+0x198>
 8012aa6:	ab0e      	add	r3, sp, #56	; 0x38
 8012aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012aac:	b94d      	cbnz	r5, 8012ac2 <__kernel_rem_pio2+0x2f2>
 8012aae:	b12b      	cbz	r3, 8012abc <__kernel_rem_pio2+0x2ec>
 8012ab0:	a80e      	add	r0, sp, #56	; 0x38
 8012ab2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8012ab6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8012aba:	2301      	movs	r3, #1
 8012abc:	3201      	adds	r2, #1
 8012abe:	461d      	mov	r5, r3
 8012ac0:	e759      	b.n	8012976 <__kernel_rem_pio2+0x1a6>
 8012ac2:	a80e      	add	r0, sp, #56	; 0x38
 8012ac4:	1acb      	subs	r3, r1, r3
 8012ac6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8012aca:	462b      	mov	r3, r5
 8012acc:	e7f6      	b.n	8012abc <__kernel_rem_pio2+0x2ec>
 8012ace:	1e62      	subs	r2, r4, #1
 8012ad0:	ab0e      	add	r3, sp, #56	; 0x38
 8012ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ad6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012ada:	a90e      	add	r1, sp, #56	; 0x38
 8012adc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012ae0:	e757      	b.n	8012992 <__kernel_rem_pio2+0x1c2>
 8012ae2:	bf00      	nop
 8012ae4:	f3af 8000 	nop.w
	...
 8012af4:	3ff00000 	.word	0x3ff00000
 8012af8:	08018858 	.word	0x08018858
 8012afc:	40200000 	.word	0x40200000
 8012b00:	3ff00000 	.word	0x3ff00000
 8012b04:	3e700000 	.word	0x3e700000
 8012b08:	41700000 	.word	0x41700000
 8012b0c:	3fe00000 	.word	0x3fe00000
 8012b10:	08018818 	.word	0x08018818
 8012b14:	1e62      	subs	r2, r4, #1
 8012b16:	ab0e      	add	r3, sp, #56	; 0x38
 8012b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012b1c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012b20:	e7db      	b.n	8012ada <__kernel_rem_pio2+0x30a>
 8012b22:	a90e      	add	r1, sp, #56	; 0x38
 8012b24:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8012b28:	3b01      	subs	r3, #1
 8012b2a:	430a      	orrs	r2, r1
 8012b2c:	e78b      	b.n	8012a46 <__kernel_rem_pio2+0x276>
 8012b2e:	3301      	adds	r3, #1
 8012b30:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8012b34:	2900      	cmp	r1, #0
 8012b36:	d0fa      	beq.n	8012b2e <__kernel_rem_pio2+0x35e>
 8012b38:	9a08      	ldr	r2, [sp, #32]
 8012b3a:	4422      	add	r2, r4
 8012b3c:	00d2      	lsls	r2, r2, #3
 8012b3e:	a922      	add	r1, sp, #136	; 0x88
 8012b40:	18e3      	adds	r3, r4, r3
 8012b42:	9206      	str	r2, [sp, #24]
 8012b44:	440a      	add	r2, r1
 8012b46:	9302      	str	r3, [sp, #8]
 8012b48:	f10b 0108 	add.w	r1, fp, #8
 8012b4c:	f102 0308 	add.w	r3, r2, #8
 8012b50:	1c66      	adds	r6, r4, #1
 8012b52:	910a      	str	r1, [sp, #40]	; 0x28
 8012b54:	2500      	movs	r5, #0
 8012b56:	930d      	str	r3, [sp, #52]	; 0x34
 8012b58:	9b02      	ldr	r3, [sp, #8]
 8012b5a:	42b3      	cmp	r3, r6
 8012b5c:	da04      	bge.n	8012b68 <__kernel_rem_pio2+0x398>
 8012b5e:	461c      	mov	r4, r3
 8012b60:	e6a6      	b.n	80128b0 <__kernel_rem_pio2+0xe0>
 8012b62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012b64:	2301      	movs	r3, #1
 8012b66:	e7e3      	b.n	8012b30 <__kernel_rem_pio2+0x360>
 8012b68:	9b06      	ldr	r3, [sp, #24]
 8012b6a:	18ef      	adds	r7, r5, r3
 8012b6c:	ab22      	add	r3, sp, #136	; 0x88
 8012b6e:	441f      	add	r7, r3
 8012b70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012b72:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8012b76:	f7ed fced 	bl	8000554 <__aeabi_i2d>
 8012b7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b7c:	461c      	mov	r4, r3
 8012b7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012b80:	e9c7 0100 	strd	r0, r1, [r7]
 8012b84:	eb03 0b05 	add.w	fp, r3, r5
 8012b88:	2700      	movs	r7, #0
 8012b8a:	f04f 0800 	mov.w	r8, #0
 8012b8e:	f04f 0900 	mov.w	r9, #0
 8012b92:	9b07      	ldr	r3, [sp, #28]
 8012b94:	429f      	cmp	r7, r3
 8012b96:	dd08      	ble.n	8012baa <__kernel_rem_pio2+0x3da>
 8012b98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b9a:	aa72      	add	r2, sp, #456	; 0x1c8
 8012b9c:	18eb      	adds	r3, r5, r3
 8012b9e:	4413      	add	r3, r2
 8012ba0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8012ba4:	3601      	adds	r6, #1
 8012ba6:	3508      	adds	r5, #8
 8012ba8:	e7d6      	b.n	8012b58 <__kernel_rem_pio2+0x388>
 8012baa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8012bae:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8012bb2:	f7ed fd39 	bl	8000628 <__aeabi_dmul>
 8012bb6:	4602      	mov	r2, r0
 8012bb8:	460b      	mov	r3, r1
 8012bba:	4640      	mov	r0, r8
 8012bbc:	4649      	mov	r1, r9
 8012bbe:	f7ed fb7d 	bl	80002bc <__adddf3>
 8012bc2:	3701      	adds	r7, #1
 8012bc4:	4680      	mov	r8, r0
 8012bc6:	4689      	mov	r9, r1
 8012bc8:	e7e3      	b.n	8012b92 <__kernel_rem_pio2+0x3c2>
 8012bca:	3d01      	subs	r5, #1
 8012bcc:	e741      	b.n	8012a52 <__kernel_rem_pio2+0x282>
 8012bce:	f1ca 0000 	rsb	r0, sl, #0
 8012bd2:	ec47 6b10 	vmov	d0, r6, r7
 8012bd6:	f000 fa83 	bl	80130e0 <scalbn>
 8012bda:	ec57 6b10 	vmov	r6, r7, d0
 8012bde:	2200      	movs	r2, #0
 8012be0:	4b99      	ldr	r3, [pc, #612]	; (8012e48 <__kernel_rem_pio2+0x678>)
 8012be2:	ee10 0a10 	vmov	r0, s0
 8012be6:	4639      	mov	r1, r7
 8012be8:	f7ed ffa4 	bl	8000b34 <__aeabi_dcmpge>
 8012bec:	b1f8      	cbz	r0, 8012c2e <__kernel_rem_pio2+0x45e>
 8012bee:	2200      	movs	r2, #0
 8012bf0:	4b96      	ldr	r3, [pc, #600]	; (8012e4c <__kernel_rem_pio2+0x67c>)
 8012bf2:	4630      	mov	r0, r6
 8012bf4:	4639      	mov	r1, r7
 8012bf6:	f7ed fd17 	bl	8000628 <__aeabi_dmul>
 8012bfa:	f7ed ffc5 	bl	8000b88 <__aeabi_d2iz>
 8012bfe:	4680      	mov	r8, r0
 8012c00:	f7ed fca8 	bl	8000554 <__aeabi_i2d>
 8012c04:	2200      	movs	r2, #0
 8012c06:	4b90      	ldr	r3, [pc, #576]	; (8012e48 <__kernel_rem_pio2+0x678>)
 8012c08:	f7ed fd0e 	bl	8000628 <__aeabi_dmul>
 8012c0c:	460b      	mov	r3, r1
 8012c0e:	4602      	mov	r2, r0
 8012c10:	4639      	mov	r1, r7
 8012c12:	4630      	mov	r0, r6
 8012c14:	f7ed fb50 	bl	80002b8 <__aeabi_dsub>
 8012c18:	f7ed ffb6 	bl	8000b88 <__aeabi_d2iz>
 8012c1c:	1c65      	adds	r5, r4, #1
 8012c1e:	ab0e      	add	r3, sp, #56	; 0x38
 8012c20:	f10a 0a18 	add.w	sl, sl, #24
 8012c24:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012c28:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8012c2c:	e719      	b.n	8012a62 <__kernel_rem_pio2+0x292>
 8012c2e:	4630      	mov	r0, r6
 8012c30:	4639      	mov	r1, r7
 8012c32:	f7ed ffa9 	bl	8000b88 <__aeabi_d2iz>
 8012c36:	ab0e      	add	r3, sp, #56	; 0x38
 8012c38:	4625      	mov	r5, r4
 8012c3a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012c3e:	e710      	b.n	8012a62 <__kernel_rem_pio2+0x292>
 8012c40:	ab0e      	add	r3, sp, #56	; 0x38
 8012c42:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8012c46:	f7ed fc85 	bl	8000554 <__aeabi_i2d>
 8012c4a:	4642      	mov	r2, r8
 8012c4c:	464b      	mov	r3, r9
 8012c4e:	f7ed fceb 	bl	8000628 <__aeabi_dmul>
 8012c52:	2200      	movs	r2, #0
 8012c54:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8012c58:	4b7c      	ldr	r3, [pc, #496]	; (8012e4c <__kernel_rem_pio2+0x67c>)
 8012c5a:	4640      	mov	r0, r8
 8012c5c:	4649      	mov	r1, r9
 8012c5e:	f7ed fce3 	bl	8000628 <__aeabi_dmul>
 8012c62:	3f01      	subs	r7, #1
 8012c64:	4680      	mov	r8, r0
 8012c66:	4689      	mov	r9, r1
 8012c68:	e708      	b.n	8012a7c <__kernel_rem_pio2+0x2ac>
 8012c6a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8012c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c72:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8012c76:	f7ed fcd7 	bl	8000628 <__aeabi_dmul>
 8012c7a:	4602      	mov	r2, r0
 8012c7c:	460b      	mov	r3, r1
 8012c7e:	4640      	mov	r0, r8
 8012c80:	4649      	mov	r1, r9
 8012c82:	f7ed fb1b 	bl	80002bc <__adddf3>
 8012c86:	3701      	adds	r7, #1
 8012c88:	4680      	mov	r8, r0
 8012c8a:	4689      	mov	r9, r1
 8012c8c:	9b04      	ldr	r3, [sp, #16]
 8012c8e:	429f      	cmp	r7, r3
 8012c90:	dc01      	bgt.n	8012c96 <__kernel_rem_pio2+0x4c6>
 8012c92:	45ba      	cmp	sl, r7
 8012c94:	dae9      	bge.n	8012c6a <__kernel_rem_pio2+0x49a>
 8012c96:	ab4a      	add	r3, sp, #296	; 0x128
 8012c98:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012c9c:	e9c3 8900 	strd	r8, r9, [r3]
 8012ca0:	f10a 0a01 	add.w	sl, sl, #1
 8012ca4:	3e08      	subs	r6, #8
 8012ca6:	e6f0      	b.n	8012a8a <__kernel_rem_pio2+0x2ba>
 8012ca8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8012caa:	2b03      	cmp	r3, #3
 8012cac:	d85b      	bhi.n	8012d66 <__kernel_rem_pio2+0x596>
 8012cae:	e8df f003 	tbb	[pc, r3]
 8012cb2:	264a      	.short	0x264a
 8012cb4:	0226      	.short	0x0226
 8012cb6:	ab9a      	add	r3, sp, #616	; 0x268
 8012cb8:	441c      	add	r4, r3
 8012cba:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8012cbe:	46a2      	mov	sl, r4
 8012cc0:	46ab      	mov	fp, r5
 8012cc2:	f1bb 0f00 	cmp.w	fp, #0
 8012cc6:	dc6c      	bgt.n	8012da2 <__kernel_rem_pio2+0x5d2>
 8012cc8:	46a2      	mov	sl, r4
 8012cca:	46ab      	mov	fp, r5
 8012ccc:	f1bb 0f01 	cmp.w	fp, #1
 8012cd0:	f300 8086 	bgt.w	8012de0 <__kernel_rem_pio2+0x610>
 8012cd4:	2000      	movs	r0, #0
 8012cd6:	2100      	movs	r1, #0
 8012cd8:	2d01      	cmp	r5, #1
 8012cda:	f300 80a0 	bgt.w	8012e1e <__kernel_rem_pio2+0x64e>
 8012cde:	9b02      	ldr	r3, [sp, #8]
 8012ce0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8012ce4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	f040 809e 	bne.w	8012e2a <__kernel_rem_pio2+0x65a>
 8012cee:	9b01      	ldr	r3, [sp, #4]
 8012cf0:	e9c3 7800 	strd	r7, r8, [r3]
 8012cf4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8012cf8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8012cfc:	e033      	b.n	8012d66 <__kernel_rem_pio2+0x596>
 8012cfe:	3408      	adds	r4, #8
 8012d00:	ab4a      	add	r3, sp, #296	; 0x128
 8012d02:	441c      	add	r4, r3
 8012d04:	462e      	mov	r6, r5
 8012d06:	2000      	movs	r0, #0
 8012d08:	2100      	movs	r1, #0
 8012d0a:	2e00      	cmp	r6, #0
 8012d0c:	da3a      	bge.n	8012d84 <__kernel_rem_pio2+0x5b4>
 8012d0e:	9b02      	ldr	r3, [sp, #8]
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d03d      	beq.n	8012d90 <__kernel_rem_pio2+0x5c0>
 8012d14:	4602      	mov	r2, r0
 8012d16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012d1a:	9c01      	ldr	r4, [sp, #4]
 8012d1c:	e9c4 2300 	strd	r2, r3, [r4]
 8012d20:	4602      	mov	r2, r0
 8012d22:	460b      	mov	r3, r1
 8012d24:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8012d28:	f7ed fac6 	bl	80002b8 <__aeabi_dsub>
 8012d2c:	ae4c      	add	r6, sp, #304	; 0x130
 8012d2e:	2401      	movs	r4, #1
 8012d30:	42a5      	cmp	r5, r4
 8012d32:	da30      	bge.n	8012d96 <__kernel_rem_pio2+0x5c6>
 8012d34:	9b02      	ldr	r3, [sp, #8]
 8012d36:	b113      	cbz	r3, 8012d3e <__kernel_rem_pio2+0x56e>
 8012d38:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012d3c:	4619      	mov	r1, r3
 8012d3e:	9b01      	ldr	r3, [sp, #4]
 8012d40:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8012d44:	e00f      	b.n	8012d66 <__kernel_rem_pio2+0x596>
 8012d46:	ab9a      	add	r3, sp, #616	; 0x268
 8012d48:	441c      	add	r4, r3
 8012d4a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8012d4e:	2000      	movs	r0, #0
 8012d50:	2100      	movs	r1, #0
 8012d52:	2d00      	cmp	r5, #0
 8012d54:	da10      	bge.n	8012d78 <__kernel_rem_pio2+0x5a8>
 8012d56:	9b02      	ldr	r3, [sp, #8]
 8012d58:	b113      	cbz	r3, 8012d60 <__kernel_rem_pio2+0x590>
 8012d5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012d5e:	4619      	mov	r1, r3
 8012d60:	9b01      	ldr	r3, [sp, #4]
 8012d62:	e9c3 0100 	strd	r0, r1, [r3]
 8012d66:	9b06      	ldr	r3, [sp, #24]
 8012d68:	f003 0007 	and.w	r0, r3, #7
 8012d6c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8012d70:	ecbd 8b02 	vpop	{d8}
 8012d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d78:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012d7c:	f7ed fa9e 	bl	80002bc <__adddf3>
 8012d80:	3d01      	subs	r5, #1
 8012d82:	e7e6      	b.n	8012d52 <__kernel_rem_pio2+0x582>
 8012d84:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012d88:	f7ed fa98 	bl	80002bc <__adddf3>
 8012d8c:	3e01      	subs	r6, #1
 8012d8e:	e7bc      	b.n	8012d0a <__kernel_rem_pio2+0x53a>
 8012d90:	4602      	mov	r2, r0
 8012d92:	460b      	mov	r3, r1
 8012d94:	e7c1      	b.n	8012d1a <__kernel_rem_pio2+0x54a>
 8012d96:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8012d9a:	f7ed fa8f 	bl	80002bc <__adddf3>
 8012d9e:	3401      	adds	r4, #1
 8012da0:	e7c6      	b.n	8012d30 <__kernel_rem_pio2+0x560>
 8012da2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8012da6:	ed3a 7b02 	vldmdb	sl!, {d7}
 8012daa:	4640      	mov	r0, r8
 8012dac:	ec53 2b17 	vmov	r2, r3, d7
 8012db0:	4649      	mov	r1, r9
 8012db2:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012db6:	f7ed fa81 	bl	80002bc <__adddf3>
 8012dba:	4602      	mov	r2, r0
 8012dbc:	460b      	mov	r3, r1
 8012dbe:	4606      	mov	r6, r0
 8012dc0:	460f      	mov	r7, r1
 8012dc2:	4640      	mov	r0, r8
 8012dc4:	4649      	mov	r1, r9
 8012dc6:	f7ed fa77 	bl	80002b8 <__aeabi_dsub>
 8012dca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012dce:	f7ed fa75 	bl	80002bc <__adddf3>
 8012dd2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012dd6:	e9ca 0100 	strd	r0, r1, [sl]
 8012dda:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8012dde:	e770      	b.n	8012cc2 <__kernel_rem_pio2+0x4f2>
 8012de0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8012de4:	ed3a 7b02 	vldmdb	sl!, {d7}
 8012de8:	4630      	mov	r0, r6
 8012dea:	ec53 2b17 	vmov	r2, r3, d7
 8012dee:	4639      	mov	r1, r7
 8012df0:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012df4:	f7ed fa62 	bl	80002bc <__adddf3>
 8012df8:	4602      	mov	r2, r0
 8012dfa:	460b      	mov	r3, r1
 8012dfc:	4680      	mov	r8, r0
 8012dfe:	4689      	mov	r9, r1
 8012e00:	4630      	mov	r0, r6
 8012e02:	4639      	mov	r1, r7
 8012e04:	f7ed fa58 	bl	80002b8 <__aeabi_dsub>
 8012e08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012e0c:	f7ed fa56 	bl	80002bc <__adddf3>
 8012e10:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012e14:	e9ca 0100 	strd	r0, r1, [sl]
 8012e18:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8012e1c:	e756      	b.n	8012ccc <__kernel_rem_pio2+0x4fc>
 8012e1e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012e22:	f7ed fa4b 	bl	80002bc <__adddf3>
 8012e26:	3d01      	subs	r5, #1
 8012e28:	e756      	b.n	8012cd8 <__kernel_rem_pio2+0x508>
 8012e2a:	9b01      	ldr	r3, [sp, #4]
 8012e2c:	9a01      	ldr	r2, [sp, #4]
 8012e2e:	601f      	str	r7, [r3, #0]
 8012e30:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8012e34:	605c      	str	r4, [r3, #4]
 8012e36:	609d      	str	r5, [r3, #8]
 8012e38:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8012e3c:	60d3      	str	r3, [r2, #12]
 8012e3e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012e42:	6110      	str	r0, [r2, #16]
 8012e44:	6153      	str	r3, [r2, #20]
 8012e46:	e78e      	b.n	8012d66 <__kernel_rem_pio2+0x596>
 8012e48:	41700000 	.word	0x41700000
 8012e4c:	3e700000 	.word	0x3e700000

08012e50 <__kernel_sin>:
 8012e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e54:	ec55 4b10 	vmov	r4, r5, d0
 8012e58:	b085      	sub	sp, #20
 8012e5a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012e5e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8012e62:	ed8d 1b00 	vstr	d1, [sp]
 8012e66:	9002      	str	r0, [sp, #8]
 8012e68:	da06      	bge.n	8012e78 <__kernel_sin+0x28>
 8012e6a:	ee10 0a10 	vmov	r0, s0
 8012e6e:	4629      	mov	r1, r5
 8012e70:	f7ed fe8a 	bl	8000b88 <__aeabi_d2iz>
 8012e74:	2800      	cmp	r0, #0
 8012e76:	d051      	beq.n	8012f1c <__kernel_sin+0xcc>
 8012e78:	4622      	mov	r2, r4
 8012e7a:	462b      	mov	r3, r5
 8012e7c:	4620      	mov	r0, r4
 8012e7e:	4629      	mov	r1, r5
 8012e80:	f7ed fbd2 	bl	8000628 <__aeabi_dmul>
 8012e84:	4682      	mov	sl, r0
 8012e86:	468b      	mov	fp, r1
 8012e88:	4602      	mov	r2, r0
 8012e8a:	460b      	mov	r3, r1
 8012e8c:	4620      	mov	r0, r4
 8012e8e:	4629      	mov	r1, r5
 8012e90:	f7ed fbca 	bl	8000628 <__aeabi_dmul>
 8012e94:	a341      	add	r3, pc, #260	; (adr r3, 8012f9c <__kernel_sin+0x14c>)
 8012e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e9a:	4680      	mov	r8, r0
 8012e9c:	4689      	mov	r9, r1
 8012e9e:	4650      	mov	r0, sl
 8012ea0:	4659      	mov	r1, fp
 8012ea2:	f7ed fbc1 	bl	8000628 <__aeabi_dmul>
 8012ea6:	a33f      	add	r3, pc, #252	; (adr r3, 8012fa4 <__kernel_sin+0x154>)
 8012ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eac:	f7ed fa04 	bl	80002b8 <__aeabi_dsub>
 8012eb0:	4652      	mov	r2, sl
 8012eb2:	465b      	mov	r3, fp
 8012eb4:	f7ed fbb8 	bl	8000628 <__aeabi_dmul>
 8012eb8:	a33c      	add	r3, pc, #240	; (adr r3, 8012fac <__kernel_sin+0x15c>)
 8012eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ebe:	f7ed f9fd 	bl	80002bc <__adddf3>
 8012ec2:	4652      	mov	r2, sl
 8012ec4:	465b      	mov	r3, fp
 8012ec6:	f7ed fbaf 	bl	8000628 <__aeabi_dmul>
 8012eca:	a33a      	add	r3, pc, #232	; (adr r3, 8012fb4 <__kernel_sin+0x164>)
 8012ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ed0:	f7ed f9f2 	bl	80002b8 <__aeabi_dsub>
 8012ed4:	4652      	mov	r2, sl
 8012ed6:	465b      	mov	r3, fp
 8012ed8:	f7ed fba6 	bl	8000628 <__aeabi_dmul>
 8012edc:	a337      	add	r3, pc, #220	; (adr r3, 8012fbc <__kernel_sin+0x16c>)
 8012ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ee2:	f7ed f9eb 	bl	80002bc <__adddf3>
 8012ee6:	9b02      	ldr	r3, [sp, #8]
 8012ee8:	4606      	mov	r6, r0
 8012eea:	460f      	mov	r7, r1
 8012eec:	b9db      	cbnz	r3, 8012f26 <__kernel_sin+0xd6>
 8012eee:	4602      	mov	r2, r0
 8012ef0:	460b      	mov	r3, r1
 8012ef2:	4650      	mov	r0, sl
 8012ef4:	4659      	mov	r1, fp
 8012ef6:	f7ed fb97 	bl	8000628 <__aeabi_dmul>
 8012efa:	a325      	add	r3, pc, #148	; (adr r3, 8012f90 <__kernel_sin+0x140>)
 8012efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f00:	f7ed f9da 	bl	80002b8 <__aeabi_dsub>
 8012f04:	4642      	mov	r2, r8
 8012f06:	464b      	mov	r3, r9
 8012f08:	f7ed fb8e 	bl	8000628 <__aeabi_dmul>
 8012f0c:	4602      	mov	r2, r0
 8012f0e:	460b      	mov	r3, r1
 8012f10:	4620      	mov	r0, r4
 8012f12:	4629      	mov	r1, r5
 8012f14:	f7ed f9d2 	bl	80002bc <__adddf3>
 8012f18:	4604      	mov	r4, r0
 8012f1a:	460d      	mov	r5, r1
 8012f1c:	ec45 4b10 	vmov	d0, r4, r5
 8012f20:	b005      	add	sp, #20
 8012f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f26:	2200      	movs	r2, #0
 8012f28:	4b1b      	ldr	r3, [pc, #108]	; (8012f98 <__kernel_sin+0x148>)
 8012f2a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012f2e:	f7ed fb7b 	bl	8000628 <__aeabi_dmul>
 8012f32:	4632      	mov	r2, r6
 8012f34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012f38:	463b      	mov	r3, r7
 8012f3a:	4640      	mov	r0, r8
 8012f3c:	4649      	mov	r1, r9
 8012f3e:	f7ed fb73 	bl	8000628 <__aeabi_dmul>
 8012f42:	4602      	mov	r2, r0
 8012f44:	460b      	mov	r3, r1
 8012f46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012f4a:	f7ed f9b5 	bl	80002b8 <__aeabi_dsub>
 8012f4e:	4652      	mov	r2, sl
 8012f50:	465b      	mov	r3, fp
 8012f52:	f7ed fb69 	bl	8000628 <__aeabi_dmul>
 8012f56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012f5a:	f7ed f9ad 	bl	80002b8 <__aeabi_dsub>
 8012f5e:	a30c      	add	r3, pc, #48	; (adr r3, 8012f90 <__kernel_sin+0x140>)
 8012f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f64:	4606      	mov	r6, r0
 8012f66:	460f      	mov	r7, r1
 8012f68:	4640      	mov	r0, r8
 8012f6a:	4649      	mov	r1, r9
 8012f6c:	f7ed fb5c 	bl	8000628 <__aeabi_dmul>
 8012f70:	4602      	mov	r2, r0
 8012f72:	460b      	mov	r3, r1
 8012f74:	4630      	mov	r0, r6
 8012f76:	4639      	mov	r1, r7
 8012f78:	f7ed f9a0 	bl	80002bc <__adddf3>
 8012f7c:	4602      	mov	r2, r0
 8012f7e:	460b      	mov	r3, r1
 8012f80:	4620      	mov	r0, r4
 8012f82:	4629      	mov	r1, r5
 8012f84:	f7ed f998 	bl	80002b8 <__aeabi_dsub>
 8012f88:	e7c6      	b.n	8012f18 <__kernel_sin+0xc8>
 8012f8a:	bf00      	nop
 8012f8c:	f3af 8000 	nop.w
 8012f90:	55555549 	.word	0x55555549
 8012f94:	3fc55555 	.word	0x3fc55555
 8012f98:	3fe00000 	.word	0x3fe00000
 8012f9c:	5acfd57c 	.word	0x5acfd57c
 8012fa0:	3de5d93a 	.word	0x3de5d93a
 8012fa4:	8a2b9ceb 	.word	0x8a2b9ceb
 8012fa8:	3e5ae5e6 	.word	0x3e5ae5e6
 8012fac:	57b1fe7d 	.word	0x57b1fe7d
 8012fb0:	3ec71de3 	.word	0x3ec71de3
 8012fb4:	19c161d5 	.word	0x19c161d5
 8012fb8:	3f2a01a0 	.word	0x3f2a01a0
 8012fbc:	1110f8a6 	.word	0x1110f8a6
 8012fc0:	3f811111 	.word	0x3f811111

08012fc4 <fabs>:
 8012fc4:	ec51 0b10 	vmov	r0, r1, d0
 8012fc8:	ee10 2a10 	vmov	r2, s0
 8012fcc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012fd0:	ec43 2b10 	vmov	d0, r2, r3
 8012fd4:	4770      	bx	lr
	...

08012fd8 <floor>:
 8012fd8:	ec51 0b10 	vmov	r0, r1, d0
 8012fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fe0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8012fe4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8012fe8:	2e13      	cmp	r6, #19
 8012fea:	460c      	mov	r4, r1
 8012fec:	ee10 5a10 	vmov	r5, s0
 8012ff0:	4680      	mov	r8, r0
 8012ff2:	dc34      	bgt.n	801305e <floor+0x86>
 8012ff4:	2e00      	cmp	r6, #0
 8012ff6:	da16      	bge.n	8013026 <floor+0x4e>
 8012ff8:	a335      	add	r3, pc, #212	; (adr r3, 80130d0 <floor+0xf8>)
 8012ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ffe:	f7ed f95d 	bl	80002bc <__adddf3>
 8013002:	2200      	movs	r2, #0
 8013004:	2300      	movs	r3, #0
 8013006:	f7ed fd9f 	bl	8000b48 <__aeabi_dcmpgt>
 801300a:	b148      	cbz	r0, 8013020 <floor+0x48>
 801300c:	2c00      	cmp	r4, #0
 801300e:	da59      	bge.n	80130c4 <floor+0xec>
 8013010:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8013014:	4a30      	ldr	r2, [pc, #192]	; (80130d8 <floor+0x100>)
 8013016:	432b      	orrs	r3, r5
 8013018:	2500      	movs	r5, #0
 801301a:	42ab      	cmp	r3, r5
 801301c:	bf18      	it	ne
 801301e:	4614      	movne	r4, r2
 8013020:	4621      	mov	r1, r4
 8013022:	4628      	mov	r0, r5
 8013024:	e025      	b.n	8013072 <floor+0x9a>
 8013026:	4f2d      	ldr	r7, [pc, #180]	; (80130dc <floor+0x104>)
 8013028:	4137      	asrs	r7, r6
 801302a:	ea01 0307 	and.w	r3, r1, r7
 801302e:	4303      	orrs	r3, r0
 8013030:	d01f      	beq.n	8013072 <floor+0x9a>
 8013032:	a327      	add	r3, pc, #156	; (adr r3, 80130d0 <floor+0xf8>)
 8013034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013038:	f7ed f940 	bl	80002bc <__adddf3>
 801303c:	2200      	movs	r2, #0
 801303e:	2300      	movs	r3, #0
 8013040:	f7ed fd82 	bl	8000b48 <__aeabi_dcmpgt>
 8013044:	2800      	cmp	r0, #0
 8013046:	d0eb      	beq.n	8013020 <floor+0x48>
 8013048:	2c00      	cmp	r4, #0
 801304a:	bfbe      	ittt	lt
 801304c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8013050:	fa43 f606 	asrlt.w	r6, r3, r6
 8013054:	19a4      	addlt	r4, r4, r6
 8013056:	ea24 0407 	bic.w	r4, r4, r7
 801305a:	2500      	movs	r5, #0
 801305c:	e7e0      	b.n	8013020 <floor+0x48>
 801305e:	2e33      	cmp	r6, #51	; 0x33
 8013060:	dd0b      	ble.n	801307a <floor+0xa2>
 8013062:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8013066:	d104      	bne.n	8013072 <floor+0x9a>
 8013068:	ee10 2a10 	vmov	r2, s0
 801306c:	460b      	mov	r3, r1
 801306e:	f7ed f925 	bl	80002bc <__adddf3>
 8013072:	ec41 0b10 	vmov	d0, r0, r1
 8013076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801307a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801307e:	f04f 33ff 	mov.w	r3, #4294967295
 8013082:	fa23 f707 	lsr.w	r7, r3, r7
 8013086:	4207      	tst	r7, r0
 8013088:	d0f3      	beq.n	8013072 <floor+0x9a>
 801308a:	a311      	add	r3, pc, #68	; (adr r3, 80130d0 <floor+0xf8>)
 801308c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013090:	f7ed f914 	bl	80002bc <__adddf3>
 8013094:	2200      	movs	r2, #0
 8013096:	2300      	movs	r3, #0
 8013098:	f7ed fd56 	bl	8000b48 <__aeabi_dcmpgt>
 801309c:	2800      	cmp	r0, #0
 801309e:	d0bf      	beq.n	8013020 <floor+0x48>
 80130a0:	2c00      	cmp	r4, #0
 80130a2:	da02      	bge.n	80130aa <floor+0xd2>
 80130a4:	2e14      	cmp	r6, #20
 80130a6:	d103      	bne.n	80130b0 <floor+0xd8>
 80130a8:	3401      	adds	r4, #1
 80130aa:	ea25 0507 	bic.w	r5, r5, r7
 80130ae:	e7b7      	b.n	8013020 <floor+0x48>
 80130b0:	2301      	movs	r3, #1
 80130b2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80130b6:	fa03 f606 	lsl.w	r6, r3, r6
 80130ba:	4435      	add	r5, r6
 80130bc:	4545      	cmp	r5, r8
 80130be:	bf38      	it	cc
 80130c0:	18e4      	addcc	r4, r4, r3
 80130c2:	e7f2      	b.n	80130aa <floor+0xd2>
 80130c4:	2500      	movs	r5, #0
 80130c6:	462c      	mov	r4, r5
 80130c8:	e7aa      	b.n	8013020 <floor+0x48>
 80130ca:	bf00      	nop
 80130cc:	f3af 8000 	nop.w
 80130d0:	8800759c 	.word	0x8800759c
 80130d4:	7e37e43c 	.word	0x7e37e43c
 80130d8:	bff00000 	.word	0xbff00000
 80130dc:	000fffff 	.word	0x000fffff

080130e0 <scalbn>:
 80130e0:	b570      	push	{r4, r5, r6, lr}
 80130e2:	ec55 4b10 	vmov	r4, r5, d0
 80130e6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80130ea:	4606      	mov	r6, r0
 80130ec:	462b      	mov	r3, r5
 80130ee:	b9aa      	cbnz	r2, 801311c <scalbn+0x3c>
 80130f0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80130f4:	4323      	orrs	r3, r4
 80130f6:	d03b      	beq.n	8013170 <scalbn+0x90>
 80130f8:	4b31      	ldr	r3, [pc, #196]	; (80131c0 <scalbn+0xe0>)
 80130fa:	4629      	mov	r1, r5
 80130fc:	2200      	movs	r2, #0
 80130fe:	ee10 0a10 	vmov	r0, s0
 8013102:	f7ed fa91 	bl	8000628 <__aeabi_dmul>
 8013106:	4b2f      	ldr	r3, [pc, #188]	; (80131c4 <scalbn+0xe4>)
 8013108:	429e      	cmp	r6, r3
 801310a:	4604      	mov	r4, r0
 801310c:	460d      	mov	r5, r1
 801310e:	da12      	bge.n	8013136 <scalbn+0x56>
 8013110:	a327      	add	r3, pc, #156	; (adr r3, 80131b0 <scalbn+0xd0>)
 8013112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013116:	f7ed fa87 	bl	8000628 <__aeabi_dmul>
 801311a:	e009      	b.n	8013130 <scalbn+0x50>
 801311c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8013120:	428a      	cmp	r2, r1
 8013122:	d10c      	bne.n	801313e <scalbn+0x5e>
 8013124:	ee10 2a10 	vmov	r2, s0
 8013128:	4620      	mov	r0, r4
 801312a:	4629      	mov	r1, r5
 801312c:	f7ed f8c6 	bl	80002bc <__adddf3>
 8013130:	4604      	mov	r4, r0
 8013132:	460d      	mov	r5, r1
 8013134:	e01c      	b.n	8013170 <scalbn+0x90>
 8013136:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801313a:	460b      	mov	r3, r1
 801313c:	3a36      	subs	r2, #54	; 0x36
 801313e:	4432      	add	r2, r6
 8013140:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8013144:	428a      	cmp	r2, r1
 8013146:	dd0b      	ble.n	8013160 <scalbn+0x80>
 8013148:	ec45 4b11 	vmov	d1, r4, r5
 801314c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80131b8 <scalbn+0xd8>
 8013150:	f000 f83c 	bl	80131cc <copysign>
 8013154:	a318      	add	r3, pc, #96	; (adr r3, 80131b8 <scalbn+0xd8>)
 8013156:	e9d3 2300 	ldrd	r2, r3, [r3]
 801315a:	ec51 0b10 	vmov	r0, r1, d0
 801315e:	e7da      	b.n	8013116 <scalbn+0x36>
 8013160:	2a00      	cmp	r2, #0
 8013162:	dd08      	ble.n	8013176 <scalbn+0x96>
 8013164:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013168:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801316c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013170:	ec45 4b10 	vmov	d0, r4, r5
 8013174:	bd70      	pop	{r4, r5, r6, pc}
 8013176:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801317a:	da0d      	bge.n	8013198 <scalbn+0xb8>
 801317c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013180:	429e      	cmp	r6, r3
 8013182:	ec45 4b11 	vmov	d1, r4, r5
 8013186:	dce1      	bgt.n	801314c <scalbn+0x6c>
 8013188:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80131b0 <scalbn+0xd0>
 801318c:	f000 f81e 	bl	80131cc <copysign>
 8013190:	a307      	add	r3, pc, #28	; (adr r3, 80131b0 <scalbn+0xd0>)
 8013192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013196:	e7e0      	b.n	801315a <scalbn+0x7a>
 8013198:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801319c:	3236      	adds	r2, #54	; 0x36
 801319e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80131a2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80131a6:	4620      	mov	r0, r4
 80131a8:	4629      	mov	r1, r5
 80131aa:	2200      	movs	r2, #0
 80131ac:	4b06      	ldr	r3, [pc, #24]	; (80131c8 <scalbn+0xe8>)
 80131ae:	e7b2      	b.n	8013116 <scalbn+0x36>
 80131b0:	c2f8f359 	.word	0xc2f8f359
 80131b4:	01a56e1f 	.word	0x01a56e1f
 80131b8:	8800759c 	.word	0x8800759c
 80131bc:	7e37e43c 	.word	0x7e37e43c
 80131c0:	43500000 	.word	0x43500000
 80131c4:	ffff3cb0 	.word	0xffff3cb0
 80131c8:	3c900000 	.word	0x3c900000

080131cc <copysign>:
 80131cc:	ec51 0b10 	vmov	r0, r1, d0
 80131d0:	ee11 0a90 	vmov	r0, s3
 80131d4:	ee10 2a10 	vmov	r2, s0
 80131d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80131dc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80131e0:	ea41 0300 	orr.w	r3, r1, r0
 80131e4:	ec43 2b10 	vmov	d0, r2, r3
 80131e8:	4770      	bx	lr
	...

080131ec <__errno>:
 80131ec:	4b01      	ldr	r3, [pc, #4]	; (80131f4 <__errno+0x8>)
 80131ee:	6818      	ldr	r0, [r3, #0]
 80131f0:	4770      	bx	lr
 80131f2:	bf00      	nop
 80131f4:	2000000c 	.word	0x2000000c

080131f8 <__libc_init_array>:
 80131f8:	b570      	push	{r4, r5, r6, lr}
 80131fa:	4e0d      	ldr	r6, [pc, #52]	; (8013230 <__libc_init_array+0x38>)
 80131fc:	4c0d      	ldr	r4, [pc, #52]	; (8013234 <__libc_init_array+0x3c>)
 80131fe:	1ba4      	subs	r4, r4, r6
 8013200:	10a4      	asrs	r4, r4, #2
 8013202:	2500      	movs	r5, #0
 8013204:	42a5      	cmp	r5, r4
 8013206:	d109      	bne.n	801321c <__libc_init_array+0x24>
 8013208:	4e0b      	ldr	r6, [pc, #44]	; (8013238 <__libc_init_array+0x40>)
 801320a:	4c0c      	ldr	r4, [pc, #48]	; (801323c <__libc_init_array+0x44>)
 801320c:	f004 ff38 	bl	8018080 <_init>
 8013210:	1ba4      	subs	r4, r4, r6
 8013212:	10a4      	asrs	r4, r4, #2
 8013214:	2500      	movs	r5, #0
 8013216:	42a5      	cmp	r5, r4
 8013218:	d105      	bne.n	8013226 <__libc_init_array+0x2e>
 801321a:	bd70      	pop	{r4, r5, r6, pc}
 801321c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013220:	4798      	blx	r3
 8013222:	3501      	adds	r5, #1
 8013224:	e7ee      	b.n	8013204 <__libc_init_array+0xc>
 8013226:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801322a:	4798      	blx	r3
 801322c:	3501      	adds	r5, #1
 801322e:	e7f2      	b.n	8013216 <__libc_init_array+0x1e>
 8013230:	08018bac 	.word	0x08018bac
 8013234:	08018bac 	.word	0x08018bac
 8013238:	08018bac 	.word	0x08018bac
 801323c:	08018bb4 	.word	0x08018bb4

08013240 <memcpy>:
 8013240:	b510      	push	{r4, lr}
 8013242:	1e43      	subs	r3, r0, #1
 8013244:	440a      	add	r2, r1
 8013246:	4291      	cmp	r1, r2
 8013248:	d100      	bne.n	801324c <memcpy+0xc>
 801324a:	bd10      	pop	{r4, pc}
 801324c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013250:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013254:	e7f7      	b.n	8013246 <memcpy+0x6>

08013256 <memset>:
 8013256:	4402      	add	r2, r0
 8013258:	4603      	mov	r3, r0
 801325a:	4293      	cmp	r3, r2
 801325c:	d100      	bne.n	8013260 <memset+0xa>
 801325e:	4770      	bx	lr
 8013260:	f803 1b01 	strb.w	r1, [r3], #1
 8013264:	e7f9      	b.n	801325a <memset+0x4>

08013266 <__cvt>:
 8013266:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801326a:	ec55 4b10 	vmov	r4, r5, d0
 801326e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8013270:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8013274:	2d00      	cmp	r5, #0
 8013276:	460e      	mov	r6, r1
 8013278:	4691      	mov	r9, r2
 801327a:	4619      	mov	r1, r3
 801327c:	bfb8      	it	lt
 801327e:	4622      	movlt	r2, r4
 8013280:	462b      	mov	r3, r5
 8013282:	f027 0720 	bic.w	r7, r7, #32
 8013286:	bfbb      	ittet	lt
 8013288:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801328c:	461d      	movlt	r5, r3
 801328e:	2300      	movge	r3, #0
 8013290:	232d      	movlt	r3, #45	; 0x2d
 8013292:	bfb8      	it	lt
 8013294:	4614      	movlt	r4, r2
 8013296:	2f46      	cmp	r7, #70	; 0x46
 8013298:	700b      	strb	r3, [r1, #0]
 801329a:	d004      	beq.n	80132a6 <__cvt+0x40>
 801329c:	2f45      	cmp	r7, #69	; 0x45
 801329e:	d100      	bne.n	80132a2 <__cvt+0x3c>
 80132a0:	3601      	adds	r6, #1
 80132a2:	2102      	movs	r1, #2
 80132a4:	e000      	b.n	80132a8 <__cvt+0x42>
 80132a6:	2103      	movs	r1, #3
 80132a8:	ab03      	add	r3, sp, #12
 80132aa:	9301      	str	r3, [sp, #4]
 80132ac:	ab02      	add	r3, sp, #8
 80132ae:	9300      	str	r3, [sp, #0]
 80132b0:	4632      	mov	r2, r6
 80132b2:	4653      	mov	r3, sl
 80132b4:	ec45 4b10 	vmov	d0, r4, r5
 80132b8:	f001 ffb2 	bl	8015220 <_dtoa_r>
 80132bc:	2f47      	cmp	r7, #71	; 0x47
 80132be:	4680      	mov	r8, r0
 80132c0:	d102      	bne.n	80132c8 <__cvt+0x62>
 80132c2:	f019 0f01 	tst.w	r9, #1
 80132c6:	d026      	beq.n	8013316 <__cvt+0xb0>
 80132c8:	2f46      	cmp	r7, #70	; 0x46
 80132ca:	eb08 0906 	add.w	r9, r8, r6
 80132ce:	d111      	bne.n	80132f4 <__cvt+0x8e>
 80132d0:	f898 3000 	ldrb.w	r3, [r8]
 80132d4:	2b30      	cmp	r3, #48	; 0x30
 80132d6:	d10a      	bne.n	80132ee <__cvt+0x88>
 80132d8:	2200      	movs	r2, #0
 80132da:	2300      	movs	r3, #0
 80132dc:	4620      	mov	r0, r4
 80132de:	4629      	mov	r1, r5
 80132e0:	f7ed fc0a 	bl	8000af8 <__aeabi_dcmpeq>
 80132e4:	b918      	cbnz	r0, 80132ee <__cvt+0x88>
 80132e6:	f1c6 0601 	rsb	r6, r6, #1
 80132ea:	f8ca 6000 	str.w	r6, [sl]
 80132ee:	f8da 3000 	ldr.w	r3, [sl]
 80132f2:	4499      	add	r9, r3
 80132f4:	2200      	movs	r2, #0
 80132f6:	2300      	movs	r3, #0
 80132f8:	4620      	mov	r0, r4
 80132fa:	4629      	mov	r1, r5
 80132fc:	f7ed fbfc 	bl	8000af8 <__aeabi_dcmpeq>
 8013300:	b938      	cbnz	r0, 8013312 <__cvt+0xac>
 8013302:	2230      	movs	r2, #48	; 0x30
 8013304:	9b03      	ldr	r3, [sp, #12]
 8013306:	454b      	cmp	r3, r9
 8013308:	d205      	bcs.n	8013316 <__cvt+0xb0>
 801330a:	1c59      	adds	r1, r3, #1
 801330c:	9103      	str	r1, [sp, #12]
 801330e:	701a      	strb	r2, [r3, #0]
 8013310:	e7f8      	b.n	8013304 <__cvt+0x9e>
 8013312:	f8cd 900c 	str.w	r9, [sp, #12]
 8013316:	9b03      	ldr	r3, [sp, #12]
 8013318:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801331a:	eba3 0308 	sub.w	r3, r3, r8
 801331e:	4640      	mov	r0, r8
 8013320:	6013      	str	r3, [r2, #0]
 8013322:	b004      	add	sp, #16
 8013324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08013328 <__exponent>:
 8013328:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801332a:	2900      	cmp	r1, #0
 801332c:	4604      	mov	r4, r0
 801332e:	bfba      	itte	lt
 8013330:	4249      	neglt	r1, r1
 8013332:	232d      	movlt	r3, #45	; 0x2d
 8013334:	232b      	movge	r3, #43	; 0x2b
 8013336:	2909      	cmp	r1, #9
 8013338:	f804 2b02 	strb.w	r2, [r4], #2
 801333c:	7043      	strb	r3, [r0, #1]
 801333e:	dd20      	ble.n	8013382 <__exponent+0x5a>
 8013340:	f10d 0307 	add.w	r3, sp, #7
 8013344:	461f      	mov	r7, r3
 8013346:	260a      	movs	r6, #10
 8013348:	fb91 f5f6 	sdiv	r5, r1, r6
 801334c:	fb06 1115 	mls	r1, r6, r5, r1
 8013350:	3130      	adds	r1, #48	; 0x30
 8013352:	2d09      	cmp	r5, #9
 8013354:	f803 1c01 	strb.w	r1, [r3, #-1]
 8013358:	f103 32ff 	add.w	r2, r3, #4294967295
 801335c:	4629      	mov	r1, r5
 801335e:	dc09      	bgt.n	8013374 <__exponent+0x4c>
 8013360:	3130      	adds	r1, #48	; 0x30
 8013362:	3b02      	subs	r3, #2
 8013364:	f802 1c01 	strb.w	r1, [r2, #-1]
 8013368:	42bb      	cmp	r3, r7
 801336a:	4622      	mov	r2, r4
 801336c:	d304      	bcc.n	8013378 <__exponent+0x50>
 801336e:	1a10      	subs	r0, r2, r0
 8013370:	b003      	add	sp, #12
 8013372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013374:	4613      	mov	r3, r2
 8013376:	e7e7      	b.n	8013348 <__exponent+0x20>
 8013378:	f813 2b01 	ldrb.w	r2, [r3], #1
 801337c:	f804 2b01 	strb.w	r2, [r4], #1
 8013380:	e7f2      	b.n	8013368 <__exponent+0x40>
 8013382:	2330      	movs	r3, #48	; 0x30
 8013384:	4419      	add	r1, r3
 8013386:	7083      	strb	r3, [r0, #2]
 8013388:	1d02      	adds	r2, r0, #4
 801338a:	70c1      	strb	r1, [r0, #3]
 801338c:	e7ef      	b.n	801336e <__exponent+0x46>
	...

08013390 <_printf_float>:
 8013390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013394:	b08d      	sub	sp, #52	; 0x34
 8013396:	460c      	mov	r4, r1
 8013398:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801339c:	4616      	mov	r6, r2
 801339e:	461f      	mov	r7, r3
 80133a0:	4605      	mov	r5, r0
 80133a2:	f003 f9a9 	bl	80166f8 <_localeconv_r>
 80133a6:	6803      	ldr	r3, [r0, #0]
 80133a8:	9304      	str	r3, [sp, #16]
 80133aa:	4618      	mov	r0, r3
 80133ac:	f7ec ff28 	bl	8000200 <strlen>
 80133b0:	2300      	movs	r3, #0
 80133b2:	930a      	str	r3, [sp, #40]	; 0x28
 80133b4:	f8d8 3000 	ldr.w	r3, [r8]
 80133b8:	9005      	str	r0, [sp, #20]
 80133ba:	3307      	adds	r3, #7
 80133bc:	f023 0307 	bic.w	r3, r3, #7
 80133c0:	f103 0208 	add.w	r2, r3, #8
 80133c4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80133c8:	f8d4 b000 	ldr.w	fp, [r4]
 80133cc:	f8c8 2000 	str.w	r2, [r8]
 80133d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133d4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80133d8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80133dc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80133e0:	9307      	str	r3, [sp, #28]
 80133e2:	f8cd 8018 	str.w	r8, [sp, #24]
 80133e6:	f04f 32ff 	mov.w	r2, #4294967295
 80133ea:	4ba7      	ldr	r3, [pc, #668]	; (8013688 <_printf_float+0x2f8>)
 80133ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80133f0:	f7ed fbb4 	bl	8000b5c <__aeabi_dcmpun>
 80133f4:	bb70      	cbnz	r0, 8013454 <_printf_float+0xc4>
 80133f6:	f04f 32ff 	mov.w	r2, #4294967295
 80133fa:	4ba3      	ldr	r3, [pc, #652]	; (8013688 <_printf_float+0x2f8>)
 80133fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013400:	f7ed fb8e 	bl	8000b20 <__aeabi_dcmple>
 8013404:	bb30      	cbnz	r0, 8013454 <_printf_float+0xc4>
 8013406:	2200      	movs	r2, #0
 8013408:	2300      	movs	r3, #0
 801340a:	4640      	mov	r0, r8
 801340c:	4649      	mov	r1, r9
 801340e:	f7ed fb7d 	bl	8000b0c <__aeabi_dcmplt>
 8013412:	b110      	cbz	r0, 801341a <_printf_float+0x8a>
 8013414:	232d      	movs	r3, #45	; 0x2d
 8013416:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801341a:	4a9c      	ldr	r2, [pc, #624]	; (801368c <_printf_float+0x2fc>)
 801341c:	4b9c      	ldr	r3, [pc, #624]	; (8013690 <_printf_float+0x300>)
 801341e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8013422:	bf8c      	ite	hi
 8013424:	4690      	movhi	r8, r2
 8013426:	4698      	movls	r8, r3
 8013428:	2303      	movs	r3, #3
 801342a:	f02b 0204 	bic.w	r2, fp, #4
 801342e:	6123      	str	r3, [r4, #16]
 8013430:	6022      	str	r2, [r4, #0]
 8013432:	f04f 0900 	mov.w	r9, #0
 8013436:	9700      	str	r7, [sp, #0]
 8013438:	4633      	mov	r3, r6
 801343a:	aa0b      	add	r2, sp, #44	; 0x2c
 801343c:	4621      	mov	r1, r4
 801343e:	4628      	mov	r0, r5
 8013440:	f000 f9e6 	bl	8013810 <_printf_common>
 8013444:	3001      	adds	r0, #1
 8013446:	f040 808d 	bne.w	8013564 <_printf_float+0x1d4>
 801344a:	f04f 30ff 	mov.w	r0, #4294967295
 801344e:	b00d      	add	sp, #52	; 0x34
 8013450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013454:	4642      	mov	r2, r8
 8013456:	464b      	mov	r3, r9
 8013458:	4640      	mov	r0, r8
 801345a:	4649      	mov	r1, r9
 801345c:	f7ed fb7e 	bl	8000b5c <__aeabi_dcmpun>
 8013460:	b110      	cbz	r0, 8013468 <_printf_float+0xd8>
 8013462:	4a8c      	ldr	r2, [pc, #560]	; (8013694 <_printf_float+0x304>)
 8013464:	4b8c      	ldr	r3, [pc, #560]	; (8013698 <_printf_float+0x308>)
 8013466:	e7da      	b.n	801341e <_printf_float+0x8e>
 8013468:	6861      	ldr	r1, [r4, #4]
 801346a:	1c4b      	adds	r3, r1, #1
 801346c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8013470:	a80a      	add	r0, sp, #40	; 0x28
 8013472:	d13e      	bne.n	80134f2 <_printf_float+0x162>
 8013474:	2306      	movs	r3, #6
 8013476:	6063      	str	r3, [r4, #4]
 8013478:	2300      	movs	r3, #0
 801347a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801347e:	ab09      	add	r3, sp, #36	; 0x24
 8013480:	9300      	str	r3, [sp, #0]
 8013482:	ec49 8b10 	vmov	d0, r8, r9
 8013486:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801348a:	6022      	str	r2, [r4, #0]
 801348c:	f8cd a004 	str.w	sl, [sp, #4]
 8013490:	6861      	ldr	r1, [r4, #4]
 8013492:	4628      	mov	r0, r5
 8013494:	f7ff fee7 	bl	8013266 <__cvt>
 8013498:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 801349c:	2b47      	cmp	r3, #71	; 0x47
 801349e:	4680      	mov	r8, r0
 80134a0:	d109      	bne.n	80134b6 <_printf_float+0x126>
 80134a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80134a4:	1cd8      	adds	r0, r3, #3
 80134a6:	db02      	blt.n	80134ae <_printf_float+0x11e>
 80134a8:	6862      	ldr	r2, [r4, #4]
 80134aa:	4293      	cmp	r3, r2
 80134ac:	dd47      	ble.n	801353e <_printf_float+0x1ae>
 80134ae:	f1aa 0a02 	sub.w	sl, sl, #2
 80134b2:	fa5f fa8a 	uxtb.w	sl, sl
 80134b6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80134ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80134bc:	d824      	bhi.n	8013508 <_printf_float+0x178>
 80134be:	3901      	subs	r1, #1
 80134c0:	4652      	mov	r2, sl
 80134c2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80134c6:	9109      	str	r1, [sp, #36]	; 0x24
 80134c8:	f7ff ff2e 	bl	8013328 <__exponent>
 80134cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80134ce:	1813      	adds	r3, r2, r0
 80134d0:	2a01      	cmp	r2, #1
 80134d2:	4681      	mov	r9, r0
 80134d4:	6123      	str	r3, [r4, #16]
 80134d6:	dc02      	bgt.n	80134de <_printf_float+0x14e>
 80134d8:	6822      	ldr	r2, [r4, #0]
 80134da:	07d1      	lsls	r1, r2, #31
 80134dc:	d501      	bpl.n	80134e2 <_printf_float+0x152>
 80134de:	3301      	adds	r3, #1
 80134e0:	6123      	str	r3, [r4, #16]
 80134e2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d0a5      	beq.n	8013436 <_printf_float+0xa6>
 80134ea:	232d      	movs	r3, #45	; 0x2d
 80134ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80134f0:	e7a1      	b.n	8013436 <_printf_float+0xa6>
 80134f2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80134f6:	f000 8177 	beq.w	80137e8 <_printf_float+0x458>
 80134fa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80134fe:	d1bb      	bne.n	8013478 <_printf_float+0xe8>
 8013500:	2900      	cmp	r1, #0
 8013502:	d1b9      	bne.n	8013478 <_printf_float+0xe8>
 8013504:	2301      	movs	r3, #1
 8013506:	e7b6      	b.n	8013476 <_printf_float+0xe6>
 8013508:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 801350c:	d119      	bne.n	8013542 <_printf_float+0x1b2>
 801350e:	2900      	cmp	r1, #0
 8013510:	6863      	ldr	r3, [r4, #4]
 8013512:	dd0c      	ble.n	801352e <_printf_float+0x19e>
 8013514:	6121      	str	r1, [r4, #16]
 8013516:	b913      	cbnz	r3, 801351e <_printf_float+0x18e>
 8013518:	6822      	ldr	r2, [r4, #0]
 801351a:	07d2      	lsls	r2, r2, #31
 801351c:	d502      	bpl.n	8013524 <_printf_float+0x194>
 801351e:	3301      	adds	r3, #1
 8013520:	440b      	add	r3, r1
 8013522:	6123      	str	r3, [r4, #16]
 8013524:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013526:	65a3      	str	r3, [r4, #88]	; 0x58
 8013528:	f04f 0900 	mov.w	r9, #0
 801352c:	e7d9      	b.n	80134e2 <_printf_float+0x152>
 801352e:	b913      	cbnz	r3, 8013536 <_printf_float+0x1a6>
 8013530:	6822      	ldr	r2, [r4, #0]
 8013532:	07d0      	lsls	r0, r2, #31
 8013534:	d501      	bpl.n	801353a <_printf_float+0x1aa>
 8013536:	3302      	adds	r3, #2
 8013538:	e7f3      	b.n	8013522 <_printf_float+0x192>
 801353a:	2301      	movs	r3, #1
 801353c:	e7f1      	b.n	8013522 <_printf_float+0x192>
 801353e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8013542:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8013546:	4293      	cmp	r3, r2
 8013548:	db05      	blt.n	8013556 <_printf_float+0x1c6>
 801354a:	6822      	ldr	r2, [r4, #0]
 801354c:	6123      	str	r3, [r4, #16]
 801354e:	07d1      	lsls	r1, r2, #31
 8013550:	d5e8      	bpl.n	8013524 <_printf_float+0x194>
 8013552:	3301      	adds	r3, #1
 8013554:	e7e5      	b.n	8013522 <_printf_float+0x192>
 8013556:	2b00      	cmp	r3, #0
 8013558:	bfd4      	ite	le
 801355a:	f1c3 0302 	rsble	r3, r3, #2
 801355e:	2301      	movgt	r3, #1
 8013560:	4413      	add	r3, r2
 8013562:	e7de      	b.n	8013522 <_printf_float+0x192>
 8013564:	6823      	ldr	r3, [r4, #0]
 8013566:	055a      	lsls	r2, r3, #21
 8013568:	d407      	bmi.n	801357a <_printf_float+0x1ea>
 801356a:	6923      	ldr	r3, [r4, #16]
 801356c:	4642      	mov	r2, r8
 801356e:	4631      	mov	r1, r6
 8013570:	4628      	mov	r0, r5
 8013572:	47b8      	blx	r7
 8013574:	3001      	adds	r0, #1
 8013576:	d12b      	bne.n	80135d0 <_printf_float+0x240>
 8013578:	e767      	b.n	801344a <_printf_float+0xba>
 801357a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801357e:	f240 80dc 	bls.w	801373a <_printf_float+0x3aa>
 8013582:	2200      	movs	r2, #0
 8013584:	2300      	movs	r3, #0
 8013586:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801358a:	f7ed fab5 	bl	8000af8 <__aeabi_dcmpeq>
 801358e:	2800      	cmp	r0, #0
 8013590:	d033      	beq.n	80135fa <_printf_float+0x26a>
 8013592:	2301      	movs	r3, #1
 8013594:	4a41      	ldr	r2, [pc, #260]	; (801369c <_printf_float+0x30c>)
 8013596:	4631      	mov	r1, r6
 8013598:	4628      	mov	r0, r5
 801359a:	47b8      	blx	r7
 801359c:	3001      	adds	r0, #1
 801359e:	f43f af54 	beq.w	801344a <_printf_float+0xba>
 80135a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80135a6:	429a      	cmp	r2, r3
 80135a8:	db02      	blt.n	80135b0 <_printf_float+0x220>
 80135aa:	6823      	ldr	r3, [r4, #0]
 80135ac:	07d8      	lsls	r0, r3, #31
 80135ae:	d50f      	bpl.n	80135d0 <_printf_float+0x240>
 80135b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80135b4:	4631      	mov	r1, r6
 80135b6:	4628      	mov	r0, r5
 80135b8:	47b8      	blx	r7
 80135ba:	3001      	adds	r0, #1
 80135bc:	f43f af45 	beq.w	801344a <_printf_float+0xba>
 80135c0:	f04f 0800 	mov.w	r8, #0
 80135c4:	f104 091a 	add.w	r9, r4, #26
 80135c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80135ca:	3b01      	subs	r3, #1
 80135cc:	4543      	cmp	r3, r8
 80135ce:	dc09      	bgt.n	80135e4 <_printf_float+0x254>
 80135d0:	6823      	ldr	r3, [r4, #0]
 80135d2:	079b      	lsls	r3, r3, #30
 80135d4:	f100 8103 	bmi.w	80137de <_printf_float+0x44e>
 80135d8:	68e0      	ldr	r0, [r4, #12]
 80135da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80135dc:	4298      	cmp	r0, r3
 80135de:	bfb8      	it	lt
 80135e0:	4618      	movlt	r0, r3
 80135e2:	e734      	b.n	801344e <_printf_float+0xbe>
 80135e4:	2301      	movs	r3, #1
 80135e6:	464a      	mov	r2, r9
 80135e8:	4631      	mov	r1, r6
 80135ea:	4628      	mov	r0, r5
 80135ec:	47b8      	blx	r7
 80135ee:	3001      	adds	r0, #1
 80135f0:	f43f af2b 	beq.w	801344a <_printf_float+0xba>
 80135f4:	f108 0801 	add.w	r8, r8, #1
 80135f8:	e7e6      	b.n	80135c8 <_printf_float+0x238>
 80135fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	dc2b      	bgt.n	8013658 <_printf_float+0x2c8>
 8013600:	2301      	movs	r3, #1
 8013602:	4a26      	ldr	r2, [pc, #152]	; (801369c <_printf_float+0x30c>)
 8013604:	4631      	mov	r1, r6
 8013606:	4628      	mov	r0, r5
 8013608:	47b8      	blx	r7
 801360a:	3001      	adds	r0, #1
 801360c:	f43f af1d 	beq.w	801344a <_printf_float+0xba>
 8013610:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013612:	b923      	cbnz	r3, 801361e <_printf_float+0x28e>
 8013614:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013616:	b913      	cbnz	r3, 801361e <_printf_float+0x28e>
 8013618:	6823      	ldr	r3, [r4, #0]
 801361a:	07d9      	lsls	r1, r3, #31
 801361c:	d5d8      	bpl.n	80135d0 <_printf_float+0x240>
 801361e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013622:	4631      	mov	r1, r6
 8013624:	4628      	mov	r0, r5
 8013626:	47b8      	blx	r7
 8013628:	3001      	adds	r0, #1
 801362a:	f43f af0e 	beq.w	801344a <_printf_float+0xba>
 801362e:	f04f 0900 	mov.w	r9, #0
 8013632:	f104 0a1a 	add.w	sl, r4, #26
 8013636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013638:	425b      	negs	r3, r3
 801363a:	454b      	cmp	r3, r9
 801363c:	dc01      	bgt.n	8013642 <_printf_float+0x2b2>
 801363e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013640:	e794      	b.n	801356c <_printf_float+0x1dc>
 8013642:	2301      	movs	r3, #1
 8013644:	4652      	mov	r2, sl
 8013646:	4631      	mov	r1, r6
 8013648:	4628      	mov	r0, r5
 801364a:	47b8      	blx	r7
 801364c:	3001      	adds	r0, #1
 801364e:	f43f aefc 	beq.w	801344a <_printf_float+0xba>
 8013652:	f109 0901 	add.w	r9, r9, #1
 8013656:	e7ee      	b.n	8013636 <_printf_float+0x2a6>
 8013658:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801365a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801365c:	429a      	cmp	r2, r3
 801365e:	bfa8      	it	ge
 8013660:	461a      	movge	r2, r3
 8013662:	2a00      	cmp	r2, #0
 8013664:	4691      	mov	r9, r2
 8013666:	dd07      	ble.n	8013678 <_printf_float+0x2e8>
 8013668:	4613      	mov	r3, r2
 801366a:	4631      	mov	r1, r6
 801366c:	4642      	mov	r2, r8
 801366e:	4628      	mov	r0, r5
 8013670:	47b8      	blx	r7
 8013672:	3001      	adds	r0, #1
 8013674:	f43f aee9 	beq.w	801344a <_printf_float+0xba>
 8013678:	f104 031a 	add.w	r3, r4, #26
 801367c:	f04f 0b00 	mov.w	fp, #0
 8013680:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013684:	9306      	str	r3, [sp, #24]
 8013686:	e015      	b.n	80136b4 <_printf_float+0x324>
 8013688:	7fefffff 	.word	0x7fefffff
 801368c:	08018870 	.word	0x08018870
 8013690:	0801886c 	.word	0x0801886c
 8013694:	08018878 	.word	0x08018878
 8013698:	08018874 	.word	0x08018874
 801369c:	08018a9b 	.word	0x08018a9b
 80136a0:	2301      	movs	r3, #1
 80136a2:	9a06      	ldr	r2, [sp, #24]
 80136a4:	4631      	mov	r1, r6
 80136a6:	4628      	mov	r0, r5
 80136a8:	47b8      	blx	r7
 80136aa:	3001      	adds	r0, #1
 80136ac:	f43f aecd 	beq.w	801344a <_printf_float+0xba>
 80136b0:	f10b 0b01 	add.w	fp, fp, #1
 80136b4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80136b8:	ebaa 0309 	sub.w	r3, sl, r9
 80136bc:	455b      	cmp	r3, fp
 80136be:	dcef      	bgt.n	80136a0 <_printf_float+0x310>
 80136c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80136c4:	429a      	cmp	r2, r3
 80136c6:	44d0      	add	r8, sl
 80136c8:	db15      	blt.n	80136f6 <_printf_float+0x366>
 80136ca:	6823      	ldr	r3, [r4, #0]
 80136cc:	07da      	lsls	r2, r3, #31
 80136ce:	d412      	bmi.n	80136f6 <_printf_float+0x366>
 80136d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80136d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80136d4:	eba3 020a 	sub.w	r2, r3, sl
 80136d8:	eba3 0a01 	sub.w	sl, r3, r1
 80136dc:	4592      	cmp	sl, r2
 80136de:	bfa8      	it	ge
 80136e0:	4692      	movge	sl, r2
 80136e2:	f1ba 0f00 	cmp.w	sl, #0
 80136e6:	dc0e      	bgt.n	8013706 <_printf_float+0x376>
 80136e8:	f04f 0800 	mov.w	r8, #0
 80136ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80136f0:	f104 091a 	add.w	r9, r4, #26
 80136f4:	e019      	b.n	801372a <_printf_float+0x39a>
 80136f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80136fa:	4631      	mov	r1, r6
 80136fc:	4628      	mov	r0, r5
 80136fe:	47b8      	blx	r7
 8013700:	3001      	adds	r0, #1
 8013702:	d1e5      	bne.n	80136d0 <_printf_float+0x340>
 8013704:	e6a1      	b.n	801344a <_printf_float+0xba>
 8013706:	4653      	mov	r3, sl
 8013708:	4642      	mov	r2, r8
 801370a:	4631      	mov	r1, r6
 801370c:	4628      	mov	r0, r5
 801370e:	47b8      	blx	r7
 8013710:	3001      	adds	r0, #1
 8013712:	d1e9      	bne.n	80136e8 <_printf_float+0x358>
 8013714:	e699      	b.n	801344a <_printf_float+0xba>
 8013716:	2301      	movs	r3, #1
 8013718:	464a      	mov	r2, r9
 801371a:	4631      	mov	r1, r6
 801371c:	4628      	mov	r0, r5
 801371e:	47b8      	blx	r7
 8013720:	3001      	adds	r0, #1
 8013722:	f43f ae92 	beq.w	801344a <_printf_float+0xba>
 8013726:	f108 0801 	add.w	r8, r8, #1
 801372a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801372e:	1a9b      	subs	r3, r3, r2
 8013730:	eba3 030a 	sub.w	r3, r3, sl
 8013734:	4543      	cmp	r3, r8
 8013736:	dcee      	bgt.n	8013716 <_printf_float+0x386>
 8013738:	e74a      	b.n	80135d0 <_printf_float+0x240>
 801373a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801373c:	2a01      	cmp	r2, #1
 801373e:	dc01      	bgt.n	8013744 <_printf_float+0x3b4>
 8013740:	07db      	lsls	r3, r3, #31
 8013742:	d53a      	bpl.n	80137ba <_printf_float+0x42a>
 8013744:	2301      	movs	r3, #1
 8013746:	4642      	mov	r2, r8
 8013748:	4631      	mov	r1, r6
 801374a:	4628      	mov	r0, r5
 801374c:	47b8      	blx	r7
 801374e:	3001      	adds	r0, #1
 8013750:	f43f ae7b 	beq.w	801344a <_printf_float+0xba>
 8013754:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013758:	4631      	mov	r1, r6
 801375a:	4628      	mov	r0, r5
 801375c:	47b8      	blx	r7
 801375e:	3001      	adds	r0, #1
 8013760:	f108 0801 	add.w	r8, r8, #1
 8013764:	f43f ae71 	beq.w	801344a <_printf_float+0xba>
 8013768:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801376a:	2200      	movs	r2, #0
 801376c:	f103 3aff 	add.w	sl, r3, #4294967295
 8013770:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013774:	2300      	movs	r3, #0
 8013776:	f7ed f9bf 	bl	8000af8 <__aeabi_dcmpeq>
 801377a:	b9c8      	cbnz	r0, 80137b0 <_printf_float+0x420>
 801377c:	4653      	mov	r3, sl
 801377e:	4642      	mov	r2, r8
 8013780:	4631      	mov	r1, r6
 8013782:	4628      	mov	r0, r5
 8013784:	47b8      	blx	r7
 8013786:	3001      	adds	r0, #1
 8013788:	d10e      	bne.n	80137a8 <_printf_float+0x418>
 801378a:	e65e      	b.n	801344a <_printf_float+0xba>
 801378c:	2301      	movs	r3, #1
 801378e:	4652      	mov	r2, sl
 8013790:	4631      	mov	r1, r6
 8013792:	4628      	mov	r0, r5
 8013794:	47b8      	blx	r7
 8013796:	3001      	adds	r0, #1
 8013798:	f43f ae57 	beq.w	801344a <_printf_float+0xba>
 801379c:	f108 0801 	add.w	r8, r8, #1
 80137a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80137a2:	3b01      	subs	r3, #1
 80137a4:	4543      	cmp	r3, r8
 80137a6:	dcf1      	bgt.n	801378c <_printf_float+0x3fc>
 80137a8:	464b      	mov	r3, r9
 80137aa:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80137ae:	e6de      	b.n	801356e <_printf_float+0x1de>
 80137b0:	f04f 0800 	mov.w	r8, #0
 80137b4:	f104 0a1a 	add.w	sl, r4, #26
 80137b8:	e7f2      	b.n	80137a0 <_printf_float+0x410>
 80137ba:	2301      	movs	r3, #1
 80137bc:	e7df      	b.n	801377e <_printf_float+0x3ee>
 80137be:	2301      	movs	r3, #1
 80137c0:	464a      	mov	r2, r9
 80137c2:	4631      	mov	r1, r6
 80137c4:	4628      	mov	r0, r5
 80137c6:	47b8      	blx	r7
 80137c8:	3001      	adds	r0, #1
 80137ca:	f43f ae3e 	beq.w	801344a <_printf_float+0xba>
 80137ce:	f108 0801 	add.w	r8, r8, #1
 80137d2:	68e3      	ldr	r3, [r4, #12]
 80137d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80137d6:	1a9b      	subs	r3, r3, r2
 80137d8:	4543      	cmp	r3, r8
 80137da:	dcf0      	bgt.n	80137be <_printf_float+0x42e>
 80137dc:	e6fc      	b.n	80135d8 <_printf_float+0x248>
 80137de:	f04f 0800 	mov.w	r8, #0
 80137e2:	f104 0919 	add.w	r9, r4, #25
 80137e6:	e7f4      	b.n	80137d2 <_printf_float+0x442>
 80137e8:	2900      	cmp	r1, #0
 80137ea:	f43f ae8b 	beq.w	8013504 <_printf_float+0x174>
 80137ee:	2300      	movs	r3, #0
 80137f0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80137f4:	ab09      	add	r3, sp, #36	; 0x24
 80137f6:	9300      	str	r3, [sp, #0]
 80137f8:	ec49 8b10 	vmov	d0, r8, r9
 80137fc:	6022      	str	r2, [r4, #0]
 80137fe:	f8cd a004 	str.w	sl, [sp, #4]
 8013802:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013806:	4628      	mov	r0, r5
 8013808:	f7ff fd2d 	bl	8013266 <__cvt>
 801380c:	4680      	mov	r8, r0
 801380e:	e648      	b.n	80134a2 <_printf_float+0x112>

08013810 <_printf_common>:
 8013810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013814:	4691      	mov	r9, r2
 8013816:	461f      	mov	r7, r3
 8013818:	688a      	ldr	r2, [r1, #8]
 801381a:	690b      	ldr	r3, [r1, #16]
 801381c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013820:	4293      	cmp	r3, r2
 8013822:	bfb8      	it	lt
 8013824:	4613      	movlt	r3, r2
 8013826:	f8c9 3000 	str.w	r3, [r9]
 801382a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801382e:	4606      	mov	r6, r0
 8013830:	460c      	mov	r4, r1
 8013832:	b112      	cbz	r2, 801383a <_printf_common+0x2a>
 8013834:	3301      	adds	r3, #1
 8013836:	f8c9 3000 	str.w	r3, [r9]
 801383a:	6823      	ldr	r3, [r4, #0]
 801383c:	0699      	lsls	r1, r3, #26
 801383e:	bf42      	ittt	mi
 8013840:	f8d9 3000 	ldrmi.w	r3, [r9]
 8013844:	3302      	addmi	r3, #2
 8013846:	f8c9 3000 	strmi.w	r3, [r9]
 801384a:	6825      	ldr	r5, [r4, #0]
 801384c:	f015 0506 	ands.w	r5, r5, #6
 8013850:	d107      	bne.n	8013862 <_printf_common+0x52>
 8013852:	f104 0a19 	add.w	sl, r4, #25
 8013856:	68e3      	ldr	r3, [r4, #12]
 8013858:	f8d9 2000 	ldr.w	r2, [r9]
 801385c:	1a9b      	subs	r3, r3, r2
 801385e:	42ab      	cmp	r3, r5
 8013860:	dc28      	bgt.n	80138b4 <_printf_common+0xa4>
 8013862:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8013866:	6822      	ldr	r2, [r4, #0]
 8013868:	3300      	adds	r3, #0
 801386a:	bf18      	it	ne
 801386c:	2301      	movne	r3, #1
 801386e:	0692      	lsls	r2, r2, #26
 8013870:	d42d      	bmi.n	80138ce <_printf_common+0xbe>
 8013872:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013876:	4639      	mov	r1, r7
 8013878:	4630      	mov	r0, r6
 801387a:	47c0      	blx	r8
 801387c:	3001      	adds	r0, #1
 801387e:	d020      	beq.n	80138c2 <_printf_common+0xb2>
 8013880:	6823      	ldr	r3, [r4, #0]
 8013882:	68e5      	ldr	r5, [r4, #12]
 8013884:	f8d9 2000 	ldr.w	r2, [r9]
 8013888:	f003 0306 	and.w	r3, r3, #6
 801388c:	2b04      	cmp	r3, #4
 801388e:	bf08      	it	eq
 8013890:	1aad      	subeq	r5, r5, r2
 8013892:	68a3      	ldr	r3, [r4, #8]
 8013894:	6922      	ldr	r2, [r4, #16]
 8013896:	bf0c      	ite	eq
 8013898:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801389c:	2500      	movne	r5, #0
 801389e:	4293      	cmp	r3, r2
 80138a0:	bfc4      	itt	gt
 80138a2:	1a9b      	subgt	r3, r3, r2
 80138a4:	18ed      	addgt	r5, r5, r3
 80138a6:	f04f 0900 	mov.w	r9, #0
 80138aa:	341a      	adds	r4, #26
 80138ac:	454d      	cmp	r5, r9
 80138ae:	d11a      	bne.n	80138e6 <_printf_common+0xd6>
 80138b0:	2000      	movs	r0, #0
 80138b2:	e008      	b.n	80138c6 <_printf_common+0xb6>
 80138b4:	2301      	movs	r3, #1
 80138b6:	4652      	mov	r2, sl
 80138b8:	4639      	mov	r1, r7
 80138ba:	4630      	mov	r0, r6
 80138bc:	47c0      	blx	r8
 80138be:	3001      	adds	r0, #1
 80138c0:	d103      	bne.n	80138ca <_printf_common+0xba>
 80138c2:	f04f 30ff 	mov.w	r0, #4294967295
 80138c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138ca:	3501      	adds	r5, #1
 80138cc:	e7c3      	b.n	8013856 <_printf_common+0x46>
 80138ce:	18e1      	adds	r1, r4, r3
 80138d0:	1c5a      	adds	r2, r3, #1
 80138d2:	2030      	movs	r0, #48	; 0x30
 80138d4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80138d8:	4422      	add	r2, r4
 80138da:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80138de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80138e2:	3302      	adds	r3, #2
 80138e4:	e7c5      	b.n	8013872 <_printf_common+0x62>
 80138e6:	2301      	movs	r3, #1
 80138e8:	4622      	mov	r2, r4
 80138ea:	4639      	mov	r1, r7
 80138ec:	4630      	mov	r0, r6
 80138ee:	47c0      	blx	r8
 80138f0:	3001      	adds	r0, #1
 80138f2:	d0e6      	beq.n	80138c2 <_printf_common+0xb2>
 80138f4:	f109 0901 	add.w	r9, r9, #1
 80138f8:	e7d8      	b.n	80138ac <_printf_common+0x9c>
	...

080138fc <_printf_i>:
 80138fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013900:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8013904:	460c      	mov	r4, r1
 8013906:	7e09      	ldrb	r1, [r1, #24]
 8013908:	b085      	sub	sp, #20
 801390a:	296e      	cmp	r1, #110	; 0x6e
 801390c:	4617      	mov	r7, r2
 801390e:	4606      	mov	r6, r0
 8013910:	4698      	mov	r8, r3
 8013912:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013914:	f000 80b3 	beq.w	8013a7e <_printf_i+0x182>
 8013918:	d822      	bhi.n	8013960 <_printf_i+0x64>
 801391a:	2963      	cmp	r1, #99	; 0x63
 801391c:	d036      	beq.n	801398c <_printf_i+0x90>
 801391e:	d80a      	bhi.n	8013936 <_printf_i+0x3a>
 8013920:	2900      	cmp	r1, #0
 8013922:	f000 80b9 	beq.w	8013a98 <_printf_i+0x19c>
 8013926:	2958      	cmp	r1, #88	; 0x58
 8013928:	f000 8083 	beq.w	8013a32 <_printf_i+0x136>
 801392c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013930:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8013934:	e032      	b.n	801399c <_printf_i+0xa0>
 8013936:	2964      	cmp	r1, #100	; 0x64
 8013938:	d001      	beq.n	801393e <_printf_i+0x42>
 801393a:	2969      	cmp	r1, #105	; 0x69
 801393c:	d1f6      	bne.n	801392c <_printf_i+0x30>
 801393e:	6820      	ldr	r0, [r4, #0]
 8013940:	6813      	ldr	r3, [r2, #0]
 8013942:	0605      	lsls	r5, r0, #24
 8013944:	f103 0104 	add.w	r1, r3, #4
 8013948:	d52a      	bpl.n	80139a0 <_printf_i+0xa4>
 801394a:	681b      	ldr	r3, [r3, #0]
 801394c:	6011      	str	r1, [r2, #0]
 801394e:	2b00      	cmp	r3, #0
 8013950:	da03      	bge.n	801395a <_printf_i+0x5e>
 8013952:	222d      	movs	r2, #45	; 0x2d
 8013954:	425b      	negs	r3, r3
 8013956:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801395a:	486f      	ldr	r0, [pc, #444]	; (8013b18 <_printf_i+0x21c>)
 801395c:	220a      	movs	r2, #10
 801395e:	e039      	b.n	80139d4 <_printf_i+0xd8>
 8013960:	2973      	cmp	r1, #115	; 0x73
 8013962:	f000 809d 	beq.w	8013aa0 <_printf_i+0x1a4>
 8013966:	d808      	bhi.n	801397a <_printf_i+0x7e>
 8013968:	296f      	cmp	r1, #111	; 0x6f
 801396a:	d020      	beq.n	80139ae <_printf_i+0xb2>
 801396c:	2970      	cmp	r1, #112	; 0x70
 801396e:	d1dd      	bne.n	801392c <_printf_i+0x30>
 8013970:	6823      	ldr	r3, [r4, #0]
 8013972:	f043 0320 	orr.w	r3, r3, #32
 8013976:	6023      	str	r3, [r4, #0]
 8013978:	e003      	b.n	8013982 <_printf_i+0x86>
 801397a:	2975      	cmp	r1, #117	; 0x75
 801397c:	d017      	beq.n	80139ae <_printf_i+0xb2>
 801397e:	2978      	cmp	r1, #120	; 0x78
 8013980:	d1d4      	bne.n	801392c <_printf_i+0x30>
 8013982:	2378      	movs	r3, #120	; 0x78
 8013984:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013988:	4864      	ldr	r0, [pc, #400]	; (8013b1c <_printf_i+0x220>)
 801398a:	e055      	b.n	8013a38 <_printf_i+0x13c>
 801398c:	6813      	ldr	r3, [r2, #0]
 801398e:	1d19      	adds	r1, r3, #4
 8013990:	681b      	ldr	r3, [r3, #0]
 8013992:	6011      	str	r1, [r2, #0]
 8013994:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013998:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801399c:	2301      	movs	r3, #1
 801399e:	e08c      	b.n	8013aba <_printf_i+0x1be>
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	6011      	str	r1, [r2, #0]
 80139a4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80139a8:	bf18      	it	ne
 80139aa:	b21b      	sxthne	r3, r3
 80139ac:	e7cf      	b.n	801394e <_printf_i+0x52>
 80139ae:	6813      	ldr	r3, [r2, #0]
 80139b0:	6825      	ldr	r5, [r4, #0]
 80139b2:	1d18      	adds	r0, r3, #4
 80139b4:	6010      	str	r0, [r2, #0]
 80139b6:	0628      	lsls	r0, r5, #24
 80139b8:	d501      	bpl.n	80139be <_printf_i+0xc2>
 80139ba:	681b      	ldr	r3, [r3, #0]
 80139bc:	e002      	b.n	80139c4 <_printf_i+0xc8>
 80139be:	0668      	lsls	r0, r5, #25
 80139c0:	d5fb      	bpl.n	80139ba <_printf_i+0xbe>
 80139c2:	881b      	ldrh	r3, [r3, #0]
 80139c4:	4854      	ldr	r0, [pc, #336]	; (8013b18 <_printf_i+0x21c>)
 80139c6:	296f      	cmp	r1, #111	; 0x6f
 80139c8:	bf14      	ite	ne
 80139ca:	220a      	movne	r2, #10
 80139cc:	2208      	moveq	r2, #8
 80139ce:	2100      	movs	r1, #0
 80139d0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80139d4:	6865      	ldr	r5, [r4, #4]
 80139d6:	60a5      	str	r5, [r4, #8]
 80139d8:	2d00      	cmp	r5, #0
 80139da:	f2c0 8095 	blt.w	8013b08 <_printf_i+0x20c>
 80139de:	6821      	ldr	r1, [r4, #0]
 80139e0:	f021 0104 	bic.w	r1, r1, #4
 80139e4:	6021      	str	r1, [r4, #0]
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d13d      	bne.n	8013a66 <_printf_i+0x16a>
 80139ea:	2d00      	cmp	r5, #0
 80139ec:	f040 808e 	bne.w	8013b0c <_printf_i+0x210>
 80139f0:	4665      	mov	r5, ip
 80139f2:	2a08      	cmp	r2, #8
 80139f4:	d10b      	bne.n	8013a0e <_printf_i+0x112>
 80139f6:	6823      	ldr	r3, [r4, #0]
 80139f8:	07db      	lsls	r3, r3, #31
 80139fa:	d508      	bpl.n	8013a0e <_printf_i+0x112>
 80139fc:	6923      	ldr	r3, [r4, #16]
 80139fe:	6862      	ldr	r2, [r4, #4]
 8013a00:	429a      	cmp	r2, r3
 8013a02:	bfde      	ittt	le
 8013a04:	2330      	movle	r3, #48	; 0x30
 8013a06:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013a0a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013a0e:	ebac 0305 	sub.w	r3, ip, r5
 8013a12:	6123      	str	r3, [r4, #16]
 8013a14:	f8cd 8000 	str.w	r8, [sp]
 8013a18:	463b      	mov	r3, r7
 8013a1a:	aa03      	add	r2, sp, #12
 8013a1c:	4621      	mov	r1, r4
 8013a1e:	4630      	mov	r0, r6
 8013a20:	f7ff fef6 	bl	8013810 <_printf_common>
 8013a24:	3001      	adds	r0, #1
 8013a26:	d14d      	bne.n	8013ac4 <_printf_i+0x1c8>
 8013a28:	f04f 30ff 	mov.w	r0, #4294967295
 8013a2c:	b005      	add	sp, #20
 8013a2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013a32:	4839      	ldr	r0, [pc, #228]	; (8013b18 <_printf_i+0x21c>)
 8013a34:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8013a38:	6813      	ldr	r3, [r2, #0]
 8013a3a:	6821      	ldr	r1, [r4, #0]
 8013a3c:	1d1d      	adds	r5, r3, #4
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	6015      	str	r5, [r2, #0]
 8013a42:	060a      	lsls	r2, r1, #24
 8013a44:	d50b      	bpl.n	8013a5e <_printf_i+0x162>
 8013a46:	07ca      	lsls	r2, r1, #31
 8013a48:	bf44      	itt	mi
 8013a4a:	f041 0120 	orrmi.w	r1, r1, #32
 8013a4e:	6021      	strmi	r1, [r4, #0]
 8013a50:	b91b      	cbnz	r3, 8013a5a <_printf_i+0x15e>
 8013a52:	6822      	ldr	r2, [r4, #0]
 8013a54:	f022 0220 	bic.w	r2, r2, #32
 8013a58:	6022      	str	r2, [r4, #0]
 8013a5a:	2210      	movs	r2, #16
 8013a5c:	e7b7      	b.n	80139ce <_printf_i+0xd2>
 8013a5e:	064d      	lsls	r5, r1, #25
 8013a60:	bf48      	it	mi
 8013a62:	b29b      	uxthmi	r3, r3
 8013a64:	e7ef      	b.n	8013a46 <_printf_i+0x14a>
 8013a66:	4665      	mov	r5, ip
 8013a68:	fbb3 f1f2 	udiv	r1, r3, r2
 8013a6c:	fb02 3311 	mls	r3, r2, r1, r3
 8013a70:	5cc3      	ldrb	r3, [r0, r3]
 8013a72:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8013a76:	460b      	mov	r3, r1
 8013a78:	2900      	cmp	r1, #0
 8013a7a:	d1f5      	bne.n	8013a68 <_printf_i+0x16c>
 8013a7c:	e7b9      	b.n	80139f2 <_printf_i+0xf6>
 8013a7e:	6813      	ldr	r3, [r2, #0]
 8013a80:	6825      	ldr	r5, [r4, #0]
 8013a82:	6961      	ldr	r1, [r4, #20]
 8013a84:	1d18      	adds	r0, r3, #4
 8013a86:	6010      	str	r0, [r2, #0]
 8013a88:	0628      	lsls	r0, r5, #24
 8013a8a:	681b      	ldr	r3, [r3, #0]
 8013a8c:	d501      	bpl.n	8013a92 <_printf_i+0x196>
 8013a8e:	6019      	str	r1, [r3, #0]
 8013a90:	e002      	b.n	8013a98 <_printf_i+0x19c>
 8013a92:	066a      	lsls	r2, r5, #25
 8013a94:	d5fb      	bpl.n	8013a8e <_printf_i+0x192>
 8013a96:	8019      	strh	r1, [r3, #0]
 8013a98:	2300      	movs	r3, #0
 8013a9a:	6123      	str	r3, [r4, #16]
 8013a9c:	4665      	mov	r5, ip
 8013a9e:	e7b9      	b.n	8013a14 <_printf_i+0x118>
 8013aa0:	6813      	ldr	r3, [r2, #0]
 8013aa2:	1d19      	adds	r1, r3, #4
 8013aa4:	6011      	str	r1, [r2, #0]
 8013aa6:	681d      	ldr	r5, [r3, #0]
 8013aa8:	6862      	ldr	r2, [r4, #4]
 8013aaa:	2100      	movs	r1, #0
 8013aac:	4628      	mov	r0, r5
 8013aae:	f7ec fbaf 	bl	8000210 <memchr>
 8013ab2:	b108      	cbz	r0, 8013ab8 <_printf_i+0x1bc>
 8013ab4:	1b40      	subs	r0, r0, r5
 8013ab6:	6060      	str	r0, [r4, #4]
 8013ab8:	6863      	ldr	r3, [r4, #4]
 8013aba:	6123      	str	r3, [r4, #16]
 8013abc:	2300      	movs	r3, #0
 8013abe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013ac2:	e7a7      	b.n	8013a14 <_printf_i+0x118>
 8013ac4:	6923      	ldr	r3, [r4, #16]
 8013ac6:	462a      	mov	r2, r5
 8013ac8:	4639      	mov	r1, r7
 8013aca:	4630      	mov	r0, r6
 8013acc:	47c0      	blx	r8
 8013ace:	3001      	adds	r0, #1
 8013ad0:	d0aa      	beq.n	8013a28 <_printf_i+0x12c>
 8013ad2:	6823      	ldr	r3, [r4, #0]
 8013ad4:	079b      	lsls	r3, r3, #30
 8013ad6:	d413      	bmi.n	8013b00 <_printf_i+0x204>
 8013ad8:	68e0      	ldr	r0, [r4, #12]
 8013ada:	9b03      	ldr	r3, [sp, #12]
 8013adc:	4298      	cmp	r0, r3
 8013ade:	bfb8      	it	lt
 8013ae0:	4618      	movlt	r0, r3
 8013ae2:	e7a3      	b.n	8013a2c <_printf_i+0x130>
 8013ae4:	2301      	movs	r3, #1
 8013ae6:	464a      	mov	r2, r9
 8013ae8:	4639      	mov	r1, r7
 8013aea:	4630      	mov	r0, r6
 8013aec:	47c0      	blx	r8
 8013aee:	3001      	adds	r0, #1
 8013af0:	d09a      	beq.n	8013a28 <_printf_i+0x12c>
 8013af2:	3501      	adds	r5, #1
 8013af4:	68e3      	ldr	r3, [r4, #12]
 8013af6:	9a03      	ldr	r2, [sp, #12]
 8013af8:	1a9b      	subs	r3, r3, r2
 8013afa:	42ab      	cmp	r3, r5
 8013afc:	dcf2      	bgt.n	8013ae4 <_printf_i+0x1e8>
 8013afe:	e7eb      	b.n	8013ad8 <_printf_i+0x1dc>
 8013b00:	2500      	movs	r5, #0
 8013b02:	f104 0919 	add.w	r9, r4, #25
 8013b06:	e7f5      	b.n	8013af4 <_printf_i+0x1f8>
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d1ac      	bne.n	8013a66 <_printf_i+0x16a>
 8013b0c:	7803      	ldrb	r3, [r0, #0]
 8013b0e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013b12:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013b16:	e76c      	b.n	80139f2 <_printf_i+0xf6>
 8013b18:	0801887c 	.word	0x0801887c
 8013b1c:	0801888d 	.word	0x0801888d

08013b20 <_scanf_float>:
 8013b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b24:	469a      	mov	sl, r3
 8013b26:	688b      	ldr	r3, [r1, #8]
 8013b28:	4616      	mov	r6, r2
 8013b2a:	1e5a      	subs	r2, r3, #1
 8013b2c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013b30:	b087      	sub	sp, #28
 8013b32:	bf83      	ittte	hi
 8013b34:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8013b38:	189b      	addhi	r3, r3, r2
 8013b3a:	9301      	strhi	r3, [sp, #4]
 8013b3c:	2300      	movls	r3, #0
 8013b3e:	bf86      	itte	hi
 8013b40:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013b44:	608b      	strhi	r3, [r1, #8]
 8013b46:	9301      	strls	r3, [sp, #4]
 8013b48:	680b      	ldr	r3, [r1, #0]
 8013b4a:	4688      	mov	r8, r1
 8013b4c:	f04f 0b00 	mov.w	fp, #0
 8013b50:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8013b54:	f848 3b1c 	str.w	r3, [r8], #28
 8013b58:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8013b5c:	4607      	mov	r7, r0
 8013b5e:	460c      	mov	r4, r1
 8013b60:	4645      	mov	r5, r8
 8013b62:	465a      	mov	r2, fp
 8013b64:	46d9      	mov	r9, fp
 8013b66:	f8cd b008 	str.w	fp, [sp, #8]
 8013b6a:	68a1      	ldr	r1, [r4, #8]
 8013b6c:	b181      	cbz	r1, 8013b90 <_scanf_float+0x70>
 8013b6e:	6833      	ldr	r3, [r6, #0]
 8013b70:	781b      	ldrb	r3, [r3, #0]
 8013b72:	2b49      	cmp	r3, #73	; 0x49
 8013b74:	d071      	beq.n	8013c5a <_scanf_float+0x13a>
 8013b76:	d84d      	bhi.n	8013c14 <_scanf_float+0xf4>
 8013b78:	2b39      	cmp	r3, #57	; 0x39
 8013b7a:	d840      	bhi.n	8013bfe <_scanf_float+0xde>
 8013b7c:	2b31      	cmp	r3, #49	; 0x31
 8013b7e:	f080 8088 	bcs.w	8013c92 <_scanf_float+0x172>
 8013b82:	2b2d      	cmp	r3, #45	; 0x2d
 8013b84:	f000 8090 	beq.w	8013ca8 <_scanf_float+0x188>
 8013b88:	d815      	bhi.n	8013bb6 <_scanf_float+0x96>
 8013b8a:	2b2b      	cmp	r3, #43	; 0x2b
 8013b8c:	f000 808c 	beq.w	8013ca8 <_scanf_float+0x188>
 8013b90:	f1b9 0f00 	cmp.w	r9, #0
 8013b94:	d003      	beq.n	8013b9e <_scanf_float+0x7e>
 8013b96:	6823      	ldr	r3, [r4, #0]
 8013b98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013b9c:	6023      	str	r3, [r4, #0]
 8013b9e:	3a01      	subs	r2, #1
 8013ba0:	2a01      	cmp	r2, #1
 8013ba2:	f200 80ea 	bhi.w	8013d7a <_scanf_float+0x25a>
 8013ba6:	4545      	cmp	r5, r8
 8013ba8:	f200 80dc 	bhi.w	8013d64 <_scanf_float+0x244>
 8013bac:	2601      	movs	r6, #1
 8013bae:	4630      	mov	r0, r6
 8013bb0:	b007      	add	sp, #28
 8013bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bb6:	2b2e      	cmp	r3, #46	; 0x2e
 8013bb8:	f000 809f 	beq.w	8013cfa <_scanf_float+0x1da>
 8013bbc:	2b30      	cmp	r3, #48	; 0x30
 8013bbe:	d1e7      	bne.n	8013b90 <_scanf_float+0x70>
 8013bc0:	6820      	ldr	r0, [r4, #0]
 8013bc2:	f410 7f80 	tst.w	r0, #256	; 0x100
 8013bc6:	d064      	beq.n	8013c92 <_scanf_float+0x172>
 8013bc8:	9b01      	ldr	r3, [sp, #4]
 8013bca:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8013bce:	6020      	str	r0, [r4, #0]
 8013bd0:	f109 0901 	add.w	r9, r9, #1
 8013bd4:	b11b      	cbz	r3, 8013bde <_scanf_float+0xbe>
 8013bd6:	3b01      	subs	r3, #1
 8013bd8:	3101      	adds	r1, #1
 8013bda:	9301      	str	r3, [sp, #4]
 8013bdc:	60a1      	str	r1, [r4, #8]
 8013bde:	68a3      	ldr	r3, [r4, #8]
 8013be0:	3b01      	subs	r3, #1
 8013be2:	60a3      	str	r3, [r4, #8]
 8013be4:	6923      	ldr	r3, [r4, #16]
 8013be6:	3301      	adds	r3, #1
 8013be8:	6123      	str	r3, [r4, #16]
 8013bea:	6873      	ldr	r3, [r6, #4]
 8013bec:	3b01      	subs	r3, #1
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	6073      	str	r3, [r6, #4]
 8013bf2:	f340 80ac 	ble.w	8013d4e <_scanf_float+0x22e>
 8013bf6:	6833      	ldr	r3, [r6, #0]
 8013bf8:	3301      	adds	r3, #1
 8013bfa:	6033      	str	r3, [r6, #0]
 8013bfc:	e7b5      	b.n	8013b6a <_scanf_float+0x4a>
 8013bfe:	2b45      	cmp	r3, #69	; 0x45
 8013c00:	f000 8085 	beq.w	8013d0e <_scanf_float+0x1ee>
 8013c04:	2b46      	cmp	r3, #70	; 0x46
 8013c06:	d06a      	beq.n	8013cde <_scanf_float+0x1be>
 8013c08:	2b41      	cmp	r3, #65	; 0x41
 8013c0a:	d1c1      	bne.n	8013b90 <_scanf_float+0x70>
 8013c0c:	2a01      	cmp	r2, #1
 8013c0e:	d1bf      	bne.n	8013b90 <_scanf_float+0x70>
 8013c10:	2202      	movs	r2, #2
 8013c12:	e046      	b.n	8013ca2 <_scanf_float+0x182>
 8013c14:	2b65      	cmp	r3, #101	; 0x65
 8013c16:	d07a      	beq.n	8013d0e <_scanf_float+0x1ee>
 8013c18:	d818      	bhi.n	8013c4c <_scanf_float+0x12c>
 8013c1a:	2b54      	cmp	r3, #84	; 0x54
 8013c1c:	d066      	beq.n	8013cec <_scanf_float+0x1cc>
 8013c1e:	d811      	bhi.n	8013c44 <_scanf_float+0x124>
 8013c20:	2b4e      	cmp	r3, #78	; 0x4e
 8013c22:	d1b5      	bne.n	8013b90 <_scanf_float+0x70>
 8013c24:	2a00      	cmp	r2, #0
 8013c26:	d146      	bne.n	8013cb6 <_scanf_float+0x196>
 8013c28:	f1b9 0f00 	cmp.w	r9, #0
 8013c2c:	d145      	bne.n	8013cba <_scanf_float+0x19a>
 8013c2e:	6821      	ldr	r1, [r4, #0]
 8013c30:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8013c34:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8013c38:	d13f      	bne.n	8013cba <_scanf_float+0x19a>
 8013c3a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8013c3e:	6021      	str	r1, [r4, #0]
 8013c40:	2201      	movs	r2, #1
 8013c42:	e02e      	b.n	8013ca2 <_scanf_float+0x182>
 8013c44:	2b59      	cmp	r3, #89	; 0x59
 8013c46:	d01e      	beq.n	8013c86 <_scanf_float+0x166>
 8013c48:	2b61      	cmp	r3, #97	; 0x61
 8013c4a:	e7de      	b.n	8013c0a <_scanf_float+0xea>
 8013c4c:	2b6e      	cmp	r3, #110	; 0x6e
 8013c4e:	d0e9      	beq.n	8013c24 <_scanf_float+0x104>
 8013c50:	d815      	bhi.n	8013c7e <_scanf_float+0x15e>
 8013c52:	2b66      	cmp	r3, #102	; 0x66
 8013c54:	d043      	beq.n	8013cde <_scanf_float+0x1be>
 8013c56:	2b69      	cmp	r3, #105	; 0x69
 8013c58:	d19a      	bne.n	8013b90 <_scanf_float+0x70>
 8013c5a:	f1bb 0f00 	cmp.w	fp, #0
 8013c5e:	d138      	bne.n	8013cd2 <_scanf_float+0x1b2>
 8013c60:	f1b9 0f00 	cmp.w	r9, #0
 8013c64:	d197      	bne.n	8013b96 <_scanf_float+0x76>
 8013c66:	6821      	ldr	r1, [r4, #0]
 8013c68:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8013c6c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8013c70:	d195      	bne.n	8013b9e <_scanf_float+0x7e>
 8013c72:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8013c76:	6021      	str	r1, [r4, #0]
 8013c78:	f04f 0b01 	mov.w	fp, #1
 8013c7c:	e011      	b.n	8013ca2 <_scanf_float+0x182>
 8013c7e:	2b74      	cmp	r3, #116	; 0x74
 8013c80:	d034      	beq.n	8013cec <_scanf_float+0x1cc>
 8013c82:	2b79      	cmp	r3, #121	; 0x79
 8013c84:	d184      	bne.n	8013b90 <_scanf_float+0x70>
 8013c86:	f1bb 0f07 	cmp.w	fp, #7
 8013c8a:	d181      	bne.n	8013b90 <_scanf_float+0x70>
 8013c8c:	f04f 0b08 	mov.w	fp, #8
 8013c90:	e007      	b.n	8013ca2 <_scanf_float+0x182>
 8013c92:	eb12 0f0b 	cmn.w	r2, fp
 8013c96:	f47f af7b 	bne.w	8013b90 <_scanf_float+0x70>
 8013c9a:	6821      	ldr	r1, [r4, #0]
 8013c9c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8013ca0:	6021      	str	r1, [r4, #0]
 8013ca2:	702b      	strb	r3, [r5, #0]
 8013ca4:	3501      	adds	r5, #1
 8013ca6:	e79a      	b.n	8013bde <_scanf_float+0xbe>
 8013ca8:	6821      	ldr	r1, [r4, #0]
 8013caa:	0608      	lsls	r0, r1, #24
 8013cac:	f57f af70 	bpl.w	8013b90 <_scanf_float+0x70>
 8013cb0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8013cb4:	e7f4      	b.n	8013ca0 <_scanf_float+0x180>
 8013cb6:	2a02      	cmp	r2, #2
 8013cb8:	d047      	beq.n	8013d4a <_scanf_float+0x22a>
 8013cba:	f1bb 0f01 	cmp.w	fp, #1
 8013cbe:	d003      	beq.n	8013cc8 <_scanf_float+0x1a8>
 8013cc0:	f1bb 0f04 	cmp.w	fp, #4
 8013cc4:	f47f af64 	bne.w	8013b90 <_scanf_float+0x70>
 8013cc8:	f10b 0b01 	add.w	fp, fp, #1
 8013ccc:	fa5f fb8b 	uxtb.w	fp, fp
 8013cd0:	e7e7      	b.n	8013ca2 <_scanf_float+0x182>
 8013cd2:	f1bb 0f03 	cmp.w	fp, #3
 8013cd6:	d0f7      	beq.n	8013cc8 <_scanf_float+0x1a8>
 8013cd8:	f1bb 0f05 	cmp.w	fp, #5
 8013cdc:	e7f2      	b.n	8013cc4 <_scanf_float+0x1a4>
 8013cde:	f1bb 0f02 	cmp.w	fp, #2
 8013ce2:	f47f af55 	bne.w	8013b90 <_scanf_float+0x70>
 8013ce6:	f04f 0b03 	mov.w	fp, #3
 8013cea:	e7da      	b.n	8013ca2 <_scanf_float+0x182>
 8013cec:	f1bb 0f06 	cmp.w	fp, #6
 8013cf0:	f47f af4e 	bne.w	8013b90 <_scanf_float+0x70>
 8013cf4:	f04f 0b07 	mov.w	fp, #7
 8013cf8:	e7d3      	b.n	8013ca2 <_scanf_float+0x182>
 8013cfa:	6821      	ldr	r1, [r4, #0]
 8013cfc:	0588      	lsls	r0, r1, #22
 8013cfe:	f57f af47 	bpl.w	8013b90 <_scanf_float+0x70>
 8013d02:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8013d06:	6021      	str	r1, [r4, #0]
 8013d08:	f8cd 9008 	str.w	r9, [sp, #8]
 8013d0c:	e7c9      	b.n	8013ca2 <_scanf_float+0x182>
 8013d0e:	6821      	ldr	r1, [r4, #0]
 8013d10:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8013d14:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8013d18:	d006      	beq.n	8013d28 <_scanf_float+0x208>
 8013d1a:	0548      	lsls	r0, r1, #21
 8013d1c:	f57f af38 	bpl.w	8013b90 <_scanf_float+0x70>
 8013d20:	f1b9 0f00 	cmp.w	r9, #0
 8013d24:	f43f af3b 	beq.w	8013b9e <_scanf_float+0x7e>
 8013d28:	0588      	lsls	r0, r1, #22
 8013d2a:	bf58      	it	pl
 8013d2c:	9802      	ldrpl	r0, [sp, #8]
 8013d2e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8013d32:	bf58      	it	pl
 8013d34:	eba9 0000 	subpl.w	r0, r9, r0
 8013d38:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8013d3c:	bf58      	it	pl
 8013d3e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8013d42:	6021      	str	r1, [r4, #0]
 8013d44:	f04f 0900 	mov.w	r9, #0
 8013d48:	e7ab      	b.n	8013ca2 <_scanf_float+0x182>
 8013d4a:	2203      	movs	r2, #3
 8013d4c:	e7a9      	b.n	8013ca2 <_scanf_float+0x182>
 8013d4e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013d52:	9205      	str	r2, [sp, #20]
 8013d54:	4631      	mov	r1, r6
 8013d56:	4638      	mov	r0, r7
 8013d58:	4798      	blx	r3
 8013d5a:	9a05      	ldr	r2, [sp, #20]
 8013d5c:	2800      	cmp	r0, #0
 8013d5e:	f43f af04 	beq.w	8013b6a <_scanf_float+0x4a>
 8013d62:	e715      	b.n	8013b90 <_scanf_float+0x70>
 8013d64:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013d68:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013d6c:	4632      	mov	r2, r6
 8013d6e:	4638      	mov	r0, r7
 8013d70:	4798      	blx	r3
 8013d72:	6923      	ldr	r3, [r4, #16]
 8013d74:	3b01      	subs	r3, #1
 8013d76:	6123      	str	r3, [r4, #16]
 8013d78:	e715      	b.n	8013ba6 <_scanf_float+0x86>
 8013d7a:	f10b 33ff 	add.w	r3, fp, #4294967295
 8013d7e:	2b06      	cmp	r3, #6
 8013d80:	d80a      	bhi.n	8013d98 <_scanf_float+0x278>
 8013d82:	f1bb 0f02 	cmp.w	fp, #2
 8013d86:	d968      	bls.n	8013e5a <_scanf_float+0x33a>
 8013d88:	f1ab 0b03 	sub.w	fp, fp, #3
 8013d8c:	fa5f fb8b 	uxtb.w	fp, fp
 8013d90:	eba5 0b0b 	sub.w	fp, r5, fp
 8013d94:	455d      	cmp	r5, fp
 8013d96:	d14b      	bne.n	8013e30 <_scanf_float+0x310>
 8013d98:	6823      	ldr	r3, [r4, #0]
 8013d9a:	05da      	lsls	r2, r3, #23
 8013d9c:	d51f      	bpl.n	8013dde <_scanf_float+0x2be>
 8013d9e:	055b      	lsls	r3, r3, #21
 8013da0:	d468      	bmi.n	8013e74 <_scanf_float+0x354>
 8013da2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8013da6:	6923      	ldr	r3, [r4, #16]
 8013da8:	2965      	cmp	r1, #101	; 0x65
 8013daa:	f103 33ff 	add.w	r3, r3, #4294967295
 8013dae:	f105 3bff 	add.w	fp, r5, #4294967295
 8013db2:	6123      	str	r3, [r4, #16]
 8013db4:	d00d      	beq.n	8013dd2 <_scanf_float+0x2b2>
 8013db6:	2945      	cmp	r1, #69	; 0x45
 8013db8:	d00b      	beq.n	8013dd2 <_scanf_float+0x2b2>
 8013dba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013dbe:	4632      	mov	r2, r6
 8013dc0:	4638      	mov	r0, r7
 8013dc2:	4798      	blx	r3
 8013dc4:	6923      	ldr	r3, [r4, #16]
 8013dc6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8013dca:	3b01      	subs	r3, #1
 8013dcc:	f1a5 0b02 	sub.w	fp, r5, #2
 8013dd0:	6123      	str	r3, [r4, #16]
 8013dd2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013dd6:	4632      	mov	r2, r6
 8013dd8:	4638      	mov	r0, r7
 8013dda:	4798      	blx	r3
 8013ddc:	465d      	mov	r5, fp
 8013dde:	6826      	ldr	r6, [r4, #0]
 8013de0:	f016 0610 	ands.w	r6, r6, #16
 8013de4:	d17a      	bne.n	8013edc <_scanf_float+0x3bc>
 8013de6:	702e      	strb	r6, [r5, #0]
 8013de8:	6823      	ldr	r3, [r4, #0]
 8013dea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8013dee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013df2:	d142      	bne.n	8013e7a <_scanf_float+0x35a>
 8013df4:	9b02      	ldr	r3, [sp, #8]
 8013df6:	eba9 0303 	sub.w	r3, r9, r3
 8013dfa:	425a      	negs	r2, r3
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d149      	bne.n	8013e94 <_scanf_float+0x374>
 8013e00:	2200      	movs	r2, #0
 8013e02:	4641      	mov	r1, r8
 8013e04:	4638      	mov	r0, r7
 8013e06:	f000 ffdf 	bl	8014dc8 <_strtod_r>
 8013e0a:	6825      	ldr	r5, [r4, #0]
 8013e0c:	f8da 3000 	ldr.w	r3, [sl]
 8013e10:	f015 0f02 	tst.w	r5, #2
 8013e14:	f103 0204 	add.w	r2, r3, #4
 8013e18:	ec59 8b10 	vmov	r8, r9, d0
 8013e1c:	f8ca 2000 	str.w	r2, [sl]
 8013e20:	d043      	beq.n	8013eaa <_scanf_float+0x38a>
 8013e22:	681b      	ldr	r3, [r3, #0]
 8013e24:	e9c3 8900 	strd	r8, r9, [r3]
 8013e28:	68e3      	ldr	r3, [r4, #12]
 8013e2a:	3301      	adds	r3, #1
 8013e2c:	60e3      	str	r3, [r4, #12]
 8013e2e:	e6be      	b.n	8013bae <_scanf_float+0x8e>
 8013e30:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013e34:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013e38:	4632      	mov	r2, r6
 8013e3a:	4638      	mov	r0, r7
 8013e3c:	4798      	blx	r3
 8013e3e:	6923      	ldr	r3, [r4, #16]
 8013e40:	3b01      	subs	r3, #1
 8013e42:	6123      	str	r3, [r4, #16]
 8013e44:	e7a6      	b.n	8013d94 <_scanf_float+0x274>
 8013e46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013e4a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013e4e:	4632      	mov	r2, r6
 8013e50:	4638      	mov	r0, r7
 8013e52:	4798      	blx	r3
 8013e54:	6923      	ldr	r3, [r4, #16]
 8013e56:	3b01      	subs	r3, #1
 8013e58:	6123      	str	r3, [r4, #16]
 8013e5a:	4545      	cmp	r5, r8
 8013e5c:	d8f3      	bhi.n	8013e46 <_scanf_float+0x326>
 8013e5e:	e6a5      	b.n	8013bac <_scanf_float+0x8c>
 8013e60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013e64:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013e68:	4632      	mov	r2, r6
 8013e6a:	4638      	mov	r0, r7
 8013e6c:	4798      	blx	r3
 8013e6e:	6923      	ldr	r3, [r4, #16]
 8013e70:	3b01      	subs	r3, #1
 8013e72:	6123      	str	r3, [r4, #16]
 8013e74:	4545      	cmp	r5, r8
 8013e76:	d8f3      	bhi.n	8013e60 <_scanf_float+0x340>
 8013e78:	e698      	b.n	8013bac <_scanf_float+0x8c>
 8013e7a:	9b03      	ldr	r3, [sp, #12]
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d0bf      	beq.n	8013e00 <_scanf_float+0x2e0>
 8013e80:	9904      	ldr	r1, [sp, #16]
 8013e82:	230a      	movs	r3, #10
 8013e84:	4632      	mov	r2, r6
 8013e86:	3101      	adds	r1, #1
 8013e88:	4638      	mov	r0, r7
 8013e8a:	f001 f829 	bl	8014ee0 <_strtol_r>
 8013e8e:	9b03      	ldr	r3, [sp, #12]
 8013e90:	9d04      	ldr	r5, [sp, #16]
 8013e92:	1ac2      	subs	r2, r0, r3
 8013e94:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8013e98:	429d      	cmp	r5, r3
 8013e9a:	bf28      	it	cs
 8013e9c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8013ea0:	490f      	ldr	r1, [pc, #60]	; (8013ee0 <_scanf_float+0x3c0>)
 8013ea2:	4628      	mov	r0, r5
 8013ea4:	f000 f8e8 	bl	8014078 <siprintf>
 8013ea8:	e7aa      	b.n	8013e00 <_scanf_float+0x2e0>
 8013eaa:	f015 0504 	ands.w	r5, r5, #4
 8013eae:	d1b8      	bne.n	8013e22 <_scanf_float+0x302>
 8013eb0:	681f      	ldr	r7, [r3, #0]
 8013eb2:	ee10 2a10 	vmov	r2, s0
 8013eb6:	464b      	mov	r3, r9
 8013eb8:	ee10 0a10 	vmov	r0, s0
 8013ebc:	4649      	mov	r1, r9
 8013ebe:	f7ec fe4d 	bl	8000b5c <__aeabi_dcmpun>
 8013ec2:	b128      	cbz	r0, 8013ed0 <_scanf_float+0x3b0>
 8013ec4:	4628      	mov	r0, r5
 8013ec6:	f000 f89d 	bl	8014004 <nanf>
 8013eca:	ed87 0a00 	vstr	s0, [r7]
 8013ece:	e7ab      	b.n	8013e28 <_scanf_float+0x308>
 8013ed0:	4640      	mov	r0, r8
 8013ed2:	4649      	mov	r1, r9
 8013ed4:	f7ec fea0 	bl	8000c18 <__aeabi_d2f>
 8013ed8:	6038      	str	r0, [r7, #0]
 8013eda:	e7a5      	b.n	8013e28 <_scanf_float+0x308>
 8013edc:	2600      	movs	r6, #0
 8013ede:	e666      	b.n	8013bae <_scanf_float+0x8e>
 8013ee0:	0801889e 	.word	0x0801889e

08013ee4 <iprintf>:
 8013ee4:	b40f      	push	{r0, r1, r2, r3}
 8013ee6:	4b0a      	ldr	r3, [pc, #40]	; (8013f10 <iprintf+0x2c>)
 8013ee8:	b513      	push	{r0, r1, r4, lr}
 8013eea:	681c      	ldr	r4, [r3, #0]
 8013eec:	b124      	cbz	r4, 8013ef8 <iprintf+0x14>
 8013eee:	69a3      	ldr	r3, [r4, #24]
 8013ef0:	b913      	cbnz	r3, 8013ef8 <iprintf+0x14>
 8013ef2:	4620      	mov	r0, r4
 8013ef4:	f002 f83c 	bl	8015f70 <__sinit>
 8013ef8:	ab05      	add	r3, sp, #20
 8013efa:	9a04      	ldr	r2, [sp, #16]
 8013efc:	68a1      	ldr	r1, [r4, #8]
 8013efe:	9301      	str	r3, [sp, #4]
 8013f00:	4620      	mov	r0, r4
 8013f02:	f003 fc73 	bl	80177ec <_vfiprintf_r>
 8013f06:	b002      	add	sp, #8
 8013f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013f0c:	b004      	add	sp, #16
 8013f0e:	4770      	bx	lr
 8013f10:	2000000c 	.word	0x2000000c

08013f14 <putchar>:
 8013f14:	b538      	push	{r3, r4, r5, lr}
 8013f16:	4b08      	ldr	r3, [pc, #32]	; (8013f38 <putchar+0x24>)
 8013f18:	681c      	ldr	r4, [r3, #0]
 8013f1a:	4605      	mov	r5, r0
 8013f1c:	b124      	cbz	r4, 8013f28 <putchar+0x14>
 8013f1e:	69a3      	ldr	r3, [r4, #24]
 8013f20:	b913      	cbnz	r3, 8013f28 <putchar+0x14>
 8013f22:	4620      	mov	r0, r4
 8013f24:	f002 f824 	bl	8015f70 <__sinit>
 8013f28:	68a2      	ldr	r2, [r4, #8]
 8013f2a:	4629      	mov	r1, r5
 8013f2c:	4620      	mov	r0, r4
 8013f2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013f32:	f003 bec9 	b.w	8017cc8 <_putc_r>
 8013f36:	bf00      	nop
 8013f38:	2000000c 	.word	0x2000000c

08013f3c <_puts_r>:
 8013f3c:	b570      	push	{r4, r5, r6, lr}
 8013f3e:	460e      	mov	r6, r1
 8013f40:	4605      	mov	r5, r0
 8013f42:	b118      	cbz	r0, 8013f4c <_puts_r+0x10>
 8013f44:	6983      	ldr	r3, [r0, #24]
 8013f46:	b90b      	cbnz	r3, 8013f4c <_puts_r+0x10>
 8013f48:	f002 f812 	bl	8015f70 <__sinit>
 8013f4c:	69ab      	ldr	r3, [r5, #24]
 8013f4e:	68ac      	ldr	r4, [r5, #8]
 8013f50:	b913      	cbnz	r3, 8013f58 <_puts_r+0x1c>
 8013f52:	4628      	mov	r0, r5
 8013f54:	f002 f80c 	bl	8015f70 <__sinit>
 8013f58:	4b23      	ldr	r3, [pc, #140]	; (8013fe8 <_puts_r+0xac>)
 8013f5a:	429c      	cmp	r4, r3
 8013f5c:	d117      	bne.n	8013f8e <_puts_r+0x52>
 8013f5e:	686c      	ldr	r4, [r5, #4]
 8013f60:	89a3      	ldrh	r3, [r4, #12]
 8013f62:	071b      	lsls	r3, r3, #28
 8013f64:	d51d      	bpl.n	8013fa2 <_puts_r+0x66>
 8013f66:	6923      	ldr	r3, [r4, #16]
 8013f68:	b1db      	cbz	r3, 8013fa2 <_puts_r+0x66>
 8013f6a:	3e01      	subs	r6, #1
 8013f6c:	68a3      	ldr	r3, [r4, #8]
 8013f6e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013f72:	3b01      	subs	r3, #1
 8013f74:	60a3      	str	r3, [r4, #8]
 8013f76:	b9e9      	cbnz	r1, 8013fb4 <_puts_r+0x78>
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	da2e      	bge.n	8013fda <_puts_r+0x9e>
 8013f7c:	4622      	mov	r2, r4
 8013f7e:	210a      	movs	r1, #10
 8013f80:	4628      	mov	r0, r5
 8013f82:	f000 ffdf 	bl	8014f44 <__swbuf_r>
 8013f86:	3001      	adds	r0, #1
 8013f88:	d011      	beq.n	8013fae <_puts_r+0x72>
 8013f8a:	200a      	movs	r0, #10
 8013f8c:	e011      	b.n	8013fb2 <_puts_r+0x76>
 8013f8e:	4b17      	ldr	r3, [pc, #92]	; (8013fec <_puts_r+0xb0>)
 8013f90:	429c      	cmp	r4, r3
 8013f92:	d101      	bne.n	8013f98 <_puts_r+0x5c>
 8013f94:	68ac      	ldr	r4, [r5, #8]
 8013f96:	e7e3      	b.n	8013f60 <_puts_r+0x24>
 8013f98:	4b15      	ldr	r3, [pc, #84]	; (8013ff0 <_puts_r+0xb4>)
 8013f9a:	429c      	cmp	r4, r3
 8013f9c:	bf08      	it	eq
 8013f9e:	68ec      	ldreq	r4, [r5, #12]
 8013fa0:	e7de      	b.n	8013f60 <_puts_r+0x24>
 8013fa2:	4621      	mov	r1, r4
 8013fa4:	4628      	mov	r0, r5
 8013fa6:	f001 f831 	bl	801500c <__swsetup_r>
 8013faa:	2800      	cmp	r0, #0
 8013fac:	d0dd      	beq.n	8013f6a <_puts_r+0x2e>
 8013fae:	f04f 30ff 	mov.w	r0, #4294967295
 8013fb2:	bd70      	pop	{r4, r5, r6, pc}
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	da04      	bge.n	8013fc2 <_puts_r+0x86>
 8013fb8:	69a2      	ldr	r2, [r4, #24]
 8013fba:	429a      	cmp	r2, r3
 8013fbc:	dc06      	bgt.n	8013fcc <_puts_r+0x90>
 8013fbe:	290a      	cmp	r1, #10
 8013fc0:	d004      	beq.n	8013fcc <_puts_r+0x90>
 8013fc2:	6823      	ldr	r3, [r4, #0]
 8013fc4:	1c5a      	adds	r2, r3, #1
 8013fc6:	6022      	str	r2, [r4, #0]
 8013fc8:	7019      	strb	r1, [r3, #0]
 8013fca:	e7cf      	b.n	8013f6c <_puts_r+0x30>
 8013fcc:	4622      	mov	r2, r4
 8013fce:	4628      	mov	r0, r5
 8013fd0:	f000 ffb8 	bl	8014f44 <__swbuf_r>
 8013fd4:	3001      	adds	r0, #1
 8013fd6:	d1c9      	bne.n	8013f6c <_puts_r+0x30>
 8013fd8:	e7e9      	b.n	8013fae <_puts_r+0x72>
 8013fda:	6823      	ldr	r3, [r4, #0]
 8013fdc:	200a      	movs	r0, #10
 8013fde:	1c5a      	adds	r2, r3, #1
 8013fe0:	6022      	str	r2, [r4, #0]
 8013fe2:	7018      	strb	r0, [r3, #0]
 8013fe4:	e7e5      	b.n	8013fb2 <_puts_r+0x76>
 8013fe6:	bf00      	nop
 8013fe8:	08018928 	.word	0x08018928
 8013fec:	08018948 	.word	0x08018948
 8013ff0:	08018908 	.word	0x08018908

08013ff4 <puts>:
 8013ff4:	4b02      	ldr	r3, [pc, #8]	; (8014000 <puts+0xc>)
 8013ff6:	4601      	mov	r1, r0
 8013ff8:	6818      	ldr	r0, [r3, #0]
 8013ffa:	f7ff bf9f 	b.w	8013f3c <_puts_r>
 8013ffe:	bf00      	nop
 8014000:	2000000c 	.word	0x2000000c

08014004 <nanf>:
 8014004:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801400c <nanf+0x8>
 8014008:	4770      	bx	lr
 801400a:	bf00      	nop
 801400c:	7fc00000 	.word	0x7fc00000

08014010 <sniprintf>:
 8014010:	b40c      	push	{r2, r3}
 8014012:	b530      	push	{r4, r5, lr}
 8014014:	4b17      	ldr	r3, [pc, #92]	; (8014074 <sniprintf+0x64>)
 8014016:	1e0c      	subs	r4, r1, #0
 8014018:	b09d      	sub	sp, #116	; 0x74
 801401a:	681d      	ldr	r5, [r3, #0]
 801401c:	da08      	bge.n	8014030 <sniprintf+0x20>
 801401e:	238b      	movs	r3, #139	; 0x8b
 8014020:	602b      	str	r3, [r5, #0]
 8014022:	f04f 30ff 	mov.w	r0, #4294967295
 8014026:	b01d      	add	sp, #116	; 0x74
 8014028:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801402c:	b002      	add	sp, #8
 801402e:	4770      	bx	lr
 8014030:	f44f 7302 	mov.w	r3, #520	; 0x208
 8014034:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014038:	bf14      	ite	ne
 801403a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801403e:	4623      	moveq	r3, r4
 8014040:	9304      	str	r3, [sp, #16]
 8014042:	9307      	str	r3, [sp, #28]
 8014044:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014048:	9002      	str	r0, [sp, #8]
 801404a:	9006      	str	r0, [sp, #24]
 801404c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014050:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014052:	ab21      	add	r3, sp, #132	; 0x84
 8014054:	a902      	add	r1, sp, #8
 8014056:	4628      	mov	r0, r5
 8014058:	9301      	str	r3, [sp, #4]
 801405a:	f003 f8fb 	bl	8017254 <_svfiprintf_r>
 801405e:	1c43      	adds	r3, r0, #1
 8014060:	bfbc      	itt	lt
 8014062:	238b      	movlt	r3, #139	; 0x8b
 8014064:	602b      	strlt	r3, [r5, #0]
 8014066:	2c00      	cmp	r4, #0
 8014068:	d0dd      	beq.n	8014026 <sniprintf+0x16>
 801406a:	9b02      	ldr	r3, [sp, #8]
 801406c:	2200      	movs	r2, #0
 801406e:	701a      	strb	r2, [r3, #0]
 8014070:	e7d9      	b.n	8014026 <sniprintf+0x16>
 8014072:	bf00      	nop
 8014074:	2000000c 	.word	0x2000000c

08014078 <siprintf>:
 8014078:	b40e      	push	{r1, r2, r3}
 801407a:	b500      	push	{lr}
 801407c:	b09c      	sub	sp, #112	; 0x70
 801407e:	ab1d      	add	r3, sp, #116	; 0x74
 8014080:	9002      	str	r0, [sp, #8]
 8014082:	9006      	str	r0, [sp, #24]
 8014084:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014088:	4809      	ldr	r0, [pc, #36]	; (80140b0 <siprintf+0x38>)
 801408a:	9107      	str	r1, [sp, #28]
 801408c:	9104      	str	r1, [sp, #16]
 801408e:	4909      	ldr	r1, [pc, #36]	; (80140b4 <siprintf+0x3c>)
 8014090:	f853 2b04 	ldr.w	r2, [r3], #4
 8014094:	9105      	str	r1, [sp, #20]
 8014096:	6800      	ldr	r0, [r0, #0]
 8014098:	9301      	str	r3, [sp, #4]
 801409a:	a902      	add	r1, sp, #8
 801409c:	f003 f8da 	bl	8017254 <_svfiprintf_r>
 80140a0:	9b02      	ldr	r3, [sp, #8]
 80140a2:	2200      	movs	r2, #0
 80140a4:	701a      	strb	r2, [r3, #0]
 80140a6:	b01c      	add	sp, #112	; 0x70
 80140a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80140ac:	b003      	add	sp, #12
 80140ae:	4770      	bx	lr
 80140b0:	2000000c 	.word	0x2000000c
 80140b4:	ffff0208 	.word	0xffff0208

080140b8 <siscanf>:
 80140b8:	b40e      	push	{r1, r2, r3}
 80140ba:	b530      	push	{r4, r5, lr}
 80140bc:	b09c      	sub	sp, #112	; 0x70
 80140be:	ac1f      	add	r4, sp, #124	; 0x7c
 80140c0:	f44f 7201 	mov.w	r2, #516	; 0x204
 80140c4:	f854 5b04 	ldr.w	r5, [r4], #4
 80140c8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80140cc:	9002      	str	r0, [sp, #8]
 80140ce:	9006      	str	r0, [sp, #24]
 80140d0:	f7ec f896 	bl	8000200 <strlen>
 80140d4:	4b0b      	ldr	r3, [pc, #44]	; (8014104 <siscanf+0x4c>)
 80140d6:	9003      	str	r0, [sp, #12]
 80140d8:	9007      	str	r0, [sp, #28]
 80140da:	930b      	str	r3, [sp, #44]	; 0x2c
 80140dc:	480a      	ldr	r0, [pc, #40]	; (8014108 <siscanf+0x50>)
 80140de:	9401      	str	r4, [sp, #4]
 80140e0:	2300      	movs	r3, #0
 80140e2:	930f      	str	r3, [sp, #60]	; 0x3c
 80140e4:	9314      	str	r3, [sp, #80]	; 0x50
 80140e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80140ea:	f8ad 3016 	strh.w	r3, [sp, #22]
 80140ee:	462a      	mov	r2, r5
 80140f0:	4623      	mov	r3, r4
 80140f2:	a902      	add	r1, sp, #8
 80140f4:	6800      	ldr	r0, [r0, #0]
 80140f6:	f003 f9ff 	bl	80174f8 <__ssvfiscanf_r>
 80140fa:	b01c      	add	sp, #112	; 0x70
 80140fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014100:	b003      	add	sp, #12
 8014102:	4770      	bx	lr
 8014104:	0801412f 	.word	0x0801412f
 8014108:	2000000c 	.word	0x2000000c

0801410c <__sread>:
 801410c:	b510      	push	{r4, lr}
 801410e:	460c      	mov	r4, r1
 8014110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014114:	f003 fe0e 	bl	8017d34 <_read_r>
 8014118:	2800      	cmp	r0, #0
 801411a:	bfab      	itete	ge
 801411c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801411e:	89a3      	ldrhlt	r3, [r4, #12]
 8014120:	181b      	addge	r3, r3, r0
 8014122:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014126:	bfac      	ite	ge
 8014128:	6563      	strge	r3, [r4, #84]	; 0x54
 801412a:	81a3      	strhlt	r3, [r4, #12]
 801412c:	bd10      	pop	{r4, pc}

0801412e <__seofread>:
 801412e:	2000      	movs	r0, #0
 8014130:	4770      	bx	lr

08014132 <__swrite>:
 8014132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014136:	461f      	mov	r7, r3
 8014138:	898b      	ldrh	r3, [r1, #12]
 801413a:	05db      	lsls	r3, r3, #23
 801413c:	4605      	mov	r5, r0
 801413e:	460c      	mov	r4, r1
 8014140:	4616      	mov	r6, r2
 8014142:	d505      	bpl.n	8014150 <__swrite+0x1e>
 8014144:	2302      	movs	r3, #2
 8014146:	2200      	movs	r2, #0
 8014148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801414c:	f002 fae2 	bl	8016714 <_lseek_r>
 8014150:	89a3      	ldrh	r3, [r4, #12]
 8014152:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014156:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801415a:	81a3      	strh	r3, [r4, #12]
 801415c:	4632      	mov	r2, r6
 801415e:	463b      	mov	r3, r7
 8014160:	4628      	mov	r0, r5
 8014162:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014166:	f000 bf3f 	b.w	8014fe8 <_write_r>

0801416a <__sseek>:
 801416a:	b510      	push	{r4, lr}
 801416c:	460c      	mov	r4, r1
 801416e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014172:	f002 facf 	bl	8016714 <_lseek_r>
 8014176:	1c43      	adds	r3, r0, #1
 8014178:	89a3      	ldrh	r3, [r4, #12]
 801417a:	bf15      	itete	ne
 801417c:	6560      	strne	r0, [r4, #84]	; 0x54
 801417e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014182:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014186:	81a3      	strheq	r3, [r4, #12]
 8014188:	bf18      	it	ne
 801418a:	81a3      	strhne	r3, [r4, #12]
 801418c:	bd10      	pop	{r4, pc}

0801418e <__sclose>:
 801418e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014192:	f000 bfa9 	b.w	80150e8 <_close_r>

08014196 <strcpy>:
 8014196:	4603      	mov	r3, r0
 8014198:	f811 2b01 	ldrb.w	r2, [r1], #1
 801419c:	f803 2b01 	strb.w	r2, [r3], #1
 80141a0:	2a00      	cmp	r2, #0
 80141a2:	d1f9      	bne.n	8014198 <strcpy+0x2>
 80141a4:	4770      	bx	lr

080141a6 <sulp>:
 80141a6:	b570      	push	{r4, r5, r6, lr}
 80141a8:	4604      	mov	r4, r0
 80141aa:	460d      	mov	r5, r1
 80141ac:	ec45 4b10 	vmov	d0, r4, r5
 80141b0:	4616      	mov	r6, r2
 80141b2:	f002 fe0b 	bl	8016dcc <__ulp>
 80141b6:	ec51 0b10 	vmov	r0, r1, d0
 80141ba:	b17e      	cbz	r6, 80141dc <sulp+0x36>
 80141bc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80141c0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	dd09      	ble.n	80141dc <sulp+0x36>
 80141c8:	051b      	lsls	r3, r3, #20
 80141ca:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80141ce:	2400      	movs	r4, #0
 80141d0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80141d4:	4622      	mov	r2, r4
 80141d6:	462b      	mov	r3, r5
 80141d8:	f7ec fa26 	bl	8000628 <__aeabi_dmul>
 80141dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080141e0 <_strtod_l>:
 80141e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141e4:	461f      	mov	r7, r3
 80141e6:	b0a1      	sub	sp, #132	; 0x84
 80141e8:	2300      	movs	r3, #0
 80141ea:	4681      	mov	r9, r0
 80141ec:	4638      	mov	r0, r7
 80141ee:	460e      	mov	r6, r1
 80141f0:	9217      	str	r2, [sp, #92]	; 0x5c
 80141f2:	931c      	str	r3, [sp, #112]	; 0x70
 80141f4:	f002 fa7e 	bl	80166f4 <__localeconv_l>
 80141f8:	4680      	mov	r8, r0
 80141fa:	6800      	ldr	r0, [r0, #0]
 80141fc:	f7ec f800 	bl	8000200 <strlen>
 8014200:	f04f 0a00 	mov.w	sl, #0
 8014204:	4604      	mov	r4, r0
 8014206:	f04f 0b00 	mov.w	fp, #0
 801420a:	961b      	str	r6, [sp, #108]	; 0x6c
 801420c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801420e:	781a      	ldrb	r2, [r3, #0]
 8014210:	2a0d      	cmp	r2, #13
 8014212:	d832      	bhi.n	801427a <_strtod_l+0x9a>
 8014214:	2a09      	cmp	r2, #9
 8014216:	d236      	bcs.n	8014286 <_strtod_l+0xa6>
 8014218:	2a00      	cmp	r2, #0
 801421a:	d03e      	beq.n	801429a <_strtod_l+0xba>
 801421c:	2300      	movs	r3, #0
 801421e:	930d      	str	r3, [sp, #52]	; 0x34
 8014220:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8014222:	782b      	ldrb	r3, [r5, #0]
 8014224:	2b30      	cmp	r3, #48	; 0x30
 8014226:	f040 80ac 	bne.w	8014382 <_strtod_l+0x1a2>
 801422a:	786b      	ldrb	r3, [r5, #1]
 801422c:	2b58      	cmp	r3, #88	; 0x58
 801422e:	d001      	beq.n	8014234 <_strtod_l+0x54>
 8014230:	2b78      	cmp	r3, #120	; 0x78
 8014232:	d167      	bne.n	8014304 <_strtod_l+0x124>
 8014234:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014236:	9301      	str	r3, [sp, #4]
 8014238:	ab1c      	add	r3, sp, #112	; 0x70
 801423a:	9300      	str	r3, [sp, #0]
 801423c:	9702      	str	r7, [sp, #8]
 801423e:	ab1d      	add	r3, sp, #116	; 0x74
 8014240:	4a88      	ldr	r2, [pc, #544]	; (8014464 <_strtod_l+0x284>)
 8014242:	a91b      	add	r1, sp, #108	; 0x6c
 8014244:	4648      	mov	r0, r9
 8014246:	f001 ff6c 	bl	8016122 <__gethex>
 801424a:	f010 0407 	ands.w	r4, r0, #7
 801424e:	4606      	mov	r6, r0
 8014250:	d005      	beq.n	801425e <_strtod_l+0x7e>
 8014252:	2c06      	cmp	r4, #6
 8014254:	d12b      	bne.n	80142ae <_strtod_l+0xce>
 8014256:	3501      	adds	r5, #1
 8014258:	2300      	movs	r3, #0
 801425a:	951b      	str	r5, [sp, #108]	; 0x6c
 801425c:	930d      	str	r3, [sp, #52]	; 0x34
 801425e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014260:	2b00      	cmp	r3, #0
 8014262:	f040 859a 	bne.w	8014d9a <_strtod_l+0xbba>
 8014266:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014268:	b1e3      	cbz	r3, 80142a4 <_strtod_l+0xc4>
 801426a:	4652      	mov	r2, sl
 801426c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8014270:	ec43 2b10 	vmov	d0, r2, r3
 8014274:	b021      	add	sp, #132	; 0x84
 8014276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801427a:	2a2b      	cmp	r2, #43	; 0x2b
 801427c:	d015      	beq.n	80142aa <_strtod_l+0xca>
 801427e:	2a2d      	cmp	r2, #45	; 0x2d
 8014280:	d004      	beq.n	801428c <_strtod_l+0xac>
 8014282:	2a20      	cmp	r2, #32
 8014284:	d1ca      	bne.n	801421c <_strtod_l+0x3c>
 8014286:	3301      	adds	r3, #1
 8014288:	931b      	str	r3, [sp, #108]	; 0x6c
 801428a:	e7bf      	b.n	801420c <_strtod_l+0x2c>
 801428c:	2201      	movs	r2, #1
 801428e:	920d      	str	r2, [sp, #52]	; 0x34
 8014290:	1c5a      	adds	r2, r3, #1
 8014292:	921b      	str	r2, [sp, #108]	; 0x6c
 8014294:	785b      	ldrb	r3, [r3, #1]
 8014296:	2b00      	cmp	r3, #0
 8014298:	d1c2      	bne.n	8014220 <_strtod_l+0x40>
 801429a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801429c:	961b      	str	r6, [sp, #108]	; 0x6c
 801429e:	2b00      	cmp	r3, #0
 80142a0:	f040 8579 	bne.w	8014d96 <_strtod_l+0xbb6>
 80142a4:	4652      	mov	r2, sl
 80142a6:	465b      	mov	r3, fp
 80142a8:	e7e2      	b.n	8014270 <_strtod_l+0x90>
 80142aa:	2200      	movs	r2, #0
 80142ac:	e7ef      	b.n	801428e <_strtod_l+0xae>
 80142ae:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80142b0:	b13a      	cbz	r2, 80142c2 <_strtod_l+0xe2>
 80142b2:	2135      	movs	r1, #53	; 0x35
 80142b4:	a81e      	add	r0, sp, #120	; 0x78
 80142b6:	f002 fe81 	bl	8016fbc <__copybits>
 80142ba:	991c      	ldr	r1, [sp, #112]	; 0x70
 80142bc:	4648      	mov	r0, r9
 80142be:	f002 faed 	bl	801689c <_Bfree>
 80142c2:	3c01      	subs	r4, #1
 80142c4:	2c04      	cmp	r4, #4
 80142c6:	d806      	bhi.n	80142d6 <_strtod_l+0xf6>
 80142c8:	e8df f004 	tbb	[pc, r4]
 80142cc:	1714030a 	.word	0x1714030a
 80142d0:	0a          	.byte	0x0a
 80142d1:	00          	.byte	0x00
 80142d2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80142d6:	0730      	lsls	r0, r6, #28
 80142d8:	d5c1      	bpl.n	801425e <_strtod_l+0x7e>
 80142da:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80142de:	e7be      	b.n	801425e <_strtod_l+0x7e>
 80142e0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80142e4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80142e6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80142ea:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80142ee:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80142f2:	e7f0      	b.n	80142d6 <_strtod_l+0xf6>
 80142f4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8014468 <_strtod_l+0x288>
 80142f8:	e7ed      	b.n	80142d6 <_strtod_l+0xf6>
 80142fa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80142fe:	f04f 3aff 	mov.w	sl, #4294967295
 8014302:	e7e8      	b.n	80142d6 <_strtod_l+0xf6>
 8014304:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014306:	1c5a      	adds	r2, r3, #1
 8014308:	921b      	str	r2, [sp, #108]	; 0x6c
 801430a:	785b      	ldrb	r3, [r3, #1]
 801430c:	2b30      	cmp	r3, #48	; 0x30
 801430e:	d0f9      	beq.n	8014304 <_strtod_l+0x124>
 8014310:	2b00      	cmp	r3, #0
 8014312:	d0a4      	beq.n	801425e <_strtod_l+0x7e>
 8014314:	2301      	movs	r3, #1
 8014316:	2500      	movs	r5, #0
 8014318:	9306      	str	r3, [sp, #24]
 801431a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801431c:	9308      	str	r3, [sp, #32]
 801431e:	9507      	str	r5, [sp, #28]
 8014320:	9505      	str	r5, [sp, #20]
 8014322:	220a      	movs	r2, #10
 8014324:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8014326:	7807      	ldrb	r7, [r0, #0]
 8014328:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 801432c:	b2d9      	uxtb	r1, r3
 801432e:	2909      	cmp	r1, #9
 8014330:	d929      	bls.n	8014386 <_strtod_l+0x1a6>
 8014332:	4622      	mov	r2, r4
 8014334:	f8d8 1000 	ldr.w	r1, [r8]
 8014338:	f003 fd50 	bl	8017ddc <strncmp>
 801433c:	2800      	cmp	r0, #0
 801433e:	d031      	beq.n	80143a4 <_strtod_l+0x1c4>
 8014340:	2000      	movs	r0, #0
 8014342:	9c05      	ldr	r4, [sp, #20]
 8014344:	9004      	str	r0, [sp, #16]
 8014346:	463b      	mov	r3, r7
 8014348:	4602      	mov	r2, r0
 801434a:	2b65      	cmp	r3, #101	; 0x65
 801434c:	d001      	beq.n	8014352 <_strtod_l+0x172>
 801434e:	2b45      	cmp	r3, #69	; 0x45
 8014350:	d114      	bne.n	801437c <_strtod_l+0x19c>
 8014352:	b924      	cbnz	r4, 801435e <_strtod_l+0x17e>
 8014354:	b910      	cbnz	r0, 801435c <_strtod_l+0x17c>
 8014356:	9b06      	ldr	r3, [sp, #24]
 8014358:	2b00      	cmp	r3, #0
 801435a:	d09e      	beq.n	801429a <_strtod_l+0xba>
 801435c:	2400      	movs	r4, #0
 801435e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8014360:	1c73      	adds	r3, r6, #1
 8014362:	931b      	str	r3, [sp, #108]	; 0x6c
 8014364:	7873      	ldrb	r3, [r6, #1]
 8014366:	2b2b      	cmp	r3, #43	; 0x2b
 8014368:	d078      	beq.n	801445c <_strtod_l+0x27c>
 801436a:	2b2d      	cmp	r3, #45	; 0x2d
 801436c:	d070      	beq.n	8014450 <_strtod_l+0x270>
 801436e:	f04f 0c00 	mov.w	ip, #0
 8014372:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8014376:	2f09      	cmp	r7, #9
 8014378:	d97c      	bls.n	8014474 <_strtod_l+0x294>
 801437a:	961b      	str	r6, [sp, #108]	; 0x6c
 801437c:	f04f 0e00 	mov.w	lr, #0
 8014380:	e09a      	b.n	80144b8 <_strtod_l+0x2d8>
 8014382:	2300      	movs	r3, #0
 8014384:	e7c7      	b.n	8014316 <_strtod_l+0x136>
 8014386:	9905      	ldr	r1, [sp, #20]
 8014388:	2908      	cmp	r1, #8
 801438a:	bfdd      	ittte	le
 801438c:	9907      	ldrle	r1, [sp, #28]
 801438e:	fb02 3301 	mlale	r3, r2, r1, r3
 8014392:	9307      	strle	r3, [sp, #28]
 8014394:	fb02 3505 	mlagt	r5, r2, r5, r3
 8014398:	9b05      	ldr	r3, [sp, #20]
 801439a:	3001      	adds	r0, #1
 801439c:	3301      	adds	r3, #1
 801439e:	9305      	str	r3, [sp, #20]
 80143a0:	901b      	str	r0, [sp, #108]	; 0x6c
 80143a2:	e7bf      	b.n	8014324 <_strtod_l+0x144>
 80143a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80143a6:	191a      	adds	r2, r3, r4
 80143a8:	921b      	str	r2, [sp, #108]	; 0x6c
 80143aa:	9a05      	ldr	r2, [sp, #20]
 80143ac:	5d1b      	ldrb	r3, [r3, r4]
 80143ae:	2a00      	cmp	r2, #0
 80143b0:	d037      	beq.n	8014422 <_strtod_l+0x242>
 80143b2:	9c05      	ldr	r4, [sp, #20]
 80143b4:	4602      	mov	r2, r0
 80143b6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80143ba:	2909      	cmp	r1, #9
 80143bc:	d913      	bls.n	80143e6 <_strtod_l+0x206>
 80143be:	2101      	movs	r1, #1
 80143c0:	9104      	str	r1, [sp, #16]
 80143c2:	e7c2      	b.n	801434a <_strtod_l+0x16a>
 80143c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80143c6:	1c5a      	adds	r2, r3, #1
 80143c8:	921b      	str	r2, [sp, #108]	; 0x6c
 80143ca:	785b      	ldrb	r3, [r3, #1]
 80143cc:	3001      	adds	r0, #1
 80143ce:	2b30      	cmp	r3, #48	; 0x30
 80143d0:	d0f8      	beq.n	80143c4 <_strtod_l+0x1e4>
 80143d2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80143d6:	2a08      	cmp	r2, #8
 80143d8:	f200 84e4 	bhi.w	8014da4 <_strtod_l+0xbc4>
 80143dc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80143de:	9208      	str	r2, [sp, #32]
 80143e0:	4602      	mov	r2, r0
 80143e2:	2000      	movs	r0, #0
 80143e4:	4604      	mov	r4, r0
 80143e6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80143ea:	f100 0101 	add.w	r1, r0, #1
 80143ee:	d012      	beq.n	8014416 <_strtod_l+0x236>
 80143f0:	440a      	add	r2, r1
 80143f2:	eb00 0c04 	add.w	ip, r0, r4
 80143f6:	4621      	mov	r1, r4
 80143f8:	270a      	movs	r7, #10
 80143fa:	458c      	cmp	ip, r1
 80143fc:	d113      	bne.n	8014426 <_strtod_l+0x246>
 80143fe:	1821      	adds	r1, r4, r0
 8014400:	2908      	cmp	r1, #8
 8014402:	f104 0401 	add.w	r4, r4, #1
 8014406:	4404      	add	r4, r0
 8014408:	dc19      	bgt.n	801443e <_strtod_l+0x25e>
 801440a:	9b07      	ldr	r3, [sp, #28]
 801440c:	210a      	movs	r1, #10
 801440e:	fb01 e303 	mla	r3, r1, r3, lr
 8014412:	9307      	str	r3, [sp, #28]
 8014414:	2100      	movs	r1, #0
 8014416:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014418:	1c58      	adds	r0, r3, #1
 801441a:	901b      	str	r0, [sp, #108]	; 0x6c
 801441c:	785b      	ldrb	r3, [r3, #1]
 801441e:	4608      	mov	r0, r1
 8014420:	e7c9      	b.n	80143b6 <_strtod_l+0x1d6>
 8014422:	9805      	ldr	r0, [sp, #20]
 8014424:	e7d3      	b.n	80143ce <_strtod_l+0x1ee>
 8014426:	2908      	cmp	r1, #8
 8014428:	f101 0101 	add.w	r1, r1, #1
 801442c:	dc03      	bgt.n	8014436 <_strtod_l+0x256>
 801442e:	9b07      	ldr	r3, [sp, #28]
 8014430:	437b      	muls	r3, r7
 8014432:	9307      	str	r3, [sp, #28]
 8014434:	e7e1      	b.n	80143fa <_strtod_l+0x21a>
 8014436:	2910      	cmp	r1, #16
 8014438:	bfd8      	it	le
 801443a:	437d      	mulle	r5, r7
 801443c:	e7dd      	b.n	80143fa <_strtod_l+0x21a>
 801443e:	2c10      	cmp	r4, #16
 8014440:	bfdc      	itt	le
 8014442:	210a      	movle	r1, #10
 8014444:	fb01 e505 	mlale	r5, r1, r5, lr
 8014448:	e7e4      	b.n	8014414 <_strtod_l+0x234>
 801444a:	2301      	movs	r3, #1
 801444c:	9304      	str	r3, [sp, #16]
 801444e:	e781      	b.n	8014354 <_strtod_l+0x174>
 8014450:	f04f 0c01 	mov.w	ip, #1
 8014454:	1cb3      	adds	r3, r6, #2
 8014456:	931b      	str	r3, [sp, #108]	; 0x6c
 8014458:	78b3      	ldrb	r3, [r6, #2]
 801445a:	e78a      	b.n	8014372 <_strtod_l+0x192>
 801445c:	f04f 0c00 	mov.w	ip, #0
 8014460:	e7f8      	b.n	8014454 <_strtod_l+0x274>
 8014462:	bf00      	nop
 8014464:	080188a4 	.word	0x080188a4
 8014468:	7ff00000 	.word	0x7ff00000
 801446c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801446e:	1c5f      	adds	r7, r3, #1
 8014470:	971b      	str	r7, [sp, #108]	; 0x6c
 8014472:	785b      	ldrb	r3, [r3, #1]
 8014474:	2b30      	cmp	r3, #48	; 0x30
 8014476:	d0f9      	beq.n	801446c <_strtod_l+0x28c>
 8014478:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 801447c:	2f08      	cmp	r7, #8
 801447e:	f63f af7d 	bhi.w	801437c <_strtod_l+0x19c>
 8014482:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8014486:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014488:	930a      	str	r3, [sp, #40]	; 0x28
 801448a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801448c:	1c5f      	adds	r7, r3, #1
 801448e:	971b      	str	r7, [sp, #108]	; 0x6c
 8014490:	785b      	ldrb	r3, [r3, #1]
 8014492:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8014496:	f1b8 0f09 	cmp.w	r8, #9
 801449a:	d937      	bls.n	801450c <_strtod_l+0x32c>
 801449c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801449e:	1a7f      	subs	r7, r7, r1
 80144a0:	2f08      	cmp	r7, #8
 80144a2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80144a6:	dc37      	bgt.n	8014518 <_strtod_l+0x338>
 80144a8:	45be      	cmp	lr, r7
 80144aa:	bfa8      	it	ge
 80144ac:	46be      	movge	lr, r7
 80144ae:	f1bc 0f00 	cmp.w	ip, #0
 80144b2:	d001      	beq.n	80144b8 <_strtod_l+0x2d8>
 80144b4:	f1ce 0e00 	rsb	lr, lr, #0
 80144b8:	2c00      	cmp	r4, #0
 80144ba:	d151      	bne.n	8014560 <_strtod_l+0x380>
 80144bc:	2800      	cmp	r0, #0
 80144be:	f47f aece 	bne.w	801425e <_strtod_l+0x7e>
 80144c2:	9a06      	ldr	r2, [sp, #24]
 80144c4:	2a00      	cmp	r2, #0
 80144c6:	f47f aeca 	bne.w	801425e <_strtod_l+0x7e>
 80144ca:	9a04      	ldr	r2, [sp, #16]
 80144cc:	2a00      	cmp	r2, #0
 80144ce:	f47f aee4 	bne.w	801429a <_strtod_l+0xba>
 80144d2:	2b4e      	cmp	r3, #78	; 0x4e
 80144d4:	d027      	beq.n	8014526 <_strtod_l+0x346>
 80144d6:	dc21      	bgt.n	801451c <_strtod_l+0x33c>
 80144d8:	2b49      	cmp	r3, #73	; 0x49
 80144da:	f47f aede 	bne.w	801429a <_strtod_l+0xba>
 80144de:	49a0      	ldr	r1, [pc, #640]	; (8014760 <_strtod_l+0x580>)
 80144e0:	a81b      	add	r0, sp, #108	; 0x6c
 80144e2:	f002 f851 	bl	8016588 <__match>
 80144e6:	2800      	cmp	r0, #0
 80144e8:	f43f aed7 	beq.w	801429a <_strtod_l+0xba>
 80144ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80144ee:	499d      	ldr	r1, [pc, #628]	; (8014764 <_strtod_l+0x584>)
 80144f0:	3b01      	subs	r3, #1
 80144f2:	a81b      	add	r0, sp, #108	; 0x6c
 80144f4:	931b      	str	r3, [sp, #108]	; 0x6c
 80144f6:	f002 f847 	bl	8016588 <__match>
 80144fa:	b910      	cbnz	r0, 8014502 <_strtod_l+0x322>
 80144fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80144fe:	3301      	adds	r3, #1
 8014500:	931b      	str	r3, [sp, #108]	; 0x6c
 8014502:	f8df b274 	ldr.w	fp, [pc, #628]	; 8014778 <_strtod_l+0x598>
 8014506:	f04f 0a00 	mov.w	sl, #0
 801450a:	e6a8      	b.n	801425e <_strtod_l+0x7e>
 801450c:	210a      	movs	r1, #10
 801450e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8014512:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8014516:	e7b8      	b.n	801448a <_strtod_l+0x2aa>
 8014518:	46be      	mov	lr, r7
 801451a:	e7c8      	b.n	80144ae <_strtod_l+0x2ce>
 801451c:	2b69      	cmp	r3, #105	; 0x69
 801451e:	d0de      	beq.n	80144de <_strtod_l+0x2fe>
 8014520:	2b6e      	cmp	r3, #110	; 0x6e
 8014522:	f47f aeba 	bne.w	801429a <_strtod_l+0xba>
 8014526:	4990      	ldr	r1, [pc, #576]	; (8014768 <_strtod_l+0x588>)
 8014528:	a81b      	add	r0, sp, #108	; 0x6c
 801452a:	f002 f82d 	bl	8016588 <__match>
 801452e:	2800      	cmp	r0, #0
 8014530:	f43f aeb3 	beq.w	801429a <_strtod_l+0xba>
 8014534:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014536:	781b      	ldrb	r3, [r3, #0]
 8014538:	2b28      	cmp	r3, #40	; 0x28
 801453a:	d10e      	bne.n	801455a <_strtod_l+0x37a>
 801453c:	aa1e      	add	r2, sp, #120	; 0x78
 801453e:	498b      	ldr	r1, [pc, #556]	; (801476c <_strtod_l+0x58c>)
 8014540:	a81b      	add	r0, sp, #108	; 0x6c
 8014542:	f002 f835 	bl	80165b0 <__hexnan>
 8014546:	2805      	cmp	r0, #5
 8014548:	d107      	bne.n	801455a <_strtod_l+0x37a>
 801454a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801454c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8014550:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8014554:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8014558:	e681      	b.n	801425e <_strtod_l+0x7e>
 801455a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8014780 <_strtod_l+0x5a0>
 801455e:	e7d2      	b.n	8014506 <_strtod_l+0x326>
 8014560:	ebae 0302 	sub.w	r3, lr, r2
 8014564:	9306      	str	r3, [sp, #24]
 8014566:	9b05      	ldr	r3, [sp, #20]
 8014568:	9807      	ldr	r0, [sp, #28]
 801456a:	2b00      	cmp	r3, #0
 801456c:	bf08      	it	eq
 801456e:	4623      	moveq	r3, r4
 8014570:	2c10      	cmp	r4, #16
 8014572:	9305      	str	r3, [sp, #20]
 8014574:	46a0      	mov	r8, r4
 8014576:	bfa8      	it	ge
 8014578:	f04f 0810 	movge.w	r8, #16
 801457c:	f7eb ffda 	bl	8000534 <__aeabi_ui2d>
 8014580:	2c09      	cmp	r4, #9
 8014582:	4682      	mov	sl, r0
 8014584:	468b      	mov	fp, r1
 8014586:	dc13      	bgt.n	80145b0 <_strtod_l+0x3d0>
 8014588:	9b06      	ldr	r3, [sp, #24]
 801458a:	2b00      	cmp	r3, #0
 801458c:	f43f ae67 	beq.w	801425e <_strtod_l+0x7e>
 8014590:	9b06      	ldr	r3, [sp, #24]
 8014592:	dd7a      	ble.n	801468a <_strtod_l+0x4aa>
 8014594:	2b16      	cmp	r3, #22
 8014596:	dc61      	bgt.n	801465c <_strtod_l+0x47c>
 8014598:	4a75      	ldr	r2, [pc, #468]	; (8014770 <_strtod_l+0x590>)
 801459a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 801459e:	e9de 0100 	ldrd	r0, r1, [lr]
 80145a2:	4652      	mov	r2, sl
 80145a4:	465b      	mov	r3, fp
 80145a6:	f7ec f83f 	bl	8000628 <__aeabi_dmul>
 80145aa:	4682      	mov	sl, r0
 80145ac:	468b      	mov	fp, r1
 80145ae:	e656      	b.n	801425e <_strtod_l+0x7e>
 80145b0:	4b6f      	ldr	r3, [pc, #444]	; (8014770 <_strtod_l+0x590>)
 80145b2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80145b6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80145ba:	f7ec f835 	bl	8000628 <__aeabi_dmul>
 80145be:	4606      	mov	r6, r0
 80145c0:	4628      	mov	r0, r5
 80145c2:	460f      	mov	r7, r1
 80145c4:	f7eb ffb6 	bl	8000534 <__aeabi_ui2d>
 80145c8:	4602      	mov	r2, r0
 80145ca:	460b      	mov	r3, r1
 80145cc:	4630      	mov	r0, r6
 80145ce:	4639      	mov	r1, r7
 80145d0:	f7eb fe74 	bl	80002bc <__adddf3>
 80145d4:	2c0f      	cmp	r4, #15
 80145d6:	4682      	mov	sl, r0
 80145d8:	468b      	mov	fp, r1
 80145da:	ddd5      	ble.n	8014588 <_strtod_l+0x3a8>
 80145dc:	9b06      	ldr	r3, [sp, #24]
 80145de:	eba4 0808 	sub.w	r8, r4, r8
 80145e2:	4498      	add	r8, r3
 80145e4:	f1b8 0f00 	cmp.w	r8, #0
 80145e8:	f340 8096 	ble.w	8014718 <_strtod_l+0x538>
 80145ec:	f018 030f 	ands.w	r3, r8, #15
 80145f0:	d00a      	beq.n	8014608 <_strtod_l+0x428>
 80145f2:	495f      	ldr	r1, [pc, #380]	; (8014770 <_strtod_l+0x590>)
 80145f4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80145f8:	4652      	mov	r2, sl
 80145fa:	465b      	mov	r3, fp
 80145fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014600:	f7ec f812 	bl	8000628 <__aeabi_dmul>
 8014604:	4682      	mov	sl, r0
 8014606:	468b      	mov	fp, r1
 8014608:	f038 080f 	bics.w	r8, r8, #15
 801460c:	d073      	beq.n	80146f6 <_strtod_l+0x516>
 801460e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8014612:	dd47      	ble.n	80146a4 <_strtod_l+0x4c4>
 8014614:	2400      	movs	r4, #0
 8014616:	46a0      	mov	r8, r4
 8014618:	9407      	str	r4, [sp, #28]
 801461a:	9405      	str	r4, [sp, #20]
 801461c:	2322      	movs	r3, #34	; 0x22
 801461e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8014778 <_strtod_l+0x598>
 8014622:	f8c9 3000 	str.w	r3, [r9]
 8014626:	f04f 0a00 	mov.w	sl, #0
 801462a:	9b07      	ldr	r3, [sp, #28]
 801462c:	2b00      	cmp	r3, #0
 801462e:	f43f ae16 	beq.w	801425e <_strtod_l+0x7e>
 8014632:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014634:	4648      	mov	r0, r9
 8014636:	f002 f931 	bl	801689c <_Bfree>
 801463a:	9905      	ldr	r1, [sp, #20]
 801463c:	4648      	mov	r0, r9
 801463e:	f002 f92d 	bl	801689c <_Bfree>
 8014642:	4641      	mov	r1, r8
 8014644:	4648      	mov	r0, r9
 8014646:	f002 f929 	bl	801689c <_Bfree>
 801464a:	9907      	ldr	r1, [sp, #28]
 801464c:	4648      	mov	r0, r9
 801464e:	f002 f925 	bl	801689c <_Bfree>
 8014652:	4621      	mov	r1, r4
 8014654:	4648      	mov	r0, r9
 8014656:	f002 f921 	bl	801689c <_Bfree>
 801465a:	e600      	b.n	801425e <_strtod_l+0x7e>
 801465c:	9a06      	ldr	r2, [sp, #24]
 801465e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8014662:	4293      	cmp	r3, r2
 8014664:	dbba      	blt.n	80145dc <_strtod_l+0x3fc>
 8014666:	4d42      	ldr	r5, [pc, #264]	; (8014770 <_strtod_l+0x590>)
 8014668:	f1c4 040f 	rsb	r4, r4, #15
 801466c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8014670:	4652      	mov	r2, sl
 8014672:	465b      	mov	r3, fp
 8014674:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014678:	f7eb ffd6 	bl	8000628 <__aeabi_dmul>
 801467c:	9b06      	ldr	r3, [sp, #24]
 801467e:	1b1c      	subs	r4, r3, r4
 8014680:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8014684:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014688:	e78d      	b.n	80145a6 <_strtod_l+0x3c6>
 801468a:	f113 0f16 	cmn.w	r3, #22
 801468e:	dba5      	blt.n	80145dc <_strtod_l+0x3fc>
 8014690:	4a37      	ldr	r2, [pc, #220]	; (8014770 <_strtod_l+0x590>)
 8014692:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8014696:	e9d2 2300 	ldrd	r2, r3, [r2]
 801469a:	4650      	mov	r0, sl
 801469c:	4659      	mov	r1, fp
 801469e:	f7ec f8ed 	bl	800087c <__aeabi_ddiv>
 80146a2:	e782      	b.n	80145aa <_strtod_l+0x3ca>
 80146a4:	2300      	movs	r3, #0
 80146a6:	4e33      	ldr	r6, [pc, #204]	; (8014774 <_strtod_l+0x594>)
 80146a8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80146ac:	4650      	mov	r0, sl
 80146ae:	4659      	mov	r1, fp
 80146b0:	461d      	mov	r5, r3
 80146b2:	f1b8 0f01 	cmp.w	r8, #1
 80146b6:	dc21      	bgt.n	80146fc <_strtod_l+0x51c>
 80146b8:	b10b      	cbz	r3, 80146be <_strtod_l+0x4de>
 80146ba:	4682      	mov	sl, r0
 80146bc:	468b      	mov	fp, r1
 80146be:	4b2d      	ldr	r3, [pc, #180]	; (8014774 <_strtod_l+0x594>)
 80146c0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80146c4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80146c8:	4652      	mov	r2, sl
 80146ca:	465b      	mov	r3, fp
 80146cc:	e9d5 0100 	ldrd	r0, r1, [r5]
 80146d0:	f7eb ffaa 	bl	8000628 <__aeabi_dmul>
 80146d4:	4b28      	ldr	r3, [pc, #160]	; (8014778 <_strtod_l+0x598>)
 80146d6:	460a      	mov	r2, r1
 80146d8:	400b      	ands	r3, r1
 80146da:	4928      	ldr	r1, [pc, #160]	; (801477c <_strtod_l+0x59c>)
 80146dc:	428b      	cmp	r3, r1
 80146de:	4682      	mov	sl, r0
 80146e0:	d898      	bhi.n	8014614 <_strtod_l+0x434>
 80146e2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80146e6:	428b      	cmp	r3, r1
 80146e8:	bf86      	itte	hi
 80146ea:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8014784 <_strtod_l+0x5a4>
 80146ee:	f04f 3aff 	movhi.w	sl, #4294967295
 80146f2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80146f6:	2300      	movs	r3, #0
 80146f8:	9304      	str	r3, [sp, #16]
 80146fa:	e077      	b.n	80147ec <_strtod_l+0x60c>
 80146fc:	f018 0f01 	tst.w	r8, #1
 8014700:	d006      	beq.n	8014710 <_strtod_l+0x530>
 8014702:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8014706:	e9d3 2300 	ldrd	r2, r3, [r3]
 801470a:	f7eb ff8d 	bl	8000628 <__aeabi_dmul>
 801470e:	2301      	movs	r3, #1
 8014710:	3501      	adds	r5, #1
 8014712:	ea4f 0868 	mov.w	r8, r8, asr #1
 8014716:	e7cc      	b.n	80146b2 <_strtod_l+0x4d2>
 8014718:	d0ed      	beq.n	80146f6 <_strtod_l+0x516>
 801471a:	f1c8 0800 	rsb	r8, r8, #0
 801471e:	f018 020f 	ands.w	r2, r8, #15
 8014722:	d00a      	beq.n	801473a <_strtod_l+0x55a>
 8014724:	4b12      	ldr	r3, [pc, #72]	; (8014770 <_strtod_l+0x590>)
 8014726:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801472a:	4650      	mov	r0, sl
 801472c:	4659      	mov	r1, fp
 801472e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014732:	f7ec f8a3 	bl	800087c <__aeabi_ddiv>
 8014736:	4682      	mov	sl, r0
 8014738:	468b      	mov	fp, r1
 801473a:	ea5f 1828 	movs.w	r8, r8, asr #4
 801473e:	d0da      	beq.n	80146f6 <_strtod_l+0x516>
 8014740:	f1b8 0f1f 	cmp.w	r8, #31
 8014744:	dd20      	ble.n	8014788 <_strtod_l+0x5a8>
 8014746:	2400      	movs	r4, #0
 8014748:	46a0      	mov	r8, r4
 801474a:	9407      	str	r4, [sp, #28]
 801474c:	9405      	str	r4, [sp, #20]
 801474e:	2322      	movs	r3, #34	; 0x22
 8014750:	f04f 0a00 	mov.w	sl, #0
 8014754:	f04f 0b00 	mov.w	fp, #0
 8014758:	f8c9 3000 	str.w	r3, [r9]
 801475c:	e765      	b.n	801462a <_strtod_l+0x44a>
 801475e:	bf00      	nop
 8014760:	08018871 	.word	0x08018871
 8014764:	080188fb 	.word	0x080188fb
 8014768:	08018879 	.word	0x08018879
 801476c:	080188b8 	.word	0x080188b8
 8014770:	080189a0 	.word	0x080189a0
 8014774:	08018978 	.word	0x08018978
 8014778:	7ff00000 	.word	0x7ff00000
 801477c:	7ca00000 	.word	0x7ca00000
 8014780:	fff80000 	.word	0xfff80000
 8014784:	7fefffff 	.word	0x7fefffff
 8014788:	f018 0310 	ands.w	r3, r8, #16
 801478c:	bf18      	it	ne
 801478e:	236a      	movne	r3, #106	; 0x6a
 8014790:	4da0      	ldr	r5, [pc, #640]	; (8014a14 <_strtod_l+0x834>)
 8014792:	9304      	str	r3, [sp, #16]
 8014794:	4650      	mov	r0, sl
 8014796:	4659      	mov	r1, fp
 8014798:	2300      	movs	r3, #0
 801479a:	f1b8 0f00 	cmp.w	r8, #0
 801479e:	f300 810a 	bgt.w	80149b6 <_strtod_l+0x7d6>
 80147a2:	b10b      	cbz	r3, 80147a8 <_strtod_l+0x5c8>
 80147a4:	4682      	mov	sl, r0
 80147a6:	468b      	mov	fp, r1
 80147a8:	9b04      	ldr	r3, [sp, #16]
 80147aa:	b1bb      	cbz	r3, 80147dc <_strtod_l+0x5fc>
 80147ac:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80147b0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	4659      	mov	r1, fp
 80147b8:	dd10      	ble.n	80147dc <_strtod_l+0x5fc>
 80147ba:	2b1f      	cmp	r3, #31
 80147bc:	f340 8107 	ble.w	80149ce <_strtod_l+0x7ee>
 80147c0:	2b34      	cmp	r3, #52	; 0x34
 80147c2:	bfde      	ittt	le
 80147c4:	3b20      	suble	r3, #32
 80147c6:	f04f 32ff 	movle.w	r2, #4294967295
 80147ca:	fa02 f303 	lslle.w	r3, r2, r3
 80147ce:	f04f 0a00 	mov.w	sl, #0
 80147d2:	bfcc      	ite	gt
 80147d4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80147d8:	ea03 0b01 	andle.w	fp, r3, r1
 80147dc:	2200      	movs	r2, #0
 80147de:	2300      	movs	r3, #0
 80147e0:	4650      	mov	r0, sl
 80147e2:	4659      	mov	r1, fp
 80147e4:	f7ec f988 	bl	8000af8 <__aeabi_dcmpeq>
 80147e8:	2800      	cmp	r0, #0
 80147ea:	d1ac      	bne.n	8014746 <_strtod_l+0x566>
 80147ec:	9b07      	ldr	r3, [sp, #28]
 80147ee:	9300      	str	r3, [sp, #0]
 80147f0:	9a05      	ldr	r2, [sp, #20]
 80147f2:	9908      	ldr	r1, [sp, #32]
 80147f4:	4623      	mov	r3, r4
 80147f6:	4648      	mov	r0, r9
 80147f8:	f002 f8a2 	bl	8016940 <__s2b>
 80147fc:	9007      	str	r0, [sp, #28]
 80147fe:	2800      	cmp	r0, #0
 8014800:	f43f af08 	beq.w	8014614 <_strtod_l+0x434>
 8014804:	9a06      	ldr	r2, [sp, #24]
 8014806:	9b06      	ldr	r3, [sp, #24]
 8014808:	2a00      	cmp	r2, #0
 801480a:	f1c3 0300 	rsb	r3, r3, #0
 801480e:	bfa8      	it	ge
 8014810:	2300      	movge	r3, #0
 8014812:	930e      	str	r3, [sp, #56]	; 0x38
 8014814:	2400      	movs	r4, #0
 8014816:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801481a:	9316      	str	r3, [sp, #88]	; 0x58
 801481c:	46a0      	mov	r8, r4
 801481e:	9b07      	ldr	r3, [sp, #28]
 8014820:	4648      	mov	r0, r9
 8014822:	6859      	ldr	r1, [r3, #4]
 8014824:	f002 f806 	bl	8016834 <_Balloc>
 8014828:	9005      	str	r0, [sp, #20]
 801482a:	2800      	cmp	r0, #0
 801482c:	f43f aef6 	beq.w	801461c <_strtod_l+0x43c>
 8014830:	9b07      	ldr	r3, [sp, #28]
 8014832:	691a      	ldr	r2, [r3, #16]
 8014834:	3202      	adds	r2, #2
 8014836:	f103 010c 	add.w	r1, r3, #12
 801483a:	0092      	lsls	r2, r2, #2
 801483c:	300c      	adds	r0, #12
 801483e:	f7fe fcff 	bl	8013240 <memcpy>
 8014842:	aa1e      	add	r2, sp, #120	; 0x78
 8014844:	a91d      	add	r1, sp, #116	; 0x74
 8014846:	ec4b ab10 	vmov	d0, sl, fp
 801484a:	4648      	mov	r0, r9
 801484c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8014850:	f002 fb32 	bl	8016eb8 <__d2b>
 8014854:	901c      	str	r0, [sp, #112]	; 0x70
 8014856:	2800      	cmp	r0, #0
 8014858:	f43f aee0 	beq.w	801461c <_strtod_l+0x43c>
 801485c:	2101      	movs	r1, #1
 801485e:	4648      	mov	r0, r9
 8014860:	f002 f8fa 	bl	8016a58 <__i2b>
 8014864:	4680      	mov	r8, r0
 8014866:	2800      	cmp	r0, #0
 8014868:	f43f aed8 	beq.w	801461c <_strtod_l+0x43c>
 801486c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801486e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014870:	2e00      	cmp	r6, #0
 8014872:	bfab      	itete	ge
 8014874:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8014876:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8014878:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 801487a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 801487c:	bfac      	ite	ge
 801487e:	18f7      	addge	r7, r6, r3
 8014880:	1b9d      	sublt	r5, r3, r6
 8014882:	9b04      	ldr	r3, [sp, #16]
 8014884:	1af6      	subs	r6, r6, r3
 8014886:	4416      	add	r6, r2
 8014888:	4b63      	ldr	r3, [pc, #396]	; (8014a18 <_strtod_l+0x838>)
 801488a:	3e01      	subs	r6, #1
 801488c:	429e      	cmp	r6, r3
 801488e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8014892:	f280 80af 	bge.w	80149f4 <_strtod_l+0x814>
 8014896:	1b9b      	subs	r3, r3, r6
 8014898:	2b1f      	cmp	r3, #31
 801489a:	eba2 0203 	sub.w	r2, r2, r3
 801489e:	f04f 0101 	mov.w	r1, #1
 80148a2:	f300 809b 	bgt.w	80149dc <_strtod_l+0x7fc>
 80148a6:	fa01 f303 	lsl.w	r3, r1, r3
 80148aa:	930f      	str	r3, [sp, #60]	; 0x3c
 80148ac:	2300      	movs	r3, #0
 80148ae:	930a      	str	r3, [sp, #40]	; 0x28
 80148b0:	18be      	adds	r6, r7, r2
 80148b2:	9b04      	ldr	r3, [sp, #16]
 80148b4:	42b7      	cmp	r7, r6
 80148b6:	4415      	add	r5, r2
 80148b8:	441d      	add	r5, r3
 80148ba:	463b      	mov	r3, r7
 80148bc:	bfa8      	it	ge
 80148be:	4633      	movge	r3, r6
 80148c0:	42ab      	cmp	r3, r5
 80148c2:	bfa8      	it	ge
 80148c4:	462b      	movge	r3, r5
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	bfc2      	ittt	gt
 80148ca:	1af6      	subgt	r6, r6, r3
 80148cc:	1aed      	subgt	r5, r5, r3
 80148ce:	1aff      	subgt	r7, r7, r3
 80148d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80148d2:	b1bb      	cbz	r3, 8014904 <_strtod_l+0x724>
 80148d4:	4641      	mov	r1, r8
 80148d6:	461a      	mov	r2, r3
 80148d8:	4648      	mov	r0, r9
 80148da:	f002 f95d 	bl	8016b98 <__pow5mult>
 80148de:	4680      	mov	r8, r0
 80148e0:	2800      	cmp	r0, #0
 80148e2:	f43f ae9b 	beq.w	801461c <_strtod_l+0x43c>
 80148e6:	4601      	mov	r1, r0
 80148e8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80148ea:	4648      	mov	r0, r9
 80148ec:	f002 f8bd 	bl	8016a6a <__multiply>
 80148f0:	900c      	str	r0, [sp, #48]	; 0x30
 80148f2:	2800      	cmp	r0, #0
 80148f4:	f43f ae92 	beq.w	801461c <_strtod_l+0x43c>
 80148f8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80148fa:	4648      	mov	r0, r9
 80148fc:	f001 ffce 	bl	801689c <_Bfree>
 8014900:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014902:	931c      	str	r3, [sp, #112]	; 0x70
 8014904:	2e00      	cmp	r6, #0
 8014906:	dc7a      	bgt.n	80149fe <_strtod_l+0x81e>
 8014908:	9b06      	ldr	r3, [sp, #24]
 801490a:	2b00      	cmp	r3, #0
 801490c:	dd08      	ble.n	8014920 <_strtod_l+0x740>
 801490e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014910:	9905      	ldr	r1, [sp, #20]
 8014912:	4648      	mov	r0, r9
 8014914:	f002 f940 	bl	8016b98 <__pow5mult>
 8014918:	9005      	str	r0, [sp, #20]
 801491a:	2800      	cmp	r0, #0
 801491c:	f43f ae7e 	beq.w	801461c <_strtod_l+0x43c>
 8014920:	2d00      	cmp	r5, #0
 8014922:	dd08      	ble.n	8014936 <_strtod_l+0x756>
 8014924:	462a      	mov	r2, r5
 8014926:	9905      	ldr	r1, [sp, #20]
 8014928:	4648      	mov	r0, r9
 801492a:	f002 f983 	bl	8016c34 <__lshift>
 801492e:	9005      	str	r0, [sp, #20]
 8014930:	2800      	cmp	r0, #0
 8014932:	f43f ae73 	beq.w	801461c <_strtod_l+0x43c>
 8014936:	2f00      	cmp	r7, #0
 8014938:	dd08      	ble.n	801494c <_strtod_l+0x76c>
 801493a:	4641      	mov	r1, r8
 801493c:	463a      	mov	r2, r7
 801493e:	4648      	mov	r0, r9
 8014940:	f002 f978 	bl	8016c34 <__lshift>
 8014944:	4680      	mov	r8, r0
 8014946:	2800      	cmp	r0, #0
 8014948:	f43f ae68 	beq.w	801461c <_strtod_l+0x43c>
 801494c:	9a05      	ldr	r2, [sp, #20]
 801494e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014950:	4648      	mov	r0, r9
 8014952:	f002 f9dd 	bl	8016d10 <__mdiff>
 8014956:	4604      	mov	r4, r0
 8014958:	2800      	cmp	r0, #0
 801495a:	f43f ae5f 	beq.w	801461c <_strtod_l+0x43c>
 801495e:	68c3      	ldr	r3, [r0, #12]
 8014960:	930c      	str	r3, [sp, #48]	; 0x30
 8014962:	2300      	movs	r3, #0
 8014964:	60c3      	str	r3, [r0, #12]
 8014966:	4641      	mov	r1, r8
 8014968:	f002 f9b8 	bl	8016cdc <__mcmp>
 801496c:	2800      	cmp	r0, #0
 801496e:	da55      	bge.n	8014a1c <_strtod_l+0x83c>
 8014970:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014972:	b9e3      	cbnz	r3, 80149ae <_strtod_l+0x7ce>
 8014974:	f1ba 0f00 	cmp.w	sl, #0
 8014978:	d119      	bne.n	80149ae <_strtod_l+0x7ce>
 801497a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801497e:	b9b3      	cbnz	r3, 80149ae <_strtod_l+0x7ce>
 8014980:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014984:	0d1b      	lsrs	r3, r3, #20
 8014986:	051b      	lsls	r3, r3, #20
 8014988:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801498c:	d90f      	bls.n	80149ae <_strtod_l+0x7ce>
 801498e:	6963      	ldr	r3, [r4, #20]
 8014990:	b913      	cbnz	r3, 8014998 <_strtod_l+0x7b8>
 8014992:	6923      	ldr	r3, [r4, #16]
 8014994:	2b01      	cmp	r3, #1
 8014996:	dd0a      	ble.n	80149ae <_strtod_l+0x7ce>
 8014998:	4621      	mov	r1, r4
 801499a:	2201      	movs	r2, #1
 801499c:	4648      	mov	r0, r9
 801499e:	f002 f949 	bl	8016c34 <__lshift>
 80149a2:	4641      	mov	r1, r8
 80149a4:	4604      	mov	r4, r0
 80149a6:	f002 f999 	bl	8016cdc <__mcmp>
 80149aa:	2800      	cmp	r0, #0
 80149ac:	dc67      	bgt.n	8014a7e <_strtod_l+0x89e>
 80149ae:	9b04      	ldr	r3, [sp, #16]
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d171      	bne.n	8014a98 <_strtod_l+0x8b8>
 80149b4:	e63d      	b.n	8014632 <_strtod_l+0x452>
 80149b6:	f018 0f01 	tst.w	r8, #1
 80149ba:	d004      	beq.n	80149c6 <_strtod_l+0x7e6>
 80149bc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80149c0:	f7eb fe32 	bl	8000628 <__aeabi_dmul>
 80149c4:	2301      	movs	r3, #1
 80149c6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80149ca:	3508      	adds	r5, #8
 80149cc:	e6e5      	b.n	801479a <_strtod_l+0x5ba>
 80149ce:	f04f 32ff 	mov.w	r2, #4294967295
 80149d2:	fa02 f303 	lsl.w	r3, r2, r3
 80149d6:	ea03 0a0a 	and.w	sl, r3, sl
 80149da:	e6ff      	b.n	80147dc <_strtod_l+0x5fc>
 80149dc:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80149e0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80149e4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80149e8:	36e2      	adds	r6, #226	; 0xe2
 80149ea:	fa01 f306 	lsl.w	r3, r1, r6
 80149ee:	930a      	str	r3, [sp, #40]	; 0x28
 80149f0:	910f      	str	r1, [sp, #60]	; 0x3c
 80149f2:	e75d      	b.n	80148b0 <_strtod_l+0x6d0>
 80149f4:	2300      	movs	r3, #0
 80149f6:	930a      	str	r3, [sp, #40]	; 0x28
 80149f8:	2301      	movs	r3, #1
 80149fa:	930f      	str	r3, [sp, #60]	; 0x3c
 80149fc:	e758      	b.n	80148b0 <_strtod_l+0x6d0>
 80149fe:	4632      	mov	r2, r6
 8014a00:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014a02:	4648      	mov	r0, r9
 8014a04:	f002 f916 	bl	8016c34 <__lshift>
 8014a08:	901c      	str	r0, [sp, #112]	; 0x70
 8014a0a:	2800      	cmp	r0, #0
 8014a0c:	f47f af7c 	bne.w	8014908 <_strtod_l+0x728>
 8014a10:	e604      	b.n	801461c <_strtod_l+0x43c>
 8014a12:	bf00      	nop
 8014a14:	080188d0 	.word	0x080188d0
 8014a18:	fffffc02 	.word	0xfffffc02
 8014a1c:	465d      	mov	r5, fp
 8014a1e:	f040 8086 	bne.w	8014b2e <_strtod_l+0x94e>
 8014a22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014a24:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014a28:	b32a      	cbz	r2, 8014a76 <_strtod_l+0x896>
 8014a2a:	4aaf      	ldr	r2, [pc, #700]	; (8014ce8 <_strtod_l+0xb08>)
 8014a2c:	4293      	cmp	r3, r2
 8014a2e:	d153      	bne.n	8014ad8 <_strtod_l+0x8f8>
 8014a30:	9b04      	ldr	r3, [sp, #16]
 8014a32:	4650      	mov	r0, sl
 8014a34:	b1d3      	cbz	r3, 8014a6c <_strtod_l+0x88c>
 8014a36:	4aad      	ldr	r2, [pc, #692]	; (8014cec <_strtod_l+0xb0c>)
 8014a38:	402a      	ands	r2, r5
 8014a3a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8014a3e:	f04f 31ff 	mov.w	r1, #4294967295
 8014a42:	d816      	bhi.n	8014a72 <_strtod_l+0x892>
 8014a44:	0d12      	lsrs	r2, r2, #20
 8014a46:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8014a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8014a4e:	4298      	cmp	r0, r3
 8014a50:	d142      	bne.n	8014ad8 <_strtod_l+0x8f8>
 8014a52:	4ba7      	ldr	r3, [pc, #668]	; (8014cf0 <_strtod_l+0xb10>)
 8014a54:	429d      	cmp	r5, r3
 8014a56:	d102      	bne.n	8014a5e <_strtod_l+0x87e>
 8014a58:	3001      	adds	r0, #1
 8014a5a:	f43f addf 	beq.w	801461c <_strtod_l+0x43c>
 8014a5e:	4ba3      	ldr	r3, [pc, #652]	; (8014cec <_strtod_l+0xb0c>)
 8014a60:	402b      	ands	r3, r5
 8014a62:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8014a66:	f04f 0a00 	mov.w	sl, #0
 8014a6a:	e7a0      	b.n	80149ae <_strtod_l+0x7ce>
 8014a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8014a70:	e7ed      	b.n	8014a4e <_strtod_l+0x86e>
 8014a72:	460b      	mov	r3, r1
 8014a74:	e7eb      	b.n	8014a4e <_strtod_l+0x86e>
 8014a76:	bb7b      	cbnz	r3, 8014ad8 <_strtod_l+0x8f8>
 8014a78:	f1ba 0f00 	cmp.w	sl, #0
 8014a7c:	d12c      	bne.n	8014ad8 <_strtod_l+0x8f8>
 8014a7e:	9904      	ldr	r1, [sp, #16]
 8014a80:	4a9a      	ldr	r2, [pc, #616]	; (8014cec <_strtod_l+0xb0c>)
 8014a82:	465b      	mov	r3, fp
 8014a84:	b1f1      	cbz	r1, 8014ac4 <_strtod_l+0x8e4>
 8014a86:	ea02 010b 	and.w	r1, r2, fp
 8014a8a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8014a8e:	dc19      	bgt.n	8014ac4 <_strtod_l+0x8e4>
 8014a90:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8014a94:	f77f ae5b 	ble.w	801474e <_strtod_l+0x56e>
 8014a98:	4a96      	ldr	r2, [pc, #600]	; (8014cf4 <_strtod_l+0xb14>)
 8014a9a:	2300      	movs	r3, #0
 8014a9c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8014aa0:	4650      	mov	r0, sl
 8014aa2:	4659      	mov	r1, fp
 8014aa4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8014aa8:	f7eb fdbe 	bl	8000628 <__aeabi_dmul>
 8014aac:	4682      	mov	sl, r0
 8014aae:	468b      	mov	fp, r1
 8014ab0:	2900      	cmp	r1, #0
 8014ab2:	f47f adbe 	bne.w	8014632 <_strtod_l+0x452>
 8014ab6:	2800      	cmp	r0, #0
 8014ab8:	f47f adbb 	bne.w	8014632 <_strtod_l+0x452>
 8014abc:	2322      	movs	r3, #34	; 0x22
 8014abe:	f8c9 3000 	str.w	r3, [r9]
 8014ac2:	e5b6      	b.n	8014632 <_strtod_l+0x452>
 8014ac4:	4013      	ands	r3, r2
 8014ac6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8014aca:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8014ace:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8014ad2:	f04f 3aff 	mov.w	sl, #4294967295
 8014ad6:	e76a      	b.n	80149ae <_strtod_l+0x7ce>
 8014ad8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014ada:	b193      	cbz	r3, 8014b02 <_strtod_l+0x922>
 8014adc:	422b      	tst	r3, r5
 8014ade:	f43f af66 	beq.w	80149ae <_strtod_l+0x7ce>
 8014ae2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014ae4:	9a04      	ldr	r2, [sp, #16]
 8014ae6:	4650      	mov	r0, sl
 8014ae8:	4659      	mov	r1, fp
 8014aea:	b173      	cbz	r3, 8014b0a <_strtod_l+0x92a>
 8014aec:	f7ff fb5b 	bl	80141a6 <sulp>
 8014af0:	4602      	mov	r2, r0
 8014af2:	460b      	mov	r3, r1
 8014af4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014af8:	f7eb fbe0 	bl	80002bc <__adddf3>
 8014afc:	4682      	mov	sl, r0
 8014afe:	468b      	mov	fp, r1
 8014b00:	e755      	b.n	80149ae <_strtod_l+0x7ce>
 8014b02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014b04:	ea13 0f0a 	tst.w	r3, sl
 8014b08:	e7e9      	b.n	8014ade <_strtod_l+0x8fe>
 8014b0a:	f7ff fb4c 	bl	80141a6 <sulp>
 8014b0e:	4602      	mov	r2, r0
 8014b10:	460b      	mov	r3, r1
 8014b12:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014b16:	f7eb fbcf 	bl	80002b8 <__aeabi_dsub>
 8014b1a:	2200      	movs	r2, #0
 8014b1c:	2300      	movs	r3, #0
 8014b1e:	4682      	mov	sl, r0
 8014b20:	468b      	mov	fp, r1
 8014b22:	f7eb ffe9 	bl	8000af8 <__aeabi_dcmpeq>
 8014b26:	2800      	cmp	r0, #0
 8014b28:	f47f ae11 	bne.w	801474e <_strtod_l+0x56e>
 8014b2c:	e73f      	b.n	80149ae <_strtod_l+0x7ce>
 8014b2e:	4641      	mov	r1, r8
 8014b30:	4620      	mov	r0, r4
 8014b32:	f002 fa10 	bl	8016f56 <__ratio>
 8014b36:	ec57 6b10 	vmov	r6, r7, d0
 8014b3a:	2200      	movs	r2, #0
 8014b3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014b40:	ee10 0a10 	vmov	r0, s0
 8014b44:	4639      	mov	r1, r7
 8014b46:	f7eb ffeb 	bl	8000b20 <__aeabi_dcmple>
 8014b4a:	2800      	cmp	r0, #0
 8014b4c:	d077      	beq.n	8014c3e <_strtod_l+0xa5e>
 8014b4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d04a      	beq.n	8014bea <_strtod_l+0xa0a>
 8014b54:	4b68      	ldr	r3, [pc, #416]	; (8014cf8 <_strtod_l+0xb18>)
 8014b56:	2200      	movs	r2, #0
 8014b58:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014b5c:	4f66      	ldr	r7, [pc, #408]	; (8014cf8 <_strtod_l+0xb18>)
 8014b5e:	2600      	movs	r6, #0
 8014b60:	4b62      	ldr	r3, [pc, #392]	; (8014cec <_strtod_l+0xb0c>)
 8014b62:	402b      	ands	r3, r5
 8014b64:	930f      	str	r3, [sp, #60]	; 0x3c
 8014b66:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014b68:	4b64      	ldr	r3, [pc, #400]	; (8014cfc <_strtod_l+0xb1c>)
 8014b6a:	429a      	cmp	r2, r3
 8014b6c:	f040 80ce 	bne.w	8014d0c <_strtod_l+0xb2c>
 8014b70:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014b74:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014b78:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8014b7c:	ec4b ab10 	vmov	d0, sl, fp
 8014b80:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8014b84:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014b88:	f002 f920 	bl	8016dcc <__ulp>
 8014b8c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014b90:	ec53 2b10 	vmov	r2, r3, d0
 8014b94:	f7eb fd48 	bl	8000628 <__aeabi_dmul>
 8014b98:	4652      	mov	r2, sl
 8014b9a:	465b      	mov	r3, fp
 8014b9c:	f7eb fb8e 	bl	80002bc <__adddf3>
 8014ba0:	460b      	mov	r3, r1
 8014ba2:	4952      	ldr	r1, [pc, #328]	; (8014cec <_strtod_l+0xb0c>)
 8014ba4:	4a56      	ldr	r2, [pc, #344]	; (8014d00 <_strtod_l+0xb20>)
 8014ba6:	4019      	ands	r1, r3
 8014ba8:	4291      	cmp	r1, r2
 8014baa:	4682      	mov	sl, r0
 8014bac:	d95b      	bls.n	8014c66 <_strtod_l+0xa86>
 8014bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014bb0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8014bb4:	4293      	cmp	r3, r2
 8014bb6:	d103      	bne.n	8014bc0 <_strtod_l+0x9e0>
 8014bb8:	9b08      	ldr	r3, [sp, #32]
 8014bba:	3301      	adds	r3, #1
 8014bbc:	f43f ad2e 	beq.w	801461c <_strtod_l+0x43c>
 8014bc0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8014cf0 <_strtod_l+0xb10>
 8014bc4:	f04f 3aff 	mov.w	sl, #4294967295
 8014bc8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014bca:	4648      	mov	r0, r9
 8014bcc:	f001 fe66 	bl	801689c <_Bfree>
 8014bd0:	9905      	ldr	r1, [sp, #20]
 8014bd2:	4648      	mov	r0, r9
 8014bd4:	f001 fe62 	bl	801689c <_Bfree>
 8014bd8:	4641      	mov	r1, r8
 8014bda:	4648      	mov	r0, r9
 8014bdc:	f001 fe5e 	bl	801689c <_Bfree>
 8014be0:	4621      	mov	r1, r4
 8014be2:	4648      	mov	r0, r9
 8014be4:	f001 fe5a 	bl	801689c <_Bfree>
 8014be8:	e619      	b.n	801481e <_strtod_l+0x63e>
 8014bea:	f1ba 0f00 	cmp.w	sl, #0
 8014bee:	d11a      	bne.n	8014c26 <_strtod_l+0xa46>
 8014bf0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014bf4:	b9eb      	cbnz	r3, 8014c32 <_strtod_l+0xa52>
 8014bf6:	2200      	movs	r2, #0
 8014bf8:	4b3f      	ldr	r3, [pc, #252]	; (8014cf8 <_strtod_l+0xb18>)
 8014bfa:	4630      	mov	r0, r6
 8014bfc:	4639      	mov	r1, r7
 8014bfe:	f7eb ff85 	bl	8000b0c <__aeabi_dcmplt>
 8014c02:	b9c8      	cbnz	r0, 8014c38 <_strtod_l+0xa58>
 8014c04:	4630      	mov	r0, r6
 8014c06:	4639      	mov	r1, r7
 8014c08:	2200      	movs	r2, #0
 8014c0a:	4b3e      	ldr	r3, [pc, #248]	; (8014d04 <_strtod_l+0xb24>)
 8014c0c:	f7eb fd0c 	bl	8000628 <__aeabi_dmul>
 8014c10:	4606      	mov	r6, r0
 8014c12:	460f      	mov	r7, r1
 8014c14:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8014c18:	9618      	str	r6, [sp, #96]	; 0x60
 8014c1a:	9319      	str	r3, [sp, #100]	; 0x64
 8014c1c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8014c20:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014c24:	e79c      	b.n	8014b60 <_strtod_l+0x980>
 8014c26:	f1ba 0f01 	cmp.w	sl, #1
 8014c2a:	d102      	bne.n	8014c32 <_strtod_l+0xa52>
 8014c2c:	2d00      	cmp	r5, #0
 8014c2e:	f43f ad8e 	beq.w	801474e <_strtod_l+0x56e>
 8014c32:	2200      	movs	r2, #0
 8014c34:	4b34      	ldr	r3, [pc, #208]	; (8014d08 <_strtod_l+0xb28>)
 8014c36:	e78f      	b.n	8014b58 <_strtod_l+0x978>
 8014c38:	2600      	movs	r6, #0
 8014c3a:	4f32      	ldr	r7, [pc, #200]	; (8014d04 <_strtod_l+0xb24>)
 8014c3c:	e7ea      	b.n	8014c14 <_strtod_l+0xa34>
 8014c3e:	4b31      	ldr	r3, [pc, #196]	; (8014d04 <_strtod_l+0xb24>)
 8014c40:	4630      	mov	r0, r6
 8014c42:	4639      	mov	r1, r7
 8014c44:	2200      	movs	r2, #0
 8014c46:	f7eb fcef 	bl	8000628 <__aeabi_dmul>
 8014c4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014c4c:	4606      	mov	r6, r0
 8014c4e:	460f      	mov	r7, r1
 8014c50:	b933      	cbnz	r3, 8014c60 <_strtod_l+0xa80>
 8014c52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014c56:	9010      	str	r0, [sp, #64]	; 0x40
 8014c58:	9311      	str	r3, [sp, #68]	; 0x44
 8014c5a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014c5e:	e7df      	b.n	8014c20 <_strtod_l+0xa40>
 8014c60:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8014c64:	e7f9      	b.n	8014c5a <_strtod_l+0xa7a>
 8014c66:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8014c6a:	9b04      	ldr	r3, [sp, #16]
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	d1ab      	bne.n	8014bc8 <_strtod_l+0x9e8>
 8014c70:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014c74:	0d1b      	lsrs	r3, r3, #20
 8014c76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014c78:	051b      	lsls	r3, r3, #20
 8014c7a:	429a      	cmp	r2, r3
 8014c7c:	465d      	mov	r5, fp
 8014c7e:	d1a3      	bne.n	8014bc8 <_strtod_l+0x9e8>
 8014c80:	4639      	mov	r1, r7
 8014c82:	4630      	mov	r0, r6
 8014c84:	f7eb ff80 	bl	8000b88 <__aeabi_d2iz>
 8014c88:	f7eb fc64 	bl	8000554 <__aeabi_i2d>
 8014c8c:	460b      	mov	r3, r1
 8014c8e:	4602      	mov	r2, r0
 8014c90:	4639      	mov	r1, r7
 8014c92:	4630      	mov	r0, r6
 8014c94:	f7eb fb10 	bl	80002b8 <__aeabi_dsub>
 8014c98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014c9a:	4606      	mov	r6, r0
 8014c9c:	460f      	mov	r7, r1
 8014c9e:	b933      	cbnz	r3, 8014cae <_strtod_l+0xace>
 8014ca0:	f1ba 0f00 	cmp.w	sl, #0
 8014ca4:	d103      	bne.n	8014cae <_strtod_l+0xace>
 8014ca6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8014caa:	2d00      	cmp	r5, #0
 8014cac:	d06d      	beq.n	8014d8a <_strtod_l+0xbaa>
 8014cae:	a30a      	add	r3, pc, #40	; (adr r3, 8014cd8 <_strtod_l+0xaf8>)
 8014cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cb4:	4630      	mov	r0, r6
 8014cb6:	4639      	mov	r1, r7
 8014cb8:	f7eb ff28 	bl	8000b0c <__aeabi_dcmplt>
 8014cbc:	2800      	cmp	r0, #0
 8014cbe:	f47f acb8 	bne.w	8014632 <_strtod_l+0x452>
 8014cc2:	a307      	add	r3, pc, #28	; (adr r3, 8014ce0 <_strtod_l+0xb00>)
 8014cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cc8:	4630      	mov	r0, r6
 8014cca:	4639      	mov	r1, r7
 8014ccc:	f7eb ff3c 	bl	8000b48 <__aeabi_dcmpgt>
 8014cd0:	2800      	cmp	r0, #0
 8014cd2:	f43f af79 	beq.w	8014bc8 <_strtod_l+0x9e8>
 8014cd6:	e4ac      	b.n	8014632 <_strtod_l+0x452>
 8014cd8:	94a03595 	.word	0x94a03595
 8014cdc:	3fdfffff 	.word	0x3fdfffff
 8014ce0:	35afe535 	.word	0x35afe535
 8014ce4:	3fe00000 	.word	0x3fe00000
 8014ce8:	000fffff 	.word	0x000fffff
 8014cec:	7ff00000 	.word	0x7ff00000
 8014cf0:	7fefffff 	.word	0x7fefffff
 8014cf4:	39500000 	.word	0x39500000
 8014cf8:	3ff00000 	.word	0x3ff00000
 8014cfc:	7fe00000 	.word	0x7fe00000
 8014d00:	7c9fffff 	.word	0x7c9fffff
 8014d04:	3fe00000 	.word	0x3fe00000
 8014d08:	bff00000 	.word	0xbff00000
 8014d0c:	9b04      	ldr	r3, [sp, #16]
 8014d0e:	b333      	cbz	r3, 8014d5e <_strtod_l+0xb7e>
 8014d10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014d12:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014d16:	d822      	bhi.n	8014d5e <_strtod_l+0xb7e>
 8014d18:	a327      	add	r3, pc, #156	; (adr r3, 8014db8 <_strtod_l+0xbd8>)
 8014d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d1e:	4630      	mov	r0, r6
 8014d20:	4639      	mov	r1, r7
 8014d22:	f7eb fefd 	bl	8000b20 <__aeabi_dcmple>
 8014d26:	b1a0      	cbz	r0, 8014d52 <_strtod_l+0xb72>
 8014d28:	4639      	mov	r1, r7
 8014d2a:	4630      	mov	r0, r6
 8014d2c:	f7eb ff54 	bl	8000bd8 <__aeabi_d2uiz>
 8014d30:	2800      	cmp	r0, #0
 8014d32:	bf08      	it	eq
 8014d34:	2001      	moveq	r0, #1
 8014d36:	f7eb fbfd 	bl	8000534 <__aeabi_ui2d>
 8014d3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014d3c:	4606      	mov	r6, r0
 8014d3e:	460f      	mov	r7, r1
 8014d40:	bb03      	cbnz	r3, 8014d84 <_strtod_l+0xba4>
 8014d42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014d46:	9012      	str	r0, [sp, #72]	; 0x48
 8014d48:	9313      	str	r3, [sp, #76]	; 0x4c
 8014d4a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8014d4e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014d52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014d54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014d56:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8014d5a:	1a9b      	subs	r3, r3, r2
 8014d5c:	930b      	str	r3, [sp, #44]	; 0x2c
 8014d5e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8014d62:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8014d66:	f002 f831 	bl	8016dcc <__ulp>
 8014d6a:	4650      	mov	r0, sl
 8014d6c:	ec53 2b10 	vmov	r2, r3, d0
 8014d70:	4659      	mov	r1, fp
 8014d72:	f7eb fc59 	bl	8000628 <__aeabi_dmul>
 8014d76:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014d7a:	f7eb fa9f 	bl	80002bc <__adddf3>
 8014d7e:	4682      	mov	sl, r0
 8014d80:	468b      	mov	fp, r1
 8014d82:	e772      	b.n	8014c6a <_strtod_l+0xa8a>
 8014d84:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8014d88:	e7df      	b.n	8014d4a <_strtod_l+0xb6a>
 8014d8a:	a30d      	add	r3, pc, #52	; (adr r3, 8014dc0 <_strtod_l+0xbe0>)
 8014d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d90:	f7eb febc 	bl	8000b0c <__aeabi_dcmplt>
 8014d94:	e79c      	b.n	8014cd0 <_strtod_l+0xaf0>
 8014d96:	2300      	movs	r3, #0
 8014d98:	930d      	str	r3, [sp, #52]	; 0x34
 8014d9a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014d9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014d9e:	6013      	str	r3, [r2, #0]
 8014da0:	f7ff ba61 	b.w	8014266 <_strtod_l+0x86>
 8014da4:	2b65      	cmp	r3, #101	; 0x65
 8014da6:	f04f 0200 	mov.w	r2, #0
 8014daa:	f43f ab4e 	beq.w	801444a <_strtod_l+0x26a>
 8014dae:	2101      	movs	r1, #1
 8014db0:	4614      	mov	r4, r2
 8014db2:	9104      	str	r1, [sp, #16]
 8014db4:	f7ff bacb 	b.w	801434e <_strtod_l+0x16e>
 8014db8:	ffc00000 	.word	0xffc00000
 8014dbc:	41dfffff 	.word	0x41dfffff
 8014dc0:	94a03595 	.word	0x94a03595
 8014dc4:	3fcfffff 	.word	0x3fcfffff

08014dc8 <_strtod_r>:
 8014dc8:	4b05      	ldr	r3, [pc, #20]	; (8014de0 <_strtod_r+0x18>)
 8014dca:	681b      	ldr	r3, [r3, #0]
 8014dcc:	b410      	push	{r4}
 8014dce:	6a1b      	ldr	r3, [r3, #32]
 8014dd0:	4c04      	ldr	r4, [pc, #16]	; (8014de4 <_strtod_r+0x1c>)
 8014dd2:	2b00      	cmp	r3, #0
 8014dd4:	bf08      	it	eq
 8014dd6:	4623      	moveq	r3, r4
 8014dd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014ddc:	f7ff ba00 	b.w	80141e0 <_strtod_l>
 8014de0:	2000000c 	.word	0x2000000c
 8014de4:	20000070 	.word	0x20000070

08014de8 <_strtol_l.isra.0>:
 8014de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014dec:	4680      	mov	r8, r0
 8014dee:	4689      	mov	r9, r1
 8014df0:	4692      	mov	sl, r2
 8014df2:	461e      	mov	r6, r3
 8014df4:	460f      	mov	r7, r1
 8014df6:	463d      	mov	r5, r7
 8014df8:	9808      	ldr	r0, [sp, #32]
 8014dfa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014dfe:	f001 fc67 	bl	80166d0 <__locale_ctype_ptr_l>
 8014e02:	4420      	add	r0, r4
 8014e04:	7843      	ldrb	r3, [r0, #1]
 8014e06:	f013 0308 	ands.w	r3, r3, #8
 8014e0a:	d132      	bne.n	8014e72 <_strtol_l.isra.0+0x8a>
 8014e0c:	2c2d      	cmp	r4, #45	; 0x2d
 8014e0e:	d132      	bne.n	8014e76 <_strtol_l.isra.0+0x8e>
 8014e10:	787c      	ldrb	r4, [r7, #1]
 8014e12:	1cbd      	adds	r5, r7, #2
 8014e14:	2201      	movs	r2, #1
 8014e16:	2e00      	cmp	r6, #0
 8014e18:	d05d      	beq.n	8014ed6 <_strtol_l.isra.0+0xee>
 8014e1a:	2e10      	cmp	r6, #16
 8014e1c:	d109      	bne.n	8014e32 <_strtol_l.isra.0+0x4a>
 8014e1e:	2c30      	cmp	r4, #48	; 0x30
 8014e20:	d107      	bne.n	8014e32 <_strtol_l.isra.0+0x4a>
 8014e22:	782b      	ldrb	r3, [r5, #0]
 8014e24:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014e28:	2b58      	cmp	r3, #88	; 0x58
 8014e2a:	d14f      	bne.n	8014ecc <_strtol_l.isra.0+0xe4>
 8014e2c:	786c      	ldrb	r4, [r5, #1]
 8014e2e:	2610      	movs	r6, #16
 8014e30:	3502      	adds	r5, #2
 8014e32:	2a00      	cmp	r2, #0
 8014e34:	bf14      	ite	ne
 8014e36:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8014e3a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8014e3e:	2700      	movs	r7, #0
 8014e40:	fbb1 fcf6 	udiv	ip, r1, r6
 8014e44:	4638      	mov	r0, r7
 8014e46:	fb06 1e1c 	mls	lr, r6, ip, r1
 8014e4a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8014e4e:	2b09      	cmp	r3, #9
 8014e50:	d817      	bhi.n	8014e82 <_strtol_l.isra.0+0x9a>
 8014e52:	461c      	mov	r4, r3
 8014e54:	42a6      	cmp	r6, r4
 8014e56:	dd23      	ble.n	8014ea0 <_strtol_l.isra.0+0xb8>
 8014e58:	1c7b      	adds	r3, r7, #1
 8014e5a:	d007      	beq.n	8014e6c <_strtol_l.isra.0+0x84>
 8014e5c:	4584      	cmp	ip, r0
 8014e5e:	d31c      	bcc.n	8014e9a <_strtol_l.isra.0+0xb2>
 8014e60:	d101      	bne.n	8014e66 <_strtol_l.isra.0+0x7e>
 8014e62:	45a6      	cmp	lr, r4
 8014e64:	db19      	blt.n	8014e9a <_strtol_l.isra.0+0xb2>
 8014e66:	fb00 4006 	mla	r0, r0, r6, r4
 8014e6a:	2701      	movs	r7, #1
 8014e6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014e70:	e7eb      	b.n	8014e4a <_strtol_l.isra.0+0x62>
 8014e72:	462f      	mov	r7, r5
 8014e74:	e7bf      	b.n	8014df6 <_strtol_l.isra.0+0xe>
 8014e76:	2c2b      	cmp	r4, #43	; 0x2b
 8014e78:	bf04      	itt	eq
 8014e7a:	1cbd      	addeq	r5, r7, #2
 8014e7c:	787c      	ldrbeq	r4, [r7, #1]
 8014e7e:	461a      	mov	r2, r3
 8014e80:	e7c9      	b.n	8014e16 <_strtol_l.isra.0+0x2e>
 8014e82:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8014e86:	2b19      	cmp	r3, #25
 8014e88:	d801      	bhi.n	8014e8e <_strtol_l.isra.0+0xa6>
 8014e8a:	3c37      	subs	r4, #55	; 0x37
 8014e8c:	e7e2      	b.n	8014e54 <_strtol_l.isra.0+0x6c>
 8014e8e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8014e92:	2b19      	cmp	r3, #25
 8014e94:	d804      	bhi.n	8014ea0 <_strtol_l.isra.0+0xb8>
 8014e96:	3c57      	subs	r4, #87	; 0x57
 8014e98:	e7dc      	b.n	8014e54 <_strtol_l.isra.0+0x6c>
 8014e9a:	f04f 37ff 	mov.w	r7, #4294967295
 8014e9e:	e7e5      	b.n	8014e6c <_strtol_l.isra.0+0x84>
 8014ea0:	1c7b      	adds	r3, r7, #1
 8014ea2:	d108      	bne.n	8014eb6 <_strtol_l.isra.0+0xce>
 8014ea4:	2322      	movs	r3, #34	; 0x22
 8014ea6:	f8c8 3000 	str.w	r3, [r8]
 8014eaa:	4608      	mov	r0, r1
 8014eac:	f1ba 0f00 	cmp.w	sl, #0
 8014eb0:	d107      	bne.n	8014ec2 <_strtol_l.isra.0+0xda>
 8014eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014eb6:	b102      	cbz	r2, 8014eba <_strtol_l.isra.0+0xd2>
 8014eb8:	4240      	negs	r0, r0
 8014eba:	f1ba 0f00 	cmp.w	sl, #0
 8014ebe:	d0f8      	beq.n	8014eb2 <_strtol_l.isra.0+0xca>
 8014ec0:	b10f      	cbz	r7, 8014ec6 <_strtol_l.isra.0+0xde>
 8014ec2:	f105 39ff 	add.w	r9, r5, #4294967295
 8014ec6:	f8ca 9000 	str.w	r9, [sl]
 8014eca:	e7f2      	b.n	8014eb2 <_strtol_l.isra.0+0xca>
 8014ecc:	2430      	movs	r4, #48	; 0x30
 8014ece:	2e00      	cmp	r6, #0
 8014ed0:	d1af      	bne.n	8014e32 <_strtol_l.isra.0+0x4a>
 8014ed2:	2608      	movs	r6, #8
 8014ed4:	e7ad      	b.n	8014e32 <_strtol_l.isra.0+0x4a>
 8014ed6:	2c30      	cmp	r4, #48	; 0x30
 8014ed8:	d0a3      	beq.n	8014e22 <_strtol_l.isra.0+0x3a>
 8014eda:	260a      	movs	r6, #10
 8014edc:	e7a9      	b.n	8014e32 <_strtol_l.isra.0+0x4a>
	...

08014ee0 <_strtol_r>:
 8014ee0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014ee2:	4c06      	ldr	r4, [pc, #24]	; (8014efc <_strtol_r+0x1c>)
 8014ee4:	4d06      	ldr	r5, [pc, #24]	; (8014f00 <_strtol_r+0x20>)
 8014ee6:	6824      	ldr	r4, [r4, #0]
 8014ee8:	6a24      	ldr	r4, [r4, #32]
 8014eea:	2c00      	cmp	r4, #0
 8014eec:	bf08      	it	eq
 8014eee:	462c      	moveq	r4, r5
 8014ef0:	9400      	str	r4, [sp, #0]
 8014ef2:	f7ff ff79 	bl	8014de8 <_strtol_l.isra.0>
 8014ef6:	b003      	add	sp, #12
 8014ef8:	bd30      	pop	{r4, r5, pc}
 8014efa:	bf00      	nop
 8014efc:	2000000c 	.word	0x2000000c
 8014f00:	20000070 	.word	0x20000070

08014f04 <_vsiprintf_r>:
 8014f04:	b500      	push	{lr}
 8014f06:	b09b      	sub	sp, #108	; 0x6c
 8014f08:	9100      	str	r1, [sp, #0]
 8014f0a:	9104      	str	r1, [sp, #16]
 8014f0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014f10:	9105      	str	r1, [sp, #20]
 8014f12:	9102      	str	r1, [sp, #8]
 8014f14:	4905      	ldr	r1, [pc, #20]	; (8014f2c <_vsiprintf_r+0x28>)
 8014f16:	9103      	str	r1, [sp, #12]
 8014f18:	4669      	mov	r1, sp
 8014f1a:	f002 f99b 	bl	8017254 <_svfiprintf_r>
 8014f1e:	9b00      	ldr	r3, [sp, #0]
 8014f20:	2200      	movs	r2, #0
 8014f22:	701a      	strb	r2, [r3, #0]
 8014f24:	b01b      	add	sp, #108	; 0x6c
 8014f26:	f85d fb04 	ldr.w	pc, [sp], #4
 8014f2a:	bf00      	nop
 8014f2c:	ffff0208 	.word	0xffff0208

08014f30 <vsiprintf>:
 8014f30:	4613      	mov	r3, r2
 8014f32:	460a      	mov	r2, r1
 8014f34:	4601      	mov	r1, r0
 8014f36:	4802      	ldr	r0, [pc, #8]	; (8014f40 <vsiprintf+0x10>)
 8014f38:	6800      	ldr	r0, [r0, #0]
 8014f3a:	f7ff bfe3 	b.w	8014f04 <_vsiprintf_r>
 8014f3e:	bf00      	nop
 8014f40:	2000000c 	.word	0x2000000c

08014f44 <__swbuf_r>:
 8014f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f46:	460e      	mov	r6, r1
 8014f48:	4614      	mov	r4, r2
 8014f4a:	4605      	mov	r5, r0
 8014f4c:	b118      	cbz	r0, 8014f56 <__swbuf_r+0x12>
 8014f4e:	6983      	ldr	r3, [r0, #24]
 8014f50:	b90b      	cbnz	r3, 8014f56 <__swbuf_r+0x12>
 8014f52:	f001 f80d 	bl	8015f70 <__sinit>
 8014f56:	4b21      	ldr	r3, [pc, #132]	; (8014fdc <__swbuf_r+0x98>)
 8014f58:	429c      	cmp	r4, r3
 8014f5a:	d12a      	bne.n	8014fb2 <__swbuf_r+0x6e>
 8014f5c:	686c      	ldr	r4, [r5, #4]
 8014f5e:	69a3      	ldr	r3, [r4, #24]
 8014f60:	60a3      	str	r3, [r4, #8]
 8014f62:	89a3      	ldrh	r3, [r4, #12]
 8014f64:	071a      	lsls	r2, r3, #28
 8014f66:	d52e      	bpl.n	8014fc6 <__swbuf_r+0x82>
 8014f68:	6923      	ldr	r3, [r4, #16]
 8014f6a:	b363      	cbz	r3, 8014fc6 <__swbuf_r+0x82>
 8014f6c:	6923      	ldr	r3, [r4, #16]
 8014f6e:	6820      	ldr	r0, [r4, #0]
 8014f70:	1ac0      	subs	r0, r0, r3
 8014f72:	6963      	ldr	r3, [r4, #20]
 8014f74:	b2f6      	uxtb	r6, r6
 8014f76:	4283      	cmp	r3, r0
 8014f78:	4637      	mov	r7, r6
 8014f7a:	dc04      	bgt.n	8014f86 <__swbuf_r+0x42>
 8014f7c:	4621      	mov	r1, r4
 8014f7e:	4628      	mov	r0, r5
 8014f80:	f000 ff8c 	bl	8015e9c <_fflush_r>
 8014f84:	bb28      	cbnz	r0, 8014fd2 <__swbuf_r+0x8e>
 8014f86:	68a3      	ldr	r3, [r4, #8]
 8014f88:	3b01      	subs	r3, #1
 8014f8a:	60a3      	str	r3, [r4, #8]
 8014f8c:	6823      	ldr	r3, [r4, #0]
 8014f8e:	1c5a      	adds	r2, r3, #1
 8014f90:	6022      	str	r2, [r4, #0]
 8014f92:	701e      	strb	r6, [r3, #0]
 8014f94:	6963      	ldr	r3, [r4, #20]
 8014f96:	3001      	adds	r0, #1
 8014f98:	4283      	cmp	r3, r0
 8014f9a:	d004      	beq.n	8014fa6 <__swbuf_r+0x62>
 8014f9c:	89a3      	ldrh	r3, [r4, #12]
 8014f9e:	07db      	lsls	r3, r3, #31
 8014fa0:	d519      	bpl.n	8014fd6 <__swbuf_r+0x92>
 8014fa2:	2e0a      	cmp	r6, #10
 8014fa4:	d117      	bne.n	8014fd6 <__swbuf_r+0x92>
 8014fa6:	4621      	mov	r1, r4
 8014fa8:	4628      	mov	r0, r5
 8014faa:	f000 ff77 	bl	8015e9c <_fflush_r>
 8014fae:	b190      	cbz	r0, 8014fd6 <__swbuf_r+0x92>
 8014fb0:	e00f      	b.n	8014fd2 <__swbuf_r+0x8e>
 8014fb2:	4b0b      	ldr	r3, [pc, #44]	; (8014fe0 <__swbuf_r+0x9c>)
 8014fb4:	429c      	cmp	r4, r3
 8014fb6:	d101      	bne.n	8014fbc <__swbuf_r+0x78>
 8014fb8:	68ac      	ldr	r4, [r5, #8]
 8014fba:	e7d0      	b.n	8014f5e <__swbuf_r+0x1a>
 8014fbc:	4b09      	ldr	r3, [pc, #36]	; (8014fe4 <__swbuf_r+0xa0>)
 8014fbe:	429c      	cmp	r4, r3
 8014fc0:	bf08      	it	eq
 8014fc2:	68ec      	ldreq	r4, [r5, #12]
 8014fc4:	e7cb      	b.n	8014f5e <__swbuf_r+0x1a>
 8014fc6:	4621      	mov	r1, r4
 8014fc8:	4628      	mov	r0, r5
 8014fca:	f000 f81f 	bl	801500c <__swsetup_r>
 8014fce:	2800      	cmp	r0, #0
 8014fd0:	d0cc      	beq.n	8014f6c <__swbuf_r+0x28>
 8014fd2:	f04f 37ff 	mov.w	r7, #4294967295
 8014fd6:	4638      	mov	r0, r7
 8014fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014fda:	bf00      	nop
 8014fdc:	08018928 	.word	0x08018928
 8014fe0:	08018948 	.word	0x08018948
 8014fe4:	08018908 	.word	0x08018908

08014fe8 <_write_r>:
 8014fe8:	b538      	push	{r3, r4, r5, lr}
 8014fea:	4c07      	ldr	r4, [pc, #28]	; (8015008 <_write_r+0x20>)
 8014fec:	4605      	mov	r5, r0
 8014fee:	4608      	mov	r0, r1
 8014ff0:	4611      	mov	r1, r2
 8014ff2:	2200      	movs	r2, #0
 8014ff4:	6022      	str	r2, [r4, #0]
 8014ff6:	461a      	mov	r2, r3
 8014ff8:	f7ef fa2d 	bl	8004456 <_write>
 8014ffc:	1c43      	adds	r3, r0, #1
 8014ffe:	d102      	bne.n	8015006 <_write_r+0x1e>
 8015000:	6823      	ldr	r3, [r4, #0]
 8015002:	b103      	cbz	r3, 8015006 <_write_r+0x1e>
 8015004:	602b      	str	r3, [r5, #0]
 8015006:	bd38      	pop	{r3, r4, r5, pc}
 8015008:	20037fbc 	.word	0x20037fbc

0801500c <__swsetup_r>:
 801500c:	4b32      	ldr	r3, [pc, #200]	; (80150d8 <__swsetup_r+0xcc>)
 801500e:	b570      	push	{r4, r5, r6, lr}
 8015010:	681d      	ldr	r5, [r3, #0]
 8015012:	4606      	mov	r6, r0
 8015014:	460c      	mov	r4, r1
 8015016:	b125      	cbz	r5, 8015022 <__swsetup_r+0x16>
 8015018:	69ab      	ldr	r3, [r5, #24]
 801501a:	b913      	cbnz	r3, 8015022 <__swsetup_r+0x16>
 801501c:	4628      	mov	r0, r5
 801501e:	f000 ffa7 	bl	8015f70 <__sinit>
 8015022:	4b2e      	ldr	r3, [pc, #184]	; (80150dc <__swsetup_r+0xd0>)
 8015024:	429c      	cmp	r4, r3
 8015026:	d10f      	bne.n	8015048 <__swsetup_r+0x3c>
 8015028:	686c      	ldr	r4, [r5, #4]
 801502a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801502e:	b29a      	uxth	r2, r3
 8015030:	0715      	lsls	r5, r2, #28
 8015032:	d42c      	bmi.n	801508e <__swsetup_r+0x82>
 8015034:	06d0      	lsls	r0, r2, #27
 8015036:	d411      	bmi.n	801505c <__swsetup_r+0x50>
 8015038:	2209      	movs	r2, #9
 801503a:	6032      	str	r2, [r6, #0]
 801503c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015040:	81a3      	strh	r3, [r4, #12]
 8015042:	f04f 30ff 	mov.w	r0, #4294967295
 8015046:	e03e      	b.n	80150c6 <__swsetup_r+0xba>
 8015048:	4b25      	ldr	r3, [pc, #148]	; (80150e0 <__swsetup_r+0xd4>)
 801504a:	429c      	cmp	r4, r3
 801504c:	d101      	bne.n	8015052 <__swsetup_r+0x46>
 801504e:	68ac      	ldr	r4, [r5, #8]
 8015050:	e7eb      	b.n	801502a <__swsetup_r+0x1e>
 8015052:	4b24      	ldr	r3, [pc, #144]	; (80150e4 <__swsetup_r+0xd8>)
 8015054:	429c      	cmp	r4, r3
 8015056:	bf08      	it	eq
 8015058:	68ec      	ldreq	r4, [r5, #12]
 801505a:	e7e6      	b.n	801502a <__swsetup_r+0x1e>
 801505c:	0751      	lsls	r1, r2, #29
 801505e:	d512      	bpl.n	8015086 <__swsetup_r+0x7a>
 8015060:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015062:	b141      	cbz	r1, 8015076 <__swsetup_r+0x6a>
 8015064:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015068:	4299      	cmp	r1, r3
 801506a:	d002      	beq.n	8015072 <__swsetup_r+0x66>
 801506c:	4630      	mov	r0, r6
 801506e:	f001 ffef 	bl	8017050 <_free_r>
 8015072:	2300      	movs	r3, #0
 8015074:	6363      	str	r3, [r4, #52]	; 0x34
 8015076:	89a3      	ldrh	r3, [r4, #12]
 8015078:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801507c:	81a3      	strh	r3, [r4, #12]
 801507e:	2300      	movs	r3, #0
 8015080:	6063      	str	r3, [r4, #4]
 8015082:	6923      	ldr	r3, [r4, #16]
 8015084:	6023      	str	r3, [r4, #0]
 8015086:	89a3      	ldrh	r3, [r4, #12]
 8015088:	f043 0308 	orr.w	r3, r3, #8
 801508c:	81a3      	strh	r3, [r4, #12]
 801508e:	6923      	ldr	r3, [r4, #16]
 8015090:	b94b      	cbnz	r3, 80150a6 <__swsetup_r+0x9a>
 8015092:	89a3      	ldrh	r3, [r4, #12]
 8015094:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015098:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801509c:	d003      	beq.n	80150a6 <__swsetup_r+0x9a>
 801509e:	4621      	mov	r1, r4
 80150a0:	4630      	mov	r0, r6
 80150a2:	f001 fb6d 	bl	8016780 <__smakebuf_r>
 80150a6:	89a2      	ldrh	r2, [r4, #12]
 80150a8:	f012 0301 	ands.w	r3, r2, #1
 80150ac:	d00c      	beq.n	80150c8 <__swsetup_r+0xbc>
 80150ae:	2300      	movs	r3, #0
 80150b0:	60a3      	str	r3, [r4, #8]
 80150b2:	6963      	ldr	r3, [r4, #20]
 80150b4:	425b      	negs	r3, r3
 80150b6:	61a3      	str	r3, [r4, #24]
 80150b8:	6923      	ldr	r3, [r4, #16]
 80150ba:	b953      	cbnz	r3, 80150d2 <__swsetup_r+0xc6>
 80150bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80150c0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80150c4:	d1ba      	bne.n	801503c <__swsetup_r+0x30>
 80150c6:	bd70      	pop	{r4, r5, r6, pc}
 80150c8:	0792      	lsls	r2, r2, #30
 80150ca:	bf58      	it	pl
 80150cc:	6963      	ldrpl	r3, [r4, #20]
 80150ce:	60a3      	str	r3, [r4, #8]
 80150d0:	e7f2      	b.n	80150b8 <__swsetup_r+0xac>
 80150d2:	2000      	movs	r0, #0
 80150d4:	e7f7      	b.n	80150c6 <__swsetup_r+0xba>
 80150d6:	bf00      	nop
 80150d8:	2000000c 	.word	0x2000000c
 80150dc:	08018928 	.word	0x08018928
 80150e0:	08018948 	.word	0x08018948
 80150e4:	08018908 	.word	0x08018908

080150e8 <_close_r>:
 80150e8:	b538      	push	{r3, r4, r5, lr}
 80150ea:	4c06      	ldr	r4, [pc, #24]	; (8015104 <_close_r+0x1c>)
 80150ec:	2300      	movs	r3, #0
 80150ee:	4605      	mov	r5, r0
 80150f0:	4608      	mov	r0, r1
 80150f2:	6023      	str	r3, [r4, #0]
 80150f4:	f7f0 ff13 	bl	8005f1e <_close>
 80150f8:	1c43      	adds	r3, r0, #1
 80150fa:	d102      	bne.n	8015102 <_close_r+0x1a>
 80150fc:	6823      	ldr	r3, [r4, #0]
 80150fe:	b103      	cbz	r3, 8015102 <_close_r+0x1a>
 8015100:	602b      	str	r3, [r5, #0]
 8015102:	bd38      	pop	{r3, r4, r5, pc}
 8015104:	20037fbc 	.word	0x20037fbc

08015108 <quorem>:
 8015108:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801510c:	6903      	ldr	r3, [r0, #16]
 801510e:	690c      	ldr	r4, [r1, #16]
 8015110:	42a3      	cmp	r3, r4
 8015112:	4680      	mov	r8, r0
 8015114:	f2c0 8082 	blt.w	801521c <quorem+0x114>
 8015118:	3c01      	subs	r4, #1
 801511a:	f101 0714 	add.w	r7, r1, #20
 801511e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8015122:	f100 0614 	add.w	r6, r0, #20
 8015126:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801512a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801512e:	eb06 030c 	add.w	r3, r6, ip
 8015132:	3501      	adds	r5, #1
 8015134:	eb07 090c 	add.w	r9, r7, ip
 8015138:	9301      	str	r3, [sp, #4]
 801513a:	fbb0 f5f5 	udiv	r5, r0, r5
 801513e:	b395      	cbz	r5, 80151a6 <quorem+0x9e>
 8015140:	f04f 0a00 	mov.w	sl, #0
 8015144:	4638      	mov	r0, r7
 8015146:	46b6      	mov	lr, r6
 8015148:	46d3      	mov	fp, sl
 801514a:	f850 2b04 	ldr.w	r2, [r0], #4
 801514e:	b293      	uxth	r3, r2
 8015150:	fb05 a303 	mla	r3, r5, r3, sl
 8015154:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015158:	b29b      	uxth	r3, r3
 801515a:	ebab 0303 	sub.w	r3, fp, r3
 801515e:	0c12      	lsrs	r2, r2, #16
 8015160:	f8de b000 	ldr.w	fp, [lr]
 8015164:	fb05 a202 	mla	r2, r5, r2, sl
 8015168:	fa13 f38b 	uxtah	r3, r3, fp
 801516c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8015170:	fa1f fb82 	uxth.w	fp, r2
 8015174:	f8de 2000 	ldr.w	r2, [lr]
 8015178:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 801517c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015180:	b29b      	uxth	r3, r3
 8015182:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015186:	4581      	cmp	r9, r0
 8015188:	ea4f 4b22 	mov.w	fp, r2, asr #16
 801518c:	f84e 3b04 	str.w	r3, [lr], #4
 8015190:	d2db      	bcs.n	801514a <quorem+0x42>
 8015192:	f856 300c 	ldr.w	r3, [r6, ip]
 8015196:	b933      	cbnz	r3, 80151a6 <quorem+0x9e>
 8015198:	9b01      	ldr	r3, [sp, #4]
 801519a:	3b04      	subs	r3, #4
 801519c:	429e      	cmp	r6, r3
 801519e:	461a      	mov	r2, r3
 80151a0:	d330      	bcc.n	8015204 <quorem+0xfc>
 80151a2:	f8c8 4010 	str.w	r4, [r8, #16]
 80151a6:	4640      	mov	r0, r8
 80151a8:	f001 fd98 	bl	8016cdc <__mcmp>
 80151ac:	2800      	cmp	r0, #0
 80151ae:	db25      	blt.n	80151fc <quorem+0xf4>
 80151b0:	3501      	adds	r5, #1
 80151b2:	4630      	mov	r0, r6
 80151b4:	f04f 0c00 	mov.w	ip, #0
 80151b8:	f857 2b04 	ldr.w	r2, [r7], #4
 80151bc:	f8d0 e000 	ldr.w	lr, [r0]
 80151c0:	b293      	uxth	r3, r2
 80151c2:	ebac 0303 	sub.w	r3, ip, r3
 80151c6:	0c12      	lsrs	r2, r2, #16
 80151c8:	fa13 f38e 	uxtah	r3, r3, lr
 80151cc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80151d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80151d4:	b29b      	uxth	r3, r3
 80151d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80151da:	45b9      	cmp	r9, r7
 80151dc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80151e0:	f840 3b04 	str.w	r3, [r0], #4
 80151e4:	d2e8      	bcs.n	80151b8 <quorem+0xb0>
 80151e6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80151ea:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80151ee:	b92a      	cbnz	r2, 80151fc <quorem+0xf4>
 80151f0:	3b04      	subs	r3, #4
 80151f2:	429e      	cmp	r6, r3
 80151f4:	461a      	mov	r2, r3
 80151f6:	d30b      	bcc.n	8015210 <quorem+0x108>
 80151f8:	f8c8 4010 	str.w	r4, [r8, #16]
 80151fc:	4628      	mov	r0, r5
 80151fe:	b003      	add	sp, #12
 8015200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015204:	6812      	ldr	r2, [r2, #0]
 8015206:	3b04      	subs	r3, #4
 8015208:	2a00      	cmp	r2, #0
 801520a:	d1ca      	bne.n	80151a2 <quorem+0x9a>
 801520c:	3c01      	subs	r4, #1
 801520e:	e7c5      	b.n	801519c <quorem+0x94>
 8015210:	6812      	ldr	r2, [r2, #0]
 8015212:	3b04      	subs	r3, #4
 8015214:	2a00      	cmp	r2, #0
 8015216:	d1ef      	bne.n	80151f8 <quorem+0xf0>
 8015218:	3c01      	subs	r4, #1
 801521a:	e7ea      	b.n	80151f2 <quorem+0xea>
 801521c:	2000      	movs	r0, #0
 801521e:	e7ee      	b.n	80151fe <quorem+0xf6>

08015220 <_dtoa_r>:
 8015220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015224:	ec57 6b10 	vmov	r6, r7, d0
 8015228:	b097      	sub	sp, #92	; 0x5c
 801522a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801522c:	9106      	str	r1, [sp, #24]
 801522e:	4604      	mov	r4, r0
 8015230:	920b      	str	r2, [sp, #44]	; 0x2c
 8015232:	9312      	str	r3, [sp, #72]	; 0x48
 8015234:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8015238:	e9cd 6700 	strd	r6, r7, [sp]
 801523c:	b93d      	cbnz	r5, 801524e <_dtoa_r+0x2e>
 801523e:	2010      	movs	r0, #16
 8015240:	f001 fade 	bl	8016800 <malloc>
 8015244:	6260      	str	r0, [r4, #36]	; 0x24
 8015246:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801524a:	6005      	str	r5, [r0, #0]
 801524c:	60c5      	str	r5, [r0, #12]
 801524e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015250:	6819      	ldr	r1, [r3, #0]
 8015252:	b151      	cbz	r1, 801526a <_dtoa_r+0x4a>
 8015254:	685a      	ldr	r2, [r3, #4]
 8015256:	604a      	str	r2, [r1, #4]
 8015258:	2301      	movs	r3, #1
 801525a:	4093      	lsls	r3, r2
 801525c:	608b      	str	r3, [r1, #8]
 801525e:	4620      	mov	r0, r4
 8015260:	f001 fb1c 	bl	801689c <_Bfree>
 8015264:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015266:	2200      	movs	r2, #0
 8015268:	601a      	str	r2, [r3, #0]
 801526a:	1e3b      	subs	r3, r7, #0
 801526c:	bfbb      	ittet	lt
 801526e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8015272:	9301      	strlt	r3, [sp, #4]
 8015274:	2300      	movge	r3, #0
 8015276:	2201      	movlt	r2, #1
 8015278:	bfac      	ite	ge
 801527a:	f8c8 3000 	strge.w	r3, [r8]
 801527e:	f8c8 2000 	strlt.w	r2, [r8]
 8015282:	4baf      	ldr	r3, [pc, #700]	; (8015540 <_dtoa_r+0x320>)
 8015284:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015288:	ea33 0308 	bics.w	r3, r3, r8
 801528c:	d114      	bne.n	80152b8 <_dtoa_r+0x98>
 801528e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015290:	f242 730f 	movw	r3, #9999	; 0x270f
 8015294:	6013      	str	r3, [r2, #0]
 8015296:	9b00      	ldr	r3, [sp, #0]
 8015298:	b923      	cbnz	r3, 80152a4 <_dtoa_r+0x84>
 801529a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801529e:	2800      	cmp	r0, #0
 80152a0:	f000 8542 	beq.w	8015d28 <_dtoa_r+0xb08>
 80152a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80152a6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8015554 <_dtoa_r+0x334>
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	f000 8544 	beq.w	8015d38 <_dtoa_r+0xb18>
 80152b0:	f10b 0303 	add.w	r3, fp, #3
 80152b4:	f000 bd3e 	b.w	8015d34 <_dtoa_r+0xb14>
 80152b8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80152bc:	2200      	movs	r2, #0
 80152be:	2300      	movs	r3, #0
 80152c0:	4630      	mov	r0, r6
 80152c2:	4639      	mov	r1, r7
 80152c4:	f7eb fc18 	bl	8000af8 <__aeabi_dcmpeq>
 80152c8:	4681      	mov	r9, r0
 80152ca:	b168      	cbz	r0, 80152e8 <_dtoa_r+0xc8>
 80152cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80152ce:	2301      	movs	r3, #1
 80152d0:	6013      	str	r3, [r2, #0]
 80152d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	f000 8524 	beq.w	8015d22 <_dtoa_r+0xb02>
 80152da:	4b9a      	ldr	r3, [pc, #616]	; (8015544 <_dtoa_r+0x324>)
 80152dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80152de:	f103 3bff 	add.w	fp, r3, #4294967295
 80152e2:	6013      	str	r3, [r2, #0]
 80152e4:	f000 bd28 	b.w	8015d38 <_dtoa_r+0xb18>
 80152e8:	aa14      	add	r2, sp, #80	; 0x50
 80152ea:	a915      	add	r1, sp, #84	; 0x54
 80152ec:	ec47 6b10 	vmov	d0, r6, r7
 80152f0:	4620      	mov	r0, r4
 80152f2:	f001 fde1 	bl	8016eb8 <__d2b>
 80152f6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80152fa:	9004      	str	r0, [sp, #16]
 80152fc:	2d00      	cmp	r5, #0
 80152fe:	d07c      	beq.n	80153fa <_dtoa_r+0x1da>
 8015300:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015304:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8015308:	46b2      	mov	sl, r6
 801530a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801530e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8015312:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8015316:	2200      	movs	r2, #0
 8015318:	4b8b      	ldr	r3, [pc, #556]	; (8015548 <_dtoa_r+0x328>)
 801531a:	4650      	mov	r0, sl
 801531c:	4659      	mov	r1, fp
 801531e:	f7ea ffcb 	bl	80002b8 <__aeabi_dsub>
 8015322:	a381      	add	r3, pc, #516	; (adr r3, 8015528 <_dtoa_r+0x308>)
 8015324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015328:	f7eb f97e 	bl	8000628 <__aeabi_dmul>
 801532c:	a380      	add	r3, pc, #512	; (adr r3, 8015530 <_dtoa_r+0x310>)
 801532e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015332:	f7ea ffc3 	bl	80002bc <__adddf3>
 8015336:	4606      	mov	r6, r0
 8015338:	4628      	mov	r0, r5
 801533a:	460f      	mov	r7, r1
 801533c:	f7eb f90a 	bl	8000554 <__aeabi_i2d>
 8015340:	a37d      	add	r3, pc, #500	; (adr r3, 8015538 <_dtoa_r+0x318>)
 8015342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015346:	f7eb f96f 	bl	8000628 <__aeabi_dmul>
 801534a:	4602      	mov	r2, r0
 801534c:	460b      	mov	r3, r1
 801534e:	4630      	mov	r0, r6
 8015350:	4639      	mov	r1, r7
 8015352:	f7ea ffb3 	bl	80002bc <__adddf3>
 8015356:	4606      	mov	r6, r0
 8015358:	460f      	mov	r7, r1
 801535a:	f7eb fc15 	bl	8000b88 <__aeabi_d2iz>
 801535e:	2200      	movs	r2, #0
 8015360:	4682      	mov	sl, r0
 8015362:	2300      	movs	r3, #0
 8015364:	4630      	mov	r0, r6
 8015366:	4639      	mov	r1, r7
 8015368:	f7eb fbd0 	bl	8000b0c <__aeabi_dcmplt>
 801536c:	b148      	cbz	r0, 8015382 <_dtoa_r+0x162>
 801536e:	4650      	mov	r0, sl
 8015370:	f7eb f8f0 	bl	8000554 <__aeabi_i2d>
 8015374:	4632      	mov	r2, r6
 8015376:	463b      	mov	r3, r7
 8015378:	f7eb fbbe 	bl	8000af8 <__aeabi_dcmpeq>
 801537c:	b908      	cbnz	r0, 8015382 <_dtoa_r+0x162>
 801537e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015382:	f1ba 0f16 	cmp.w	sl, #22
 8015386:	d859      	bhi.n	801543c <_dtoa_r+0x21c>
 8015388:	4970      	ldr	r1, [pc, #448]	; (801554c <_dtoa_r+0x32c>)
 801538a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801538e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015392:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015396:	f7eb fbd7 	bl	8000b48 <__aeabi_dcmpgt>
 801539a:	2800      	cmp	r0, #0
 801539c:	d050      	beq.n	8015440 <_dtoa_r+0x220>
 801539e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80153a2:	2300      	movs	r3, #0
 80153a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80153a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80153a8:	1b5d      	subs	r5, r3, r5
 80153aa:	f1b5 0801 	subs.w	r8, r5, #1
 80153ae:	bf49      	itett	mi
 80153b0:	f1c5 0301 	rsbmi	r3, r5, #1
 80153b4:	2300      	movpl	r3, #0
 80153b6:	9305      	strmi	r3, [sp, #20]
 80153b8:	f04f 0800 	movmi.w	r8, #0
 80153bc:	bf58      	it	pl
 80153be:	9305      	strpl	r3, [sp, #20]
 80153c0:	f1ba 0f00 	cmp.w	sl, #0
 80153c4:	db3e      	blt.n	8015444 <_dtoa_r+0x224>
 80153c6:	2300      	movs	r3, #0
 80153c8:	44d0      	add	r8, sl
 80153ca:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80153ce:	9307      	str	r3, [sp, #28]
 80153d0:	9b06      	ldr	r3, [sp, #24]
 80153d2:	2b09      	cmp	r3, #9
 80153d4:	f200 8090 	bhi.w	80154f8 <_dtoa_r+0x2d8>
 80153d8:	2b05      	cmp	r3, #5
 80153da:	bfc4      	itt	gt
 80153dc:	3b04      	subgt	r3, #4
 80153de:	9306      	strgt	r3, [sp, #24]
 80153e0:	9b06      	ldr	r3, [sp, #24]
 80153e2:	f1a3 0302 	sub.w	r3, r3, #2
 80153e6:	bfcc      	ite	gt
 80153e8:	2500      	movgt	r5, #0
 80153ea:	2501      	movle	r5, #1
 80153ec:	2b03      	cmp	r3, #3
 80153ee:	f200 808f 	bhi.w	8015510 <_dtoa_r+0x2f0>
 80153f2:	e8df f003 	tbb	[pc, r3]
 80153f6:	7f7d      	.short	0x7f7d
 80153f8:	7131      	.short	0x7131
 80153fa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80153fe:	441d      	add	r5, r3
 8015400:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8015404:	2820      	cmp	r0, #32
 8015406:	dd13      	ble.n	8015430 <_dtoa_r+0x210>
 8015408:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801540c:	9b00      	ldr	r3, [sp, #0]
 801540e:	fa08 f800 	lsl.w	r8, r8, r0
 8015412:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8015416:	fa23 f000 	lsr.w	r0, r3, r0
 801541a:	ea48 0000 	orr.w	r0, r8, r0
 801541e:	f7eb f889 	bl	8000534 <__aeabi_ui2d>
 8015422:	2301      	movs	r3, #1
 8015424:	4682      	mov	sl, r0
 8015426:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801542a:	3d01      	subs	r5, #1
 801542c:	9313      	str	r3, [sp, #76]	; 0x4c
 801542e:	e772      	b.n	8015316 <_dtoa_r+0xf6>
 8015430:	9b00      	ldr	r3, [sp, #0]
 8015432:	f1c0 0020 	rsb	r0, r0, #32
 8015436:	fa03 f000 	lsl.w	r0, r3, r0
 801543a:	e7f0      	b.n	801541e <_dtoa_r+0x1fe>
 801543c:	2301      	movs	r3, #1
 801543e:	e7b1      	b.n	80153a4 <_dtoa_r+0x184>
 8015440:	900f      	str	r0, [sp, #60]	; 0x3c
 8015442:	e7b0      	b.n	80153a6 <_dtoa_r+0x186>
 8015444:	9b05      	ldr	r3, [sp, #20]
 8015446:	eba3 030a 	sub.w	r3, r3, sl
 801544a:	9305      	str	r3, [sp, #20]
 801544c:	f1ca 0300 	rsb	r3, sl, #0
 8015450:	9307      	str	r3, [sp, #28]
 8015452:	2300      	movs	r3, #0
 8015454:	930e      	str	r3, [sp, #56]	; 0x38
 8015456:	e7bb      	b.n	80153d0 <_dtoa_r+0x1b0>
 8015458:	2301      	movs	r3, #1
 801545a:	930a      	str	r3, [sp, #40]	; 0x28
 801545c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801545e:	2b00      	cmp	r3, #0
 8015460:	dd59      	ble.n	8015516 <_dtoa_r+0x2f6>
 8015462:	9302      	str	r3, [sp, #8]
 8015464:	4699      	mov	r9, r3
 8015466:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015468:	2200      	movs	r2, #0
 801546a:	6072      	str	r2, [r6, #4]
 801546c:	2204      	movs	r2, #4
 801546e:	f102 0014 	add.w	r0, r2, #20
 8015472:	4298      	cmp	r0, r3
 8015474:	6871      	ldr	r1, [r6, #4]
 8015476:	d953      	bls.n	8015520 <_dtoa_r+0x300>
 8015478:	4620      	mov	r0, r4
 801547a:	f001 f9db 	bl	8016834 <_Balloc>
 801547e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015480:	6030      	str	r0, [r6, #0]
 8015482:	f1b9 0f0e 	cmp.w	r9, #14
 8015486:	f8d3 b000 	ldr.w	fp, [r3]
 801548a:	f200 80e6 	bhi.w	801565a <_dtoa_r+0x43a>
 801548e:	2d00      	cmp	r5, #0
 8015490:	f000 80e3 	beq.w	801565a <_dtoa_r+0x43a>
 8015494:	ed9d 7b00 	vldr	d7, [sp]
 8015498:	f1ba 0f00 	cmp.w	sl, #0
 801549c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80154a0:	dd74      	ble.n	801558c <_dtoa_r+0x36c>
 80154a2:	4a2a      	ldr	r2, [pc, #168]	; (801554c <_dtoa_r+0x32c>)
 80154a4:	f00a 030f 	and.w	r3, sl, #15
 80154a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80154ac:	ed93 7b00 	vldr	d7, [r3]
 80154b0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80154b4:	06f0      	lsls	r0, r6, #27
 80154b6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80154ba:	d565      	bpl.n	8015588 <_dtoa_r+0x368>
 80154bc:	4b24      	ldr	r3, [pc, #144]	; (8015550 <_dtoa_r+0x330>)
 80154be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80154c2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80154c6:	f7eb f9d9 	bl	800087c <__aeabi_ddiv>
 80154ca:	e9cd 0100 	strd	r0, r1, [sp]
 80154ce:	f006 060f 	and.w	r6, r6, #15
 80154d2:	2503      	movs	r5, #3
 80154d4:	4f1e      	ldr	r7, [pc, #120]	; (8015550 <_dtoa_r+0x330>)
 80154d6:	e04c      	b.n	8015572 <_dtoa_r+0x352>
 80154d8:	2301      	movs	r3, #1
 80154da:	930a      	str	r3, [sp, #40]	; 0x28
 80154dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80154de:	4453      	add	r3, sl
 80154e0:	f103 0901 	add.w	r9, r3, #1
 80154e4:	9302      	str	r3, [sp, #8]
 80154e6:	464b      	mov	r3, r9
 80154e8:	2b01      	cmp	r3, #1
 80154ea:	bfb8      	it	lt
 80154ec:	2301      	movlt	r3, #1
 80154ee:	e7ba      	b.n	8015466 <_dtoa_r+0x246>
 80154f0:	2300      	movs	r3, #0
 80154f2:	e7b2      	b.n	801545a <_dtoa_r+0x23a>
 80154f4:	2300      	movs	r3, #0
 80154f6:	e7f0      	b.n	80154da <_dtoa_r+0x2ba>
 80154f8:	2501      	movs	r5, #1
 80154fa:	2300      	movs	r3, #0
 80154fc:	9306      	str	r3, [sp, #24]
 80154fe:	950a      	str	r5, [sp, #40]	; 0x28
 8015500:	f04f 33ff 	mov.w	r3, #4294967295
 8015504:	9302      	str	r3, [sp, #8]
 8015506:	4699      	mov	r9, r3
 8015508:	2200      	movs	r2, #0
 801550a:	2312      	movs	r3, #18
 801550c:	920b      	str	r2, [sp, #44]	; 0x2c
 801550e:	e7aa      	b.n	8015466 <_dtoa_r+0x246>
 8015510:	2301      	movs	r3, #1
 8015512:	930a      	str	r3, [sp, #40]	; 0x28
 8015514:	e7f4      	b.n	8015500 <_dtoa_r+0x2e0>
 8015516:	2301      	movs	r3, #1
 8015518:	9302      	str	r3, [sp, #8]
 801551a:	4699      	mov	r9, r3
 801551c:	461a      	mov	r2, r3
 801551e:	e7f5      	b.n	801550c <_dtoa_r+0x2ec>
 8015520:	3101      	adds	r1, #1
 8015522:	6071      	str	r1, [r6, #4]
 8015524:	0052      	lsls	r2, r2, #1
 8015526:	e7a2      	b.n	801546e <_dtoa_r+0x24e>
 8015528:	636f4361 	.word	0x636f4361
 801552c:	3fd287a7 	.word	0x3fd287a7
 8015530:	8b60c8b3 	.word	0x8b60c8b3
 8015534:	3fc68a28 	.word	0x3fc68a28
 8015538:	509f79fb 	.word	0x509f79fb
 801553c:	3fd34413 	.word	0x3fd34413
 8015540:	7ff00000 	.word	0x7ff00000
 8015544:	08018a9c 	.word	0x08018a9c
 8015548:	3ff80000 	.word	0x3ff80000
 801554c:	080189a0 	.word	0x080189a0
 8015550:	08018978 	.word	0x08018978
 8015554:	08018901 	.word	0x08018901
 8015558:	07f1      	lsls	r1, r6, #31
 801555a:	d508      	bpl.n	801556e <_dtoa_r+0x34e>
 801555c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015560:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015564:	f7eb f860 	bl	8000628 <__aeabi_dmul>
 8015568:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801556c:	3501      	adds	r5, #1
 801556e:	1076      	asrs	r6, r6, #1
 8015570:	3708      	adds	r7, #8
 8015572:	2e00      	cmp	r6, #0
 8015574:	d1f0      	bne.n	8015558 <_dtoa_r+0x338>
 8015576:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801557a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801557e:	f7eb f97d 	bl	800087c <__aeabi_ddiv>
 8015582:	e9cd 0100 	strd	r0, r1, [sp]
 8015586:	e01a      	b.n	80155be <_dtoa_r+0x39e>
 8015588:	2502      	movs	r5, #2
 801558a:	e7a3      	b.n	80154d4 <_dtoa_r+0x2b4>
 801558c:	f000 80a0 	beq.w	80156d0 <_dtoa_r+0x4b0>
 8015590:	f1ca 0600 	rsb	r6, sl, #0
 8015594:	4b9f      	ldr	r3, [pc, #636]	; (8015814 <_dtoa_r+0x5f4>)
 8015596:	4fa0      	ldr	r7, [pc, #640]	; (8015818 <_dtoa_r+0x5f8>)
 8015598:	f006 020f 	and.w	r2, r6, #15
 801559c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80155a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80155a8:	f7eb f83e 	bl	8000628 <__aeabi_dmul>
 80155ac:	e9cd 0100 	strd	r0, r1, [sp]
 80155b0:	1136      	asrs	r6, r6, #4
 80155b2:	2300      	movs	r3, #0
 80155b4:	2502      	movs	r5, #2
 80155b6:	2e00      	cmp	r6, #0
 80155b8:	d17f      	bne.n	80156ba <_dtoa_r+0x49a>
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d1e1      	bne.n	8015582 <_dtoa_r+0x362>
 80155be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	f000 8087 	beq.w	80156d4 <_dtoa_r+0x4b4>
 80155c6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80155ca:	2200      	movs	r2, #0
 80155cc:	4b93      	ldr	r3, [pc, #588]	; (801581c <_dtoa_r+0x5fc>)
 80155ce:	4630      	mov	r0, r6
 80155d0:	4639      	mov	r1, r7
 80155d2:	f7eb fa9b 	bl	8000b0c <__aeabi_dcmplt>
 80155d6:	2800      	cmp	r0, #0
 80155d8:	d07c      	beq.n	80156d4 <_dtoa_r+0x4b4>
 80155da:	f1b9 0f00 	cmp.w	r9, #0
 80155de:	d079      	beq.n	80156d4 <_dtoa_r+0x4b4>
 80155e0:	9b02      	ldr	r3, [sp, #8]
 80155e2:	2b00      	cmp	r3, #0
 80155e4:	dd35      	ble.n	8015652 <_dtoa_r+0x432>
 80155e6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80155ea:	9308      	str	r3, [sp, #32]
 80155ec:	4639      	mov	r1, r7
 80155ee:	2200      	movs	r2, #0
 80155f0:	4b8b      	ldr	r3, [pc, #556]	; (8015820 <_dtoa_r+0x600>)
 80155f2:	4630      	mov	r0, r6
 80155f4:	f7eb f818 	bl	8000628 <__aeabi_dmul>
 80155f8:	e9cd 0100 	strd	r0, r1, [sp]
 80155fc:	9f02      	ldr	r7, [sp, #8]
 80155fe:	3501      	adds	r5, #1
 8015600:	4628      	mov	r0, r5
 8015602:	f7ea ffa7 	bl	8000554 <__aeabi_i2d>
 8015606:	e9dd 2300 	ldrd	r2, r3, [sp]
 801560a:	f7eb f80d 	bl	8000628 <__aeabi_dmul>
 801560e:	2200      	movs	r2, #0
 8015610:	4b84      	ldr	r3, [pc, #528]	; (8015824 <_dtoa_r+0x604>)
 8015612:	f7ea fe53 	bl	80002bc <__adddf3>
 8015616:	4605      	mov	r5, r0
 8015618:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801561c:	2f00      	cmp	r7, #0
 801561e:	d15d      	bne.n	80156dc <_dtoa_r+0x4bc>
 8015620:	2200      	movs	r2, #0
 8015622:	4b81      	ldr	r3, [pc, #516]	; (8015828 <_dtoa_r+0x608>)
 8015624:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015628:	f7ea fe46 	bl	80002b8 <__aeabi_dsub>
 801562c:	462a      	mov	r2, r5
 801562e:	4633      	mov	r3, r6
 8015630:	e9cd 0100 	strd	r0, r1, [sp]
 8015634:	f7eb fa88 	bl	8000b48 <__aeabi_dcmpgt>
 8015638:	2800      	cmp	r0, #0
 801563a:	f040 8288 	bne.w	8015b4e <_dtoa_r+0x92e>
 801563e:	462a      	mov	r2, r5
 8015640:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8015644:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015648:	f7eb fa60 	bl	8000b0c <__aeabi_dcmplt>
 801564c:	2800      	cmp	r0, #0
 801564e:	f040 827c 	bne.w	8015b4a <_dtoa_r+0x92a>
 8015652:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8015656:	e9cd 2300 	strd	r2, r3, [sp]
 801565a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801565c:	2b00      	cmp	r3, #0
 801565e:	f2c0 8150 	blt.w	8015902 <_dtoa_r+0x6e2>
 8015662:	f1ba 0f0e 	cmp.w	sl, #14
 8015666:	f300 814c 	bgt.w	8015902 <_dtoa_r+0x6e2>
 801566a:	4b6a      	ldr	r3, [pc, #424]	; (8015814 <_dtoa_r+0x5f4>)
 801566c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8015670:	ed93 7b00 	vldr	d7, [r3]
 8015674:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015676:	2b00      	cmp	r3, #0
 8015678:	ed8d 7b02 	vstr	d7, [sp, #8]
 801567c:	f280 80d8 	bge.w	8015830 <_dtoa_r+0x610>
 8015680:	f1b9 0f00 	cmp.w	r9, #0
 8015684:	f300 80d4 	bgt.w	8015830 <_dtoa_r+0x610>
 8015688:	f040 825e 	bne.w	8015b48 <_dtoa_r+0x928>
 801568c:	2200      	movs	r2, #0
 801568e:	4b66      	ldr	r3, [pc, #408]	; (8015828 <_dtoa_r+0x608>)
 8015690:	ec51 0b17 	vmov	r0, r1, d7
 8015694:	f7ea ffc8 	bl	8000628 <__aeabi_dmul>
 8015698:	e9dd 2300 	ldrd	r2, r3, [sp]
 801569c:	f7eb fa4a 	bl	8000b34 <__aeabi_dcmpge>
 80156a0:	464f      	mov	r7, r9
 80156a2:	464e      	mov	r6, r9
 80156a4:	2800      	cmp	r0, #0
 80156a6:	f040 8234 	bne.w	8015b12 <_dtoa_r+0x8f2>
 80156aa:	2331      	movs	r3, #49	; 0x31
 80156ac:	f10b 0501 	add.w	r5, fp, #1
 80156b0:	f88b 3000 	strb.w	r3, [fp]
 80156b4:	f10a 0a01 	add.w	sl, sl, #1
 80156b8:	e22f      	b.n	8015b1a <_dtoa_r+0x8fa>
 80156ba:	07f2      	lsls	r2, r6, #31
 80156bc:	d505      	bpl.n	80156ca <_dtoa_r+0x4aa>
 80156be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80156c2:	f7ea ffb1 	bl	8000628 <__aeabi_dmul>
 80156c6:	3501      	adds	r5, #1
 80156c8:	2301      	movs	r3, #1
 80156ca:	1076      	asrs	r6, r6, #1
 80156cc:	3708      	adds	r7, #8
 80156ce:	e772      	b.n	80155b6 <_dtoa_r+0x396>
 80156d0:	2502      	movs	r5, #2
 80156d2:	e774      	b.n	80155be <_dtoa_r+0x39e>
 80156d4:	f8cd a020 	str.w	sl, [sp, #32]
 80156d8:	464f      	mov	r7, r9
 80156da:	e791      	b.n	8015600 <_dtoa_r+0x3e0>
 80156dc:	4b4d      	ldr	r3, [pc, #308]	; (8015814 <_dtoa_r+0x5f4>)
 80156de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80156e2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80156e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	d047      	beq.n	801577c <_dtoa_r+0x55c>
 80156ec:	4602      	mov	r2, r0
 80156ee:	460b      	mov	r3, r1
 80156f0:	2000      	movs	r0, #0
 80156f2:	494e      	ldr	r1, [pc, #312]	; (801582c <_dtoa_r+0x60c>)
 80156f4:	f7eb f8c2 	bl	800087c <__aeabi_ddiv>
 80156f8:	462a      	mov	r2, r5
 80156fa:	4633      	mov	r3, r6
 80156fc:	f7ea fddc 	bl	80002b8 <__aeabi_dsub>
 8015700:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015704:	465d      	mov	r5, fp
 8015706:	e9dd 0100 	ldrd	r0, r1, [sp]
 801570a:	f7eb fa3d 	bl	8000b88 <__aeabi_d2iz>
 801570e:	4606      	mov	r6, r0
 8015710:	f7ea ff20 	bl	8000554 <__aeabi_i2d>
 8015714:	4602      	mov	r2, r0
 8015716:	460b      	mov	r3, r1
 8015718:	e9dd 0100 	ldrd	r0, r1, [sp]
 801571c:	f7ea fdcc 	bl	80002b8 <__aeabi_dsub>
 8015720:	3630      	adds	r6, #48	; 0x30
 8015722:	f805 6b01 	strb.w	r6, [r5], #1
 8015726:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801572a:	e9cd 0100 	strd	r0, r1, [sp]
 801572e:	f7eb f9ed 	bl	8000b0c <__aeabi_dcmplt>
 8015732:	2800      	cmp	r0, #0
 8015734:	d163      	bne.n	80157fe <_dtoa_r+0x5de>
 8015736:	e9dd 2300 	ldrd	r2, r3, [sp]
 801573a:	2000      	movs	r0, #0
 801573c:	4937      	ldr	r1, [pc, #220]	; (801581c <_dtoa_r+0x5fc>)
 801573e:	f7ea fdbb 	bl	80002b8 <__aeabi_dsub>
 8015742:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015746:	f7eb f9e1 	bl	8000b0c <__aeabi_dcmplt>
 801574a:	2800      	cmp	r0, #0
 801574c:	f040 80b7 	bne.w	80158be <_dtoa_r+0x69e>
 8015750:	eba5 030b 	sub.w	r3, r5, fp
 8015754:	429f      	cmp	r7, r3
 8015756:	f77f af7c 	ble.w	8015652 <_dtoa_r+0x432>
 801575a:	2200      	movs	r2, #0
 801575c:	4b30      	ldr	r3, [pc, #192]	; (8015820 <_dtoa_r+0x600>)
 801575e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015762:	f7ea ff61 	bl	8000628 <__aeabi_dmul>
 8015766:	2200      	movs	r2, #0
 8015768:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801576c:	4b2c      	ldr	r3, [pc, #176]	; (8015820 <_dtoa_r+0x600>)
 801576e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015772:	f7ea ff59 	bl	8000628 <__aeabi_dmul>
 8015776:	e9cd 0100 	strd	r0, r1, [sp]
 801577a:	e7c4      	b.n	8015706 <_dtoa_r+0x4e6>
 801577c:	462a      	mov	r2, r5
 801577e:	4633      	mov	r3, r6
 8015780:	f7ea ff52 	bl	8000628 <__aeabi_dmul>
 8015784:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015788:	eb0b 0507 	add.w	r5, fp, r7
 801578c:	465e      	mov	r6, fp
 801578e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015792:	f7eb f9f9 	bl	8000b88 <__aeabi_d2iz>
 8015796:	4607      	mov	r7, r0
 8015798:	f7ea fedc 	bl	8000554 <__aeabi_i2d>
 801579c:	3730      	adds	r7, #48	; 0x30
 801579e:	4602      	mov	r2, r0
 80157a0:	460b      	mov	r3, r1
 80157a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80157a6:	f7ea fd87 	bl	80002b8 <__aeabi_dsub>
 80157aa:	f806 7b01 	strb.w	r7, [r6], #1
 80157ae:	42ae      	cmp	r6, r5
 80157b0:	e9cd 0100 	strd	r0, r1, [sp]
 80157b4:	f04f 0200 	mov.w	r2, #0
 80157b8:	d126      	bne.n	8015808 <_dtoa_r+0x5e8>
 80157ba:	4b1c      	ldr	r3, [pc, #112]	; (801582c <_dtoa_r+0x60c>)
 80157bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80157c0:	f7ea fd7c 	bl	80002bc <__adddf3>
 80157c4:	4602      	mov	r2, r0
 80157c6:	460b      	mov	r3, r1
 80157c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80157cc:	f7eb f9bc 	bl	8000b48 <__aeabi_dcmpgt>
 80157d0:	2800      	cmp	r0, #0
 80157d2:	d174      	bne.n	80158be <_dtoa_r+0x69e>
 80157d4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80157d8:	2000      	movs	r0, #0
 80157da:	4914      	ldr	r1, [pc, #80]	; (801582c <_dtoa_r+0x60c>)
 80157dc:	f7ea fd6c 	bl	80002b8 <__aeabi_dsub>
 80157e0:	4602      	mov	r2, r0
 80157e2:	460b      	mov	r3, r1
 80157e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80157e8:	f7eb f990 	bl	8000b0c <__aeabi_dcmplt>
 80157ec:	2800      	cmp	r0, #0
 80157ee:	f43f af30 	beq.w	8015652 <_dtoa_r+0x432>
 80157f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80157f6:	2b30      	cmp	r3, #48	; 0x30
 80157f8:	f105 32ff 	add.w	r2, r5, #4294967295
 80157fc:	d002      	beq.n	8015804 <_dtoa_r+0x5e4>
 80157fe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8015802:	e04a      	b.n	801589a <_dtoa_r+0x67a>
 8015804:	4615      	mov	r5, r2
 8015806:	e7f4      	b.n	80157f2 <_dtoa_r+0x5d2>
 8015808:	4b05      	ldr	r3, [pc, #20]	; (8015820 <_dtoa_r+0x600>)
 801580a:	f7ea ff0d 	bl	8000628 <__aeabi_dmul>
 801580e:	e9cd 0100 	strd	r0, r1, [sp]
 8015812:	e7bc      	b.n	801578e <_dtoa_r+0x56e>
 8015814:	080189a0 	.word	0x080189a0
 8015818:	08018978 	.word	0x08018978
 801581c:	3ff00000 	.word	0x3ff00000
 8015820:	40240000 	.word	0x40240000
 8015824:	401c0000 	.word	0x401c0000
 8015828:	40140000 	.word	0x40140000
 801582c:	3fe00000 	.word	0x3fe00000
 8015830:	e9dd 6700 	ldrd	r6, r7, [sp]
 8015834:	465d      	mov	r5, fp
 8015836:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801583a:	4630      	mov	r0, r6
 801583c:	4639      	mov	r1, r7
 801583e:	f7eb f81d 	bl	800087c <__aeabi_ddiv>
 8015842:	f7eb f9a1 	bl	8000b88 <__aeabi_d2iz>
 8015846:	4680      	mov	r8, r0
 8015848:	f7ea fe84 	bl	8000554 <__aeabi_i2d>
 801584c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015850:	f7ea feea 	bl	8000628 <__aeabi_dmul>
 8015854:	4602      	mov	r2, r0
 8015856:	460b      	mov	r3, r1
 8015858:	4630      	mov	r0, r6
 801585a:	4639      	mov	r1, r7
 801585c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8015860:	f7ea fd2a 	bl	80002b8 <__aeabi_dsub>
 8015864:	f805 6b01 	strb.w	r6, [r5], #1
 8015868:	eba5 060b 	sub.w	r6, r5, fp
 801586c:	45b1      	cmp	r9, r6
 801586e:	4602      	mov	r2, r0
 8015870:	460b      	mov	r3, r1
 8015872:	d139      	bne.n	80158e8 <_dtoa_r+0x6c8>
 8015874:	f7ea fd22 	bl	80002bc <__adddf3>
 8015878:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801587c:	4606      	mov	r6, r0
 801587e:	460f      	mov	r7, r1
 8015880:	f7eb f962 	bl	8000b48 <__aeabi_dcmpgt>
 8015884:	b9c8      	cbnz	r0, 80158ba <_dtoa_r+0x69a>
 8015886:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801588a:	4630      	mov	r0, r6
 801588c:	4639      	mov	r1, r7
 801588e:	f7eb f933 	bl	8000af8 <__aeabi_dcmpeq>
 8015892:	b110      	cbz	r0, 801589a <_dtoa_r+0x67a>
 8015894:	f018 0f01 	tst.w	r8, #1
 8015898:	d10f      	bne.n	80158ba <_dtoa_r+0x69a>
 801589a:	9904      	ldr	r1, [sp, #16]
 801589c:	4620      	mov	r0, r4
 801589e:	f000 fffd 	bl	801689c <_Bfree>
 80158a2:	2300      	movs	r3, #0
 80158a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80158a6:	702b      	strb	r3, [r5, #0]
 80158a8:	f10a 0301 	add.w	r3, sl, #1
 80158ac:	6013      	str	r3, [r2, #0]
 80158ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	f000 8241 	beq.w	8015d38 <_dtoa_r+0xb18>
 80158b6:	601d      	str	r5, [r3, #0]
 80158b8:	e23e      	b.n	8015d38 <_dtoa_r+0xb18>
 80158ba:	f8cd a020 	str.w	sl, [sp, #32]
 80158be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80158c2:	2a39      	cmp	r2, #57	; 0x39
 80158c4:	f105 33ff 	add.w	r3, r5, #4294967295
 80158c8:	d108      	bne.n	80158dc <_dtoa_r+0x6bc>
 80158ca:	459b      	cmp	fp, r3
 80158cc:	d10a      	bne.n	80158e4 <_dtoa_r+0x6c4>
 80158ce:	9b08      	ldr	r3, [sp, #32]
 80158d0:	3301      	adds	r3, #1
 80158d2:	9308      	str	r3, [sp, #32]
 80158d4:	2330      	movs	r3, #48	; 0x30
 80158d6:	f88b 3000 	strb.w	r3, [fp]
 80158da:	465b      	mov	r3, fp
 80158dc:	781a      	ldrb	r2, [r3, #0]
 80158de:	3201      	adds	r2, #1
 80158e0:	701a      	strb	r2, [r3, #0]
 80158e2:	e78c      	b.n	80157fe <_dtoa_r+0x5de>
 80158e4:	461d      	mov	r5, r3
 80158e6:	e7ea      	b.n	80158be <_dtoa_r+0x69e>
 80158e8:	2200      	movs	r2, #0
 80158ea:	4b9b      	ldr	r3, [pc, #620]	; (8015b58 <_dtoa_r+0x938>)
 80158ec:	f7ea fe9c 	bl	8000628 <__aeabi_dmul>
 80158f0:	2200      	movs	r2, #0
 80158f2:	2300      	movs	r3, #0
 80158f4:	4606      	mov	r6, r0
 80158f6:	460f      	mov	r7, r1
 80158f8:	f7eb f8fe 	bl	8000af8 <__aeabi_dcmpeq>
 80158fc:	2800      	cmp	r0, #0
 80158fe:	d09a      	beq.n	8015836 <_dtoa_r+0x616>
 8015900:	e7cb      	b.n	801589a <_dtoa_r+0x67a>
 8015902:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015904:	2a00      	cmp	r2, #0
 8015906:	f000 808b 	beq.w	8015a20 <_dtoa_r+0x800>
 801590a:	9a06      	ldr	r2, [sp, #24]
 801590c:	2a01      	cmp	r2, #1
 801590e:	dc6e      	bgt.n	80159ee <_dtoa_r+0x7ce>
 8015910:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015912:	2a00      	cmp	r2, #0
 8015914:	d067      	beq.n	80159e6 <_dtoa_r+0x7c6>
 8015916:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801591a:	9f07      	ldr	r7, [sp, #28]
 801591c:	9d05      	ldr	r5, [sp, #20]
 801591e:	9a05      	ldr	r2, [sp, #20]
 8015920:	2101      	movs	r1, #1
 8015922:	441a      	add	r2, r3
 8015924:	4620      	mov	r0, r4
 8015926:	9205      	str	r2, [sp, #20]
 8015928:	4498      	add	r8, r3
 801592a:	f001 f895 	bl	8016a58 <__i2b>
 801592e:	4606      	mov	r6, r0
 8015930:	2d00      	cmp	r5, #0
 8015932:	dd0c      	ble.n	801594e <_dtoa_r+0x72e>
 8015934:	f1b8 0f00 	cmp.w	r8, #0
 8015938:	dd09      	ble.n	801594e <_dtoa_r+0x72e>
 801593a:	4545      	cmp	r5, r8
 801593c:	9a05      	ldr	r2, [sp, #20]
 801593e:	462b      	mov	r3, r5
 8015940:	bfa8      	it	ge
 8015942:	4643      	movge	r3, r8
 8015944:	1ad2      	subs	r2, r2, r3
 8015946:	9205      	str	r2, [sp, #20]
 8015948:	1aed      	subs	r5, r5, r3
 801594a:	eba8 0803 	sub.w	r8, r8, r3
 801594e:	9b07      	ldr	r3, [sp, #28]
 8015950:	b1eb      	cbz	r3, 801598e <_dtoa_r+0x76e>
 8015952:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015954:	2b00      	cmp	r3, #0
 8015956:	d067      	beq.n	8015a28 <_dtoa_r+0x808>
 8015958:	b18f      	cbz	r7, 801597e <_dtoa_r+0x75e>
 801595a:	4631      	mov	r1, r6
 801595c:	463a      	mov	r2, r7
 801595e:	4620      	mov	r0, r4
 8015960:	f001 f91a 	bl	8016b98 <__pow5mult>
 8015964:	9a04      	ldr	r2, [sp, #16]
 8015966:	4601      	mov	r1, r0
 8015968:	4606      	mov	r6, r0
 801596a:	4620      	mov	r0, r4
 801596c:	f001 f87d 	bl	8016a6a <__multiply>
 8015970:	9904      	ldr	r1, [sp, #16]
 8015972:	9008      	str	r0, [sp, #32]
 8015974:	4620      	mov	r0, r4
 8015976:	f000 ff91 	bl	801689c <_Bfree>
 801597a:	9b08      	ldr	r3, [sp, #32]
 801597c:	9304      	str	r3, [sp, #16]
 801597e:	9b07      	ldr	r3, [sp, #28]
 8015980:	1bda      	subs	r2, r3, r7
 8015982:	d004      	beq.n	801598e <_dtoa_r+0x76e>
 8015984:	9904      	ldr	r1, [sp, #16]
 8015986:	4620      	mov	r0, r4
 8015988:	f001 f906 	bl	8016b98 <__pow5mult>
 801598c:	9004      	str	r0, [sp, #16]
 801598e:	2101      	movs	r1, #1
 8015990:	4620      	mov	r0, r4
 8015992:	f001 f861 	bl	8016a58 <__i2b>
 8015996:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015998:	4607      	mov	r7, r0
 801599a:	2b00      	cmp	r3, #0
 801599c:	f000 81d0 	beq.w	8015d40 <_dtoa_r+0xb20>
 80159a0:	461a      	mov	r2, r3
 80159a2:	4601      	mov	r1, r0
 80159a4:	4620      	mov	r0, r4
 80159a6:	f001 f8f7 	bl	8016b98 <__pow5mult>
 80159aa:	9b06      	ldr	r3, [sp, #24]
 80159ac:	2b01      	cmp	r3, #1
 80159ae:	4607      	mov	r7, r0
 80159b0:	dc40      	bgt.n	8015a34 <_dtoa_r+0x814>
 80159b2:	9b00      	ldr	r3, [sp, #0]
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	d139      	bne.n	8015a2c <_dtoa_r+0x80c>
 80159b8:	9b01      	ldr	r3, [sp, #4]
 80159ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80159be:	2b00      	cmp	r3, #0
 80159c0:	d136      	bne.n	8015a30 <_dtoa_r+0x810>
 80159c2:	9b01      	ldr	r3, [sp, #4]
 80159c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80159c8:	0d1b      	lsrs	r3, r3, #20
 80159ca:	051b      	lsls	r3, r3, #20
 80159cc:	b12b      	cbz	r3, 80159da <_dtoa_r+0x7ba>
 80159ce:	9b05      	ldr	r3, [sp, #20]
 80159d0:	3301      	adds	r3, #1
 80159d2:	9305      	str	r3, [sp, #20]
 80159d4:	f108 0801 	add.w	r8, r8, #1
 80159d8:	2301      	movs	r3, #1
 80159da:	9307      	str	r3, [sp, #28]
 80159dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80159de:	2b00      	cmp	r3, #0
 80159e0:	d12a      	bne.n	8015a38 <_dtoa_r+0x818>
 80159e2:	2001      	movs	r0, #1
 80159e4:	e030      	b.n	8015a48 <_dtoa_r+0x828>
 80159e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80159e8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80159ec:	e795      	b.n	801591a <_dtoa_r+0x6fa>
 80159ee:	9b07      	ldr	r3, [sp, #28]
 80159f0:	f109 37ff 	add.w	r7, r9, #4294967295
 80159f4:	42bb      	cmp	r3, r7
 80159f6:	bfbf      	itttt	lt
 80159f8:	9b07      	ldrlt	r3, [sp, #28]
 80159fa:	9707      	strlt	r7, [sp, #28]
 80159fc:	1afa      	sublt	r2, r7, r3
 80159fe:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8015a00:	bfbb      	ittet	lt
 8015a02:	189b      	addlt	r3, r3, r2
 8015a04:	930e      	strlt	r3, [sp, #56]	; 0x38
 8015a06:	1bdf      	subge	r7, r3, r7
 8015a08:	2700      	movlt	r7, #0
 8015a0a:	f1b9 0f00 	cmp.w	r9, #0
 8015a0e:	bfb5      	itete	lt
 8015a10:	9b05      	ldrlt	r3, [sp, #20]
 8015a12:	9d05      	ldrge	r5, [sp, #20]
 8015a14:	eba3 0509 	sublt.w	r5, r3, r9
 8015a18:	464b      	movge	r3, r9
 8015a1a:	bfb8      	it	lt
 8015a1c:	2300      	movlt	r3, #0
 8015a1e:	e77e      	b.n	801591e <_dtoa_r+0x6fe>
 8015a20:	9f07      	ldr	r7, [sp, #28]
 8015a22:	9d05      	ldr	r5, [sp, #20]
 8015a24:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8015a26:	e783      	b.n	8015930 <_dtoa_r+0x710>
 8015a28:	9a07      	ldr	r2, [sp, #28]
 8015a2a:	e7ab      	b.n	8015984 <_dtoa_r+0x764>
 8015a2c:	2300      	movs	r3, #0
 8015a2e:	e7d4      	b.n	80159da <_dtoa_r+0x7ba>
 8015a30:	9b00      	ldr	r3, [sp, #0]
 8015a32:	e7d2      	b.n	80159da <_dtoa_r+0x7ba>
 8015a34:	2300      	movs	r3, #0
 8015a36:	9307      	str	r3, [sp, #28]
 8015a38:	693b      	ldr	r3, [r7, #16]
 8015a3a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8015a3e:	6918      	ldr	r0, [r3, #16]
 8015a40:	f000 ffbc 	bl	80169bc <__hi0bits>
 8015a44:	f1c0 0020 	rsb	r0, r0, #32
 8015a48:	4440      	add	r0, r8
 8015a4a:	f010 001f 	ands.w	r0, r0, #31
 8015a4e:	d047      	beq.n	8015ae0 <_dtoa_r+0x8c0>
 8015a50:	f1c0 0320 	rsb	r3, r0, #32
 8015a54:	2b04      	cmp	r3, #4
 8015a56:	dd3b      	ble.n	8015ad0 <_dtoa_r+0x8b0>
 8015a58:	9b05      	ldr	r3, [sp, #20]
 8015a5a:	f1c0 001c 	rsb	r0, r0, #28
 8015a5e:	4403      	add	r3, r0
 8015a60:	9305      	str	r3, [sp, #20]
 8015a62:	4405      	add	r5, r0
 8015a64:	4480      	add	r8, r0
 8015a66:	9b05      	ldr	r3, [sp, #20]
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	dd05      	ble.n	8015a78 <_dtoa_r+0x858>
 8015a6c:	461a      	mov	r2, r3
 8015a6e:	9904      	ldr	r1, [sp, #16]
 8015a70:	4620      	mov	r0, r4
 8015a72:	f001 f8df 	bl	8016c34 <__lshift>
 8015a76:	9004      	str	r0, [sp, #16]
 8015a78:	f1b8 0f00 	cmp.w	r8, #0
 8015a7c:	dd05      	ble.n	8015a8a <_dtoa_r+0x86a>
 8015a7e:	4639      	mov	r1, r7
 8015a80:	4642      	mov	r2, r8
 8015a82:	4620      	mov	r0, r4
 8015a84:	f001 f8d6 	bl	8016c34 <__lshift>
 8015a88:	4607      	mov	r7, r0
 8015a8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015a8c:	b353      	cbz	r3, 8015ae4 <_dtoa_r+0x8c4>
 8015a8e:	4639      	mov	r1, r7
 8015a90:	9804      	ldr	r0, [sp, #16]
 8015a92:	f001 f923 	bl	8016cdc <__mcmp>
 8015a96:	2800      	cmp	r0, #0
 8015a98:	da24      	bge.n	8015ae4 <_dtoa_r+0x8c4>
 8015a9a:	2300      	movs	r3, #0
 8015a9c:	220a      	movs	r2, #10
 8015a9e:	9904      	ldr	r1, [sp, #16]
 8015aa0:	4620      	mov	r0, r4
 8015aa2:	f000 ff12 	bl	80168ca <__multadd>
 8015aa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015aa8:	9004      	str	r0, [sp, #16]
 8015aaa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015aae:	2b00      	cmp	r3, #0
 8015ab0:	f000 814d 	beq.w	8015d4e <_dtoa_r+0xb2e>
 8015ab4:	2300      	movs	r3, #0
 8015ab6:	4631      	mov	r1, r6
 8015ab8:	220a      	movs	r2, #10
 8015aba:	4620      	mov	r0, r4
 8015abc:	f000 ff05 	bl	80168ca <__multadd>
 8015ac0:	9b02      	ldr	r3, [sp, #8]
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	4606      	mov	r6, r0
 8015ac6:	dc4f      	bgt.n	8015b68 <_dtoa_r+0x948>
 8015ac8:	9b06      	ldr	r3, [sp, #24]
 8015aca:	2b02      	cmp	r3, #2
 8015acc:	dd4c      	ble.n	8015b68 <_dtoa_r+0x948>
 8015ace:	e011      	b.n	8015af4 <_dtoa_r+0x8d4>
 8015ad0:	d0c9      	beq.n	8015a66 <_dtoa_r+0x846>
 8015ad2:	9a05      	ldr	r2, [sp, #20]
 8015ad4:	331c      	adds	r3, #28
 8015ad6:	441a      	add	r2, r3
 8015ad8:	9205      	str	r2, [sp, #20]
 8015ada:	441d      	add	r5, r3
 8015adc:	4498      	add	r8, r3
 8015ade:	e7c2      	b.n	8015a66 <_dtoa_r+0x846>
 8015ae0:	4603      	mov	r3, r0
 8015ae2:	e7f6      	b.n	8015ad2 <_dtoa_r+0x8b2>
 8015ae4:	f1b9 0f00 	cmp.w	r9, #0
 8015ae8:	dc38      	bgt.n	8015b5c <_dtoa_r+0x93c>
 8015aea:	9b06      	ldr	r3, [sp, #24]
 8015aec:	2b02      	cmp	r3, #2
 8015aee:	dd35      	ble.n	8015b5c <_dtoa_r+0x93c>
 8015af0:	f8cd 9008 	str.w	r9, [sp, #8]
 8015af4:	9b02      	ldr	r3, [sp, #8]
 8015af6:	b963      	cbnz	r3, 8015b12 <_dtoa_r+0x8f2>
 8015af8:	4639      	mov	r1, r7
 8015afa:	2205      	movs	r2, #5
 8015afc:	4620      	mov	r0, r4
 8015afe:	f000 fee4 	bl	80168ca <__multadd>
 8015b02:	4601      	mov	r1, r0
 8015b04:	4607      	mov	r7, r0
 8015b06:	9804      	ldr	r0, [sp, #16]
 8015b08:	f001 f8e8 	bl	8016cdc <__mcmp>
 8015b0c:	2800      	cmp	r0, #0
 8015b0e:	f73f adcc 	bgt.w	80156aa <_dtoa_r+0x48a>
 8015b12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015b14:	465d      	mov	r5, fp
 8015b16:	ea6f 0a03 	mvn.w	sl, r3
 8015b1a:	f04f 0900 	mov.w	r9, #0
 8015b1e:	4639      	mov	r1, r7
 8015b20:	4620      	mov	r0, r4
 8015b22:	f000 febb 	bl	801689c <_Bfree>
 8015b26:	2e00      	cmp	r6, #0
 8015b28:	f43f aeb7 	beq.w	801589a <_dtoa_r+0x67a>
 8015b2c:	f1b9 0f00 	cmp.w	r9, #0
 8015b30:	d005      	beq.n	8015b3e <_dtoa_r+0x91e>
 8015b32:	45b1      	cmp	r9, r6
 8015b34:	d003      	beq.n	8015b3e <_dtoa_r+0x91e>
 8015b36:	4649      	mov	r1, r9
 8015b38:	4620      	mov	r0, r4
 8015b3a:	f000 feaf 	bl	801689c <_Bfree>
 8015b3e:	4631      	mov	r1, r6
 8015b40:	4620      	mov	r0, r4
 8015b42:	f000 feab 	bl	801689c <_Bfree>
 8015b46:	e6a8      	b.n	801589a <_dtoa_r+0x67a>
 8015b48:	2700      	movs	r7, #0
 8015b4a:	463e      	mov	r6, r7
 8015b4c:	e7e1      	b.n	8015b12 <_dtoa_r+0x8f2>
 8015b4e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8015b52:	463e      	mov	r6, r7
 8015b54:	e5a9      	b.n	80156aa <_dtoa_r+0x48a>
 8015b56:	bf00      	nop
 8015b58:	40240000 	.word	0x40240000
 8015b5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015b5e:	f8cd 9008 	str.w	r9, [sp, #8]
 8015b62:	2b00      	cmp	r3, #0
 8015b64:	f000 80fa 	beq.w	8015d5c <_dtoa_r+0xb3c>
 8015b68:	2d00      	cmp	r5, #0
 8015b6a:	dd05      	ble.n	8015b78 <_dtoa_r+0x958>
 8015b6c:	4631      	mov	r1, r6
 8015b6e:	462a      	mov	r2, r5
 8015b70:	4620      	mov	r0, r4
 8015b72:	f001 f85f 	bl	8016c34 <__lshift>
 8015b76:	4606      	mov	r6, r0
 8015b78:	9b07      	ldr	r3, [sp, #28]
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d04c      	beq.n	8015c18 <_dtoa_r+0x9f8>
 8015b7e:	6871      	ldr	r1, [r6, #4]
 8015b80:	4620      	mov	r0, r4
 8015b82:	f000 fe57 	bl	8016834 <_Balloc>
 8015b86:	6932      	ldr	r2, [r6, #16]
 8015b88:	3202      	adds	r2, #2
 8015b8a:	4605      	mov	r5, r0
 8015b8c:	0092      	lsls	r2, r2, #2
 8015b8e:	f106 010c 	add.w	r1, r6, #12
 8015b92:	300c      	adds	r0, #12
 8015b94:	f7fd fb54 	bl	8013240 <memcpy>
 8015b98:	2201      	movs	r2, #1
 8015b9a:	4629      	mov	r1, r5
 8015b9c:	4620      	mov	r0, r4
 8015b9e:	f001 f849 	bl	8016c34 <__lshift>
 8015ba2:	9b00      	ldr	r3, [sp, #0]
 8015ba4:	f8cd b014 	str.w	fp, [sp, #20]
 8015ba8:	f003 0301 	and.w	r3, r3, #1
 8015bac:	46b1      	mov	r9, r6
 8015bae:	9307      	str	r3, [sp, #28]
 8015bb0:	4606      	mov	r6, r0
 8015bb2:	4639      	mov	r1, r7
 8015bb4:	9804      	ldr	r0, [sp, #16]
 8015bb6:	f7ff faa7 	bl	8015108 <quorem>
 8015bba:	4649      	mov	r1, r9
 8015bbc:	4605      	mov	r5, r0
 8015bbe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8015bc2:	9804      	ldr	r0, [sp, #16]
 8015bc4:	f001 f88a 	bl	8016cdc <__mcmp>
 8015bc8:	4632      	mov	r2, r6
 8015bca:	9000      	str	r0, [sp, #0]
 8015bcc:	4639      	mov	r1, r7
 8015bce:	4620      	mov	r0, r4
 8015bd0:	f001 f89e 	bl	8016d10 <__mdiff>
 8015bd4:	68c3      	ldr	r3, [r0, #12]
 8015bd6:	4602      	mov	r2, r0
 8015bd8:	bb03      	cbnz	r3, 8015c1c <_dtoa_r+0x9fc>
 8015bda:	4601      	mov	r1, r0
 8015bdc:	9008      	str	r0, [sp, #32]
 8015bde:	9804      	ldr	r0, [sp, #16]
 8015be0:	f001 f87c 	bl	8016cdc <__mcmp>
 8015be4:	9a08      	ldr	r2, [sp, #32]
 8015be6:	4603      	mov	r3, r0
 8015be8:	4611      	mov	r1, r2
 8015bea:	4620      	mov	r0, r4
 8015bec:	9308      	str	r3, [sp, #32]
 8015bee:	f000 fe55 	bl	801689c <_Bfree>
 8015bf2:	9b08      	ldr	r3, [sp, #32]
 8015bf4:	b9a3      	cbnz	r3, 8015c20 <_dtoa_r+0xa00>
 8015bf6:	9a06      	ldr	r2, [sp, #24]
 8015bf8:	b992      	cbnz	r2, 8015c20 <_dtoa_r+0xa00>
 8015bfa:	9a07      	ldr	r2, [sp, #28]
 8015bfc:	b982      	cbnz	r2, 8015c20 <_dtoa_r+0xa00>
 8015bfe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8015c02:	d029      	beq.n	8015c58 <_dtoa_r+0xa38>
 8015c04:	9b00      	ldr	r3, [sp, #0]
 8015c06:	2b00      	cmp	r3, #0
 8015c08:	dd01      	ble.n	8015c0e <_dtoa_r+0x9ee>
 8015c0a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8015c0e:	9b05      	ldr	r3, [sp, #20]
 8015c10:	1c5d      	adds	r5, r3, #1
 8015c12:	f883 8000 	strb.w	r8, [r3]
 8015c16:	e782      	b.n	8015b1e <_dtoa_r+0x8fe>
 8015c18:	4630      	mov	r0, r6
 8015c1a:	e7c2      	b.n	8015ba2 <_dtoa_r+0x982>
 8015c1c:	2301      	movs	r3, #1
 8015c1e:	e7e3      	b.n	8015be8 <_dtoa_r+0x9c8>
 8015c20:	9a00      	ldr	r2, [sp, #0]
 8015c22:	2a00      	cmp	r2, #0
 8015c24:	db04      	blt.n	8015c30 <_dtoa_r+0xa10>
 8015c26:	d125      	bne.n	8015c74 <_dtoa_r+0xa54>
 8015c28:	9a06      	ldr	r2, [sp, #24]
 8015c2a:	bb1a      	cbnz	r2, 8015c74 <_dtoa_r+0xa54>
 8015c2c:	9a07      	ldr	r2, [sp, #28]
 8015c2e:	bb0a      	cbnz	r2, 8015c74 <_dtoa_r+0xa54>
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	ddec      	ble.n	8015c0e <_dtoa_r+0x9ee>
 8015c34:	2201      	movs	r2, #1
 8015c36:	9904      	ldr	r1, [sp, #16]
 8015c38:	4620      	mov	r0, r4
 8015c3a:	f000 fffb 	bl	8016c34 <__lshift>
 8015c3e:	4639      	mov	r1, r7
 8015c40:	9004      	str	r0, [sp, #16]
 8015c42:	f001 f84b 	bl	8016cdc <__mcmp>
 8015c46:	2800      	cmp	r0, #0
 8015c48:	dc03      	bgt.n	8015c52 <_dtoa_r+0xa32>
 8015c4a:	d1e0      	bne.n	8015c0e <_dtoa_r+0x9ee>
 8015c4c:	f018 0f01 	tst.w	r8, #1
 8015c50:	d0dd      	beq.n	8015c0e <_dtoa_r+0x9ee>
 8015c52:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8015c56:	d1d8      	bne.n	8015c0a <_dtoa_r+0x9ea>
 8015c58:	9b05      	ldr	r3, [sp, #20]
 8015c5a:	9a05      	ldr	r2, [sp, #20]
 8015c5c:	1c5d      	adds	r5, r3, #1
 8015c5e:	2339      	movs	r3, #57	; 0x39
 8015c60:	7013      	strb	r3, [r2, #0]
 8015c62:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015c66:	2b39      	cmp	r3, #57	; 0x39
 8015c68:	f105 32ff 	add.w	r2, r5, #4294967295
 8015c6c:	d04f      	beq.n	8015d0e <_dtoa_r+0xaee>
 8015c6e:	3301      	adds	r3, #1
 8015c70:	7013      	strb	r3, [r2, #0]
 8015c72:	e754      	b.n	8015b1e <_dtoa_r+0x8fe>
 8015c74:	9a05      	ldr	r2, [sp, #20]
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	f102 0501 	add.w	r5, r2, #1
 8015c7c:	dd06      	ble.n	8015c8c <_dtoa_r+0xa6c>
 8015c7e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8015c82:	d0e9      	beq.n	8015c58 <_dtoa_r+0xa38>
 8015c84:	f108 0801 	add.w	r8, r8, #1
 8015c88:	9b05      	ldr	r3, [sp, #20]
 8015c8a:	e7c2      	b.n	8015c12 <_dtoa_r+0x9f2>
 8015c8c:	9a02      	ldr	r2, [sp, #8]
 8015c8e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8015c92:	eba5 030b 	sub.w	r3, r5, fp
 8015c96:	4293      	cmp	r3, r2
 8015c98:	d021      	beq.n	8015cde <_dtoa_r+0xabe>
 8015c9a:	2300      	movs	r3, #0
 8015c9c:	220a      	movs	r2, #10
 8015c9e:	9904      	ldr	r1, [sp, #16]
 8015ca0:	4620      	mov	r0, r4
 8015ca2:	f000 fe12 	bl	80168ca <__multadd>
 8015ca6:	45b1      	cmp	r9, r6
 8015ca8:	9004      	str	r0, [sp, #16]
 8015caa:	f04f 0300 	mov.w	r3, #0
 8015cae:	f04f 020a 	mov.w	r2, #10
 8015cb2:	4649      	mov	r1, r9
 8015cb4:	4620      	mov	r0, r4
 8015cb6:	d105      	bne.n	8015cc4 <_dtoa_r+0xaa4>
 8015cb8:	f000 fe07 	bl	80168ca <__multadd>
 8015cbc:	4681      	mov	r9, r0
 8015cbe:	4606      	mov	r6, r0
 8015cc0:	9505      	str	r5, [sp, #20]
 8015cc2:	e776      	b.n	8015bb2 <_dtoa_r+0x992>
 8015cc4:	f000 fe01 	bl	80168ca <__multadd>
 8015cc8:	4631      	mov	r1, r6
 8015cca:	4681      	mov	r9, r0
 8015ccc:	2300      	movs	r3, #0
 8015cce:	220a      	movs	r2, #10
 8015cd0:	4620      	mov	r0, r4
 8015cd2:	f000 fdfa 	bl	80168ca <__multadd>
 8015cd6:	4606      	mov	r6, r0
 8015cd8:	e7f2      	b.n	8015cc0 <_dtoa_r+0xaa0>
 8015cda:	f04f 0900 	mov.w	r9, #0
 8015cde:	2201      	movs	r2, #1
 8015ce0:	9904      	ldr	r1, [sp, #16]
 8015ce2:	4620      	mov	r0, r4
 8015ce4:	f000 ffa6 	bl	8016c34 <__lshift>
 8015ce8:	4639      	mov	r1, r7
 8015cea:	9004      	str	r0, [sp, #16]
 8015cec:	f000 fff6 	bl	8016cdc <__mcmp>
 8015cf0:	2800      	cmp	r0, #0
 8015cf2:	dcb6      	bgt.n	8015c62 <_dtoa_r+0xa42>
 8015cf4:	d102      	bne.n	8015cfc <_dtoa_r+0xadc>
 8015cf6:	f018 0f01 	tst.w	r8, #1
 8015cfa:	d1b2      	bne.n	8015c62 <_dtoa_r+0xa42>
 8015cfc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015d00:	2b30      	cmp	r3, #48	; 0x30
 8015d02:	f105 32ff 	add.w	r2, r5, #4294967295
 8015d06:	f47f af0a 	bne.w	8015b1e <_dtoa_r+0x8fe>
 8015d0a:	4615      	mov	r5, r2
 8015d0c:	e7f6      	b.n	8015cfc <_dtoa_r+0xadc>
 8015d0e:	4593      	cmp	fp, r2
 8015d10:	d105      	bne.n	8015d1e <_dtoa_r+0xafe>
 8015d12:	2331      	movs	r3, #49	; 0x31
 8015d14:	f10a 0a01 	add.w	sl, sl, #1
 8015d18:	f88b 3000 	strb.w	r3, [fp]
 8015d1c:	e6ff      	b.n	8015b1e <_dtoa_r+0x8fe>
 8015d1e:	4615      	mov	r5, r2
 8015d20:	e79f      	b.n	8015c62 <_dtoa_r+0xa42>
 8015d22:	f8df b064 	ldr.w	fp, [pc, #100]	; 8015d88 <_dtoa_r+0xb68>
 8015d26:	e007      	b.n	8015d38 <_dtoa_r+0xb18>
 8015d28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015d2a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8015d8c <_dtoa_r+0xb6c>
 8015d2e:	b11b      	cbz	r3, 8015d38 <_dtoa_r+0xb18>
 8015d30:	f10b 0308 	add.w	r3, fp, #8
 8015d34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015d36:	6013      	str	r3, [r2, #0]
 8015d38:	4658      	mov	r0, fp
 8015d3a:	b017      	add	sp, #92	; 0x5c
 8015d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d40:	9b06      	ldr	r3, [sp, #24]
 8015d42:	2b01      	cmp	r3, #1
 8015d44:	f77f ae35 	ble.w	80159b2 <_dtoa_r+0x792>
 8015d48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015d4a:	9307      	str	r3, [sp, #28]
 8015d4c:	e649      	b.n	80159e2 <_dtoa_r+0x7c2>
 8015d4e:	9b02      	ldr	r3, [sp, #8]
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	dc03      	bgt.n	8015d5c <_dtoa_r+0xb3c>
 8015d54:	9b06      	ldr	r3, [sp, #24]
 8015d56:	2b02      	cmp	r3, #2
 8015d58:	f73f aecc 	bgt.w	8015af4 <_dtoa_r+0x8d4>
 8015d5c:	465d      	mov	r5, fp
 8015d5e:	4639      	mov	r1, r7
 8015d60:	9804      	ldr	r0, [sp, #16]
 8015d62:	f7ff f9d1 	bl	8015108 <quorem>
 8015d66:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8015d6a:	f805 8b01 	strb.w	r8, [r5], #1
 8015d6e:	9a02      	ldr	r2, [sp, #8]
 8015d70:	eba5 030b 	sub.w	r3, r5, fp
 8015d74:	429a      	cmp	r2, r3
 8015d76:	ddb0      	ble.n	8015cda <_dtoa_r+0xaba>
 8015d78:	2300      	movs	r3, #0
 8015d7a:	220a      	movs	r2, #10
 8015d7c:	9904      	ldr	r1, [sp, #16]
 8015d7e:	4620      	mov	r0, r4
 8015d80:	f000 fda3 	bl	80168ca <__multadd>
 8015d84:	9004      	str	r0, [sp, #16]
 8015d86:	e7ea      	b.n	8015d5e <_dtoa_r+0xb3e>
 8015d88:	08018a9b 	.word	0x08018a9b
 8015d8c:	080188f8 	.word	0x080188f8

08015d90 <__sflush_r>:
 8015d90:	898a      	ldrh	r2, [r1, #12]
 8015d92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d96:	4605      	mov	r5, r0
 8015d98:	0710      	lsls	r0, r2, #28
 8015d9a:	460c      	mov	r4, r1
 8015d9c:	d458      	bmi.n	8015e50 <__sflush_r+0xc0>
 8015d9e:	684b      	ldr	r3, [r1, #4]
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	dc05      	bgt.n	8015db0 <__sflush_r+0x20>
 8015da4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	dc02      	bgt.n	8015db0 <__sflush_r+0x20>
 8015daa:	2000      	movs	r0, #0
 8015dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015db0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015db2:	2e00      	cmp	r6, #0
 8015db4:	d0f9      	beq.n	8015daa <__sflush_r+0x1a>
 8015db6:	2300      	movs	r3, #0
 8015db8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015dbc:	682f      	ldr	r7, [r5, #0]
 8015dbe:	6a21      	ldr	r1, [r4, #32]
 8015dc0:	602b      	str	r3, [r5, #0]
 8015dc2:	d032      	beq.n	8015e2a <__sflush_r+0x9a>
 8015dc4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015dc6:	89a3      	ldrh	r3, [r4, #12]
 8015dc8:	075a      	lsls	r2, r3, #29
 8015dca:	d505      	bpl.n	8015dd8 <__sflush_r+0x48>
 8015dcc:	6863      	ldr	r3, [r4, #4]
 8015dce:	1ac0      	subs	r0, r0, r3
 8015dd0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015dd2:	b10b      	cbz	r3, 8015dd8 <__sflush_r+0x48>
 8015dd4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015dd6:	1ac0      	subs	r0, r0, r3
 8015dd8:	2300      	movs	r3, #0
 8015dda:	4602      	mov	r2, r0
 8015ddc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015dde:	6a21      	ldr	r1, [r4, #32]
 8015de0:	4628      	mov	r0, r5
 8015de2:	47b0      	blx	r6
 8015de4:	1c43      	adds	r3, r0, #1
 8015de6:	89a3      	ldrh	r3, [r4, #12]
 8015de8:	d106      	bne.n	8015df8 <__sflush_r+0x68>
 8015dea:	6829      	ldr	r1, [r5, #0]
 8015dec:	291d      	cmp	r1, #29
 8015dee:	d848      	bhi.n	8015e82 <__sflush_r+0xf2>
 8015df0:	4a29      	ldr	r2, [pc, #164]	; (8015e98 <__sflush_r+0x108>)
 8015df2:	40ca      	lsrs	r2, r1
 8015df4:	07d6      	lsls	r6, r2, #31
 8015df6:	d544      	bpl.n	8015e82 <__sflush_r+0xf2>
 8015df8:	2200      	movs	r2, #0
 8015dfa:	6062      	str	r2, [r4, #4]
 8015dfc:	04d9      	lsls	r1, r3, #19
 8015dfe:	6922      	ldr	r2, [r4, #16]
 8015e00:	6022      	str	r2, [r4, #0]
 8015e02:	d504      	bpl.n	8015e0e <__sflush_r+0x7e>
 8015e04:	1c42      	adds	r2, r0, #1
 8015e06:	d101      	bne.n	8015e0c <__sflush_r+0x7c>
 8015e08:	682b      	ldr	r3, [r5, #0]
 8015e0a:	b903      	cbnz	r3, 8015e0e <__sflush_r+0x7e>
 8015e0c:	6560      	str	r0, [r4, #84]	; 0x54
 8015e0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015e10:	602f      	str	r7, [r5, #0]
 8015e12:	2900      	cmp	r1, #0
 8015e14:	d0c9      	beq.n	8015daa <__sflush_r+0x1a>
 8015e16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015e1a:	4299      	cmp	r1, r3
 8015e1c:	d002      	beq.n	8015e24 <__sflush_r+0x94>
 8015e1e:	4628      	mov	r0, r5
 8015e20:	f001 f916 	bl	8017050 <_free_r>
 8015e24:	2000      	movs	r0, #0
 8015e26:	6360      	str	r0, [r4, #52]	; 0x34
 8015e28:	e7c0      	b.n	8015dac <__sflush_r+0x1c>
 8015e2a:	2301      	movs	r3, #1
 8015e2c:	4628      	mov	r0, r5
 8015e2e:	47b0      	blx	r6
 8015e30:	1c41      	adds	r1, r0, #1
 8015e32:	d1c8      	bne.n	8015dc6 <__sflush_r+0x36>
 8015e34:	682b      	ldr	r3, [r5, #0]
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	d0c5      	beq.n	8015dc6 <__sflush_r+0x36>
 8015e3a:	2b1d      	cmp	r3, #29
 8015e3c:	d001      	beq.n	8015e42 <__sflush_r+0xb2>
 8015e3e:	2b16      	cmp	r3, #22
 8015e40:	d101      	bne.n	8015e46 <__sflush_r+0xb6>
 8015e42:	602f      	str	r7, [r5, #0]
 8015e44:	e7b1      	b.n	8015daa <__sflush_r+0x1a>
 8015e46:	89a3      	ldrh	r3, [r4, #12]
 8015e48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015e4c:	81a3      	strh	r3, [r4, #12]
 8015e4e:	e7ad      	b.n	8015dac <__sflush_r+0x1c>
 8015e50:	690f      	ldr	r7, [r1, #16]
 8015e52:	2f00      	cmp	r7, #0
 8015e54:	d0a9      	beq.n	8015daa <__sflush_r+0x1a>
 8015e56:	0793      	lsls	r3, r2, #30
 8015e58:	680e      	ldr	r6, [r1, #0]
 8015e5a:	bf08      	it	eq
 8015e5c:	694b      	ldreq	r3, [r1, #20]
 8015e5e:	600f      	str	r7, [r1, #0]
 8015e60:	bf18      	it	ne
 8015e62:	2300      	movne	r3, #0
 8015e64:	eba6 0807 	sub.w	r8, r6, r7
 8015e68:	608b      	str	r3, [r1, #8]
 8015e6a:	f1b8 0f00 	cmp.w	r8, #0
 8015e6e:	dd9c      	ble.n	8015daa <__sflush_r+0x1a>
 8015e70:	4643      	mov	r3, r8
 8015e72:	463a      	mov	r2, r7
 8015e74:	6a21      	ldr	r1, [r4, #32]
 8015e76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015e78:	4628      	mov	r0, r5
 8015e7a:	47b0      	blx	r6
 8015e7c:	2800      	cmp	r0, #0
 8015e7e:	dc06      	bgt.n	8015e8e <__sflush_r+0xfe>
 8015e80:	89a3      	ldrh	r3, [r4, #12]
 8015e82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015e86:	81a3      	strh	r3, [r4, #12]
 8015e88:	f04f 30ff 	mov.w	r0, #4294967295
 8015e8c:	e78e      	b.n	8015dac <__sflush_r+0x1c>
 8015e8e:	4407      	add	r7, r0
 8015e90:	eba8 0800 	sub.w	r8, r8, r0
 8015e94:	e7e9      	b.n	8015e6a <__sflush_r+0xda>
 8015e96:	bf00      	nop
 8015e98:	20400001 	.word	0x20400001

08015e9c <_fflush_r>:
 8015e9c:	b538      	push	{r3, r4, r5, lr}
 8015e9e:	690b      	ldr	r3, [r1, #16]
 8015ea0:	4605      	mov	r5, r0
 8015ea2:	460c      	mov	r4, r1
 8015ea4:	b1db      	cbz	r3, 8015ede <_fflush_r+0x42>
 8015ea6:	b118      	cbz	r0, 8015eb0 <_fflush_r+0x14>
 8015ea8:	6983      	ldr	r3, [r0, #24]
 8015eaa:	b90b      	cbnz	r3, 8015eb0 <_fflush_r+0x14>
 8015eac:	f000 f860 	bl	8015f70 <__sinit>
 8015eb0:	4b0c      	ldr	r3, [pc, #48]	; (8015ee4 <_fflush_r+0x48>)
 8015eb2:	429c      	cmp	r4, r3
 8015eb4:	d109      	bne.n	8015eca <_fflush_r+0x2e>
 8015eb6:	686c      	ldr	r4, [r5, #4]
 8015eb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015ebc:	b17b      	cbz	r3, 8015ede <_fflush_r+0x42>
 8015ebe:	4621      	mov	r1, r4
 8015ec0:	4628      	mov	r0, r5
 8015ec2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015ec6:	f7ff bf63 	b.w	8015d90 <__sflush_r>
 8015eca:	4b07      	ldr	r3, [pc, #28]	; (8015ee8 <_fflush_r+0x4c>)
 8015ecc:	429c      	cmp	r4, r3
 8015ece:	d101      	bne.n	8015ed4 <_fflush_r+0x38>
 8015ed0:	68ac      	ldr	r4, [r5, #8]
 8015ed2:	e7f1      	b.n	8015eb8 <_fflush_r+0x1c>
 8015ed4:	4b05      	ldr	r3, [pc, #20]	; (8015eec <_fflush_r+0x50>)
 8015ed6:	429c      	cmp	r4, r3
 8015ed8:	bf08      	it	eq
 8015eda:	68ec      	ldreq	r4, [r5, #12]
 8015edc:	e7ec      	b.n	8015eb8 <_fflush_r+0x1c>
 8015ede:	2000      	movs	r0, #0
 8015ee0:	bd38      	pop	{r3, r4, r5, pc}
 8015ee2:	bf00      	nop
 8015ee4:	08018928 	.word	0x08018928
 8015ee8:	08018948 	.word	0x08018948
 8015eec:	08018908 	.word	0x08018908

08015ef0 <std>:
 8015ef0:	2300      	movs	r3, #0
 8015ef2:	b510      	push	{r4, lr}
 8015ef4:	4604      	mov	r4, r0
 8015ef6:	e9c0 3300 	strd	r3, r3, [r0]
 8015efa:	6083      	str	r3, [r0, #8]
 8015efc:	8181      	strh	r1, [r0, #12]
 8015efe:	6643      	str	r3, [r0, #100]	; 0x64
 8015f00:	81c2      	strh	r2, [r0, #14]
 8015f02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015f06:	6183      	str	r3, [r0, #24]
 8015f08:	4619      	mov	r1, r3
 8015f0a:	2208      	movs	r2, #8
 8015f0c:	305c      	adds	r0, #92	; 0x5c
 8015f0e:	f7fd f9a2 	bl	8013256 <memset>
 8015f12:	4b05      	ldr	r3, [pc, #20]	; (8015f28 <std+0x38>)
 8015f14:	6263      	str	r3, [r4, #36]	; 0x24
 8015f16:	4b05      	ldr	r3, [pc, #20]	; (8015f2c <std+0x3c>)
 8015f18:	62a3      	str	r3, [r4, #40]	; 0x28
 8015f1a:	4b05      	ldr	r3, [pc, #20]	; (8015f30 <std+0x40>)
 8015f1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015f1e:	4b05      	ldr	r3, [pc, #20]	; (8015f34 <std+0x44>)
 8015f20:	6224      	str	r4, [r4, #32]
 8015f22:	6323      	str	r3, [r4, #48]	; 0x30
 8015f24:	bd10      	pop	{r4, pc}
 8015f26:	bf00      	nop
 8015f28:	0801410d 	.word	0x0801410d
 8015f2c:	08014133 	.word	0x08014133
 8015f30:	0801416b 	.word	0x0801416b
 8015f34:	0801418f 	.word	0x0801418f

08015f38 <_cleanup_r>:
 8015f38:	4901      	ldr	r1, [pc, #4]	; (8015f40 <_cleanup_r+0x8>)
 8015f3a:	f000 b885 	b.w	8016048 <_fwalk_reent>
 8015f3e:	bf00      	nop
 8015f40:	08015e9d 	.word	0x08015e9d

08015f44 <__sfmoreglue>:
 8015f44:	b570      	push	{r4, r5, r6, lr}
 8015f46:	1e4a      	subs	r2, r1, #1
 8015f48:	2568      	movs	r5, #104	; 0x68
 8015f4a:	4355      	muls	r5, r2
 8015f4c:	460e      	mov	r6, r1
 8015f4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015f52:	f001 f8cb 	bl	80170ec <_malloc_r>
 8015f56:	4604      	mov	r4, r0
 8015f58:	b140      	cbz	r0, 8015f6c <__sfmoreglue+0x28>
 8015f5a:	2100      	movs	r1, #0
 8015f5c:	e9c0 1600 	strd	r1, r6, [r0]
 8015f60:	300c      	adds	r0, #12
 8015f62:	60a0      	str	r0, [r4, #8]
 8015f64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015f68:	f7fd f975 	bl	8013256 <memset>
 8015f6c:	4620      	mov	r0, r4
 8015f6e:	bd70      	pop	{r4, r5, r6, pc}

08015f70 <__sinit>:
 8015f70:	6983      	ldr	r3, [r0, #24]
 8015f72:	b510      	push	{r4, lr}
 8015f74:	4604      	mov	r4, r0
 8015f76:	bb33      	cbnz	r3, 8015fc6 <__sinit+0x56>
 8015f78:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8015f7c:	6503      	str	r3, [r0, #80]	; 0x50
 8015f7e:	4b12      	ldr	r3, [pc, #72]	; (8015fc8 <__sinit+0x58>)
 8015f80:	4a12      	ldr	r2, [pc, #72]	; (8015fcc <__sinit+0x5c>)
 8015f82:	681b      	ldr	r3, [r3, #0]
 8015f84:	6282      	str	r2, [r0, #40]	; 0x28
 8015f86:	4298      	cmp	r0, r3
 8015f88:	bf04      	itt	eq
 8015f8a:	2301      	moveq	r3, #1
 8015f8c:	6183      	streq	r3, [r0, #24]
 8015f8e:	f000 f81f 	bl	8015fd0 <__sfp>
 8015f92:	6060      	str	r0, [r4, #4]
 8015f94:	4620      	mov	r0, r4
 8015f96:	f000 f81b 	bl	8015fd0 <__sfp>
 8015f9a:	60a0      	str	r0, [r4, #8]
 8015f9c:	4620      	mov	r0, r4
 8015f9e:	f000 f817 	bl	8015fd0 <__sfp>
 8015fa2:	2200      	movs	r2, #0
 8015fa4:	60e0      	str	r0, [r4, #12]
 8015fa6:	2104      	movs	r1, #4
 8015fa8:	6860      	ldr	r0, [r4, #4]
 8015faa:	f7ff ffa1 	bl	8015ef0 <std>
 8015fae:	2201      	movs	r2, #1
 8015fb0:	2109      	movs	r1, #9
 8015fb2:	68a0      	ldr	r0, [r4, #8]
 8015fb4:	f7ff ff9c 	bl	8015ef0 <std>
 8015fb8:	2202      	movs	r2, #2
 8015fba:	2112      	movs	r1, #18
 8015fbc:	68e0      	ldr	r0, [r4, #12]
 8015fbe:	f7ff ff97 	bl	8015ef0 <std>
 8015fc2:	2301      	movs	r3, #1
 8015fc4:	61a3      	str	r3, [r4, #24]
 8015fc6:	bd10      	pop	{r4, pc}
 8015fc8:	08018868 	.word	0x08018868
 8015fcc:	08015f39 	.word	0x08015f39

08015fd0 <__sfp>:
 8015fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015fd2:	4b1b      	ldr	r3, [pc, #108]	; (8016040 <__sfp+0x70>)
 8015fd4:	681e      	ldr	r6, [r3, #0]
 8015fd6:	69b3      	ldr	r3, [r6, #24]
 8015fd8:	4607      	mov	r7, r0
 8015fda:	b913      	cbnz	r3, 8015fe2 <__sfp+0x12>
 8015fdc:	4630      	mov	r0, r6
 8015fde:	f7ff ffc7 	bl	8015f70 <__sinit>
 8015fe2:	3648      	adds	r6, #72	; 0x48
 8015fe4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015fe8:	3b01      	subs	r3, #1
 8015fea:	d503      	bpl.n	8015ff4 <__sfp+0x24>
 8015fec:	6833      	ldr	r3, [r6, #0]
 8015fee:	b133      	cbz	r3, 8015ffe <__sfp+0x2e>
 8015ff0:	6836      	ldr	r6, [r6, #0]
 8015ff2:	e7f7      	b.n	8015fe4 <__sfp+0x14>
 8015ff4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015ff8:	b16d      	cbz	r5, 8016016 <__sfp+0x46>
 8015ffa:	3468      	adds	r4, #104	; 0x68
 8015ffc:	e7f4      	b.n	8015fe8 <__sfp+0x18>
 8015ffe:	2104      	movs	r1, #4
 8016000:	4638      	mov	r0, r7
 8016002:	f7ff ff9f 	bl	8015f44 <__sfmoreglue>
 8016006:	6030      	str	r0, [r6, #0]
 8016008:	2800      	cmp	r0, #0
 801600a:	d1f1      	bne.n	8015ff0 <__sfp+0x20>
 801600c:	230c      	movs	r3, #12
 801600e:	603b      	str	r3, [r7, #0]
 8016010:	4604      	mov	r4, r0
 8016012:	4620      	mov	r0, r4
 8016014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016016:	4b0b      	ldr	r3, [pc, #44]	; (8016044 <__sfp+0x74>)
 8016018:	6665      	str	r5, [r4, #100]	; 0x64
 801601a:	e9c4 5500 	strd	r5, r5, [r4]
 801601e:	60a5      	str	r5, [r4, #8]
 8016020:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8016024:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8016028:	2208      	movs	r2, #8
 801602a:	4629      	mov	r1, r5
 801602c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016030:	f7fd f911 	bl	8013256 <memset>
 8016034:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016038:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801603c:	e7e9      	b.n	8016012 <__sfp+0x42>
 801603e:	bf00      	nop
 8016040:	08018868 	.word	0x08018868
 8016044:	ffff0001 	.word	0xffff0001

08016048 <_fwalk_reent>:
 8016048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801604c:	4680      	mov	r8, r0
 801604e:	4689      	mov	r9, r1
 8016050:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016054:	2600      	movs	r6, #0
 8016056:	b914      	cbnz	r4, 801605e <_fwalk_reent+0x16>
 8016058:	4630      	mov	r0, r6
 801605a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801605e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8016062:	3f01      	subs	r7, #1
 8016064:	d501      	bpl.n	801606a <_fwalk_reent+0x22>
 8016066:	6824      	ldr	r4, [r4, #0]
 8016068:	e7f5      	b.n	8016056 <_fwalk_reent+0xe>
 801606a:	89ab      	ldrh	r3, [r5, #12]
 801606c:	2b01      	cmp	r3, #1
 801606e:	d907      	bls.n	8016080 <_fwalk_reent+0x38>
 8016070:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016074:	3301      	adds	r3, #1
 8016076:	d003      	beq.n	8016080 <_fwalk_reent+0x38>
 8016078:	4629      	mov	r1, r5
 801607a:	4640      	mov	r0, r8
 801607c:	47c8      	blx	r9
 801607e:	4306      	orrs	r6, r0
 8016080:	3568      	adds	r5, #104	; 0x68
 8016082:	e7ee      	b.n	8016062 <_fwalk_reent+0x1a>

08016084 <rshift>:
 8016084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016086:	6906      	ldr	r6, [r0, #16]
 8016088:	114b      	asrs	r3, r1, #5
 801608a:	429e      	cmp	r6, r3
 801608c:	f100 0414 	add.w	r4, r0, #20
 8016090:	dd30      	ble.n	80160f4 <rshift+0x70>
 8016092:	f011 011f 	ands.w	r1, r1, #31
 8016096:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801609a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801609e:	d108      	bne.n	80160b2 <rshift+0x2e>
 80160a0:	4621      	mov	r1, r4
 80160a2:	42b2      	cmp	r2, r6
 80160a4:	460b      	mov	r3, r1
 80160a6:	d211      	bcs.n	80160cc <rshift+0x48>
 80160a8:	f852 3b04 	ldr.w	r3, [r2], #4
 80160ac:	f841 3b04 	str.w	r3, [r1], #4
 80160b0:	e7f7      	b.n	80160a2 <rshift+0x1e>
 80160b2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80160b6:	f1c1 0c20 	rsb	ip, r1, #32
 80160ba:	40cd      	lsrs	r5, r1
 80160bc:	3204      	adds	r2, #4
 80160be:	4623      	mov	r3, r4
 80160c0:	42b2      	cmp	r2, r6
 80160c2:	4617      	mov	r7, r2
 80160c4:	d30c      	bcc.n	80160e0 <rshift+0x5c>
 80160c6:	601d      	str	r5, [r3, #0]
 80160c8:	b105      	cbz	r5, 80160cc <rshift+0x48>
 80160ca:	3304      	adds	r3, #4
 80160cc:	1b1a      	subs	r2, r3, r4
 80160ce:	42a3      	cmp	r3, r4
 80160d0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80160d4:	bf08      	it	eq
 80160d6:	2300      	moveq	r3, #0
 80160d8:	6102      	str	r2, [r0, #16]
 80160da:	bf08      	it	eq
 80160dc:	6143      	streq	r3, [r0, #20]
 80160de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80160e0:	683f      	ldr	r7, [r7, #0]
 80160e2:	fa07 f70c 	lsl.w	r7, r7, ip
 80160e6:	433d      	orrs	r5, r7
 80160e8:	f843 5b04 	str.w	r5, [r3], #4
 80160ec:	f852 5b04 	ldr.w	r5, [r2], #4
 80160f0:	40cd      	lsrs	r5, r1
 80160f2:	e7e5      	b.n	80160c0 <rshift+0x3c>
 80160f4:	4623      	mov	r3, r4
 80160f6:	e7e9      	b.n	80160cc <rshift+0x48>

080160f8 <__hexdig_fun>:
 80160f8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80160fc:	2b09      	cmp	r3, #9
 80160fe:	d802      	bhi.n	8016106 <__hexdig_fun+0xe>
 8016100:	3820      	subs	r0, #32
 8016102:	b2c0      	uxtb	r0, r0
 8016104:	4770      	bx	lr
 8016106:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801610a:	2b05      	cmp	r3, #5
 801610c:	d801      	bhi.n	8016112 <__hexdig_fun+0x1a>
 801610e:	3847      	subs	r0, #71	; 0x47
 8016110:	e7f7      	b.n	8016102 <__hexdig_fun+0xa>
 8016112:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8016116:	2b05      	cmp	r3, #5
 8016118:	d801      	bhi.n	801611e <__hexdig_fun+0x26>
 801611a:	3827      	subs	r0, #39	; 0x27
 801611c:	e7f1      	b.n	8016102 <__hexdig_fun+0xa>
 801611e:	2000      	movs	r0, #0
 8016120:	4770      	bx	lr

08016122 <__gethex>:
 8016122:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016126:	b08b      	sub	sp, #44	; 0x2c
 8016128:	468a      	mov	sl, r1
 801612a:	9002      	str	r0, [sp, #8]
 801612c:	9816      	ldr	r0, [sp, #88]	; 0x58
 801612e:	9306      	str	r3, [sp, #24]
 8016130:	4690      	mov	r8, r2
 8016132:	f000 fadf 	bl	80166f4 <__localeconv_l>
 8016136:	6803      	ldr	r3, [r0, #0]
 8016138:	9303      	str	r3, [sp, #12]
 801613a:	4618      	mov	r0, r3
 801613c:	f7ea f860 	bl	8000200 <strlen>
 8016140:	9b03      	ldr	r3, [sp, #12]
 8016142:	9001      	str	r0, [sp, #4]
 8016144:	4403      	add	r3, r0
 8016146:	f04f 0b00 	mov.w	fp, #0
 801614a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801614e:	9307      	str	r3, [sp, #28]
 8016150:	f8da 3000 	ldr.w	r3, [sl]
 8016154:	3302      	adds	r3, #2
 8016156:	461f      	mov	r7, r3
 8016158:	f813 0b01 	ldrb.w	r0, [r3], #1
 801615c:	2830      	cmp	r0, #48	; 0x30
 801615e:	d06c      	beq.n	801623a <__gethex+0x118>
 8016160:	f7ff ffca 	bl	80160f8 <__hexdig_fun>
 8016164:	4604      	mov	r4, r0
 8016166:	2800      	cmp	r0, #0
 8016168:	d16a      	bne.n	8016240 <__gethex+0x11e>
 801616a:	9a01      	ldr	r2, [sp, #4]
 801616c:	9903      	ldr	r1, [sp, #12]
 801616e:	4638      	mov	r0, r7
 8016170:	f001 fe34 	bl	8017ddc <strncmp>
 8016174:	2800      	cmp	r0, #0
 8016176:	d166      	bne.n	8016246 <__gethex+0x124>
 8016178:	9b01      	ldr	r3, [sp, #4]
 801617a:	5cf8      	ldrb	r0, [r7, r3]
 801617c:	18fe      	adds	r6, r7, r3
 801617e:	f7ff ffbb 	bl	80160f8 <__hexdig_fun>
 8016182:	2800      	cmp	r0, #0
 8016184:	d062      	beq.n	801624c <__gethex+0x12a>
 8016186:	4633      	mov	r3, r6
 8016188:	7818      	ldrb	r0, [r3, #0]
 801618a:	2830      	cmp	r0, #48	; 0x30
 801618c:	461f      	mov	r7, r3
 801618e:	f103 0301 	add.w	r3, r3, #1
 8016192:	d0f9      	beq.n	8016188 <__gethex+0x66>
 8016194:	f7ff ffb0 	bl	80160f8 <__hexdig_fun>
 8016198:	fab0 f580 	clz	r5, r0
 801619c:	096d      	lsrs	r5, r5, #5
 801619e:	4634      	mov	r4, r6
 80161a0:	f04f 0b01 	mov.w	fp, #1
 80161a4:	463a      	mov	r2, r7
 80161a6:	4616      	mov	r6, r2
 80161a8:	3201      	adds	r2, #1
 80161aa:	7830      	ldrb	r0, [r6, #0]
 80161ac:	f7ff ffa4 	bl	80160f8 <__hexdig_fun>
 80161b0:	2800      	cmp	r0, #0
 80161b2:	d1f8      	bne.n	80161a6 <__gethex+0x84>
 80161b4:	9a01      	ldr	r2, [sp, #4]
 80161b6:	9903      	ldr	r1, [sp, #12]
 80161b8:	4630      	mov	r0, r6
 80161ba:	f001 fe0f 	bl	8017ddc <strncmp>
 80161be:	b950      	cbnz	r0, 80161d6 <__gethex+0xb4>
 80161c0:	b954      	cbnz	r4, 80161d8 <__gethex+0xb6>
 80161c2:	9b01      	ldr	r3, [sp, #4]
 80161c4:	18f4      	adds	r4, r6, r3
 80161c6:	4622      	mov	r2, r4
 80161c8:	4616      	mov	r6, r2
 80161ca:	3201      	adds	r2, #1
 80161cc:	7830      	ldrb	r0, [r6, #0]
 80161ce:	f7ff ff93 	bl	80160f8 <__hexdig_fun>
 80161d2:	2800      	cmp	r0, #0
 80161d4:	d1f8      	bne.n	80161c8 <__gethex+0xa6>
 80161d6:	b10c      	cbz	r4, 80161dc <__gethex+0xba>
 80161d8:	1ba4      	subs	r4, r4, r6
 80161da:	00a4      	lsls	r4, r4, #2
 80161dc:	7833      	ldrb	r3, [r6, #0]
 80161de:	2b50      	cmp	r3, #80	; 0x50
 80161e0:	d001      	beq.n	80161e6 <__gethex+0xc4>
 80161e2:	2b70      	cmp	r3, #112	; 0x70
 80161e4:	d140      	bne.n	8016268 <__gethex+0x146>
 80161e6:	7873      	ldrb	r3, [r6, #1]
 80161e8:	2b2b      	cmp	r3, #43	; 0x2b
 80161ea:	d031      	beq.n	8016250 <__gethex+0x12e>
 80161ec:	2b2d      	cmp	r3, #45	; 0x2d
 80161ee:	d033      	beq.n	8016258 <__gethex+0x136>
 80161f0:	1c71      	adds	r1, r6, #1
 80161f2:	f04f 0900 	mov.w	r9, #0
 80161f6:	7808      	ldrb	r0, [r1, #0]
 80161f8:	f7ff ff7e 	bl	80160f8 <__hexdig_fun>
 80161fc:	1e43      	subs	r3, r0, #1
 80161fe:	b2db      	uxtb	r3, r3
 8016200:	2b18      	cmp	r3, #24
 8016202:	d831      	bhi.n	8016268 <__gethex+0x146>
 8016204:	f1a0 0210 	sub.w	r2, r0, #16
 8016208:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801620c:	f7ff ff74 	bl	80160f8 <__hexdig_fun>
 8016210:	1e43      	subs	r3, r0, #1
 8016212:	b2db      	uxtb	r3, r3
 8016214:	2b18      	cmp	r3, #24
 8016216:	d922      	bls.n	801625e <__gethex+0x13c>
 8016218:	f1b9 0f00 	cmp.w	r9, #0
 801621c:	d000      	beq.n	8016220 <__gethex+0xfe>
 801621e:	4252      	negs	r2, r2
 8016220:	4414      	add	r4, r2
 8016222:	f8ca 1000 	str.w	r1, [sl]
 8016226:	b30d      	cbz	r5, 801626c <__gethex+0x14a>
 8016228:	f1bb 0f00 	cmp.w	fp, #0
 801622c:	bf0c      	ite	eq
 801622e:	2706      	moveq	r7, #6
 8016230:	2700      	movne	r7, #0
 8016232:	4638      	mov	r0, r7
 8016234:	b00b      	add	sp, #44	; 0x2c
 8016236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801623a:	f10b 0b01 	add.w	fp, fp, #1
 801623e:	e78a      	b.n	8016156 <__gethex+0x34>
 8016240:	2500      	movs	r5, #0
 8016242:	462c      	mov	r4, r5
 8016244:	e7ae      	b.n	80161a4 <__gethex+0x82>
 8016246:	463e      	mov	r6, r7
 8016248:	2501      	movs	r5, #1
 801624a:	e7c7      	b.n	80161dc <__gethex+0xba>
 801624c:	4604      	mov	r4, r0
 801624e:	e7fb      	b.n	8016248 <__gethex+0x126>
 8016250:	f04f 0900 	mov.w	r9, #0
 8016254:	1cb1      	adds	r1, r6, #2
 8016256:	e7ce      	b.n	80161f6 <__gethex+0xd4>
 8016258:	f04f 0901 	mov.w	r9, #1
 801625c:	e7fa      	b.n	8016254 <__gethex+0x132>
 801625e:	230a      	movs	r3, #10
 8016260:	fb03 0202 	mla	r2, r3, r2, r0
 8016264:	3a10      	subs	r2, #16
 8016266:	e7cf      	b.n	8016208 <__gethex+0xe6>
 8016268:	4631      	mov	r1, r6
 801626a:	e7da      	b.n	8016222 <__gethex+0x100>
 801626c:	1bf3      	subs	r3, r6, r7
 801626e:	3b01      	subs	r3, #1
 8016270:	4629      	mov	r1, r5
 8016272:	2b07      	cmp	r3, #7
 8016274:	dc49      	bgt.n	801630a <__gethex+0x1e8>
 8016276:	9802      	ldr	r0, [sp, #8]
 8016278:	f000 fadc 	bl	8016834 <_Balloc>
 801627c:	9b01      	ldr	r3, [sp, #4]
 801627e:	f100 0914 	add.w	r9, r0, #20
 8016282:	f04f 0b00 	mov.w	fp, #0
 8016286:	f1c3 0301 	rsb	r3, r3, #1
 801628a:	4605      	mov	r5, r0
 801628c:	f8cd 9010 	str.w	r9, [sp, #16]
 8016290:	46da      	mov	sl, fp
 8016292:	9308      	str	r3, [sp, #32]
 8016294:	42b7      	cmp	r7, r6
 8016296:	d33b      	bcc.n	8016310 <__gethex+0x1ee>
 8016298:	9804      	ldr	r0, [sp, #16]
 801629a:	f840 ab04 	str.w	sl, [r0], #4
 801629e:	eba0 0009 	sub.w	r0, r0, r9
 80162a2:	1080      	asrs	r0, r0, #2
 80162a4:	6128      	str	r0, [r5, #16]
 80162a6:	0147      	lsls	r7, r0, #5
 80162a8:	4650      	mov	r0, sl
 80162aa:	f000 fb87 	bl	80169bc <__hi0bits>
 80162ae:	f8d8 6000 	ldr.w	r6, [r8]
 80162b2:	1a3f      	subs	r7, r7, r0
 80162b4:	42b7      	cmp	r7, r6
 80162b6:	dd64      	ble.n	8016382 <__gethex+0x260>
 80162b8:	1bbf      	subs	r7, r7, r6
 80162ba:	4639      	mov	r1, r7
 80162bc:	4628      	mov	r0, r5
 80162be:	f000 fe97 	bl	8016ff0 <__any_on>
 80162c2:	4682      	mov	sl, r0
 80162c4:	b178      	cbz	r0, 80162e6 <__gethex+0x1c4>
 80162c6:	1e7b      	subs	r3, r7, #1
 80162c8:	1159      	asrs	r1, r3, #5
 80162ca:	f003 021f 	and.w	r2, r3, #31
 80162ce:	f04f 0a01 	mov.w	sl, #1
 80162d2:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80162d6:	fa0a f202 	lsl.w	r2, sl, r2
 80162da:	420a      	tst	r2, r1
 80162dc:	d003      	beq.n	80162e6 <__gethex+0x1c4>
 80162de:	4553      	cmp	r3, sl
 80162e0:	dc46      	bgt.n	8016370 <__gethex+0x24e>
 80162e2:	f04f 0a02 	mov.w	sl, #2
 80162e6:	4639      	mov	r1, r7
 80162e8:	4628      	mov	r0, r5
 80162ea:	f7ff fecb 	bl	8016084 <rshift>
 80162ee:	443c      	add	r4, r7
 80162f0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80162f4:	42a3      	cmp	r3, r4
 80162f6:	da52      	bge.n	801639e <__gethex+0x27c>
 80162f8:	4629      	mov	r1, r5
 80162fa:	9802      	ldr	r0, [sp, #8]
 80162fc:	f000 face 	bl	801689c <_Bfree>
 8016300:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016302:	2300      	movs	r3, #0
 8016304:	6013      	str	r3, [r2, #0]
 8016306:	27a3      	movs	r7, #163	; 0xa3
 8016308:	e793      	b.n	8016232 <__gethex+0x110>
 801630a:	3101      	adds	r1, #1
 801630c:	105b      	asrs	r3, r3, #1
 801630e:	e7b0      	b.n	8016272 <__gethex+0x150>
 8016310:	1e73      	subs	r3, r6, #1
 8016312:	9305      	str	r3, [sp, #20]
 8016314:	9a07      	ldr	r2, [sp, #28]
 8016316:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801631a:	4293      	cmp	r3, r2
 801631c:	d018      	beq.n	8016350 <__gethex+0x22e>
 801631e:	f1bb 0f20 	cmp.w	fp, #32
 8016322:	d107      	bne.n	8016334 <__gethex+0x212>
 8016324:	9b04      	ldr	r3, [sp, #16]
 8016326:	f8c3 a000 	str.w	sl, [r3]
 801632a:	3304      	adds	r3, #4
 801632c:	f04f 0a00 	mov.w	sl, #0
 8016330:	9304      	str	r3, [sp, #16]
 8016332:	46d3      	mov	fp, sl
 8016334:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8016338:	f7ff fede 	bl	80160f8 <__hexdig_fun>
 801633c:	f000 000f 	and.w	r0, r0, #15
 8016340:	fa00 f00b 	lsl.w	r0, r0, fp
 8016344:	ea4a 0a00 	orr.w	sl, sl, r0
 8016348:	f10b 0b04 	add.w	fp, fp, #4
 801634c:	9b05      	ldr	r3, [sp, #20]
 801634e:	e00d      	b.n	801636c <__gethex+0x24a>
 8016350:	9b05      	ldr	r3, [sp, #20]
 8016352:	9a08      	ldr	r2, [sp, #32]
 8016354:	4413      	add	r3, r2
 8016356:	42bb      	cmp	r3, r7
 8016358:	d3e1      	bcc.n	801631e <__gethex+0x1fc>
 801635a:	4618      	mov	r0, r3
 801635c:	9a01      	ldr	r2, [sp, #4]
 801635e:	9903      	ldr	r1, [sp, #12]
 8016360:	9309      	str	r3, [sp, #36]	; 0x24
 8016362:	f001 fd3b 	bl	8017ddc <strncmp>
 8016366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016368:	2800      	cmp	r0, #0
 801636a:	d1d8      	bne.n	801631e <__gethex+0x1fc>
 801636c:	461e      	mov	r6, r3
 801636e:	e791      	b.n	8016294 <__gethex+0x172>
 8016370:	1eb9      	subs	r1, r7, #2
 8016372:	4628      	mov	r0, r5
 8016374:	f000 fe3c 	bl	8016ff0 <__any_on>
 8016378:	2800      	cmp	r0, #0
 801637a:	d0b2      	beq.n	80162e2 <__gethex+0x1c0>
 801637c:	f04f 0a03 	mov.w	sl, #3
 8016380:	e7b1      	b.n	80162e6 <__gethex+0x1c4>
 8016382:	da09      	bge.n	8016398 <__gethex+0x276>
 8016384:	1bf7      	subs	r7, r6, r7
 8016386:	4629      	mov	r1, r5
 8016388:	463a      	mov	r2, r7
 801638a:	9802      	ldr	r0, [sp, #8]
 801638c:	f000 fc52 	bl	8016c34 <__lshift>
 8016390:	1be4      	subs	r4, r4, r7
 8016392:	4605      	mov	r5, r0
 8016394:	f100 0914 	add.w	r9, r0, #20
 8016398:	f04f 0a00 	mov.w	sl, #0
 801639c:	e7a8      	b.n	80162f0 <__gethex+0x1ce>
 801639e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80163a2:	42a0      	cmp	r0, r4
 80163a4:	dd6a      	ble.n	801647c <__gethex+0x35a>
 80163a6:	1b04      	subs	r4, r0, r4
 80163a8:	42a6      	cmp	r6, r4
 80163aa:	dc2e      	bgt.n	801640a <__gethex+0x2e8>
 80163ac:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80163b0:	2b02      	cmp	r3, #2
 80163b2:	d022      	beq.n	80163fa <__gethex+0x2d8>
 80163b4:	2b03      	cmp	r3, #3
 80163b6:	d024      	beq.n	8016402 <__gethex+0x2e0>
 80163b8:	2b01      	cmp	r3, #1
 80163ba:	d115      	bne.n	80163e8 <__gethex+0x2c6>
 80163bc:	42a6      	cmp	r6, r4
 80163be:	d113      	bne.n	80163e8 <__gethex+0x2c6>
 80163c0:	2e01      	cmp	r6, #1
 80163c2:	dc0b      	bgt.n	80163dc <__gethex+0x2ba>
 80163c4:	9a06      	ldr	r2, [sp, #24]
 80163c6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80163ca:	6013      	str	r3, [r2, #0]
 80163cc:	2301      	movs	r3, #1
 80163ce:	612b      	str	r3, [r5, #16]
 80163d0:	f8c9 3000 	str.w	r3, [r9]
 80163d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80163d6:	2762      	movs	r7, #98	; 0x62
 80163d8:	601d      	str	r5, [r3, #0]
 80163da:	e72a      	b.n	8016232 <__gethex+0x110>
 80163dc:	1e71      	subs	r1, r6, #1
 80163de:	4628      	mov	r0, r5
 80163e0:	f000 fe06 	bl	8016ff0 <__any_on>
 80163e4:	2800      	cmp	r0, #0
 80163e6:	d1ed      	bne.n	80163c4 <__gethex+0x2a2>
 80163e8:	4629      	mov	r1, r5
 80163ea:	9802      	ldr	r0, [sp, #8]
 80163ec:	f000 fa56 	bl	801689c <_Bfree>
 80163f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80163f2:	2300      	movs	r3, #0
 80163f4:	6013      	str	r3, [r2, #0]
 80163f6:	2750      	movs	r7, #80	; 0x50
 80163f8:	e71b      	b.n	8016232 <__gethex+0x110>
 80163fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80163fc:	2b00      	cmp	r3, #0
 80163fe:	d0e1      	beq.n	80163c4 <__gethex+0x2a2>
 8016400:	e7f2      	b.n	80163e8 <__gethex+0x2c6>
 8016402:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016404:	2b00      	cmp	r3, #0
 8016406:	d1dd      	bne.n	80163c4 <__gethex+0x2a2>
 8016408:	e7ee      	b.n	80163e8 <__gethex+0x2c6>
 801640a:	1e67      	subs	r7, r4, #1
 801640c:	f1ba 0f00 	cmp.w	sl, #0
 8016410:	d131      	bne.n	8016476 <__gethex+0x354>
 8016412:	b127      	cbz	r7, 801641e <__gethex+0x2fc>
 8016414:	4639      	mov	r1, r7
 8016416:	4628      	mov	r0, r5
 8016418:	f000 fdea 	bl	8016ff0 <__any_on>
 801641c:	4682      	mov	sl, r0
 801641e:	117a      	asrs	r2, r7, #5
 8016420:	2301      	movs	r3, #1
 8016422:	f007 071f 	and.w	r7, r7, #31
 8016426:	fa03 f707 	lsl.w	r7, r3, r7
 801642a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801642e:	4621      	mov	r1, r4
 8016430:	421f      	tst	r7, r3
 8016432:	4628      	mov	r0, r5
 8016434:	bf18      	it	ne
 8016436:	f04a 0a02 	orrne.w	sl, sl, #2
 801643a:	1b36      	subs	r6, r6, r4
 801643c:	f7ff fe22 	bl	8016084 <rshift>
 8016440:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8016444:	2702      	movs	r7, #2
 8016446:	f1ba 0f00 	cmp.w	sl, #0
 801644a:	d048      	beq.n	80164de <__gethex+0x3bc>
 801644c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016450:	2b02      	cmp	r3, #2
 8016452:	d015      	beq.n	8016480 <__gethex+0x35e>
 8016454:	2b03      	cmp	r3, #3
 8016456:	d017      	beq.n	8016488 <__gethex+0x366>
 8016458:	2b01      	cmp	r3, #1
 801645a:	d109      	bne.n	8016470 <__gethex+0x34e>
 801645c:	f01a 0f02 	tst.w	sl, #2
 8016460:	d006      	beq.n	8016470 <__gethex+0x34e>
 8016462:	f8d9 3000 	ldr.w	r3, [r9]
 8016466:	ea4a 0a03 	orr.w	sl, sl, r3
 801646a:	f01a 0f01 	tst.w	sl, #1
 801646e:	d10e      	bne.n	801648e <__gethex+0x36c>
 8016470:	f047 0710 	orr.w	r7, r7, #16
 8016474:	e033      	b.n	80164de <__gethex+0x3bc>
 8016476:	f04f 0a01 	mov.w	sl, #1
 801647a:	e7d0      	b.n	801641e <__gethex+0x2fc>
 801647c:	2701      	movs	r7, #1
 801647e:	e7e2      	b.n	8016446 <__gethex+0x324>
 8016480:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016482:	f1c3 0301 	rsb	r3, r3, #1
 8016486:	9315      	str	r3, [sp, #84]	; 0x54
 8016488:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801648a:	2b00      	cmp	r3, #0
 801648c:	d0f0      	beq.n	8016470 <__gethex+0x34e>
 801648e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8016492:	f105 0314 	add.w	r3, r5, #20
 8016496:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801649a:	eb03 010a 	add.w	r1, r3, sl
 801649e:	f04f 0c00 	mov.w	ip, #0
 80164a2:	4618      	mov	r0, r3
 80164a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80164a8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80164ac:	d01c      	beq.n	80164e8 <__gethex+0x3c6>
 80164ae:	3201      	adds	r2, #1
 80164b0:	6002      	str	r2, [r0, #0]
 80164b2:	2f02      	cmp	r7, #2
 80164b4:	f105 0314 	add.w	r3, r5, #20
 80164b8:	d138      	bne.n	801652c <__gethex+0x40a>
 80164ba:	f8d8 2000 	ldr.w	r2, [r8]
 80164be:	3a01      	subs	r2, #1
 80164c0:	42b2      	cmp	r2, r6
 80164c2:	d10a      	bne.n	80164da <__gethex+0x3b8>
 80164c4:	1171      	asrs	r1, r6, #5
 80164c6:	2201      	movs	r2, #1
 80164c8:	f006 061f 	and.w	r6, r6, #31
 80164cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80164d0:	fa02 f606 	lsl.w	r6, r2, r6
 80164d4:	421e      	tst	r6, r3
 80164d6:	bf18      	it	ne
 80164d8:	4617      	movne	r7, r2
 80164da:	f047 0720 	orr.w	r7, r7, #32
 80164de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80164e0:	601d      	str	r5, [r3, #0]
 80164e2:	9b06      	ldr	r3, [sp, #24]
 80164e4:	601c      	str	r4, [r3, #0]
 80164e6:	e6a4      	b.n	8016232 <__gethex+0x110>
 80164e8:	4299      	cmp	r1, r3
 80164ea:	f843 cc04 	str.w	ip, [r3, #-4]
 80164ee:	d8d8      	bhi.n	80164a2 <__gethex+0x380>
 80164f0:	68ab      	ldr	r3, [r5, #8]
 80164f2:	4599      	cmp	r9, r3
 80164f4:	db12      	blt.n	801651c <__gethex+0x3fa>
 80164f6:	6869      	ldr	r1, [r5, #4]
 80164f8:	9802      	ldr	r0, [sp, #8]
 80164fa:	3101      	adds	r1, #1
 80164fc:	f000 f99a 	bl	8016834 <_Balloc>
 8016500:	692a      	ldr	r2, [r5, #16]
 8016502:	3202      	adds	r2, #2
 8016504:	f105 010c 	add.w	r1, r5, #12
 8016508:	4683      	mov	fp, r0
 801650a:	0092      	lsls	r2, r2, #2
 801650c:	300c      	adds	r0, #12
 801650e:	f7fc fe97 	bl	8013240 <memcpy>
 8016512:	4629      	mov	r1, r5
 8016514:	9802      	ldr	r0, [sp, #8]
 8016516:	f000 f9c1 	bl	801689c <_Bfree>
 801651a:	465d      	mov	r5, fp
 801651c:	692b      	ldr	r3, [r5, #16]
 801651e:	1c5a      	adds	r2, r3, #1
 8016520:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8016524:	612a      	str	r2, [r5, #16]
 8016526:	2201      	movs	r2, #1
 8016528:	615a      	str	r2, [r3, #20]
 801652a:	e7c2      	b.n	80164b2 <__gethex+0x390>
 801652c:	692a      	ldr	r2, [r5, #16]
 801652e:	454a      	cmp	r2, r9
 8016530:	dd0b      	ble.n	801654a <__gethex+0x428>
 8016532:	2101      	movs	r1, #1
 8016534:	4628      	mov	r0, r5
 8016536:	f7ff fda5 	bl	8016084 <rshift>
 801653a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801653e:	3401      	adds	r4, #1
 8016540:	42a3      	cmp	r3, r4
 8016542:	f6ff aed9 	blt.w	80162f8 <__gethex+0x1d6>
 8016546:	2701      	movs	r7, #1
 8016548:	e7c7      	b.n	80164da <__gethex+0x3b8>
 801654a:	f016 061f 	ands.w	r6, r6, #31
 801654e:	d0fa      	beq.n	8016546 <__gethex+0x424>
 8016550:	449a      	add	sl, r3
 8016552:	f1c6 0620 	rsb	r6, r6, #32
 8016556:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801655a:	f000 fa2f 	bl	80169bc <__hi0bits>
 801655e:	42b0      	cmp	r0, r6
 8016560:	dbe7      	blt.n	8016532 <__gethex+0x410>
 8016562:	e7f0      	b.n	8016546 <__gethex+0x424>

08016564 <L_shift>:
 8016564:	f1c2 0208 	rsb	r2, r2, #8
 8016568:	0092      	lsls	r2, r2, #2
 801656a:	b570      	push	{r4, r5, r6, lr}
 801656c:	f1c2 0620 	rsb	r6, r2, #32
 8016570:	6843      	ldr	r3, [r0, #4]
 8016572:	6804      	ldr	r4, [r0, #0]
 8016574:	fa03 f506 	lsl.w	r5, r3, r6
 8016578:	432c      	orrs	r4, r5
 801657a:	40d3      	lsrs	r3, r2
 801657c:	6004      	str	r4, [r0, #0]
 801657e:	f840 3f04 	str.w	r3, [r0, #4]!
 8016582:	4288      	cmp	r0, r1
 8016584:	d3f4      	bcc.n	8016570 <L_shift+0xc>
 8016586:	bd70      	pop	{r4, r5, r6, pc}

08016588 <__match>:
 8016588:	b530      	push	{r4, r5, lr}
 801658a:	6803      	ldr	r3, [r0, #0]
 801658c:	3301      	adds	r3, #1
 801658e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016592:	b914      	cbnz	r4, 801659a <__match+0x12>
 8016594:	6003      	str	r3, [r0, #0]
 8016596:	2001      	movs	r0, #1
 8016598:	bd30      	pop	{r4, r5, pc}
 801659a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801659e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80165a2:	2d19      	cmp	r5, #25
 80165a4:	bf98      	it	ls
 80165a6:	3220      	addls	r2, #32
 80165a8:	42a2      	cmp	r2, r4
 80165aa:	d0f0      	beq.n	801658e <__match+0x6>
 80165ac:	2000      	movs	r0, #0
 80165ae:	e7f3      	b.n	8016598 <__match+0x10>

080165b0 <__hexnan>:
 80165b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165b4:	680b      	ldr	r3, [r1, #0]
 80165b6:	6801      	ldr	r1, [r0, #0]
 80165b8:	115f      	asrs	r7, r3, #5
 80165ba:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80165be:	f013 031f 	ands.w	r3, r3, #31
 80165c2:	b087      	sub	sp, #28
 80165c4:	bf18      	it	ne
 80165c6:	3704      	addne	r7, #4
 80165c8:	2500      	movs	r5, #0
 80165ca:	1f3e      	subs	r6, r7, #4
 80165cc:	4682      	mov	sl, r0
 80165ce:	4690      	mov	r8, r2
 80165d0:	9301      	str	r3, [sp, #4]
 80165d2:	f847 5c04 	str.w	r5, [r7, #-4]
 80165d6:	46b1      	mov	r9, r6
 80165d8:	4634      	mov	r4, r6
 80165da:	9502      	str	r5, [sp, #8]
 80165dc:	46ab      	mov	fp, r5
 80165de:	784a      	ldrb	r2, [r1, #1]
 80165e0:	1c4b      	adds	r3, r1, #1
 80165e2:	9303      	str	r3, [sp, #12]
 80165e4:	b342      	cbz	r2, 8016638 <__hexnan+0x88>
 80165e6:	4610      	mov	r0, r2
 80165e8:	9105      	str	r1, [sp, #20]
 80165ea:	9204      	str	r2, [sp, #16]
 80165ec:	f7ff fd84 	bl	80160f8 <__hexdig_fun>
 80165f0:	2800      	cmp	r0, #0
 80165f2:	d143      	bne.n	801667c <__hexnan+0xcc>
 80165f4:	9a04      	ldr	r2, [sp, #16]
 80165f6:	9905      	ldr	r1, [sp, #20]
 80165f8:	2a20      	cmp	r2, #32
 80165fa:	d818      	bhi.n	801662e <__hexnan+0x7e>
 80165fc:	9b02      	ldr	r3, [sp, #8]
 80165fe:	459b      	cmp	fp, r3
 8016600:	dd13      	ble.n	801662a <__hexnan+0x7a>
 8016602:	454c      	cmp	r4, r9
 8016604:	d206      	bcs.n	8016614 <__hexnan+0x64>
 8016606:	2d07      	cmp	r5, #7
 8016608:	dc04      	bgt.n	8016614 <__hexnan+0x64>
 801660a:	462a      	mov	r2, r5
 801660c:	4649      	mov	r1, r9
 801660e:	4620      	mov	r0, r4
 8016610:	f7ff ffa8 	bl	8016564 <L_shift>
 8016614:	4544      	cmp	r4, r8
 8016616:	d944      	bls.n	80166a2 <__hexnan+0xf2>
 8016618:	2300      	movs	r3, #0
 801661a:	f1a4 0904 	sub.w	r9, r4, #4
 801661e:	f844 3c04 	str.w	r3, [r4, #-4]
 8016622:	f8cd b008 	str.w	fp, [sp, #8]
 8016626:	464c      	mov	r4, r9
 8016628:	461d      	mov	r5, r3
 801662a:	9903      	ldr	r1, [sp, #12]
 801662c:	e7d7      	b.n	80165de <__hexnan+0x2e>
 801662e:	2a29      	cmp	r2, #41	; 0x29
 8016630:	d14a      	bne.n	80166c8 <__hexnan+0x118>
 8016632:	3102      	adds	r1, #2
 8016634:	f8ca 1000 	str.w	r1, [sl]
 8016638:	f1bb 0f00 	cmp.w	fp, #0
 801663c:	d044      	beq.n	80166c8 <__hexnan+0x118>
 801663e:	454c      	cmp	r4, r9
 8016640:	d206      	bcs.n	8016650 <__hexnan+0xa0>
 8016642:	2d07      	cmp	r5, #7
 8016644:	dc04      	bgt.n	8016650 <__hexnan+0xa0>
 8016646:	462a      	mov	r2, r5
 8016648:	4649      	mov	r1, r9
 801664a:	4620      	mov	r0, r4
 801664c:	f7ff ff8a 	bl	8016564 <L_shift>
 8016650:	4544      	cmp	r4, r8
 8016652:	d928      	bls.n	80166a6 <__hexnan+0xf6>
 8016654:	4643      	mov	r3, r8
 8016656:	f854 2b04 	ldr.w	r2, [r4], #4
 801665a:	f843 2b04 	str.w	r2, [r3], #4
 801665e:	42a6      	cmp	r6, r4
 8016660:	d2f9      	bcs.n	8016656 <__hexnan+0xa6>
 8016662:	2200      	movs	r2, #0
 8016664:	f843 2b04 	str.w	r2, [r3], #4
 8016668:	429e      	cmp	r6, r3
 801666a:	d2fb      	bcs.n	8016664 <__hexnan+0xb4>
 801666c:	6833      	ldr	r3, [r6, #0]
 801666e:	b91b      	cbnz	r3, 8016678 <__hexnan+0xc8>
 8016670:	4546      	cmp	r6, r8
 8016672:	d127      	bne.n	80166c4 <__hexnan+0x114>
 8016674:	2301      	movs	r3, #1
 8016676:	6033      	str	r3, [r6, #0]
 8016678:	2005      	movs	r0, #5
 801667a:	e026      	b.n	80166ca <__hexnan+0x11a>
 801667c:	3501      	adds	r5, #1
 801667e:	2d08      	cmp	r5, #8
 8016680:	f10b 0b01 	add.w	fp, fp, #1
 8016684:	dd06      	ble.n	8016694 <__hexnan+0xe4>
 8016686:	4544      	cmp	r4, r8
 8016688:	d9cf      	bls.n	801662a <__hexnan+0x7a>
 801668a:	2300      	movs	r3, #0
 801668c:	f844 3c04 	str.w	r3, [r4, #-4]
 8016690:	2501      	movs	r5, #1
 8016692:	3c04      	subs	r4, #4
 8016694:	6822      	ldr	r2, [r4, #0]
 8016696:	f000 000f 	and.w	r0, r0, #15
 801669a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801669e:	6020      	str	r0, [r4, #0]
 80166a0:	e7c3      	b.n	801662a <__hexnan+0x7a>
 80166a2:	2508      	movs	r5, #8
 80166a4:	e7c1      	b.n	801662a <__hexnan+0x7a>
 80166a6:	9b01      	ldr	r3, [sp, #4]
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d0df      	beq.n	801666c <__hexnan+0xbc>
 80166ac:	f04f 32ff 	mov.w	r2, #4294967295
 80166b0:	f1c3 0320 	rsb	r3, r3, #32
 80166b4:	fa22 f303 	lsr.w	r3, r2, r3
 80166b8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80166bc:	401a      	ands	r2, r3
 80166be:	f847 2c04 	str.w	r2, [r7, #-4]
 80166c2:	e7d3      	b.n	801666c <__hexnan+0xbc>
 80166c4:	3e04      	subs	r6, #4
 80166c6:	e7d1      	b.n	801666c <__hexnan+0xbc>
 80166c8:	2004      	movs	r0, #4
 80166ca:	b007      	add	sp, #28
 80166cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080166d0 <__locale_ctype_ptr_l>:
 80166d0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80166d4:	4770      	bx	lr
	...

080166d8 <__locale_ctype_ptr>:
 80166d8:	4b04      	ldr	r3, [pc, #16]	; (80166ec <__locale_ctype_ptr+0x14>)
 80166da:	4a05      	ldr	r2, [pc, #20]	; (80166f0 <__locale_ctype_ptr+0x18>)
 80166dc:	681b      	ldr	r3, [r3, #0]
 80166de:	6a1b      	ldr	r3, [r3, #32]
 80166e0:	2b00      	cmp	r3, #0
 80166e2:	bf08      	it	eq
 80166e4:	4613      	moveq	r3, r2
 80166e6:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80166ea:	4770      	bx	lr
 80166ec:	2000000c 	.word	0x2000000c
 80166f0:	20000070 	.word	0x20000070

080166f4 <__localeconv_l>:
 80166f4:	30f0      	adds	r0, #240	; 0xf0
 80166f6:	4770      	bx	lr

080166f8 <_localeconv_r>:
 80166f8:	4b04      	ldr	r3, [pc, #16]	; (801670c <_localeconv_r+0x14>)
 80166fa:	681b      	ldr	r3, [r3, #0]
 80166fc:	6a18      	ldr	r0, [r3, #32]
 80166fe:	4b04      	ldr	r3, [pc, #16]	; (8016710 <_localeconv_r+0x18>)
 8016700:	2800      	cmp	r0, #0
 8016702:	bf08      	it	eq
 8016704:	4618      	moveq	r0, r3
 8016706:	30f0      	adds	r0, #240	; 0xf0
 8016708:	4770      	bx	lr
 801670a:	bf00      	nop
 801670c:	2000000c 	.word	0x2000000c
 8016710:	20000070 	.word	0x20000070

08016714 <_lseek_r>:
 8016714:	b538      	push	{r3, r4, r5, lr}
 8016716:	4c07      	ldr	r4, [pc, #28]	; (8016734 <_lseek_r+0x20>)
 8016718:	4605      	mov	r5, r0
 801671a:	4608      	mov	r0, r1
 801671c:	4611      	mov	r1, r2
 801671e:	2200      	movs	r2, #0
 8016720:	6022      	str	r2, [r4, #0]
 8016722:	461a      	mov	r2, r3
 8016724:	f7ef fc22 	bl	8005f6c <_lseek>
 8016728:	1c43      	adds	r3, r0, #1
 801672a:	d102      	bne.n	8016732 <_lseek_r+0x1e>
 801672c:	6823      	ldr	r3, [r4, #0]
 801672e:	b103      	cbz	r3, 8016732 <_lseek_r+0x1e>
 8016730:	602b      	str	r3, [r5, #0]
 8016732:	bd38      	pop	{r3, r4, r5, pc}
 8016734:	20037fbc 	.word	0x20037fbc

08016738 <__swhatbuf_r>:
 8016738:	b570      	push	{r4, r5, r6, lr}
 801673a:	460e      	mov	r6, r1
 801673c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016740:	2900      	cmp	r1, #0
 8016742:	b096      	sub	sp, #88	; 0x58
 8016744:	4614      	mov	r4, r2
 8016746:	461d      	mov	r5, r3
 8016748:	da07      	bge.n	801675a <__swhatbuf_r+0x22>
 801674a:	2300      	movs	r3, #0
 801674c:	602b      	str	r3, [r5, #0]
 801674e:	89b3      	ldrh	r3, [r6, #12]
 8016750:	061a      	lsls	r2, r3, #24
 8016752:	d410      	bmi.n	8016776 <__swhatbuf_r+0x3e>
 8016754:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016758:	e00e      	b.n	8016778 <__swhatbuf_r+0x40>
 801675a:	466a      	mov	r2, sp
 801675c:	f001 fc24 	bl	8017fa8 <_fstat_r>
 8016760:	2800      	cmp	r0, #0
 8016762:	dbf2      	blt.n	801674a <__swhatbuf_r+0x12>
 8016764:	9a01      	ldr	r2, [sp, #4]
 8016766:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801676a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801676e:	425a      	negs	r2, r3
 8016770:	415a      	adcs	r2, r3
 8016772:	602a      	str	r2, [r5, #0]
 8016774:	e7ee      	b.n	8016754 <__swhatbuf_r+0x1c>
 8016776:	2340      	movs	r3, #64	; 0x40
 8016778:	2000      	movs	r0, #0
 801677a:	6023      	str	r3, [r4, #0]
 801677c:	b016      	add	sp, #88	; 0x58
 801677e:	bd70      	pop	{r4, r5, r6, pc}

08016780 <__smakebuf_r>:
 8016780:	898b      	ldrh	r3, [r1, #12]
 8016782:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016784:	079d      	lsls	r5, r3, #30
 8016786:	4606      	mov	r6, r0
 8016788:	460c      	mov	r4, r1
 801678a:	d507      	bpl.n	801679c <__smakebuf_r+0x1c>
 801678c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016790:	6023      	str	r3, [r4, #0]
 8016792:	6123      	str	r3, [r4, #16]
 8016794:	2301      	movs	r3, #1
 8016796:	6163      	str	r3, [r4, #20]
 8016798:	b002      	add	sp, #8
 801679a:	bd70      	pop	{r4, r5, r6, pc}
 801679c:	ab01      	add	r3, sp, #4
 801679e:	466a      	mov	r2, sp
 80167a0:	f7ff ffca 	bl	8016738 <__swhatbuf_r>
 80167a4:	9900      	ldr	r1, [sp, #0]
 80167a6:	4605      	mov	r5, r0
 80167a8:	4630      	mov	r0, r6
 80167aa:	f000 fc9f 	bl	80170ec <_malloc_r>
 80167ae:	b948      	cbnz	r0, 80167c4 <__smakebuf_r+0x44>
 80167b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80167b4:	059a      	lsls	r2, r3, #22
 80167b6:	d4ef      	bmi.n	8016798 <__smakebuf_r+0x18>
 80167b8:	f023 0303 	bic.w	r3, r3, #3
 80167bc:	f043 0302 	orr.w	r3, r3, #2
 80167c0:	81a3      	strh	r3, [r4, #12]
 80167c2:	e7e3      	b.n	801678c <__smakebuf_r+0xc>
 80167c4:	4b0d      	ldr	r3, [pc, #52]	; (80167fc <__smakebuf_r+0x7c>)
 80167c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80167c8:	89a3      	ldrh	r3, [r4, #12]
 80167ca:	6020      	str	r0, [r4, #0]
 80167cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80167d0:	81a3      	strh	r3, [r4, #12]
 80167d2:	9b00      	ldr	r3, [sp, #0]
 80167d4:	6163      	str	r3, [r4, #20]
 80167d6:	9b01      	ldr	r3, [sp, #4]
 80167d8:	6120      	str	r0, [r4, #16]
 80167da:	b15b      	cbz	r3, 80167f4 <__smakebuf_r+0x74>
 80167dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80167e0:	4630      	mov	r0, r6
 80167e2:	f001 fbf3 	bl	8017fcc <_isatty_r>
 80167e6:	b128      	cbz	r0, 80167f4 <__smakebuf_r+0x74>
 80167e8:	89a3      	ldrh	r3, [r4, #12]
 80167ea:	f023 0303 	bic.w	r3, r3, #3
 80167ee:	f043 0301 	orr.w	r3, r3, #1
 80167f2:	81a3      	strh	r3, [r4, #12]
 80167f4:	89a3      	ldrh	r3, [r4, #12]
 80167f6:	431d      	orrs	r5, r3
 80167f8:	81a5      	strh	r5, [r4, #12]
 80167fa:	e7cd      	b.n	8016798 <__smakebuf_r+0x18>
 80167fc:	08015f39 	.word	0x08015f39

08016800 <malloc>:
 8016800:	4b02      	ldr	r3, [pc, #8]	; (801680c <malloc+0xc>)
 8016802:	4601      	mov	r1, r0
 8016804:	6818      	ldr	r0, [r3, #0]
 8016806:	f000 bc71 	b.w	80170ec <_malloc_r>
 801680a:	bf00      	nop
 801680c:	2000000c 	.word	0x2000000c

08016810 <__ascii_mbtowc>:
 8016810:	b082      	sub	sp, #8
 8016812:	b901      	cbnz	r1, 8016816 <__ascii_mbtowc+0x6>
 8016814:	a901      	add	r1, sp, #4
 8016816:	b142      	cbz	r2, 801682a <__ascii_mbtowc+0x1a>
 8016818:	b14b      	cbz	r3, 801682e <__ascii_mbtowc+0x1e>
 801681a:	7813      	ldrb	r3, [r2, #0]
 801681c:	600b      	str	r3, [r1, #0]
 801681e:	7812      	ldrb	r2, [r2, #0]
 8016820:	1c10      	adds	r0, r2, #0
 8016822:	bf18      	it	ne
 8016824:	2001      	movne	r0, #1
 8016826:	b002      	add	sp, #8
 8016828:	4770      	bx	lr
 801682a:	4610      	mov	r0, r2
 801682c:	e7fb      	b.n	8016826 <__ascii_mbtowc+0x16>
 801682e:	f06f 0001 	mvn.w	r0, #1
 8016832:	e7f8      	b.n	8016826 <__ascii_mbtowc+0x16>

08016834 <_Balloc>:
 8016834:	b570      	push	{r4, r5, r6, lr}
 8016836:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016838:	4604      	mov	r4, r0
 801683a:	460e      	mov	r6, r1
 801683c:	b93d      	cbnz	r5, 801684e <_Balloc+0x1a>
 801683e:	2010      	movs	r0, #16
 8016840:	f7ff ffde 	bl	8016800 <malloc>
 8016844:	6260      	str	r0, [r4, #36]	; 0x24
 8016846:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801684a:	6005      	str	r5, [r0, #0]
 801684c:	60c5      	str	r5, [r0, #12]
 801684e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8016850:	68eb      	ldr	r3, [r5, #12]
 8016852:	b183      	cbz	r3, 8016876 <_Balloc+0x42>
 8016854:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016856:	68db      	ldr	r3, [r3, #12]
 8016858:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801685c:	b9b8      	cbnz	r0, 801688e <_Balloc+0x5a>
 801685e:	2101      	movs	r1, #1
 8016860:	fa01 f506 	lsl.w	r5, r1, r6
 8016864:	1d6a      	adds	r2, r5, #5
 8016866:	0092      	lsls	r2, r2, #2
 8016868:	4620      	mov	r0, r4
 801686a:	f000 fbe2 	bl	8017032 <_calloc_r>
 801686e:	b160      	cbz	r0, 801688a <_Balloc+0x56>
 8016870:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8016874:	e00e      	b.n	8016894 <_Balloc+0x60>
 8016876:	2221      	movs	r2, #33	; 0x21
 8016878:	2104      	movs	r1, #4
 801687a:	4620      	mov	r0, r4
 801687c:	f000 fbd9 	bl	8017032 <_calloc_r>
 8016880:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016882:	60e8      	str	r0, [r5, #12]
 8016884:	68db      	ldr	r3, [r3, #12]
 8016886:	2b00      	cmp	r3, #0
 8016888:	d1e4      	bne.n	8016854 <_Balloc+0x20>
 801688a:	2000      	movs	r0, #0
 801688c:	bd70      	pop	{r4, r5, r6, pc}
 801688e:	6802      	ldr	r2, [r0, #0]
 8016890:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8016894:	2300      	movs	r3, #0
 8016896:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801689a:	e7f7      	b.n	801688c <_Balloc+0x58>

0801689c <_Bfree>:
 801689c:	b570      	push	{r4, r5, r6, lr}
 801689e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80168a0:	4606      	mov	r6, r0
 80168a2:	460d      	mov	r5, r1
 80168a4:	b93c      	cbnz	r4, 80168b6 <_Bfree+0x1a>
 80168a6:	2010      	movs	r0, #16
 80168a8:	f7ff ffaa 	bl	8016800 <malloc>
 80168ac:	6270      	str	r0, [r6, #36]	; 0x24
 80168ae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80168b2:	6004      	str	r4, [r0, #0]
 80168b4:	60c4      	str	r4, [r0, #12]
 80168b6:	b13d      	cbz	r5, 80168c8 <_Bfree+0x2c>
 80168b8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80168ba:	686a      	ldr	r2, [r5, #4]
 80168bc:	68db      	ldr	r3, [r3, #12]
 80168be:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80168c2:	6029      	str	r1, [r5, #0]
 80168c4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80168c8:	bd70      	pop	{r4, r5, r6, pc}

080168ca <__multadd>:
 80168ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80168ce:	690d      	ldr	r5, [r1, #16]
 80168d0:	461f      	mov	r7, r3
 80168d2:	4606      	mov	r6, r0
 80168d4:	460c      	mov	r4, r1
 80168d6:	f101 0c14 	add.w	ip, r1, #20
 80168da:	2300      	movs	r3, #0
 80168dc:	f8dc 0000 	ldr.w	r0, [ip]
 80168e0:	b281      	uxth	r1, r0
 80168e2:	fb02 7101 	mla	r1, r2, r1, r7
 80168e6:	0c0f      	lsrs	r7, r1, #16
 80168e8:	0c00      	lsrs	r0, r0, #16
 80168ea:	fb02 7000 	mla	r0, r2, r0, r7
 80168ee:	b289      	uxth	r1, r1
 80168f0:	3301      	adds	r3, #1
 80168f2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80168f6:	429d      	cmp	r5, r3
 80168f8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80168fc:	f84c 1b04 	str.w	r1, [ip], #4
 8016900:	dcec      	bgt.n	80168dc <__multadd+0x12>
 8016902:	b1d7      	cbz	r7, 801693a <__multadd+0x70>
 8016904:	68a3      	ldr	r3, [r4, #8]
 8016906:	42ab      	cmp	r3, r5
 8016908:	dc12      	bgt.n	8016930 <__multadd+0x66>
 801690a:	6861      	ldr	r1, [r4, #4]
 801690c:	4630      	mov	r0, r6
 801690e:	3101      	adds	r1, #1
 8016910:	f7ff ff90 	bl	8016834 <_Balloc>
 8016914:	6922      	ldr	r2, [r4, #16]
 8016916:	3202      	adds	r2, #2
 8016918:	f104 010c 	add.w	r1, r4, #12
 801691c:	4680      	mov	r8, r0
 801691e:	0092      	lsls	r2, r2, #2
 8016920:	300c      	adds	r0, #12
 8016922:	f7fc fc8d 	bl	8013240 <memcpy>
 8016926:	4621      	mov	r1, r4
 8016928:	4630      	mov	r0, r6
 801692a:	f7ff ffb7 	bl	801689c <_Bfree>
 801692e:	4644      	mov	r4, r8
 8016930:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016934:	3501      	adds	r5, #1
 8016936:	615f      	str	r7, [r3, #20]
 8016938:	6125      	str	r5, [r4, #16]
 801693a:	4620      	mov	r0, r4
 801693c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016940 <__s2b>:
 8016940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016944:	460c      	mov	r4, r1
 8016946:	4615      	mov	r5, r2
 8016948:	461f      	mov	r7, r3
 801694a:	2209      	movs	r2, #9
 801694c:	3308      	adds	r3, #8
 801694e:	4606      	mov	r6, r0
 8016950:	fb93 f3f2 	sdiv	r3, r3, r2
 8016954:	2100      	movs	r1, #0
 8016956:	2201      	movs	r2, #1
 8016958:	429a      	cmp	r2, r3
 801695a:	db20      	blt.n	801699e <__s2b+0x5e>
 801695c:	4630      	mov	r0, r6
 801695e:	f7ff ff69 	bl	8016834 <_Balloc>
 8016962:	9b08      	ldr	r3, [sp, #32]
 8016964:	6143      	str	r3, [r0, #20]
 8016966:	2d09      	cmp	r5, #9
 8016968:	f04f 0301 	mov.w	r3, #1
 801696c:	6103      	str	r3, [r0, #16]
 801696e:	dd19      	ble.n	80169a4 <__s2b+0x64>
 8016970:	f104 0809 	add.w	r8, r4, #9
 8016974:	46c1      	mov	r9, r8
 8016976:	442c      	add	r4, r5
 8016978:	f819 3b01 	ldrb.w	r3, [r9], #1
 801697c:	4601      	mov	r1, r0
 801697e:	3b30      	subs	r3, #48	; 0x30
 8016980:	220a      	movs	r2, #10
 8016982:	4630      	mov	r0, r6
 8016984:	f7ff ffa1 	bl	80168ca <__multadd>
 8016988:	45a1      	cmp	r9, r4
 801698a:	d1f5      	bne.n	8016978 <__s2b+0x38>
 801698c:	eb08 0405 	add.w	r4, r8, r5
 8016990:	3c08      	subs	r4, #8
 8016992:	1b2d      	subs	r5, r5, r4
 8016994:	1963      	adds	r3, r4, r5
 8016996:	42bb      	cmp	r3, r7
 8016998:	db07      	blt.n	80169aa <__s2b+0x6a>
 801699a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801699e:	0052      	lsls	r2, r2, #1
 80169a0:	3101      	adds	r1, #1
 80169a2:	e7d9      	b.n	8016958 <__s2b+0x18>
 80169a4:	340a      	adds	r4, #10
 80169a6:	2509      	movs	r5, #9
 80169a8:	e7f3      	b.n	8016992 <__s2b+0x52>
 80169aa:	f814 3b01 	ldrb.w	r3, [r4], #1
 80169ae:	4601      	mov	r1, r0
 80169b0:	3b30      	subs	r3, #48	; 0x30
 80169b2:	220a      	movs	r2, #10
 80169b4:	4630      	mov	r0, r6
 80169b6:	f7ff ff88 	bl	80168ca <__multadd>
 80169ba:	e7eb      	b.n	8016994 <__s2b+0x54>

080169bc <__hi0bits>:
 80169bc:	0c02      	lsrs	r2, r0, #16
 80169be:	0412      	lsls	r2, r2, #16
 80169c0:	4603      	mov	r3, r0
 80169c2:	b9b2      	cbnz	r2, 80169f2 <__hi0bits+0x36>
 80169c4:	0403      	lsls	r3, r0, #16
 80169c6:	2010      	movs	r0, #16
 80169c8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80169cc:	bf04      	itt	eq
 80169ce:	021b      	lsleq	r3, r3, #8
 80169d0:	3008      	addeq	r0, #8
 80169d2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80169d6:	bf04      	itt	eq
 80169d8:	011b      	lsleq	r3, r3, #4
 80169da:	3004      	addeq	r0, #4
 80169dc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80169e0:	bf04      	itt	eq
 80169e2:	009b      	lsleq	r3, r3, #2
 80169e4:	3002      	addeq	r0, #2
 80169e6:	2b00      	cmp	r3, #0
 80169e8:	db06      	blt.n	80169f8 <__hi0bits+0x3c>
 80169ea:	005b      	lsls	r3, r3, #1
 80169ec:	d503      	bpl.n	80169f6 <__hi0bits+0x3a>
 80169ee:	3001      	adds	r0, #1
 80169f0:	4770      	bx	lr
 80169f2:	2000      	movs	r0, #0
 80169f4:	e7e8      	b.n	80169c8 <__hi0bits+0xc>
 80169f6:	2020      	movs	r0, #32
 80169f8:	4770      	bx	lr

080169fa <__lo0bits>:
 80169fa:	6803      	ldr	r3, [r0, #0]
 80169fc:	f013 0207 	ands.w	r2, r3, #7
 8016a00:	4601      	mov	r1, r0
 8016a02:	d00b      	beq.n	8016a1c <__lo0bits+0x22>
 8016a04:	07da      	lsls	r2, r3, #31
 8016a06:	d423      	bmi.n	8016a50 <__lo0bits+0x56>
 8016a08:	0798      	lsls	r0, r3, #30
 8016a0a:	bf49      	itett	mi
 8016a0c:	085b      	lsrmi	r3, r3, #1
 8016a0e:	089b      	lsrpl	r3, r3, #2
 8016a10:	2001      	movmi	r0, #1
 8016a12:	600b      	strmi	r3, [r1, #0]
 8016a14:	bf5c      	itt	pl
 8016a16:	600b      	strpl	r3, [r1, #0]
 8016a18:	2002      	movpl	r0, #2
 8016a1a:	4770      	bx	lr
 8016a1c:	b298      	uxth	r0, r3
 8016a1e:	b9a8      	cbnz	r0, 8016a4c <__lo0bits+0x52>
 8016a20:	0c1b      	lsrs	r3, r3, #16
 8016a22:	2010      	movs	r0, #16
 8016a24:	f013 0fff 	tst.w	r3, #255	; 0xff
 8016a28:	bf04      	itt	eq
 8016a2a:	0a1b      	lsreq	r3, r3, #8
 8016a2c:	3008      	addeq	r0, #8
 8016a2e:	071a      	lsls	r2, r3, #28
 8016a30:	bf04      	itt	eq
 8016a32:	091b      	lsreq	r3, r3, #4
 8016a34:	3004      	addeq	r0, #4
 8016a36:	079a      	lsls	r2, r3, #30
 8016a38:	bf04      	itt	eq
 8016a3a:	089b      	lsreq	r3, r3, #2
 8016a3c:	3002      	addeq	r0, #2
 8016a3e:	07da      	lsls	r2, r3, #31
 8016a40:	d402      	bmi.n	8016a48 <__lo0bits+0x4e>
 8016a42:	085b      	lsrs	r3, r3, #1
 8016a44:	d006      	beq.n	8016a54 <__lo0bits+0x5a>
 8016a46:	3001      	adds	r0, #1
 8016a48:	600b      	str	r3, [r1, #0]
 8016a4a:	4770      	bx	lr
 8016a4c:	4610      	mov	r0, r2
 8016a4e:	e7e9      	b.n	8016a24 <__lo0bits+0x2a>
 8016a50:	2000      	movs	r0, #0
 8016a52:	4770      	bx	lr
 8016a54:	2020      	movs	r0, #32
 8016a56:	4770      	bx	lr

08016a58 <__i2b>:
 8016a58:	b510      	push	{r4, lr}
 8016a5a:	460c      	mov	r4, r1
 8016a5c:	2101      	movs	r1, #1
 8016a5e:	f7ff fee9 	bl	8016834 <_Balloc>
 8016a62:	2201      	movs	r2, #1
 8016a64:	6144      	str	r4, [r0, #20]
 8016a66:	6102      	str	r2, [r0, #16]
 8016a68:	bd10      	pop	{r4, pc}

08016a6a <__multiply>:
 8016a6a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a6e:	4614      	mov	r4, r2
 8016a70:	690a      	ldr	r2, [r1, #16]
 8016a72:	6923      	ldr	r3, [r4, #16]
 8016a74:	429a      	cmp	r2, r3
 8016a76:	bfb8      	it	lt
 8016a78:	460b      	movlt	r3, r1
 8016a7a:	4688      	mov	r8, r1
 8016a7c:	bfbc      	itt	lt
 8016a7e:	46a0      	movlt	r8, r4
 8016a80:	461c      	movlt	r4, r3
 8016a82:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8016a86:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8016a8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016a8e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8016a92:	eb07 0609 	add.w	r6, r7, r9
 8016a96:	42b3      	cmp	r3, r6
 8016a98:	bfb8      	it	lt
 8016a9a:	3101      	addlt	r1, #1
 8016a9c:	f7ff feca 	bl	8016834 <_Balloc>
 8016aa0:	f100 0514 	add.w	r5, r0, #20
 8016aa4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8016aa8:	462b      	mov	r3, r5
 8016aaa:	2200      	movs	r2, #0
 8016aac:	4573      	cmp	r3, lr
 8016aae:	d316      	bcc.n	8016ade <__multiply+0x74>
 8016ab0:	f104 0214 	add.w	r2, r4, #20
 8016ab4:	f108 0114 	add.w	r1, r8, #20
 8016ab8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8016abc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8016ac0:	9300      	str	r3, [sp, #0]
 8016ac2:	9b00      	ldr	r3, [sp, #0]
 8016ac4:	9201      	str	r2, [sp, #4]
 8016ac6:	4293      	cmp	r3, r2
 8016ac8:	d80c      	bhi.n	8016ae4 <__multiply+0x7a>
 8016aca:	2e00      	cmp	r6, #0
 8016acc:	dd03      	ble.n	8016ad6 <__multiply+0x6c>
 8016ace:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8016ad2:	2b00      	cmp	r3, #0
 8016ad4:	d05d      	beq.n	8016b92 <__multiply+0x128>
 8016ad6:	6106      	str	r6, [r0, #16]
 8016ad8:	b003      	add	sp, #12
 8016ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ade:	f843 2b04 	str.w	r2, [r3], #4
 8016ae2:	e7e3      	b.n	8016aac <__multiply+0x42>
 8016ae4:	f8b2 b000 	ldrh.w	fp, [r2]
 8016ae8:	f1bb 0f00 	cmp.w	fp, #0
 8016aec:	d023      	beq.n	8016b36 <__multiply+0xcc>
 8016aee:	4689      	mov	r9, r1
 8016af0:	46ac      	mov	ip, r5
 8016af2:	f04f 0800 	mov.w	r8, #0
 8016af6:	f859 4b04 	ldr.w	r4, [r9], #4
 8016afa:	f8dc a000 	ldr.w	sl, [ip]
 8016afe:	b2a3      	uxth	r3, r4
 8016b00:	fa1f fa8a 	uxth.w	sl, sl
 8016b04:	fb0b a303 	mla	r3, fp, r3, sl
 8016b08:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8016b0c:	f8dc 4000 	ldr.w	r4, [ip]
 8016b10:	4443      	add	r3, r8
 8016b12:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8016b16:	fb0b 840a 	mla	r4, fp, sl, r8
 8016b1a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8016b1e:	46e2      	mov	sl, ip
 8016b20:	b29b      	uxth	r3, r3
 8016b22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8016b26:	454f      	cmp	r7, r9
 8016b28:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8016b2c:	f84a 3b04 	str.w	r3, [sl], #4
 8016b30:	d82b      	bhi.n	8016b8a <__multiply+0x120>
 8016b32:	f8cc 8004 	str.w	r8, [ip, #4]
 8016b36:	9b01      	ldr	r3, [sp, #4]
 8016b38:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8016b3c:	3204      	adds	r2, #4
 8016b3e:	f1ba 0f00 	cmp.w	sl, #0
 8016b42:	d020      	beq.n	8016b86 <__multiply+0x11c>
 8016b44:	682b      	ldr	r3, [r5, #0]
 8016b46:	4689      	mov	r9, r1
 8016b48:	46a8      	mov	r8, r5
 8016b4a:	f04f 0b00 	mov.w	fp, #0
 8016b4e:	f8b9 c000 	ldrh.w	ip, [r9]
 8016b52:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8016b56:	fb0a 440c 	mla	r4, sl, ip, r4
 8016b5a:	445c      	add	r4, fp
 8016b5c:	46c4      	mov	ip, r8
 8016b5e:	b29b      	uxth	r3, r3
 8016b60:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8016b64:	f84c 3b04 	str.w	r3, [ip], #4
 8016b68:	f859 3b04 	ldr.w	r3, [r9], #4
 8016b6c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8016b70:	0c1b      	lsrs	r3, r3, #16
 8016b72:	fb0a b303 	mla	r3, sl, r3, fp
 8016b76:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8016b7a:	454f      	cmp	r7, r9
 8016b7c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8016b80:	d805      	bhi.n	8016b8e <__multiply+0x124>
 8016b82:	f8c8 3004 	str.w	r3, [r8, #4]
 8016b86:	3504      	adds	r5, #4
 8016b88:	e79b      	b.n	8016ac2 <__multiply+0x58>
 8016b8a:	46d4      	mov	ip, sl
 8016b8c:	e7b3      	b.n	8016af6 <__multiply+0x8c>
 8016b8e:	46e0      	mov	r8, ip
 8016b90:	e7dd      	b.n	8016b4e <__multiply+0xe4>
 8016b92:	3e01      	subs	r6, #1
 8016b94:	e799      	b.n	8016aca <__multiply+0x60>
	...

08016b98 <__pow5mult>:
 8016b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016b9c:	4615      	mov	r5, r2
 8016b9e:	f012 0203 	ands.w	r2, r2, #3
 8016ba2:	4606      	mov	r6, r0
 8016ba4:	460f      	mov	r7, r1
 8016ba6:	d007      	beq.n	8016bb8 <__pow5mult+0x20>
 8016ba8:	3a01      	subs	r2, #1
 8016baa:	4c21      	ldr	r4, [pc, #132]	; (8016c30 <__pow5mult+0x98>)
 8016bac:	2300      	movs	r3, #0
 8016bae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016bb2:	f7ff fe8a 	bl	80168ca <__multadd>
 8016bb6:	4607      	mov	r7, r0
 8016bb8:	10ad      	asrs	r5, r5, #2
 8016bba:	d035      	beq.n	8016c28 <__pow5mult+0x90>
 8016bbc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8016bbe:	b93c      	cbnz	r4, 8016bd0 <__pow5mult+0x38>
 8016bc0:	2010      	movs	r0, #16
 8016bc2:	f7ff fe1d 	bl	8016800 <malloc>
 8016bc6:	6270      	str	r0, [r6, #36]	; 0x24
 8016bc8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016bcc:	6004      	str	r4, [r0, #0]
 8016bce:	60c4      	str	r4, [r0, #12]
 8016bd0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8016bd4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016bd8:	b94c      	cbnz	r4, 8016bee <__pow5mult+0x56>
 8016bda:	f240 2171 	movw	r1, #625	; 0x271
 8016bde:	4630      	mov	r0, r6
 8016be0:	f7ff ff3a 	bl	8016a58 <__i2b>
 8016be4:	2300      	movs	r3, #0
 8016be6:	f8c8 0008 	str.w	r0, [r8, #8]
 8016bea:	4604      	mov	r4, r0
 8016bec:	6003      	str	r3, [r0, #0]
 8016bee:	f04f 0800 	mov.w	r8, #0
 8016bf2:	07eb      	lsls	r3, r5, #31
 8016bf4:	d50a      	bpl.n	8016c0c <__pow5mult+0x74>
 8016bf6:	4639      	mov	r1, r7
 8016bf8:	4622      	mov	r2, r4
 8016bfa:	4630      	mov	r0, r6
 8016bfc:	f7ff ff35 	bl	8016a6a <__multiply>
 8016c00:	4639      	mov	r1, r7
 8016c02:	4681      	mov	r9, r0
 8016c04:	4630      	mov	r0, r6
 8016c06:	f7ff fe49 	bl	801689c <_Bfree>
 8016c0a:	464f      	mov	r7, r9
 8016c0c:	106d      	asrs	r5, r5, #1
 8016c0e:	d00b      	beq.n	8016c28 <__pow5mult+0x90>
 8016c10:	6820      	ldr	r0, [r4, #0]
 8016c12:	b938      	cbnz	r0, 8016c24 <__pow5mult+0x8c>
 8016c14:	4622      	mov	r2, r4
 8016c16:	4621      	mov	r1, r4
 8016c18:	4630      	mov	r0, r6
 8016c1a:	f7ff ff26 	bl	8016a6a <__multiply>
 8016c1e:	6020      	str	r0, [r4, #0]
 8016c20:	f8c0 8000 	str.w	r8, [r0]
 8016c24:	4604      	mov	r4, r0
 8016c26:	e7e4      	b.n	8016bf2 <__pow5mult+0x5a>
 8016c28:	4638      	mov	r0, r7
 8016c2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016c2e:	bf00      	nop
 8016c30:	08018a68 	.word	0x08018a68

08016c34 <__lshift>:
 8016c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016c38:	460c      	mov	r4, r1
 8016c3a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016c3e:	6923      	ldr	r3, [r4, #16]
 8016c40:	6849      	ldr	r1, [r1, #4]
 8016c42:	eb0a 0903 	add.w	r9, sl, r3
 8016c46:	68a3      	ldr	r3, [r4, #8]
 8016c48:	4607      	mov	r7, r0
 8016c4a:	4616      	mov	r6, r2
 8016c4c:	f109 0501 	add.w	r5, r9, #1
 8016c50:	42ab      	cmp	r3, r5
 8016c52:	db32      	blt.n	8016cba <__lshift+0x86>
 8016c54:	4638      	mov	r0, r7
 8016c56:	f7ff fded 	bl	8016834 <_Balloc>
 8016c5a:	2300      	movs	r3, #0
 8016c5c:	4680      	mov	r8, r0
 8016c5e:	f100 0114 	add.w	r1, r0, #20
 8016c62:	461a      	mov	r2, r3
 8016c64:	4553      	cmp	r3, sl
 8016c66:	db2b      	blt.n	8016cc0 <__lshift+0x8c>
 8016c68:	6920      	ldr	r0, [r4, #16]
 8016c6a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016c6e:	f104 0314 	add.w	r3, r4, #20
 8016c72:	f016 021f 	ands.w	r2, r6, #31
 8016c76:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016c7a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016c7e:	d025      	beq.n	8016ccc <__lshift+0x98>
 8016c80:	f1c2 0e20 	rsb	lr, r2, #32
 8016c84:	2000      	movs	r0, #0
 8016c86:	681e      	ldr	r6, [r3, #0]
 8016c88:	468a      	mov	sl, r1
 8016c8a:	4096      	lsls	r6, r2
 8016c8c:	4330      	orrs	r0, r6
 8016c8e:	f84a 0b04 	str.w	r0, [sl], #4
 8016c92:	f853 0b04 	ldr.w	r0, [r3], #4
 8016c96:	459c      	cmp	ip, r3
 8016c98:	fa20 f00e 	lsr.w	r0, r0, lr
 8016c9c:	d814      	bhi.n	8016cc8 <__lshift+0x94>
 8016c9e:	6048      	str	r0, [r1, #4]
 8016ca0:	b108      	cbz	r0, 8016ca6 <__lshift+0x72>
 8016ca2:	f109 0502 	add.w	r5, r9, #2
 8016ca6:	3d01      	subs	r5, #1
 8016ca8:	4638      	mov	r0, r7
 8016caa:	f8c8 5010 	str.w	r5, [r8, #16]
 8016cae:	4621      	mov	r1, r4
 8016cb0:	f7ff fdf4 	bl	801689c <_Bfree>
 8016cb4:	4640      	mov	r0, r8
 8016cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016cba:	3101      	adds	r1, #1
 8016cbc:	005b      	lsls	r3, r3, #1
 8016cbe:	e7c7      	b.n	8016c50 <__lshift+0x1c>
 8016cc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8016cc4:	3301      	adds	r3, #1
 8016cc6:	e7cd      	b.n	8016c64 <__lshift+0x30>
 8016cc8:	4651      	mov	r1, sl
 8016cca:	e7dc      	b.n	8016c86 <__lshift+0x52>
 8016ccc:	3904      	subs	r1, #4
 8016cce:	f853 2b04 	ldr.w	r2, [r3], #4
 8016cd2:	f841 2f04 	str.w	r2, [r1, #4]!
 8016cd6:	459c      	cmp	ip, r3
 8016cd8:	d8f9      	bhi.n	8016cce <__lshift+0x9a>
 8016cda:	e7e4      	b.n	8016ca6 <__lshift+0x72>

08016cdc <__mcmp>:
 8016cdc:	6903      	ldr	r3, [r0, #16]
 8016cde:	690a      	ldr	r2, [r1, #16]
 8016ce0:	1a9b      	subs	r3, r3, r2
 8016ce2:	b530      	push	{r4, r5, lr}
 8016ce4:	d10c      	bne.n	8016d00 <__mcmp+0x24>
 8016ce6:	0092      	lsls	r2, r2, #2
 8016ce8:	3014      	adds	r0, #20
 8016cea:	3114      	adds	r1, #20
 8016cec:	1884      	adds	r4, r0, r2
 8016cee:	4411      	add	r1, r2
 8016cf0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8016cf4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016cf8:	4295      	cmp	r5, r2
 8016cfa:	d003      	beq.n	8016d04 <__mcmp+0x28>
 8016cfc:	d305      	bcc.n	8016d0a <__mcmp+0x2e>
 8016cfe:	2301      	movs	r3, #1
 8016d00:	4618      	mov	r0, r3
 8016d02:	bd30      	pop	{r4, r5, pc}
 8016d04:	42a0      	cmp	r0, r4
 8016d06:	d3f3      	bcc.n	8016cf0 <__mcmp+0x14>
 8016d08:	e7fa      	b.n	8016d00 <__mcmp+0x24>
 8016d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8016d0e:	e7f7      	b.n	8016d00 <__mcmp+0x24>

08016d10 <__mdiff>:
 8016d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016d14:	460d      	mov	r5, r1
 8016d16:	4607      	mov	r7, r0
 8016d18:	4611      	mov	r1, r2
 8016d1a:	4628      	mov	r0, r5
 8016d1c:	4614      	mov	r4, r2
 8016d1e:	f7ff ffdd 	bl	8016cdc <__mcmp>
 8016d22:	1e06      	subs	r6, r0, #0
 8016d24:	d108      	bne.n	8016d38 <__mdiff+0x28>
 8016d26:	4631      	mov	r1, r6
 8016d28:	4638      	mov	r0, r7
 8016d2a:	f7ff fd83 	bl	8016834 <_Balloc>
 8016d2e:	2301      	movs	r3, #1
 8016d30:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8016d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d38:	bfa4      	itt	ge
 8016d3a:	4623      	movge	r3, r4
 8016d3c:	462c      	movge	r4, r5
 8016d3e:	4638      	mov	r0, r7
 8016d40:	6861      	ldr	r1, [r4, #4]
 8016d42:	bfa6      	itte	ge
 8016d44:	461d      	movge	r5, r3
 8016d46:	2600      	movge	r6, #0
 8016d48:	2601      	movlt	r6, #1
 8016d4a:	f7ff fd73 	bl	8016834 <_Balloc>
 8016d4e:	692b      	ldr	r3, [r5, #16]
 8016d50:	60c6      	str	r6, [r0, #12]
 8016d52:	6926      	ldr	r6, [r4, #16]
 8016d54:	f105 0914 	add.w	r9, r5, #20
 8016d58:	f104 0214 	add.w	r2, r4, #20
 8016d5c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8016d60:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8016d64:	f100 0514 	add.w	r5, r0, #20
 8016d68:	f04f 0e00 	mov.w	lr, #0
 8016d6c:	f852 ab04 	ldr.w	sl, [r2], #4
 8016d70:	f859 4b04 	ldr.w	r4, [r9], #4
 8016d74:	fa1e f18a 	uxtah	r1, lr, sl
 8016d78:	b2a3      	uxth	r3, r4
 8016d7a:	1ac9      	subs	r1, r1, r3
 8016d7c:	0c23      	lsrs	r3, r4, #16
 8016d7e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8016d82:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8016d86:	b289      	uxth	r1, r1
 8016d88:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8016d8c:	45c8      	cmp	r8, r9
 8016d8e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8016d92:	4694      	mov	ip, r2
 8016d94:	f845 3b04 	str.w	r3, [r5], #4
 8016d98:	d8e8      	bhi.n	8016d6c <__mdiff+0x5c>
 8016d9a:	45bc      	cmp	ip, r7
 8016d9c:	d304      	bcc.n	8016da8 <__mdiff+0x98>
 8016d9e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8016da2:	b183      	cbz	r3, 8016dc6 <__mdiff+0xb6>
 8016da4:	6106      	str	r6, [r0, #16]
 8016da6:	e7c5      	b.n	8016d34 <__mdiff+0x24>
 8016da8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8016dac:	fa1e f381 	uxtah	r3, lr, r1
 8016db0:	141a      	asrs	r2, r3, #16
 8016db2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8016db6:	b29b      	uxth	r3, r3
 8016db8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016dbc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8016dc0:	f845 3b04 	str.w	r3, [r5], #4
 8016dc4:	e7e9      	b.n	8016d9a <__mdiff+0x8a>
 8016dc6:	3e01      	subs	r6, #1
 8016dc8:	e7e9      	b.n	8016d9e <__mdiff+0x8e>
	...

08016dcc <__ulp>:
 8016dcc:	4b12      	ldr	r3, [pc, #72]	; (8016e18 <__ulp+0x4c>)
 8016dce:	ee10 2a90 	vmov	r2, s1
 8016dd2:	401a      	ands	r2, r3
 8016dd4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8016dd8:	2b00      	cmp	r3, #0
 8016dda:	dd04      	ble.n	8016de6 <__ulp+0x1a>
 8016ddc:	2000      	movs	r0, #0
 8016dde:	4619      	mov	r1, r3
 8016de0:	ec41 0b10 	vmov	d0, r0, r1
 8016de4:	4770      	bx	lr
 8016de6:	425b      	negs	r3, r3
 8016de8:	151b      	asrs	r3, r3, #20
 8016dea:	2b13      	cmp	r3, #19
 8016dec:	f04f 0000 	mov.w	r0, #0
 8016df0:	f04f 0100 	mov.w	r1, #0
 8016df4:	dc04      	bgt.n	8016e00 <__ulp+0x34>
 8016df6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8016dfa:	fa42 f103 	asr.w	r1, r2, r3
 8016dfe:	e7ef      	b.n	8016de0 <__ulp+0x14>
 8016e00:	3b14      	subs	r3, #20
 8016e02:	2b1e      	cmp	r3, #30
 8016e04:	f04f 0201 	mov.w	r2, #1
 8016e08:	bfda      	itte	le
 8016e0a:	f1c3 031f 	rsble	r3, r3, #31
 8016e0e:	fa02 f303 	lslle.w	r3, r2, r3
 8016e12:	4613      	movgt	r3, r2
 8016e14:	4618      	mov	r0, r3
 8016e16:	e7e3      	b.n	8016de0 <__ulp+0x14>
 8016e18:	7ff00000 	.word	0x7ff00000

08016e1c <__b2d>:
 8016e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e1e:	6905      	ldr	r5, [r0, #16]
 8016e20:	f100 0714 	add.w	r7, r0, #20
 8016e24:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8016e28:	1f2e      	subs	r6, r5, #4
 8016e2a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8016e2e:	4620      	mov	r0, r4
 8016e30:	f7ff fdc4 	bl	80169bc <__hi0bits>
 8016e34:	f1c0 0320 	rsb	r3, r0, #32
 8016e38:	280a      	cmp	r0, #10
 8016e3a:	600b      	str	r3, [r1, #0]
 8016e3c:	f8df c074 	ldr.w	ip, [pc, #116]	; 8016eb4 <__b2d+0x98>
 8016e40:	dc14      	bgt.n	8016e6c <__b2d+0x50>
 8016e42:	f1c0 0e0b 	rsb	lr, r0, #11
 8016e46:	fa24 f10e 	lsr.w	r1, r4, lr
 8016e4a:	42b7      	cmp	r7, r6
 8016e4c:	ea41 030c 	orr.w	r3, r1, ip
 8016e50:	bf34      	ite	cc
 8016e52:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016e56:	2100      	movcs	r1, #0
 8016e58:	3015      	adds	r0, #21
 8016e5a:	fa04 f000 	lsl.w	r0, r4, r0
 8016e5e:	fa21 f10e 	lsr.w	r1, r1, lr
 8016e62:	ea40 0201 	orr.w	r2, r0, r1
 8016e66:	ec43 2b10 	vmov	d0, r2, r3
 8016e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016e6c:	42b7      	cmp	r7, r6
 8016e6e:	bf3a      	itte	cc
 8016e70:	f1a5 0608 	subcc.w	r6, r5, #8
 8016e74:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016e78:	2100      	movcs	r1, #0
 8016e7a:	380b      	subs	r0, #11
 8016e7c:	d015      	beq.n	8016eaa <__b2d+0x8e>
 8016e7e:	4084      	lsls	r4, r0
 8016e80:	f1c0 0520 	rsb	r5, r0, #32
 8016e84:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8016e88:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8016e8c:	42be      	cmp	r6, r7
 8016e8e:	fa21 fc05 	lsr.w	ip, r1, r5
 8016e92:	ea44 030c 	orr.w	r3, r4, ip
 8016e96:	bf8c      	ite	hi
 8016e98:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8016e9c:	2400      	movls	r4, #0
 8016e9e:	fa01 f000 	lsl.w	r0, r1, r0
 8016ea2:	40ec      	lsrs	r4, r5
 8016ea4:	ea40 0204 	orr.w	r2, r0, r4
 8016ea8:	e7dd      	b.n	8016e66 <__b2d+0x4a>
 8016eaa:	ea44 030c 	orr.w	r3, r4, ip
 8016eae:	460a      	mov	r2, r1
 8016eb0:	e7d9      	b.n	8016e66 <__b2d+0x4a>
 8016eb2:	bf00      	nop
 8016eb4:	3ff00000 	.word	0x3ff00000

08016eb8 <__d2b>:
 8016eb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016ebc:	460e      	mov	r6, r1
 8016ebe:	2101      	movs	r1, #1
 8016ec0:	ec59 8b10 	vmov	r8, r9, d0
 8016ec4:	4615      	mov	r5, r2
 8016ec6:	f7ff fcb5 	bl	8016834 <_Balloc>
 8016eca:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8016ece:	4607      	mov	r7, r0
 8016ed0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016ed4:	bb34      	cbnz	r4, 8016f24 <__d2b+0x6c>
 8016ed6:	9301      	str	r3, [sp, #4]
 8016ed8:	f1b8 0300 	subs.w	r3, r8, #0
 8016edc:	d027      	beq.n	8016f2e <__d2b+0x76>
 8016ede:	a802      	add	r0, sp, #8
 8016ee0:	f840 3d08 	str.w	r3, [r0, #-8]!
 8016ee4:	f7ff fd89 	bl	80169fa <__lo0bits>
 8016ee8:	9900      	ldr	r1, [sp, #0]
 8016eea:	b1f0      	cbz	r0, 8016f2a <__d2b+0x72>
 8016eec:	9a01      	ldr	r2, [sp, #4]
 8016eee:	f1c0 0320 	rsb	r3, r0, #32
 8016ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8016ef6:	430b      	orrs	r3, r1
 8016ef8:	40c2      	lsrs	r2, r0
 8016efa:	617b      	str	r3, [r7, #20]
 8016efc:	9201      	str	r2, [sp, #4]
 8016efe:	9b01      	ldr	r3, [sp, #4]
 8016f00:	61bb      	str	r3, [r7, #24]
 8016f02:	2b00      	cmp	r3, #0
 8016f04:	bf14      	ite	ne
 8016f06:	2102      	movne	r1, #2
 8016f08:	2101      	moveq	r1, #1
 8016f0a:	6139      	str	r1, [r7, #16]
 8016f0c:	b1c4      	cbz	r4, 8016f40 <__d2b+0x88>
 8016f0e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8016f12:	4404      	add	r4, r0
 8016f14:	6034      	str	r4, [r6, #0]
 8016f16:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016f1a:	6028      	str	r0, [r5, #0]
 8016f1c:	4638      	mov	r0, r7
 8016f1e:	b003      	add	sp, #12
 8016f20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016f24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016f28:	e7d5      	b.n	8016ed6 <__d2b+0x1e>
 8016f2a:	6179      	str	r1, [r7, #20]
 8016f2c:	e7e7      	b.n	8016efe <__d2b+0x46>
 8016f2e:	a801      	add	r0, sp, #4
 8016f30:	f7ff fd63 	bl	80169fa <__lo0bits>
 8016f34:	9b01      	ldr	r3, [sp, #4]
 8016f36:	617b      	str	r3, [r7, #20]
 8016f38:	2101      	movs	r1, #1
 8016f3a:	6139      	str	r1, [r7, #16]
 8016f3c:	3020      	adds	r0, #32
 8016f3e:	e7e5      	b.n	8016f0c <__d2b+0x54>
 8016f40:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8016f44:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016f48:	6030      	str	r0, [r6, #0]
 8016f4a:	6918      	ldr	r0, [r3, #16]
 8016f4c:	f7ff fd36 	bl	80169bc <__hi0bits>
 8016f50:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8016f54:	e7e1      	b.n	8016f1a <__d2b+0x62>

08016f56 <__ratio>:
 8016f56:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f5a:	4688      	mov	r8, r1
 8016f5c:	4669      	mov	r1, sp
 8016f5e:	4681      	mov	r9, r0
 8016f60:	f7ff ff5c 	bl	8016e1c <__b2d>
 8016f64:	a901      	add	r1, sp, #4
 8016f66:	4640      	mov	r0, r8
 8016f68:	ec57 6b10 	vmov	r6, r7, d0
 8016f6c:	f7ff ff56 	bl	8016e1c <__b2d>
 8016f70:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016f74:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016f78:	eba3 0c02 	sub.w	ip, r3, r2
 8016f7c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016f80:	1a9b      	subs	r3, r3, r2
 8016f82:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8016f86:	ec5b ab10 	vmov	sl, fp, d0
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	bfce      	itee	gt
 8016f8e:	463a      	movgt	r2, r7
 8016f90:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016f94:	465a      	movle	r2, fp
 8016f96:	4659      	mov	r1, fp
 8016f98:	463d      	mov	r5, r7
 8016f9a:	bfd4      	ite	le
 8016f9c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8016fa0:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8016fa4:	4630      	mov	r0, r6
 8016fa6:	ee10 2a10 	vmov	r2, s0
 8016faa:	460b      	mov	r3, r1
 8016fac:	4629      	mov	r1, r5
 8016fae:	f7e9 fc65 	bl	800087c <__aeabi_ddiv>
 8016fb2:	ec41 0b10 	vmov	d0, r0, r1
 8016fb6:	b003      	add	sp, #12
 8016fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016fbc <__copybits>:
 8016fbc:	3901      	subs	r1, #1
 8016fbe:	b510      	push	{r4, lr}
 8016fc0:	1149      	asrs	r1, r1, #5
 8016fc2:	6914      	ldr	r4, [r2, #16]
 8016fc4:	3101      	adds	r1, #1
 8016fc6:	f102 0314 	add.w	r3, r2, #20
 8016fca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016fce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016fd2:	42a3      	cmp	r3, r4
 8016fd4:	4602      	mov	r2, r0
 8016fd6:	d303      	bcc.n	8016fe0 <__copybits+0x24>
 8016fd8:	2300      	movs	r3, #0
 8016fda:	428a      	cmp	r2, r1
 8016fdc:	d305      	bcc.n	8016fea <__copybits+0x2e>
 8016fde:	bd10      	pop	{r4, pc}
 8016fe0:	f853 2b04 	ldr.w	r2, [r3], #4
 8016fe4:	f840 2b04 	str.w	r2, [r0], #4
 8016fe8:	e7f3      	b.n	8016fd2 <__copybits+0x16>
 8016fea:	f842 3b04 	str.w	r3, [r2], #4
 8016fee:	e7f4      	b.n	8016fda <__copybits+0x1e>

08016ff0 <__any_on>:
 8016ff0:	f100 0214 	add.w	r2, r0, #20
 8016ff4:	6900      	ldr	r0, [r0, #16]
 8016ff6:	114b      	asrs	r3, r1, #5
 8016ff8:	4298      	cmp	r0, r3
 8016ffa:	b510      	push	{r4, lr}
 8016ffc:	db11      	blt.n	8017022 <__any_on+0x32>
 8016ffe:	dd0a      	ble.n	8017016 <__any_on+0x26>
 8017000:	f011 011f 	ands.w	r1, r1, #31
 8017004:	d007      	beq.n	8017016 <__any_on+0x26>
 8017006:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801700a:	fa24 f001 	lsr.w	r0, r4, r1
 801700e:	fa00 f101 	lsl.w	r1, r0, r1
 8017012:	428c      	cmp	r4, r1
 8017014:	d10b      	bne.n	801702e <__any_on+0x3e>
 8017016:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801701a:	4293      	cmp	r3, r2
 801701c:	d803      	bhi.n	8017026 <__any_on+0x36>
 801701e:	2000      	movs	r0, #0
 8017020:	bd10      	pop	{r4, pc}
 8017022:	4603      	mov	r3, r0
 8017024:	e7f7      	b.n	8017016 <__any_on+0x26>
 8017026:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801702a:	2900      	cmp	r1, #0
 801702c:	d0f5      	beq.n	801701a <__any_on+0x2a>
 801702e:	2001      	movs	r0, #1
 8017030:	e7f6      	b.n	8017020 <__any_on+0x30>

08017032 <_calloc_r>:
 8017032:	b538      	push	{r3, r4, r5, lr}
 8017034:	fb02 f401 	mul.w	r4, r2, r1
 8017038:	4621      	mov	r1, r4
 801703a:	f000 f857 	bl	80170ec <_malloc_r>
 801703e:	4605      	mov	r5, r0
 8017040:	b118      	cbz	r0, 801704a <_calloc_r+0x18>
 8017042:	4622      	mov	r2, r4
 8017044:	2100      	movs	r1, #0
 8017046:	f7fc f906 	bl	8013256 <memset>
 801704a:	4628      	mov	r0, r5
 801704c:	bd38      	pop	{r3, r4, r5, pc}
	...

08017050 <_free_r>:
 8017050:	b538      	push	{r3, r4, r5, lr}
 8017052:	4605      	mov	r5, r0
 8017054:	2900      	cmp	r1, #0
 8017056:	d045      	beq.n	80170e4 <_free_r+0x94>
 8017058:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801705c:	1f0c      	subs	r4, r1, #4
 801705e:	2b00      	cmp	r3, #0
 8017060:	bfb8      	it	lt
 8017062:	18e4      	addlt	r4, r4, r3
 8017064:	f000 ffdb 	bl	801801e <__malloc_lock>
 8017068:	4a1f      	ldr	r2, [pc, #124]	; (80170e8 <_free_r+0x98>)
 801706a:	6813      	ldr	r3, [r2, #0]
 801706c:	4610      	mov	r0, r2
 801706e:	b933      	cbnz	r3, 801707e <_free_r+0x2e>
 8017070:	6063      	str	r3, [r4, #4]
 8017072:	6014      	str	r4, [r2, #0]
 8017074:	4628      	mov	r0, r5
 8017076:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801707a:	f000 bfd1 	b.w	8018020 <__malloc_unlock>
 801707e:	42a3      	cmp	r3, r4
 8017080:	d90c      	bls.n	801709c <_free_r+0x4c>
 8017082:	6821      	ldr	r1, [r4, #0]
 8017084:	1862      	adds	r2, r4, r1
 8017086:	4293      	cmp	r3, r2
 8017088:	bf04      	itt	eq
 801708a:	681a      	ldreq	r2, [r3, #0]
 801708c:	685b      	ldreq	r3, [r3, #4]
 801708e:	6063      	str	r3, [r4, #4]
 8017090:	bf04      	itt	eq
 8017092:	1852      	addeq	r2, r2, r1
 8017094:	6022      	streq	r2, [r4, #0]
 8017096:	6004      	str	r4, [r0, #0]
 8017098:	e7ec      	b.n	8017074 <_free_r+0x24>
 801709a:	4613      	mov	r3, r2
 801709c:	685a      	ldr	r2, [r3, #4]
 801709e:	b10a      	cbz	r2, 80170a4 <_free_r+0x54>
 80170a0:	42a2      	cmp	r2, r4
 80170a2:	d9fa      	bls.n	801709a <_free_r+0x4a>
 80170a4:	6819      	ldr	r1, [r3, #0]
 80170a6:	1858      	adds	r0, r3, r1
 80170a8:	42a0      	cmp	r0, r4
 80170aa:	d10b      	bne.n	80170c4 <_free_r+0x74>
 80170ac:	6820      	ldr	r0, [r4, #0]
 80170ae:	4401      	add	r1, r0
 80170b0:	1858      	adds	r0, r3, r1
 80170b2:	4282      	cmp	r2, r0
 80170b4:	6019      	str	r1, [r3, #0]
 80170b6:	d1dd      	bne.n	8017074 <_free_r+0x24>
 80170b8:	6810      	ldr	r0, [r2, #0]
 80170ba:	6852      	ldr	r2, [r2, #4]
 80170bc:	605a      	str	r2, [r3, #4]
 80170be:	4401      	add	r1, r0
 80170c0:	6019      	str	r1, [r3, #0]
 80170c2:	e7d7      	b.n	8017074 <_free_r+0x24>
 80170c4:	d902      	bls.n	80170cc <_free_r+0x7c>
 80170c6:	230c      	movs	r3, #12
 80170c8:	602b      	str	r3, [r5, #0]
 80170ca:	e7d3      	b.n	8017074 <_free_r+0x24>
 80170cc:	6820      	ldr	r0, [r4, #0]
 80170ce:	1821      	adds	r1, r4, r0
 80170d0:	428a      	cmp	r2, r1
 80170d2:	bf04      	itt	eq
 80170d4:	6811      	ldreq	r1, [r2, #0]
 80170d6:	6852      	ldreq	r2, [r2, #4]
 80170d8:	6062      	str	r2, [r4, #4]
 80170da:	bf04      	itt	eq
 80170dc:	1809      	addeq	r1, r1, r0
 80170de:	6021      	streq	r1, [r4, #0]
 80170e0:	605c      	str	r4, [r3, #4]
 80170e2:	e7c7      	b.n	8017074 <_free_r+0x24>
 80170e4:	bd38      	pop	{r3, r4, r5, pc}
 80170e6:	bf00      	nop
 80170e8:	2003361c 	.word	0x2003361c

080170ec <_malloc_r>:
 80170ec:	b570      	push	{r4, r5, r6, lr}
 80170ee:	1ccd      	adds	r5, r1, #3
 80170f0:	f025 0503 	bic.w	r5, r5, #3
 80170f4:	3508      	adds	r5, #8
 80170f6:	2d0c      	cmp	r5, #12
 80170f8:	bf38      	it	cc
 80170fa:	250c      	movcc	r5, #12
 80170fc:	2d00      	cmp	r5, #0
 80170fe:	4606      	mov	r6, r0
 8017100:	db01      	blt.n	8017106 <_malloc_r+0x1a>
 8017102:	42a9      	cmp	r1, r5
 8017104:	d903      	bls.n	801710e <_malloc_r+0x22>
 8017106:	230c      	movs	r3, #12
 8017108:	6033      	str	r3, [r6, #0]
 801710a:	2000      	movs	r0, #0
 801710c:	bd70      	pop	{r4, r5, r6, pc}
 801710e:	f000 ff86 	bl	801801e <__malloc_lock>
 8017112:	4a21      	ldr	r2, [pc, #132]	; (8017198 <_malloc_r+0xac>)
 8017114:	6814      	ldr	r4, [r2, #0]
 8017116:	4621      	mov	r1, r4
 8017118:	b991      	cbnz	r1, 8017140 <_malloc_r+0x54>
 801711a:	4c20      	ldr	r4, [pc, #128]	; (801719c <_malloc_r+0xb0>)
 801711c:	6823      	ldr	r3, [r4, #0]
 801711e:	b91b      	cbnz	r3, 8017128 <_malloc_r+0x3c>
 8017120:	4630      	mov	r0, r6
 8017122:	f000 fe19 	bl	8017d58 <_sbrk_r>
 8017126:	6020      	str	r0, [r4, #0]
 8017128:	4629      	mov	r1, r5
 801712a:	4630      	mov	r0, r6
 801712c:	f000 fe14 	bl	8017d58 <_sbrk_r>
 8017130:	1c43      	adds	r3, r0, #1
 8017132:	d124      	bne.n	801717e <_malloc_r+0x92>
 8017134:	230c      	movs	r3, #12
 8017136:	6033      	str	r3, [r6, #0]
 8017138:	4630      	mov	r0, r6
 801713a:	f000 ff71 	bl	8018020 <__malloc_unlock>
 801713e:	e7e4      	b.n	801710a <_malloc_r+0x1e>
 8017140:	680b      	ldr	r3, [r1, #0]
 8017142:	1b5b      	subs	r3, r3, r5
 8017144:	d418      	bmi.n	8017178 <_malloc_r+0x8c>
 8017146:	2b0b      	cmp	r3, #11
 8017148:	d90f      	bls.n	801716a <_malloc_r+0x7e>
 801714a:	600b      	str	r3, [r1, #0]
 801714c:	50cd      	str	r5, [r1, r3]
 801714e:	18cc      	adds	r4, r1, r3
 8017150:	4630      	mov	r0, r6
 8017152:	f000 ff65 	bl	8018020 <__malloc_unlock>
 8017156:	f104 000b 	add.w	r0, r4, #11
 801715a:	1d23      	adds	r3, r4, #4
 801715c:	f020 0007 	bic.w	r0, r0, #7
 8017160:	1ac3      	subs	r3, r0, r3
 8017162:	d0d3      	beq.n	801710c <_malloc_r+0x20>
 8017164:	425a      	negs	r2, r3
 8017166:	50e2      	str	r2, [r4, r3]
 8017168:	e7d0      	b.n	801710c <_malloc_r+0x20>
 801716a:	428c      	cmp	r4, r1
 801716c:	684b      	ldr	r3, [r1, #4]
 801716e:	bf16      	itet	ne
 8017170:	6063      	strne	r3, [r4, #4]
 8017172:	6013      	streq	r3, [r2, #0]
 8017174:	460c      	movne	r4, r1
 8017176:	e7eb      	b.n	8017150 <_malloc_r+0x64>
 8017178:	460c      	mov	r4, r1
 801717a:	6849      	ldr	r1, [r1, #4]
 801717c:	e7cc      	b.n	8017118 <_malloc_r+0x2c>
 801717e:	1cc4      	adds	r4, r0, #3
 8017180:	f024 0403 	bic.w	r4, r4, #3
 8017184:	42a0      	cmp	r0, r4
 8017186:	d005      	beq.n	8017194 <_malloc_r+0xa8>
 8017188:	1a21      	subs	r1, r4, r0
 801718a:	4630      	mov	r0, r6
 801718c:	f000 fde4 	bl	8017d58 <_sbrk_r>
 8017190:	3001      	adds	r0, #1
 8017192:	d0cf      	beq.n	8017134 <_malloc_r+0x48>
 8017194:	6025      	str	r5, [r4, #0]
 8017196:	e7db      	b.n	8017150 <_malloc_r+0x64>
 8017198:	2003361c 	.word	0x2003361c
 801719c:	20033620 	.word	0x20033620

080171a0 <__ssputs_r>:
 80171a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80171a4:	688e      	ldr	r6, [r1, #8]
 80171a6:	429e      	cmp	r6, r3
 80171a8:	4682      	mov	sl, r0
 80171aa:	460c      	mov	r4, r1
 80171ac:	4690      	mov	r8, r2
 80171ae:	4699      	mov	r9, r3
 80171b0:	d837      	bhi.n	8017222 <__ssputs_r+0x82>
 80171b2:	898a      	ldrh	r2, [r1, #12]
 80171b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80171b8:	d031      	beq.n	801721e <__ssputs_r+0x7e>
 80171ba:	6825      	ldr	r5, [r4, #0]
 80171bc:	6909      	ldr	r1, [r1, #16]
 80171be:	1a6f      	subs	r7, r5, r1
 80171c0:	6965      	ldr	r5, [r4, #20]
 80171c2:	2302      	movs	r3, #2
 80171c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80171c8:	fb95 f5f3 	sdiv	r5, r5, r3
 80171cc:	f109 0301 	add.w	r3, r9, #1
 80171d0:	443b      	add	r3, r7
 80171d2:	429d      	cmp	r5, r3
 80171d4:	bf38      	it	cc
 80171d6:	461d      	movcc	r5, r3
 80171d8:	0553      	lsls	r3, r2, #21
 80171da:	d530      	bpl.n	801723e <__ssputs_r+0x9e>
 80171dc:	4629      	mov	r1, r5
 80171de:	f7ff ff85 	bl	80170ec <_malloc_r>
 80171e2:	4606      	mov	r6, r0
 80171e4:	b950      	cbnz	r0, 80171fc <__ssputs_r+0x5c>
 80171e6:	230c      	movs	r3, #12
 80171e8:	f8ca 3000 	str.w	r3, [sl]
 80171ec:	89a3      	ldrh	r3, [r4, #12]
 80171ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80171f2:	81a3      	strh	r3, [r4, #12]
 80171f4:	f04f 30ff 	mov.w	r0, #4294967295
 80171f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80171fc:	463a      	mov	r2, r7
 80171fe:	6921      	ldr	r1, [r4, #16]
 8017200:	f7fc f81e 	bl	8013240 <memcpy>
 8017204:	89a3      	ldrh	r3, [r4, #12]
 8017206:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801720a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801720e:	81a3      	strh	r3, [r4, #12]
 8017210:	6126      	str	r6, [r4, #16]
 8017212:	6165      	str	r5, [r4, #20]
 8017214:	443e      	add	r6, r7
 8017216:	1bed      	subs	r5, r5, r7
 8017218:	6026      	str	r6, [r4, #0]
 801721a:	60a5      	str	r5, [r4, #8]
 801721c:	464e      	mov	r6, r9
 801721e:	454e      	cmp	r6, r9
 8017220:	d900      	bls.n	8017224 <__ssputs_r+0x84>
 8017222:	464e      	mov	r6, r9
 8017224:	4632      	mov	r2, r6
 8017226:	4641      	mov	r1, r8
 8017228:	6820      	ldr	r0, [r4, #0]
 801722a:	f000 fedf 	bl	8017fec <memmove>
 801722e:	68a3      	ldr	r3, [r4, #8]
 8017230:	1b9b      	subs	r3, r3, r6
 8017232:	60a3      	str	r3, [r4, #8]
 8017234:	6823      	ldr	r3, [r4, #0]
 8017236:	441e      	add	r6, r3
 8017238:	6026      	str	r6, [r4, #0]
 801723a:	2000      	movs	r0, #0
 801723c:	e7dc      	b.n	80171f8 <__ssputs_r+0x58>
 801723e:	462a      	mov	r2, r5
 8017240:	f000 feef 	bl	8018022 <_realloc_r>
 8017244:	4606      	mov	r6, r0
 8017246:	2800      	cmp	r0, #0
 8017248:	d1e2      	bne.n	8017210 <__ssputs_r+0x70>
 801724a:	6921      	ldr	r1, [r4, #16]
 801724c:	4650      	mov	r0, sl
 801724e:	f7ff feff 	bl	8017050 <_free_r>
 8017252:	e7c8      	b.n	80171e6 <__ssputs_r+0x46>

08017254 <_svfiprintf_r>:
 8017254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017258:	461d      	mov	r5, r3
 801725a:	898b      	ldrh	r3, [r1, #12]
 801725c:	061f      	lsls	r7, r3, #24
 801725e:	b09d      	sub	sp, #116	; 0x74
 8017260:	4680      	mov	r8, r0
 8017262:	460c      	mov	r4, r1
 8017264:	4616      	mov	r6, r2
 8017266:	d50f      	bpl.n	8017288 <_svfiprintf_r+0x34>
 8017268:	690b      	ldr	r3, [r1, #16]
 801726a:	b96b      	cbnz	r3, 8017288 <_svfiprintf_r+0x34>
 801726c:	2140      	movs	r1, #64	; 0x40
 801726e:	f7ff ff3d 	bl	80170ec <_malloc_r>
 8017272:	6020      	str	r0, [r4, #0]
 8017274:	6120      	str	r0, [r4, #16]
 8017276:	b928      	cbnz	r0, 8017284 <_svfiprintf_r+0x30>
 8017278:	230c      	movs	r3, #12
 801727a:	f8c8 3000 	str.w	r3, [r8]
 801727e:	f04f 30ff 	mov.w	r0, #4294967295
 8017282:	e0c8      	b.n	8017416 <_svfiprintf_r+0x1c2>
 8017284:	2340      	movs	r3, #64	; 0x40
 8017286:	6163      	str	r3, [r4, #20]
 8017288:	2300      	movs	r3, #0
 801728a:	9309      	str	r3, [sp, #36]	; 0x24
 801728c:	2320      	movs	r3, #32
 801728e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017292:	2330      	movs	r3, #48	; 0x30
 8017294:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017298:	9503      	str	r5, [sp, #12]
 801729a:	f04f 0b01 	mov.w	fp, #1
 801729e:	4637      	mov	r7, r6
 80172a0:	463d      	mov	r5, r7
 80172a2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80172a6:	b10b      	cbz	r3, 80172ac <_svfiprintf_r+0x58>
 80172a8:	2b25      	cmp	r3, #37	; 0x25
 80172aa:	d13e      	bne.n	801732a <_svfiprintf_r+0xd6>
 80172ac:	ebb7 0a06 	subs.w	sl, r7, r6
 80172b0:	d00b      	beq.n	80172ca <_svfiprintf_r+0x76>
 80172b2:	4653      	mov	r3, sl
 80172b4:	4632      	mov	r2, r6
 80172b6:	4621      	mov	r1, r4
 80172b8:	4640      	mov	r0, r8
 80172ba:	f7ff ff71 	bl	80171a0 <__ssputs_r>
 80172be:	3001      	adds	r0, #1
 80172c0:	f000 80a4 	beq.w	801740c <_svfiprintf_r+0x1b8>
 80172c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80172c6:	4453      	add	r3, sl
 80172c8:	9309      	str	r3, [sp, #36]	; 0x24
 80172ca:	783b      	ldrb	r3, [r7, #0]
 80172cc:	2b00      	cmp	r3, #0
 80172ce:	f000 809d 	beq.w	801740c <_svfiprintf_r+0x1b8>
 80172d2:	2300      	movs	r3, #0
 80172d4:	f04f 32ff 	mov.w	r2, #4294967295
 80172d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80172dc:	9304      	str	r3, [sp, #16]
 80172de:	9307      	str	r3, [sp, #28]
 80172e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80172e4:	931a      	str	r3, [sp, #104]	; 0x68
 80172e6:	462f      	mov	r7, r5
 80172e8:	2205      	movs	r2, #5
 80172ea:	f817 1b01 	ldrb.w	r1, [r7], #1
 80172ee:	4850      	ldr	r0, [pc, #320]	; (8017430 <_svfiprintf_r+0x1dc>)
 80172f0:	f7e8 ff8e 	bl	8000210 <memchr>
 80172f4:	9b04      	ldr	r3, [sp, #16]
 80172f6:	b9d0      	cbnz	r0, 801732e <_svfiprintf_r+0xda>
 80172f8:	06d9      	lsls	r1, r3, #27
 80172fa:	bf44      	itt	mi
 80172fc:	2220      	movmi	r2, #32
 80172fe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017302:	071a      	lsls	r2, r3, #28
 8017304:	bf44      	itt	mi
 8017306:	222b      	movmi	r2, #43	; 0x2b
 8017308:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801730c:	782a      	ldrb	r2, [r5, #0]
 801730e:	2a2a      	cmp	r2, #42	; 0x2a
 8017310:	d015      	beq.n	801733e <_svfiprintf_r+0xea>
 8017312:	9a07      	ldr	r2, [sp, #28]
 8017314:	462f      	mov	r7, r5
 8017316:	2000      	movs	r0, #0
 8017318:	250a      	movs	r5, #10
 801731a:	4639      	mov	r1, r7
 801731c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017320:	3b30      	subs	r3, #48	; 0x30
 8017322:	2b09      	cmp	r3, #9
 8017324:	d94d      	bls.n	80173c2 <_svfiprintf_r+0x16e>
 8017326:	b1b8      	cbz	r0, 8017358 <_svfiprintf_r+0x104>
 8017328:	e00f      	b.n	801734a <_svfiprintf_r+0xf6>
 801732a:	462f      	mov	r7, r5
 801732c:	e7b8      	b.n	80172a0 <_svfiprintf_r+0x4c>
 801732e:	4a40      	ldr	r2, [pc, #256]	; (8017430 <_svfiprintf_r+0x1dc>)
 8017330:	1a80      	subs	r0, r0, r2
 8017332:	fa0b f000 	lsl.w	r0, fp, r0
 8017336:	4318      	orrs	r0, r3
 8017338:	9004      	str	r0, [sp, #16]
 801733a:	463d      	mov	r5, r7
 801733c:	e7d3      	b.n	80172e6 <_svfiprintf_r+0x92>
 801733e:	9a03      	ldr	r2, [sp, #12]
 8017340:	1d11      	adds	r1, r2, #4
 8017342:	6812      	ldr	r2, [r2, #0]
 8017344:	9103      	str	r1, [sp, #12]
 8017346:	2a00      	cmp	r2, #0
 8017348:	db01      	blt.n	801734e <_svfiprintf_r+0xfa>
 801734a:	9207      	str	r2, [sp, #28]
 801734c:	e004      	b.n	8017358 <_svfiprintf_r+0x104>
 801734e:	4252      	negs	r2, r2
 8017350:	f043 0302 	orr.w	r3, r3, #2
 8017354:	9207      	str	r2, [sp, #28]
 8017356:	9304      	str	r3, [sp, #16]
 8017358:	783b      	ldrb	r3, [r7, #0]
 801735a:	2b2e      	cmp	r3, #46	; 0x2e
 801735c:	d10c      	bne.n	8017378 <_svfiprintf_r+0x124>
 801735e:	787b      	ldrb	r3, [r7, #1]
 8017360:	2b2a      	cmp	r3, #42	; 0x2a
 8017362:	d133      	bne.n	80173cc <_svfiprintf_r+0x178>
 8017364:	9b03      	ldr	r3, [sp, #12]
 8017366:	1d1a      	adds	r2, r3, #4
 8017368:	681b      	ldr	r3, [r3, #0]
 801736a:	9203      	str	r2, [sp, #12]
 801736c:	2b00      	cmp	r3, #0
 801736e:	bfb8      	it	lt
 8017370:	f04f 33ff 	movlt.w	r3, #4294967295
 8017374:	3702      	adds	r7, #2
 8017376:	9305      	str	r3, [sp, #20]
 8017378:	4d2e      	ldr	r5, [pc, #184]	; (8017434 <_svfiprintf_r+0x1e0>)
 801737a:	7839      	ldrb	r1, [r7, #0]
 801737c:	2203      	movs	r2, #3
 801737e:	4628      	mov	r0, r5
 8017380:	f7e8 ff46 	bl	8000210 <memchr>
 8017384:	b138      	cbz	r0, 8017396 <_svfiprintf_r+0x142>
 8017386:	2340      	movs	r3, #64	; 0x40
 8017388:	1b40      	subs	r0, r0, r5
 801738a:	fa03 f000 	lsl.w	r0, r3, r0
 801738e:	9b04      	ldr	r3, [sp, #16]
 8017390:	4303      	orrs	r3, r0
 8017392:	3701      	adds	r7, #1
 8017394:	9304      	str	r3, [sp, #16]
 8017396:	7839      	ldrb	r1, [r7, #0]
 8017398:	4827      	ldr	r0, [pc, #156]	; (8017438 <_svfiprintf_r+0x1e4>)
 801739a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801739e:	2206      	movs	r2, #6
 80173a0:	1c7e      	adds	r6, r7, #1
 80173a2:	f7e8 ff35 	bl	8000210 <memchr>
 80173a6:	2800      	cmp	r0, #0
 80173a8:	d038      	beq.n	801741c <_svfiprintf_r+0x1c8>
 80173aa:	4b24      	ldr	r3, [pc, #144]	; (801743c <_svfiprintf_r+0x1e8>)
 80173ac:	bb13      	cbnz	r3, 80173f4 <_svfiprintf_r+0x1a0>
 80173ae:	9b03      	ldr	r3, [sp, #12]
 80173b0:	3307      	adds	r3, #7
 80173b2:	f023 0307 	bic.w	r3, r3, #7
 80173b6:	3308      	adds	r3, #8
 80173b8:	9303      	str	r3, [sp, #12]
 80173ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80173bc:	444b      	add	r3, r9
 80173be:	9309      	str	r3, [sp, #36]	; 0x24
 80173c0:	e76d      	b.n	801729e <_svfiprintf_r+0x4a>
 80173c2:	fb05 3202 	mla	r2, r5, r2, r3
 80173c6:	2001      	movs	r0, #1
 80173c8:	460f      	mov	r7, r1
 80173ca:	e7a6      	b.n	801731a <_svfiprintf_r+0xc6>
 80173cc:	2300      	movs	r3, #0
 80173ce:	3701      	adds	r7, #1
 80173d0:	9305      	str	r3, [sp, #20]
 80173d2:	4619      	mov	r1, r3
 80173d4:	250a      	movs	r5, #10
 80173d6:	4638      	mov	r0, r7
 80173d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80173dc:	3a30      	subs	r2, #48	; 0x30
 80173de:	2a09      	cmp	r2, #9
 80173e0:	d903      	bls.n	80173ea <_svfiprintf_r+0x196>
 80173e2:	2b00      	cmp	r3, #0
 80173e4:	d0c8      	beq.n	8017378 <_svfiprintf_r+0x124>
 80173e6:	9105      	str	r1, [sp, #20]
 80173e8:	e7c6      	b.n	8017378 <_svfiprintf_r+0x124>
 80173ea:	fb05 2101 	mla	r1, r5, r1, r2
 80173ee:	2301      	movs	r3, #1
 80173f0:	4607      	mov	r7, r0
 80173f2:	e7f0      	b.n	80173d6 <_svfiprintf_r+0x182>
 80173f4:	ab03      	add	r3, sp, #12
 80173f6:	9300      	str	r3, [sp, #0]
 80173f8:	4622      	mov	r2, r4
 80173fa:	4b11      	ldr	r3, [pc, #68]	; (8017440 <_svfiprintf_r+0x1ec>)
 80173fc:	a904      	add	r1, sp, #16
 80173fe:	4640      	mov	r0, r8
 8017400:	f7fb ffc6 	bl	8013390 <_printf_float>
 8017404:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017408:	4681      	mov	r9, r0
 801740a:	d1d6      	bne.n	80173ba <_svfiprintf_r+0x166>
 801740c:	89a3      	ldrh	r3, [r4, #12]
 801740e:	065b      	lsls	r3, r3, #25
 8017410:	f53f af35 	bmi.w	801727e <_svfiprintf_r+0x2a>
 8017414:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017416:	b01d      	add	sp, #116	; 0x74
 8017418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801741c:	ab03      	add	r3, sp, #12
 801741e:	9300      	str	r3, [sp, #0]
 8017420:	4622      	mov	r2, r4
 8017422:	4b07      	ldr	r3, [pc, #28]	; (8017440 <_svfiprintf_r+0x1ec>)
 8017424:	a904      	add	r1, sp, #16
 8017426:	4640      	mov	r0, r8
 8017428:	f7fc fa68 	bl	80138fc <_printf_i>
 801742c:	e7ea      	b.n	8017404 <_svfiprintf_r+0x1b0>
 801742e:	bf00      	nop
 8017430:	08018a74 	.word	0x08018a74
 8017434:	08018a7a 	.word	0x08018a7a
 8017438:	08018a7e 	.word	0x08018a7e
 801743c:	08013391 	.word	0x08013391
 8017440:	080171a1 	.word	0x080171a1

08017444 <_sungetc_r>:
 8017444:	b538      	push	{r3, r4, r5, lr}
 8017446:	1c4b      	adds	r3, r1, #1
 8017448:	4614      	mov	r4, r2
 801744a:	d103      	bne.n	8017454 <_sungetc_r+0x10>
 801744c:	f04f 35ff 	mov.w	r5, #4294967295
 8017450:	4628      	mov	r0, r5
 8017452:	bd38      	pop	{r3, r4, r5, pc}
 8017454:	8993      	ldrh	r3, [r2, #12]
 8017456:	f023 0320 	bic.w	r3, r3, #32
 801745a:	8193      	strh	r3, [r2, #12]
 801745c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801745e:	6852      	ldr	r2, [r2, #4]
 8017460:	b2cd      	uxtb	r5, r1
 8017462:	b18b      	cbz	r3, 8017488 <_sungetc_r+0x44>
 8017464:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017466:	4293      	cmp	r3, r2
 8017468:	dd08      	ble.n	801747c <_sungetc_r+0x38>
 801746a:	6823      	ldr	r3, [r4, #0]
 801746c:	1e5a      	subs	r2, r3, #1
 801746e:	6022      	str	r2, [r4, #0]
 8017470:	f803 5c01 	strb.w	r5, [r3, #-1]
 8017474:	6863      	ldr	r3, [r4, #4]
 8017476:	3301      	adds	r3, #1
 8017478:	6063      	str	r3, [r4, #4]
 801747a:	e7e9      	b.n	8017450 <_sungetc_r+0xc>
 801747c:	4621      	mov	r1, r4
 801747e:	f000 fd4b 	bl	8017f18 <__submore>
 8017482:	2800      	cmp	r0, #0
 8017484:	d0f1      	beq.n	801746a <_sungetc_r+0x26>
 8017486:	e7e1      	b.n	801744c <_sungetc_r+0x8>
 8017488:	6921      	ldr	r1, [r4, #16]
 801748a:	6823      	ldr	r3, [r4, #0]
 801748c:	b151      	cbz	r1, 80174a4 <_sungetc_r+0x60>
 801748e:	4299      	cmp	r1, r3
 8017490:	d208      	bcs.n	80174a4 <_sungetc_r+0x60>
 8017492:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8017496:	42a9      	cmp	r1, r5
 8017498:	d104      	bne.n	80174a4 <_sungetc_r+0x60>
 801749a:	3b01      	subs	r3, #1
 801749c:	3201      	adds	r2, #1
 801749e:	6023      	str	r3, [r4, #0]
 80174a0:	6062      	str	r2, [r4, #4]
 80174a2:	e7d5      	b.n	8017450 <_sungetc_r+0xc>
 80174a4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80174a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80174ac:	6363      	str	r3, [r4, #52]	; 0x34
 80174ae:	2303      	movs	r3, #3
 80174b0:	63a3      	str	r3, [r4, #56]	; 0x38
 80174b2:	4623      	mov	r3, r4
 80174b4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80174b8:	6023      	str	r3, [r4, #0]
 80174ba:	2301      	movs	r3, #1
 80174bc:	e7dc      	b.n	8017478 <_sungetc_r+0x34>

080174be <__ssrefill_r>:
 80174be:	b510      	push	{r4, lr}
 80174c0:	460c      	mov	r4, r1
 80174c2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80174c4:	b169      	cbz	r1, 80174e2 <__ssrefill_r+0x24>
 80174c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80174ca:	4299      	cmp	r1, r3
 80174cc:	d001      	beq.n	80174d2 <__ssrefill_r+0x14>
 80174ce:	f7ff fdbf 	bl	8017050 <_free_r>
 80174d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80174d4:	6063      	str	r3, [r4, #4]
 80174d6:	2000      	movs	r0, #0
 80174d8:	6360      	str	r0, [r4, #52]	; 0x34
 80174da:	b113      	cbz	r3, 80174e2 <__ssrefill_r+0x24>
 80174dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80174de:	6023      	str	r3, [r4, #0]
 80174e0:	bd10      	pop	{r4, pc}
 80174e2:	6923      	ldr	r3, [r4, #16]
 80174e4:	6023      	str	r3, [r4, #0]
 80174e6:	2300      	movs	r3, #0
 80174e8:	6063      	str	r3, [r4, #4]
 80174ea:	89a3      	ldrh	r3, [r4, #12]
 80174ec:	f043 0320 	orr.w	r3, r3, #32
 80174f0:	81a3      	strh	r3, [r4, #12]
 80174f2:	f04f 30ff 	mov.w	r0, #4294967295
 80174f6:	e7f3      	b.n	80174e0 <__ssrefill_r+0x22>

080174f8 <__ssvfiscanf_r>:
 80174f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174fc:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8017500:	460c      	mov	r4, r1
 8017502:	2100      	movs	r1, #0
 8017504:	9144      	str	r1, [sp, #272]	; 0x110
 8017506:	9145      	str	r1, [sp, #276]	; 0x114
 8017508:	499f      	ldr	r1, [pc, #636]	; (8017788 <__ssvfiscanf_r+0x290>)
 801750a:	91a0      	str	r1, [sp, #640]	; 0x280
 801750c:	f10d 0804 	add.w	r8, sp, #4
 8017510:	499e      	ldr	r1, [pc, #632]	; (801778c <__ssvfiscanf_r+0x294>)
 8017512:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8017790 <__ssvfiscanf_r+0x298>
 8017516:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801751a:	4606      	mov	r6, r0
 801751c:	4692      	mov	sl, r2
 801751e:	91a1      	str	r1, [sp, #644]	; 0x284
 8017520:	9300      	str	r3, [sp, #0]
 8017522:	270a      	movs	r7, #10
 8017524:	f89a 3000 	ldrb.w	r3, [sl]
 8017528:	2b00      	cmp	r3, #0
 801752a:	f000 812a 	beq.w	8017782 <__ssvfiscanf_r+0x28a>
 801752e:	4655      	mov	r5, sl
 8017530:	f7ff f8d2 	bl	80166d8 <__locale_ctype_ptr>
 8017534:	f815 bb01 	ldrb.w	fp, [r5], #1
 8017538:	4458      	add	r0, fp
 801753a:	7843      	ldrb	r3, [r0, #1]
 801753c:	f013 0308 	ands.w	r3, r3, #8
 8017540:	d01c      	beq.n	801757c <__ssvfiscanf_r+0x84>
 8017542:	6863      	ldr	r3, [r4, #4]
 8017544:	2b00      	cmp	r3, #0
 8017546:	dd12      	ble.n	801756e <__ssvfiscanf_r+0x76>
 8017548:	f7ff f8c6 	bl	80166d8 <__locale_ctype_ptr>
 801754c:	6823      	ldr	r3, [r4, #0]
 801754e:	781a      	ldrb	r2, [r3, #0]
 8017550:	4410      	add	r0, r2
 8017552:	7842      	ldrb	r2, [r0, #1]
 8017554:	0712      	lsls	r2, r2, #28
 8017556:	d401      	bmi.n	801755c <__ssvfiscanf_r+0x64>
 8017558:	46aa      	mov	sl, r5
 801755a:	e7e3      	b.n	8017524 <__ssvfiscanf_r+0x2c>
 801755c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801755e:	3201      	adds	r2, #1
 8017560:	9245      	str	r2, [sp, #276]	; 0x114
 8017562:	6862      	ldr	r2, [r4, #4]
 8017564:	3301      	adds	r3, #1
 8017566:	3a01      	subs	r2, #1
 8017568:	6062      	str	r2, [r4, #4]
 801756a:	6023      	str	r3, [r4, #0]
 801756c:	e7e9      	b.n	8017542 <__ssvfiscanf_r+0x4a>
 801756e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017570:	4621      	mov	r1, r4
 8017572:	4630      	mov	r0, r6
 8017574:	4798      	blx	r3
 8017576:	2800      	cmp	r0, #0
 8017578:	d0e6      	beq.n	8017548 <__ssvfiscanf_r+0x50>
 801757a:	e7ed      	b.n	8017558 <__ssvfiscanf_r+0x60>
 801757c:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8017580:	f040 8082 	bne.w	8017688 <__ssvfiscanf_r+0x190>
 8017584:	9343      	str	r3, [sp, #268]	; 0x10c
 8017586:	9341      	str	r3, [sp, #260]	; 0x104
 8017588:	f89a 3001 	ldrb.w	r3, [sl, #1]
 801758c:	2b2a      	cmp	r3, #42	; 0x2a
 801758e:	d103      	bne.n	8017598 <__ssvfiscanf_r+0xa0>
 8017590:	2310      	movs	r3, #16
 8017592:	9341      	str	r3, [sp, #260]	; 0x104
 8017594:	f10a 0502 	add.w	r5, sl, #2
 8017598:	46aa      	mov	sl, r5
 801759a:	f815 1b01 	ldrb.w	r1, [r5], #1
 801759e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80175a2:	2a09      	cmp	r2, #9
 80175a4:	d922      	bls.n	80175ec <__ssvfiscanf_r+0xf4>
 80175a6:	2203      	movs	r2, #3
 80175a8:	4879      	ldr	r0, [pc, #484]	; (8017790 <__ssvfiscanf_r+0x298>)
 80175aa:	f7e8 fe31 	bl	8000210 <memchr>
 80175ae:	b138      	cbz	r0, 80175c0 <__ssvfiscanf_r+0xc8>
 80175b0:	eba0 0309 	sub.w	r3, r0, r9
 80175b4:	2001      	movs	r0, #1
 80175b6:	4098      	lsls	r0, r3
 80175b8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80175ba:	4318      	orrs	r0, r3
 80175bc:	9041      	str	r0, [sp, #260]	; 0x104
 80175be:	46aa      	mov	sl, r5
 80175c0:	f89a 3000 	ldrb.w	r3, [sl]
 80175c4:	2b67      	cmp	r3, #103	; 0x67
 80175c6:	f10a 0501 	add.w	r5, sl, #1
 80175ca:	d82b      	bhi.n	8017624 <__ssvfiscanf_r+0x12c>
 80175cc:	2b65      	cmp	r3, #101	; 0x65
 80175ce:	f080 809f 	bcs.w	8017710 <__ssvfiscanf_r+0x218>
 80175d2:	2b47      	cmp	r3, #71	; 0x47
 80175d4:	d810      	bhi.n	80175f8 <__ssvfiscanf_r+0x100>
 80175d6:	2b45      	cmp	r3, #69	; 0x45
 80175d8:	f080 809a 	bcs.w	8017710 <__ssvfiscanf_r+0x218>
 80175dc:	2b00      	cmp	r3, #0
 80175de:	d06c      	beq.n	80176ba <__ssvfiscanf_r+0x1c2>
 80175e0:	2b25      	cmp	r3, #37	; 0x25
 80175e2:	d051      	beq.n	8017688 <__ssvfiscanf_r+0x190>
 80175e4:	2303      	movs	r3, #3
 80175e6:	9347      	str	r3, [sp, #284]	; 0x11c
 80175e8:	9742      	str	r7, [sp, #264]	; 0x108
 80175ea:	e027      	b.n	801763c <__ssvfiscanf_r+0x144>
 80175ec:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80175ee:	fb07 1303 	mla	r3, r7, r3, r1
 80175f2:	3b30      	subs	r3, #48	; 0x30
 80175f4:	9343      	str	r3, [sp, #268]	; 0x10c
 80175f6:	e7cf      	b.n	8017598 <__ssvfiscanf_r+0xa0>
 80175f8:	2b5b      	cmp	r3, #91	; 0x5b
 80175fa:	d06a      	beq.n	80176d2 <__ssvfiscanf_r+0x1da>
 80175fc:	d80c      	bhi.n	8017618 <__ssvfiscanf_r+0x120>
 80175fe:	2b58      	cmp	r3, #88	; 0x58
 8017600:	d1f0      	bne.n	80175e4 <__ssvfiscanf_r+0xec>
 8017602:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017604:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017608:	9241      	str	r2, [sp, #260]	; 0x104
 801760a:	2210      	movs	r2, #16
 801760c:	9242      	str	r2, [sp, #264]	; 0x108
 801760e:	2b6e      	cmp	r3, #110	; 0x6e
 8017610:	bf8c      	ite	hi
 8017612:	2304      	movhi	r3, #4
 8017614:	2303      	movls	r3, #3
 8017616:	e010      	b.n	801763a <__ssvfiscanf_r+0x142>
 8017618:	2b63      	cmp	r3, #99	; 0x63
 801761a:	d065      	beq.n	80176e8 <__ssvfiscanf_r+0x1f0>
 801761c:	2b64      	cmp	r3, #100	; 0x64
 801761e:	d1e1      	bne.n	80175e4 <__ssvfiscanf_r+0xec>
 8017620:	9742      	str	r7, [sp, #264]	; 0x108
 8017622:	e7f4      	b.n	801760e <__ssvfiscanf_r+0x116>
 8017624:	2b70      	cmp	r3, #112	; 0x70
 8017626:	d04b      	beq.n	80176c0 <__ssvfiscanf_r+0x1c8>
 8017628:	d826      	bhi.n	8017678 <__ssvfiscanf_r+0x180>
 801762a:	2b6e      	cmp	r3, #110	; 0x6e
 801762c:	d062      	beq.n	80176f4 <__ssvfiscanf_r+0x1fc>
 801762e:	d84c      	bhi.n	80176ca <__ssvfiscanf_r+0x1d2>
 8017630:	2b69      	cmp	r3, #105	; 0x69
 8017632:	d1d7      	bne.n	80175e4 <__ssvfiscanf_r+0xec>
 8017634:	2300      	movs	r3, #0
 8017636:	9342      	str	r3, [sp, #264]	; 0x108
 8017638:	2303      	movs	r3, #3
 801763a:	9347      	str	r3, [sp, #284]	; 0x11c
 801763c:	6863      	ldr	r3, [r4, #4]
 801763e:	2b00      	cmp	r3, #0
 8017640:	dd68      	ble.n	8017714 <__ssvfiscanf_r+0x21c>
 8017642:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017644:	0659      	lsls	r1, r3, #25
 8017646:	d407      	bmi.n	8017658 <__ssvfiscanf_r+0x160>
 8017648:	f7ff f846 	bl	80166d8 <__locale_ctype_ptr>
 801764c:	6823      	ldr	r3, [r4, #0]
 801764e:	781a      	ldrb	r2, [r3, #0]
 8017650:	4410      	add	r0, r2
 8017652:	7842      	ldrb	r2, [r0, #1]
 8017654:	0712      	lsls	r2, r2, #28
 8017656:	d464      	bmi.n	8017722 <__ssvfiscanf_r+0x22a>
 8017658:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801765a:	2b02      	cmp	r3, #2
 801765c:	dc73      	bgt.n	8017746 <__ssvfiscanf_r+0x24e>
 801765e:	466b      	mov	r3, sp
 8017660:	4622      	mov	r2, r4
 8017662:	a941      	add	r1, sp, #260	; 0x104
 8017664:	4630      	mov	r0, r6
 8017666:	f000 f9d7 	bl	8017a18 <_scanf_chars>
 801766a:	2801      	cmp	r0, #1
 801766c:	f000 8089 	beq.w	8017782 <__ssvfiscanf_r+0x28a>
 8017670:	2802      	cmp	r0, #2
 8017672:	f47f af71 	bne.w	8017558 <__ssvfiscanf_r+0x60>
 8017676:	e01d      	b.n	80176b4 <__ssvfiscanf_r+0x1bc>
 8017678:	2b75      	cmp	r3, #117	; 0x75
 801767a:	d0d1      	beq.n	8017620 <__ssvfiscanf_r+0x128>
 801767c:	2b78      	cmp	r3, #120	; 0x78
 801767e:	d0c0      	beq.n	8017602 <__ssvfiscanf_r+0x10a>
 8017680:	2b73      	cmp	r3, #115	; 0x73
 8017682:	d1af      	bne.n	80175e4 <__ssvfiscanf_r+0xec>
 8017684:	2302      	movs	r3, #2
 8017686:	e7d8      	b.n	801763a <__ssvfiscanf_r+0x142>
 8017688:	6863      	ldr	r3, [r4, #4]
 801768a:	2b00      	cmp	r3, #0
 801768c:	dd0c      	ble.n	80176a8 <__ssvfiscanf_r+0x1b0>
 801768e:	6823      	ldr	r3, [r4, #0]
 8017690:	781a      	ldrb	r2, [r3, #0]
 8017692:	455a      	cmp	r2, fp
 8017694:	d175      	bne.n	8017782 <__ssvfiscanf_r+0x28a>
 8017696:	3301      	adds	r3, #1
 8017698:	6862      	ldr	r2, [r4, #4]
 801769a:	6023      	str	r3, [r4, #0]
 801769c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801769e:	3a01      	subs	r2, #1
 80176a0:	3301      	adds	r3, #1
 80176a2:	6062      	str	r2, [r4, #4]
 80176a4:	9345      	str	r3, [sp, #276]	; 0x114
 80176a6:	e757      	b.n	8017558 <__ssvfiscanf_r+0x60>
 80176a8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80176aa:	4621      	mov	r1, r4
 80176ac:	4630      	mov	r0, r6
 80176ae:	4798      	blx	r3
 80176b0:	2800      	cmp	r0, #0
 80176b2:	d0ec      	beq.n	801768e <__ssvfiscanf_r+0x196>
 80176b4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80176b6:	2800      	cmp	r0, #0
 80176b8:	d159      	bne.n	801776e <__ssvfiscanf_r+0x276>
 80176ba:	f04f 30ff 	mov.w	r0, #4294967295
 80176be:	e05c      	b.n	801777a <__ssvfiscanf_r+0x282>
 80176c0:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80176c2:	f042 0220 	orr.w	r2, r2, #32
 80176c6:	9241      	str	r2, [sp, #260]	; 0x104
 80176c8:	e79b      	b.n	8017602 <__ssvfiscanf_r+0x10a>
 80176ca:	2308      	movs	r3, #8
 80176cc:	9342      	str	r3, [sp, #264]	; 0x108
 80176ce:	2304      	movs	r3, #4
 80176d0:	e7b3      	b.n	801763a <__ssvfiscanf_r+0x142>
 80176d2:	4629      	mov	r1, r5
 80176d4:	4640      	mov	r0, r8
 80176d6:	f000 fb4f 	bl	8017d78 <__sccl>
 80176da:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80176dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80176e0:	9341      	str	r3, [sp, #260]	; 0x104
 80176e2:	4605      	mov	r5, r0
 80176e4:	2301      	movs	r3, #1
 80176e6:	e7a8      	b.n	801763a <__ssvfiscanf_r+0x142>
 80176e8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80176ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80176ee:	9341      	str	r3, [sp, #260]	; 0x104
 80176f0:	2300      	movs	r3, #0
 80176f2:	e7a2      	b.n	801763a <__ssvfiscanf_r+0x142>
 80176f4:	9841      	ldr	r0, [sp, #260]	; 0x104
 80176f6:	06c3      	lsls	r3, r0, #27
 80176f8:	f53f af2e 	bmi.w	8017558 <__ssvfiscanf_r+0x60>
 80176fc:	9b00      	ldr	r3, [sp, #0]
 80176fe:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017700:	1d19      	adds	r1, r3, #4
 8017702:	9100      	str	r1, [sp, #0]
 8017704:	681b      	ldr	r3, [r3, #0]
 8017706:	07c0      	lsls	r0, r0, #31
 8017708:	bf4c      	ite	mi
 801770a:	801a      	strhmi	r2, [r3, #0]
 801770c:	601a      	strpl	r2, [r3, #0]
 801770e:	e723      	b.n	8017558 <__ssvfiscanf_r+0x60>
 8017710:	2305      	movs	r3, #5
 8017712:	e792      	b.n	801763a <__ssvfiscanf_r+0x142>
 8017714:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017716:	4621      	mov	r1, r4
 8017718:	4630      	mov	r0, r6
 801771a:	4798      	blx	r3
 801771c:	2800      	cmp	r0, #0
 801771e:	d090      	beq.n	8017642 <__ssvfiscanf_r+0x14a>
 8017720:	e7c8      	b.n	80176b4 <__ssvfiscanf_r+0x1bc>
 8017722:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017724:	3201      	adds	r2, #1
 8017726:	9245      	str	r2, [sp, #276]	; 0x114
 8017728:	6862      	ldr	r2, [r4, #4]
 801772a:	3a01      	subs	r2, #1
 801772c:	2a00      	cmp	r2, #0
 801772e:	6062      	str	r2, [r4, #4]
 8017730:	dd02      	ble.n	8017738 <__ssvfiscanf_r+0x240>
 8017732:	3301      	adds	r3, #1
 8017734:	6023      	str	r3, [r4, #0]
 8017736:	e787      	b.n	8017648 <__ssvfiscanf_r+0x150>
 8017738:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801773a:	4621      	mov	r1, r4
 801773c:	4630      	mov	r0, r6
 801773e:	4798      	blx	r3
 8017740:	2800      	cmp	r0, #0
 8017742:	d081      	beq.n	8017648 <__ssvfiscanf_r+0x150>
 8017744:	e7b6      	b.n	80176b4 <__ssvfiscanf_r+0x1bc>
 8017746:	2b04      	cmp	r3, #4
 8017748:	dc06      	bgt.n	8017758 <__ssvfiscanf_r+0x260>
 801774a:	466b      	mov	r3, sp
 801774c:	4622      	mov	r2, r4
 801774e:	a941      	add	r1, sp, #260	; 0x104
 8017750:	4630      	mov	r0, r6
 8017752:	f000 f9c5 	bl	8017ae0 <_scanf_i>
 8017756:	e788      	b.n	801766a <__ssvfiscanf_r+0x172>
 8017758:	4b0e      	ldr	r3, [pc, #56]	; (8017794 <__ssvfiscanf_r+0x29c>)
 801775a:	2b00      	cmp	r3, #0
 801775c:	f43f aefc 	beq.w	8017558 <__ssvfiscanf_r+0x60>
 8017760:	466b      	mov	r3, sp
 8017762:	4622      	mov	r2, r4
 8017764:	a941      	add	r1, sp, #260	; 0x104
 8017766:	4630      	mov	r0, r6
 8017768:	f7fc f9da 	bl	8013b20 <_scanf_float>
 801776c:	e77d      	b.n	801766a <__ssvfiscanf_r+0x172>
 801776e:	89a3      	ldrh	r3, [r4, #12]
 8017770:	f013 0f40 	tst.w	r3, #64	; 0x40
 8017774:	bf18      	it	ne
 8017776:	f04f 30ff 	movne.w	r0, #4294967295
 801777a:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801777e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017782:	9844      	ldr	r0, [sp, #272]	; 0x110
 8017784:	e7f9      	b.n	801777a <__ssvfiscanf_r+0x282>
 8017786:	bf00      	nop
 8017788:	08017445 	.word	0x08017445
 801778c:	080174bf 	.word	0x080174bf
 8017790:	08018a7a 	.word	0x08018a7a
 8017794:	08013b21 	.word	0x08013b21

08017798 <__sfputc_r>:
 8017798:	6893      	ldr	r3, [r2, #8]
 801779a:	3b01      	subs	r3, #1
 801779c:	2b00      	cmp	r3, #0
 801779e:	b410      	push	{r4}
 80177a0:	6093      	str	r3, [r2, #8]
 80177a2:	da08      	bge.n	80177b6 <__sfputc_r+0x1e>
 80177a4:	6994      	ldr	r4, [r2, #24]
 80177a6:	42a3      	cmp	r3, r4
 80177a8:	db01      	blt.n	80177ae <__sfputc_r+0x16>
 80177aa:	290a      	cmp	r1, #10
 80177ac:	d103      	bne.n	80177b6 <__sfputc_r+0x1e>
 80177ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80177b2:	f7fd bbc7 	b.w	8014f44 <__swbuf_r>
 80177b6:	6813      	ldr	r3, [r2, #0]
 80177b8:	1c58      	adds	r0, r3, #1
 80177ba:	6010      	str	r0, [r2, #0]
 80177bc:	7019      	strb	r1, [r3, #0]
 80177be:	4608      	mov	r0, r1
 80177c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80177c4:	4770      	bx	lr

080177c6 <__sfputs_r>:
 80177c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80177c8:	4606      	mov	r6, r0
 80177ca:	460f      	mov	r7, r1
 80177cc:	4614      	mov	r4, r2
 80177ce:	18d5      	adds	r5, r2, r3
 80177d0:	42ac      	cmp	r4, r5
 80177d2:	d101      	bne.n	80177d8 <__sfputs_r+0x12>
 80177d4:	2000      	movs	r0, #0
 80177d6:	e007      	b.n	80177e8 <__sfputs_r+0x22>
 80177d8:	463a      	mov	r2, r7
 80177da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80177de:	4630      	mov	r0, r6
 80177e0:	f7ff ffda 	bl	8017798 <__sfputc_r>
 80177e4:	1c43      	adds	r3, r0, #1
 80177e6:	d1f3      	bne.n	80177d0 <__sfputs_r+0xa>
 80177e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080177ec <_vfiprintf_r>:
 80177ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177f0:	460c      	mov	r4, r1
 80177f2:	b09d      	sub	sp, #116	; 0x74
 80177f4:	4617      	mov	r7, r2
 80177f6:	461d      	mov	r5, r3
 80177f8:	4606      	mov	r6, r0
 80177fa:	b118      	cbz	r0, 8017804 <_vfiprintf_r+0x18>
 80177fc:	6983      	ldr	r3, [r0, #24]
 80177fe:	b90b      	cbnz	r3, 8017804 <_vfiprintf_r+0x18>
 8017800:	f7fe fbb6 	bl	8015f70 <__sinit>
 8017804:	4b7c      	ldr	r3, [pc, #496]	; (80179f8 <_vfiprintf_r+0x20c>)
 8017806:	429c      	cmp	r4, r3
 8017808:	d158      	bne.n	80178bc <_vfiprintf_r+0xd0>
 801780a:	6874      	ldr	r4, [r6, #4]
 801780c:	89a3      	ldrh	r3, [r4, #12]
 801780e:	0718      	lsls	r0, r3, #28
 8017810:	d55e      	bpl.n	80178d0 <_vfiprintf_r+0xe4>
 8017812:	6923      	ldr	r3, [r4, #16]
 8017814:	2b00      	cmp	r3, #0
 8017816:	d05b      	beq.n	80178d0 <_vfiprintf_r+0xe4>
 8017818:	2300      	movs	r3, #0
 801781a:	9309      	str	r3, [sp, #36]	; 0x24
 801781c:	2320      	movs	r3, #32
 801781e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017822:	2330      	movs	r3, #48	; 0x30
 8017824:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017828:	9503      	str	r5, [sp, #12]
 801782a:	f04f 0b01 	mov.w	fp, #1
 801782e:	46b8      	mov	r8, r7
 8017830:	4645      	mov	r5, r8
 8017832:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017836:	b10b      	cbz	r3, 801783c <_vfiprintf_r+0x50>
 8017838:	2b25      	cmp	r3, #37	; 0x25
 801783a:	d154      	bne.n	80178e6 <_vfiprintf_r+0xfa>
 801783c:	ebb8 0a07 	subs.w	sl, r8, r7
 8017840:	d00b      	beq.n	801785a <_vfiprintf_r+0x6e>
 8017842:	4653      	mov	r3, sl
 8017844:	463a      	mov	r2, r7
 8017846:	4621      	mov	r1, r4
 8017848:	4630      	mov	r0, r6
 801784a:	f7ff ffbc 	bl	80177c6 <__sfputs_r>
 801784e:	3001      	adds	r0, #1
 8017850:	f000 80c2 	beq.w	80179d8 <_vfiprintf_r+0x1ec>
 8017854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017856:	4453      	add	r3, sl
 8017858:	9309      	str	r3, [sp, #36]	; 0x24
 801785a:	f898 3000 	ldrb.w	r3, [r8]
 801785e:	2b00      	cmp	r3, #0
 8017860:	f000 80ba 	beq.w	80179d8 <_vfiprintf_r+0x1ec>
 8017864:	2300      	movs	r3, #0
 8017866:	f04f 32ff 	mov.w	r2, #4294967295
 801786a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801786e:	9304      	str	r3, [sp, #16]
 8017870:	9307      	str	r3, [sp, #28]
 8017872:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017876:	931a      	str	r3, [sp, #104]	; 0x68
 8017878:	46a8      	mov	r8, r5
 801787a:	2205      	movs	r2, #5
 801787c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8017880:	485e      	ldr	r0, [pc, #376]	; (80179fc <_vfiprintf_r+0x210>)
 8017882:	f7e8 fcc5 	bl	8000210 <memchr>
 8017886:	9b04      	ldr	r3, [sp, #16]
 8017888:	bb78      	cbnz	r0, 80178ea <_vfiprintf_r+0xfe>
 801788a:	06d9      	lsls	r1, r3, #27
 801788c:	bf44      	itt	mi
 801788e:	2220      	movmi	r2, #32
 8017890:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017894:	071a      	lsls	r2, r3, #28
 8017896:	bf44      	itt	mi
 8017898:	222b      	movmi	r2, #43	; 0x2b
 801789a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801789e:	782a      	ldrb	r2, [r5, #0]
 80178a0:	2a2a      	cmp	r2, #42	; 0x2a
 80178a2:	d02a      	beq.n	80178fa <_vfiprintf_r+0x10e>
 80178a4:	9a07      	ldr	r2, [sp, #28]
 80178a6:	46a8      	mov	r8, r5
 80178a8:	2000      	movs	r0, #0
 80178aa:	250a      	movs	r5, #10
 80178ac:	4641      	mov	r1, r8
 80178ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80178b2:	3b30      	subs	r3, #48	; 0x30
 80178b4:	2b09      	cmp	r3, #9
 80178b6:	d969      	bls.n	801798c <_vfiprintf_r+0x1a0>
 80178b8:	b360      	cbz	r0, 8017914 <_vfiprintf_r+0x128>
 80178ba:	e024      	b.n	8017906 <_vfiprintf_r+0x11a>
 80178bc:	4b50      	ldr	r3, [pc, #320]	; (8017a00 <_vfiprintf_r+0x214>)
 80178be:	429c      	cmp	r4, r3
 80178c0:	d101      	bne.n	80178c6 <_vfiprintf_r+0xda>
 80178c2:	68b4      	ldr	r4, [r6, #8]
 80178c4:	e7a2      	b.n	801780c <_vfiprintf_r+0x20>
 80178c6:	4b4f      	ldr	r3, [pc, #316]	; (8017a04 <_vfiprintf_r+0x218>)
 80178c8:	429c      	cmp	r4, r3
 80178ca:	bf08      	it	eq
 80178cc:	68f4      	ldreq	r4, [r6, #12]
 80178ce:	e79d      	b.n	801780c <_vfiprintf_r+0x20>
 80178d0:	4621      	mov	r1, r4
 80178d2:	4630      	mov	r0, r6
 80178d4:	f7fd fb9a 	bl	801500c <__swsetup_r>
 80178d8:	2800      	cmp	r0, #0
 80178da:	d09d      	beq.n	8017818 <_vfiprintf_r+0x2c>
 80178dc:	f04f 30ff 	mov.w	r0, #4294967295
 80178e0:	b01d      	add	sp, #116	; 0x74
 80178e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178e6:	46a8      	mov	r8, r5
 80178e8:	e7a2      	b.n	8017830 <_vfiprintf_r+0x44>
 80178ea:	4a44      	ldr	r2, [pc, #272]	; (80179fc <_vfiprintf_r+0x210>)
 80178ec:	1a80      	subs	r0, r0, r2
 80178ee:	fa0b f000 	lsl.w	r0, fp, r0
 80178f2:	4318      	orrs	r0, r3
 80178f4:	9004      	str	r0, [sp, #16]
 80178f6:	4645      	mov	r5, r8
 80178f8:	e7be      	b.n	8017878 <_vfiprintf_r+0x8c>
 80178fa:	9a03      	ldr	r2, [sp, #12]
 80178fc:	1d11      	adds	r1, r2, #4
 80178fe:	6812      	ldr	r2, [r2, #0]
 8017900:	9103      	str	r1, [sp, #12]
 8017902:	2a00      	cmp	r2, #0
 8017904:	db01      	blt.n	801790a <_vfiprintf_r+0x11e>
 8017906:	9207      	str	r2, [sp, #28]
 8017908:	e004      	b.n	8017914 <_vfiprintf_r+0x128>
 801790a:	4252      	negs	r2, r2
 801790c:	f043 0302 	orr.w	r3, r3, #2
 8017910:	9207      	str	r2, [sp, #28]
 8017912:	9304      	str	r3, [sp, #16]
 8017914:	f898 3000 	ldrb.w	r3, [r8]
 8017918:	2b2e      	cmp	r3, #46	; 0x2e
 801791a:	d10e      	bne.n	801793a <_vfiprintf_r+0x14e>
 801791c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8017920:	2b2a      	cmp	r3, #42	; 0x2a
 8017922:	d138      	bne.n	8017996 <_vfiprintf_r+0x1aa>
 8017924:	9b03      	ldr	r3, [sp, #12]
 8017926:	1d1a      	adds	r2, r3, #4
 8017928:	681b      	ldr	r3, [r3, #0]
 801792a:	9203      	str	r2, [sp, #12]
 801792c:	2b00      	cmp	r3, #0
 801792e:	bfb8      	it	lt
 8017930:	f04f 33ff 	movlt.w	r3, #4294967295
 8017934:	f108 0802 	add.w	r8, r8, #2
 8017938:	9305      	str	r3, [sp, #20]
 801793a:	4d33      	ldr	r5, [pc, #204]	; (8017a08 <_vfiprintf_r+0x21c>)
 801793c:	f898 1000 	ldrb.w	r1, [r8]
 8017940:	2203      	movs	r2, #3
 8017942:	4628      	mov	r0, r5
 8017944:	f7e8 fc64 	bl	8000210 <memchr>
 8017948:	b140      	cbz	r0, 801795c <_vfiprintf_r+0x170>
 801794a:	2340      	movs	r3, #64	; 0x40
 801794c:	1b40      	subs	r0, r0, r5
 801794e:	fa03 f000 	lsl.w	r0, r3, r0
 8017952:	9b04      	ldr	r3, [sp, #16]
 8017954:	4303      	orrs	r3, r0
 8017956:	f108 0801 	add.w	r8, r8, #1
 801795a:	9304      	str	r3, [sp, #16]
 801795c:	f898 1000 	ldrb.w	r1, [r8]
 8017960:	482a      	ldr	r0, [pc, #168]	; (8017a0c <_vfiprintf_r+0x220>)
 8017962:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017966:	2206      	movs	r2, #6
 8017968:	f108 0701 	add.w	r7, r8, #1
 801796c:	f7e8 fc50 	bl	8000210 <memchr>
 8017970:	2800      	cmp	r0, #0
 8017972:	d037      	beq.n	80179e4 <_vfiprintf_r+0x1f8>
 8017974:	4b26      	ldr	r3, [pc, #152]	; (8017a10 <_vfiprintf_r+0x224>)
 8017976:	bb1b      	cbnz	r3, 80179c0 <_vfiprintf_r+0x1d4>
 8017978:	9b03      	ldr	r3, [sp, #12]
 801797a:	3307      	adds	r3, #7
 801797c:	f023 0307 	bic.w	r3, r3, #7
 8017980:	3308      	adds	r3, #8
 8017982:	9303      	str	r3, [sp, #12]
 8017984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017986:	444b      	add	r3, r9
 8017988:	9309      	str	r3, [sp, #36]	; 0x24
 801798a:	e750      	b.n	801782e <_vfiprintf_r+0x42>
 801798c:	fb05 3202 	mla	r2, r5, r2, r3
 8017990:	2001      	movs	r0, #1
 8017992:	4688      	mov	r8, r1
 8017994:	e78a      	b.n	80178ac <_vfiprintf_r+0xc0>
 8017996:	2300      	movs	r3, #0
 8017998:	f108 0801 	add.w	r8, r8, #1
 801799c:	9305      	str	r3, [sp, #20]
 801799e:	4619      	mov	r1, r3
 80179a0:	250a      	movs	r5, #10
 80179a2:	4640      	mov	r0, r8
 80179a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80179a8:	3a30      	subs	r2, #48	; 0x30
 80179aa:	2a09      	cmp	r2, #9
 80179ac:	d903      	bls.n	80179b6 <_vfiprintf_r+0x1ca>
 80179ae:	2b00      	cmp	r3, #0
 80179b0:	d0c3      	beq.n	801793a <_vfiprintf_r+0x14e>
 80179b2:	9105      	str	r1, [sp, #20]
 80179b4:	e7c1      	b.n	801793a <_vfiprintf_r+0x14e>
 80179b6:	fb05 2101 	mla	r1, r5, r1, r2
 80179ba:	2301      	movs	r3, #1
 80179bc:	4680      	mov	r8, r0
 80179be:	e7f0      	b.n	80179a2 <_vfiprintf_r+0x1b6>
 80179c0:	ab03      	add	r3, sp, #12
 80179c2:	9300      	str	r3, [sp, #0]
 80179c4:	4622      	mov	r2, r4
 80179c6:	4b13      	ldr	r3, [pc, #76]	; (8017a14 <_vfiprintf_r+0x228>)
 80179c8:	a904      	add	r1, sp, #16
 80179ca:	4630      	mov	r0, r6
 80179cc:	f7fb fce0 	bl	8013390 <_printf_float>
 80179d0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80179d4:	4681      	mov	r9, r0
 80179d6:	d1d5      	bne.n	8017984 <_vfiprintf_r+0x198>
 80179d8:	89a3      	ldrh	r3, [r4, #12]
 80179da:	065b      	lsls	r3, r3, #25
 80179dc:	f53f af7e 	bmi.w	80178dc <_vfiprintf_r+0xf0>
 80179e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80179e2:	e77d      	b.n	80178e0 <_vfiprintf_r+0xf4>
 80179e4:	ab03      	add	r3, sp, #12
 80179e6:	9300      	str	r3, [sp, #0]
 80179e8:	4622      	mov	r2, r4
 80179ea:	4b0a      	ldr	r3, [pc, #40]	; (8017a14 <_vfiprintf_r+0x228>)
 80179ec:	a904      	add	r1, sp, #16
 80179ee:	4630      	mov	r0, r6
 80179f0:	f7fb ff84 	bl	80138fc <_printf_i>
 80179f4:	e7ec      	b.n	80179d0 <_vfiprintf_r+0x1e4>
 80179f6:	bf00      	nop
 80179f8:	08018928 	.word	0x08018928
 80179fc:	08018a74 	.word	0x08018a74
 8017a00:	08018948 	.word	0x08018948
 8017a04:	08018908 	.word	0x08018908
 8017a08:	08018a7a 	.word	0x08018a7a
 8017a0c:	08018a7e 	.word	0x08018a7e
 8017a10:	08013391 	.word	0x08013391
 8017a14:	080177c7 	.word	0x080177c7

08017a18 <_scanf_chars>:
 8017a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a1c:	4615      	mov	r5, r2
 8017a1e:	688a      	ldr	r2, [r1, #8]
 8017a20:	4680      	mov	r8, r0
 8017a22:	460c      	mov	r4, r1
 8017a24:	b932      	cbnz	r2, 8017a34 <_scanf_chars+0x1c>
 8017a26:	698a      	ldr	r2, [r1, #24]
 8017a28:	2a00      	cmp	r2, #0
 8017a2a:	bf14      	ite	ne
 8017a2c:	f04f 32ff 	movne.w	r2, #4294967295
 8017a30:	2201      	moveq	r2, #1
 8017a32:	608a      	str	r2, [r1, #8]
 8017a34:	6822      	ldr	r2, [r4, #0]
 8017a36:	06d1      	lsls	r1, r2, #27
 8017a38:	bf5f      	itttt	pl
 8017a3a:	681a      	ldrpl	r2, [r3, #0]
 8017a3c:	1d11      	addpl	r1, r2, #4
 8017a3e:	6019      	strpl	r1, [r3, #0]
 8017a40:	6817      	ldrpl	r7, [r2, #0]
 8017a42:	2600      	movs	r6, #0
 8017a44:	69a3      	ldr	r3, [r4, #24]
 8017a46:	b1db      	cbz	r3, 8017a80 <_scanf_chars+0x68>
 8017a48:	2b01      	cmp	r3, #1
 8017a4a:	d107      	bne.n	8017a5c <_scanf_chars+0x44>
 8017a4c:	682b      	ldr	r3, [r5, #0]
 8017a4e:	6962      	ldr	r2, [r4, #20]
 8017a50:	781b      	ldrb	r3, [r3, #0]
 8017a52:	5cd3      	ldrb	r3, [r2, r3]
 8017a54:	b9a3      	cbnz	r3, 8017a80 <_scanf_chars+0x68>
 8017a56:	2e00      	cmp	r6, #0
 8017a58:	d132      	bne.n	8017ac0 <_scanf_chars+0xa8>
 8017a5a:	e006      	b.n	8017a6a <_scanf_chars+0x52>
 8017a5c:	2b02      	cmp	r3, #2
 8017a5e:	d007      	beq.n	8017a70 <_scanf_chars+0x58>
 8017a60:	2e00      	cmp	r6, #0
 8017a62:	d12d      	bne.n	8017ac0 <_scanf_chars+0xa8>
 8017a64:	69a3      	ldr	r3, [r4, #24]
 8017a66:	2b01      	cmp	r3, #1
 8017a68:	d12a      	bne.n	8017ac0 <_scanf_chars+0xa8>
 8017a6a:	2001      	movs	r0, #1
 8017a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a70:	f7fe fe32 	bl	80166d8 <__locale_ctype_ptr>
 8017a74:	682b      	ldr	r3, [r5, #0]
 8017a76:	781b      	ldrb	r3, [r3, #0]
 8017a78:	4418      	add	r0, r3
 8017a7a:	7843      	ldrb	r3, [r0, #1]
 8017a7c:	071b      	lsls	r3, r3, #28
 8017a7e:	d4ef      	bmi.n	8017a60 <_scanf_chars+0x48>
 8017a80:	6823      	ldr	r3, [r4, #0]
 8017a82:	06da      	lsls	r2, r3, #27
 8017a84:	bf5e      	ittt	pl
 8017a86:	682b      	ldrpl	r3, [r5, #0]
 8017a88:	781b      	ldrbpl	r3, [r3, #0]
 8017a8a:	703b      	strbpl	r3, [r7, #0]
 8017a8c:	682a      	ldr	r2, [r5, #0]
 8017a8e:	686b      	ldr	r3, [r5, #4]
 8017a90:	f102 0201 	add.w	r2, r2, #1
 8017a94:	602a      	str	r2, [r5, #0]
 8017a96:	68a2      	ldr	r2, [r4, #8]
 8017a98:	f103 33ff 	add.w	r3, r3, #4294967295
 8017a9c:	f102 32ff 	add.w	r2, r2, #4294967295
 8017aa0:	606b      	str	r3, [r5, #4]
 8017aa2:	f106 0601 	add.w	r6, r6, #1
 8017aa6:	bf58      	it	pl
 8017aa8:	3701      	addpl	r7, #1
 8017aaa:	60a2      	str	r2, [r4, #8]
 8017aac:	b142      	cbz	r2, 8017ac0 <_scanf_chars+0xa8>
 8017aae:	2b00      	cmp	r3, #0
 8017ab0:	dcc8      	bgt.n	8017a44 <_scanf_chars+0x2c>
 8017ab2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017ab6:	4629      	mov	r1, r5
 8017ab8:	4640      	mov	r0, r8
 8017aba:	4798      	blx	r3
 8017abc:	2800      	cmp	r0, #0
 8017abe:	d0c1      	beq.n	8017a44 <_scanf_chars+0x2c>
 8017ac0:	6823      	ldr	r3, [r4, #0]
 8017ac2:	f013 0310 	ands.w	r3, r3, #16
 8017ac6:	d105      	bne.n	8017ad4 <_scanf_chars+0xbc>
 8017ac8:	68e2      	ldr	r2, [r4, #12]
 8017aca:	3201      	adds	r2, #1
 8017acc:	60e2      	str	r2, [r4, #12]
 8017ace:	69a2      	ldr	r2, [r4, #24]
 8017ad0:	b102      	cbz	r2, 8017ad4 <_scanf_chars+0xbc>
 8017ad2:	703b      	strb	r3, [r7, #0]
 8017ad4:	6923      	ldr	r3, [r4, #16]
 8017ad6:	441e      	add	r6, r3
 8017ad8:	6126      	str	r6, [r4, #16]
 8017ada:	2000      	movs	r0, #0
 8017adc:	e7c6      	b.n	8017a6c <_scanf_chars+0x54>
	...

08017ae0 <_scanf_i>:
 8017ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ae4:	469a      	mov	sl, r3
 8017ae6:	4b74      	ldr	r3, [pc, #464]	; (8017cb8 <_scanf_i+0x1d8>)
 8017ae8:	460c      	mov	r4, r1
 8017aea:	4683      	mov	fp, r0
 8017aec:	4616      	mov	r6, r2
 8017aee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017af2:	b087      	sub	sp, #28
 8017af4:	ab03      	add	r3, sp, #12
 8017af6:	68a7      	ldr	r7, [r4, #8]
 8017af8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8017afc:	4b6f      	ldr	r3, [pc, #444]	; (8017cbc <_scanf_i+0x1dc>)
 8017afe:	69a1      	ldr	r1, [r4, #24]
 8017b00:	4a6f      	ldr	r2, [pc, #444]	; (8017cc0 <_scanf_i+0x1e0>)
 8017b02:	2903      	cmp	r1, #3
 8017b04:	bf08      	it	eq
 8017b06:	461a      	moveq	r2, r3
 8017b08:	1e7b      	subs	r3, r7, #1
 8017b0a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8017b0e:	bf84      	itt	hi
 8017b10:	f240 135d 	movwhi	r3, #349	; 0x15d
 8017b14:	60a3      	strhi	r3, [r4, #8]
 8017b16:	6823      	ldr	r3, [r4, #0]
 8017b18:	9200      	str	r2, [sp, #0]
 8017b1a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8017b1e:	bf88      	it	hi
 8017b20:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8017b24:	f104 091c 	add.w	r9, r4, #28
 8017b28:	6023      	str	r3, [r4, #0]
 8017b2a:	bf8c      	ite	hi
 8017b2c:	197f      	addhi	r7, r7, r5
 8017b2e:	2700      	movls	r7, #0
 8017b30:	464b      	mov	r3, r9
 8017b32:	f04f 0800 	mov.w	r8, #0
 8017b36:	9301      	str	r3, [sp, #4]
 8017b38:	6831      	ldr	r1, [r6, #0]
 8017b3a:	ab03      	add	r3, sp, #12
 8017b3c:	2202      	movs	r2, #2
 8017b3e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8017b42:	7809      	ldrb	r1, [r1, #0]
 8017b44:	f7e8 fb64 	bl	8000210 <memchr>
 8017b48:	9b01      	ldr	r3, [sp, #4]
 8017b4a:	b330      	cbz	r0, 8017b9a <_scanf_i+0xba>
 8017b4c:	f1b8 0f01 	cmp.w	r8, #1
 8017b50:	d15a      	bne.n	8017c08 <_scanf_i+0x128>
 8017b52:	6862      	ldr	r2, [r4, #4]
 8017b54:	b92a      	cbnz	r2, 8017b62 <_scanf_i+0x82>
 8017b56:	6822      	ldr	r2, [r4, #0]
 8017b58:	2108      	movs	r1, #8
 8017b5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017b5e:	6061      	str	r1, [r4, #4]
 8017b60:	6022      	str	r2, [r4, #0]
 8017b62:	6822      	ldr	r2, [r4, #0]
 8017b64:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8017b68:	6022      	str	r2, [r4, #0]
 8017b6a:	68a2      	ldr	r2, [r4, #8]
 8017b6c:	1e51      	subs	r1, r2, #1
 8017b6e:	60a1      	str	r1, [r4, #8]
 8017b70:	b19a      	cbz	r2, 8017b9a <_scanf_i+0xba>
 8017b72:	6832      	ldr	r2, [r6, #0]
 8017b74:	1c51      	adds	r1, r2, #1
 8017b76:	6031      	str	r1, [r6, #0]
 8017b78:	7812      	ldrb	r2, [r2, #0]
 8017b7a:	701a      	strb	r2, [r3, #0]
 8017b7c:	1c5d      	adds	r5, r3, #1
 8017b7e:	6873      	ldr	r3, [r6, #4]
 8017b80:	3b01      	subs	r3, #1
 8017b82:	2b00      	cmp	r3, #0
 8017b84:	6073      	str	r3, [r6, #4]
 8017b86:	dc07      	bgt.n	8017b98 <_scanf_i+0xb8>
 8017b88:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017b8c:	4631      	mov	r1, r6
 8017b8e:	4658      	mov	r0, fp
 8017b90:	4798      	blx	r3
 8017b92:	2800      	cmp	r0, #0
 8017b94:	f040 8086 	bne.w	8017ca4 <_scanf_i+0x1c4>
 8017b98:	462b      	mov	r3, r5
 8017b9a:	f108 0801 	add.w	r8, r8, #1
 8017b9e:	f1b8 0f03 	cmp.w	r8, #3
 8017ba2:	d1c8      	bne.n	8017b36 <_scanf_i+0x56>
 8017ba4:	6862      	ldr	r2, [r4, #4]
 8017ba6:	b90a      	cbnz	r2, 8017bac <_scanf_i+0xcc>
 8017ba8:	220a      	movs	r2, #10
 8017baa:	6062      	str	r2, [r4, #4]
 8017bac:	6862      	ldr	r2, [r4, #4]
 8017bae:	4945      	ldr	r1, [pc, #276]	; (8017cc4 <_scanf_i+0x1e4>)
 8017bb0:	6960      	ldr	r0, [r4, #20]
 8017bb2:	9301      	str	r3, [sp, #4]
 8017bb4:	1a89      	subs	r1, r1, r2
 8017bb6:	f000 f8df 	bl	8017d78 <__sccl>
 8017bba:	9b01      	ldr	r3, [sp, #4]
 8017bbc:	f04f 0800 	mov.w	r8, #0
 8017bc0:	461d      	mov	r5, r3
 8017bc2:	68a3      	ldr	r3, [r4, #8]
 8017bc4:	6822      	ldr	r2, [r4, #0]
 8017bc6:	2b00      	cmp	r3, #0
 8017bc8:	d03a      	beq.n	8017c40 <_scanf_i+0x160>
 8017bca:	6831      	ldr	r1, [r6, #0]
 8017bcc:	6960      	ldr	r0, [r4, #20]
 8017bce:	f891 c000 	ldrb.w	ip, [r1]
 8017bd2:	f810 000c 	ldrb.w	r0, [r0, ip]
 8017bd6:	2800      	cmp	r0, #0
 8017bd8:	d032      	beq.n	8017c40 <_scanf_i+0x160>
 8017bda:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8017bde:	d121      	bne.n	8017c24 <_scanf_i+0x144>
 8017be0:	0510      	lsls	r0, r2, #20
 8017be2:	d51f      	bpl.n	8017c24 <_scanf_i+0x144>
 8017be4:	f108 0801 	add.w	r8, r8, #1
 8017be8:	b117      	cbz	r7, 8017bf0 <_scanf_i+0x110>
 8017bea:	3301      	adds	r3, #1
 8017bec:	3f01      	subs	r7, #1
 8017bee:	60a3      	str	r3, [r4, #8]
 8017bf0:	6873      	ldr	r3, [r6, #4]
 8017bf2:	3b01      	subs	r3, #1
 8017bf4:	2b00      	cmp	r3, #0
 8017bf6:	6073      	str	r3, [r6, #4]
 8017bf8:	dd1b      	ble.n	8017c32 <_scanf_i+0x152>
 8017bfa:	6833      	ldr	r3, [r6, #0]
 8017bfc:	3301      	adds	r3, #1
 8017bfe:	6033      	str	r3, [r6, #0]
 8017c00:	68a3      	ldr	r3, [r4, #8]
 8017c02:	3b01      	subs	r3, #1
 8017c04:	60a3      	str	r3, [r4, #8]
 8017c06:	e7dc      	b.n	8017bc2 <_scanf_i+0xe2>
 8017c08:	f1b8 0f02 	cmp.w	r8, #2
 8017c0c:	d1ad      	bne.n	8017b6a <_scanf_i+0x8a>
 8017c0e:	6822      	ldr	r2, [r4, #0]
 8017c10:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8017c14:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8017c18:	d1bf      	bne.n	8017b9a <_scanf_i+0xba>
 8017c1a:	2110      	movs	r1, #16
 8017c1c:	6061      	str	r1, [r4, #4]
 8017c1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017c22:	e7a1      	b.n	8017b68 <_scanf_i+0x88>
 8017c24:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8017c28:	6022      	str	r2, [r4, #0]
 8017c2a:	780b      	ldrb	r3, [r1, #0]
 8017c2c:	702b      	strb	r3, [r5, #0]
 8017c2e:	3501      	adds	r5, #1
 8017c30:	e7de      	b.n	8017bf0 <_scanf_i+0x110>
 8017c32:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017c36:	4631      	mov	r1, r6
 8017c38:	4658      	mov	r0, fp
 8017c3a:	4798      	blx	r3
 8017c3c:	2800      	cmp	r0, #0
 8017c3e:	d0df      	beq.n	8017c00 <_scanf_i+0x120>
 8017c40:	6823      	ldr	r3, [r4, #0]
 8017c42:	05d9      	lsls	r1, r3, #23
 8017c44:	d50c      	bpl.n	8017c60 <_scanf_i+0x180>
 8017c46:	454d      	cmp	r5, r9
 8017c48:	d908      	bls.n	8017c5c <_scanf_i+0x17c>
 8017c4a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8017c4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017c52:	4632      	mov	r2, r6
 8017c54:	4658      	mov	r0, fp
 8017c56:	4798      	blx	r3
 8017c58:	1e6f      	subs	r7, r5, #1
 8017c5a:	463d      	mov	r5, r7
 8017c5c:	454d      	cmp	r5, r9
 8017c5e:	d029      	beq.n	8017cb4 <_scanf_i+0x1d4>
 8017c60:	6822      	ldr	r2, [r4, #0]
 8017c62:	f012 0210 	ands.w	r2, r2, #16
 8017c66:	d113      	bne.n	8017c90 <_scanf_i+0x1b0>
 8017c68:	702a      	strb	r2, [r5, #0]
 8017c6a:	6863      	ldr	r3, [r4, #4]
 8017c6c:	9e00      	ldr	r6, [sp, #0]
 8017c6e:	4649      	mov	r1, r9
 8017c70:	4658      	mov	r0, fp
 8017c72:	47b0      	blx	r6
 8017c74:	f8da 3000 	ldr.w	r3, [sl]
 8017c78:	6821      	ldr	r1, [r4, #0]
 8017c7a:	1d1a      	adds	r2, r3, #4
 8017c7c:	f8ca 2000 	str.w	r2, [sl]
 8017c80:	f011 0f20 	tst.w	r1, #32
 8017c84:	681b      	ldr	r3, [r3, #0]
 8017c86:	d010      	beq.n	8017caa <_scanf_i+0x1ca>
 8017c88:	6018      	str	r0, [r3, #0]
 8017c8a:	68e3      	ldr	r3, [r4, #12]
 8017c8c:	3301      	adds	r3, #1
 8017c8e:	60e3      	str	r3, [r4, #12]
 8017c90:	eba5 0509 	sub.w	r5, r5, r9
 8017c94:	44a8      	add	r8, r5
 8017c96:	6925      	ldr	r5, [r4, #16]
 8017c98:	4445      	add	r5, r8
 8017c9a:	6125      	str	r5, [r4, #16]
 8017c9c:	2000      	movs	r0, #0
 8017c9e:	b007      	add	sp, #28
 8017ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ca4:	f04f 0800 	mov.w	r8, #0
 8017ca8:	e7ca      	b.n	8017c40 <_scanf_i+0x160>
 8017caa:	07ca      	lsls	r2, r1, #31
 8017cac:	bf4c      	ite	mi
 8017cae:	8018      	strhmi	r0, [r3, #0]
 8017cb0:	6018      	strpl	r0, [r3, #0]
 8017cb2:	e7ea      	b.n	8017c8a <_scanf_i+0x1aa>
 8017cb4:	2001      	movs	r0, #1
 8017cb6:	e7f2      	b.n	8017c9e <_scanf_i+0x1be>
 8017cb8:	080185d0 	.word	0x080185d0
 8017cbc:	08014ee1 	.word	0x08014ee1
 8017cc0:	08017ef5 	.word	0x08017ef5
 8017cc4:	08018a95 	.word	0x08018a95

08017cc8 <_putc_r>:
 8017cc8:	b570      	push	{r4, r5, r6, lr}
 8017cca:	460d      	mov	r5, r1
 8017ccc:	4614      	mov	r4, r2
 8017cce:	4606      	mov	r6, r0
 8017cd0:	b118      	cbz	r0, 8017cda <_putc_r+0x12>
 8017cd2:	6983      	ldr	r3, [r0, #24]
 8017cd4:	b90b      	cbnz	r3, 8017cda <_putc_r+0x12>
 8017cd6:	f7fe f94b 	bl	8015f70 <__sinit>
 8017cda:	4b13      	ldr	r3, [pc, #76]	; (8017d28 <_putc_r+0x60>)
 8017cdc:	429c      	cmp	r4, r3
 8017cde:	d112      	bne.n	8017d06 <_putc_r+0x3e>
 8017ce0:	6874      	ldr	r4, [r6, #4]
 8017ce2:	68a3      	ldr	r3, [r4, #8]
 8017ce4:	3b01      	subs	r3, #1
 8017ce6:	2b00      	cmp	r3, #0
 8017ce8:	60a3      	str	r3, [r4, #8]
 8017cea:	da16      	bge.n	8017d1a <_putc_r+0x52>
 8017cec:	69a2      	ldr	r2, [r4, #24]
 8017cee:	4293      	cmp	r3, r2
 8017cf0:	db02      	blt.n	8017cf8 <_putc_r+0x30>
 8017cf2:	b2eb      	uxtb	r3, r5
 8017cf4:	2b0a      	cmp	r3, #10
 8017cf6:	d110      	bne.n	8017d1a <_putc_r+0x52>
 8017cf8:	4622      	mov	r2, r4
 8017cfa:	4629      	mov	r1, r5
 8017cfc:	4630      	mov	r0, r6
 8017cfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017d02:	f7fd b91f 	b.w	8014f44 <__swbuf_r>
 8017d06:	4b09      	ldr	r3, [pc, #36]	; (8017d2c <_putc_r+0x64>)
 8017d08:	429c      	cmp	r4, r3
 8017d0a:	d101      	bne.n	8017d10 <_putc_r+0x48>
 8017d0c:	68b4      	ldr	r4, [r6, #8]
 8017d0e:	e7e8      	b.n	8017ce2 <_putc_r+0x1a>
 8017d10:	4b07      	ldr	r3, [pc, #28]	; (8017d30 <_putc_r+0x68>)
 8017d12:	429c      	cmp	r4, r3
 8017d14:	bf08      	it	eq
 8017d16:	68f4      	ldreq	r4, [r6, #12]
 8017d18:	e7e3      	b.n	8017ce2 <_putc_r+0x1a>
 8017d1a:	6823      	ldr	r3, [r4, #0]
 8017d1c:	1c5a      	adds	r2, r3, #1
 8017d1e:	6022      	str	r2, [r4, #0]
 8017d20:	701d      	strb	r5, [r3, #0]
 8017d22:	b2e8      	uxtb	r0, r5
 8017d24:	bd70      	pop	{r4, r5, r6, pc}
 8017d26:	bf00      	nop
 8017d28:	08018928 	.word	0x08018928
 8017d2c:	08018948 	.word	0x08018948
 8017d30:	08018908 	.word	0x08018908

08017d34 <_read_r>:
 8017d34:	b538      	push	{r3, r4, r5, lr}
 8017d36:	4c07      	ldr	r4, [pc, #28]	; (8017d54 <_read_r+0x20>)
 8017d38:	4605      	mov	r5, r0
 8017d3a:	4608      	mov	r0, r1
 8017d3c:	4611      	mov	r1, r2
 8017d3e:	2200      	movs	r2, #0
 8017d40:	6022      	str	r2, [r4, #0]
 8017d42:	461a      	mov	r2, r3
 8017d44:	f7ee f8ce 	bl	8005ee4 <_read>
 8017d48:	1c43      	adds	r3, r0, #1
 8017d4a:	d102      	bne.n	8017d52 <_read_r+0x1e>
 8017d4c:	6823      	ldr	r3, [r4, #0]
 8017d4e:	b103      	cbz	r3, 8017d52 <_read_r+0x1e>
 8017d50:	602b      	str	r3, [r5, #0]
 8017d52:	bd38      	pop	{r3, r4, r5, pc}
 8017d54:	20037fbc 	.word	0x20037fbc

08017d58 <_sbrk_r>:
 8017d58:	b538      	push	{r3, r4, r5, lr}
 8017d5a:	4c06      	ldr	r4, [pc, #24]	; (8017d74 <_sbrk_r+0x1c>)
 8017d5c:	2300      	movs	r3, #0
 8017d5e:	4605      	mov	r5, r0
 8017d60:	4608      	mov	r0, r1
 8017d62:	6023      	str	r3, [r4, #0]
 8017d64:	f7ee f910 	bl	8005f88 <_sbrk>
 8017d68:	1c43      	adds	r3, r0, #1
 8017d6a:	d102      	bne.n	8017d72 <_sbrk_r+0x1a>
 8017d6c:	6823      	ldr	r3, [r4, #0]
 8017d6e:	b103      	cbz	r3, 8017d72 <_sbrk_r+0x1a>
 8017d70:	602b      	str	r3, [r5, #0]
 8017d72:	bd38      	pop	{r3, r4, r5, pc}
 8017d74:	20037fbc 	.word	0x20037fbc

08017d78 <__sccl>:
 8017d78:	b570      	push	{r4, r5, r6, lr}
 8017d7a:	780b      	ldrb	r3, [r1, #0]
 8017d7c:	2b5e      	cmp	r3, #94	; 0x5e
 8017d7e:	bf13      	iteet	ne
 8017d80:	1c4a      	addne	r2, r1, #1
 8017d82:	1c8a      	addeq	r2, r1, #2
 8017d84:	784b      	ldrbeq	r3, [r1, #1]
 8017d86:	2100      	movne	r1, #0
 8017d88:	bf08      	it	eq
 8017d8a:	2101      	moveq	r1, #1
 8017d8c:	1e44      	subs	r4, r0, #1
 8017d8e:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8017d92:	f804 1f01 	strb.w	r1, [r4, #1]!
 8017d96:	42ac      	cmp	r4, r5
 8017d98:	d1fb      	bne.n	8017d92 <__sccl+0x1a>
 8017d9a:	b913      	cbnz	r3, 8017da2 <__sccl+0x2a>
 8017d9c:	3a01      	subs	r2, #1
 8017d9e:	4610      	mov	r0, r2
 8017da0:	bd70      	pop	{r4, r5, r6, pc}
 8017da2:	f081 0401 	eor.w	r4, r1, #1
 8017da6:	54c4      	strb	r4, [r0, r3]
 8017da8:	1c51      	adds	r1, r2, #1
 8017daa:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8017dae:	2d2d      	cmp	r5, #45	; 0x2d
 8017db0:	f101 36ff 	add.w	r6, r1, #4294967295
 8017db4:	460a      	mov	r2, r1
 8017db6:	d006      	beq.n	8017dc6 <__sccl+0x4e>
 8017db8:	2d5d      	cmp	r5, #93	; 0x5d
 8017dba:	d0f0      	beq.n	8017d9e <__sccl+0x26>
 8017dbc:	b90d      	cbnz	r5, 8017dc2 <__sccl+0x4a>
 8017dbe:	4632      	mov	r2, r6
 8017dc0:	e7ed      	b.n	8017d9e <__sccl+0x26>
 8017dc2:	462b      	mov	r3, r5
 8017dc4:	e7ef      	b.n	8017da6 <__sccl+0x2e>
 8017dc6:	780e      	ldrb	r6, [r1, #0]
 8017dc8:	2e5d      	cmp	r6, #93	; 0x5d
 8017dca:	d0fa      	beq.n	8017dc2 <__sccl+0x4a>
 8017dcc:	42b3      	cmp	r3, r6
 8017dce:	dcf8      	bgt.n	8017dc2 <__sccl+0x4a>
 8017dd0:	3301      	adds	r3, #1
 8017dd2:	429e      	cmp	r6, r3
 8017dd4:	54c4      	strb	r4, [r0, r3]
 8017dd6:	dcfb      	bgt.n	8017dd0 <__sccl+0x58>
 8017dd8:	3102      	adds	r1, #2
 8017dda:	e7e6      	b.n	8017daa <__sccl+0x32>

08017ddc <strncmp>:
 8017ddc:	b510      	push	{r4, lr}
 8017dde:	b16a      	cbz	r2, 8017dfc <strncmp+0x20>
 8017de0:	3901      	subs	r1, #1
 8017de2:	1884      	adds	r4, r0, r2
 8017de4:	f810 3b01 	ldrb.w	r3, [r0], #1
 8017de8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8017dec:	4293      	cmp	r3, r2
 8017dee:	d103      	bne.n	8017df8 <strncmp+0x1c>
 8017df0:	42a0      	cmp	r0, r4
 8017df2:	d001      	beq.n	8017df8 <strncmp+0x1c>
 8017df4:	2b00      	cmp	r3, #0
 8017df6:	d1f5      	bne.n	8017de4 <strncmp+0x8>
 8017df8:	1a98      	subs	r0, r3, r2
 8017dfa:	bd10      	pop	{r4, pc}
 8017dfc:	4610      	mov	r0, r2
 8017dfe:	e7fc      	b.n	8017dfa <strncmp+0x1e>

08017e00 <_strtoul_l.isra.0>:
 8017e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e04:	4680      	mov	r8, r0
 8017e06:	4689      	mov	r9, r1
 8017e08:	4692      	mov	sl, r2
 8017e0a:	461e      	mov	r6, r3
 8017e0c:	460f      	mov	r7, r1
 8017e0e:	463d      	mov	r5, r7
 8017e10:	9808      	ldr	r0, [sp, #32]
 8017e12:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017e16:	f7fe fc5b 	bl	80166d0 <__locale_ctype_ptr_l>
 8017e1a:	4420      	add	r0, r4
 8017e1c:	7843      	ldrb	r3, [r0, #1]
 8017e1e:	f013 0308 	ands.w	r3, r3, #8
 8017e22:	d130      	bne.n	8017e86 <_strtoul_l.isra.0+0x86>
 8017e24:	2c2d      	cmp	r4, #45	; 0x2d
 8017e26:	d130      	bne.n	8017e8a <_strtoul_l.isra.0+0x8a>
 8017e28:	787c      	ldrb	r4, [r7, #1]
 8017e2a:	1cbd      	adds	r5, r7, #2
 8017e2c:	2101      	movs	r1, #1
 8017e2e:	2e00      	cmp	r6, #0
 8017e30:	d05c      	beq.n	8017eec <_strtoul_l.isra.0+0xec>
 8017e32:	2e10      	cmp	r6, #16
 8017e34:	d109      	bne.n	8017e4a <_strtoul_l.isra.0+0x4a>
 8017e36:	2c30      	cmp	r4, #48	; 0x30
 8017e38:	d107      	bne.n	8017e4a <_strtoul_l.isra.0+0x4a>
 8017e3a:	782b      	ldrb	r3, [r5, #0]
 8017e3c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017e40:	2b58      	cmp	r3, #88	; 0x58
 8017e42:	d14e      	bne.n	8017ee2 <_strtoul_l.isra.0+0xe2>
 8017e44:	786c      	ldrb	r4, [r5, #1]
 8017e46:	2610      	movs	r6, #16
 8017e48:	3502      	adds	r5, #2
 8017e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8017e4e:	2300      	movs	r3, #0
 8017e50:	fbb2 f2f6 	udiv	r2, r2, r6
 8017e54:	fb06 fc02 	mul.w	ip, r6, r2
 8017e58:	ea6f 0c0c 	mvn.w	ip, ip
 8017e5c:	4618      	mov	r0, r3
 8017e5e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8017e62:	2f09      	cmp	r7, #9
 8017e64:	d817      	bhi.n	8017e96 <_strtoul_l.isra.0+0x96>
 8017e66:	463c      	mov	r4, r7
 8017e68:	42a6      	cmp	r6, r4
 8017e6a:	dd23      	ble.n	8017eb4 <_strtoul_l.isra.0+0xb4>
 8017e6c:	2b00      	cmp	r3, #0
 8017e6e:	db1e      	blt.n	8017eae <_strtoul_l.isra.0+0xae>
 8017e70:	4282      	cmp	r2, r0
 8017e72:	d31c      	bcc.n	8017eae <_strtoul_l.isra.0+0xae>
 8017e74:	d101      	bne.n	8017e7a <_strtoul_l.isra.0+0x7a>
 8017e76:	45a4      	cmp	ip, r4
 8017e78:	db19      	blt.n	8017eae <_strtoul_l.isra.0+0xae>
 8017e7a:	fb00 4006 	mla	r0, r0, r6, r4
 8017e7e:	2301      	movs	r3, #1
 8017e80:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017e84:	e7eb      	b.n	8017e5e <_strtoul_l.isra.0+0x5e>
 8017e86:	462f      	mov	r7, r5
 8017e88:	e7c1      	b.n	8017e0e <_strtoul_l.isra.0+0xe>
 8017e8a:	2c2b      	cmp	r4, #43	; 0x2b
 8017e8c:	bf04      	itt	eq
 8017e8e:	1cbd      	addeq	r5, r7, #2
 8017e90:	787c      	ldrbeq	r4, [r7, #1]
 8017e92:	4619      	mov	r1, r3
 8017e94:	e7cb      	b.n	8017e2e <_strtoul_l.isra.0+0x2e>
 8017e96:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8017e9a:	2f19      	cmp	r7, #25
 8017e9c:	d801      	bhi.n	8017ea2 <_strtoul_l.isra.0+0xa2>
 8017e9e:	3c37      	subs	r4, #55	; 0x37
 8017ea0:	e7e2      	b.n	8017e68 <_strtoul_l.isra.0+0x68>
 8017ea2:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8017ea6:	2f19      	cmp	r7, #25
 8017ea8:	d804      	bhi.n	8017eb4 <_strtoul_l.isra.0+0xb4>
 8017eaa:	3c57      	subs	r4, #87	; 0x57
 8017eac:	e7dc      	b.n	8017e68 <_strtoul_l.isra.0+0x68>
 8017eae:	f04f 33ff 	mov.w	r3, #4294967295
 8017eb2:	e7e5      	b.n	8017e80 <_strtoul_l.isra.0+0x80>
 8017eb4:	2b00      	cmp	r3, #0
 8017eb6:	da09      	bge.n	8017ecc <_strtoul_l.isra.0+0xcc>
 8017eb8:	2322      	movs	r3, #34	; 0x22
 8017eba:	f8c8 3000 	str.w	r3, [r8]
 8017ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8017ec2:	f1ba 0f00 	cmp.w	sl, #0
 8017ec6:	d107      	bne.n	8017ed8 <_strtoul_l.isra.0+0xd8>
 8017ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ecc:	b101      	cbz	r1, 8017ed0 <_strtoul_l.isra.0+0xd0>
 8017ece:	4240      	negs	r0, r0
 8017ed0:	f1ba 0f00 	cmp.w	sl, #0
 8017ed4:	d0f8      	beq.n	8017ec8 <_strtoul_l.isra.0+0xc8>
 8017ed6:	b10b      	cbz	r3, 8017edc <_strtoul_l.isra.0+0xdc>
 8017ed8:	f105 39ff 	add.w	r9, r5, #4294967295
 8017edc:	f8ca 9000 	str.w	r9, [sl]
 8017ee0:	e7f2      	b.n	8017ec8 <_strtoul_l.isra.0+0xc8>
 8017ee2:	2430      	movs	r4, #48	; 0x30
 8017ee4:	2e00      	cmp	r6, #0
 8017ee6:	d1b0      	bne.n	8017e4a <_strtoul_l.isra.0+0x4a>
 8017ee8:	2608      	movs	r6, #8
 8017eea:	e7ae      	b.n	8017e4a <_strtoul_l.isra.0+0x4a>
 8017eec:	2c30      	cmp	r4, #48	; 0x30
 8017eee:	d0a4      	beq.n	8017e3a <_strtoul_l.isra.0+0x3a>
 8017ef0:	260a      	movs	r6, #10
 8017ef2:	e7aa      	b.n	8017e4a <_strtoul_l.isra.0+0x4a>

08017ef4 <_strtoul_r>:
 8017ef4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017ef6:	4c06      	ldr	r4, [pc, #24]	; (8017f10 <_strtoul_r+0x1c>)
 8017ef8:	4d06      	ldr	r5, [pc, #24]	; (8017f14 <_strtoul_r+0x20>)
 8017efa:	6824      	ldr	r4, [r4, #0]
 8017efc:	6a24      	ldr	r4, [r4, #32]
 8017efe:	2c00      	cmp	r4, #0
 8017f00:	bf08      	it	eq
 8017f02:	462c      	moveq	r4, r5
 8017f04:	9400      	str	r4, [sp, #0]
 8017f06:	f7ff ff7b 	bl	8017e00 <_strtoul_l.isra.0>
 8017f0a:	b003      	add	sp, #12
 8017f0c:	bd30      	pop	{r4, r5, pc}
 8017f0e:	bf00      	nop
 8017f10:	2000000c 	.word	0x2000000c
 8017f14:	20000070 	.word	0x20000070

08017f18 <__submore>:
 8017f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f1c:	460c      	mov	r4, r1
 8017f1e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017f20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017f24:	4299      	cmp	r1, r3
 8017f26:	d11d      	bne.n	8017f64 <__submore+0x4c>
 8017f28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017f2c:	f7ff f8de 	bl	80170ec <_malloc_r>
 8017f30:	b918      	cbnz	r0, 8017f3a <__submore+0x22>
 8017f32:	f04f 30ff 	mov.w	r0, #4294967295
 8017f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017f3e:	63a3      	str	r3, [r4, #56]	; 0x38
 8017f40:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8017f44:	6360      	str	r0, [r4, #52]	; 0x34
 8017f46:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8017f4a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8017f4e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8017f52:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8017f56:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8017f5a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8017f5e:	6020      	str	r0, [r4, #0]
 8017f60:	2000      	movs	r0, #0
 8017f62:	e7e8      	b.n	8017f36 <__submore+0x1e>
 8017f64:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8017f66:	0077      	lsls	r7, r6, #1
 8017f68:	463a      	mov	r2, r7
 8017f6a:	f000 f85a 	bl	8018022 <_realloc_r>
 8017f6e:	4605      	mov	r5, r0
 8017f70:	2800      	cmp	r0, #0
 8017f72:	d0de      	beq.n	8017f32 <__submore+0x1a>
 8017f74:	eb00 0806 	add.w	r8, r0, r6
 8017f78:	4601      	mov	r1, r0
 8017f7a:	4632      	mov	r2, r6
 8017f7c:	4640      	mov	r0, r8
 8017f7e:	f7fb f95f 	bl	8013240 <memcpy>
 8017f82:	f8c4 8000 	str.w	r8, [r4]
 8017f86:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8017f8a:	e7e9      	b.n	8017f60 <__submore+0x48>

08017f8c <__ascii_wctomb>:
 8017f8c:	b149      	cbz	r1, 8017fa2 <__ascii_wctomb+0x16>
 8017f8e:	2aff      	cmp	r2, #255	; 0xff
 8017f90:	bf85      	ittet	hi
 8017f92:	238a      	movhi	r3, #138	; 0x8a
 8017f94:	6003      	strhi	r3, [r0, #0]
 8017f96:	700a      	strbls	r2, [r1, #0]
 8017f98:	f04f 30ff 	movhi.w	r0, #4294967295
 8017f9c:	bf98      	it	ls
 8017f9e:	2001      	movls	r0, #1
 8017fa0:	4770      	bx	lr
 8017fa2:	4608      	mov	r0, r1
 8017fa4:	4770      	bx	lr
	...

08017fa8 <_fstat_r>:
 8017fa8:	b538      	push	{r3, r4, r5, lr}
 8017faa:	4c07      	ldr	r4, [pc, #28]	; (8017fc8 <_fstat_r+0x20>)
 8017fac:	2300      	movs	r3, #0
 8017fae:	4605      	mov	r5, r0
 8017fb0:	4608      	mov	r0, r1
 8017fb2:	4611      	mov	r1, r2
 8017fb4:	6023      	str	r3, [r4, #0]
 8017fb6:	f7ed ffbe 	bl	8005f36 <_fstat>
 8017fba:	1c43      	adds	r3, r0, #1
 8017fbc:	d102      	bne.n	8017fc4 <_fstat_r+0x1c>
 8017fbe:	6823      	ldr	r3, [r4, #0]
 8017fc0:	b103      	cbz	r3, 8017fc4 <_fstat_r+0x1c>
 8017fc2:	602b      	str	r3, [r5, #0]
 8017fc4:	bd38      	pop	{r3, r4, r5, pc}
 8017fc6:	bf00      	nop
 8017fc8:	20037fbc 	.word	0x20037fbc

08017fcc <_isatty_r>:
 8017fcc:	b538      	push	{r3, r4, r5, lr}
 8017fce:	4c06      	ldr	r4, [pc, #24]	; (8017fe8 <_isatty_r+0x1c>)
 8017fd0:	2300      	movs	r3, #0
 8017fd2:	4605      	mov	r5, r0
 8017fd4:	4608      	mov	r0, r1
 8017fd6:	6023      	str	r3, [r4, #0]
 8017fd8:	f7ed ffbd 	bl	8005f56 <_isatty>
 8017fdc:	1c43      	adds	r3, r0, #1
 8017fde:	d102      	bne.n	8017fe6 <_isatty_r+0x1a>
 8017fe0:	6823      	ldr	r3, [r4, #0]
 8017fe2:	b103      	cbz	r3, 8017fe6 <_isatty_r+0x1a>
 8017fe4:	602b      	str	r3, [r5, #0]
 8017fe6:	bd38      	pop	{r3, r4, r5, pc}
 8017fe8:	20037fbc 	.word	0x20037fbc

08017fec <memmove>:
 8017fec:	4288      	cmp	r0, r1
 8017fee:	b510      	push	{r4, lr}
 8017ff0:	eb01 0302 	add.w	r3, r1, r2
 8017ff4:	d807      	bhi.n	8018006 <memmove+0x1a>
 8017ff6:	1e42      	subs	r2, r0, #1
 8017ff8:	4299      	cmp	r1, r3
 8017ffa:	d00a      	beq.n	8018012 <memmove+0x26>
 8017ffc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018000:	f802 4f01 	strb.w	r4, [r2, #1]!
 8018004:	e7f8      	b.n	8017ff8 <memmove+0xc>
 8018006:	4283      	cmp	r3, r0
 8018008:	d9f5      	bls.n	8017ff6 <memmove+0xa>
 801800a:	1881      	adds	r1, r0, r2
 801800c:	1ad2      	subs	r2, r2, r3
 801800e:	42d3      	cmn	r3, r2
 8018010:	d100      	bne.n	8018014 <memmove+0x28>
 8018012:	bd10      	pop	{r4, pc}
 8018014:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018018:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801801c:	e7f7      	b.n	801800e <memmove+0x22>

0801801e <__malloc_lock>:
 801801e:	4770      	bx	lr

08018020 <__malloc_unlock>:
 8018020:	4770      	bx	lr

08018022 <_realloc_r>:
 8018022:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018024:	4607      	mov	r7, r0
 8018026:	4614      	mov	r4, r2
 8018028:	460e      	mov	r6, r1
 801802a:	b921      	cbnz	r1, 8018036 <_realloc_r+0x14>
 801802c:	4611      	mov	r1, r2
 801802e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018032:	f7ff b85b 	b.w	80170ec <_malloc_r>
 8018036:	b922      	cbnz	r2, 8018042 <_realloc_r+0x20>
 8018038:	f7ff f80a 	bl	8017050 <_free_r>
 801803c:	4625      	mov	r5, r4
 801803e:	4628      	mov	r0, r5
 8018040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018042:	f000 f814 	bl	801806e <_malloc_usable_size_r>
 8018046:	42a0      	cmp	r0, r4
 8018048:	d20f      	bcs.n	801806a <_realloc_r+0x48>
 801804a:	4621      	mov	r1, r4
 801804c:	4638      	mov	r0, r7
 801804e:	f7ff f84d 	bl	80170ec <_malloc_r>
 8018052:	4605      	mov	r5, r0
 8018054:	2800      	cmp	r0, #0
 8018056:	d0f2      	beq.n	801803e <_realloc_r+0x1c>
 8018058:	4631      	mov	r1, r6
 801805a:	4622      	mov	r2, r4
 801805c:	f7fb f8f0 	bl	8013240 <memcpy>
 8018060:	4631      	mov	r1, r6
 8018062:	4638      	mov	r0, r7
 8018064:	f7fe fff4 	bl	8017050 <_free_r>
 8018068:	e7e9      	b.n	801803e <_realloc_r+0x1c>
 801806a:	4635      	mov	r5, r6
 801806c:	e7e7      	b.n	801803e <_realloc_r+0x1c>

0801806e <_malloc_usable_size_r>:
 801806e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018072:	1f18      	subs	r0, r3, #4
 8018074:	2b00      	cmp	r3, #0
 8018076:	bfbc      	itt	lt
 8018078:	580b      	ldrlt	r3, [r1, r0]
 801807a:	18c0      	addlt	r0, r0, r3
 801807c:	4770      	bx	lr
	...

08018080 <_init>:
 8018080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018082:	bf00      	nop
 8018084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018086:	bc08      	pop	{r3}
 8018088:	469e      	mov	lr, r3
 801808a:	4770      	bx	lr

0801808c <_fini>:
 801808c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801808e:	bf00      	nop
 8018090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018092:	bc08      	pop	{r3}
 8018094:	469e      	mov	lr, r3
 8018096:	4770      	bx	lr
