
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016f4c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b6c  08017110  08017110  00027110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017c7c  08017c7c  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08017c7c  08017c7c  00027c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017c84  08017c84  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08017c84  08017c84  00027c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017c8c  08017c8c  00027c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08017c90  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00018084  200001e0  08017e6c  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20018264  08017e6c  00038264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033200  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007085  00000000  00000000  0006340c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002080  00000000  00000000  0006a498  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001dd0  00000000  00000000  0006c518  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00036352  00000000  00000000  0006e2e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00023d32  00000000  00000000  000a463a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010df3e  00000000  00000000  000c836c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001d62aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009ea0  00000000  00000000  001d6328  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080170f4 	.word	0x080170f4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	080170f4 	.word	0x080170f4

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f006 fa52 	bl	8007480 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20015df0 	.word	0x20015df0

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f006 fa3a 	bl	8007480 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20015df0 	.word	0x20015df0

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f006 f8c3 	bl	80071ac <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f004 fe2a 	bl	8005c80 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f004 fe24 	bl	8005c80 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f004 fe1e 	bl	8005c80 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f004 fe18 	bl	8005c80 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f004 fe12 	bl	8005c80 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f004 fe0c 	bl	8005c80 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f004 fe06 	bl	8005c80 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f004 fe00 	bl	8005c80 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f004 fdfa 	bl	8005c80 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f004 fdf4 	bl	8005c80 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f004 fde8 	bl	8005c80 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f004 fde2 	bl	8005c80 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f012 ff31 	bl	8013f90 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_r;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), total_distance_(0){}
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2200      	movs	r2, #0
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2200      	movs	r2, #0
 800117e:	611a      	str	r2, [r3, #16]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f04f 0200 	mov.w	r2, #0
 8001186:	615a      	str	r2, [r3, #20]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4618      	mov	r0, r3
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
	...

08001198 <_ZN7Encoder4initEv>:

void Encoder::init()
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80011a0:	213c      	movs	r1, #60	; 0x3c
 80011a2:	4809      	ldr	r0, [pc, #36]	; (80011c8 <_ZN7Encoder4initEv+0x30>)
 80011a4:	f00a f804 	bl	800b1b0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 80011a8:	213c      	movs	r1, #60	; 0x3c
 80011aa:	4808      	ldr	r0, [pc, #32]	; (80011cc <_ZN7Encoder4initEv+0x34>)
 80011ac:	f00a f800 	bl	800b1b0 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 80011b0:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <_ZN7Encoder4initEv+0x38>)
 80011b2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011b6:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <_ZN7Encoder4initEv+0x3c>)
 80011ba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011be:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011c0:	bf00      	nop
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20016044 	.word	0x20016044
 80011cc:	20015d28 	.word	0x20015d28
 80011d0:	40010000 	.word	0x40010000
 80011d4:	40010400 	.word	0x40010400

080011d8 <_ZN7Encoder9updateCntEv>:

void Encoder::updateCnt()
{
 80011d8:	b590      	push	{r4, r7, lr}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
	monitor_cnt_l = cnt_l_ = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 80011e0:	4b43      	ldr	r3, [pc, #268]	; (80012f0 <_ZN7Encoder9updateCntEv+0x118>)
 80011e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e4:	ee07 3a90 	vmov	s15, r3
 80011e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011ec:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80012f4 <_ZN7Encoder9updateCntEv+0x11c>
 80011f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011f4:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80012f8 <_ZN7Encoder9updateCntEv+0x120>
 80011f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	edc3 7a00 	vstr	s15, [r3]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a3d      	ldr	r2, [pc, #244]	; (80012fc <_ZN7Encoder9updateCntEv+0x124>)
 8001208:	6013      	str	r3, [r2, #0]
	monitor_cnt_r = cnt_r_ = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 800120a:	4b3d      	ldr	r3, [pc, #244]	; (8001300 <_ZN7Encoder9updateCntEv+0x128>)
 800120c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120e:	ee07 3a90 	vmov	s15, r3
 8001212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001216:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80012f4 <_ZN7Encoder9updateCntEv+0x11c>
 800121a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800121e:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80012f8 <_ZN7Encoder9updateCntEv+0x120>
 8001222:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	edc3 7a01 	vstr	s15, [r3, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	4a34      	ldr	r2, [pc, #208]	; (8001304 <_ZN7Encoder9updateCntEv+0x12c>)
 8001232:	6013      	str	r3, [r2, #0]

	total_cnt_l_ += cnt_l_;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	ee07 3a90 	vmov	s15, r3
 800123c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	edd3 7a00 	vldr	s15, [r3]
 8001246:	ee77 7a27 	vadd.f32	s15, s14, s15
 800124a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800124e:	ee17 2a90 	vmov	r2, s15
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	60da      	str	r2, [r3, #12]
	total_cnt_r_ += cnt_r_;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	691b      	ldr	r3, [r3, #16]
 800125a:	ee07 3a90 	vmov	s15, r3
 800125e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	edd3 7a01 	vldr	s15, [r3, #4]
 8001268:	ee77 7a27 	vadd.f32	s15, s14, s15
 800126c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001270:	ee17 2a90 	vmov	r2, s15
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	611a      	str	r2, [r3, #16]

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	ed93 7a00 	vldr	s14, [r3]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	edd3 7a01 	vldr	s15, [r3, #4]
 8001284:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001288:	ee17 0a90 	vmov	r0, s15
 800128c:	f7ff f974 	bl	8000578 <__aeabi_f2d>
 8001290:	a315      	add	r3, pc, #84	; (adr r3, 80012e8 <_ZN7Encoder9updateCntEv+0x110>)
 8001292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001296:	f7ff f9c7 	bl	8000628 <__aeabi_dmul>
 800129a:	4603      	mov	r3, r0
 800129c:	460c      	mov	r4, r1
 800129e:	4618      	mov	r0, r3
 80012a0:	4621      	mov	r1, r4
 80012a2:	f04f 0200 	mov.w	r2, #0
 80012a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012aa:	f7ff fae7 	bl	800087c <__aeabi_ddiv>
 80012ae:	4603      	mov	r3, r0
 80012b0:	460c      	mov	r4, r1
 80012b2:	4618      	mov	r0, r3
 80012b4:	4621      	mov	r1, r4
 80012b6:	f7ff fcaf 	bl	8000c18 <__aeabi_d2f>
 80012ba:	4602      	mov	r2, r0
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	609a      	str	r2, [r3, #8]
	total_distance_ += distance_;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	ed93 7a05 	vldr	s14, [r3, #20]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80012cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	edc3 7a05 	vstr	s15, [r3, #20]
	monitor_distance = distance_;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	4a0b      	ldr	r2, [pc, #44]	; (8001308 <_ZN7Encoder9updateCntEv+0x130>)
 80012dc:	6013      	str	r3, [r2, #0]
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd90      	pop	{r4, r7, pc}
 80012e6:	bf00      	nop
 80012e8:	1ab1d998 	.word	0x1ab1d998
 80012ec:	3f7830b5 	.word	0x3f7830b5
 80012f0:	40010000 	.word	0x40010000
 80012f4:	47000000 	.word	0x47000000
 80012f8:	3f912547 	.word	0x3f912547
 80012fc:	20000200 	.word	0x20000200
 8001300:	40010400 	.word	0x40010400
 8001304:	20000204 	.word	0x20000204
 8001308:	200001fc 	.word	0x200001fc

0800130c <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	685a      	ldr	r2, [r3, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	601a      	str	r2, [r3, #0]
}
 8001328:	bf00      	nop
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
	return distance_;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	ee07 3a90 	vmov	s15, r3
}
 8001344:	eeb0 0a67 	vmov.f32	s0, s15
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr

08001352 <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 8001352:	b480      	push	{r7}
 8001354:	b083      	sub	sp, #12
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
	return total_distance_;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	ee07 3a90 	vmov	s15, r3
}
 8001362:	eeb0 0a67 	vmov.f32	s0, s15
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <_ZN7Encoder13clearDistanceEv>:

void Encoder::clearDistance()
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	distance_ = 0;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f04f 0200 	mov.w	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <_ZN7Encoder8clearCntEv>:

void Encoder::clearCnt()
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f04f 0200 	mov.w	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 80013a4:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <_ZN7Encoder8clearCntEv+0x3c>)
 80013a6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013aa:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80013ac:	4b07      	ldr	r3, [pc, #28]	; (80013cc <_ZN7Encoder8clearCntEv+0x40>)
 80013ae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013b2:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	609a      	str	r2, [r3, #8]
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	40010000 	.word	0x40010000
 80013cc:	40010400 	.word	0x40010400

080013d0 <_ZN7Encoder13clearTotalCntEv>:
{
	return long((total_cnt_l_ + total_cnt_r_) / 2);
}

void Encoder::clearTotalCnt()
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
	total_cnt_l_ = 0;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	60da      	str	r2, [r3, #12]
	total_cnt_r_ = 0;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	611a      	str	r2, [r3, #16]
	total_distance_ = 0;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	615a      	str	r2, [r3, #20]
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 8001406:	6839      	ldr	r1, [r7, #0]
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f000 f98f 	bl	800172c <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 800140e:	f000 f9a3 	bl	8001758 <fopen_folder_and_file>

	return ret;
 8001412:	7bfb      	ldrb	r3, [r7, #15]
}
 8001414:	4618      	mov	r0, r3
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 8001426:	4804      	ldr	r0, [pc, #16]	; (8001438 <user_fclose+0x1c>)
 8001428:	f00f f8f3 	bl	8010612 <f_close>

	return ret;
 800142c:	79fb      	ldrb	r3, [r7, #7]
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20014c34 	.word	0x20014c34

0800143c <sd_write>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write(short size, float *data, char state){
 800143c:	b590      	push	{r4, r7, lr}
 800143e:	b087      	sub	sp, #28
 8001440:	af02      	add	r7, sp, #8
 8001442:	4603      	mov	r3, r0
 8001444:	6039      	str	r1, [r7, #0]
 8001446:	80fb      	strh	r3, [r7, #6]
 8001448:	4613      	mov	r3, r2
 800144a:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 8001450:	2300      	movs	r3, #0
 8001452:	81fb      	strh	r3, [r7, #14]
 8001454:	e030      	b.n	80014b8 <sd_write+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 8001456:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	683a      	ldr	r2, [r7, #0]
 800145e:	4413      	add	r3, r2
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff f888 	bl	8000578 <__aeabi_f2d>
 8001468:	4603      	mov	r3, r0
 800146a:	460c      	mov	r4, r1
 800146c:	e9cd 3400 	strd	r3, r4, [sp]
 8001470:	4a17      	ldr	r2, [pc, #92]	; (80014d0 <sd_write+0x94>)
 8001472:	2180      	movs	r1, #128	; 0x80
 8001474:	4817      	ldr	r0, [pc, #92]	; (80014d4 <sd_write+0x98>)
 8001476:	f011 fdfb 	bl	8013070 <sniprintf>

		if(state == ADD_WRITE){
 800147a:	797b      	ldrb	r3, [r7, #5]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d106      	bne.n	800148e <sd_write+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 8001480:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <sd_write+0x9c>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	4619      	mov	r1, r3
 8001486:	4814      	ldr	r0, [pc, #80]	; (80014d8 <sd_write+0x9c>)
 8001488:	f00f f937 	bl	80106fa <f_lseek>
 800148c:	e003      	b.n	8001496 <sd_write+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 800148e:	2100      	movs	r1, #0
 8001490:	4811      	ldr	r0, [pc, #68]	; (80014d8 <sd_write+0x9c>)
 8001492:	f00f f932 	bl	80106fa <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 8001496:	480f      	ldr	r0, [pc, #60]	; (80014d4 <sd_write+0x98>)
 8001498:	f7fe feb2 	bl	8000200 <strlen>
 800149c:	4602      	mov	r2, r0
 800149e:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <sd_write+0xa0>)
 80014a0:	490c      	ldr	r1, [pc, #48]	; (80014d4 <sd_write+0x98>)
 80014a2:	480d      	ldr	r0, [pc, #52]	; (80014d8 <sd_write+0x9c>)
 80014a4:	f00e fea3 	bl	80101ee <f_write>

		bufclear();	//書き込み用のバッファをクリア
 80014a8:	f000 f970 	bl	800178c <bufclear>
	for(short i = 0 ; i < size; i++){
 80014ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	3301      	adds	r3, #1
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	81fb      	strh	r3, [r7, #14]
 80014b8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80014bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	dbc8      	blt.n	8001456 <sd_write+0x1a>
	}
	return ret;
 80014c4:	7b7b      	ldrb	r3, [r7, #13]
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3714      	adds	r7, #20
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd90      	pop	{r4, r7, pc}
 80014ce:	bf00      	nop
 80014d0:	08017110 	.word	0x08017110
 80014d4:	20014ba4 	.word	0x20014ba4
 80014d8:	20014c34 	.word	0x20014c34
 80014dc:	20014c24 	.word	0x20014c24

080014e0 <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 80014e0:	b590      	push	{r4, r7, lr}
 80014e2:	b089      	sub	sp, #36	; 0x24
 80014e4:	af02      	add	r7, sp, #8
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	603b      	str	r3, [r7, #0]
 80014ec:	4613      	mov	r3, r2
 80014ee:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 80014f4:	68b9      	ldr	r1, [r7, #8]
 80014f6:	68f8      	ldr	r0, [r7, #12]
 80014f8:	f000 f918 	bl	800172c <create_path>

	if(state == OVER_WRITE){
 80014fc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001500:	2b00      	cmp	r3, #0
 8001502:	d108      	bne.n	8001516 <sd_write_array_float+0x36>
		f_chdir(dirpath);
 8001504:	4822      	ldr	r0, [pc, #136]	; (8001590 <sd_write_array_float+0xb0>)
 8001506:	f00f f8ae 	bl	8010666 <f_chdir>
		f_unlink(filepath);	//	一回消す
 800150a:	4822      	ldr	r0, [pc, #136]	; (8001594 <sd_write_array_float+0xb4>)
 800150c:	f00f fb19 	bl	8010b42 <f_unlink>
		f_chdir("..");
 8001510:	4821      	ldr	r0, [pc, #132]	; (8001598 <sd_write_array_float+0xb8>)
 8001512:	f00f f8a8 	bl	8010666 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 8001516:	f000 f91f 	bl	8001758 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 800151a:	2300      	movs	r3, #0
 800151c:	82fb      	strh	r3, [r7, #22]
 800151e:	e028      	b.n	8001572 <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 8001520:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	683a      	ldr	r2, [r7, #0]
 8001528:	4413      	add	r3, r2
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff f823 	bl	8000578 <__aeabi_f2d>
 8001532:	4603      	mov	r3, r0
 8001534:	460c      	mov	r4, r1
 8001536:	e9cd 3400 	strd	r3, r4, [sp]
 800153a:	4a18      	ldr	r2, [pc, #96]	; (800159c <sd_write_array_float+0xbc>)
 800153c:	2180      	movs	r1, #128	; 0x80
 800153e:	4818      	ldr	r0, [pc, #96]	; (80015a0 <sd_write_array_float+0xc0>)
 8001540:	f011 fd96 	bl	8013070 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 8001544:	4b17      	ldr	r3, [pc, #92]	; (80015a4 <sd_write_array_float+0xc4>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	4619      	mov	r1, r3
 800154a:	4816      	ldr	r0, [pc, #88]	; (80015a4 <sd_write_array_float+0xc4>)
 800154c:	f00f f8d5 	bl	80106fa <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 8001550:	4813      	ldr	r0, [pc, #76]	; (80015a0 <sd_write_array_float+0xc0>)
 8001552:	f7fe fe55 	bl	8000200 <strlen>
 8001556:	4602      	mov	r2, r0
 8001558:	4b13      	ldr	r3, [pc, #76]	; (80015a8 <sd_write_array_float+0xc8>)
 800155a:	4911      	ldr	r1, [pc, #68]	; (80015a0 <sd_write_array_float+0xc0>)
 800155c:	4811      	ldr	r0, [pc, #68]	; (80015a4 <sd_write_array_float+0xc4>)
 800155e:	f00e fe46 	bl	80101ee <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 8001562:	f000 f913 	bl	800178c <bufclear>
	for(short i = 0 ; i < size; i++){
 8001566:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800156a:	b29b      	uxth	r3, r3
 800156c:	3301      	adds	r3, #1
 800156e:	b29b      	uxth	r3, r3
 8001570:	82fb      	strh	r3, [r7, #22]
 8001572:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001576:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800157a:	429a      	cmp	r2, r3
 800157c:	dbd0      	blt.n	8001520 <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 800157e:	4809      	ldr	r0, [pc, #36]	; (80015a4 <sd_write_array_float+0xc4>)
 8001580:	f00f f847 	bl	8010612 <f_close>

	return ret;
 8001584:	7d7b      	ldrb	r3, [r7, #21]
}
 8001586:	4618      	mov	r0, r3
 8001588:	371c      	adds	r7, #28
 800158a:	46bd      	mov	sp, r7
 800158c:	bd90      	pop	{r4, r7, pc}
 800158e:	bf00      	nop
 8001590:	20014aa4 	.word	0x20014aa4
 8001594:	20013960 	.word	0x20013960
 8001598:	08017120 	.word	0x08017120
 800159c:	08017110 	.word	0x08017110
 80015a0:	20014ba4 	.word	0x20014ba4
 80015a4:	20014c34 	.word	0x20014c34
 80015a8:	20014c24 	.word	0x20014c24

080015ac <sd_write_array_int>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_int(const char *p_folder_name, const char *p_file_name, short size, int *data, char state){
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	603b      	str	r3, [r7, #0]
 80015b8:	4613      	mov	r3, r2
 80015ba:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 80015c0:	68b9      	ldr	r1, [r7, #8]
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f000 f8b2 	bl	800172c <create_path>

	if(state == OVER_WRITE){
 80015c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d108      	bne.n	80015e2 <sd_write_array_int+0x36>
		f_chdir(dirpath);
 80015d0:	481e      	ldr	r0, [pc, #120]	; (800164c <sd_write_array_int+0xa0>)
 80015d2:	f00f f848 	bl	8010666 <f_chdir>
		f_unlink(filepath);	//一回消す
 80015d6:	481e      	ldr	r0, [pc, #120]	; (8001650 <sd_write_array_int+0xa4>)
 80015d8:	f00f fab3 	bl	8010b42 <f_unlink>
		f_chdir("..");
 80015dc:	481d      	ldr	r0, [pc, #116]	; (8001654 <sd_write_array_int+0xa8>)
 80015de:	f00f f842 	bl	8010666 <f_chdir>
	}

	fopen_folder_and_file();	//書き込むファイルを選択
 80015e2:	f000 f8b9 	bl	8001758 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 80015e6:	2300      	movs	r3, #0
 80015e8:	82fb      	strh	r3, [r7, #22]
 80015ea:	e021      	b.n	8001630 <sd_write_array_int+0x84>
		snprintf(buffer, BUFF_SIZE, "%d\n", *(data + i));	//floatをstringに変換
 80015ec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	4413      	add	r3, r2
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a17      	ldr	r2, [pc, #92]	; (8001658 <sd_write_array_int+0xac>)
 80015fa:	2180      	movs	r1, #128	; 0x80
 80015fc:	4817      	ldr	r0, [pc, #92]	; (800165c <sd_write_array_int+0xb0>)
 80015fe:	f011 fd37 	bl	8013070 <sniprintf>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
		}
*/
		f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 8001602:	4b17      	ldr	r3, [pc, #92]	; (8001660 <sd_write_array_int+0xb4>)
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	4619      	mov	r1, r3
 8001608:	4815      	ldr	r0, [pc, #84]	; (8001660 <sd_write_array_int+0xb4>)
 800160a:	f00f f876 	bl	80106fa <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 800160e:	4813      	ldr	r0, [pc, #76]	; (800165c <sd_write_array_int+0xb0>)
 8001610:	f7fe fdf6 	bl	8000200 <strlen>
 8001614:	4602      	mov	r2, r0
 8001616:	4b13      	ldr	r3, [pc, #76]	; (8001664 <sd_write_array_int+0xb8>)
 8001618:	4910      	ldr	r1, [pc, #64]	; (800165c <sd_write_array_int+0xb0>)
 800161a:	4811      	ldr	r0, [pc, #68]	; (8001660 <sd_write_array_int+0xb4>)
 800161c:	f00e fde7 	bl	80101ee <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001620:	f000 f8b4 	bl	800178c <bufclear>
	for(short i = 0 ; i < size; i++){
 8001624:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001628:	b29b      	uxth	r3, r3
 800162a:	3301      	adds	r3, #1
 800162c:	b29b      	uxth	r3, r3
 800162e:	82fb      	strh	r3, [r7, #22]
 8001630:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001634:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001638:	429a      	cmp	r2, r3
 800163a:	dbd7      	blt.n	80015ec <sd_write_array_int+0x40>
	}

	f_close(&fil);	//ファイル閉じる
 800163c:	4808      	ldr	r0, [pc, #32]	; (8001660 <sd_write_array_int+0xb4>)
 800163e:	f00e ffe8 	bl	8010612 <f_close>

	return ret;
 8001642:	7d7b      	ldrb	r3, [r7, #21]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3718      	adds	r7, #24
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20014aa4 	.word	0x20014aa4
 8001650:	20013960 	.word	0x20013960
 8001654:	08017120 	.word	0x08017120
 8001658:	08017124 	.word	0x08017124
 800165c:	20014ba4 	.word	0x20014ba4
 8001660:	20014c34 	.word	0x20014c34
 8001664:	20014c24 	.word	0x20014c24

08001668 <sd_read_array_int>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_int(const char  *p_folder_name, const char *p_file_name, short size, int *data){
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	603b      	str	r3, [r7, #0]
 8001674:	4613      	mov	r3, r2
 8001676:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	757b      	strb	r3, [r7, #21]
	short i = 0;
 800167c:	2300      	movs	r3, #0
 800167e:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001680:	68b9      	ldr	r1, [r7, #8]
 8001682:	68f8      	ldr	r0, [r7, #12]
 8001684:	f000 f852 	bl	800172c <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001688:	f000 f866 	bl	8001758 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800168c:	e019      	b.n	80016c2 <sd_read_array_int+0x5a>
		sscanf(buffer, "%d", data + i);
 800168e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	683a      	ldr	r2, [r7, #0]
 8001696:	4413      	add	r3, r2
 8001698:	461a      	mov	r2, r3
 800169a:	4913      	ldr	r1, [pc, #76]	; (80016e8 <sd_read_array_int+0x80>)
 800169c:	4813      	ldr	r0, [pc, #76]	; (80016ec <sd_read_array_int+0x84>)
 800169e:	f011 fd3b 	bl	8013118 <siscanf>
		i++;
 80016a2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	3301      	adds	r3, #1
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 80016ae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80016b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	db03      	blt.n	80016c2 <sd_read_array_int+0x5a>
 80016ba:	88fb      	ldrh	r3, [r7, #6]
 80016bc:	3b01      	subs	r3, #1
 80016be:	b29b      	uxth	r3, r3
 80016c0:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80016c2:	4a0b      	ldr	r2, [pc, #44]	; (80016f0 <sd_read_array_int+0x88>)
 80016c4:	2180      	movs	r1, #128	; 0x80
 80016c6:	4809      	ldr	r0, [pc, #36]	; (80016ec <sd_read_array_int+0x84>)
 80016c8:	f00f fc16 	bl	8010ef8 <f_gets>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1dd      	bne.n	800168e <sd_read_array_int+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80016d2:	f000 f85b 	bl	800178c <bufclear>

	f_close(&fil);	//ファイル閉じる
 80016d6:	4806      	ldr	r0, [pc, #24]	; (80016f0 <sd_read_array_int+0x88>)
 80016d8:	f00e ff9b 	bl	8010612 <f_close>

	return ret;
 80016dc:	7d7b      	ldrb	r3, [r7, #21]
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3718      	adds	r7, #24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	08017128 	.word	0x08017128
 80016ec:	20014ba4 	.word	0x20014ba4
 80016f0:	20014c34 	.word	0x20014c34

080016f4 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80016fa:	2300      	movs	r3, #0
 80016fc:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 80016fe:	2201      	movs	r2, #1
 8001700:	4908      	ldr	r1, [pc, #32]	; (8001724 <sd_mount+0x30>)
 8001702:	4809      	ldr	r0, [pc, #36]	; (8001728 <sd_mount+0x34>)
 8001704:	f00e fa02 	bl	800fb0c <f_mount>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d102      	bne.n	8001714 <sd_mount+0x20>
 800170e:	2301      	movs	r3, #1
 8001710:	71fb      	strb	r3, [r7, #7]
 8001712:	e001      	b.n	8001718 <sd_mount+0x24>
	else ret = 0;
 8001714:	2300      	movs	r3, #0
 8001716:	71fb      	strb	r3, [r7, #7]

	return ret;
 8001718:	79fb      	ldrb	r3, [r7, #7]
}
 800171a:	4618      	mov	r0, r3
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	0801712c 	.word	0x0801712c
 8001728:	20013a60 	.word	0x20013a60

0800172c <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 8001736:	6879      	ldr	r1, [r7, #4]
 8001738:	4805      	ldr	r0, [pc, #20]	; (8001750 <create_path+0x24>)
 800173a:	f011 fd5c 	bl	80131f6 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 800173e:	6839      	ldr	r1, [r7, #0]
 8001740:	4804      	ldr	r0, [pc, #16]	; (8001754 <create_path+0x28>)
 8001742:	f011 fd58 	bl	80131f6 <strcpy>

}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20014aa4 	.word	0x20014aa4
 8001754:	20013960 	.word	0x20013960

08001758 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 800175c:	4807      	ldr	r0, [pc, #28]	; (800177c <fopen_folder_and_file+0x24>)
 800175e:	f00f fab1 	bl	8010cc4 <f_mkdir>

	f_chdir(dirpath);
 8001762:	4806      	ldr	r0, [pc, #24]	; (800177c <fopen_folder_and_file+0x24>)
 8001764:	f00e ff7f 	bl	8010666 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001768:	2213      	movs	r2, #19
 800176a:	4905      	ldr	r1, [pc, #20]	; (8001780 <fopen_folder_and_file+0x28>)
 800176c:	4805      	ldr	r0, [pc, #20]	; (8001784 <fopen_folder_and_file+0x2c>)
 800176e:	f00e fa13 	bl	800fb98 <f_open>

	f_chdir("..");
 8001772:	4805      	ldr	r0, [pc, #20]	; (8001788 <fopen_folder_and_file+0x30>)
 8001774:	f00e ff77 	bl	8010666 <f_chdir>


}
 8001778:	bf00      	nop
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20014aa4 	.word	0x20014aa4
 8001780:	20013960 	.word	0x20013960
 8001784:	20014c34 	.word	0x20014c34
 8001788:	08017120 	.word	0x08017120

0800178c <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 8001792:	2300      	movs	r3, #0
 8001794:	607b      	str	r3, [r7, #4]
 8001796:	e007      	b.n	80017a8 <bufclear+0x1c>
		buffer[i] = '\0';
 8001798:	4a08      	ldr	r2, [pc, #32]	; (80017bc <bufclear+0x30>)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4413      	add	r3, r2
 800179e:	2200      	movs	r2, #0
 80017a0:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	3301      	adds	r3, #1
 80017a6:	607b      	str	r3, [r7, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2b7f      	cmp	r3, #127	; 0x7f
 80017ac:	ddf4      	ble.n	8001798 <bufclear+0xc>
	}
}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	20014ba4 	.word	0x20014ba4

080017c0 <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 80017d4:	2200      	movs	r2, #0
 80017d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017da:	480e      	ldr	r0, [pc, #56]	; (8001814 <read_byte+0x54>)
 80017dc:	f005 fce6 	bl	80071ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 80017e0:	f107 010f 	add.w	r1, r7, #15
 80017e4:	2364      	movs	r3, #100	; 0x64
 80017e6:	2201      	movs	r2, #1
 80017e8:	480b      	ldr	r0, [pc, #44]	; (8001818 <read_byte+0x58>)
 80017ea:	f008 fea7 	bl	800a53c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 80017ee:	f107 010e 	add.w	r1, r7, #14
 80017f2:	2364      	movs	r3, #100	; 0x64
 80017f4:	2201      	movs	r2, #1
 80017f6:	4808      	ldr	r0, [pc, #32]	; (8001818 <read_byte+0x58>)
 80017f8:	f008 ffd4 	bl	800a7a4 <HAL_SPI_Receive>
	CS_SET;
 80017fc:	2201      	movs	r2, #1
 80017fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001802:	4804      	ldr	r0, [pc, #16]	; (8001814 <read_byte+0x54>)
 8001804:	f005 fcd2 	bl	80071ac <HAL_GPIO_WritePin>

	return val;
 8001808:	7bbb      	ldrb	r3, [r7, #14]
}
 800180a:	4618      	mov	r0, r3
 800180c:	3710      	adds	r7, #16
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40020400 	.word	0x40020400
 8001818:	20015cd0 	.word	0x20015cd0

0800181c <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	460a      	mov	r2, r1
 8001826:	71fb      	strb	r3, [r7, #7]
 8001828:	4613      	mov	r3, r2
 800182a:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001832:	b2db      	uxtb	r3, r3
 8001834:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001836:	2200      	movs	r2, #0
 8001838:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800183c:	480c      	ldr	r0, [pc, #48]	; (8001870 <write_byte+0x54>)
 800183e:	f005 fcb5 	bl	80071ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001842:	f107 010f 	add.w	r1, r7, #15
 8001846:	2364      	movs	r3, #100	; 0x64
 8001848:	2201      	movs	r2, #1
 800184a:	480a      	ldr	r0, [pc, #40]	; (8001874 <write_byte+0x58>)
 800184c:	f008 fe76 	bl	800a53c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001850:	1db9      	adds	r1, r7, #6
 8001852:	2364      	movs	r3, #100	; 0x64
 8001854:	2201      	movs	r2, #1
 8001856:	4807      	ldr	r0, [pc, #28]	; (8001874 <write_byte+0x58>)
 8001858:	f008 fe70 	bl	800a53c <HAL_SPI_Transmit>
	CS_SET;
 800185c:	2201      	movs	r2, #1
 800185e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001862:	4803      	ldr	r0, [pc, #12]	; (8001870 <write_byte+0x54>)
 8001864:	f005 fca2 	bl	80071ac <HAL_GPIO_WritePin>
}
 8001868:	bf00      	nop
 800186a:	3710      	adds	r7, #16
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40020400 	.word	0x40020400
 8001874:	20015cd0 	.word	0x20015cd0

08001878 <IMU_init>:

uint16_t IMU_init() {
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 800187e:	2300      	movs	r3, #0
 8001880:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001882:	2000      	movs	r0, #0
 8001884:	f7ff ff9c 	bl	80017c0 <read_byte>
 8001888:	4603      	mov	r3, r0
 800188a:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 800188c:	797b      	ldrb	r3, [r7, #5]
 800188e:	2be0      	cmp	r3, #224	; 0xe0
 8001890:	d119      	bne.n	80018c6 <IMU_init+0x4e>
		ret = 1;
 8001892:	2301      	movs	r3, #1
 8001894:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 8001896:	2101      	movs	r1, #1
 8001898:	2006      	movs	r0, #6
 800189a:	f7ff ffbf 	bl	800181c <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 800189e:	2110      	movs	r1, #16
 80018a0:	2003      	movs	r0, #3
 80018a2:	f7ff ffbb 	bl	800181c <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 80018a6:	2120      	movs	r1, #32
 80018a8:	207f      	movs	r0, #127	; 0x7f
 80018aa:	f7ff ffb7 	bl	800181c <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 80018ae:	2106      	movs	r1, #6
 80018b0:	2001      	movs	r0, #1
 80018b2:	f7ff ffb3 	bl	800181c <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 80018b6:	2106      	movs	r1, #6
 80018b8:	2014      	movs	r0, #20
 80018ba:	f7ff ffaf 	bl	800181c <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 80018be:	2100      	movs	r1, #0
 80018c0:	207f      	movs	r0, #127	; 0x7f
 80018c2:	f7ff ffab 	bl	800181c <write_byte>
	}
	return ret;
 80018c6:	88fb      	ldrh	r3, [r7, #6]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <read_gyro_data>:

void read_gyro_data() {
 80018d0:	b598      	push	{r3, r4, r7, lr}
 80018d2:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 80018d4:	2033      	movs	r0, #51	; 0x33
 80018d6:	f7ff ff73 	bl	80017c0 <read_byte>
 80018da:	4603      	mov	r3, r0
 80018dc:	021b      	lsls	r3, r3, #8
 80018de:	b21c      	sxth	r4, r3
 80018e0:	2034      	movs	r0, #52	; 0x34
 80018e2:	f7ff ff6d 	bl	80017c0 <read_byte>
 80018e6:	4603      	mov	r3, r0
 80018e8:	b21b      	sxth	r3, r3
 80018ea:	4323      	orrs	r3, r4
 80018ec:	b21a      	sxth	r2, r3
 80018ee:	4b11      	ldr	r3, [pc, #68]	; (8001934 <read_gyro_data+0x64>)
 80018f0:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 80018f2:	2035      	movs	r0, #53	; 0x35
 80018f4:	f7ff ff64 	bl	80017c0 <read_byte>
 80018f8:	4603      	mov	r3, r0
 80018fa:	021b      	lsls	r3, r3, #8
 80018fc:	b21c      	sxth	r4, r3
 80018fe:	2036      	movs	r0, #54	; 0x36
 8001900:	f7ff ff5e 	bl	80017c0 <read_byte>
 8001904:	4603      	mov	r3, r0
 8001906:	b21b      	sxth	r3, r3
 8001908:	4323      	orrs	r3, r4
 800190a:	b21a      	sxth	r2, r3
 800190c:	4b0a      	ldr	r3, [pc, #40]	; (8001938 <read_gyro_data+0x68>)
 800190e:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001910:	2037      	movs	r0, #55	; 0x37
 8001912:	f7ff ff55 	bl	80017c0 <read_byte>
 8001916:	4603      	mov	r3, r0
 8001918:	021b      	lsls	r3, r3, #8
 800191a:	b21c      	sxth	r4, r3
 800191c:	2038      	movs	r0, #56	; 0x38
 800191e:	f7ff ff4f 	bl	80017c0 <read_byte>
 8001922:	4603      	mov	r3, r0
 8001924:	b21b      	sxth	r3, r3
 8001926:	4323      	orrs	r3, r4
 8001928:	b21a      	sxth	r2, r3
 800192a:	4b04      	ldr	r3, [pc, #16]	; (800193c <read_gyro_data+0x6c>)
 800192c:	801a      	strh	r2, [r3, #0]
}
 800192e:	bf00      	nop
 8001930:	bd98      	pop	{r3, r4, r7, pc}
 8001932:	bf00      	nop
 8001934:	20015c6c 	.word	0x20015c6c
 8001938:	20015c6a 	.word	0x20015c6a
 800193c:	20015c64 	.word	0x20015c64

08001940 <read_accel_data>:

void read_accel_data() {
 8001940:	b598      	push	{r3, r4, r7, lr}
 8001942:	af00      	add	r7, sp, #0
	xa = ((uint16_t)read_byte(0x2D) << 8) | ((uint16_t)read_byte(0x2E));
 8001944:	202d      	movs	r0, #45	; 0x2d
 8001946:	f7ff ff3b 	bl	80017c0 <read_byte>
 800194a:	4603      	mov	r3, r0
 800194c:	021b      	lsls	r3, r3, #8
 800194e:	b21c      	sxth	r4, r3
 8001950:	202e      	movs	r0, #46	; 0x2e
 8001952:	f7ff ff35 	bl	80017c0 <read_byte>
 8001956:	4603      	mov	r3, r0
 8001958:	b21b      	sxth	r3, r3
 800195a:	4323      	orrs	r3, r4
 800195c:	b21a      	sxth	r2, r3
 800195e:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <read_accel_data+0x64>)
 8001960:	801a      	strh	r2, [r3, #0]
	ya = ((uint16_t)read_byte(0x2F) << 8) | ((uint16_t)read_byte(0x30));
 8001962:	202f      	movs	r0, #47	; 0x2f
 8001964:	f7ff ff2c 	bl	80017c0 <read_byte>
 8001968:	4603      	mov	r3, r0
 800196a:	021b      	lsls	r3, r3, #8
 800196c:	b21c      	sxth	r4, r3
 800196e:	2030      	movs	r0, #48	; 0x30
 8001970:	f7ff ff26 	bl	80017c0 <read_byte>
 8001974:	4603      	mov	r3, r0
 8001976:	b21b      	sxth	r3, r3
 8001978:	4323      	orrs	r3, r4
 800197a:	b21a      	sxth	r2, r3
 800197c:	4b0a      	ldr	r3, [pc, #40]	; (80019a8 <read_accel_data+0x68>)
 800197e:	801a      	strh	r2, [r3, #0]
	za = ((uint16_t)read_byte(0x31) << 8) | ((uint16_t)read_byte(0x32));
 8001980:	2031      	movs	r0, #49	; 0x31
 8001982:	f7ff ff1d 	bl	80017c0 <read_byte>
 8001986:	4603      	mov	r3, r0
 8001988:	021b      	lsls	r3, r3, #8
 800198a:	b21c      	sxth	r4, r3
 800198c:	2032      	movs	r0, #50	; 0x32
 800198e:	f7ff ff17 	bl	80017c0 <read_byte>
 8001992:	4603      	mov	r3, r0
 8001994:	b21b      	sxth	r3, r3
 8001996:	4323      	orrs	r3, r4
 8001998:	b21a      	sxth	r2, r3
 800199a:	4b04      	ldr	r3, [pc, #16]	; (80019ac <read_accel_data+0x6c>)
 800199c:	801a      	strh	r2, [r3, #0]
}
 800199e:	bf00      	nop
 80019a0:	bd98      	pop	{r3, r4, r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20015c68 	.word	0x20015c68
 80019a8:	20015c6e 	.word	0x20015c6e
 80019ac:	20015c66 	.word	0x20015c66

080019b0 <_ZN3IMUC1Ev>:
#include "ICM_20648.h"
#include "stm32f4xx_hal.h"
#include "stdio.h"
#include <vector>

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 80019b0:	b490      	push	{r4, r7}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	801a      	strh	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	805a      	strh	r2, [r3, #2]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	809a      	strh	r2, [r3, #4]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	80da      	strh	r2, [r3, #6]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	811a      	strh	r2, [r3, #8]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	815a      	strh	r2, [r3, #10]
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	f04f 0300 	mov.w	r3, #0
 80019e2:	f04f 0400 	mov.w	r4, #0
 80019e6:	e9c2 3404 	strd	r3, r4, [r2, #16]
{

}
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4618      	mov	r0, r3
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bc90      	pop	{r4, r7}
 80019f4:	4770      	bx	lr
	...

080019f8 <_ZN3IMU4initEv>:

void IMU::init()
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001a00:	f7ff ff3a 	bl	8001878 <IMU_init>
 8001a04:	4603      	mov	r3, r0
 8001a06:	81fb      	strh	r3, [r7, #14]
	printf("who i am: %d\n", who_i_am);
 8001a08:	89fb      	ldrh	r3, [r7, #14]
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4803      	ldr	r0, [pc, #12]	; (8001a1c <_ZN3IMU4initEv+0x24>)
 8001a0e:	f011 fa99 	bl	8012f44 <iprintf>

}
 8001a12:	bf00      	nop
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	08017130 	.word	0x08017130

08001a20 <_ZN3IMU12updateValuesEv>:

void IMU::updateValues()
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001a28:	f7ff ff52 	bl	80018d0 <read_gyro_data>
	read_accel_data();
 8001a2c:	f7ff ff88 	bl	8001940 <read_accel_data>

	xa_ = xa;
 8001a30:	4b10      	ldr	r3, [pc, #64]	; (8001a74 <_ZN3IMU12updateValuesEv+0x54>)
 8001a32:	881b      	ldrh	r3, [r3, #0]
 8001a34:	b21a      	sxth	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	801a      	strh	r2, [r3, #0]
	ya_ = ya;
 8001a3a:	4b0f      	ldr	r3, [pc, #60]	; (8001a78 <_ZN3IMU12updateValuesEv+0x58>)
 8001a3c:	881b      	ldrh	r3, [r3, #0]
 8001a3e:	b21a      	sxth	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	805a      	strh	r2, [r3, #2]
	za_ = za;
 8001a44:	4b0d      	ldr	r3, [pc, #52]	; (8001a7c <_ZN3IMU12updateValuesEv+0x5c>)
 8001a46:	881b      	ldrh	r3, [r3, #0]
 8001a48:	b21a      	sxth	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	809a      	strh	r2, [r3, #4]
	xg_ = xg;
 8001a4e:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <_ZN3IMU12updateValuesEv+0x60>)
 8001a50:	881b      	ldrh	r3, [r3, #0]
 8001a52:	b21a      	sxth	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001a58:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <_ZN3IMU12updateValuesEv+0x64>)
 8001a5a:	881b      	ldrh	r3, [r3, #0]
 8001a5c:	b21a      	sxth	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001a62:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <_ZN3IMU12updateValuesEv+0x68>)
 8001a64:	881b      	ldrh	r3, [r3, #0]
 8001a66:	b21a      	sxth	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	815a      	strh	r2, [r3, #10]

}
 8001a6c:	bf00      	nop
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20015c68 	.word	0x20015c68
 8001a78:	20015c6e 	.word	0x20015c6e
 8001a7c:	20015c66 	.word	0x20015c66
 8001a80:	20015c6c 	.word	0x20015c6c
 8001a84:	20015c6a 	.word	0x20015c6a
 8001a88:	20015c64 	.word	0x20015c64

08001a8c <_ZN3IMU8getOmegaEv>:

double IMU::getOmega()
{
 8001a8c:	b590      	push	{r4, r7, lr}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
	return double(zg_) - offset_;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7fe fd5a 	bl	8000554 <__aeabi_i2d>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	4623      	mov	r3, r4
 8001aaa:	f7fe fc05 	bl	80002b8 <__aeabi_dsub>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	460c      	mov	r4, r1
 8001ab2:	ec44 3b17 	vmov	d7, r3, r4

}
 8001ab6:	eeb0 0a47 	vmov.f32	s0, s14
 8001aba:	eef0 0a67 	vmov.f32	s1, s15
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd90      	pop	{r4, r7, pc}

08001ac4 <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001ac4:	b590      	push	{r4, r7, lr}
 8001ac6:	f5ad 5dfb 	sub.w	sp, sp, #8032	; 0x1f60
 8001aca:	b081      	sub	sp, #4
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	f107 0320 	add.w	r3, r7, #32
 8001ad2:	3b1c      	subs	r3, #28
 8001ad4:	6018      	str	r0, [r3, #0]
	HAL_Delay(1000);
 8001ad6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ada:	f004 f8d1 	bl	8005c80 <HAL_Delay>
	//led.fullColor('G');

	//std::vector<float> zg_vals;
	double zg_vals[1000];
	for(uint16_t i = 0; i < 1000; i++){
 8001ade:	2300      	movs	r3, #0
 8001ae0:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8001ae4:	f102 021e 	add.w	r2, r2, #30
 8001ae8:	8013      	strh	r3, [r2, #0]
 8001aea:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8001aee:	f103 031e 	add.w	r3, r3, #30
 8001af2:	881b      	ldrh	r3, [r3, #0]
 8001af4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001af8:	d225      	bcs.n	8001b46 <_ZN3IMU11calibrationEv+0x82>
		zg_vals[i] = double(zg_);
 8001afa:	f107 0320 	add.w	r3, r7, #32
 8001afe:	3b1c      	subs	r3, #28
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b06:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8001b0a:	f102 021e 	add.w	r2, r2, #30
 8001b0e:	8814      	ldrh	r4, [r2, #0]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7fe fd1f 	bl	8000554 <__aeabi_i2d>
 8001b16:	460a      	mov	r2, r1
 8001b18:	4601      	mov	r1, r0
 8001b1a:	f107 0320 	add.w	r3, r7, #32
 8001b1e:	3b18      	subs	r3, #24
 8001b20:	00e0      	lsls	r0, r4, #3
 8001b22:	4403      	add	r3, r0
 8001b24:	e9c3 1200 	strd	r1, r2, [r3]
		HAL_Delay(2);
 8001b28:	2002      	movs	r0, #2
 8001b2a:	f004 f8a9 	bl	8005c80 <HAL_Delay>
	for(uint16_t i = 0; i < 1000; i++){
 8001b2e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8001b32:	f103 031e 	add.w	r3, r3, #30
 8001b36:	881b      	ldrh	r3, [r3, #0]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8001b3e:	f102 021e 	add.w	r2, r2, #30
 8001b42:	8013      	strh	r3, [r2, #0]
 8001b44:	e7d1      	b.n	8001aea <_ZN3IMU11calibrationEv+0x26>
	}

	float sum;
	for(const auto &v : zg_vals){
 8001b46:	f107 0320 	add.w	r3, r7, #32
 8001b4a:	3b18      	subs	r3, #24
 8001b4c:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8001b50:	f102 0210 	add.w	r2, r2, #16
 8001b54:	6013      	str	r3, [r2, #0]
 8001b56:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8001b5a:	f103 0310 	add.w	r3, r3, #16
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8001b64:	f102 0214 	add.w	r2, r2, #20
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8001b6e:	f103 0310 	add.w	r3, r3, #16
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
 8001b78:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8001b7c:	f102 020c 	add.w	r2, r2, #12
 8001b80:	6013      	str	r3, [r2, #0]
 8001b82:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8001b86:	f103 0314 	add.w	r3, r3, #20
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8001b90:	f103 030c 	add.w	r3, r3, #12
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d033      	beq.n	8001c02 <_ZN3IMU11calibrationEv+0x13e>
 8001b9a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8001b9e:	f103 0314 	add.w	r3, r3, #20
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8001ba8:	f102 0208 	add.w	r2, r2, #8
 8001bac:	6013      	str	r3, [r2, #0]
		sum += v;
 8001bae:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8001bb2:	f103 0318 	add.w	r3, r3, #24
 8001bb6:	6818      	ldr	r0, [r3, #0]
 8001bb8:	f7fe fcde 	bl	8000578 <__aeabi_f2d>
 8001bbc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8001bc0:	f103 0308 	add.w	r3, r3, #8
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001bca:	461a      	mov	r2, r3
 8001bcc:	4623      	mov	r3, r4
 8001bce:	f7fe fb75 	bl	80002bc <__adddf3>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	460c      	mov	r4, r1
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	4621      	mov	r1, r4
 8001bda:	f7ff f81d 	bl	8000c18 <__aeabi_d2f>
 8001bde:	4603      	mov	r3, r0
 8001be0:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8001be4:	f102 0218 	add.w	r2, r2, #24
 8001be8:	6013      	str	r3, [r2, #0]
	for(const auto &v : zg_vals){
 8001bea:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8001bee:	f103 0314 	add.w	r3, r3, #20
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	3308      	adds	r3, #8
 8001bf6:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8001bfa:	f102 0214 	add.w	r2, r2, #20
 8001bfe:	6013      	str	r3, [r2, #0]
 8001c00:	e7bf      	b.n	8001b82 <_ZN3IMU11calibrationEv+0xbe>
	}

	offset_ = sum / 1000;
 8001c02:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8001c06:	f103 0318 	add.w	r3, r3, #24
 8001c0a:	edd3 7a00 	vldr	s15, [r3]
 8001c0e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001c3c <_ZN3IMU11calibrationEv+0x178>
 8001c12:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001c16:	ee16 0a90 	vmov	r0, s13
 8001c1a:	f7fe fcad 	bl	8000578 <__aeabi_f2d>
 8001c1e:	460a      	mov	r2, r1
 8001c20:	4601      	mov	r1, r0
 8001c22:	f107 0320 	add.w	r3, r7, #32
 8001c26:	3b1c      	subs	r3, #28
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	e9c3 1204 	strd	r1, r2, [r3, #16]

	//printf("imu offset %f", offset_);

	//led.fullColor('B');
}
 8001c2e:	bf00      	nop
 8001c30:	f507 57fb 	add.w	r7, r7, #8032	; 0x1f60
 8001c34:	3704      	adds	r7, #4
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd90      	pop	{r4, r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	447a0000 	.word	0x447a0000

08001c40 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af02      	add	r7, sp, #8
 8001c46:	4603      	mov	r3, r0
 8001c48:	460a      	mov	r2, r1
 8001c4a:	71fb      	strb	r3, [r7, #7]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001c50:	79bb      	ldrb	r3, [r7, #6]
 8001c52:	b299      	uxth	r1, r3
 8001c54:	1dfa      	adds	r2, r7, #7
 8001c56:	2364      	movs	r3, #100	; 0x64
 8001c58:	9300      	str	r3, [sp, #0]
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	480c      	ldr	r0, [pc, #48]	; (8001c90 <INA260_read+0x50>)
 8001c5e:	f005 fc0f 	bl	8007480 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001c62:	79bb      	ldrb	r3, [r7, #6]
 8001c64:	b299      	uxth	r1, r3
 8001c66:	f107 020c 	add.w	r2, r7, #12
 8001c6a:	2364      	movs	r3, #100	; 0x64
 8001c6c:	9300      	str	r3, [sp, #0]
 8001c6e:	2302      	movs	r3, #2
 8001c70:	4807      	ldr	r0, [pc, #28]	; (8001c90 <INA260_read+0x50>)
 8001c72:	f005 fd03 	bl	800767c <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001c76:	7b3b      	ldrb	r3, [r7, #12]
 8001c78:	021b      	lsls	r3, r3, #8
 8001c7a:	b21a      	sxth	r2, r3
 8001c7c:	7b7b      	ldrb	r3, [r7, #13]
 8001c7e:	b21b      	sxth	r3, r3
 8001c80:	4313      	orrs	r3, r2
 8001c82:	b21b      	sxth	r3, r3
 8001c84:	81fb      	strh	r3, [r7, #14]
	return val;
 8001c86:	89fb      	ldrh	r3, [r7, #14]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	20015e84 	.word	0x20015e84

08001c94 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001c94:	b590      	push	{r4, r7, lr}
 8001c96:	b087      	sub	sp, #28
 8001c98:	af02      	add	r7, sp, #8
 8001c9a:	4604      	mov	r4, r0
 8001c9c:	4608      	mov	r0, r1
 8001c9e:	4611      	mov	r1, r2
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4623      	mov	r3, r4
 8001ca4:	71fb      	strb	r3, [r7, #7]
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	71bb      	strb	r3, [r7, #6]
 8001caa:	460b      	mov	r3, r1
 8001cac:	717b      	strb	r3, [r7, #5]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
 8001cb4:	733b      	strb	r3, [r7, #12]
 8001cb6:	79bb      	ldrb	r3, [r7, #6]
 8001cb8:	737b      	strb	r3, [r7, #13]
 8001cba:	797b      	ldrb	r3, [r7, #5]
 8001cbc:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8001cbe:	793b      	ldrb	r3, [r7, #4]
 8001cc0:	b299      	uxth	r1, r3
 8001cc2:	f107 020c 	add.w	r2, r7, #12
 8001cc6:	2364      	movs	r3, #100	; 0x64
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	2303      	movs	r3, #3
 8001ccc:	4803      	ldr	r0, [pc, #12]	; (8001cdc <INA260_write+0x48>)
 8001cce:	f005 fbd7 	bl	8007480 <HAL_I2C_Master_Transmit>
}
 8001cd2:	bf00      	nop
 8001cd4:	3714      	adds	r7, #20
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd90      	pop	{r4, r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	20015e84 	.word	0x20015e84

08001ce0 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	71fb      	strb	r3, [r7, #7]
 8001cea:	460b      	mov	r3, r1
 8001cec:	71bb      	strb	r3, [r7, #6]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8001cf2:	797b      	ldrb	r3, [r7, #5]
 8001cf4:	79ba      	ldrb	r2, [r7, #6]
 8001cf6:	79f9      	ldrb	r1, [r7, #7]
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	f7ff ffcb 	bl	8001c94 <INA260_write>
}
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b082      	sub	sp, #8
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	461a      	mov	r2, r3
 8001d14:	21df      	movs	r1, #223	; 0xdf
 8001d16:	2000      	movs	r0, #0
 8001d18:	f7ff ffe2 	bl	8001ce0 <setConfig>
}
 8001d1c:	bf00      	nop
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
{

}
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
	...

08001d3c <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8001d48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d4c:	482a      	ldr	r0, [pc, #168]	; (8001df8 <_ZN8JoyStick8getValueEv+0xbc>)
 8001d4e:	f005 fa15 	bl	800717c <HAL_GPIO_ReadPin>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	bf0c      	ite	eq
 8001d58:	2301      	moveq	r3, #1
 8001d5a:	2300      	movne	r3, #0
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <_ZN8JoyStick8getValueEv+0x2e>
 8001d62:	89fb      	ldrh	r3, [r7, #14]
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	4823      	ldr	r0, [pc, #140]	; (8001dfc <_ZN8JoyStick8getValueEv+0xc0>)
 8001d6e:	f005 fa05 	bl	800717c <HAL_GPIO_ReadPin>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	bf0c      	ite	eq
 8001d78:	2301      	moveq	r3, #1
 8001d7a:	2300      	movne	r3, #0
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <_ZN8JoyStick8getValueEv+0x4e>
 8001d82:	89fb      	ldrh	r3, [r7, #14]
 8001d84:	f043 0302 	orr.w	r3, r3, #2
 8001d88:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 8001d8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d8e:	481a      	ldr	r0, [pc, #104]	; (8001df8 <_ZN8JoyStick8getValueEv+0xbc>)
 8001d90:	f005 f9f4 	bl	800717c <HAL_GPIO_ReadPin>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	bf0c      	ite	eq
 8001d9a:	2301      	moveq	r3, #1
 8001d9c:	2300      	movne	r3, #0
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d003      	beq.n	8001dac <_ZN8JoyStick8getValueEv+0x70>
 8001da4:	89fb      	ldrh	r3, [r7, #14]
 8001da6:	f043 0304 	orr.w	r3, r3, #4
 8001daa:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 8001dac:	2104      	movs	r1, #4
 8001dae:	4814      	ldr	r0, [pc, #80]	; (8001e00 <_ZN8JoyStick8getValueEv+0xc4>)
 8001db0:	f005 f9e4 	bl	800717c <HAL_GPIO_ReadPin>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	bf0c      	ite	eq
 8001dba:	2301      	moveq	r3, #1
 8001dbc:	2300      	movne	r3, #0
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d003      	beq.n	8001dcc <_ZN8JoyStick8getValueEv+0x90>
 8001dc4:	89fb      	ldrh	r3, [r7, #14]
 8001dc6:	f043 0308 	orr.w	r3, r3, #8
 8001dca:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 8001dcc:	2180      	movs	r1, #128	; 0x80
 8001dce:	480a      	ldr	r0, [pc, #40]	; (8001df8 <_ZN8JoyStick8getValueEv+0xbc>)
 8001dd0:	f005 f9d4 	bl	800717c <HAL_GPIO_ReadPin>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	bf0c      	ite	eq
 8001dda:	2301      	moveq	r3, #1
 8001ddc:	2300      	movne	r3, #0
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d003      	beq.n	8001dec <_ZN8JoyStick8getValueEv+0xb0>
 8001de4:	89fb      	ldrh	r3, [r7, #14]
 8001de6:	f043 0310 	orr.w	r3, r3, #16
 8001dea:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8001dec:	89fb      	ldrh	r3, [r7, #14]
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	40020c00 	.word	0x40020c00
 8001e00:	40020400 	.word	0x40020400

08001e04 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8001e10:	78fb      	ldrb	r3, [r7, #3]
 8001e12:	2b52      	cmp	r3, #82	; 0x52
 8001e14:	d112      	bne.n	8001e3c <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001e16:	2200      	movs	r2, #0
 8001e18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e1c:	4856      	ldr	r0, [pc, #344]	; (8001f78 <_ZN3LED9fullColorEc+0x174>)
 8001e1e:	f005 f9c5 	bl	80071ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001e22:	2201      	movs	r2, #1
 8001e24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e28:	4853      	ldr	r0, [pc, #332]	; (8001f78 <_ZN3LED9fullColorEc+0x174>)
 8001e2a:	f005 f9bf 	bl	80071ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e34:	4850      	ldr	r0, [pc, #320]	; (8001f78 <_ZN3LED9fullColorEc+0x174>)
 8001e36:	f005 f9b9 	bl	80071ac <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 8001e3a:	e098      	b.n	8001f6e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 8001e3c:	78fb      	ldrb	r3, [r7, #3]
 8001e3e:	2b47      	cmp	r3, #71	; 0x47
 8001e40:	d112      	bne.n	8001e68 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001e42:	2201      	movs	r2, #1
 8001e44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e48:	484b      	ldr	r0, [pc, #300]	; (8001f78 <_ZN3LED9fullColorEc+0x174>)
 8001e4a:	f005 f9af 	bl	80071ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e54:	4848      	ldr	r0, [pc, #288]	; (8001f78 <_ZN3LED9fullColorEc+0x174>)
 8001e56:	f005 f9a9 	bl	80071ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e60:	4845      	ldr	r0, [pc, #276]	; (8001f78 <_ZN3LED9fullColorEc+0x174>)
 8001e62:	f005 f9a3 	bl	80071ac <HAL_GPIO_WritePin>
}
 8001e66:	e082      	b.n	8001f6e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8001e68:	78fb      	ldrb	r3, [r7, #3]
 8001e6a:	2b42      	cmp	r3, #66	; 0x42
 8001e6c:	d112      	bne.n	8001e94 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e74:	4840      	ldr	r0, [pc, #256]	; (8001f78 <_ZN3LED9fullColorEc+0x174>)
 8001e76:	f005 f999 	bl	80071ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e80:	483d      	ldr	r0, [pc, #244]	; (8001f78 <_ZN3LED9fullColorEc+0x174>)
 8001e82:	f005 f993 	bl	80071ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001e86:	2200      	movs	r2, #0
 8001e88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e8c:	483a      	ldr	r0, [pc, #232]	; (8001f78 <_ZN3LED9fullColorEc+0x174>)
 8001e8e:	f005 f98d 	bl	80071ac <HAL_GPIO_WritePin>
}
 8001e92:	e06c      	b.n	8001f6e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8001e94:	78fb      	ldrb	r3, [r7, #3]
 8001e96:	2b43      	cmp	r3, #67	; 0x43
 8001e98:	d112      	bne.n	8001ec0 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ea0:	4835      	ldr	r0, [pc, #212]	; (8001f78 <_ZN3LED9fullColorEc+0x174>)
 8001ea2:	f005 f983 	bl	80071ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001eac:	4832      	ldr	r0, [pc, #200]	; (8001f78 <_ZN3LED9fullColorEc+0x174>)
 8001eae:	f005 f97d 	bl	80071ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001eb8:	482f      	ldr	r0, [pc, #188]	; (8001f78 <_ZN3LED9fullColorEc+0x174>)
 8001eba:	f005 f977 	bl	80071ac <HAL_GPIO_WritePin>
}
 8001ebe:	e056      	b.n	8001f6e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8001ec0:	78fb      	ldrb	r3, [r7, #3]
 8001ec2:	2b4d      	cmp	r3, #77	; 0x4d
 8001ec4:	d112      	bne.n	8001eec <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ecc:	482a      	ldr	r0, [pc, #168]	; (8001f78 <_ZN3LED9fullColorEc+0x174>)
 8001ece:	f005 f96d 	bl	80071ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ed8:	4827      	ldr	r0, [pc, #156]	; (8001f78 <_ZN3LED9fullColorEc+0x174>)
 8001eda:	f005 f967 	bl	80071ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ee4:	4824      	ldr	r0, [pc, #144]	; (8001f78 <_ZN3LED9fullColorEc+0x174>)
 8001ee6:	f005 f961 	bl	80071ac <HAL_GPIO_WritePin>
}
 8001eea:	e040      	b.n	8001f6e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 8001eec:	78fb      	ldrb	r3, [r7, #3]
 8001eee:	2b59      	cmp	r3, #89	; 0x59
 8001ef0:	d112      	bne.n	8001f18 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ef8:	481f      	ldr	r0, [pc, #124]	; (8001f78 <_ZN3LED9fullColorEc+0x174>)
 8001efa:	f005 f957 	bl	80071ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001efe:	2200      	movs	r2, #0
 8001f00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f04:	481c      	ldr	r0, [pc, #112]	; (8001f78 <_ZN3LED9fullColorEc+0x174>)
 8001f06:	f005 f951 	bl	80071ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f10:	4819      	ldr	r0, [pc, #100]	; (8001f78 <_ZN3LED9fullColorEc+0x174>)
 8001f12:	f005 f94b 	bl	80071ac <HAL_GPIO_WritePin>
}
 8001f16:	e02a      	b.n	8001f6e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8001f18:	78fb      	ldrb	r3, [r7, #3]
 8001f1a:	2b57      	cmp	r3, #87	; 0x57
 8001f1c:	d112      	bne.n	8001f44 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f24:	4814      	ldr	r0, [pc, #80]	; (8001f78 <_ZN3LED9fullColorEc+0x174>)
 8001f26:	f005 f941 	bl	80071ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f30:	4811      	ldr	r0, [pc, #68]	; (8001f78 <_ZN3LED9fullColorEc+0x174>)
 8001f32:	f005 f93b 	bl	80071ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f36:	2200      	movs	r2, #0
 8001f38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f3c:	480e      	ldr	r0, [pc, #56]	; (8001f78 <_ZN3LED9fullColorEc+0x174>)
 8001f3e:	f005 f935 	bl	80071ac <HAL_GPIO_WritePin>
}
 8001f42:	e014      	b.n	8001f6e <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 8001f44:	78fb      	ldrb	r3, [r7, #3]
 8001f46:	2b7e      	cmp	r3, #126	; 0x7e
 8001f48:	d111      	bne.n	8001f6e <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f50:	4809      	ldr	r0, [pc, #36]	; (8001f78 <_ZN3LED9fullColorEc+0x174>)
 8001f52:	f005 f92b 	bl	80071ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f56:	2201      	movs	r2, #1
 8001f58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f5c:	4806      	ldr	r0, [pc, #24]	; (8001f78 <_ZN3LED9fullColorEc+0x174>)
 8001f5e:	f005 f925 	bl	80071ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f62:	2201      	movs	r2, #1
 8001f64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f68:	4803      	ldr	r0, [pc, #12]	; (8001f78 <_ZN3LED9fullColorEc+0x174>)
 8001f6a:	f005 f91f 	bl	80071ac <HAL_GPIO_WritePin>
}
 8001f6e:	bf00      	nop
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40020000 	.word	0x40020000

08001f7c <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	460b      	mov	r3, r1
 8001f86:	70fb      	strb	r3, [r7, #3]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 8001f8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d106      	bne.n	8001fa2 <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001f94:	2201      	movs	r2, #1
 8001f96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f9a:	4813      	ldr	r0, [pc, #76]	; (8001fe8 <_ZN3LED2LREaa+0x6c>)
 8001f9c:	f005 f906 	bl	80071ac <HAL_GPIO_WritePin>
 8001fa0:	e009      	b.n	8001fb6 <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 8001fa2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d105      	bne.n	8001fb6 <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001faa:	2200      	movs	r2, #0
 8001fac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fb0:	480d      	ldr	r0, [pc, #52]	; (8001fe8 <_ZN3LED2LREaa+0x6c>)
 8001fb2:	f005 f8fb 	bl	80071ac <HAL_GPIO_WritePin>

	if(r_status == 1)
 8001fb6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d106      	bne.n	8001fcc <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fc4:	4808      	ldr	r0, [pc, #32]	; (8001fe8 <_ZN3LED2LREaa+0x6c>)
 8001fc6:	f005 f8f1 	bl	80071ac <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 8001fca:	e009      	b.n	8001fe0 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 8001fcc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d105      	bne.n	8001fe0 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fda:	4803      	ldr	r0, [pc, #12]	; (8001fe8 <_ZN3LED2LREaa+0x6c>)
 8001fdc:	f005 f8e6 	bl	80071ac <HAL_GPIO_WritePin>
}
 8001fe0:	bf00      	nop
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40020000 	.word	0x40020000

08001fec <_ZN10LineSensorC1Ev>:
#include <LineSensor.hpp>
#include <algorithm>
#include "G_variables.h"
#include "Macro.h"

LineSensor::LineSensor()
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b092      	sub	sp, #72	; 0x48
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7ff fe92 	bl	8001d24 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	637b      	str	r3, [r7, #52]	; 0x34
 8002004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002006:	647b      	str	r3, [r7, #68]	; 0x44
 8002008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800200a:	331c      	adds	r3, #28
 800200c:	633b      	str	r3, [r7, #48]	; 0x30
 800200e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002012:	429a      	cmp	r2, r3
 8002014:	d008      	beq.n	8002028 <_ZN10LineSensorC1Ev+0x3c>
 8002016:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002018:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 800201a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800201c:	2200      	movs	r2, #0
 800201e:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8002020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002022:	3302      	adds	r3, #2
 8002024:	647b      	str	r3, [r7, #68]	; 0x44
 8002026:	e7f2      	b.n	800200e <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800202e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002032:	643b      	str	r3, [r7, #64]	; 0x40
 8002034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002036:	3338      	adds	r3, #56	; 0x38
 8002038:	627b      	str	r3, [r7, #36]	; 0x24
 800203a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800203c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203e:	429a      	cmp	r2, r3
 8002040:	d009      	beq.n	8002056 <_ZN10LineSensorC1Ev+0x6a>
 8002042:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002044:	623b      	str	r3, [r7, #32]
		s = 0;
 8002046:	6a3b      	ldr	r3, [r7, #32]
 8002048:	f04f 0200 	mov.w	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 800204e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002050:	3304      	adds	r3, #4
 8002052:	643b      	str	r3, [r7, #64]	; 0x40
 8002054:	e7f1      	b.n	800203a <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800205c:	61fb      	str	r3, [r7, #28]
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	3338      	adds	r3, #56	; 0x38
 8002066:	61bb      	str	r3, [r7, #24]
 8002068:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	429a      	cmp	r2, r3
 800206e:	d009      	beq.n	8002084 <_ZN10LineSensorC1Ev+0x98>
 8002070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002072:	617b      	str	r3, [r7, #20]
		m = 0;
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	f04f 0200 	mov.w	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 800207c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800207e:	3304      	adds	r3, #4
 8002080:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002082:	e7f1      	b.n	8002068 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800208a:	613b      	str	r3, [r7, #16]
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	3338      	adds	r3, #56	; 0x38
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	429a      	cmp	r2, r3
 800209c:	d009      	beq.n	80020b2 <_ZN10LineSensorC1Ev+0xc6>
 800209e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020a0:	60bb      	str	r3, [r7, #8]
		s = 1;
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80020a8:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 80020aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020ac:	3304      	adds	r3, #4
 80020ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80020b0:	e7f1      	b.n	8002096 <_ZN10LineSensorC1Ev+0xaa>
	}

}
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4618      	mov	r0, r3
 80020b6:	3748      	adds	r7, #72	; 0x48
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	220e      	movs	r2, #14
 80020c8:	4619      	mov	r1, r3
 80020ca:	4803      	ldr	r0, [pc, #12]	; (80020d8 <_ZN10LineSensor8ADCStartEv+0x1c>)
 80020cc:	f003 fe3e 	bl	8005d4c <HAL_ADC_Start_DMA>
}
 80020d0:	bf00      	nop
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	20015da8 	.word	0x20015da8

080020dc <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 80020e4:	2300      	movs	r3, #0
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2b0d      	cmp	r3, #13
 80020ec:	dc2f      	bgt.n	800214e <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	3392      	adds	r3, #146	; 0x92
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4413      	add	r3, r2
 80020f8:	3304      	adds	r3, #4
 80020fa:	ed93 7a00 	vldr	s14, [r3]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002106:	ee07 3a90 	vmov	s15, r3
 800210a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	33a0      	adds	r3, #160	; 0xa0
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	4413      	add	r3, r2
 8002118:	3304      	adds	r3, #4
 800211a:	edd3 7a00 	vldr	s15, [r3]
 800211e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002122:	4b14      	ldr	r3, [pc, #80]	; (8002174 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	4619      	mov	r1, r3
 8002128:	ee67 7a27 	vmul.f32	s15, s14, s15
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	460b      	mov	r3, r1
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	1a5b      	subs	r3, r3, r1
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	68f9      	ldr	r1, [r7, #12]
 8002138:	440b      	add	r3, r1
 800213a:	3306      	adds	r3, #6
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4413      	add	r3, r2
 8002140:	3304      	adds	r3, #4
 8002142:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	3301      	adds	r3, #1
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	e7cc      	b.n	80020e8 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 800214e:	4b09      	ldr	r3, [pc, #36]	; (8002174 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	3301      	adds	r3, #1
 8002154:	b2da      	uxtb	r2, r3
 8002156:	4b07      	ldr	r3, [pc, #28]	; (8002174 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002158:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 800215a:	4b06      	ldr	r3, [pc, #24]	; (8002174 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2b09      	cmp	r3, #9
 8002160:	d902      	bls.n	8002168 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 8002162:	4b04      	ldr	r3, [pc, #16]	; (8002174 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002164:	2200      	movs	r2, #0
 8002166:	701a      	strb	r2, [r3, #0]


}
 8002168:	bf00      	nop
 800216a:	3714      	adds	r7, #20
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	20000208 	.word	0x20000208

08002178 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 8002178:	b490      	push	{r4, r7}
 800217a:	b08e      	sub	sp, #56	; 0x38
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
	float temp_val[10];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002180:	2300      	movs	r3, #0
 8002182:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002186:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800218a:	2b0d      	cmp	r3, #13
 800218c:	f200 8087 	bhi.w	800229e <_ZN10LineSensor18updateSensorValuesEv+0x126>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002190:	2300      	movs	r3, #0
 8002192:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002196:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800219a:	2b09      	cmp	r3, #9
 800219c:	d81c      	bhi.n	80021d8 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 800219e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80021a2:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 80021a6:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	4613      	mov	r3, r2
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	1a9b      	subs	r3, r3, r2
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	4423      	add	r3, r4
 80021b6:	3306      	adds	r3, #6
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4403      	add	r3, r0
 80021bc:	3304      	adds	r3, #4
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	008b      	lsls	r3, r1, #2
 80021c2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80021c6:	440b      	add	r3, r1
 80021c8:	3b30      	subs	r3, #48	; 0x30
 80021ca:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80021cc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80021d0:	3301      	adds	r3, #1
 80021d2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80021d6:	e7de      	b.n	8002196 <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		//std::sort(temp_val, temp_val + AD_DATA_SIZE);
		// sort
		for(uint8_t i = 0; i < 10; i++){
 80021d8:	2300      	movs	r3, #0
 80021da:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80021de:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80021e2:	2b09      	cmp	r3, #9
 80021e4:	d84d      	bhi.n	8002282 <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 80021e6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80021ea:	3301      	adds	r3, #1
 80021ec:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80021f0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80021f4:	2b09      	cmp	r3, #9
 80021f6:	d83e      	bhi.n	8002276 <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 80021f8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002202:	4413      	add	r3, r2
 8002204:	3b30      	subs	r3, #48	; 0x30
 8002206:	ed93 7a00 	vldr	s14, [r3]
 800220a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002214:	4413      	add	r3, r2
 8002216:	3b30      	subs	r3, #48	; 0x30
 8002218:	edd3 7a00 	vldr	s15, [r3]
 800221c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002224:	d521      	bpl.n	800226a <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 8002226:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002230:	4413      	add	r3, r2
 8002232:	3b30      	subs	r3, #48	; 0x30
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 8002238:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800223c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002240:	0092      	lsls	r2, r2, #2
 8002242:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002246:	440a      	add	r2, r1
 8002248:	3a30      	subs	r2, #48	; 0x30
 800224a:	6812      	ldr	r2, [r2, #0]
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002252:	440b      	add	r3, r1
 8002254:	3b30      	subs	r3, #48	; 0x30
 8002256:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 8002258:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002262:	4413      	add	r3, r2
 8002264:	3b30      	subs	r3, #48	; 0x30
 8002266:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002268:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 800226a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800226e:	3301      	adds	r3, #1
 8002270:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002274:	e7bc      	b.n	80021f0 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 8002276:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800227a:	3301      	adds	r3, #1
 800227c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002280:	e7ad      	b.n	80021de <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = temp_val[5];
 8002282:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002286:	69fa      	ldr	r2, [r7, #28]
 8002288:	6879      	ldr	r1, [r7, #4]
 800228a:	33b0      	adds	r3, #176	; 0xb0
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	440b      	add	r3, r1
 8002290:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002292:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002296:	3301      	adds	r3, #1
 8002298:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800229c:	e773      	b.n	8002186 <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}
}
 800229e:	bf00      	nop
 80022a0:	3738      	adds	r7, #56	; 0x38
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc90      	pop	{r4, r7}
 80022a6:	4770      	bx	lr

080022a8 <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 80022a8:	b590      	push	{r4, r7, lr}
 80022aa:	b0a9      	sub	sp, #164	; 0xa4
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 80022b0:	2064      	movs	r0, #100	; 0x64
 80022b2:	f003 fce5 	bl	8005c80 <HAL_Delay>

	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80022b6:	2300      	movs	r3, #0
 80022b8:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 80022bc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80022c0:	2b0d      	cmp	r3, #13
 80022c2:	d823      	bhi.n	800230c <_ZN10LineSensor11calibrationEv+0x64>
		max_values[i] = sensor[i];
 80022c4:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 80022c8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	32b0      	adds	r2, #176	; 0xb0
 80022d0:	0092      	lsls	r2, r2, #2
 80022d2:	440a      	add	r2, r1
 80022d4:	6812      	ldr	r2, [r2, #0]
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80022dc:	440b      	add	r3, r1
 80022de:	3b60      	subs	r3, #96	; 0x60
 80022e0:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 80022e2:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 80022e6:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	32b0      	adds	r2, #176	; 0xb0
 80022ee:	0092      	lsls	r2, r2, #2
 80022f0:	440a      	add	r2, r1
 80022f2:	6812      	ldr	r2, [r2, #0]
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80022fa:	440b      	add	r3, r1
 80022fc:	3b98      	subs	r3, #152	; 0x98
 80022fe:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002300:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002304:	3301      	adds	r3, #1
 8002306:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 800230a:	e7d7      	b.n	80022bc <_ZN10LineSensor11calibrationEv+0x14>
	}

	while(joy_stick_.getValue() != JOY_C){
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff fd12 	bl	8001d3c <_ZN8JoyStick8getValueEv>
 8002318:	4603      	mov	r3, r0
 800231a:	2b02      	cmp	r3, #2
 800231c:	bf14      	ite	ne
 800231e:	2301      	movne	r3, #1
 8002320:	2300      	moveq	r3, #0
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b00      	cmp	r3, #0
 8002326:	d079      	beq.n	800241c <_ZN10LineSensor11calibrationEv+0x174>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002328:	2300      	movs	r3, #0
 800232a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 800232e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002332:	2b0d      	cmp	r3, #13
 8002334:	d850      	bhi.n	80023d8 <_ZN10LineSensor11calibrationEv+0x130>
			if(max_values[i] < sensor[i]){
 8002336:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002340:	4413      	add	r3, r2
 8002342:	3b60      	subs	r3, #96	; 0x60
 8002344:	ed93 7a00 	vldr	s14, [r3]
 8002348:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	33b0      	adds	r3, #176	; 0xb0
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	edd3 7a00 	vldr	s15, [r3]
 8002358:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800235c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002360:	d50f      	bpl.n	8002382 <_ZN10LineSensor11calibrationEv+0xda>
				max_values[i] = sensor[i];
 8002362:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8002366:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	32b0      	adds	r2, #176	; 0xb0
 800236e:	0092      	lsls	r2, r2, #2
 8002370:	440a      	add	r2, r1
 8002372:	6812      	ldr	r2, [r2, #0]
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800237a:	440b      	add	r3, r1
 800237c:	3b60      	subs	r3, #96	; 0x60
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	e024      	b.n	80023cc <_ZN10LineSensor11calibrationEv+0x124>
			}
			else if(min_values[i] > sensor[i]){
 8002382:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800238c:	4413      	add	r3, r2
 800238e:	3b98      	subs	r3, #152	; 0x98
 8002390:	ed93 7a00 	vldr	s14, [r3]
 8002394:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	33b0      	adds	r3, #176	; 0xb0
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	4413      	add	r3, r2
 80023a0:	edd3 7a00 	vldr	s15, [r3]
 80023a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ac:	dd0e      	ble.n	80023cc <_ZN10LineSensor11calibrationEv+0x124>
				min_values[i] = sensor[i];
 80023ae:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 80023b2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	32b0      	adds	r2, #176	; 0xb0
 80023ba:	0092      	lsls	r2, r2, #2
 80023bc:	440a      	add	r2, r1
 80023be:	6812      	ldr	r2, [r2, #0]
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80023c6:	440b      	add	r3, r1
 80023c8:	3b98      	subs	r3, #152	; 0x98
 80023ca:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80023cc:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80023d0:	3301      	adds	r3, #1
 80023d2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 80023d6:	e7aa      	b.n	800232e <_ZN10LineSensor11calibrationEv+0x86>
			}
		}

		if(rotary_switch_.getValue() == 0){
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f203 23be 	addw	r3, r3, #702	; 0x2be
 80023de:	4618      	mov	r0, r3
 80023e0:	f000 fe7c 	bl	80030dc <_ZN12RotarySwitch8getValueEv>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	bf0c      	ite	eq
 80023ea:	2301      	moveq	r3, #1
 80023ec:	2300      	movne	r3, #0
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d009      	beq.n	8002408 <_ZN10LineSensor11calibrationEv+0x160>
			led_.LR(-1, 1);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80023fa:	2201      	movs	r2, #1
 80023fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff fdbb 	bl	8001f7c <_ZN3LED2LREaa>
 8002406:	e781      	b.n	800230c <_ZN10LineSensor11calibrationEv+0x64>

		}
		else{
			led_.LR(-1, 0);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800240e:	2200      	movs	r2, #0
 8002410:	f04f 31ff 	mov.w	r1, #4294967295
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff fdb1 	bl	8001f7c <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 800241a:	e777      	b.n	800230c <_ZN10LineSensor11calibrationEv+0x64>

		}
	}

	for(const auto &m : max_values){
 800241c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002420:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002424:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002428:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800242c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002430:	3338      	adds	r3, #56	; 0x38
 8002432:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002436:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800243a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800243e:	429a      	cmp	r2, r3
 8002440:	d016      	beq.n	8002470 <_ZN10LineSensor11calibrationEv+0x1c8>
 8002442:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002446:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		printf("%f, ", m);
 800244a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4618      	mov	r0, r3
 8002452:	f7fe f891 	bl	8000578 <__aeabi_f2d>
 8002456:	4603      	mov	r3, r0
 8002458:	460c      	mov	r4, r1
 800245a:	461a      	mov	r2, r3
 800245c:	4623      	mov	r3, r4
 800245e:	4842      	ldr	r0, [pc, #264]	; (8002568 <_ZN10LineSensor11calibrationEv+0x2c0>)
 8002460:	f010 fd70 	bl	8012f44 <iprintf>
	for(const auto &m : max_values){
 8002464:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002468:	3304      	adds	r3, #4
 800246a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800246e:	e7e2      	b.n	8002436 <_ZN10LineSensor11calibrationEv+0x18e>
	}
		printf("\n");
 8002470:	200a      	movs	r0, #10
 8002472:	f010 fd7f 	bl	8012f74 <putchar>
	for(const auto &m : min_values){
 8002476:	f107 0308 	add.w	r3, r7, #8
 800247a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800247e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002482:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002486:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800248a:	3338      	adds	r3, #56	; 0x38
 800248c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800248e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002492:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002494:	429a      	cmp	r2, r3
 8002496:	d014      	beq.n	80024c2 <_ZN10LineSensor11calibrationEv+0x21a>
 8002498:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800249c:	67bb      	str	r3, [r7, #120]	; 0x78
		printf("%f, ", m);
 800249e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7fe f868 	bl	8000578 <__aeabi_f2d>
 80024a8:	4603      	mov	r3, r0
 80024aa:	460c      	mov	r4, r1
 80024ac:	461a      	mov	r2, r3
 80024ae:	4623      	mov	r3, r4
 80024b0:	482d      	ldr	r0, [pc, #180]	; (8002568 <_ZN10LineSensor11calibrationEv+0x2c0>)
 80024b2:	f010 fd47 	bl	8012f44 <iprintf>
	for(const auto &m : min_values){
 80024b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80024ba:	3304      	adds	r3, #4
 80024bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80024c0:	e7e5      	b.n	800248e <_ZN10LineSensor11calibrationEv+0x1e6>
	}
		printf("\n");
 80024c2:	200a      	movs	r0, #10
 80024c4:	f010 fd56 	bl	8012f74 <putchar>


	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80024c8:	2300      	movs	r3, #0
 80024ca:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 80024ce:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80024d2:	2b0d      	cmp	r3, #13
 80024d4:	d826      	bhi.n	8002524 <_ZN10LineSensor11calibrationEv+0x27c>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 80024d6:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80024e0:	4413      	add	r3, r2
 80024e2:	3b60      	subs	r3, #96	; 0x60
 80024e4:	ed93 7a00 	vldr	s14, [r3]
 80024e8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80024f2:	4413      	add	r3, r2
 80024f4:	3b98      	subs	r3, #152	; 0x98
 80024f6:	edd3 7a00 	vldr	s15, [r3]
 80024fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024fe:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002502:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800256c <_ZN10LineSensor11calibrationEv+0x2c4>
 8002506:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	3392      	adds	r3, #146	; 0x92
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	4413      	add	r3, r2
 8002512:	3304      	adds	r3, #4
 8002514:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002518:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800251c:	3301      	adds	r3, #1
 800251e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8002522:	e7d4      	b.n	80024ce <_ZN10LineSensor11calibrationEv+0x226>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002524:	2300      	movs	r3, #0
 8002526:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 800252a:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800252e:	2b0d      	cmp	r3, #13
 8002530:	d815      	bhi.n	800255e <_ZN10LineSensor11calibrationEv+0x2b6>
		offset_values_[i] = min_values[i];
 8002532:	f8b7 2090 	ldrh.w	r2, [r7, #144]	; 0x90
 8002536:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800253a:	0092      	lsls	r2, r2, #2
 800253c:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002540:	440a      	add	r2, r1
 8002542:	3a98      	subs	r2, #152	; 0x98
 8002544:	6812      	ldr	r2, [r2, #0]
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	33a0      	adds	r3, #160	; 0xa0
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	440b      	add	r3, r1
 800254e:	3304      	adds	r3, #4
 8002550:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002552:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8002556:	3301      	adds	r3, #1
 8002558:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 800255c:	e7e5      	b.n	800252a <_ZN10LineSensor11calibrationEv+0x282>
	}


}
 800255e:	bf00      	nop
 8002560:	37a4      	adds	r7, #164	; 0xa4
 8002562:	46bd      	mov	sp, r7
 8002564:	bd90      	pop	{r4, r7, pc}
 8002566:	bf00      	nop
 8002568:	08017140 	.word	0x08017140
 800256c:	447a0000 	.word	0x447a0000

08002570 <_ZN10LineSensor13emergencyStopEv>:
	printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);

}

bool LineSensor::emergencyStop()
{
 8002570:	b480      	push	{r7}
 8002572:	b089      	sub	sp, #36	; 0x24
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
	uint8_t cnt = 0;
 8002578:	2300      	movs	r3, #0
 800257a:	77fb      	strb	r3, [r7, #31]

	for(const auto & s : sensor){
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002582:	613b      	str	r3, [r7, #16]
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	61bb      	str	r3, [r7, #24]
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	3338      	adds	r3, #56	; 0x38
 800258c:	60fb      	str	r3, [r7, #12]
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	429a      	cmp	r2, r3
 8002594:	d012      	beq.n	80025bc <_ZN10LineSensor13emergencyStopEv+0x4c>
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	60bb      	str	r3, [r7, #8]
		if(s >= 600) cnt++;
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	edd3 7a00 	vldr	s15, [r3]
 80025a0:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80025dc <_ZN10LineSensor13emergencyStopEv+0x6c>
 80025a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ac:	db02      	blt.n	80025b4 <_ZN10LineSensor13emergencyStopEv+0x44>
 80025ae:	7ffb      	ldrb	r3, [r7, #31]
 80025b0:	3301      	adds	r3, #1
 80025b2:	77fb      	strb	r3, [r7, #31]
	for(const auto & s : sensor){
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	3304      	adds	r3, #4
 80025b8:	61bb      	str	r3, [r7, #24]
 80025ba:	e7e8      	b.n	800258e <_ZN10LineSensor13emergencyStopEv+0x1e>
	}

	bool flag;
	if(cnt >= AD_DATA_SIZE) flag = true;
 80025bc:	7ffb      	ldrb	r3, [r7, #31]
 80025be:	2b0d      	cmp	r3, #13
 80025c0:	d902      	bls.n	80025c8 <_ZN10LineSensor13emergencyStopEv+0x58>
 80025c2:	2301      	movs	r3, #1
 80025c4:	75fb      	strb	r3, [r7, #23]
 80025c6:	e001      	b.n	80025cc <_ZN10LineSensor13emergencyStopEv+0x5c>
	else flag = false;
 80025c8:	2300      	movs	r3, #0
 80025ca:	75fb      	strb	r3, [r7, #23]

	return flag;
 80025cc:	7dfb      	ldrb	r3, [r7, #23]

}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3724      	adds	r7, #36	; 0x24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	44160000 	.word	0x44160000

080025e0 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrl>:
float monitor_delta_theta;
float monitor_steering_angle;
float monitor_target_omega;
float monitor_r;

LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl) : kp_(0), kd_(0), ki_(0), excution_flag_(false), normal_ratio_(0){
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
 80025ec:	603b      	str	r3, [r7, #0]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f04f 0200 	mov.w	r2, #0
 80025f4:	611a      	str	r2, [r3, #16]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f04f 0200 	mov.w	r2, #0
 80025fc:	615a      	str	r2, [r3, #20]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f04f 0200 	mov.w	r2, #0
 8002604:	619a      	str	r2, [r3, #24]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2200      	movs	r2, #0
 800260a:	771a      	strb	r2, [r3, #28]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f04f 0200 	mov.w	r2, #0
 8002612:	621a      	str	r2, [r3, #32]
	motor_ = motor;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	68ba      	ldr	r2, [r7, #8]
 8002618:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	609a      	str	r2, [r3, #8]
}
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	4618      	mov	r0, r3
 800262a:	3714      	adds	r7, #20
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <_ZN9LineTrace9calcErrorEv>:

// --------private--------- //
float LineTrace::calcError()
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 800264c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8002658:	ee37 7a27 	vadd.f32	s14, s14, s15
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 8002664:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8002670:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 800267c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 8002688:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	edd3 6ab7 	vldr	s13, [r3, #732]	; 0x2dc
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 800269c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 80026a8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 80026b4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 80026c0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 80026cc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 80026d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 80026dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026e0:	edc7 7a03 	vstr	s15, [r7, #12]

	return diff;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	ee07 3a90 	vmov	s15, r3

}
 80026ea:	eeb0 0a67 	vmov.f32	s0, s15
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <_ZN9LineTrace3pidEv>:
	float phi = atan2(norm_l - norm_r, 1.0);
	delta_theta = (phi * ANGLE_BETWEEN_SENSORS/2) / (PI / 4);
}

void LineTrace::pid()
{
 80026f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026fa:	b089      	sub	sp, #36	; 0x24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f7ff ff97 	bl	8002634 <_ZN9LineTrace9calcErrorEv>
 8002706:	ed87 0a07 	vstr	s0, [r7, #28]
	static float pre_diff = 0;
	float p, d;
	static float i;

	p = kp_ * diff;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002710:	ed97 7a07 	vldr	s14, [r7, #28]
 8002714:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002718:	edc7 7a06 	vstr	s15, [r7, #24]
	d = kd_ * (diff - pre_diff) / DELTA_T;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	ed93 7a05 	vldr	s14, [r3, #20]
 8002722:	4b41      	ldr	r3, [pc, #260]	; (8002828 <_ZN9LineTrace3pidEv+0x130>)
 8002724:	edd3 7a00 	vldr	s15, [r3]
 8002728:	edd7 6a07 	vldr	s13, [r7, #28]
 800272c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002730:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002734:	ee17 0a90 	vmov	r0, s15
 8002738:	f7fd ff1e 	bl	8000578 <__aeabi_f2d>
 800273c:	a338      	add	r3, pc, #224	; (adr r3, 8002820 <_ZN9LineTrace3pidEv+0x128>)
 800273e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002742:	f7fe f89b 	bl	800087c <__aeabi_ddiv>
 8002746:	4603      	mov	r3, r0
 8002748:	460c      	mov	r4, r1
 800274a:	4618      	mov	r0, r3
 800274c:	4621      	mov	r1, r4
 800274e:	f7fe fa63 	bl	8000c18 <__aeabi_d2f>
 8002752:	4603      	mov	r3, r0
 8002754:	617b      	str	r3, [r7, #20]
	i += ki_ * diff * DELTA_T;
 8002756:	4b35      	ldr	r3, [pc, #212]	; (800282c <_ZN9LineTrace3pidEv+0x134>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f7fd ff0c 	bl	8000578 <__aeabi_f2d>
 8002760:	4604      	mov	r4, r0
 8002762:	460d      	mov	r5, r1
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	ed93 7a06 	vldr	s14, [r3, #24]
 800276a:	edd7 7a07 	vldr	s15, [r7, #28]
 800276e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002772:	ee17 0a90 	vmov	r0, s15
 8002776:	f7fd feff 	bl	8000578 <__aeabi_f2d>
 800277a:	a329      	add	r3, pc, #164	; (adr r3, 8002820 <_ZN9LineTrace3pidEv+0x128>)
 800277c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002780:	f7fd ff52 	bl	8000628 <__aeabi_dmul>
 8002784:	4602      	mov	r2, r0
 8002786:	460b      	mov	r3, r1
 8002788:	4620      	mov	r0, r4
 800278a:	4629      	mov	r1, r5
 800278c:	f7fd fd96 	bl	80002bc <__adddf3>
 8002790:	4603      	mov	r3, r0
 8002792:	460c      	mov	r4, r1
 8002794:	4618      	mov	r0, r3
 8002796:	4621      	mov	r1, r4
 8002798:	f7fe fa3e 	bl	8000c18 <__aeabi_d2f>
 800279c:	4602      	mov	r2, r0
 800279e:	4b23      	ldr	r3, [pc, #140]	; (800282c <_ZN9LineTrace3pidEv+0x134>)
 80027a0:	601a      	str	r2, [r3, #0]

	float left_ratio = normal_ratio_ + (p + d + i);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	ed93 7a08 	vldr	s14, [r3, #32]
 80027a8:	edd7 6a06 	vldr	s13, [r7, #24]
 80027ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80027b0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80027b4:	4b1d      	ldr	r3, [pc, #116]	; (800282c <_ZN9LineTrace3pidEv+0x134>)
 80027b6:	edd3 7a00 	vldr	s15, [r3]
 80027ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027c2:	edc7 7a04 	vstr	s15, [r7, #16]
	float right_ratio = normal_ratio_ - (p + d + i);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	ed93 7a08 	vldr	s14, [r3, #32]
 80027cc:	edd7 6a06 	vldr	s13, [r7, #24]
 80027d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80027d4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80027d8:	4b14      	ldr	r3, [pc, #80]	; (800282c <_ZN9LineTrace3pidEv+0x134>)
 80027da:	edd3 7a00 	vldr	s15, [r3]
 80027de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027e6:	edc7 7a03 	vstr	s15, [r7, #12]

	motor_->setRatio(left_ratio, right_ratio);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681c      	ldr	r4, [r3, #0]
 80027ee:	6938      	ldr	r0, [r7, #16]
 80027f0:	f7fd fec2 	bl	8000578 <__aeabi_f2d>
 80027f4:	4605      	mov	r5, r0
 80027f6:	460e      	mov	r6, r1
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f7fd febd 	bl	8000578 <__aeabi_f2d>
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	ec43 2b11 	vmov	d1, r2, r3
 8002806:	ec46 5b10 	vmov	d0, r5, r6
 800280a:	4620      	mov	r0, r4
 800280c:	f000 fa5a 	bl	8002cc4 <_ZN5Motor8setRatioEdd>

	pre_diff = diff;
 8002810:	4a05      	ldr	r2, [pc, #20]	; (8002828 <_ZN9LineTrace3pidEv+0x130>)
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	6013      	str	r3, [r2, #0]

}
 8002816:	bf00      	nop
 8002818:	3724      	adds	r7, #36	; 0x24
 800281a:	46bd      	mov	sp, r7
 800281c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800281e:	bf00      	nop
 8002820:	d2f1a9fc 	.word	0xd2f1a9fc
 8002824:	3f50624d 	.word	0x3f50624d
 8002828:	2000020c 	.word	0x2000020c
 800282c:	20000210 	.word	0x20000210

08002830 <_ZN9LineTrace7setGainEfff>:
{

}

void LineTrace::setGain(float kp, float kd, float ki)
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	ed87 0a02 	vstr	s0, [r7, #8]
 800283c:	edc7 0a01 	vstr	s1, [r7, #4]
 8002840:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	68ba      	ldr	r2, [r7, #8]
 8002848:	611a      	str	r2, [r3, #16]
	kd_ = kd;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	615a      	str	r2, [r3, #20]
	ki_ = ki;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	619a      	str	r2, [r3, #24]
}
 8002856:	bf00      	nop
 8002858:	3714      	adds	r7, #20
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <_ZN9LineTrace14setNormalRatioEf>:

void LineTrace::setNormalRatio(float ratio)
{
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
 800286a:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	621a      	str	r2, [r3, #32]
}
 8002874:	bf00      	nop
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	683a      	ldr	r2, [r7, #0]
 8002890:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
	...

080028a0 <_ZN9LineTrace4flipEv>:

void LineTrace::flip()
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]

	if(excution_flag_ == true){
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	7f1b      	ldrb	r3, [r3, #28]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d002      	beq.n	80028b6 <_ZN9LineTrace4flipEv+0x16>
		pid();
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f7ff ff21 	bl	80026f8 <_ZN9LineTrace3pidEv>
		//steeringAngleTrace();
	}
	if(line_sensor_->emergencyStop() == true){
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7ff fe58 	bl	8002570 <_ZN10LineSensor13emergencyStopEv>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d011      	beq.n	80028ea <_ZN9LineTrace4flipEv+0x4a>
		motor_->setRatio(0, 0);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8002908 <_ZN9LineTrace4flipEv+0x68>
 80028ce:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8002908 <_ZN9LineTrace4flipEv+0x68>
 80028d2:	4618      	mov	r0, r3
 80028d4:	f000 f9f6 	bl	8002cc4 <_ZN5Motor8setRatioEdd>
		led_.LR(1, -1);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	330c      	adds	r3, #12
 80028dc:	f04f 32ff 	mov.w	r2, #4294967295
 80028e0:	2101      	movs	r1, #1
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7ff fb4a 	bl	8001f7c <_ZN3LED2LREaa>
	else{
		led_.LR(0, -1);

	}

}
 80028e8:	e007      	b.n	80028fa <_ZN9LineTrace4flipEv+0x5a>
		led_.LR(0, -1);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	330c      	adds	r3, #12
 80028ee:	f04f 32ff 	mov.w	r2, #4294967295
 80028f2:	2100      	movs	r1, #0
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff fb41 	bl	8001f7c <_ZN3LED2LREaa>
}
 80028fa:	bf00      	nop
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	f3af 8000 	nop.w
	...

08002910 <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	771a      	strb	r2, [r3, #28]
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	0000      	movs	r0, r0
 800292c:	0000      	movs	r0, r0
	...

08002930 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	771a      	strb	r2, [r3, #28]
	motor_->setRatio(0, 0);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	ed9f 1b05 	vldr	d1, [pc, #20]	; 8002958 <_ZN9LineTrace4stopEv+0x28>
 8002946:	ed9f 0b04 	vldr	d0, [pc, #16]	; 8002958 <_ZN9LineTrace4stopEv+0x28>
 800294a:	4618      	mov	r0, r3
 800294c:	f000 f9ba 	bl	8002cc4 <_ZN5Motor8setRatioEdd>
}
 8002950:	bf00      	nop
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
	...

08002960 <_ZN6LoggerC1Ev>:
#include "Logger.hpp"
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_dis_(0){}
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 800296e:	33b0      	adds	r3, #176	; 0xb0
 8002970:	2200      	movs	r2, #0
 8002972:	701a      	strb	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 800297a:	33b2      	adds	r3, #178	; 0xb2
 800297c:	2200      	movs	r2, #0
 800297e:	801a      	strh	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8002986:	33b4      	adds	r3, #180	; 0xb4
 8002988:	2200      	movs	r2, #0
 800298a:	801a      	strh	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4618      	mov	r0, r3
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
	...

0800299c <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b088      	sub	sp, #32
 80029a0:	af02      	add	r7, sp, #8
 80029a2:	6078      	str	r0, [r7, #4]
	bool ret = false;
 80029a4:	2300      	movs	r3, #0
 80029a6:	75fb      	strb	r3, [r7, #23]

	if(sd_mount() == 1){
 80029a8:	f7fe fea4 	bl	80016f4 <sd_mount>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	bf0c      	ite	eq
 80029b2:	2301      	moveq	r3, #1
 80029b4:	2300      	movne	r3, #0
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d005      	beq.n	80029c8 <_ZN6Logger10sdCardInitEv+0x2c>
	  printf("mount success\r\n");
 80029bc:	4816      	ldr	r0, [pc, #88]	; (8002a18 <_ZN6Logger10sdCardInitEv+0x7c>)
 80029be:	f010 fb49 	bl	8013054 <puts>
	  ret = true;
 80029c2:	2301      	movs	r3, #1
 80029c4:	75fb      	strb	r3, [r7, #23]
 80029c6:	e004      	b.n	80029d2 <_ZN6Logger10sdCardInitEv+0x36>
	}
	else{
	  printf("mount error\r\n");
 80029c8:	4814      	ldr	r0, [pc, #80]	; (8002a1c <_ZN6Logger10sdCardInitEv+0x80>)
 80029ca:	f010 fb43 	bl	8013054 <puts>
	  ret = false;
 80029ce:	2300      	movs	r3, #0
 80029d0:	75fb      	strb	r3, [r7, #23]
	}

	int	data[1];
	int temp[1];

	data[0] = 100;
 80029d2:	2364      	movs	r3, #100	; 0x64
 80029d4:	613b      	str	r3, [r7, #16]
	sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
 80029d6:	f107 0210 	add.w	r2, r7, #16
 80029da:	2301      	movs	r3, #1
 80029dc:	9300      	str	r3, [sp, #0]
 80029de:	4613      	mov	r3, r2
 80029e0:	2201      	movs	r2, #1
 80029e2:	490f      	ldr	r1, [pc, #60]	; (8002a20 <_ZN6Logger10sdCardInitEv+0x84>)
 80029e4:	480f      	ldr	r0, [pc, #60]	; (8002a24 <_ZN6Logger10sdCardInitEv+0x88>)
 80029e6:	f7fe fde1 	bl	80015ac <sd_write_array_int>
	sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
 80029ea:	f107 030c 	add.w	r3, r7, #12
 80029ee:	2201      	movs	r2, #1
 80029f0:	490b      	ldr	r1, [pc, #44]	; (8002a20 <_ZN6Logger10sdCardInitEv+0x84>)
 80029f2:	480c      	ldr	r0, [pc, #48]	; (8002a24 <_ZN6Logger10sdCardInitEv+0x88>)
 80029f4:	f7fe fe38 	bl	8001668 <sd_read_array_int>
	sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write
 80029f8:	f107 020c 	add.w	r2, r7, #12
 80029fc:	2301      	movs	r3, #1
 80029fe:	9300      	str	r3, [sp, #0]
 8002a00:	4613      	mov	r3, r2
 8002a02:	2201      	movs	r2, #1
 8002a04:	4908      	ldr	r1, [pc, #32]	; (8002a28 <_ZN6Logger10sdCardInitEv+0x8c>)
 8002a06:	4807      	ldr	r0, [pc, #28]	; (8002a24 <_ZN6Logger10sdCardInitEv+0x88>)
 8002a08:	f7fe fdd0 	bl	80015ac <sd_write_array_int>

	return ret;
 8002a0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3718      	adds	r7, #24
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	08017180 	.word	0x08017180
 8002a1c:	08017190 	.word	0x08017190
 8002a20:	080171a0 	.word	0x080171a0
 8002a24:	080171ac 	.word	0x080171ac
 8002a28:	080171b4 	.word	0x080171b4

08002a2c <_ZN6Logger8storeLogEf>:

	}

}
void Logger::storeLog(float data)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8002a3e:	33b0      	adds	r3, #176	; 0xb0
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d024      	beq.n	8002a90 <_ZN6Logger8storeLogEf+0x64>
		store_data_float_[log_index_tim_] = data;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8002a4c:	33b2      	adds	r3, #178	; 0xb2
 8002a4e:	881b      	ldrh	r3, [r3, #0]
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	4413      	add	r3, r2
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8002a60:	33b2      	adds	r3, #178	; 0xb2
 8002a62:	881b      	ldrh	r3, [r3, #0]
 8002a64:	3301      	adds	r3, #1
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8002a6e:	33b2      	adds	r3, #178	; 0xb2
 8002a70:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8002a78:	33b2      	adds	r3, #178	; 0xb2
 8002a7a:	881b      	ldrh	r3, [r3, #0]
 8002a7c:	f241 3287 	movw	r2, #4999	; 0x1387
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d905      	bls.n	8002a90 <_ZN6Logger8storeLogEf+0x64>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8002a8a:	33b2      	adds	r3, #178	; 0xb2
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	801a      	strh	r2, [r3, #0]
	}
}
 8002a90:	bf00      	nop
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <_ZN6Logger21storeDistanceAndThetaEff>:
{

}

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	ed87 0a02 	vstr	s0, [r7, #8]
 8002aa8:	edc7 0a01 	vstr	s1, [r7, #4]
	if(recording_flag_ == true){
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8002ab2:	33b0      	adds	r3, #176	; 0xb0
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d034      	beq.n	8002b24 <_ZN6Logger21storeDistanceAndThetaEff+0x88>
		store_distance_[log_index_dis_] = distance;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8002ac0:	33b4      	adds	r3, #180	; 0xb4
 8002ac2:	881b      	ldrh	r3, [r3, #0]
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	f503 53ea 	add.w	r3, r3, #7488	; 0x1d40
 8002aca:	330c      	adds	r3, #12
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	4413      	add	r3, r2
 8002ad0:	68ba      	ldr	r2, [r7, #8]
 8002ad2:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8002ada:	33b4      	adds	r3, #180	; 0xb4
 8002adc:	881b      	ldrh	r3, [r3, #0]
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	f503 5352 	add.w	r3, r3, #13440	; 0x3480
 8002ae4:	333c      	adds	r3, #60	; 0x3c
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4413      	add	r3, r2
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8002af4:	33b4      	adds	r3, #180	; 0xb4
 8002af6:	881b      	ldrh	r3, [r3, #0]
 8002af8:	3301      	adds	r3, #1
 8002afa:	b29a      	uxth	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8002b02:	33b4      	adds	r3, #180	; 0xb4
 8002b04:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8002b0c:	33b4      	adds	r3, #180	; 0xb4
 8002b0e:	881b      	ldrh	r3, [r3, #0]
 8002b10:	f241 726f 	movw	r2, #5999	; 0x176f
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d905      	bls.n	8002b24 <_ZN6Logger21storeDistanceAndThetaEff+0x88>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8002b1e:	33b4      	adds	r3, #180	; 0xb4
 8002b20:	2200      	movs	r2, #0
 8002b22:	801a      	strh	r2, [r3, #0]
	}
}
 8002b24:	bf00      	nop
 8002b26:	3714      	adds	r7, #20
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af02      	add	r7, sp, #8
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	2300      	movs	r3, #0
 8002b40:	9300      	str	r3, [sp, #0]
 8002b42:	4613      	mov	r3, r2
 8002b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b48:	6879      	ldr	r1, [r7, #4]
 8002b4a:	68b8      	ldr	r0, [r7, #8]
 8002b4c:	f7fe fcc8 	bl	80014e0 <sd_write_array_float>
}
 8002b50:	bf00      	nop
 8002b52:	3710      	adds	r7, #16
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:

void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af02      	add	r7, sp, #8
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
 8002b64:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 8002b6c:	3330      	adds	r3, #48	; 0x30
 8002b6e:	2200      	movs	r2, #0
 8002b70:	9200      	str	r2, [sp, #0]
 8002b72:	f241 7270 	movw	r2, #6000	; 0x1770
 8002b76:	6879      	ldr	r1, [r7, #4]
 8002b78:	68b8      	ldr	r0, [r7, #8]
 8002b7a:	f7fe fcb1 	bl	80014e0 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f503 4352 	add.w	r3, r3, #53760	; 0xd200
 8002b84:	33f0      	adds	r3, #240	; 0xf0
 8002b86:	2200      	movs	r2, #0
 8002b88:	9200      	str	r2, [sp, #0]
 8002b8a:	f241 7270 	movw	r2, #6000	; 0x1770
 8002b8e:	6839      	ldr	r1, [r7, #0]
 8002b90:	68b8      	ldr	r0, [r7, #8]
 8002b92:	f7fe fca5 	bl	80014e0 <sd_write_array_float>
}
 8002b96:	bf00      	nop
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <_ZN6Logger5startEv>:
	log_index_tim_ = 0;
	log_index_dis_ = 0;
}

void Logger::start()
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b083      	sub	sp, #12
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8002bac:	33b0      	adds	r3, #176	; 0xb0
 8002bae:	2201      	movs	r2, #1
 8002bb0:	701a      	strb	r2, [r3, #0]
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr

08002bbe <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b083      	sub	sp, #12
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8002bcc:	33b0      	adds	r3, #176	; 0xb0
 8002bce:	2200      	movs	r2, #0
 8002bd0:	701a      	strb	r2, [r3, #0]
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr

08002bde <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8002bde:	b480      	push	{r7}
 8002be0:	b083      	sub	sp, #12
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	801a      	strh	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	805a      	strh	r2, [r3, #2]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <_ZN5Motor4initEv>:

void Motor::init()
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8002c08:	2108      	movs	r1, #8
 8002c0a:	4805      	ldr	r0, [pc, #20]	; (8002c20 <_ZN5Motor4initEv+0x20>)
 8002c0c:	f008 fa00 	bl	800b010 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8002c10:	210c      	movs	r1, #12
 8002c12:	4803      	ldr	r0, [pc, #12]	; (8002c20 <_ZN5Motor4initEv+0x20>)
 8002c14:	f008 f9fc 	bl	800b010 <HAL_TIM_PWM_Start>

}
 8002c18:	bf00      	nop
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	20015d68 	.word	0x20015d68

08002c24 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	da0d      	bge.n	8002c52 <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8002c36:	2200      	movs	r2, #0
 8002c38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c3c:	481f      	ldr	r0, [pc, #124]	; (8002cbc <_ZN5Motor9motorCtrlEv+0x98>)
 8002c3e:	f004 fab5 	bl	80071ac <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	425b      	negs	r3, r3
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	81fb      	strh	r3, [r7, #14]
 8002c50:	e00a      	b.n	8002c68 <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8002c52:	2201      	movs	r2, #1
 8002c54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c58:	4818      	ldr	r0, [pc, #96]	; (8002cbc <_ZN5Motor9motorCtrlEv+0x98>)
 8002c5a:	f004 faa7 	bl	80071ac <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	da0d      	bge.n	8002c8e <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8002c72:	2201      	movs	r2, #1
 8002c74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c78:	4810      	ldr	r0, [pc, #64]	; (8002cbc <_ZN5Motor9motorCtrlEv+0x98>)
 8002c7a:	f004 fa97 	bl	80071ac <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	425b      	negs	r3, r3
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	81bb      	strh	r3, [r7, #12]
 8002c8c:	e00a      	b.n	8002ca4 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c94:	4809      	ldr	r0, [pc, #36]	; (8002cbc <_ZN5Motor9motorCtrlEv+0x98>)
 8002c96:	f004 fa89 	bl	80071ac <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8002ca4:	89fa      	ldrh	r2, [r7, #14]
 8002ca6:	4b06      	ldr	r3, [pc, #24]	; (8002cc0 <_ZN5Motor9motorCtrlEv+0x9c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8002cac:	89ba      	ldrh	r2, [r7, #12]
 8002cae:	4b04      	ldr	r3, [pc, #16]	; (8002cc0 <_ZN5Motor9motorCtrlEv+0x9c>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002cb4:	bf00      	nop
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40020c00 	.word	0x40020c00
 8002cc0:	20015d68 	.word	0x20015d68

08002cc4 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8002cc4:	b590      	push	{r4, r7, lr}
 8002cc6:	b087      	sub	sp, #28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6178      	str	r0, [r7, #20]
 8002ccc:	ed87 0b02 	vstr	d0, [r7, #8]
 8002cd0:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8002cd4:	f04f 0200 	mov.w	r2, #0
 8002cd8:	4b30      	ldr	r3, [pc, #192]	; (8002d9c <_ZN5Motor8setRatioEdd+0xd8>)
 8002cda:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002cde:	f7fd ff33 	bl	8000b48 <__aeabi_dcmpgt>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d005      	beq.n	8002cf4 <_ZN5Motor8setRatioEdd+0x30>
 8002ce8:	f04f 0300 	mov.w	r3, #0
 8002cec:	4c2b      	ldr	r4, [pc, #172]	; (8002d9c <_ZN5Motor8setRatioEdd+0xd8>)
 8002cee:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8002cf2:	e00e      	b.n	8002d12 <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8002cf4:	f04f 0200 	mov.w	r2, #0
 8002cf8:	4b29      	ldr	r3, [pc, #164]	; (8002da0 <_ZN5Motor8setRatioEdd+0xdc>)
 8002cfa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002cfe:	f7fd ff05 	bl	8000b0c <__aeabi_dcmplt>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d004      	beq.n	8002d12 <_ZN5Motor8setRatioEdd+0x4e>
 8002d08:	f04f 0300 	mov.w	r3, #0
 8002d0c:	4c24      	ldr	r4, [pc, #144]	; (8002da0 <_ZN5Motor8setRatioEdd+0xdc>)
 8002d0e:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8002d12:	f04f 0200 	mov.w	r2, #0
 8002d16:	4b21      	ldr	r3, [pc, #132]	; (8002d9c <_ZN5Motor8setRatioEdd+0xd8>)
 8002d18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d1c:	f7fd ff14 	bl	8000b48 <__aeabi_dcmpgt>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d005      	beq.n	8002d32 <_ZN5Motor8setRatioEdd+0x6e>
 8002d26:	f04f 0300 	mov.w	r3, #0
 8002d2a:	4c1c      	ldr	r4, [pc, #112]	; (8002d9c <_ZN5Motor8setRatioEdd+0xd8>)
 8002d2c:	e9c7 3400 	strd	r3, r4, [r7]
 8002d30:	e00e      	b.n	8002d50 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8002d32:	f04f 0200 	mov.w	r2, #0
 8002d36:	4b1a      	ldr	r3, [pc, #104]	; (8002da0 <_ZN5Motor8setRatioEdd+0xdc>)
 8002d38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d3c:	f7fd fee6 	bl	8000b0c <__aeabi_dcmplt>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d004      	beq.n	8002d50 <_ZN5Motor8setRatioEdd+0x8c>
 8002d46:	f04f 0300 	mov.w	r3, #0
 8002d4a:	4c15      	ldr	r4, [pc, #84]	; (8002da0 <_ZN5Motor8setRatioEdd+0xdc>)
 8002d4c:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8002d50:	f04f 0200 	mov.w	r2, #0
 8002d54:	4b13      	ldr	r3, [pc, #76]	; (8002da4 <_ZN5Motor8setRatioEdd+0xe0>)
 8002d56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002d5a:	f7fd fc65 	bl	8000628 <__aeabi_dmul>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	460c      	mov	r4, r1
 8002d62:	4618      	mov	r0, r3
 8002d64:	4621      	mov	r1, r4
 8002d66:	f7fd ff0f 	bl	8000b88 <__aeabi_d2iz>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	b21a      	sxth	r2, r3
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8002d72:	f04f 0200 	mov.w	r2, #0
 8002d76:	4b0b      	ldr	r3, [pc, #44]	; (8002da4 <_ZN5Motor8setRatioEdd+0xe0>)
 8002d78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d7c:	f7fd fc54 	bl	8000628 <__aeabi_dmul>
 8002d80:	4603      	mov	r3, r0
 8002d82:	460c      	mov	r4, r1
 8002d84:	4618      	mov	r0, r3
 8002d86:	4621      	mov	r1, r4
 8002d88:	f7fd fefe 	bl	8000b88 <__aeabi_d2iz>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	b21a      	sxth	r2, r3
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	805a      	strh	r2, [r3, #2]

}
 8002d94:	bf00      	nop
 8002d96:	371c      	adds	r7, #28
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd90      	pop	{r4, r7, pc}
 8002d9c:	3ff00000 	.word	0x3ff00000
 8002da0:	bff00000 	.word	0xbff00000
 8002da4:	409c2000 	.word	0x409c2000

08002da8 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_(0), y_(0), theta_(0)
 8002da8:	b490      	push	{r4, r7}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]
 8002db4:	603b      	str	r3, [r7, #0]
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	f04f 0300 	mov.w	r3, #0
 8002dbc:	f04f 0400 	mov.w	r4, #0
 8002dc0:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	f04f 0300 	mov.w	r3, #0
 8002dca:	f04f 0400 	mov.w	r4, #0
 8002dce:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	f04f 0300 	mov.w	r3, #0
 8002dd8:	f04f 0400 	mov.w	r4, #0
 8002ddc:	e9c2 3408 	strd	r3, r4, [r2, #32]
{
	encoder_ = encoder;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	68ba      	ldr	r2, [r7, #8]
 8002de4:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	609a      	str	r2, [r3, #8]
}
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	4618      	mov	r0, r3
 8002df6:	3710      	adds	r7, #16
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bc90      	pop	{r4, r7}
 8002dfc:	4770      	bx	lr
	...

08002e00 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8002e00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e04:	b086      	sub	sp, #24
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = velocity_ctrl_->getCurrentOmega();
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f000 fc82 	bl	8003718 <_ZN12VelocityCtrl15getCurrentOmegaEv>
 8002e14:	ed87 0b04 	vstr	d0, [r7, #16]
	float distance = encoder_->getDistance();
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7fe fa89 	bl	8001334 <_ZN7Encoder11getDistanceEv>
 8002e22:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 8002e26:	a357      	add	r3, pc, #348	; (adr r3, 8002f84 <_ZN8Odometry12calcPotitionEv+0x184>)
 8002e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e2c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e30:	f7fd fbfa 	bl	8000628 <__aeabi_dmul>
 8002e34:	4603      	mov	r3, r0
 8002e36:	460c      	mov	r4, r1
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

	x_ = x_ + distance * cos(theta_ + delta_theta_ / 2);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f7fd fb97 	bl	8000578 <__aeabi_f2d>
 8002e4a:	4682      	mov	sl, r0
 8002e4c:	468b      	mov	fp, r1
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002e5a:	f04f 0200 	mov.w	r2, #0
 8002e5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e62:	f7fd fd0b 	bl	800087c <__aeabi_ddiv>
 8002e66:	4602      	mov	r2, r0
 8002e68:	460b      	mov	r3, r1
 8002e6a:	4640      	mov	r0, r8
 8002e6c:	4649      	mov	r1, r9
 8002e6e:	f7fd fa25 	bl	80002bc <__adddf3>
 8002e72:	4602      	mov	r2, r0
 8002e74:	460b      	mov	r3, r1
 8002e76:	ec43 2b17 	vmov	d7, r2, r3
 8002e7a:	eeb0 0a47 	vmov.f32	s0, s14
 8002e7e:	eef0 0a67 	vmov.f32	s1, s15
 8002e82:	f00e f999 	bl	80111b8 <cos>
 8002e86:	ec53 2b10 	vmov	r2, r3, d0
 8002e8a:	4650      	mov	r0, sl
 8002e8c:	4659      	mov	r1, fp
 8002e8e:	f7fd fbcb 	bl	8000628 <__aeabi_dmul>
 8002e92:	4602      	mov	r2, r0
 8002e94:	460b      	mov	r3, r1
 8002e96:	4620      	mov	r0, r4
 8002e98:	4629      	mov	r1, r5
 8002e9a:	f7fd fa0f 	bl	80002bc <__adddf3>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	460c      	mov	r4, r1
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_ = y_ + distance * sin(theta_ + delta_theta_ / 2);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f7fd fb62 	bl	8000578 <__aeabi_f2d>
 8002eb4:	4682      	mov	sl, r0
 8002eb6:	468b      	mov	fp, r1
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002ec4:	f04f 0200 	mov.w	r2, #0
 8002ec8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ecc:	f7fd fcd6 	bl	800087c <__aeabi_ddiv>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	4640      	mov	r0, r8
 8002ed6:	4649      	mov	r1, r9
 8002ed8:	f7fd f9f0 	bl	80002bc <__adddf3>
 8002edc:	4602      	mov	r2, r0
 8002ede:	460b      	mov	r3, r1
 8002ee0:	ec43 2b17 	vmov	d7, r2, r3
 8002ee4:	eeb0 0a47 	vmov.f32	s0, s14
 8002ee8:	eef0 0a67 	vmov.f32	s1, s15
 8002eec:	f00e f9a8 	bl	8011240 <sin>
 8002ef0:	ec53 2b10 	vmov	r2, r3, d0
 8002ef4:	4650      	mov	r0, sl
 8002ef6:	4659      	mov	r1, fp
 8002ef8:	f7fd fb96 	bl	8000628 <__aeabi_dmul>
 8002efc:	4602      	mov	r2, r0
 8002efe:	460b      	mov	r3, r1
 8002f00:	4620      	mov	r0, r4
 8002f02:	4629      	mov	r1, r5
 8002f04:	f7fd f9da 	bl	80002bc <__adddf3>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	460c      	mov	r4, r1
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_ = theta_ + delta_theta_;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8002f1e:	461a      	mov	r2, r3
 8002f20:	4623      	mov	r3, r4
 8002f22:	f7fd f9cb 	bl	80002bc <__adddf3>
 8002f26:	4603      	mov	r3, r0
 8002f28:	460c      	mov	r4, r1
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	e9c2 3408 	strd	r3, r4, [r2, #32]


	monitor_x = x_;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8002f36:	4618      	mov	r0, r3
 8002f38:	4621      	mov	r1, r4
 8002f3a:	f7fd fe6d 	bl	8000c18 <__aeabi_d2f>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	4b0d      	ldr	r3, [pc, #52]	; (8002f78 <_ZN8Odometry12calcPotitionEv+0x178>)
 8002f42:	601a      	str	r2, [r3, #0]
	monitor_y = y_;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	4621      	mov	r1, r4
 8002f4e:	f7fd fe63 	bl	8000c18 <__aeabi_d2f>
 8002f52:	4602      	mov	r2, r0
 8002f54:	4b09      	ldr	r3, [pc, #36]	; (8002f7c <_ZN8Odometry12calcPotitionEv+0x17c>)
 8002f56:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	4621      	mov	r1, r4
 8002f62:	f7fd fe59 	bl	8000c18 <__aeabi_d2f>
 8002f66:	4602      	mov	r2, r0
 8002f68:	4b05      	ldr	r3, [pc, #20]	; (8002f80 <_ZN8Odometry12calcPotitionEv+0x180>)
 8002f6a:	601a      	str	r2, [r3, #0]


}
 8002f6c:	bf00      	nop
 8002f6e:	3718      	adds	r7, #24
 8002f70:	46bd      	mov	sp, r7
 8002f72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f76:	bf00      	nop
 8002f78:	20000214 	.word	0x20000214
 8002f7c:	20000218 	.word	0x20000218
 8002f80:	2000021c 	.word	0x2000021c
 8002f84:	d2f1a9fc 	.word	0xd2f1a9fc
 8002f88:	3f50624d 	.word	0x3f50624d

08002f8c <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
	calcPotition();
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f7ff ff33 	bl	8002e00 <_ZN8Odometry12calcPotitionEv>
}
 8002f9a:	bf00      	nop
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <_ZN8Odometry8getThetaEv>:
{
	return y_;
}

double Odometry::getTheta()
{
 8002fa2:	b490      	push	{r4, r7}
 8002fa4:	b082      	sub	sp, #8
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
	return theta_;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8002fb0:	ec44 3b17 	vmov	d7, r3, r4
}
 8002fb4:	eeb0 0a47 	vmov.f32	s0, s14
 8002fb8:	eef0 0a67 	vmov.f32	s1, s15
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bc90      	pop	{r4, r7}
 8002fc2:	4770      	bx	lr

08002fc4 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 8002fc4:	b490      	push	{r4, r7}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
	x_ = 0;
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	f04f 0300 	mov.w	r3, #0
 8002fd2:	f04f 0400 	mov.w	r4, #0
 8002fd6:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_ = 0;
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	f04f 0300 	mov.w	r3, #0
 8002fe0:	f04f 0400 	mov.w	r4, #0
 8002fe4:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_ = 0;
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	f04f 0300 	mov.w	r3, #0
 8002fee:	f04f 0400 	mov.w	r4, #0
 8002ff2:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 8002ff6:	bf00      	nop
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bc90      	pop	{r4, r7}
 8002ffe:	4770      	bx	lr

08003000 <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 8003008:	2088      	movs	r0, #136	; 0x88
 800300a:	f7fe fe7c 	bl	8001d06 <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 800300e:	2080      	movs	r0, #128	; 0x80
 8003010:	f7fe fe79 	bl	8001d06 <INA260_init>
}
 8003014:	bf00      	nop
 8003016:	3708      	adds	r7, #8
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	0000      	movs	r0, r0
	...

08003020 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 8003020:	b590      	push	{r4, r7, lr}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 8003028:	2188      	movs	r1, #136	; 0x88
 800302a:	2002      	movs	r0, #2
 800302c:	f7fe fe08 	bl	8001c40 <INA260_read>
 8003030:	4603      	mov	r3, r0
 8003032:	4618      	mov	r0, r3
 8003034:	f7fd fa8e 	bl	8000554 <__aeabi_i2d>
 8003038:	a30c      	add	r3, pc, #48	; (adr r3, 800306c <_ZN11PowerSensor12updateValuesEv+0x4c>)
 800303a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800303e:	f7fd faf3 	bl	8000628 <__aeabi_dmul>
 8003042:	4603      	mov	r3, r0
 8003044:	460c      	mov	r4, r1
 8003046:	4618      	mov	r0, r3
 8003048:	4621      	mov	r1, r4
 800304a:	f7fd fde5 	bl	8000c18 <__aeabi_d2f>
 800304e:	4602      	mov	r2, r0
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	4a03      	ldr	r2, [pc, #12]	; (8003068 <_ZN11PowerSensor12updateValuesEv+0x48>)
 800305a:	6013      	str	r3, [r2, #0]
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	bd90      	pop	{r4, r7, pc}
 8003064:	f3af 8000 	nop.w
 8003068:	20000220 	.word	0x20000220
 800306c:	47ae147b 	.word	0x47ae147b
 8003070:	3f547ae1 	.word	0x3f547ae1
 8003074:	00000000 	.word	0x00000000

08003078 <_ZN11PowerSensor12butteryCheckEv>:
	return buttery_voltage_;

}

bool PowerSensor::butteryCheck()
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
	static uint16_t cnt;
	bool ret = false;
 8003080:	2300      	movs	r3, #0
 8003082:	73fb      	strb	r3, [r7, #15]

	if(buttery_voltage_ < LOW_VOLTAGE_THRESHOLD) cnt++;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	4618      	mov	r0, r3
 800308a:	f7fd fa75 	bl	8000578 <__aeabi_f2d>
 800308e:	a311      	add	r3, pc, #68	; (adr r3, 80030d4 <_ZN11PowerSensor12butteryCheckEv+0x5c>)
 8003090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003094:	f7fd fd3a 	bl	8000b0c <__aeabi_dcmplt>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d006      	beq.n	80030ac <_ZN11PowerSensor12butteryCheckEv+0x34>
 800309e:	4b0c      	ldr	r3, [pc, #48]	; (80030d0 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 80030a0:	881b      	ldrh	r3, [r3, #0]
 80030a2:	3301      	adds	r3, #1
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	4b0a      	ldr	r3, [pc, #40]	; (80030d0 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 80030a8:	801a      	strh	r2, [r3, #0]
 80030aa:	e002      	b.n	80030b2 <_ZN11PowerSensor12butteryCheckEv+0x3a>
	else cnt = 0;
 80030ac:	4b08      	ldr	r3, [pc, #32]	; (80030d0 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	801a      	strh	r2, [r3, #0]

	if(cnt >= 1) {
 80030b2:	4b07      	ldr	r3, [pc, #28]	; (80030d0 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 80030b4:	881b      	ldrh	r3, [r3, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d004      	beq.n	80030c4 <_ZN11PowerSensor12butteryCheckEv+0x4c>
		ret = true;
 80030ba:	2301      	movs	r3, #1
 80030bc:	73fb      	strb	r3, [r7, #15]
		cnt = 1;
 80030be:	4b04      	ldr	r3, [pc, #16]	; (80030d0 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 80030c0:	2201      	movs	r2, #1
 80030c2:	801a      	strh	r2, [r3, #0]
	}

	return ret;
 80030c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	20000224 	.word	0x20000224
 80030d4:	9999999a 	.word	0x9999999a
 80030d8:	401d9999 	.word	0x401d9999

080030dc <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 80030e4:	2300      	movs	r3, #0
 80030e6:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 80030e8:	2102      	movs	r1, #2
 80030ea:	4822      	ldr	r0, [pc, #136]	; (8003174 <_ZN12RotarySwitch8getValueEv+0x98>)
 80030ec:	f004 f846 	bl	800717c <HAL_GPIO_ReadPin>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	bf0c      	ite	eq
 80030f6:	2301      	moveq	r3, #1
 80030f8:	2300      	movne	r3, #0
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d003      	beq.n	8003108 <_ZN12RotarySwitch8getValueEv+0x2c>
 8003100:	89fb      	ldrh	r3, [r7, #14]
 8003102:	f043 0301 	orr.w	r3, r3, #1
 8003106:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8003108:	2108      	movs	r1, #8
 800310a:	481a      	ldr	r0, [pc, #104]	; (8003174 <_ZN12RotarySwitch8getValueEv+0x98>)
 800310c:	f004 f836 	bl	800717c <HAL_GPIO_ReadPin>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	bf0c      	ite	eq
 8003116:	2301      	moveq	r3, #1
 8003118:	2300      	movne	r3, #0
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2b00      	cmp	r3, #0
 800311e:	d003      	beq.n	8003128 <_ZN12RotarySwitch8getValueEv+0x4c>
 8003120:	89fb      	ldrh	r3, [r7, #14]
 8003122:	f043 0302 	orr.w	r3, r3, #2
 8003126:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8003128:	2110      	movs	r1, #16
 800312a:	4812      	ldr	r0, [pc, #72]	; (8003174 <_ZN12RotarySwitch8getValueEv+0x98>)
 800312c:	f004 f826 	bl	800717c <HAL_GPIO_ReadPin>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	bf0c      	ite	eq
 8003136:	2301      	moveq	r3, #1
 8003138:	2300      	movne	r3, #0
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b00      	cmp	r3, #0
 800313e:	d003      	beq.n	8003148 <_ZN12RotarySwitch8getValueEv+0x6c>
 8003140:	89fb      	ldrh	r3, [r7, #14]
 8003142:	f043 0304 	orr.w	r3, r3, #4
 8003146:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 8003148:	2180      	movs	r1, #128	; 0x80
 800314a:	480a      	ldr	r0, [pc, #40]	; (8003174 <_ZN12RotarySwitch8getValueEv+0x98>)
 800314c:	f004 f816 	bl	800717c <HAL_GPIO_ReadPin>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	bf0c      	ite	eq
 8003156:	2301      	moveq	r3, #1
 8003158:	2300      	movne	r3, #0
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b00      	cmp	r3, #0
 800315e:	d003      	beq.n	8003168 <_ZN12RotarySwitch8getValueEv+0x8c>
 8003160:	89fb      	ldrh	r3, [r7, #14]
 8003162:	f043 0308 	orr.w	r3, r3, #8
 8003166:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8003168:	89fb      	ldrh	r3, [r7, #14]

}
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	40020c00 	.word	0x40020c00

08003178 <_ZN10SideSensorC1Ev>:
 *      Author: under
 */

#include "SideSensor.hpp"

SideSensor::SideSensor()
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
{

}
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4618      	mov	r0, r3
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
	...

08003190 <_ZN10SideSensor12updateStatusEt>:


void SideSensor::updateStatus(uint16_t gpio_pin)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	460b      	mov	r3, r1
 800319a:	807b      	strh	r3, [r7, #2]
	static bool white_flag1 = false;
	static bool white_flag2 = false;

	if (gpio_pin == GPIO_PIN_2 && white_flag1 == false){
 800319c:	887b      	ldrh	r3, [r7, #2]
 800319e:	2b04      	cmp	r3, #4
 80031a0:	d111      	bne.n	80031c6 <_ZN10SideSensor12updateStatusEt+0x36>
 80031a2:	4b28      	ldr	r3, [pc, #160]	; (8003244 <_ZN10SideSensor12updateStatusEt+0xb4>)
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	f083 0301 	eor.w	r3, r3, #1
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00a      	beq.n	80031c6 <_ZN10SideSensor12updateStatusEt+0x36>
		status_ |= 0x01;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	881b      	ldrh	r3, [r3, #0]
 80031b4:	f043 0301 	orr.w	r3, r3, #1
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	801a      	strh	r2, [r3, #0]
		white_flag1 = true;
 80031be:	4b21      	ldr	r3, [pc, #132]	; (8003244 <_ZN10SideSensor12updateStatusEt+0xb4>)
 80031c0:	2201      	movs	r2, #1
 80031c2:	701a      	strb	r2, [r3, #0]
 80031c4:	e010      	b.n	80031e8 <_ZN10SideSensor12updateStatusEt+0x58>
	}
	else if(gpio_pin == GPIO_PIN_2 && white_flag1 == true){
 80031c6:	887b      	ldrh	r3, [r7, #2]
 80031c8:	2b04      	cmp	r3, #4
 80031ca:	d10d      	bne.n	80031e8 <_ZN10SideSensor12updateStatusEt+0x58>
 80031cc:	4b1d      	ldr	r3, [pc, #116]	; (8003244 <_ZN10SideSensor12updateStatusEt+0xb4>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d009      	beq.n	80031e8 <_ZN10SideSensor12updateStatusEt+0x58>
		status_ ^= 0x01;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	881b      	ldrh	r3, [r3, #0]
 80031d8:	f083 0301 	eor.w	r3, r3, #1
 80031dc:	b29a      	uxth	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	801a      	strh	r2, [r3, #0]
		white_flag1 = false;
 80031e2:	4b18      	ldr	r3, [pc, #96]	; (8003244 <_ZN10SideSensor12updateStatusEt+0xb4>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	701a      	strb	r2, [r3, #0]

	}

	if (gpio_pin == GPIO_PIN_8 && white_flag2 == false){
 80031e8:	887b      	ldrh	r3, [r7, #2]
 80031ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031ee:	d111      	bne.n	8003214 <_ZN10SideSensor12updateStatusEt+0x84>
 80031f0:	4b15      	ldr	r3, [pc, #84]	; (8003248 <_ZN10SideSensor12updateStatusEt+0xb8>)
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	f083 0301 	eor.w	r3, r3, #1
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00a      	beq.n	8003214 <_ZN10SideSensor12updateStatusEt+0x84>
		status_ |= 0x02;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	881b      	ldrh	r3, [r3, #0]
 8003202:	f043 0302 	orr.w	r3, r3, #2
 8003206:	b29a      	uxth	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	801a      	strh	r2, [r3, #0]
		white_flag2 = true;
 800320c:	4b0e      	ldr	r3, [pc, #56]	; (8003248 <_ZN10SideSensor12updateStatusEt+0xb8>)
 800320e:	2201      	movs	r2, #1
 8003210:	701a      	strb	r2, [r3, #0]
	else if(gpio_pin == GPIO_PIN_8 && white_flag2 == true){
		status_ ^= 0x02;
		white_flag2 = false;
	}

}
 8003212:	e011      	b.n	8003238 <_ZN10SideSensor12updateStatusEt+0xa8>
	else if(gpio_pin == GPIO_PIN_8 && white_flag2 == true){
 8003214:	887b      	ldrh	r3, [r7, #2]
 8003216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800321a:	d10d      	bne.n	8003238 <_ZN10SideSensor12updateStatusEt+0xa8>
 800321c:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <_ZN10SideSensor12updateStatusEt+0xb8>)
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d009      	beq.n	8003238 <_ZN10SideSensor12updateStatusEt+0xa8>
		status_ ^= 0x02;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	881b      	ldrh	r3, [r3, #0]
 8003228:	f083 0302 	eor.w	r3, r3, #2
 800322c:	b29a      	uxth	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	801a      	strh	r2, [r3, #0]
		white_flag2 = false;
 8003232:	4b05      	ldr	r3, [pc, #20]	; (8003248 <_ZN10SideSensor12updateStatusEt+0xb8>)
 8003234:	2200      	movs	r2, #0
 8003236:	701a      	strb	r2, [r3, #0]
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr
 8003244:	20000226 	.word	0x20000226
 8003248:	20000227 	.word	0x20000227

0800324c <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
//#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 800324c:	b490      	push	{r4, r7}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
 8003258:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f04f 0200 	mov.w	r2, #0
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f04f 0200 	mov.w	r2, #0
 8003268:	605a      	str	r2, [r3, #4]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f04f 0200 	mov.w	r2, #0
 8003270:	609a      	str	r2, [r3, #8]
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	f04f 0300 	mov.w	r3, #0
 8003278:	f04f 0400 	mov.w	r4, #0
 800327c:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f04f 0200 	mov.w	r2, #0
 8003286:	619a      	str	r2, [r3, #24]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f04f 0200 	mov.w	r2, #0
 800328e:	61da      	str	r2, [r3, #28]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f04f 0200 	mov.w	r2, #0
 8003296:	621a      	str	r2, [r3, #32]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f04f 0200 	mov.w	r2, #0
 800329e:	625a      	str	r2, [r3, #36]	; 0x24
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f04f 0200 	mov.w	r2, #0
 80032a6:	629a      	str	r2, [r3, #40]	; 0x28
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f04f 0200 	mov.w	r2, #0
 80032ae:	62da      	str	r2, [r3, #44]	; 0x2c
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
{
	motor_ = motor;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	68ba      	ldr	r2, [r7, #8]
 80032bc:	635a      	str	r2, [r3, #52]	; 0x34
	encoder_ = encoder;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	639a      	str	r2, [r3, #56]	; 0x38
	imu_ = imu;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	683a      	ldr	r2, [r7, #0]
 80032c8:	63da      	str	r2, [r3, #60]	; 0x3c

}
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	4618      	mov	r0, r3
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bc90      	pop	{r4, r7}
 80032d4:	4770      	bx	lr
	...

080032d8 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 80032d8:	b590      	push	{r4, r7, lr}
 80032da:	b087      	sub	sp, #28
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e4:	f107 020c 	add.w	r2, r7, #12
 80032e8:	f107 0110 	add.w	r1, r7, #16
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7fe f80d 	bl	800130c <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 80032f2:	ed97 7a04 	vldr	s14, [r7, #16]
 80032f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80032fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032fe:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003302:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003306:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 800330a:	6978      	ldr	r0, [r7, #20]
 800330c:	f7fd f934 	bl	8000578 <__aeabi_f2d>
 8003310:	a30b      	add	r3, pc, #44	; (adr r3, 8003340 <_ZN12VelocityCtrl12calcVelocityEv+0x68>)
 8003312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003316:	f7fd f987 	bl	8000628 <__aeabi_dmul>
 800331a:	4603      	mov	r3, r0
 800331c:	460c      	mov	r4, r1
 800331e:	4618      	mov	r0, r3
 8003320:	4621      	mov	r1, r4
 8003322:	f7fd fc79 	bl	8000c18 <__aeabi_d2f>
 8003326:	4602      	mov	r2, r0
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	ee07 3a90 	vmov	s15, r3
}
 8003334:	eeb0 0a67 	vmov.f32	s0, s15
 8003338:	371c      	adds	r7, #28
 800333a:	46bd      	mov	sp, r7
 800333c:	bd90      	pop	{r4, r7, pc}
 800333e:	bf00      	nop
 8003340:	1ab1d998 	.word	0x1ab1d998
 8003344:	3f7830b5 	.word	0x3f7830b5

08003348 <_ZN12VelocityCtrl9calcOmegaEv>:

double VelocityCtrl::calcOmega()
{
 8003348:	b5b0      	push	{r4, r5, r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
	double omega = imu_->getOmega();
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003354:	4618      	mov	r0, r3
 8003356:	f7fe fb99 	bl	8001a8c <_ZN3IMU8getOmegaEv>
 800335a:	ed87 0b02 	vstr	d0, [r7, #8]
	current_omega_ = -(omega / 16.4) * PI / 180;
 800335e:	a317      	add	r3, pc, #92	; (adr r3, 80033bc <_ZN12VelocityCtrl9calcOmegaEv+0x74>)
 8003360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003364:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003368:	f7fd fa88 	bl	800087c <__aeabi_ddiv>
 800336c:	4602      	mov	r2, r0
 800336e:	460b      	mov	r3, r1
 8003370:	4614      	mov	r4, r2
 8003372:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003376:	a313      	add	r3, pc, #76	; (adr r3, 80033c4 <_ZN12VelocityCtrl9calcOmegaEv+0x7c>)
 8003378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800337c:	4620      	mov	r0, r4
 800337e:	4629      	mov	r1, r5
 8003380:	f7fd f952 	bl	8000628 <__aeabi_dmul>
 8003384:	4603      	mov	r3, r0
 8003386:	460c      	mov	r4, r1
 8003388:	4618      	mov	r0, r3
 800338a:	4621      	mov	r1, r4
 800338c:	f04f 0200 	mov.w	r2, #0
 8003390:	4b09      	ldr	r3, [pc, #36]	; (80033b8 <_ZN12VelocityCtrl9calcOmegaEv+0x70>)
 8003392:	f7fd fa73 	bl	800087c <__aeabi_ddiv>
 8003396:	4603      	mov	r3, r0
 8003398:	460c      	mov	r4, r1
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	e9c2 3404 	strd	r3, r4, [r2, #16]
	//printf("omegao: %f\n", current_omega_);

	return current_omega_;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80033a6:	ec44 3b17 	vmov	d7, r3, r4
}
 80033aa:	eeb0 0a47 	vmov.f32	s0, s14
 80033ae:	eef0 0a67 	vmov.f32	s1, s15
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bdb0      	pop	{r4, r5, r7, pc}
 80033b8:	40668000 	.word	0x40668000
 80033bc:	66666666 	.word	0x66666666
 80033c0:	40306666 	.word	0x40306666
 80033c4:	54411744 	.word	0x54411744
 80033c8:	400921fb 	.word	0x400921fb
 80033cc:	00000000 	.word	0x00000000

080033d0 <_ZN12VelocityCtrl3pidEv>:

void VelocityCtrl::pid()
{
 80033d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033d2:	b08d      	sub	sp, #52	; 0x34
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
	float static v_pre_diff, o_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	ed93 7a00 	vldr	s14, [r3]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80033e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033e8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float o_diff = target_omega_- current_omega_;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7fd f8c1 	bl	8000578 <__aeabi_f2d>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80033fc:	461a      	mov	r2, r3
 80033fe:	4623      	mov	r3, r4
 8003400:	f7fc ff5a 	bl	80002b8 <__aeabi_dsub>
 8003404:	4603      	mov	r3, r0
 8003406:	460c      	mov	r4, r1
 8003408:	4618      	mov	r0, r3
 800340a:	4621      	mov	r1, r4
 800340c:	f7fd fc04 	bl	8000c18 <__aeabi_d2f>
 8003410:	4603      	mov	r3, r0
 8003412:	62bb      	str	r3, [r7, #40]	; 0x28

	float v_p, v_d, o_p, o_d;
	static float v_i, o_i;

	v_p = v_kp_ * v_diff;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	edd3 7a06 	vldr	s15, [r3, #24]
 800341a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800341e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003422:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	v_d = v_kd_ * (v_diff - v_pre_diff) * DELTA_T;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	ed93 7a07 	vldr	s14, [r3, #28]
 800342c:	4b72      	ldr	r3, [pc, #456]	; (80035f8 <_ZN12VelocityCtrl3pidEv+0x228>)
 800342e:	edd3 7a00 	vldr	s15, [r3]
 8003432:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8003436:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800343a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800343e:	ee17 0a90 	vmov	r0, s15
 8003442:	f7fd f899 	bl	8000578 <__aeabi_f2d>
 8003446:	a36a      	add	r3, pc, #424	; (adr r3, 80035f0 <_ZN12VelocityCtrl3pidEv+0x220>)
 8003448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344c:	f7fd f8ec 	bl	8000628 <__aeabi_dmul>
 8003450:	4603      	mov	r3, r0
 8003452:	460c      	mov	r4, r1
 8003454:	4618      	mov	r0, r3
 8003456:	4621      	mov	r1, r4
 8003458:	f7fd fbde 	bl	8000c18 <__aeabi_d2f>
 800345c:	4603      	mov	r3, r0
 800345e:	623b      	str	r3, [r7, #32]
	v_i += v_ki_ * v_diff * DELTA_T;
 8003460:	4b66      	ldr	r3, [pc, #408]	; (80035fc <_ZN12VelocityCtrl3pidEv+0x22c>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4618      	mov	r0, r3
 8003466:	f7fd f887 	bl	8000578 <__aeabi_f2d>
 800346a:	4604      	mov	r4, r0
 800346c:	460d      	mov	r5, r1
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	ed93 7a08 	vldr	s14, [r3, #32]
 8003474:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003478:	ee67 7a27 	vmul.f32	s15, s14, s15
 800347c:	ee17 0a90 	vmov	r0, s15
 8003480:	f7fd f87a 	bl	8000578 <__aeabi_f2d>
 8003484:	a35a      	add	r3, pc, #360	; (adr r3, 80035f0 <_ZN12VelocityCtrl3pidEv+0x220>)
 8003486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800348a:	f7fd f8cd 	bl	8000628 <__aeabi_dmul>
 800348e:	4602      	mov	r2, r0
 8003490:	460b      	mov	r3, r1
 8003492:	4620      	mov	r0, r4
 8003494:	4629      	mov	r1, r5
 8003496:	f7fc ff11 	bl	80002bc <__adddf3>
 800349a:	4603      	mov	r3, r0
 800349c:	460c      	mov	r4, r1
 800349e:	4618      	mov	r0, r3
 80034a0:	4621      	mov	r1, r4
 80034a2:	f7fd fbb9 	bl	8000c18 <__aeabi_d2f>
 80034a6:	4602      	mov	r2, r0
 80034a8:	4b54      	ldr	r3, [pc, #336]	; (80035fc <_ZN12VelocityCtrl3pidEv+0x22c>)
 80034aa:	601a      	str	r2, [r3, #0]

	o_p = o_kp_ * o_diff;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80034b2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80034b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ba:	edc7 7a07 	vstr	s15, [r7, #28]
	o_d = o_kd_ * (o_diff - o_pre_diff) * DELTA_T;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80034c4:	4b4e      	ldr	r3, [pc, #312]	; (8003600 <_ZN12VelocityCtrl3pidEv+0x230>)
 80034c6:	edd3 7a00 	vldr	s15, [r3]
 80034ca:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80034ce:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80034d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034d6:	ee17 0a90 	vmov	r0, s15
 80034da:	f7fd f84d 	bl	8000578 <__aeabi_f2d>
 80034de:	a344      	add	r3, pc, #272	; (adr r3, 80035f0 <_ZN12VelocityCtrl3pidEv+0x220>)
 80034e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e4:	f7fd f8a0 	bl	8000628 <__aeabi_dmul>
 80034e8:	4603      	mov	r3, r0
 80034ea:	460c      	mov	r4, r1
 80034ec:	4618      	mov	r0, r3
 80034ee:	4621      	mov	r1, r4
 80034f0:	f7fd fb92 	bl	8000c18 <__aeabi_d2f>
 80034f4:	4603      	mov	r3, r0
 80034f6:	61bb      	str	r3, [r7, #24]
	o_i += o_ki_ * o_diff * DELTA_T;
 80034f8:	4b42      	ldr	r3, [pc, #264]	; (8003604 <_ZN12VelocityCtrl3pidEv+0x234>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7fd f83b 	bl	8000578 <__aeabi_f2d>
 8003502:	4604      	mov	r4, r0
 8003504:	460d      	mov	r5, r1
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800350c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003510:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003514:	ee17 0a90 	vmov	r0, s15
 8003518:	f7fd f82e 	bl	8000578 <__aeabi_f2d>
 800351c:	a334      	add	r3, pc, #208	; (adr r3, 80035f0 <_ZN12VelocityCtrl3pidEv+0x220>)
 800351e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003522:	f7fd f881 	bl	8000628 <__aeabi_dmul>
 8003526:	4602      	mov	r2, r0
 8003528:	460b      	mov	r3, r1
 800352a:	4620      	mov	r0, r4
 800352c:	4629      	mov	r1, r5
 800352e:	f7fc fec5 	bl	80002bc <__adddf3>
 8003532:	4603      	mov	r3, r0
 8003534:	460c      	mov	r4, r1
 8003536:	4618      	mov	r0, r3
 8003538:	4621      	mov	r1, r4
 800353a:	f7fd fb6d 	bl	8000c18 <__aeabi_d2f>
 800353e:	4602      	mov	r2, r0
 8003540:	4b30      	ldr	r3, [pc, #192]	; (8003604 <_ZN12VelocityCtrl3pidEv+0x234>)
 8003542:	601a      	str	r2, [r3, #0]

	float v_left_ratio, v_right_ratio, o_left_ratio, o_right_ratio;

	v_left_ratio = v_right_ratio =  v_p + v_d + v_i;
 8003544:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003548:	edd7 7a08 	vldr	s15, [r7, #32]
 800354c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003550:	4b2a      	ldr	r3, [pc, #168]	; (80035fc <_ZN12VelocityCtrl3pidEv+0x22c>)
 8003552:	edd3 7a00 	vldr	s15, [r3]
 8003556:	ee77 7a27 	vadd.f32	s15, s14, s15
 800355a:	edc7 7a05 	vstr	s15, [r7, #20]
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	613b      	str	r3, [r7, #16]

	o_left_ratio = o_p + o_d + o_i;
 8003562:	ed97 7a07 	vldr	s14, [r7, #28]
 8003566:	edd7 7a06 	vldr	s15, [r7, #24]
 800356a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800356e:	4b25      	ldr	r3, [pc, #148]	; (8003604 <_ZN12VelocityCtrl3pidEv+0x234>)
 8003570:	edd3 7a00 	vldr	s15, [r3]
 8003574:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003578:	edc7 7a03 	vstr	s15, [r7, #12]
	o_right_ratio = -(o_p + o_d + o_i);
 800357c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003580:	edd7 7a06 	vldr	s15, [r7, #24]
 8003584:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003588:	4b1e      	ldr	r3, [pc, #120]	; (8003604 <_ZN12VelocityCtrl3pidEv+0x234>)
 800358a:	edd3 7a00 	vldr	s15, [r3]
 800358e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003592:	eef1 7a67 	vneg.f32	s15, s15
 8003596:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(v_left_ratio + o_left_ratio, v_right_ratio + o_right_ratio);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800359e:	ed97 7a04 	vldr	s14, [r7, #16]
 80035a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80035a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035aa:	ee17 0a90 	vmov	r0, s15
 80035ae:	f7fc ffe3 	bl	8000578 <__aeabi_f2d>
 80035b2:	4605      	mov	r5, r0
 80035b4:	460e      	mov	r6, r1
 80035b6:	ed97 7a05 	vldr	s14, [r7, #20]
 80035ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80035be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035c2:	ee17 0a90 	vmov	r0, s15
 80035c6:	f7fc ffd7 	bl	8000578 <__aeabi_f2d>
 80035ca:	4602      	mov	r2, r0
 80035cc:	460b      	mov	r3, r1
 80035ce:	ec43 2b11 	vmov	d1, r2, r3
 80035d2:	ec46 5b10 	vmov	d0, r5, r6
 80035d6:	4620      	mov	r0, r4
 80035d8:	f7ff fb74 	bl	8002cc4 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 80035dc:	4a06      	ldr	r2, [pc, #24]	; (80035f8 <_ZN12VelocityCtrl3pidEv+0x228>)
 80035de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e0:	6013      	str	r3, [r2, #0]
	o_pre_diff = o_diff;
 80035e2:	4a07      	ldr	r2, [pc, #28]	; (8003600 <_ZN12VelocityCtrl3pidEv+0x230>)
 80035e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e6:	6013      	str	r3, [r2, #0]
}
 80035e8:	bf00      	nop
 80035ea:	3734      	adds	r7, #52	; 0x34
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80035f4:	3f50624d 	.word	0x3f50624d
 80035f8:	20000228 	.word	0x20000228
 80035fc:	20000230 	.word	0x20000230
 8003600:	2000022c 	.word	0x2000022c
 8003604:	20000234 	.word	0x20000234

08003608 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	ed87 0a02 	vstr	s0, [r7, #8]
 8003614:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	68ba      	ldr	r2, [r7, #8]
 800361c:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	605a      	str	r2, [r3, #4]
}
 8003624:	bf00      	nop
 8003626:	3714      	adds	r7, #20
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float kd, float ki)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	ed87 0a02 	vstr	s0, [r7, #8]
 800363c:	edc7 0a01 	vstr	s1, [r7, #4]
 8003640:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	68ba      	ldr	r2, [r7, #8]
 8003648:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	61da      	str	r2, [r3, #28]
	v_ki_ = ki;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	683a      	ldr	r2, [r7, #0]
 8003654:	621a      	str	r2, [r3, #32]
}
 8003656:	bf00      	nop
 8003658:	3714      	adds	r7, #20
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr

08003662 <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float kd, float ki)
{
 8003662:	b480      	push	{r7}
 8003664:	b085      	sub	sp, #20
 8003666:	af00      	add	r7, sp, #0
 8003668:	60f8      	str	r0, [r7, #12]
 800366a:	ed87 0a02 	vstr	s0, [r7, #8]
 800366e:	edc7 0a01 	vstr	s1, [r7, #4]
 8003672:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	68ba      	ldr	r2, [r7, #8]
 800367a:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	629a      	str	r2, [r3, #40]	; 0x28
	o_ki_ = ki;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003688:	bf00      	nop
 800368a:	3714      	adds	r7, #20
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
    calcVelocity();
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f7ff fe1b 	bl	80032d8 <_ZN12VelocityCtrl12calcVelocityEv>
	calcOmega();
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7ff fe50 	bl	8003348 <_ZN12VelocityCtrl9calcOmegaEv>

	if(excution_flag_ == true){
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d002      	beq.n	80036b8 <_ZN12VelocityCtrl4flipEv+0x24>
		pid();
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7ff fe8c 	bl	80033d0 <_ZN12VelocityCtrl3pidEv>
	}


}
 80036b8:	bf00      	nop
 80036ba:	3708      	adds	r7, #8
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	//calcOmega();
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr
 80036dc:	0000      	movs	r0, r0
	...

080036e0 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	motor_->setRatio(0, 0);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036f4:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8003710 <_ZN12VelocityCtrl4stopEv+0x30>
 80036f8:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8003710 <_ZN12VelocityCtrl4stopEv+0x30>
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7ff fae1 	bl	8002cc4 <_ZN5Motor8setRatioEdd>

}
 8003702:	bf00      	nop
 8003704:	3708      	adds	r7, #8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	f3af 8000 	nop.w
	...

08003718 <_ZN12VelocityCtrl15getCurrentOmegaEv>:
{
	return current_velocity_;
}

double VelocityCtrl::getCurrentOmega()
{
 8003718:	b490      	push	{r4, r7}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
	return current_omega_;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8003726:	ec44 3b17 	vmov	d7, r3, r4
}
 800372a:	eeb0 0a47 	vmov.f32	s0, s14
 800372e:	eef0 0a67 	vmov.f32	s1, s15
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bc90      	pop	{r4, r7}
 8003738:	4770      	bx	lr

0800373a <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800373a:	b480      	push	{r7}
 800373c:	b083      	sub	sp, #12
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003742:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003746:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b00      	cmp	r3, #0
 8003750:	d013      	beq.n	800377a <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003752:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003756:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800375a:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00b      	beq.n	800377a <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003762:	e000      	b.n	8003766 <ITM_SendChar+0x2c>
    {
      __NOP();
 8003764:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003766:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d0f9      	beq.n	8003764 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003770:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	b2d2      	uxtb	r2, r2
 8003778:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800377a:	687b      	ldr	r3, [r7, #4]
}
 800377c:	4618      	mov	r0, r3
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


int _write(int file, char *ptr, int len)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b086      	sub	sp, #24
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8003794:	2300      	movs	r3, #0
 8003796:	617b      	str	r3, [r7, #20]
 8003798:	e009      	b.n	80037ae <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	1c5a      	adds	r2, r3, #1
 800379e:	60ba      	str	r2, [r7, #8]
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7ff ffc9 	bl	800373a <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	3301      	adds	r3, #1
 80037ac:	617b      	str	r3, [r7, #20]
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	dbf1      	blt.n	800379a <_write+0x12>
  }
  return len;
 80037b6:	687b      	ldr	r3, [r7, #4]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3718      	adds	r7, #24
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	4603      	mov	r3, r0
 80037c8:	80fb      	strh	r3, [r7, #6]
	cppExit(GPIO_Pin);
 80037ca:	88fb      	ldrh	r3, [r7, #6]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f001 feef 	bl	80055b0 <cppExit>
}
 80037d2:	bf00      	nop
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
	...

080037dc <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a1e      	ldr	r2, [pc, #120]	; (8003864 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d10e      	bne.n	800380c <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip1ms();
 80037ee:	f001 fe67 	bl	80054c0 <cppFlip1ms>

		tim6_timer++;
 80037f2:	4b1d      	ldr	r3, [pc, #116]	; (8003868 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	3301      	adds	r3, #1
 80037f8:	4a1b      	ldr	r2, [pc, #108]	; (8003868 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80037fa:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 80037fc:	4b1a      	ldr	r3, [pc, #104]	; (8003868 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a1a      	ldr	r2, [pc, #104]	; (800386c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d902      	bls.n	800380c <HAL_TIM_PeriodElapsedCallback+0x30>
 8003806:	4b18      	ldr	r3, [pc, #96]	; (8003868 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM7){
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a17      	ldr	r2, [pc, #92]	; (8003870 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d10e      	bne.n	8003834 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip100ns();
 8003816:	f001 feb1 	bl	800557c <cppFlip100ns>

		tim7_timer++;
 800381a:	4b16      	ldr	r3, [pc, #88]	; (8003874 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	3301      	adds	r3, #1
 8003820:	4a14      	ldr	r2, [pc, #80]	; (8003874 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003822:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8003824:	4b13      	ldr	r3, [pc, #76]	; (8003874 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a10      	ldr	r2, [pc, #64]	; (800386c <HAL_TIM_PeriodElapsedCallback+0x90>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d902      	bls.n	8003834 <HAL_TIM_PeriodElapsedCallback+0x58>
 800382e:	4b11      	ldr	r3, [pc, #68]	; (8003874 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003830:	2200      	movs	r2, #0
 8003832:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == TIM13){
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a0f      	ldr	r2, [pc, #60]	; (8003878 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d10e      	bne.n	800385c <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 800383e:	f001 fea7 	bl	8005590 <cppFlip10ms>

		tim13_timer++;
 8003842:	4b0e      	ldr	r3, [pc, #56]	; (800387c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	3301      	adds	r3, #1
 8003848:	4a0c      	ldr	r2, [pc, #48]	; (800387c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800384a:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 800384c:	4b0b      	ldr	r3, [pc, #44]	; (800387c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a06      	ldr	r2, [pc, #24]	; (800386c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d902      	bls.n	800385c <HAL_TIM_PeriodElapsedCallback+0x80>
 8003856:	4b09      	ldr	r3, [pc, #36]	; (800387c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003858:	2200      	movs	r2, #0
 800385a:	601a      	str	r2, [r3, #0]
	}

}
 800385c:	bf00      	nop
 800385e:	3708      	adds	r7, #8
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40001000 	.word	0x40001000
 8003868:	20015ed8 	.word	0x20015ed8
 800386c:	0001869f 	.word	0x0001869f
 8003870:	40001400 	.word	0x40001400
 8003874:	20015f1c 	.word	0x20015f1c
 8003878:	40001c00 	.word	0x40001c00
 800387c:	20015f20 	.word	0x20015f20

08003880 <init>:

void init()
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8003884:	2201      	movs	r2, #1
 8003886:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800388a:	4808      	ldr	r0, [pc, #32]	; (80038ac <init+0x2c>)
 800388c:	f003 fc8e 	bl	80071ac <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8003890:	4807      	ldr	r0, [pc, #28]	; (80038b0 <init+0x30>)
 8003892:	f007 fb6e 	bl	800af72 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8003896:	4807      	ldr	r0, [pc, #28]	; (80038b4 <init+0x34>)
 8003898:	f007 fb6b 	bl	800af72 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 800389c:	4806      	ldr	r0, [pc, #24]	; (80038b8 <init+0x38>)
 800389e:	f007 fb68 	bl	800af72 <HAL_TIM_Base_Start_IT>

	cppInit();
 80038a2:	f001 fd8b 	bl	80053bc <cppInit>

}
 80038a6:	bf00      	nop
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	40021000 	.word	0x40021000
 80038b0:	20016004 	.word	0x20016004
 80038b4:	200161a8 	.word	0x200161a8
 80038b8:	20015f24 	.word	0x20015f24

080038bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80038c0:	f002 f96c 	bl	8005b9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80038c4:	f000 f82a 	bl	800391c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80038c8:	f000 fdbc 	bl	8004444 <MX_GPIO_Init>
  MX_DMA_Init();
 80038cc:	f000 fd8a 	bl	80043e4 <MX_DMA_Init>
  MX_I2C2_Init();
 80038d0:	f000 f9e8 	bl	8003ca4 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 80038d4:	f000 fa14 	bl	8003d00 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 80038d8:	f000 fa32 	bl	8003d40 <MX_SPI2_Init>
  MX_TIM1_Init();
 80038dc:	f000 fa66 	bl	8003dac <MX_TIM1_Init>
  MX_TIM4_Init();
 80038e0:	f000 fb70 	bl	8003fc4 <MX_TIM4_Init>
  MX_TIM8_Init();
 80038e4:	f000 fc3c 	bl	8004160 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 80038e8:	f000 fd52 	bl	8004390 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 80038ec:	f009 fb14 	bl	800cf18 <MX_FATFS_Init>
  MX_TIM6_Init();
 80038f0:	f000 fbcc 	bl	800408c <MX_TIM6_Init>
  MX_I2C1_Init();
 80038f4:	f000 f9a8 	bl	8003c48 <MX_I2C1_Init>
  MX_TIM3_Init();
 80038f8:	f000 fb00 	bl	8003efc <MX_TIM3_Init>
  MX_TIM10_Init();
 80038fc:	f000 fc88 	bl	8004210 <MX_TIM10_Init>
  MX_TIM11_Init();
 8003900:	f000 fcd4 	bl	80042ac <MX_TIM11_Init>
  MX_ADC2_Init();
 8003904:	f000 f898 	bl	8003a38 <MX_ADC2_Init>
  MX_TIM7_Init();
 8003908:	f000 fbf6 	bl	80040f8 <MX_TIM7_Init>
  MX_TIM13_Init();
 800390c:	f000 fd1c 	bl	8004348 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8003910:	f7ff ffb6 	bl	8003880 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8003914:	f001 fe5c 	bl	80055d0 <cppLoop>
 8003918:	e7fc      	b.n	8003914 <main+0x58>
	...

0800391c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b0a4      	sub	sp, #144	; 0x90
 8003920:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003922:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003926:	2234      	movs	r2, #52	; 0x34
 8003928:	2100      	movs	r1, #0
 800392a:	4618      	mov	r0, r3
 800392c:	f00e fcc4 	bl	80122b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003930:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003934:	2200      	movs	r2, #0
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	605a      	str	r2, [r3, #4]
 800393a:	609a      	str	r2, [r3, #8]
 800393c:	60da      	str	r2, [r3, #12]
 800393e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003940:	f107 030c 	add.w	r3, r7, #12
 8003944:	223c      	movs	r2, #60	; 0x3c
 8003946:	2100      	movs	r1, #0
 8003948:	4618      	mov	r0, r3
 800394a:	f00e fcb5 	bl	80122b8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800394e:	2300      	movs	r3, #0
 8003950:	60bb      	str	r3, [r7, #8]
 8003952:	4b37      	ldr	r3, [pc, #220]	; (8003a30 <SystemClock_Config+0x114>)
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	4a36      	ldr	r2, [pc, #216]	; (8003a30 <SystemClock_Config+0x114>)
 8003958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800395c:	6413      	str	r3, [r2, #64]	; 0x40
 800395e:	4b34      	ldr	r3, [pc, #208]	; (8003a30 <SystemClock_Config+0x114>)
 8003960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003966:	60bb      	str	r3, [r7, #8]
 8003968:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800396a:	2300      	movs	r3, #0
 800396c:	607b      	str	r3, [r7, #4]
 800396e:	4b31      	ldr	r3, [pc, #196]	; (8003a34 <SystemClock_Config+0x118>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a30      	ldr	r2, [pc, #192]	; (8003a34 <SystemClock_Config+0x118>)
 8003974:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003978:	6013      	str	r3, [r2, #0]
 800397a:	4b2e      	ldr	r3, [pc, #184]	; (8003a34 <SystemClock_Config+0x118>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003982:	607b      	str	r3, [r7, #4]
 8003984:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003986:	2301      	movs	r3, #1
 8003988:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800398a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800398e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003990:	2302      	movs	r3, #2
 8003992:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003994:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003998:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 800399a:	2308      	movs	r3, #8
 800399c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800399e:	23b4      	movs	r3, #180	; 0xb4
 80039a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80039a4:	2302      	movs	r3, #2
 80039a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80039aa:	2308      	movs	r3, #8
 80039ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 80039b0:	2302      	movs	r3, #2
 80039b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80039b6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80039ba:	4618      	mov	r0, r3
 80039bc:	f005 f830 	bl	8008a20 <HAL_RCC_OscConfig>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <SystemClock_Config+0xae>
  {
    Error_Handler();
 80039c6:	f000 fe93 	bl	80046f0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80039ca:	f004 fbab 	bl	8008124 <HAL_PWREx_EnableOverDrive>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80039d4:	f000 fe8c 	bl	80046f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80039d8:	230f      	movs	r3, #15
 80039da:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80039dc:	2302      	movs	r3, #2
 80039de:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80039e0:	2300      	movs	r3, #0
 80039e2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80039e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80039e8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80039ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039ee:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80039f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80039f4:	2105      	movs	r1, #5
 80039f6:	4618      	mov	r0, r3
 80039f8:	f004 fbe4 	bl	80081c4 <HAL_RCC_ClockConfig>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8003a02:	f000 fe75 	bl	80046f0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8003a06:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003a0a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8003a10:	2300      	movs	r3, #0
 8003a12:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a14:	f107 030c 	add.w	r3, r7, #12
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f004 fdc3 	bl	80085a4 <HAL_RCCEx_PeriphCLKConfig>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d001      	beq.n	8003a28 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8003a24:	f000 fe64 	bl	80046f0 <Error_Handler>
  }
}
 8003a28:	bf00      	nop
 8003a2a:	3790      	adds	r7, #144	; 0x90
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	40023800 	.word	0x40023800
 8003a34:	40007000 	.word	0x40007000

08003a38 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003a3e:	463b      	mov	r3, r7
 8003a40:	2200      	movs	r2, #0
 8003a42:	601a      	str	r2, [r3, #0]
 8003a44:	605a      	str	r2, [r3, #4]
 8003a46:	609a      	str	r2, [r3, #8]
 8003a48:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8003a4a:	4b7c      	ldr	r3, [pc, #496]	; (8003c3c <MX_ADC2_Init+0x204>)
 8003a4c:	4a7c      	ldr	r2, [pc, #496]	; (8003c40 <MX_ADC2_Init+0x208>)
 8003a4e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003a50:	4b7a      	ldr	r3, [pc, #488]	; (8003c3c <MX_ADC2_Init+0x204>)
 8003a52:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003a56:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003a58:	4b78      	ldr	r3, [pc, #480]	; (8003c3c <MX_ADC2_Init+0x204>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8003a5e:	4b77      	ldr	r3, [pc, #476]	; (8003c3c <MX_ADC2_Init+0x204>)
 8003a60:	2201      	movs	r2, #1
 8003a62:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8003a64:	4b75      	ldr	r3, [pc, #468]	; (8003c3c <MX_ADC2_Init+0x204>)
 8003a66:	2201      	movs	r2, #1
 8003a68:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003a6a:	4b74      	ldr	r3, [pc, #464]	; (8003c3c <MX_ADC2_Init+0x204>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003a72:	4b72      	ldr	r3, [pc, #456]	; (8003c3c <MX_ADC2_Init+0x204>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003a78:	4b70      	ldr	r3, [pc, #448]	; (8003c3c <MX_ADC2_Init+0x204>)
 8003a7a:	4a72      	ldr	r2, [pc, #456]	; (8003c44 <MX_ADC2_Init+0x20c>)
 8003a7c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003a7e:	4b6f      	ldr	r3, [pc, #444]	; (8003c3c <MX_ADC2_Init+0x204>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8003a84:	4b6d      	ldr	r3, [pc, #436]	; (8003c3c <MX_ADC2_Init+0x204>)
 8003a86:	220e      	movs	r2, #14
 8003a88:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8003a8a:	4b6c      	ldr	r3, [pc, #432]	; (8003c3c <MX_ADC2_Init+0x204>)
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003a92:	4b6a      	ldr	r3, [pc, #424]	; (8003c3c <MX_ADC2_Init+0x204>)
 8003a94:	2201      	movs	r2, #1
 8003a96:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003a98:	4868      	ldr	r0, [pc, #416]	; (8003c3c <MX_ADC2_Init+0x204>)
 8003a9a:	f002 f913 	bl	8005cc4 <HAL_ADC_Init>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d001      	beq.n	8003aa8 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8003aa4:	f000 fe24 	bl	80046f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8003aa8:	230a      	movs	r3, #10
 8003aaa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003aac:	2301      	movs	r3, #1
 8003aae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8003ab0:	2306      	movs	r3, #6
 8003ab2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003ab4:	463b      	mov	r3, r7
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	4860      	ldr	r0, [pc, #384]	; (8003c3c <MX_ADC2_Init+0x204>)
 8003aba:	f002 fa57 	bl	8005f6c <HAL_ADC_ConfigChannel>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8003ac4:	f000 fe14 	bl	80046f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003ac8:	230b      	movs	r3, #11
 8003aca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003acc:	2302      	movs	r3, #2
 8003ace:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003ad0:	463b      	mov	r3, r7
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	4859      	ldr	r0, [pc, #356]	; (8003c3c <MX_ADC2_Init+0x204>)
 8003ad6:	f002 fa49 	bl	8005f6c <HAL_ADC_ConfigChannel>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8003ae0:	f000 fe06 	bl	80046f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8003ae4:	230c      	movs	r3, #12
 8003ae6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003aec:	463b      	mov	r3, r7
 8003aee:	4619      	mov	r1, r3
 8003af0:	4852      	ldr	r0, [pc, #328]	; (8003c3c <MX_ADC2_Init+0x204>)
 8003af2:	f002 fa3b 	bl	8005f6c <HAL_ADC_ConfigChannel>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d001      	beq.n	8003b00 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8003afc:	f000 fdf8 	bl	80046f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8003b00:	230d      	movs	r3, #13
 8003b02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8003b04:	2304      	movs	r3, #4
 8003b06:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003b08:	463b      	mov	r3, r7
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	484b      	ldr	r0, [pc, #300]	; (8003c3c <MX_ADC2_Init+0x204>)
 8003b0e:	f002 fa2d 	bl	8005f6c <HAL_ADC_ConfigChannel>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8003b18:	f000 fdea 	bl	80046f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8003b20:	2305      	movs	r3, #5
 8003b22:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003b24:	463b      	mov	r3, r7
 8003b26:	4619      	mov	r1, r3
 8003b28:	4844      	ldr	r0, [pc, #272]	; (8003c3c <MX_ADC2_Init+0x204>)
 8003b2a:	f002 fa1f 	bl	8005f6c <HAL_ADC_ConfigChannel>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d001      	beq.n	8003b38 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8003b34:	f000 fddc 	bl	80046f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8003b3c:	2306      	movs	r3, #6
 8003b3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003b40:	463b      	mov	r3, r7
 8003b42:	4619      	mov	r1, r3
 8003b44:	483d      	ldr	r0, [pc, #244]	; (8003c3c <MX_ADC2_Init+0x204>)
 8003b46:	f002 fa11 	bl	8005f6c <HAL_ADC_ConfigChannel>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d001      	beq.n	8003b54 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8003b50:	f000 fdce 	bl	80046f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003b54:	2302      	movs	r3, #2
 8003b56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8003b58:	2307      	movs	r3, #7
 8003b5a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003b5c:	463b      	mov	r3, r7
 8003b5e:	4619      	mov	r1, r3
 8003b60:	4836      	ldr	r0, [pc, #216]	; (8003c3c <MX_ADC2_Init+0x204>)
 8003b62:	f002 fa03 	bl	8005f6c <HAL_ADC_ConfigChannel>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d001      	beq.n	8003b70 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8003b6c:	f000 fdc0 	bl	80046f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003b70:	2303      	movs	r3, #3
 8003b72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8003b74:	2308      	movs	r3, #8
 8003b76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003b78:	463b      	mov	r3, r7
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	482f      	ldr	r0, [pc, #188]	; (8003c3c <MX_ADC2_Init+0x204>)
 8003b7e:	f002 f9f5 	bl	8005f6c <HAL_ADC_ConfigChannel>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d001      	beq.n	8003b8c <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8003b88:	f000 fdb2 	bl	80046f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003b8c:	2304      	movs	r3, #4
 8003b8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8003b90:	2309      	movs	r3, #9
 8003b92:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003b94:	463b      	mov	r3, r7
 8003b96:	4619      	mov	r1, r3
 8003b98:	4828      	ldr	r0, [pc, #160]	; (8003c3c <MX_ADC2_Init+0x204>)
 8003b9a:	f002 f9e7 	bl	8005f6c <HAL_ADC_ConfigChannel>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8003ba4:	f000 fda4 	bl	80046f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8003ba8:	2305      	movs	r3, #5
 8003baa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8003bac:	230a      	movs	r3, #10
 8003bae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003bb0:	463b      	mov	r3, r7
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	4821      	ldr	r0, [pc, #132]	; (8003c3c <MX_ADC2_Init+0x204>)
 8003bb6:	f002 f9d9 	bl	8005f6c <HAL_ADC_ConfigChannel>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d001      	beq.n	8003bc4 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8003bc0:	f000 fd96 	bl	80046f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003bc4:	2306      	movs	r3, #6
 8003bc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8003bc8:	230b      	movs	r3, #11
 8003bca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003bcc:	463b      	mov	r3, r7
 8003bce:	4619      	mov	r1, r3
 8003bd0:	481a      	ldr	r0, [pc, #104]	; (8003c3c <MX_ADC2_Init+0x204>)
 8003bd2:	f002 f9cb 	bl	8005f6c <HAL_ADC_ConfigChannel>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d001      	beq.n	8003be0 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8003bdc:	f000 fd88 	bl	80046f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8003be0:	2307      	movs	r3, #7
 8003be2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8003be4:	230c      	movs	r3, #12
 8003be6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003be8:	463b      	mov	r3, r7
 8003bea:	4619      	mov	r1, r3
 8003bec:	4813      	ldr	r0, [pc, #76]	; (8003c3c <MX_ADC2_Init+0x204>)
 8003bee:	f002 f9bd 	bl	8005f6c <HAL_ADC_ConfigChannel>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d001      	beq.n	8003bfc <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8003bf8:	f000 fd7a 	bl	80046f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003bfc:	2308      	movs	r3, #8
 8003bfe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8003c00:	230d      	movs	r3, #13
 8003c02:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003c04:	463b      	mov	r3, r7
 8003c06:	4619      	mov	r1, r3
 8003c08:	480c      	ldr	r0, [pc, #48]	; (8003c3c <MX_ADC2_Init+0x204>)
 8003c0a:	f002 f9af 	bl	8005f6c <HAL_ADC_ConfigChannel>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d001      	beq.n	8003c18 <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8003c14:	f000 fd6c 	bl	80046f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8003c18:	2309      	movs	r3, #9
 8003c1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8003c1c:	230e      	movs	r3, #14
 8003c1e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003c20:	463b      	mov	r3, r7
 8003c22:	4619      	mov	r1, r3
 8003c24:	4805      	ldr	r0, [pc, #20]	; (8003c3c <MX_ADC2_Init+0x204>)
 8003c26:	f002 f9a1 	bl	8005f6c <HAL_ADC_ConfigChannel>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d001      	beq.n	8003c34 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 8003c30:	f000 fd5e 	bl	80046f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003c34:	bf00      	nop
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	20015da8 	.word	0x20015da8
 8003c40:	40012100 	.word	0x40012100
 8003c44:	0f000001 	.word	0x0f000001

08003c48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003c4c:	4b12      	ldr	r3, [pc, #72]	; (8003c98 <MX_I2C1_Init+0x50>)
 8003c4e:	4a13      	ldr	r2, [pc, #76]	; (8003c9c <MX_I2C1_Init+0x54>)
 8003c50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003c52:	4b11      	ldr	r3, [pc, #68]	; (8003c98 <MX_I2C1_Init+0x50>)
 8003c54:	4a12      	ldr	r2, [pc, #72]	; (8003ca0 <MX_I2C1_Init+0x58>)
 8003c56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003c58:	4b0f      	ldr	r3, [pc, #60]	; (8003c98 <MX_I2C1_Init+0x50>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003c5e:	4b0e      	ldr	r3, [pc, #56]	; (8003c98 <MX_I2C1_Init+0x50>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c64:	4b0c      	ldr	r3, [pc, #48]	; (8003c98 <MX_I2C1_Init+0x50>)
 8003c66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003c6a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c6c:	4b0a      	ldr	r3, [pc, #40]	; (8003c98 <MX_I2C1_Init+0x50>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003c72:	4b09      	ldr	r3, [pc, #36]	; (8003c98 <MX_I2C1_Init+0x50>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c78:	4b07      	ldr	r3, [pc, #28]	; (8003c98 <MX_I2C1_Init+0x50>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8003c7e:	4b06      	ldr	r3, [pc, #24]	; (8003c98 <MX_I2C1_Init+0x50>)
 8003c80:	2280      	movs	r2, #128	; 0x80
 8003c82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003c84:	4804      	ldr	r0, [pc, #16]	; (8003c98 <MX_I2C1_Init+0x50>)
 8003c86:	f003 fac3 	bl	8007210 <HAL_I2C_Init>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d001      	beq.n	8003c94 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003c90:	f000 fd2e 	bl	80046f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003c94:	bf00      	nop
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	20015df0 	.word	0x20015df0
 8003c9c:	40005400 	.word	0x40005400
 8003ca0:	000186a0 	.word	0x000186a0

08003ca4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003ca8:	4b12      	ldr	r3, [pc, #72]	; (8003cf4 <MX_I2C2_Init+0x50>)
 8003caa:	4a13      	ldr	r2, [pc, #76]	; (8003cf8 <MX_I2C2_Init+0x54>)
 8003cac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8003cae:	4b11      	ldr	r3, [pc, #68]	; (8003cf4 <MX_I2C2_Init+0x50>)
 8003cb0:	4a12      	ldr	r2, [pc, #72]	; (8003cfc <MX_I2C2_Init+0x58>)
 8003cb2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003cb4:	4b0f      	ldr	r3, [pc, #60]	; (8003cf4 <MX_I2C2_Init+0x50>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003cba:	4b0e      	ldr	r3, [pc, #56]	; (8003cf4 <MX_I2C2_Init+0x50>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003cc0:	4b0c      	ldr	r3, [pc, #48]	; (8003cf4 <MX_I2C2_Init+0x50>)
 8003cc2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003cc6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003cc8:	4b0a      	ldr	r3, [pc, #40]	; (8003cf4 <MX_I2C2_Init+0x50>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003cce:	4b09      	ldr	r3, [pc, #36]	; (8003cf4 <MX_I2C2_Init+0x50>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003cd4:	4b07      	ldr	r3, [pc, #28]	; (8003cf4 <MX_I2C2_Init+0x50>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8003cda:	4b06      	ldr	r3, [pc, #24]	; (8003cf4 <MX_I2C2_Init+0x50>)
 8003cdc:	2280      	movs	r2, #128	; 0x80
 8003cde:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003ce0:	4804      	ldr	r0, [pc, #16]	; (8003cf4 <MX_I2C2_Init+0x50>)
 8003ce2:	f003 fa95 	bl	8007210 <HAL_I2C_Init>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d001      	beq.n	8003cf0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003cec:	f000 fd00 	bl	80046f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003cf0:	bf00      	nop
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	20015e84 	.word	0x20015e84
 8003cf8:	40005800 	.word	0x40005800
 8003cfc:	000186a0 	.word	0x000186a0

08003d00 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8003d04:	4b0c      	ldr	r3, [pc, #48]	; (8003d38 <MX_SDIO_SD_Init+0x38>)
 8003d06:	4a0d      	ldr	r2, [pc, #52]	; (8003d3c <MX_SDIO_SD_Init+0x3c>)
 8003d08:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8003d0a:	4b0b      	ldr	r3, [pc, #44]	; (8003d38 <MX_SDIO_SD_Init+0x38>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8003d10:	4b09      	ldr	r3, [pc, #36]	; (8003d38 <MX_SDIO_SD_Init+0x38>)
 8003d12:	2200      	movs	r2, #0
 8003d14:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003d16:	4b08      	ldr	r3, [pc, #32]	; (8003d38 <MX_SDIO_SD_Init+0x38>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8003d1c:	4b06      	ldr	r3, [pc, #24]	; (8003d38 <MX_SDIO_SD_Init+0x38>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003d22:	4b05      	ldr	r3, [pc, #20]	; (8003d38 <MX_SDIO_SD_Init+0x38>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8003d28:	4b03      	ldr	r3, [pc, #12]	; (8003d38 <MX_SDIO_SD_Init+0x38>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8003d2e:	bf00      	nop
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr
 8003d38:	20016084 	.word	0x20016084
 8003d3c:	40012c00 	.word	0x40012c00

08003d40 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003d44:	4b17      	ldr	r3, [pc, #92]	; (8003da4 <MX_SPI2_Init+0x64>)
 8003d46:	4a18      	ldr	r2, [pc, #96]	; (8003da8 <MX_SPI2_Init+0x68>)
 8003d48:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003d4a:	4b16      	ldr	r3, [pc, #88]	; (8003da4 <MX_SPI2_Init+0x64>)
 8003d4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003d50:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003d52:	4b14      	ldr	r3, [pc, #80]	; (8003da4 <MX_SPI2_Init+0x64>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003d58:	4b12      	ldr	r3, [pc, #72]	; (8003da4 <MX_SPI2_Init+0x64>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003d5e:	4b11      	ldr	r3, [pc, #68]	; (8003da4 <MX_SPI2_Init+0x64>)
 8003d60:	2202      	movs	r2, #2
 8003d62:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003d64:	4b0f      	ldr	r3, [pc, #60]	; (8003da4 <MX_SPI2_Init+0x64>)
 8003d66:	2201      	movs	r2, #1
 8003d68:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003d6a:	4b0e      	ldr	r3, [pc, #56]	; (8003da4 <MX_SPI2_Init+0x64>)
 8003d6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d70:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003d72:	4b0c      	ldr	r3, [pc, #48]	; (8003da4 <MX_SPI2_Init+0x64>)
 8003d74:	2228      	movs	r2, #40	; 0x28
 8003d76:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003d78:	4b0a      	ldr	r3, [pc, #40]	; (8003da4 <MX_SPI2_Init+0x64>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003d7e:	4b09      	ldr	r3, [pc, #36]	; (8003da4 <MX_SPI2_Init+0x64>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d84:	4b07      	ldr	r3, [pc, #28]	; (8003da4 <MX_SPI2_Init+0x64>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003d8a:	4b06      	ldr	r3, [pc, #24]	; (8003da4 <MX_SPI2_Init+0x64>)
 8003d8c:	220a      	movs	r2, #10
 8003d8e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003d90:	4804      	ldr	r0, [pc, #16]	; (8003da4 <MX_SPI2_Init+0x64>)
 8003d92:	f006 fb6f 	bl	800a474 <HAL_SPI_Init>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d001      	beq.n	8003da0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003d9c:	f000 fca8 	bl	80046f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003da0:	bf00      	nop
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	20015cd0 	.word	0x20015cd0
 8003da8:	40003800 	.word	0x40003800

08003dac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b09a      	sub	sp, #104	; 0x68
 8003db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003db2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003db6:	2224      	movs	r2, #36	; 0x24
 8003db8:	2100      	movs	r1, #0
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f00e fa7c 	bl	80122b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003dc0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	601a      	str	r2, [r3, #0]
 8003dc8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003dca:	f107 0320 	add.w	r3, r7, #32
 8003dce:	2200      	movs	r2, #0
 8003dd0:	601a      	str	r2, [r3, #0]
 8003dd2:	605a      	str	r2, [r3, #4]
 8003dd4:	609a      	str	r2, [r3, #8]
 8003dd6:	60da      	str	r2, [r3, #12]
 8003dd8:	611a      	str	r2, [r3, #16]
 8003dda:	615a      	str	r2, [r3, #20]
 8003ddc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003dde:	463b      	mov	r3, r7
 8003de0:	2220      	movs	r2, #32
 8003de2:	2100      	movs	r1, #0
 8003de4:	4618      	mov	r0, r3
 8003de6:	f00e fa67 	bl	80122b8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003dea:	4b42      	ldr	r3, [pc, #264]	; (8003ef4 <MX_TIM1_Init+0x148>)
 8003dec:	4a42      	ldr	r2, [pc, #264]	; (8003ef8 <MX_TIM1_Init+0x14c>)
 8003dee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003df0:	4b40      	ldr	r3, [pc, #256]	; (8003ef4 <MX_TIM1_Init+0x148>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003df6:	4b3f      	ldr	r3, [pc, #252]	; (8003ef4 <MX_TIM1_Init+0x148>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003dfc:	4b3d      	ldr	r3, [pc, #244]	; (8003ef4 <MX_TIM1_Init+0x148>)
 8003dfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e02:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e04:	4b3b      	ldr	r3, [pc, #236]	; (8003ef4 <MX_TIM1_Init+0x148>)
 8003e06:	2200      	movs	r2, #0
 8003e08:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003e0a:	4b3a      	ldr	r3, [pc, #232]	; (8003ef4 <MX_TIM1_Init+0x148>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e10:	4b38      	ldr	r3, [pc, #224]	; (8003ef4 <MX_TIM1_Init+0x148>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003e16:	4837      	ldr	r0, [pc, #220]	; (8003ef4 <MX_TIM1_Init+0x148>)
 8003e18:	f007 f8cf 	bl	800afba <HAL_TIM_PWM_Init>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003e22:	f000 fc65 	bl	80046f0 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003e26:	2303      	movs	r3, #3
 8003e28:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003e32:	2300      	movs	r3, #0
 8003e34:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8003e36:	2300      	movs	r3, #0
 8003e38:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003e42:	2300      	movs	r3, #0
 8003e44:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8003e46:	2300      	movs	r3, #0
 8003e48:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8003e4a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003e4e:	4619      	mov	r1, r3
 8003e50:	4828      	ldr	r0, [pc, #160]	; (8003ef4 <MX_TIM1_Init+0x148>)
 8003e52:	f007 f91b 	bl	800b08c <HAL_TIM_Encoder_Init>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8003e5c:	f000 fc48 	bl	80046f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e60:	2300      	movs	r3, #0
 8003e62:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e64:	2300      	movs	r3, #0
 8003e66:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003e68:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	4821      	ldr	r0, [pc, #132]	; (8003ef4 <MX_TIM1_Init+0x148>)
 8003e70:	f007 fe42 	bl	800baf8 <HAL_TIMEx_MasterConfigSynchronization>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d001      	beq.n	8003e7e <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8003e7a:	f000 fc39 	bl	80046f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e7e:	2360      	movs	r3, #96	; 0x60
 8003e80:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8003e82:	2300      	movs	r3, #0
 8003e84:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e86:	2300      	movs	r3, #0
 8003e88:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003e92:	2300      	movs	r3, #0
 8003e94:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003e96:	2300      	movs	r3, #0
 8003e98:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003e9a:	f107 0320 	add.w	r3, r7, #32
 8003e9e:	2208      	movs	r2, #8
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	4814      	ldr	r0, [pc, #80]	; (8003ef4 <MX_TIM1_Init+0x148>)
 8003ea4:	f007 fac4 	bl	800b430 <HAL_TIM_PWM_ConfigChannel>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d001      	beq.n	8003eb2 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8003eae:	f000 fc1f 	bl	80046f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003ec6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003eca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003ed0:	463b      	mov	r3, r7
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	4807      	ldr	r0, [pc, #28]	; (8003ef4 <MX_TIM1_Init+0x148>)
 8003ed6:	f007 fe8b 	bl	800bbf0 <HAL_TIMEx_ConfigBreakDeadTime>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d001      	beq.n	8003ee4 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8003ee0:	f000 fc06 	bl	80046f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003ee4:	4803      	ldr	r0, [pc, #12]	; (8003ef4 <MX_TIM1_Init+0x148>)
 8003ee6:	f000 ffeb 	bl	8004ec0 <HAL_TIM_MspPostInit>

}
 8003eea:	bf00      	nop
 8003eec:	3768      	adds	r7, #104	; 0x68
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	20016044 	.word	0x20016044
 8003ef8:	40010000 	.word	0x40010000

08003efc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b08a      	sub	sp, #40	; 0x28
 8003f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f02:	f107 0320 	add.w	r3, r7, #32
 8003f06:	2200      	movs	r2, #0
 8003f08:	601a      	str	r2, [r3, #0]
 8003f0a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f0c:	1d3b      	adds	r3, r7, #4
 8003f0e:	2200      	movs	r2, #0
 8003f10:	601a      	str	r2, [r3, #0]
 8003f12:	605a      	str	r2, [r3, #4]
 8003f14:	609a      	str	r2, [r3, #8]
 8003f16:	60da      	str	r2, [r3, #12]
 8003f18:	611a      	str	r2, [r3, #16]
 8003f1a:	615a      	str	r2, [r3, #20]
 8003f1c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003f1e:	4b27      	ldr	r3, [pc, #156]	; (8003fbc <MX_TIM3_Init+0xc0>)
 8003f20:	4a27      	ldr	r2, [pc, #156]	; (8003fc0 <MX_TIM3_Init+0xc4>)
 8003f22:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003f24:	4b25      	ldr	r3, [pc, #148]	; (8003fbc <MX_TIM3_Init+0xc0>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f2a:	4b24      	ldr	r3, [pc, #144]	; (8003fbc <MX_TIM3_Init+0xc0>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003f30:	4b22      	ldr	r3, [pc, #136]	; (8003fbc <MX_TIM3_Init+0xc0>)
 8003f32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f36:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f38:	4b20      	ldr	r3, [pc, #128]	; (8003fbc <MX_TIM3_Init+0xc0>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f3e:	4b1f      	ldr	r3, [pc, #124]	; (8003fbc <MX_TIM3_Init+0xc0>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003f44:	481d      	ldr	r0, [pc, #116]	; (8003fbc <MX_TIM3_Init+0xc0>)
 8003f46:	f007 f838 	bl	800afba <HAL_TIM_PWM_Init>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d001      	beq.n	8003f54 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8003f50:	f000 fbce 	bl	80046f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f54:	2300      	movs	r3, #0
 8003f56:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003f5c:	f107 0320 	add.w	r3, r7, #32
 8003f60:	4619      	mov	r1, r3
 8003f62:	4816      	ldr	r0, [pc, #88]	; (8003fbc <MX_TIM3_Init+0xc0>)
 8003f64:	f007 fdc8 	bl	800baf8 <HAL_TIMEx_MasterConfigSynchronization>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8003f6e:	f000 fbbf 	bl	80046f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f72:	2360      	movs	r3, #96	; 0x60
 8003f74:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003f76:	2300      	movs	r3, #0
 8003f78:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003f82:	1d3b      	adds	r3, r7, #4
 8003f84:	2200      	movs	r2, #0
 8003f86:	4619      	mov	r1, r3
 8003f88:	480c      	ldr	r0, [pc, #48]	; (8003fbc <MX_TIM3_Init+0xc0>)
 8003f8a:	f007 fa51 	bl	800b430 <HAL_TIM_PWM_ConfigChannel>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8003f94:	f000 fbac 	bl	80046f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003f98:	1d3b      	adds	r3, r7, #4
 8003f9a:	2204      	movs	r2, #4
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	4807      	ldr	r0, [pc, #28]	; (8003fbc <MX_TIM3_Init+0xc0>)
 8003fa0:	f007 fa46 	bl	800b430 <HAL_TIM_PWM_ConfigChannel>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8003faa:	f000 fba1 	bl	80046f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003fae:	4803      	ldr	r0, [pc, #12]	; (8003fbc <MX_TIM3_Init+0xc0>)
 8003fb0:	f000 ff86 	bl	8004ec0 <HAL_TIM_MspPostInit>

}
 8003fb4:	bf00      	nop
 8003fb6:	3728      	adds	r7, #40	; 0x28
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	20015edc 	.word	0x20015edc
 8003fc0:	40000400 	.word	0x40000400

08003fc4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b08a      	sub	sp, #40	; 0x28
 8003fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fca:	f107 0320 	add.w	r3, r7, #32
 8003fce:	2200      	movs	r2, #0
 8003fd0:	601a      	str	r2, [r3, #0]
 8003fd2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003fd4:	1d3b      	adds	r3, r7, #4
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	601a      	str	r2, [r3, #0]
 8003fda:	605a      	str	r2, [r3, #4]
 8003fdc:	609a      	str	r2, [r3, #8]
 8003fde:	60da      	str	r2, [r3, #12]
 8003fe0:	611a      	str	r2, [r3, #16]
 8003fe2:	615a      	str	r2, [r3, #20]
 8003fe4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003fe6:	4b27      	ldr	r3, [pc, #156]	; (8004084 <MX_TIM4_Init+0xc0>)
 8003fe8:	4a27      	ldr	r2, [pc, #156]	; (8004088 <MX_TIM4_Init+0xc4>)
 8003fea:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003fec:	4b25      	ldr	r3, [pc, #148]	; (8004084 <MX_TIM4_Init+0xc0>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ff2:	4b24      	ldr	r3, [pc, #144]	; (8004084 <MX_TIM4_Init+0xc0>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 8003ff8:	4b22      	ldr	r3, [pc, #136]	; (8004084 <MX_TIM4_Init+0xc0>)
 8003ffa:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8003ffe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004000:	4b20      	ldr	r3, [pc, #128]	; (8004084 <MX_TIM4_Init+0xc0>)
 8004002:	2200      	movs	r2, #0
 8004004:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004006:	4b1f      	ldr	r3, [pc, #124]	; (8004084 <MX_TIM4_Init+0xc0>)
 8004008:	2200      	movs	r2, #0
 800400a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800400c:	481d      	ldr	r0, [pc, #116]	; (8004084 <MX_TIM4_Init+0xc0>)
 800400e:	f006 ffd4 	bl	800afba <HAL_TIM_PWM_Init>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d001      	beq.n	800401c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8004018:	f000 fb6a 	bl	80046f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800401c:	2300      	movs	r3, #0
 800401e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004020:	2300      	movs	r3, #0
 8004022:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004024:	f107 0320 	add.w	r3, r7, #32
 8004028:	4619      	mov	r1, r3
 800402a:	4816      	ldr	r0, [pc, #88]	; (8004084 <MX_TIM4_Init+0xc0>)
 800402c:	f007 fd64 	bl	800baf8 <HAL_TIMEx_MasterConfigSynchronization>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8004036:	f000 fb5b 	bl	80046f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800403a:	2360      	movs	r3, #96	; 0x60
 800403c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800403e:	2300      	movs	r3, #0
 8004040:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004042:	2300      	movs	r3, #0
 8004044:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004046:	2300      	movs	r3, #0
 8004048:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800404a:	1d3b      	adds	r3, r7, #4
 800404c:	2208      	movs	r2, #8
 800404e:	4619      	mov	r1, r3
 8004050:	480c      	ldr	r0, [pc, #48]	; (8004084 <MX_TIM4_Init+0xc0>)
 8004052:	f007 f9ed 	bl	800b430 <HAL_TIM_PWM_ConfigChannel>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d001      	beq.n	8004060 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800405c:	f000 fb48 	bl	80046f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004060:	1d3b      	adds	r3, r7, #4
 8004062:	220c      	movs	r2, #12
 8004064:	4619      	mov	r1, r3
 8004066:	4807      	ldr	r0, [pc, #28]	; (8004084 <MX_TIM4_Init+0xc0>)
 8004068:	f007 f9e2 	bl	800b430 <HAL_TIM_PWM_ConfigChannel>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8004072:	f000 fb3d 	bl	80046f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8004076:	4803      	ldr	r0, [pc, #12]	; (8004084 <MX_TIM4_Init+0xc0>)
 8004078:	f000 ff22 	bl	8004ec0 <HAL_TIM_MspPostInit>

}
 800407c:	bf00      	nop
 800407e:	3728      	adds	r7, #40	; 0x28
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	20015d68 	.word	0x20015d68
 8004088:	40000800 	.word	0x40000800

0800408c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004092:	463b      	mov	r3, r7
 8004094:	2200      	movs	r2, #0
 8004096:	601a      	str	r2, [r3, #0]
 8004098:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800409a:	4b15      	ldr	r3, [pc, #84]	; (80040f0 <MX_TIM6_Init+0x64>)
 800409c:	4a15      	ldr	r2, [pc, #84]	; (80040f4 <MX_TIM6_Init+0x68>)
 800409e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 80040a0:	4b13      	ldr	r3, [pc, #76]	; (80040f0 <MX_TIM6_Init+0x64>)
 80040a2:	2259      	movs	r2, #89	; 0x59
 80040a4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040a6:	4b12      	ldr	r3, [pc, #72]	; (80040f0 <MX_TIM6_Init+0x64>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80040ac:	4b10      	ldr	r3, [pc, #64]	; (80040f0 <MX_TIM6_Init+0x64>)
 80040ae:	f240 32e7 	movw	r2, #999	; 0x3e7
 80040b2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80040b4:	4b0e      	ldr	r3, [pc, #56]	; (80040f0 <MX_TIM6_Init+0x64>)
 80040b6:	2280      	movs	r2, #128	; 0x80
 80040b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80040ba:	480d      	ldr	r0, [pc, #52]	; (80040f0 <MX_TIM6_Init+0x64>)
 80040bc:	f006 ff2e 	bl	800af1c <HAL_TIM_Base_Init>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d001      	beq.n	80040ca <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80040c6:	f000 fb13 	bl	80046f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040ca:	2300      	movs	r3, #0
 80040cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040ce:	2300      	movs	r3, #0
 80040d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80040d2:	463b      	mov	r3, r7
 80040d4:	4619      	mov	r1, r3
 80040d6:	4806      	ldr	r0, [pc, #24]	; (80040f0 <MX_TIM6_Init+0x64>)
 80040d8:	f007 fd0e 	bl	800baf8 <HAL_TIMEx_MasterConfigSynchronization>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80040e2:	f000 fb05 	bl	80046f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80040e6:	bf00      	nop
 80040e8:	3708      	adds	r7, #8
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	20016004 	.word	0x20016004
 80040f4:	40001000 	.word	0x40001000

080040f8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040fe:	463b      	mov	r3, r7
 8004100:	2200      	movs	r2, #0
 8004102:	601a      	str	r2, [r3, #0]
 8004104:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004106:	4b14      	ldr	r3, [pc, #80]	; (8004158 <MX_TIM7_Init+0x60>)
 8004108:	4a14      	ldr	r2, [pc, #80]	; (800415c <MX_TIM7_Init+0x64>)
 800410a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 800410c:	4b12      	ldr	r3, [pc, #72]	; (8004158 <MX_TIM7_Init+0x60>)
 800410e:	22b3      	movs	r2, #179	; 0xb3
 8004110:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004112:	4b11      	ldr	r3, [pc, #68]	; (8004158 <MX_TIM7_Init+0x60>)
 8004114:	2200      	movs	r2, #0
 8004116:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 8004118:	4b0f      	ldr	r3, [pc, #60]	; (8004158 <MX_TIM7_Init+0x60>)
 800411a:	2231      	movs	r2, #49	; 0x31
 800411c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800411e:	4b0e      	ldr	r3, [pc, #56]	; (8004158 <MX_TIM7_Init+0x60>)
 8004120:	2280      	movs	r2, #128	; 0x80
 8004122:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004124:	480c      	ldr	r0, [pc, #48]	; (8004158 <MX_TIM7_Init+0x60>)
 8004126:	f006 fef9 	bl	800af1c <HAL_TIM_Base_Init>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d001      	beq.n	8004134 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8004130:	f000 fade 	bl	80046f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004134:	2300      	movs	r3, #0
 8004136:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004138:	2300      	movs	r3, #0
 800413a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800413c:	463b      	mov	r3, r7
 800413e:	4619      	mov	r1, r3
 8004140:	4805      	ldr	r0, [pc, #20]	; (8004158 <MX_TIM7_Init+0x60>)
 8004142:	f007 fcd9 	bl	800baf8 <HAL_TIMEx_MasterConfigSynchronization>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d001      	beq.n	8004150 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 800414c:	f000 fad0 	bl	80046f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004150:	bf00      	nop
 8004152:	3708      	adds	r7, #8
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	200161a8 	.word	0x200161a8
 800415c:	40001400 	.word	0x40001400

08004160 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b08c      	sub	sp, #48	; 0x30
 8004164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004166:	f107 030c 	add.w	r3, r7, #12
 800416a:	2224      	movs	r2, #36	; 0x24
 800416c:	2100      	movs	r1, #0
 800416e:	4618      	mov	r0, r3
 8004170:	f00e f8a2 	bl	80122b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004174:	1d3b      	adds	r3, r7, #4
 8004176:	2200      	movs	r2, #0
 8004178:	601a      	str	r2, [r3, #0]
 800417a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800417c:	4b22      	ldr	r3, [pc, #136]	; (8004208 <MX_TIM8_Init+0xa8>)
 800417e:	4a23      	ldr	r2, [pc, #140]	; (800420c <MX_TIM8_Init+0xac>)
 8004180:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8004182:	4b21      	ldr	r3, [pc, #132]	; (8004208 <MX_TIM8_Init+0xa8>)
 8004184:	2200      	movs	r2, #0
 8004186:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8004188:	4b1f      	ldr	r3, [pc, #124]	; (8004208 <MX_TIM8_Init+0xa8>)
 800418a:	2210      	movs	r2, #16
 800418c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800418e:	4b1e      	ldr	r3, [pc, #120]	; (8004208 <MX_TIM8_Init+0xa8>)
 8004190:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004194:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004196:	4b1c      	ldr	r3, [pc, #112]	; (8004208 <MX_TIM8_Init+0xa8>)
 8004198:	2200      	movs	r2, #0
 800419a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800419c:	4b1a      	ldr	r3, [pc, #104]	; (8004208 <MX_TIM8_Init+0xa8>)
 800419e:	2200      	movs	r2, #0
 80041a0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041a2:	4b19      	ldr	r3, [pc, #100]	; (8004208 <MX_TIM8_Init+0xa8>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80041a8:	2303      	movs	r3, #3
 80041aa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80041ac:	2300      	movs	r3, #0
 80041ae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80041b0:	2301      	movs	r3, #1
 80041b2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80041b4:	2300      	movs	r3, #0
 80041b6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80041b8:	2300      	movs	r3, #0
 80041ba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80041bc:	2300      	movs	r3, #0
 80041be:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80041c0:	2301      	movs	r3, #1
 80041c2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80041c4:	2300      	movs	r3, #0
 80041c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80041c8:	2300      	movs	r3, #0
 80041ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80041cc:	f107 030c 	add.w	r3, r7, #12
 80041d0:	4619      	mov	r1, r3
 80041d2:	480d      	ldr	r0, [pc, #52]	; (8004208 <MX_TIM8_Init+0xa8>)
 80041d4:	f006 ff5a 	bl	800b08c <HAL_TIM_Encoder_Init>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80041de:	f000 fa87 	bl	80046f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041e2:	2300      	movs	r3, #0
 80041e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041e6:	2300      	movs	r3, #0
 80041e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80041ea:	1d3b      	adds	r3, r7, #4
 80041ec:	4619      	mov	r1, r3
 80041ee:	4806      	ldr	r0, [pc, #24]	; (8004208 <MX_TIM8_Init+0xa8>)
 80041f0:	f007 fc82 	bl	800baf8 <HAL_TIMEx_MasterConfigSynchronization>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80041fa:	f000 fa79 	bl	80046f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80041fe:	bf00      	nop
 8004200:	3730      	adds	r7, #48	; 0x30
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	20015d28 	.word	0x20015d28
 800420c:	40010400 	.word	0x40010400

08004210 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b088      	sub	sp, #32
 8004214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004216:	1d3b      	adds	r3, r7, #4
 8004218:	2200      	movs	r2, #0
 800421a:	601a      	str	r2, [r3, #0]
 800421c:	605a      	str	r2, [r3, #4]
 800421e:	609a      	str	r2, [r3, #8]
 8004220:	60da      	str	r2, [r3, #12]
 8004222:	611a      	str	r2, [r3, #16]
 8004224:	615a      	str	r2, [r3, #20]
 8004226:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8004228:	4b1e      	ldr	r3, [pc, #120]	; (80042a4 <MX_TIM10_Init+0x94>)
 800422a:	4a1f      	ldr	r2, [pc, #124]	; (80042a8 <MX_TIM10_Init+0x98>)
 800422c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 800422e:	4b1d      	ldr	r3, [pc, #116]	; (80042a4 <MX_TIM10_Init+0x94>)
 8004230:	2200      	movs	r2, #0
 8004232:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004234:	4b1b      	ldr	r3, [pc, #108]	; (80042a4 <MX_TIM10_Init+0x94>)
 8004236:	2200      	movs	r2, #0
 8004238:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800423a:	4b1a      	ldr	r3, [pc, #104]	; (80042a4 <MX_TIM10_Init+0x94>)
 800423c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004240:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004242:	4b18      	ldr	r3, [pc, #96]	; (80042a4 <MX_TIM10_Init+0x94>)
 8004244:	2200      	movs	r2, #0
 8004246:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004248:	4b16      	ldr	r3, [pc, #88]	; (80042a4 <MX_TIM10_Init+0x94>)
 800424a:	2200      	movs	r2, #0
 800424c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800424e:	4815      	ldr	r0, [pc, #84]	; (80042a4 <MX_TIM10_Init+0x94>)
 8004250:	f006 fe64 	bl	800af1c <HAL_TIM_Base_Init>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800425a:	f000 fa49 	bl	80046f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800425e:	4811      	ldr	r0, [pc, #68]	; (80042a4 <MX_TIM10_Init+0x94>)
 8004260:	f006 feab 	bl	800afba <HAL_TIM_PWM_Init>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800426a:	f000 fa41 	bl	80046f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800426e:	2360      	movs	r3, #96	; 0x60
 8004270:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004272:	2300      	movs	r3, #0
 8004274:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004276:	2300      	movs	r3, #0
 8004278:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800427a:	2300      	movs	r3, #0
 800427c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800427e:	1d3b      	adds	r3, r7, #4
 8004280:	2200      	movs	r2, #0
 8004282:	4619      	mov	r1, r3
 8004284:	4807      	ldr	r0, [pc, #28]	; (80042a4 <MX_TIM10_Init+0x94>)
 8004286:	f007 f8d3 	bl	800b430 <HAL_TIM_PWM_ConfigChannel>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d001      	beq.n	8004294 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8004290:	f000 fa2e 	bl	80046f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8004294:	4803      	ldr	r0, [pc, #12]	; (80042a4 <MX_TIM10_Init+0x94>)
 8004296:	f000 fe13 	bl	8004ec0 <HAL_TIM_MspPostInit>

}
 800429a:	bf00      	nop
 800429c:	3720      	adds	r7, #32
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	20015e44 	.word	0x20015e44
 80042a8:	40014400 	.word	0x40014400

080042ac <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b088      	sub	sp, #32
 80042b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80042b2:	1d3b      	adds	r3, r7, #4
 80042b4:	2200      	movs	r2, #0
 80042b6:	601a      	str	r2, [r3, #0]
 80042b8:	605a      	str	r2, [r3, #4]
 80042ba:	609a      	str	r2, [r3, #8]
 80042bc:	60da      	str	r2, [r3, #12]
 80042be:	611a      	str	r2, [r3, #16]
 80042c0:	615a      	str	r2, [r3, #20]
 80042c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80042c4:	4b1e      	ldr	r3, [pc, #120]	; (8004340 <MX_TIM11_Init+0x94>)
 80042c6:	4a1f      	ldr	r2, [pc, #124]	; (8004344 <MX_TIM11_Init+0x98>)
 80042c8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80042ca:	4b1d      	ldr	r3, [pc, #116]	; (8004340 <MX_TIM11_Init+0x94>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042d0:	4b1b      	ldr	r3, [pc, #108]	; (8004340 <MX_TIM11_Init+0x94>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80042d6:	4b1a      	ldr	r3, [pc, #104]	; (8004340 <MX_TIM11_Init+0x94>)
 80042d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042dc:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042de:	4b18      	ldr	r3, [pc, #96]	; (8004340 <MX_TIM11_Init+0x94>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042e4:	4b16      	ldr	r3, [pc, #88]	; (8004340 <MX_TIM11_Init+0x94>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80042ea:	4815      	ldr	r0, [pc, #84]	; (8004340 <MX_TIM11_Init+0x94>)
 80042ec:	f006 fe16 	bl	800af1c <HAL_TIM_Base_Init>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80042f6:	f000 f9fb 	bl	80046f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80042fa:	4811      	ldr	r0, [pc, #68]	; (8004340 <MX_TIM11_Init+0x94>)
 80042fc:	f006 fe5d 	bl	800afba <HAL_TIM_PWM_Init>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8004306:	f000 f9f3 	bl	80046f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800430a:	2360      	movs	r3, #96	; 0x60
 800430c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800430e:	2300      	movs	r3, #0
 8004310:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004312:	2300      	movs	r3, #0
 8004314:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004316:	2300      	movs	r3, #0
 8004318:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800431a:	1d3b      	adds	r3, r7, #4
 800431c:	2200      	movs	r2, #0
 800431e:	4619      	mov	r1, r3
 8004320:	4807      	ldr	r0, [pc, #28]	; (8004340 <MX_TIM11_Init+0x94>)
 8004322:	f007 f885 	bl	800b430 <HAL_TIM_PWM_ConfigChannel>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d001      	beq.n	8004330 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 800432c:	f000 f9e0 	bl	80046f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8004330:	4803      	ldr	r0, [pc, #12]	; (8004340 <MX_TIM11_Init+0x94>)
 8004332:	f000 fdc5 	bl	8004ec0 <HAL_TIM_MspPostInit>

}
 8004336:	bf00      	nop
 8004338:	3720      	adds	r7, #32
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	20015f64 	.word	0x20015f64
 8004344:	40014800 	.word	0x40014800

08004348 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800434c:	4b0e      	ldr	r3, [pc, #56]	; (8004388 <MX_TIM13_Init+0x40>)
 800434e:	4a0f      	ldr	r2, [pc, #60]	; (800438c <MX_TIM13_Init+0x44>)
 8004350:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 8004352:	4b0d      	ldr	r3, [pc, #52]	; (8004388 <MX_TIM13_Init+0x40>)
 8004354:	2259      	movs	r2, #89	; 0x59
 8004356:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004358:	4b0b      	ldr	r3, [pc, #44]	; (8004388 <MX_TIM13_Init+0x40>)
 800435a:	2200      	movs	r2, #0
 800435c:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 800435e:	4b0a      	ldr	r3, [pc, #40]	; (8004388 <MX_TIM13_Init+0x40>)
 8004360:	f242 720f 	movw	r2, #9999	; 0x270f
 8004364:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004366:	4b08      	ldr	r3, [pc, #32]	; (8004388 <MX_TIM13_Init+0x40>)
 8004368:	2200      	movs	r2, #0
 800436a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800436c:	4b06      	ldr	r3, [pc, #24]	; (8004388 <MX_TIM13_Init+0x40>)
 800436e:	2280      	movs	r2, #128	; 0x80
 8004370:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004372:	4805      	ldr	r0, [pc, #20]	; (8004388 <MX_TIM13_Init+0x40>)
 8004374:	f006 fdd2 	bl	800af1c <HAL_TIM_Base_Init>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 800437e:	f000 f9b7 	bl	80046f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8004382:	bf00      	nop
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	20015f24 	.word	0x20015f24
 800438c:	40001c00 	.word	0x40001c00

08004390 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004394:	4b11      	ldr	r3, [pc, #68]	; (80043dc <MX_USART2_UART_Init+0x4c>)
 8004396:	4a12      	ldr	r2, [pc, #72]	; (80043e0 <MX_USART2_UART_Init+0x50>)
 8004398:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800439a:	4b10      	ldr	r3, [pc, #64]	; (80043dc <MX_USART2_UART_Init+0x4c>)
 800439c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80043a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80043a2:	4b0e      	ldr	r3, [pc, #56]	; (80043dc <MX_USART2_UART_Init+0x4c>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80043a8:	4b0c      	ldr	r3, [pc, #48]	; (80043dc <MX_USART2_UART_Init+0x4c>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80043ae:	4b0b      	ldr	r3, [pc, #44]	; (80043dc <MX_USART2_UART_Init+0x4c>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80043b4:	4b09      	ldr	r3, [pc, #36]	; (80043dc <MX_USART2_UART_Init+0x4c>)
 80043b6:	220c      	movs	r2, #12
 80043b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80043ba:	4b08      	ldr	r3, [pc, #32]	; (80043dc <MX_USART2_UART_Init+0x4c>)
 80043bc:	2200      	movs	r2, #0
 80043be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80043c0:	4b06      	ldr	r3, [pc, #24]	; (80043dc <MX_USART2_UART_Init+0x4c>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80043c6:	4805      	ldr	r0, [pc, #20]	; (80043dc <MX_USART2_UART_Init+0x4c>)
 80043c8:	f007 fc78 	bl	800bcbc <HAL_UART_Init>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80043d2:	f000 f98d 	bl	80046f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80043d6:	bf00      	nop
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	20016108 	.word	0x20016108
 80043e0:	40004400 	.word	0x40004400

080043e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80043ea:	2300      	movs	r3, #0
 80043ec:	607b      	str	r3, [r7, #4]
 80043ee:	4b14      	ldr	r3, [pc, #80]	; (8004440 <MX_DMA_Init+0x5c>)
 80043f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f2:	4a13      	ldr	r2, [pc, #76]	; (8004440 <MX_DMA_Init+0x5c>)
 80043f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80043f8:	6313      	str	r3, [r2, #48]	; 0x30
 80043fa:	4b11      	ldr	r3, [pc, #68]	; (8004440 <MX_DMA_Init+0x5c>)
 80043fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004402:	607b      	str	r3, [r7, #4]
 8004404:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8004406:	2200      	movs	r2, #0
 8004408:	2100      	movs	r1, #0
 800440a:	203a      	movs	r0, #58	; 0x3a
 800440c:	f002 f939 	bl	8006682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004410:	203a      	movs	r0, #58	; 0x3a
 8004412:	f002 f952 	bl	80066ba <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8004416:	2200      	movs	r2, #0
 8004418:	2100      	movs	r1, #0
 800441a:	203b      	movs	r0, #59	; 0x3b
 800441c:	f002 f931 	bl	8006682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8004420:	203b      	movs	r0, #59	; 0x3b
 8004422:	f002 f94a 	bl	80066ba <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8004426:	2200      	movs	r2, #0
 8004428:	2100      	movs	r1, #0
 800442a:	2045      	movs	r0, #69	; 0x45
 800442c:	f002 f929 	bl	8006682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8004430:	2045      	movs	r0, #69	; 0x45
 8004432:	f002 f942 	bl	80066ba <HAL_NVIC_EnableIRQ>

}
 8004436:	bf00      	nop
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	40023800 	.word	0x40023800

08004444 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b08c      	sub	sp, #48	; 0x30
 8004448:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800444a:	f107 031c 	add.w	r3, r7, #28
 800444e:	2200      	movs	r2, #0
 8004450:	601a      	str	r2, [r3, #0]
 8004452:	605a      	str	r2, [r3, #4]
 8004454:	609a      	str	r2, [r3, #8]
 8004456:	60da      	str	r2, [r3, #12]
 8004458:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800445a:	2300      	movs	r3, #0
 800445c:	61bb      	str	r3, [r7, #24]
 800445e:	4b9c      	ldr	r3, [pc, #624]	; (80046d0 <MX_GPIO_Init+0x28c>)
 8004460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004462:	4a9b      	ldr	r2, [pc, #620]	; (80046d0 <MX_GPIO_Init+0x28c>)
 8004464:	f043 0310 	orr.w	r3, r3, #16
 8004468:	6313      	str	r3, [r2, #48]	; 0x30
 800446a:	4b99      	ldr	r3, [pc, #612]	; (80046d0 <MX_GPIO_Init+0x28c>)
 800446c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446e:	f003 0310 	and.w	r3, r3, #16
 8004472:	61bb      	str	r3, [r7, #24]
 8004474:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004476:	2300      	movs	r3, #0
 8004478:	617b      	str	r3, [r7, #20]
 800447a:	4b95      	ldr	r3, [pc, #596]	; (80046d0 <MX_GPIO_Init+0x28c>)
 800447c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447e:	4a94      	ldr	r2, [pc, #592]	; (80046d0 <MX_GPIO_Init+0x28c>)
 8004480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004484:	6313      	str	r3, [r2, #48]	; 0x30
 8004486:	4b92      	ldr	r3, [pc, #584]	; (80046d0 <MX_GPIO_Init+0x28c>)
 8004488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800448e:	617b      	str	r3, [r7, #20]
 8004490:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004492:	2300      	movs	r3, #0
 8004494:	613b      	str	r3, [r7, #16]
 8004496:	4b8e      	ldr	r3, [pc, #568]	; (80046d0 <MX_GPIO_Init+0x28c>)
 8004498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449a:	4a8d      	ldr	r2, [pc, #564]	; (80046d0 <MX_GPIO_Init+0x28c>)
 800449c:	f043 0304 	orr.w	r3, r3, #4
 80044a0:	6313      	str	r3, [r2, #48]	; 0x30
 80044a2:	4b8b      	ldr	r3, [pc, #556]	; (80046d0 <MX_GPIO_Init+0x28c>)
 80044a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a6:	f003 0304 	and.w	r3, r3, #4
 80044aa:	613b      	str	r3, [r7, #16]
 80044ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80044ae:	2300      	movs	r3, #0
 80044b0:	60fb      	str	r3, [r7, #12]
 80044b2:	4b87      	ldr	r3, [pc, #540]	; (80046d0 <MX_GPIO_Init+0x28c>)
 80044b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b6:	4a86      	ldr	r2, [pc, #536]	; (80046d0 <MX_GPIO_Init+0x28c>)
 80044b8:	f043 0301 	orr.w	r3, r3, #1
 80044bc:	6313      	str	r3, [r2, #48]	; 0x30
 80044be:	4b84      	ldr	r3, [pc, #528]	; (80046d0 <MX_GPIO_Init+0x28c>)
 80044c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	60fb      	str	r3, [r7, #12]
 80044c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80044ca:	2300      	movs	r3, #0
 80044cc:	60bb      	str	r3, [r7, #8]
 80044ce:	4b80      	ldr	r3, [pc, #512]	; (80046d0 <MX_GPIO_Init+0x28c>)
 80044d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d2:	4a7f      	ldr	r2, [pc, #508]	; (80046d0 <MX_GPIO_Init+0x28c>)
 80044d4:	f043 0302 	orr.w	r3, r3, #2
 80044d8:	6313      	str	r3, [r2, #48]	; 0x30
 80044da:	4b7d      	ldr	r3, [pc, #500]	; (80046d0 <MX_GPIO_Init+0x28c>)
 80044dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	60bb      	str	r3, [r7, #8]
 80044e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80044e6:	2300      	movs	r3, #0
 80044e8:	607b      	str	r3, [r7, #4]
 80044ea:	4b79      	ldr	r3, [pc, #484]	; (80046d0 <MX_GPIO_Init+0x28c>)
 80044ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ee:	4a78      	ldr	r2, [pc, #480]	; (80046d0 <MX_GPIO_Init+0x28c>)
 80044f0:	f043 0308 	orr.w	r3, r3, #8
 80044f4:	6313      	str	r3, [r2, #48]	; 0x30
 80044f6:	4b76      	ldr	r3, [pc, #472]	; (80046d0 <MX_GPIO_Init+0x28c>)
 80044f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fa:	f003 0308 	and.w	r3, r3, #8
 80044fe:	607b      	str	r3, [r7, #4]
 8004500:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8004502:	2200      	movs	r2, #0
 8004504:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004508:	4872      	ldr	r0, [pc, #456]	; (80046d4 <MX_GPIO_Init+0x290>)
 800450a:	f002 fe4f 	bl	80071ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800450e:	2200      	movs	r2, #0
 8004510:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004514:	4870      	ldr	r0, [pc, #448]	; (80046d8 <MX_GPIO_Init+0x294>)
 8004516:	f002 fe49 	bl	80071ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 800451a:	2200      	movs	r2, #0
 800451c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004520:	486e      	ldr	r0, [pc, #440]	; (80046dc <MX_GPIO_Init+0x298>)
 8004522:	f002 fe43 	bl	80071ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004526:	2200      	movs	r2, #0
 8004528:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 800452c:	486c      	ldr	r0, [pc, #432]	; (80046e0 <MX_GPIO_Init+0x29c>)
 800452e:	f002 fe3d 	bl	80071ac <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004532:	2304      	movs	r3, #4
 8004534:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004536:	4b6b      	ldr	r3, [pc, #428]	; (80046e4 <MX_GPIO_Init+0x2a0>)
 8004538:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800453a:	2300      	movs	r3, #0
 800453c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800453e:	f107 031c 	add.w	r3, r7, #28
 8004542:	4619      	mov	r1, r3
 8004544:	4863      	ldr	r0, [pc, #396]	; (80046d4 <MX_GPIO_Init+0x290>)
 8004546:	f002 fc6f 	bl	8006e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800454a:	230f      	movs	r3, #15
 800454c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800454e:	2303      	movs	r3, #3
 8004550:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004552:	2300      	movs	r3, #0
 8004554:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004556:	f107 031c 	add.w	r3, r7, #28
 800455a:	4619      	mov	r1, r3
 800455c:	4862      	ldr	r0, [pc, #392]	; (80046e8 <MX_GPIO_Init+0x2a4>)
 800455e:	f002 fc63 	bl	8006e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004562:	23e1      	movs	r3, #225	; 0xe1
 8004564:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004566:	2303      	movs	r3, #3
 8004568:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800456a:	2300      	movs	r3, #0
 800456c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800456e:	f107 031c 	add.w	r3, r7, #28
 8004572:	4619      	mov	r1, r3
 8004574:	485a      	ldr	r0, [pc, #360]	; (80046e0 <MX_GPIO_Init+0x29c>)
 8004576:	f002 fc57 	bl	8006e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800457a:	2303      	movs	r3, #3
 800457c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800457e:	2303      	movs	r3, #3
 8004580:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004582:	2300      	movs	r3, #0
 8004584:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004586:	f107 031c 	add.w	r3, r7, #28
 800458a:	4619      	mov	r1, r3
 800458c:	4852      	ldr	r0, [pc, #328]	; (80046d8 <MX_GPIO_Init+0x294>)
 800458e:	f002 fc4b 	bl	8006e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004592:	2304      	movs	r3, #4
 8004594:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004596:	2300      	movs	r3, #0
 8004598:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800459a:	2301      	movs	r3, #1
 800459c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800459e:	f107 031c 	add.w	r3, r7, #28
 80045a2:	4619      	mov	r1, r3
 80045a4:	484c      	ldr	r0, [pc, #304]	; (80046d8 <MX_GPIO_Init+0x294>)
 80045a6:	f002 fc3f 	bl	8006e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 80045aa:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 80045ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80045b0:	2300      	movs	r3, #0
 80045b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80045b4:	2301      	movs	r3, #1
 80045b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80045b8:	f107 031c 	add.w	r3, r7, #28
 80045bc:	4619      	mov	r1, r3
 80045be:	4845      	ldr	r0, [pc, #276]	; (80046d4 <MX_GPIO_Init+0x290>)
 80045c0:	f002 fc32 	bl	8006e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80045c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80045c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045ca:	2301      	movs	r3, #1
 80045cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ce:	2300      	movs	r3, #0
 80045d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045d2:	2300      	movs	r3, #0
 80045d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80045d6:	f107 031c 	add.w	r3, r7, #28
 80045da:	4619      	mov	r1, r3
 80045dc:	483d      	ldr	r0, [pc, #244]	; (80046d4 <MX_GPIO_Init+0x290>)
 80045de:	f002 fc23 	bl	8006e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80045e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045e8:	2301      	movs	r3, #1
 80045ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ec:	2300      	movs	r3, #0
 80045ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045f0:	2300      	movs	r3, #0
 80045f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045f4:	f107 031c 	add.w	r3, r7, #28
 80045f8:	4619      	mov	r1, r3
 80045fa:	4837      	ldr	r0, [pc, #220]	; (80046d8 <MX_GPIO_Init+0x294>)
 80045fc:	f002 fc14 	bl	8006e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004600:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004606:	4b39      	ldr	r3, [pc, #228]	; (80046ec <MX_GPIO_Init+0x2a8>)
 8004608:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800460a:	2300      	movs	r3, #0
 800460c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800460e:	f107 031c 	add.w	r3, r7, #28
 8004612:	4619      	mov	r1, r3
 8004614:	4831      	ldr	r0, [pc, #196]	; (80046dc <MX_GPIO_Init+0x298>)
 8004616:	f002 fc07 	bl	8006e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800461a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800461e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004620:	2301      	movs	r3, #1
 8004622:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004624:	2300      	movs	r3, #0
 8004626:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004628:	2300      	movs	r3, #0
 800462a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800462c:	f107 031c 	add.w	r3, r7, #28
 8004630:	4619      	mov	r1, r3
 8004632:	482a      	ldr	r0, [pc, #168]	; (80046dc <MX_GPIO_Init+0x298>)
 8004634:	f002 fbf8 	bl	8006e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004638:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800463c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800463e:	2301      	movs	r3, #1
 8004640:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004642:	2301      	movs	r3, #1
 8004644:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004646:	2300      	movs	r3, #0
 8004648:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800464a:	f107 031c 	add.w	r3, r7, #28
 800464e:	4619      	mov	r1, r3
 8004650:	4822      	ldr	r0, [pc, #136]	; (80046dc <MX_GPIO_Init+0x298>)
 8004652:	f002 fbe9 	bl	8006e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004656:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800465a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800465c:	2301      	movs	r3, #1
 800465e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004660:	2300      	movs	r3, #0
 8004662:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004664:	2300      	movs	r3, #0
 8004666:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004668:	f107 031c 	add.w	r3, r7, #28
 800466c:	4619      	mov	r1, r3
 800466e:	481c      	ldr	r0, [pc, #112]	; (80046e0 <MX_GPIO_Init+0x29c>)
 8004670:	f002 fbda 	bl	8006e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004674:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004678:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800467a:	2300      	movs	r3, #0
 800467c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800467e:	2300      	movs	r3, #0
 8004680:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004682:	f107 031c 	add.w	r3, r7, #28
 8004686:	4619      	mov	r1, r3
 8004688:	4815      	ldr	r0, [pc, #84]	; (80046e0 <MX_GPIO_Init+0x29c>)
 800468a:	f002 fbcd 	bl	8006e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 800468e:	239b      	movs	r3, #155	; 0x9b
 8004690:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004692:	2300      	movs	r3, #0
 8004694:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004696:	2301      	movs	r3, #1
 8004698:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800469a:	f107 031c 	add.w	r3, r7, #28
 800469e:	4619      	mov	r1, r3
 80046a0:	480e      	ldr	r0, [pc, #56]	; (80046dc <MX_GPIO_Init+0x298>)
 80046a2:	f002 fbc1 	bl	8006e28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80046a6:	2200      	movs	r2, #0
 80046a8:	2100      	movs	r1, #0
 80046aa:	2008      	movs	r0, #8
 80046ac:	f001 ffe9 	bl	8006682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80046b0:	2008      	movs	r0, #8
 80046b2:	f002 f802 	bl	80066ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80046b6:	2200      	movs	r2, #0
 80046b8:	2100      	movs	r1, #0
 80046ba:	2017      	movs	r0, #23
 80046bc:	f001 ffe1 	bl	8006682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80046c0:	2017      	movs	r0, #23
 80046c2:	f001 fffa 	bl	80066ba <HAL_NVIC_EnableIRQ>

}
 80046c6:	bf00      	nop
 80046c8:	3730      	adds	r7, #48	; 0x30
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	40023800 	.word	0x40023800
 80046d4:	40021000 	.word	0x40021000
 80046d8:	40020400 	.word	0x40020400
 80046dc:	40020c00 	.word	0x40020c00
 80046e0:	40020000 	.word	0x40020000
 80046e4:	10310000 	.word	0x10310000
 80046e8:	40020800 	.word	0x40020800
 80046ec:	10110000 	.word	0x10110000

080046f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80046f0:	b480      	push	{r7}
 80046f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80046f4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80046f6:	e7fe      	b.n	80046f6 <Error_Handler+0x6>

080046f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046fe:	2300      	movs	r3, #0
 8004700:	607b      	str	r3, [r7, #4]
 8004702:	4b10      	ldr	r3, [pc, #64]	; (8004744 <HAL_MspInit+0x4c>)
 8004704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004706:	4a0f      	ldr	r2, [pc, #60]	; (8004744 <HAL_MspInit+0x4c>)
 8004708:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800470c:	6453      	str	r3, [r2, #68]	; 0x44
 800470e:	4b0d      	ldr	r3, [pc, #52]	; (8004744 <HAL_MspInit+0x4c>)
 8004710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004716:	607b      	str	r3, [r7, #4]
 8004718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800471a:	2300      	movs	r3, #0
 800471c:	603b      	str	r3, [r7, #0]
 800471e:	4b09      	ldr	r3, [pc, #36]	; (8004744 <HAL_MspInit+0x4c>)
 8004720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004722:	4a08      	ldr	r2, [pc, #32]	; (8004744 <HAL_MspInit+0x4c>)
 8004724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004728:	6413      	str	r3, [r2, #64]	; 0x40
 800472a:	4b06      	ldr	r3, [pc, #24]	; (8004744 <HAL_MspInit+0x4c>)
 800472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004732:	603b      	str	r3, [r7, #0]
 8004734:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004736:	bf00      	nop
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	40023800 	.word	0x40023800

08004748 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b08c      	sub	sp, #48	; 0x30
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004750:	f107 031c 	add.w	r3, r7, #28
 8004754:	2200      	movs	r2, #0
 8004756:	601a      	str	r2, [r3, #0]
 8004758:	605a      	str	r2, [r3, #4]
 800475a:	609a      	str	r2, [r3, #8]
 800475c:	60da      	str	r2, [r3, #12]
 800475e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a4a      	ldr	r2, [pc, #296]	; (8004890 <HAL_ADC_MspInit+0x148>)
 8004766:	4293      	cmp	r3, r2
 8004768:	f040 808e 	bne.w	8004888 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 800476c:	2300      	movs	r3, #0
 800476e:	61bb      	str	r3, [r7, #24]
 8004770:	4b48      	ldr	r3, [pc, #288]	; (8004894 <HAL_ADC_MspInit+0x14c>)
 8004772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004774:	4a47      	ldr	r2, [pc, #284]	; (8004894 <HAL_ADC_MspInit+0x14c>)
 8004776:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800477a:	6453      	str	r3, [r2, #68]	; 0x44
 800477c:	4b45      	ldr	r3, [pc, #276]	; (8004894 <HAL_ADC_MspInit+0x14c>)
 800477e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004780:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004784:	61bb      	str	r3, [r7, #24]
 8004786:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004788:	2300      	movs	r3, #0
 800478a:	617b      	str	r3, [r7, #20]
 800478c:	4b41      	ldr	r3, [pc, #260]	; (8004894 <HAL_ADC_MspInit+0x14c>)
 800478e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004790:	4a40      	ldr	r2, [pc, #256]	; (8004894 <HAL_ADC_MspInit+0x14c>)
 8004792:	f043 0304 	orr.w	r3, r3, #4
 8004796:	6313      	str	r3, [r2, #48]	; 0x30
 8004798:	4b3e      	ldr	r3, [pc, #248]	; (8004894 <HAL_ADC_MspInit+0x14c>)
 800479a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479c:	f003 0304 	and.w	r3, r3, #4
 80047a0:	617b      	str	r3, [r7, #20]
 80047a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047a4:	2300      	movs	r3, #0
 80047a6:	613b      	str	r3, [r7, #16]
 80047a8:	4b3a      	ldr	r3, [pc, #232]	; (8004894 <HAL_ADC_MspInit+0x14c>)
 80047aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ac:	4a39      	ldr	r2, [pc, #228]	; (8004894 <HAL_ADC_MspInit+0x14c>)
 80047ae:	f043 0301 	orr.w	r3, r3, #1
 80047b2:	6313      	str	r3, [r2, #48]	; 0x30
 80047b4:	4b37      	ldr	r3, [pc, #220]	; (8004894 <HAL_ADC_MspInit+0x14c>)
 80047b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b8:	f003 0301 	and.w	r3, r3, #1
 80047bc:	613b      	str	r3, [r7, #16]
 80047be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047c0:	2300      	movs	r3, #0
 80047c2:	60fb      	str	r3, [r7, #12]
 80047c4:	4b33      	ldr	r3, [pc, #204]	; (8004894 <HAL_ADC_MspInit+0x14c>)
 80047c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c8:	4a32      	ldr	r2, [pc, #200]	; (8004894 <HAL_ADC_MspInit+0x14c>)
 80047ca:	f043 0302 	orr.w	r3, r3, #2
 80047ce:	6313      	str	r3, [r2, #48]	; 0x30
 80047d0:	4b30      	ldr	r3, [pc, #192]	; (8004894 <HAL_ADC_MspInit+0x14c>)
 80047d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d4:	f003 0302 	and.w	r3, r3, #2
 80047d8:	60fb      	str	r3, [r7, #12]
 80047da:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80047dc:	230f      	movs	r3, #15
 80047de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80047e0:	2303      	movs	r3, #3
 80047e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047e4:	2300      	movs	r3, #0
 80047e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047e8:	f107 031c 	add.w	r3, r7, #28
 80047ec:	4619      	mov	r1, r3
 80047ee:	482a      	ldr	r0, [pc, #168]	; (8004898 <HAL_ADC_MspInit+0x150>)
 80047f0:	f002 fb1a 	bl	8006e28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80047f4:	23ff      	movs	r3, #255	; 0xff
 80047f6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80047f8:	2303      	movs	r3, #3
 80047fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047fc:	2300      	movs	r3, #0
 80047fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004800:	f107 031c 	add.w	r3, r7, #28
 8004804:	4619      	mov	r1, r3
 8004806:	4825      	ldr	r0, [pc, #148]	; (800489c <HAL_ADC_MspInit+0x154>)
 8004808:	f002 fb0e 	bl	8006e28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800480c:	2303      	movs	r3, #3
 800480e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004810:	2303      	movs	r3, #3
 8004812:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004814:	2300      	movs	r3, #0
 8004816:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004818:	f107 031c 	add.w	r3, r7, #28
 800481c:	4619      	mov	r1, r3
 800481e:	4820      	ldr	r0, [pc, #128]	; (80048a0 <HAL_ADC_MspInit+0x158>)
 8004820:	f002 fb02 	bl	8006e28 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8004824:	4b1f      	ldr	r3, [pc, #124]	; (80048a4 <HAL_ADC_MspInit+0x15c>)
 8004826:	4a20      	ldr	r2, [pc, #128]	; (80048a8 <HAL_ADC_MspInit+0x160>)
 8004828:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800482a:	4b1e      	ldr	r3, [pc, #120]	; (80048a4 <HAL_ADC_MspInit+0x15c>)
 800482c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004830:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004832:	4b1c      	ldr	r3, [pc, #112]	; (80048a4 <HAL_ADC_MspInit+0x15c>)
 8004834:	2200      	movs	r2, #0
 8004836:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004838:	4b1a      	ldr	r3, [pc, #104]	; (80048a4 <HAL_ADC_MspInit+0x15c>)
 800483a:	2200      	movs	r2, #0
 800483c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800483e:	4b19      	ldr	r3, [pc, #100]	; (80048a4 <HAL_ADC_MspInit+0x15c>)
 8004840:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004844:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004846:	4b17      	ldr	r3, [pc, #92]	; (80048a4 <HAL_ADC_MspInit+0x15c>)
 8004848:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800484c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800484e:	4b15      	ldr	r3, [pc, #84]	; (80048a4 <HAL_ADC_MspInit+0x15c>)
 8004850:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004854:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8004856:	4b13      	ldr	r3, [pc, #76]	; (80048a4 <HAL_ADC_MspInit+0x15c>)
 8004858:	f44f 7280 	mov.w	r2, #256	; 0x100
 800485c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 800485e:	4b11      	ldr	r3, [pc, #68]	; (80048a4 <HAL_ADC_MspInit+0x15c>)
 8004860:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004864:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004866:	4b0f      	ldr	r3, [pc, #60]	; (80048a4 <HAL_ADC_MspInit+0x15c>)
 8004868:	2200      	movs	r2, #0
 800486a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800486c:	480d      	ldr	r0, [pc, #52]	; (80048a4 <HAL_ADC_MspInit+0x15c>)
 800486e:	f001 ff3f 	bl	80066f0 <HAL_DMA_Init>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d001      	beq.n	800487c <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8004878:	f7ff ff3a 	bl	80046f0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a09      	ldr	r2, [pc, #36]	; (80048a4 <HAL_ADC_MspInit+0x15c>)
 8004880:	639a      	str	r2, [r3, #56]	; 0x38
 8004882:	4a08      	ldr	r2, [pc, #32]	; (80048a4 <HAL_ADC_MspInit+0x15c>)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004888:	bf00      	nop
 800488a:	3730      	adds	r7, #48	; 0x30
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	40012100 	.word	0x40012100
 8004894:	40023800 	.word	0x40023800
 8004898:	40020800 	.word	0x40020800
 800489c:	40020000 	.word	0x40020000
 80048a0:	40020400 	.word	0x40020400
 80048a4:	20016148 	.word	0x20016148
 80048a8:	40026440 	.word	0x40026440

080048ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b08c      	sub	sp, #48	; 0x30
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048b4:	f107 031c 	add.w	r3, r7, #28
 80048b8:	2200      	movs	r2, #0
 80048ba:	601a      	str	r2, [r3, #0]
 80048bc:	605a      	str	r2, [r3, #4]
 80048be:	609a      	str	r2, [r3, #8]
 80048c0:	60da      	str	r2, [r3, #12]
 80048c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a32      	ldr	r2, [pc, #200]	; (8004994 <HAL_I2C_MspInit+0xe8>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d12c      	bne.n	8004928 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048ce:	2300      	movs	r3, #0
 80048d0:	61bb      	str	r3, [r7, #24]
 80048d2:	4b31      	ldr	r3, [pc, #196]	; (8004998 <HAL_I2C_MspInit+0xec>)
 80048d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d6:	4a30      	ldr	r2, [pc, #192]	; (8004998 <HAL_I2C_MspInit+0xec>)
 80048d8:	f043 0302 	orr.w	r3, r3, #2
 80048dc:	6313      	str	r3, [r2, #48]	; 0x30
 80048de:	4b2e      	ldr	r3, [pc, #184]	; (8004998 <HAL_I2C_MspInit+0xec>)
 80048e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	61bb      	str	r3, [r7, #24]
 80048e8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80048ea:	23c0      	movs	r3, #192	; 0xc0
 80048ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80048ee:	2312      	movs	r3, #18
 80048f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80048f2:	2301      	movs	r3, #1
 80048f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048f6:	2303      	movs	r3, #3
 80048f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80048fa:	2304      	movs	r3, #4
 80048fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048fe:	f107 031c 	add.w	r3, r7, #28
 8004902:	4619      	mov	r1, r3
 8004904:	4825      	ldr	r0, [pc, #148]	; (800499c <HAL_I2C_MspInit+0xf0>)
 8004906:	f002 fa8f 	bl	8006e28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800490a:	2300      	movs	r3, #0
 800490c:	617b      	str	r3, [r7, #20]
 800490e:	4b22      	ldr	r3, [pc, #136]	; (8004998 <HAL_I2C_MspInit+0xec>)
 8004910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004912:	4a21      	ldr	r2, [pc, #132]	; (8004998 <HAL_I2C_MspInit+0xec>)
 8004914:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004918:	6413      	str	r3, [r2, #64]	; 0x40
 800491a:	4b1f      	ldr	r3, [pc, #124]	; (8004998 <HAL_I2C_MspInit+0xec>)
 800491c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004922:	617b      	str	r3, [r7, #20]
 8004924:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004926:	e031      	b.n	800498c <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a1c      	ldr	r2, [pc, #112]	; (80049a0 <HAL_I2C_MspInit+0xf4>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d12c      	bne.n	800498c <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004932:	2300      	movs	r3, #0
 8004934:	613b      	str	r3, [r7, #16]
 8004936:	4b18      	ldr	r3, [pc, #96]	; (8004998 <HAL_I2C_MspInit+0xec>)
 8004938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493a:	4a17      	ldr	r2, [pc, #92]	; (8004998 <HAL_I2C_MspInit+0xec>)
 800493c:	f043 0302 	orr.w	r3, r3, #2
 8004940:	6313      	str	r3, [r2, #48]	; 0x30
 8004942:	4b15      	ldr	r3, [pc, #84]	; (8004998 <HAL_I2C_MspInit+0xec>)
 8004944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	613b      	str	r3, [r7, #16]
 800494c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800494e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004954:	2312      	movs	r3, #18
 8004956:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004958:	2301      	movs	r3, #1
 800495a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800495c:	2303      	movs	r3, #3
 800495e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004960:	2304      	movs	r3, #4
 8004962:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004964:	f107 031c 	add.w	r3, r7, #28
 8004968:	4619      	mov	r1, r3
 800496a:	480c      	ldr	r0, [pc, #48]	; (800499c <HAL_I2C_MspInit+0xf0>)
 800496c:	f002 fa5c 	bl	8006e28 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004970:	2300      	movs	r3, #0
 8004972:	60fb      	str	r3, [r7, #12]
 8004974:	4b08      	ldr	r3, [pc, #32]	; (8004998 <HAL_I2C_MspInit+0xec>)
 8004976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004978:	4a07      	ldr	r2, [pc, #28]	; (8004998 <HAL_I2C_MspInit+0xec>)
 800497a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800497e:	6413      	str	r3, [r2, #64]	; 0x40
 8004980:	4b05      	ldr	r3, [pc, #20]	; (8004998 <HAL_I2C_MspInit+0xec>)
 8004982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004984:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004988:	60fb      	str	r3, [r7, #12]
 800498a:	68fb      	ldr	r3, [r7, #12]
}
 800498c:	bf00      	nop
 800498e:	3730      	adds	r7, #48	; 0x30
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	40005400 	.word	0x40005400
 8004998:	40023800 	.word	0x40023800
 800499c:	40020400 	.word	0x40020400
 80049a0:	40005800 	.word	0x40005800

080049a4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b08a      	sub	sp, #40	; 0x28
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049ac:	f107 0314 	add.w	r3, r7, #20
 80049b0:	2200      	movs	r2, #0
 80049b2:	601a      	str	r2, [r3, #0]
 80049b4:	605a      	str	r2, [r3, #4]
 80049b6:	609a      	str	r2, [r3, #8]
 80049b8:	60da      	str	r2, [r3, #12]
 80049ba:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a69      	ldr	r2, [pc, #420]	; (8004b68 <HAL_SD_MspInit+0x1c4>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	f040 80cb 	bne.w	8004b5e <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80049c8:	2300      	movs	r3, #0
 80049ca:	613b      	str	r3, [r7, #16]
 80049cc:	4b67      	ldr	r3, [pc, #412]	; (8004b6c <HAL_SD_MspInit+0x1c8>)
 80049ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d0:	4a66      	ldr	r2, [pc, #408]	; (8004b6c <HAL_SD_MspInit+0x1c8>)
 80049d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80049d6:	6453      	str	r3, [r2, #68]	; 0x44
 80049d8:	4b64      	ldr	r3, [pc, #400]	; (8004b6c <HAL_SD_MspInit+0x1c8>)
 80049da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049e0:	613b      	str	r3, [r7, #16]
 80049e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80049e4:	2300      	movs	r3, #0
 80049e6:	60fb      	str	r3, [r7, #12]
 80049e8:	4b60      	ldr	r3, [pc, #384]	; (8004b6c <HAL_SD_MspInit+0x1c8>)
 80049ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ec:	4a5f      	ldr	r2, [pc, #380]	; (8004b6c <HAL_SD_MspInit+0x1c8>)
 80049ee:	f043 0304 	orr.w	r3, r3, #4
 80049f2:	6313      	str	r3, [r2, #48]	; 0x30
 80049f4:	4b5d      	ldr	r3, [pc, #372]	; (8004b6c <HAL_SD_MspInit+0x1c8>)
 80049f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f8:	f003 0304 	and.w	r3, r3, #4
 80049fc:	60fb      	str	r3, [r7, #12]
 80049fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004a00:	2300      	movs	r3, #0
 8004a02:	60bb      	str	r3, [r7, #8]
 8004a04:	4b59      	ldr	r3, [pc, #356]	; (8004b6c <HAL_SD_MspInit+0x1c8>)
 8004a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a08:	4a58      	ldr	r2, [pc, #352]	; (8004b6c <HAL_SD_MspInit+0x1c8>)
 8004a0a:	f043 0308 	orr.w	r3, r3, #8
 8004a0e:	6313      	str	r3, [r2, #48]	; 0x30
 8004a10:	4b56      	ldr	r3, [pc, #344]	; (8004b6c <HAL_SD_MspInit+0x1c8>)
 8004a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a14:	f003 0308 	and.w	r3, r3, #8
 8004a18:	60bb      	str	r3, [r7, #8]
 8004a1a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004a1c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8004a20:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a22:	2302      	movs	r3, #2
 8004a24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a26:	2300      	movs	r3, #0
 8004a28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004a2e:	230c      	movs	r3, #12
 8004a30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a32:	f107 0314 	add.w	r3, r7, #20
 8004a36:	4619      	mov	r1, r3
 8004a38:	484d      	ldr	r0, [pc, #308]	; (8004b70 <HAL_SD_MspInit+0x1cc>)
 8004a3a:	f002 f9f5 	bl	8006e28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004a3e:	2304      	movs	r3, #4
 8004a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a42:	2302      	movs	r3, #2
 8004a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a46:	2300      	movs	r3, #0
 8004a48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004a4e:	230c      	movs	r3, #12
 8004a50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004a52:	f107 0314 	add.w	r3, r7, #20
 8004a56:	4619      	mov	r1, r3
 8004a58:	4846      	ldr	r0, [pc, #280]	; (8004b74 <HAL_SD_MspInit+0x1d0>)
 8004a5a:	f002 f9e5 	bl	8006e28 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8004a5e:	4b46      	ldr	r3, [pc, #280]	; (8004b78 <HAL_SD_MspInit+0x1d4>)
 8004a60:	4a46      	ldr	r2, [pc, #280]	; (8004b7c <HAL_SD_MspInit+0x1d8>)
 8004a62:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8004a64:	4b44      	ldr	r3, [pc, #272]	; (8004b78 <HAL_SD_MspInit+0x1d4>)
 8004a66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004a6a:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004a6c:	4b42      	ldr	r3, [pc, #264]	; (8004b78 <HAL_SD_MspInit+0x1d4>)
 8004a6e:	2200      	movs	r2, #0
 8004a70:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a72:	4b41      	ldr	r3, [pc, #260]	; (8004b78 <HAL_SD_MspInit+0x1d4>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004a78:	4b3f      	ldr	r3, [pc, #252]	; (8004b78 <HAL_SD_MspInit+0x1d4>)
 8004a7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a7e:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004a80:	4b3d      	ldr	r3, [pc, #244]	; (8004b78 <HAL_SD_MspInit+0x1d4>)
 8004a82:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004a86:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004a88:	4b3b      	ldr	r3, [pc, #236]	; (8004b78 <HAL_SD_MspInit+0x1d4>)
 8004a8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004a8e:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8004a90:	4b39      	ldr	r3, [pc, #228]	; (8004b78 <HAL_SD_MspInit+0x1d4>)
 8004a92:	2220      	movs	r2, #32
 8004a94:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004a96:	4b38      	ldr	r3, [pc, #224]	; (8004b78 <HAL_SD_MspInit+0x1d4>)
 8004a98:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a9c:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004a9e:	4b36      	ldr	r3, [pc, #216]	; (8004b78 <HAL_SD_MspInit+0x1d4>)
 8004aa0:	2204      	movs	r2, #4
 8004aa2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004aa4:	4b34      	ldr	r3, [pc, #208]	; (8004b78 <HAL_SD_MspInit+0x1d4>)
 8004aa6:	2203      	movs	r2, #3
 8004aa8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8004aaa:	4b33      	ldr	r3, [pc, #204]	; (8004b78 <HAL_SD_MspInit+0x1d4>)
 8004aac:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004ab0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8004ab2:	4b31      	ldr	r3, [pc, #196]	; (8004b78 <HAL_SD_MspInit+0x1d4>)
 8004ab4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004ab8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8004aba:	482f      	ldr	r0, [pc, #188]	; (8004b78 <HAL_SD_MspInit+0x1d4>)
 8004abc:	f001 fe18 	bl	80066f0 <HAL_DMA_Init>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d001      	beq.n	8004aca <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8004ac6:	f7ff fe13 	bl	80046f0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a2a      	ldr	r2, [pc, #168]	; (8004b78 <HAL_SD_MspInit+0x1d4>)
 8004ace:	641a      	str	r2, [r3, #64]	; 0x40
 8004ad0:	4a29      	ldr	r2, [pc, #164]	; (8004b78 <HAL_SD_MspInit+0x1d4>)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8004ad6:	4b2a      	ldr	r3, [pc, #168]	; (8004b80 <HAL_SD_MspInit+0x1dc>)
 8004ad8:	4a2a      	ldr	r2, [pc, #168]	; (8004b84 <HAL_SD_MspInit+0x1e0>)
 8004ada:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8004adc:	4b28      	ldr	r3, [pc, #160]	; (8004b80 <HAL_SD_MspInit+0x1dc>)
 8004ade:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004ae2:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004ae4:	4b26      	ldr	r3, [pc, #152]	; (8004b80 <HAL_SD_MspInit+0x1dc>)
 8004ae6:	2240      	movs	r2, #64	; 0x40
 8004ae8:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004aea:	4b25      	ldr	r3, [pc, #148]	; (8004b80 <HAL_SD_MspInit+0x1dc>)
 8004aec:	2200      	movs	r2, #0
 8004aee:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004af0:	4b23      	ldr	r3, [pc, #140]	; (8004b80 <HAL_SD_MspInit+0x1dc>)
 8004af2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004af6:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004af8:	4b21      	ldr	r3, [pc, #132]	; (8004b80 <HAL_SD_MspInit+0x1dc>)
 8004afa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004afe:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004b00:	4b1f      	ldr	r3, [pc, #124]	; (8004b80 <HAL_SD_MspInit+0x1dc>)
 8004b02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004b06:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8004b08:	4b1d      	ldr	r3, [pc, #116]	; (8004b80 <HAL_SD_MspInit+0x1dc>)
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004b0e:	4b1c      	ldr	r3, [pc, #112]	; (8004b80 <HAL_SD_MspInit+0x1dc>)
 8004b10:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004b14:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004b16:	4b1a      	ldr	r3, [pc, #104]	; (8004b80 <HAL_SD_MspInit+0x1dc>)
 8004b18:	2204      	movs	r2, #4
 8004b1a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004b1c:	4b18      	ldr	r3, [pc, #96]	; (8004b80 <HAL_SD_MspInit+0x1dc>)
 8004b1e:	2203      	movs	r2, #3
 8004b20:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8004b22:	4b17      	ldr	r3, [pc, #92]	; (8004b80 <HAL_SD_MspInit+0x1dc>)
 8004b24:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004b28:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8004b2a:	4b15      	ldr	r3, [pc, #84]	; (8004b80 <HAL_SD_MspInit+0x1dc>)
 8004b2c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004b30:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8004b32:	4813      	ldr	r0, [pc, #76]	; (8004b80 <HAL_SD_MspInit+0x1dc>)
 8004b34:	f001 fddc 	bl	80066f0 <HAL_DMA_Init>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d001      	beq.n	8004b42 <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8004b3e:	f7ff fdd7 	bl	80046f0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a0e      	ldr	r2, [pc, #56]	; (8004b80 <HAL_SD_MspInit+0x1dc>)
 8004b46:	63da      	str	r2, [r3, #60]	; 0x3c
 8004b48:	4a0d      	ldr	r2, [pc, #52]	; (8004b80 <HAL_SD_MspInit+0x1dc>)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8004b4e:	2200      	movs	r2, #0
 8004b50:	2100      	movs	r1, #0
 8004b52:	2031      	movs	r0, #49	; 0x31
 8004b54:	f001 fd95 	bl	8006682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8004b58:	2031      	movs	r0, #49	; 0x31
 8004b5a:	f001 fdae 	bl	80066ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8004b5e:	bf00      	nop
 8004b60:	3728      	adds	r7, #40	; 0x28
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	40012c00 	.word	0x40012c00
 8004b6c:	40023800 	.word	0x40023800
 8004b70:	40020800 	.word	0x40020800
 8004b74:	40020c00 	.word	0x40020c00
 8004b78:	20015c70 	.word	0x20015c70
 8004b7c:	40026458 	.word	0x40026458
 8004b80:	20015fa4 	.word	0x20015fa4
 8004b84:	400264a0 	.word	0x400264a0

08004b88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b08a      	sub	sp, #40	; 0x28
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b90:	f107 0314 	add.w	r3, r7, #20
 8004b94:	2200      	movs	r2, #0
 8004b96:	601a      	str	r2, [r3, #0]
 8004b98:	605a      	str	r2, [r3, #4]
 8004b9a:	609a      	str	r2, [r3, #8]
 8004b9c:	60da      	str	r2, [r3, #12]
 8004b9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a19      	ldr	r2, [pc, #100]	; (8004c0c <HAL_SPI_MspInit+0x84>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d12c      	bne.n	8004c04 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004baa:	2300      	movs	r3, #0
 8004bac:	613b      	str	r3, [r7, #16]
 8004bae:	4b18      	ldr	r3, [pc, #96]	; (8004c10 <HAL_SPI_MspInit+0x88>)
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb2:	4a17      	ldr	r2, [pc, #92]	; (8004c10 <HAL_SPI_MspInit+0x88>)
 8004bb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8004bba:	4b15      	ldr	r3, [pc, #84]	; (8004c10 <HAL_SPI_MspInit+0x88>)
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bc2:	613b      	str	r3, [r7, #16]
 8004bc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	60fb      	str	r3, [r7, #12]
 8004bca:	4b11      	ldr	r3, [pc, #68]	; (8004c10 <HAL_SPI_MspInit+0x88>)
 8004bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bce:	4a10      	ldr	r2, [pc, #64]	; (8004c10 <HAL_SPI_MspInit+0x88>)
 8004bd0:	f043 0302 	orr.w	r3, r3, #2
 8004bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8004bd6:	4b0e      	ldr	r3, [pc, #56]	; (8004c10 <HAL_SPI_MspInit+0x88>)
 8004bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	60fb      	str	r3, [r7, #12]
 8004be0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004be2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004be6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004be8:	2302      	movs	r3, #2
 8004bea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bec:	2300      	movs	r3, #0
 8004bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004bf4:	2305      	movs	r3, #5
 8004bf6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bf8:	f107 0314 	add.w	r3, r7, #20
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	4805      	ldr	r0, [pc, #20]	; (8004c14 <HAL_SPI_MspInit+0x8c>)
 8004c00:	f002 f912 	bl	8006e28 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004c04:	bf00      	nop
 8004c06:	3728      	adds	r7, #40	; 0x28
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	40003800 	.word	0x40003800
 8004c10:	40023800 	.word	0x40023800
 8004c14:	40020400 	.word	0x40020400

08004c18 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b08c      	sub	sp, #48	; 0x30
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c20:	f107 031c 	add.w	r3, r7, #28
 8004c24:	2200      	movs	r2, #0
 8004c26:	601a      	str	r2, [r3, #0]
 8004c28:	605a      	str	r2, [r3, #4]
 8004c2a:	609a      	str	r2, [r3, #8]
 8004c2c:	60da      	str	r2, [r3, #12]
 8004c2e:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a2d      	ldr	r2, [pc, #180]	; (8004cec <HAL_TIM_PWM_MspInit+0xd4>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d12d      	bne.n	8004c96 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	61bb      	str	r3, [r7, #24]
 8004c3e:	4b2c      	ldr	r3, [pc, #176]	; (8004cf0 <HAL_TIM_PWM_MspInit+0xd8>)
 8004c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c42:	4a2b      	ldr	r2, [pc, #172]	; (8004cf0 <HAL_TIM_PWM_MspInit+0xd8>)
 8004c44:	f043 0301 	orr.w	r3, r3, #1
 8004c48:	6453      	str	r3, [r2, #68]	; 0x44
 8004c4a:	4b29      	ldr	r3, [pc, #164]	; (8004cf0 <HAL_TIM_PWM_MspInit+0xd8>)
 8004c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c4e:	f003 0301 	and.w	r3, r3, #1
 8004c52:	61bb      	str	r3, [r7, #24]
 8004c54:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004c56:	2300      	movs	r3, #0
 8004c58:	617b      	str	r3, [r7, #20]
 8004c5a:	4b25      	ldr	r3, [pc, #148]	; (8004cf0 <HAL_TIM_PWM_MspInit+0xd8>)
 8004c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5e:	4a24      	ldr	r2, [pc, #144]	; (8004cf0 <HAL_TIM_PWM_MspInit+0xd8>)
 8004c60:	f043 0310 	orr.w	r3, r3, #16
 8004c64:	6313      	str	r3, [r2, #48]	; 0x30
 8004c66:	4b22      	ldr	r3, [pc, #136]	; (8004cf0 <HAL_TIM_PWM_MspInit+0xd8>)
 8004c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6a:	f003 0310 	and.w	r3, r3, #16
 8004c6e:	617b      	str	r3, [r7, #20]
 8004c70:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8004c72:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8004c76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c78:	2302      	movs	r3, #2
 8004c7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c80:	2300      	movs	r3, #0
 8004c82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004c84:	2301      	movs	r3, #1
 8004c86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004c88:	f107 031c 	add.w	r3, r7, #28
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	4819      	ldr	r0, [pc, #100]	; (8004cf4 <HAL_TIM_PWM_MspInit+0xdc>)
 8004c90:	f002 f8ca 	bl	8006e28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004c94:	e026      	b.n	8004ce4 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a17      	ldr	r2, [pc, #92]	; (8004cf8 <HAL_TIM_PWM_MspInit+0xe0>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d10e      	bne.n	8004cbe <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	613b      	str	r3, [r7, #16]
 8004ca4:	4b12      	ldr	r3, [pc, #72]	; (8004cf0 <HAL_TIM_PWM_MspInit+0xd8>)
 8004ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca8:	4a11      	ldr	r2, [pc, #68]	; (8004cf0 <HAL_TIM_PWM_MspInit+0xd8>)
 8004caa:	f043 0302 	orr.w	r3, r3, #2
 8004cae:	6413      	str	r3, [r2, #64]	; 0x40
 8004cb0:	4b0f      	ldr	r3, [pc, #60]	; (8004cf0 <HAL_TIM_PWM_MspInit+0xd8>)
 8004cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb4:	f003 0302 	and.w	r3, r3, #2
 8004cb8:	613b      	str	r3, [r7, #16]
 8004cba:	693b      	ldr	r3, [r7, #16]
}
 8004cbc:	e012      	b.n	8004ce4 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a0e      	ldr	r2, [pc, #56]	; (8004cfc <HAL_TIM_PWM_MspInit+0xe4>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d10d      	bne.n	8004ce4 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004cc8:	2300      	movs	r3, #0
 8004cca:	60fb      	str	r3, [r7, #12]
 8004ccc:	4b08      	ldr	r3, [pc, #32]	; (8004cf0 <HAL_TIM_PWM_MspInit+0xd8>)
 8004cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd0:	4a07      	ldr	r2, [pc, #28]	; (8004cf0 <HAL_TIM_PWM_MspInit+0xd8>)
 8004cd2:	f043 0304 	orr.w	r3, r3, #4
 8004cd6:	6413      	str	r3, [r2, #64]	; 0x40
 8004cd8:	4b05      	ldr	r3, [pc, #20]	; (8004cf0 <HAL_TIM_PWM_MspInit+0xd8>)
 8004cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cdc:	f003 0304 	and.w	r3, r3, #4
 8004ce0:	60fb      	str	r3, [r7, #12]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
}
 8004ce4:	bf00      	nop
 8004ce6:	3730      	adds	r7, #48	; 0x30
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	40010000 	.word	0x40010000
 8004cf0:	40023800 	.word	0x40023800
 8004cf4:	40021000 	.word	0x40021000
 8004cf8:	40000400 	.word	0x40000400
 8004cfc:	40000800 	.word	0x40000800

08004d00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b088      	sub	sp, #32
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a3e      	ldr	r2, [pc, #248]	; (8004e08 <HAL_TIM_Base_MspInit+0x108>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d116      	bne.n	8004d40 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004d12:	2300      	movs	r3, #0
 8004d14:	61fb      	str	r3, [r7, #28]
 8004d16:	4b3d      	ldr	r3, [pc, #244]	; (8004e0c <HAL_TIM_Base_MspInit+0x10c>)
 8004d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1a:	4a3c      	ldr	r2, [pc, #240]	; (8004e0c <HAL_TIM_Base_MspInit+0x10c>)
 8004d1c:	f043 0310 	orr.w	r3, r3, #16
 8004d20:	6413      	str	r3, [r2, #64]	; 0x40
 8004d22:	4b3a      	ldr	r3, [pc, #232]	; (8004e0c <HAL_TIM_Base_MspInit+0x10c>)
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	f003 0310 	and.w	r3, r3, #16
 8004d2a:	61fb      	str	r3, [r7, #28]
 8004d2c:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8004d2e:	2200      	movs	r2, #0
 8004d30:	2101      	movs	r1, #1
 8004d32:	2036      	movs	r0, #54	; 0x36
 8004d34:	f001 fca5 	bl	8006682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004d38:	2036      	movs	r0, #54	; 0x36
 8004d3a:	f001 fcbe 	bl	80066ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8004d3e:	e05e      	b.n	8004dfe <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a32      	ldr	r2, [pc, #200]	; (8004e10 <HAL_TIM_Base_MspInit+0x110>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d116      	bne.n	8004d78 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	61bb      	str	r3, [r7, #24]
 8004d4e:	4b2f      	ldr	r3, [pc, #188]	; (8004e0c <HAL_TIM_Base_MspInit+0x10c>)
 8004d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d52:	4a2e      	ldr	r2, [pc, #184]	; (8004e0c <HAL_TIM_Base_MspInit+0x10c>)
 8004d54:	f043 0320 	orr.w	r3, r3, #32
 8004d58:	6413      	str	r3, [r2, #64]	; 0x40
 8004d5a:	4b2c      	ldr	r3, [pc, #176]	; (8004e0c <HAL_TIM_Base_MspInit+0x10c>)
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5e:	f003 0320 	and.w	r3, r3, #32
 8004d62:	61bb      	str	r3, [r7, #24]
 8004d64:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004d66:	2200      	movs	r2, #0
 8004d68:	2100      	movs	r1, #0
 8004d6a:	2037      	movs	r0, #55	; 0x37
 8004d6c:	f001 fc89 	bl	8006682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004d70:	2037      	movs	r0, #55	; 0x37
 8004d72:	f001 fca2 	bl	80066ba <HAL_NVIC_EnableIRQ>
}
 8004d76:	e042      	b.n	8004dfe <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a25      	ldr	r2, [pc, #148]	; (8004e14 <HAL_TIM_Base_MspInit+0x114>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d10e      	bne.n	8004da0 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004d82:	2300      	movs	r3, #0
 8004d84:	617b      	str	r3, [r7, #20]
 8004d86:	4b21      	ldr	r3, [pc, #132]	; (8004e0c <HAL_TIM_Base_MspInit+0x10c>)
 8004d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d8a:	4a20      	ldr	r2, [pc, #128]	; (8004e0c <HAL_TIM_Base_MspInit+0x10c>)
 8004d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d90:	6453      	str	r3, [r2, #68]	; 0x44
 8004d92:	4b1e      	ldr	r3, [pc, #120]	; (8004e0c <HAL_TIM_Base_MspInit+0x10c>)
 8004d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d9a:	617b      	str	r3, [r7, #20]
 8004d9c:	697b      	ldr	r3, [r7, #20]
}
 8004d9e:	e02e      	b.n	8004dfe <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a1c      	ldr	r2, [pc, #112]	; (8004e18 <HAL_TIM_Base_MspInit+0x118>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d10e      	bne.n	8004dc8 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004daa:	2300      	movs	r3, #0
 8004dac:	613b      	str	r3, [r7, #16]
 8004dae:	4b17      	ldr	r3, [pc, #92]	; (8004e0c <HAL_TIM_Base_MspInit+0x10c>)
 8004db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004db2:	4a16      	ldr	r2, [pc, #88]	; (8004e0c <HAL_TIM_Base_MspInit+0x10c>)
 8004db4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004db8:	6453      	str	r3, [r2, #68]	; 0x44
 8004dba:	4b14      	ldr	r3, [pc, #80]	; (8004e0c <HAL_TIM_Base_MspInit+0x10c>)
 8004dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004dc2:	613b      	str	r3, [r7, #16]
 8004dc4:	693b      	ldr	r3, [r7, #16]
}
 8004dc6:	e01a      	b.n	8004dfe <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a13      	ldr	r2, [pc, #76]	; (8004e1c <HAL_TIM_Base_MspInit+0x11c>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d115      	bne.n	8004dfe <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	60fb      	str	r3, [r7, #12]
 8004dd6:	4b0d      	ldr	r3, [pc, #52]	; (8004e0c <HAL_TIM_Base_MspInit+0x10c>)
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dda:	4a0c      	ldr	r2, [pc, #48]	; (8004e0c <HAL_TIM_Base_MspInit+0x10c>)
 8004ddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004de0:	6413      	str	r3, [r2, #64]	; 0x40
 8004de2:	4b0a      	ldr	r3, [pc, #40]	; (8004e0c <HAL_TIM_Base_MspInit+0x10c>)
 8004de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dea:	60fb      	str	r3, [r7, #12]
 8004dec:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8004dee:	2200      	movs	r2, #0
 8004df0:	2100      	movs	r1, #0
 8004df2:	202c      	movs	r0, #44	; 0x2c
 8004df4:	f001 fc45 	bl	8006682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8004df8:	202c      	movs	r0, #44	; 0x2c
 8004dfa:	f001 fc5e 	bl	80066ba <HAL_NVIC_EnableIRQ>
}
 8004dfe:	bf00      	nop
 8004e00:	3720      	adds	r7, #32
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	40001000 	.word	0x40001000
 8004e0c:	40023800 	.word	0x40023800
 8004e10:	40001400 	.word	0x40001400
 8004e14:	40014400 	.word	0x40014400
 8004e18:	40014800 	.word	0x40014800
 8004e1c:	40001c00 	.word	0x40001c00

08004e20 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b08a      	sub	sp, #40	; 0x28
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e28:	f107 0314 	add.w	r3, r7, #20
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	601a      	str	r2, [r3, #0]
 8004e30:	605a      	str	r2, [r3, #4]
 8004e32:	609a      	str	r2, [r3, #8]
 8004e34:	60da      	str	r2, [r3, #12]
 8004e36:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a1d      	ldr	r2, [pc, #116]	; (8004eb4 <HAL_TIM_Encoder_MspInit+0x94>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d133      	bne.n	8004eaa <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004e42:	2300      	movs	r3, #0
 8004e44:	613b      	str	r3, [r7, #16]
 8004e46:	4b1c      	ldr	r3, [pc, #112]	; (8004eb8 <HAL_TIM_Encoder_MspInit+0x98>)
 8004e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e4a:	4a1b      	ldr	r2, [pc, #108]	; (8004eb8 <HAL_TIM_Encoder_MspInit+0x98>)
 8004e4c:	f043 0302 	orr.w	r3, r3, #2
 8004e50:	6453      	str	r3, [r2, #68]	; 0x44
 8004e52:	4b19      	ldr	r3, [pc, #100]	; (8004eb8 <HAL_TIM_Encoder_MspInit+0x98>)
 8004e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	613b      	str	r3, [r7, #16]
 8004e5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e5e:	2300      	movs	r3, #0
 8004e60:	60fb      	str	r3, [r7, #12]
 8004e62:	4b15      	ldr	r3, [pc, #84]	; (8004eb8 <HAL_TIM_Encoder_MspInit+0x98>)
 8004e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e66:	4a14      	ldr	r2, [pc, #80]	; (8004eb8 <HAL_TIM_Encoder_MspInit+0x98>)
 8004e68:	f043 0304 	orr.w	r3, r3, #4
 8004e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8004e6e:	4b12      	ldr	r3, [pc, #72]	; (8004eb8 <HAL_TIM_Encoder_MspInit+0x98>)
 8004e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e72:	f003 0304 	and.w	r3, r3, #4
 8004e76:	60fb      	str	r3, [r7, #12]
 8004e78:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004e7a:	23c0      	movs	r3, #192	; 0xc0
 8004e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e7e:	2302      	movs	r3, #2
 8004e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e82:	2300      	movs	r3, #0
 8004e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e86:	2300      	movs	r3, #0
 8004e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e8e:	f107 0314 	add.w	r3, r7, #20
 8004e92:	4619      	mov	r1, r3
 8004e94:	4809      	ldr	r0, [pc, #36]	; (8004ebc <HAL_TIM_Encoder_MspInit+0x9c>)
 8004e96:	f001 ffc7 	bl	8006e28 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	202c      	movs	r0, #44	; 0x2c
 8004ea0:	f001 fbef 	bl	8006682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8004ea4:	202c      	movs	r0, #44	; 0x2c
 8004ea6:	f001 fc08 	bl	80066ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004eaa:	bf00      	nop
 8004eac:	3728      	adds	r7, #40	; 0x28
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	40010400 	.word	0x40010400
 8004eb8:	40023800 	.word	0x40023800
 8004ebc:	40020800 	.word	0x40020800

08004ec0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b08c      	sub	sp, #48	; 0x30
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ec8:	f107 031c 	add.w	r3, r7, #28
 8004ecc:	2200      	movs	r2, #0
 8004ece:	601a      	str	r2, [r3, #0]
 8004ed0:	605a      	str	r2, [r3, #4]
 8004ed2:	609a      	str	r2, [r3, #8]
 8004ed4:	60da      	str	r2, [r3, #12]
 8004ed6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a5c      	ldr	r2, [pc, #368]	; (8005050 <HAL_TIM_MspPostInit+0x190>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d11f      	bne.n	8004f22 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	61bb      	str	r3, [r7, #24]
 8004ee6:	4b5b      	ldr	r3, [pc, #364]	; (8005054 <HAL_TIM_MspPostInit+0x194>)
 8004ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eea:	4a5a      	ldr	r2, [pc, #360]	; (8005054 <HAL_TIM_MspPostInit+0x194>)
 8004eec:	f043 0310 	orr.w	r3, r3, #16
 8004ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ef2:	4b58      	ldr	r3, [pc, #352]	; (8005054 <HAL_TIM_MspPostInit+0x194>)
 8004ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef6:	f003 0310 	and.w	r3, r3, #16
 8004efa:	61bb      	str	r3, [r7, #24]
 8004efc:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004efe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f04:	2302      	movs	r3, #2
 8004f06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004f10:	2301      	movs	r3, #1
 8004f12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004f14:	f107 031c 	add.w	r3, r7, #28
 8004f18:	4619      	mov	r1, r3
 8004f1a:	484f      	ldr	r0, [pc, #316]	; (8005058 <HAL_TIM_MspPostInit+0x198>)
 8004f1c:	f001 ff84 	bl	8006e28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8004f20:	e091      	b.n	8005046 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a4d      	ldr	r2, [pc, #308]	; (800505c <HAL_TIM_MspPostInit+0x19c>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d11e      	bne.n	8004f6a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	617b      	str	r3, [r7, #20]
 8004f30:	4b48      	ldr	r3, [pc, #288]	; (8005054 <HAL_TIM_MspPostInit+0x194>)
 8004f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f34:	4a47      	ldr	r2, [pc, #284]	; (8005054 <HAL_TIM_MspPostInit+0x194>)
 8004f36:	f043 0302 	orr.w	r3, r3, #2
 8004f3a:	6313      	str	r3, [r2, #48]	; 0x30
 8004f3c:	4b45      	ldr	r3, [pc, #276]	; (8005054 <HAL_TIM_MspPostInit+0x194>)
 8004f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f40:	f003 0302 	and.w	r3, r3, #2
 8004f44:	617b      	str	r3, [r7, #20]
 8004f46:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004f48:	2330      	movs	r3, #48	; 0x30
 8004f4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f50:	2300      	movs	r3, #0
 8004f52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f54:	2300      	movs	r3, #0
 8004f56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004f58:	2302      	movs	r3, #2
 8004f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f5c:	f107 031c 	add.w	r3, r7, #28
 8004f60:	4619      	mov	r1, r3
 8004f62:	483f      	ldr	r0, [pc, #252]	; (8005060 <HAL_TIM_MspPostInit+0x1a0>)
 8004f64:	f001 ff60 	bl	8006e28 <HAL_GPIO_Init>
}
 8004f68:	e06d      	b.n	8005046 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a3d      	ldr	r2, [pc, #244]	; (8005064 <HAL_TIM_MspPostInit+0x1a4>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d11f      	bne.n	8004fb4 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004f74:	2300      	movs	r3, #0
 8004f76:	613b      	str	r3, [r7, #16]
 8004f78:	4b36      	ldr	r3, [pc, #216]	; (8005054 <HAL_TIM_MspPostInit+0x194>)
 8004f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7c:	4a35      	ldr	r2, [pc, #212]	; (8005054 <HAL_TIM_MspPostInit+0x194>)
 8004f7e:	f043 0308 	orr.w	r3, r3, #8
 8004f82:	6313      	str	r3, [r2, #48]	; 0x30
 8004f84:	4b33      	ldr	r3, [pc, #204]	; (8005054 <HAL_TIM_MspPostInit+0x194>)
 8004f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f88:	f003 0308 	and.w	r3, r3, #8
 8004f8c:	613b      	str	r3, [r7, #16]
 8004f8e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004f90:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f96:	2302      	movs	r3, #2
 8004f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004fa2:	2302      	movs	r3, #2
 8004fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004fa6:	f107 031c 	add.w	r3, r7, #28
 8004faa:	4619      	mov	r1, r3
 8004fac:	482e      	ldr	r0, [pc, #184]	; (8005068 <HAL_TIM_MspPostInit+0x1a8>)
 8004fae:	f001 ff3b 	bl	8006e28 <HAL_GPIO_Init>
}
 8004fb2:	e048      	b.n	8005046 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a2c      	ldr	r2, [pc, #176]	; (800506c <HAL_TIM_MspPostInit+0x1ac>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d11f      	bne.n	8004ffe <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	60fb      	str	r3, [r7, #12]
 8004fc2:	4b24      	ldr	r3, [pc, #144]	; (8005054 <HAL_TIM_MspPostInit+0x194>)
 8004fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc6:	4a23      	ldr	r2, [pc, #140]	; (8005054 <HAL_TIM_MspPostInit+0x194>)
 8004fc8:	f043 0302 	orr.w	r3, r3, #2
 8004fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8004fce:	4b21      	ldr	r3, [pc, #132]	; (8005054 <HAL_TIM_MspPostInit+0x194>)
 8004fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd2:	f003 0302 	and.w	r3, r3, #2
 8004fd6:	60fb      	str	r3, [r7, #12]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004fda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004fde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fe0:	2302      	movs	r3, #2
 8004fe2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8004fec:	2303      	movs	r3, #3
 8004fee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ff0:	f107 031c 	add.w	r3, r7, #28
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	481a      	ldr	r0, [pc, #104]	; (8005060 <HAL_TIM_MspPostInit+0x1a0>)
 8004ff8:	f001 ff16 	bl	8006e28 <HAL_GPIO_Init>
}
 8004ffc:	e023      	b.n	8005046 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a1b      	ldr	r2, [pc, #108]	; (8005070 <HAL_TIM_MspPostInit+0x1b0>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d11e      	bne.n	8005046 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005008:	2300      	movs	r3, #0
 800500a:	60bb      	str	r3, [r7, #8]
 800500c:	4b11      	ldr	r3, [pc, #68]	; (8005054 <HAL_TIM_MspPostInit+0x194>)
 800500e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005010:	4a10      	ldr	r2, [pc, #64]	; (8005054 <HAL_TIM_MspPostInit+0x194>)
 8005012:	f043 0302 	orr.w	r3, r3, #2
 8005016:	6313      	str	r3, [r2, #48]	; 0x30
 8005018:	4b0e      	ldr	r3, [pc, #56]	; (8005054 <HAL_TIM_MspPostInit+0x194>)
 800501a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800501c:	f003 0302 	and.w	r3, r3, #2
 8005020:	60bb      	str	r3, [r7, #8]
 8005022:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005024:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005028:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800502a:	2302      	movs	r3, #2
 800502c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800502e:	2300      	movs	r3, #0
 8005030:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005032:	2300      	movs	r3, #0
 8005034:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8005036:	2303      	movs	r3, #3
 8005038:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800503a:	f107 031c 	add.w	r3, r7, #28
 800503e:	4619      	mov	r1, r3
 8005040:	4807      	ldr	r0, [pc, #28]	; (8005060 <HAL_TIM_MspPostInit+0x1a0>)
 8005042:	f001 fef1 	bl	8006e28 <HAL_GPIO_Init>
}
 8005046:	bf00      	nop
 8005048:	3730      	adds	r7, #48	; 0x30
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	40010000 	.word	0x40010000
 8005054:	40023800 	.word	0x40023800
 8005058:	40021000 	.word	0x40021000
 800505c:	40000400 	.word	0x40000400
 8005060:	40020400 	.word	0x40020400
 8005064:	40000800 	.word	0x40000800
 8005068:	40020c00 	.word	0x40020c00
 800506c:	40014400 	.word	0x40014400
 8005070:	40014800 	.word	0x40014800

08005074 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b08a      	sub	sp, #40	; 0x28
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800507c:	f107 0314 	add.w	r3, r7, #20
 8005080:	2200      	movs	r2, #0
 8005082:	601a      	str	r2, [r3, #0]
 8005084:	605a      	str	r2, [r3, #4]
 8005086:	609a      	str	r2, [r3, #8]
 8005088:	60da      	str	r2, [r3, #12]
 800508a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a19      	ldr	r2, [pc, #100]	; (80050f8 <HAL_UART_MspInit+0x84>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d12b      	bne.n	80050ee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005096:	2300      	movs	r3, #0
 8005098:	613b      	str	r3, [r7, #16]
 800509a:	4b18      	ldr	r3, [pc, #96]	; (80050fc <HAL_UART_MspInit+0x88>)
 800509c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509e:	4a17      	ldr	r2, [pc, #92]	; (80050fc <HAL_UART_MspInit+0x88>)
 80050a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050a4:	6413      	str	r3, [r2, #64]	; 0x40
 80050a6:	4b15      	ldr	r3, [pc, #84]	; (80050fc <HAL_UART_MspInit+0x88>)
 80050a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ae:	613b      	str	r3, [r7, #16]
 80050b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80050b2:	2300      	movs	r3, #0
 80050b4:	60fb      	str	r3, [r7, #12]
 80050b6:	4b11      	ldr	r3, [pc, #68]	; (80050fc <HAL_UART_MspInit+0x88>)
 80050b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ba:	4a10      	ldr	r2, [pc, #64]	; (80050fc <HAL_UART_MspInit+0x88>)
 80050bc:	f043 0308 	orr.w	r3, r3, #8
 80050c0:	6313      	str	r3, [r2, #48]	; 0x30
 80050c2:	4b0e      	ldr	r3, [pc, #56]	; (80050fc <HAL_UART_MspInit+0x88>)
 80050c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c6:	f003 0308 	and.w	r3, r3, #8
 80050ca:	60fb      	str	r3, [r7, #12]
 80050cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80050ce:	2360      	movs	r3, #96	; 0x60
 80050d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050d2:	2302      	movs	r3, #2
 80050d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050d6:	2300      	movs	r3, #0
 80050d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050da:	2303      	movs	r3, #3
 80050dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80050de:	2307      	movs	r3, #7
 80050e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80050e2:	f107 0314 	add.w	r3, r7, #20
 80050e6:	4619      	mov	r1, r3
 80050e8:	4805      	ldr	r0, [pc, #20]	; (8005100 <HAL_UART_MspInit+0x8c>)
 80050ea:	f001 fe9d 	bl	8006e28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80050ee:	bf00      	nop
 80050f0:	3728      	adds	r7, #40	; 0x28
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	40004400 	.word	0x40004400
 80050fc:	40023800 	.word	0x40023800
 8005100:	40020c00 	.word	0x40020c00

08005104 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005104:	b480      	push	{r7}
 8005106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005108:	e7fe      	b.n	8005108 <NMI_Handler+0x4>

0800510a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800510a:	b480      	push	{r7}
 800510c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800510e:	e7fe      	b.n	800510e <HardFault_Handler+0x4>

08005110 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005110:	b480      	push	{r7}
 8005112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005114:	e7fe      	b.n	8005114 <MemManage_Handler+0x4>

08005116 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005116:	b480      	push	{r7}
 8005118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800511a:	e7fe      	b.n	800511a <BusFault_Handler+0x4>

0800511c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800511c:	b480      	push	{r7}
 800511e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005120:	e7fe      	b.n	8005120 <UsageFault_Handler+0x4>

08005122 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005122:	b480      	push	{r7}
 8005124:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005126:	bf00      	nop
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005130:	b480      	push	{r7}
 8005132:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005134:	bf00      	nop
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr

0800513e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800513e:	b480      	push	{r7}
 8005140:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005142:	bf00      	nop
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005150:	f000 fd76 	bl	8005c40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005154:	bf00      	nop
 8005156:	bd80      	pop	{r7, pc}

08005158 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800515c:	2004      	movs	r0, #4
 800515e:	f002 f83f 	bl	80071e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8005162:	bf00      	nop
 8005164:	bd80      	pop	{r7, pc}

08005166 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005166:	b580      	push	{r7, lr}
 8005168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800516a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800516e:	f002 f837 	bl	80071e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005172:	bf00      	nop
 8005174:	bd80      	pop	{r7, pc}
	...

08005178 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800517c:	4803      	ldr	r0, [pc, #12]	; (800518c <TIM8_UP_TIM13_IRQHandler+0x14>)
 800517e:	f006 f84e 	bl	800b21e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8005182:	4803      	ldr	r0, [pc, #12]	; (8005190 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8005184:	f006 f84b 	bl	800b21e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8005188:	bf00      	nop
 800518a:	bd80      	pop	{r7, pc}
 800518c:	20015d28 	.word	0x20015d28
 8005190:	20015f24 	.word	0x20015f24

08005194 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8005198:	4802      	ldr	r0, [pc, #8]	; (80051a4 <SDIO_IRQHandler+0x10>)
 800519a:	f004 f8e7 	bl	800936c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800519e:	bf00      	nop
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	20016084 	.word	0x20016084

080051a8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80051ac:	4802      	ldr	r0, [pc, #8]	; (80051b8 <TIM6_DAC_IRQHandler+0x10>)
 80051ae:	f006 f836 	bl	800b21e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80051b2:	bf00      	nop
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	20016004 	.word	0x20016004

080051bc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80051c0:	4802      	ldr	r0, [pc, #8]	; (80051cc <TIM7_IRQHandler+0x10>)
 80051c2:	f006 f82c 	bl	800b21e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80051c6:	bf00      	nop
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	200161a8 	.word	0x200161a8

080051d0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80051d4:	4802      	ldr	r0, [pc, #8]	; (80051e0 <DMA2_Stream2_IRQHandler+0x10>)
 80051d6:	f001 fbb3 	bl	8006940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80051da:	bf00      	nop
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	20016148 	.word	0x20016148

080051e4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80051e8:	4802      	ldr	r0, [pc, #8]	; (80051f4 <DMA2_Stream3_IRQHandler+0x10>)
 80051ea:	f001 fba9 	bl	8006940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80051ee:	bf00      	nop
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	20015c70 	.word	0x20015c70

080051f8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80051fc:	4802      	ldr	r0, [pc, #8]	; (8005208 <DMA2_Stream6_IRQHandler+0x10>)
 80051fe:	f001 fb9f 	bl	8006940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8005202:	bf00      	nop
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	20015fa4 	.word	0x20015fa4

0800520c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b086      	sub	sp, #24
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005218:	2300      	movs	r3, #0
 800521a:	617b      	str	r3, [r7, #20]
 800521c:	e00a      	b.n	8005234 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800521e:	f3af 8000 	nop.w
 8005222:	4601      	mov	r1, r0
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	1c5a      	adds	r2, r3, #1
 8005228:	60ba      	str	r2, [r7, #8]
 800522a:	b2ca      	uxtb	r2, r1
 800522c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	3301      	adds	r3, #1
 8005232:	617b      	str	r3, [r7, #20]
 8005234:	697a      	ldr	r2, [r7, #20]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	429a      	cmp	r2, r3
 800523a:	dbf0      	blt.n	800521e <_read+0x12>
	}

return len;
 800523c:	687b      	ldr	r3, [r7, #4]
}
 800523e:	4618      	mov	r0, r3
 8005240:	3718      	adds	r7, #24
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}

08005246 <_close>:
	}
	return len;
}

int _close(int file)
{
 8005246:	b480      	push	{r7}
 8005248:	b083      	sub	sp, #12
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
	return -1;
 800524e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005252:	4618      	mov	r0, r3
 8005254:	370c      	adds	r7, #12
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr

0800525e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800525e:	b480      	push	{r7}
 8005260:	b083      	sub	sp, #12
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
 8005266:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800526e:	605a      	str	r2, [r3, #4]
	return 0;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	370c      	adds	r7, #12
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr

0800527e <_isatty>:

int _isatty(int file)
{
 800527e:	b480      	push	{r7}
 8005280:	b083      	sub	sp, #12
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
	return 1;
 8005286:	2301      	movs	r3, #1
}
 8005288:	4618      	mov	r0, r3
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	607a      	str	r2, [r7, #4]
	return 0;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3714      	adds	r7, #20
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
	...

080052b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80052b8:	4a14      	ldr	r2, [pc, #80]	; (800530c <_sbrk+0x5c>)
 80052ba:	4b15      	ldr	r3, [pc, #84]	; (8005310 <_sbrk+0x60>)
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80052c4:	4b13      	ldr	r3, [pc, #76]	; (8005314 <_sbrk+0x64>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d102      	bne.n	80052d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80052cc:	4b11      	ldr	r3, [pc, #68]	; (8005314 <_sbrk+0x64>)
 80052ce:	4a12      	ldr	r2, [pc, #72]	; (8005318 <_sbrk+0x68>)
 80052d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80052d2:	4b10      	ldr	r3, [pc, #64]	; (8005314 <_sbrk+0x64>)
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4413      	add	r3, r2
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d207      	bcs.n	80052f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80052e0:	f00c ffc0 	bl	8012264 <__errno>
 80052e4:	4602      	mov	r2, r0
 80052e6:	230c      	movs	r3, #12
 80052e8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80052ea:	f04f 33ff 	mov.w	r3, #4294967295
 80052ee:	e009      	b.n	8005304 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80052f0:	4b08      	ldr	r3, [pc, #32]	; (8005314 <_sbrk+0x64>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80052f6:	4b07      	ldr	r3, [pc, #28]	; (8005314 <_sbrk+0x64>)
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4413      	add	r3, r2
 80052fe:	4a05      	ldr	r2, [pc, #20]	; (8005314 <_sbrk+0x64>)
 8005300:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005302:	68fb      	ldr	r3, [r7, #12]
}
 8005304:	4618      	mov	r0, r3
 8005306:	3718      	adds	r7, #24
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	20050000 	.word	0x20050000
 8005310:	00000400 	.word	0x00000400
 8005314:	20000238 	.word	0x20000238
 8005318:	20018268 	.word	0x20018268

0800531c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800531c:	b480      	push	{r7}
 800531e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005320:	4b08      	ldr	r3, [pc, #32]	; (8005344 <SystemInit+0x28>)
 8005322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005326:	4a07      	ldr	r2, [pc, #28]	; (8005344 <SystemInit+0x28>)
 8005328:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800532c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005330:	4b04      	ldr	r3, [pc, #16]	; (8005344 <SystemInit+0x28>)
 8005332:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005336:	609a      	str	r2, [r3, #8]
#endif
}
 8005338:	bf00      	nop
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	e000ed00 	.word	0xe000ed00

08005348 <batteryLowMode>:
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl);
Odometry odometry(&encoder, &imu, &velocity_ctrl);

void batteryLowMode()
{
 8005348:	b580      	push	{r7, lr}
 800534a:	af00      	add	r7, sp, #0
	lcd_clear();
 800534c:	f7fb fea8 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8005350:	2100      	movs	r1, #0
 8005352:	2000      	movs	r0, #0
 8005354:	f7fb feb4 	bl	80010c0 <lcd_locate>
	lcd_printf("Battery");
 8005358:	4814      	ldr	r0, [pc, #80]	; (80053ac <batteryLowMode+0x64>)
 800535a:	f7fb fedb 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 800535e:	2101      	movs	r1, #1
 8005360:	2000      	movs	r0, #0
 8005362:	f7fb fead 	bl	80010c0 <lcd_locate>
	lcd_printf("Low");
 8005366:	4812      	ldr	r0, [pc, #72]	; (80053b0 <batteryLowMode+0x68>)
 8005368:	f7fb fed4 	bl	8001114 <lcd_printf>

	while(1){
		led.fullColor('R');
 800536c:	2152      	movs	r1, #82	; 0x52
 800536e:	4811      	ldr	r0, [pc, #68]	; (80053b4 <batteryLowMode+0x6c>)
 8005370:	f7fc fd48 	bl	8001e04 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8005374:	2064      	movs	r0, #100	; 0x64
 8005376:	f000 fc83 	bl	8005c80 <HAL_Delay>
		led.fullColor('Y');
 800537a:	2159      	movs	r1, #89	; 0x59
 800537c:	480d      	ldr	r0, [pc, #52]	; (80053b4 <batteryLowMode+0x6c>)
 800537e:	f7fc fd41 	bl	8001e04 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8005382:	2064      	movs	r0, #100	; 0x64
 8005384:	f000 fc7c 	bl	8005c80 <HAL_Delay>

		if(joy_stick.getValue() == JOY_C){
 8005388:	480b      	ldr	r0, [pc, #44]	; (80053b8 <batteryLowMode+0x70>)
 800538a:	f7fc fcd7 	bl	8001d3c <_ZN8JoyStick8getValueEv>
 800538e:	4603      	mov	r3, r0
 8005390:	2b02      	cmp	r3, #2
 8005392:	bf0c      	ite	eq
 8005394:	2301      	moveq	r3, #1
 8005396:	2300      	movne	r3, #0
 8005398:	b2db      	uxtb	r3, r3
 800539a:	2b00      	cmp	r3, #0
 800539c:	d0e6      	beq.n	800536c <batteryLowMode+0x24>
			HAL_Delay(500);
 800539e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80053a2:	f000 fc6d 	bl	8005c80 <HAL_Delay>
			break;
 80053a6:	bf00      	nop
		}
	}
}
 80053a8:	bf00      	nop
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	080171c0 	.word	0x080171c0
 80053b0:	080171c8 	.word	0x080171c8
 80053b4:	20000544 	.word	0x20000544
 80053b8:	20000538 	.word	0x20000538

080053bc <cppInit>:

void cppInit(void)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	af00      	add	r7, sp, #0
	lcd_init();
 80053c0:	f7fb fe2a 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 80053c4:	4831      	ldr	r0, [pc, #196]	; (800548c <cppInit+0xd0>)
 80053c6:	f7fd fe1b 	bl	8003000 <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 80053ca:	2064      	movs	r0, #100	; 0x64
 80053cc:	f000 fc58 	bl	8005c80 <HAL_Delay>
	power_sensor.updateValues();
 80053d0:	482e      	ldr	r0, [pc, #184]	; (800548c <cppInit+0xd0>)
 80053d2:	f7fd fe25 	bl	8003020 <_ZN11PowerSensor12updateValuesEv>
	if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed
 80053d6:	482d      	ldr	r0, [pc, #180]	; (800548c <cppInit+0xd0>)
 80053d8:	f7fd fe4e 	bl	8003078 <_ZN11PowerSensor12butteryCheckEv>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d001      	beq.n	80053e6 <cppInit+0x2a>
 80053e2:	f7ff ffb1 	bl	8005348 <batteryLowMode>

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 80053e6:	482a      	ldr	r0, [pc, #168]	; (8005490 <cppInit+0xd4>)
 80053e8:	f7fd fad8 	bl	800299c <_ZN6Logger10sdCardInitEv>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d007      	beq.n	8005402 <cppInit+0x46>
		led.fullColor('G');
 80053f2:	2147      	movs	r1, #71	; 0x47
 80053f4:	4827      	ldr	r0, [pc, #156]	; (8005494 <cppInit+0xd8>)
 80053f6:	f7fc fd05 	bl	8001e04 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 80053fa:	2064      	movs	r0, #100	; 0x64
 80053fc:	f000 fc40 	bl	8005c80 <HAL_Delay>
 8005400:	e006      	b.n	8005410 <cppInit+0x54>
	}
	else{ //sd mount fali
		led.fullColor('R');
 8005402:	2152      	movs	r1, #82	; 0x52
 8005404:	4823      	ldr	r0, [pc, #140]	; (8005494 <cppInit+0xd8>)
 8005406:	f7fc fcfd 	bl	8001e04 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 800540a:	2064      	movs	r0, #100	; 0x64
 800540c:	f000 fc38 	bl	8005c80 <HAL_Delay>
	}

	line_sensor.ADCStart();
 8005410:	4821      	ldr	r0, [pc, #132]	; (8005498 <cppInit+0xdc>)
 8005412:	f7fc fe53 	bl	80020bc <_ZN10LineSensor8ADCStartEv>
	motor.init();
 8005416:	4821      	ldr	r0, [pc, #132]	; (800549c <cppInit+0xe0>)
 8005418:	f7fd fbf2 	bl	8002c00 <_ZN5Motor4initEv>
	encoder.init();
 800541c:	4820      	ldr	r0, [pc, #128]	; (80054a0 <cppInit+0xe4>)
 800541e:	f7fb febb 	bl	8001198 <_ZN7Encoder4initEv>
	imu.init();
 8005422:	4820      	ldr	r0, [pc, #128]	; (80054a4 <cppInit+0xe8>)
 8005424:	f7fc fae8 	bl	80019f8 <_ZN3IMU4initEv>

	line_sensor.calibration();
 8005428:	481b      	ldr	r0, [pc, #108]	; (8005498 <cppInit+0xdc>)
 800542a:	f7fc ff3d 	bl	80022a8 <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 800542e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005432:	f000 fc25 	bl	8005c80 <HAL_Delay>

	led.fullColor('M');
 8005436:	214d      	movs	r1, #77	; 0x4d
 8005438:	4816      	ldr	r0, [pc, #88]	; (8005494 <cppInit+0xd8>)
 800543a:	f7fc fce3 	bl	8001e04 <_ZN3LED9fullColorEc>
	imu.calibration();
 800543e:	4819      	ldr	r0, [pc, #100]	; (80054a4 <cppInit+0xe8>)
 8005440:	f7fc fb40 	bl	8001ac4 <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	line_trace.setGain(0.0005, 0.000002, 0);
 8005444:	ed9f 1a18 	vldr	s2, [pc, #96]	; 80054a8 <cppInit+0xec>
 8005448:	eddf 0a18 	vldr	s1, [pc, #96]	; 80054ac <cppInit+0xf0>
 800544c:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80054b0 <cppInit+0xf4>
 8005450:	4818      	ldr	r0, [pc, #96]	; (80054b4 <cppInit+0xf8>)
 8005452:	f7fd f9ed 	bl	8002830 <_ZN9LineTrace7setGainEfff>

	//velocity_ctrl.setVelocityGain(1.5, 0, 20);
	velocity_ctrl.setVelocityGain(0, 0, 0);
 8005456:	ed9f 1a14 	vldr	s2, [pc, #80]	; 80054a8 <cppInit+0xec>
 800545a:	eddf 0a13 	vldr	s1, [pc, #76]	; 80054a8 <cppInit+0xec>
 800545e:	ed9f 0a12 	vldr	s0, [pc, #72]	; 80054a8 <cppInit+0xec>
 8005462:	4815      	ldr	r0, [pc, #84]	; (80054b8 <cppInit+0xfc>)
 8005464:	f7fe f8e4 	bl	8003630 <_ZN12VelocityCtrl15setVelocityGainEfff>
	//velocity_ctrl.setOmegaGain(0.05, 0, 7);
	velocity_ctrl.setOmegaGain(0.0, 0, 0);
 8005468:	ed9f 1a0f 	vldr	s2, [pc, #60]	; 80054a8 <cppInit+0xec>
 800546c:	eddf 0a0e 	vldr	s1, [pc, #56]	; 80054a8 <cppInit+0xec>
 8005470:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80054a8 <cppInit+0xec>
 8005474:	4810      	ldr	r0, [pc, #64]	; (80054b8 <cppInit+0xfc>)
 8005476:	f7fe f8f4 	bl	8003662 <_ZN12VelocityCtrl12setOmegaGainEfff>


	encoder.clearDistance();
 800547a:	4809      	ldr	r0, [pc, #36]	; (80054a0 <cppInit+0xe4>)
 800547c:	f7fb ff78 	bl	8001370 <_ZN7Encoder13clearDistanceEv>
	odometry.clearPotition();
 8005480:	480e      	ldr	r0, [pc, #56]	; (80054bc <cppInit+0x100>)
 8005482:	f7fd fd9f 	bl	8002fc4 <_ZN8Odometry13clearPotitionEv>

}
 8005486:	bf00      	nop
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	20000548 	.word	0x20000548
 8005490:	20000578 	.word	0x20000578
 8005494:	20000544 	.word	0x20000544
 8005498:	2000023c 	.word	0x2000023c
 800549c:	20000540 	.word	0x20000540
 80054a0:	20013630 	.word	0x20013630
 80054a4:	20000558 	.word	0x20000558
 80054a8:	00000000 	.word	0x00000000
 80054ac:	360637bd 	.word	0x360637bd
 80054b0:	3a03126f 	.word	0x3a03126f
 80054b4:	20013688 	.word	0x20013688
 80054b8:	20013648 	.word	0x20013648
 80054bc:	200136e8 	.word	0x200136e8

080054c0 <cppFlip1ms>:

void cppFlip1ms(void)
{
 80054c0:	b598      	push	{r3, r4, r7, lr}
 80054c2:	ed2d 8b02 	vpush	{d8}
 80054c6:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 80054c8:	4824      	ldr	r0, [pc, #144]	; (800555c <cppFlip1ms+0x9c>)
 80054ca:	f7fc fe55 	bl	8002178 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 80054ce:	4824      	ldr	r0, [pc, #144]	; (8005560 <cppFlip1ms+0xa0>)
 80054d0:	f7fc faa6 	bl	8001a20 <_ZN3IMU12updateValuesEv>
	encoder.updateCnt();
 80054d4:	4823      	ldr	r0, [pc, #140]	; (8005564 <cppFlip1ms+0xa4>)
 80054d6:	f7fb fe7f 	bl	80011d8 <_ZN7Encoder9updateCntEv>

	line_trace.flip();
 80054da:	4823      	ldr	r0, [pc, #140]	; (8005568 <cppFlip1ms+0xa8>)
 80054dc:	f7fd f9e0 	bl	80028a0 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 80054e0:	4822      	ldr	r0, [pc, #136]	; (800556c <cppFlip1ms+0xac>)
 80054e2:	f7fe f8d7 	bl	8003694 <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 80054e6:	4822      	ldr	r0, [pc, #136]	; (8005570 <cppFlip1ms+0xb0>)
 80054e8:	f7fd fd50 	bl	8002f8c <_ZN8Odometry4flipEv>

	motor.motorCtrl();
 80054ec:	4821      	ldr	r0, [pc, #132]	; (8005574 <cppFlip1ms+0xb4>)
 80054ee:	f7fd fb99 	bl	8002c24 <_ZN5Motor9motorCtrlEv>

	if(encoder.getTotalDistance() >= 10){
 80054f2:	481c      	ldr	r0, [pc, #112]	; (8005564 <cppFlip1ms+0xa4>)
 80054f4:	f7fb ff2d 	bl	8001352 <_ZN7Encoder16getTotalDistanceEv>
 80054f8:	eeb0 7a40 	vmov.f32	s14, s0
 80054fc:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8005500:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005508:	bfac      	ite	ge
 800550a:	2301      	movge	r3, #1
 800550c:	2300      	movlt	r3, #0
 800550e:	b2db      	uxtb	r3, r3
 8005510:	2b00      	cmp	r3, #0
 8005512:	d01b      	beq.n	800554c <cppFlip1ms+0x8c>
		logger.storeDistanceAndTheta(encoder.getTotalDistance(), odometry.getTheta());
 8005514:	4813      	ldr	r0, [pc, #76]	; (8005564 <cppFlip1ms+0xa4>)
 8005516:	f7fb ff1c 	bl	8001352 <_ZN7Encoder16getTotalDistanceEv>
 800551a:	eeb0 8a40 	vmov.f32	s16, s0
 800551e:	4814      	ldr	r0, [pc, #80]	; (8005570 <cppFlip1ms+0xb0>)
 8005520:	f7fd fd3f 	bl	8002fa2 <_ZN8Odometry8getThetaEv>
 8005524:	ec54 3b10 	vmov	r3, r4, d0
 8005528:	4618      	mov	r0, r3
 800552a:	4621      	mov	r1, r4
 800552c:	f7fb fb74 	bl	8000c18 <__aeabi_d2f>
 8005530:	4603      	mov	r3, r0
 8005532:	ee00 3a90 	vmov	s1, r3
 8005536:	eeb0 0a48 	vmov.f32	s0, s16
 800553a:	480f      	ldr	r0, [pc, #60]	; (8005578 <cppFlip1ms+0xb8>)
 800553c:	f7fd faae 	bl	8002a9c <_ZN6Logger21storeDistanceAndThetaEff>
		encoder.clearTotalCnt();
 8005540:	4808      	ldr	r0, [pc, #32]	; (8005564 <cppFlip1ms+0xa4>)
 8005542:	f7fb ff45 	bl	80013d0 <_ZN7Encoder13clearTotalCntEv>
		odometry.clearPotition();
 8005546:	480a      	ldr	r0, [pc, #40]	; (8005570 <cppFlip1ms+0xb0>)
 8005548:	f7fd fd3c 	bl	8002fc4 <_ZN8Odometry13clearPotitionEv>
	}

	encoder.clearCnt();
 800554c:	4805      	ldr	r0, [pc, #20]	; (8005564 <cppFlip1ms+0xa4>)
 800554e:	f7fb ff1d 	bl	800138c <_ZN7Encoder8clearCntEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8005552:	bf00      	nop
 8005554:	46bd      	mov	sp, r7
 8005556:	ecbd 8b02 	vpop	{d8}
 800555a:	bd98      	pop	{r3, r4, r7, pc}
 800555c:	2000023c 	.word	0x2000023c
 8005560:	20000558 	.word	0x20000558
 8005564:	20013630 	.word	0x20013630
 8005568:	20013688 	.word	0x20013688
 800556c:	20013648 	.word	0x20013648
 8005570:	200136e8 	.word	0x200136e8
 8005574:	20000540 	.word	0x20000540
 8005578:	20000578 	.word	0x20000578

0800557c <cppFlip100ns>:

void cppFlip100ns(void)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 8005580:	4802      	ldr	r0, [pc, #8]	; (800558c <cppFlip100ns+0x10>)
 8005582:	f7fc fdab 	bl	80020dc <_ZN10LineSensor17storeSensorValuesEv>
}
 8005586:	bf00      	nop
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	2000023c 	.word	0x2000023c

08005590 <cppFlip10ms>:

void cppFlip10ms(void)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	af00      	add	r7, sp, #0
	logger.storeLog(line_sensor.sensor[7]);
 8005594:	4b04      	ldr	r3, [pc, #16]	; (80055a8 <cppFlip10ms+0x18>)
 8005596:	edd3 7ab7 	vldr	s15, [r3, #732]	; 0x2dc
 800559a:	eeb0 0a67 	vmov.f32	s0, s15
 800559e:	4803      	ldr	r0, [pc, #12]	; (80055ac <cppFlip10ms+0x1c>)
 80055a0:	f7fd fa44 	bl	8002a2c <_ZN6Logger8storeLogEf>
	//logger.storeDistanceAndTheta(encoder.getDistance(), velocity_ctrl.getCurrentOmega()*DELTA_T);
}
 80055a4:	bf00      	nop
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	2000023c 	.word	0x2000023c
 80055ac:	20000578 	.word	0x20000578

080055b0 <cppExit>:

void cppExit(uint16_t gpio_pin)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b082      	sub	sp, #8
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	4603      	mov	r3, r0
 80055b8:	80fb      	strh	r3, [r7, #6]
	side_sensor.updateStatus(gpio_pin);
 80055ba:	88fb      	ldrh	r3, [r7, #6]
 80055bc:	4619      	mov	r1, r3
 80055be:	4803      	ldr	r0, [pc, #12]	; (80055cc <cppExit+0x1c>)
 80055c0:	f7fd fde6 	bl	8003190 <_ZN10SideSensor12updateStatusEt>
}
 80055c4:	bf00      	nop
 80055c6:	3708      	adds	r7, #8
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	20000534 	.word	0x20000534

080055d0 <cppLoop>:

void cppLoop(void)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
	switch(rotary_switch.getValue()){
 80055d6:	48a8      	ldr	r0, [pc, #672]	; (8005878 <cppLoop+0x2a8>)
 80055d8:	f7fd fd80 	bl	80030dc <_ZN12RotarySwitch8getValueEv>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b0f      	cmp	r3, #15
 80055e0:	f200 822c 	bhi.w	8005a3c <cppLoop+0x46c>
 80055e4:	a201      	add	r2, pc, #4	; (adr r2, 80055ec <cppLoop+0x1c>)
 80055e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ea:	bf00      	nop
 80055ec:	0800562d 	.word	0x0800562d
 80055f0:	0800564f 	.word	0x0800564f
 80055f4:	080056d7 	.word	0x080056d7
 80055f8:	08005733 	.word	0x08005733
 80055fc:	080057eb 	.word	0x080057eb
 8005600:	080058c9 	.word	0x080058c9
 8005604:	0800598b 	.word	0x0800598b
 8005608:	08005a3d 	.word	0x08005a3d
 800560c:	08005a3d 	.word	0x08005a3d
 8005610:	08005a3d 	.word	0x08005a3d
 8005614:	08005a3d 	.word	0x08005a3d
 8005618:	08005a3d 	.word	0x08005a3d
 800561c:	08005a3d 	.word	0x08005a3d
 8005620:	08005a3d 	.word	0x08005a3d
 8005624:	08005a3d 	.word	0x08005a3d
 8005628:	08005a3d 	.word	0x08005a3d

	case 0:
		lcd_clear();
 800562c:	f7fb fd38 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005630:	2100      	movs	r1, #0
 8005632:	2000      	movs	r0, #0
 8005634:	f7fb fd44 	bl	80010c0 <lcd_locate>
		lcd_printf("LCD");
 8005638:	4890      	ldr	r0, [pc, #576]	; (800587c <cppLoop+0x2ac>)
 800563a:	f7fb fd6b 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800563e:	2101      	movs	r1, #1
 8005640:	2000      	movs	r0, #0
 8005642:	f7fb fd3d 	bl	80010c0 <lcd_locate>
		lcd_printf("TEST0");
 8005646:	488e      	ldr	r0, [pc, #568]	; (8005880 <cppLoop+0x2b0>)
 8005648:	f7fb fd64 	bl	8001114 <lcd_printf>
		break;
 800564c:	e203      	b.n	8005a56 <cppLoop+0x486>

	case 1:
		lcd_clear();
 800564e:	f7fb fd27 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005652:	2100      	movs	r1, #0
 8005654:	2000      	movs	r0, #0
 8005656:	f7fb fd33 	bl	80010c0 <lcd_locate>
		lcd_printf("velocity");
 800565a:	488a      	ldr	r0, [pc, #552]	; (8005884 <cppLoop+0x2b4>)
 800565c:	f7fb fd5a 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005660:	2101      	movs	r1, #1
 8005662:	2000      	movs	r0, #0
 8005664:	f7fb fd2c 	bl	80010c0 <lcd_locate>
		lcd_printf("test");
 8005668:	4887      	ldr	r0, [pc, #540]	; (8005888 <cppLoop+0x2b8>)
 800566a:	f7fb fd53 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800566e:	4887      	ldr	r0, [pc, #540]	; (800588c <cppLoop+0x2bc>)
 8005670:	f7fc fb64 	bl	8001d3c <_ZN8JoyStick8getValueEv>
 8005674:	4603      	mov	r3, r0
 8005676:	2b02      	cmp	r3, #2
 8005678:	bf0c      	ite	eq
 800567a:	2301      	moveq	r3, #1
 800567c:	2300      	movne	r3, #0
 800567e:	b2db      	uxtb	r3, r3
 8005680:	2b00      	cmp	r3, #0
 8005682:	f000 81dd 	beq.w	8005a40 <cppLoop+0x470>
			HAL_Delay(500);
 8005686:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800568a:	f000 faf9 	bl	8005c80 <HAL_Delay>

			logger.start();
 800568e:	4880      	ldr	r0, [pc, #512]	; (8005890 <cppLoop+0x2c0>)
 8005690:	f7fd fa85 	bl	8002b9e <_ZN6Logger5startEv>
			velocity_ctrl.start();
 8005694:	487f      	ldr	r0, [pc, #508]	; (8005894 <cppLoop+0x2c4>)
 8005696:	f7fe f813 	bl	80036c0 <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(0.0, 0.0);
 800569a:	eddf 0a7f 	vldr	s1, [pc, #508]	; 8005898 <cppLoop+0x2c8>
 800569e:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 8005898 <cppLoop+0x2c8>
 80056a2:	487c      	ldr	r0, [pc, #496]	; (8005894 <cppLoop+0x2c4>)
 80056a4:	f7fd ffb0 	bl	8003608 <_ZN12VelocityCtrl11setVelocityEff>
			led.LR(1, -1);
 80056a8:	f04f 32ff 	mov.w	r2, #4294967295
 80056ac:	2101      	movs	r1, #1
 80056ae:	487b      	ldr	r0, [pc, #492]	; (800589c <cppLoop+0x2cc>)
 80056b0:	f7fc fc64 	bl	8001f7c <_ZN3LED2LREaa>

			HAL_Delay(3000);
 80056b4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80056b8:	f000 fae2 	bl	8005c80 <HAL_Delay>

			velocity_ctrl.stop();
 80056bc:	4875      	ldr	r0, [pc, #468]	; (8005894 <cppLoop+0x2c4>)
 80056be:	f7fe f80f 	bl	80036e0 <_ZN12VelocityCtrl4stopEv>
			led.LR(0, -1);
 80056c2:	f04f 32ff 	mov.w	r2, #4294967295
 80056c6:	2100      	movs	r1, #0
 80056c8:	4874      	ldr	r0, [pc, #464]	; (800589c <cppLoop+0x2cc>)
 80056ca:	f7fc fc57 	bl	8001f7c <_ZN3LED2LREaa>

			logger.stop();
 80056ce:	4870      	ldr	r0, [pc, #448]	; (8005890 <cppLoop+0x2c0>)
 80056d0:	f7fd fa75 	bl	8002bbe <_ZN6Logger4stopEv>
		}

		break;
 80056d4:	e1b4      	b.n	8005a40 <cppLoop+0x470>

	case 2:
		lcd_clear();
 80056d6:	f7fb fce3 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80056da:	2100      	movs	r1, #0
 80056dc:	2000      	movs	r0, #0
 80056de:	f7fb fcef 	bl	80010c0 <lcd_locate>
		lcd_printf("LOG");
 80056e2:	486f      	ldr	r0, [pc, #444]	; (80058a0 <cppLoop+0x2d0>)
 80056e4:	f7fb fd16 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80056e8:	2101      	movs	r1, #1
 80056ea:	2000      	movs	r0, #0
 80056ec:	f7fb fce8 	bl	80010c0 <lcd_locate>
		lcd_printf("SAVE");
 80056f0:	486c      	ldr	r0, [pc, #432]	; (80058a4 <cppLoop+0x2d4>)
 80056f2:	f7fb fd0f 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80056f6:	4865      	ldr	r0, [pc, #404]	; (800588c <cppLoop+0x2bc>)
 80056f8:	f7fc fb20 	bl	8001d3c <_ZN8JoyStick8getValueEv>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b02      	cmp	r3, #2
 8005700:	bf0c      	ite	eq
 8005702:	2301      	moveq	r3, #1
 8005704:	2300      	movne	r3, #0
 8005706:	b2db      	uxtb	r3, r3
 8005708:	2b00      	cmp	r3, #0
 800570a:	f000 819b 	beq.w	8005a44 <cppLoop+0x474>
			led.LR(1, -1);
 800570e:	f04f 32ff 	mov.w	r2, #4294967295
 8005712:	2101      	movs	r1, #1
 8005714:	4861      	ldr	r0, [pc, #388]	; (800589c <cppLoop+0x2cc>)
 8005716:	f7fc fc31 	bl	8001f7c <_ZN3LED2LREaa>
			logger.saveLogs("line_sensors", "sensor6.csv");
 800571a:	4a63      	ldr	r2, [pc, #396]	; (80058a8 <cppLoop+0x2d8>)
 800571c:	4963      	ldr	r1, [pc, #396]	; (80058ac <cppLoop+0x2dc>)
 800571e:	485c      	ldr	r0, [pc, #368]	; (8005890 <cppLoop+0x2c0>)
 8005720:	f7fd fa06 	bl	8002b30 <_ZN6Logger8saveLogsEPKcS1_>
			led.LR(0, -1);
 8005724:	f04f 32ff 	mov.w	r2, #4294967295
 8005728:	2100      	movs	r1, #0
 800572a:	485c      	ldr	r0, [pc, #368]	; (800589c <cppLoop+0x2cc>)
 800572c:	f7fc fc26 	bl	8001f7c <_ZN3LED2LREaa>
		}
		break;
 8005730:	e188      	b.n	8005a44 <cppLoop+0x474>

	case 3:
		led.fullColor('C');
 8005732:	2143      	movs	r1, #67	; 0x43
 8005734:	4859      	ldr	r0, [pc, #356]	; (800589c <cppLoop+0x2cc>)
 8005736:	f7fc fb65 	bl	8001e04 <_ZN3LED9fullColorEc>

		lcd_clear();
 800573a:	f7fb fcb1 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800573e:	2100      	movs	r1, #0
 8005740:	2000      	movs	r0, #0
 8005742:	f7fb fcbd 	bl	80010c0 <lcd_locate>
		lcd_printf("Line");
 8005746:	485a      	ldr	r0, [pc, #360]	; (80058b0 <cppLoop+0x2e0>)
 8005748:	f7fb fce4 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800574c:	2101      	movs	r1, #1
 800574e:	2000      	movs	r0, #0
 8005750:	f7fb fcb6 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 8005754:	4857      	ldr	r0, [pc, #348]	; (80058b4 <cppLoop+0x2e4>)
 8005756:	f7fb fcdd 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800575a:	484c      	ldr	r0, [pc, #304]	; (800588c <cppLoop+0x2bc>)
 800575c:	f7fc faee 	bl	8001d3c <_ZN8JoyStick8getValueEv>
 8005760:	4603      	mov	r3, r0
 8005762:	2b02      	cmp	r3, #2
 8005764:	bf0c      	ite	eq
 8005766:	2301      	moveq	r3, #1
 8005768:	2300      	movne	r3, #0
 800576a:	b2db      	uxtb	r3, r3
 800576c:	2b00      	cmp	r3, #0
 800576e:	f000 816b 	beq.w	8005a48 <cppLoop+0x478>
			led.LR(-1, 1);
 8005772:	2201      	movs	r2, #1
 8005774:	f04f 31ff 	mov.w	r1, #4294967295
 8005778:	4848      	ldr	r0, [pc, #288]	; (800589c <cppLoop+0x2cc>)
 800577a:	f7fc fbff 	bl	8001f7c <_ZN3LED2LREaa>
			HAL_Delay(500);
 800577e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005782:	f000 fa7d 	bl	8005c80 <HAL_Delay>

			logger.start();
 8005786:	4842      	ldr	r0, [pc, #264]	; (8005890 <cppLoop+0x2c0>)
 8005788:	f7fd fa09 	bl	8002b9e <_ZN6Logger5startEv>
			line_trace.setNormalRatio(0.1);
 800578c:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 80058b8 <cppLoop+0x2e8>
 8005790:	484a      	ldr	r0, [pc, #296]	; (80058bc <cppLoop+0x2ec>)
 8005792:	f7fd f866 	bl	8002862 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8005796:	4849      	ldr	r0, [pc, #292]	; (80058bc <cppLoop+0x2ec>)
 8005798:	f7fd f8ba 	bl	8002910 <_ZN9LineTrace5startEv>

			HAL_Delay(5000);
 800579c:	f241 3088 	movw	r0, #5000	; 0x1388
 80057a0:	f000 fa6e 	bl	8005c80 <HAL_Delay>

			logger.stop();
 80057a4:	483a      	ldr	r0, [pc, #232]	; (8005890 <cppLoop+0x2c0>)
 80057a6:	f7fd fa0a 	bl	8002bbe <_ZN6Logger4stopEv>
			line_trace.setNormalRatio(0.1);
 80057aa:	ed9f 0a43 	vldr	s0, [pc, #268]	; 80058b8 <cppLoop+0x2e8>
 80057ae:	4843      	ldr	r0, [pc, #268]	; (80058bc <cppLoop+0x2ec>)
 80057b0:	f7fd f857 	bl	8002862 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.stop();
 80057b4:	4841      	ldr	r0, [pc, #260]	; (80058bc <cppLoop+0x2ec>)
 80057b6:	f7fd f8bb 	bl	8002930 <_ZN9LineTrace4stopEv>

			led.LR(1, -1);
 80057ba:	f04f 32ff 	mov.w	r2, #4294967295
 80057be:	2101      	movs	r1, #1
 80057c0:	4836      	ldr	r0, [pc, #216]	; (800589c <cppLoop+0x2cc>)
 80057c2:	f7fc fbdb 	bl	8001f7c <_ZN3LED2LREaa>
			logger.saveLogs("line_sensors", "sensor7.csv");
 80057c6:	4a3e      	ldr	r2, [pc, #248]	; (80058c0 <cppLoop+0x2f0>)
 80057c8:	4938      	ldr	r1, [pc, #224]	; (80058ac <cppLoop+0x2dc>)
 80057ca:	4831      	ldr	r0, [pc, #196]	; (8005890 <cppLoop+0x2c0>)
 80057cc:	f7fd f9b0 	bl	8002b30 <_ZN6Logger8saveLogsEPKcS1_>
			led.LR(0, -1);
 80057d0:	f04f 32ff 	mov.w	r2, #4294967295
 80057d4:	2100      	movs	r1, #0
 80057d6:	4831      	ldr	r0, [pc, #196]	; (800589c <cppLoop+0x2cc>)
 80057d8:	f7fc fbd0 	bl	8001f7c <_ZN3LED2LREaa>

			led.LR(-1, 0);
 80057dc:	2200      	movs	r2, #0
 80057de:	f04f 31ff 	mov.w	r1, #4294967295
 80057e2:	482e      	ldr	r0, [pc, #184]	; (800589c <cppLoop+0x2cc>)
 80057e4:	f7fc fbca 	bl	8001f7c <_ZN3LED2LREaa>
		}

		break;
 80057e8:	e12e      	b.n	8005a48 <cppLoop+0x478>

	case 4:
		led.fullColor('M');
 80057ea:	214d      	movs	r1, #77	; 0x4d
 80057ec:	482b      	ldr	r0, [pc, #172]	; (800589c <cppLoop+0x2cc>)
 80057ee:	f7fc fb09 	bl	8001e04 <_ZN3LED9fullColorEc>

		lcd_clear();
 80057f2:	f7fb fc55 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80057f6:	2100      	movs	r1, #0
 80057f8:	2000      	movs	r0, #0
 80057fa:	f7fb fc61 	bl	80010c0 <lcd_locate>
		lcd_printf("Steering");
 80057fe:	4831      	ldr	r0, [pc, #196]	; (80058c4 <cppLoop+0x2f4>)
 8005800:	f7fb fc88 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005804:	2101      	movs	r1, #1
 8005806:	2000      	movs	r0, #0
 8005808:	f7fb fc5a 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 800580c:	4829      	ldr	r0, [pc, #164]	; (80058b4 <cppLoop+0x2e4>)
 800580e:	f7fb fc81 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8005812:	481e      	ldr	r0, [pc, #120]	; (800588c <cppLoop+0x2bc>)
 8005814:	f7fc fa92 	bl	8001d3c <_ZN8JoyStick8getValueEv>
 8005818:	4603      	mov	r3, r0
 800581a:	2b02      	cmp	r3, #2
 800581c:	bf0c      	ite	eq
 800581e:	2301      	moveq	r3, #1
 8005820:	2300      	movne	r3, #0
 8005822:	b2db      	uxtb	r3, r3
 8005824:	2b00      	cmp	r3, #0
 8005826:	f000 8111 	beq.w	8005a4c <cppLoop+0x47c>
			led.LR(-1, 1);
 800582a:	2201      	movs	r2, #1
 800582c:	f04f 31ff 	mov.w	r1, #4294967295
 8005830:	481a      	ldr	r0, [pc, #104]	; (800589c <cppLoop+0x2cc>)
 8005832:	f7fc fba3 	bl	8001f7c <_ZN3LED2LREaa>
			HAL_Delay(500);
 8005836:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800583a:	f000 fa21 	bl	8005c80 <HAL_Delay>

			line_trace.setTargetVelocity(0.1);
 800583e:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 80058b8 <cppLoop+0x2e8>
 8005842:	481e      	ldr	r0, [pc, #120]	; (80058bc <cppLoop+0x2ec>)
 8005844:	f7fd f81c 	bl	8002880 <_ZN9LineTrace17setTargetVelocityEf>
			velocity_ctrl.start();
 8005848:	4812      	ldr	r0, [pc, #72]	; (8005894 <cppLoop+0x2c4>)
 800584a:	f7fd ff39 	bl	80036c0 <_ZN12VelocityCtrl5startEv>
			line_trace.start();
 800584e:	481b      	ldr	r0, [pc, #108]	; (80058bc <cppLoop+0x2ec>)
 8005850:	f7fd f85e 	bl	8002910 <_ZN9LineTrace5startEv>

			HAL_Delay(10000);
 8005854:	f242 7010 	movw	r0, #10000	; 0x2710
 8005858:	f000 fa12 	bl	8005c80 <HAL_Delay>

			line_trace.stop();
 800585c:	4817      	ldr	r0, [pc, #92]	; (80058bc <cppLoop+0x2ec>)
 800585e:	f7fd f867 	bl	8002930 <_ZN9LineTrace4stopEv>
			velocity_ctrl.stop();
 8005862:	480c      	ldr	r0, [pc, #48]	; (8005894 <cppLoop+0x2c4>)
 8005864:	f7fd ff3c 	bl	80036e0 <_ZN12VelocityCtrl4stopEv>


			led.LR(-1, 0);
 8005868:	2200      	movs	r2, #0
 800586a:	f04f 31ff 	mov.w	r1, #4294967295
 800586e:	480b      	ldr	r0, [pc, #44]	; (800589c <cppLoop+0x2cc>)
 8005870:	f7fc fb84 	bl	8001f7c <_ZN3LED2LREaa>
		}
		break;
 8005874:	e0ea      	b.n	8005a4c <cppLoop+0x47c>
 8005876:	bf00      	nop
 8005878:	2000053c 	.word	0x2000053c
 800587c:	080171cc 	.word	0x080171cc
 8005880:	080171d0 	.word	0x080171d0
 8005884:	080171d8 	.word	0x080171d8
 8005888:	080171e4 	.word	0x080171e4
 800588c:	20000538 	.word	0x20000538
 8005890:	20000578 	.word	0x20000578
 8005894:	20013648 	.word	0x20013648
 8005898:	00000000 	.word	0x00000000
 800589c:	20000544 	.word	0x20000544
 80058a0:	080171ec 	.word	0x080171ec
 80058a4:	080171f0 	.word	0x080171f0
 80058a8:	080171f8 	.word	0x080171f8
 80058ac:	08017204 	.word	0x08017204
 80058b0:	08017214 	.word	0x08017214
 80058b4:	0801721c 	.word	0x0801721c
 80058b8:	3dcccccd 	.word	0x3dcccccd
 80058bc:	20013688 	.word	0x20013688
 80058c0:	08017224 	.word	0x08017224
 80058c4:	08017230 	.word	0x08017230

	case 5:
		led.fullColor('Y');
 80058c8:	2159      	movs	r1, #89	; 0x59
 80058ca:	4866      	ldr	r0, [pc, #408]	; (8005a64 <cppLoop+0x494>)
 80058cc:	f7fc fa9a 	bl	8001e04 <_ZN3LED9fullColorEc>

		lcd_clear();
 80058d0:	f7fb fbe6 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80058d4:	2100      	movs	r1, #0
 80058d6:	2000      	movs	r0, #0
 80058d8:	f7fb fbf2 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 80058dc:	4862      	ldr	r0, [pc, #392]	; (8005a68 <cppLoop+0x498>)
 80058de:	f7fb fc19 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80058e2:	2101      	movs	r1, #1
 80058e4:	2000      	movs	r0, #0
 80058e6:	f7fb fbeb 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 80058ea:	4860      	ldr	r0, [pc, #384]	; (8005a6c <cppLoop+0x49c>)
 80058ec:	f7fb fc12 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80058f0:	485f      	ldr	r0, [pc, #380]	; (8005a70 <cppLoop+0x4a0>)
 80058f2:	f7fc fa23 	bl	8001d3c <_ZN8JoyStick8getValueEv>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	bf0c      	ite	eq
 80058fc:	2301      	moveq	r3, #1
 80058fe:	2300      	movne	r3, #0
 8005900:	b2db      	uxtb	r3, r3
 8005902:	2b00      	cmp	r3, #0
 8005904:	f000 80a4 	beq.w	8005a50 <cppLoop+0x480>
			led.LR(-1, 1);
 8005908:	2201      	movs	r2, #1
 800590a:	f04f 31ff 	mov.w	r1, #4294967295
 800590e:	4855      	ldr	r0, [pc, #340]	; (8005a64 <cppLoop+0x494>)
 8005910:	f7fc fb34 	bl	8001f7c <_ZN3LED2LREaa>
			HAL_Delay(500);
 8005914:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005918:	f000 f9b2 	bl	8005c80 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 800591c:	ed9f 0a55 	vldr	s0, [pc, #340]	; 8005a74 <cppLoop+0x4a4>
 8005920:	4855      	ldr	r0, [pc, #340]	; (8005a78 <cppLoop+0x4a8>)
 8005922:	f7fc ff9e 	bl	8002862 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8005926:	4854      	ldr	r0, [pc, #336]	; (8005a78 <cppLoop+0x4a8>)
 8005928:	f7fc fff2 	bl	8002910 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 800592c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005930:	f000 f9a6 	bl	8005c80 <HAL_Delay>

			led.fullColor('R');
 8005934:	2152      	movs	r1, #82	; 0x52
 8005936:	484b      	ldr	r0, [pc, #300]	; (8005a64 <cppLoop+0x494>)
 8005938:	f7fc fa64 	bl	8001e04 <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 800593c:	484f      	ldr	r0, [pc, #316]	; (8005a7c <cppLoop+0x4ac>)
 800593e:	f7fb fd47 	bl	80013d0 <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 8005942:	484e      	ldr	r0, [pc, #312]	; (8005a7c <cppLoop+0x4ac>)
 8005944:	f7fb fd14 	bl	8001370 <_ZN7Encoder13clearDistanceEv>

			HAL_Delay(10000);
 8005948:	f242 7010 	movw	r0, #10000	; 0x2710
 800594c:	f000 f998 	bl	8005c80 <HAL_Delay>

			line_trace.stop();
 8005950:	4849      	ldr	r0, [pc, #292]	; (8005a78 <cppLoop+0x4a8>)
 8005952:	f7fc ffed 	bl	8002930 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 8005956:	494a      	ldr	r1, [pc, #296]	; (8005a80 <cppLoop+0x4b0>)
 8005958:	484a      	ldr	r0, [pc, #296]	; (8005a84 <cppLoop+0x4b4>)
 800595a:	f7fb fd4d 	bl	80013f8 <user_fopen>
			float d = encoder.getDistance();
 800595e:	4847      	ldr	r0, [pc, #284]	; (8005a7c <cppLoop+0x4ac>)
 8005960:	f7fb fce8 	bl	8001334 <_ZN7Encoder11getDistanceEv>
 8005964:	eef0 7a40 	vmov.f32	s15, s0
 8005968:	edc7 7a01 	vstr	s15, [r7, #4]
			sd_write(1, &d, ADD_WRITE);
 800596c:	1d3b      	adds	r3, r7, #4
 800596e:	2201      	movs	r2, #1
 8005970:	4619      	mov	r1, r3
 8005972:	2001      	movs	r0, #1
 8005974:	f7fb fd62 	bl	800143c <sd_write>
			user_fclose();
 8005978:	f7fb fd50 	bl	800141c <user_fclose>

			led.LR(-1, 0);
 800597c:	2200      	movs	r2, #0
 800597e:	f04f 31ff 	mov.w	r1, #4294967295
 8005982:	4838      	ldr	r0, [pc, #224]	; (8005a64 <cppLoop+0x494>)
 8005984:	f7fc fafa 	bl	8001f7c <_ZN3LED2LREaa>
		}

		break;
 8005988:	e062      	b.n	8005a50 <cppLoop+0x480>

	case 6:
		led.fullColor('C');
 800598a:	2143      	movs	r1, #67	; 0x43
 800598c:	4835      	ldr	r0, [pc, #212]	; (8005a64 <cppLoop+0x494>)
 800598e:	f7fc fa39 	bl	8001e04 <_ZN3LED9fullColorEc>

		lcd_clear();
 8005992:	f7fb fb85 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005996:	2100      	movs	r1, #0
 8005998:	2000      	movs	r0, #0
 800599a:	f7fb fb91 	bl	80010c0 <lcd_locate>
		lcd_printf("Position");
 800599e:	483a      	ldr	r0, [pc, #232]	; (8005a88 <cppLoop+0x4b8>)
 80059a0:	f7fb fbb8 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80059a4:	2101      	movs	r1, #1
 80059a6:	2000      	movs	r0, #0
 80059a8:	f7fb fb8a 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 80059ac:	4837      	ldr	r0, [pc, #220]	; (8005a8c <cppLoop+0x4bc>)
 80059ae:	f7fb fbb1 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80059b2:	482f      	ldr	r0, [pc, #188]	; (8005a70 <cppLoop+0x4a0>)
 80059b4:	f7fc f9c2 	bl	8001d3c <_ZN8JoyStick8getValueEv>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b02      	cmp	r3, #2
 80059bc:	bf0c      	ite	eq
 80059be:	2301      	moveq	r3, #1
 80059c0:	2300      	movne	r3, #0
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d045      	beq.n	8005a54 <cppLoop+0x484>
			HAL_Delay(500);
 80059c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80059cc:	f000 f958 	bl	8005c80 <HAL_Delay>
			led.LR(-1, 1);
 80059d0:	2201      	movs	r2, #1
 80059d2:	f04f 31ff 	mov.w	r1, #4294967295
 80059d6:	4823      	ldr	r0, [pc, #140]	; (8005a64 <cppLoop+0x494>)
 80059d8:	f7fc fad0 	bl	8001f7c <_ZN3LED2LREaa>
			logger.start();
 80059dc:	482c      	ldr	r0, [pc, #176]	; (8005a90 <cppLoop+0x4c0>)
 80059de:	f7fd f8de 	bl	8002b9e <_ZN6Logger5startEv>

			line_trace.setNormalRatio(0.1);
 80059e2:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8005a94 <cppLoop+0x4c4>
 80059e6:	4824      	ldr	r0, [pc, #144]	; (8005a78 <cppLoop+0x4a8>)
 80059e8:	f7fc ff3b 	bl	8002862 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 80059ec:	4822      	ldr	r0, [pc, #136]	; (8005a78 <cppLoop+0x4a8>)
 80059ee:	f7fc ff8f 	bl	8002910 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 80059f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80059f6:	f000 f943 	bl	8005c80 <HAL_Delay>

			led.fullColor('R');
 80059fa:	2152      	movs	r1, #82	; 0x52
 80059fc:	4819      	ldr	r0, [pc, #100]	; (8005a64 <cppLoop+0x494>)
 80059fe:	f7fc fa01 	bl	8001e04 <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 8005a02:	481e      	ldr	r0, [pc, #120]	; (8005a7c <cppLoop+0x4ac>)
 8005a04:	f7fb fce4 	bl	80013d0 <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 8005a08:	481c      	ldr	r0, [pc, #112]	; (8005a7c <cppLoop+0x4ac>)
 8005a0a:	f7fb fcb1 	bl	8001370 <_ZN7Encoder13clearDistanceEv>

			HAL_Delay(10000);
 8005a0e:	f242 7010 	movw	r0, #10000	; 0x2710
 8005a12:	f000 f935 	bl	8005c80 <HAL_Delay>

			line_trace.stop();
 8005a16:	4818      	ldr	r0, [pc, #96]	; (8005a78 <cppLoop+0x4a8>)
 8005a18:	f7fc ff8a 	bl	8002930 <_ZN9LineTrace4stopEv>
			logger.stop();
 8005a1c:	481c      	ldr	r0, [pc, #112]	; (8005a90 <cppLoop+0x4c0>)
 8005a1e:	f7fd f8ce 	bl	8002bbe <_ZN6Logger4stopEv>

			logger.saveDistanceAndTheta("Position", "delta_distance.txt", "delta_theta.txt");
 8005a22:	4b1d      	ldr	r3, [pc, #116]	; (8005a98 <cppLoop+0x4c8>)
 8005a24:	4a1d      	ldr	r2, [pc, #116]	; (8005a9c <cppLoop+0x4cc>)
 8005a26:	4918      	ldr	r1, [pc, #96]	; (8005a88 <cppLoop+0x4b8>)
 8005a28:	4819      	ldr	r0, [pc, #100]	; (8005a90 <cppLoop+0x4c0>)
 8005a2a:	f7fd f895 	bl	8002b58 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>

			led.LR(-1, 0);
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f04f 31ff 	mov.w	r1, #4294967295
 8005a34:	480b      	ldr	r0, [pc, #44]	; (8005a64 <cppLoop+0x494>)
 8005a36:	f7fc faa1 	bl	8001f7c <_ZN3LED2LREaa>
		}

		break;
 8005a3a:	e00b      	b.n	8005a54 <cppLoop+0x484>
	case 15:

		break;

	default:
		break;
 8005a3c:	bf00      	nop
 8005a3e:	e00a      	b.n	8005a56 <cppLoop+0x486>
		break;
 8005a40:	bf00      	nop
 8005a42:	e008      	b.n	8005a56 <cppLoop+0x486>
		break;
 8005a44:	bf00      	nop
 8005a46:	e006      	b.n	8005a56 <cppLoop+0x486>
		break;
 8005a48:	bf00      	nop
 8005a4a:	e004      	b.n	8005a56 <cppLoop+0x486>
		break;
 8005a4c:	bf00      	nop
 8005a4e:	e002      	b.n	8005a56 <cppLoop+0x486>
		break;
 8005a50:	bf00      	nop
 8005a52:	e000      	b.n	8005a56 <cppLoop+0x486>
		break;
 8005a54:	bf00      	nop

	}

	HAL_Delay(10);
 8005a56:	200a      	movs	r0, #10
 8005a58:	f000 f912 	bl	8005c80 <HAL_Delay>

}
 8005a5c:	bf00      	nop
 8005a5e:	3708      	adds	r7, #8
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	20000544 	.word	0x20000544
 8005a68:	0801723c 	.word	0x0801723c
 8005a6c:	08017244 	.word	0x08017244
 8005a70:	20000538 	.word	0x20000538
 8005a74:	00000000 	.word	0x00000000
 8005a78:	20013688 	.word	0x20013688
 8005a7c:	20013630 	.word	0x20013630
 8005a80:	08017250 	.word	0x08017250
 8005a84:	08017258 	.word	0x08017258
 8005a88:	08017264 	.word	0x08017264
 8005a8c:	08017270 	.word	0x08017270
 8005a90:	20000578 	.word	0x20000578
 8005a94:	3dcccccd 	.word	0x3dcccccd
 8005a98:	08017278 	.word	0x08017278
 8005a9c:	08017288 	.word	0x08017288

08005aa0 <_Z41__static_initialization_and_destruction_0ii>:
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d12b      	bne.n	8005b08 <_Z41__static_initialization_and_destruction_0ii+0x68>
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d126      	bne.n	8005b08 <_Z41__static_initialization_and_destruction_0ii+0x68>
LineSensor line_sensor;
 8005aba:	4815      	ldr	r0, [pc, #84]	; (8005b10 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8005abc:	f7fc fa96 	bl	8001fec <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8005ac0:	4814      	ldr	r0, [pc, #80]	; (8005b14 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8005ac2:	f7fd fb59 	bl	8003178 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 8005ac6:	4814      	ldr	r0, [pc, #80]	; (8005b18 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8005ac8:	f7fc f92c 	bl	8001d24 <_ZN8JoyStickC1Ev>
Motor motor;
 8005acc:	4813      	ldr	r0, [pc, #76]	; (8005b1c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8005ace:	f7fd f886 	bl	8002bde <_ZN5MotorC1Ev>
IMU imu;
 8005ad2:	4813      	ldr	r0, [pc, #76]	; (8005b20 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8005ad4:	f7fb ff6c 	bl	80019b0 <_ZN3IMUC1Ev>
Logger logger;
 8005ad8:	4812      	ldr	r0, [pc, #72]	; (8005b24 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8005ada:	f7fc ff41 	bl	8002960 <_ZN6LoggerC1Ev>
Encoder encoder;
 8005ade:	4812      	ldr	r0, [pc, #72]	; (8005b28 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8005ae0:	f7fb fb38 	bl	8001154 <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 8005ae4:	4b0e      	ldr	r3, [pc, #56]	; (8005b20 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8005ae6:	4a10      	ldr	r2, [pc, #64]	; (8005b28 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8005ae8:	490c      	ldr	r1, [pc, #48]	; (8005b1c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8005aea:	4810      	ldr	r0, [pc, #64]	; (8005b2c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8005aec:	f7fd fbae 	bl	800324c <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl);
 8005af0:	4b0e      	ldr	r3, [pc, #56]	; (8005b2c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8005af2:	4a07      	ldr	r2, [pc, #28]	; (8005b10 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8005af4:	4909      	ldr	r1, [pc, #36]	; (8005b1c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8005af6:	480e      	ldr	r0, [pc, #56]	; (8005b30 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8005af8:	f7fc fd72 	bl	80025e0 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrl>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 8005afc:	4b0b      	ldr	r3, [pc, #44]	; (8005b2c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8005afe:	4a08      	ldr	r2, [pc, #32]	; (8005b20 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8005b00:	4909      	ldr	r1, [pc, #36]	; (8005b28 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8005b02:	480c      	ldr	r0, [pc, #48]	; (8005b34 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8005b04:	f7fd f950 	bl	8002da8 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
}
 8005b08:	bf00      	nop
 8005b0a:	3708      	adds	r7, #8
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	2000023c 	.word	0x2000023c
 8005b14:	20000534 	.word	0x20000534
 8005b18:	20000538 	.word	0x20000538
 8005b1c:	20000540 	.word	0x20000540
 8005b20:	20000558 	.word	0x20000558
 8005b24:	20000578 	.word	0x20000578
 8005b28:	20013630 	.word	0x20013630
 8005b2c:	20013648 	.word	0x20013648
 8005b30:	20013688 	.word	0x20013688
 8005b34:	200136e8 	.word	0x200136e8

08005b38 <_GLOBAL__sub_I_line_sensor>:
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005b40:	2001      	movs	r0, #1
 8005b42:	f7ff ffad 	bl	8005aa0 <_Z41__static_initialization_and_destruction_0ii>
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005b48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005b80 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005b4c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005b4e:	e003      	b.n	8005b58 <LoopCopyDataInit>

08005b50 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005b50:	4b0c      	ldr	r3, [pc, #48]	; (8005b84 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005b52:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005b54:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005b56:	3104      	adds	r1, #4

08005b58 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005b58:	480b      	ldr	r0, [pc, #44]	; (8005b88 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005b5a:	4b0c      	ldr	r3, [pc, #48]	; (8005b8c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005b5c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005b5e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005b60:	d3f6      	bcc.n	8005b50 <CopyDataInit>
  ldr  r2, =_sbss
 8005b62:	4a0b      	ldr	r2, [pc, #44]	; (8005b90 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005b64:	e002      	b.n	8005b6c <LoopFillZerobss>

08005b66 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005b66:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005b68:	f842 3b04 	str.w	r3, [r2], #4

08005b6c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005b6c:	4b09      	ldr	r3, [pc, #36]	; (8005b94 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005b6e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005b70:	d3f9      	bcc.n	8005b66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005b72:	f7ff fbd3 	bl	800531c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005b76:	f00c fb7b 	bl	8012270 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005b7a:	f7fd fe9f 	bl	80038bc <main>
  bx  lr    
 8005b7e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005b80:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8005b84:	08017c90 	.word	0x08017c90
  ldr  r0, =_sdata
 8005b88:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005b8c:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8005b90:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8005b94:	20018264 	.word	0x20018264

08005b98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005b98:	e7fe      	b.n	8005b98 <ADC_IRQHandler>
	...

08005b9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005ba0:	4b0e      	ldr	r3, [pc, #56]	; (8005bdc <HAL_Init+0x40>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a0d      	ldr	r2, [pc, #52]	; (8005bdc <HAL_Init+0x40>)
 8005ba6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005baa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005bac:	4b0b      	ldr	r3, [pc, #44]	; (8005bdc <HAL_Init+0x40>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a0a      	ldr	r2, [pc, #40]	; (8005bdc <HAL_Init+0x40>)
 8005bb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005bb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005bb8:	4b08      	ldr	r3, [pc, #32]	; (8005bdc <HAL_Init+0x40>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a07      	ldr	r2, [pc, #28]	; (8005bdc <HAL_Init+0x40>)
 8005bbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005bc4:	2003      	movs	r0, #3
 8005bc6:	f000 fd51 	bl	800666c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005bca:	2000      	movs	r0, #0
 8005bcc:	f000 f808 	bl	8005be0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005bd0:	f7fe fd92 	bl	80046f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	40023c00 	.word	0x40023c00

08005be0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005be8:	4b12      	ldr	r3, [pc, #72]	; (8005c34 <HAL_InitTick+0x54>)
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	4b12      	ldr	r3, [pc, #72]	; (8005c38 <HAL_InitTick+0x58>)
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005bf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8005bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f000 fd69 	bl	80066d6 <HAL_SYSTICK_Config>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d001      	beq.n	8005c0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e00e      	b.n	8005c2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2b0f      	cmp	r3, #15
 8005c12:	d80a      	bhi.n	8005c2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005c14:	2200      	movs	r2, #0
 8005c16:	6879      	ldr	r1, [r7, #4]
 8005c18:	f04f 30ff 	mov.w	r0, #4294967295
 8005c1c:	f000 fd31 	bl	8006682 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005c20:	4a06      	ldr	r2, [pc, #24]	; (8005c3c <HAL_InitTick+0x5c>)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005c26:	2300      	movs	r3, #0
 8005c28:	e000      	b.n	8005c2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3708      	adds	r7, #8
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	20000000 	.word	0x20000000
 8005c38:	20000008 	.word	0x20000008
 8005c3c:	20000004 	.word	0x20000004

08005c40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005c40:	b480      	push	{r7}
 8005c42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005c44:	4b06      	ldr	r3, [pc, #24]	; (8005c60 <HAL_IncTick+0x20>)
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	461a      	mov	r2, r3
 8005c4a:	4b06      	ldr	r3, [pc, #24]	; (8005c64 <HAL_IncTick+0x24>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4413      	add	r3, r2
 8005c50:	4a04      	ldr	r2, [pc, #16]	; (8005c64 <HAL_IncTick+0x24>)
 8005c52:	6013      	str	r3, [r2, #0]
}
 8005c54:	bf00      	nop
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	20000008 	.word	0x20000008
 8005c64:	200161e8 	.word	0x200161e8

08005c68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	af00      	add	r7, sp, #0
  return uwTick;
 8005c6c:	4b03      	ldr	r3, [pc, #12]	; (8005c7c <HAL_GetTick+0x14>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	200161e8 	.word	0x200161e8

08005c80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005c88:	f7ff ffee 	bl	8005c68 <HAL_GetTick>
 8005c8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c98:	d005      	beq.n	8005ca6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005c9a:	4b09      	ldr	r3, [pc, #36]	; (8005cc0 <HAL_Delay+0x40>)
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005ca6:	bf00      	nop
 8005ca8:	f7ff ffde 	bl	8005c68 <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d8f7      	bhi.n	8005ca8 <HAL_Delay+0x28>
  {
  }
}
 8005cb8:	bf00      	nop
 8005cba:	3710      	adds	r7, #16
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}
 8005cc0:	20000008 	.word	0x20000008

08005cc4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d101      	bne.n	8005cda <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e033      	b.n	8005d42 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d109      	bne.n	8005cf6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f7fe fd30 	bl	8004748 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfa:	f003 0310 	and.w	r3, r3, #16
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d118      	bne.n	8005d34 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d06:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005d0a:	f023 0302 	bic.w	r3, r3, #2
 8005d0e:	f043 0202 	orr.w	r2, r3, #2
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 fa5a 	bl	80061d0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d26:	f023 0303 	bic.w	r3, r3, #3
 8005d2a:	f043 0201 	orr.w	r2, r3, #1
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	641a      	str	r2, [r3, #64]	; 0x40
 8005d32:	e001      	b.n	8005d38 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3710      	adds	r7, #16
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
	...

08005d4c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b086      	sub	sp, #24
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d101      	bne.n	8005d6a <HAL_ADC_Start_DMA+0x1e>
 8005d66:	2302      	movs	r3, #2
 8005d68:	e0cc      	b.n	8005f04 <HAL_ADC_Start_DMA+0x1b8>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	f003 0301 	and.w	r3, r3, #1
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d018      	beq.n	8005db2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	689a      	ldr	r2, [r3, #8]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f042 0201 	orr.w	r2, r2, #1
 8005d8e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005d90:	4b5e      	ldr	r3, [pc, #376]	; (8005f0c <HAL_ADC_Start_DMA+0x1c0>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a5e      	ldr	r2, [pc, #376]	; (8005f10 <HAL_ADC_Start_DMA+0x1c4>)
 8005d96:	fba2 2303 	umull	r2, r3, r2, r3
 8005d9a:	0c9a      	lsrs	r2, r3, #18
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	005b      	lsls	r3, r3, #1
 8005da0:	4413      	add	r3, r2
 8005da2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005da4:	e002      	b.n	8005dac <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	3b01      	subs	r3, #1
 8005daa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d1f9      	bne.n	8005da6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	f003 0301 	and.w	r3, r3, #1
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	f040 80a0 	bne.w	8005f02 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005dca:	f023 0301 	bic.w	r3, r3, #1
 8005dce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d007      	beq.n	8005df4 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005dec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005dfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e00:	d106      	bne.n	8005e10 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e06:	f023 0206 	bic.w	r2, r3, #6
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	645a      	str	r2, [r3, #68]	; 0x44
 8005e0e:	e002      	b.n	8005e16 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2200      	movs	r2, #0
 8005e14:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005e1e:	4b3d      	ldr	r3, [pc, #244]	; (8005f14 <HAL_ADC_Start_DMA+0x1c8>)
 8005e20:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e26:	4a3c      	ldr	r2, [pc, #240]	; (8005f18 <HAL_ADC_Start_DMA+0x1cc>)
 8005e28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2e:	4a3b      	ldr	r2, [pc, #236]	; (8005f1c <HAL_ADC_Start_DMA+0x1d0>)
 8005e30:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e36:	4a3a      	ldr	r2, [pc, #232]	; (8005f20 <HAL_ADC_Start_DMA+0x1d4>)
 8005e38:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005e42:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	685a      	ldr	r2, [r3, #4]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005e52:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	689a      	ldr	r2, [r3, #8]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e62:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	334c      	adds	r3, #76	; 0x4c
 8005e6e:	4619      	mov	r1, r3
 8005e70:	68ba      	ldr	r2, [r7, #8]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f000 fcea 	bl	800684c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	f003 031f 	and.w	r3, r3, #31
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d12a      	bne.n	8005eda <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a26      	ldr	r2, [pc, #152]	; (8005f24 <HAL_ADC_Start_DMA+0x1d8>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d015      	beq.n	8005eba <HAL_ADC_Start_DMA+0x16e>
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a25      	ldr	r2, [pc, #148]	; (8005f28 <HAL_ADC_Start_DMA+0x1dc>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d105      	bne.n	8005ea4 <HAL_ADC_Start_DMA+0x158>
 8005e98:	4b1e      	ldr	r3, [pc, #120]	; (8005f14 <HAL_ADC_Start_DMA+0x1c8>)
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	f003 031f 	and.w	r3, r3, #31
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00a      	beq.n	8005eba <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a20      	ldr	r2, [pc, #128]	; (8005f2c <HAL_ADC_Start_DMA+0x1e0>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d129      	bne.n	8005f02 <HAL_ADC_Start_DMA+0x1b6>
 8005eae:	4b19      	ldr	r3, [pc, #100]	; (8005f14 <HAL_ADC_Start_DMA+0x1c8>)
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	f003 031f 	and.w	r3, r3, #31
 8005eb6:	2b0f      	cmp	r3, #15
 8005eb8:	d823      	bhi.n	8005f02 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d11c      	bne.n	8005f02 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	689a      	ldr	r2, [r3, #8]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005ed6:	609a      	str	r2, [r3, #8]
 8005ed8:	e013      	b.n	8005f02 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a11      	ldr	r2, [pc, #68]	; (8005f24 <HAL_ADC_Start_DMA+0x1d8>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d10e      	bne.n	8005f02 <HAL_ADC_Start_DMA+0x1b6>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d107      	bne.n	8005f02 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	689a      	ldr	r2, [r3, #8]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005f00:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3718      	adds	r7, #24
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	20000000 	.word	0x20000000
 8005f10:	431bde83 	.word	0x431bde83
 8005f14:	40012300 	.word	0x40012300
 8005f18:	080063c9 	.word	0x080063c9
 8005f1c:	08006483 	.word	0x08006483
 8005f20:	0800649f 	.word	0x0800649f
 8005f24:	40012000 	.word	0x40012000
 8005f28:	40012100 	.word	0x40012100
 8005f2c:	40012200 	.word	0x40012200

08005f30 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8005f38:	bf00      	nop
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8005f4c:	bf00      	nop
 8005f4e:	370c      	adds	r7, #12
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005f60:	bf00      	nop
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005f76:	2300      	movs	r3, #0
 8005f78:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d101      	bne.n	8005f88 <HAL_ADC_ConfigChannel+0x1c>
 8005f84:	2302      	movs	r3, #2
 8005f86:	e113      	b.n	80061b0 <HAL_ADC_ConfigChannel+0x244>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2b09      	cmp	r3, #9
 8005f96:	d925      	bls.n	8005fe4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68d9      	ldr	r1, [r3, #12]
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	005b      	lsls	r3, r3, #1
 8005faa:	4413      	add	r3, r2
 8005fac:	3b1e      	subs	r3, #30
 8005fae:	2207      	movs	r2, #7
 8005fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb4:	43da      	mvns	r2, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	400a      	ands	r2, r1
 8005fbc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68d9      	ldr	r1, [r3, #12]
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	689a      	ldr	r2, [r3, #8]
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	4618      	mov	r0, r3
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	005b      	lsls	r3, r3, #1
 8005fd4:	4403      	add	r3, r0
 8005fd6:	3b1e      	subs	r3, #30
 8005fd8:	409a      	lsls	r2, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	430a      	orrs	r2, r1
 8005fe0:	60da      	str	r2, [r3, #12]
 8005fe2:	e022      	b.n	800602a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	6919      	ldr	r1, [r3, #16]
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	005b      	lsls	r3, r3, #1
 8005ff6:	4413      	add	r3, r2
 8005ff8:	2207      	movs	r2, #7
 8005ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8005ffe:	43da      	mvns	r2, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	400a      	ands	r2, r1
 8006006:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	6919      	ldr	r1, [r3, #16]
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	689a      	ldr	r2, [r3, #8]
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	b29b      	uxth	r3, r3
 8006018:	4618      	mov	r0, r3
 800601a:	4603      	mov	r3, r0
 800601c:	005b      	lsls	r3, r3, #1
 800601e:	4403      	add	r3, r0
 8006020:	409a      	lsls	r2, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	430a      	orrs	r2, r1
 8006028:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	2b06      	cmp	r3, #6
 8006030:	d824      	bhi.n	800607c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	4613      	mov	r3, r2
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	4413      	add	r3, r2
 8006042:	3b05      	subs	r3, #5
 8006044:	221f      	movs	r2, #31
 8006046:	fa02 f303 	lsl.w	r3, r2, r3
 800604a:	43da      	mvns	r2, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	400a      	ands	r2, r1
 8006052:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	b29b      	uxth	r3, r3
 8006060:	4618      	mov	r0, r3
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	685a      	ldr	r2, [r3, #4]
 8006066:	4613      	mov	r3, r2
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	4413      	add	r3, r2
 800606c:	3b05      	subs	r3, #5
 800606e:	fa00 f203 	lsl.w	r2, r0, r3
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	430a      	orrs	r2, r1
 8006078:	635a      	str	r2, [r3, #52]	; 0x34
 800607a:	e04c      	b.n	8006116 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	2b0c      	cmp	r3, #12
 8006082:	d824      	bhi.n	80060ce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	685a      	ldr	r2, [r3, #4]
 800608e:	4613      	mov	r3, r2
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	4413      	add	r3, r2
 8006094:	3b23      	subs	r3, #35	; 0x23
 8006096:	221f      	movs	r2, #31
 8006098:	fa02 f303 	lsl.w	r3, r2, r3
 800609c:	43da      	mvns	r2, r3
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	400a      	ands	r2, r1
 80060a4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	4618      	mov	r0, r3
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	685a      	ldr	r2, [r3, #4]
 80060b8:	4613      	mov	r3, r2
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	4413      	add	r3, r2
 80060be:	3b23      	subs	r3, #35	; 0x23
 80060c0:	fa00 f203 	lsl.w	r2, r0, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	430a      	orrs	r2, r1
 80060ca:	631a      	str	r2, [r3, #48]	; 0x30
 80060cc:	e023      	b.n	8006116 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	685a      	ldr	r2, [r3, #4]
 80060d8:	4613      	mov	r3, r2
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	4413      	add	r3, r2
 80060de:	3b41      	subs	r3, #65	; 0x41
 80060e0:	221f      	movs	r2, #31
 80060e2:	fa02 f303 	lsl.w	r3, r2, r3
 80060e6:	43da      	mvns	r2, r3
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	400a      	ands	r2, r1
 80060ee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	4618      	mov	r0, r3
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	685a      	ldr	r2, [r3, #4]
 8006102:	4613      	mov	r3, r2
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	4413      	add	r3, r2
 8006108:	3b41      	subs	r3, #65	; 0x41
 800610a:	fa00 f203 	lsl.w	r2, r0, r3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	430a      	orrs	r2, r1
 8006114:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006116:	4b29      	ldr	r3, [pc, #164]	; (80061bc <HAL_ADC_ConfigChannel+0x250>)
 8006118:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a28      	ldr	r2, [pc, #160]	; (80061c0 <HAL_ADC_ConfigChannel+0x254>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d10f      	bne.n	8006144 <HAL_ADC_ConfigChannel+0x1d8>
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2b12      	cmp	r3, #18
 800612a:	d10b      	bne.n	8006144 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a1d      	ldr	r2, [pc, #116]	; (80061c0 <HAL_ADC_ConfigChannel+0x254>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d12b      	bne.n	80061a6 <HAL_ADC_ConfigChannel+0x23a>
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a1c      	ldr	r2, [pc, #112]	; (80061c4 <HAL_ADC_ConfigChannel+0x258>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d003      	beq.n	8006160 <HAL_ADC_ConfigChannel+0x1f4>
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2b11      	cmp	r3, #17
 800615e:	d122      	bne.n	80061a6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a11      	ldr	r2, [pc, #68]	; (80061c4 <HAL_ADC_ConfigChannel+0x258>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d111      	bne.n	80061a6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006182:	4b11      	ldr	r3, [pc, #68]	; (80061c8 <HAL_ADC_ConfigChannel+0x25c>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a11      	ldr	r2, [pc, #68]	; (80061cc <HAL_ADC_ConfigChannel+0x260>)
 8006188:	fba2 2303 	umull	r2, r3, r2, r3
 800618c:	0c9a      	lsrs	r2, r3, #18
 800618e:	4613      	mov	r3, r2
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	4413      	add	r3, r2
 8006194:	005b      	lsls	r3, r3, #1
 8006196:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006198:	e002      	b.n	80061a0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	3b01      	subs	r3, #1
 800619e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1f9      	bne.n	800619a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3714      	adds	r7, #20
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr
 80061bc:	40012300 	.word	0x40012300
 80061c0:	40012000 	.word	0x40012000
 80061c4:	10000012 	.word	0x10000012
 80061c8:	20000000 	.word	0x20000000
 80061cc:	431bde83 	.word	0x431bde83

080061d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80061d8:	4b79      	ldr	r3, [pc, #484]	; (80063c0 <ADC_Init+0x1f0>)
 80061da:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	685a      	ldr	r2, [r3, #4]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	431a      	orrs	r2, r3
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	685a      	ldr	r2, [r3, #4]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006204:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	6859      	ldr	r1, [r3, #4]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	021a      	lsls	r2, r3, #8
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	430a      	orrs	r2, r1
 8006218:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	685a      	ldr	r2, [r3, #4]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006228:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	6859      	ldr	r1, [r3, #4]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	689a      	ldr	r2, [r3, #8]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	430a      	orrs	r2, r1
 800623a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	689a      	ldr	r2, [r3, #8]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800624a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	6899      	ldr	r1, [r3, #8]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	68da      	ldr	r2, [r3, #12]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	430a      	orrs	r2, r1
 800625c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006262:	4a58      	ldr	r2, [pc, #352]	; (80063c4 <ADC_Init+0x1f4>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d022      	beq.n	80062ae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	689a      	ldr	r2, [r3, #8]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006276:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	6899      	ldr	r1, [r3, #8]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	430a      	orrs	r2, r1
 8006288:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	689a      	ldr	r2, [r3, #8]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006298:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	6899      	ldr	r1, [r3, #8]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	430a      	orrs	r2, r1
 80062aa:	609a      	str	r2, [r3, #8]
 80062ac:	e00f      	b.n	80062ce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	689a      	ldr	r2, [r3, #8]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80062bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	689a      	ldr	r2, [r3, #8]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80062cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	689a      	ldr	r2, [r3, #8]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f022 0202 	bic.w	r2, r2, #2
 80062dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	6899      	ldr	r1, [r3, #8]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	7e1b      	ldrb	r3, [r3, #24]
 80062e8:	005a      	lsls	r2, r3, #1
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	430a      	orrs	r2, r1
 80062f0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d01b      	beq.n	8006334 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	685a      	ldr	r2, [r3, #4]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800630a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	685a      	ldr	r2, [r3, #4]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800631a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	6859      	ldr	r1, [r3, #4]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006326:	3b01      	subs	r3, #1
 8006328:	035a      	lsls	r2, r3, #13
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	430a      	orrs	r2, r1
 8006330:	605a      	str	r2, [r3, #4]
 8006332:	e007      	b.n	8006344 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	685a      	ldr	r2, [r3, #4]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006342:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006352:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	69db      	ldr	r3, [r3, #28]
 800635e:	3b01      	subs	r3, #1
 8006360:	051a      	lsls	r2, r3, #20
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	430a      	orrs	r2, r1
 8006368:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	689a      	ldr	r2, [r3, #8]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006378:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	6899      	ldr	r1, [r3, #8]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006386:	025a      	lsls	r2, r3, #9
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	430a      	orrs	r2, r1
 800638e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	689a      	ldr	r2, [r3, #8]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800639e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	6899      	ldr	r1, [r3, #8]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	695b      	ldr	r3, [r3, #20]
 80063aa:	029a      	lsls	r2, r3, #10
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	430a      	orrs	r2, r1
 80063b2:	609a      	str	r2, [r3, #8]
}
 80063b4:	bf00      	nop
 80063b6:	3714      	adds	r7, #20
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr
 80063c0:	40012300 	.word	0x40012300
 80063c4:	0f000001 	.word	0x0f000001

080063c8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063da:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d13c      	bne.n	800645c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d12b      	bne.n	8006454 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006400:	2b00      	cmp	r3, #0
 8006402:	d127      	bne.n	8006454 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800640a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800640e:	2b00      	cmp	r3, #0
 8006410:	d006      	beq.n	8006420 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800641c:	2b00      	cmp	r3, #0
 800641e:	d119      	bne.n	8006454 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	685a      	ldr	r2, [r3, #4]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f022 0220 	bic.w	r2, r2, #32
 800642e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006434:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006440:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d105      	bne.n	8006454 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644c:	f043 0201 	orr.w	r2, r3, #1
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006454:	68f8      	ldr	r0, [r7, #12]
 8006456:	f7ff fd6b 	bl	8005f30 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800645a:	e00e      	b.n	800647a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006460:	f003 0310 	and.w	r3, r3, #16
 8006464:	2b00      	cmp	r3, #0
 8006466:	d003      	beq.n	8006470 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006468:	68f8      	ldr	r0, [r7, #12]
 800646a:	f7ff fd75 	bl	8005f58 <HAL_ADC_ErrorCallback>
}
 800646e:	e004      	b.n	800647a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	4798      	blx	r3
}
 800647a:	bf00      	nop
 800647c:	3710      	adds	r7, #16
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}

08006482 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006482:	b580      	push	{r7, lr}
 8006484:	b084      	sub	sp, #16
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800648e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006490:	68f8      	ldr	r0, [r7, #12]
 8006492:	f7ff fd57 	bl	8005f44 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006496:	bf00      	nop
 8006498:	3710      	adds	r7, #16
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}

0800649e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800649e:	b580      	push	{r7, lr}
 80064a0:	b084      	sub	sp, #16
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064aa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2240      	movs	r2, #64	; 0x40
 80064b0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064b6:	f043 0204 	orr.w	r2, r3, #4
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80064be:	68f8      	ldr	r0, [r7, #12]
 80064c0:	f7ff fd4a 	bl	8005f58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80064c4:	bf00      	nop
 80064c6:	3710      	adds	r7, #16
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <__NVIC_SetPriorityGrouping>:
{
 80064cc:	b480      	push	{r7}
 80064ce:	b085      	sub	sp, #20
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f003 0307 	and.w	r3, r3, #7
 80064da:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80064dc:	4b0c      	ldr	r3, [pc, #48]	; (8006510 <__NVIC_SetPriorityGrouping+0x44>)
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80064e2:	68ba      	ldr	r2, [r7, #8]
 80064e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80064e8:	4013      	ands	r3, r2
 80064ea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80064f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80064f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80064fe:	4a04      	ldr	r2, [pc, #16]	; (8006510 <__NVIC_SetPriorityGrouping+0x44>)
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	60d3      	str	r3, [r2, #12]
}
 8006504:	bf00      	nop
 8006506:	3714      	adds	r7, #20
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr
 8006510:	e000ed00 	.word	0xe000ed00

08006514 <__NVIC_GetPriorityGrouping>:
{
 8006514:	b480      	push	{r7}
 8006516:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006518:	4b04      	ldr	r3, [pc, #16]	; (800652c <__NVIC_GetPriorityGrouping+0x18>)
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	0a1b      	lsrs	r3, r3, #8
 800651e:	f003 0307 	and.w	r3, r3, #7
}
 8006522:	4618      	mov	r0, r3
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr
 800652c:	e000ed00 	.word	0xe000ed00

08006530 <__NVIC_EnableIRQ>:
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	4603      	mov	r3, r0
 8006538:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800653a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800653e:	2b00      	cmp	r3, #0
 8006540:	db0b      	blt.n	800655a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006542:	79fb      	ldrb	r3, [r7, #7]
 8006544:	f003 021f 	and.w	r2, r3, #31
 8006548:	4907      	ldr	r1, [pc, #28]	; (8006568 <__NVIC_EnableIRQ+0x38>)
 800654a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800654e:	095b      	lsrs	r3, r3, #5
 8006550:	2001      	movs	r0, #1
 8006552:	fa00 f202 	lsl.w	r2, r0, r2
 8006556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800655a:	bf00      	nop
 800655c:	370c      	adds	r7, #12
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr
 8006566:	bf00      	nop
 8006568:	e000e100 	.word	0xe000e100

0800656c <__NVIC_SetPriority>:
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	4603      	mov	r3, r0
 8006574:	6039      	str	r1, [r7, #0]
 8006576:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800657c:	2b00      	cmp	r3, #0
 800657e:	db0a      	blt.n	8006596 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	b2da      	uxtb	r2, r3
 8006584:	490c      	ldr	r1, [pc, #48]	; (80065b8 <__NVIC_SetPriority+0x4c>)
 8006586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800658a:	0112      	lsls	r2, r2, #4
 800658c:	b2d2      	uxtb	r2, r2
 800658e:	440b      	add	r3, r1
 8006590:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006594:	e00a      	b.n	80065ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	b2da      	uxtb	r2, r3
 800659a:	4908      	ldr	r1, [pc, #32]	; (80065bc <__NVIC_SetPriority+0x50>)
 800659c:	79fb      	ldrb	r3, [r7, #7]
 800659e:	f003 030f 	and.w	r3, r3, #15
 80065a2:	3b04      	subs	r3, #4
 80065a4:	0112      	lsls	r2, r2, #4
 80065a6:	b2d2      	uxtb	r2, r2
 80065a8:	440b      	add	r3, r1
 80065aa:	761a      	strb	r2, [r3, #24]
}
 80065ac:	bf00      	nop
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr
 80065b8:	e000e100 	.word	0xe000e100
 80065bc:	e000ed00 	.word	0xe000ed00

080065c0 <NVIC_EncodePriority>:
{
 80065c0:	b480      	push	{r7}
 80065c2:	b089      	sub	sp, #36	; 0x24
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	60b9      	str	r1, [r7, #8]
 80065ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f003 0307 	and.w	r3, r3, #7
 80065d2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	f1c3 0307 	rsb	r3, r3, #7
 80065da:	2b04      	cmp	r3, #4
 80065dc:	bf28      	it	cs
 80065de:	2304      	movcs	r3, #4
 80065e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	3304      	adds	r3, #4
 80065e6:	2b06      	cmp	r3, #6
 80065e8:	d902      	bls.n	80065f0 <NVIC_EncodePriority+0x30>
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	3b03      	subs	r3, #3
 80065ee:	e000      	b.n	80065f2 <NVIC_EncodePriority+0x32>
 80065f0:	2300      	movs	r3, #0
 80065f2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065f4:	f04f 32ff 	mov.w	r2, #4294967295
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	fa02 f303 	lsl.w	r3, r2, r3
 80065fe:	43da      	mvns	r2, r3
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	401a      	ands	r2, r3
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006608:	f04f 31ff 	mov.w	r1, #4294967295
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	fa01 f303 	lsl.w	r3, r1, r3
 8006612:	43d9      	mvns	r1, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006618:	4313      	orrs	r3, r2
}
 800661a:	4618      	mov	r0, r3
 800661c:	3724      	adds	r7, #36	; 0x24
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
	...

08006628 <SysTick_Config>:
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b082      	sub	sp, #8
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	3b01      	subs	r3, #1
 8006634:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006638:	d301      	bcc.n	800663e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800663a:	2301      	movs	r3, #1
 800663c:	e00f      	b.n	800665e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800663e:	4a0a      	ldr	r2, [pc, #40]	; (8006668 <SysTick_Config+0x40>)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	3b01      	subs	r3, #1
 8006644:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006646:	210f      	movs	r1, #15
 8006648:	f04f 30ff 	mov.w	r0, #4294967295
 800664c:	f7ff ff8e 	bl	800656c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006650:	4b05      	ldr	r3, [pc, #20]	; (8006668 <SysTick_Config+0x40>)
 8006652:	2200      	movs	r2, #0
 8006654:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006656:	4b04      	ldr	r3, [pc, #16]	; (8006668 <SysTick_Config+0x40>)
 8006658:	2207      	movs	r2, #7
 800665a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	3708      	adds	r7, #8
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	e000e010 	.word	0xe000e010

0800666c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f7ff ff29 	bl	80064cc <__NVIC_SetPriorityGrouping>
}
 800667a:	bf00      	nop
 800667c:	3708      	adds	r7, #8
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}

08006682 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006682:	b580      	push	{r7, lr}
 8006684:	b086      	sub	sp, #24
 8006686:	af00      	add	r7, sp, #0
 8006688:	4603      	mov	r3, r0
 800668a:	60b9      	str	r1, [r7, #8]
 800668c:	607a      	str	r2, [r7, #4]
 800668e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006690:	2300      	movs	r3, #0
 8006692:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006694:	f7ff ff3e 	bl	8006514 <__NVIC_GetPriorityGrouping>
 8006698:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	68b9      	ldr	r1, [r7, #8]
 800669e:	6978      	ldr	r0, [r7, #20]
 80066a0:	f7ff ff8e 	bl	80065c0 <NVIC_EncodePriority>
 80066a4:	4602      	mov	r2, r0
 80066a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066aa:	4611      	mov	r1, r2
 80066ac:	4618      	mov	r0, r3
 80066ae:	f7ff ff5d 	bl	800656c <__NVIC_SetPriority>
}
 80066b2:	bf00      	nop
 80066b4:	3718      	adds	r7, #24
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}

080066ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80066ba:	b580      	push	{r7, lr}
 80066bc:	b082      	sub	sp, #8
 80066be:	af00      	add	r7, sp, #0
 80066c0:	4603      	mov	r3, r0
 80066c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80066c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066c8:	4618      	mov	r0, r3
 80066ca:	f7ff ff31 	bl	8006530 <__NVIC_EnableIRQ>
}
 80066ce:	bf00      	nop
 80066d0:	3708      	adds	r7, #8
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b082      	sub	sp, #8
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f7ff ffa2 	bl	8006628 <SysTick_Config>
 80066e4:	4603      	mov	r3, r0
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3708      	adds	r7, #8
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
	...

080066f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b086      	sub	sp, #24
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80066f8:	2300      	movs	r3, #0
 80066fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80066fc:	f7ff fab4 	bl	8005c68 <HAL_GetTick>
 8006700:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d101      	bne.n	800670c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	e099      	b.n	8006840 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2202      	movs	r2, #2
 8006718:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f022 0201 	bic.w	r2, r2, #1
 800672a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800672c:	e00f      	b.n	800674e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800672e:	f7ff fa9b 	bl	8005c68 <HAL_GetTick>
 8006732:	4602      	mov	r2, r0
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	1ad3      	subs	r3, r2, r3
 8006738:	2b05      	cmp	r3, #5
 800673a:	d908      	bls.n	800674e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2220      	movs	r2, #32
 8006740:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2203      	movs	r2, #3
 8006746:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800674a:	2303      	movs	r3, #3
 800674c:	e078      	b.n	8006840 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 0301 	and.w	r3, r3, #1
 8006758:	2b00      	cmp	r3, #0
 800675a:	d1e8      	bne.n	800672e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006764:	697a      	ldr	r2, [r7, #20]
 8006766:	4b38      	ldr	r3, [pc, #224]	; (8006848 <HAL_DMA_Init+0x158>)
 8006768:	4013      	ands	r3, r2
 800676a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	685a      	ldr	r2, [r3, #4]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800677a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006786:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	699b      	ldr	r3, [r3, #24]
 800678c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006792:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a1b      	ldr	r3, [r3, #32]
 8006798:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800679a:	697a      	ldr	r2, [r7, #20]
 800679c:	4313      	orrs	r3, r2
 800679e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a4:	2b04      	cmp	r3, #4
 80067a6:	d107      	bne.n	80067b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067b0:	4313      	orrs	r3, r2
 80067b2:	697a      	ldr	r2, [r7, #20]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	697a      	ldr	r2, [r7, #20]
 80067be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	695b      	ldr	r3, [r3, #20]
 80067c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	f023 0307 	bic.w	r3, r3, #7
 80067ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d4:	697a      	ldr	r2, [r7, #20]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067de:	2b04      	cmp	r3, #4
 80067e0:	d117      	bne.n	8006812 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067e6:	697a      	ldr	r2, [r7, #20]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d00e      	beq.n	8006812 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 fa9d 	bl	8006d34 <DMA_CheckFifoParam>
 80067fa:	4603      	mov	r3, r0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d008      	beq.n	8006812 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2240      	movs	r2, #64	; 0x40
 8006804:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2201      	movs	r2, #1
 800680a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800680e:	2301      	movs	r3, #1
 8006810:	e016      	b.n	8006840 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	697a      	ldr	r2, [r7, #20]
 8006818:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 fa54 	bl	8006cc8 <DMA_CalcBaseAndBitshift>
 8006820:	4603      	mov	r3, r0
 8006822:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006828:	223f      	movs	r2, #63	; 0x3f
 800682a:	409a      	lsls	r2, r3
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2201      	movs	r2, #1
 800683a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3718      	adds	r7, #24
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}
 8006848:	f010803f 	.word	0xf010803f

0800684c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b086      	sub	sp, #24
 8006850:	af00      	add	r7, sp, #0
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	60b9      	str	r1, [r7, #8]
 8006856:	607a      	str	r2, [r7, #4]
 8006858:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800685a:	2300      	movs	r3, #0
 800685c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006862:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800686a:	2b01      	cmp	r3, #1
 800686c:	d101      	bne.n	8006872 <HAL_DMA_Start_IT+0x26>
 800686e:	2302      	movs	r3, #2
 8006870:	e040      	b.n	80068f4 <HAL_DMA_Start_IT+0xa8>
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2201      	movs	r2, #1
 8006876:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006880:	b2db      	uxtb	r3, r3
 8006882:	2b01      	cmp	r3, #1
 8006884:	d12f      	bne.n	80068e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2202      	movs	r2, #2
 800688a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2200      	movs	r2, #0
 8006892:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	68b9      	ldr	r1, [r7, #8]
 800689a:	68f8      	ldr	r0, [r7, #12]
 800689c:	f000 f9e6 	bl	8006c6c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068a4:	223f      	movs	r2, #63	; 0x3f
 80068a6:	409a      	lsls	r2, r3
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f042 0216 	orr.w	r2, r2, #22
 80068ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d007      	beq.n	80068d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f042 0208 	orr.w	r2, r2, #8
 80068d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f042 0201 	orr.w	r2, r2, #1
 80068e2:	601a      	str	r2, [r3, #0]
 80068e4:	e005      	b.n	80068f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80068ee:	2302      	movs	r3, #2
 80068f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80068f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3718      	adds	r7, #24
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800690a:	b2db      	uxtb	r3, r3
 800690c:	2b02      	cmp	r3, #2
 800690e:	d004      	beq.n	800691a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2280      	movs	r2, #128	; 0x80
 8006914:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e00c      	b.n	8006934 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2205      	movs	r2, #5
 800691e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f022 0201 	bic.w	r2, r2, #1
 8006930:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006932:	2300      	movs	r3, #0
}
 8006934:	4618      	mov	r0, r3
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b086      	sub	sp, #24
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006948:	2300      	movs	r3, #0
 800694a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800694c:	4b92      	ldr	r3, [pc, #584]	; (8006b98 <HAL_DMA_IRQHandler+0x258>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a92      	ldr	r2, [pc, #584]	; (8006b9c <HAL_DMA_IRQHandler+0x25c>)
 8006952:	fba2 2303 	umull	r2, r3, r2, r3
 8006956:	0a9b      	lsrs	r3, r3, #10
 8006958:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800695e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800696a:	2208      	movs	r2, #8
 800696c:	409a      	lsls	r2, r3
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	4013      	ands	r3, r2
 8006972:	2b00      	cmp	r3, #0
 8006974:	d01a      	beq.n	80069ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 0304 	and.w	r3, r3, #4
 8006980:	2b00      	cmp	r3, #0
 8006982:	d013      	beq.n	80069ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f022 0204 	bic.w	r2, r2, #4
 8006992:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006998:	2208      	movs	r2, #8
 800699a:	409a      	lsls	r2, r3
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069a4:	f043 0201 	orr.w	r2, r3, #1
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069b0:	2201      	movs	r2, #1
 80069b2:	409a      	lsls	r2, r3
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	4013      	ands	r3, r2
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d012      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00b      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069ce:	2201      	movs	r2, #1
 80069d0:	409a      	lsls	r2, r3
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069da:	f043 0202 	orr.w	r2, r3, #2
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069e6:	2204      	movs	r2, #4
 80069e8:	409a      	lsls	r2, r3
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	4013      	ands	r3, r2
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d012      	beq.n	8006a18 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 0302 	and.w	r3, r3, #2
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d00b      	beq.n	8006a18 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a04:	2204      	movs	r2, #4
 8006a06:	409a      	lsls	r2, r3
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a10:	f043 0204 	orr.w	r2, r3, #4
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a1c:	2210      	movs	r2, #16
 8006a1e:	409a      	lsls	r2, r3
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	4013      	ands	r3, r2
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d043      	beq.n	8006ab0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 0308 	and.w	r3, r3, #8
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d03c      	beq.n	8006ab0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a3a:	2210      	movs	r2, #16
 8006a3c:	409a      	lsls	r2, r3
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d018      	beq.n	8006a82 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d108      	bne.n	8006a70 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d024      	beq.n	8006ab0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	4798      	blx	r3
 8006a6e:	e01f      	b.n	8006ab0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d01b      	beq.n	8006ab0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	4798      	blx	r3
 8006a80:	e016      	b.n	8006ab0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d107      	bne.n	8006aa0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f022 0208 	bic.w	r2, r2, #8
 8006a9e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d003      	beq.n	8006ab0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ab4:	2220      	movs	r2, #32
 8006ab6:	409a      	lsls	r2, r3
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	4013      	ands	r3, r2
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	f000 808e 	beq.w	8006bde <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 0310 	and.w	r3, r3, #16
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	f000 8086 	beq.w	8006bde <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ad6:	2220      	movs	r2, #32
 8006ad8:	409a      	lsls	r2, r3
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	2b05      	cmp	r3, #5
 8006ae8:	d136      	bne.n	8006b58 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f022 0216 	bic.w	r2, r2, #22
 8006af8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	695a      	ldr	r2, [r3, #20]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b08:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d103      	bne.n	8006b1a <HAL_DMA_IRQHandler+0x1da>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d007      	beq.n	8006b2a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f022 0208 	bic.w	r2, r2, #8
 8006b28:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b2e:	223f      	movs	r2, #63	; 0x3f
 8006b30:	409a      	lsls	r2, r3
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2201      	movs	r2, #1
 8006b42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d07d      	beq.n	8006c4a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	4798      	blx	r3
        }
        return;
 8006b56:	e078      	b.n	8006c4a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d01c      	beq.n	8006ba0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d108      	bne.n	8006b86 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d030      	beq.n	8006bde <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	4798      	blx	r3
 8006b84:	e02b      	b.n	8006bde <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d027      	beq.n	8006bde <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	4798      	blx	r3
 8006b96:	e022      	b.n	8006bde <HAL_DMA_IRQHandler+0x29e>
 8006b98:	20000000 	.word	0x20000000
 8006b9c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d10f      	bne.n	8006bce <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f022 0210 	bic.w	r2, r2, #16
 8006bbc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d003      	beq.n	8006bde <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d032      	beq.n	8006c4c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bea:	f003 0301 	and.w	r3, r3, #1
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d022      	beq.n	8006c38 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2205      	movs	r2, #5
 8006bf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f022 0201 	bic.w	r2, r2, #1
 8006c08:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	60bb      	str	r3, [r7, #8]
 8006c10:	697a      	ldr	r2, [r7, #20]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d307      	bcc.n	8006c26 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 0301 	and.w	r3, r3, #1
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d1f2      	bne.n	8006c0a <HAL_DMA_IRQHandler+0x2ca>
 8006c24:	e000      	b.n	8006c28 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006c26:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d005      	beq.n	8006c4c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	4798      	blx	r3
 8006c48:	e000      	b.n	8006c4c <HAL_DMA_IRQHandler+0x30c>
        return;
 8006c4a:	bf00      	nop
    }
  }
}
 8006c4c:	3718      	adds	r7, #24
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop

08006c54 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b085      	sub	sp, #20
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	607a      	str	r2, [r7, #4]
 8006c78:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006c88:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	683a      	ldr	r2, [r7, #0]
 8006c90:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	2b40      	cmp	r3, #64	; 0x40
 8006c98:	d108      	bne.n	8006cac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68ba      	ldr	r2, [r7, #8]
 8006ca8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006caa:	e007      	b.n	8006cbc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	68ba      	ldr	r2, [r7, #8]
 8006cb2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	60da      	str	r2, [r3, #12]
}
 8006cbc:	bf00      	nop
 8006cbe:	3714      	adds	r7, #20
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b085      	sub	sp, #20
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	3b10      	subs	r3, #16
 8006cd8:	4a14      	ldr	r2, [pc, #80]	; (8006d2c <DMA_CalcBaseAndBitshift+0x64>)
 8006cda:	fba2 2303 	umull	r2, r3, r2, r3
 8006cde:	091b      	lsrs	r3, r3, #4
 8006ce0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006ce2:	4a13      	ldr	r2, [pc, #76]	; (8006d30 <DMA_CalcBaseAndBitshift+0x68>)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	4413      	add	r3, r2
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	461a      	mov	r2, r3
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2b03      	cmp	r3, #3
 8006cf4:	d909      	bls.n	8006d0a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006cfe:	f023 0303 	bic.w	r3, r3, #3
 8006d02:	1d1a      	adds	r2, r3, #4
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	659a      	str	r2, [r3, #88]	; 0x58
 8006d08:	e007      	b.n	8006d1a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006d12:	f023 0303 	bic.w	r3, r3, #3
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3714      	adds	r7, #20
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop
 8006d2c:	aaaaaaab 	.word	0xaaaaaaab
 8006d30:	08017308 	.word	0x08017308

08006d34 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d44:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	699b      	ldr	r3, [r3, #24]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d11f      	bne.n	8006d8e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	2b03      	cmp	r3, #3
 8006d52:	d855      	bhi.n	8006e00 <DMA_CheckFifoParam+0xcc>
 8006d54:	a201      	add	r2, pc, #4	; (adr r2, 8006d5c <DMA_CheckFifoParam+0x28>)
 8006d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d5a:	bf00      	nop
 8006d5c:	08006d6d 	.word	0x08006d6d
 8006d60:	08006d7f 	.word	0x08006d7f
 8006d64:	08006d6d 	.word	0x08006d6d
 8006d68:	08006e01 	.word	0x08006e01
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d045      	beq.n	8006e04 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d7c:	e042      	b.n	8006e04 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d82:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006d86:	d13f      	bne.n	8006e08 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d8c:	e03c      	b.n	8006e08 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	699b      	ldr	r3, [r3, #24]
 8006d92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d96:	d121      	bne.n	8006ddc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	2b03      	cmp	r3, #3
 8006d9c:	d836      	bhi.n	8006e0c <DMA_CheckFifoParam+0xd8>
 8006d9e:	a201      	add	r2, pc, #4	; (adr r2, 8006da4 <DMA_CheckFifoParam+0x70>)
 8006da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da4:	08006db5 	.word	0x08006db5
 8006da8:	08006dbb 	.word	0x08006dbb
 8006dac:	08006db5 	.word	0x08006db5
 8006db0:	08006dcd 	.word	0x08006dcd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	73fb      	strb	r3, [r7, #15]
      break;
 8006db8:	e02f      	b.n	8006e1a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d024      	beq.n	8006e10 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006dca:	e021      	b.n	8006e10 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006dd4:	d11e      	bne.n	8006e14 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006dda:	e01b      	b.n	8006e14 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	2b02      	cmp	r3, #2
 8006de0:	d902      	bls.n	8006de8 <DMA_CheckFifoParam+0xb4>
 8006de2:	2b03      	cmp	r3, #3
 8006de4:	d003      	beq.n	8006dee <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006de6:	e018      	b.n	8006e1a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	73fb      	strb	r3, [r7, #15]
      break;
 8006dec:	e015      	b.n	8006e1a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00e      	beq.n	8006e18 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	73fb      	strb	r3, [r7, #15]
      break;
 8006dfe:	e00b      	b.n	8006e18 <DMA_CheckFifoParam+0xe4>
      break;
 8006e00:	bf00      	nop
 8006e02:	e00a      	b.n	8006e1a <DMA_CheckFifoParam+0xe6>
      break;
 8006e04:	bf00      	nop
 8006e06:	e008      	b.n	8006e1a <DMA_CheckFifoParam+0xe6>
      break;
 8006e08:	bf00      	nop
 8006e0a:	e006      	b.n	8006e1a <DMA_CheckFifoParam+0xe6>
      break;
 8006e0c:	bf00      	nop
 8006e0e:	e004      	b.n	8006e1a <DMA_CheckFifoParam+0xe6>
      break;
 8006e10:	bf00      	nop
 8006e12:	e002      	b.n	8006e1a <DMA_CheckFifoParam+0xe6>
      break;   
 8006e14:	bf00      	nop
 8006e16:	e000      	b.n	8006e1a <DMA_CheckFifoParam+0xe6>
      break;
 8006e18:	bf00      	nop
    }
  } 
  
  return status; 
 8006e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3714      	adds	r7, #20
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b089      	sub	sp, #36	; 0x24
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006e32:	2300      	movs	r3, #0
 8006e34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006e36:	2300      	movs	r3, #0
 8006e38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006e3e:	2300      	movs	r3, #0
 8006e40:	61fb      	str	r3, [r7, #28]
 8006e42:	e177      	b.n	8007134 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006e44:	2201      	movs	r2, #1
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	fa02 f303 	lsl.w	r3, r2, r3
 8006e4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	697a      	ldr	r2, [r7, #20]
 8006e54:	4013      	ands	r3, r2
 8006e56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006e58:	693a      	ldr	r2, [r7, #16]
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	f040 8166 	bne.w	800712e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d00b      	beq.n	8006e82 <HAL_GPIO_Init+0x5a>
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	d007      	beq.n	8006e82 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006e76:	2b11      	cmp	r3, #17
 8006e78:	d003      	beq.n	8006e82 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	2b12      	cmp	r3, #18
 8006e80:	d130      	bne.n	8006ee4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006e88:	69fb      	ldr	r3, [r7, #28]
 8006e8a:	005b      	lsls	r3, r3, #1
 8006e8c:	2203      	movs	r2, #3
 8006e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e92:	43db      	mvns	r3, r3
 8006e94:	69ba      	ldr	r2, [r7, #24]
 8006e96:	4013      	ands	r3, r2
 8006e98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	68da      	ldr	r2, [r3, #12]
 8006e9e:	69fb      	ldr	r3, [r7, #28]
 8006ea0:	005b      	lsls	r3, r3, #1
 8006ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ea6:	69ba      	ldr	r2, [r7, #24]
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	69ba      	ldr	r2, [r7, #24]
 8006eb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006eb8:	2201      	movs	r2, #1
 8006eba:	69fb      	ldr	r3, [r7, #28]
 8006ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ec0:	43db      	mvns	r3, r3
 8006ec2:	69ba      	ldr	r2, [r7, #24]
 8006ec4:	4013      	ands	r3, r2
 8006ec6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	091b      	lsrs	r3, r3, #4
 8006ece:	f003 0201 	and.w	r2, r3, #1
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed8:	69ba      	ldr	r2, [r7, #24]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	69ba      	ldr	r2, [r7, #24]
 8006ee2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	005b      	lsls	r3, r3, #1
 8006eee:	2203      	movs	r2, #3
 8006ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef4:	43db      	mvns	r3, r3
 8006ef6:	69ba      	ldr	r2, [r7, #24]
 8006ef8:	4013      	ands	r3, r2
 8006efa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	689a      	ldr	r2, [r3, #8]
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	005b      	lsls	r3, r3, #1
 8006f04:	fa02 f303 	lsl.w	r3, r2, r3
 8006f08:	69ba      	ldr	r2, [r7, #24]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	69ba      	ldr	r2, [r7, #24]
 8006f12:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	2b02      	cmp	r3, #2
 8006f1a:	d003      	beq.n	8006f24 <HAL_GPIO_Init+0xfc>
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	2b12      	cmp	r3, #18
 8006f22:	d123      	bne.n	8006f6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006f24:	69fb      	ldr	r3, [r7, #28]
 8006f26:	08da      	lsrs	r2, r3, #3
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	3208      	adds	r2, #8
 8006f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006f32:	69fb      	ldr	r3, [r7, #28]
 8006f34:	f003 0307 	and.w	r3, r3, #7
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	220f      	movs	r2, #15
 8006f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f40:	43db      	mvns	r3, r3
 8006f42:	69ba      	ldr	r2, [r7, #24]
 8006f44:	4013      	ands	r3, r2
 8006f46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	691a      	ldr	r2, [r3, #16]
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	f003 0307 	and.w	r3, r3, #7
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	fa02 f303 	lsl.w	r3, r2, r3
 8006f58:	69ba      	ldr	r2, [r7, #24]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	08da      	lsrs	r2, r3, #3
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	3208      	adds	r2, #8
 8006f66:	69b9      	ldr	r1, [r7, #24]
 8006f68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006f72:	69fb      	ldr	r3, [r7, #28]
 8006f74:	005b      	lsls	r3, r3, #1
 8006f76:	2203      	movs	r2, #3
 8006f78:	fa02 f303 	lsl.w	r3, r2, r3
 8006f7c:	43db      	mvns	r3, r3
 8006f7e:	69ba      	ldr	r2, [r7, #24]
 8006f80:	4013      	ands	r3, r2
 8006f82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	f003 0203 	and.w	r2, r3, #3
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	005b      	lsls	r3, r3, #1
 8006f90:	fa02 f303 	lsl.w	r3, r2, r3
 8006f94:	69ba      	ldr	r2, [r7, #24]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	69ba      	ldr	r2, [r7, #24]
 8006f9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	f000 80c0 	beq.w	800712e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006fae:	2300      	movs	r3, #0
 8006fb0:	60fb      	str	r3, [r7, #12]
 8006fb2:	4b65      	ldr	r3, [pc, #404]	; (8007148 <HAL_GPIO_Init+0x320>)
 8006fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fb6:	4a64      	ldr	r2, [pc, #400]	; (8007148 <HAL_GPIO_Init+0x320>)
 8006fb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006fbc:	6453      	str	r3, [r2, #68]	; 0x44
 8006fbe:	4b62      	ldr	r3, [pc, #392]	; (8007148 <HAL_GPIO_Init+0x320>)
 8006fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fc6:	60fb      	str	r3, [r7, #12]
 8006fc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006fca:	4a60      	ldr	r2, [pc, #384]	; (800714c <HAL_GPIO_Init+0x324>)
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	089b      	lsrs	r3, r3, #2
 8006fd0:	3302      	adds	r3, #2
 8006fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006fd8:	69fb      	ldr	r3, [r7, #28]
 8006fda:	f003 0303 	and.w	r3, r3, #3
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	220f      	movs	r2, #15
 8006fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8006fe6:	43db      	mvns	r3, r3
 8006fe8:	69ba      	ldr	r2, [r7, #24]
 8006fea:	4013      	ands	r3, r2
 8006fec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	4a57      	ldr	r2, [pc, #348]	; (8007150 <HAL_GPIO_Init+0x328>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d037      	beq.n	8007066 <HAL_GPIO_Init+0x23e>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4a56      	ldr	r2, [pc, #344]	; (8007154 <HAL_GPIO_Init+0x32c>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d031      	beq.n	8007062 <HAL_GPIO_Init+0x23a>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	4a55      	ldr	r2, [pc, #340]	; (8007158 <HAL_GPIO_Init+0x330>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d02b      	beq.n	800705e <HAL_GPIO_Init+0x236>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	4a54      	ldr	r2, [pc, #336]	; (800715c <HAL_GPIO_Init+0x334>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d025      	beq.n	800705a <HAL_GPIO_Init+0x232>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	4a53      	ldr	r2, [pc, #332]	; (8007160 <HAL_GPIO_Init+0x338>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d01f      	beq.n	8007056 <HAL_GPIO_Init+0x22e>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	4a52      	ldr	r2, [pc, #328]	; (8007164 <HAL_GPIO_Init+0x33c>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d019      	beq.n	8007052 <HAL_GPIO_Init+0x22a>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4a51      	ldr	r2, [pc, #324]	; (8007168 <HAL_GPIO_Init+0x340>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d013      	beq.n	800704e <HAL_GPIO_Init+0x226>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	4a50      	ldr	r2, [pc, #320]	; (800716c <HAL_GPIO_Init+0x344>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d00d      	beq.n	800704a <HAL_GPIO_Init+0x222>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	4a4f      	ldr	r2, [pc, #316]	; (8007170 <HAL_GPIO_Init+0x348>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d007      	beq.n	8007046 <HAL_GPIO_Init+0x21e>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4a4e      	ldr	r2, [pc, #312]	; (8007174 <HAL_GPIO_Init+0x34c>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d101      	bne.n	8007042 <HAL_GPIO_Init+0x21a>
 800703e:	2309      	movs	r3, #9
 8007040:	e012      	b.n	8007068 <HAL_GPIO_Init+0x240>
 8007042:	230a      	movs	r3, #10
 8007044:	e010      	b.n	8007068 <HAL_GPIO_Init+0x240>
 8007046:	2308      	movs	r3, #8
 8007048:	e00e      	b.n	8007068 <HAL_GPIO_Init+0x240>
 800704a:	2307      	movs	r3, #7
 800704c:	e00c      	b.n	8007068 <HAL_GPIO_Init+0x240>
 800704e:	2306      	movs	r3, #6
 8007050:	e00a      	b.n	8007068 <HAL_GPIO_Init+0x240>
 8007052:	2305      	movs	r3, #5
 8007054:	e008      	b.n	8007068 <HAL_GPIO_Init+0x240>
 8007056:	2304      	movs	r3, #4
 8007058:	e006      	b.n	8007068 <HAL_GPIO_Init+0x240>
 800705a:	2303      	movs	r3, #3
 800705c:	e004      	b.n	8007068 <HAL_GPIO_Init+0x240>
 800705e:	2302      	movs	r3, #2
 8007060:	e002      	b.n	8007068 <HAL_GPIO_Init+0x240>
 8007062:	2301      	movs	r3, #1
 8007064:	e000      	b.n	8007068 <HAL_GPIO_Init+0x240>
 8007066:	2300      	movs	r3, #0
 8007068:	69fa      	ldr	r2, [r7, #28]
 800706a:	f002 0203 	and.w	r2, r2, #3
 800706e:	0092      	lsls	r2, r2, #2
 8007070:	4093      	lsls	r3, r2
 8007072:	69ba      	ldr	r2, [r7, #24]
 8007074:	4313      	orrs	r3, r2
 8007076:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007078:	4934      	ldr	r1, [pc, #208]	; (800714c <HAL_GPIO_Init+0x324>)
 800707a:	69fb      	ldr	r3, [r7, #28]
 800707c:	089b      	lsrs	r3, r3, #2
 800707e:	3302      	adds	r3, #2
 8007080:	69ba      	ldr	r2, [r7, #24]
 8007082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007086:	4b3c      	ldr	r3, [pc, #240]	; (8007178 <HAL_GPIO_Init+0x350>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	43db      	mvns	r3, r3
 8007090:	69ba      	ldr	r2, [r7, #24]
 8007092:	4013      	ands	r3, r2
 8007094:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d003      	beq.n	80070aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80070a2:	69ba      	ldr	r2, [r7, #24]
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80070aa:	4a33      	ldr	r2, [pc, #204]	; (8007178 <HAL_GPIO_Init+0x350>)
 80070ac:	69bb      	ldr	r3, [r7, #24]
 80070ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80070b0:	4b31      	ldr	r3, [pc, #196]	; (8007178 <HAL_GPIO_Init+0x350>)
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	43db      	mvns	r3, r3
 80070ba:	69ba      	ldr	r2, [r7, #24]
 80070bc:	4013      	ands	r3, r2
 80070be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d003      	beq.n	80070d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80070cc:	69ba      	ldr	r2, [r7, #24]
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	4313      	orrs	r3, r2
 80070d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80070d4:	4a28      	ldr	r2, [pc, #160]	; (8007178 <HAL_GPIO_Init+0x350>)
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80070da:	4b27      	ldr	r3, [pc, #156]	; (8007178 <HAL_GPIO_Init+0x350>)
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	43db      	mvns	r3, r3
 80070e4:	69ba      	ldr	r2, [r7, #24]
 80070e6:	4013      	ands	r3, r2
 80070e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d003      	beq.n	80070fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80070f6:	69ba      	ldr	r2, [r7, #24]
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80070fe:	4a1e      	ldr	r2, [pc, #120]	; (8007178 <HAL_GPIO_Init+0x350>)
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007104:	4b1c      	ldr	r3, [pc, #112]	; (8007178 <HAL_GPIO_Init+0x350>)
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	43db      	mvns	r3, r3
 800710e:	69ba      	ldr	r2, [r7, #24]
 8007110:	4013      	ands	r3, r2
 8007112:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800711c:	2b00      	cmp	r3, #0
 800711e:	d003      	beq.n	8007128 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007120:	69ba      	ldr	r2, [r7, #24]
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	4313      	orrs	r3, r2
 8007126:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007128:	4a13      	ldr	r2, [pc, #76]	; (8007178 <HAL_GPIO_Init+0x350>)
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800712e:	69fb      	ldr	r3, [r7, #28]
 8007130:	3301      	adds	r3, #1
 8007132:	61fb      	str	r3, [r7, #28]
 8007134:	69fb      	ldr	r3, [r7, #28]
 8007136:	2b0f      	cmp	r3, #15
 8007138:	f67f ae84 	bls.w	8006e44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800713c:	bf00      	nop
 800713e:	3724      	adds	r7, #36	; 0x24
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr
 8007148:	40023800 	.word	0x40023800
 800714c:	40013800 	.word	0x40013800
 8007150:	40020000 	.word	0x40020000
 8007154:	40020400 	.word	0x40020400
 8007158:	40020800 	.word	0x40020800
 800715c:	40020c00 	.word	0x40020c00
 8007160:	40021000 	.word	0x40021000
 8007164:	40021400 	.word	0x40021400
 8007168:	40021800 	.word	0x40021800
 800716c:	40021c00 	.word	0x40021c00
 8007170:	40022000 	.word	0x40022000
 8007174:	40022400 	.word	0x40022400
 8007178:	40013c00 	.word	0x40013c00

0800717c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800717c:	b480      	push	{r7}
 800717e:	b085      	sub	sp, #20
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	460b      	mov	r3, r1
 8007186:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	691a      	ldr	r2, [r3, #16]
 800718c:	887b      	ldrh	r3, [r7, #2]
 800718e:	4013      	ands	r3, r2
 8007190:	2b00      	cmp	r3, #0
 8007192:	d002      	beq.n	800719a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007194:	2301      	movs	r3, #1
 8007196:	73fb      	strb	r3, [r7, #15]
 8007198:	e001      	b.n	800719e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800719a:	2300      	movs	r3, #0
 800719c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800719e:	7bfb      	ldrb	r3, [r7, #15]
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3714      	adds	r7, #20
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	460b      	mov	r3, r1
 80071b6:	807b      	strh	r3, [r7, #2]
 80071b8:	4613      	mov	r3, r2
 80071ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80071bc:	787b      	ldrb	r3, [r7, #1]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d003      	beq.n	80071ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80071c2:	887a      	ldrh	r2, [r7, #2]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80071c8:	e003      	b.n	80071d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80071ca:	887b      	ldrh	r3, [r7, #2]
 80071cc:	041a      	lsls	r2, r3, #16
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	619a      	str	r2, [r3, #24]
}
 80071d2:	bf00      	nop
 80071d4:	370c      	adds	r7, #12
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr
	...

080071e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	4603      	mov	r3, r0
 80071e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80071ea:	4b08      	ldr	r3, [pc, #32]	; (800720c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80071ec:	695a      	ldr	r2, [r3, #20]
 80071ee:	88fb      	ldrh	r3, [r7, #6]
 80071f0:	4013      	ands	r3, r2
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d006      	beq.n	8007204 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80071f6:	4a05      	ldr	r2, [pc, #20]	; (800720c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80071f8:	88fb      	ldrh	r3, [r7, #6]
 80071fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80071fc:	88fb      	ldrh	r3, [r7, #6]
 80071fe:	4618      	mov	r0, r3
 8007200:	f7fc fade 	bl	80037c0 <HAL_GPIO_EXTI_Callback>
  }
}
 8007204:	bf00      	nop
 8007206:	3708      	adds	r7, #8
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}
 800720c:	40013c00 	.word	0x40013c00

08007210 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b084      	sub	sp, #16
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d101      	bne.n	8007222 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	e11f      	b.n	8007462 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007228:	b2db      	uxtb	r3, r3
 800722a:	2b00      	cmp	r3, #0
 800722c:	d106      	bne.n	800723c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f7fd fb38 	bl	80048ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2224      	movs	r2, #36	; 0x24
 8007240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f022 0201 	bic.w	r2, r2, #1
 8007252:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007262:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007272:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007274:	f001 f96e 	bl	8008554 <HAL_RCC_GetPCLK1Freq>
 8007278:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	4a7b      	ldr	r2, [pc, #492]	; (800746c <HAL_I2C_Init+0x25c>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d807      	bhi.n	8007294 <HAL_I2C_Init+0x84>
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	4a7a      	ldr	r2, [pc, #488]	; (8007470 <HAL_I2C_Init+0x260>)
 8007288:	4293      	cmp	r3, r2
 800728a:	bf94      	ite	ls
 800728c:	2301      	movls	r3, #1
 800728e:	2300      	movhi	r3, #0
 8007290:	b2db      	uxtb	r3, r3
 8007292:	e006      	b.n	80072a2 <HAL_I2C_Init+0x92>
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	4a77      	ldr	r2, [pc, #476]	; (8007474 <HAL_I2C_Init+0x264>)
 8007298:	4293      	cmp	r3, r2
 800729a:	bf94      	ite	ls
 800729c:	2301      	movls	r3, #1
 800729e:	2300      	movhi	r3, #0
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d001      	beq.n	80072aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	e0db      	b.n	8007462 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	4a72      	ldr	r2, [pc, #456]	; (8007478 <HAL_I2C_Init+0x268>)
 80072ae:	fba2 2303 	umull	r2, r3, r2, r3
 80072b2:	0c9b      	lsrs	r3, r3, #18
 80072b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	68ba      	ldr	r2, [r7, #8]
 80072c6:	430a      	orrs	r2, r1
 80072c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	6a1b      	ldr	r3, [r3, #32]
 80072d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	4a64      	ldr	r2, [pc, #400]	; (800746c <HAL_I2C_Init+0x25c>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d802      	bhi.n	80072e4 <HAL_I2C_Init+0xd4>
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	3301      	adds	r3, #1
 80072e2:	e009      	b.n	80072f8 <HAL_I2C_Init+0xe8>
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80072ea:	fb02 f303 	mul.w	r3, r2, r3
 80072ee:	4a63      	ldr	r2, [pc, #396]	; (800747c <HAL_I2C_Init+0x26c>)
 80072f0:	fba2 2303 	umull	r2, r3, r2, r3
 80072f4:	099b      	lsrs	r3, r3, #6
 80072f6:	3301      	adds	r3, #1
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	6812      	ldr	r2, [r2, #0]
 80072fc:	430b      	orrs	r3, r1
 80072fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	69db      	ldr	r3, [r3, #28]
 8007306:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800730a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	4956      	ldr	r1, [pc, #344]	; (800746c <HAL_I2C_Init+0x25c>)
 8007314:	428b      	cmp	r3, r1
 8007316:	d80d      	bhi.n	8007334 <HAL_I2C_Init+0x124>
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	1e59      	subs	r1, r3, #1
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	005b      	lsls	r3, r3, #1
 8007322:	fbb1 f3f3 	udiv	r3, r1, r3
 8007326:	3301      	adds	r3, #1
 8007328:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800732c:	2b04      	cmp	r3, #4
 800732e:	bf38      	it	cc
 8007330:	2304      	movcc	r3, #4
 8007332:	e04f      	b.n	80073d4 <HAL_I2C_Init+0x1c4>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d111      	bne.n	8007360 <HAL_I2C_Init+0x150>
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	1e58      	subs	r0, r3, #1
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6859      	ldr	r1, [r3, #4]
 8007344:	460b      	mov	r3, r1
 8007346:	005b      	lsls	r3, r3, #1
 8007348:	440b      	add	r3, r1
 800734a:	fbb0 f3f3 	udiv	r3, r0, r3
 800734e:	3301      	adds	r3, #1
 8007350:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007354:	2b00      	cmp	r3, #0
 8007356:	bf0c      	ite	eq
 8007358:	2301      	moveq	r3, #1
 800735a:	2300      	movne	r3, #0
 800735c:	b2db      	uxtb	r3, r3
 800735e:	e012      	b.n	8007386 <HAL_I2C_Init+0x176>
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	1e58      	subs	r0, r3, #1
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6859      	ldr	r1, [r3, #4]
 8007368:	460b      	mov	r3, r1
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	440b      	add	r3, r1
 800736e:	0099      	lsls	r1, r3, #2
 8007370:	440b      	add	r3, r1
 8007372:	fbb0 f3f3 	udiv	r3, r0, r3
 8007376:	3301      	adds	r3, #1
 8007378:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800737c:	2b00      	cmp	r3, #0
 800737e:	bf0c      	ite	eq
 8007380:	2301      	moveq	r3, #1
 8007382:	2300      	movne	r3, #0
 8007384:	b2db      	uxtb	r3, r3
 8007386:	2b00      	cmp	r3, #0
 8007388:	d001      	beq.n	800738e <HAL_I2C_Init+0x17e>
 800738a:	2301      	movs	r3, #1
 800738c:	e022      	b.n	80073d4 <HAL_I2C_Init+0x1c4>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d10e      	bne.n	80073b4 <HAL_I2C_Init+0x1a4>
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	1e58      	subs	r0, r3, #1
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6859      	ldr	r1, [r3, #4]
 800739e:	460b      	mov	r3, r1
 80073a0:	005b      	lsls	r3, r3, #1
 80073a2:	440b      	add	r3, r1
 80073a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80073a8:	3301      	adds	r3, #1
 80073aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073b2:	e00f      	b.n	80073d4 <HAL_I2C_Init+0x1c4>
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	1e58      	subs	r0, r3, #1
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6859      	ldr	r1, [r3, #4]
 80073bc:	460b      	mov	r3, r1
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	440b      	add	r3, r1
 80073c2:	0099      	lsls	r1, r3, #2
 80073c4:	440b      	add	r3, r1
 80073c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80073ca:	3301      	adds	r3, #1
 80073cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80073d4:	6879      	ldr	r1, [r7, #4]
 80073d6:	6809      	ldr	r1, [r1, #0]
 80073d8:	4313      	orrs	r3, r2
 80073da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	69da      	ldr	r2, [r3, #28]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a1b      	ldr	r3, [r3, #32]
 80073ee:	431a      	orrs	r2, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	430a      	orrs	r2, r1
 80073f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007402:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	6911      	ldr	r1, [r2, #16]
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	68d2      	ldr	r2, [r2, #12]
 800740e:	4311      	orrs	r1, r2
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	6812      	ldr	r2, [r2, #0]
 8007414:	430b      	orrs	r3, r1
 8007416:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	68db      	ldr	r3, [r3, #12]
 800741e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	695a      	ldr	r2, [r3, #20]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	699b      	ldr	r3, [r3, #24]
 800742a:	431a      	orrs	r2, r3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	430a      	orrs	r2, r1
 8007432:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f042 0201 	orr.w	r2, r2, #1
 8007442:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2220      	movs	r2, #32
 800744e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007460:	2300      	movs	r3, #0
}
 8007462:	4618      	mov	r0, r3
 8007464:	3710      	adds	r7, #16
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
 800746a:	bf00      	nop
 800746c:	000186a0 	.word	0x000186a0
 8007470:	001e847f 	.word	0x001e847f
 8007474:	003d08ff 	.word	0x003d08ff
 8007478:	431bde83 	.word	0x431bde83
 800747c:	10624dd3 	.word	0x10624dd3

08007480 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b088      	sub	sp, #32
 8007484:	af02      	add	r7, sp, #8
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	607a      	str	r2, [r7, #4]
 800748a:	461a      	mov	r2, r3
 800748c:	460b      	mov	r3, r1
 800748e:	817b      	strh	r3, [r7, #10]
 8007490:	4613      	mov	r3, r2
 8007492:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007494:	f7fe fbe8 	bl	8005c68 <HAL_GetTick>
 8007498:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	2b20      	cmp	r3, #32
 80074a4:	f040 80e0 	bne.w	8007668 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	9300      	str	r3, [sp, #0]
 80074ac:	2319      	movs	r3, #25
 80074ae:	2201      	movs	r2, #1
 80074b0:	4970      	ldr	r1, [pc, #448]	; (8007674 <HAL_I2C_Master_Transmit+0x1f4>)
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	f000 fc58 	bl	8007d68 <I2C_WaitOnFlagUntilTimeout>
 80074b8:	4603      	mov	r3, r0
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d001      	beq.n	80074c2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80074be:	2302      	movs	r3, #2
 80074c0:	e0d3      	b.n	800766a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d101      	bne.n	80074d0 <HAL_I2C_Master_Transmit+0x50>
 80074cc:	2302      	movs	r3, #2
 80074ce:	e0cc      	b.n	800766a <HAL_I2C_Master_Transmit+0x1ea>
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f003 0301 	and.w	r3, r3, #1
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d007      	beq.n	80074f6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f042 0201 	orr.w	r2, r2, #1
 80074f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007504:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2221      	movs	r2, #33	; 0x21
 800750a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2210      	movs	r2, #16
 8007512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2200      	movs	r2, #0
 800751a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	893a      	ldrh	r2, [r7, #8]
 8007526:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800752c:	b29a      	uxth	r2, r3
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	4a50      	ldr	r2, [pc, #320]	; (8007678 <HAL_I2C_Master_Transmit+0x1f8>)
 8007536:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007538:	8979      	ldrh	r1, [r7, #10]
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	6a3a      	ldr	r2, [r7, #32]
 800753e:	68f8      	ldr	r0, [r7, #12]
 8007540:	f000 fac2 	bl	8007ac8 <I2C_MasterRequestWrite>
 8007544:	4603      	mov	r3, r0
 8007546:	2b00      	cmp	r3, #0
 8007548:	d001      	beq.n	800754e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	e08d      	b.n	800766a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800754e:	2300      	movs	r3, #0
 8007550:	613b      	str	r3, [r7, #16]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	695b      	ldr	r3, [r3, #20]
 8007558:	613b      	str	r3, [r7, #16]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	699b      	ldr	r3, [r3, #24]
 8007560:	613b      	str	r3, [r7, #16]
 8007562:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007564:	e066      	b.n	8007634 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007566:	697a      	ldr	r2, [r7, #20]
 8007568:	6a39      	ldr	r1, [r7, #32]
 800756a:	68f8      	ldr	r0, [r7, #12]
 800756c:	f000 fcd2 	bl	8007f14 <I2C_WaitOnTXEFlagUntilTimeout>
 8007570:	4603      	mov	r3, r0
 8007572:	2b00      	cmp	r3, #0
 8007574:	d00d      	beq.n	8007592 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757a:	2b04      	cmp	r3, #4
 800757c:	d107      	bne.n	800758e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800758c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	e06b      	b.n	800766a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007596:	781a      	ldrb	r2, [r3, #0]
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a2:	1c5a      	adds	r2, r3, #1
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	3b01      	subs	r3, #1
 80075b0:	b29a      	uxth	r2, r3
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075ba:	3b01      	subs	r3, #1
 80075bc:	b29a      	uxth	r2, r3
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	695b      	ldr	r3, [r3, #20]
 80075c8:	f003 0304 	and.w	r3, r3, #4
 80075cc:	2b04      	cmp	r3, #4
 80075ce:	d11b      	bne.n	8007608 <HAL_I2C_Master_Transmit+0x188>
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d017      	beq.n	8007608 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075dc:	781a      	ldrb	r2, [r3, #0]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e8:	1c5a      	adds	r2, r3, #1
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	3b01      	subs	r3, #1
 80075f6:	b29a      	uxth	r2, r3
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007600:	3b01      	subs	r3, #1
 8007602:	b29a      	uxth	r2, r3
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007608:	697a      	ldr	r2, [r7, #20]
 800760a:	6a39      	ldr	r1, [r7, #32]
 800760c:	68f8      	ldr	r0, [r7, #12]
 800760e:	f000 fcc2 	bl	8007f96 <I2C_WaitOnBTFFlagUntilTimeout>
 8007612:	4603      	mov	r3, r0
 8007614:	2b00      	cmp	r3, #0
 8007616:	d00d      	beq.n	8007634 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800761c:	2b04      	cmp	r3, #4
 800761e:	d107      	bne.n	8007630 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800762e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007630:	2301      	movs	r3, #1
 8007632:	e01a      	b.n	800766a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007638:	2b00      	cmp	r3, #0
 800763a:	d194      	bne.n	8007566 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800764a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2220      	movs	r2, #32
 8007650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2200      	movs	r2, #0
 8007658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2200      	movs	r2, #0
 8007660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007664:	2300      	movs	r3, #0
 8007666:	e000      	b.n	800766a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007668:	2302      	movs	r3, #2
  }
}
 800766a:	4618      	mov	r0, r3
 800766c:	3718      	adds	r7, #24
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop
 8007674:	00100002 	.word	0x00100002
 8007678:	ffff0000 	.word	0xffff0000

0800767c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b08c      	sub	sp, #48	; 0x30
 8007680:	af02      	add	r7, sp, #8
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	607a      	str	r2, [r7, #4]
 8007686:	461a      	mov	r2, r3
 8007688:	460b      	mov	r3, r1
 800768a:	817b      	strh	r3, [r7, #10]
 800768c:	4613      	mov	r3, r2
 800768e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007690:	f7fe faea 	bl	8005c68 <HAL_GetTick>
 8007694:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800769c:	b2db      	uxtb	r3, r3
 800769e:	2b20      	cmp	r3, #32
 80076a0:	f040 820b 	bne.w	8007aba <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80076a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a6:	9300      	str	r3, [sp, #0]
 80076a8:	2319      	movs	r3, #25
 80076aa:	2201      	movs	r2, #1
 80076ac:	497c      	ldr	r1, [pc, #496]	; (80078a0 <HAL_I2C_Master_Receive+0x224>)
 80076ae:	68f8      	ldr	r0, [r7, #12]
 80076b0:	f000 fb5a 	bl	8007d68 <I2C_WaitOnFlagUntilTimeout>
 80076b4:	4603      	mov	r3, r0
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d001      	beq.n	80076be <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80076ba:	2302      	movs	r3, #2
 80076bc:	e1fe      	b.n	8007abc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d101      	bne.n	80076cc <HAL_I2C_Master_Receive+0x50>
 80076c8:	2302      	movs	r3, #2
 80076ca:	e1f7      	b.n	8007abc <HAL_I2C_Master_Receive+0x440>
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f003 0301 	and.w	r3, r3, #1
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d007      	beq.n	80076f2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f042 0201 	orr.w	r2, r2, #1
 80076f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007700:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2222      	movs	r2, #34	; 0x22
 8007706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2210      	movs	r2, #16
 800770e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2200      	movs	r2, #0
 8007716:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	893a      	ldrh	r2, [r7, #8]
 8007722:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007728:	b29a      	uxth	r2, r3
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	4a5c      	ldr	r2, [pc, #368]	; (80078a4 <HAL_I2C_Master_Receive+0x228>)
 8007732:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007734:	8979      	ldrh	r1, [r7, #10]
 8007736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007738:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800773a:	68f8      	ldr	r0, [r7, #12]
 800773c:	f000 fa46 	bl	8007bcc <I2C_MasterRequestRead>
 8007740:	4603      	mov	r3, r0
 8007742:	2b00      	cmp	r3, #0
 8007744:	d001      	beq.n	800774a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	e1b8      	b.n	8007abc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800774e:	2b00      	cmp	r3, #0
 8007750:	d113      	bne.n	800777a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007752:	2300      	movs	r3, #0
 8007754:	623b      	str	r3, [r7, #32]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	695b      	ldr	r3, [r3, #20]
 800775c:	623b      	str	r3, [r7, #32]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	699b      	ldr	r3, [r3, #24]
 8007764:	623b      	str	r3, [r7, #32]
 8007766:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007776:	601a      	str	r2, [r3, #0]
 8007778:	e18c      	b.n	8007a94 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800777e:	2b01      	cmp	r3, #1
 8007780:	d11b      	bne.n	80077ba <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	681a      	ldr	r2, [r3, #0]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007790:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007792:	2300      	movs	r3, #0
 8007794:	61fb      	str	r3, [r7, #28]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	695b      	ldr	r3, [r3, #20]
 800779c:	61fb      	str	r3, [r7, #28]
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	699b      	ldr	r3, [r3, #24]
 80077a4:	61fb      	str	r3, [r7, #28]
 80077a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077b6:	601a      	str	r2, [r3, #0]
 80077b8:	e16c      	b.n	8007a94 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077be:	2b02      	cmp	r3, #2
 80077c0:	d11b      	bne.n	80077fa <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077d0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077e2:	2300      	movs	r3, #0
 80077e4:	61bb      	str	r3, [r7, #24]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	695b      	ldr	r3, [r3, #20]
 80077ec:	61bb      	str	r3, [r7, #24]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	699b      	ldr	r3, [r3, #24]
 80077f4:	61bb      	str	r3, [r7, #24]
 80077f6:	69bb      	ldr	r3, [r7, #24]
 80077f8:	e14c      	b.n	8007a94 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007808:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800780a:	2300      	movs	r3, #0
 800780c:	617b      	str	r3, [r7, #20]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	695b      	ldr	r3, [r3, #20]
 8007814:	617b      	str	r3, [r7, #20]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	699b      	ldr	r3, [r3, #24]
 800781c:	617b      	str	r3, [r7, #20]
 800781e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007820:	e138      	b.n	8007a94 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007826:	2b03      	cmp	r3, #3
 8007828:	f200 80f1 	bhi.w	8007a0e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007830:	2b01      	cmp	r3, #1
 8007832:	d123      	bne.n	800787c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007836:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007838:	68f8      	ldr	r0, [r7, #12]
 800783a:	f000 fbed 	bl	8008018 <I2C_WaitOnRXNEFlagUntilTimeout>
 800783e:	4603      	mov	r3, r0
 8007840:	2b00      	cmp	r3, #0
 8007842:	d001      	beq.n	8007848 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	e139      	b.n	8007abc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	691a      	ldr	r2, [r3, #16]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007852:	b2d2      	uxtb	r2, r2
 8007854:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800785a:	1c5a      	adds	r2, r3, #1
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007864:	3b01      	subs	r3, #1
 8007866:	b29a      	uxth	r2, r3
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007870:	b29b      	uxth	r3, r3
 8007872:	3b01      	subs	r3, #1
 8007874:	b29a      	uxth	r2, r3
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	855a      	strh	r2, [r3, #42]	; 0x2a
 800787a:	e10b      	b.n	8007a94 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007880:	2b02      	cmp	r3, #2
 8007882:	d14e      	bne.n	8007922 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007886:	9300      	str	r3, [sp, #0]
 8007888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800788a:	2200      	movs	r2, #0
 800788c:	4906      	ldr	r1, [pc, #24]	; (80078a8 <HAL_I2C_Master_Receive+0x22c>)
 800788e:	68f8      	ldr	r0, [r7, #12]
 8007890:	f000 fa6a 	bl	8007d68 <I2C_WaitOnFlagUntilTimeout>
 8007894:	4603      	mov	r3, r0
 8007896:	2b00      	cmp	r3, #0
 8007898:	d008      	beq.n	80078ac <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	e10e      	b.n	8007abc <HAL_I2C_Master_Receive+0x440>
 800789e:	bf00      	nop
 80078a0:	00100002 	.word	0x00100002
 80078a4:	ffff0000 	.word	0xffff0000
 80078a8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	691a      	ldr	r2, [r3, #16]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c6:	b2d2      	uxtb	r2, r2
 80078c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ce:	1c5a      	adds	r2, r3, #1
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078d8:	3b01      	subs	r3, #1
 80078da:	b29a      	uxth	r2, r3
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	3b01      	subs	r3, #1
 80078e8:	b29a      	uxth	r2, r3
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	691a      	ldr	r2, [r3, #16]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f8:	b2d2      	uxtb	r2, r2
 80078fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007900:	1c5a      	adds	r2, r3, #1
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800790a:	3b01      	subs	r3, #1
 800790c:	b29a      	uxth	r2, r3
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007916:	b29b      	uxth	r3, r3
 8007918:	3b01      	subs	r3, #1
 800791a:	b29a      	uxth	r2, r3
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007920:	e0b8      	b.n	8007a94 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007924:	9300      	str	r3, [sp, #0]
 8007926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007928:	2200      	movs	r2, #0
 800792a:	4966      	ldr	r1, [pc, #408]	; (8007ac4 <HAL_I2C_Master_Receive+0x448>)
 800792c:	68f8      	ldr	r0, [r7, #12]
 800792e:	f000 fa1b 	bl	8007d68 <I2C_WaitOnFlagUntilTimeout>
 8007932:	4603      	mov	r3, r0
 8007934:	2b00      	cmp	r3, #0
 8007936:	d001      	beq.n	800793c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8007938:	2301      	movs	r3, #1
 800793a:	e0bf      	b.n	8007abc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800794a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	691a      	ldr	r2, [r3, #16]
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007956:	b2d2      	uxtb	r2, r2
 8007958:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795e:	1c5a      	adds	r2, r3, #1
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007968:	3b01      	subs	r3, #1
 800796a:	b29a      	uxth	r2, r3
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007974:	b29b      	uxth	r3, r3
 8007976:	3b01      	subs	r3, #1
 8007978:	b29a      	uxth	r2, r3
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800797e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007980:	9300      	str	r3, [sp, #0]
 8007982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007984:	2200      	movs	r2, #0
 8007986:	494f      	ldr	r1, [pc, #316]	; (8007ac4 <HAL_I2C_Master_Receive+0x448>)
 8007988:	68f8      	ldr	r0, [r7, #12]
 800798a:	f000 f9ed 	bl	8007d68 <I2C_WaitOnFlagUntilTimeout>
 800798e:	4603      	mov	r3, r0
 8007990:	2b00      	cmp	r3, #0
 8007992:	d001      	beq.n	8007998 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8007994:	2301      	movs	r3, #1
 8007996:	e091      	b.n	8007abc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	691a      	ldr	r2, [r3, #16]
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b2:	b2d2      	uxtb	r2, r2
 80079b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ba:	1c5a      	adds	r2, r3, #1
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079c4:	3b01      	subs	r3, #1
 80079c6:	b29a      	uxth	r2, r3
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	3b01      	subs	r3, #1
 80079d4:	b29a      	uxth	r2, r3
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	691a      	ldr	r2, [r3, #16]
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e4:	b2d2      	uxtb	r2, r2
 80079e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ec:	1c5a      	adds	r2, r3, #1
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079f6:	3b01      	subs	r3, #1
 80079f8:	b29a      	uxth	r2, r3
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	3b01      	subs	r3, #1
 8007a06:	b29a      	uxth	r2, r3
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007a0c:	e042      	b.n	8007a94 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a12:	68f8      	ldr	r0, [r7, #12]
 8007a14:	f000 fb00 	bl	8008018 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d001      	beq.n	8007a22 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e04c      	b.n	8007abc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	691a      	ldr	r2, [r3, #16]
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a2c:	b2d2      	uxtb	r2, r2
 8007a2e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a34:	1c5a      	adds	r2, r3, #1
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a3e:	3b01      	subs	r3, #1
 8007a40:	b29a      	uxth	r2, r3
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	b29a      	uxth	r2, r3
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	695b      	ldr	r3, [r3, #20]
 8007a5a:	f003 0304 	and.w	r3, r3, #4
 8007a5e:	2b04      	cmp	r3, #4
 8007a60:	d118      	bne.n	8007a94 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	691a      	ldr	r2, [r3, #16]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a6c:	b2d2      	uxtb	r2, r2
 8007a6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a74:	1c5a      	adds	r2, r3, #1
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a7e:	3b01      	subs	r3, #1
 8007a80:	b29a      	uxth	r2, r3
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	3b01      	subs	r3, #1
 8007a8e:	b29a      	uxth	r2, r3
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f47f aec2 	bne.w	8007822 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2220      	movs	r2, #32
 8007aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	e000      	b.n	8007abc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007aba:	2302      	movs	r3, #2
  }
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3728      	adds	r7, #40	; 0x28
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}
 8007ac4:	00010004 	.word	0x00010004

08007ac8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b088      	sub	sp, #32
 8007acc:	af02      	add	r7, sp, #8
 8007ace:	60f8      	str	r0, [r7, #12]
 8007ad0:	607a      	str	r2, [r7, #4]
 8007ad2:	603b      	str	r3, [r7, #0]
 8007ad4:	460b      	mov	r3, r1
 8007ad6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007adc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	2b08      	cmp	r3, #8
 8007ae2:	d006      	beq.n	8007af2 <I2C_MasterRequestWrite+0x2a>
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d003      	beq.n	8007af2 <I2C_MasterRequestWrite+0x2a>
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007af0:	d108      	bne.n	8007b04 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b00:	601a      	str	r2, [r3, #0]
 8007b02:	e00b      	b.n	8007b1c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b08:	2b12      	cmp	r3, #18
 8007b0a:	d107      	bne.n	8007b1c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b1a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	9300      	str	r3, [sp, #0]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2200      	movs	r2, #0
 8007b24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007b28:	68f8      	ldr	r0, [r7, #12]
 8007b2a:	f000 f91d 	bl	8007d68 <I2C_WaitOnFlagUntilTimeout>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d00d      	beq.n	8007b50 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b42:	d103      	bne.n	8007b4c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007b4c:	2303      	movs	r3, #3
 8007b4e:	e035      	b.n	8007bbc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	691b      	ldr	r3, [r3, #16]
 8007b54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b58:	d108      	bne.n	8007b6c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007b5a:	897b      	ldrh	r3, [r7, #10]
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	461a      	mov	r2, r3
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007b68:	611a      	str	r2, [r3, #16]
 8007b6a:	e01b      	b.n	8007ba4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007b6c:	897b      	ldrh	r3, [r7, #10]
 8007b6e:	11db      	asrs	r3, r3, #7
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	f003 0306 	and.w	r3, r3, #6
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	f063 030f 	orn	r3, r3, #15
 8007b7c:	b2da      	uxtb	r2, r3
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	490e      	ldr	r1, [pc, #56]	; (8007bc4 <I2C_MasterRequestWrite+0xfc>)
 8007b8a:	68f8      	ldr	r0, [r7, #12]
 8007b8c:	f000 f943 	bl	8007e16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d001      	beq.n	8007b9a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	e010      	b.n	8007bbc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007b9a:	897b      	ldrh	r3, [r7, #10]
 8007b9c:	b2da      	uxtb	r2, r3
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	687a      	ldr	r2, [r7, #4]
 8007ba8:	4907      	ldr	r1, [pc, #28]	; (8007bc8 <I2C_MasterRequestWrite+0x100>)
 8007baa:	68f8      	ldr	r0, [r7, #12]
 8007bac:	f000 f933 	bl	8007e16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d001      	beq.n	8007bba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e000      	b.n	8007bbc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007bba:	2300      	movs	r3, #0
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3718      	adds	r7, #24
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}
 8007bc4:	00010008 	.word	0x00010008
 8007bc8:	00010002 	.word	0x00010002

08007bcc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b088      	sub	sp, #32
 8007bd0:	af02      	add	r7, sp, #8
 8007bd2:	60f8      	str	r0, [r7, #12]
 8007bd4:	607a      	str	r2, [r7, #4]
 8007bd6:	603b      	str	r3, [r7, #0]
 8007bd8:	460b      	mov	r3, r1
 8007bda:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007bf0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	2b08      	cmp	r3, #8
 8007bf6:	d006      	beq.n	8007c06 <I2C_MasterRequestRead+0x3a>
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	2b01      	cmp	r3, #1
 8007bfc:	d003      	beq.n	8007c06 <I2C_MasterRequestRead+0x3a>
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007c04:	d108      	bne.n	8007c18 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c14:	601a      	str	r2, [r3, #0]
 8007c16:	e00b      	b.n	8007c30 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c1c:	2b11      	cmp	r3, #17
 8007c1e:	d107      	bne.n	8007c30 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c2e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	9300      	str	r3, [sp, #0]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2200      	movs	r2, #0
 8007c38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007c3c:	68f8      	ldr	r0, [r7, #12]
 8007c3e:	f000 f893 	bl	8007d68 <I2C_WaitOnFlagUntilTimeout>
 8007c42:	4603      	mov	r3, r0
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d00d      	beq.n	8007c64 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c56:	d103      	bne.n	8007c60 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007c60:	2303      	movs	r3, #3
 8007c62:	e079      	b.n	8007d58 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	691b      	ldr	r3, [r3, #16]
 8007c68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c6c:	d108      	bne.n	8007c80 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007c6e:	897b      	ldrh	r3, [r7, #10]
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	f043 0301 	orr.w	r3, r3, #1
 8007c76:	b2da      	uxtb	r2, r3
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	611a      	str	r2, [r3, #16]
 8007c7e:	e05f      	b.n	8007d40 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007c80:	897b      	ldrh	r3, [r7, #10]
 8007c82:	11db      	asrs	r3, r3, #7
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	f003 0306 	and.w	r3, r3, #6
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	f063 030f 	orn	r3, r3, #15
 8007c90:	b2da      	uxtb	r2, r3
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	4930      	ldr	r1, [pc, #192]	; (8007d60 <I2C_MasterRequestRead+0x194>)
 8007c9e:	68f8      	ldr	r0, [r7, #12]
 8007ca0:	f000 f8b9 	bl	8007e16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d001      	beq.n	8007cae <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	e054      	b.n	8007d58 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007cae:	897b      	ldrh	r3, [r7, #10]
 8007cb0:	b2da      	uxtb	r2, r3
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	4929      	ldr	r1, [pc, #164]	; (8007d64 <I2C_MasterRequestRead+0x198>)
 8007cbe:	68f8      	ldr	r0, [r7, #12]
 8007cc0:	f000 f8a9 	bl	8007e16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d001      	beq.n	8007cce <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e044      	b.n	8007d58 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007cce:	2300      	movs	r3, #0
 8007cd0:	613b      	str	r3, [r7, #16]
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	695b      	ldr	r3, [r3, #20]
 8007cd8:	613b      	str	r3, [r7, #16]
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	699b      	ldr	r3, [r3, #24]
 8007ce0:	613b      	str	r3, [r7, #16]
 8007ce2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007cf2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	9300      	str	r3, [sp, #0]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007d00:	68f8      	ldr	r0, [r7, #12]
 8007d02:	f000 f831 	bl	8007d68 <I2C_WaitOnFlagUntilTimeout>
 8007d06:	4603      	mov	r3, r0
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d00d      	beq.n	8007d28 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d1a:	d103      	bne.n	8007d24 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d22:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8007d24:	2303      	movs	r3, #3
 8007d26:	e017      	b.n	8007d58 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007d28:	897b      	ldrh	r3, [r7, #10]
 8007d2a:	11db      	asrs	r3, r3, #7
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	f003 0306 	and.w	r3, r3, #6
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	f063 030e 	orn	r3, r3, #14
 8007d38:	b2da      	uxtb	r2, r3
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	4907      	ldr	r1, [pc, #28]	; (8007d64 <I2C_MasterRequestRead+0x198>)
 8007d46:	68f8      	ldr	r0, [r7, #12]
 8007d48:	f000 f865 	bl	8007e16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d001      	beq.n	8007d56 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	e000      	b.n	8007d58 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007d56:	2300      	movs	r3, #0
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3718      	adds	r7, #24
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}
 8007d60:	00010008 	.word	0x00010008
 8007d64:	00010002 	.word	0x00010002

08007d68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b084      	sub	sp, #16
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	60b9      	str	r1, [r7, #8]
 8007d72:	603b      	str	r3, [r7, #0]
 8007d74:	4613      	mov	r3, r2
 8007d76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007d78:	e025      	b.n	8007dc6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d80:	d021      	beq.n	8007dc6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d82:	f7fd ff71 	bl	8005c68 <HAL_GetTick>
 8007d86:	4602      	mov	r2, r0
 8007d88:	69bb      	ldr	r3, [r7, #24]
 8007d8a:	1ad3      	subs	r3, r2, r3
 8007d8c:	683a      	ldr	r2, [r7, #0]
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d302      	bcc.n	8007d98 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d116      	bne.n	8007dc6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2220      	movs	r2, #32
 8007da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2200      	movs	r2, #0
 8007daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db2:	f043 0220 	orr.w	r2, r3, #32
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	e023      	b.n	8007e0e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	0c1b      	lsrs	r3, r3, #16
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d10d      	bne.n	8007dec <I2C_WaitOnFlagUntilTimeout+0x84>
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	695b      	ldr	r3, [r3, #20]
 8007dd6:	43da      	mvns	r2, r3
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	4013      	ands	r3, r2
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	bf0c      	ite	eq
 8007de2:	2301      	moveq	r3, #1
 8007de4:	2300      	movne	r3, #0
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	461a      	mov	r2, r3
 8007dea:	e00c      	b.n	8007e06 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	699b      	ldr	r3, [r3, #24]
 8007df2:	43da      	mvns	r2, r3
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	4013      	ands	r3, r2
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	bf0c      	ite	eq
 8007dfe:	2301      	moveq	r3, #1
 8007e00:	2300      	movne	r3, #0
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	461a      	mov	r2, r3
 8007e06:	79fb      	ldrb	r3, [r7, #7]
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d0b6      	beq.n	8007d7a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007e0c:	2300      	movs	r3, #0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3710      	adds	r7, #16
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}

08007e16 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007e16:	b580      	push	{r7, lr}
 8007e18:	b084      	sub	sp, #16
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	60f8      	str	r0, [r7, #12]
 8007e1e:	60b9      	str	r1, [r7, #8]
 8007e20:	607a      	str	r2, [r7, #4]
 8007e22:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007e24:	e051      	b.n	8007eca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	695b      	ldr	r3, [r3, #20]
 8007e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e34:	d123      	bne.n	8007e7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e44:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007e4e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2200      	movs	r2, #0
 8007e54:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2220      	movs	r2, #32
 8007e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2200      	movs	r2, #0
 8007e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e6a:	f043 0204 	orr.w	r2, r3, #4
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2200      	movs	r2, #0
 8007e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	e046      	b.n	8007f0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e84:	d021      	beq.n	8007eca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e86:	f7fd feef 	bl	8005c68 <HAL_GetTick>
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	1ad3      	subs	r3, r2, r3
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d302      	bcc.n	8007e9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d116      	bne.n	8007eca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2220      	movs	r2, #32
 8007ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb6:	f043 0220 	orr.w	r2, r3, #32
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	e020      	b.n	8007f0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	0c1b      	lsrs	r3, r3, #16
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d10c      	bne.n	8007eee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	695b      	ldr	r3, [r3, #20]
 8007eda:	43da      	mvns	r2, r3
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	4013      	ands	r3, r2
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	bf14      	ite	ne
 8007ee6:	2301      	movne	r3, #1
 8007ee8:	2300      	moveq	r3, #0
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	e00b      	b.n	8007f06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	699b      	ldr	r3, [r3, #24]
 8007ef4:	43da      	mvns	r2, r3
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	4013      	ands	r3, r2
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	bf14      	ite	ne
 8007f00:	2301      	movne	r3, #1
 8007f02:	2300      	moveq	r3, #0
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d18d      	bne.n	8007e26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007f0a:	2300      	movs	r3, #0
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3710      	adds	r7, #16
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b084      	sub	sp, #16
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	60f8      	str	r0, [r7, #12]
 8007f1c:	60b9      	str	r1, [r7, #8]
 8007f1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007f20:	e02d      	b.n	8007f7e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007f22:	68f8      	ldr	r0, [r7, #12]
 8007f24:	f000 f8ce 	bl	80080c4 <I2C_IsAcknowledgeFailed>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d001      	beq.n	8007f32 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e02d      	b.n	8007f8e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f38:	d021      	beq.n	8007f7e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f3a:	f7fd fe95 	bl	8005c68 <HAL_GetTick>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	1ad3      	subs	r3, r2, r3
 8007f44:	68ba      	ldr	r2, [r7, #8]
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d302      	bcc.n	8007f50 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d116      	bne.n	8007f7e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2200      	movs	r2, #0
 8007f54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2220      	movs	r2, #32
 8007f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2200      	movs	r2, #0
 8007f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f6a:	f043 0220 	orr.w	r2, r3, #32
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2200      	movs	r2, #0
 8007f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e007      	b.n	8007f8e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	695b      	ldr	r3, [r3, #20]
 8007f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f88:	2b80      	cmp	r3, #128	; 0x80
 8007f8a:	d1ca      	bne.n	8007f22 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007f8c:	2300      	movs	r3, #0
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3710      	adds	r7, #16
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}

08007f96 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007f96:	b580      	push	{r7, lr}
 8007f98:	b084      	sub	sp, #16
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	60f8      	str	r0, [r7, #12]
 8007f9e:	60b9      	str	r1, [r7, #8]
 8007fa0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007fa2:	e02d      	b.n	8008000 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007fa4:	68f8      	ldr	r0, [r7, #12]
 8007fa6:	f000 f88d 	bl	80080c4 <I2C_IsAcknowledgeFailed>
 8007faa:	4603      	mov	r3, r0
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d001      	beq.n	8007fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	e02d      	b.n	8008010 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fba:	d021      	beq.n	8008000 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fbc:	f7fd fe54 	bl	8005c68 <HAL_GetTick>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	1ad3      	subs	r3, r2, r3
 8007fc6:	68ba      	ldr	r2, [r7, #8]
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d302      	bcc.n	8007fd2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d116      	bne.n	8008000 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2220      	movs	r2, #32
 8007fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fec:	f043 0220 	orr.w	r2, r3, #32
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	e007      	b.n	8008010 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	695b      	ldr	r3, [r3, #20]
 8008006:	f003 0304 	and.w	r3, r3, #4
 800800a:	2b04      	cmp	r3, #4
 800800c:	d1ca      	bne.n	8007fa4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800800e:	2300      	movs	r3, #0
}
 8008010:	4618      	mov	r0, r3
 8008012:	3710      	adds	r7, #16
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	60f8      	str	r0, [r7, #12]
 8008020:	60b9      	str	r1, [r7, #8]
 8008022:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008024:	e042      	b.n	80080ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	695b      	ldr	r3, [r3, #20]
 800802c:	f003 0310 	and.w	r3, r3, #16
 8008030:	2b10      	cmp	r3, #16
 8008032:	d119      	bne.n	8008068 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f06f 0210 	mvn.w	r2, #16
 800803c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2200      	movs	r2, #0
 8008042:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2220      	movs	r2, #32
 8008048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2200      	movs	r2, #0
 8008050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2200      	movs	r2, #0
 8008060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008064:	2301      	movs	r3, #1
 8008066:	e029      	b.n	80080bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008068:	f7fd fdfe 	bl	8005c68 <HAL_GetTick>
 800806c:	4602      	mov	r2, r0
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	1ad3      	subs	r3, r2, r3
 8008072:	68ba      	ldr	r2, [r7, #8]
 8008074:	429a      	cmp	r2, r3
 8008076:	d302      	bcc.n	800807e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d116      	bne.n	80080ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2200      	movs	r2, #0
 8008082:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2220      	movs	r2, #32
 8008088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2200      	movs	r2, #0
 8008090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008098:	f043 0220 	orr.w	r2, r3, #32
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2200      	movs	r2, #0
 80080a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80080a8:	2301      	movs	r3, #1
 80080aa:	e007      	b.n	80080bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	695b      	ldr	r3, [r3, #20]
 80080b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080b6:	2b40      	cmp	r3, #64	; 0x40
 80080b8:	d1b5      	bne.n	8008026 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80080ba:	2300      	movs	r3, #0
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3710      	adds	r7, #16
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	695b      	ldr	r3, [r3, #20]
 80080d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080da:	d11b      	bne.n	8008114 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80080e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2220      	movs	r2, #32
 80080f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008100:	f043 0204 	orr.w	r2, r3, #4
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008110:	2301      	movs	r3, #1
 8008112:	e000      	b.n	8008116 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008114:	2300      	movs	r3, #0
}
 8008116:	4618      	mov	r0, r3
 8008118:	370c      	adds	r7, #12
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr
	...

08008124 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b082      	sub	sp, #8
 8008128:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800812a:	2300      	movs	r3, #0
 800812c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800812e:	2300      	movs	r3, #0
 8008130:	603b      	str	r3, [r7, #0]
 8008132:	4b20      	ldr	r3, [pc, #128]	; (80081b4 <HAL_PWREx_EnableOverDrive+0x90>)
 8008134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008136:	4a1f      	ldr	r2, [pc, #124]	; (80081b4 <HAL_PWREx_EnableOverDrive+0x90>)
 8008138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800813c:	6413      	str	r3, [r2, #64]	; 0x40
 800813e:	4b1d      	ldr	r3, [pc, #116]	; (80081b4 <HAL_PWREx_EnableOverDrive+0x90>)
 8008140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008146:	603b      	str	r3, [r7, #0]
 8008148:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800814a:	4b1b      	ldr	r3, [pc, #108]	; (80081b8 <HAL_PWREx_EnableOverDrive+0x94>)
 800814c:	2201      	movs	r2, #1
 800814e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008150:	f7fd fd8a 	bl	8005c68 <HAL_GetTick>
 8008154:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008156:	e009      	b.n	800816c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008158:	f7fd fd86 	bl	8005c68 <HAL_GetTick>
 800815c:	4602      	mov	r2, r0
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	1ad3      	subs	r3, r2, r3
 8008162:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008166:	d901      	bls.n	800816c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8008168:	2303      	movs	r3, #3
 800816a:	e01f      	b.n	80081ac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800816c:	4b13      	ldr	r3, [pc, #76]	; (80081bc <HAL_PWREx_EnableOverDrive+0x98>)
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008178:	d1ee      	bne.n	8008158 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800817a:	4b11      	ldr	r3, [pc, #68]	; (80081c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800817c:	2201      	movs	r2, #1
 800817e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008180:	f7fd fd72 	bl	8005c68 <HAL_GetTick>
 8008184:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008186:	e009      	b.n	800819c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008188:	f7fd fd6e 	bl	8005c68 <HAL_GetTick>
 800818c:	4602      	mov	r2, r0
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	1ad3      	subs	r3, r2, r3
 8008192:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008196:	d901      	bls.n	800819c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8008198:	2303      	movs	r3, #3
 800819a:	e007      	b.n	80081ac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800819c:	4b07      	ldr	r3, [pc, #28]	; (80081bc <HAL_PWREx_EnableOverDrive+0x98>)
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081a8:	d1ee      	bne.n	8008188 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80081aa:	2300      	movs	r3, #0
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3708      	adds	r7, #8
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}
 80081b4:	40023800 	.word	0x40023800
 80081b8:	420e0040 	.word	0x420e0040
 80081bc:	40007000 	.word	0x40007000
 80081c0:	420e0044 	.word	0x420e0044

080081c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d101      	bne.n	80081d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80081d4:	2301      	movs	r3, #1
 80081d6:	e0cc      	b.n	8008372 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80081d8:	4b68      	ldr	r3, [pc, #416]	; (800837c <HAL_RCC_ClockConfig+0x1b8>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f003 030f 	and.w	r3, r3, #15
 80081e0:	683a      	ldr	r2, [r7, #0]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d90c      	bls.n	8008200 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081e6:	4b65      	ldr	r3, [pc, #404]	; (800837c <HAL_RCC_ClockConfig+0x1b8>)
 80081e8:	683a      	ldr	r2, [r7, #0]
 80081ea:	b2d2      	uxtb	r2, r2
 80081ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80081ee:	4b63      	ldr	r3, [pc, #396]	; (800837c <HAL_RCC_ClockConfig+0x1b8>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f003 030f 	and.w	r3, r3, #15
 80081f6:	683a      	ldr	r2, [r7, #0]
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d001      	beq.n	8008200 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80081fc:	2301      	movs	r3, #1
 80081fe:	e0b8      	b.n	8008372 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f003 0302 	and.w	r3, r3, #2
 8008208:	2b00      	cmp	r3, #0
 800820a:	d020      	beq.n	800824e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f003 0304 	and.w	r3, r3, #4
 8008214:	2b00      	cmp	r3, #0
 8008216:	d005      	beq.n	8008224 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008218:	4b59      	ldr	r3, [pc, #356]	; (8008380 <HAL_RCC_ClockConfig+0x1bc>)
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	4a58      	ldr	r2, [pc, #352]	; (8008380 <HAL_RCC_ClockConfig+0x1bc>)
 800821e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008222:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f003 0308 	and.w	r3, r3, #8
 800822c:	2b00      	cmp	r3, #0
 800822e:	d005      	beq.n	800823c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008230:	4b53      	ldr	r3, [pc, #332]	; (8008380 <HAL_RCC_ClockConfig+0x1bc>)
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	4a52      	ldr	r2, [pc, #328]	; (8008380 <HAL_RCC_ClockConfig+0x1bc>)
 8008236:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800823a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800823c:	4b50      	ldr	r3, [pc, #320]	; (8008380 <HAL_RCC_ClockConfig+0x1bc>)
 800823e:	689b      	ldr	r3, [r3, #8]
 8008240:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	494d      	ldr	r1, [pc, #308]	; (8008380 <HAL_RCC_ClockConfig+0x1bc>)
 800824a:	4313      	orrs	r3, r2
 800824c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f003 0301 	and.w	r3, r3, #1
 8008256:	2b00      	cmp	r3, #0
 8008258:	d044      	beq.n	80082e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	2b01      	cmp	r3, #1
 8008260:	d107      	bne.n	8008272 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008262:	4b47      	ldr	r3, [pc, #284]	; (8008380 <HAL_RCC_ClockConfig+0x1bc>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800826a:	2b00      	cmp	r3, #0
 800826c:	d119      	bne.n	80082a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800826e:	2301      	movs	r3, #1
 8008270:	e07f      	b.n	8008372 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	2b02      	cmp	r3, #2
 8008278:	d003      	beq.n	8008282 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800827e:	2b03      	cmp	r3, #3
 8008280:	d107      	bne.n	8008292 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008282:	4b3f      	ldr	r3, [pc, #252]	; (8008380 <HAL_RCC_ClockConfig+0x1bc>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800828a:	2b00      	cmp	r3, #0
 800828c:	d109      	bne.n	80082a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	e06f      	b.n	8008372 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008292:	4b3b      	ldr	r3, [pc, #236]	; (8008380 <HAL_RCC_ClockConfig+0x1bc>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f003 0302 	and.w	r3, r3, #2
 800829a:	2b00      	cmp	r3, #0
 800829c:	d101      	bne.n	80082a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800829e:	2301      	movs	r3, #1
 80082a0:	e067      	b.n	8008372 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80082a2:	4b37      	ldr	r3, [pc, #220]	; (8008380 <HAL_RCC_ClockConfig+0x1bc>)
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	f023 0203 	bic.w	r2, r3, #3
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	4934      	ldr	r1, [pc, #208]	; (8008380 <HAL_RCC_ClockConfig+0x1bc>)
 80082b0:	4313      	orrs	r3, r2
 80082b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80082b4:	f7fd fcd8 	bl	8005c68 <HAL_GetTick>
 80082b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082ba:	e00a      	b.n	80082d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80082bc:	f7fd fcd4 	bl	8005c68 <HAL_GetTick>
 80082c0:	4602      	mov	r2, r0
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	1ad3      	subs	r3, r2, r3
 80082c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d901      	bls.n	80082d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80082ce:	2303      	movs	r3, #3
 80082d0:	e04f      	b.n	8008372 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082d2:	4b2b      	ldr	r3, [pc, #172]	; (8008380 <HAL_RCC_ClockConfig+0x1bc>)
 80082d4:	689b      	ldr	r3, [r3, #8]
 80082d6:	f003 020c 	and.w	r2, r3, #12
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	009b      	lsls	r3, r3, #2
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d1eb      	bne.n	80082bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80082e4:	4b25      	ldr	r3, [pc, #148]	; (800837c <HAL_RCC_ClockConfig+0x1b8>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f003 030f 	and.w	r3, r3, #15
 80082ec:	683a      	ldr	r2, [r7, #0]
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d20c      	bcs.n	800830c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082f2:	4b22      	ldr	r3, [pc, #136]	; (800837c <HAL_RCC_ClockConfig+0x1b8>)
 80082f4:	683a      	ldr	r2, [r7, #0]
 80082f6:	b2d2      	uxtb	r2, r2
 80082f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80082fa:	4b20      	ldr	r3, [pc, #128]	; (800837c <HAL_RCC_ClockConfig+0x1b8>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f003 030f 	and.w	r3, r3, #15
 8008302:	683a      	ldr	r2, [r7, #0]
 8008304:	429a      	cmp	r2, r3
 8008306:	d001      	beq.n	800830c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008308:	2301      	movs	r3, #1
 800830a:	e032      	b.n	8008372 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f003 0304 	and.w	r3, r3, #4
 8008314:	2b00      	cmp	r3, #0
 8008316:	d008      	beq.n	800832a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008318:	4b19      	ldr	r3, [pc, #100]	; (8008380 <HAL_RCC_ClockConfig+0x1bc>)
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	68db      	ldr	r3, [r3, #12]
 8008324:	4916      	ldr	r1, [pc, #88]	; (8008380 <HAL_RCC_ClockConfig+0x1bc>)
 8008326:	4313      	orrs	r3, r2
 8008328:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f003 0308 	and.w	r3, r3, #8
 8008332:	2b00      	cmp	r3, #0
 8008334:	d009      	beq.n	800834a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008336:	4b12      	ldr	r3, [pc, #72]	; (8008380 <HAL_RCC_ClockConfig+0x1bc>)
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	691b      	ldr	r3, [r3, #16]
 8008342:	00db      	lsls	r3, r3, #3
 8008344:	490e      	ldr	r1, [pc, #56]	; (8008380 <HAL_RCC_ClockConfig+0x1bc>)
 8008346:	4313      	orrs	r3, r2
 8008348:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800834a:	f000 f821 	bl	8008390 <HAL_RCC_GetSysClockFreq>
 800834e:	4601      	mov	r1, r0
 8008350:	4b0b      	ldr	r3, [pc, #44]	; (8008380 <HAL_RCC_ClockConfig+0x1bc>)
 8008352:	689b      	ldr	r3, [r3, #8]
 8008354:	091b      	lsrs	r3, r3, #4
 8008356:	f003 030f 	and.w	r3, r3, #15
 800835a:	4a0a      	ldr	r2, [pc, #40]	; (8008384 <HAL_RCC_ClockConfig+0x1c0>)
 800835c:	5cd3      	ldrb	r3, [r2, r3]
 800835e:	fa21 f303 	lsr.w	r3, r1, r3
 8008362:	4a09      	ldr	r2, [pc, #36]	; (8008388 <HAL_RCC_ClockConfig+0x1c4>)
 8008364:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008366:	4b09      	ldr	r3, [pc, #36]	; (800838c <HAL_RCC_ClockConfig+0x1c8>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4618      	mov	r0, r3
 800836c:	f7fd fc38 	bl	8005be0 <HAL_InitTick>

  return HAL_OK;
 8008370:	2300      	movs	r3, #0
}
 8008372:	4618      	mov	r0, r3
 8008374:	3710      	adds	r7, #16
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	40023c00 	.word	0x40023c00
 8008380:	40023800 	.word	0x40023800
 8008384:	080172f0 	.word	0x080172f0
 8008388:	20000000 	.word	0x20000000
 800838c:	20000004 	.word	0x20000004

08008390 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008392:	b085      	sub	sp, #20
 8008394:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008396:	2300      	movs	r3, #0
 8008398:	607b      	str	r3, [r7, #4]
 800839a:	2300      	movs	r3, #0
 800839c:	60fb      	str	r3, [r7, #12]
 800839e:	2300      	movs	r3, #0
 80083a0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80083a2:	2300      	movs	r3, #0
 80083a4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80083a6:	4b63      	ldr	r3, [pc, #396]	; (8008534 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	f003 030c 	and.w	r3, r3, #12
 80083ae:	2b04      	cmp	r3, #4
 80083b0:	d007      	beq.n	80083c2 <HAL_RCC_GetSysClockFreq+0x32>
 80083b2:	2b08      	cmp	r3, #8
 80083b4:	d008      	beq.n	80083c8 <HAL_RCC_GetSysClockFreq+0x38>
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	f040 80b4 	bne.w	8008524 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80083bc:	4b5e      	ldr	r3, [pc, #376]	; (8008538 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80083be:	60bb      	str	r3, [r7, #8]
       break;
 80083c0:	e0b3      	b.n	800852a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80083c2:	4b5d      	ldr	r3, [pc, #372]	; (8008538 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80083c4:	60bb      	str	r3, [r7, #8]
      break;
 80083c6:	e0b0      	b.n	800852a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80083c8:	4b5a      	ldr	r3, [pc, #360]	; (8008534 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80083d0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80083d2:	4b58      	ldr	r3, [pc, #352]	; (8008534 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d04a      	beq.n	8008474 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80083de:	4b55      	ldr	r3, [pc, #340]	; (8008534 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	099b      	lsrs	r3, r3, #6
 80083e4:	f04f 0400 	mov.w	r4, #0
 80083e8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80083ec:	f04f 0200 	mov.w	r2, #0
 80083f0:	ea03 0501 	and.w	r5, r3, r1
 80083f4:	ea04 0602 	and.w	r6, r4, r2
 80083f8:	4629      	mov	r1, r5
 80083fa:	4632      	mov	r2, r6
 80083fc:	f04f 0300 	mov.w	r3, #0
 8008400:	f04f 0400 	mov.w	r4, #0
 8008404:	0154      	lsls	r4, r2, #5
 8008406:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800840a:	014b      	lsls	r3, r1, #5
 800840c:	4619      	mov	r1, r3
 800840e:	4622      	mov	r2, r4
 8008410:	1b49      	subs	r1, r1, r5
 8008412:	eb62 0206 	sbc.w	r2, r2, r6
 8008416:	f04f 0300 	mov.w	r3, #0
 800841a:	f04f 0400 	mov.w	r4, #0
 800841e:	0194      	lsls	r4, r2, #6
 8008420:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008424:	018b      	lsls	r3, r1, #6
 8008426:	1a5b      	subs	r3, r3, r1
 8008428:	eb64 0402 	sbc.w	r4, r4, r2
 800842c:	f04f 0100 	mov.w	r1, #0
 8008430:	f04f 0200 	mov.w	r2, #0
 8008434:	00e2      	lsls	r2, r4, #3
 8008436:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800843a:	00d9      	lsls	r1, r3, #3
 800843c:	460b      	mov	r3, r1
 800843e:	4614      	mov	r4, r2
 8008440:	195b      	adds	r3, r3, r5
 8008442:	eb44 0406 	adc.w	r4, r4, r6
 8008446:	f04f 0100 	mov.w	r1, #0
 800844a:	f04f 0200 	mov.w	r2, #0
 800844e:	02a2      	lsls	r2, r4, #10
 8008450:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008454:	0299      	lsls	r1, r3, #10
 8008456:	460b      	mov	r3, r1
 8008458:	4614      	mov	r4, r2
 800845a:	4618      	mov	r0, r3
 800845c:	4621      	mov	r1, r4
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f04f 0400 	mov.w	r4, #0
 8008464:	461a      	mov	r2, r3
 8008466:	4623      	mov	r3, r4
 8008468:	f7f8 fc26 	bl	8000cb8 <__aeabi_uldivmod>
 800846c:	4603      	mov	r3, r0
 800846e:	460c      	mov	r4, r1
 8008470:	60fb      	str	r3, [r7, #12]
 8008472:	e049      	b.n	8008508 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008474:	4b2f      	ldr	r3, [pc, #188]	; (8008534 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	099b      	lsrs	r3, r3, #6
 800847a:	f04f 0400 	mov.w	r4, #0
 800847e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008482:	f04f 0200 	mov.w	r2, #0
 8008486:	ea03 0501 	and.w	r5, r3, r1
 800848a:	ea04 0602 	and.w	r6, r4, r2
 800848e:	4629      	mov	r1, r5
 8008490:	4632      	mov	r2, r6
 8008492:	f04f 0300 	mov.w	r3, #0
 8008496:	f04f 0400 	mov.w	r4, #0
 800849a:	0154      	lsls	r4, r2, #5
 800849c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80084a0:	014b      	lsls	r3, r1, #5
 80084a2:	4619      	mov	r1, r3
 80084a4:	4622      	mov	r2, r4
 80084a6:	1b49      	subs	r1, r1, r5
 80084a8:	eb62 0206 	sbc.w	r2, r2, r6
 80084ac:	f04f 0300 	mov.w	r3, #0
 80084b0:	f04f 0400 	mov.w	r4, #0
 80084b4:	0194      	lsls	r4, r2, #6
 80084b6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80084ba:	018b      	lsls	r3, r1, #6
 80084bc:	1a5b      	subs	r3, r3, r1
 80084be:	eb64 0402 	sbc.w	r4, r4, r2
 80084c2:	f04f 0100 	mov.w	r1, #0
 80084c6:	f04f 0200 	mov.w	r2, #0
 80084ca:	00e2      	lsls	r2, r4, #3
 80084cc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80084d0:	00d9      	lsls	r1, r3, #3
 80084d2:	460b      	mov	r3, r1
 80084d4:	4614      	mov	r4, r2
 80084d6:	195b      	adds	r3, r3, r5
 80084d8:	eb44 0406 	adc.w	r4, r4, r6
 80084dc:	f04f 0100 	mov.w	r1, #0
 80084e0:	f04f 0200 	mov.w	r2, #0
 80084e4:	02a2      	lsls	r2, r4, #10
 80084e6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80084ea:	0299      	lsls	r1, r3, #10
 80084ec:	460b      	mov	r3, r1
 80084ee:	4614      	mov	r4, r2
 80084f0:	4618      	mov	r0, r3
 80084f2:	4621      	mov	r1, r4
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f04f 0400 	mov.w	r4, #0
 80084fa:	461a      	mov	r2, r3
 80084fc:	4623      	mov	r3, r4
 80084fe:	f7f8 fbdb 	bl	8000cb8 <__aeabi_uldivmod>
 8008502:	4603      	mov	r3, r0
 8008504:	460c      	mov	r4, r1
 8008506:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008508:	4b0a      	ldr	r3, [pc, #40]	; (8008534 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	0c1b      	lsrs	r3, r3, #16
 800850e:	f003 0303 	and.w	r3, r3, #3
 8008512:	3301      	adds	r3, #1
 8008514:	005b      	lsls	r3, r3, #1
 8008516:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008518:	68fa      	ldr	r2, [r7, #12]
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008520:	60bb      	str	r3, [r7, #8]
      break;
 8008522:	e002      	b.n	800852a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008524:	4b04      	ldr	r3, [pc, #16]	; (8008538 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008526:	60bb      	str	r3, [r7, #8]
      break;
 8008528:	bf00      	nop
    }
  }
  return sysclockfreq;
 800852a:	68bb      	ldr	r3, [r7, #8]
}
 800852c:	4618      	mov	r0, r3
 800852e:	3714      	adds	r7, #20
 8008530:	46bd      	mov	sp, r7
 8008532:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008534:	40023800 	.word	0x40023800
 8008538:	00f42400 	.word	0x00f42400

0800853c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800853c:	b480      	push	{r7}
 800853e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008540:	4b03      	ldr	r3, [pc, #12]	; (8008550 <HAL_RCC_GetHCLKFreq+0x14>)
 8008542:	681b      	ldr	r3, [r3, #0]
}
 8008544:	4618      	mov	r0, r3
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr
 800854e:	bf00      	nop
 8008550:	20000000 	.word	0x20000000

08008554 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008558:	f7ff fff0 	bl	800853c <HAL_RCC_GetHCLKFreq>
 800855c:	4601      	mov	r1, r0
 800855e:	4b05      	ldr	r3, [pc, #20]	; (8008574 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008560:	689b      	ldr	r3, [r3, #8]
 8008562:	0a9b      	lsrs	r3, r3, #10
 8008564:	f003 0307 	and.w	r3, r3, #7
 8008568:	4a03      	ldr	r2, [pc, #12]	; (8008578 <HAL_RCC_GetPCLK1Freq+0x24>)
 800856a:	5cd3      	ldrb	r3, [r2, r3]
 800856c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008570:	4618      	mov	r0, r3
 8008572:	bd80      	pop	{r7, pc}
 8008574:	40023800 	.word	0x40023800
 8008578:	08017300 	.word	0x08017300

0800857c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008580:	f7ff ffdc 	bl	800853c <HAL_RCC_GetHCLKFreq>
 8008584:	4601      	mov	r1, r0
 8008586:	4b05      	ldr	r3, [pc, #20]	; (800859c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008588:	689b      	ldr	r3, [r3, #8]
 800858a:	0b5b      	lsrs	r3, r3, #13
 800858c:	f003 0307 	and.w	r3, r3, #7
 8008590:	4a03      	ldr	r2, [pc, #12]	; (80085a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008592:	5cd3      	ldrb	r3, [r2, r3]
 8008594:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008598:	4618      	mov	r0, r3
 800859a:	bd80      	pop	{r7, pc}
 800859c:	40023800 	.word	0x40023800
 80085a0:	08017300 	.word	0x08017300

080085a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b088      	sub	sp, #32
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80085ac:	2300      	movs	r3, #0
 80085ae:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 80085b0:	2300      	movs	r3, #0
 80085b2:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 80085b4:	2300      	movs	r3, #0
 80085b6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 80085b8:	2300      	movs	r3, #0
 80085ba:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 80085bc:	2300      	movs	r3, #0
 80085be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d00a      	beq.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80085cc:	4b66      	ldr	r3, [pc, #408]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80085ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085d2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085da:	4963      	ldr	r1, [pc, #396]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80085dc:	4313      	orrs	r3, r2
 80085de:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d00a      	beq.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80085ee:	4b5e      	ldr	r3, [pc, #376]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80085f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085f4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085fc:	495a      	ldr	r1, [pc, #360]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80085fe:	4313      	orrs	r3, r2
 8008600:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f003 0301 	and.w	r3, r3, #1
 800860c:	2b00      	cmp	r3, #0
 800860e:	d10b      	bne.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008618:	2b00      	cmp	r3, #0
 800861a:	d105      	bne.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008624:	2b00      	cmp	r3, #0
 8008626:	d075      	beq.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008628:	4b50      	ldr	r3, [pc, #320]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800862a:	2200      	movs	r2, #0
 800862c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800862e:	f7fd fb1b 	bl	8005c68 <HAL_GetTick>
 8008632:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008634:	e008      	b.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008636:	f7fd fb17 	bl	8005c68 <HAL_GetTick>
 800863a:	4602      	mov	r2, r0
 800863c:	69fb      	ldr	r3, [r7, #28]
 800863e:	1ad3      	subs	r3, r2, r3
 8008640:	2b02      	cmp	r3, #2
 8008642:	d901      	bls.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008644:	2303      	movs	r3, #3
 8008646:	e1dc      	b.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008648:	4b47      	ldr	r3, [pc, #284]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008650:	2b00      	cmp	r3, #0
 8008652:	d1f0      	bne.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f003 0301 	and.w	r3, r3, #1
 800865c:	2b00      	cmp	r3, #0
 800865e:	d009      	beq.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	019a      	lsls	r2, r3, #6
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	071b      	lsls	r3, r3, #28
 800866c:	493e      	ldr	r1, [pc, #248]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800866e:	4313      	orrs	r3, r2
 8008670:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f003 0302 	and.w	r3, r3, #2
 800867c:	2b00      	cmp	r3, #0
 800867e:	d01f      	beq.n	80086c0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008680:	4b39      	ldr	r3, [pc, #228]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008682:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008686:	0f1b      	lsrs	r3, r3, #28
 8008688:	f003 0307 	and.w	r3, r3, #7
 800868c:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	019a      	lsls	r2, r3, #6
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	061b      	lsls	r3, r3, #24
 800869a:	431a      	orrs	r2, r3
 800869c:	69bb      	ldr	r3, [r7, #24]
 800869e:	071b      	lsls	r3, r3, #28
 80086a0:	4931      	ldr	r1, [pc, #196]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80086a2:	4313      	orrs	r3, r2
 80086a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80086a8:	4b2f      	ldr	r3, [pc, #188]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80086aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086ae:	f023 021f 	bic.w	r2, r3, #31
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6a1b      	ldr	r3, [r3, #32]
 80086b6:	3b01      	subs	r3, #1
 80086b8:	492b      	ldr	r1, [pc, #172]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80086ba:	4313      	orrs	r3, r2
 80086bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d00d      	beq.n	80086e8 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	019a      	lsls	r2, r3, #6
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	68db      	ldr	r3, [r3, #12]
 80086d6:	061b      	lsls	r3, r3, #24
 80086d8:	431a      	orrs	r2, r3
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	071b      	lsls	r3, r3, #28
 80086e0:	4921      	ldr	r1, [pc, #132]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80086e2:	4313      	orrs	r3, r2
 80086e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80086e8:	4b20      	ldr	r3, [pc, #128]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80086ea:	2201      	movs	r2, #1
 80086ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80086ee:	f7fd fabb 	bl	8005c68 <HAL_GetTick>
 80086f2:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80086f4:	e008      	b.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80086f6:	f7fd fab7 	bl	8005c68 <HAL_GetTick>
 80086fa:	4602      	mov	r2, r0
 80086fc:	69fb      	ldr	r3, [r7, #28]
 80086fe:	1ad3      	subs	r3, r2, r3
 8008700:	2b02      	cmp	r3, #2
 8008702:	d901      	bls.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008704:	2303      	movs	r3, #3
 8008706:	e17c      	b.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008708:	4b17      	ldr	r3, [pc, #92]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008710:	2b00      	cmp	r3, #0
 8008712:	d0f0      	beq.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f003 0304 	and.w	r3, r3, #4
 800871c:	2b00      	cmp	r3, #0
 800871e:	d112      	bne.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008728:	2b00      	cmp	r3, #0
 800872a:	d10c      	bne.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8008734:	2b00      	cmp	r3, #0
 8008736:	f000 80ce 	beq.w	80088d6 <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800873e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008742:	f040 80c8 	bne.w	80088d6 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008746:	4b0a      	ldr	r3, [pc, #40]	; (8008770 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008748:	2200      	movs	r2, #0
 800874a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800874c:	f7fd fa8c 	bl	8005c68 <HAL_GetTick>
 8008750:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008752:	e00f      	b.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008754:	f7fd fa88 	bl	8005c68 <HAL_GetTick>
 8008758:	4602      	mov	r2, r0
 800875a:	69fb      	ldr	r3, [r7, #28]
 800875c:	1ad3      	subs	r3, r2, r3
 800875e:	2b02      	cmp	r3, #2
 8008760:	d908      	bls.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008762:	2303      	movs	r3, #3
 8008764:	e14d      	b.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8008766:	bf00      	nop
 8008768:	40023800 	.word	0x40023800
 800876c:	42470068 	.word	0x42470068
 8008770:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008774:	4ba5      	ldr	r3, [pc, #660]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800877c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008780:	d0e8      	beq.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f003 0304 	and.w	r3, r3, #4
 800878a:	2b00      	cmp	r3, #0
 800878c:	d02e      	beq.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800878e:	4b9f      	ldr	r3, [pc, #636]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008794:	0c1b      	lsrs	r3, r3, #16
 8008796:	f003 0303 	and.w	r3, r3, #3
 800879a:	3301      	adds	r3, #1
 800879c:	005b      	lsls	r3, r3, #1
 800879e:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80087a0:	4b9a      	ldr	r3, [pc, #616]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80087a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087a6:	0f1b      	lsrs	r3, r3, #28
 80087a8:	f003 0307 	and.w	r3, r3, #7
 80087ac:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	691b      	ldr	r3, [r3, #16]
 80087b2:	019a      	lsls	r2, r3, #6
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	085b      	lsrs	r3, r3, #1
 80087b8:	3b01      	subs	r3, #1
 80087ba:	041b      	lsls	r3, r3, #16
 80087bc:	431a      	orrs	r2, r3
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	699b      	ldr	r3, [r3, #24]
 80087c2:	061b      	lsls	r3, r3, #24
 80087c4:	431a      	orrs	r2, r3
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	071b      	lsls	r3, r3, #28
 80087ca:	4990      	ldr	r1, [pc, #576]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80087cc:	4313      	orrs	r3, r2
 80087ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80087d2:	4b8e      	ldr	r3, [pc, #568]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80087d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087d8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e0:	3b01      	subs	r3, #1
 80087e2:	021b      	lsls	r3, r3, #8
 80087e4:	4989      	ldr	r1, [pc, #548]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80087e6:	4313      	orrs	r3, r2
 80087e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f003 0308 	and.w	r3, r3, #8
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d02c      	beq.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80087f8:	4b84      	ldr	r3, [pc, #528]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80087fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087fe:	0c1b      	lsrs	r3, r3, #16
 8008800:	f003 0303 	and.w	r3, r3, #3
 8008804:	3301      	adds	r3, #1
 8008806:	005b      	lsls	r3, r3, #1
 8008808:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800880a:	4b80      	ldr	r3, [pc, #512]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800880c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008810:	0e1b      	lsrs	r3, r3, #24
 8008812:	f003 030f 	and.w	r3, r3, #15
 8008816:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	691b      	ldr	r3, [r3, #16]
 800881c:	019a      	lsls	r2, r3, #6
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	085b      	lsrs	r3, r3, #1
 8008822:	3b01      	subs	r3, #1
 8008824:	041b      	lsls	r3, r3, #16
 8008826:	431a      	orrs	r2, r3
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	061b      	lsls	r3, r3, #24
 800882c:	431a      	orrs	r2, r3
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	69db      	ldr	r3, [r3, #28]
 8008832:	071b      	lsls	r3, r3, #28
 8008834:	4975      	ldr	r1, [pc, #468]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008836:	4313      	orrs	r3, r2
 8008838:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800883c:	4b73      	ldr	r3, [pc, #460]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800883e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008842:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800884a:	4970      	ldr	r1, [pc, #448]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800884c:	4313      	orrs	r3, r2
 800884e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800885a:	2b00      	cmp	r3, #0
 800885c:	d024      	beq.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8008862:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008866:	d11f      	bne.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008868:	4b68      	ldr	r3, [pc, #416]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800886a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800886e:	0e1b      	lsrs	r3, r3, #24
 8008870:	f003 030f 	and.w	r3, r3, #15
 8008874:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008876:	4b65      	ldr	r3, [pc, #404]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800887c:	0f1b      	lsrs	r3, r3, #28
 800887e:	f003 0307 	and.w	r3, r3, #7
 8008882:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	691b      	ldr	r3, [r3, #16]
 8008888:	019a      	lsls	r2, r3, #6
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	695b      	ldr	r3, [r3, #20]
 800888e:	085b      	lsrs	r3, r3, #1
 8008890:	3b01      	subs	r3, #1
 8008892:	041b      	lsls	r3, r3, #16
 8008894:	431a      	orrs	r2, r3
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	061b      	lsls	r3, r3, #24
 800889a:	431a      	orrs	r2, r3
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	071b      	lsls	r3, r3, #28
 80088a0:	495a      	ldr	r1, [pc, #360]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80088a2:	4313      	orrs	r3, r2
 80088a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80088a8:	4b59      	ldr	r3, [pc, #356]	; (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80088aa:	2201      	movs	r2, #1
 80088ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80088ae:	f7fd f9db 	bl	8005c68 <HAL_GetTick>
 80088b2:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80088b4:	e008      	b.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80088b6:	f7fd f9d7 	bl	8005c68 <HAL_GetTick>
 80088ba:	4602      	mov	r2, r0
 80088bc:	69fb      	ldr	r3, [r7, #28]
 80088be:	1ad3      	subs	r3, r2, r3
 80088c0:	2b02      	cmp	r3, #2
 80088c2:	d901      	bls.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80088c4:	2303      	movs	r3, #3
 80088c6:	e09c      	b.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80088c8:	4b50      	ldr	r3, [pc, #320]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088d4:	d1ef      	bne.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f003 0320 	and.w	r3, r3, #32
 80088de:	2b00      	cmp	r3, #0
 80088e0:	f000 8083 	beq.w	80089ea <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80088e4:	2300      	movs	r3, #0
 80088e6:	60bb      	str	r3, [r7, #8]
 80088e8:	4b48      	ldr	r3, [pc, #288]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80088ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ec:	4a47      	ldr	r2, [pc, #284]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80088ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088f2:	6413      	str	r3, [r2, #64]	; 0x40
 80088f4:	4b45      	ldr	r3, [pc, #276]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80088f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088fc:	60bb      	str	r3, [r7, #8]
 80088fe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008900:	4b44      	ldr	r3, [pc, #272]	; (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a43      	ldr	r2, [pc, #268]	; (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8008906:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800890a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800890c:	f7fd f9ac 	bl	8005c68 <HAL_GetTick>
 8008910:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008912:	e008      	b.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008914:	f7fd f9a8 	bl	8005c68 <HAL_GetTick>
 8008918:	4602      	mov	r2, r0
 800891a:	69fb      	ldr	r3, [r7, #28]
 800891c:	1ad3      	subs	r3, r2, r3
 800891e:	2b02      	cmp	r3, #2
 8008920:	d901      	bls.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 8008922:	2303      	movs	r3, #3
 8008924:	e06d      	b.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008926:	4b3b      	ldr	r3, [pc, #236]	; (8008a14 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800892e:	2b00      	cmp	r3, #0
 8008930:	d0f0      	beq.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008932:	4b36      	ldr	r3, [pc, #216]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800893a:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800893c:	69bb      	ldr	r3, [r7, #24]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d02f      	beq.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008946:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800894a:	69ba      	ldr	r2, [r7, #24]
 800894c:	429a      	cmp	r2, r3
 800894e:	d028      	beq.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008950:	4b2e      	ldr	r3, [pc, #184]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008954:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008958:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800895a:	4b2f      	ldr	r3, [pc, #188]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800895c:	2201      	movs	r2, #1
 800895e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008960:	4b2d      	ldr	r3, [pc, #180]	; (8008a18 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008962:	2200      	movs	r2, #0
 8008964:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008966:	4a29      	ldr	r2, [pc, #164]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008968:	69bb      	ldr	r3, [r7, #24]
 800896a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800896c:	4b27      	ldr	r3, [pc, #156]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800896e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008970:	f003 0301 	and.w	r3, r3, #1
 8008974:	2b01      	cmp	r3, #1
 8008976:	d114      	bne.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008978:	f7fd f976 	bl	8005c68 <HAL_GetTick>
 800897c:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800897e:	e00a      	b.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008980:	f7fd f972 	bl	8005c68 <HAL_GetTick>
 8008984:	4602      	mov	r2, r0
 8008986:	69fb      	ldr	r3, [r7, #28]
 8008988:	1ad3      	subs	r3, r2, r3
 800898a:	f241 3288 	movw	r2, #5000	; 0x1388
 800898e:	4293      	cmp	r3, r2
 8008990:	d901      	bls.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 8008992:	2303      	movs	r3, #3
 8008994:	e035      	b.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008996:	4b1d      	ldr	r3, [pc, #116]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800899a:	f003 0302 	and.w	r3, r3, #2
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d0ee      	beq.n	8008980 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089ae:	d10d      	bne.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0x428>
 80089b0:	4b16      	ldr	r3, [pc, #88]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089bc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80089c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089c4:	4911      	ldr	r1, [pc, #68]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80089c6:	4313      	orrs	r3, r2
 80089c8:	608b      	str	r3, [r1, #8]
 80089ca:	e005      	b.n	80089d8 <HAL_RCCEx_PeriphCLKConfig+0x434>
 80089cc:	4b0f      	ldr	r3, [pc, #60]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80089ce:	689b      	ldr	r3, [r3, #8]
 80089d0:	4a0e      	ldr	r2, [pc, #56]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80089d2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80089d6:	6093      	str	r3, [r2, #8]
 80089d8:	4b0c      	ldr	r3, [pc, #48]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80089da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80089e4:	4909      	ldr	r1, [pc, #36]	; (8008a0c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80089e6:	4313      	orrs	r3, r2
 80089e8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f003 0310 	and.w	r3, r3, #16
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d004      	beq.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80089fc:	4b07      	ldr	r3, [pc, #28]	; (8008a1c <HAL_RCCEx_PeriphCLKConfig+0x478>)
 80089fe:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8008a00:	2300      	movs	r3, #0
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3720      	adds	r7, #32
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	40023800 	.word	0x40023800
 8008a10:	42470070 	.word	0x42470070
 8008a14:	40007000 	.word	0x40007000
 8008a18:	42470e40 	.word	0x42470e40
 8008a1c:	424711e0 	.word	0x424711e0

08008a20 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b086      	sub	sp, #24
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f003 0301 	and.w	r3, r3, #1
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d075      	beq.n	8008b24 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008a38:	4ba2      	ldr	r3, [pc, #648]	; (8008cc4 <HAL_RCC_OscConfig+0x2a4>)
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	f003 030c 	and.w	r3, r3, #12
 8008a40:	2b04      	cmp	r3, #4
 8008a42:	d00c      	beq.n	8008a5e <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008a44:	4b9f      	ldr	r3, [pc, #636]	; (8008cc4 <HAL_RCC_OscConfig+0x2a4>)
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008a4c:	2b08      	cmp	r3, #8
 8008a4e:	d112      	bne.n	8008a76 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008a50:	4b9c      	ldr	r3, [pc, #624]	; (8008cc4 <HAL_RCC_OscConfig+0x2a4>)
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a5c:	d10b      	bne.n	8008a76 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a5e:	4b99      	ldr	r3, [pc, #612]	; (8008cc4 <HAL_RCC_OscConfig+0x2a4>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d05b      	beq.n	8008b22 <HAL_RCC_OscConfig+0x102>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d157      	bne.n	8008b22 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8008a72:	2301      	movs	r3, #1
 8008a74:	e20b      	b.n	8008e8e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a7e:	d106      	bne.n	8008a8e <HAL_RCC_OscConfig+0x6e>
 8008a80:	4b90      	ldr	r3, [pc, #576]	; (8008cc4 <HAL_RCC_OscConfig+0x2a4>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4a8f      	ldr	r2, [pc, #572]	; (8008cc4 <HAL_RCC_OscConfig+0x2a4>)
 8008a86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a8a:	6013      	str	r3, [r2, #0]
 8008a8c:	e01d      	b.n	8008aca <HAL_RCC_OscConfig+0xaa>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008a96:	d10c      	bne.n	8008ab2 <HAL_RCC_OscConfig+0x92>
 8008a98:	4b8a      	ldr	r3, [pc, #552]	; (8008cc4 <HAL_RCC_OscConfig+0x2a4>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a89      	ldr	r2, [pc, #548]	; (8008cc4 <HAL_RCC_OscConfig+0x2a4>)
 8008a9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008aa2:	6013      	str	r3, [r2, #0]
 8008aa4:	4b87      	ldr	r3, [pc, #540]	; (8008cc4 <HAL_RCC_OscConfig+0x2a4>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a86      	ldr	r2, [pc, #536]	; (8008cc4 <HAL_RCC_OscConfig+0x2a4>)
 8008aaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008aae:	6013      	str	r3, [r2, #0]
 8008ab0:	e00b      	b.n	8008aca <HAL_RCC_OscConfig+0xaa>
 8008ab2:	4b84      	ldr	r3, [pc, #528]	; (8008cc4 <HAL_RCC_OscConfig+0x2a4>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4a83      	ldr	r2, [pc, #524]	; (8008cc4 <HAL_RCC_OscConfig+0x2a4>)
 8008ab8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008abc:	6013      	str	r3, [r2, #0]
 8008abe:	4b81      	ldr	r3, [pc, #516]	; (8008cc4 <HAL_RCC_OscConfig+0x2a4>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a80      	ldr	r2, [pc, #512]	; (8008cc4 <HAL_RCC_OscConfig+0x2a4>)
 8008ac4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008ac8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d013      	beq.n	8008afa <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ad2:	f7fd f8c9 	bl	8005c68 <HAL_GetTick>
 8008ad6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008ad8:	e008      	b.n	8008aec <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008ada:	f7fd f8c5 	bl	8005c68 <HAL_GetTick>
 8008ade:	4602      	mov	r2, r0
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	1ad3      	subs	r3, r2, r3
 8008ae4:	2b64      	cmp	r3, #100	; 0x64
 8008ae6:	d901      	bls.n	8008aec <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8008ae8:	2303      	movs	r3, #3
 8008aea:	e1d0      	b.n	8008e8e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008aec:	4b75      	ldr	r3, [pc, #468]	; (8008cc4 <HAL_RCC_OscConfig+0x2a4>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d0f0      	beq.n	8008ada <HAL_RCC_OscConfig+0xba>
 8008af8:	e014      	b.n	8008b24 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008afa:	f7fd f8b5 	bl	8005c68 <HAL_GetTick>
 8008afe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008b00:	e008      	b.n	8008b14 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008b02:	f7fd f8b1 	bl	8005c68 <HAL_GetTick>
 8008b06:	4602      	mov	r2, r0
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	1ad3      	subs	r3, r2, r3
 8008b0c:	2b64      	cmp	r3, #100	; 0x64
 8008b0e:	d901      	bls.n	8008b14 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8008b10:	2303      	movs	r3, #3
 8008b12:	e1bc      	b.n	8008e8e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008b14:	4b6b      	ldr	r3, [pc, #428]	; (8008cc4 <HAL_RCC_OscConfig+0x2a4>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d1f0      	bne.n	8008b02 <HAL_RCC_OscConfig+0xe2>
 8008b20:	e000      	b.n	8008b24 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b22:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f003 0302 	and.w	r3, r3, #2
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d063      	beq.n	8008bf8 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008b30:	4b64      	ldr	r3, [pc, #400]	; (8008cc4 <HAL_RCC_OscConfig+0x2a4>)
 8008b32:	689b      	ldr	r3, [r3, #8]
 8008b34:	f003 030c 	and.w	r3, r3, #12
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d00b      	beq.n	8008b54 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008b3c:	4b61      	ldr	r3, [pc, #388]	; (8008cc4 <HAL_RCC_OscConfig+0x2a4>)
 8008b3e:	689b      	ldr	r3, [r3, #8]
 8008b40:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008b44:	2b08      	cmp	r3, #8
 8008b46:	d11c      	bne.n	8008b82 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008b48:	4b5e      	ldr	r3, [pc, #376]	; (8008cc4 <HAL_RCC_OscConfig+0x2a4>)
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d116      	bne.n	8008b82 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008b54:	4b5b      	ldr	r3, [pc, #364]	; (8008cc4 <HAL_RCC_OscConfig+0x2a4>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f003 0302 	and.w	r3, r3, #2
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d005      	beq.n	8008b6c <HAL_RCC_OscConfig+0x14c>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	68db      	ldr	r3, [r3, #12]
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d001      	beq.n	8008b6c <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8008b68:	2301      	movs	r3, #1
 8008b6a:	e190      	b.n	8008e8e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b6c:	4b55      	ldr	r3, [pc, #340]	; (8008cc4 <HAL_RCC_OscConfig+0x2a4>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	691b      	ldr	r3, [r3, #16]
 8008b78:	00db      	lsls	r3, r3, #3
 8008b7a:	4952      	ldr	r1, [pc, #328]	; (8008cc4 <HAL_RCC_OscConfig+0x2a4>)
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008b80:	e03a      	b.n	8008bf8 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	68db      	ldr	r3, [r3, #12]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d020      	beq.n	8008bcc <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008b8a:	4b4f      	ldr	r3, [pc, #316]	; (8008cc8 <HAL_RCC_OscConfig+0x2a8>)
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b90:	f7fd f86a 	bl	8005c68 <HAL_GetTick>
 8008b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b96:	e008      	b.n	8008baa <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008b98:	f7fd f866 	bl	8005c68 <HAL_GetTick>
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	1ad3      	subs	r3, r2, r3
 8008ba2:	2b02      	cmp	r3, #2
 8008ba4:	d901      	bls.n	8008baa <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8008ba6:	2303      	movs	r3, #3
 8008ba8:	e171      	b.n	8008e8e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008baa:	4b46      	ldr	r3, [pc, #280]	; (8008cc4 <HAL_RCC_OscConfig+0x2a4>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f003 0302 	and.w	r3, r3, #2
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d0f0      	beq.n	8008b98 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008bb6:	4b43      	ldr	r3, [pc, #268]	; (8008cc4 <HAL_RCC_OscConfig+0x2a4>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	691b      	ldr	r3, [r3, #16]
 8008bc2:	00db      	lsls	r3, r3, #3
 8008bc4:	493f      	ldr	r1, [pc, #252]	; (8008cc4 <HAL_RCC_OscConfig+0x2a4>)
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	600b      	str	r3, [r1, #0]
 8008bca:	e015      	b.n	8008bf8 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008bcc:	4b3e      	ldr	r3, [pc, #248]	; (8008cc8 <HAL_RCC_OscConfig+0x2a8>)
 8008bce:	2200      	movs	r2, #0
 8008bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bd2:	f7fd f849 	bl	8005c68 <HAL_GetTick>
 8008bd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008bd8:	e008      	b.n	8008bec <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008bda:	f7fd f845 	bl	8005c68 <HAL_GetTick>
 8008bde:	4602      	mov	r2, r0
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	1ad3      	subs	r3, r2, r3
 8008be4:	2b02      	cmp	r3, #2
 8008be6:	d901      	bls.n	8008bec <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8008be8:	2303      	movs	r3, #3
 8008bea:	e150      	b.n	8008e8e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008bec:	4b35      	ldr	r3, [pc, #212]	; (8008cc4 <HAL_RCC_OscConfig+0x2a4>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f003 0302 	and.w	r3, r3, #2
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d1f0      	bne.n	8008bda <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f003 0308 	and.w	r3, r3, #8
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d030      	beq.n	8008c66 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	695b      	ldr	r3, [r3, #20]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d016      	beq.n	8008c3a <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008c0c:	4b2f      	ldr	r3, [pc, #188]	; (8008ccc <HAL_RCC_OscConfig+0x2ac>)
 8008c0e:	2201      	movs	r2, #1
 8008c10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c12:	f7fd f829 	bl	8005c68 <HAL_GetTick>
 8008c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c18:	e008      	b.n	8008c2c <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008c1a:	f7fd f825 	bl	8005c68 <HAL_GetTick>
 8008c1e:	4602      	mov	r2, r0
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	1ad3      	subs	r3, r2, r3
 8008c24:	2b02      	cmp	r3, #2
 8008c26:	d901      	bls.n	8008c2c <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8008c28:	2303      	movs	r3, #3
 8008c2a:	e130      	b.n	8008e8e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c2c:	4b25      	ldr	r3, [pc, #148]	; (8008cc4 <HAL_RCC_OscConfig+0x2a4>)
 8008c2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c30:	f003 0302 	and.w	r3, r3, #2
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d0f0      	beq.n	8008c1a <HAL_RCC_OscConfig+0x1fa>
 8008c38:	e015      	b.n	8008c66 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008c3a:	4b24      	ldr	r3, [pc, #144]	; (8008ccc <HAL_RCC_OscConfig+0x2ac>)
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c40:	f7fd f812 	bl	8005c68 <HAL_GetTick>
 8008c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008c46:	e008      	b.n	8008c5a <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008c48:	f7fd f80e 	bl	8005c68 <HAL_GetTick>
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	1ad3      	subs	r3, r2, r3
 8008c52:	2b02      	cmp	r3, #2
 8008c54:	d901      	bls.n	8008c5a <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8008c56:	2303      	movs	r3, #3
 8008c58:	e119      	b.n	8008e8e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008c5a:	4b1a      	ldr	r3, [pc, #104]	; (8008cc4 <HAL_RCC_OscConfig+0x2a4>)
 8008c5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c5e:	f003 0302 	and.w	r3, r3, #2
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d1f0      	bne.n	8008c48 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f003 0304 	and.w	r3, r3, #4
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	f000 809f 	beq.w	8008db2 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008c74:	2300      	movs	r3, #0
 8008c76:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008c78:	4b12      	ldr	r3, [pc, #72]	; (8008cc4 <HAL_RCC_OscConfig+0x2a4>)
 8008c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d10f      	bne.n	8008ca4 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008c84:	2300      	movs	r3, #0
 8008c86:	60fb      	str	r3, [r7, #12]
 8008c88:	4b0e      	ldr	r3, [pc, #56]	; (8008cc4 <HAL_RCC_OscConfig+0x2a4>)
 8008c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c8c:	4a0d      	ldr	r2, [pc, #52]	; (8008cc4 <HAL_RCC_OscConfig+0x2a4>)
 8008c8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c92:	6413      	str	r3, [r2, #64]	; 0x40
 8008c94:	4b0b      	ldr	r3, [pc, #44]	; (8008cc4 <HAL_RCC_OscConfig+0x2a4>)
 8008c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c9c:	60fb      	str	r3, [r7, #12]
 8008c9e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ca4:	4b0a      	ldr	r3, [pc, #40]	; (8008cd0 <HAL_RCC_OscConfig+0x2b0>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d120      	bne.n	8008cf2 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008cb0:	4b07      	ldr	r3, [pc, #28]	; (8008cd0 <HAL_RCC_OscConfig+0x2b0>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a06      	ldr	r2, [pc, #24]	; (8008cd0 <HAL_RCC_OscConfig+0x2b0>)
 8008cb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008cbc:	f7fc ffd4 	bl	8005c68 <HAL_GetTick>
 8008cc0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008cc2:	e010      	b.n	8008ce6 <HAL_RCC_OscConfig+0x2c6>
 8008cc4:	40023800 	.word	0x40023800
 8008cc8:	42470000 	.word	0x42470000
 8008ccc:	42470e80 	.word	0x42470e80
 8008cd0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008cd4:	f7fc ffc8 	bl	8005c68 <HAL_GetTick>
 8008cd8:	4602      	mov	r2, r0
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	1ad3      	subs	r3, r2, r3
 8008cde:	2b02      	cmp	r3, #2
 8008ce0:	d901      	bls.n	8008ce6 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8008ce2:	2303      	movs	r3, #3
 8008ce4:	e0d3      	b.n	8008e8e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ce6:	4b6c      	ldr	r3, [pc, #432]	; (8008e98 <HAL_RCC_OscConfig+0x478>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d0f0      	beq.n	8008cd4 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	2b01      	cmp	r3, #1
 8008cf8:	d106      	bne.n	8008d08 <HAL_RCC_OscConfig+0x2e8>
 8008cfa:	4b68      	ldr	r3, [pc, #416]	; (8008e9c <HAL_RCC_OscConfig+0x47c>)
 8008cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cfe:	4a67      	ldr	r2, [pc, #412]	; (8008e9c <HAL_RCC_OscConfig+0x47c>)
 8008d00:	f043 0301 	orr.w	r3, r3, #1
 8008d04:	6713      	str	r3, [r2, #112]	; 0x70
 8008d06:	e01c      	b.n	8008d42 <HAL_RCC_OscConfig+0x322>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	2b05      	cmp	r3, #5
 8008d0e:	d10c      	bne.n	8008d2a <HAL_RCC_OscConfig+0x30a>
 8008d10:	4b62      	ldr	r3, [pc, #392]	; (8008e9c <HAL_RCC_OscConfig+0x47c>)
 8008d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d14:	4a61      	ldr	r2, [pc, #388]	; (8008e9c <HAL_RCC_OscConfig+0x47c>)
 8008d16:	f043 0304 	orr.w	r3, r3, #4
 8008d1a:	6713      	str	r3, [r2, #112]	; 0x70
 8008d1c:	4b5f      	ldr	r3, [pc, #380]	; (8008e9c <HAL_RCC_OscConfig+0x47c>)
 8008d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d20:	4a5e      	ldr	r2, [pc, #376]	; (8008e9c <HAL_RCC_OscConfig+0x47c>)
 8008d22:	f043 0301 	orr.w	r3, r3, #1
 8008d26:	6713      	str	r3, [r2, #112]	; 0x70
 8008d28:	e00b      	b.n	8008d42 <HAL_RCC_OscConfig+0x322>
 8008d2a:	4b5c      	ldr	r3, [pc, #368]	; (8008e9c <HAL_RCC_OscConfig+0x47c>)
 8008d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d2e:	4a5b      	ldr	r2, [pc, #364]	; (8008e9c <HAL_RCC_OscConfig+0x47c>)
 8008d30:	f023 0301 	bic.w	r3, r3, #1
 8008d34:	6713      	str	r3, [r2, #112]	; 0x70
 8008d36:	4b59      	ldr	r3, [pc, #356]	; (8008e9c <HAL_RCC_OscConfig+0x47c>)
 8008d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d3a:	4a58      	ldr	r2, [pc, #352]	; (8008e9c <HAL_RCC_OscConfig+0x47c>)
 8008d3c:	f023 0304 	bic.w	r3, r3, #4
 8008d40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	689b      	ldr	r3, [r3, #8]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d015      	beq.n	8008d76 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d4a:	f7fc ff8d 	bl	8005c68 <HAL_GetTick>
 8008d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d50:	e00a      	b.n	8008d68 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008d52:	f7fc ff89 	bl	8005c68 <HAL_GetTick>
 8008d56:	4602      	mov	r2, r0
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	1ad3      	subs	r3, r2, r3
 8008d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d901      	bls.n	8008d68 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8008d64:	2303      	movs	r3, #3
 8008d66:	e092      	b.n	8008e8e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d68:	4b4c      	ldr	r3, [pc, #304]	; (8008e9c <HAL_RCC_OscConfig+0x47c>)
 8008d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d6c:	f003 0302 	and.w	r3, r3, #2
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d0ee      	beq.n	8008d52 <HAL_RCC_OscConfig+0x332>
 8008d74:	e014      	b.n	8008da0 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d76:	f7fc ff77 	bl	8005c68 <HAL_GetTick>
 8008d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008d7c:	e00a      	b.n	8008d94 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008d7e:	f7fc ff73 	bl	8005c68 <HAL_GetTick>
 8008d82:	4602      	mov	r2, r0
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	1ad3      	subs	r3, r2, r3
 8008d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d901      	bls.n	8008d94 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8008d90:	2303      	movs	r3, #3
 8008d92:	e07c      	b.n	8008e8e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008d94:	4b41      	ldr	r3, [pc, #260]	; (8008e9c <HAL_RCC_OscConfig+0x47c>)
 8008d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d98:	f003 0302 	and.w	r3, r3, #2
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d1ee      	bne.n	8008d7e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008da0:	7dfb      	ldrb	r3, [r7, #23]
 8008da2:	2b01      	cmp	r3, #1
 8008da4:	d105      	bne.n	8008db2 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008da6:	4b3d      	ldr	r3, [pc, #244]	; (8008e9c <HAL_RCC_OscConfig+0x47c>)
 8008da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008daa:	4a3c      	ldr	r2, [pc, #240]	; (8008e9c <HAL_RCC_OscConfig+0x47c>)
 8008dac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008db0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	699b      	ldr	r3, [r3, #24]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d068      	beq.n	8008e8c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008dba:	4b38      	ldr	r3, [pc, #224]	; (8008e9c <HAL_RCC_OscConfig+0x47c>)
 8008dbc:	689b      	ldr	r3, [r3, #8]
 8008dbe:	f003 030c 	and.w	r3, r3, #12
 8008dc2:	2b08      	cmp	r3, #8
 8008dc4:	d060      	beq.n	8008e88 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	699b      	ldr	r3, [r3, #24]
 8008dca:	2b02      	cmp	r3, #2
 8008dcc:	d145      	bne.n	8008e5a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008dce:	4b34      	ldr	r3, [pc, #208]	; (8008ea0 <HAL_RCC_OscConfig+0x480>)
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dd4:	f7fc ff48 	bl	8005c68 <HAL_GetTick>
 8008dd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008dda:	e008      	b.n	8008dee <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ddc:	f7fc ff44 	bl	8005c68 <HAL_GetTick>
 8008de0:	4602      	mov	r2, r0
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	1ad3      	subs	r3, r2, r3
 8008de6:	2b02      	cmp	r3, #2
 8008de8:	d901      	bls.n	8008dee <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8008dea:	2303      	movs	r3, #3
 8008dec:	e04f      	b.n	8008e8e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008dee:	4b2b      	ldr	r3, [pc, #172]	; (8008e9c <HAL_RCC_OscConfig+0x47c>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d1f0      	bne.n	8008ddc <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	69da      	ldr	r2, [r3, #28]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6a1b      	ldr	r3, [r3, #32]
 8008e02:	431a      	orrs	r2, r3
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e08:	019b      	lsls	r3, r3, #6
 8008e0a:	431a      	orrs	r2, r3
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e10:	085b      	lsrs	r3, r3, #1
 8008e12:	3b01      	subs	r3, #1
 8008e14:	041b      	lsls	r3, r3, #16
 8008e16:	431a      	orrs	r2, r3
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e1c:	061b      	lsls	r3, r3, #24
 8008e1e:	431a      	orrs	r2, r3
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e24:	071b      	lsls	r3, r3, #28
 8008e26:	491d      	ldr	r1, [pc, #116]	; (8008e9c <HAL_RCC_OscConfig+0x47c>)
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008e2c:	4b1c      	ldr	r3, [pc, #112]	; (8008ea0 <HAL_RCC_OscConfig+0x480>)
 8008e2e:	2201      	movs	r2, #1
 8008e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e32:	f7fc ff19 	bl	8005c68 <HAL_GetTick>
 8008e36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e38:	e008      	b.n	8008e4c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008e3a:	f7fc ff15 	bl	8005c68 <HAL_GetTick>
 8008e3e:	4602      	mov	r2, r0
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	1ad3      	subs	r3, r2, r3
 8008e44:	2b02      	cmp	r3, #2
 8008e46:	d901      	bls.n	8008e4c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8008e48:	2303      	movs	r3, #3
 8008e4a:	e020      	b.n	8008e8e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e4c:	4b13      	ldr	r3, [pc, #76]	; (8008e9c <HAL_RCC_OscConfig+0x47c>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d0f0      	beq.n	8008e3a <HAL_RCC_OscConfig+0x41a>
 8008e58:	e018      	b.n	8008e8c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e5a:	4b11      	ldr	r3, [pc, #68]	; (8008ea0 <HAL_RCC_OscConfig+0x480>)
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e60:	f7fc ff02 	bl	8005c68 <HAL_GetTick>
 8008e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e66:	e008      	b.n	8008e7a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008e68:	f7fc fefe 	bl	8005c68 <HAL_GetTick>
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	1ad3      	subs	r3, r2, r3
 8008e72:	2b02      	cmp	r3, #2
 8008e74:	d901      	bls.n	8008e7a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8008e76:	2303      	movs	r3, #3
 8008e78:	e009      	b.n	8008e8e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e7a:	4b08      	ldr	r3, [pc, #32]	; (8008e9c <HAL_RCC_OscConfig+0x47c>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d1f0      	bne.n	8008e68 <HAL_RCC_OscConfig+0x448>
 8008e86:	e001      	b.n	8008e8c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	e000      	b.n	8008e8e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8008e8c:	2300      	movs	r3, #0
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3718      	adds	r7, #24
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
 8008e96:	bf00      	nop
 8008e98:	40007000 	.word	0x40007000
 8008e9c:	40023800 	.word	0x40023800
 8008ea0:	42470060 	.word	0x42470060

08008ea4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b082      	sub	sp, #8
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d101      	bne.n	8008eb6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	e022      	b.n	8008efc <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008ebc:	b2db      	uxtb	r3, r3
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d105      	bne.n	8008ece <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f7fb fd6b 	bl	80049a4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2203      	movs	r2, #3
 8008ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 f814 	bl	8008f04 <HAL_SD_InitCard>
 8008edc:	4603      	mov	r3, r0
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d001      	beq.n	8008ee6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	e00a      	b.n	8008efc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2201      	movs	r2, #1
 8008ef6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008efa:	2300      	movs	r3, #0
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3708      	adds	r7, #8
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008f04:	b5b0      	push	{r4, r5, r7, lr}
 8008f06:	b08e      	sub	sp, #56	; 0x38
 8008f08:	af04      	add	r7, sp, #16
 8008f0a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8008f10:	2300      	movs	r3, #0
 8008f12:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8008f14:	2300      	movs	r3, #0
 8008f16:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8008f20:	2376      	movs	r3, #118	; 0x76
 8008f22:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681d      	ldr	r5, [r3, #0]
 8008f28:	466c      	mov	r4, sp
 8008f2a:	f107 0314 	add.w	r3, r7, #20
 8008f2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008f32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008f36:	f107 0308 	add.w	r3, r7, #8
 8008f3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008f3c:	4628      	mov	r0, r5
 8008f3e:	f003 fa87 	bl	800c450 <SDIO_Init>
 8008f42:	4603      	mov	r3, r0
 8008f44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008f48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d001      	beq.n	8008f54 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008f50:	2301      	movs	r3, #1
 8008f52:	e031      	b.n	8008fb8 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8008f54:	4b1a      	ldr	r3, [pc, #104]	; (8008fc0 <HAL_SD_InitCard+0xbc>)
 8008f56:	2200      	movs	r2, #0
 8008f58:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f003 fabf 	bl	800c4e2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8008f64:	4b16      	ldr	r3, [pc, #88]	; (8008fc0 <HAL_SD_InitCard+0xbc>)
 8008f66:	2201      	movs	r2, #1
 8008f68:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 ffc6 	bl	8009efc <SD_PowerON>
 8008f70:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f72:	6a3b      	ldr	r3, [r7, #32]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d00b      	beq.n	8008f90 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f84:	6a3b      	ldr	r3, [r7, #32]
 8008f86:	431a      	orrs	r2, r3
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	e013      	b.n	8008fb8 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f000 fee5 	bl	8009d60 <SD_InitCard>
 8008f96:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f98:	6a3b      	ldr	r3, [r7, #32]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d00b      	beq.n	8008fb6 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008faa:	6a3b      	ldr	r3, [r7, #32]
 8008fac:	431a      	orrs	r2, r3
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	e000      	b.n	8008fb8 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8008fb6:	2300      	movs	r3, #0
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3728      	adds	r7, #40	; 0x28
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bdb0      	pop	{r4, r5, r7, pc}
 8008fc0:	422580a0 	.word	0x422580a0

08008fc4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b08c      	sub	sp, #48	; 0x30
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	60f8      	str	r0, [r7, #12]
 8008fcc:	60b9      	str	r1, [r7, #8]
 8008fce:	607a      	str	r2, [r7, #4]
 8008fd0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d107      	bne.n	8008fec <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fe0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	e0c7      	b.n	800917c <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008ff2:	b2db      	uxtb	r3, r3
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	f040 80c0 	bne.w	800917a <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009000:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	441a      	add	r2, r3
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800900a:	429a      	cmp	r2, r3
 800900c:	d907      	bls.n	800901e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009012:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800901a:	2301      	movs	r3, #1
 800901c:	e0ae      	b.n	800917c <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2203      	movs	r2, #3
 8009022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	2200      	movs	r2, #0
 800902c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800903c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009042:	4a50      	ldr	r2, [pc, #320]	; (8009184 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8009044:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800904a:	4a4f      	ldr	r2, [pc, #316]	; (8009188 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800904c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009052:	2200      	movs	r2, #0
 8009054:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	3380      	adds	r3, #128	; 0x80
 8009060:	4619      	mov	r1, r3
 8009062:	68ba      	ldr	r2, [r7, #8]
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	025b      	lsls	r3, r3, #9
 8009068:	089b      	lsrs	r3, r3, #2
 800906a:	f7fd fbef 	bl	800684c <HAL_DMA_Start_IT>
 800906e:	4603      	mov	r3, r0
 8009070:	2b00      	cmp	r3, #0
 8009072:	d017      	beq.n	80090a4 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8009082:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a40      	ldr	r2, [pc, #256]	; (800918c <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800908a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009090:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	2201      	movs	r2, #1
 800909c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80090a0:	2301      	movs	r3, #1
 80090a2:	e06b      	b.n	800917c <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80090a4:	4b3a      	ldr	r3, [pc, #232]	; (8009190 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 80090a6:	2201      	movs	r2, #1
 80090a8:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090ae:	2b01      	cmp	r3, #1
 80090b0:	d002      	beq.n	80090b8 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 80090b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b4:	025b      	lsls	r3, r3, #9
 80090b6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80090c0:	4618      	mov	r0, r3
 80090c2:	f003 faa1 	bl	800c608 <SDMMC_CmdBlockLength>
 80090c6:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 80090c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d00f      	beq.n	80090ee <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	4a2e      	ldr	r2, [pc, #184]	; (800918c <HAL_SD_ReadBlocks_DMA+0x1c8>)
 80090d4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090dc:	431a      	orrs	r2, r3
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2201      	movs	r2, #1
 80090e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 80090ea:	2301      	movs	r3, #1
 80090ec:	e046      	b.n	800917c <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80090ee:	f04f 33ff 	mov.w	r3, #4294967295
 80090f2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	025b      	lsls	r3, r3, #9
 80090f8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80090fa:	2390      	movs	r3, #144	; 0x90
 80090fc:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80090fe:	2302      	movs	r3, #2
 8009100:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009102:	2300      	movs	r3, #0
 8009104:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8009106:	2301      	movs	r3, #1
 8009108:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f107 0210 	add.w	r2, r7, #16
 8009112:	4611      	mov	r1, r2
 8009114:	4618      	mov	r0, r3
 8009116:	f003 fa4b 	bl	800c5b0 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	2b01      	cmp	r3, #1
 800911e:	d90a      	bls.n	8009136 <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2282      	movs	r2, #130	; 0x82
 8009124:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800912c:	4618      	mov	r0, r3
 800912e:	f003 faaf 	bl	800c690 <SDMMC_CmdReadMultiBlock>
 8009132:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009134:	e009      	b.n	800914a <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2281      	movs	r2, #129	; 0x81
 800913a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009142:	4618      	mov	r0, r3
 8009144:	f003 fa82 	bl	800c64c <SDMMC_CmdReadSingleBlock>
 8009148:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800914a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800914c:	2b00      	cmp	r3, #0
 800914e:	d012      	beq.n	8009176 <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a0d      	ldr	r2, [pc, #52]	; (800918c <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8009156:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800915c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800915e:	431a      	orrs	r2, r3
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	2201      	movs	r2, #1
 8009168:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2200      	movs	r2, #0
 8009170:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8009172:	2301      	movs	r3, #1
 8009174:	e002      	b.n	800917c <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 8009176:	2300      	movs	r3, #0
 8009178:	e000      	b.n	800917c <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800917a:	2302      	movs	r3, #2
  }
}
 800917c:	4618      	mov	r0, r3
 800917e:	3730      	adds	r7, #48	; 0x30
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}
 8009184:	08009b6f 	.word	0x08009b6f
 8009188:	08009be1 	.word	0x08009be1
 800918c:	004005ff 	.word	0x004005ff
 8009190:	4225858c 	.word	0x4225858c

08009194 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b08c      	sub	sp, #48	; 0x30
 8009198:	af00      	add	r7, sp, #0
 800919a:	60f8      	str	r0, [r7, #12]
 800919c:	60b9      	str	r1, [r7, #8]
 800919e:	607a      	str	r2, [r7, #4]
 80091a0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d107      	bne.n	80091bc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091b0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80091b8:	2301      	movs	r3, #1
 80091ba:	e0ca      	b.n	8009352 <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80091c2:	b2db      	uxtb	r3, r3
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	f040 80c3 	bne.w	8009350 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2200      	movs	r2, #0
 80091ce:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80091d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	441a      	add	r2, r3
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091da:	429a      	cmp	r2, r3
 80091dc:	d907      	bls.n	80091ee <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091e2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80091ea:	2301      	movs	r3, #1
 80091ec:	e0b1      	b.n	8009352 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2203      	movs	r2, #3
 80091f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	2200      	movs	r2, #0
 80091fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f042 021a 	orr.w	r2, r2, #26
 800920c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009212:	4a52      	ldr	r2, [pc, #328]	; (800935c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8009214:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800921a:	4a51      	ldr	r2, [pc, #324]	; (8009360 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800921c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009222:	2200      	movs	r2, #0
 8009224:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800922a:	2b01      	cmp	r3, #1
 800922c:	d002      	beq.n	8009234 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800922e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009230:	025b      	lsls	r3, r3, #9
 8009232:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f44f 7100 	mov.w	r1, #512	; 0x200
 800923c:	4618      	mov	r0, r3
 800923e:	f003 f9e3 	bl	800c608 <SDMMC_CmdBlockLength>
 8009242:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009246:	2b00      	cmp	r3, #0
 8009248:	d00f      	beq.n	800926a <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4a45      	ldr	r2, [pc, #276]	; (8009364 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8009250:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009258:	431a      	orrs	r2, r3
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2201      	movs	r2, #1
 8009262:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009266:	2301      	movs	r3, #1
 8009268:	e073      	b.n	8009352 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	2b01      	cmp	r3, #1
 800926e:	d90a      	bls.n	8009286 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	22a0      	movs	r2, #160	; 0xa0
 8009274:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800927c:	4618      	mov	r0, r3
 800927e:	f003 fa4b 	bl	800c718 <SDMMC_CmdWriteMultiBlock>
 8009282:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009284:	e009      	b.n	800929a <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2290      	movs	r2, #144	; 0x90
 800928a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009292:	4618      	mov	r0, r3
 8009294:	f003 fa1e 	bl	800c6d4 <SDMMC_CmdWriteSingleBlock>
 8009298:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800929a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800929c:	2b00      	cmp	r3, #0
 800929e:	d012      	beq.n	80092c6 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4a2f      	ldr	r2, [pc, #188]	; (8009364 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 80092a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ae:	431a      	orrs	r2, r3
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	2201      	movs	r2, #1
 80092b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	2200      	movs	r2, #0
 80092c0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80092c2:	2301      	movs	r3, #1
 80092c4:	e045      	b.n	8009352 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80092c6:	4b28      	ldr	r3, [pc, #160]	; (8009368 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 80092c8:	2201      	movs	r2, #1
 80092ca:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80092d0:	68b9      	ldr	r1, [r7, #8]
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	3380      	adds	r3, #128	; 0x80
 80092d8:	461a      	mov	r2, r3
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	025b      	lsls	r3, r3, #9
 80092de:	089b      	lsrs	r3, r3, #2
 80092e0:	f7fd fab4 	bl	800684c <HAL_DMA_Start_IT>
 80092e4:	4603      	mov	r3, r0
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d01a      	beq.n	8009320 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f022 021a 	bic.w	r2, r2, #26
 80092f8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	4a19      	ldr	r2, [pc, #100]	; (8009364 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8009300:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009306:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2201      	movs	r2, #1
 8009312:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2200      	movs	r2, #0
 800931a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800931c:	2301      	movs	r3, #1
 800931e:	e018      	b.n	8009352 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009320:	f04f 33ff 	mov.w	r3, #4294967295
 8009324:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	025b      	lsls	r3, r3, #9
 800932a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800932c:	2390      	movs	r3, #144	; 0x90
 800932e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8009330:	2300      	movs	r3, #0
 8009332:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009334:	2300      	movs	r3, #0
 8009336:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8009338:	2301      	movs	r3, #1
 800933a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f107 0210 	add.w	r2, r7, #16
 8009344:	4611      	mov	r1, r2
 8009346:	4618      	mov	r0, r3
 8009348:	f003 f932 	bl	800c5b0 <SDIO_ConfigData>

      return HAL_OK;
 800934c:	2300      	movs	r3, #0
 800934e:	e000      	b.n	8009352 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 8009350:	2302      	movs	r3, #2
  }
}
 8009352:	4618      	mov	r0, r3
 8009354:	3730      	adds	r7, #48	; 0x30
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}
 800935a:	bf00      	nop
 800935c:	08009b45 	.word	0x08009b45
 8009360:	08009be1 	.word	0x08009be1
 8009364:	004005ff 	.word	0x004005ff
 8009368:	4225858c 	.word	0x4225858c

0800936c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009378:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009380:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009384:	2b00      	cmp	r3, #0
 8009386:	d008      	beq.n	800939a <HAL_SD_IRQHandler+0x2e>
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	f003 0308 	and.w	r3, r3, #8
 800938e:	2b00      	cmp	r3, #0
 8009390:	d003      	beq.n	800939a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 ffc8 	bl	800a328 <SD_Read_IT>
 8009398:	e155      	b.n	8009646 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	f000 808f 	beq.w	80094c8 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80093b2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093ba:	687a      	ldr	r2, [r7, #4]
 80093bc:	6812      	ldr	r2, [r2, #0]
 80093be:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 80093c2:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80093c6:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f022 0201 	bic.w	r2, r2, #1
 80093d6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f003 0308 	and.w	r3, r3, #8
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d039      	beq.n	8009456 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f003 0302 	and.w	r3, r3, #2
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d104      	bne.n	80093f6 <HAL_SD_IRQHandler+0x8a>
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f003 0320 	and.w	r3, r3, #32
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d011      	beq.n	800941a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4618      	mov	r0, r3
 80093fc:	f003 f9ae 	bl	800c75c <SDMMC_CmdStopTransfer>
 8009400:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d008      	beq.n	800941a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	431a      	orrs	r2, r3
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 f91f 	bl	8009658 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f240 523a 	movw	r2, #1338	; 0x53a
 8009422:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2201      	movs	r2, #1
 8009428:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2200      	movs	r2, #0
 8009430:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	f003 0301 	and.w	r3, r3, #1
 8009438:	2b00      	cmp	r3, #0
 800943a:	d104      	bne.n	8009446 <HAL_SD_IRQHandler+0xda>
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	f003 0302 	and.w	r3, r3, #2
 8009442:	2b00      	cmp	r3, #0
 8009444:	d003      	beq.n	800944e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f003 fe0c 	bl	800d064 <HAL_SD_RxCpltCallback>
 800944c:	e0fb      	b.n	8009646 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f003 fdfe 	bl	800d050 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009454:	e0f7      	b.n	8009646 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800945c:	2b00      	cmp	r3, #0
 800945e:	f000 80f2 	beq.w	8009646 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	f003 0320 	and.w	r3, r3, #32
 8009468:	2b00      	cmp	r3, #0
 800946a:	d011      	beq.n	8009490 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4618      	mov	r0, r3
 8009472:	f003 f973 	bl	800c75c <SDMMC_CmdStopTransfer>
 8009476:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d008      	beq.n	8009490 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	431a      	orrs	r2, r3
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 f8e4 	bl	8009658 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f003 0301 	and.w	r3, r3, #1
 8009496:	2b00      	cmp	r3, #0
 8009498:	f040 80d5 	bne.w	8009646 <HAL_SD_IRQHandler+0x2da>
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f003 0302 	and.w	r3, r3, #2
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	f040 80cf 	bne.w	8009646 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f022 0208 	bic.w	r2, r2, #8
 80094b6:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2201      	movs	r2, #1
 80094bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f003 fdc5 	bl	800d050 <HAL_SD_TxCpltCallback>
}
 80094c6:	e0be      	b.n	8009646 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d008      	beq.n	80094e8 <HAL_SD_IRQHandler+0x17c>
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	f003 0308 	and.w	r3, r3, #8
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d003      	beq.n	80094e8 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f000 ff72 	bl	800a3ca <SD_Write_IT>
 80094e6:	e0ae      	b.n	8009646 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094ee:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	f000 80a7 	beq.w	8009646 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094fe:	f003 0302 	and.w	r3, r3, #2
 8009502:	2b00      	cmp	r3, #0
 8009504:	d005      	beq.n	8009512 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800950a:	f043 0202 	orr.w	r2, r3, #2
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009518:	f003 0308 	and.w	r3, r3, #8
 800951c:	2b00      	cmp	r3, #0
 800951e:	d005      	beq.n	800952c <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009524:	f043 0208 	orr.w	r2, r3, #8
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009532:	f003 0320 	and.w	r3, r3, #32
 8009536:	2b00      	cmp	r3, #0
 8009538:	d005      	beq.n	8009546 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800953e:	f043 0220 	orr.w	r2, r3, #32
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800954c:	f003 0310 	and.w	r3, r3, #16
 8009550:	2b00      	cmp	r3, #0
 8009552:	d005      	beq.n	8009560 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009558:	f043 0210 	orr.w	r2, r3, #16
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f240 523a 	movw	r2, #1338	; 0x53a
 8009568:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009578:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4618      	mov	r0, r3
 8009580:	f003 f8ec 	bl	800c75c <SDMMC_CmdStopTransfer>
 8009584:	4602      	mov	r2, r0
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800958a:	431a      	orrs	r2, r3
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	f003 0308 	and.w	r3, r3, #8
 8009596:	2b00      	cmp	r3, #0
 8009598:	d00a      	beq.n	80095b0 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2201      	movs	r2, #1
 800959e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2200      	movs	r2, #0
 80095a6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f000 f855 	bl	8009658 <HAL_SD_ErrorCallback>
}
 80095ae:	e04a      	b.n	8009646 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d045      	beq.n	8009646 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	f003 0310 	and.w	r3, r3, #16
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d104      	bne.n	80095ce <HAL_SD_IRQHandler+0x262>
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f003 0320 	and.w	r3, r3, #32
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d011      	beq.n	80095f2 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095d2:	4a1f      	ldr	r2, [pc, #124]	; (8009650 <HAL_SD_IRQHandler+0x2e4>)
 80095d4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095da:	4618      	mov	r0, r3
 80095dc:	f7fd f98e 	bl	80068fc <HAL_DMA_Abort_IT>
 80095e0:	4603      	mov	r3, r0
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d02f      	beq.n	8009646 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095ea:	4618      	mov	r0, r3
 80095ec:	f000 fb4a 	bl	8009c84 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80095f0:	e029      	b.n	8009646 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	f003 0301 	and.w	r3, r3, #1
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d104      	bne.n	8009606 <HAL_SD_IRQHandler+0x29a>
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f003 0302 	and.w	r3, r3, #2
 8009602:	2b00      	cmp	r3, #0
 8009604:	d011      	beq.n	800962a <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800960a:	4a12      	ldr	r2, [pc, #72]	; (8009654 <HAL_SD_IRQHandler+0x2e8>)
 800960c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009612:	4618      	mov	r0, r3
 8009614:	f7fd f972 	bl	80068fc <HAL_DMA_Abort_IT>
 8009618:	4603      	mov	r3, r0
 800961a:	2b00      	cmp	r3, #0
 800961c:	d013      	beq.n	8009646 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009622:	4618      	mov	r0, r3
 8009624:	f000 fb65 	bl	8009cf2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8009628:	e00d      	b.n	8009646 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2200      	movs	r2, #0
 800962e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2201      	movs	r2, #1
 8009634:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2200      	movs	r2, #0
 800963c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f003 fcfc 	bl	800d03c <HAL_SD_AbortCallback>
}
 8009644:	e7ff      	b.n	8009646 <HAL_SD_IRQHandler+0x2da>
 8009646:	bf00      	nop
 8009648:	3710      	adds	r7, #16
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}
 800964e:	bf00      	nop
 8009650:	08009c85 	.word	0x08009c85
 8009654:	08009cf3 	.word	0x08009cf3

08009658 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009658:	b480      	push	{r7}
 800965a:	b083      	sub	sp, #12
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009660:	bf00      	nop
 8009662:	370c      	adds	r7, #12
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr

0800966c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800966c:	b480      	push	{r7}
 800966e:	b083      	sub	sp, #12
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800967a:	0f9b      	lsrs	r3, r3, #30
 800967c:	b2da      	uxtb	r2, r3
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009686:	0e9b      	lsrs	r3, r3, #26
 8009688:	b2db      	uxtb	r3, r3
 800968a:	f003 030f 	and.w	r3, r3, #15
 800968e:	b2da      	uxtb	r2, r3
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009698:	0e1b      	lsrs	r3, r3, #24
 800969a:	b2db      	uxtb	r3, r3
 800969c:	f003 0303 	and.w	r3, r3, #3
 80096a0:	b2da      	uxtb	r2, r3
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096aa:	0c1b      	lsrs	r3, r3, #16
 80096ac:	b2da      	uxtb	r2, r3
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096b6:	0a1b      	lsrs	r3, r3, #8
 80096b8:	b2da      	uxtb	r2, r3
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096c2:	b2da      	uxtb	r2, r3
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096cc:	0d1b      	lsrs	r3, r3, #20
 80096ce:	b29a      	uxth	r2, r3
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096d8:	0c1b      	lsrs	r3, r3, #16
 80096da:	b2db      	uxtb	r3, r3
 80096dc:	f003 030f 	and.w	r3, r3, #15
 80096e0:	b2da      	uxtb	r2, r3
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096ea:	0bdb      	lsrs	r3, r3, #15
 80096ec:	b2db      	uxtb	r3, r3
 80096ee:	f003 0301 	and.w	r3, r3, #1
 80096f2:	b2da      	uxtb	r2, r3
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096fc:	0b9b      	lsrs	r3, r3, #14
 80096fe:	b2db      	uxtb	r3, r3
 8009700:	f003 0301 	and.w	r3, r3, #1
 8009704:	b2da      	uxtb	r2, r3
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800970e:	0b5b      	lsrs	r3, r3, #13
 8009710:	b2db      	uxtb	r3, r3
 8009712:	f003 0301 	and.w	r3, r3, #1
 8009716:	b2da      	uxtb	r2, r3
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009720:	0b1b      	lsrs	r3, r3, #12
 8009722:	b2db      	uxtb	r3, r3
 8009724:	f003 0301 	and.w	r3, r3, #1
 8009728:	b2da      	uxtb	r2, r3
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	2200      	movs	r2, #0
 8009732:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009738:	2b00      	cmp	r3, #0
 800973a:	d163      	bne.n	8009804 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009740:	009a      	lsls	r2, r3, #2
 8009742:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009746:	4013      	ands	r3, r2
 8009748:	687a      	ldr	r2, [r7, #4]
 800974a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800974c:	0f92      	lsrs	r2, r2, #30
 800974e:	431a      	orrs	r2, r3
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009758:	0edb      	lsrs	r3, r3, #27
 800975a:	b2db      	uxtb	r3, r3
 800975c:	f003 0307 	and.w	r3, r3, #7
 8009760:	b2da      	uxtb	r2, r3
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800976a:	0e1b      	lsrs	r3, r3, #24
 800976c:	b2db      	uxtb	r3, r3
 800976e:	f003 0307 	and.w	r3, r3, #7
 8009772:	b2da      	uxtb	r2, r3
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800977c:	0d5b      	lsrs	r3, r3, #21
 800977e:	b2db      	uxtb	r3, r3
 8009780:	f003 0307 	and.w	r3, r3, #7
 8009784:	b2da      	uxtb	r2, r3
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800978e:	0c9b      	lsrs	r3, r3, #18
 8009790:	b2db      	uxtb	r3, r3
 8009792:	f003 0307 	and.w	r3, r3, #7
 8009796:	b2da      	uxtb	r2, r3
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097a0:	0bdb      	lsrs	r3, r3, #15
 80097a2:	b2db      	uxtb	r3, r3
 80097a4:	f003 0307 	and.w	r3, r3, #7
 80097a8:	b2da      	uxtb	r2, r3
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	691b      	ldr	r3, [r3, #16]
 80097b2:	1c5a      	adds	r2, r3, #1
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	7e1b      	ldrb	r3, [r3, #24]
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	f003 0307 	and.w	r3, r3, #7
 80097c2:	3302      	adds	r3, #2
 80097c4:	2201      	movs	r2, #1
 80097c6:	fa02 f303 	lsl.w	r3, r2, r3
 80097ca:	687a      	ldr	r2, [r7, #4]
 80097cc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80097ce:	fb02 f203 	mul.w	r2, r2, r3
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	7a1b      	ldrb	r3, [r3, #8]
 80097da:	b2db      	uxtb	r3, r3
 80097dc:	f003 030f 	and.w	r3, r3, #15
 80097e0:	2201      	movs	r2, #1
 80097e2:	409a      	lsls	r2, r3
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097ec:	687a      	ldr	r2, [r7, #4]
 80097ee:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80097f0:	0a52      	lsrs	r2, r2, #9
 80097f2:	fb02 f203 	mul.w	r2, r2, r3
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009800:	661a      	str	r2, [r3, #96]	; 0x60
 8009802:	e031      	b.n	8009868 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009808:	2b01      	cmp	r3, #1
 800980a:	d11d      	bne.n	8009848 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009810:	041b      	lsls	r3, r3, #16
 8009812:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800981a:	0c1b      	lsrs	r3, r3, #16
 800981c:	431a      	orrs	r2, r3
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	691b      	ldr	r3, [r3, #16]
 8009826:	3301      	adds	r3, #1
 8009828:	029a      	lsls	r2, r3, #10
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f44f 7200 	mov.w	r2, #512	; 0x200
 800983c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	661a      	str	r2, [r3, #96]	; 0x60
 8009846:	e00f      	b.n	8009868 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4a58      	ldr	r2, [pc, #352]	; (80099b0 <HAL_SD_GetCardCSD+0x344>)
 800984e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009854:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2201      	movs	r2, #1
 8009860:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009864:	2301      	movs	r3, #1
 8009866:	e09d      	b.n	80099a4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800986c:	0b9b      	lsrs	r3, r3, #14
 800986e:	b2db      	uxtb	r3, r3
 8009870:	f003 0301 	and.w	r3, r3, #1
 8009874:	b2da      	uxtb	r2, r3
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800987e:	09db      	lsrs	r3, r3, #7
 8009880:	b2db      	uxtb	r3, r3
 8009882:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009886:	b2da      	uxtb	r2, r3
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009890:	b2db      	uxtb	r3, r3
 8009892:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009896:	b2da      	uxtb	r2, r3
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098a0:	0fdb      	lsrs	r3, r3, #31
 80098a2:	b2da      	uxtb	r2, r3
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098ac:	0f5b      	lsrs	r3, r3, #29
 80098ae:	b2db      	uxtb	r3, r3
 80098b0:	f003 0303 	and.w	r3, r3, #3
 80098b4:	b2da      	uxtb	r2, r3
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098be:	0e9b      	lsrs	r3, r3, #26
 80098c0:	b2db      	uxtb	r3, r3
 80098c2:	f003 0307 	and.w	r3, r3, #7
 80098c6:	b2da      	uxtb	r2, r3
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098d0:	0d9b      	lsrs	r3, r3, #22
 80098d2:	b2db      	uxtb	r3, r3
 80098d4:	f003 030f 	and.w	r3, r3, #15
 80098d8:	b2da      	uxtb	r2, r3
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098e2:	0d5b      	lsrs	r3, r3, #21
 80098e4:	b2db      	uxtb	r3, r3
 80098e6:	f003 0301 	and.w	r3, r3, #1
 80098ea:	b2da      	uxtb	r2, r3
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	2200      	movs	r2, #0
 80098f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098fe:	0c1b      	lsrs	r3, r3, #16
 8009900:	b2db      	uxtb	r3, r3
 8009902:	f003 0301 	and.w	r3, r3, #1
 8009906:	b2da      	uxtb	r2, r3
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009912:	0bdb      	lsrs	r3, r3, #15
 8009914:	b2db      	uxtb	r3, r3
 8009916:	f003 0301 	and.w	r3, r3, #1
 800991a:	b2da      	uxtb	r2, r3
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009926:	0b9b      	lsrs	r3, r3, #14
 8009928:	b2db      	uxtb	r3, r3
 800992a:	f003 0301 	and.w	r3, r3, #1
 800992e:	b2da      	uxtb	r2, r3
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800993a:	0b5b      	lsrs	r3, r3, #13
 800993c:	b2db      	uxtb	r3, r3
 800993e:	f003 0301 	and.w	r3, r3, #1
 8009942:	b2da      	uxtb	r2, r3
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800994e:	0b1b      	lsrs	r3, r3, #12
 8009950:	b2db      	uxtb	r3, r3
 8009952:	f003 0301 	and.w	r3, r3, #1
 8009956:	b2da      	uxtb	r2, r3
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009962:	0a9b      	lsrs	r3, r3, #10
 8009964:	b2db      	uxtb	r3, r3
 8009966:	f003 0303 	and.w	r3, r3, #3
 800996a:	b2da      	uxtb	r2, r3
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009976:	0a1b      	lsrs	r3, r3, #8
 8009978:	b2db      	uxtb	r3, r3
 800997a:	f003 0303 	and.w	r3, r3, #3
 800997e:	b2da      	uxtb	r2, r3
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800998a:	085b      	lsrs	r3, r3, #1
 800998c:	b2db      	uxtb	r3, r3
 800998e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009992:	b2da      	uxtb	r2, r3
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	2201      	movs	r2, #1
 800999e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80099a2:	2300      	movs	r3, #0
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	370c      	adds	r7, #12
 80099a8:	46bd      	mov	sp, r7
 80099aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ae:	4770      	bx	lr
 80099b0:	004005ff 	.word	0x004005ff

080099b4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b083      	sub	sp, #12
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80099fe:	2300      	movs	r3, #0
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	370c      	adds	r7, #12
 8009a04:	46bd      	mov	sp, r7
 8009a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0a:	4770      	bx	lr

08009a0c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009a0c:	b5b0      	push	{r4, r5, r7, lr}
 8009a0e:	b08e      	sub	sp, #56	; 0x38
 8009a10:	af04      	add	r7, sp, #16
 8009a12:	6078      	str	r0, [r7, #4]
 8009a14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2203      	movs	r2, #3
 8009a1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a22:	2b03      	cmp	r3, #3
 8009a24:	d02e      	beq.n	8009a84 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a2c:	d106      	bne.n	8009a3c <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a32:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	639a      	str	r2, [r3, #56]	; 0x38
 8009a3a:	e029      	b.n	8009a90 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a42:	d10a      	bne.n	8009a5a <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f000 fb0f 	bl	800a068 <SD_WideBus_Enable>
 8009a4a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a52:	431a      	orrs	r2, r3
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	639a      	str	r2, [r3, #56]	; 0x38
 8009a58:	e01a      	b.n	8009a90 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d10a      	bne.n	8009a76 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f000 fb4c 	bl	800a0fe <SD_WideBus_Disable>
 8009a66:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a6e:	431a      	orrs	r2, r3
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	639a      	str	r2, [r3, #56]	; 0x38
 8009a74:	e00c      	b.n	8009a90 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a7a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	639a      	str	r2, [r3, #56]	; 0x38
 8009a82:	e005      	b.n	8009a90 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a88:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d009      	beq.n	8009aac <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4a18      	ldr	r2, [pc, #96]	; (8009b00 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8009a9e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	e024      	b.n	8009af6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	685b      	ldr	r3, [r3, #4]
 8009ab0:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	689b      	ldr	r3, [r3, #8]
 8009ab6:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	68db      	ldr	r3, [r3, #12]
 8009abc:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	695b      	ldr	r3, [r3, #20]
 8009ac6:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	699b      	ldr	r3, [r3, #24]
 8009acc:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681d      	ldr	r5, [r3, #0]
 8009ad2:	466c      	mov	r4, sp
 8009ad4:	f107 0318 	add.w	r3, r7, #24
 8009ad8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009adc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009ae0:	f107 030c 	add.w	r3, r7, #12
 8009ae4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009ae6:	4628      	mov	r0, r5
 8009ae8:	f002 fcb2 	bl	800c450 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2201      	movs	r2, #1
 8009af0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009af4:	2300      	movs	r3, #0
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3728      	adds	r7, #40	; 0x28
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bdb0      	pop	{r4, r5, r7, pc}
 8009afe:	bf00      	nop
 8009b00:	004005ff 	.word	0x004005ff

08009b04 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b086      	sub	sp, #24
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009b10:	f107 030c 	add.w	r3, r7, #12
 8009b14:	4619      	mov	r1, r3
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f000 fa7e 	bl	800a018 <SD_SendStatus>
 8009b1c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d005      	beq.n	8009b30 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	431a      	orrs	r2, r3
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	0a5b      	lsrs	r3, r3, #9
 8009b34:	f003 030f 	and.w	r3, r3, #15
 8009b38:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009b3a:	693b      	ldr	r3, [r7, #16]
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	3718      	adds	r7, #24
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}

08009b44 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b085      	sub	sp, #20
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b50:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b60:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8009b62:	bf00      	nop
 8009b64:	3714      	adds	r7, #20
 8009b66:	46bd      	mov	sp, r7
 8009b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6c:	4770      	bx	lr

08009b6e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009b6e:	b580      	push	{r7, lr}
 8009b70:	b084      	sub	sp, #16
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b7a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b80:	2b82      	cmp	r3, #130	; 0x82
 8009b82:	d111      	bne.n	8009ba8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f002 fde7 	bl	800c75c <SDMMC_CmdStopTransfer>
 8009b8e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d008      	beq.n	8009ba8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	431a      	orrs	r2, r3
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8009ba2:	68f8      	ldr	r0, [r7, #12]
 8009ba4:	f7ff fd58 	bl	8009658 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f022 0208 	bic.w	r2, r2, #8
 8009bb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f240 523a 	movw	r2, #1338	; 0x53a
 8009bc0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	2201      	movs	r2, #1
 8009bc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8009bd0:	68f8      	ldr	r0, [r7, #12]
 8009bd2:	f003 fa47 	bl	800d064 <HAL_SD_RxCpltCallback>
#endif
}
 8009bd6:	bf00      	nop
 8009bd8:	3710      	adds	r7, #16
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}
	...

08009be0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b086      	sub	sp, #24
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bec:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f7fd f830 	bl	8006c54 <HAL_DMA_GetError>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	2b02      	cmp	r3, #2
 8009bf8:	d03e      	beq.n	8009c78 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8009bfa:	697b      	ldr	r3, [r7, #20]
 8009bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c00:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c08:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	2b01      	cmp	r3, #1
 8009c0e:	d002      	beq.n	8009c16 <SD_DMAError+0x36>
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	2b01      	cmp	r3, #1
 8009c14:	d12d      	bne.n	8009c72 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	4a19      	ldr	r2, [pc, #100]	; (8009c80 <SD_DMAError+0xa0>)
 8009c1c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009c2c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c32:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8009c3a:	6978      	ldr	r0, [r7, #20]
 8009c3c:	f7ff ff62 	bl	8009b04 <HAL_SD_GetCardState>
 8009c40:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	2b06      	cmp	r3, #6
 8009c46:	d002      	beq.n	8009c4e <SD_DMAError+0x6e>
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	2b05      	cmp	r3, #5
 8009c4c:	d10a      	bne.n	8009c64 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4618      	mov	r0, r3
 8009c54:	f002 fd82 	bl	800c75c <SDMMC_CmdStopTransfer>
 8009c58:	4602      	mov	r2, r0
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c5e:	431a      	orrs	r2, r3
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	2201      	movs	r2, #1
 8009c68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8009c72:	6978      	ldr	r0, [r7, #20]
 8009c74:	f7ff fcf0 	bl	8009658 <HAL_SD_ErrorCallback>
#endif
  }
}
 8009c78:	bf00      	nop
 8009c7a:	3718      	adds	r7, #24
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}
 8009c80:	004005ff 	.word	0x004005ff

08009c84 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b084      	sub	sp, #16
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c90:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f240 523a 	movw	r2, #1338	; 0x53a
 8009c9a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009c9c:	68f8      	ldr	r0, [r7, #12]
 8009c9e:	f7ff ff31 	bl	8009b04 <HAL_SD_GetCardState>
 8009ca2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2201      	movs	r2, #1
 8009ca8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	2b06      	cmp	r3, #6
 8009cb6:	d002      	beq.n	8009cbe <SD_DMATxAbort+0x3a>
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	2b05      	cmp	r3, #5
 8009cbc:	d10a      	bne.n	8009cd4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f002 fd4a 	bl	800c75c <SDMMC_CmdStopTransfer>
 8009cc8:	4602      	mov	r2, r0
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cce:	431a      	orrs	r2, r3
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d103      	bne.n	8009ce4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009cdc:	68f8      	ldr	r0, [r7, #12]
 8009cde:	f003 f9ad 	bl	800d03c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009ce2:	e002      	b.n	8009cea <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009ce4:	68f8      	ldr	r0, [r7, #12]
 8009ce6:	f7ff fcb7 	bl	8009658 <HAL_SD_ErrorCallback>
}
 8009cea:	bf00      	nop
 8009cec:	3710      	adds	r7, #16
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}

08009cf2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8009cf2:	b580      	push	{r7, lr}
 8009cf4:	b084      	sub	sp, #16
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cfe:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f240 523a 	movw	r2, #1338	; 0x53a
 8009d08:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009d0a:	68f8      	ldr	r0, [r7, #12]
 8009d0c:	f7ff fefa 	bl	8009b04 <HAL_SD_GetCardState>
 8009d10:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2201      	movs	r2, #1
 8009d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	2b06      	cmp	r3, #6
 8009d24:	d002      	beq.n	8009d2c <SD_DMARxAbort+0x3a>
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	2b05      	cmp	r3, #5
 8009d2a:	d10a      	bne.n	8009d42 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	4618      	mov	r0, r3
 8009d32:	f002 fd13 	bl	800c75c <SDMMC_CmdStopTransfer>
 8009d36:	4602      	mov	r2, r0
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d3c:	431a      	orrs	r2, r3
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d103      	bne.n	8009d52 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009d4a:	68f8      	ldr	r0, [r7, #12]
 8009d4c:	f003 f976 	bl	800d03c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009d50:	e002      	b.n	8009d58 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009d52:	68f8      	ldr	r0, [r7, #12]
 8009d54:	f7ff fc80 	bl	8009658 <HAL_SD_ErrorCallback>
}
 8009d58:	bf00      	nop
 8009d5a:	3710      	adds	r7, #16
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}

08009d60 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009d60:	b5b0      	push	{r4, r5, r7, lr}
 8009d62:	b094      	sub	sp, #80	; 0x50
 8009d64:	af04      	add	r7, sp, #16
 8009d66:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009d68:	2301      	movs	r3, #1
 8009d6a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4618      	mov	r0, r3
 8009d72:	f002 fbc5 	bl	800c500 <SDIO_GetPowerState>
 8009d76:	4603      	mov	r3, r0
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d102      	bne.n	8009d82 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009d7c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009d80:	e0b7      	b.n	8009ef2 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d86:	2b03      	cmp	r3, #3
 8009d88:	d02f      	beq.n	8009dea <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f002 fdee 	bl	800c970 <SDMMC_CmdSendCID>
 8009d94:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d001      	beq.n	8009da0 <SD_InitCard+0x40>
    {
      return errorstate;
 8009d9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d9e:	e0a8      	b.n	8009ef2 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	2100      	movs	r1, #0
 8009da6:	4618      	mov	r0, r3
 8009da8:	f002 fbef 	bl	800c58a <SDIO_GetResponse>
 8009dac:	4602      	mov	r2, r0
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	2104      	movs	r1, #4
 8009db8:	4618      	mov	r0, r3
 8009dba:	f002 fbe6 	bl	800c58a <SDIO_GetResponse>
 8009dbe:	4602      	mov	r2, r0
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	2108      	movs	r1, #8
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f002 fbdd 	bl	800c58a <SDIO_GetResponse>
 8009dd0:	4602      	mov	r2, r0
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	210c      	movs	r1, #12
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f002 fbd4 	bl	800c58a <SDIO_GetResponse>
 8009de2:	4602      	mov	r2, r0
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dee:	2b03      	cmp	r3, #3
 8009df0:	d00d      	beq.n	8009e0e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f107 020e 	add.w	r2, r7, #14
 8009dfa:	4611      	mov	r1, r2
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f002 fdf4 	bl	800c9ea <SDMMC_CmdSetRelAdd>
 8009e02:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d001      	beq.n	8009e0e <SD_InitCard+0xae>
    {
      return errorstate;
 8009e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e0c:	e071      	b.n	8009ef2 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e12:	2b03      	cmp	r3, #3
 8009e14:	d036      	beq.n	8009e84 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009e16:	89fb      	ldrh	r3, [r7, #14]
 8009e18:	461a      	mov	r2, r3
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681a      	ldr	r2, [r3, #0]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e26:	041b      	lsls	r3, r3, #16
 8009e28:	4619      	mov	r1, r3
 8009e2a:	4610      	mov	r0, r2
 8009e2c:	f002 fdbe 	bl	800c9ac <SDMMC_CmdSendCSD>
 8009e30:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d001      	beq.n	8009e3c <SD_InitCard+0xdc>
    {
      return errorstate;
 8009e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e3a:	e05a      	b.n	8009ef2 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	2100      	movs	r1, #0
 8009e42:	4618      	mov	r0, r3
 8009e44:	f002 fba1 	bl	800c58a <SDIO_GetResponse>
 8009e48:	4602      	mov	r2, r0
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	2104      	movs	r1, #4
 8009e54:	4618      	mov	r0, r3
 8009e56:	f002 fb98 	bl	800c58a <SDIO_GetResponse>
 8009e5a:	4602      	mov	r2, r0
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	2108      	movs	r1, #8
 8009e66:	4618      	mov	r0, r3
 8009e68:	f002 fb8f 	bl	800c58a <SDIO_GetResponse>
 8009e6c:	4602      	mov	r2, r0
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	210c      	movs	r1, #12
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f002 fb86 	bl	800c58a <SDIO_GetResponse>
 8009e7e:	4602      	mov	r2, r0
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	2104      	movs	r1, #4
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f002 fb7d 	bl	800c58a <SDIO_GetResponse>
 8009e90:	4603      	mov	r3, r0
 8009e92:	0d1a      	lsrs	r2, r3, #20
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009e98:	f107 0310 	add.w	r3, r7, #16
 8009e9c:	4619      	mov	r1, r3
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f7ff fbe4 	bl	800966c <HAL_SD_GetCardCSD>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d002      	beq.n	8009eb0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009eaa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009eae:	e020      	b.n	8009ef2 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6819      	ldr	r1, [r3, #0]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009eb8:	041b      	lsls	r3, r3, #16
 8009eba:	f04f 0400 	mov.w	r4, #0
 8009ebe:	461a      	mov	r2, r3
 8009ec0:	4623      	mov	r3, r4
 8009ec2:	4608      	mov	r0, r1
 8009ec4:	f002 fc6c 	bl	800c7a0 <SDMMC_CmdSelDesel>
 8009ec8:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d001      	beq.n	8009ed4 <SD_InitCard+0x174>
  {
    return errorstate;
 8009ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ed2:	e00e      	b.n	8009ef2 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681d      	ldr	r5, [r3, #0]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	466c      	mov	r4, sp
 8009edc:	f103 0210 	add.w	r2, r3, #16
 8009ee0:	ca07      	ldmia	r2, {r0, r1, r2}
 8009ee2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009ee6:	3304      	adds	r3, #4
 8009ee8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009eea:	4628      	mov	r0, r5
 8009eec:	f002 fab0 	bl	800c450 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009ef0:	2300      	movs	r3, #0
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3740      	adds	r7, #64	; 0x40
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009efc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b086      	sub	sp, #24
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009f04:	2300      	movs	r3, #0
 8009f06:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	617b      	str	r3, [r7, #20]
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	4618      	mov	r0, r3
 8009f16:	f002 fc66 	bl	800c7e6 <SDMMC_CmdGoIdleState>
 8009f1a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d001      	beq.n	8009f26 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	e072      	b.n	800a00c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f002 fc79 	bl	800c822 <SDMMC_CmdOperCond>
 8009f30:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d00d      	beq.n	8009f54 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	4618      	mov	r0, r3
 8009f44:	f002 fc4f 	bl	800c7e6 <SDMMC_CmdGoIdleState>
 8009f48:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d004      	beq.n	8009f5a <SD_PowerON+0x5e>
    {
      return errorstate;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	e05b      	b.n	800a00c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2201      	movs	r2, #1
 8009f58:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f5e:	2b01      	cmp	r3, #1
 8009f60:	d137      	bne.n	8009fd2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	2100      	movs	r1, #0
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f002 fc79 	bl	800c860 <SDMMC_CmdAppCommand>
 8009f6e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d02d      	beq.n	8009fd2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009f76:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009f7a:	e047      	b.n	800a00c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	2100      	movs	r1, #0
 8009f82:	4618      	mov	r0, r3
 8009f84:	f002 fc6c 	bl	800c860 <SDMMC_CmdAppCommand>
 8009f88:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d001      	beq.n	8009f94 <SD_PowerON+0x98>
    {
      return errorstate;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	e03b      	b.n	800a00c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	491e      	ldr	r1, [pc, #120]	; (800a014 <SD_PowerON+0x118>)
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f002 fc82 	bl	800c8a4 <SDMMC_CmdAppOperCommand>
 8009fa0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d002      	beq.n	8009fae <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009fa8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009fac:	e02e      	b.n	800a00c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	2100      	movs	r1, #0
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f002 fae8 	bl	800c58a <SDIO_GetResponse>
 8009fba:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	0fdb      	lsrs	r3, r3, #31
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	d101      	bne.n	8009fc8 <SD_PowerON+0xcc>
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	e000      	b.n	8009fca <SD_PowerON+0xce>
 8009fc8:	2300      	movs	r3, #0
 8009fca:	613b      	str	r3, [r7, #16]

    count++;
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	3301      	adds	r3, #1
 8009fd0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d802      	bhi.n	8009fe2 <SD_PowerON+0xe6>
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d0cc      	beq.n	8009f7c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d902      	bls.n	8009ff2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009fec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009ff0:	e00c      	b.n	800a00c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d003      	beq.n	800a004 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2201      	movs	r2, #1
 800a000:	645a      	str	r2, [r3, #68]	; 0x44
 800a002:	e002      	b.n	800a00a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2200      	movs	r2, #0
 800a008:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a00a:	2300      	movs	r3, #0
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3718      	adds	r7, #24
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}
 800a014:	c1100000 	.word	0xc1100000

0800a018 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b084      	sub	sp, #16
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d102      	bne.n	800a02e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a028:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a02c:	e018      	b.n	800a060 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681a      	ldr	r2, [r3, #0]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a036:	041b      	lsls	r3, r3, #16
 800a038:	4619      	mov	r1, r3
 800a03a:	4610      	mov	r0, r2
 800a03c:	f002 fcf6 	bl	800ca2c <SDMMC_CmdSendStatus>
 800a040:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d001      	beq.n	800a04c <SD_SendStatus+0x34>
  {
    return errorstate;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	e009      	b.n	800a060 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	2100      	movs	r1, #0
 800a052:	4618      	mov	r0, r3
 800a054:	f002 fa99 	bl	800c58a <SDIO_GetResponse>
 800a058:	4602      	mov	r2, r0
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a05e:	2300      	movs	r3, #0
}
 800a060:	4618      	mov	r0, r3
 800a062:	3710      	adds	r7, #16
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}

0800a068 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b086      	sub	sp, #24
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a070:	2300      	movs	r3, #0
 800a072:	60fb      	str	r3, [r7, #12]
 800a074:	2300      	movs	r3, #0
 800a076:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	2100      	movs	r1, #0
 800a07e:	4618      	mov	r0, r3
 800a080:	f002 fa83 	bl	800c58a <SDIO_GetResponse>
 800a084:	4603      	mov	r3, r0
 800a086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a08a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a08e:	d102      	bne.n	800a096 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a090:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a094:	e02f      	b.n	800a0f6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a096:	f107 030c 	add.w	r3, r7, #12
 800a09a:	4619      	mov	r1, r3
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f000 f879 	bl	800a194 <SD_FindSCR>
 800a0a2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d001      	beq.n	800a0ae <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	e023      	b.n	800a0f6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d01c      	beq.n	800a0f2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681a      	ldr	r2, [r3, #0]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0c0:	041b      	lsls	r3, r3, #16
 800a0c2:	4619      	mov	r1, r3
 800a0c4:	4610      	mov	r0, r2
 800a0c6:	f002 fbcb 	bl	800c860 <SDMMC_CmdAppCommand>
 800a0ca:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d001      	beq.n	800a0d6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	e00f      	b.n	800a0f6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	2102      	movs	r1, #2
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f002 fc04 	bl	800c8ea <SDMMC_CmdBusWidth>
 800a0e2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d001      	beq.n	800a0ee <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a0ea:	697b      	ldr	r3, [r7, #20]
 800a0ec:	e003      	b.n	800a0f6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	e001      	b.n	800a0f6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a0f2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3718      	adds	r7, #24
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}

0800a0fe <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a0fe:	b580      	push	{r7, lr}
 800a100:	b086      	sub	sp, #24
 800a102:	af00      	add	r7, sp, #0
 800a104:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a106:	2300      	movs	r3, #0
 800a108:	60fb      	str	r3, [r7, #12]
 800a10a:	2300      	movs	r3, #0
 800a10c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	2100      	movs	r1, #0
 800a114:	4618      	mov	r0, r3
 800a116:	f002 fa38 	bl	800c58a <SDIO_GetResponse>
 800a11a:	4603      	mov	r3, r0
 800a11c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a120:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a124:	d102      	bne.n	800a12c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a126:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a12a:	e02f      	b.n	800a18c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a12c:	f107 030c 	add.w	r3, r7, #12
 800a130:	4619      	mov	r1, r3
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f000 f82e 	bl	800a194 <SD_FindSCR>
 800a138:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d001      	beq.n	800a144 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	e023      	b.n	800a18c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d01c      	beq.n	800a188 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681a      	ldr	r2, [r3, #0]
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a156:	041b      	lsls	r3, r3, #16
 800a158:	4619      	mov	r1, r3
 800a15a:	4610      	mov	r0, r2
 800a15c:	f002 fb80 	bl	800c860 <SDMMC_CmdAppCommand>
 800a160:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d001      	beq.n	800a16c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a168:	697b      	ldr	r3, [r7, #20]
 800a16a:	e00f      	b.n	800a18c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	2100      	movs	r1, #0
 800a172:	4618      	mov	r0, r3
 800a174:	f002 fbb9 	bl	800c8ea <SDMMC_CmdBusWidth>
 800a178:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d001      	beq.n	800a184 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	e003      	b.n	800a18c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a184:	2300      	movs	r3, #0
 800a186:	e001      	b.n	800a18c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a188:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3718      	adds	r7, #24
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}

0800a194 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a194:	b590      	push	{r4, r7, lr}
 800a196:	b08f      	sub	sp, #60	; 0x3c
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
 800a19c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a19e:	f7fb fd63 	bl	8005c68 <HAL_GetTick>
 800a1a2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	60bb      	str	r3, [r7, #8]
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	2108      	movs	r1, #8
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f002 fa24 	bl	800c608 <SDMMC_CmdBlockLength>
 800a1c0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d001      	beq.n	800a1cc <SD_FindSCR+0x38>
  {
    return errorstate;
 800a1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ca:	e0a9      	b.n	800a320 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681a      	ldr	r2, [r3, #0]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1d4:	041b      	lsls	r3, r3, #16
 800a1d6:	4619      	mov	r1, r3
 800a1d8:	4610      	mov	r0, r2
 800a1da:	f002 fb41 	bl	800c860 <SDMMC_CmdAppCommand>
 800a1de:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d001      	beq.n	800a1ea <SD_FindSCR+0x56>
  {
    return errorstate;
 800a1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e8:	e09a      	b.n	800a320 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a1ea:	f04f 33ff 	mov.w	r3, #4294967295
 800a1ee:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a1f0:	2308      	movs	r3, #8
 800a1f2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800a1f4:	2330      	movs	r3, #48	; 0x30
 800a1f6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800a1f8:	2302      	movs	r3, #2
 800a1fa:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800a200:	2301      	movs	r3, #1
 800a202:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f107 0210 	add.w	r2, r7, #16
 800a20c:	4611      	mov	r1, r2
 800a20e:	4618      	mov	r0, r3
 800a210:	f002 f9ce 	bl	800c5b0 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	4618      	mov	r0, r3
 800a21a:	f002 fb88 	bl	800c92e <SDMMC_CmdSendSCR>
 800a21e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a222:	2b00      	cmp	r3, #0
 800a224:	d022      	beq.n	800a26c <SD_FindSCR+0xd8>
  {
    return errorstate;
 800a226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a228:	e07a      	b.n	800a320 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a230:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a234:	2b00      	cmp	r3, #0
 800a236:	d00e      	beq.n	800a256 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6819      	ldr	r1, [r3, #0]
 800a23c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a23e:	009b      	lsls	r3, r3, #2
 800a240:	f107 0208 	add.w	r2, r7, #8
 800a244:	18d4      	adds	r4, r2, r3
 800a246:	4608      	mov	r0, r1
 800a248:	f002 f92d 	bl	800c4a6 <SDIO_ReadFIFO>
 800a24c:	4603      	mov	r3, r0
 800a24e:	6023      	str	r3, [r4, #0]
      index++;
 800a250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a252:	3301      	adds	r3, #1
 800a254:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a256:	f7fb fd07 	bl	8005c68 <HAL_GetTick>
 800a25a:	4602      	mov	r2, r0
 800a25c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a25e:	1ad3      	subs	r3, r2, r3
 800a260:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a264:	d102      	bne.n	800a26c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a266:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a26a:	e059      	b.n	800a320 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a272:	f240 432a 	movw	r3, #1066	; 0x42a
 800a276:	4013      	ands	r3, r2
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d0d6      	beq.n	800a22a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a282:	f003 0308 	and.w	r3, r3, #8
 800a286:	2b00      	cmp	r3, #0
 800a288:	d005      	beq.n	800a296 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	2208      	movs	r2, #8
 800a290:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a292:	2308      	movs	r3, #8
 800a294:	e044      	b.n	800a320 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a29c:	f003 0302 	and.w	r3, r3, #2
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d005      	beq.n	800a2b0 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	2202      	movs	r2, #2
 800a2aa:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a2ac:	2302      	movs	r3, #2
 800a2ae:	e037      	b.n	800a320 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2b6:	f003 0320 	and.w	r3, r3, #32
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d005      	beq.n	800a2ca <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	2220      	movs	r2, #32
 800a2c4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a2c6:	2320      	movs	r3, #32
 800a2c8:	e02a      	b.n	800a320 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f240 523a 	movw	r2, #1338	; 0x53a
 800a2d2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	061a      	lsls	r2, r3, #24
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	021b      	lsls	r3, r3, #8
 800a2dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a2e0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	0a1b      	lsrs	r3, r3, #8
 800a2e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a2ea:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	0e1b      	lsrs	r3, r3, #24
 800a2f0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a2f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2f4:	601a      	str	r2, [r3, #0]
    scr++;
 800a2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2f8:	3304      	adds	r3, #4
 800a2fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	061a      	lsls	r2, r3, #24
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	021b      	lsls	r3, r3, #8
 800a304:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a308:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	0a1b      	lsrs	r3, r3, #8
 800a30e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a312:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	0e1b      	lsrs	r3, r3, #24
 800a318:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a31c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a31e:	2300      	movs	r3, #0
}
 800a320:	4618      	mov	r0, r3
 800a322:	373c      	adds	r7, #60	; 0x3c
 800a324:	46bd      	mov	sp, r7
 800a326:	bd90      	pop	{r4, r7, pc}

0800a328 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b086      	sub	sp, #24
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a334:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a33a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d03f      	beq.n	800a3c2 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800a342:	2300      	movs	r3, #0
 800a344:	617b      	str	r3, [r7, #20]
 800a346:	e033      	b.n	800a3b0 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	4618      	mov	r0, r3
 800a34e:	f002 f8aa 	bl	800c4a6 <SDIO_ReadFIFO>
 800a352:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	b2da      	uxtb	r2, r3
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	3301      	adds	r3, #1
 800a360:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	3b01      	subs	r3, #1
 800a366:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	0a1b      	lsrs	r3, r3, #8
 800a36c:	b2da      	uxtb	r2, r3
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	3301      	adds	r3, #1
 800a376:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	3b01      	subs	r3, #1
 800a37c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	0c1b      	lsrs	r3, r3, #16
 800a382:	b2da      	uxtb	r2, r3
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	3301      	adds	r3, #1
 800a38c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	3b01      	subs	r3, #1
 800a392:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	0e1b      	lsrs	r3, r3, #24
 800a398:	b2da      	uxtb	r2, r3
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	3301      	adds	r3, #1
 800a3a2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	3b01      	subs	r3, #1
 800a3a8:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	3301      	adds	r3, #1
 800a3ae:	617b      	str	r3, [r7, #20]
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	2b07      	cmp	r3, #7
 800a3b4:	d9c8      	bls.n	800a348 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	68fa      	ldr	r2, [r7, #12]
 800a3ba:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	693a      	ldr	r2, [r7, #16]
 800a3c0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800a3c2:	bf00      	nop
 800a3c4:	3718      	adds	r7, #24
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}

0800a3ca <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800a3ca:	b580      	push	{r7, lr}
 800a3cc:	b086      	sub	sp, #24
 800a3ce:	af00      	add	r7, sp, #0
 800a3d0:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6a1b      	ldr	r3, [r3, #32]
 800a3d6:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3dc:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a3de:	693b      	ldr	r3, [r7, #16]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d043      	beq.n	800a46c <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	617b      	str	r3, [r7, #20]
 800a3e8:	e037      	b.n	800a45a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	781b      	ldrb	r3, [r3, #0]
 800a3ee:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	3301      	adds	r3, #1
 800a3f4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	3b01      	subs	r3, #1
 800a3fa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	781b      	ldrb	r3, [r3, #0]
 800a400:	021a      	lsls	r2, r3, #8
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	4313      	orrs	r3, r2
 800a406:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	3301      	adds	r3, #1
 800a40c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	3b01      	subs	r3, #1
 800a412:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	781b      	ldrb	r3, [r3, #0]
 800a418:	041a      	lsls	r2, r3, #16
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	4313      	orrs	r3, r2
 800a41e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	3301      	adds	r3, #1
 800a424:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	3b01      	subs	r3, #1
 800a42a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	781b      	ldrb	r3, [r3, #0]
 800a430:	061a      	lsls	r2, r3, #24
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	4313      	orrs	r3, r2
 800a436:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	3301      	adds	r3, #1
 800a43c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	3b01      	subs	r3, #1
 800a442:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f107 0208 	add.w	r2, r7, #8
 800a44c:	4611      	mov	r1, r2
 800a44e:	4618      	mov	r0, r3
 800a450:	f002 f836 	bl	800c4c0 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	3301      	adds	r3, #1
 800a458:	617b      	str	r3, [r7, #20]
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	2b07      	cmp	r3, #7
 800a45e:	d9c4      	bls.n	800a3ea <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	68fa      	ldr	r2, [r7, #12]
 800a464:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	693a      	ldr	r2, [r7, #16]
 800a46a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800a46c:	bf00      	nop
 800a46e:	3718      	adds	r7, #24
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}

0800a474 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b082      	sub	sp, #8
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d101      	bne.n	800a486 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a482:	2301      	movs	r3, #1
 800a484:	e056      	b.n	800a534 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2200      	movs	r2, #0
 800a48a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a492:	b2db      	uxtb	r3, r3
 800a494:	2b00      	cmp	r3, #0
 800a496:	d106      	bne.n	800a4a6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2200      	movs	r2, #0
 800a49c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f7fa fb71 	bl	8004b88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2202      	movs	r2, #2
 800a4aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	681a      	ldr	r2, [r3, #0]
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a4bc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	685a      	ldr	r2, [r3, #4]
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	689b      	ldr	r3, [r3, #8]
 800a4c6:	431a      	orrs	r2, r3
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	68db      	ldr	r3, [r3, #12]
 800a4cc:	431a      	orrs	r2, r3
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	691b      	ldr	r3, [r3, #16]
 800a4d2:	431a      	orrs	r2, r3
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	695b      	ldr	r3, [r3, #20]
 800a4d8:	431a      	orrs	r2, r3
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	699b      	ldr	r3, [r3, #24]
 800a4de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a4e2:	431a      	orrs	r2, r3
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	69db      	ldr	r3, [r3, #28]
 800a4e8:	431a      	orrs	r2, r3
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6a1b      	ldr	r3, [r3, #32]
 800a4ee:	ea42 0103 	orr.w	r1, r2, r3
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	430a      	orrs	r2, r1
 800a4fc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	699b      	ldr	r3, [r3, #24]
 800a502:	0c1b      	lsrs	r3, r3, #16
 800a504:	f003 0104 	and.w	r1, r3, #4
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	430a      	orrs	r2, r1
 800a512:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	69da      	ldr	r2, [r3, #28]
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a522:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2200      	movs	r2, #0
 800a528:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2201      	movs	r2, #1
 800a52e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a532:	2300      	movs	r3, #0
}
 800a534:	4618      	mov	r0, r3
 800a536:	3708      	adds	r7, #8
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}

0800a53c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b088      	sub	sp, #32
 800a540:	af00      	add	r7, sp, #0
 800a542:	60f8      	str	r0, [r7, #12]
 800a544:	60b9      	str	r1, [r7, #8]
 800a546:	603b      	str	r3, [r7, #0]
 800a548:	4613      	mov	r3, r2
 800a54a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a54c:	2300      	movs	r3, #0
 800a54e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a556:	2b01      	cmp	r3, #1
 800a558:	d101      	bne.n	800a55e <HAL_SPI_Transmit+0x22>
 800a55a:	2302      	movs	r3, #2
 800a55c:	e11e      	b.n	800a79c <HAL_SPI_Transmit+0x260>
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	2201      	movs	r2, #1
 800a562:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a566:	f7fb fb7f 	bl	8005c68 <HAL_GetTick>
 800a56a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a56c:	88fb      	ldrh	r3, [r7, #6]
 800a56e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a576:	b2db      	uxtb	r3, r3
 800a578:	2b01      	cmp	r3, #1
 800a57a:	d002      	beq.n	800a582 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a57c:	2302      	movs	r3, #2
 800a57e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a580:	e103      	b.n	800a78a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d002      	beq.n	800a58e <HAL_SPI_Transmit+0x52>
 800a588:	88fb      	ldrh	r3, [r7, #6]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d102      	bne.n	800a594 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a58e:	2301      	movs	r3, #1
 800a590:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a592:	e0fa      	b.n	800a78a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	2203      	movs	r2, #3
 800a598:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	68ba      	ldr	r2, [r7, #8]
 800a5a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	88fa      	ldrh	r2, [r7, #6]
 800a5ac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	88fa      	ldrh	r2, [r7, #6]
 800a5b2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	689b      	ldr	r3, [r3, #8]
 800a5d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5da:	d107      	bne.n	800a5ec <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	681a      	ldr	r2, [r3, #0]
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a5ea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5f6:	2b40      	cmp	r3, #64	; 0x40
 800a5f8:	d007      	beq.n	800a60a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	681a      	ldr	r2, [r3, #0]
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a608:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	68db      	ldr	r3, [r3, #12]
 800a60e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a612:	d14b      	bne.n	800a6ac <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	685b      	ldr	r3, [r3, #4]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d002      	beq.n	800a622 <HAL_SPI_Transmit+0xe6>
 800a61c:	8afb      	ldrh	r3, [r7, #22]
 800a61e:	2b01      	cmp	r3, #1
 800a620:	d13e      	bne.n	800a6a0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a626:	881a      	ldrh	r2, [r3, #0]
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a632:	1c9a      	adds	r2, r3, #2
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a63c:	b29b      	uxth	r3, r3
 800a63e:	3b01      	subs	r3, #1
 800a640:	b29a      	uxth	r2, r3
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a646:	e02b      	b.n	800a6a0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	689b      	ldr	r3, [r3, #8]
 800a64e:	f003 0302 	and.w	r3, r3, #2
 800a652:	2b02      	cmp	r3, #2
 800a654:	d112      	bne.n	800a67c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a65a:	881a      	ldrh	r2, [r3, #0]
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a666:	1c9a      	adds	r2, r3, #2
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a670:	b29b      	uxth	r3, r3
 800a672:	3b01      	subs	r3, #1
 800a674:	b29a      	uxth	r2, r3
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	86da      	strh	r2, [r3, #54]	; 0x36
 800a67a:	e011      	b.n	800a6a0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a67c:	f7fb faf4 	bl	8005c68 <HAL_GetTick>
 800a680:	4602      	mov	r2, r0
 800a682:	69bb      	ldr	r3, [r7, #24]
 800a684:	1ad3      	subs	r3, r2, r3
 800a686:	683a      	ldr	r2, [r7, #0]
 800a688:	429a      	cmp	r2, r3
 800a68a:	d803      	bhi.n	800a694 <HAL_SPI_Transmit+0x158>
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a692:	d102      	bne.n	800a69a <HAL_SPI_Transmit+0x15e>
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d102      	bne.n	800a6a0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800a69a:	2303      	movs	r3, #3
 800a69c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a69e:	e074      	b.n	800a78a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a6a4:	b29b      	uxth	r3, r3
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d1ce      	bne.n	800a648 <HAL_SPI_Transmit+0x10c>
 800a6aa:	e04c      	b.n	800a746 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	685b      	ldr	r3, [r3, #4]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d002      	beq.n	800a6ba <HAL_SPI_Transmit+0x17e>
 800a6b4:	8afb      	ldrh	r3, [r7, #22]
 800a6b6:	2b01      	cmp	r3, #1
 800a6b8:	d140      	bne.n	800a73c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	330c      	adds	r3, #12
 800a6c4:	7812      	ldrb	r2, [r2, #0]
 800a6c6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6cc:	1c5a      	adds	r2, r3, #1
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a6d6:	b29b      	uxth	r3, r3
 800a6d8:	3b01      	subs	r3, #1
 800a6da:	b29a      	uxth	r2, r3
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a6e0:	e02c      	b.n	800a73c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	689b      	ldr	r3, [r3, #8]
 800a6e8:	f003 0302 	and.w	r3, r3, #2
 800a6ec:	2b02      	cmp	r3, #2
 800a6ee:	d113      	bne.n	800a718 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	330c      	adds	r3, #12
 800a6fa:	7812      	ldrb	r2, [r2, #0]
 800a6fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a702:	1c5a      	adds	r2, r3, #1
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a70c:	b29b      	uxth	r3, r3
 800a70e:	3b01      	subs	r3, #1
 800a710:	b29a      	uxth	r2, r3
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	86da      	strh	r2, [r3, #54]	; 0x36
 800a716:	e011      	b.n	800a73c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a718:	f7fb faa6 	bl	8005c68 <HAL_GetTick>
 800a71c:	4602      	mov	r2, r0
 800a71e:	69bb      	ldr	r3, [r7, #24]
 800a720:	1ad3      	subs	r3, r2, r3
 800a722:	683a      	ldr	r2, [r7, #0]
 800a724:	429a      	cmp	r2, r3
 800a726:	d803      	bhi.n	800a730 <HAL_SPI_Transmit+0x1f4>
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a72e:	d102      	bne.n	800a736 <HAL_SPI_Transmit+0x1fa>
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d102      	bne.n	800a73c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800a736:	2303      	movs	r3, #3
 800a738:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a73a:	e026      	b.n	800a78a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a740:	b29b      	uxth	r3, r3
 800a742:	2b00      	cmp	r3, #0
 800a744:	d1cd      	bne.n	800a6e2 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a746:	69ba      	ldr	r2, [r7, #24]
 800a748:	6839      	ldr	r1, [r7, #0]
 800a74a:	68f8      	ldr	r0, [r7, #12]
 800a74c:	f000 fba4 	bl	800ae98 <SPI_EndRxTxTransaction>
 800a750:	4603      	mov	r3, r0
 800a752:	2b00      	cmp	r3, #0
 800a754:	d002      	beq.n	800a75c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	2220      	movs	r2, #32
 800a75a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	689b      	ldr	r3, [r3, #8]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d10a      	bne.n	800a77a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a764:	2300      	movs	r3, #0
 800a766:	613b      	str	r3, [r7, #16]
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	68db      	ldr	r3, [r3, #12]
 800a76e:	613b      	str	r3, [r7, #16]
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	689b      	ldr	r3, [r3, #8]
 800a776:	613b      	str	r3, [r7, #16]
 800a778:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d002      	beq.n	800a788 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800a782:	2301      	movs	r3, #1
 800a784:	77fb      	strb	r3, [r7, #31]
 800a786:	e000      	b.n	800a78a <HAL_SPI_Transmit+0x24e>
  }

error:
 800a788:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	2201      	movs	r2, #1
 800a78e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	2200      	movs	r2, #0
 800a796:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a79a:	7ffb      	ldrb	r3, [r7, #31]
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3720      	adds	r7, #32
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}

0800a7a4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b088      	sub	sp, #32
 800a7a8:	af02      	add	r7, sp, #8
 800a7aa:	60f8      	str	r0, [r7, #12]
 800a7ac:	60b9      	str	r1, [r7, #8]
 800a7ae:	603b      	str	r3, [r7, #0]
 800a7b0:	4613      	mov	r3, r2
 800a7b2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	685b      	ldr	r3, [r3, #4]
 800a7bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a7c0:	d112      	bne.n	800a7e8 <HAL_SPI_Receive+0x44>
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	689b      	ldr	r3, [r3, #8]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d10e      	bne.n	800a7e8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	2204      	movs	r2, #4
 800a7ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800a7d2:	88fa      	ldrh	r2, [r7, #6]
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	9300      	str	r3, [sp, #0]
 800a7d8:	4613      	mov	r3, r2
 800a7da:	68ba      	ldr	r2, [r7, #8]
 800a7dc:	68b9      	ldr	r1, [r7, #8]
 800a7de:	68f8      	ldr	r0, [r7, #12]
 800a7e0:	f000 f8e9 	bl	800a9b6 <HAL_SPI_TransmitReceive>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	e0e2      	b.n	800a9ae <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a7ee:	2b01      	cmp	r3, #1
 800a7f0:	d101      	bne.n	800a7f6 <HAL_SPI_Receive+0x52>
 800a7f2:	2302      	movs	r3, #2
 800a7f4:	e0db      	b.n	800a9ae <HAL_SPI_Receive+0x20a>
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	2201      	movs	r2, #1
 800a7fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a7fe:	f7fb fa33 	bl	8005c68 <HAL_GetTick>
 800a802:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a80a:	b2db      	uxtb	r3, r3
 800a80c:	2b01      	cmp	r3, #1
 800a80e:	d002      	beq.n	800a816 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800a810:	2302      	movs	r3, #2
 800a812:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a814:	e0c2      	b.n	800a99c <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d002      	beq.n	800a822 <HAL_SPI_Receive+0x7e>
 800a81c:	88fb      	ldrh	r3, [r7, #6]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d102      	bne.n	800a828 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800a822:	2301      	movs	r3, #1
 800a824:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a826:	e0b9      	b.n	800a99c <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	2204      	movs	r2, #4
 800a82c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	2200      	movs	r2, #0
 800a834:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	68ba      	ldr	r2, [r7, #8]
 800a83a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	88fa      	ldrh	r2, [r7, #6]
 800a840:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	88fa      	ldrh	r2, [r7, #6]
 800a846:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	2200      	movs	r2, #0
 800a84c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	2200      	movs	r2, #0
 800a852:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	2200      	movs	r2, #0
 800a858:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	2200      	movs	r2, #0
 800a85e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	2200      	movs	r2, #0
 800a864:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	689b      	ldr	r3, [r3, #8]
 800a86a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a86e:	d107      	bne.n	800a880 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	681a      	ldr	r2, [r3, #0]
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a87e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a88a:	2b40      	cmp	r3, #64	; 0x40
 800a88c:	d007      	beq.n	800a89e <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	681a      	ldr	r2, [r3, #0]
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a89c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	68db      	ldr	r3, [r3, #12]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d162      	bne.n	800a96c <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800a8a6:	e02e      	b.n	800a906 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	689b      	ldr	r3, [r3, #8]
 800a8ae:	f003 0301 	and.w	r3, r3, #1
 800a8b2:	2b01      	cmp	r3, #1
 800a8b4:	d115      	bne.n	800a8e2 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f103 020c 	add.w	r2, r3, #12
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8c2:	7812      	ldrb	r2, [r2, #0]
 800a8c4:	b2d2      	uxtb	r2, r2
 800a8c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8cc:	1c5a      	adds	r2, r3, #1
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a8d6:	b29b      	uxth	r3, r3
 800a8d8:	3b01      	subs	r3, #1
 800a8da:	b29a      	uxth	r2, r3
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a8e0:	e011      	b.n	800a906 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a8e2:	f7fb f9c1 	bl	8005c68 <HAL_GetTick>
 800a8e6:	4602      	mov	r2, r0
 800a8e8:	693b      	ldr	r3, [r7, #16]
 800a8ea:	1ad3      	subs	r3, r2, r3
 800a8ec:	683a      	ldr	r2, [r7, #0]
 800a8ee:	429a      	cmp	r2, r3
 800a8f0:	d803      	bhi.n	800a8fa <HAL_SPI_Receive+0x156>
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8f8:	d102      	bne.n	800a900 <HAL_SPI_Receive+0x15c>
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d102      	bne.n	800a906 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800a900:	2303      	movs	r3, #3
 800a902:	75fb      	strb	r3, [r7, #23]
          goto error;
 800a904:	e04a      	b.n	800a99c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a90a:	b29b      	uxth	r3, r3
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d1cb      	bne.n	800a8a8 <HAL_SPI_Receive+0x104>
 800a910:	e031      	b.n	800a976 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	689b      	ldr	r3, [r3, #8]
 800a918:	f003 0301 	and.w	r3, r3, #1
 800a91c:	2b01      	cmp	r3, #1
 800a91e:	d113      	bne.n	800a948 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	68da      	ldr	r2, [r3, #12]
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a92a:	b292      	uxth	r2, r2
 800a92c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a932:	1c9a      	adds	r2, r3, #2
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a93c:	b29b      	uxth	r3, r3
 800a93e:	3b01      	subs	r3, #1
 800a940:	b29a      	uxth	r2, r3
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a946:	e011      	b.n	800a96c <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a948:	f7fb f98e 	bl	8005c68 <HAL_GetTick>
 800a94c:	4602      	mov	r2, r0
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	1ad3      	subs	r3, r2, r3
 800a952:	683a      	ldr	r2, [r7, #0]
 800a954:	429a      	cmp	r2, r3
 800a956:	d803      	bhi.n	800a960 <HAL_SPI_Receive+0x1bc>
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a95e:	d102      	bne.n	800a966 <HAL_SPI_Receive+0x1c2>
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d102      	bne.n	800a96c <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800a966:	2303      	movs	r3, #3
 800a968:	75fb      	strb	r3, [r7, #23]
          goto error;
 800a96a:	e017      	b.n	800a99c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a970:	b29b      	uxth	r3, r3
 800a972:	2b00      	cmp	r3, #0
 800a974:	d1cd      	bne.n	800a912 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a976:	693a      	ldr	r2, [r7, #16]
 800a978:	6839      	ldr	r1, [r7, #0]
 800a97a:	68f8      	ldr	r0, [r7, #12]
 800a97c:	f000 fa27 	bl	800adce <SPI_EndRxTransaction>
 800a980:	4603      	mov	r3, r0
 800a982:	2b00      	cmp	r3, #0
 800a984:	d002      	beq.n	800a98c <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	2220      	movs	r2, #32
 800a98a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a990:	2b00      	cmp	r3, #0
 800a992:	d002      	beq.n	800a99a <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800a994:	2301      	movs	r3, #1
 800a996:	75fb      	strb	r3, [r7, #23]
 800a998:	e000      	b.n	800a99c <HAL_SPI_Receive+0x1f8>
  }

error :
 800a99a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	2201      	movs	r2, #1
 800a9a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a9ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3718      	adds	r7, #24
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}

0800a9b6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a9b6:	b580      	push	{r7, lr}
 800a9b8:	b08c      	sub	sp, #48	; 0x30
 800a9ba:	af00      	add	r7, sp, #0
 800a9bc:	60f8      	str	r0, [r7, #12]
 800a9be:	60b9      	str	r1, [r7, #8]
 800a9c0:	607a      	str	r2, [r7, #4]
 800a9c2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	d101      	bne.n	800a9dc <HAL_SPI_TransmitReceive+0x26>
 800a9d8:	2302      	movs	r3, #2
 800a9da:	e18a      	b.n	800acf2 <HAL_SPI_TransmitReceive+0x33c>
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	2201      	movs	r2, #1
 800a9e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a9e4:	f7fb f940 	bl	8005c68 <HAL_GetTick>
 800a9e8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a9f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	685b      	ldr	r3, [r3, #4]
 800a9f8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a9fa:	887b      	ldrh	r3, [r7, #2]
 800a9fc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a9fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aa02:	2b01      	cmp	r3, #1
 800aa04:	d00f      	beq.n	800aa26 <HAL_SPI_TransmitReceive+0x70>
 800aa06:	69fb      	ldr	r3, [r7, #28]
 800aa08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aa0c:	d107      	bne.n	800aa1e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	689b      	ldr	r3, [r3, #8]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d103      	bne.n	800aa1e <HAL_SPI_TransmitReceive+0x68>
 800aa16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aa1a:	2b04      	cmp	r3, #4
 800aa1c:	d003      	beq.n	800aa26 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800aa1e:	2302      	movs	r3, #2
 800aa20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800aa24:	e15b      	b.n	800acde <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d005      	beq.n	800aa38 <HAL_SPI_TransmitReceive+0x82>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d002      	beq.n	800aa38 <HAL_SPI_TransmitReceive+0x82>
 800aa32:	887b      	ldrh	r3, [r7, #2]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d103      	bne.n	800aa40 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800aa38:	2301      	movs	r3, #1
 800aa3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800aa3e:	e14e      	b.n	800acde <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800aa46:	b2db      	uxtb	r3, r3
 800aa48:	2b04      	cmp	r3, #4
 800aa4a:	d003      	beq.n	800aa54 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	2205      	movs	r2, #5
 800aa50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	2200      	movs	r2, #0
 800aa58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	687a      	ldr	r2, [r7, #4]
 800aa5e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	887a      	ldrh	r2, [r7, #2]
 800aa64:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	887a      	ldrh	r2, [r7, #2]
 800aa6a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	68ba      	ldr	r2, [r7, #8]
 800aa70:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	887a      	ldrh	r2, [r7, #2]
 800aa76:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	887a      	ldrh	r2, [r7, #2]
 800aa7c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	2200      	movs	r2, #0
 800aa82:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	2200      	movs	r2, #0
 800aa88:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa94:	2b40      	cmp	r3, #64	; 0x40
 800aa96:	d007      	beq.n	800aaa8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	681a      	ldr	r2, [r3, #0]
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aaa6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	68db      	ldr	r3, [r3, #12]
 800aaac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aab0:	d178      	bne.n	800aba4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	685b      	ldr	r3, [r3, #4]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d002      	beq.n	800aac0 <HAL_SPI_TransmitReceive+0x10a>
 800aaba:	8b7b      	ldrh	r3, [r7, #26]
 800aabc:	2b01      	cmp	r3, #1
 800aabe:	d166      	bne.n	800ab8e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aac4:	881a      	ldrh	r2, [r3, #0]
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aad0:	1c9a      	adds	r2, r3, #2
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aada:	b29b      	uxth	r3, r3
 800aadc:	3b01      	subs	r3, #1
 800aade:	b29a      	uxth	r2, r3
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aae4:	e053      	b.n	800ab8e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	689b      	ldr	r3, [r3, #8]
 800aaec:	f003 0302 	and.w	r3, r3, #2
 800aaf0:	2b02      	cmp	r3, #2
 800aaf2:	d11b      	bne.n	800ab2c <HAL_SPI_TransmitReceive+0x176>
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aaf8:	b29b      	uxth	r3, r3
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d016      	beq.n	800ab2c <HAL_SPI_TransmitReceive+0x176>
 800aafe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab00:	2b01      	cmp	r3, #1
 800ab02:	d113      	bne.n	800ab2c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab08:	881a      	ldrh	r2, [r3, #0]
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab14:	1c9a      	adds	r2, r3, #2
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab1e:	b29b      	uxth	r3, r3
 800ab20:	3b01      	subs	r3, #1
 800ab22:	b29a      	uxth	r2, r3
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	689b      	ldr	r3, [r3, #8]
 800ab32:	f003 0301 	and.w	r3, r3, #1
 800ab36:	2b01      	cmp	r3, #1
 800ab38:	d119      	bne.n	800ab6e <HAL_SPI_TransmitReceive+0x1b8>
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab3e:	b29b      	uxth	r3, r3
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d014      	beq.n	800ab6e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	68da      	ldr	r2, [r3, #12]
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab4e:	b292      	uxth	r2, r2
 800ab50:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab56:	1c9a      	adds	r2, r3, #2
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab60:	b29b      	uxth	r3, r3
 800ab62:	3b01      	subs	r3, #1
 800ab64:	b29a      	uxth	r2, r3
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ab6e:	f7fb f87b 	bl	8005c68 <HAL_GetTick>
 800ab72:	4602      	mov	r2, r0
 800ab74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab76:	1ad3      	subs	r3, r2, r3
 800ab78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab7a:	429a      	cmp	r2, r3
 800ab7c:	d807      	bhi.n	800ab8e <HAL_SPI_TransmitReceive+0x1d8>
 800ab7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab84:	d003      	beq.n	800ab8e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800ab86:	2303      	movs	r3, #3
 800ab88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ab8c:	e0a7      	b.n	800acde <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab92:	b29b      	uxth	r3, r3
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d1a6      	bne.n	800aae6 <HAL_SPI_TransmitReceive+0x130>
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab9c:	b29b      	uxth	r3, r3
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d1a1      	bne.n	800aae6 <HAL_SPI_TransmitReceive+0x130>
 800aba2:	e07c      	b.n	800ac9e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	685b      	ldr	r3, [r3, #4]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d002      	beq.n	800abb2 <HAL_SPI_TransmitReceive+0x1fc>
 800abac:	8b7b      	ldrh	r3, [r7, #26]
 800abae:	2b01      	cmp	r3, #1
 800abb0:	d16b      	bne.n	800ac8a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	330c      	adds	r3, #12
 800abbc:	7812      	ldrb	r2, [r2, #0]
 800abbe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abc4:	1c5a      	adds	r2, r3, #1
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800abce:	b29b      	uxth	r3, r3
 800abd0:	3b01      	subs	r3, #1
 800abd2:	b29a      	uxth	r2, r3
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800abd8:	e057      	b.n	800ac8a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	689b      	ldr	r3, [r3, #8]
 800abe0:	f003 0302 	and.w	r3, r3, #2
 800abe4:	2b02      	cmp	r3, #2
 800abe6:	d11c      	bne.n	800ac22 <HAL_SPI_TransmitReceive+0x26c>
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800abec:	b29b      	uxth	r3, r3
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d017      	beq.n	800ac22 <HAL_SPI_TransmitReceive+0x26c>
 800abf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abf4:	2b01      	cmp	r3, #1
 800abf6:	d114      	bne.n	800ac22 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	330c      	adds	r3, #12
 800ac02:	7812      	ldrb	r2, [r2, #0]
 800ac04:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac0a:	1c5a      	adds	r2, r3, #1
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ac14:	b29b      	uxth	r3, r3
 800ac16:	3b01      	subs	r3, #1
 800ac18:	b29a      	uxth	r2, r3
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	689b      	ldr	r3, [r3, #8]
 800ac28:	f003 0301 	and.w	r3, r3, #1
 800ac2c:	2b01      	cmp	r3, #1
 800ac2e:	d119      	bne.n	800ac64 <HAL_SPI_TransmitReceive+0x2ae>
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac34:	b29b      	uxth	r3, r3
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d014      	beq.n	800ac64 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	68da      	ldr	r2, [r3, #12]
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac44:	b2d2      	uxtb	r2, r2
 800ac46:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac4c:	1c5a      	adds	r2, r3, #1
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac56:	b29b      	uxth	r3, r3
 800ac58:	3b01      	subs	r3, #1
 800ac5a:	b29a      	uxth	r2, r3
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ac60:	2301      	movs	r3, #1
 800ac62:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ac64:	f7fb f800 	bl	8005c68 <HAL_GetTick>
 800ac68:	4602      	mov	r2, r0
 800ac6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac6c:	1ad3      	subs	r3, r2, r3
 800ac6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac70:	429a      	cmp	r2, r3
 800ac72:	d803      	bhi.n	800ac7c <HAL_SPI_TransmitReceive+0x2c6>
 800ac74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac7a:	d102      	bne.n	800ac82 <HAL_SPI_TransmitReceive+0x2cc>
 800ac7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d103      	bne.n	800ac8a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800ac82:	2303      	movs	r3, #3
 800ac84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ac88:	e029      	b.n	800acde <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ac8e:	b29b      	uxth	r3, r3
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d1a2      	bne.n	800abda <HAL_SPI_TransmitReceive+0x224>
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac98:	b29b      	uxth	r3, r3
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d19d      	bne.n	800abda <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ac9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aca0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800aca2:	68f8      	ldr	r0, [r7, #12]
 800aca4:	f000 f8f8 	bl	800ae98 <SPI_EndRxTxTransaction>
 800aca8:	4603      	mov	r3, r0
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d006      	beq.n	800acbc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800acae:	2301      	movs	r3, #1
 800acb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	2220      	movs	r2, #32
 800acb8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800acba:	e010      	b.n	800acde <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	689b      	ldr	r3, [r3, #8]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d10b      	bne.n	800acdc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800acc4:	2300      	movs	r3, #0
 800acc6:	617b      	str	r3, [r7, #20]
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	68db      	ldr	r3, [r3, #12]
 800acce:	617b      	str	r3, [r7, #20]
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	689b      	ldr	r3, [r3, #8]
 800acd6:	617b      	str	r3, [r7, #20]
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	e000      	b.n	800acde <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800acdc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	2201      	movs	r2, #1
 800ace2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	2200      	movs	r2, #0
 800acea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800acee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800acf2:	4618      	mov	r0, r3
 800acf4:	3730      	adds	r7, #48	; 0x30
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}

0800acfa <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800acfa:	b580      	push	{r7, lr}
 800acfc:	b084      	sub	sp, #16
 800acfe:	af00      	add	r7, sp, #0
 800ad00:	60f8      	str	r0, [r7, #12]
 800ad02:	60b9      	str	r1, [r7, #8]
 800ad04:	603b      	str	r3, [r7, #0]
 800ad06:	4613      	mov	r3, r2
 800ad08:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ad0a:	e04c      	b.n	800ada6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad12:	d048      	beq.n	800ada6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800ad14:	f7fa ffa8 	bl	8005c68 <HAL_GetTick>
 800ad18:	4602      	mov	r2, r0
 800ad1a:	69bb      	ldr	r3, [r7, #24]
 800ad1c:	1ad3      	subs	r3, r2, r3
 800ad1e:	683a      	ldr	r2, [r7, #0]
 800ad20:	429a      	cmp	r2, r3
 800ad22:	d902      	bls.n	800ad2a <SPI_WaitFlagStateUntilTimeout+0x30>
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d13d      	bne.n	800ada6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	685a      	ldr	r2, [r3, #4]
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ad38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	685b      	ldr	r3, [r3, #4]
 800ad3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ad42:	d111      	bne.n	800ad68 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	689b      	ldr	r3, [r3, #8]
 800ad48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad4c:	d004      	beq.n	800ad58 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	689b      	ldr	r3, [r3, #8]
 800ad52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad56:	d107      	bne.n	800ad68 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	681a      	ldr	r2, [r3, #0]
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad70:	d10f      	bne.n	800ad92 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	681a      	ldr	r2, [r3, #0]
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ad80:	601a      	str	r2, [r3, #0]
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	681a      	ldr	r2, [r3, #0]
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ad90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	2201      	movs	r2, #1
 800ad96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800ada2:	2303      	movs	r3, #3
 800ada4:	e00f      	b.n	800adc6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	689a      	ldr	r2, [r3, #8]
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	4013      	ands	r3, r2
 800adb0:	68ba      	ldr	r2, [r7, #8]
 800adb2:	429a      	cmp	r2, r3
 800adb4:	bf0c      	ite	eq
 800adb6:	2301      	moveq	r3, #1
 800adb8:	2300      	movne	r3, #0
 800adba:	b2db      	uxtb	r3, r3
 800adbc:	461a      	mov	r2, r3
 800adbe:	79fb      	ldrb	r3, [r7, #7]
 800adc0:	429a      	cmp	r2, r3
 800adc2:	d1a3      	bne.n	800ad0c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800adc4:	2300      	movs	r3, #0
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3710      	adds	r7, #16
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}

0800adce <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800adce:	b580      	push	{r7, lr}
 800add0:	b086      	sub	sp, #24
 800add2:	af02      	add	r7, sp, #8
 800add4:	60f8      	str	r0, [r7, #12]
 800add6:	60b9      	str	r1, [r7, #8]
 800add8:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	685b      	ldr	r3, [r3, #4]
 800adde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ade2:	d111      	bne.n	800ae08 <SPI_EndRxTransaction+0x3a>
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	689b      	ldr	r3, [r3, #8]
 800ade8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800adec:	d004      	beq.n	800adf8 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	689b      	ldr	r3, [r3, #8]
 800adf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800adf6:	d107      	bne.n	800ae08 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	681a      	ldr	r2, [r3, #0]
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae06:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	685b      	ldr	r3, [r3, #4]
 800ae0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ae10:	d12a      	bne.n	800ae68 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	689b      	ldr	r3, [r3, #8]
 800ae16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae1a:	d012      	beq.n	800ae42 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	9300      	str	r3, [sp, #0]
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	2200      	movs	r2, #0
 800ae24:	2180      	movs	r1, #128	; 0x80
 800ae26:	68f8      	ldr	r0, [r7, #12]
 800ae28:	f7ff ff67 	bl	800acfa <SPI_WaitFlagStateUntilTimeout>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d02d      	beq.n	800ae8e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae36:	f043 0220 	orr.w	r2, r3, #32
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800ae3e:	2303      	movs	r3, #3
 800ae40:	e026      	b.n	800ae90 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	9300      	str	r3, [sp, #0]
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	2200      	movs	r2, #0
 800ae4a:	2101      	movs	r1, #1
 800ae4c:	68f8      	ldr	r0, [r7, #12]
 800ae4e:	f7ff ff54 	bl	800acfa <SPI_WaitFlagStateUntilTimeout>
 800ae52:	4603      	mov	r3, r0
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d01a      	beq.n	800ae8e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae5c:	f043 0220 	orr.w	r2, r3, #32
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800ae64:	2303      	movs	r3, #3
 800ae66:	e013      	b.n	800ae90 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	9300      	str	r3, [sp, #0]
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	2101      	movs	r1, #1
 800ae72:	68f8      	ldr	r0, [r7, #12]
 800ae74:	f7ff ff41 	bl	800acfa <SPI_WaitFlagStateUntilTimeout>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d007      	beq.n	800ae8e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae82:	f043 0220 	orr.w	r2, r3, #32
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ae8a:	2303      	movs	r3, #3
 800ae8c:	e000      	b.n	800ae90 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800ae8e:	2300      	movs	r3, #0
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3710      	adds	r7, #16
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}

0800ae98 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b088      	sub	sp, #32
 800ae9c:	af02      	add	r7, sp, #8
 800ae9e:	60f8      	str	r0, [r7, #12]
 800aea0:	60b9      	str	r1, [r7, #8]
 800aea2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800aea4:	4b1b      	ldr	r3, [pc, #108]	; (800af14 <SPI_EndRxTxTransaction+0x7c>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	4a1b      	ldr	r2, [pc, #108]	; (800af18 <SPI_EndRxTxTransaction+0x80>)
 800aeaa:	fba2 2303 	umull	r2, r3, r2, r3
 800aeae:	0d5b      	lsrs	r3, r3, #21
 800aeb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800aeb4:	fb02 f303 	mul.w	r3, r2, r3
 800aeb8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	685b      	ldr	r3, [r3, #4]
 800aebe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aec2:	d112      	bne.n	800aeea <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	9300      	str	r3, [sp, #0]
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	2200      	movs	r2, #0
 800aecc:	2180      	movs	r1, #128	; 0x80
 800aece:	68f8      	ldr	r0, [r7, #12]
 800aed0:	f7ff ff13 	bl	800acfa <SPI_WaitFlagStateUntilTimeout>
 800aed4:	4603      	mov	r3, r0
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d016      	beq.n	800af08 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aede:	f043 0220 	orr.w	r2, r3, #32
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800aee6:	2303      	movs	r3, #3
 800aee8:	e00f      	b.n	800af0a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d00a      	beq.n	800af06 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	3b01      	subs	r3, #1
 800aef4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	689b      	ldr	r3, [r3, #8]
 800aefc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af00:	2b80      	cmp	r3, #128	; 0x80
 800af02:	d0f2      	beq.n	800aeea <SPI_EndRxTxTransaction+0x52>
 800af04:	e000      	b.n	800af08 <SPI_EndRxTxTransaction+0x70>
        break;
 800af06:	bf00      	nop
  }

  return HAL_OK;
 800af08:	2300      	movs	r3, #0
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	3718      	adds	r7, #24
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}
 800af12:	bf00      	nop
 800af14:	20000000 	.word	0x20000000
 800af18:	165e9f81 	.word	0x165e9f81

0800af1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b082      	sub	sp, #8
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d101      	bne.n	800af2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800af2a:	2301      	movs	r3, #1
 800af2c:	e01d      	b.n	800af6a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af34:	b2db      	uxtb	r3, r3
 800af36:	2b00      	cmp	r3, #0
 800af38:	d106      	bne.n	800af48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2200      	movs	r2, #0
 800af3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f7f9 fedc 	bl	8004d00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2202      	movs	r2, #2
 800af4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681a      	ldr	r2, [r3, #0]
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	3304      	adds	r3, #4
 800af58:	4619      	mov	r1, r3
 800af5a:	4610      	mov	r0, r2
 800af5c:	f000 fb56 	bl	800b60c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2201      	movs	r2, #1
 800af64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800af68:	2300      	movs	r3, #0
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	3708      	adds	r7, #8
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}

0800af72 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800af72:	b480      	push	{r7}
 800af74:	b085      	sub	sp, #20
 800af76:	af00      	add	r7, sp, #0
 800af78:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	68da      	ldr	r2, [r3, #12]
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	f042 0201 	orr.w	r2, r2, #1
 800af88:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	689b      	ldr	r3, [r3, #8]
 800af90:	f003 0307 	and.w	r3, r3, #7
 800af94:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	2b06      	cmp	r3, #6
 800af9a:	d007      	beq.n	800afac <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	681a      	ldr	r2, [r3, #0]
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	f042 0201 	orr.w	r2, r2, #1
 800afaa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800afac:	2300      	movs	r3, #0
}
 800afae:	4618      	mov	r0, r3
 800afb0:	3714      	adds	r7, #20
 800afb2:	46bd      	mov	sp, r7
 800afb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb8:	4770      	bx	lr

0800afba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800afba:	b580      	push	{r7, lr}
 800afbc:	b082      	sub	sp, #8
 800afbe:	af00      	add	r7, sp, #0
 800afc0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d101      	bne.n	800afcc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800afc8:	2301      	movs	r3, #1
 800afca:	e01d      	b.n	800b008 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800afd2:	b2db      	uxtb	r3, r3
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d106      	bne.n	800afe6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2200      	movs	r2, #0
 800afdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f7f9 fe19 	bl	8004c18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2202      	movs	r2, #2
 800afea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681a      	ldr	r2, [r3, #0]
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	3304      	adds	r3, #4
 800aff6:	4619      	mov	r1, r3
 800aff8:	4610      	mov	r0, r2
 800affa:	f000 fb07 	bl	800b60c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2201      	movs	r2, #1
 800b002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b006:	2300      	movs	r3, #0
}
 800b008:	4618      	mov	r0, r3
 800b00a:	3708      	adds	r7, #8
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}

0800b010 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b084      	sub	sp, #16
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
 800b018:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	2201      	movs	r2, #1
 800b020:	6839      	ldr	r1, [r7, #0]
 800b022:	4618      	mov	r0, r3
 800b024:	f000 fd42 	bl	800baac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	4a15      	ldr	r2, [pc, #84]	; (800b084 <HAL_TIM_PWM_Start+0x74>)
 800b02e:	4293      	cmp	r3, r2
 800b030:	d004      	beq.n	800b03c <HAL_TIM_PWM_Start+0x2c>
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	4a14      	ldr	r2, [pc, #80]	; (800b088 <HAL_TIM_PWM_Start+0x78>)
 800b038:	4293      	cmp	r3, r2
 800b03a:	d101      	bne.n	800b040 <HAL_TIM_PWM_Start+0x30>
 800b03c:	2301      	movs	r3, #1
 800b03e:	e000      	b.n	800b042 <HAL_TIM_PWM_Start+0x32>
 800b040:	2300      	movs	r3, #0
 800b042:	2b00      	cmp	r3, #0
 800b044:	d007      	beq.n	800b056 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b054:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	689b      	ldr	r3, [r3, #8]
 800b05c:	f003 0307 	and.w	r3, r3, #7
 800b060:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	2b06      	cmp	r3, #6
 800b066:	d007      	beq.n	800b078 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	681a      	ldr	r2, [r3, #0]
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f042 0201 	orr.w	r2, r2, #1
 800b076:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b078:	2300      	movs	r3, #0
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3710      	adds	r7, #16
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}
 800b082:	bf00      	nop
 800b084:	40010000 	.word	0x40010000
 800b088:	40010400 	.word	0x40010400

0800b08c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b086      	sub	sp, #24
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
 800b094:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d101      	bne.n	800b0a0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b09c:	2301      	movs	r3, #1
 800b09e:	e083      	b.n	800b1a8 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0a6:	b2db      	uxtb	r3, r3
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d106      	bne.n	800b0ba <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f7f9 feb3 	bl	8004e20 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2202      	movs	r2, #2
 800b0be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	689b      	ldr	r3, [r3, #8]
 800b0c8:	687a      	ldr	r2, [r7, #4]
 800b0ca:	6812      	ldr	r2, [r2, #0]
 800b0cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b0d0:	f023 0307 	bic.w	r3, r3, #7
 800b0d4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681a      	ldr	r2, [r3, #0]
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	3304      	adds	r3, #4
 800b0de:	4619      	mov	r1, r3
 800b0e0:	4610      	mov	r0, r2
 800b0e2:	f000 fa93 	bl	800b60c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	689b      	ldr	r3, [r3, #8]
 800b0ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	699b      	ldr	r3, [r3, #24]
 800b0f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	6a1b      	ldr	r3, [r3, #32]
 800b0fc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	697a      	ldr	r2, [r7, #20]
 800b104:	4313      	orrs	r3, r2
 800b106:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b108:	693b      	ldr	r3, [r7, #16]
 800b10a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b10e:	f023 0303 	bic.w	r3, r3, #3
 800b112:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	689a      	ldr	r2, [r3, #8]
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	699b      	ldr	r3, [r3, #24]
 800b11c:	021b      	lsls	r3, r3, #8
 800b11e:	4313      	orrs	r3, r2
 800b120:	693a      	ldr	r2, [r7, #16]
 800b122:	4313      	orrs	r3, r2
 800b124:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b126:	693b      	ldr	r3, [r7, #16]
 800b128:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800b12c:	f023 030c 	bic.w	r3, r3, #12
 800b130:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b138:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b13c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	68da      	ldr	r2, [r3, #12]
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	69db      	ldr	r3, [r3, #28]
 800b146:	021b      	lsls	r3, r3, #8
 800b148:	4313      	orrs	r3, r2
 800b14a:	693a      	ldr	r2, [r7, #16]
 800b14c:	4313      	orrs	r3, r2
 800b14e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	691b      	ldr	r3, [r3, #16]
 800b154:	011a      	lsls	r2, r3, #4
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	6a1b      	ldr	r3, [r3, #32]
 800b15a:	031b      	lsls	r3, r3, #12
 800b15c:	4313      	orrs	r3, r2
 800b15e:	693a      	ldr	r2, [r7, #16]
 800b160:	4313      	orrs	r3, r2
 800b162:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b16a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b172:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	685a      	ldr	r2, [r3, #4]
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	695b      	ldr	r3, [r3, #20]
 800b17c:	011b      	lsls	r3, r3, #4
 800b17e:	4313      	orrs	r3, r2
 800b180:	68fa      	ldr	r2, [r7, #12]
 800b182:	4313      	orrs	r3, r2
 800b184:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	697a      	ldr	r2, [r7, #20]
 800b18c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	693a      	ldr	r2, [r7, #16]
 800b194:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	68fa      	ldr	r2, [r7, #12]
 800b19c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2201      	movs	r2, #1
 800b1a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b1a6:	2300      	movs	r3, #0
}
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	3718      	adds	r7, #24
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bd80      	pop	{r7, pc}

0800b1b0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b082      	sub	sp, #8
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
 800b1b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d002      	beq.n	800b1c6 <HAL_TIM_Encoder_Start+0x16>
 800b1c0:	2b04      	cmp	r3, #4
 800b1c2:	d008      	beq.n	800b1d6 <HAL_TIM_Encoder_Start+0x26>
 800b1c4:	e00f      	b.n	800b1e6 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	2201      	movs	r2, #1
 800b1cc:	2100      	movs	r1, #0
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f000 fc6c 	bl	800baac <TIM_CCxChannelCmd>
      break;
 800b1d4:	e016      	b.n	800b204 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	2201      	movs	r2, #1
 800b1dc:	2104      	movs	r1, #4
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f000 fc64 	bl	800baac <TIM_CCxChannelCmd>
      break;
 800b1e4:	e00e      	b.n	800b204 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	2201      	movs	r2, #1
 800b1ec:	2100      	movs	r1, #0
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f000 fc5c 	bl	800baac <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	2201      	movs	r2, #1
 800b1fa:	2104      	movs	r1, #4
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f000 fc55 	bl	800baac <TIM_CCxChannelCmd>
      break;
 800b202:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	681a      	ldr	r2, [r3, #0]
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	f042 0201 	orr.w	r2, r2, #1
 800b212:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b214:	2300      	movs	r3, #0
}
 800b216:	4618      	mov	r0, r3
 800b218:	3708      	adds	r7, #8
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}

0800b21e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b21e:	b580      	push	{r7, lr}
 800b220:	b082      	sub	sp, #8
 800b222:	af00      	add	r7, sp, #0
 800b224:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	691b      	ldr	r3, [r3, #16]
 800b22c:	f003 0302 	and.w	r3, r3, #2
 800b230:	2b02      	cmp	r3, #2
 800b232:	d122      	bne.n	800b27a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	68db      	ldr	r3, [r3, #12]
 800b23a:	f003 0302 	and.w	r3, r3, #2
 800b23e:	2b02      	cmp	r3, #2
 800b240:	d11b      	bne.n	800b27a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f06f 0202 	mvn.w	r2, #2
 800b24a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2201      	movs	r2, #1
 800b250:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	699b      	ldr	r3, [r3, #24]
 800b258:	f003 0303 	and.w	r3, r3, #3
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d003      	beq.n	800b268 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f000 f9b5 	bl	800b5d0 <HAL_TIM_IC_CaptureCallback>
 800b266:	e005      	b.n	800b274 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f000 f9a7 	bl	800b5bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f000 f9b8 	bl	800b5e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2200      	movs	r2, #0
 800b278:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	691b      	ldr	r3, [r3, #16]
 800b280:	f003 0304 	and.w	r3, r3, #4
 800b284:	2b04      	cmp	r3, #4
 800b286:	d122      	bne.n	800b2ce <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	68db      	ldr	r3, [r3, #12]
 800b28e:	f003 0304 	and.w	r3, r3, #4
 800b292:	2b04      	cmp	r3, #4
 800b294:	d11b      	bne.n	800b2ce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	f06f 0204 	mvn.w	r2, #4
 800b29e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2202      	movs	r2, #2
 800b2a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	699b      	ldr	r3, [r3, #24]
 800b2ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d003      	beq.n	800b2bc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f000 f98b 	bl	800b5d0 <HAL_TIM_IC_CaptureCallback>
 800b2ba:	e005      	b.n	800b2c8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f000 f97d 	bl	800b5bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f000 f98e 	bl	800b5e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	691b      	ldr	r3, [r3, #16]
 800b2d4:	f003 0308 	and.w	r3, r3, #8
 800b2d8:	2b08      	cmp	r3, #8
 800b2da:	d122      	bne.n	800b322 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	68db      	ldr	r3, [r3, #12]
 800b2e2:	f003 0308 	and.w	r3, r3, #8
 800b2e6:	2b08      	cmp	r3, #8
 800b2e8:	d11b      	bne.n	800b322 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f06f 0208 	mvn.w	r2, #8
 800b2f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2204      	movs	r2, #4
 800b2f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	69db      	ldr	r3, [r3, #28]
 800b300:	f003 0303 	and.w	r3, r3, #3
 800b304:	2b00      	cmp	r3, #0
 800b306:	d003      	beq.n	800b310 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f000 f961 	bl	800b5d0 <HAL_TIM_IC_CaptureCallback>
 800b30e:	e005      	b.n	800b31c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f000 f953 	bl	800b5bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f000 f964 	bl	800b5e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2200      	movs	r2, #0
 800b320:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	691b      	ldr	r3, [r3, #16]
 800b328:	f003 0310 	and.w	r3, r3, #16
 800b32c:	2b10      	cmp	r3, #16
 800b32e:	d122      	bne.n	800b376 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	68db      	ldr	r3, [r3, #12]
 800b336:	f003 0310 	and.w	r3, r3, #16
 800b33a:	2b10      	cmp	r3, #16
 800b33c:	d11b      	bne.n	800b376 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f06f 0210 	mvn.w	r2, #16
 800b346:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2208      	movs	r2, #8
 800b34c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	69db      	ldr	r3, [r3, #28]
 800b354:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d003      	beq.n	800b364 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f000 f937 	bl	800b5d0 <HAL_TIM_IC_CaptureCallback>
 800b362:	e005      	b.n	800b370 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b364:	6878      	ldr	r0, [r7, #4]
 800b366:	f000 f929 	bl	800b5bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f000 f93a 	bl	800b5e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2200      	movs	r2, #0
 800b374:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	691b      	ldr	r3, [r3, #16]
 800b37c:	f003 0301 	and.w	r3, r3, #1
 800b380:	2b01      	cmp	r3, #1
 800b382:	d10e      	bne.n	800b3a2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	68db      	ldr	r3, [r3, #12]
 800b38a:	f003 0301 	and.w	r3, r3, #1
 800b38e:	2b01      	cmp	r3, #1
 800b390:	d107      	bne.n	800b3a2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	f06f 0201 	mvn.w	r2, #1
 800b39a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b39c:	6878      	ldr	r0, [r7, #4]
 800b39e:	f7f8 fa1d 	bl	80037dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	691b      	ldr	r3, [r3, #16]
 800b3a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3ac:	2b80      	cmp	r3, #128	; 0x80
 800b3ae:	d10e      	bne.n	800b3ce <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	68db      	ldr	r3, [r3, #12]
 800b3b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3ba:	2b80      	cmp	r3, #128	; 0x80
 800b3bc:	d107      	bne.n	800b3ce <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b3c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	f000 fc6d 	bl	800bca8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	691b      	ldr	r3, [r3, #16]
 800b3d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3d8:	2b40      	cmp	r3, #64	; 0x40
 800b3da:	d10e      	bne.n	800b3fa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	68db      	ldr	r3, [r3, #12]
 800b3e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3e6:	2b40      	cmp	r3, #64	; 0x40
 800b3e8:	d107      	bne.n	800b3fa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b3f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b3f4:	6878      	ldr	r0, [r7, #4]
 800b3f6:	f000 f8ff 	bl	800b5f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	691b      	ldr	r3, [r3, #16]
 800b400:	f003 0320 	and.w	r3, r3, #32
 800b404:	2b20      	cmp	r3, #32
 800b406:	d10e      	bne.n	800b426 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	68db      	ldr	r3, [r3, #12]
 800b40e:	f003 0320 	and.w	r3, r3, #32
 800b412:	2b20      	cmp	r3, #32
 800b414:	d107      	bne.n	800b426 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	f06f 0220 	mvn.w	r2, #32
 800b41e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f000 fc37 	bl	800bc94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b426:	bf00      	nop
 800b428:	3708      	adds	r7, #8
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}
	...

0800b430 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b084      	sub	sp, #16
 800b434:	af00      	add	r7, sp, #0
 800b436:	60f8      	str	r0, [r7, #12]
 800b438:	60b9      	str	r1, [r7, #8]
 800b43a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b442:	2b01      	cmp	r3, #1
 800b444:	d101      	bne.n	800b44a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800b446:	2302      	movs	r3, #2
 800b448:	e0b4      	b.n	800b5b4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	2201      	movs	r2, #1
 800b44e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	2202      	movs	r2, #2
 800b456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2b0c      	cmp	r3, #12
 800b45e:	f200 809f 	bhi.w	800b5a0 <HAL_TIM_PWM_ConfigChannel+0x170>
 800b462:	a201      	add	r2, pc, #4	; (adr r2, 800b468 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800b464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b468:	0800b49d 	.word	0x0800b49d
 800b46c:	0800b5a1 	.word	0x0800b5a1
 800b470:	0800b5a1 	.word	0x0800b5a1
 800b474:	0800b5a1 	.word	0x0800b5a1
 800b478:	0800b4dd 	.word	0x0800b4dd
 800b47c:	0800b5a1 	.word	0x0800b5a1
 800b480:	0800b5a1 	.word	0x0800b5a1
 800b484:	0800b5a1 	.word	0x0800b5a1
 800b488:	0800b51f 	.word	0x0800b51f
 800b48c:	0800b5a1 	.word	0x0800b5a1
 800b490:	0800b5a1 	.word	0x0800b5a1
 800b494:	0800b5a1 	.word	0x0800b5a1
 800b498:	0800b55f 	.word	0x0800b55f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	68b9      	ldr	r1, [r7, #8]
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f000 f952 	bl	800b74c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	699a      	ldr	r2, [r3, #24]
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f042 0208 	orr.w	r2, r2, #8
 800b4b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	699a      	ldr	r2, [r3, #24]
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f022 0204 	bic.w	r2, r2, #4
 800b4c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	6999      	ldr	r1, [r3, #24]
 800b4ce:	68bb      	ldr	r3, [r7, #8]
 800b4d0:	691a      	ldr	r2, [r3, #16]
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	430a      	orrs	r2, r1
 800b4d8:	619a      	str	r2, [r3, #24]
      break;
 800b4da:	e062      	b.n	800b5a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	68b9      	ldr	r1, [r7, #8]
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f000 f9a2 	bl	800b82c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	699a      	ldr	r2, [r3, #24]
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b4f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	699a      	ldr	r2, [r3, #24]
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b506:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	6999      	ldr	r1, [r3, #24]
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	691b      	ldr	r3, [r3, #16]
 800b512:	021a      	lsls	r2, r3, #8
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	430a      	orrs	r2, r1
 800b51a:	619a      	str	r2, [r3, #24]
      break;
 800b51c:	e041      	b.n	800b5a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	68b9      	ldr	r1, [r7, #8]
 800b524:	4618      	mov	r0, r3
 800b526:	f000 f9f7 	bl	800b918 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	69da      	ldr	r2, [r3, #28]
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	f042 0208 	orr.w	r2, r2, #8
 800b538:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	69da      	ldr	r2, [r3, #28]
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	f022 0204 	bic.w	r2, r2, #4
 800b548:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	69d9      	ldr	r1, [r3, #28]
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	691a      	ldr	r2, [r3, #16]
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	430a      	orrs	r2, r1
 800b55a:	61da      	str	r2, [r3, #28]
      break;
 800b55c:	e021      	b.n	800b5a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	68b9      	ldr	r1, [r7, #8]
 800b564:	4618      	mov	r0, r3
 800b566:	f000 fa4b 	bl	800ba00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	69da      	ldr	r2, [r3, #28]
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b578:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	69da      	ldr	r2, [r3, #28]
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b588:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	69d9      	ldr	r1, [r3, #28]
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	691b      	ldr	r3, [r3, #16]
 800b594:	021a      	lsls	r2, r3, #8
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	430a      	orrs	r2, r1
 800b59c:	61da      	str	r2, [r3, #28]
      break;
 800b59e:	e000      	b.n	800b5a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800b5a0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	2201      	movs	r2, #1
 800b5a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b5b2:	2300      	movs	r3, #0
}
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	3710      	adds	r7, #16
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}

0800b5bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b5bc:	b480      	push	{r7}
 800b5be:	b083      	sub	sp, #12
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b5c4:	bf00      	nop
 800b5c6:	370c      	adds	r7, #12
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ce:	4770      	bx	lr

0800b5d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b083      	sub	sp, #12
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b5d8:	bf00      	nop
 800b5da:	370c      	adds	r7, #12
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e2:	4770      	bx	lr

0800b5e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	b083      	sub	sp, #12
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b5ec:	bf00      	nop
 800b5ee:	370c      	adds	r7, #12
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f6:	4770      	bx	lr

0800b5f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b5f8:	b480      	push	{r7}
 800b5fa:	b083      	sub	sp, #12
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b600:	bf00      	nop
 800b602:	370c      	adds	r7, #12
 800b604:	46bd      	mov	sp, r7
 800b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60a:	4770      	bx	lr

0800b60c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b60c:	b480      	push	{r7}
 800b60e:	b085      	sub	sp, #20
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
 800b614:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	4a40      	ldr	r2, [pc, #256]	; (800b720 <TIM_Base_SetConfig+0x114>)
 800b620:	4293      	cmp	r3, r2
 800b622:	d013      	beq.n	800b64c <TIM_Base_SetConfig+0x40>
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b62a:	d00f      	beq.n	800b64c <TIM_Base_SetConfig+0x40>
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	4a3d      	ldr	r2, [pc, #244]	; (800b724 <TIM_Base_SetConfig+0x118>)
 800b630:	4293      	cmp	r3, r2
 800b632:	d00b      	beq.n	800b64c <TIM_Base_SetConfig+0x40>
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	4a3c      	ldr	r2, [pc, #240]	; (800b728 <TIM_Base_SetConfig+0x11c>)
 800b638:	4293      	cmp	r3, r2
 800b63a:	d007      	beq.n	800b64c <TIM_Base_SetConfig+0x40>
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	4a3b      	ldr	r2, [pc, #236]	; (800b72c <TIM_Base_SetConfig+0x120>)
 800b640:	4293      	cmp	r3, r2
 800b642:	d003      	beq.n	800b64c <TIM_Base_SetConfig+0x40>
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	4a3a      	ldr	r2, [pc, #232]	; (800b730 <TIM_Base_SetConfig+0x124>)
 800b648:	4293      	cmp	r3, r2
 800b64a:	d108      	bne.n	800b65e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b652:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	685b      	ldr	r3, [r3, #4]
 800b658:	68fa      	ldr	r2, [r7, #12]
 800b65a:	4313      	orrs	r3, r2
 800b65c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	4a2f      	ldr	r2, [pc, #188]	; (800b720 <TIM_Base_SetConfig+0x114>)
 800b662:	4293      	cmp	r3, r2
 800b664:	d02b      	beq.n	800b6be <TIM_Base_SetConfig+0xb2>
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b66c:	d027      	beq.n	800b6be <TIM_Base_SetConfig+0xb2>
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	4a2c      	ldr	r2, [pc, #176]	; (800b724 <TIM_Base_SetConfig+0x118>)
 800b672:	4293      	cmp	r3, r2
 800b674:	d023      	beq.n	800b6be <TIM_Base_SetConfig+0xb2>
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	4a2b      	ldr	r2, [pc, #172]	; (800b728 <TIM_Base_SetConfig+0x11c>)
 800b67a:	4293      	cmp	r3, r2
 800b67c:	d01f      	beq.n	800b6be <TIM_Base_SetConfig+0xb2>
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	4a2a      	ldr	r2, [pc, #168]	; (800b72c <TIM_Base_SetConfig+0x120>)
 800b682:	4293      	cmp	r3, r2
 800b684:	d01b      	beq.n	800b6be <TIM_Base_SetConfig+0xb2>
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	4a29      	ldr	r2, [pc, #164]	; (800b730 <TIM_Base_SetConfig+0x124>)
 800b68a:	4293      	cmp	r3, r2
 800b68c:	d017      	beq.n	800b6be <TIM_Base_SetConfig+0xb2>
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	4a28      	ldr	r2, [pc, #160]	; (800b734 <TIM_Base_SetConfig+0x128>)
 800b692:	4293      	cmp	r3, r2
 800b694:	d013      	beq.n	800b6be <TIM_Base_SetConfig+0xb2>
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	4a27      	ldr	r2, [pc, #156]	; (800b738 <TIM_Base_SetConfig+0x12c>)
 800b69a:	4293      	cmp	r3, r2
 800b69c:	d00f      	beq.n	800b6be <TIM_Base_SetConfig+0xb2>
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	4a26      	ldr	r2, [pc, #152]	; (800b73c <TIM_Base_SetConfig+0x130>)
 800b6a2:	4293      	cmp	r3, r2
 800b6a4:	d00b      	beq.n	800b6be <TIM_Base_SetConfig+0xb2>
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	4a25      	ldr	r2, [pc, #148]	; (800b740 <TIM_Base_SetConfig+0x134>)
 800b6aa:	4293      	cmp	r3, r2
 800b6ac:	d007      	beq.n	800b6be <TIM_Base_SetConfig+0xb2>
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	4a24      	ldr	r2, [pc, #144]	; (800b744 <TIM_Base_SetConfig+0x138>)
 800b6b2:	4293      	cmp	r3, r2
 800b6b4:	d003      	beq.n	800b6be <TIM_Base_SetConfig+0xb2>
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	4a23      	ldr	r2, [pc, #140]	; (800b748 <TIM_Base_SetConfig+0x13c>)
 800b6ba:	4293      	cmp	r3, r2
 800b6bc:	d108      	bne.n	800b6d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b6c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	68db      	ldr	r3, [r3, #12]
 800b6ca:	68fa      	ldr	r2, [r7, #12]
 800b6cc:	4313      	orrs	r3, r2
 800b6ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	695b      	ldr	r3, [r3, #20]
 800b6da:	4313      	orrs	r3, r2
 800b6dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	68fa      	ldr	r2, [r7, #12]
 800b6e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	689a      	ldr	r2, [r3, #8]
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	681a      	ldr	r2, [r3, #0]
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	4a0a      	ldr	r2, [pc, #40]	; (800b720 <TIM_Base_SetConfig+0x114>)
 800b6f8:	4293      	cmp	r3, r2
 800b6fa:	d003      	beq.n	800b704 <TIM_Base_SetConfig+0xf8>
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	4a0c      	ldr	r2, [pc, #48]	; (800b730 <TIM_Base_SetConfig+0x124>)
 800b700:	4293      	cmp	r3, r2
 800b702:	d103      	bne.n	800b70c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	691a      	ldr	r2, [r3, #16]
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2201      	movs	r2, #1
 800b710:	615a      	str	r2, [r3, #20]
}
 800b712:	bf00      	nop
 800b714:	3714      	adds	r7, #20
 800b716:	46bd      	mov	sp, r7
 800b718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71c:	4770      	bx	lr
 800b71e:	bf00      	nop
 800b720:	40010000 	.word	0x40010000
 800b724:	40000400 	.word	0x40000400
 800b728:	40000800 	.word	0x40000800
 800b72c:	40000c00 	.word	0x40000c00
 800b730:	40010400 	.word	0x40010400
 800b734:	40014000 	.word	0x40014000
 800b738:	40014400 	.word	0x40014400
 800b73c:	40014800 	.word	0x40014800
 800b740:	40001800 	.word	0x40001800
 800b744:	40001c00 	.word	0x40001c00
 800b748:	40002000 	.word	0x40002000

0800b74c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b74c:	b480      	push	{r7}
 800b74e:	b087      	sub	sp, #28
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
 800b754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	6a1b      	ldr	r3, [r3, #32]
 800b75a:	f023 0201 	bic.w	r2, r3, #1
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6a1b      	ldr	r3, [r3, #32]
 800b766:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	685b      	ldr	r3, [r3, #4]
 800b76c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	699b      	ldr	r3, [r3, #24]
 800b772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b77a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	f023 0303 	bic.w	r3, r3, #3
 800b782:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	68fa      	ldr	r2, [r7, #12]
 800b78a:	4313      	orrs	r3, r2
 800b78c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b78e:	697b      	ldr	r3, [r7, #20]
 800b790:	f023 0302 	bic.w	r3, r3, #2
 800b794:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	689b      	ldr	r3, [r3, #8]
 800b79a:	697a      	ldr	r2, [r7, #20]
 800b79c:	4313      	orrs	r3, r2
 800b79e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	4a20      	ldr	r2, [pc, #128]	; (800b824 <TIM_OC1_SetConfig+0xd8>)
 800b7a4:	4293      	cmp	r3, r2
 800b7a6:	d003      	beq.n	800b7b0 <TIM_OC1_SetConfig+0x64>
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	4a1f      	ldr	r2, [pc, #124]	; (800b828 <TIM_OC1_SetConfig+0xdc>)
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	d10c      	bne.n	800b7ca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b7b0:	697b      	ldr	r3, [r7, #20]
 800b7b2:	f023 0308 	bic.w	r3, r3, #8
 800b7b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	68db      	ldr	r3, [r3, #12]
 800b7bc:	697a      	ldr	r2, [r7, #20]
 800b7be:	4313      	orrs	r3, r2
 800b7c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b7c2:	697b      	ldr	r3, [r7, #20]
 800b7c4:	f023 0304 	bic.w	r3, r3, #4
 800b7c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	4a15      	ldr	r2, [pc, #84]	; (800b824 <TIM_OC1_SetConfig+0xd8>)
 800b7ce:	4293      	cmp	r3, r2
 800b7d0:	d003      	beq.n	800b7da <TIM_OC1_SetConfig+0x8e>
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	4a14      	ldr	r2, [pc, #80]	; (800b828 <TIM_OC1_SetConfig+0xdc>)
 800b7d6:	4293      	cmp	r3, r2
 800b7d8:	d111      	bne.n	800b7fe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b7da:	693b      	ldr	r3, [r7, #16]
 800b7dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b7e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b7e2:	693b      	ldr	r3, [r7, #16]
 800b7e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b7e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	695b      	ldr	r3, [r3, #20]
 800b7ee:	693a      	ldr	r2, [r7, #16]
 800b7f0:	4313      	orrs	r3, r2
 800b7f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	699b      	ldr	r3, [r3, #24]
 800b7f8:	693a      	ldr	r2, [r7, #16]
 800b7fa:	4313      	orrs	r3, r2
 800b7fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	693a      	ldr	r2, [r7, #16]
 800b802:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	68fa      	ldr	r2, [r7, #12]
 800b808:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	685a      	ldr	r2, [r3, #4]
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	697a      	ldr	r2, [r7, #20]
 800b816:	621a      	str	r2, [r3, #32]
}
 800b818:	bf00      	nop
 800b81a:	371c      	adds	r7, #28
 800b81c:	46bd      	mov	sp, r7
 800b81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b822:	4770      	bx	lr
 800b824:	40010000 	.word	0x40010000
 800b828:	40010400 	.word	0x40010400

0800b82c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b82c:	b480      	push	{r7}
 800b82e:	b087      	sub	sp, #28
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
 800b834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6a1b      	ldr	r3, [r3, #32]
 800b83a:	f023 0210 	bic.w	r2, r3, #16
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	6a1b      	ldr	r3, [r3, #32]
 800b846:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	685b      	ldr	r3, [r3, #4]
 800b84c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	699b      	ldr	r3, [r3, #24]
 800b852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b85a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b862:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	021b      	lsls	r3, r3, #8
 800b86a:	68fa      	ldr	r2, [r7, #12]
 800b86c:	4313      	orrs	r3, r2
 800b86e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b870:	697b      	ldr	r3, [r7, #20]
 800b872:	f023 0320 	bic.w	r3, r3, #32
 800b876:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	689b      	ldr	r3, [r3, #8]
 800b87c:	011b      	lsls	r3, r3, #4
 800b87e:	697a      	ldr	r2, [r7, #20]
 800b880:	4313      	orrs	r3, r2
 800b882:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	4a22      	ldr	r2, [pc, #136]	; (800b910 <TIM_OC2_SetConfig+0xe4>)
 800b888:	4293      	cmp	r3, r2
 800b88a:	d003      	beq.n	800b894 <TIM_OC2_SetConfig+0x68>
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	4a21      	ldr	r2, [pc, #132]	; (800b914 <TIM_OC2_SetConfig+0xe8>)
 800b890:	4293      	cmp	r3, r2
 800b892:	d10d      	bne.n	800b8b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b894:	697b      	ldr	r3, [r7, #20]
 800b896:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b89a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	68db      	ldr	r3, [r3, #12]
 800b8a0:	011b      	lsls	r3, r3, #4
 800b8a2:	697a      	ldr	r2, [r7, #20]
 800b8a4:	4313      	orrs	r3, r2
 800b8a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	4a17      	ldr	r2, [pc, #92]	; (800b910 <TIM_OC2_SetConfig+0xe4>)
 800b8b4:	4293      	cmp	r3, r2
 800b8b6:	d003      	beq.n	800b8c0 <TIM_OC2_SetConfig+0x94>
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	4a16      	ldr	r2, [pc, #88]	; (800b914 <TIM_OC2_SetConfig+0xe8>)
 800b8bc:	4293      	cmp	r3, r2
 800b8be:	d113      	bne.n	800b8e8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b8c0:	693b      	ldr	r3, [r7, #16]
 800b8c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b8c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b8c8:	693b      	ldr	r3, [r7, #16]
 800b8ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b8ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	695b      	ldr	r3, [r3, #20]
 800b8d4:	009b      	lsls	r3, r3, #2
 800b8d6:	693a      	ldr	r2, [r7, #16]
 800b8d8:	4313      	orrs	r3, r2
 800b8da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	699b      	ldr	r3, [r3, #24]
 800b8e0:	009b      	lsls	r3, r3, #2
 800b8e2:	693a      	ldr	r2, [r7, #16]
 800b8e4:	4313      	orrs	r3, r2
 800b8e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	693a      	ldr	r2, [r7, #16]
 800b8ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	68fa      	ldr	r2, [r7, #12]
 800b8f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	685a      	ldr	r2, [r3, #4]
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	697a      	ldr	r2, [r7, #20]
 800b900:	621a      	str	r2, [r3, #32]
}
 800b902:	bf00      	nop
 800b904:	371c      	adds	r7, #28
 800b906:	46bd      	mov	sp, r7
 800b908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90c:	4770      	bx	lr
 800b90e:	bf00      	nop
 800b910:	40010000 	.word	0x40010000
 800b914:	40010400 	.word	0x40010400

0800b918 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b918:	b480      	push	{r7}
 800b91a:	b087      	sub	sp, #28
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
 800b920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	6a1b      	ldr	r3, [r3, #32]
 800b926:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6a1b      	ldr	r3, [r3, #32]
 800b932:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	685b      	ldr	r3, [r3, #4]
 800b938:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	69db      	ldr	r3, [r3, #28]
 800b93e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	f023 0303 	bic.w	r3, r3, #3
 800b94e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	68fa      	ldr	r2, [r7, #12]
 800b956:	4313      	orrs	r3, r2
 800b958:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b95a:	697b      	ldr	r3, [r7, #20]
 800b95c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b960:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	689b      	ldr	r3, [r3, #8]
 800b966:	021b      	lsls	r3, r3, #8
 800b968:	697a      	ldr	r2, [r7, #20]
 800b96a:	4313      	orrs	r3, r2
 800b96c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	4a21      	ldr	r2, [pc, #132]	; (800b9f8 <TIM_OC3_SetConfig+0xe0>)
 800b972:	4293      	cmp	r3, r2
 800b974:	d003      	beq.n	800b97e <TIM_OC3_SetConfig+0x66>
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	4a20      	ldr	r2, [pc, #128]	; (800b9fc <TIM_OC3_SetConfig+0xe4>)
 800b97a:	4293      	cmp	r3, r2
 800b97c:	d10d      	bne.n	800b99a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b97e:	697b      	ldr	r3, [r7, #20]
 800b980:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b984:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	68db      	ldr	r3, [r3, #12]
 800b98a:	021b      	lsls	r3, r3, #8
 800b98c:	697a      	ldr	r2, [r7, #20]
 800b98e:	4313      	orrs	r3, r2
 800b990:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b998:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	4a16      	ldr	r2, [pc, #88]	; (800b9f8 <TIM_OC3_SetConfig+0xe0>)
 800b99e:	4293      	cmp	r3, r2
 800b9a0:	d003      	beq.n	800b9aa <TIM_OC3_SetConfig+0x92>
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	4a15      	ldr	r2, [pc, #84]	; (800b9fc <TIM_OC3_SetConfig+0xe4>)
 800b9a6:	4293      	cmp	r3, r2
 800b9a8:	d113      	bne.n	800b9d2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b9aa:	693b      	ldr	r3, [r7, #16]
 800b9ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b9b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b9b2:	693b      	ldr	r3, [r7, #16]
 800b9b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b9b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	695b      	ldr	r3, [r3, #20]
 800b9be:	011b      	lsls	r3, r3, #4
 800b9c0:	693a      	ldr	r2, [r7, #16]
 800b9c2:	4313      	orrs	r3, r2
 800b9c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	699b      	ldr	r3, [r3, #24]
 800b9ca:	011b      	lsls	r3, r3, #4
 800b9cc:	693a      	ldr	r2, [r7, #16]
 800b9ce:	4313      	orrs	r3, r2
 800b9d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	693a      	ldr	r2, [r7, #16]
 800b9d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	68fa      	ldr	r2, [r7, #12]
 800b9dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	685a      	ldr	r2, [r3, #4]
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	697a      	ldr	r2, [r7, #20]
 800b9ea:	621a      	str	r2, [r3, #32]
}
 800b9ec:	bf00      	nop
 800b9ee:	371c      	adds	r7, #28
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f6:	4770      	bx	lr
 800b9f8:	40010000 	.word	0x40010000
 800b9fc:	40010400 	.word	0x40010400

0800ba00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ba00:	b480      	push	{r7}
 800ba02:	b087      	sub	sp, #28
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
 800ba08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	6a1b      	ldr	r3, [r3, #32]
 800ba0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	6a1b      	ldr	r3, [r3, #32]
 800ba1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	685b      	ldr	r3, [r3, #4]
 800ba20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	69db      	ldr	r3, [r3, #28]
 800ba26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	021b      	lsls	r3, r3, #8
 800ba3e:	68fa      	ldr	r2, [r7, #12]
 800ba40:	4313      	orrs	r3, r2
 800ba42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ba44:	693b      	ldr	r3, [r7, #16]
 800ba46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ba4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	689b      	ldr	r3, [r3, #8]
 800ba50:	031b      	lsls	r3, r3, #12
 800ba52:	693a      	ldr	r2, [r7, #16]
 800ba54:	4313      	orrs	r3, r2
 800ba56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	4a12      	ldr	r2, [pc, #72]	; (800baa4 <TIM_OC4_SetConfig+0xa4>)
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d003      	beq.n	800ba68 <TIM_OC4_SetConfig+0x68>
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	4a11      	ldr	r2, [pc, #68]	; (800baa8 <TIM_OC4_SetConfig+0xa8>)
 800ba64:	4293      	cmp	r3, r2
 800ba66:	d109      	bne.n	800ba7c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ba68:	697b      	ldr	r3, [r7, #20]
 800ba6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ba6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	695b      	ldr	r3, [r3, #20]
 800ba74:	019b      	lsls	r3, r3, #6
 800ba76:	697a      	ldr	r2, [r7, #20]
 800ba78:	4313      	orrs	r3, r2
 800ba7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	697a      	ldr	r2, [r7, #20]
 800ba80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	68fa      	ldr	r2, [r7, #12]
 800ba86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	685a      	ldr	r2, [r3, #4]
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	693a      	ldr	r2, [r7, #16]
 800ba94:	621a      	str	r2, [r3, #32]
}
 800ba96:	bf00      	nop
 800ba98:	371c      	adds	r7, #28
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa0:	4770      	bx	lr
 800baa2:	bf00      	nop
 800baa4:	40010000 	.word	0x40010000
 800baa8:	40010400 	.word	0x40010400

0800baac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800baac:	b480      	push	{r7}
 800baae:	b087      	sub	sp, #28
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	60f8      	str	r0, [r7, #12]
 800bab4:	60b9      	str	r1, [r7, #8]
 800bab6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	f003 031f 	and.w	r3, r3, #31
 800babe:	2201      	movs	r2, #1
 800bac0:	fa02 f303 	lsl.w	r3, r2, r3
 800bac4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	6a1a      	ldr	r2, [r3, #32]
 800baca:	697b      	ldr	r3, [r7, #20]
 800bacc:	43db      	mvns	r3, r3
 800bace:	401a      	ands	r2, r3
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	6a1a      	ldr	r2, [r3, #32]
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	f003 031f 	and.w	r3, r3, #31
 800bade:	6879      	ldr	r1, [r7, #4]
 800bae0:	fa01 f303 	lsl.w	r3, r1, r3
 800bae4:	431a      	orrs	r2, r3
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	621a      	str	r2, [r3, #32]
}
 800baea:	bf00      	nop
 800baec:	371c      	adds	r7, #28
 800baee:	46bd      	mov	sp, r7
 800baf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf4:	4770      	bx	lr
	...

0800baf8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800baf8:	b480      	push	{r7}
 800bafa:	b085      	sub	sp, #20
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
 800bb00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb08:	2b01      	cmp	r3, #1
 800bb0a:	d101      	bne.n	800bb10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bb0c:	2302      	movs	r3, #2
 800bb0e:	e05a      	b.n	800bbc6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2201      	movs	r2, #1
 800bb14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2202      	movs	r2, #2
 800bb1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	685b      	ldr	r3, [r3, #4]
 800bb26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	689b      	ldr	r3, [r3, #8]
 800bb2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	68fa      	ldr	r2, [r7, #12]
 800bb3e:	4313      	orrs	r3, r2
 800bb40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	68fa      	ldr	r2, [r7, #12]
 800bb48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	4a21      	ldr	r2, [pc, #132]	; (800bbd4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800bb50:	4293      	cmp	r3, r2
 800bb52:	d022      	beq.n	800bb9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb5c:	d01d      	beq.n	800bb9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	4a1d      	ldr	r2, [pc, #116]	; (800bbd8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800bb64:	4293      	cmp	r3, r2
 800bb66:	d018      	beq.n	800bb9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	4a1b      	ldr	r2, [pc, #108]	; (800bbdc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800bb6e:	4293      	cmp	r3, r2
 800bb70:	d013      	beq.n	800bb9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	4a1a      	ldr	r2, [pc, #104]	; (800bbe0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800bb78:	4293      	cmp	r3, r2
 800bb7a:	d00e      	beq.n	800bb9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	4a18      	ldr	r2, [pc, #96]	; (800bbe4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800bb82:	4293      	cmp	r3, r2
 800bb84:	d009      	beq.n	800bb9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	4a17      	ldr	r2, [pc, #92]	; (800bbe8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800bb8c:	4293      	cmp	r3, r2
 800bb8e:	d004      	beq.n	800bb9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	4a15      	ldr	r2, [pc, #84]	; (800bbec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800bb96:	4293      	cmp	r3, r2
 800bb98:	d10c      	bne.n	800bbb4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bba0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	685b      	ldr	r3, [r3, #4]
 800bba6:	68ba      	ldr	r2, [r7, #8]
 800bba8:	4313      	orrs	r3, r2
 800bbaa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	68ba      	ldr	r2, [r7, #8]
 800bbb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2201      	movs	r2, #1
 800bbb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bbc4:	2300      	movs	r3, #0
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3714      	adds	r7, #20
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd0:	4770      	bx	lr
 800bbd2:	bf00      	nop
 800bbd4:	40010000 	.word	0x40010000
 800bbd8:	40000400 	.word	0x40000400
 800bbdc:	40000800 	.word	0x40000800
 800bbe0:	40000c00 	.word	0x40000c00
 800bbe4:	40010400 	.word	0x40010400
 800bbe8:	40014000 	.word	0x40014000
 800bbec:	40001800 	.word	0x40001800

0800bbf0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b085      	sub	sp, #20
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
 800bbf8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc04:	2b01      	cmp	r3, #1
 800bc06:	d101      	bne.n	800bc0c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bc08:	2302      	movs	r3, #2
 800bc0a:	e03d      	b.n	800bc88 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2201      	movs	r2, #1
 800bc10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	68db      	ldr	r3, [r3, #12]
 800bc1e:	4313      	orrs	r3, r2
 800bc20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	689b      	ldr	r3, [r3, #8]
 800bc2c:	4313      	orrs	r3, r2
 800bc2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	685b      	ldr	r3, [r3, #4]
 800bc3a:	4313      	orrs	r3, r2
 800bc3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	4313      	orrs	r3, r2
 800bc4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	691b      	ldr	r3, [r3, #16]
 800bc56:	4313      	orrs	r3, r2
 800bc58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	695b      	ldr	r3, [r3, #20]
 800bc64:	4313      	orrs	r3, r2
 800bc66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	69db      	ldr	r3, [r3, #28]
 800bc72:	4313      	orrs	r3, r2
 800bc74:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	68fa      	ldr	r2, [r7, #12]
 800bc7c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2200      	movs	r2, #0
 800bc82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bc86:	2300      	movs	r3, #0
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	3714      	adds	r7, #20
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc92:	4770      	bx	lr

0800bc94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bc94:	b480      	push	{r7}
 800bc96:	b083      	sub	sp, #12
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bc9c:	bf00      	nop
 800bc9e:	370c      	adds	r7, #12
 800bca0:	46bd      	mov	sp, r7
 800bca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca6:	4770      	bx	lr

0800bca8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bca8:	b480      	push	{r7}
 800bcaa:	b083      	sub	sp, #12
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bcb0:	bf00      	nop
 800bcb2:	370c      	adds	r7, #12
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcba:	4770      	bx	lr

0800bcbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b082      	sub	sp, #8
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d101      	bne.n	800bcce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bcca:	2301      	movs	r3, #1
 800bccc:	e03f      	b.n	800bd4e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800bcd4:	b2db      	uxtb	r3, r3
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d106      	bne.n	800bce8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	2200      	movs	r2, #0
 800bcde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f7f9 f9c6 	bl	8005074 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2224      	movs	r2, #36	; 0x24
 800bcec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	68da      	ldr	r2, [r3, #12]
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bcfe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bd00:	6878      	ldr	r0, [r7, #4]
 800bd02:	f000 f829 	bl	800bd58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	691a      	ldr	r2, [r3, #16]
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bd14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	695a      	ldr	r2, [r3, #20]
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bd24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	68da      	ldr	r2, [r3, #12]
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bd34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2200      	movs	r2, #0
 800bd3a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2220      	movs	r2, #32
 800bd40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2220      	movs	r2, #32
 800bd48:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800bd4c:	2300      	movs	r3, #0
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	3708      	adds	r7, #8
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}
	...

0800bd58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bd58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd5c:	b085      	sub	sp, #20
 800bd5e:	af00      	add	r7, sp, #0
 800bd60:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	691b      	ldr	r3, [r3, #16]
 800bd68:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	68da      	ldr	r2, [r3, #12]
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	430a      	orrs	r2, r1
 800bd76:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	689a      	ldr	r2, [r3, #8]
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	691b      	ldr	r3, [r3, #16]
 800bd80:	431a      	orrs	r2, r3
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	695b      	ldr	r3, [r3, #20]
 800bd86:	431a      	orrs	r2, r3
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	69db      	ldr	r3, [r3, #28]
 800bd8c:	4313      	orrs	r3, r2
 800bd8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	68db      	ldr	r3, [r3, #12]
 800bd96:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800bd9a:	f023 030c 	bic.w	r3, r3, #12
 800bd9e:	687a      	ldr	r2, [r7, #4]
 800bda0:	6812      	ldr	r2, [r2, #0]
 800bda2:	68f9      	ldr	r1, [r7, #12]
 800bda4:	430b      	orrs	r3, r1
 800bda6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	695b      	ldr	r3, [r3, #20]
 800bdae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	699a      	ldr	r2, [r3, #24]
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	430a      	orrs	r2, r1
 800bdbc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	69db      	ldr	r3, [r3, #28]
 800bdc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bdc6:	f040 818b 	bne.w	800c0e0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	4ac1      	ldr	r2, [pc, #772]	; (800c0d4 <UART_SetConfig+0x37c>)
 800bdd0:	4293      	cmp	r3, r2
 800bdd2:	d005      	beq.n	800bde0 <UART_SetConfig+0x88>
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	4abf      	ldr	r2, [pc, #764]	; (800c0d8 <UART_SetConfig+0x380>)
 800bdda:	4293      	cmp	r3, r2
 800bddc:	f040 80bd 	bne.w	800bf5a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bde0:	f7fc fbcc 	bl	800857c <HAL_RCC_GetPCLK2Freq>
 800bde4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	461d      	mov	r5, r3
 800bdea:	f04f 0600 	mov.w	r6, #0
 800bdee:	46a8      	mov	r8, r5
 800bdf0:	46b1      	mov	r9, r6
 800bdf2:	eb18 0308 	adds.w	r3, r8, r8
 800bdf6:	eb49 0409 	adc.w	r4, r9, r9
 800bdfa:	4698      	mov	r8, r3
 800bdfc:	46a1      	mov	r9, r4
 800bdfe:	eb18 0805 	adds.w	r8, r8, r5
 800be02:	eb49 0906 	adc.w	r9, r9, r6
 800be06:	f04f 0100 	mov.w	r1, #0
 800be0a:	f04f 0200 	mov.w	r2, #0
 800be0e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800be12:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800be16:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800be1a:	4688      	mov	r8, r1
 800be1c:	4691      	mov	r9, r2
 800be1e:	eb18 0005 	adds.w	r0, r8, r5
 800be22:	eb49 0106 	adc.w	r1, r9, r6
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	685b      	ldr	r3, [r3, #4]
 800be2a:	461d      	mov	r5, r3
 800be2c:	f04f 0600 	mov.w	r6, #0
 800be30:	196b      	adds	r3, r5, r5
 800be32:	eb46 0406 	adc.w	r4, r6, r6
 800be36:	461a      	mov	r2, r3
 800be38:	4623      	mov	r3, r4
 800be3a:	f7f4 ff3d 	bl	8000cb8 <__aeabi_uldivmod>
 800be3e:	4603      	mov	r3, r0
 800be40:	460c      	mov	r4, r1
 800be42:	461a      	mov	r2, r3
 800be44:	4ba5      	ldr	r3, [pc, #660]	; (800c0dc <UART_SetConfig+0x384>)
 800be46:	fba3 2302 	umull	r2, r3, r3, r2
 800be4a:	095b      	lsrs	r3, r3, #5
 800be4c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	461d      	mov	r5, r3
 800be54:	f04f 0600 	mov.w	r6, #0
 800be58:	46a9      	mov	r9, r5
 800be5a:	46b2      	mov	sl, r6
 800be5c:	eb19 0309 	adds.w	r3, r9, r9
 800be60:	eb4a 040a 	adc.w	r4, sl, sl
 800be64:	4699      	mov	r9, r3
 800be66:	46a2      	mov	sl, r4
 800be68:	eb19 0905 	adds.w	r9, r9, r5
 800be6c:	eb4a 0a06 	adc.w	sl, sl, r6
 800be70:	f04f 0100 	mov.w	r1, #0
 800be74:	f04f 0200 	mov.w	r2, #0
 800be78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800be7c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800be80:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800be84:	4689      	mov	r9, r1
 800be86:	4692      	mov	sl, r2
 800be88:	eb19 0005 	adds.w	r0, r9, r5
 800be8c:	eb4a 0106 	adc.w	r1, sl, r6
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	685b      	ldr	r3, [r3, #4]
 800be94:	461d      	mov	r5, r3
 800be96:	f04f 0600 	mov.w	r6, #0
 800be9a:	196b      	adds	r3, r5, r5
 800be9c:	eb46 0406 	adc.w	r4, r6, r6
 800bea0:	461a      	mov	r2, r3
 800bea2:	4623      	mov	r3, r4
 800bea4:	f7f4 ff08 	bl	8000cb8 <__aeabi_uldivmod>
 800bea8:	4603      	mov	r3, r0
 800beaa:	460c      	mov	r4, r1
 800beac:	461a      	mov	r2, r3
 800beae:	4b8b      	ldr	r3, [pc, #556]	; (800c0dc <UART_SetConfig+0x384>)
 800beb0:	fba3 1302 	umull	r1, r3, r3, r2
 800beb4:	095b      	lsrs	r3, r3, #5
 800beb6:	2164      	movs	r1, #100	; 0x64
 800beb8:	fb01 f303 	mul.w	r3, r1, r3
 800bebc:	1ad3      	subs	r3, r2, r3
 800bebe:	00db      	lsls	r3, r3, #3
 800bec0:	3332      	adds	r3, #50	; 0x32
 800bec2:	4a86      	ldr	r2, [pc, #536]	; (800c0dc <UART_SetConfig+0x384>)
 800bec4:	fba2 2303 	umull	r2, r3, r2, r3
 800bec8:	095b      	lsrs	r3, r3, #5
 800beca:	005b      	lsls	r3, r3, #1
 800becc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bed0:	4498      	add	r8, r3
 800bed2:	68bb      	ldr	r3, [r7, #8]
 800bed4:	461d      	mov	r5, r3
 800bed6:	f04f 0600 	mov.w	r6, #0
 800beda:	46a9      	mov	r9, r5
 800bedc:	46b2      	mov	sl, r6
 800bede:	eb19 0309 	adds.w	r3, r9, r9
 800bee2:	eb4a 040a 	adc.w	r4, sl, sl
 800bee6:	4699      	mov	r9, r3
 800bee8:	46a2      	mov	sl, r4
 800beea:	eb19 0905 	adds.w	r9, r9, r5
 800beee:	eb4a 0a06 	adc.w	sl, sl, r6
 800bef2:	f04f 0100 	mov.w	r1, #0
 800bef6:	f04f 0200 	mov.w	r2, #0
 800befa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800befe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800bf02:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800bf06:	4689      	mov	r9, r1
 800bf08:	4692      	mov	sl, r2
 800bf0a:	eb19 0005 	adds.w	r0, r9, r5
 800bf0e:	eb4a 0106 	adc.w	r1, sl, r6
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	685b      	ldr	r3, [r3, #4]
 800bf16:	461d      	mov	r5, r3
 800bf18:	f04f 0600 	mov.w	r6, #0
 800bf1c:	196b      	adds	r3, r5, r5
 800bf1e:	eb46 0406 	adc.w	r4, r6, r6
 800bf22:	461a      	mov	r2, r3
 800bf24:	4623      	mov	r3, r4
 800bf26:	f7f4 fec7 	bl	8000cb8 <__aeabi_uldivmod>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	460c      	mov	r4, r1
 800bf2e:	461a      	mov	r2, r3
 800bf30:	4b6a      	ldr	r3, [pc, #424]	; (800c0dc <UART_SetConfig+0x384>)
 800bf32:	fba3 1302 	umull	r1, r3, r3, r2
 800bf36:	095b      	lsrs	r3, r3, #5
 800bf38:	2164      	movs	r1, #100	; 0x64
 800bf3a:	fb01 f303 	mul.w	r3, r1, r3
 800bf3e:	1ad3      	subs	r3, r2, r3
 800bf40:	00db      	lsls	r3, r3, #3
 800bf42:	3332      	adds	r3, #50	; 0x32
 800bf44:	4a65      	ldr	r2, [pc, #404]	; (800c0dc <UART_SetConfig+0x384>)
 800bf46:	fba2 2303 	umull	r2, r3, r2, r3
 800bf4a:	095b      	lsrs	r3, r3, #5
 800bf4c:	f003 0207 	and.w	r2, r3, #7
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	4442      	add	r2, r8
 800bf56:	609a      	str	r2, [r3, #8]
 800bf58:	e26f      	b.n	800c43a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bf5a:	f7fc fafb 	bl	8008554 <HAL_RCC_GetPCLK1Freq>
 800bf5e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	461d      	mov	r5, r3
 800bf64:	f04f 0600 	mov.w	r6, #0
 800bf68:	46a8      	mov	r8, r5
 800bf6a:	46b1      	mov	r9, r6
 800bf6c:	eb18 0308 	adds.w	r3, r8, r8
 800bf70:	eb49 0409 	adc.w	r4, r9, r9
 800bf74:	4698      	mov	r8, r3
 800bf76:	46a1      	mov	r9, r4
 800bf78:	eb18 0805 	adds.w	r8, r8, r5
 800bf7c:	eb49 0906 	adc.w	r9, r9, r6
 800bf80:	f04f 0100 	mov.w	r1, #0
 800bf84:	f04f 0200 	mov.w	r2, #0
 800bf88:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800bf8c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800bf90:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800bf94:	4688      	mov	r8, r1
 800bf96:	4691      	mov	r9, r2
 800bf98:	eb18 0005 	adds.w	r0, r8, r5
 800bf9c:	eb49 0106 	adc.w	r1, r9, r6
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	685b      	ldr	r3, [r3, #4]
 800bfa4:	461d      	mov	r5, r3
 800bfa6:	f04f 0600 	mov.w	r6, #0
 800bfaa:	196b      	adds	r3, r5, r5
 800bfac:	eb46 0406 	adc.w	r4, r6, r6
 800bfb0:	461a      	mov	r2, r3
 800bfb2:	4623      	mov	r3, r4
 800bfb4:	f7f4 fe80 	bl	8000cb8 <__aeabi_uldivmod>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	460c      	mov	r4, r1
 800bfbc:	461a      	mov	r2, r3
 800bfbe:	4b47      	ldr	r3, [pc, #284]	; (800c0dc <UART_SetConfig+0x384>)
 800bfc0:	fba3 2302 	umull	r2, r3, r3, r2
 800bfc4:	095b      	lsrs	r3, r3, #5
 800bfc6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800bfca:	68bb      	ldr	r3, [r7, #8]
 800bfcc:	461d      	mov	r5, r3
 800bfce:	f04f 0600 	mov.w	r6, #0
 800bfd2:	46a9      	mov	r9, r5
 800bfd4:	46b2      	mov	sl, r6
 800bfd6:	eb19 0309 	adds.w	r3, r9, r9
 800bfda:	eb4a 040a 	adc.w	r4, sl, sl
 800bfde:	4699      	mov	r9, r3
 800bfe0:	46a2      	mov	sl, r4
 800bfe2:	eb19 0905 	adds.w	r9, r9, r5
 800bfe6:	eb4a 0a06 	adc.w	sl, sl, r6
 800bfea:	f04f 0100 	mov.w	r1, #0
 800bfee:	f04f 0200 	mov.w	r2, #0
 800bff2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bff6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800bffa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800bffe:	4689      	mov	r9, r1
 800c000:	4692      	mov	sl, r2
 800c002:	eb19 0005 	adds.w	r0, r9, r5
 800c006:	eb4a 0106 	adc.w	r1, sl, r6
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	685b      	ldr	r3, [r3, #4]
 800c00e:	461d      	mov	r5, r3
 800c010:	f04f 0600 	mov.w	r6, #0
 800c014:	196b      	adds	r3, r5, r5
 800c016:	eb46 0406 	adc.w	r4, r6, r6
 800c01a:	461a      	mov	r2, r3
 800c01c:	4623      	mov	r3, r4
 800c01e:	f7f4 fe4b 	bl	8000cb8 <__aeabi_uldivmod>
 800c022:	4603      	mov	r3, r0
 800c024:	460c      	mov	r4, r1
 800c026:	461a      	mov	r2, r3
 800c028:	4b2c      	ldr	r3, [pc, #176]	; (800c0dc <UART_SetConfig+0x384>)
 800c02a:	fba3 1302 	umull	r1, r3, r3, r2
 800c02e:	095b      	lsrs	r3, r3, #5
 800c030:	2164      	movs	r1, #100	; 0x64
 800c032:	fb01 f303 	mul.w	r3, r1, r3
 800c036:	1ad3      	subs	r3, r2, r3
 800c038:	00db      	lsls	r3, r3, #3
 800c03a:	3332      	adds	r3, #50	; 0x32
 800c03c:	4a27      	ldr	r2, [pc, #156]	; (800c0dc <UART_SetConfig+0x384>)
 800c03e:	fba2 2303 	umull	r2, r3, r2, r3
 800c042:	095b      	lsrs	r3, r3, #5
 800c044:	005b      	lsls	r3, r3, #1
 800c046:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c04a:	4498      	add	r8, r3
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	461d      	mov	r5, r3
 800c050:	f04f 0600 	mov.w	r6, #0
 800c054:	46a9      	mov	r9, r5
 800c056:	46b2      	mov	sl, r6
 800c058:	eb19 0309 	adds.w	r3, r9, r9
 800c05c:	eb4a 040a 	adc.w	r4, sl, sl
 800c060:	4699      	mov	r9, r3
 800c062:	46a2      	mov	sl, r4
 800c064:	eb19 0905 	adds.w	r9, r9, r5
 800c068:	eb4a 0a06 	adc.w	sl, sl, r6
 800c06c:	f04f 0100 	mov.w	r1, #0
 800c070:	f04f 0200 	mov.w	r2, #0
 800c074:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c078:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c07c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c080:	4689      	mov	r9, r1
 800c082:	4692      	mov	sl, r2
 800c084:	eb19 0005 	adds.w	r0, r9, r5
 800c088:	eb4a 0106 	adc.w	r1, sl, r6
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	685b      	ldr	r3, [r3, #4]
 800c090:	461d      	mov	r5, r3
 800c092:	f04f 0600 	mov.w	r6, #0
 800c096:	196b      	adds	r3, r5, r5
 800c098:	eb46 0406 	adc.w	r4, r6, r6
 800c09c:	461a      	mov	r2, r3
 800c09e:	4623      	mov	r3, r4
 800c0a0:	f7f4 fe0a 	bl	8000cb8 <__aeabi_uldivmod>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	460c      	mov	r4, r1
 800c0a8:	461a      	mov	r2, r3
 800c0aa:	4b0c      	ldr	r3, [pc, #48]	; (800c0dc <UART_SetConfig+0x384>)
 800c0ac:	fba3 1302 	umull	r1, r3, r3, r2
 800c0b0:	095b      	lsrs	r3, r3, #5
 800c0b2:	2164      	movs	r1, #100	; 0x64
 800c0b4:	fb01 f303 	mul.w	r3, r1, r3
 800c0b8:	1ad3      	subs	r3, r2, r3
 800c0ba:	00db      	lsls	r3, r3, #3
 800c0bc:	3332      	adds	r3, #50	; 0x32
 800c0be:	4a07      	ldr	r2, [pc, #28]	; (800c0dc <UART_SetConfig+0x384>)
 800c0c0:	fba2 2303 	umull	r2, r3, r2, r3
 800c0c4:	095b      	lsrs	r3, r3, #5
 800c0c6:	f003 0207 	and.w	r2, r3, #7
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	4442      	add	r2, r8
 800c0d0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800c0d2:	e1b2      	b.n	800c43a <UART_SetConfig+0x6e2>
 800c0d4:	40011000 	.word	0x40011000
 800c0d8:	40011400 	.word	0x40011400
 800c0dc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	4ad7      	ldr	r2, [pc, #860]	; (800c444 <UART_SetConfig+0x6ec>)
 800c0e6:	4293      	cmp	r3, r2
 800c0e8:	d005      	beq.n	800c0f6 <UART_SetConfig+0x39e>
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	4ad6      	ldr	r2, [pc, #856]	; (800c448 <UART_SetConfig+0x6f0>)
 800c0f0:	4293      	cmp	r3, r2
 800c0f2:	f040 80d1 	bne.w	800c298 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800c0f6:	f7fc fa41 	bl	800857c <HAL_RCC_GetPCLK2Freq>
 800c0fa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	469a      	mov	sl, r3
 800c100:	f04f 0b00 	mov.w	fp, #0
 800c104:	46d0      	mov	r8, sl
 800c106:	46d9      	mov	r9, fp
 800c108:	eb18 0308 	adds.w	r3, r8, r8
 800c10c:	eb49 0409 	adc.w	r4, r9, r9
 800c110:	4698      	mov	r8, r3
 800c112:	46a1      	mov	r9, r4
 800c114:	eb18 080a 	adds.w	r8, r8, sl
 800c118:	eb49 090b 	adc.w	r9, r9, fp
 800c11c:	f04f 0100 	mov.w	r1, #0
 800c120:	f04f 0200 	mov.w	r2, #0
 800c124:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800c128:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800c12c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800c130:	4688      	mov	r8, r1
 800c132:	4691      	mov	r9, r2
 800c134:	eb1a 0508 	adds.w	r5, sl, r8
 800c138:	eb4b 0609 	adc.w	r6, fp, r9
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	685b      	ldr	r3, [r3, #4]
 800c140:	4619      	mov	r1, r3
 800c142:	f04f 0200 	mov.w	r2, #0
 800c146:	f04f 0300 	mov.w	r3, #0
 800c14a:	f04f 0400 	mov.w	r4, #0
 800c14e:	0094      	lsls	r4, r2, #2
 800c150:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c154:	008b      	lsls	r3, r1, #2
 800c156:	461a      	mov	r2, r3
 800c158:	4623      	mov	r3, r4
 800c15a:	4628      	mov	r0, r5
 800c15c:	4631      	mov	r1, r6
 800c15e:	f7f4 fdab 	bl	8000cb8 <__aeabi_uldivmod>
 800c162:	4603      	mov	r3, r0
 800c164:	460c      	mov	r4, r1
 800c166:	461a      	mov	r2, r3
 800c168:	4bb8      	ldr	r3, [pc, #736]	; (800c44c <UART_SetConfig+0x6f4>)
 800c16a:	fba3 2302 	umull	r2, r3, r3, r2
 800c16e:	095b      	lsrs	r3, r3, #5
 800c170:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	469b      	mov	fp, r3
 800c178:	f04f 0c00 	mov.w	ip, #0
 800c17c:	46d9      	mov	r9, fp
 800c17e:	46e2      	mov	sl, ip
 800c180:	eb19 0309 	adds.w	r3, r9, r9
 800c184:	eb4a 040a 	adc.w	r4, sl, sl
 800c188:	4699      	mov	r9, r3
 800c18a:	46a2      	mov	sl, r4
 800c18c:	eb19 090b 	adds.w	r9, r9, fp
 800c190:	eb4a 0a0c 	adc.w	sl, sl, ip
 800c194:	f04f 0100 	mov.w	r1, #0
 800c198:	f04f 0200 	mov.w	r2, #0
 800c19c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c1a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c1a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c1a8:	4689      	mov	r9, r1
 800c1aa:	4692      	mov	sl, r2
 800c1ac:	eb1b 0509 	adds.w	r5, fp, r9
 800c1b0:	eb4c 060a 	adc.w	r6, ip, sl
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	685b      	ldr	r3, [r3, #4]
 800c1b8:	4619      	mov	r1, r3
 800c1ba:	f04f 0200 	mov.w	r2, #0
 800c1be:	f04f 0300 	mov.w	r3, #0
 800c1c2:	f04f 0400 	mov.w	r4, #0
 800c1c6:	0094      	lsls	r4, r2, #2
 800c1c8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c1cc:	008b      	lsls	r3, r1, #2
 800c1ce:	461a      	mov	r2, r3
 800c1d0:	4623      	mov	r3, r4
 800c1d2:	4628      	mov	r0, r5
 800c1d4:	4631      	mov	r1, r6
 800c1d6:	f7f4 fd6f 	bl	8000cb8 <__aeabi_uldivmod>
 800c1da:	4603      	mov	r3, r0
 800c1dc:	460c      	mov	r4, r1
 800c1de:	461a      	mov	r2, r3
 800c1e0:	4b9a      	ldr	r3, [pc, #616]	; (800c44c <UART_SetConfig+0x6f4>)
 800c1e2:	fba3 1302 	umull	r1, r3, r3, r2
 800c1e6:	095b      	lsrs	r3, r3, #5
 800c1e8:	2164      	movs	r1, #100	; 0x64
 800c1ea:	fb01 f303 	mul.w	r3, r1, r3
 800c1ee:	1ad3      	subs	r3, r2, r3
 800c1f0:	011b      	lsls	r3, r3, #4
 800c1f2:	3332      	adds	r3, #50	; 0x32
 800c1f4:	4a95      	ldr	r2, [pc, #596]	; (800c44c <UART_SetConfig+0x6f4>)
 800c1f6:	fba2 2303 	umull	r2, r3, r2, r3
 800c1fa:	095b      	lsrs	r3, r3, #5
 800c1fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c200:	4498      	add	r8, r3
 800c202:	68bb      	ldr	r3, [r7, #8]
 800c204:	469b      	mov	fp, r3
 800c206:	f04f 0c00 	mov.w	ip, #0
 800c20a:	46d9      	mov	r9, fp
 800c20c:	46e2      	mov	sl, ip
 800c20e:	eb19 0309 	adds.w	r3, r9, r9
 800c212:	eb4a 040a 	adc.w	r4, sl, sl
 800c216:	4699      	mov	r9, r3
 800c218:	46a2      	mov	sl, r4
 800c21a:	eb19 090b 	adds.w	r9, r9, fp
 800c21e:	eb4a 0a0c 	adc.w	sl, sl, ip
 800c222:	f04f 0100 	mov.w	r1, #0
 800c226:	f04f 0200 	mov.w	r2, #0
 800c22a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c22e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c232:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c236:	4689      	mov	r9, r1
 800c238:	4692      	mov	sl, r2
 800c23a:	eb1b 0509 	adds.w	r5, fp, r9
 800c23e:	eb4c 060a 	adc.w	r6, ip, sl
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	685b      	ldr	r3, [r3, #4]
 800c246:	4619      	mov	r1, r3
 800c248:	f04f 0200 	mov.w	r2, #0
 800c24c:	f04f 0300 	mov.w	r3, #0
 800c250:	f04f 0400 	mov.w	r4, #0
 800c254:	0094      	lsls	r4, r2, #2
 800c256:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c25a:	008b      	lsls	r3, r1, #2
 800c25c:	461a      	mov	r2, r3
 800c25e:	4623      	mov	r3, r4
 800c260:	4628      	mov	r0, r5
 800c262:	4631      	mov	r1, r6
 800c264:	f7f4 fd28 	bl	8000cb8 <__aeabi_uldivmod>
 800c268:	4603      	mov	r3, r0
 800c26a:	460c      	mov	r4, r1
 800c26c:	461a      	mov	r2, r3
 800c26e:	4b77      	ldr	r3, [pc, #476]	; (800c44c <UART_SetConfig+0x6f4>)
 800c270:	fba3 1302 	umull	r1, r3, r3, r2
 800c274:	095b      	lsrs	r3, r3, #5
 800c276:	2164      	movs	r1, #100	; 0x64
 800c278:	fb01 f303 	mul.w	r3, r1, r3
 800c27c:	1ad3      	subs	r3, r2, r3
 800c27e:	011b      	lsls	r3, r3, #4
 800c280:	3332      	adds	r3, #50	; 0x32
 800c282:	4a72      	ldr	r2, [pc, #456]	; (800c44c <UART_SetConfig+0x6f4>)
 800c284:	fba2 2303 	umull	r2, r3, r2, r3
 800c288:	095b      	lsrs	r3, r3, #5
 800c28a:	f003 020f 	and.w	r2, r3, #15
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	4442      	add	r2, r8
 800c294:	609a      	str	r2, [r3, #8]
 800c296:	e0d0      	b.n	800c43a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800c298:	f7fc f95c 	bl	8008554 <HAL_RCC_GetPCLK1Freq>
 800c29c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	469a      	mov	sl, r3
 800c2a2:	f04f 0b00 	mov.w	fp, #0
 800c2a6:	46d0      	mov	r8, sl
 800c2a8:	46d9      	mov	r9, fp
 800c2aa:	eb18 0308 	adds.w	r3, r8, r8
 800c2ae:	eb49 0409 	adc.w	r4, r9, r9
 800c2b2:	4698      	mov	r8, r3
 800c2b4:	46a1      	mov	r9, r4
 800c2b6:	eb18 080a 	adds.w	r8, r8, sl
 800c2ba:	eb49 090b 	adc.w	r9, r9, fp
 800c2be:	f04f 0100 	mov.w	r1, #0
 800c2c2:	f04f 0200 	mov.w	r2, #0
 800c2c6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800c2ca:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800c2ce:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800c2d2:	4688      	mov	r8, r1
 800c2d4:	4691      	mov	r9, r2
 800c2d6:	eb1a 0508 	adds.w	r5, sl, r8
 800c2da:	eb4b 0609 	adc.w	r6, fp, r9
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	685b      	ldr	r3, [r3, #4]
 800c2e2:	4619      	mov	r1, r3
 800c2e4:	f04f 0200 	mov.w	r2, #0
 800c2e8:	f04f 0300 	mov.w	r3, #0
 800c2ec:	f04f 0400 	mov.w	r4, #0
 800c2f0:	0094      	lsls	r4, r2, #2
 800c2f2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c2f6:	008b      	lsls	r3, r1, #2
 800c2f8:	461a      	mov	r2, r3
 800c2fa:	4623      	mov	r3, r4
 800c2fc:	4628      	mov	r0, r5
 800c2fe:	4631      	mov	r1, r6
 800c300:	f7f4 fcda 	bl	8000cb8 <__aeabi_uldivmod>
 800c304:	4603      	mov	r3, r0
 800c306:	460c      	mov	r4, r1
 800c308:	461a      	mov	r2, r3
 800c30a:	4b50      	ldr	r3, [pc, #320]	; (800c44c <UART_SetConfig+0x6f4>)
 800c30c:	fba3 2302 	umull	r2, r3, r3, r2
 800c310:	095b      	lsrs	r3, r3, #5
 800c312:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800c316:	68bb      	ldr	r3, [r7, #8]
 800c318:	469b      	mov	fp, r3
 800c31a:	f04f 0c00 	mov.w	ip, #0
 800c31e:	46d9      	mov	r9, fp
 800c320:	46e2      	mov	sl, ip
 800c322:	eb19 0309 	adds.w	r3, r9, r9
 800c326:	eb4a 040a 	adc.w	r4, sl, sl
 800c32a:	4699      	mov	r9, r3
 800c32c:	46a2      	mov	sl, r4
 800c32e:	eb19 090b 	adds.w	r9, r9, fp
 800c332:	eb4a 0a0c 	adc.w	sl, sl, ip
 800c336:	f04f 0100 	mov.w	r1, #0
 800c33a:	f04f 0200 	mov.w	r2, #0
 800c33e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c342:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c346:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c34a:	4689      	mov	r9, r1
 800c34c:	4692      	mov	sl, r2
 800c34e:	eb1b 0509 	adds.w	r5, fp, r9
 800c352:	eb4c 060a 	adc.w	r6, ip, sl
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	685b      	ldr	r3, [r3, #4]
 800c35a:	4619      	mov	r1, r3
 800c35c:	f04f 0200 	mov.w	r2, #0
 800c360:	f04f 0300 	mov.w	r3, #0
 800c364:	f04f 0400 	mov.w	r4, #0
 800c368:	0094      	lsls	r4, r2, #2
 800c36a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c36e:	008b      	lsls	r3, r1, #2
 800c370:	461a      	mov	r2, r3
 800c372:	4623      	mov	r3, r4
 800c374:	4628      	mov	r0, r5
 800c376:	4631      	mov	r1, r6
 800c378:	f7f4 fc9e 	bl	8000cb8 <__aeabi_uldivmod>
 800c37c:	4603      	mov	r3, r0
 800c37e:	460c      	mov	r4, r1
 800c380:	461a      	mov	r2, r3
 800c382:	4b32      	ldr	r3, [pc, #200]	; (800c44c <UART_SetConfig+0x6f4>)
 800c384:	fba3 1302 	umull	r1, r3, r3, r2
 800c388:	095b      	lsrs	r3, r3, #5
 800c38a:	2164      	movs	r1, #100	; 0x64
 800c38c:	fb01 f303 	mul.w	r3, r1, r3
 800c390:	1ad3      	subs	r3, r2, r3
 800c392:	011b      	lsls	r3, r3, #4
 800c394:	3332      	adds	r3, #50	; 0x32
 800c396:	4a2d      	ldr	r2, [pc, #180]	; (800c44c <UART_SetConfig+0x6f4>)
 800c398:	fba2 2303 	umull	r2, r3, r2, r3
 800c39c:	095b      	lsrs	r3, r3, #5
 800c39e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c3a2:	4498      	add	r8, r3
 800c3a4:	68bb      	ldr	r3, [r7, #8]
 800c3a6:	469b      	mov	fp, r3
 800c3a8:	f04f 0c00 	mov.w	ip, #0
 800c3ac:	46d9      	mov	r9, fp
 800c3ae:	46e2      	mov	sl, ip
 800c3b0:	eb19 0309 	adds.w	r3, r9, r9
 800c3b4:	eb4a 040a 	adc.w	r4, sl, sl
 800c3b8:	4699      	mov	r9, r3
 800c3ba:	46a2      	mov	sl, r4
 800c3bc:	eb19 090b 	adds.w	r9, r9, fp
 800c3c0:	eb4a 0a0c 	adc.w	sl, sl, ip
 800c3c4:	f04f 0100 	mov.w	r1, #0
 800c3c8:	f04f 0200 	mov.w	r2, #0
 800c3cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c3d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c3d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c3d8:	4689      	mov	r9, r1
 800c3da:	4692      	mov	sl, r2
 800c3dc:	eb1b 0509 	adds.w	r5, fp, r9
 800c3e0:	eb4c 060a 	adc.w	r6, ip, sl
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	685b      	ldr	r3, [r3, #4]
 800c3e8:	4619      	mov	r1, r3
 800c3ea:	f04f 0200 	mov.w	r2, #0
 800c3ee:	f04f 0300 	mov.w	r3, #0
 800c3f2:	f04f 0400 	mov.w	r4, #0
 800c3f6:	0094      	lsls	r4, r2, #2
 800c3f8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c3fc:	008b      	lsls	r3, r1, #2
 800c3fe:	461a      	mov	r2, r3
 800c400:	4623      	mov	r3, r4
 800c402:	4628      	mov	r0, r5
 800c404:	4631      	mov	r1, r6
 800c406:	f7f4 fc57 	bl	8000cb8 <__aeabi_uldivmod>
 800c40a:	4603      	mov	r3, r0
 800c40c:	460c      	mov	r4, r1
 800c40e:	461a      	mov	r2, r3
 800c410:	4b0e      	ldr	r3, [pc, #56]	; (800c44c <UART_SetConfig+0x6f4>)
 800c412:	fba3 1302 	umull	r1, r3, r3, r2
 800c416:	095b      	lsrs	r3, r3, #5
 800c418:	2164      	movs	r1, #100	; 0x64
 800c41a:	fb01 f303 	mul.w	r3, r1, r3
 800c41e:	1ad3      	subs	r3, r2, r3
 800c420:	011b      	lsls	r3, r3, #4
 800c422:	3332      	adds	r3, #50	; 0x32
 800c424:	4a09      	ldr	r2, [pc, #36]	; (800c44c <UART_SetConfig+0x6f4>)
 800c426:	fba2 2303 	umull	r2, r3, r2, r3
 800c42a:	095b      	lsrs	r3, r3, #5
 800c42c:	f003 020f 	and.w	r2, r3, #15
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	4442      	add	r2, r8
 800c436:	609a      	str	r2, [r3, #8]
}
 800c438:	e7ff      	b.n	800c43a <UART_SetConfig+0x6e2>
 800c43a:	bf00      	nop
 800c43c:	3714      	adds	r7, #20
 800c43e:	46bd      	mov	sp, r7
 800c440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c444:	40011000 	.word	0x40011000
 800c448:	40011400 	.word	0x40011400
 800c44c:	51eb851f 	.word	0x51eb851f

0800c450 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800c450:	b084      	sub	sp, #16
 800c452:	b480      	push	{r7}
 800c454:	b085      	sub	sp, #20
 800c456:	af00      	add	r7, sp, #0
 800c458:	6078      	str	r0, [r7, #4]
 800c45a:	f107 001c 	add.w	r0, r7, #28
 800c45e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c462:	2300      	movs	r3, #0
 800c464:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c466:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800c468:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c46a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800c46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800c46e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c470:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800c472:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800c476:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800c47a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c47c:	68fa      	ldr	r2, [r7, #12]
 800c47e:	4313      	orrs	r3, r2
 800c480:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	685b      	ldr	r3, [r3, #4]
 800c486:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800c48a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c48e:	68fa      	ldr	r2, [r7, #12]
 800c490:	431a      	orrs	r2, r3
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c496:	2300      	movs	r3, #0
}
 800c498:	4618      	mov	r0, r3
 800c49a:	3714      	adds	r7, #20
 800c49c:	46bd      	mov	sp, r7
 800c49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a2:	b004      	add	sp, #16
 800c4a4:	4770      	bx	lr

0800c4a6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800c4a6:	b480      	push	{r7}
 800c4a8:	b083      	sub	sp, #12
 800c4aa:	af00      	add	r7, sp, #0
 800c4ac:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	370c      	adds	r7, #12
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4be:	4770      	bx	lr

0800c4c0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800c4c0:	b480      	push	{r7}
 800c4c2:	b083      	sub	sp, #12
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
 800c4c8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	681a      	ldr	r2, [r3, #0]
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c4d4:	2300      	movs	r3, #0
}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	370c      	adds	r7, #12
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e0:	4770      	bx	lr

0800c4e2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800c4e2:	b580      	push	{r7, lr}
 800c4e4:	b082      	sub	sp, #8
 800c4e6:	af00      	add	r7, sp, #0
 800c4e8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	2203      	movs	r2, #3
 800c4ee:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800c4f0:	2002      	movs	r0, #2
 800c4f2:	f7f9 fbc5 	bl	8005c80 <HAL_Delay>
  
  return HAL_OK;
 800c4f6:	2300      	movs	r3, #0
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	3708      	adds	r7, #8
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	bd80      	pop	{r7, pc}

0800c500 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800c500:	b480      	push	{r7}
 800c502:	b083      	sub	sp, #12
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	f003 0303 	and.w	r3, r3, #3
}
 800c510:	4618      	mov	r0, r3
 800c512:	370c      	adds	r7, #12
 800c514:	46bd      	mov	sp, r7
 800c516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51a:	4770      	bx	lr

0800c51c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800c51c:	b480      	push	{r7}
 800c51e:	b085      	sub	sp, #20
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
 800c524:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c526:	2300      	movs	r3, #0
 800c528:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	681a      	ldr	r2, [r3, #0]
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c53a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c540:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c546:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c548:	68fa      	ldr	r2, [r7, #12]
 800c54a:	4313      	orrs	r3, r2
 800c54c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	68db      	ldr	r3, [r3, #12]
 800c552:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c556:	f023 030f 	bic.w	r3, r3, #15
 800c55a:	68fa      	ldr	r2, [r7, #12]
 800c55c:	431a      	orrs	r2, r3
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800c562:	2300      	movs	r3, #0
}
 800c564:	4618      	mov	r0, r3
 800c566:	3714      	adds	r7, #20
 800c568:	46bd      	mov	sp, r7
 800c56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56e:	4770      	bx	lr

0800c570 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800c570:	b480      	push	{r7}
 800c572:	b083      	sub	sp, #12
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	691b      	ldr	r3, [r3, #16]
 800c57c:	b2db      	uxtb	r3, r3
}
 800c57e:	4618      	mov	r0, r3
 800c580:	370c      	adds	r7, #12
 800c582:	46bd      	mov	sp, r7
 800c584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c588:	4770      	bx	lr

0800c58a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800c58a:	b480      	push	{r7}
 800c58c:	b085      	sub	sp, #20
 800c58e:	af00      	add	r7, sp, #0
 800c590:	6078      	str	r0, [r7, #4]
 800c592:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	3314      	adds	r3, #20
 800c598:	461a      	mov	r2, r3
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	4413      	add	r3, r2
 800c59e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	681b      	ldr	r3, [r3, #0]
}  
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	3714      	adds	r7, #20
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ae:	4770      	bx	lr

0800c5b0 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800c5b0:	b480      	push	{r7}
 800c5b2:	b085      	sub	sp, #20
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
 800c5b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	681a      	ldr	r2, [r3, #0]
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	685a      	ldr	r2, [r3, #4]
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c5d6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c5d8:	683b      	ldr	r3, [r7, #0]
 800c5da:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c5dc:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c5e2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c5e4:	68fa      	ldr	r2, [r7, #12]
 800c5e6:	4313      	orrs	r3, r2
 800c5e8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5ee:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	431a      	orrs	r2, r3
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800c5fa:	2300      	movs	r3, #0

}
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	3714      	adds	r7, #20
 800c600:	46bd      	mov	sp, r7
 800c602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c606:	4770      	bx	lr

0800c608 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b088      	sub	sp, #32
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
 800c610:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c616:	2310      	movs	r3, #16
 800c618:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c61a:	2340      	movs	r3, #64	; 0x40
 800c61c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c61e:	2300      	movs	r3, #0
 800c620:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c622:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c626:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c628:	f107 0308 	add.w	r3, r7, #8
 800c62c:	4619      	mov	r1, r3
 800c62e:	6878      	ldr	r0, [r7, #4]
 800c630:	f7ff ff74 	bl	800c51c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800c634:	f241 3288 	movw	r2, #5000	; 0x1388
 800c638:	2110      	movs	r1, #16
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	f000 fa40 	bl	800cac0 <SDMMC_GetCmdResp1>
 800c640:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c642:	69fb      	ldr	r3, [r7, #28]
}
 800c644:	4618      	mov	r0, r3
 800c646:	3720      	adds	r7, #32
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd80      	pop	{r7, pc}

0800c64c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b088      	sub	sp, #32
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
 800c654:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c65a:	2311      	movs	r3, #17
 800c65c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c65e:	2340      	movs	r3, #64	; 0x40
 800c660:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c662:	2300      	movs	r3, #0
 800c664:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c666:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c66a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c66c:	f107 0308 	add.w	r3, r7, #8
 800c670:	4619      	mov	r1, r3
 800c672:	6878      	ldr	r0, [r7, #4]
 800c674:	f7ff ff52 	bl	800c51c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800c678:	f241 3288 	movw	r2, #5000	; 0x1388
 800c67c:	2111      	movs	r1, #17
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f000 fa1e 	bl	800cac0 <SDMMC_GetCmdResp1>
 800c684:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c686:	69fb      	ldr	r3, [r7, #28]
}
 800c688:	4618      	mov	r0, r3
 800c68a:	3720      	adds	r7, #32
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bd80      	pop	{r7, pc}

0800c690 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b088      	sub	sp, #32
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
 800c698:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c69e:	2312      	movs	r3, #18
 800c6a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c6a2:	2340      	movs	r3, #64	; 0x40
 800c6a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c6aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c6ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c6b0:	f107 0308 	add.w	r3, r7, #8
 800c6b4:	4619      	mov	r1, r3
 800c6b6:	6878      	ldr	r0, [r7, #4]
 800c6b8:	f7ff ff30 	bl	800c51c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800c6bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c6c0:	2112      	movs	r1, #18
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f000 f9fc 	bl	800cac0 <SDMMC_GetCmdResp1>
 800c6c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c6ca:	69fb      	ldr	r3, [r7, #28]
}
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	3720      	adds	r7, #32
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}

0800c6d4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b088      	sub	sp, #32
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
 800c6dc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c6e2:	2318      	movs	r3, #24
 800c6e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c6e6:	2340      	movs	r3, #64	; 0x40
 800c6e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c6ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c6f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c6f4:	f107 0308 	add.w	r3, r7, #8
 800c6f8:	4619      	mov	r1, r3
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f7ff ff0e 	bl	800c51c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800c700:	f241 3288 	movw	r2, #5000	; 0x1388
 800c704:	2118      	movs	r1, #24
 800c706:	6878      	ldr	r0, [r7, #4]
 800c708:	f000 f9da 	bl	800cac0 <SDMMC_GetCmdResp1>
 800c70c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c70e:	69fb      	ldr	r3, [r7, #28]
}
 800c710:	4618      	mov	r0, r3
 800c712:	3720      	adds	r7, #32
 800c714:	46bd      	mov	sp, r7
 800c716:	bd80      	pop	{r7, pc}

0800c718 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b088      	sub	sp, #32
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
 800c720:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c722:	683b      	ldr	r3, [r7, #0]
 800c724:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c726:	2319      	movs	r3, #25
 800c728:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c72a:	2340      	movs	r3, #64	; 0x40
 800c72c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c72e:	2300      	movs	r3, #0
 800c730:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c732:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c736:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c738:	f107 0308 	add.w	r3, r7, #8
 800c73c:	4619      	mov	r1, r3
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f7ff feec 	bl	800c51c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800c744:	f241 3288 	movw	r2, #5000	; 0x1388
 800c748:	2119      	movs	r1, #25
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	f000 f9b8 	bl	800cac0 <SDMMC_GetCmdResp1>
 800c750:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c752:	69fb      	ldr	r3, [r7, #28]
}
 800c754:	4618      	mov	r0, r3
 800c756:	3720      	adds	r7, #32
 800c758:	46bd      	mov	sp, r7
 800c75a:	bd80      	pop	{r7, pc}

0800c75c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b088      	sub	sp, #32
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c764:	2300      	movs	r3, #0
 800c766:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c768:	230c      	movs	r3, #12
 800c76a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c76c:	2340      	movs	r3, #64	; 0x40
 800c76e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c770:	2300      	movs	r3, #0
 800c772:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c774:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c778:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c77a:	f107 0308 	add.w	r3, r7, #8
 800c77e:	4619      	mov	r1, r3
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f7ff fecb 	bl	800c51c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800c786:	4a05      	ldr	r2, [pc, #20]	; (800c79c <SDMMC_CmdStopTransfer+0x40>)
 800c788:	210c      	movs	r1, #12
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f000 f998 	bl	800cac0 <SDMMC_GetCmdResp1>
 800c790:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c792:	69fb      	ldr	r3, [r7, #28]
}
 800c794:	4618      	mov	r0, r3
 800c796:	3720      	adds	r7, #32
 800c798:	46bd      	mov	sp, r7
 800c79a:	bd80      	pop	{r7, pc}
 800c79c:	05f5e100 	.word	0x05f5e100

0800c7a0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b08a      	sub	sp, #40	; 0x28
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	60f8      	str	r0, [r7, #12]
 800c7a8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c7ac:	683b      	ldr	r3, [r7, #0]
 800c7ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c7b0:	2307      	movs	r3, #7
 800c7b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c7b4:	2340      	movs	r3, #64	; 0x40
 800c7b6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c7bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c7c0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c7c2:	f107 0310 	add.w	r3, r7, #16
 800c7c6:	4619      	mov	r1, r3
 800c7c8:	68f8      	ldr	r0, [r7, #12]
 800c7ca:	f7ff fea7 	bl	800c51c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800c7ce:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7d2:	2107      	movs	r1, #7
 800c7d4:	68f8      	ldr	r0, [r7, #12]
 800c7d6:	f000 f973 	bl	800cac0 <SDMMC_GetCmdResp1>
 800c7da:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800c7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c7de:	4618      	mov	r0, r3
 800c7e0:	3728      	adds	r7, #40	; 0x28
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bd80      	pop	{r7, pc}

0800c7e6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800c7e6:	b580      	push	{r7, lr}
 800c7e8:	b088      	sub	sp, #32
 800c7ea:	af00      	add	r7, sp, #0
 800c7ec:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c7fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c802:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c804:	f107 0308 	add.w	r3, r7, #8
 800c808:	4619      	mov	r1, r3
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	f7ff fe86 	bl	800c51c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800c810:	6878      	ldr	r0, [r7, #4]
 800c812:	f000 f92d 	bl	800ca70 <SDMMC_GetCmdError>
 800c816:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c818:	69fb      	ldr	r3, [r7, #28]
}
 800c81a:	4618      	mov	r0, r3
 800c81c:	3720      	adds	r7, #32
 800c81e:	46bd      	mov	sp, r7
 800c820:	bd80      	pop	{r7, pc}

0800c822 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800c822:	b580      	push	{r7, lr}
 800c824:	b088      	sub	sp, #32
 800c826:	af00      	add	r7, sp, #0
 800c828:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c82a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800c82e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c830:	2308      	movs	r3, #8
 800c832:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c834:	2340      	movs	r3, #64	; 0x40
 800c836:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c838:	2300      	movs	r3, #0
 800c83a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c83c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c840:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c842:	f107 0308 	add.w	r3, r7, #8
 800c846:	4619      	mov	r1, r3
 800c848:	6878      	ldr	r0, [r7, #4]
 800c84a:	f7ff fe67 	bl	800c51c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800c84e:	6878      	ldr	r0, [r7, #4]
 800c850:	f000 fb16 	bl	800ce80 <SDMMC_GetCmdResp7>
 800c854:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c856:	69fb      	ldr	r3, [r7, #28]
}
 800c858:	4618      	mov	r0, r3
 800c85a:	3720      	adds	r7, #32
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bd80      	pop	{r7, pc}

0800c860 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b088      	sub	sp, #32
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
 800c868:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c86e:	2337      	movs	r3, #55	; 0x37
 800c870:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c872:	2340      	movs	r3, #64	; 0x40
 800c874:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c876:	2300      	movs	r3, #0
 800c878:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c87a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c87e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c880:	f107 0308 	add.w	r3, r7, #8
 800c884:	4619      	mov	r1, r3
 800c886:	6878      	ldr	r0, [r7, #4]
 800c888:	f7ff fe48 	bl	800c51c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800c88c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c890:	2137      	movs	r1, #55	; 0x37
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	f000 f914 	bl	800cac0 <SDMMC_GetCmdResp1>
 800c898:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c89a:	69fb      	ldr	r3, [r7, #28]
}
 800c89c:	4618      	mov	r0, r3
 800c89e:	3720      	adds	r7, #32
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	bd80      	pop	{r7, pc}

0800c8a4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b088      	sub	sp, #32
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
 800c8ac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c8b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c8b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c8ba:	2329      	movs	r3, #41	; 0x29
 800c8bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c8be:	2340      	movs	r3, #64	; 0x40
 800c8c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c8c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c8ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c8cc:	f107 0308 	add.w	r3, r7, #8
 800c8d0:	4619      	mov	r1, r3
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f7ff fe22 	bl	800c51c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f000 fa23 	bl	800cd24 <SDMMC_GetCmdResp3>
 800c8de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c8e0:	69fb      	ldr	r3, [r7, #28]
}
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	3720      	adds	r7, #32
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	bd80      	pop	{r7, pc}

0800c8ea <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800c8ea:	b580      	push	{r7, lr}
 800c8ec:	b088      	sub	sp, #32
 800c8ee:	af00      	add	r7, sp, #0
 800c8f0:	6078      	str	r0, [r7, #4]
 800c8f2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c8f8:	2306      	movs	r3, #6
 800c8fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c8fc:	2340      	movs	r3, #64	; 0x40
 800c8fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c900:	2300      	movs	r3, #0
 800c902:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c904:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c908:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c90a:	f107 0308 	add.w	r3, r7, #8
 800c90e:	4619      	mov	r1, r3
 800c910:	6878      	ldr	r0, [r7, #4]
 800c912:	f7ff fe03 	bl	800c51c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800c916:	f241 3288 	movw	r2, #5000	; 0x1388
 800c91a:	2106      	movs	r1, #6
 800c91c:	6878      	ldr	r0, [r7, #4]
 800c91e:	f000 f8cf 	bl	800cac0 <SDMMC_GetCmdResp1>
 800c922:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c924:	69fb      	ldr	r3, [r7, #28]
}
 800c926:	4618      	mov	r0, r3
 800c928:	3720      	adds	r7, #32
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bd80      	pop	{r7, pc}

0800c92e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800c92e:	b580      	push	{r7, lr}
 800c930:	b088      	sub	sp, #32
 800c932:	af00      	add	r7, sp, #0
 800c934:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c936:	2300      	movs	r3, #0
 800c938:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c93a:	2333      	movs	r3, #51	; 0x33
 800c93c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c93e:	2340      	movs	r3, #64	; 0x40
 800c940:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c942:	2300      	movs	r3, #0
 800c944:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c946:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c94a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c94c:	f107 0308 	add.w	r3, r7, #8
 800c950:	4619      	mov	r1, r3
 800c952:	6878      	ldr	r0, [r7, #4]
 800c954:	f7ff fde2 	bl	800c51c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800c958:	f241 3288 	movw	r2, #5000	; 0x1388
 800c95c:	2133      	movs	r1, #51	; 0x33
 800c95e:	6878      	ldr	r0, [r7, #4]
 800c960:	f000 f8ae 	bl	800cac0 <SDMMC_GetCmdResp1>
 800c964:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c966:	69fb      	ldr	r3, [r7, #28]
}
 800c968:	4618      	mov	r0, r3
 800c96a:	3720      	adds	r7, #32
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bd80      	pop	{r7, pc}

0800c970 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b088      	sub	sp, #32
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c978:	2300      	movs	r3, #0
 800c97a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c97c:	2302      	movs	r3, #2
 800c97e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800c980:	23c0      	movs	r3, #192	; 0xc0
 800c982:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c984:	2300      	movs	r3, #0
 800c986:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c988:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c98c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c98e:	f107 0308 	add.w	r3, r7, #8
 800c992:	4619      	mov	r1, r3
 800c994:	6878      	ldr	r0, [r7, #4]
 800c996:	f7ff fdc1 	bl	800c51c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	f000 f97c 	bl	800cc98 <SDMMC_GetCmdResp2>
 800c9a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c9a2:	69fb      	ldr	r3, [r7, #28]
}
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	3720      	adds	r7, #32
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	bd80      	pop	{r7, pc}

0800c9ac <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b088      	sub	sp, #32
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
 800c9b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c9ba:	2309      	movs	r3, #9
 800c9bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800c9be:	23c0      	movs	r3, #192	; 0xc0
 800c9c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c9c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c9ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c9cc:	f107 0308 	add.w	r3, r7, #8
 800c9d0:	4619      	mov	r1, r3
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	f7ff fda2 	bl	800c51c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	f000 f95d 	bl	800cc98 <SDMMC_GetCmdResp2>
 800c9de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c9e0:	69fb      	ldr	r3, [r7, #28]
}
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	3720      	adds	r7, #32
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	bd80      	pop	{r7, pc}

0800c9ea <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800c9ea:	b580      	push	{r7, lr}
 800c9ec:	b088      	sub	sp, #32
 800c9ee:	af00      	add	r7, sp, #0
 800c9f0:	6078      	str	r0, [r7, #4]
 800c9f2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c9f8:	2303      	movs	r3, #3
 800c9fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c9fc:	2340      	movs	r3, #64	; 0x40
 800c9fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ca00:	2300      	movs	r3, #0
 800ca02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ca04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca08:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ca0a:	f107 0308 	add.w	r3, r7, #8
 800ca0e:	4619      	mov	r1, r3
 800ca10:	6878      	ldr	r0, [r7, #4]
 800ca12:	f7ff fd83 	bl	800c51c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ca16:	683a      	ldr	r2, [r7, #0]
 800ca18:	2103      	movs	r1, #3
 800ca1a:	6878      	ldr	r0, [r7, #4]
 800ca1c:	f000 f9bc 	bl	800cd98 <SDMMC_GetCmdResp6>
 800ca20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca22:	69fb      	ldr	r3, [r7, #28]
}
 800ca24:	4618      	mov	r0, r3
 800ca26:	3720      	adds	r7, #32
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bd80      	pop	{r7, pc}

0800ca2c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b088      	sub	sp, #32
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
 800ca34:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ca3a:	230d      	movs	r3, #13
 800ca3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ca3e:	2340      	movs	r3, #64	; 0x40
 800ca40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ca42:	2300      	movs	r3, #0
 800ca44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ca46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca4a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ca4c:	f107 0308 	add.w	r3, r7, #8
 800ca50:	4619      	mov	r1, r3
 800ca52:	6878      	ldr	r0, [r7, #4]
 800ca54:	f7ff fd62 	bl	800c51c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800ca58:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca5c:	210d      	movs	r1, #13
 800ca5e:	6878      	ldr	r0, [r7, #4]
 800ca60:	f000 f82e 	bl	800cac0 <SDMMC_GetCmdResp1>
 800ca64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca66:	69fb      	ldr	r3, [r7, #28]
}
 800ca68:	4618      	mov	r0, r3
 800ca6a:	3720      	adds	r7, #32
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	bd80      	pop	{r7, pc}

0800ca70 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800ca70:	b490      	push	{r4, r7}
 800ca72:	b082      	sub	sp, #8
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ca78:	4b0f      	ldr	r3, [pc, #60]	; (800cab8 <SDMMC_GetCmdError+0x48>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	4a0f      	ldr	r2, [pc, #60]	; (800cabc <SDMMC_GetCmdError+0x4c>)
 800ca7e:	fba2 2303 	umull	r2, r3, r2, r3
 800ca82:	0a5b      	lsrs	r3, r3, #9
 800ca84:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca88:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ca8c:	4623      	mov	r3, r4
 800ca8e:	1e5c      	subs	r4, r3, #1
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d102      	bne.n	800ca9a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ca94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ca98:	e009      	b.n	800caae <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d0f2      	beq.n	800ca8c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	22c5      	movs	r2, #197	; 0xc5
 800caaa:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800caac:	2300      	movs	r3, #0
}
 800caae:	4618      	mov	r0, r3
 800cab0:	3708      	adds	r7, #8
 800cab2:	46bd      	mov	sp, r7
 800cab4:	bc90      	pop	{r4, r7}
 800cab6:	4770      	bx	lr
 800cab8:	20000000 	.word	0x20000000
 800cabc:	10624dd3 	.word	0x10624dd3

0800cac0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800cac0:	b590      	push	{r4, r7, lr}
 800cac2:	b087      	sub	sp, #28
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	60f8      	str	r0, [r7, #12]
 800cac8:	460b      	mov	r3, r1
 800caca:	607a      	str	r2, [r7, #4]
 800cacc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800cace:	4b6f      	ldr	r3, [pc, #444]	; (800cc8c <SDMMC_GetCmdResp1+0x1cc>)
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	4a6f      	ldr	r2, [pc, #444]	; (800cc90 <SDMMC_GetCmdResp1+0x1d0>)
 800cad4:	fba2 2303 	umull	r2, r3, r2, r3
 800cad8:	0a5b      	lsrs	r3, r3, #9
 800cada:	687a      	ldr	r2, [r7, #4]
 800cadc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800cae0:	4623      	mov	r3, r4
 800cae2:	1e5c      	subs	r4, r3, #1
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d102      	bne.n	800caee <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cae8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800caec:	e0c9      	b.n	800cc82 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800caf2:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800caf4:	697b      	ldr	r3, [r7, #20]
 800caf6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d0f0      	beq.n	800cae0 <SDMMC_GetCmdResp1+0x20>
 800cafe:	697b      	ldr	r3, [r7, #20]
 800cb00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d1eb      	bne.n	800cae0 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb0c:	f003 0304 	and.w	r3, r3, #4
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d004      	beq.n	800cb1e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	2204      	movs	r2, #4
 800cb18:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cb1a:	2304      	movs	r3, #4
 800cb1c:	e0b1      	b.n	800cc82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb22:	f003 0301 	and.w	r3, r3, #1
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d004      	beq.n	800cb34 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	2201      	movs	r2, #1
 800cb2e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cb30:	2301      	movs	r3, #1
 800cb32:	e0a6      	b.n	800cc82 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	22c5      	movs	r2, #197	; 0xc5
 800cb38:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800cb3a:	68f8      	ldr	r0, [r7, #12]
 800cb3c:	f7ff fd18 	bl	800c570 <SDIO_GetCommandResponse>
 800cb40:	4603      	mov	r3, r0
 800cb42:	461a      	mov	r2, r3
 800cb44:	7afb      	ldrb	r3, [r7, #11]
 800cb46:	4293      	cmp	r3, r2
 800cb48:	d001      	beq.n	800cb4e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cb4a:	2301      	movs	r3, #1
 800cb4c:	e099      	b.n	800cc82 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800cb4e:	2100      	movs	r1, #0
 800cb50:	68f8      	ldr	r0, [r7, #12]
 800cb52:	f7ff fd1a 	bl	800c58a <SDIO_GetResponse>
 800cb56:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800cb58:	693a      	ldr	r2, [r7, #16]
 800cb5a:	4b4e      	ldr	r3, [pc, #312]	; (800cc94 <SDMMC_GetCmdResp1+0x1d4>)
 800cb5c:	4013      	ands	r3, r2
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d101      	bne.n	800cb66 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800cb62:	2300      	movs	r3, #0
 800cb64:	e08d      	b.n	800cc82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800cb66:	693b      	ldr	r3, [r7, #16]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	da02      	bge.n	800cb72 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800cb6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cb70:	e087      	b.n	800cc82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800cb72:	693b      	ldr	r3, [r7, #16]
 800cb74:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d001      	beq.n	800cb80 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800cb7c:	2340      	movs	r3, #64	; 0x40
 800cb7e:	e080      	b.n	800cc82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800cb80:	693b      	ldr	r3, [r7, #16]
 800cb82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d001      	beq.n	800cb8e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800cb8a:	2380      	movs	r3, #128	; 0x80
 800cb8c:	e079      	b.n	800cc82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800cb8e:	693b      	ldr	r3, [r7, #16]
 800cb90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d002      	beq.n	800cb9e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800cb98:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cb9c:	e071      	b.n	800cc82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800cb9e:	693b      	ldr	r3, [r7, #16]
 800cba0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d002      	beq.n	800cbae <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800cba8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cbac:	e069      	b.n	800cc82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800cbae:	693b      	ldr	r3, [r7, #16]
 800cbb0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d002      	beq.n	800cbbe <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800cbb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cbbc:	e061      	b.n	800cc82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800cbbe:	693b      	ldr	r3, [r7, #16]
 800cbc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d002      	beq.n	800cbce <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800cbc8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cbcc:	e059      	b.n	800cc82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800cbce:	693b      	ldr	r3, [r7, #16]
 800cbd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d002      	beq.n	800cbde <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cbd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cbdc:	e051      	b.n	800cc82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800cbde:	693b      	ldr	r3, [r7, #16]
 800cbe0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d002      	beq.n	800cbee <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cbe8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cbec:	e049      	b.n	800cc82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800cbee:	693b      	ldr	r3, [r7, #16]
 800cbf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d002      	beq.n	800cbfe <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800cbf8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cbfc:	e041      	b.n	800cc82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800cbfe:	693b      	ldr	r3, [r7, #16]
 800cc00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d002      	beq.n	800cc0e <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800cc08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cc0c:	e039      	b.n	800cc82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800cc0e:	693b      	ldr	r3, [r7, #16]
 800cc10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d002      	beq.n	800cc1e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800cc18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800cc1c:	e031      	b.n	800cc82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800cc1e:	693b      	ldr	r3, [r7, #16]
 800cc20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d002      	beq.n	800cc2e <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800cc28:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800cc2c:	e029      	b.n	800cc82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800cc2e:	693b      	ldr	r3, [r7, #16]
 800cc30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d002      	beq.n	800cc3e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800cc38:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cc3c:	e021      	b.n	800cc82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800cc3e:	693b      	ldr	r3, [r7, #16]
 800cc40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d002      	beq.n	800cc4e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800cc48:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800cc4c:	e019      	b.n	800cc82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800cc4e:	693b      	ldr	r3, [r7, #16]
 800cc50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d002      	beq.n	800cc5e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800cc58:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800cc5c:	e011      	b.n	800cc82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800cc5e:	693b      	ldr	r3, [r7, #16]
 800cc60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d002      	beq.n	800cc6e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800cc68:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800cc6c:	e009      	b.n	800cc82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800cc6e:	693b      	ldr	r3, [r7, #16]
 800cc70:	f003 0308 	and.w	r3, r3, #8
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d002      	beq.n	800cc7e <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800cc78:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800cc7c:	e001      	b.n	800cc82 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cc7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800cc82:	4618      	mov	r0, r3
 800cc84:	371c      	adds	r7, #28
 800cc86:	46bd      	mov	sp, r7
 800cc88:	bd90      	pop	{r4, r7, pc}
 800cc8a:	bf00      	nop
 800cc8c:	20000000 	.word	0x20000000
 800cc90:	10624dd3 	.word	0x10624dd3
 800cc94:	fdffe008 	.word	0xfdffe008

0800cc98 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800cc98:	b490      	push	{r4, r7}
 800cc9a:	b084      	sub	sp, #16
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cca0:	4b1e      	ldr	r3, [pc, #120]	; (800cd1c <SDMMC_GetCmdResp2+0x84>)
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	4a1e      	ldr	r2, [pc, #120]	; (800cd20 <SDMMC_GetCmdResp2+0x88>)
 800cca6:	fba2 2303 	umull	r2, r3, r2, r3
 800ccaa:	0a5b      	lsrs	r3, r3, #9
 800ccac:	f241 3288 	movw	r2, #5000	; 0x1388
 800ccb0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ccb4:	4623      	mov	r3, r4
 800ccb6:	1e5c      	subs	r4, r3, #1
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d102      	bne.n	800ccc2 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ccbc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ccc0:	e026      	b.n	800cd10 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccc6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d0f0      	beq.n	800ccb4 <SDMMC_GetCmdResp2+0x1c>
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d1eb      	bne.n	800ccb4 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cce0:	f003 0304 	and.w	r3, r3, #4
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d004      	beq.n	800ccf2 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	2204      	movs	r2, #4
 800ccec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ccee:	2304      	movs	r3, #4
 800ccf0:	e00e      	b.n	800cd10 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccf6:	f003 0301 	and.w	r3, r3, #1
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d004      	beq.n	800cd08 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	2201      	movs	r2, #1
 800cd02:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cd04:	2301      	movs	r3, #1
 800cd06:	e003      	b.n	800cd10 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	22c5      	movs	r2, #197	; 0xc5
 800cd0c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800cd0e:	2300      	movs	r3, #0
}
 800cd10:	4618      	mov	r0, r3
 800cd12:	3710      	adds	r7, #16
 800cd14:	46bd      	mov	sp, r7
 800cd16:	bc90      	pop	{r4, r7}
 800cd18:	4770      	bx	lr
 800cd1a:	bf00      	nop
 800cd1c:	20000000 	.word	0x20000000
 800cd20:	10624dd3 	.word	0x10624dd3

0800cd24 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800cd24:	b490      	push	{r4, r7}
 800cd26:	b084      	sub	sp, #16
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cd2c:	4b18      	ldr	r3, [pc, #96]	; (800cd90 <SDMMC_GetCmdResp3+0x6c>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	4a18      	ldr	r2, [pc, #96]	; (800cd94 <SDMMC_GetCmdResp3+0x70>)
 800cd32:	fba2 2303 	umull	r2, r3, r2, r3
 800cd36:	0a5b      	lsrs	r3, r3, #9
 800cd38:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd3c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800cd40:	4623      	mov	r3, r4
 800cd42:	1e5c      	subs	r4, r3, #1
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d102      	bne.n	800cd4e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cd48:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cd4c:	e01b      	b.n	800cd86 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd52:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d0f0      	beq.n	800cd40 <SDMMC_GetCmdResp3+0x1c>
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d1eb      	bne.n	800cd40 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd6c:	f003 0304 	and.w	r3, r3, #4
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d004      	beq.n	800cd7e <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	2204      	movs	r2, #4
 800cd78:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cd7a:	2304      	movs	r3, #4
 800cd7c:	e003      	b.n	800cd86 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	22c5      	movs	r2, #197	; 0xc5
 800cd82:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800cd84:	2300      	movs	r3, #0
}
 800cd86:	4618      	mov	r0, r3
 800cd88:	3710      	adds	r7, #16
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	bc90      	pop	{r4, r7}
 800cd8e:	4770      	bx	lr
 800cd90:	20000000 	.word	0x20000000
 800cd94:	10624dd3 	.word	0x10624dd3

0800cd98 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800cd98:	b590      	push	{r4, r7, lr}
 800cd9a:	b087      	sub	sp, #28
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	60f8      	str	r0, [r7, #12]
 800cda0:	460b      	mov	r3, r1
 800cda2:	607a      	str	r2, [r7, #4]
 800cda4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cda6:	4b34      	ldr	r3, [pc, #208]	; (800ce78 <SDMMC_GetCmdResp6+0xe0>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	4a34      	ldr	r2, [pc, #208]	; (800ce7c <SDMMC_GetCmdResp6+0xe4>)
 800cdac:	fba2 2303 	umull	r2, r3, r2, r3
 800cdb0:	0a5b      	lsrs	r3, r3, #9
 800cdb2:	f241 3288 	movw	r2, #5000	; 0x1388
 800cdb6:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800cdba:	4623      	mov	r3, r4
 800cdbc:	1e5c      	subs	r4, r3, #1
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d102      	bne.n	800cdc8 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cdc2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cdc6:	e052      	b.n	800ce6e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdcc:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cdce:	697b      	ldr	r3, [r7, #20]
 800cdd0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d0f0      	beq.n	800cdba <SDMMC_GetCmdResp6+0x22>
 800cdd8:	697b      	ldr	r3, [r7, #20]
 800cdda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d1eb      	bne.n	800cdba <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cde6:	f003 0304 	and.w	r3, r3, #4
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d004      	beq.n	800cdf8 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	2204      	movs	r2, #4
 800cdf2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cdf4:	2304      	movs	r3, #4
 800cdf6:	e03a      	b.n	800ce6e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdfc:	f003 0301 	and.w	r3, r3, #1
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d004      	beq.n	800ce0e <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	2201      	movs	r2, #1
 800ce08:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ce0a:	2301      	movs	r3, #1
 800ce0c:	e02f      	b.n	800ce6e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ce0e:	68f8      	ldr	r0, [r7, #12]
 800ce10:	f7ff fbae 	bl	800c570 <SDIO_GetCommandResponse>
 800ce14:	4603      	mov	r3, r0
 800ce16:	461a      	mov	r2, r3
 800ce18:	7afb      	ldrb	r3, [r7, #11]
 800ce1a:	4293      	cmp	r3, r2
 800ce1c:	d001      	beq.n	800ce22 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ce1e:	2301      	movs	r3, #1
 800ce20:	e025      	b.n	800ce6e <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	22c5      	movs	r2, #197	; 0xc5
 800ce26:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ce28:	2100      	movs	r1, #0
 800ce2a:	68f8      	ldr	r0, [r7, #12]
 800ce2c:	f7ff fbad 	bl	800c58a <SDIO_GetResponse>
 800ce30:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ce32:	693b      	ldr	r3, [r7, #16]
 800ce34:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d106      	bne.n	800ce4a <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ce3c:	693b      	ldr	r3, [r7, #16]
 800ce3e:	0c1b      	lsrs	r3, r3, #16
 800ce40:	b29a      	uxth	r2, r3
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800ce46:	2300      	movs	r3, #0
 800ce48:	e011      	b.n	800ce6e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ce4a:	693b      	ldr	r3, [r7, #16]
 800ce4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d002      	beq.n	800ce5a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ce54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ce58:	e009      	b.n	800ce6e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ce5a:	693b      	ldr	r3, [r7, #16]
 800ce5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d002      	beq.n	800ce6a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ce64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ce68:	e001      	b.n	800ce6e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ce6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ce6e:	4618      	mov	r0, r3
 800ce70:	371c      	adds	r7, #28
 800ce72:	46bd      	mov	sp, r7
 800ce74:	bd90      	pop	{r4, r7, pc}
 800ce76:	bf00      	nop
 800ce78:	20000000 	.word	0x20000000
 800ce7c:	10624dd3 	.word	0x10624dd3

0800ce80 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800ce80:	b490      	push	{r4, r7}
 800ce82:	b084      	sub	sp, #16
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ce88:	4b21      	ldr	r3, [pc, #132]	; (800cf10 <SDMMC_GetCmdResp7+0x90>)
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	4a21      	ldr	r2, [pc, #132]	; (800cf14 <SDMMC_GetCmdResp7+0x94>)
 800ce8e:	fba2 2303 	umull	r2, r3, r2, r3
 800ce92:	0a5b      	lsrs	r3, r3, #9
 800ce94:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce98:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ce9c:	4623      	mov	r3, r4
 800ce9e:	1e5c      	subs	r4, r3, #1
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d102      	bne.n	800ceaa <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cea4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cea8:	e02c      	b.n	800cf04 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ceae:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d0f0      	beq.n	800ce9c <SDMMC_GetCmdResp7+0x1c>
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d1eb      	bne.n	800ce9c <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cec8:	f003 0304 	and.w	r3, r3, #4
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d004      	beq.n	800ceda <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2204      	movs	r2, #4
 800ced4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ced6:	2304      	movs	r3, #4
 800ced8:	e014      	b.n	800cf04 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cede:	f003 0301 	and.w	r3, r3, #1
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d004      	beq.n	800cef0 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	2201      	movs	r2, #1
 800ceea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ceec:	2301      	movs	r3, #1
 800ceee:	e009      	b.n	800cf04 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d002      	beq.n	800cf02 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2240      	movs	r2, #64	; 0x40
 800cf00:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800cf02:	2300      	movs	r3, #0
  
}
 800cf04:	4618      	mov	r0, r3
 800cf06:	3710      	adds	r7, #16
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bc90      	pop	{r4, r7}
 800cf0c:	4770      	bx	lr
 800cf0e:	bf00      	nop
 800cf10:	20000000 	.word	0x20000000
 800cf14:	10624dd3 	.word	0x10624dd3

0800cf18 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800cf1c:	4904      	ldr	r1, [pc, #16]	; (800cf30 <MX_FATFS_Init+0x18>)
 800cf1e:	4805      	ldr	r0, [pc, #20]	; (800cf34 <MX_FATFS_Init+0x1c>)
 800cf20:	f004 f874 	bl	801100c <FATFS_LinkDriver>
 800cf24:	4603      	mov	r3, r0
 800cf26:	461a      	mov	r2, r3
 800cf28:	4b03      	ldr	r3, [pc, #12]	; (800cf38 <MX_FATFS_Init+0x20>)
 800cf2a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800cf2c:	bf00      	nop
 800cf2e:	bd80      	pop	{r7, pc}
 800cf30:	200161f0 	.word	0x200161f0
 800cf34:	08017310 	.word	0x08017310
 800cf38:	200161ec 	.word	0x200161ec

0800cf3c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800cf3c:	b480      	push	{r7}
 800cf3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800cf40:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800cf42:	4618      	mov	r0, r3
 800cf44:	46bd      	mov	sp, r7
 800cf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4a:	4770      	bx	lr

0800cf4c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b082      	sub	sp, #8
 800cf50:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800cf52:	2300      	movs	r3, #0
 800cf54:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800cf56:	f000 f896 	bl	800d086 <BSP_SD_IsDetected>
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	2b01      	cmp	r3, #1
 800cf5e:	d001      	beq.n	800cf64 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800cf60:	2301      	movs	r3, #1
 800cf62:	e012      	b.n	800cf8a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800cf64:	480b      	ldr	r0, [pc, #44]	; (800cf94 <BSP_SD_Init+0x48>)
 800cf66:	f7fb ff9d 	bl	8008ea4 <HAL_SD_Init>
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800cf6e:	79fb      	ldrb	r3, [r7, #7]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d109      	bne.n	800cf88 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800cf74:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800cf78:	4806      	ldr	r0, [pc, #24]	; (800cf94 <BSP_SD_Init+0x48>)
 800cf7a:	f7fc fd47 	bl	8009a0c <HAL_SD_ConfigWideBusOperation>
 800cf7e:	4603      	mov	r3, r0
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d001      	beq.n	800cf88 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800cf84:	2301      	movs	r3, #1
 800cf86:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800cf88:	79fb      	ldrb	r3, [r7, #7]
}
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	3708      	adds	r7, #8
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	bd80      	pop	{r7, pc}
 800cf92:	bf00      	nop
 800cf94:	20016084 	.word	0x20016084

0800cf98 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b086      	sub	sp, #24
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	60f8      	str	r0, [r7, #12]
 800cfa0:	60b9      	str	r1, [r7, #8]
 800cfa2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	68ba      	ldr	r2, [r7, #8]
 800cfac:	68f9      	ldr	r1, [r7, #12]
 800cfae:	4806      	ldr	r0, [pc, #24]	; (800cfc8 <BSP_SD_ReadBlocks_DMA+0x30>)
 800cfb0:	f7fc f808 	bl	8008fc4 <HAL_SD_ReadBlocks_DMA>
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d001      	beq.n	800cfbe <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800cfba:	2301      	movs	r3, #1
 800cfbc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800cfbe:	7dfb      	ldrb	r3, [r7, #23]
}
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	3718      	adds	r7, #24
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	bd80      	pop	{r7, pc}
 800cfc8:	20016084 	.word	0x20016084

0800cfcc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b086      	sub	sp, #24
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	60f8      	str	r0, [r7, #12]
 800cfd4:	60b9      	str	r1, [r7, #8]
 800cfd6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800cfd8:	2300      	movs	r3, #0
 800cfda:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	68ba      	ldr	r2, [r7, #8]
 800cfe0:	68f9      	ldr	r1, [r7, #12]
 800cfe2:	4806      	ldr	r0, [pc, #24]	; (800cffc <BSP_SD_WriteBlocks_DMA+0x30>)
 800cfe4:	f7fc f8d6 	bl	8009194 <HAL_SD_WriteBlocks_DMA>
 800cfe8:	4603      	mov	r3, r0
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d001      	beq.n	800cff2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800cfee:	2301      	movs	r3, #1
 800cff0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800cff2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cff4:	4618      	mov	r0, r3
 800cff6:	3718      	adds	r7, #24
 800cff8:	46bd      	mov	sp, r7
 800cffa:	bd80      	pop	{r7, pc}
 800cffc:	20016084 	.word	0x20016084

0800d000 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d000:	b580      	push	{r7, lr}
 800d002:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d004:	4805      	ldr	r0, [pc, #20]	; (800d01c <BSP_SD_GetCardState+0x1c>)
 800d006:	f7fc fd7d 	bl	8009b04 <HAL_SD_GetCardState>
 800d00a:	4603      	mov	r3, r0
 800d00c:	2b04      	cmp	r3, #4
 800d00e:	bf14      	ite	ne
 800d010:	2301      	movne	r3, #1
 800d012:	2300      	moveq	r3, #0
 800d014:	b2db      	uxtb	r3, r3
}
 800d016:	4618      	mov	r0, r3
 800d018:	bd80      	pop	{r7, pc}
 800d01a:	bf00      	nop
 800d01c:	20016084 	.word	0x20016084

0800d020 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b082      	sub	sp, #8
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800d028:	6879      	ldr	r1, [r7, #4]
 800d02a:	4803      	ldr	r0, [pc, #12]	; (800d038 <BSP_SD_GetCardInfo+0x18>)
 800d02c:	f7fc fcc2 	bl	80099b4 <HAL_SD_GetCardInfo>
}
 800d030:	bf00      	nop
 800d032:	3708      	adds	r7, #8
 800d034:	46bd      	mov	sp, r7
 800d036:	bd80      	pop	{r7, pc}
 800d038:	20016084 	.word	0x20016084

0800d03c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b082      	sub	sp, #8
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800d044:	f000 f818 	bl	800d078 <BSP_SD_AbortCallback>
}
 800d048:	bf00      	nop
 800d04a:	3708      	adds	r7, #8
 800d04c:	46bd      	mov	sp, r7
 800d04e:	bd80      	pop	{r7, pc}

0800d050 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b082      	sub	sp, #8
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800d058:	f000 f9a8 	bl	800d3ac <BSP_SD_WriteCpltCallback>
}
 800d05c:	bf00      	nop
 800d05e:	3708      	adds	r7, #8
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}

0800d064 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b082      	sub	sp, #8
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800d06c:	f000 f9aa 	bl	800d3c4 <BSP_SD_ReadCpltCallback>
}
 800d070:	bf00      	nop
 800d072:	3708      	adds	r7, #8
 800d074:	46bd      	mov	sp, r7
 800d076:	bd80      	pop	{r7, pc}

0800d078 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800d078:	b480      	push	{r7}
 800d07a:	af00      	add	r7, sp, #0

}
 800d07c:	bf00      	nop
 800d07e:	46bd      	mov	sp, r7
 800d080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d084:	4770      	bx	lr

0800d086 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d086:	b580      	push	{r7, lr}
 800d088:	b082      	sub	sp, #8
 800d08a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d08c:	2301      	movs	r3, #1
 800d08e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d090:	f000 f80c 	bl	800d0ac <BSP_PlatformIsDetected>
 800d094:	4603      	mov	r3, r0
 800d096:	2b00      	cmp	r3, #0
 800d098:	d101      	bne.n	800d09e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d09a:	2300      	movs	r3, #0
 800d09c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d09e:	79fb      	ldrb	r3, [r7, #7]
 800d0a0:	b2db      	uxtb	r3, r3
}
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	3708      	adds	r7, #8
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	bd80      	pop	{r7, pc}
	...

0800d0ac <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b082      	sub	sp, #8
 800d0b0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d0b2:	2301      	movs	r3, #1
 800d0b4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d0b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d0ba:	4806      	ldr	r0, [pc, #24]	; (800d0d4 <BSP_PlatformIsDetected+0x28>)
 800d0bc:	f7fa f85e 	bl	800717c <HAL_GPIO_ReadPin>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d001      	beq.n	800d0ca <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800d0ca:	79fb      	ldrb	r3, [r7, #7]
}
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	3708      	adds	r7, #8
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	bd80      	pop	{r7, pc}
 800d0d4:	40020000 	.word	0x40020000

0800d0d8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b084      	sub	sp, #16
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800d0e0:	f7f8 fdc2 	bl	8005c68 <HAL_GetTick>
 800d0e4:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800d0e6:	e006      	b.n	800d0f6 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d0e8:	f7ff ff8a 	bl	800d000 <BSP_SD_GetCardState>
 800d0ec:	4603      	mov	r3, r0
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d101      	bne.n	800d0f6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	e009      	b.n	800d10a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800d0f6:	f7f8 fdb7 	bl	8005c68 <HAL_GetTick>
 800d0fa:	4602      	mov	r2, r0
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	1ad3      	subs	r3, r2, r3
 800d100:	687a      	ldr	r2, [r7, #4]
 800d102:	429a      	cmp	r2, r3
 800d104:	d8f0      	bhi.n	800d0e8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800d106:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	3710      	adds	r7, #16
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}
	...

0800d114 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d114:	b580      	push	{r7, lr}
 800d116:	b082      	sub	sp, #8
 800d118:	af00      	add	r7, sp, #0
 800d11a:	4603      	mov	r3, r0
 800d11c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d11e:	4b0b      	ldr	r3, [pc, #44]	; (800d14c <SD_CheckStatus+0x38>)
 800d120:	2201      	movs	r2, #1
 800d122:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800d124:	f7ff ff6c 	bl	800d000 <BSP_SD_GetCardState>
 800d128:	4603      	mov	r3, r0
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d107      	bne.n	800d13e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d12e:	4b07      	ldr	r3, [pc, #28]	; (800d14c <SD_CheckStatus+0x38>)
 800d130:	781b      	ldrb	r3, [r3, #0]
 800d132:	b2db      	uxtb	r3, r3
 800d134:	f023 0301 	bic.w	r3, r3, #1
 800d138:	b2da      	uxtb	r2, r3
 800d13a:	4b04      	ldr	r3, [pc, #16]	; (800d14c <SD_CheckStatus+0x38>)
 800d13c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d13e:	4b03      	ldr	r3, [pc, #12]	; (800d14c <SD_CheckStatus+0x38>)
 800d140:	781b      	ldrb	r3, [r3, #0]
 800d142:	b2db      	uxtb	r3, r3
}
 800d144:	4618      	mov	r0, r3
 800d146:	3708      	adds	r7, #8
 800d148:	46bd      	mov	sp, r7
 800d14a:	bd80      	pop	{r7, pc}
 800d14c:	20000009 	.word	0x20000009

0800d150 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b082      	sub	sp, #8
 800d154:	af00      	add	r7, sp, #0
 800d156:	4603      	mov	r3, r0
 800d158:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800d15a:	f7ff fef7 	bl	800cf4c <BSP_SD_Init>
 800d15e:	4603      	mov	r3, r0
 800d160:	2b00      	cmp	r3, #0
 800d162:	d107      	bne.n	800d174 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800d164:	79fb      	ldrb	r3, [r7, #7]
 800d166:	4618      	mov	r0, r3
 800d168:	f7ff ffd4 	bl	800d114 <SD_CheckStatus>
 800d16c:	4603      	mov	r3, r0
 800d16e:	461a      	mov	r2, r3
 800d170:	4b04      	ldr	r3, [pc, #16]	; (800d184 <SD_initialize+0x34>)
 800d172:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800d174:	4b03      	ldr	r3, [pc, #12]	; (800d184 <SD_initialize+0x34>)
 800d176:	781b      	ldrb	r3, [r3, #0]
 800d178:	b2db      	uxtb	r3, r3
}
 800d17a:	4618      	mov	r0, r3
 800d17c:	3708      	adds	r7, #8
 800d17e:	46bd      	mov	sp, r7
 800d180:	bd80      	pop	{r7, pc}
 800d182:	bf00      	nop
 800d184:	20000009 	.word	0x20000009

0800d188 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b082      	sub	sp, #8
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	4603      	mov	r3, r0
 800d190:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d192:	79fb      	ldrb	r3, [r7, #7]
 800d194:	4618      	mov	r0, r3
 800d196:	f7ff ffbd 	bl	800d114 <SD_CheckStatus>
 800d19a:	4603      	mov	r3, r0
}
 800d19c:	4618      	mov	r0, r3
 800d19e:	3708      	adds	r7, #8
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	bd80      	pop	{r7, pc}

0800d1a4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b086      	sub	sp, #24
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	60b9      	str	r1, [r7, #8]
 800d1ac:	607a      	str	r2, [r7, #4]
 800d1ae:	603b      	str	r3, [r7, #0]
 800d1b0:	4603      	mov	r3, r0
 800d1b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d1b4:	2301      	movs	r3, #1
 800d1b6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d1b8:	f247 5030 	movw	r0, #30000	; 0x7530
 800d1bc:	f7ff ff8c 	bl	800d0d8 <SD_CheckStatusWithTimeout>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	da01      	bge.n	800d1ca <SD_read+0x26>
  {
    return res;
 800d1c6:	7dfb      	ldrb	r3, [r7, #23]
 800d1c8:	e03b      	b.n	800d242 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800d1ca:	683a      	ldr	r2, [r7, #0]
 800d1cc:	6879      	ldr	r1, [r7, #4]
 800d1ce:	68b8      	ldr	r0, [r7, #8]
 800d1d0:	f7ff fee2 	bl	800cf98 <BSP_SD_ReadBlocks_DMA>
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d132      	bne.n	800d240 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800d1da:	4b1c      	ldr	r3, [pc, #112]	; (800d24c <SD_read+0xa8>)
 800d1dc:	2200      	movs	r2, #0
 800d1de:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800d1e0:	f7f8 fd42 	bl	8005c68 <HAL_GetTick>
 800d1e4:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800d1e6:	bf00      	nop
 800d1e8:	4b18      	ldr	r3, [pc, #96]	; (800d24c <SD_read+0xa8>)
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d108      	bne.n	800d202 <SD_read+0x5e>
 800d1f0:	f7f8 fd3a 	bl	8005c68 <HAL_GetTick>
 800d1f4:	4602      	mov	r2, r0
 800d1f6:	693b      	ldr	r3, [r7, #16]
 800d1f8:	1ad3      	subs	r3, r2, r3
 800d1fa:	f247 522f 	movw	r2, #29999	; 0x752f
 800d1fe:	4293      	cmp	r3, r2
 800d200:	d9f2      	bls.n	800d1e8 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800d202:	4b12      	ldr	r3, [pc, #72]	; (800d24c <SD_read+0xa8>)
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d102      	bne.n	800d210 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800d20a:	2301      	movs	r3, #1
 800d20c:	75fb      	strb	r3, [r7, #23]
 800d20e:	e017      	b.n	800d240 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800d210:	4b0e      	ldr	r3, [pc, #56]	; (800d24c <SD_read+0xa8>)
 800d212:	2200      	movs	r2, #0
 800d214:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800d216:	f7f8 fd27 	bl	8005c68 <HAL_GetTick>
 800d21a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d21c:	e007      	b.n	800d22e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d21e:	f7ff feef 	bl	800d000 <BSP_SD_GetCardState>
 800d222:	4603      	mov	r3, r0
 800d224:	2b00      	cmp	r3, #0
 800d226:	d102      	bne.n	800d22e <SD_read+0x8a>
          {
            res = RES_OK;
 800d228:	2300      	movs	r3, #0
 800d22a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800d22c:	e008      	b.n	800d240 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d22e:	f7f8 fd1b 	bl	8005c68 <HAL_GetTick>
 800d232:	4602      	mov	r2, r0
 800d234:	693b      	ldr	r3, [r7, #16]
 800d236:	1ad3      	subs	r3, r2, r3
 800d238:	f247 522f 	movw	r2, #29999	; 0x752f
 800d23c:	4293      	cmp	r3, r2
 800d23e:	d9ee      	bls.n	800d21e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800d240:	7dfb      	ldrb	r3, [r7, #23]
}
 800d242:	4618      	mov	r0, r3
 800d244:	3718      	adds	r7, #24
 800d246:	46bd      	mov	sp, r7
 800d248:	bd80      	pop	{r7, pc}
 800d24a:	bf00      	nop
 800d24c:	2001371c 	.word	0x2001371c

0800d250 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d250:	b580      	push	{r7, lr}
 800d252:	b086      	sub	sp, #24
 800d254:	af00      	add	r7, sp, #0
 800d256:	60b9      	str	r1, [r7, #8]
 800d258:	607a      	str	r2, [r7, #4]
 800d25a:	603b      	str	r3, [r7, #0]
 800d25c:	4603      	mov	r3, r0
 800d25e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d260:	2301      	movs	r3, #1
 800d262:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800d264:	4b24      	ldr	r3, [pc, #144]	; (800d2f8 <SD_write+0xa8>)
 800d266:	2200      	movs	r2, #0
 800d268:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d26a:	f247 5030 	movw	r0, #30000	; 0x7530
 800d26e:	f7ff ff33 	bl	800d0d8 <SD_CheckStatusWithTimeout>
 800d272:	4603      	mov	r3, r0
 800d274:	2b00      	cmp	r3, #0
 800d276:	da01      	bge.n	800d27c <SD_write+0x2c>
  {
    return res;
 800d278:	7dfb      	ldrb	r3, [r7, #23]
 800d27a:	e038      	b.n	800d2ee <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800d27c:	683a      	ldr	r2, [r7, #0]
 800d27e:	6879      	ldr	r1, [r7, #4]
 800d280:	68b8      	ldr	r0, [r7, #8]
 800d282:	f7ff fea3 	bl	800cfcc <BSP_SD_WriteBlocks_DMA>
 800d286:	4603      	mov	r3, r0
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d12f      	bne.n	800d2ec <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800d28c:	f7f8 fcec 	bl	8005c68 <HAL_GetTick>
 800d290:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800d292:	bf00      	nop
 800d294:	4b18      	ldr	r3, [pc, #96]	; (800d2f8 <SD_write+0xa8>)
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d108      	bne.n	800d2ae <SD_write+0x5e>
 800d29c:	f7f8 fce4 	bl	8005c68 <HAL_GetTick>
 800d2a0:	4602      	mov	r2, r0
 800d2a2:	693b      	ldr	r3, [r7, #16]
 800d2a4:	1ad3      	subs	r3, r2, r3
 800d2a6:	f247 522f 	movw	r2, #29999	; 0x752f
 800d2aa:	4293      	cmp	r3, r2
 800d2ac:	d9f2      	bls.n	800d294 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800d2ae:	4b12      	ldr	r3, [pc, #72]	; (800d2f8 <SD_write+0xa8>)
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d102      	bne.n	800d2bc <SD_write+0x6c>
      {
        res = RES_ERROR;
 800d2b6:	2301      	movs	r3, #1
 800d2b8:	75fb      	strb	r3, [r7, #23]
 800d2ba:	e017      	b.n	800d2ec <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800d2bc:	4b0e      	ldr	r3, [pc, #56]	; (800d2f8 <SD_write+0xa8>)
 800d2be:	2200      	movs	r2, #0
 800d2c0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800d2c2:	f7f8 fcd1 	bl	8005c68 <HAL_GetTick>
 800d2c6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d2c8:	e007      	b.n	800d2da <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d2ca:	f7ff fe99 	bl	800d000 <BSP_SD_GetCardState>
 800d2ce:	4603      	mov	r3, r0
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d102      	bne.n	800d2da <SD_write+0x8a>
          {
            res = RES_OK;
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	75fb      	strb	r3, [r7, #23]
            break;
 800d2d8:	e008      	b.n	800d2ec <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d2da:	f7f8 fcc5 	bl	8005c68 <HAL_GetTick>
 800d2de:	4602      	mov	r2, r0
 800d2e0:	693b      	ldr	r3, [r7, #16]
 800d2e2:	1ad3      	subs	r3, r2, r3
 800d2e4:	f247 522f 	movw	r2, #29999	; 0x752f
 800d2e8:	4293      	cmp	r3, r2
 800d2ea:	d9ee      	bls.n	800d2ca <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800d2ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	3718      	adds	r7, #24
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	bd80      	pop	{r7, pc}
 800d2f6:	bf00      	nop
 800d2f8:	20013718 	.word	0x20013718

0800d2fc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b08c      	sub	sp, #48	; 0x30
 800d300:	af00      	add	r7, sp, #0
 800d302:	4603      	mov	r3, r0
 800d304:	603a      	str	r2, [r7, #0]
 800d306:	71fb      	strb	r3, [r7, #7]
 800d308:	460b      	mov	r3, r1
 800d30a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d30c:	2301      	movs	r3, #1
 800d30e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d312:	4b25      	ldr	r3, [pc, #148]	; (800d3a8 <SD_ioctl+0xac>)
 800d314:	781b      	ldrb	r3, [r3, #0]
 800d316:	b2db      	uxtb	r3, r3
 800d318:	f003 0301 	and.w	r3, r3, #1
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d001      	beq.n	800d324 <SD_ioctl+0x28>
 800d320:	2303      	movs	r3, #3
 800d322:	e03c      	b.n	800d39e <SD_ioctl+0xa2>

  switch (cmd)
 800d324:	79bb      	ldrb	r3, [r7, #6]
 800d326:	2b03      	cmp	r3, #3
 800d328:	d834      	bhi.n	800d394 <SD_ioctl+0x98>
 800d32a:	a201      	add	r2, pc, #4	; (adr r2, 800d330 <SD_ioctl+0x34>)
 800d32c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d330:	0800d341 	.word	0x0800d341
 800d334:	0800d349 	.word	0x0800d349
 800d338:	0800d361 	.word	0x0800d361
 800d33c:	0800d37b 	.word	0x0800d37b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d340:	2300      	movs	r3, #0
 800d342:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d346:	e028      	b.n	800d39a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d348:	f107 030c 	add.w	r3, r7, #12
 800d34c:	4618      	mov	r0, r3
 800d34e:	f7ff fe67 	bl	800d020 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d354:	683b      	ldr	r3, [r7, #0]
 800d356:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d358:	2300      	movs	r3, #0
 800d35a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d35e:	e01c      	b.n	800d39a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d360:	f107 030c 	add.w	r3, r7, #12
 800d364:	4618      	mov	r0, r3
 800d366:	f7ff fe5b 	bl	800d020 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d36c:	b29a      	uxth	r2, r3
 800d36e:	683b      	ldr	r3, [r7, #0]
 800d370:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d372:	2300      	movs	r3, #0
 800d374:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d378:	e00f      	b.n	800d39a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d37a:	f107 030c 	add.w	r3, r7, #12
 800d37e:	4618      	mov	r0, r3
 800d380:	f7ff fe4e 	bl	800d020 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d386:	0a5a      	lsrs	r2, r3, #9
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d38c:	2300      	movs	r3, #0
 800d38e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d392:	e002      	b.n	800d39a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d394:	2304      	movs	r3, #4
 800d396:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800d39a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d39e:	4618      	mov	r0, r3
 800d3a0:	3730      	adds	r7, #48	; 0x30
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	bd80      	pop	{r7, pc}
 800d3a6:	bf00      	nop
 800d3a8:	20000009 	.word	0x20000009

0800d3ac <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800d3ac:	b480      	push	{r7}
 800d3ae:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800d3b0:	4b03      	ldr	r3, [pc, #12]	; (800d3c0 <BSP_SD_WriteCpltCallback+0x14>)
 800d3b2:	2201      	movs	r2, #1
 800d3b4:	601a      	str	r2, [r3, #0]
}
 800d3b6:	bf00      	nop
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3be:	4770      	bx	lr
 800d3c0:	20013718 	.word	0x20013718

0800d3c4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800d3c4:	b480      	push	{r7}
 800d3c6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800d3c8:	4b03      	ldr	r3, [pc, #12]	; (800d3d8 <BSP_SD_ReadCpltCallback+0x14>)
 800d3ca:	2201      	movs	r2, #1
 800d3cc:	601a      	str	r2, [r3, #0]
}
 800d3ce:	bf00      	nop
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d6:	4770      	bx	lr
 800d3d8:	2001371c 	.word	0x2001371c

0800d3dc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b084      	sub	sp, #16
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d3e6:	79fb      	ldrb	r3, [r7, #7]
 800d3e8:	4a08      	ldr	r2, [pc, #32]	; (800d40c <disk_status+0x30>)
 800d3ea:	009b      	lsls	r3, r3, #2
 800d3ec:	4413      	add	r3, r2
 800d3ee:	685b      	ldr	r3, [r3, #4]
 800d3f0:	685b      	ldr	r3, [r3, #4]
 800d3f2:	79fa      	ldrb	r2, [r7, #7]
 800d3f4:	4905      	ldr	r1, [pc, #20]	; (800d40c <disk_status+0x30>)
 800d3f6:	440a      	add	r2, r1
 800d3f8:	7a12      	ldrb	r2, [r2, #8]
 800d3fa:	4610      	mov	r0, r2
 800d3fc:	4798      	blx	r3
 800d3fe:	4603      	mov	r3, r0
 800d400:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d402:	7bfb      	ldrb	r3, [r7, #15]
}
 800d404:	4618      	mov	r0, r3
 800d406:	3710      	adds	r7, #16
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}
 800d40c:	20013948 	.word	0x20013948

0800d410 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b084      	sub	sp, #16
 800d414:	af00      	add	r7, sp, #0
 800d416:	4603      	mov	r3, r0
 800d418:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d41a:	2300      	movs	r3, #0
 800d41c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d41e:	79fb      	ldrb	r3, [r7, #7]
 800d420:	4a0d      	ldr	r2, [pc, #52]	; (800d458 <disk_initialize+0x48>)
 800d422:	5cd3      	ldrb	r3, [r2, r3]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d111      	bne.n	800d44c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800d428:	79fb      	ldrb	r3, [r7, #7]
 800d42a:	4a0b      	ldr	r2, [pc, #44]	; (800d458 <disk_initialize+0x48>)
 800d42c:	2101      	movs	r1, #1
 800d42e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d430:	79fb      	ldrb	r3, [r7, #7]
 800d432:	4a09      	ldr	r2, [pc, #36]	; (800d458 <disk_initialize+0x48>)
 800d434:	009b      	lsls	r3, r3, #2
 800d436:	4413      	add	r3, r2
 800d438:	685b      	ldr	r3, [r3, #4]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	79fa      	ldrb	r2, [r7, #7]
 800d43e:	4906      	ldr	r1, [pc, #24]	; (800d458 <disk_initialize+0x48>)
 800d440:	440a      	add	r2, r1
 800d442:	7a12      	ldrb	r2, [r2, #8]
 800d444:	4610      	mov	r0, r2
 800d446:	4798      	blx	r3
 800d448:	4603      	mov	r3, r0
 800d44a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d44c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d44e:	4618      	mov	r0, r3
 800d450:	3710      	adds	r7, #16
 800d452:	46bd      	mov	sp, r7
 800d454:	bd80      	pop	{r7, pc}
 800d456:	bf00      	nop
 800d458:	20013948 	.word	0x20013948

0800d45c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d45c:	b590      	push	{r4, r7, lr}
 800d45e:	b087      	sub	sp, #28
 800d460:	af00      	add	r7, sp, #0
 800d462:	60b9      	str	r1, [r7, #8]
 800d464:	607a      	str	r2, [r7, #4]
 800d466:	603b      	str	r3, [r7, #0]
 800d468:	4603      	mov	r3, r0
 800d46a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d46c:	7bfb      	ldrb	r3, [r7, #15]
 800d46e:	4a0a      	ldr	r2, [pc, #40]	; (800d498 <disk_read+0x3c>)
 800d470:	009b      	lsls	r3, r3, #2
 800d472:	4413      	add	r3, r2
 800d474:	685b      	ldr	r3, [r3, #4]
 800d476:	689c      	ldr	r4, [r3, #8]
 800d478:	7bfb      	ldrb	r3, [r7, #15]
 800d47a:	4a07      	ldr	r2, [pc, #28]	; (800d498 <disk_read+0x3c>)
 800d47c:	4413      	add	r3, r2
 800d47e:	7a18      	ldrb	r0, [r3, #8]
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	687a      	ldr	r2, [r7, #4]
 800d484:	68b9      	ldr	r1, [r7, #8]
 800d486:	47a0      	blx	r4
 800d488:	4603      	mov	r3, r0
 800d48a:	75fb      	strb	r3, [r7, #23]
  return res;
 800d48c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d48e:	4618      	mov	r0, r3
 800d490:	371c      	adds	r7, #28
 800d492:	46bd      	mov	sp, r7
 800d494:	bd90      	pop	{r4, r7, pc}
 800d496:	bf00      	nop
 800d498:	20013948 	.word	0x20013948

0800d49c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d49c:	b590      	push	{r4, r7, lr}
 800d49e:	b087      	sub	sp, #28
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	60b9      	str	r1, [r7, #8]
 800d4a4:	607a      	str	r2, [r7, #4]
 800d4a6:	603b      	str	r3, [r7, #0]
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d4ac:	7bfb      	ldrb	r3, [r7, #15]
 800d4ae:	4a0a      	ldr	r2, [pc, #40]	; (800d4d8 <disk_write+0x3c>)
 800d4b0:	009b      	lsls	r3, r3, #2
 800d4b2:	4413      	add	r3, r2
 800d4b4:	685b      	ldr	r3, [r3, #4]
 800d4b6:	68dc      	ldr	r4, [r3, #12]
 800d4b8:	7bfb      	ldrb	r3, [r7, #15]
 800d4ba:	4a07      	ldr	r2, [pc, #28]	; (800d4d8 <disk_write+0x3c>)
 800d4bc:	4413      	add	r3, r2
 800d4be:	7a18      	ldrb	r0, [r3, #8]
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	687a      	ldr	r2, [r7, #4]
 800d4c4:	68b9      	ldr	r1, [r7, #8]
 800d4c6:	47a0      	blx	r4
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	75fb      	strb	r3, [r7, #23]
  return res;
 800d4cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	371c      	adds	r7, #28
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	bd90      	pop	{r4, r7, pc}
 800d4d6:	bf00      	nop
 800d4d8:	20013948 	.word	0x20013948

0800d4dc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b084      	sub	sp, #16
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	603a      	str	r2, [r7, #0]
 800d4e6:	71fb      	strb	r3, [r7, #7]
 800d4e8:	460b      	mov	r3, r1
 800d4ea:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d4ec:	79fb      	ldrb	r3, [r7, #7]
 800d4ee:	4a09      	ldr	r2, [pc, #36]	; (800d514 <disk_ioctl+0x38>)
 800d4f0:	009b      	lsls	r3, r3, #2
 800d4f2:	4413      	add	r3, r2
 800d4f4:	685b      	ldr	r3, [r3, #4]
 800d4f6:	691b      	ldr	r3, [r3, #16]
 800d4f8:	79fa      	ldrb	r2, [r7, #7]
 800d4fa:	4906      	ldr	r1, [pc, #24]	; (800d514 <disk_ioctl+0x38>)
 800d4fc:	440a      	add	r2, r1
 800d4fe:	7a10      	ldrb	r0, [r2, #8]
 800d500:	79b9      	ldrb	r1, [r7, #6]
 800d502:	683a      	ldr	r2, [r7, #0]
 800d504:	4798      	blx	r3
 800d506:	4603      	mov	r3, r0
 800d508:	73fb      	strb	r3, [r7, #15]
  return res;
 800d50a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d50c:	4618      	mov	r0, r3
 800d50e:	3710      	adds	r7, #16
 800d510:	46bd      	mov	sp, r7
 800d512:	bd80      	pop	{r7, pc}
 800d514:	20013948 	.word	0x20013948

0800d518 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d518:	b480      	push	{r7}
 800d51a:	b085      	sub	sp, #20
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	3301      	adds	r3, #1
 800d524:	781b      	ldrb	r3, [r3, #0]
 800d526:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d528:	89fb      	ldrh	r3, [r7, #14]
 800d52a:	021b      	lsls	r3, r3, #8
 800d52c:	b21a      	sxth	r2, r3
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	781b      	ldrb	r3, [r3, #0]
 800d532:	b21b      	sxth	r3, r3
 800d534:	4313      	orrs	r3, r2
 800d536:	b21b      	sxth	r3, r3
 800d538:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d53a:	89fb      	ldrh	r3, [r7, #14]
}
 800d53c:	4618      	mov	r0, r3
 800d53e:	3714      	adds	r7, #20
 800d540:	46bd      	mov	sp, r7
 800d542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d546:	4770      	bx	lr

0800d548 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d548:	b480      	push	{r7}
 800d54a:	b085      	sub	sp, #20
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	3303      	adds	r3, #3
 800d554:	781b      	ldrb	r3, [r3, #0]
 800d556:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	021b      	lsls	r3, r3, #8
 800d55c:	687a      	ldr	r2, [r7, #4]
 800d55e:	3202      	adds	r2, #2
 800d560:	7812      	ldrb	r2, [r2, #0]
 800d562:	4313      	orrs	r3, r2
 800d564:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	021b      	lsls	r3, r3, #8
 800d56a:	687a      	ldr	r2, [r7, #4]
 800d56c:	3201      	adds	r2, #1
 800d56e:	7812      	ldrb	r2, [r2, #0]
 800d570:	4313      	orrs	r3, r2
 800d572:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	021b      	lsls	r3, r3, #8
 800d578:	687a      	ldr	r2, [r7, #4]
 800d57a:	7812      	ldrb	r2, [r2, #0]
 800d57c:	4313      	orrs	r3, r2
 800d57e:	60fb      	str	r3, [r7, #12]
	return rv;
 800d580:	68fb      	ldr	r3, [r7, #12]
}
 800d582:	4618      	mov	r0, r3
 800d584:	3714      	adds	r7, #20
 800d586:	46bd      	mov	sp, r7
 800d588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58c:	4770      	bx	lr

0800d58e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d58e:	b480      	push	{r7}
 800d590:	b083      	sub	sp, #12
 800d592:	af00      	add	r7, sp, #0
 800d594:	6078      	str	r0, [r7, #4]
 800d596:	460b      	mov	r3, r1
 800d598:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	1c5a      	adds	r2, r3, #1
 800d59e:	607a      	str	r2, [r7, #4]
 800d5a0:	887a      	ldrh	r2, [r7, #2]
 800d5a2:	b2d2      	uxtb	r2, r2
 800d5a4:	701a      	strb	r2, [r3, #0]
 800d5a6:	887b      	ldrh	r3, [r7, #2]
 800d5a8:	0a1b      	lsrs	r3, r3, #8
 800d5aa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	1c5a      	adds	r2, r3, #1
 800d5b0:	607a      	str	r2, [r7, #4]
 800d5b2:	887a      	ldrh	r2, [r7, #2]
 800d5b4:	b2d2      	uxtb	r2, r2
 800d5b6:	701a      	strb	r2, [r3, #0]
}
 800d5b8:	bf00      	nop
 800d5ba:	370c      	adds	r7, #12
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c2:	4770      	bx	lr

0800d5c4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d5c4:	b480      	push	{r7}
 800d5c6:	b083      	sub	sp, #12
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
 800d5cc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	1c5a      	adds	r2, r3, #1
 800d5d2:	607a      	str	r2, [r7, #4]
 800d5d4:	683a      	ldr	r2, [r7, #0]
 800d5d6:	b2d2      	uxtb	r2, r2
 800d5d8:	701a      	strb	r2, [r3, #0]
 800d5da:	683b      	ldr	r3, [r7, #0]
 800d5dc:	0a1b      	lsrs	r3, r3, #8
 800d5de:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	1c5a      	adds	r2, r3, #1
 800d5e4:	607a      	str	r2, [r7, #4]
 800d5e6:	683a      	ldr	r2, [r7, #0]
 800d5e8:	b2d2      	uxtb	r2, r2
 800d5ea:	701a      	strb	r2, [r3, #0]
 800d5ec:	683b      	ldr	r3, [r7, #0]
 800d5ee:	0a1b      	lsrs	r3, r3, #8
 800d5f0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	1c5a      	adds	r2, r3, #1
 800d5f6:	607a      	str	r2, [r7, #4]
 800d5f8:	683a      	ldr	r2, [r7, #0]
 800d5fa:	b2d2      	uxtb	r2, r2
 800d5fc:	701a      	strb	r2, [r3, #0]
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	0a1b      	lsrs	r3, r3, #8
 800d602:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	1c5a      	adds	r2, r3, #1
 800d608:	607a      	str	r2, [r7, #4]
 800d60a:	683a      	ldr	r2, [r7, #0]
 800d60c:	b2d2      	uxtb	r2, r2
 800d60e:	701a      	strb	r2, [r3, #0]
}
 800d610:	bf00      	nop
 800d612:	370c      	adds	r7, #12
 800d614:	46bd      	mov	sp, r7
 800d616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61a:	4770      	bx	lr

0800d61c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d61c:	b480      	push	{r7}
 800d61e:	b087      	sub	sp, #28
 800d620:	af00      	add	r7, sp, #0
 800d622:	60f8      	str	r0, [r7, #12]
 800d624:	60b9      	str	r1, [r7, #8]
 800d626:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d62c:	68bb      	ldr	r3, [r7, #8]
 800d62e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d00d      	beq.n	800d652 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d636:	693a      	ldr	r2, [r7, #16]
 800d638:	1c53      	adds	r3, r2, #1
 800d63a:	613b      	str	r3, [r7, #16]
 800d63c:	697b      	ldr	r3, [r7, #20]
 800d63e:	1c59      	adds	r1, r3, #1
 800d640:	6179      	str	r1, [r7, #20]
 800d642:	7812      	ldrb	r2, [r2, #0]
 800d644:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	3b01      	subs	r3, #1
 800d64a:	607b      	str	r3, [r7, #4]
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d1f1      	bne.n	800d636 <mem_cpy+0x1a>
	}
}
 800d652:	bf00      	nop
 800d654:	371c      	adds	r7, #28
 800d656:	46bd      	mov	sp, r7
 800d658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65c:	4770      	bx	lr

0800d65e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d65e:	b480      	push	{r7}
 800d660:	b087      	sub	sp, #28
 800d662:	af00      	add	r7, sp, #0
 800d664:	60f8      	str	r0, [r7, #12]
 800d666:	60b9      	str	r1, [r7, #8]
 800d668:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d66e:	697b      	ldr	r3, [r7, #20]
 800d670:	1c5a      	adds	r2, r3, #1
 800d672:	617a      	str	r2, [r7, #20]
 800d674:	68ba      	ldr	r2, [r7, #8]
 800d676:	b2d2      	uxtb	r2, r2
 800d678:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	3b01      	subs	r3, #1
 800d67e:	607b      	str	r3, [r7, #4]
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d1f3      	bne.n	800d66e <mem_set+0x10>
}
 800d686:	bf00      	nop
 800d688:	371c      	adds	r7, #28
 800d68a:	46bd      	mov	sp, r7
 800d68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d690:	4770      	bx	lr

0800d692 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d692:	b480      	push	{r7}
 800d694:	b089      	sub	sp, #36	; 0x24
 800d696:	af00      	add	r7, sp, #0
 800d698:	60f8      	str	r0, [r7, #12]
 800d69a:	60b9      	str	r1, [r7, #8]
 800d69c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	61fb      	str	r3, [r7, #28]
 800d6a2:	68bb      	ldr	r3, [r7, #8]
 800d6a4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d6aa:	69fb      	ldr	r3, [r7, #28]
 800d6ac:	1c5a      	adds	r2, r3, #1
 800d6ae:	61fa      	str	r2, [r7, #28]
 800d6b0:	781b      	ldrb	r3, [r3, #0]
 800d6b2:	4619      	mov	r1, r3
 800d6b4:	69bb      	ldr	r3, [r7, #24]
 800d6b6:	1c5a      	adds	r2, r3, #1
 800d6b8:	61ba      	str	r2, [r7, #24]
 800d6ba:	781b      	ldrb	r3, [r3, #0]
 800d6bc:	1acb      	subs	r3, r1, r3
 800d6be:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	3b01      	subs	r3, #1
 800d6c4:	607b      	str	r3, [r7, #4]
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d002      	beq.n	800d6d2 <mem_cmp+0x40>
 800d6cc:	697b      	ldr	r3, [r7, #20]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d0eb      	beq.n	800d6aa <mem_cmp+0x18>

	return r;
 800d6d2:	697b      	ldr	r3, [r7, #20]
}
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	3724      	adds	r7, #36	; 0x24
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6de:	4770      	bx	lr

0800d6e0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d6e0:	b480      	push	{r7}
 800d6e2:	b083      	sub	sp, #12
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
 800d6e8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d6ea:	e002      	b.n	800d6f2 <chk_chr+0x12>
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	3301      	adds	r3, #1
 800d6f0:	607b      	str	r3, [r7, #4]
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	781b      	ldrb	r3, [r3, #0]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d005      	beq.n	800d706 <chk_chr+0x26>
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	781b      	ldrb	r3, [r3, #0]
 800d6fe:	461a      	mov	r2, r3
 800d700:	683b      	ldr	r3, [r7, #0]
 800d702:	4293      	cmp	r3, r2
 800d704:	d1f2      	bne.n	800d6ec <chk_chr+0xc>
	return *str;
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	781b      	ldrb	r3, [r3, #0]
}
 800d70a:	4618      	mov	r0, r3
 800d70c:	370c      	adds	r7, #12
 800d70e:	46bd      	mov	sp, r7
 800d710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d714:	4770      	bx	lr
	...

0800d718 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d718:	b480      	push	{r7}
 800d71a:	b085      	sub	sp, #20
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
 800d720:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d722:	2300      	movs	r3, #0
 800d724:	60bb      	str	r3, [r7, #8]
 800d726:	68bb      	ldr	r3, [r7, #8]
 800d728:	60fb      	str	r3, [r7, #12]
 800d72a:	e029      	b.n	800d780 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d72c:	4a27      	ldr	r2, [pc, #156]	; (800d7cc <chk_lock+0xb4>)
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	011b      	lsls	r3, r3, #4
 800d732:	4413      	add	r3, r2
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d01d      	beq.n	800d776 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d73a:	4a24      	ldr	r2, [pc, #144]	; (800d7cc <chk_lock+0xb4>)
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	011b      	lsls	r3, r3, #4
 800d740:	4413      	add	r3, r2
 800d742:	681a      	ldr	r2, [r3, #0]
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	429a      	cmp	r2, r3
 800d74a:	d116      	bne.n	800d77a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d74c:	4a1f      	ldr	r2, [pc, #124]	; (800d7cc <chk_lock+0xb4>)
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	011b      	lsls	r3, r3, #4
 800d752:	4413      	add	r3, r2
 800d754:	3304      	adds	r3, #4
 800d756:	681a      	ldr	r2, [r3, #0]
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d75c:	429a      	cmp	r2, r3
 800d75e:	d10c      	bne.n	800d77a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d760:	4a1a      	ldr	r2, [pc, #104]	; (800d7cc <chk_lock+0xb4>)
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	011b      	lsls	r3, r3, #4
 800d766:	4413      	add	r3, r2
 800d768:	3308      	adds	r3, #8
 800d76a:	681a      	ldr	r2, [r3, #0]
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d770:	429a      	cmp	r2, r3
 800d772:	d102      	bne.n	800d77a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d774:	e007      	b.n	800d786 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d776:	2301      	movs	r3, #1
 800d778:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	3301      	adds	r3, #1
 800d77e:	60fb      	str	r3, [r7, #12]
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	2b01      	cmp	r3, #1
 800d784:	d9d2      	bls.n	800d72c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	2b02      	cmp	r3, #2
 800d78a:	d109      	bne.n	800d7a0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d78c:	68bb      	ldr	r3, [r7, #8]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d102      	bne.n	800d798 <chk_lock+0x80>
 800d792:	683b      	ldr	r3, [r7, #0]
 800d794:	2b02      	cmp	r3, #2
 800d796:	d101      	bne.n	800d79c <chk_lock+0x84>
 800d798:	2300      	movs	r3, #0
 800d79a:	e010      	b.n	800d7be <chk_lock+0xa6>
 800d79c:	2312      	movs	r3, #18
 800d79e:	e00e      	b.n	800d7be <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d7a0:	683b      	ldr	r3, [r7, #0]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d108      	bne.n	800d7b8 <chk_lock+0xa0>
 800d7a6:	4a09      	ldr	r2, [pc, #36]	; (800d7cc <chk_lock+0xb4>)
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	011b      	lsls	r3, r3, #4
 800d7ac:	4413      	add	r3, r2
 800d7ae:	330c      	adds	r3, #12
 800d7b0:	881b      	ldrh	r3, [r3, #0]
 800d7b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d7b6:	d101      	bne.n	800d7bc <chk_lock+0xa4>
 800d7b8:	2310      	movs	r3, #16
 800d7ba:	e000      	b.n	800d7be <chk_lock+0xa6>
 800d7bc:	2300      	movs	r3, #0
}
 800d7be:	4618      	mov	r0, r3
 800d7c0:	3714      	adds	r7, #20
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c8:	4770      	bx	lr
 800d7ca:	bf00      	nop
 800d7cc:	20013728 	.word	0x20013728

0800d7d0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d7d0:	b480      	push	{r7}
 800d7d2:	b083      	sub	sp, #12
 800d7d4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	607b      	str	r3, [r7, #4]
 800d7da:	e002      	b.n	800d7e2 <enq_lock+0x12>
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	3301      	adds	r3, #1
 800d7e0:	607b      	str	r3, [r7, #4]
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	2b01      	cmp	r3, #1
 800d7e6:	d806      	bhi.n	800d7f6 <enq_lock+0x26>
 800d7e8:	4a09      	ldr	r2, [pc, #36]	; (800d810 <enq_lock+0x40>)
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	011b      	lsls	r3, r3, #4
 800d7ee:	4413      	add	r3, r2
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d1f2      	bne.n	800d7dc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	2b02      	cmp	r3, #2
 800d7fa:	bf14      	ite	ne
 800d7fc:	2301      	movne	r3, #1
 800d7fe:	2300      	moveq	r3, #0
 800d800:	b2db      	uxtb	r3, r3
}
 800d802:	4618      	mov	r0, r3
 800d804:	370c      	adds	r7, #12
 800d806:	46bd      	mov	sp, r7
 800d808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80c:	4770      	bx	lr
 800d80e:	bf00      	nop
 800d810:	20013728 	.word	0x20013728

0800d814 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d814:	b480      	push	{r7}
 800d816:	b085      	sub	sp, #20
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]
 800d81c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d81e:	2300      	movs	r3, #0
 800d820:	60fb      	str	r3, [r7, #12]
 800d822:	e01f      	b.n	800d864 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d824:	4a41      	ldr	r2, [pc, #260]	; (800d92c <inc_lock+0x118>)
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	011b      	lsls	r3, r3, #4
 800d82a:	4413      	add	r3, r2
 800d82c:	681a      	ldr	r2, [r3, #0]
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	429a      	cmp	r2, r3
 800d834:	d113      	bne.n	800d85e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d836:	4a3d      	ldr	r2, [pc, #244]	; (800d92c <inc_lock+0x118>)
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	011b      	lsls	r3, r3, #4
 800d83c:	4413      	add	r3, r2
 800d83e:	3304      	adds	r3, #4
 800d840:	681a      	ldr	r2, [r3, #0]
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d846:	429a      	cmp	r2, r3
 800d848:	d109      	bne.n	800d85e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d84a:	4a38      	ldr	r2, [pc, #224]	; (800d92c <inc_lock+0x118>)
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	011b      	lsls	r3, r3, #4
 800d850:	4413      	add	r3, r2
 800d852:	3308      	adds	r3, #8
 800d854:	681a      	ldr	r2, [r3, #0]
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d85a:	429a      	cmp	r2, r3
 800d85c:	d006      	beq.n	800d86c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	3301      	adds	r3, #1
 800d862:	60fb      	str	r3, [r7, #12]
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	2b01      	cmp	r3, #1
 800d868:	d9dc      	bls.n	800d824 <inc_lock+0x10>
 800d86a:	e000      	b.n	800d86e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d86c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	2b02      	cmp	r3, #2
 800d872:	d132      	bne.n	800d8da <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d874:	2300      	movs	r3, #0
 800d876:	60fb      	str	r3, [r7, #12]
 800d878:	e002      	b.n	800d880 <inc_lock+0x6c>
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	3301      	adds	r3, #1
 800d87e:	60fb      	str	r3, [r7, #12]
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	2b01      	cmp	r3, #1
 800d884:	d806      	bhi.n	800d894 <inc_lock+0x80>
 800d886:	4a29      	ldr	r2, [pc, #164]	; (800d92c <inc_lock+0x118>)
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	011b      	lsls	r3, r3, #4
 800d88c:	4413      	add	r3, r2
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d1f2      	bne.n	800d87a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	2b02      	cmp	r3, #2
 800d898:	d101      	bne.n	800d89e <inc_lock+0x8a>
 800d89a:	2300      	movs	r3, #0
 800d89c:	e040      	b.n	800d920 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681a      	ldr	r2, [r3, #0]
 800d8a2:	4922      	ldr	r1, [pc, #136]	; (800d92c <inc_lock+0x118>)
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	011b      	lsls	r3, r3, #4
 800d8a8:	440b      	add	r3, r1
 800d8aa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	689a      	ldr	r2, [r3, #8]
 800d8b0:	491e      	ldr	r1, [pc, #120]	; (800d92c <inc_lock+0x118>)
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	011b      	lsls	r3, r3, #4
 800d8b6:	440b      	add	r3, r1
 800d8b8:	3304      	adds	r3, #4
 800d8ba:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	695a      	ldr	r2, [r3, #20]
 800d8c0:	491a      	ldr	r1, [pc, #104]	; (800d92c <inc_lock+0x118>)
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	011b      	lsls	r3, r3, #4
 800d8c6:	440b      	add	r3, r1
 800d8c8:	3308      	adds	r3, #8
 800d8ca:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d8cc:	4a17      	ldr	r2, [pc, #92]	; (800d92c <inc_lock+0x118>)
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	011b      	lsls	r3, r3, #4
 800d8d2:	4413      	add	r3, r2
 800d8d4:	330c      	adds	r3, #12
 800d8d6:	2200      	movs	r2, #0
 800d8d8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d8da:	683b      	ldr	r3, [r7, #0]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d009      	beq.n	800d8f4 <inc_lock+0xe0>
 800d8e0:	4a12      	ldr	r2, [pc, #72]	; (800d92c <inc_lock+0x118>)
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	011b      	lsls	r3, r3, #4
 800d8e6:	4413      	add	r3, r2
 800d8e8:	330c      	adds	r3, #12
 800d8ea:	881b      	ldrh	r3, [r3, #0]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d001      	beq.n	800d8f4 <inc_lock+0xe0>
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	e015      	b.n	800d920 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d108      	bne.n	800d90c <inc_lock+0xf8>
 800d8fa:	4a0c      	ldr	r2, [pc, #48]	; (800d92c <inc_lock+0x118>)
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	011b      	lsls	r3, r3, #4
 800d900:	4413      	add	r3, r2
 800d902:	330c      	adds	r3, #12
 800d904:	881b      	ldrh	r3, [r3, #0]
 800d906:	3301      	adds	r3, #1
 800d908:	b29a      	uxth	r2, r3
 800d90a:	e001      	b.n	800d910 <inc_lock+0xfc>
 800d90c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d910:	4906      	ldr	r1, [pc, #24]	; (800d92c <inc_lock+0x118>)
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	011b      	lsls	r3, r3, #4
 800d916:	440b      	add	r3, r1
 800d918:	330c      	adds	r3, #12
 800d91a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	3301      	adds	r3, #1
}
 800d920:	4618      	mov	r0, r3
 800d922:	3714      	adds	r7, #20
 800d924:	46bd      	mov	sp, r7
 800d926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92a:	4770      	bx	lr
 800d92c:	20013728 	.word	0x20013728

0800d930 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d930:	b480      	push	{r7}
 800d932:	b085      	sub	sp, #20
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	3b01      	subs	r3, #1
 800d93c:	607b      	str	r3, [r7, #4]
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	2b01      	cmp	r3, #1
 800d942:	d825      	bhi.n	800d990 <dec_lock+0x60>
		n = Files[i].ctr;
 800d944:	4a17      	ldr	r2, [pc, #92]	; (800d9a4 <dec_lock+0x74>)
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	011b      	lsls	r3, r3, #4
 800d94a:	4413      	add	r3, r2
 800d94c:	330c      	adds	r3, #12
 800d94e:	881b      	ldrh	r3, [r3, #0]
 800d950:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d952:	89fb      	ldrh	r3, [r7, #14]
 800d954:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d958:	d101      	bne.n	800d95e <dec_lock+0x2e>
 800d95a:	2300      	movs	r3, #0
 800d95c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d95e:	89fb      	ldrh	r3, [r7, #14]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d002      	beq.n	800d96a <dec_lock+0x3a>
 800d964:	89fb      	ldrh	r3, [r7, #14]
 800d966:	3b01      	subs	r3, #1
 800d968:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d96a:	4a0e      	ldr	r2, [pc, #56]	; (800d9a4 <dec_lock+0x74>)
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	011b      	lsls	r3, r3, #4
 800d970:	4413      	add	r3, r2
 800d972:	330c      	adds	r3, #12
 800d974:	89fa      	ldrh	r2, [r7, #14]
 800d976:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d978:	89fb      	ldrh	r3, [r7, #14]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d105      	bne.n	800d98a <dec_lock+0x5a>
 800d97e:	4a09      	ldr	r2, [pc, #36]	; (800d9a4 <dec_lock+0x74>)
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	011b      	lsls	r3, r3, #4
 800d984:	4413      	add	r3, r2
 800d986:	2200      	movs	r2, #0
 800d988:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d98a:	2300      	movs	r3, #0
 800d98c:	737b      	strb	r3, [r7, #13]
 800d98e:	e001      	b.n	800d994 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d990:	2302      	movs	r3, #2
 800d992:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d994:	7b7b      	ldrb	r3, [r7, #13]
}
 800d996:	4618      	mov	r0, r3
 800d998:	3714      	adds	r7, #20
 800d99a:	46bd      	mov	sp, r7
 800d99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a0:	4770      	bx	lr
 800d9a2:	bf00      	nop
 800d9a4:	20013728 	.word	0x20013728

0800d9a8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d9a8:	b480      	push	{r7}
 800d9aa:	b085      	sub	sp, #20
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	60fb      	str	r3, [r7, #12]
 800d9b4:	e010      	b.n	800d9d8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d9b6:	4a0d      	ldr	r2, [pc, #52]	; (800d9ec <clear_lock+0x44>)
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	011b      	lsls	r3, r3, #4
 800d9bc:	4413      	add	r3, r2
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	687a      	ldr	r2, [r7, #4]
 800d9c2:	429a      	cmp	r2, r3
 800d9c4:	d105      	bne.n	800d9d2 <clear_lock+0x2a>
 800d9c6:	4a09      	ldr	r2, [pc, #36]	; (800d9ec <clear_lock+0x44>)
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	011b      	lsls	r3, r3, #4
 800d9cc:	4413      	add	r3, r2
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	3301      	adds	r3, #1
 800d9d6:	60fb      	str	r3, [r7, #12]
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	2b01      	cmp	r3, #1
 800d9dc:	d9eb      	bls.n	800d9b6 <clear_lock+0xe>
	}
}
 800d9de:	bf00      	nop
 800d9e0:	3714      	adds	r7, #20
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e8:	4770      	bx	lr
 800d9ea:	bf00      	nop
 800d9ec:	20013728 	.word	0x20013728

0800d9f0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b086      	sub	sp, #24
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	78db      	ldrb	r3, [r3, #3]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d034      	beq.n	800da6e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da08:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	7858      	ldrb	r0, [r3, #1]
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800da14:	2301      	movs	r3, #1
 800da16:	697a      	ldr	r2, [r7, #20]
 800da18:	f7ff fd40 	bl	800d49c <disk_write>
 800da1c:	4603      	mov	r3, r0
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d002      	beq.n	800da28 <sync_window+0x38>
			res = FR_DISK_ERR;
 800da22:	2301      	movs	r3, #1
 800da24:	73fb      	strb	r3, [r7, #15]
 800da26:	e022      	b.n	800da6e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2200      	movs	r2, #0
 800da2c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da32:	697a      	ldr	r2, [r7, #20]
 800da34:	1ad2      	subs	r2, r2, r3
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da3a:	429a      	cmp	r2, r3
 800da3c:	d217      	bcs.n	800da6e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	789b      	ldrb	r3, [r3, #2]
 800da42:	613b      	str	r3, [r7, #16]
 800da44:	e010      	b.n	800da68 <sync_window+0x78>
					wsect += fs->fsize;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da4a:	697a      	ldr	r2, [r7, #20]
 800da4c:	4413      	add	r3, r2
 800da4e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	7858      	ldrb	r0, [r3, #1]
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800da5a:	2301      	movs	r3, #1
 800da5c:	697a      	ldr	r2, [r7, #20]
 800da5e:	f7ff fd1d 	bl	800d49c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800da62:	693b      	ldr	r3, [r7, #16]
 800da64:	3b01      	subs	r3, #1
 800da66:	613b      	str	r3, [r7, #16]
 800da68:	693b      	ldr	r3, [r7, #16]
 800da6a:	2b01      	cmp	r3, #1
 800da6c:	d8eb      	bhi.n	800da46 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800da6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800da70:	4618      	mov	r0, r3
 800da72:	3718      	adds	r7, #24
 800da74:	46bd      	mov	sp, r7
 800da76:	bd80      	pop	{r7, pc}

0800da78 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b084      	sub	sp, #16
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
 800da80:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800da82:	2300      	movs	r3, #0
 800da84:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da8a:	683a      	ldr	r2, [r7, #0]
 800da8c:	429a      	cmp	r2, r3
 800da8e:	d01b      	beq.n	800dac8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800da90:	6878      	ldr	r0, [r7, #4]
 800da92:	f7ff ffad 	bl	800d9f0 <sync_window>
 800da96:	4603      	mov	r3, r0
 800da98:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800da9a:	7bfb      	ldrb	r3, [r7, #15]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d113      	bne.n	800dac8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	7858      	ldrb	r0, [r3, #1]
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800daaa:	2301      	movs	r3, #1
 800daac:	683a      	ldr	r2, [r7, #0]
 800daae:	f7ff fcd5 	bl	800d45c <disk_read>
 800dab2:	4603      	mov	r3, r0
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d004      	beq.n	800dac2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800dab8:	f04f 33ff 	mov.w	r3, #4294967295
 800dabc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800dabe:	2301      	movs	r3, #1
 800dac0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	683a      	ldr	r2, [r7, #0]
 800dac6:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 800dac8:	7bfb      	ldrb	r3, [r7, #15]
}
 800daca:	4618      	mov	r0, r3
 800dacc:	3710      	adds	r7, #16
 800dace:	46bd      	mov	sp, r7
 800dad0:	bd80      	pop	{r7, pc}
	...

0800dad4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b084      	sub	sp, #16
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800dadc:	6878      	ldr	r0, [r7, #4]
 800dade:	f7ff ff87 	bl	800d9f0 <sync_window>
 800dae2:	4603      	mov	r3, r0
 800dae4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800dae6:	7bfb      	ldrb	r3, [r7, #15]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d159      	bne.n	800dba0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	781b      	ldrb	r3, [r3, #0]
 800daf0:	2b03      	cmp	r3, #3
 800daf2:	d149      	bne.n	800db88 <sync_fs+0xb4>
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	791b      	ldrb	r3, [r3, #4]
 800daf8:	2b01      	cmp	r3, #1
 800dafa:	d145      	bne.n	800db88 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	899b      	ldrh	r3, [r3, #12]
 800db06:	461a      	mov	r2, r3
 800db08:	2100      	movs	r1, #0
 800db0a:	f7ff fda8 	bl	800d65e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	333c      	adds	r3, #60	; 0x3c
 800db12:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800db16:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800db1a:	4618      	mov	r0, r3
 800db1c:	f7ff fd37 	bl	800d58e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	333c      	adds	r3, #60	; 0x3c
 800db24:	4921      	ldr	r1, [pc, #132]	; (800dbac <sync_fs+0xd8>)
 800db26:	4618      	mov	r0, r3
 800db28:	f7ff fd4c 	bl	800d5c4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	333c      	adds	r3, #60	; 0x3c
 800db30:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800db34:	491e      	ldr	r1, [pc, #120]	; (800dbb0 <sync_fs+0xdc>)
 800db36:	4618      	mov	r0, r3
 800db38:	f7ff fd44 	bl	800d5c4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	333c      	adds	r3, #60	; 0x3c
 800db40:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	699b      	ldr	r3, [r3, #24]
 800db48:	4619      	mov	r1, r3
 800db4a:	4610      	mov	r0, r2
 800db4c:	f7ff fd3a 	bl	800d5c4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	333c      	adds	r3, #60	; 0x3c
 800db54:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	695b      	ldr	r3, [r3, #20]
 800db5c:	4619      	mov	r1, r3
 800db5e:	4610      	mov	r0, r2
 800db60:	f7ff fd30 	bl	800d5c4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db68:	1c5a      	adds	r2, r3, #1
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	7858      	ldrb	r0, [r3, #1]
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800db7c:	2301      	movs	r3, #1
 800db7e:	f7ff fc8d 	bl	800d49c <disk_write>
			fs->fsi_flag = 0;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	2200      	movs	r2, #0
 800db86:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	785b      	ldrb	r3, [r3, #1]
 800db8c:	2200      	movs	r2, #0
 800db8e:	2100      	movs	r1, #0
 800db90:	4618      	mov	r0, r3
 800db92:	f7ff fca3 	bl	800d4dc <disk_ioctl>
 800db96:	4603      	mov	r3, r0
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d001      	beq.n	800dba0 <sync_fs+0xcc>
 800db9c:	2301      	movs	r3, #1
 800db9e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800dba0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dba2:	4618      	mov	r0, r3
 800dba4:	3710      	adds	r7, #16
 800dba6:	46bd      	mov	sp, r7
 800dba8:	bd80      	pop	{r7, pc}
 800dbaa:	bf00      	nop
 800dbac:	41615252 	.word	0x41615252
 800dbb0:	61417272 	.word	0x61417272

0800dbb4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800dbb4:	b480      	push	{r7}
 800dbb6:	b083      	sub	sp, #12
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
 800dbbc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800dbbe:	683b      	ldr	r3, [r7, #0]
 800dbc0:	3b02      	subs	r3, #2
 800dbc2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	6a1b      	ldr	r3, [r3, #32]
 800dbc8:	3b02      	subs	r3, #2
 800dbca:	683a      	ldr	r2, [r7, #0]
 800dbcc:	429a      	cmp	r2, r3
 800dbce:	d301      	bcc.n	800dbd4 <clust2sect+0x20>
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	e008      	b.n	800dbe6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	895b      	ldrh	r3, [r3, #10]
 800dbd8:	461a      	mov	r2, r3
 800dbda:	683b      	ldr	r3, [r7, #0]
 800dbdc:	fb03 f202 	mul.w	r2, r3, r2
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbe4:	4413      	add	r3, r2
}
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	370c      	adds	r7, #12
 800dbea:	46bd      	mov	sp, r7
 800dbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf0:	4770      	bx	lr

0800dbf2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800dbf2:	b580      	push	{r7, lr}
 800dbf4:	b086      	sub	sp, #24
 800dbf6:	af00      	add	r7, sp, #0
 800dbf8:	6078      	str	r0, [r7, #4]
 800dbfa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800dc02:	683b      	ldr	r3, [r7, #0]
 800dc04:	2b01      	cmp	r3, #1
 800dc06:	d904      	bls.n	800dc12 <get_fat+0x20>
 800dc08:	693b      	ldr	r3, [r7, #16]
 800dc0a:	6a1b      	ldr	r3, [r3, #32]
 800dc0c:	683a      	ldr	r2, [r7, #0]
 800dc0e:	429a      	cmp	r2, r3
 800dc10:	d302      	bcc.n	800dc18 <get_fat+0x26>
		val = 1;	/* Internal error */
 800dc12:	2301      	movs	r3, #1
 800dc14:	617b      	str	r3, [r7, #20]
 800dc16:	e0b7      	b.n	800dd88 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800dc18:	f04f 33ff 	mov.w	r3, #4294967295
 800dc1c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800dc1e:	693b      	ldr	r3, [r7, #16]
 800dc20:	781b      	ldrb	r3, [r3, #0]
 800dc22:	2b02      	cmp	r3, #2
 800dc24:	d05a      	beq.n	800dcdc <get_fat+0xea>
 800dc26:	2b03      	cmp	r3, #3
 800dc28:	d07d      	beq.n	800dd26 <get_fat+0x134>
 800dc2a:	2b01      	cmp	r3, #1
 800dc2c:	f040 80a2 	bne.w	800dd74 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800dc30:	683b      	ldr	r3, [r7, #0]
 800dc32:	60fb      	str	r3, [r7, #12]
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	085b      	lsrs	r3, r3, #1
 800dc38:	68fa      	ldr	r2, [r7, #12]
 800dc3a:	4413      	add	r3, r2
 800dc3c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dc3e:	693b      	ldr	r3, [r7, #16]
 800dc40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc42:	693b      	ldr	r3, [r7, #16]
 800dc44:	899b      	ldrh	r3, [r3, #12]
 800dc46:	4619      	mov	r1, r3
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	fbb3 f3f1 	udiv	r3, r3, r1
 800dc4e:	4413      	add	r3, r2
 800dc50:	4619      	mov	r1, r3
 800dc52:	6938      	ldr	r0, [r7, #16]
 800dc54:	f7ff ff10 	bl	800da78 <move_window>
 800dc58:	4603      	mov	r3, r0
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	f040 808d 	bne.w	800dd7a <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	1c5a      	adds	r2, r3, #1
 800dc64:	60fa      	str	r2, [r7, #12]
 800dc66:	693a      	ldr	r2, [r7, #16]
 800dc68:	8992      	ldrh	r2, [r2, #12]
 800dc6a:	fbb3 f1f2 	udiv	r1, r3, r2
 800dc6e:	fb02 f201 	mul.w	r2, r2, r1
 800dc72:	1a9b      	subs	r3, r3, r2
 800dc74:	693a      	ldr	r2, [r7, #16]
 800dc76:	4413      	add	r3, r2
 800dc78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dc7c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dc7e:	693b      	ldr	r3, [r7, #16]
 800dc80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc82:	693b      	ldr	r3, [r7, #16]
 800dc84:	899b      	ldrh	r3, [r3, #12]
 800dc86:	4619      	mov	r1, r3
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	fbb3 f3f1 	udiv	r3, r3, r1
 800dc8e:	4413      	add	r3, r2
 800dc90:	4619      	mov	r1, r3
 800dc92:	6938      	ldr	r0, [r7, #16]
 800dc94:	f7ff fef0 	bl	800da78 <move_window>
 800dc98:	4603      	mov	r3, r0
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d16f      	bne.n	800dd7e <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800dc9e:	693b      	ldr	r3, [r7, #16]
 800dca0:	899b      	ldrh	r3, [r3, #12]
 800dca2:	461a      	mov	r2, r3
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	fbb3 f1f2 	udiv	r1, r3, r2
 800dcaa:	fb02 f201 	mul.w	r2, r2, r1
 800dcae:	1a9b      	subs	r3, r3, r2
 800dcb0:	693a      	ldr	r2, [r7, #16]
 800dcb2:	4413      	add	r3, r2
 800dcb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dcb8:	021b      	lsls	r3, r3, #8
 800dcba:	461a      	mov	r2, r3
 800dcbc:	68bb      	ldr	r3, [r7, #8]
 800dcbe:	4313      	orrs	r3, r2
 800dcc0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800dcc2:	683b      	ldr	r3, [r7, #0]
 800dcc4:	f003 0301 	and.w	r3, r3, #1
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d002      	beq.n	800dcd2 <get_fat+0xe0>
 800dccc:	68bb      	ldr	r3, [r7, #8]
 800dcce:	091b      	lsrs	r3, r3, #4
 800dcd0:	e002      	b.n	800dcd8 <get_fat+0xe6>
 800dcd2:	68bb      	ldr	r3, [r7, #8]
 800dcd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dcd8:	617b      	str	r3, [r7, #20]
			break;
 800dcda:	e055      	b.n	800dd88 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800dcdc:	693b      	ldr	r3, [r7, #16]
 800dcde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dce0:	693b      	ldr	r3, [r7, #16]
 800dce2:	899b      	ldrh	r3, [r3, #12]
 800dce4:	085b      	lsrs	r3, r3, #1
 800dce6:	b29b      	uxth	r3, r3
 800dce8:	4619      	mov	r1, r3
 800dcea:	683b      	ldr	r3, [r7, #0]
 800dcec:	fbb3 f3f1 	udiv	r3, r3, r1
 800dcf0:	4413      	add	r3, r2
 800dcf2:	4619      	mov	r1, r3
 800dcf4:	6938      	ldr	r0, [r7, #16]
 800dcf6:	f7ff febf 	bl	800da78 <move_window>
 800dcfa:	4603      	mov	r3, r0
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d140      	bne.n	800dd82 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800dd00:	693b      	ldr	r3, [r7, #16]
 800dd02:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800dd06:	683b      	ldr	r3, [r7, #0]
 800dd08:	005b      	lsls	r3, r3, #1
 800dd0a:	693a      	ldr	r2, [r7, #16]
 800dd0c:	8992      	ldrh	r2, [r2, #12]
 800dd0e:	fbb3 f0f2 	udiv	r0, r3, r2
 800dd12:	fb02 f200 	mul.w	r2, r2, r0
 800dd16:	1a9b      	subs	r3, r3, r2
 800dd18:	440b      	add	r3, r1
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	f7ff fbfc 	bl	800d518 <ld_word>
 800dd20:	4603      	mov	r3, r0
 800dd22:	617b      	str	r3, [r7, #20]
			break;
 800dd24:	e030      	b.n	800dd88 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dd26:	693b      	ldr	r3, [r7, #16]
 800dd28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd2a:	693b      	ldr	r3, [r7, #16]
 800dd2c:	899b      	ldrh	r3, [r3, #12]
 800dd2e:	089b      	lsrs	r3, r3, #2
 800dd30:	b29b      	uxth	r3, r3
 800dd32:	4619      	mov	r1, r3
 800dd34:	683b      	ldr	r3, [r7, #0]
 800dd36:	fbb3 f3f1 	udiv	r3, r3, r1
 800dd3a:	4413      	add	r3, r2
 800dd3c:	4619      	mov	r1, r3
 800dd3e:	6938      	ldr	r0, [r7, #16]
 800dd40:	f7ff fe9a 	bl	800da78 <move_window>
 800dd44:	4603      	mov	r3, r0
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d11d      	bne.n	800dd86 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800dd4a:	693b      	ldr	r3, [r7, #16]
 800dd4c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800dd50:	683b      	ldr	r3, [r7, #0]
 800dd52:	009b      	lsls	r3, r3, #2
 800dd54:	693a      	ldr	r2, [r7, #16]
 800dd56:	8992      	ldrh	r2, [r2, #12]
 800dd58:	fbb3 f0f2 	udiv	r0, r3, r2
 800dd5c:	fb02 f200 	mul.w	r2, r2, r0
 800dd60:	1a9b      	subs	r3, r3, r2
 800dd62:	440b      	add	r3, r1
 800dd64:	4618      	mov	r0, r3
 800dd66:	f7ff fbef 	bl	800d548 <ld_dword>
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800dd70:	617b      	str	r3, [r7, #20]
			break;
 800dd72:	e009      	b.n	800dd88 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800dd74:	2301      	movs	r3, #1
 800dd76:	617b      	str	r3, [r7, #20]
 800dd78:	e006      	b.n	800dd88 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dd7a:	bf00      	nop
 800dd7c:	e004      	b.n	800dd88 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dd7e:	bf00      	nop
 800dd80:	e002      	b.n	800dd88 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800dd82:	bf00      	nop
 800dd84:	e000      	b.n	800dd88 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dd86:	bf00      	nop
		}
	}

	return val;
 800dd88:	697b      	ldr	r3, [r7, #20]
}
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	3718      	adds	r7, #24
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	bd80      	pop	{r7, pc}

0800dd92 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800dd92:	b590      	push	{r4, r7, lr}
 800dd94:	b089      	sub	sp, #36	; 0x24
 800dd96:	af00      	add	r7, sp, #0
 800dd98:	60f8      	str	r0, [r7, #12]
 800dd9a:	60b9      	str	r1, [r7, #8]
 800dd9c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800dd9e:	2302      	movs	r3, #2
 800dda0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800dda2:	68bb      	ldr	r3, [r7, #8]
 800dda4:	2b01      	cmp	r3, #1
 800dda6:	f240 8106 	bls.w	800dfb6 <put_fat+0x224>
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	6a1b      	ldr	r3, [r3, #32]
 800ddae:	68ba      	ldr	r2, [r7, #8]
 800ddb0:	429a      	cmp	r2, r3
 800ddb2:	f080 8100 	bcs.w	800dfb6 <put_fat+0x224>
		switch (fs->fs_type) {
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	781b      	ldrb	r3, [r3, #0]
 800ddba:	2b02      	cmp	r3, #2
 800ddbc:	f000 8088 	beq.w	800ded0 <put_fat+0x13e>
 800ddc0:	2b03      	cmp	r3, #3
 800ddc2:	f000 80b0 	beq.w	800df26 <put_fat+0x194>
 800ddc6:	2b01      	cmp	r3, #1
 800ddc8:	f040 80f5 	bne.w	800dfb6 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ddcc:	68bb      	ldr	r3, [r7, #8]
 800ddce:	61bb      	str	r3, [r7, #24]
 800ddd0:	69bb      	ldr	r3, [r7, #24]
 800ddd2:	085b      	lsrs	r3, r3, #1
 800ddd4:	69ba      	ldr	r2, [r7, #24]
 800ddd6:	4413      	add	r3, r2
 800ddd8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	899b      	ldrh	r3, [r3, #12]
 800dde2:	4619      	mov	r1, r3
 800dde4:	69bb      	ldr	r3, [r7, #24]
 800dde6:	fbb3 f3f1 	udiv	r3, r3, r1
 800ddea:	4413      	add	r3, r2
 800ddec:	4619      	mov	r1, r3
 800ddee:	68f8      	ldr	r0, [r7, #12]
 800ddf0:	f7ff fe42 	bl	800da78 <move_window>
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ddf8:	7ffb      	ldrb	r3, [r7, #31]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	f040 80d4 	bne.w	800dfa8 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800de06:	69bb      	ldr	r3, [r7, #24]
 800de08:	1c5a      	adds	r2, r3, #1
 800de0a:	61ba      	str	r2, [r7, #24]
 800de0c:	68fa      	ldr	r2, [r7, #12]
 800de0e:	8992      	ldrh	r2, [r2, #12]
 800de10:	fbb3 f0f2 	udiv	r0, r3, r2
 800de14:	fb02 f200 	mul.w	r2, r2, r0
 800de18:	1a9b      	subs	r3, r3, r2
 800de1a:	440b      	add	r3, r1
 800de1c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800de1e:	68bb      	ldr	r3, [r7, #8]
 800de20:	f003 0301 	and.w	r3, r3, #1
 800de24:	2b00      	cmp	r3, #0
 800de26:	d00d      	beq.n	800de44 <put_fat+0xb2>
 800de28:	697b      	ldr	r3, [r7, #20]
 800de2a:	781b      	ldrb	r3, [r3, #0]
 800de2c:	b25b      	sxtb	r3, r3
 800de2e:	f003 030f 	and.w	r3, r3, #15
 800de32:	b25a      	sxtb	r2, r3
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	b2db      	uxtb	r3, r3
 800de38:	011b      	lsls	r3, r3, #4
 800de3a:	b25b      	sxtb	r3, r3
 800de3c:	4313      	orrs	r3, r2
 800de3e:	b25b      	sxtb	r3, r3
 800de40:	b2db      	uxtb	r3, r3
 800de42:	e001      	b.n	800de48 <put_fat+0xb6>
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	b2db      	uxtb	r3, r3
 800de48:	697a      	ldr	r2, [r7, #20]
 800de4a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	2201      	movs	r2, #1
 800de50:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	899b      	ldrh	r3, [r3, #12]
 800de5a:	4619      	mov	r1, r3
 800de5c:	69bb      	ldr	r3, [r7, #24]
 800de5e:	fbb3 f3f1 	udiv	r3, r3, r1
 800de62:	4413      	add	r3, r2
 800de64:	4619      	mov	r1, r3
 800de66:	68f8      	ldr	r0, [r7, #12]
 800de68:	f7ff fe06 	bl	800da78 <move_window>
 800de6c:	4603      	mov	r3, r0
 800de6e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800de70:	7ffb      	ldrb	r3, [r7, #31]
 800de72:	2b00      	cmp	r3, #0
 800de74:	f040 809a 	bne.w	800dfac <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	899b      	ldrh	r3, [r3, #12]
 800de82:	461a      	mov	r2, r3
 800de84:	69bb      	ldr	r3, [r7, #24]
 800de86:	fbb3 f0f2 	udiv	r0, r3, r2
 800de8a:	fb02 f200 	mul.w	r2, r2, r0
 800de8e:	1a9b      	subs	r3, r3, r2
 800de90:	440b      	add	r3, r1
 800de92:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800de94:	68bb      	ldr	r3, [r7, #8]
 800de96:	f003 0301 	and.w	r3, r3, #1
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d003      	beq.n	800dea6 <put_fat+0x114>
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	091b      	lsrs	r3, r3, #4
 800dea2:	b2db      	uxtb	r3, r3
 800dea4:	e00e      	b.n	800dec4 <put_fat+0x132>
 800dea6:	697b      	ldr	r3, [r7, #20]
 800dea8:	781b      	ldrb	r3, [r3, #0]
 800deaa:	b25b      	sxtb	r3, r3
 800deac:	f023 030f 	bic.w	r3, r3, #15
 800deb0:	b25a      	sxtb	r2, r3
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	0a1b      	lsrs	r3, r3, #8
 800deb6:	b25b      	sxtb	r3, r3
 800deb8:	f003 030f 	and.w	r3, r3, #15
 800debc:	b25b      	sxtb	r3, r3
 800debe:	4313      	orrs	r3, r2
 800dec0:	b25b      	sxtb	r3, r3
 800dec2:	b2db      	uxtb	r3, r3
 800dec4:	697a      	ldr	r2, [r7, #20]
 800dec6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	2201      	movs	r2, #1
 800decc:	70da      	strb	r2, [r3, #3]
			break;
 800dece:	e072      	b.n	800dfb6 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	899b      	ldrh	r3, [r3, #12]
 800ded8:	085b      	lsrs	r3, r3, #1
 800deda:	b29b      	uxth	r3, r3
 800dedc:	4619      	mov	r1, r3
 800dede:	68bb      	ldr	r3, [r7, #8]
 800dee0:	fbb3 f3f1 	udiv	r3, r3, r1
 800dee4:	4413      	add	r3, r2
 800dee6:	4619      	mov	r1, r3
 800dee8:	68f8      	ldr	r0, [r7, #12]
 800deea:	f7ff fdc5 	bl	800da78 <move_window>
 800deee:	4603      	mov	r3, r0
 800def0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800def2:	7ffb      	ldrb	r3, [r7, #31]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d15b      	bne.n	800dfb0 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800defe:	68bb      	ldr	r3, [r7, #8]
 800df00:	005b      	lsls	r3, r3, #1
 800df02:	68fa      	ldr	r2, [r7, #12]
 800df04:	8992      	ldrh	r2, [r2, #12]
 800df06:	fbb3 f0f2 	udiv	r0, r3, r2
 800df0a:	fb02 f200 	mul.w	r2, r2, r0
 800df0e:	1a9b      	subs	r3, r3, r2
 800df10:	440b      	add	r3, r1
 800df12:	687a      	ldr	r2, [r7, #4]
 800df14:	b292      	uxth	r2, r2
 800df16:	4611      	mov	r1, r2
 800df18:	4618      	mov	r0, r3
 800df1a:	f7ff fb38 	bl	800d58e <st_word>
			fs->wflag = 1;
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	2201      	movs	r2, #1
 800df22:	70da      	strb	r2, [r3, #3]
			break;
 800df24:	e047      	b.n	800dfb6 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	899b      	ldrh	r3, [r3, #12]
 800df2e:	089b      	lsrs	r3, r3, #2
 800df30:	b29b      	uxth	r3, r3
 800df32:	4619      	mov	r1, r3
 800df34:	68bb      	ldr	r3, [r7, #8]
 800df36:	fbb3 f3f1 	udiv	r3, r3, r1
 800df3a:	4413      	add	r3, r2
 800df3c:	4619      	mov	r1, r3
 800df3e:	68f8      	ldr	r0, [r7, #12]
 800df40:	f7ff fd9a 	bl	800da78 <move_window>
 800df44:	4603      	mov	r3, r0
 800df46:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800df48:	7ffb      	ldrb	r3, [r7, #31]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d132      	bne.n	800dfb4 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800df5a:	68bb      	ldr	r3, [r7, #8]
 800df5c:	009b      	lsls	r3, r3, #2
 800df5e:	68fa      	ldr	r2, [r7, #12]
 800df60:	8992      	ldrh	r2, [r2, #12]
 800df62:	fbb3 f0f2 	udiv	r0, r3, r2
 800df66:	fb02 f200 	mul.w	r2, r2, r0
 800df6a:	1a9b      	subs	r3, r3, r2
 800df6c:	440b      	add	r3, r1
 800df6e:	4618      	mov	r0, r3
 800df70:	f7ff faea 	bl	800d548 <ld_dword>
 800df74:	4603      	mov	r3, r0
 800df76:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800df7a:	4323      	orrs	r3, r4
 800df7c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800df84:	68bb      	ldr	r3, [r7, #8]
 800df86:	009b      	lsls	r3, r3, #2
 800df88:	68fa      	ldr	r2, [r7, #12]
 800df8a:	8992      	ldrh	r2, [r2, #12]
 800df8c:	fbb3 f0f2 	udiv	r0, r3, r2
 800df90:	fb02 f200 	mul.w	r2, r2, r0
 800df94:	1a9b      	subs	r3, r3, r2
 800df96:	440b      	add	r3, r1
 800df98:	6879      	ldr	r1, [r7, #4]
 800df9a:	4618      	mov	r0, r3
 800df9c:	f7ff fb12 	bl	800d5c4 <st_dword>
			fs->wflag = 1;
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	2201      	movs	r2, #1
 800dfa4:	70da      	strb	r2, [r3, #3]
			break;
 800dfa6:	e006      	b.n	800dfb6 <put_fat+0x224>
			if (res != FR_OK) break;
 800dfa8:	bf00      	nop
 800dfaa:	e004      	b.n	800dfb6 <put_fat+0x224>
			if (res != FR_OK) break;
 800dfac:	bf00      	nop
 800dfae:	e002      	b.n	800dfb6 <put_fat+0x224>
			if (res != FR_OK) break;
 800dfb0:	bf00      	nop
 800dfb2:	e000      	b.n	800dfb6 <put_fat+0x224>
			if (res != FR_OK) break;
 800dfb4:	bf00      	nop
		}
	}
	return res;
 800dfb6:	7ffb      	ldrb	r3, [r7, #31]
}
 800dfb8:	4618      	mov	r0, r3
 800dfba:	3724      	adds	r7, #36	; 0x24
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	bd90      	pop	{r4, r7, pc}

0800dfc0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b088      	sub	sp, #32
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	60f8      	str	r0, [r7, #12]
 800dfc8:	60b9      	str	r1, [r7, #8]
 800dfca:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800dfcc:	2300      	movs	r3, #0
 800dfce:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800dfd6:	68bb      	ldr	r3, [r7, #8]
 800dfd8:	2b01      	cmp	r3, #1
 800dfda:	d904      	bls.n	800dfe6 <remove_chain+0x26>
 800dfdc:	69bb      	ldr	r3, [r7, #24]
 800dfde:	6a1b      	ldr	r3, [r3, #32]
 800dfe0:	68ba      	ldr	r2, [r7, #8]
 800dfe2:	429a      	cmp	r2, r3
 800dfe4:	d301      	bcc.n	800dfea <remove_chain+0x2a>
 800dfe6:	2302      	movs	r3, #2
 800dfe8:	e04b      	b.n	800e082 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d00c      	beq.n	800e00a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800dff0:	f04f 32ff 	mov.w	r2, #4294967295
 800dff4:	6879      	ldr	r1, [r7, #4]
 800dff6:	69b8      	ldr	r0, [r7, #24]
 800dff8:	f7ff fecb 	bl	800dd92 <put_fat>
 800dffc:	4603      	mov	r3, r0
 800dffe:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800e000:	7ffb      	ldrb	r3, [r7, #31]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d001      	beq.n	800e00a <remove_chain+0x4a>
 800e006:	7ffb      	ldrb	r3, [r7, #31]
 800e008:	e03b      	b.n	800e082 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800e00a:	68b9      	ldr	r1, [r7, #8]
 800e00c:	68f8      	ldr	r0, [r7, #12]
 800e00e:	f7ff fdf0 	bl	800dbf2 <get_fat>
 800e012:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800e014:	697b      	ldr	r3, [r7, #20]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d031      	beq.n	800e07e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e01a:	697b      	ldr	r3, [r7, #20]
 800e01c:	2b01      	cmp	r3, #1
 800e01e:	d101      	bne.n	800e024 <remove_chain+0x64>
 800e020:	2302      	movs	r3, #2
 800e022:	e02e      	b.n	800e082 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e024:	697b      	ldr	r3, [r7, #20]
 800e026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e02a:	d101      	bne.n	800e030 <remove_chain+0x70>
 800e02c:	2301      	movs	r3, #1
 800e02e:	e028      	b.n	800e082 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800e030:	2200      	movs	r2, #0
 800e032:	68b9      	ldr	r1, [r7, #8]
 800e034:	69b8      	ldr	r0, [r7, #24]
 800e036:	f7ff feac 	bl	800dd92 <put_fat>
 800e03a:	4603      	mov	r3, r0
 800e03c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800e03e:	7ffb      	ldrb	r3, [r7, #31]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d001      	beq.n	800e048 <remove_chain+0x88>
 800e044:	7ffb      	ldrb	r3, [r7, #31]
 800e046:	e01c      	b.n	800e082 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e048:	69bb      	ldr	r3, [r7, #24]
 800e04a:	699a      	ldr	r2, [r3, #24]
 800e04c:	69bb      	ldr	r3, [r7, #24]
 800e04e:	6a1b      	ldr	r3, [r3, #32]
 800e050:	3b02      	subs	r3, #2
 800e052:	429a      	cmp	r2, r3
 800e054:	d20b      	bcs.n	800e06e <remove_chain+0xae>
			fs->free_clst++;
 800e056:	69bb      	ldr	r3, [r7, #24]
 800e058:	699b      	ldr	r3, [r3, #24]
 800e05a:	1c5a      	adds	r2, r3, #1
 800e05c:	69bb      	ldr	r3, [r7, #24]
 800e05e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800e060:	69bb      	ldr	r3, [r7, #24]
 800e062:	791b      	ldrb	r3, [r3, #4]
 800e064:	f043 0301 	orr.w	r3, r3, #1
 800e068:	b2da      	uxtb	r2, r3
 800e06a:	69bb      	ldr	r3, [r7, #24]
 800e06c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800e06e:	697b      	ldr	r3, [r7, #20]
 800e070:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e072:	69bb      	ldr	r3, [r7, #24]
 800e074:	6a1b      	ldr	r3, [r3, #32]
 800e076:	68ba      	ldr	r2, [r7, #8]
 800e078:	429a      	cmp	r2, r3
 800e07a:	d3c6      	bcc.n	800e00a <remove_chain+0x4a>
 800e07c:	e000      	b.n	800e080 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800e07e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800e080:	2300      	movs	r3, #0
}
 800e082:	4618      	mov	r0, r3
 800e084:	3720      	adds	r7, #32
 800e086:	46bd      	mov	sp, r7
 800e088:	bd80      	pop	{r7, pc}

0800e08a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800e08a:	b580      	push	{r7, lr}
 800e08c:	b088      	sub	sp, #32
 800e08e:	af00      	add	r7, sp, #0
 800e090:	6078      	str	r0, [r7, #4]
 800e092:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800e09a:	683b      	ldr	r3, [r7, #0]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d10d      	bne.n	800e0bc <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800e0a0:	693b      	ldr	r3, [r7, #16]
 800e0a2:	695b      	ldr	r3, [r3, #20]
 800e0a4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e0a6:	69bb      	ldr	r3, [r7, #24]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d004      	beq.n	800e0b6 <create_chain+0x2c>
 800e0ac:	693b      	ldr	r3, [r7, #16]
 800e0ae:	6a1b      	ldr	r3, [r3, #32]
 800e0b0:	69ba      	ldr	r2, [r7, #24]
 800e0b2:	429a      	cmp	r2, r3
 800e0b4:	d31b      	bcc.n	800e0ee <create_chain+0x64>
 800e0b6:	2301      	movs	r3, #1
 800e0b8:	61bb      	str	r3, [r7, #24]
 800e0ba:	e018      	b.n	800e0ee <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e0bc:	6839      	ldr	r1, [r7, #0]
 800e0be:	6878      	ldr	r0, [r7, #4]
 800e0c0:	f7ff fd97 	bl	800dbf2 <get_fat>
 800e0c4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	2b01      	cmp	r3, #1
 800e0ca:	d801      	bhi.n	800e0d0 <create_chain+0x46>
 800e0cc:	2301      	movs	r3, #1
 800e0ce:	e070      	b.n	800e1b2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0d6:	d101      	bne.n	800e0dc <create_chain+0x52>
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	e06a      	b.n	800e1b2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800e0dc:	693b      	ldr	r3, [r7, #16]
 800e0de:	6a1b      	ldr	r3, [r3, #32]
 800e0e0:	68fa      	ldr	r2, [r7, #12]
 800e0e2:	429a      	cmp	r2, r3
 800e0e4:	d201      	bcs.n	800e0ea <create_chain+0x60>
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	e063      	b.n	800e1b2 <create_chain+0x128>
		scl = clst;
 800e0ea:	683b      	ldr	r3, [r7, #0]
 800e0ec:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800e0ee:	69bb      	ldr	r3, [r7, #24]
 800e0f0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800e0f2:	69fb      	ldr	r3, [r7, #28]
 800e0f4:	3301      	adds	r3, #1
 800e0f6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e0f8:	693b      	ldr	r3, [r7, #16]
 800e0fa:	6a1b      	ldr	r3, [r3, #32]
 800e0fc:	69fa      	ldr	r2, [r7, #28]
 800e0fe:	429a      	cmp	r2, r3
 800e100:	d307      	bcc.n	800e112 <create_chain+0x88>
				ncl = 2;
 800e102:	2302      	movs	r3, #2
 800e104:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800e106:	69fa      	ldr	r2, [r7, #28]
 800e108:	69bb      	ldr	r3, [r7, #24]
 800e10a:	429a      	cmp	r2, r3
 800e10c:	d901      	bls.n	800e112 <create_chain+0x88>
 800e10e:	2300      	movs	r3, #0
 800e110:	e04f      	b.n	800e1b2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e112:	69f9      	ldr	r1, [r7, #28]
 800e114:	6878      	ldr	r0, [r7, #4]
 800e116:	f7ff fd6c 	bl	800dbf2 <get_fat>
 800e11a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d00e      	beq.n	800e140 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	2b01      	cmp	r3, #1
 800e126:	d003      	beq.n	800e130 <create_chain+0xa6>
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e12e:	d101      	bne.n	800e134 <create_chain+0xaa>
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	e03e      	b.n	800e1b2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800e134:	69fa      	ldr	r2, [r7, #28]
 800e136:	69bb      	ldr	r3, [r7, #24]
 800e138:	429a      	cmp	r2, r3
 800e13a:	d1da      	bne.n	800e0f2 <create_chain+0x68>
 800e13c:	2300      	movs	r3, #0
 800e13e:	e038      	b.n	800e1b2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800e140:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800e142:	f04f 32ff 	mov.w	r2, #4294967295
 800e146:	69f9      	ldr	r1, [r7, #28]
 800e148:	6938      	ldr	r0, [r7, #16]
 800e14a:	f7ff fe22 	bl	800dd92 <put_fat>
 800e14e:	4603      	mov	r3, r0
 800e150:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800e152:	7dfb      	ldrb	r3, [r7, #23]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d109      	bne.n	800e16c <create_chain+0xe2>
 800e158:	683b      	ldr	r3, [r7, #0]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d006      	beq.n	800e16c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800e15e:	69fa      	ldr	r2, [r7, #28]
 800e160:	6839      	ldr	r1, [r7, #0]
 800e162:	6938      	ldr	r0, [r7, #16]
 800e164:	f7ff fe15 	bl	800dd92 <put_fat>
 800e168:	4603      	mov	r3, r0
 800e16a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800e16c:	7dfb      	ldrb	r3, [r7, #23]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d116      	bne.n	800e1a0 <create_chain+0x116>
		fs->last_clst = ncl;
 800e172:	693b      	ldr	r3, [r7, #16]
 800e174:	69fa      	ldr	r2, [r7, #28]
 800e176:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e178:	693b      	ldr	r3, [r7, #16]
 800e17a:	699a      	ldr	r2, [r3, #24]
 800e17c:	693b      	ldr	r3, [r7, #16]
 800e17e:	6a1b      	ldr	r3, [r3, #32]
 800e180:	3b02      	subs	r3, #2
 800e182:	429a      	cmp	r2, r3
 800e184:	d804      	bhi.n	800e190 <create_chain+0x106>
 800e186:	693b      	ldr	r3, [r7, #16]
 800e188:	699b      	ldr	r3, [r3, #24]
 800e18a:	1e5a      	subs	r2, r3, #1
 800e18c:	693b      	ldr	r3, [r7, #16]
 800e18e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800e190:	693b      	ldr	r3, [r7, #16]
 800e192:	791b      	ldrb	r3, [r3, #4]
 800e194:	f043 0301 	orr.w	r3, r3, #1
 800e198:	b2da      	uxtb	r2, r3
 800e19a:	693b      	ldr	r3, [r7, #16]
 800e19c:	711a      	strb	r2, [r3, #4]
 800e19e:	e007      	b.n	800e1b0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e1a0:	7dfb      	ldrb	r3, [r7, #23]
 800e1a2:	2b01      	cmp	r3, #1
 800e1a4:	d102      	bne.n	800e1ac <create_chain+0x122>
 800e1a6:	f04f 33ff 	mov.w	r3, #4294967295
 800e1aa:	e000      	b.n	800e1ae <create_chain+0x124>
 800e1ac:	2301      	movs	r3, #1
 800e1ae:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800e1b0:	69fb      	ldr	r3, [r7, #28]
}
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	3720      	adds	r7, #32
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	bd80      	pop	{r7, pc}

0800e1ba <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800e1ba:	b480      	push	{r7}
 800e1bc:	b087      	sub	sp, #28
 800e1be:	af00      	add	r7, sp, #0
 800e1c0:	6078      	str	r0, [r7, #4]
 800e1c2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1ce:	3304      	adds	r3, #4
 800e1d0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	899b      	ldrh	r3, [r3, #12]
 800e1d6:	461a      	mov	r2, r3
 800e1d8:	683b      	ldr	r3, [r7, #0]
 800e1da:	fbb3 f3f2 	udiv	r3, r3, r2
 800e1de:	68fa      	ldr	r2, [r7, #12]
 800e1e0:	8952      	ldrh	r2, [r2, #10]
 800e1e2:	fbb3 f3f2 	udiv	r3, r3, r2
 800e1e6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e1e8:	693b      	ldr	r3, [r7, #16]
 800e1ea:	1d1a      	adds	r2, r3, #4
 800e1ec:	613a      	str	r2, [r7, #16]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e1f2:	68bb      	ldr	r3, [r7, #8]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d101      	bne.n	800e1fc <clmt_clust+0x42>
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	e010      	b.n	800e21e <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800e1fc:	697a      	ldr	r2, [r7, #20]
 800e1fe:	68bb      	ldr	r3, [r7, #8]
 800e200:	429a      	cmp	r2, r3
 800e202:	d307      	bcc.n	800e214 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800e204:	697a      	ldr	r2, [r7, #20]
 800e206:	68bb      	ldr	r3, [r7, #8]
 800e208:	1ad3      	subs	r3, r2, r3
 800e20a:	617b      	str	r3, [r7, #20]
 800e20c:	693b      	ldr	r3, [r7, #16]
 800e20e:	3304      	adds	r3, #4
 800e210:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e212:	e7e9      	b.n	800e1e8 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800e214:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e216:	693b      	ldr	r3, [r7, #16]
 800e218:	681a      	ldr	r2, [r3, #0]
 800e21a:	697b      	ldr	r3, [r7, #20]
 800e21c:	4413      	add	r3, r2
}
 800e21e:	4618      	mov	r0, r3
 800e220:	371c      	adds	r7, #28
 800e222:	46bd      	mov	sp, r7
 800e224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e228:	4770      	bx	lr

0800e22a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e22a:	b580      	push	{r7, lr}
 800e22c:	b086      	sub	sp, #24
 800e22e:	af00      	add	r7, sp, #0
 800e230:	6078      	str	r0, [r7, #4]
 800e232:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e23a:	683b      	ldr	r3, [r7, #0]
 800e23c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e240:	d204      	bcs.n	800e24c <dir_sdi+0x22>
 800e242:	683b      	ldr	r3, [r7, #0]
 800e244:	f003 031f 	and.w	r3, r3, #31
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d001      	beq.n	800e250 <dir_sdi+0x26>
		return FR_INT_ERR;
 800e24c:	2302      	movs	r3, #2
 800e24e:	e071      	b.n	800e334 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	683a      	ldr	r2, [r7, #0]
 800e254:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	689b      	ldr	r3, [r3, #8]
 800e25a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e25c:	697b      	ldr	r3, [r7, #20]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d106      	bne.n	800e270 <dir_sdi+0x46>
 800e262:	693b      	ldr	r3, [r7, #16]
 800e264:	781b      	ldrb	r3, [r3, #0]
 800e266:	2b02      	cmp	r3, #2
 800e268:	d902      	bls.n	800e270 <dir_sdi+0x46>
		clst = fs->dirbase;
 800e26a:	693b      	ldr	r3, [r7, #16]
 800e26c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e26e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e270:	697b      	ldr	r3, [r7, #20]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d10c      	bne.n	800e290 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e276:	683b      	ldr	r3, [r7, #0]
 800e278:	095b      	lsrs	r3, r3, #5
 800e27a:	693a      	ldr	r2, [r7, #16]
 800e27c:	8912      	ldrh	r2, [r2, #8]
 800e27e:	4293      	cmp	r3, r2
 800e280:	d301      	bcc.n	800e286 <dir_sdi+0x5c>
 800e282:	2302      	movs	r3, #2
 800e284:	e056      	b.n	800e334 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800e286:	693b      	ldr	r3, [r7, #16]
 800e288:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	61da      	str	r2, [r3, #28]
 800e28e:	e02d      	b.n	800e2ec <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e290:	693b      	ldr	r3, [r7, #16]
 800e292:	895b      	ldrh	r3, [r3, #10]
 800e294:	461a      	mov	r2, r3
 800e296:	693b      	ldr	r3, [r7, #16]
 800e298:	899b      	ldrh	r3, [r3, #12]
 800e29a:	fb03 f302 	mul.w	r3, r3, r2
 800e29e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e2a0:	e019      	b.n	800e2d6 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	6979      	ldr	r1, [r7, #20]
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	f7ff fca3 	bl	800dbf2 <get_fat>
 800e2ac:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e2ae:	697b      	ldr	r3, [r7, #20]
 800e2b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2b4:	d101      	bne.n	800e2ba <dir_sdi+0x90>
 800e2b6:	2301      	movs	r3, #1
 800e2b8:	e03c      	b.n	800e334 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e2ba:	697b      	ldr	r3, [r7, #20]
 800e2bc:	2b01      	cmp	r3, #1
 800e2be:	d904      	bls.n	800e2ca <dir_sdi+0xa0>
 800e2c0:	693b      	ldr	r3, [r7, #16]
 800e2c2:	6a1b      	ldr	r3, [r3, #32]
 800e2c4:	697a      	ldr	r2, [r7, #20]
 800e2c6:	429a      	cmp	r2, r3
 800e2c8:	d301      	bcc.n	800e2ce <dir_sdi+0xa4>
 800e2ca:	2302      	movs	r3, #2
 800e2cc:	e032      	b.n	800e334 <dir_sdi+0x10a>
			ofs -= csz;
 800e2ce:	683a      	ldr	r2, [r7, #0]
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	1ad3      	subs	r3, r2, r3
 800e2d4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e2d6:	683a      	ldr	r2, [r7, #0]
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	429a      	cmp	r2, r3
 800e2dc:	d2e1      	bcs.n	800e2a2 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800e2de:	6979      	ldr	r1, [r7, #20]
 800e2e0:	6938      	ldr	r0, [r7, #16]
 800e2e2:	f7ff fc67 	bl	800dbb4 <clust2sect>
 800e2e6:	4602      	mov	r2, r0
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	697a      	ldr	r2, [r7, #20]
 800e2f0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	69db      	ldr	r3, [r3, #28]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d101      	bne.n	800e2fe <dir_sdi+0xd4>
 800e2fa:	2302      	movs	r3, #2
 800e2fc:	e01a      	b.n	800e334 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	69da      	ldr	r2, [r3, #28]
 800e302:	693b      	ldr	r3, [r7, #16]
 800e304:	899b      	ldrh	r3, [r3, #12]
 800e306:	4619      	mov	r1, r3
 800e308:	683b      	ldr	r3, [r7, #0]
 800e30a:	fbb3 f3f1 	udiv	r3, r3, r1
 800e30e:	441a      	add	r2, r3
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e314:	693b      	ldr	r3, [r7, #16]
 800e316:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e31a:	693b      	ldr	r3, [r7, #16]
 800e31c:	899b      	ldrh	r3, [r3, #12]
 800e31e:	461a      	mov	r2, r3
 800e320:	683b      	ldr	r3, [r7, #0]
 800e322:	fbb3 f0f2 	udiv	r0, r3, r2
 800e326:	fb02 f200 	mul.w	r2, r2, r0
 800e32a:	1a9b      	subs	r3, r3, r2
 800e32c:	18ca      	adds	r2, r1, r3
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e332:	2300      	movs	r3, #0
}
 800e334:	4618      	mov	r0, r3
 800e336:	3718      	adds	r7, #24
 800e338:	46bd      	mov	sp, r7
 800e33a:	bd80      	pop	{r7, pc}

0800e33c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b086      	sub	sp, #24
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
 800e344:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	695b      	ldr	r3, [r3, #20]
 800e350:	3320      	adds	r3, #32
 800e352:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	69db      	ldr	r3, [r3, #28]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d003      	beq.n	800e364 <dir_next+0x28>
 800e35c:	68bb      	ldr	r3, [r7, #8]
 800e35e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e362:	d301      	bcc.n	800e368 <dir_next+0x2c>
 800e364:	2304      	movs	r3, #4
 800e366:	e0bb      	b.n	800e4e0 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	899b      	ldrh	r3, [r3, #12]
 800e36c:	461a      	mov	r2, r3
 800e36e:	68bb      	ldr	r3, [r7, #8]
 800e370:	fbb3 f1f2 	udiv	r1, r3, r2
 800e374:	fb02 f201 	mul.w	r2, r2, r1
 800e378:	1a9b      	subs	r3, r3, r2
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	f040 809d 	bne.w	800e4ba <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	69db      	ldr	r3, [r3, #28]
 800e384:	1c5a      	adds	r2, r3, #1
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	699b      	ldr	r3, [r3, #24]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d10b      	bne.n	800e3aa <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e392:	68bb      	ldr	r3, [r7, #8]
 800e394:	095b      	lsrs	r3, r3, #5
 800e396:	68fa      	ldr	r2, [r7, #12]
 800e398:	8912      	ldrh	r2, [r2, #8]
 800e39a:	4293      	cmp	r3, r2
 800e39c:	f0c0 808d 	bcc.w	800e4ba <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	61da      	str	r2, [r3, #28]
 800e3a6:	2304      	movs	r3, #4
 800e3a8:	e09a      	b.n	800e4e0 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	899b      	ldrh	r3, [r3, #12]
 800e3ae:	461a      	mov	r2, r3
 800e3b0:	68bb      	ldr	r3, [r7, #8]
 800e3b2:	fbb3 f3f2 	udiv	r3, r3, r2
 800e3b6:	68fa      	ldr	r2, [r7, #12]
 800e3b8:	8952      	ldrh	r2, [r2, #10]
 800e3ba:	3a01      	subs	r2, #1
 800e3bc:	4013      	ands	r3, r2
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d17b      	bne.n	800e4ba <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e3c2:	687a      	ldr	r2, [r7, #4]
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	699b      	ldr	r3, [r3, #24]
 800e3c8:	4619      	mov	r1, r3
 800e3ca:	4610      	mov	r0, r2
 800e3cc:	f7ff fc11 	bl	800dbf2 <get_fat>
 800e3d0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e3d2:	697b      	ldr	r3, [r7, #20]
 800e3d4:	2b01      	cmp	r3, #1
 800e3d6:	d801      	bhi.n	800e3dc <dir_next+0xa0>
 800e3d8:	2302      	movs	r3, #2
 800e3da:	e081      	b.n	800e4e0 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e3dc:	697b      	ldr	r3, [r7, #20]
 800e3de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3e2:	d101      	bne.n	800e3e8 <dir_next+0xac>
 800e3e4:	2301      	movs	r3, #1
 800e3e6:	e07b      	b.n	800e4e0 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	6a1b      	ldr	r3, [r3, #32]
 800e3ec:	697a      	ldr	r2, [r7, #20]
 800e3ee:	429a      	cmp	r2, r3
 800e3f0:	d359      	bcc.n	800e4a6 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e3f2:	683b      	ldr	r3, [r7, #0]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d104      	bne.n	800e402 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	61da      	str	r2, [r3, #28]
 800e3fe:	2304      	movs	r3, #4
 800e400:	e06e      	b.n	800e4e0 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e402:	687a      	ldr	r2, [r7, #4]
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	699b      	ldr	r3, [r3, #24]
 800e408:	4619      	mov	r1, r3
 800e40a:	4610      	mov	r0, r2
 800e40c:	f7ff fe3d 	bl	800e08a <create_chain>
 800e410:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e412:	697b      	ldr	r3, [r7, #20]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d101      	bne.n	800e41c <dir_next+0xe0>
 800e418:	2307      	movs	r3, #7
 800e41a:	e061      	b.n	800e4e0 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e41c:	697b      	ldr	r3, [r7, #20]
 800e41e:	2b01      	cmp	r3, #1
 800e420:	d101      	bne.n	800e426 <dir_next+0xea>
 800e422:	2302      	movs	r3, #2
 800e424:	e05c      	b.n	800e4e0 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e426:	697b      	ldr	r3, [r7, #20]
 800e428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e42c:	d101      	bne.n	800e432 <dir_next+0xf6>
 800e42e:	2301      	movs	r3, #1
 800e430:	e056      	b.n	800e4e0 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e432:	68f8      	ldr	r0, [r7, #12]
 800e434:	f7ff fadc 	bl	800d9f0 <sync_window>
 800e438:	4603      	mov	r3, r0
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d001      	beq.n	800e442 <dir_next+0x106>
 800e43e:	2301      	movs	r3, #1
 800e440:	e04e      	b.n	800e4e0 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	899b      	ldrh	r3, [r3, #12]
 800e44c:	461a      	mov	r2, r3
 800e44e:	2100      	movs	r1, #0
 800e450:	f7ff f905 	bl	800d65e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e454:	2300      	movs	r3, #0
 800e456:	613b      	str	r3, [r7, #16]
 800e458:	6979      	ldr	r1, [r7, #20]
 800e45a:	68f8      	ldr	r0, [r7, #12]
 800e45c:	f7ff fbaa 	bl	800dbb4 <clust2sect>
 800e460:	4602      	mov	r2, r0
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	639a      	str	r2, [r3, #56]	; 0x38
 800e466:	e012      	b.n	800e48e <dir_next+0x152>
						fs->wflag = 1;
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	2201      	movs	r2, #1
 800e46c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e46e:	68f8      	ldr	r0, [r7, #12]
 800e470:	f7ff fabe 	bl	800d9f0 <sync_window>
 800e474:	4603      	mov	r3, r0
 800e476:	2b00      	cmp	r3, #0
 800e478:	d001      	beq.n	800e47e <dir_next+0x142>
 800e47a:	2301      	movs	r3, #1
 800e47c:	e030      	b.n	800e4e0 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e47e:	693b      	ldr	r3, [r7, #16]
 800e480:	3301      	adds	r3, #1
 800e482:	613b      	str	r3, [r7, #16]
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e488:	1c5a      	adds	r2, r3, #1
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	639a      	str	r2, [r3, #56]	; 0x38
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	895b      	ldrh	r3, [r3, #10]
 800e492:	461a      	mov	r2, r3
 800e494:	693b      	ldr	r3, [r7, #16]
 800e496:	4293      	cmp	r3, r2
 800e498:	d3e6      	bcc.n	800e468 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e49e:	693b      	ldr	r3, [r7, #16]
 800e4a0:	1ad2      	subs	r2, r2, r3
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	697a      	ldr	r2, [r7, #20]
 800e4aa:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800e4ac:	6979      	ldr	r1, [r7, #20]
 800e4ae:	68f8      	ldr	r0, [r7, #12]
 800e4b0:	f7ff fb80 	bl	800dbb4 <clust2sect>
 800e4b4:	4602      	mov	r2, r0
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	68ba      	ldr	r2, [r7, #8]
 800e4be:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	899b      	ldrh	r3, [r3, #12]
 800e4ca:	461a      	mov	r2, r3
 800e4cc:	68bb      	ldr	r3, [r7, #8]
 800e4ce:	fbb3 f0f2 	udiv	r0, r3, r2
 800e4d2:	fb02 f200 	mul.w	r2, r2, r0
 800e4d6:	1a9b      	subs	r3, r3, r2
 800e4d8:	18ca      	adds	r2, r1, r3
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e4de:	2300      	movs	r3, #0
}
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	3718      	adds	r7, #24
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	bd80      	pop	{r7, pc}

0800e4e8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b086      	sub	sp, #24
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
 800e4f0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e4f8:	2100      	movs	r1, #0
 800e4fa:	6878      	ldr	r0, [r7, #4]
 800e4fc:	f7ff fe95 	bl	800e22a <dir_sdi>
 800e500:	4603      	mov	r3, r0
 800e502:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e504:	7dfb      	ldrb	r3, [r7, #23]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d12b      	bne.n	800e562 <dir_alloc+0x7a>
		n = 0;
 800e50a:	2300      	movs	r3, #0
 800e50c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	69db      	ldr	r3, [r3, #28]
 800e512:	4619      	mov	r1, r3
 800e514:	68f8      	ldr	r0, [r7, #12]
 800e516:	f7ff faaf 	bl	800da78 <move_window>
 800e51a:	4603      	mov	r3, r0
 800e51c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e51e:	7dfb      	ldrb	r3, [r7, #23]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d11d      	bne.n	800e560 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	6a1b      	ldr	r3, [r3, #32]
 800e528:	781b      	ldrb	r3, [r3, #0]
 800e52a:	2be5      	cmp	r3, #229	; 0xe5
 800e52c:	d004      	beq.n	800e538 <dir_alloc+0x50>
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	6a1b      	ldr	r3, [r3, #32]
 800e532:	781b      	ldrb	r3, [r3, #0]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d107      	bne.n	800e548 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e538:	693b      	ldr	r3, [r7, #16]
 800e53a:	3301      	adds	r3, #1
 800e53c:	613b      	str	r3, [r7, #16]
 800e53e:	693a      	ldr	r2, [r7, #16]
 800e540:	683b      	ldr	r3, [r7, #0]
 800e542:	429a      	cmp	r2, r3
 800e544:	d102      	bne.n	800e54c <dir_alloc+0x64>
 800e546:	e00c      	b.n	800e562 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e548:	2300      	movs	r3, #0
 800e54a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e54c:	2101      	movs	r1, #1
 800e54e:	6878      	ldr	r0, [r7, #4]
 800e550:	f7ff fef4 	bl	800e33c <dir_next>
 800e554:	4603      	mov	r3, r0
 800e556:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e558:	7dfb      	ldrb	r3, [r7, #23]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d0d7      	beq.n	800e50e <dir_alloc+0x26>
 800e55e:	e000      	b.n	800e562 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e560:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e562:	7dfb      	ldrb	r3, [r7, #23]
 800e564:	2b04      	cmp	r3, #4
 800e566:	d101      	bne.n	800e56c <dir_alloc+0x84>
 800e568:	2307      	movs	r3, #7
 800e56a:	75fb      	strb	r3, [r7, #23]
	return res;
 800e56c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e56e:	4618      	mov	r0, r3
 800e570:	3718      	adds	r7, #24
 800e572:	46bd      	mov	sp, r7
 800e574:	bd80      	pop	{r7, pc}

0800e576 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e576:	b580      	push	{r7, lr}
 800e578:	b084      	sub	sp, #16
 800e57a:	af00      	add	r7, sp, #0
 800e57c:	6078      	str	r0, [r7, #4]
 800e57e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e580:	683b      	ldr	r3, [r7, #0]
 800e582:	331a      	adds	r3, #26
 800e584:	4618      	mov	r0, r3
 800e586:	f7fe ffc7 	bl	800d518 <ld_word>
 800e58a:	4603      	mov	r3, r0
 800e58c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	781b      	ldrb	r3, [r3, #0]
 800e592:	2b03      	cmp	r3, #3
 800e594:	d109      	bne.n	800e5aa <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e596:	683b      	ldr	r3, [r7, #0]
 800e598:	3314      	adds	r3, #20
 800e59a:	4618      	mov	r0, r3
 800e59c:	f7fe ffbc 	bl	800d518 <ld_word>
 800e5a0:	4603      	mov	r3, r0
 800e5a2:	041b      	lsls	r3, r3, #16
 800e5a4:	68fa      	ldr	r2, [r7, #12]
 800e5a6:	4313      	orrs	r3, r2
 800e5a8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e5aa:	68fb      	ldr	r3, [r7, #12]
}
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	3710      	adds	r7, #16
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	bd80      	pop	{r7, pc}

0800e5b4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b084      	sub	sp, #16
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	60f8      	str	r0, [r7, #12]
 800e5bc:	60b9      	str	r1, [r7, #8]
 800e5be:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e5c0:	68bb      	ldr	r3, [r7, #8]
 800e5c2:	331a      	adds	r3, #26
 800e5c4:	687a      	ldr	r2, [r7, #4]
 800e5c6:	b292      	uxth	r2, r2
 800e5c8:	4611      	mov	r1, r2
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	f7fe ffdf 	bl	800d58e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	781b      	ldrb	r3, [r3, #0]
 800e5d4:	2b03      	cmp	r3, #3
 800e5d6:	d109      	bne.n	800e5ec <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e5d8:	68bb      	ldr	r3, [r7, #8]
 800e5da:	f103 0214 	add.w	r2, r3, #20
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	0c1b      	lsrs	r3, r3, #16
 800e5e2:	b29b      	uxth	r3, r3
 800e5e4:	4619      	mov	r1, r3
 800e5e6:	4610      	mov	r0, r2
 800e5e8:	f7fe ffd1 	bl	800d58e <st_word>
	}
}
 800e5ec:	bf00      	nop
 800e5ee:	3710      	adds	r7, #16
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	bd80      	pop	{r7, pc}

0800e5f4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800e5f4:	b590      	push	{r4, r7, lr}
 800e5f6:	b087      	sub	sp, #28
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
 800e5fc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800e5fe:	683b      	ldr	r3, [r7, #0]
 800e600:	331a      	adds	r3, #26
 800e602:	4618      	mov	r0, r3
 800e604:	f7fe ff88 	bl	800d518 <ld_word>
 800e608:	4603      	mov	r3, r0
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d001      	beq.n	800e612 <cmp_lfn+0x1e>
 800e60e:	2300      	movs	r3, #0
 800e610:	e059      	b.n	800e6c6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800e612:	683b      	ldr	r3, [r7, #0]
 800e614:	781b      	ldrb	r3, [r3, #0]
 800e616:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e61a:	1e5a      	subs	r2, r3, #1
 800e61c:	4613      	mov	r3, r2
 800e61e:	005b      	lsls	r3, r3, #1
 800e620:	4413      	add	r3, r2
 800e622:	009b      	lsls	r3, r3, #2
 800e624:	4413      	add	r3, r2
 800e626:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e628:	2301      	movs	r3, #1
 800e62a:	81fb      	strh	r3, [r7, #14]
 800e62c:	2300      	movs	r3, #0
 800e62e:	613b      	str	r3, [r7, #16]
 800e630:	e033      	b.n	800e69a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e632:	4a27      	ldr	r2, [pc, #156]	; (800e6d0 <cmp_lfn+0xdc>)
 800e634:	693b      	ldr	r3, [r7, #16]
 800e636:	4413      	add	r3, r2
 800e638:	781b      	ldrb	r3, [r3, #0]
 800e63a:	461a      	mov	r2, r3
 800e63c:	683b      	ldr	r3, [r7, #0]
 800e63e:	4413      	add	r3, r2
 800e640:	4618      	mov	r0, r3
 800e642:	f7fe ff69 	bl	800d518 <ld_word>
 800e646:	4603      	mov	r3, r0
 800e648:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e64a:	89fb      	ldrh	r3, [r7, #14]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d01a      	beq.n	800e686 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800e650:	697b      	ldr	r3, [r7, #20]
 800e652:	2bfe      	cmp	r3, #254	; 0xfe
 800e654:	d812      	bhi.n	800e67c <cmp_lfn+0x88>
 800e656:	89bb      	ldrh	r3, [r7, #12]
 800e658:	4618      	mov	r0, r3
 800e65a:	f002 fd23 	bl	80110a4 <ff_wtoupper>
 800e65e:	4603      	mov	r3, r0
 800e660:	461c      	mov	r4, r3
 800e662:	697b      	ldr	r3, [r7, #20]
 800e664:	1c5a      	adds	r2, r3, #1
 800e666:	617a      	str	r2, [r7, #20]
 800e668:	005b      	lsls	r3, r3, #1
 800e66a:	687a      	ldr	r2, [r7, #4]
 800e66c:	4413      	add	r3, r2
 800e66e:	881b      	ldrh	r3, [r3, #0]
 800e670:	4618      	mov	r0, r3
 800e672:	f002 fd17 	bl	80110a4 <ff_wtoupper>
 800e676:	4603      	mov	r3, r0
 800e678:	429c      	cmp	r4, r3
 800e67a:	d001      	beq.n	800e680 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800e67c:	2300      	movs	r3, #0
 800e67e:	e022      	b.n	800e6c6 <cmp_lfn+0xd2>
			}
			wc = uc;
 800e680:	89bb      	ldrh	r3, [r7, #12]
 800e682:	81fb      	strh	r3, [r7, #14]
 800e684:	e006      	b.n	800e694 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e686:	89bb      	ldrh	r3, [r7, #12]
 800e688:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e68c:	4293      	cmp	r3, r2
 800e68e:	d001      	beq.n	800e694 <cmp_lfn+0xa0>
 800e690:	2300      	movs	r3, #0
 800e692:	e018      	b.n	800e6c6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e694:	693b      	ldr	r3, [r7, #16]
 800e696:	3301      	adds	r3, #1
 800e698:	613b      	str	r3, [r7, #16]
 800e69a:	693b      	ldr	r3, [r7, #16]
 800e69c:	2b0c      	cmp	r3, #12
 800e69e:	d9c8      	bls.n	800e632 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800e6a0:	683b      	ldr	r3, [r7, #0]
 800e6a2:	781b      	ldrb	r3, [r3, #0]
 800e6a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d00b      	beq.n	800e6c4 <cmp_lfn+0xd0>
 800e6ac:	89fb      	ldrh	r3, [r7, #14]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d008      	beq.n	800e6c4 <cmp_lfn+0xd0>
 800e6b2:	697b      	ldr	r3, [r7, #20]
 800e6b4:	005b      	lsls	r3, r3, #1
 800e6b6:	687a      	ldr	r2, [r7, #4]
 800e6b8:	4413      	add	r3, r2
 800e6ba:	881b      	ldrh	r3, [r3, #0]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d001      	beq.n	800e6c4 <cmp_lfn+0xd0>
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	e000      	b.n	800e6c6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800e6c4:	2301      	movs	r3, #1
}
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	371c      	adds	r7, #28
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	bd90      	pop	{r4, r7, pc}
 800e6ce:	bf00      	nop
 800e6d0:	080173a4 	.word	0x080173a4

0800e6d4 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b086      	sub	sp, #24
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
 800e6dc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800e6de:	683b      	ldr	r3, [r7, #0]
 800e6e0:	331a      	adds	r3, #26
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	f7fe ff18 	bl	800d518 <ld_word>
 800e6e8:	4603      	mov	r3, r0
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d001      	beq.n	800e6f2 <pick_lfn+0x1e>
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	e04d      	b.n	800e78e <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800e6f2:	683b      	ldr	r3, [r7, #0]
 800e6f4:	781b      	ldrb	r3, [r3, #0]
 800e6f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e6fa:	1e5a      	subs	r2, r3, #1
 800e6fc:	4613      	mov	r3, r2
 800e6fe:	005b      	lsls	r3, r3, #1
 800e700:	4413      	add	r3, r2
 800e702:	009b      	lsls	r3, r3, #2
 800e704:	4413      	add	r3, r2
 800e706:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e708:	2301      	movs	r3, #1
 800e70a:	81fb      	strh	r3, [r7, #14]
 800e70c:	2300      	movs	r3, #0
 800e70e:	613b      	str	r3, [r7, #16]
 800e710:	e028      	b.n	800e764 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e712:	4a21      	ldr	r2, [pc, #132]	; (800e798 <pick_lfn+0xc4>)
 800e714:	693b      	ldr	r3, [r7, #16]
 800e716:	4413      	add	r3, r2
 800e718:	781b      	ldrb	r3, [r3, #0]
 800e71a:	461a      	mov	r2, r3
 800e71c:	683b      	ldr	r3, [r7, #0]
 800e71e:	4413      	add	r3, r2
 800e720:	4618      	mov	r0, r3
 800e722:	f7fe fef9 	bl	800d518 <ld_word>
 800e726:	4603      	mov	r3, r0
 800e728:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e72a:	89fb      	ldrh	r3, [r7, #14]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d00f      	beq.n	800e750 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800e730:	697b      	ldr	r3, [r7, #20]
 800e732:	2bfe      	cmp	r3, #254	; 0xfe
 800e734:	d901      	bls.n	800e73a <pick_lfn+0x66>
 800e736:	2300      	movs	r3, #0
 800e738:	e029      	b.n	800e78e <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800e73a:	89bb      	ldrh	r3, [r7, #12]
 800e73c:	81fb      	strh	r3, [r7, #14]
 800e73e:	697b      	ldr	r3, [r7, #20]
 800e740:	1c5a      	adds	r2, r3, #1
 800e742:	617a      	str	r2, [r7, #20]
 800e744:	005b      	lsls	r3, r3, #1
 800e746:	687a      	ldr	r2, [r7, #4]
 800e748:	4413      	add	r3, r2
 800e74a:	89fa      	ldrh	r2, [r7, #14]
 800e74c:	801a      	strh	r2, [r3, #0]
 800e74e:	e006      	b.n	800e75e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e750:	89bb      	ldrh	r3, [r7, #12]
 800e752:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e756:	4293      	cmp	r3, r2
 800e758:	d001      	beq.n	800e75e <pick_lfn+0x8a>
 800e75a:	2300      	movs	r3, #0
 800e75c:	e017      	b.n	800e78e <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e75e:	693b      	ldr	r3, [r7, #16]
 800e760:	3301      	adds	r3, #1
 800e762:	613b      	str	r3, [r7, #16]
 800e764:	693b      	ldr	r3, [r7, #16]
 800e766:	2b0c      	cmp	r3, #12
 800e768:	d9d3      	bls.n	800e712 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800e76a:	683b      	ldr	r3, [r7, #0]
 800e76c:	781b      	ldrb	r3, [r3, #0]
 800e76e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e772:	2b00      	cmp	r3, #0
 800e774:	d00a      	beq.n	800e78c <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800e776:	697b      	ldr	r3, [r7, #20]
 800e778:	2bfe      	cmp	r3, #254	; 0xfe
 800e77a:	d901      	bls.n	800e780 <pick_lfn+0xac>
 800e77c:	2300      	movs	r3, #0
 800e77e:	e006      	b.n	800e78e <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800e780:	697b      	ldr	r3, [r7, #20]
 800e782:	005b      	lsls	r3, r3, #1
 800e784:	687a      	ldr	r2, [r7, #4]
 800e786:	4413      	add	r3, r2
 800e788:	2200      	movs	r2, #0
 800e78a:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800e78c:	2301      	movs	r3, #1
}
 800e78e:	4618      	mov	r0, r3
 800e790:	3718      	adds	r7, #24
 800e792:	46bd      	mov	sp, r7
 800e794:	bd80      	pop	{r7, pc}
 800e796:	bf00      	nop
 800e798:	080173a4 	.word	0x080173a4

0800e79c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800e79c:	b580      	push	{r7, lr}
 800e79e:	b088      	sub	sp, #32
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	60f8      	str	r0, [r7, #12]
 800e7a4:	60b9      	str	r1, [r7, #8]
 800e7a6:	4611      	mov	r1, r2
 800e7a8:	461a      	mov	r2, r3
 800e7aa:	460b      	mov	r3, r1
 800e7ac:	71fb      	strb	r3, [r7, #7]
 800e7ae:	4613      	mov	r3, r2
 800e7b0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800e7b2:	68bb      	ldr	r3, [r7, #8]
 800e7b4:	330d      	adds	r3, #13
 800e7b6:	79ba      	ldrb	r2, [r7, #6]
 800e7b8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800e7ba:	68bb      	ldr	r3, [r7, #8]
 800e7bc:	330b      	adds	r3, #11
 800e7be:	220f      	movs	r2, #15
 800e7c0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800e7c2:	68bb      	ldr	r3, [r7, #8]
 800e7c4:	330c      	adds	r3, #12
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800e7ca:	68bb      	ldr	r3, [r7, #8]
 800e7cc:	331a      	adds	r3, #26
 800e7ce:	2100      	movs	r1, #0
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	f7fe fedc 	bl	800d58e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800e7d6:	79fb      	ldrb	r3, [r7, #7]
 800e7d8:	1e5a      	subs	r2, r3, #1
 800e7da:	4613      	mov	r3, r2
 800e7dc:	005b      	lsls	r3, r3, #1
 800e7de:	4413      	add	r3, r2
 800e7e0:	009b      	lsls	r3, r3, #2
 800e7e2:	4413      	add	r3, r2
 800e7e4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	82fb      	strh	r3, [r7, #22]
 800e7ea:	2300      	movs	r3, #0
 800e7ec:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800e7ee:	8afb      	ldrh	r3, [r7, #22]
 800e7f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e7f4:	4293      	cmp	r3, r2
 800e7f6:	d007      	beq.n	800e808 <put_lfn+0x6c>
 800e7f8:	69fb      	ldr	r3, [r7, #28]
 800e7fa:	1c5a      	adds	r2, r3, #1
 800e7fc:	61fa      	str	r2, [r7, #28]
 800e7fe:	005b      	lsls	r3, r3, #1
 800e800:	68fa      	ldr	r2, [r7, #12]
 800e802:	4413      	add	r3, r2
 800e804:	881b      	ldrh	r3, [r3, #0]
 800e806:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800e808:	4a17      	ldr	r2, [pc, #92]	; (800e868 <put_lfn+0xcc>)
 800e80a:	69bb      	ldr	r3, [r7, #24]
 800e80c:	4413      	add	r3, r2
 800e80e:	781b      	ldrb	r3, [r3, #0]
 800e810:	461a      	mov	r2, r3
 800e812:	68bb      	ldr	r3, [r7, #8]
 800e814:	4413      	add	r3, r2
 800e816:	8afa      	ldrh	r2, [r7, #22]
 800e818:	4611      	mov	r1, r2
 800e81a:	4618      	mov	r0, r3
 800e81c:	f7fe feb7 	bl	800d58e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e820:	8afb      	ldrh	r3, [r7, #22]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d102      	bne.n	800e82c <put_lfn+0x90>
 800e826:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e82a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800e82c:	69bb      	ldr	r3, [r7, #24]
 800e82e:	3301      	adds	r3, #1
 800e830:	61bb      	str	r3, [r7, #24]
 800e832:	69bb      	ldr	r3, [r7, #24]
 800e834:	2b0c      	cmp	r3, #12
 800e836:	d9da      	bls.n	800e7ee <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800e838:	8afb      	ldrh	r3, [r7, #22]
 800e83a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e83e:	4293      	cmp	r3, r2
 800e840:	d006      	beq.n	800e850 <put_lfn+0xb4>
 800e842:	69fb      	ldr	r3, [r7, #28]
 800e844:	005b      	lsls	r3, r3, #1
 800e846:	68fa      	ldr	r2, [r7, #12]
 800e848:	4413      	add	r3, r2
 800e84a:	881b      	ldrh	r3, [r3, #0]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d103      	bne.n	800e858 <put_lfn+0xbc>
 800e850:	79fb      	ldrb	r3, [r7, #7]
 800e852:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e856:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800e858:	68bb      	ldr	r3, [r7, #8]
 800e85a:	79fa      	ldrb	r2, [r7, #7]
 800e85c:	701a      	strb	r2, [r3, #0]
}
 800e85e:	bf00      	nop
 800e860:	3720      	adds	r7, #32
 800e862:	46bd      	mov	sp, r7
 800e864:	bd80      	pop	{r7, pc}
 800e866:	bf00      	nop
 800e868:	080173a4 	.word	0x080173a4

0800e86c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b08c      	sub	sp, #48	; 0x30
 800e870:	af00      	add	r7, sp, #0
 800e872:	60f8      	str	r0, [r7, #12]
 800e874:	60b9      	str	r1, [r7, #8]
 800e876:	607a      	str	r2, [r7, #4]
 800e878:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800e87a:	220b      	movs	r2, #11
 800e87c:	68b9      	ldr	r1, [r7, #8]
 800e87e:	68f8      	ldr	r0, [r7, #12]
 800e880:	f7fe fecc 	bl	800d61c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800e884:	683b      	ldr	r3, [r7, #0]
 800e886:	2b05      	cmp	r3, #5
 800e888:	d92b      	bls.n	800e8e2 <gen_numname+0x76>
		sr = seq;
 800e88a:	683b      	ldr	r3, [r7, #0]
 800e88c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800e88e:	e022      	b.n	800e8d6 <gen_numname+0x6a>
			wc = *lfn++;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	1c9a      	adds	r2, r3, #2
 800e894:	607a      	str	r2, [r7, #4]
 800e896:	881b      	ldrh	r3, [r3, #0]
 800e898:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800e89a:	2300      	movs	r3, #0
 800e89c:	62bb      	str	r3, [r7, #40]	; 0x28
 800e89e:	e017      	b.n	800e8d0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800e8a0:	69fb      	ldr	r3, [r7, #28]
 800e8a2:	005a      	lsls	r2, r3, #1
 800e8a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e8a6:	f003 0301 	and.w	r3, r3, #1
 800e8aa:	4413      	add	r3, r2
 800e8ac:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800e8ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e8b0:	085b      	lsrs	r3, r3, #1
 800e8b2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800e8b4:	69fb      	ldr	r3, [r7, #28]
 800e8b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d005      	beq.n	800e8ca <gen_numname+0x5e>
 800e8be:	69fb      	ldr	r3, [r7, #28]
 800e8c0:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800e8c4:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800e8c8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800e8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8cc:	3301      	adds	r3, #1
 800e8ce:	62bb      	str	r3, [r7, #40]	; 0x28
 800e8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8d2:	2b0f      	cmp	r3, #15
 800e8d4:	d9e4      	bls.n	800e8a0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	881b      	ldrh	r3, [r3, #0]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d1d8      	bne.n	800e890 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800e8de:	69fb      	ldr	r3, [r7, #28]
 800e8e0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800e8e2:	2307      	movs	r3, #7
 800e8e4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800e8e6:	683b      	ldr	r3, [r7, #0]
 800e8e8:	b2db      	uxtb	r3, r3
 800e8ea:	f003 030f 	and.w	r3, r3, #15
 800e8ee:	b2db      	uxtb	r3, r3
 800e8f0:	3330      	adds	r3, #48	; 0x30
 800e8f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800e8f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e8fa:	2b39      	cmp	r3, #57	; 0x39
 800e8fc:	d904      	bls.n	800e908 <gen_numname+0x9c>
 800e8fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e902:	3307      	adds	r3, #7
 800e904:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800e908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e90a:	1e5a      	subs	r2, r3, #1
 800e90c:	62ba      	str	r2, [r7, #40]	; 0x28
 800e90e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e912:	4413      	add	r3, r2
 800e914:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e918:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	091b      	lsrs	r3, r3, #4
 800e920:	603b      	str	r3, [r7, #0]
	} while (seq);
 800e922:	683b      	ldr	r3, [r7, #0]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d1de      	bne.n	800e8e6 <gen_numname+0x7a>
	ns[i] = '~';
 800e928:	f107 0214 	add.w	r2, r7, #20
 800e92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e92e:	4413      	add	r3, r2
 800e930:	227e      	movs	r2, #126	; 0x7e
 800e932:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800e934:	2300      	movs	r3, #0
 800e936:	627b      	str	r3, [r7, #36]	; 0x24
 800e938:	e002      	b.n	800e940 <gen_numname+0xd4>
 800e93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e93c:	3301      	adds	r3, #1
 800e93e:	627b      	str	r3, [r7, #36]	; 0x24
 800e940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e944:	429a      	cmp	r2, r3
 800e946:	d205      	bcs.n	800e954 <gen_numname+0xe8>
 800e948:	68fa      	ldr	r2, [r7, #12]
 800e94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e94c:	4413      	add	r3, r2
 800e94e:	781b      	ldrb	r3, [r3, #0]
 800e950:	2b20      	cmp	r3, #32
 800e952:	d1f2      	bne.n	800e93a <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e956:	2b07      	cmp	r3, #7
 800e958:	d808      	bhi.n	800e96c <gen_numname+0x100>
 800e95a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e95c:	1c5a      	adds	r2, r3, #1
 800e95e:	62ba      	str	r2, [r7, #40]	; 0x28
 800e960:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e964:	4413      	add	r3, r2
 800e966:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800e96a:	e000      	b.n	800e96e <gen_numname+0x102>
 800e96c:	2120      	movs	r1, #32
 800e96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e970:	1c5a      	adds	r2, r3, #1
 800e972:	627a      	str	r2, [r7, #36]	; 0x24
 800e974:	68fa      	ldr	r2, [r7, #12]
 800e976:	4413      	add	r3, r2
 800e978:	460a      	mov	r2, r1
 800e97a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800e97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e97e:	2b07      	cmp	r3, #7
 800e980:	d9e8      	bls.n	800e954 <gen_numname+0xe8>
}
 800e982:	bf00      	nop
 800e984:	3730      	adds	r7, #48	; 0x30
 800e986:	46bd      	mov	sp, r7
 800e988:	bd80      	pop	{r7, pc}

0800e98a <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800e98a:	b480      	push	{r7}
 800e98c:	b085      	sub	sp, #20
 800e98e:	af00      	add	r7, sp, #0
 800e990:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800e992:	2300      	movs	r3, #0
 800e994:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800e996:	230b      	movs	r3, #11
 800e998:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800e99a:	7bfb      	ldrb	r3, [r7, #15]
 800e99c:	b2da      	uxtb	r2, r3
 800e99e:	0852      	lsrs	r2, r2, #1
 800e9a0:	01db      	lsls	r3, r3, #7
 800e9a2:	4313      	orrs	r3, r2
 800e9a4:	b2da      	uxtb	r2, r3
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	1c59      	adds	r1, r3, #1
 800e9aa:	6079      	str	r1, [r7, #4]
 800e9ac:	781b      	ldrb	r3, [r3, #0]
 800e9ae:	4413      	add	r3, r2
 800e9b0:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800e9b2:	68bb      	ldr	r3, [r7, #8]
 800e9b4:	3b01      	subs	r3, #1
 800e9b6:	60bb      	str	r3, [r7, #8]
 800e9b8:	68bb      	ldr	r3, [r7, #8]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d1ed      	bne.n	800e99a <sum_sfn+0x10>
	return sum;
 800e9be:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	3714      	adds	r7, #20
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ca:	4770      	bx	lr

0800e9cc <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b086      	sub	sp, #24
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
 800e9d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800e9d6:	2304      	movs	r3, #4
 800e9d8:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800e9e0:	23ff      	movs	r3, #255	; 0xff
 800e9e2:	757b      	strb	r3, [r7, #21]
 800e9e4:	23ff      	movs	r3, #255	; 0xff
 800e9e6:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800e9e8:	e081      	b.n	800eaee <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	69db      	ldr	r3, [r3, #28]
 800e9ee:	4619      	mov	r1, r3
 800e9f0:	6938      	ldr	r0, [r7, #16]
 800e9f2:	f7ff f841 	bl	800da78 <move_window>
 800e9f6:	4603      	mov	r3, r0
 800e9f8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e9fa:	7dfb      	ldrb	r3, [r7, #23]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d17c      	bne.n	800eafa <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	6a1b      	ldr	r3, [r3, #32]
 800ea04:	781b      	ldrb	r3, [r3, #0]
 800ea06:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800ea08:	7dbb      	ldrb	r3, [r7, #22]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d102      	bne.n	800ea14 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800ea0e:	2304      	movs	r3, #4
 800ea10:	75fb      	strb	r3, [r7, #23]
 800ea12:	e077      	b.n	800eb04 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	6a1b      	ldr	r3, [r3, #32]
 800ea18:	330b      	adds	r3, #11
 800ea1a:	781b      	ldrb	r3, [r3, #0]
 800ea1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ea20:	73fb      	strb	r3, [r7, #15]
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	7bfa      	ldrb	r2, [r7, #15]
 800ea26:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800ea28:	7dbb      	ldrb	r3, [r7, #22]
 800ea2a:	2be5      	cmp	r3, #229	; 0xe5
 800ea2c:	d00e      	beq.n	800ea4c <dir_read+0x80>
 800ea2e:	7dbb      	ldrb	r3, [r7, #22]
 800ea30:	2b2e      	cmp	r3, #46	; 0x2e
 800ea32:	d00b      	beq.n	800ea4c <dir_read+0x80>
 800ea34:	7bfb      	ldrb	r3, [r7, #15]
 800ea36:	f023 0320 	bic.w	r3, r3, #32
 800ea3a:	2b08      	cmp	r3, #8
 800ea3c:	bf0c      	ite	eq
 800ea3e:	2301      	moveq	r3, #1
 800ea40:	2300      	movne	r3, #0
 800ea42:	b2db      	uxtb	r3, r3
 800ea44:	461a      	mov	r2, r3
 800ea46:	683b      	ldr	r3, [r7, #0]
 800ea48:	4293      	cmp	r3, r2
 800ea4a:	d002      	beq.n	800ea52 <dir_read+0x86>
				ord = 0xFF;
 800ea4c:	23ff      	movs	r3, #255	; 0xff
 800ea4e:	757b      	strb	r3, [r7, #21]
 800ea50:	e044      	b.n	800eadc <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800ea52:	7bfb      	ldrb	r3, [r7, #15]
 800ea54:	2b0f      	cmp	r3, #15
 800ea56:	d12f      	bne.n	800eab8 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800ea58:	7dbb      	ldrb	r3, [r7, #22]
 800ea5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d00d      	beq.n	800ea7e <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	6a1b      	ldr	r3, [r3, #32]
 800ea66:	7b5b      	ldrb	r3, [r3, #13]
 800ea68:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800ea6a:	7dbb      	ldrb	r3, [r7, #22]
 800ea6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ea70:	75bb      	strb	r3, [r7, #22]
 800ea72:	7dbb      	ldrb	r3, [r7, #22]
 800ea74:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	695a      	ldr	r2, [r3, #20]
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ea7e:	7dba      	ldrb	r2, [r7, #22]
 800ea80:	7d7b      	ldrb	r3, [r7, #21]
 800ea82:	429a      	cmp	r2, r3
 800ea84:	d115      	bne.n	800eab2 <dir_read+0xe6>
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	6a1b      	ldr	r3, [r3, #32]
 800ea8a:	330d      	adds	r3, #13
 800ea8c:	781b      	ldrb	r3, [r3, #0]
 800ea8e:	7d3a      	ldrb	r2, [r7, #20]
 800ea90:	429a      	cmp	r2, r3
 800ea92:	d10e      	bne.n	800eab2 <dir_read+0xe6>
 800ea94:	693b      	ldr	r3, [r7, #16]
 800ea96:	691a      	ldr	r2, [r3, #16]
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	6a1b      	ldr	r3, [r3, #32]
 800ea9c:	4619      	mov	r1, r3
 800ea9e:	4610      	mov	r0, r2
 800eaa0:	f7ff fe18 	bl	800e6d4 <pick_lfn>
 800eaa4:	4603      	mov	r3, r0
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d003      	beq.n	800eab2 <dir_read+0xe6>
 800eaaa:	7d7b      	ldrb	r3, [r7, #21]
 800eaac:	3b01      	subs	r3, #1
 800eaae:	b2db      	uxtb	r3, r3
 800eab0:	e000      	b.n	800eab4 <dir_read+0xe8>
 800eab2:	23ff      	movs	r3, #255	; 0xff
 800eab4:	757b      	strb	r3, [r7, #21]
 800eab6:	e011      	b.n	800eadc <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800eab8:	7d7b      	ldrb	r3, [r7, #21]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d109      	bne.n	800ead2 <dir_read+0x106>
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	6a1b      	ldr	r3, [r3, #32]
 800eac2:	4618      	mov	r0, r3
 800eac4:	f7ff ff61 	bl	800e98a <sum_sfn>
 800eac8:	4603      	mov	r3, r0
 800eaca:	461a      	mov	r2, r3
 800eacc:	7d3b      	ldrb	r3, [r7, #20]
 800eace:	4293      	cmp	r3, r2
 800ead0:	d015      	beq.n	800eafe <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	f04f 32ff 	mov.w	r2, #4294967295
 800ead8:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800eada:	e010      	b.n	800eafe <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800eadc:	2100      	movs	r1, #0
 800eade:	6878      	ldr	r0, [r7, #4]
 800eae0:	f7ff fc2c 	bl	800e33c <dir_next>
 800eae4:	4603      	mov	r3, r0
 800eae6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800eae8:	7dfb      	ldrb	r3, [r7, #23]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d109      	bne.n	800eb02 <dir_read+0x136>
	while (dp->sect) {
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	69db      	ldr	r3, [r3, #28]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	f47f af79 	bne.w	800e9ea <dir_read+0x1e>
 800eaf8:	e004      	b.n	800eb04 <dir_read+0x138>
		if (res != FR_OK) break;
 800eafa:	bf00      	nop
 800eafc:	e002      	b.n	800eb04 <dir_read+0x138>
					break;
 800eafe:	bf00      	nop
 800eb00:	e000      	b.n	800eb04 <dir_read+0x138>
		if (res != FR_OK) break;
 800eb02:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800eb04:	7dfb      	ldrb	r3, [r7, #23]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d002      	beq.n	800eb10 <dir_read+0x144>
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	61da      	str	r2, [r3, #28]
	return res;
 800eb10:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb12:	4618      	mov	r0, r3
 800eb14:	3718      	adds	r7, #24
 800eb16:	46bd      	mov	sp, r7
 800eb18:	bd80      	pop	{r7, pc}

0800eb1a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800eb1a:	b580      	push	{r7, lr}
 800eb1c:	b086      	sub	sp, #24
 800eb1e:	af00      	add	r7, sp, #0
 800eb20:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800eb28:	2100      	movs	r1, #0
 800eb2a:	6878      	ldr	r0, [r7, #4]
 800eb2c:	f7ff fb7d 	bl	800e22a <dir_sdi>
 800eb30:	4603      	mov	r3, r0
 800eb32:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800eb34:	7dfb      	ldrb	r3, [r7, #23]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d001      	beq.n	800eb3e <dir_find+0x24>
 800eb3a:	7dfb      	ldrb	r3, [r7, #23]
 800eb3c:	e0a9      	b.n	800ec92 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800eb3e:	23ff      	movs	r3, #255	; 0xff
 800eb40:	753b      	strb	r3, [r7, #20]
 800eb42:	7d3b      	ldrb	r3, [r7, #20]
 800eb44:	757b      	strb	r3, [r7, #21]
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	f04f 32ff 	mov.w	r2, #4294967295
 800eb4c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	69db      	ldr	r3, [r3, #28]
 800eb52:	4619      	mov	r1, r3
 800eb54:	6938      	ldr	r0, [r7, #16]
 800eb56:	f7fe ff8f 	bl	800da78 <move_window>
 800eb5a:	4603      	mov	r3, r0
 800eb5c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800eb5e:	7dfb      	ldrb	r3, [r7, #23]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	f040 8090 	bne.w	800ec86 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	6a1b      	ldr	r3, [r3, #32]
 800eb6a:	781b      	ldrb	r3, [r3, #0]
 800eb6c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800eb6e:	7dbb      	ldrb	r3, [r7, #22]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d102      	bne.n	800eb7a <dir_find+0x60>
 800eb74:	2304      	movs	r3, #4
 800eb76:	75fb      	strb	r3, [r7, #23]
 800eb78:	e08a      	b.n	800ec90 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	6a1b      	ldr	r3, [r3, #32]
 800eb7e:	330b      	adds	r3, #11
 800eb80:	781b      	ldrb	r3, [r3, #0]
 800eb82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eb86:	73fb      	strb	r3, [r7, #15]
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	7bfa      	ldrb	r2, [r7, #15]
 800eb8c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800eb8e:	7dbb      	ldrb	r3, [r7, #22]
 800eb90:	2be5      	cmp	r3, #229	; 0xe5
 800eb92:	d007      	beq.n	800eba4 <dir_find+0x8a>
 800eb94:	7bfb      	ldrb	r3, [r7, #15]
 800eb96:	f003 0308 	and.w	r3, r3, #8
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d009      	beq.n	800ebb2 <dir_find+0x98>
 800eb9e:	7bfb      	ldrb	r3, [r7, #15]
 800eba0:	2b0f      	cmp	r3, #15
 800eba2:	d006      	beq.n	800ebb2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800eba4:	23ff      	movs	r3, #255	; 0xff
 800eba6:	757b      	strb	r3, [r7, #21]
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	f04f 32ff 	mov.w	r2, #4294967295
 800ebae:	631a      	str	r2, [r3, #48]	; 0x30
 800ebb0:	e05e      	b.n	800ec70 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800ebb2:	7bfb      	ldrb	r3, [r7, #15]
 800ebb4:	2b0f      	cmp	r3, #15
 800ebb6:	d136      	bne.n	800ec26 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ebbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d154      	bne.n	800ec70 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800ebc6:	7dbb      	ldrb	r3, [r7, #22]
 800ebc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d00d      	beq.n	800ebec <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	6a1b      	ldr	r3, [r3, #32]
 800ebd4:	7b5b      	ldrb	r3, [r3, #13]
 800ebd6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800ebd8:	7dbb      	ldrb	r3, [r7, #22]
 800ebda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ebde:	75bb      	strb	r3, [r7, #22]
 800ebe0:	7dbb      	ldrb	r3, [r7, #22]
 800ebe2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	695a      	ldr	r2, [r3, #20]
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ebec:	7dba      	ldrb	r2, [r7, #22]
 800ebee:	7d7b      	ldrb	r3, [r7, #21]
 800ebf0:	429a      	cmp	r2, r3
 800ebf2:	d115      	bne.n	800ec20 <dir_find+0x106>
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	6a1b      	ldr	r3, [r3, #32]
 800ebf8:	330d      	adds	r3, #13
 800ebfa:	781b      	ldrb	r3, [r3, #0]
 800ebfc:	7d3a      	ldrb	r2, [r7, #20]
 800ebfe:	429a      	cmp	r2, r3
 800ec00:	d10e      	bne.n	800ec20 <dir_find+0x106>
 800ec02:	693b      	ldr	r3, [r7, #16]
 800ec04:	691a      	ldr	r2, [r3, #16]
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	6a1b      	ldr	r3, [r3, #32]
 800ec0a:	4619      	mov	r1, r3
 800ec0c:	4610      	mov	r0, r2
 800ec0e:	f7ff fcf1 	bl	800e5f4 <cmp_lfn>
 800ec12:	4603      	mov	r3, r0
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d003      	beq.n	800ec20 <dir_find+0x106>
 800ec18:	7d7b      	ldrb	r3, [r7, #21]
 800ec1a:	3b01      	subs	r3, #1
 800ec1c:	b2db      	uxtb	r3, r3
 800ec1e:	e000      	b.n	800ec22 <dir_find+0x108>
 800ec20:	23ff      	movs	r3, #255	; 0xff
 800ec22:	757b      	strb	r3, [r7, #21]
 800ec24:	e024      	b.n	800ec70 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ec26:	7d7b      	ldrb	r3, [r7, #21]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d109      	bne.n	800ec40 <dir_find+0x126>
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	6a1b      	ldr	r3, [r3, #32]
 800ec30:	4618      	mov	r0, r3
 800ec32:	f7ff feaa 	bl	800e98a <sum_sfn>
 800ec36:	4603      	mov	r3, r0
 800ec38:	461a      	mov	r2, r3
 800ec3a:	7d3b      	ldrb	r3, [r7, #20]
 800ec3c:	4293      	cmp	r3, r2
 800ec3e:	d024      	beq.n	800ec8a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ec46:	f003 0301 	and.w	r3, r3, #1
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d10a      	bne.n	800ec64 <dir_find+0x14a>
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	6a18      	ldr	r0, [r3, #32]
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	3324      	adds	r3, #36	; 0x24
 800ec56:	220b      	movs	r2, #11
 800ec58:	4619      	mov	r1, r3
 800ec5a:	f7fe fd1a 	bl	800d692 <mem_cmp>
 800ec5e:	4603      	mov	r3, r0
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d014      	beq.n	800ec8e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ec64:	23ff      	movs	r3, #255	; 0xff
 800ec66:	757b      	strb	r3, [r7, #21]
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	f04f 32ff 	mov.w	r2, #4294967295
 800ec6e:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ec70:	2100      	movs	r1, #0
 800ec72:	6878      	ldr	r0, [r7, #4]
 800ec74:	f7ff fb62 	bl	800e33c <dir_next>
 800ec78:	4603      	mov	r3, r0
 800ec7a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ec7c:	7dfb      	ldrb	r3, [r7, #23]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	f43f af65 	beq.w	800eb4e <dir_find+0x34>
 800ec84:	e004      	b.n	800ec90 <dir_find+0x176>
		if (res != FR_OK) break;
 800ec86:	bf00      	nop
 800ec88:	e002      	b.n	800ec90 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ec8a:	bf00      	nop
 800ec8c:	e000      	b.n	800ec90 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ec8e:	bf00      	nop

	return res;
 800ec90:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec92:	4618      	mov	r0, r3
 800ec94:	3718      	adds	r7, #24
 800ec96:	46bd      	mov	sp, r7
 800ec98:	bd80      	pop	{r7, pc}
	...

0800ec9c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b08c      	sub	sp, #48	; 0x30
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ecb0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d001      	beq.n	800ecbc <dir_register+0x20>
 800ecb8:	2306      	movs	r3, #6
 800ecba:	e0e0      	b.n	800ee7e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	627b      	str	r3, [r7, #36]	; 0x24
 800ecc0:	e002      	b.n	800ecc8 <dir_register+0x2c>
 800ecc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecc4:	3301      	adds	r3, #1
 800ecc6:	627b      	str	r3, [r7, #36]	; 0x24
 800ecc8:	69fb      	ldr	r3, [r7, #28]
 800ecca:	691a      	ldr	r2, [r3, #16]
 800eccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecce:	005b      	lsls	r3, r3, #1
 800ecd0:	4413      	add	r3, r2
 800ecd2:	881b      	ldrh	r3, [r3, #0]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d1f4      	bne.n	800ecc2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800ecde:	f107 030c 	add.w	r3, r7, #12
 800ece2:	220c      	movs	r2, #12
 800ece4:	4618      	mov	r0, r3
 800ece6:	f7fe fc99 	bl	800d61c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800ecea:	7dfb      	ldrb	r3, [r7, #23]
 800ecec:	f003 0301 	and.w	r3, r3, #1
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d032      	beq.n	800ed5a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	2240      	movs	r2, #64	; 0x40
 800ecf8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800ecfc:	2301      	movs	r3, #1
 800ecfe:	62bb      	str	r3, [r7, #40]	; 0x28
 800ed00:	e016      	b.n	800ed30 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800ed08:	69fb      	ldr	r3, [r7, #28]
 800ed0a:	691a      	ldr	r2, [r3, #16]
 800ed0c:	f107 010c 	add.w	r1, r7, #12
 800ed10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed12:	f7ff fdab 	bl	800e86c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800ed16:	6878      	ldr	r0, [r7, #4]
 800ed18:	f7ff feff 	bl	800eb1a <dir_find>
 800ed1c:	4603      	mov	r3, r0
 800ed1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800ed22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d106      	bne.n	800ed38 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800ed2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed2c:	3301      	adds	r3, #1
 800ed2e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ed30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed32:	2b63      	cmp	r3, #99	; 0x63
 800ed34:	d9e5      	bls.n	800ed02 <dir_register+0x66>
 800ed36:	e000      	b.n	800ed3a <dir_register+0x9e>
			if (res != FR_OK) break;
 800ed38:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800ed3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed3c:	2b64      	cmp	r3, #100	; 0x64
 800ed3e:	d101      	bne.n	800ed44 <dir_register+0xa8>
 800ed40:	2307      	movs	r3, #7
 800ed42:	e09c      	b.n	800ee7e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800ed44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ed48:	2b04      	cmp	r3, #4
 800ed4a:	d002      	beq.n	800ed52 <dir_register+0xb6>
 800ed4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ed50:	e095      	b.n	800ee7e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800ed52:	7dfa      	ldrb	r2, [r7, #23]
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800ed5a:	7dfb      	ldrb	r3, [r7, #23]
 800ed5c:	f003 0302 	and.w	r3, r3, #2
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d007      	beq.n	800ed74 <dir_register+0xd8>
 800ed64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed66:	330c      	adds	r3, #12
 800ed68:	4a47      	ldr	r2, [pc, #284]	; (800ee88 <dir_register+0x1ec>)
 800ed6a:	fba2 2303 	umull	r2, r3, r2, r3
 800ed6e:	089b      	lsrs	r3, r3, #2
 800ed70:	3301      	adds	r3, #1
 800ed72:	e000      	b.n	800ed76 <dir_register+0xda>
 800ed74:	2301      	movs	r3, #1
 800ed76:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800ed78:	6a39      	ldr	r1, [r7, #32]
 800ed7a:	6878      	ldr	r0, [r7, #4]
 800ed7c:	f7ff fbb4 	bl	800e4e8 <dir_alloc>
 800ed80:	4603      	mov	r3, r0
 800ed82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800ed86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d148      	bne.n	800ee20 <dir_register+0x184>
 800ed8e:	6a3b      	ldr	r3, [r7, #32]
 800ed90:	3b01      	subs	r3, #1
 800ed92:	623b      	str	r3, [r7, #32]
 800ed94:	6a3b      	ldr	r3, [r7, #32]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d042      	beq.n	800ee20 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	695a      	ldr	r2, [r3, #20]
 800ed9e:	6a3b      	ldr	r3, [r7, #32]
 800eda0:	015b      	lsls	r3, r3, #5
 800eda2:	1ad3      	subs	r3, r2, r3
 800eda4:	4619      	mov	r1, r3
 800eda6:	6878      	ldr	r0, [r7, #4]
 800eda8:	f7ff fa3f 	bl	800e22a <dir_sdi>
 800edac:	4603      	mov	r3, r0
 800edae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800edb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d132      	bne.n	800ee20 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	3324      	adds	r3, #36	; 0x24
 800edbe:	4618      	mov	r0, r3
 800edc0:	f7ff fde3 	bl	800e98a <sum_sfn>
 800edc4:	4603      	mov	r3, r0
 800edc6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	69db      	ldr	r3, [r3, #28]
 800edcc:	4619      	mov	r1, r3
 800edce:	69f8      	ldr	r0, [r7, #28]
 800edd0:	f7fe fe52 	bl	800da78 <move_window>
 800edd4:	4603      	mov	r3, r0
 800edd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800edda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d11d      	bne.n	800ee1e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800ede2:	69fb      	ldr	r3, [r7, #28]
 800ede4:	6918      	ldr	r0, [r3, #16]
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	6a19      	ldr	r1, [r3, #32]
 800edea:	6a3b      	ldr	r3, [r7, #32]
 800edec:	b2da      	uxtb	r2, r3
 800edee:	7efb      	ldrb	r3, [r7, #27]
 800edf0:	f7ff fcd4 	bl	800e79c <put_lfn>
				fs->wflag = 1;
 800edf4:	69fb      	ldr	r3, [r7, #28]
 800edf6:	2201      	movs	r2, #1
 800edf8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800edfa:	2100      	movs	r1, #0
 800edfc:	6878      	ldr	r0, [r7, #4]
 800edfe:	f7ff fa9d 	bl	800e33c <dir_next>
 800ee02:	4603      	mov	r3, r0
 800ee04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800ee08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d107      	bne.n	800ee20 <dir_register+0x184>
 800ee10:	6a3b      	ldr	r3, [r7, #32]
 800ee12:	3b01      	subs	r3, #1
 800ee14:	623b      	str	r3, [r7, #32]
 800ee16:	6a3b      	ldr	r3, [r7, #32]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d1d5      	bne.n	800edc8 <dir_register+0x12c>
 800ee1c:	e000      	b.n	800ee20 <dir_register+0x184>
				if (res != FR_OK) break;
 800ee1e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ee20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d128      	bne.n	800ee7a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	69db      	ldr	r3, [r3, #28]
 800ee2c:	4619      	mov	r1, r3
 800ee2e:	69f8      	ldr	r0, [r7, #28]
 800ee30:	f7fe fe22 	bl	800da78 <move_window>
 800ee34:	4603      	mov	r3, r0
 800ee36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800ee3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d11b      	bne.n	800ee7a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	6a1b      	ldr	r3, [r3, #32]
 800ee46:	2220      	movs	r2, #32
 800ee48:	2100      	movs	r1, #0
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	f7fe fc07 	bl	800d65e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	6a18      	ldr	r0, [r3, #32]
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	3324      	adds	r3, #36	; 0x24
 800ee58:	220b      	movs	r2, #11
 800ee5a:	4619      	mov	r1, r3
 800ee5c:	f7fe fbde 	bl	800d61c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	6a1b      	ldr	r3, [r3, #32]
 800ee6a:	330c      	adds	r3, #12
 800ee6c:	f002 0218 	and.w	r2, r2, #24
 800ee70:	b2d2      	uxtb	r2, r2
 800ee72:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800ee74:	69fb      	ldr	r3, [r7, #28]
 800ee76:	2201      	movs	r2, #1
 800ee78:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ee7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ee7e:	4618      	mov	r0, r3
 800ee80:	3730      	adds	r7, #48	; 0x30
 800ee82:	46bd      	mov	sp, r7
 800ee84:	bd80      	pop	{r7, pc}
 800ee86:	bf00      	nop
 800ee88:	4ec4ec4f 	.word	0x4ec4ec4f

0800ee8c <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	b086      	sub	sp, #24
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	695b      	ldr	r3, [r3, #20]
 800ee9e:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eea8:	d007      	beq.n	800eeba <dir_remove+0x2e>
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eeae:	4619      	mov	r1, r3
 800eeb0:	6878      	ldr	r0, [r7, #4]
 800eeb2:	f7ff f9ba 	bl	800e22a <dir_sdi>
 800eeb6:	4603      	mov	r3, r0
 800eeb8:	e000      	b.n	800eebc <dir_remove+0x30>
 800eeba:	2300      	movs	r3, #0
 800eebc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800eebe:	7dfb      	ldrb	r3, [r7, #23]
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d128      	bne.n	800ef16 <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	69db      	ldr	r3, [r3, #28]
 800eec8:	4619      	mov	r1, r3
 800eeca:	6938      	ldr	r0, [r7, #16]
 800eecc:	f7fe fdd4 	bl	800da78 <move_window>
 800eed0:	4603      	mov	r3, r0
 800eed2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800eed4:	7dfb      	ldrb	r3, [r7, #23]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d115      	bne.n	800ef06 <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	6a1b      	ldr	r3, [r3, #32]
 800eede:	22e5      	movs	r2, #229	; 0xe5
 800eee0:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 800eee2:	693b      	ldr	r3, [r7, #16]
 800eee4:	2201      	movs	r2, #1
 800eee6:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	695b      	ldr	r3, [r3, #20]
 800eeec:	68fa      	ldr	r2, [r7, #12]
 800eeee:	429a      	cmp	r2, r3
 800eef0:	d90b      	bls.n	800ef0a <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 800eef2:	2100      	movs	r1, #0
 800eef4:	6878      	ldr	r0, [r7, #4]
 800eef6:	f7ff fa21 	bl	800e33c <dir_next>
 800eefa:	4603      	mov	r3, r0
 800eefc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800eefe:	7dfb      	ldrb	r3, [r7, #23]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d0df      	beq.n	800eec4 <dir_remove+0x38>
 800ef04:	e002      	b.n	800ef0c <dir_remove+0x80>
			if (res != FR_OK) break;
 800ef06:	bf00      	nop
 800ef08:	e000      	b.n	800ef0c <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800ef0a:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 800ef0c:	7dfb      	ldrb	r3, [r7, #23]
 800ef0e:	2b04      	cmp	r3, #4
 800ef10:	d101      	bne.n	800ef16 <dir_remove+0x8a>
 800ef12:	2302      	movs	r3, #2
 800ef14:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 800ef16:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef18:	4618      	mov	r0, r3
 800ef1a:	3718      	adds	r7, #24
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	bd80      	pop	{r7, pc}

0800ef20 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b08a      	sub	sp, #40	; 0x28
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
 800ef28:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800ef2a:	683b      	ldr	r3, [r7, #0]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	613b      	str	r3, [r7, #16]
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	691b      	ldr	r3, [r3, #16]
 800ef36:	60fb      	str	r3, [r7, #12]
 800ef38:	2300      	movs	r3, #0
 800ef3a:	617b      	str	r3, [r7, #20]
 800ef3c:	697b      	ldr	r3, [r7, #20]
 800ef3e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800ef40:	69bb      	ldr	r3, [r7, #24]
 800ef42:	1c5a      	adds	r2, r3, #1
 800ef44:	61ba      	str	r2, [r7, #24]
 800ef46:	693a      	ldr	r2, [r7, #16]
 800ef48:	4413      	add	r3, r2
 800ef4a:	781b      	ldrb	r3, [r3, #0]
 800ef4c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800ef4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef50:	2b1f      	cmp	r3, #31
 800ef52:	d940      	bls.n	800efd6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800ef54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef56:	2b2f      	cmp	r3, #47	; 0x2f
 800ef58:	d006      	beq.n	800ef68 <create_name+0x48>
 800ef5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef5c:	2b5c      	cmp	r3, #92	; 0x5c
 800ef5e:	d110      	bne.n	800ef82 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ef60:	e002      	b.n	800ef68 <create_name+0x48>
 800ef62:	69bb      	ldr	r3, [r7, #24]
 800ef64:	3301      	adds	r3, #1
 800ef66:	61bb      	str	r3, [r7, #24]
 800ef68:	693a      	ldr	r2, [r7, #16]
 800ef6a:	69bb      	ldr	r3, [r7, #24]
 800ef6c:	4413      	add	r3, r2
 800ef6e:	781b      	ldrb	r3, [r3, #0]
 800ef70:	2b2f      	cmp	r3, #47	; 0x2f
 800ef72:	d0f6      	beq.n	800ef62 <create_name+0x42>
 800ef74:	693a      	ldr	r2, [r7, #16]
 800ef76:	69bb      	ldr	r3, [r7, #24]
 800ef78:	4413      	add	r3, r2
 800ef7a:	781b      	ldrb	r3, [r3, #0]
 800ef7c:	2b5c      	cmp	r3, #92	; 0x5c
 800ef7e:	d0f0      	beq.n	800ef62 <create_name+0x42>
			break;
 800ef80:	e02a      	b.n	800efd8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800ef82:	697b      	ldr	r3, [r7, #20]
 800ef84:	2bfe      	cmp	r3, #254	; 0xfe
 800ef86:	d901      	bls.n	800ef8c <create_name+0x6c>
 800ef88:	2306      	movs	r3, #6
 800ef8a:	e1c9      	b.n	800f320 <create_name+0x400>
#if !_LFN_UNICODE
		w &= 0xFF;
 800ef8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef8e:	b2db      	uxtb	r3, r3
 800ef90:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800ef92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef94:	2101      	movs	r1, #1
 800ef96:	4618      	mov	r0, r3
 800ef98:	f002 f848 	bl	801102c <ff_convert>
 800ef9c:	4603      	mov	r3, r0
 800ef9e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800efa0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d101      	bne.n	800efaa <create_name+0x8a>
 800efa6:	2306      	movs	r3, #6
 800efa8:	e1ba      	b.n	800f320 <create_name+0x400>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800efaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800efac:	2b7f      	cmp	r3, #127	; 0x7f
 800efae:	d809      	bhi.n	800efc4 <create_name+0xa4>
 800efb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800efb2:	4619      	mov	r1, r3
 800efb4:	48a5      	ldr	r0, [pc, #660]	; (800f24c <create_name+0x32c>)
 800efb6:	f7fe fb93 	bl	800d6e0 <chk_chr>
 800efba:	4603      	mov	r3, r0
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d001      	beq.n	800efc4 <create_name+0xa4>
 800efc0:	2306      	movs	r3, #6
 800efc2:	e1ad      	b.n	800f320 <create_name+0x400>
		lfn[di++] = w;					/* Store the Unicode character */
 800efc4:	697b      	ldr	r3, [r7, #20]
 800efc6:	1c5a      	adds	r2, r3, #1
 800efc8:	617a      	str	r2, [r7, #20]
 800efca:	005b      	lsls	r3, r3, #1
 800efcc:	68fa      	ldr	r2, [r7, #12]
 800efce:	4413      	add	r3, r2
 800efd0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800efd2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800efd4:	e7b4      	b.n	800ef40 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800efd6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800efd8:	693a      	ldr	r2, [r7, #16]
 800efda:	69bb      	ldr	r3, [r7, #24]
 800efdc:	441a      	add	r2, r3
 800efde:	683b      	ldr	r3, [r7, #0]
 800efe0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800efe2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800efe4:	2b1f      	cmp	r3, #31
 800efe6:	d801      	bhi.n	800efec <create_name+0xcc>
 800efe8:	2304      	movs	r3, #4
 800efea:	e000      	b.n	800efee <create_name+0xce>
 800efec:	2300      	movs	r3, #0
 800efee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 800eff2:	697b      	ldr	r3, [r7, #20]
 800eff4:	2b01      	cmp	r3, #1
 800eff6:	d109      	bne.n	800f00c <create_name+0xec>
 800eff8:	697b      	ldr	r3, [r7, #20]
 800effa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800effe:	3b01      	subs	r3, #1
 800f000:	005b      	lsls	r3, r3, #1
 800f002:	68fa      	ldr	r2, [r7, #12]
 800f004:	4413      	add	r3, r2
 800f006:	881b      	ldrh	r3, [r3, #0]
 800f008:	2b2e      	cmp	r3, #46	; 0x2e
 800f00a:	d016      	beq.n	800f03a <create_name+0x11a>
 800f00c:	697b      	ldr	r3, [r7, #20]
 800f00e:	2b02      	cmp	r3, #2
 800f010:	d14e      	bne.n	800f0b0 <create_name+0x190>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 800f012:	697b      	ldr	r3, [r7, #20]
 800f014:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f018:	3b01      	subs	r3, #1
 800f01a:	005b      	lsls	r3, r3, #1
 800f01c:	68fa      	ldr	r2, [r7, #12]
 800f01e:	4413      	add	r3, r2
 800f020:	881b      	ldrh	r3, [r3, #0]
 800f022:	2b2e      	cmp	r3, #46	; 0x2e
 800f024:	d144      	bne.n	800f0b0 <create_name+0x190>
 800f026:	697b      	ldr	r3, [r7, #20]
 800f028:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f02c:	3b02      	subs	r3, #2
 800f02e:	005b      	lsls	r3, r3, #1
 800f030:	68fa      	ldr	r2, [r7, #12]
 800f032:	4413      	add	r3, r2
 800f034:	881b      	ldrh	r3, [r3, #0]
 800f036:	2b2e      	cmp	r3, #46	; 0x2e
 800f038:	d13a      	bne.n	800f0b0 <create_name+0x190>
		lfn[di] = 0;
 800f03a:	697b      	ldr	r3, [r7, #20]
 800f03c:	005b      	lsls	r3, r3, #1
 800f03e:	68fa      	ldr	r2, [r7, #12]
 800f040:	4413      	add	r3, r2
 800f042:	2200      	movs	r2, #0
 800f044:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 800f046:	2300      	movs	r3, #0
 800f048:	623b      	str	r3, [r7, #32]
 800f04a:	e00f      	b.n	800f06c <create_name+0x14c>
			dp->fn[i] = (i < di) ? '.' : ' ';
 800f04c:	6a3a      	ldr	r2, [r7, #32]
 800f04e:	697b      	ldr	r3, [r7, #20]
 800f050:	429a      	cmp	r2, r3
 800f052:	d201      	bcs.n	800f058 <create_name+0x138>
 800f054:	212e      	movs	r1, #46	; 0x2e
 800f056:	e000      	b.n	800f05a <create_name+0x13a>
 800f058:	2120      	movs	r1, #32
 800f05a:	687a      	ldr	r2, [r7, #4]
 800f05c:	6a3b      	ldr	r3, [r7, #32]
 800f05e:	4413      	add	r3, r2
 800f060:	3324      	adds	r3, #36	; 0x24
 800f062:	460a      	mov	r2, r1
 800f064:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 800f066:	6a3b      	ldr	r3, [r7, #32]
 800f068:	3301      	adds	r3, #1
 800f06a:	623b      	str	r3, [r7, #32]
 800f06c:	6a3b      	ldr	r3, [r7, #32]
 800f06e:	2b0a      	cmp	r3, #10
 800f070:	d9ec      	bls.n	800f04c <create_name+0x12c>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 800f072:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f076:	f043 0320 	orr.w	r3, r3, #32
 800f07a:	b2d9      	uxtb	r1, r3
 800f07c:	687a      	ldr	r2, [r7, #4]
 800f07e:	6a3b      	ldr	r3, [r7, #32]
 800f080:	4413      	add	r3, r2
 800f082:	3324      	adds	r3, #36	; 0x24
 800f084:	460a      	mov	r2, r1
 800f086:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 800f088:	2300      	movs	r3, #0
 800f08a:	e149      	b.n	800f320 <create_name+0x400>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 800f08c:	697b      	ldr	r3, [r7, #20]
 800f08e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f092:	3b01      	subs	r3, #1
 800f094:	005b      	lsls	r3, r3, #1
 800f096:	68fa      	ldr	r2, [r7, #12]
 800f098:	4413      	add	r3, r2
 800f09a:	881b      	ldrh	r3, [r3, #0]
 800f09c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800f09e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f0a0:	2b20      	cmp	r3, #32
 800f0a2:	d002      	beq.n	800f0aa <create_name+0x18a>
 800f0a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f0a6:	2b2e      	cmp	r3, #46	; 0x2e
 800f0a8:	d106      	bne.n	800f0b8 <create_name+0x198>
		di--;
 800f0aa:	697b      	ldr	r3, [r7, #20]
 800f0ac:	3b01      	subs	r3, #1
 800f0ae:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800f0b0:	697b      	ldr	r3, [r7, #20]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d1ea      	bne.n	800f08c <create_name+0x16c>
 800f0b6:	e000      	b.n	800f0ba <create_name+0x19a>
		if (w != ' ' && w != '.') break;
 800f0b8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800f0ba:	697b      	ldr	r3, [r7, #20]
 800f0bc:	005b      	lsls	r3, r3, #1
 800f0be:	68fa      	ldr	r2, [r7, #12]
 800f0c0:	4413      	add	r3, r2
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800f0c6:	697b      	ldr	r3, [r7, #20]
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d101      	bne.n	800f0d0 <create_name+0x1b0>
 800f0cc:	2306      	movs	r3, #6
 800f0ce:	e127      	b.n	800f320 <create_name+0x400>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	3324      	adds	r3, #36	; 0x24
 800f0d4:	220b      	movs	r2, #11
 800f0d6:	2120      	movs	r1, #32
 800f0d8:	4618      	mov	r0, r3
 800f0da:	f7fe fac0 	bl	800d65e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800f0de:	2300      	movs	r3, #0
 800f0e0:	61bb      	str	r3, [r7, #24]
 800f0e2:	e002      	b.n	800f0ea <create_name+0x1ca>
 800f0e4:	69bb      	ldr	r3, [r7, #24]
 800f0e6:	3301      	adds	r3, #1
 800f0e8:	61bb      	str	r3, [r7, #24]
 800f0ea:	69bb      	ldr	r3, [r7, #24]
 800f0ec:	005b      	lsls	r3, r3, #1
 800f0ee:	68fa      	ldr	r2, [r7, #12]
 800f0f0:	4413      	add	r3, r2
 800f0f2:	881b      	ldrh	r3, [r3, #0]
 800f0f4:	2b20      	cmp	r3, #32
 800f0f6:	d0f5      	beq.n	800f0e4 <create_name+0x1c4>
 800f0f8:	69bb      	ldr	r3, [r7, #24]
 800f0fa:	005b      	lsls	r3, r3, #1
 800f0fc:	68fa      	ldr	r2, [r7, #12]
 800f0fe:	4413      	add	r3, r2
 800f100:	881b      	ldrh	r3, [r3, #0]
 800f102:	2b2e      	cmp	r3, #46	; 0x2e
 800f104:	d0ee      	beq.n	800f0e4 <create_name+0x1c4>
	if (si) cf |= NS_LOSS | NS_LFN;
 800f106:	69bb      	ldr	r3, [r7, #24]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d009      	beq.n	800f120 <create_name+0x200>
 800f10c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f110:	f043 0303 	orr.w	r3, r3, #3
 800f114:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800f118:	e002      	b.n	800f120 <create_name+0x200>
 800f11a:	697b      	ldr	r3, [r7, #20]
 800f11c:	3b01      	subs	r3, #1
 800f11e:	617b      	str	r3, [r7, #20]
 800f120:	697b      	ldr	r3, [r7, #20]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d009      	beq.n	800f13a <create_name+0x21a>
 800f126:	697b      	ldr	r3, [r7, #20]
 800f128:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f12c:	3b01      	subs	r3, #1
 800f12e:	005b      	lsls	r3, r3, #1
 800f130:	68fa      	ldr	r2, [r7, #12]
 800f132:	4413      	add	r3, r2
 800f134:	881b      	ldrh	r3, [r3, #0]
 800f136:	2b2e      	cmp	r3, #46	; 0x2e
 800f138:	d1ef      	bne.n	800f11a <create_name+0x1fa>

	i = b = 0; ni = 8;
 800f13a:	2300      	movs	r3, #0
 800f13c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f140:	2300      	movs	r3, #0
 800f142:	623b      	str	r3, [r7, #32]
 800f144:	2308      	movs	r3, #8
 800f146:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800f148:	69bb      	ldr	r3, [r7, #24]
 800f14a:	1c5a      	adds	r2, r3, #1
 800f14c:	61ba      	str	r2, [r7, #24]
 800f14e:	005b      	lsls	r3, r3, #1
 800f150:	68fa      	ldr	r2, [r7, #12]
 800f152:	4413      	add	r3, r2
 800f154:	881b      	ldrh	r3, [r3, #0]
 800f156:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800f158:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	f000 8096 	beq.w	800f28c <create_name+0x36c>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800f160:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f162:	2b20      	cmp	r3, #32
 800f164:	d006      	beq.n	800f174 <create_name+0x254>
 800f166:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f168:	2b2e      	cmp	r3, #46	; 0x2e
 800f16a:	d10a      	bne.n	800f182 <create_name+0x262>
 800f16c:	69ba      	ldr	r2, [r7, #24]
 800f16e:	697b      	ldr	r3, [r7, #20]
 800f170:	429a      	cmp	r2, r3
 800f172:	d006      	beq.n	800f182 <create_name+0x262>
			cf |= NS_LOSS | NS_LFN; continue;
 800f174:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f178:	f043 0303 	orr.w	r3, r3, #3
 800f17c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f180:	e083      	b.n	800f28a <create_name+0x36a>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800f182:	6a3a      	ldr	r2, [r7, #32]
 800f184:	69fb      	ldr	r3, [r7, #28]
 800f186:	429a      	cmp	r2, r3
 800f188:	d203      	bcs.n	800f192 <create_name+0x272>
 800f18a:	69ba      	ldr	r2, [r7, #24]
 800f18c:	697b      	ldr	r3, [r7, #20]
 800f18e:	429a      	cmp	r2, r3
 800f190:	d123      	bne.n	800f1da <create_name+0x2ba>
			if (ni == 11) {				/* Long extension */
 800f192:	69fb      	ldr	r3, [r7, #28]
 800f194:	2b0b      	cmp	r3, #11
 800f196:	d106      	bne.n	800f1a6 <create_name+0x286>
				cf |= NS_LOSS | NS_LFN; break;
 800f198:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f19c:	f043 0303 	orr.w	r3, r3, #3
 800f1a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f1a4:	e075      	b.n	800f292 <create_name+0x372>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800f1a6:	69ba      	ldr	r2, [r7, #24]
 800f1a8:	697b      	ldr	r3, [r7, #20]
 800f1aa:	429a      	cmp	r2, r3
 800f1ac:	d005      	beq.n	800f1ba <create_name+0x29a>
 800f1ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f1b2:	f043 0303 	orr.w	r3, r3, #3
 800f1b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800f1ba:	69ba      	ldr	r2, [r7, #24]
 800f1bc:	697b      	ldr	r3, [r7, #20]
 800f1be:	429a      	cmp	r2, r3
 800f1c0:	d866      	bhi.n	800f290 <create_name+0x370>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800f1c2:	697b      	ldr	r3, [r7, #20]
 800f1c4:	61bb      	str	r3, [r7, #24]
 800f1c6:	2308      	movs	r3, #8
 800f1c8:	623b      	str	r3, [r7, #32]
 800f1ca:	230b      	movs	r3, #11
 800f1cc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800f1ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f1d2:	009b      	lsls	r3, r3, #2
 800f1d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f1d8:	e057      	b.n	800f28a <create_name+0x36a>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800f1da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f1dc:	2b7f      	cmp	r3, #127	; 0x7f
 800f1de:	d914      	bls.n	800f20a <create_name+0x2ea>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800f1e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f1e2:	2100      	movs	r1, #0
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	f001 ff21 	bl	801102c <ff_convert>
 800f1ea:	4603      	mov	r3, r0
 800f1ec:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800f1ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d004      	beq.n	800f1fe <create_name+0x2de>
 800f1f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f1f6:	3b80      	subs	r3, #128	; 0x80
 800f1f8:	4a15      	ldr	r2, [pc, #84]	; (800f250 <create_name+0x330>)
 800f1fa:	5cd3      	ldrb	r3, [r2, r3]
 800f1fc:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800f1fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f202:	f043 0302 	orr.w	r3, r3, #2
 800f206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800f20a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d007      	beq.n	800f220 <create_name+0x300>
 800f210:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f212:	4619      	mov	r1, r3
 800f214:	480f      	ldr	r0, [pc, #60]	; (800f254 <create_name+0x334>)
 800f216:	f7fe fa63 	bl	800d6e0 <chk_chr>
 800f21a:	4603      	mov	r3, r0
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d008      	beq.n	800f232 <create_name+0x312>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800f220:	235f      	movs	r3, #95	; 0x5f
 800f222:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f224:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f228:	f043 0303 	orr.w	r3, r3, #3
 800f22c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f230:	e021      	b.n	800f276 <create_name+0x356>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800f232:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f234:	2b40      	cmp	r3, #64	; 0x40
 800f236:	d90f      	bls.n	800f258 <create_name+0x338>
 800f238:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f23a:	2b5a      	cmp	r3, #90	; 0x5a
 800f23c:	d80c      	bhi.n	800f258 <create_name+0x338>
					b |= 2;
 800f23e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f242:	f043 0302 	orr.w	r3, r3, #2
 800f246:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f24a:	e014      	b.n	800f276 <create_name+0x356>
 800f24c:	0801729c 	.word	0x0801729c
 800f250:	08017324 	.word	0x08017324
 800f254:	080172a8 	.word	0x080172a8
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800f258:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f25a:	2b60      	cmp	r3, #96	; 0x60
 800f25c:	d90b      	bls.n	800f276 <create_name+0x356>
 800f25e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f260:	2b7a      	cmp	r3, #122	; 0x7a
 800f262:	d808      	bhi.n	800f276 <create_name+0x356>
						b |= 1; w -= 0x20;
 800f264:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f268:	f043 0301 	orr.w	r3, r3, #1
 800f26c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f270:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f272:	3b20      	subs	r3, #32
 800f274:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800f276:	6a3b      	ldr	r3, [r7, #32]
 800f278:	1c5a      	adds	r2, r3, #1
 800f27a:	623a      	str	r2, [r7, #32]
 800f27c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f27e:	b2d1      	uxtb	r1, r2
 800f280:	687a      	ldr	r2, [r7, #4]
 800f282:	4413      	add	r3, r2
 800f284:	460a      	mov	r2, r1
 800f286:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800f28a:	e75d      	b.n	800f148 <create_name+0x228>
		if (!w) break;					/* Break on end of the LFN */
 800f28c:	bf00      	nop
 800f28e:	e000      	b.n	800f292 <create_name+0x372>
			if (si > di) break;			/* No extension */
 800f290:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f298:	2be5      	cmp	r3, #229	; 0xe5
 800f29a:	d103      	bne.n	800f2a4 <create_name+0x384>
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	2205      	movs	r2, #5
 800f2a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800f2a4:	69fb      	ldr	r3, [r7, #28]
 800f2a6:	2b08      	cmp	r3, #8
 800f2a8:	d104      	bne.n	800f2b4 <create_name+0x394>
 800f2aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f2ae:	009b      	lsls	r3, r3, #2
 800f2b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800f2b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f2b8:	f003 030c 	and.w	r3, r3, #12
 800f2bc:	2b0c      	cmp	r3, #12
 800f2be:	d005      	beq.n	800f2cc <create_name+0x3ac>
 800f2c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f2c4:	f003 0303 	and.w	r3, r3, #3
 800f2c8:	2b03      	cmp	r3, #3
 800f2ca:	d105      	bne.n	800f2d8 <create_name+0x3b8>
 800f2cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f2d0:	f043 0302 	orr.w	r3, r3, #2
 800f2d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800f2d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f2dc:	f003 0302 	and.w	r3, r3, #2
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d117      	bne.n	800f314 <create_name+0x3f4>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800f2e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f2e8:	f003 0303 	and.w	r3, r3, #3
 800f2ec:	2b01      	cmp	r3, #1
 800f2ee:	d105      	bne.n	800f2fc <create_name+0x3dc>
 800f2f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f2f4:	f043 0310 	orr.w	r3, r3, #16
 800f2f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800f2fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f300:	f003 030c 	and.w	r3, r3, #12
 800f304:	2b04      	cmp	r3, #4
 800f306:	d105      	bne.n	800f314 <create_name+0x3f4>
 800f308:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f30c:	f043 0308 	orr.w	r3, r3, #8
 800f310:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f31a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800f31e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800f320:	4618      	mov	r0, r3
 800f322:	3728      	adds	r7, #40	; 0x28
 800f324:	46bd      	mov	sp, r7
 800f326:	bd80      	pop	{r7, pc}

0800f328 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	b086      	sub	sp, #24
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	6078      	str	r0, [r7, #4]
 800f330:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f336:	693b      	ldr	r3, [r7, #16]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 800f33c:	683b      	ldr	r3, [r7, #0]
 800f33e:	781b      	ldrb	r3, [r3, #0]
 800f340:	2b2f      	cmp	r3, #47	; 0x2f
 800f342:	d00b      	beq.n	800f35c <follow_path+0x34>
 800f344:	683b      	ldr	r3, [r7, #0]
 800f346:	781b      	ldrb	r3, [r3, #0]
 800f348:	2b5c      	cmp	r3, #92	; 0x5c
 800f34a:	d007      	beq.n	800f35c <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	69da      	ldr	r2, [r3, #28]
 800f350:	693b      	ldr	r3, [r7, #16]
 800f352:	609a      	str	r2, [r3, #8]
 800f354:	e00d      	b.n	800f372 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f356:	683b      	ldr	r3, [r7, #0]
 800f358:	3301      	adds	r3, #1
 800f35a:	603b      	str	r3, [r7, #0]
 800f35c:	683b      	ldr	r3, [r7, #0]
 800f35e:	781b      	ldrb	r3, [r3, #0]
 800f360:	2b2f      	cmp	r3, #47	; 0x2f
 800f362:	d0f8      	beq.n	800f356 <follow_path+0x2e>
 800f364:	683b      	ldr	r3, [r7, #0]
 800f366:	781b      	ldrb	r3, [r3, #0]
 800f368:	2b5c      	cmp	r3, #92	; 0x5c
 800f36a:	d0f4      	beq.n	800f356 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 800f36c:	693b      	ldr	r3, [r7, #16]
 800f36e:	2200      	movs	r2, #0
 800f370:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f372:	683b      	ldr	r3, [r7, #0]
 800f374:	781b      	ldrb	r3, [r3, #0]
 800f376:	2b1f      	cmp	r3, #31
 800f378:	d80a      	bhi.n	800f390 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	2280      	movs	r2, #128	; 0x80
 800f37e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800f382:	2100      	movs	r1, #0
 800f384:	6878      	ldr	r0, [r7, #4]
 800f386:	f7fe ff50 	bl	800e22a <dir_sdi>
 800f38a:	4603      	mov	r3, r0
 800f38c:	75fb      	strb	r3, [r7, #23]
 800f38e:	e05b      	b.n	800f448 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f390:	463b      	mov	r3, r7
 800f392:	4619      	mov	r1, r3
 800f394:	6878      	ldr	r0, [r7, #4]
 800f396:	f7ff fdc3 	bl	800ef20 <create_name>
 800f39a:	4603      	mov	r3, r0
 800f39c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f39e:	7dfb      	ldrb	r3, [r7, #23]
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d14c      	bne.n	800f43e <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f3a4:	6878      	ldr	r0, [r7, #4]
 800f3a6:	f7ff fbb8 	bl	800eb1a <dir_find>
 800f3aa:	4603      	mov	r3, r0
 800f3ac:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f3b4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f3b6:	7dfb      	ldrb	r3, [r7, #23]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d01b      	beq.n	800f3f4 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f3bc:	7dfb      	ldrb	r3, [r7, #23]
 800f3be:	2b04      	cmp	r3, #4
 800f3c0:	d13f      	bne.n	800f442 <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 800f3c2:	7afb      	ldrb	r3, [r7, #11]
 800f3c4:	f003 0320 	and.w	r3, r3, #32
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d00b      	beq.n	800f3e4 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800f3cc:	7afb      	ldrb	r3, [r7, #11]
 800f3ce:	f003 0304 	and.w	r3, r3, #4
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d031      	beq.n	800f43a <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	2280      	movs	r2, #128	; 0x80
 800f3da:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 800f3de:	2300      	movs	r3, #0
 800f3e0:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 800f3e2:	e02e      	b.n	800f442 <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f3e4:	7afb      	ldrb	r3, [r7, #11]
 800f3e6:	f003 0304 	and.w	r3, r3, #4
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d129      	bne.n	800f442 <follow_path+0x11a>
 800f3ee:	2305      	movs	r3, #5
 800f3f0:	75fb      	strb	r3, [r7, #23]
				break;
 800f3f2:	e026      	b.n	800f442 <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f3f4:	7afb      	ldrb	r3, [r7, #11]
 800f3f6:	f003 0304 	and.w	r3, r3, #4
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d123      	bne.n	800f446 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f3fe:	693b      	ldr	r3, [r7, #16]
 800f400:	799b      	ldrb	r3, [r3, #6]
 800f402:	f003 0310 	and.w	r3, r3, #16
 800f406:	2b00      	cmp	r3, #0
 800f408:	d102      	bne.n	800f410 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 800f40a:	2305      	movs	r3, #5
 800f40c:	75fb      	strb	r3, [r7, #23]
 800f40e:	e01b      	b.n	800f448 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	695b      	ldr	r3, [r3, #20]
 800f41a:	68fa      	ldr	r2, [r7, #12]
 800f41c:	8992      	ldrh	r2, [r2, #12]
 800f41e:	fbb3 f0f2 	udiv	r0, r3, r2
 800f422:	fb02 f200 	mul.w	r2, r2, r0
 800f426:	1a9b      	subs	r3, r3, r2
 800f428:	440b      	add	r3, r1
 800f42a:	4619      	mov	r1, r3
 800f42c:	68f8      	ldr	r0, [r7, #12]
 800f42e:	f7ff f8a2 	bl	800e576 <ld_clust>
 800f432:	4602      	mov	r2, r0
 800f434:	693b      	ldr	r3, [r7, #16]
 800f436:	609a      	str	r2, [r3, #8]
 800f438:	e7aa      	b.n	800f390 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800f43a:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f43c:	e7a8      	b.n	800f390 <follow_path+0x68>
			if (res != FR_OK) break;
 800f43e:	bf00      	nop
 800f440:	e002      	b.n	800f448 <follow_path+0x120>
				break;
 800f442:	bf00      	nop
 800f444:	e000      	b.n	800f448 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f446:	bf00      	nop
			}
		}
	}

	return res;
 800f448:	7dfb      	ldrb	r3, [r7, #23]
}
 800f44a:	4618      	mov	r0, r3
 800f44c:	3718      	adds	r7, #24
 800f44e:	46bd      	mov	sp, r7
 800f450:	bd80      	pop	{r7, pc}

0800f452 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f452:	b480      	push	{r7}
 800f454:	b087      	sub	sp, #28
 800f456:	af00      	add	r7, sp, #0
 800f458:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f45a:	f04f 33ff 	mov.w	r3, #4294967295
 800f45e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d031      	beq.n	800f4cc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	617b      	str	r3, [r7, #20]
 800f46e:	e002      	b.n	800f476 <get_ldnumber+0x24>
 800f470:	697b      	ldr	r3, [r7, #20]
 800f472:	3301      	adds	r3, #1
 800f474:	617b      	str	r3, [r7, #20]
 800f476:	697b      	ldr	r3, [r7, #20]
 800f478:	781b      	ldrb	r3, [r3, #0]
 800f47a:	2b1f      	cmp	r3, #31
 800f47c:	d903      	bls.n	800f486 <get_ldnumber+0x34>
 800f47e:	697b      	ldr	r3, [r7, #20]
 800f480:	781b      	ldrb	r3, [r3, #0]
 800f482:	2b3a      	cmp	r3, #58	; 0x3a
 800f484:	d1f4      	bne.n	800f470 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f486:	697b      	ldr	r3, [r7, #20]
 800f488:	781b      	ldrb	r3, [r3, #0]
 800f48a:	2b3a      	cmp	r3, #58	; 0x3a
 800f48c:	d11c      	bne.n	800f4c8 <get_ldnumber+0x76>
			tp = *path;
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	1c5a      	adds	r2, r3, #1
 800f498:	60fa      	str	r2, [r7, #12]
 800f49a:	781b      	ldrb	r3, [r3, #0]
 800f49c:	3b30      	subs	r3, #48	; 0x30
 800f49e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f4a0:	68bb      	ldr	r3, [r7, #8]
 800f4a2:	2b09      	cmp	r3, #9
 800f4a4:	d80e      	bhi.n	800f4c4 <get_ldnumber+0x72>
 800f4a6:	68fa      	ldr	r2, [r7, #12]
 800f4a8:	697b      	ldr	r3, [r7, #20]
 800f4aa:	429a      	cmp	r2, r3
 800f4ac:	d10a      	bne.n	800f4c4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f4ae:	68bb      	ldr	r3, [r7, #8]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d107      	bne.n	800f4c4 <get_ldnumber+0x72>
					vol = (int)i;
 800f4b4:	68bb      	ldr	r3, [r7, #8]
 800f4b6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f4b8:	697b      	ldr	r3, [r7, #20]
 800f4ba:	3301      	adds	r3, #1
 800f4bc:	617b      	str	r3, [r7, #20]
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	697a      	ldr	r2, [r7, #20]
 800f4c2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f4c4:	693b      	ldr	r3, [r7, #16]
 800f4c6:	e002      	b.n	800f4ce <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f4c8:	2300      	movs	r3, #0
 800f4ca:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f4cc:	693b      	ldr	r3, [r7, #16]
}
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	371c      	adds	r7, #28
 800f4d2:	46bd      	mov	sp, r7
 800f4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d8:	4770      	bx	lr
	...

0800f4dc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f4dc:	b580      	push	{r7, lr}
 800f4de:	b082      	sub	sp, #8
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	6078      	str	r0, [r7, #4]
 800f4e4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	2200      	movs	r2, #0
 800f4ea:	70da      	strb	r2, [r3, #3]
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	f04f 32ff 	mov.w	r2, #4294967295
 800f4f2:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f4f4:	6839      	ldr	r1, [r7, #0]
 800f4f6:	6878      	ldr	r0, [r7, #4]
 800f4f8:	f7fe fabe 	bl	800da78 <move_window>
 800f4fc:	4603      	mov	r3, r0
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d001      	beq.n	800f506 <check_fs+0x2a>
 800f502:	2304      	movs	r3, #4
 800f504:	e038      	b.n	800f578 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	333c      	adds	r3, #60	; 0x3c
 800f50a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f50e:	4618      	mov	r0, r3
 800f510:	f7fe f802 	bl	800d518 <ld_word>
 800f514:	4603      	mov	r3, r0
 800f516:	461a      	mov	r2, r3
 800f518:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f51c:	429a      	cmp	r2, r3
 800f51e:	d001      	beq.n	800f524 <check_fs+0x48>
 800f520:	2303      	movs	r3, #3
 800f522:	e029      	b.n	800f578 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f52a:	2be9      	cmp	r3, #233	; 0xe9
 800f52c:	d009      	beq.n	800f542 <check_fs+0x66>
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f534:	2beb      	cmp	r3, #235	; 0xeb
 800f536:	d11e      	bne.n	800f576 <check_fs+0x9a>
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f53e:	2b90      	cmp	r3, #144	; 0x90
 800f540:	d119      	bne.n	800f576 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	333c      	adds	r3, #60	; 0x3c
 800f546:	3336      	adds	r3, #54	; 0x36
 800f548:	4618      	mov	r0, r3
 800f54a:	f7fd fffd 	bl	800d548 <ld_dword>
 800f54e:	4603      	mov	r3, r0
 800f550:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f554:	4a0a      	ldr	r2, [pc, #40]	; (800f580 <check_fs+0xa4>)
 800f556:	4293      	cmp	r3, r2
 800f558:	d101      	bne.n	800f55e <check_fs+0x82>
 800f55a:	2300      	movs	r3, #0
 800f55c:	e00c      	b.n	800f578 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	333c      	adds	r3, #60	; 0x3c
 800f562:	3352      	adds	r3, #82	; 0x52
 800f564:	4618      	mov	r0, r3
 800f566:	f7fd ffef 	bl	800d548 <ld_dword>
 800f56a:	4602      	mov	r2, r0
 800f56c:	4b05      	ldr	r3, [pc, #20]	; (800f584 <check_fs+0xa8>)
 800f56e:	429a      	cmp	r2, r3
 800f570:	d101      	bne.n	800f576 <check_fs+0x9a>
 800f572:	2300      	movs	r3, #0
 800f574:	e000      	b.n	800f578 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f576:	2302      	movs	r3, #2
}
 800f578:	4618      	mov	r0, r3
 800f57a:	3708      	adds	r7, #8
 800f57c:	46bd      	mov	sp, r7
 800f57e:	bd80      	pop	{r7, pc}
 800f580:	00544146 	.word	0x00544146
 800f584:	33544146 	.word	0x33544146

0800f588 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	b096      	sub	sp, #88	; 0x58
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	60f8      	str	r0, [r7, #12]
 800f590:	60b9      	str	r1, [r7, #8]
 800f592:	4613      	mov	r3, r2
 800f594:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f596:	68bb      	ldr	r3, [r7, #8]
 800f598:	2200      	movs	r2, #0
 800f59a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f59c:	68f8      	ldr	r0, [r7, #12]
 800f59e:	f7ff ff58 	bl	800f452 <get_ldnumber>
 800f5a2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f5a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	da01      	bge.n	800f5ae <find_volume+0x26>
 800f5aa:	230b      	movs	r3, #11
 800f5ac:	e26b      	b.n	800fa86 <find_volume+0x4fe>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f5ae:	4ab0      	ldr	r2, [pc, #704]	; (800f870 <find_volume+0x2e8>)
 800f5b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f5b6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d101      	bne.n	800f5c2 <find_volume+0x3a>
 800f5be:	230c      	movs	r3, #12
 800f5c0:	e261      	b.n	800fa86 <find_volume+0x4fe>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f5c2:	68bb      	ldr	r3, [r7, #8]
 800f5c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f5c6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f5c8:	79fb      	ldrb	r3, [r7, #7]
 800f5ca:	f023 0301 	bic.w	r3, r3, #1
 800f5ce:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5d2:	781b      	ldrb	r3, [r3, #0]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d01a      	beq.n	800f60e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800f5d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5da:	785b      	ldrb	r3, [r3, #1]
 800f5dc:	4618      	mov	r0, r3
 800f5de:	f7fd fefd 	bl	800d3dc <disk_status>
 800f5e2:	4603      	mov	r3, r0
 800f5e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f5e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f5ec:	f003 0301 	and.w	r3, r3, #1
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d10c      	bne.n	800f60e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f5f4:	79fb      	ldrb	r3, [r7, #7]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d007      	beq.n	800f60a <find_volume+0x82>
 800f5fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f5fe:	f003 0304 	and.w	r3, r3, #4
 800f602:	2b00      	cmp	r3, #0
 800f604:	d001      	beq.n	800f60a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800f606:	230a      	movs	r3, #10
 800f608:	e23d      	b.n	800fa86 <find_volume+0x4fe>
			}
			return FR_OK;				/* The file system object is valid */
 800f60a:	2300      	movs	r3, #0
 800f60c:	e23b      	b.n	800fa86 <find_volume+0x4fe>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f610:	2200      	movs	r2, #0
 800f612:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f616:	b2da      	uxtb	r2, r3
 800f618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f61a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f61c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f61e:	785b      	ldrb	r3, [r3, #1]
 800f620:	4618      	mov	r0, r3
 800f622:	f7fd fef5 	bl	800d410 <disk_initialize>
 800f626:	4603      	mov	r3, r0
 800f628:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f62c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f630:	f003 0301 	and.w	r3, r3, #1
 800f634:	2b00      	cmp	r3, #0
 800f636:	d001      	beq.n	800f63c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f638:	2303      	movs	r3, #3
 800f63a:	e224      	b.n	800fa86 <find_volume+0x4fe>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f63c:	79fb      	ldrb	r3, [r7, #7]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d007      	beq.n	800f652 <find_volume+0xca>
 800f642:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f646:	f003 0304 	and.w	r3, r3, #4
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d001      	beq.n	800f652 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800f64e:	230a      	movs	r3, #10
 800f650:	e219      	b.n	800fa86 <find_volume+0x4fe>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800f652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f654:	7858      	ldrb	r0, [r3, #1]
 800f656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f658:	330c      	adds	r3, #12
 800f65a:	461a      	mov	r2, r3
 800f65c:	2102      	movs	r1, #2
 800f65e:	f7fd ff3d 	bl	800d4dc <disk_ioctl>
 800f662:	4603      	mov	r3, r0
 800f664:	2b00      	cmp	r3, #0
 800f666:	d001      	beq.n	800f66c <find_volume+0xe4>
 800f668:	2301      	movs	r3, #1
 800f66a:	e20c      	b.n	800fa86 <find_volume+0x4fe>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800f66c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f66e:	899b      	ldrh	r3, [r3, #12]
 800f670:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f674:	d80d      	bhi.n	800f692 <find_volume+0x10a>
 800f676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f678:	899b      	ldrh	r3, [r3, #12]
 800f67a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f67e:	d308      	bcc.n	800f692 <find_volume+0x10a>
 800f680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f682:	899b      	ldrh	r3, [r3, #12]
 800f684:	461a      	mov	r2, r3
 800f686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f688:	899b      	ldrh	r3, [r3, #12]
 800f68a:	3b01      	subs	r3, #1
 800f68c:	4013      	ands	r3, r2
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d001      	beq.n	800f696 <find_volume+0x10e>
 800f692:	2301      	movs	r3, #1
 800f694:	e1f7      	b.n	800fa86 <find_volume+0x4fe>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f696:	2300      	movs	r3, #0
 800f698:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f69a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f69c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f69e:	f7ff ff1d 	bl	800f4dc <check_fs>
 800f6a2:	4603      	mov	r3, r0
 800f6a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f6a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f6ac:	2b02      	cmp	r3, #2
 800f6ae:	d14b      	bne.n	800f748 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	643b      	str	r3, [r7, #64]	; 0x40
 800f6b4:	e01f      	b.n	800f6f6 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f6b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6b8:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800f6bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6be:	011b      	lsls	r3, r3, #4
 800f6c0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f6c4:	4413      	add	r3, r2
 800f6c6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f6c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6ca:	3304      	adds	r3, #4
 800f6cc:	781b      	ldrb	r3, [r3, #0]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d006      	beq.n	800f6e0 <find_volume+0x158>
 800f6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6d4:	3308      	adds	r3, #8
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	f7fd ff36 	bl	800d548 <ld_dword>
 800f6dc:	4602      	mov	r2, r0
 800f6de:	e000      	b.n	800f6e2 <find_volume+0x15a>
 800f6e0:	2200      	movs	r2, #0
 800f6e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6e4:	009b      	lsls	r3, r3, #2
 800f6e6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800f6ea:	440b      	add	r3, r1
 800f6ec:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f6f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6f2:	3301      	adds	r3, #1
 800f6f4:	643b      	str	r3, [r7, #64]	; 0x40
 800f6f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6f8:	2b03      	cmp	r3, #3
 800f6fa:	d9dc      	bls.n	800f6b6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f6fc:	2300      	movs	r3, #0
 800f6fe:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800f700:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f702:	2b00      	cmp	r3, #0
 800f704:	d002      	beq.n	800f70c <find_volume+0x184>
 800f706:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f708:	3b01      	subs	r3, #1
 800f70a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f70c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f70e:	009b      	lsls	r3, r3, #2
 800f710:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f714:	4413      	add	r3, r2
 800f716:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f71a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f71c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d005      	beq.n	800f72e <find_volume+0x1a6>
 800f722:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f724:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f726:	f7ff fed9 	bl	800f4dc <check_fs>
 800f72a:	4603      	mov	r3, r0
 800f72c:	e000      	b.n	800f730 <find_volume+0x1a8>
 800f72e:	2303      	movs	r3, #3
 800f730:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f734:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f738:	2b01      	cmp	r3, #1
 800f73a:	d905      	bls.n	800f748 <find_volume+0x1c0>
 800f73c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f73e:	3301      	adds	r3, #1
 800f740:	643b      	str	r3, [r7, #64]	; 0x40
 800f742:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f744:	2b03      	cmp	r3, #3
 800f746:	d9e1      	bls.n	800f70c <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f748:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f74c:	2b04      	cmp	r3, #4
 800f74e:	d101      	bne.n	800f754 <find_volume+0x1cc>
 800f750:	2301      	movs	r3, #1
 800f752:	e198      	b.n	800fa86 <find_volume+0x4fe>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f754:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f758:	2b01      	cmp	r3, #1
 800f75a:	d901      	bls.n	800f760 <find_volume+0x1d8>
 800f75c:	230d      	movs	r3, #13
 800f75e:	e192      	b.n	800fa86 <find_volume+0x4fe>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f762:	333c      	adds	r3, #60	; 0x3c
 800f764:	330b      	adds	r3, #11
 800f766:	4618      	mov	r0, r3
 800f768:	f7fd fed6 	bl	800d518 <ld_word>
 800f76c:	4603      	mov	r3, r0
 800f76e:	461a      	mov	r2, r3
 800f770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f772:	899b      	ldrh	r3, [r3, #12]
 800f774:	429a      	cmp	r2, r3
 800f776:	d001      	beq.n	800f77c <find_volume+0x1f4>
 800f778:	230d      	movs	r3, #13
 800f77a:	e184      	b.n	800fa86 <find_volume+0x4fe>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f77c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f77e:	333c      	adds	r3, #60	; 0x3c
 800f780:	3316      	adds	r3, #22
 800f782:	4618      	mov	r0, r3
 800f784:	f7fd fec8 	bl	800d518 <ld_word>
 800f788:	4603      	mov	r3, r0
 800f78a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f78c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d106      	bne.n	800f7a0 <find_volume+0x218>
 800f792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f794:	333c      	adds	r3, #60	; 0x3c
 800f796:	3324      	adds	r3, #36	; 0x24
 800f798:	4618      	mov	r0, r3
 800f79a:	f7fd fed5 	bl	800d548 <ld_dword>
 800f79e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800f7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f7a4:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f7a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7a8:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800f7ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7ae:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f7b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7b2:	789b      	ldrb	r3, [r3, #2]
 800f7b4:	2b01      	cmp	r3, #1
 800f7b6:	d005      	beq.n	800f7c4 <find_volume+0x23c>
 800f7b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7ba:	789b      	ldrb	r3, [r3, #2]
 800f7bc:	2b02      	cmp	r3, #2
 800f7be:	d001      	beq.n	800f7c4 <find_volume+0x23c>
 800f7c0:	230d      	movs	r3, #13
 800f7c2:	e160      	b.n	800fa86 <find_volume+0x4fe>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7c6:	789b      	ldrb	r3, [r3, #2]
 800f7c8:	461a      	mov	r2, r3
 800f7ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f7cc:	fb02 f303 	mul.w	r3, r2, r3
 800f7d0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f7d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7d4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800f7d8:	b29a      	uxth	r2, r3
 800f7da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7dc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f7de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7e0:	895b      	ldrh	r3, [r3, #10]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d008      	beq.n	800f7f8 <find_volume+0x270>
 800f7e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7e8:	895b      	ldrh	r3, [r3, #10]
 800f7ea:	461a      	mov	r2, r3
 800f7ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7ee:	895b      	ldrh	r3, [r3, #10]
 800f7f0:	3b01      	subs	r3, #1
 800f7f2:	4013      	ands	r3, r2
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d001      	beq.n	800f7fc <find_volume+0x274>
 800f7f8:	230d      	movs	r3, #13
 800f7fa:	e144      	b.n	800fa86 <find_volume+0x4fe>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7fe:	333c      	adds	r3, #60	; 0x3c
 800f800:	3311      	adds	r3, #17
 800f802:	4618      	mov	r0, r3
 800f804:	f7fd fe88 	bl	800d518 <ld_word>
 800f808:	4603      	mov	r3, r0
 800f80a:	461a      	mov	r2, r3
 800f80c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f80e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f812:	891b      	ldrh	r3, [r3, #8]
 800f814:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f816:	8992      	ldrh	r2, [r2, #12]
 800f818:	0952      	lsrs	r2, r2, #5
 800f81a:	b292      	uxth	r2, r2
 800f81c:	fbb3 f1f2 	udiv	r1, r3, r2
 800f820:	fb02 f201 	mul.w	r2, r2, r1
 800f824:	1a9b      	subs	r3, r3, r2
 800f826:	b29b      	uxth	r3, r3
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d001      	beq.n	800f830 <find_volume+0x2a8>
 800f82c:	230d      	movs	r3, #13
 800f82e:	e12a      	b.n	800fa86 <find_volume+0x4fe>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f832:	333c      	adds	r3, #60	; 0x3c
 800f834:	3313      	adds	r3, #19
 800f836:	4618      	mov	r0, r3
 800f838:	f7fd fe6e 	bl	800d518 <ld_word>
 800f83c:	4603      	mov	r3, r0
 800f83e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f840:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f842:	2b00      	cmp	r3, #0
 800f844:	d106      	bne.n	800f854 <find_volume+0x2cc>
 800f846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f848:	333c      	adds	r3, #60	; 0x3c
 800f84a:	3320      	adds	r3, #32
 800f84c:	4618      	mov	r0, r3
 800f84e:	f7fd fe7b 	bl	800d548 <ld_dword>
 800f852:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f856:	333c      	adds	r3, #60	; 0x3c
 800f858:	330e      	adds	r3, #14
 800f85a:	4618      	mov	r0, r3
 800f85c:	f7fd fe5c 	bl	800d518 <ld_word>
 800f860:	4603      	mov	r3, r0
 800f862:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f864:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f866:	2b00      	cmp	r3, #0
 800f868:	d104      	bne.n	800f874 <find_volume+0x2ec>
 800f86a:	230d      	movs	r3, #13
 800f86c:	e10b      	b.n	800fa86 <find_volume+0x4fe>
 800f86e:	bf00      	nop
 800f870:	20013720 	.word	0x20013720

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f874:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f878:	4413      	add	r3, r2
 800f87a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f87c:	8911      	ldrh	r1, [r2, #8]
 800f87e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f880:	8992      	ldrh	r2, [r2, #12]
 800f882:	0952      	lsrs	r2, r2, #5
 800f884:	b292      	uxth	r2, r2
 800f886:	fbb1 f2f2 	udiv	r2, r1, r2
 800f88a:	b292      	uxth	r2, r2
 800f88c:	4413      	add	r3, r2
 800f88e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f890:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f894:	429a      	cmp	r2, r3
 800f896:	d201      	bcs.n	800f89c <find_volume+0x314>
 800f898:	230d      	movs	r3, #13
 800f89a:	e0f4      	b.n	800fa86 <find_volume+0x4fe>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f89c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8a0:	1ad3      	subs	r3, r2, r3
 800f8a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f8a4:	8952      	ldrh	r2, [r2, #10]
 800f8a6:	fbb3 f3f2 	udiv	r3, r3, r2
 800f8aa:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d101      	bne.n	800f8b6 <find_volume+0x32e>
 800f8b2:	230d      	movs	r3, #13
 800f8b4:	e0e7      	b.n	800fa86 <find_volume+0x4fe>
		fmt = FS_FAT32;
 800f8b6:	2303      	movs	r3, #3
 800f8b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8be:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f8c2:	4293      	cmp	r3, r2
 800f8c4:	d802      	bhi.n	800f8cc <find_volume+0x344>
 800f8c6:	2302      	movs	r3, #2
 800f8c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8ce:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f8d2:	4293      	cmp	r3, r2
 800f8d4:	d802      	bhi.n	800f8dc <find_volume+0x354>
 800f8d6:	2301      	movs	r3, #1
 800f8d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8de:	1c9a      	adds	r2, r3, #2
 800f8e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8e2:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800f8e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f8e8:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f8ea:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f8ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8ee:	441a      	add	r2, r3
 800f8f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8f2:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800f8f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8f8:	441a      	add	r2, r3
 800f8fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8fc:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800f8fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f902:	2b03      	cmp	r3, #3
 800f904:	d11e      	bne.n	800f944 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f908:	333c      	adds	r3, #60	; 0x3c
 800f90a:	332a      	adds	r3, #42	; 0x2a
 800f90c:	4618      	mov	r0, r3
 800f90e:	f7fd fe03 	bl	800d518 <ld_word>
 800f912:	4603      	mov	r3, r0
 800f914:	2b00      	cmp	r3, #0
 800f916:	d001      	beq.n	800f91c <find_volume+0x394>
 800f918:	230d      	movs	r3, #13
 800f91a:	e0b4      	b.n	800fa86 <find_volume+0x4fe>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f91c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f91e:	891b      	ldrh	r3, [r3, #8]
 800f920:	2b00      	cmp	r3, #0
 800f922:	d001      	beq.n	800f928 <find_volume+0x3a0>
 800f924:	230d      	movs	r3, #13
 800f926:	e0ae      	b.n	800fa86 <find_volume+0x4fe>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f92a:	333c      	adds	r3, #60	; 0x3c
 800f92c:	332c      	adds	r3, #44	; 0x2c
 800f92e:	4618      	mov	r0, r3
 800f930:	f7fd fe0a 	bl	800d548 <ld_dword>
 800f934:	4602      	mov	r2, r0
 800f936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f938:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f93a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f93c:	6a1b      	ldr	r3, [r3, #32]
 800f93e:	009b      	lsls	r3, r3, #2
 800f940:	647b      	str	r3, [r7, #68]	; 0x44
 800f942:	e01f      	b.n	800f984 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f946:	891b      	ldrh	r3, [r3, #8]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d101      	bne.n	800f950 <find_volume+0x3c8>
 800f94c:	230d      	movs	r3, #13
 800f94e:	e09a      	b.n	800fa86 <find_volume+0x4fe>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f954:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f956:	441a      	add	r2, r3
 800f958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f95a:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f95c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f960:	2b02      	cmp	r3, #2
 800f962:	d103      	bne.n	800f96c <find_volume+0x3e4>
 800f964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f966:	6a1b      	ldr	r3, [r3, #32]
 800f968:	005b      	lsls	r3, r3, #1
 800f96a:	e00a      	b.n	800f982 <find_volume+0x3fa>
 800f96c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f96e:	6a1a      	ldr	r2, [r3, #32]
 800f970:	4613      	mov	r3, r2
 800f972:	005b      	lsls	r3, r3, #1
 800f974:	4413      	add	r3, r2
 800f976:	085a      	lsrs	r2, r3, #1
 800f978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f97a:	6a1b      	ldr	r3, [r3, #32]
 800f97c:	f003 0301 	and.w	r3, r3, #1
 800f980:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f982:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f986:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f98a:	899b      	ldrh	r3, [r3, #12]
 800f98c:	4619      	mov	r1, r3
 800f98e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f990:	440b      	add	r3, r1
 800f992:	3b01      	subs	r3, #1
 800f994:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f996:	8989      	ldrh	r1, [r1, #12]
 800f998:	fbb3 f3f1 	udiv	r3, r3, r1
 800f99c:	429a      	cmp	r2, r3
 800f99e:	d201      	bcs.n	800f9a4 <find_volume+0x41c>
 800f9a0:	230d      	movs	r3, #13
 800f9a2:	e070      	b.n	800fa86 <find_volume+0x4fe>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f9a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9a6:	f04f 32ff 	mov.w	r2, #4294967295
 800f9aa:	619a      	str	r2, [r3, #24]
 800f9ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9ae:	699a      	ldr	r2, [r3, #24]
 800f9b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9b2:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800f9b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9b6:	2280      	movs	r2, #128	; 0x80
 800f9b8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f9ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f9be:	2b03      	cmp	r3, #3
 800f9c0:	d149      	bne.n	800fa56 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f9c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9c4:	333c      	adds	r3, #60	; 0x3c
 800f9c6:	3330      	adds	r3, #48	; 0x30
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	f7fd fda5 	bl	800d518 <ld_word>
 800f9ce:	4603      	mov	r3, r0
 800f9d0:	2b01      	cmp	r3, #1
 800f9d2:	d140      	bne.n	800fa56 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f9d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f9d6:	3301      	adds	r3, #1
 800f9d8:	4619      	mov	r1, r3
 800f9da:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f9dc:	f7fe f84c 	bl	800da78 <move_window>
 800f9e0:	4603      	mov	r3, r0
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d137      	bne.n	800fa56 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800f9e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9e8:	2200      	movs	r2, #0
 800f9ea:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9ee:	333c      	adds	r3, #60	; 0x3c
 800f9f0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	f7fd fd8f 	bl	800d518 <ld_word>
 800f9fa:	4603      	mov	r3, r0
 800f9fc:	461a      	mov	r2, r3
 800f9fe:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fa02:	429a      	cmp	r2, r3
 800fa04:	d127      	bne.n	800fa56 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800fa06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa08:	333c      	adds	r3, #60	; 0x3c
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	f7fd fd9c 	bl	800d548 <ld_dword>
 800fa10:	4602      	mov	r2, r0
 800fa12:	4b1f      	ldr	r3, [pc, #124]	; (800fa90 <find_volume+0x508>)
 800fa14:	429a      	cmp	r2, r3
 800fa16:	d11e      	bne.n	800fa56 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800fa18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa1a:	333c      	adds	r3, #60	; 0x3c
 800fa1c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800fa20:	4618      	mov	r0, r3
 800fa22:	f7fd fd91 	bl	800d548 <ld_dword>
 800fa26:	4602      	mov	r2, r0
 800fa28:	4b1a      	ldr	r3, [pc, #104]	; (800fa94 <find_volume+0x50c>)
 800fa2a:	429a      	cmp	r2, r3
 800fa2c:	d113      	bne.n	800fa56 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800fa2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa30:	333c      	adds	r3, #60	; 0x3c
 800fa32:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800fa36:	4618      	mov	r0, r3
 800fa38:	f7fd fd86 	bl	800d548 <ld_dword>
 800fa3c:	4602      	mov	r2, r0
 800fa3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa40:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800fa42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa44:	333c      	adds	r3, #60	; 0x3c
 800fa46:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	f7fd fd7c 	bl	800d548 <ld_dword>
 800fa50:	4602      	mov	r2, r0
 800fa52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa54:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800fa56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa58:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800fa5c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800fa5e:	4b0e      	ldr	r3, [pc, #56]	; (800fa98 <find_volume+0x510>)
 800fa60:	881b      	ldrh	r3, [r3, #0]
 800fa62:	3301      	adds	r3, #1
 800fa64:	b29a      	uxth	r2, r3
 800fa66:	4b0c      	ldr	r3, [pc, #48]	; (800fa98 <find_volume+0x510>)
 800fa68:	801a      	strh	r2, [r3, #0]
 800fa6a:	4b0b      	ldr	r3, [pc, #44]	; (800fa98 <find_volume+0x510>)
 800fa6c:	881a      	ldrh	r2, [r3, #0]
 800fa6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa70:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800fa72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa74:	4a09      	ldr	r2, [pc, #36]	; (800fa9c <find_volume+0x514>)
 800fa76:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 800fa78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa7a:	2200      	movs	r2, #0
 800fa7c:	61da      	str	r2, [r3, #28]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800fa7e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fa80:	f7fd ff92 	bl	800d9a8 <clear_lock>
#endif
	return FR_OK;
 800fa84:	2300      	movs	r3, #0
}
 800fa86:	4618      	mov	r0, r3
 800fa88:	3758      	adds	r7, #88	; 0x58
 800fa8a:	46bd      	mov	sp, r7
 800fa8c:	bd80      	pop	{r7, pc}
 800fa8e:	bf00      	nop
 800fa90:	41615252 	.word	0x41615252
 800fa94:	61417272 	.word	0x61417272
 800fa98:	20013724 	.word	0x20013724
 800fa9c:	20013748 	.word	0x20013748

0800faa0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800faa0:	b580      	push	{r7, lr}
 800faa2:	b084      	sub	sp, #16
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	6078      	str	r0, [r7, #4]
 800faa8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800faaa:	2309      	movs	r3, #9
 800faac:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d01c      	beq.n	800faee <validate+0x4e>
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d018      	beq.n	800faee <validate+0x4e>
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	781b      	ldrb	r3, [r3, #0]
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d013      	beq.n	800faee <validate+0x4e>
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	889a      	ldrh	r2, [r3, #4]
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	88db      	ldrh	r3, [r3, #6]
 800fad0:	429a      	cmp	r2, r3
 800fad2:	d10c      	bne.n	800faee <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	785b      	ldrb	r3, [r3, #1]
 800fada:	4618      	mov	r0, r3
 800fadc:	f7fd fc7e 	bl	800d3dc <disk_status>
 800fae0:	4603      	mov	r3, r0
 800fae2:	f003 0301 	and.w	r3, r3, #1
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d101      	bne.n	800faee <validate+0x4e>
			res = FR_OK;
 800faea:	2300      	movs	r3, #0
 800faec:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800faee:	7bfb      	ldrb	r3, [r7, #15]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d102      	bne.n	800fafa <validate+0x5a>
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	e000      	b.n	800fafc <validate+0x5c>
 800fafa:	2300      	movs	r3, #0
 800fafc:	683a      	ldr	r2, [r7, #0]
 800fafe:	6013      	str	r3, [r2, #0]
	return res;
 800fb00:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb02:	4618      	mov	r0, r3
 800fb04:	3710      	adds	r7, #16
 800fb06:	46bd      	mov	sp, r7
 800fb08:	bd80      	pop	{r7, pc}
	...

0800fb0c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800fb0c:	b580      	push	{r7, lr}
 800fb0e:	b088      	sub	sp, #32
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	60f8      	str	r0, [r7, #12]
 800fb14:	60b9      	str	r1, [r7, #8]
 800fb16:	4613      	mov	r3, r2
 800fb18:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800fb1a:	68bb      	ldr	r3, [r7, #8]
 800fb1c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800fb1e:	f107 0310 	add.w	r3, r7, #16
 800fb22:	4618      	mov	r0, r3
 800fb24:	f7ff fc95 	bl	800f452 <get_ldnumber>
 800fb28:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800fb2a:	69fb      	ldr	r3, [r7, #28]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	da01      	bge.n	800fb34 <f_mount+0x28>
 800fb30:	230b      	movs	r3, #11
 800fb32:	e02b      	b.n	800fb8c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800fb34:	4a17      	ldr	r2, [pc, #92]	; (800fb94 <f_mount+0x88>)
 800fb36:	69fb      	ldr	r3, [r7, #28]
 800fb38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb3c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800fb3e:	69bb      	ldr	r3, [r7, #24]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d005      	beq.n	800fb50 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800fb44:	69b8      	ldr	r0, [r7, #24]
 800fb46:	f7fd ff2f 	bl	800d9a8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800fb4a:	69bb      	ldr	r3, [r7, #24]
 800fb4c:	2200      	movs	r2, #0
 800fb4e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d002      	beq.n	800fb5c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	2200      	movs	r2, #0
 800fb5a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800fb5c:	68fa      	ldr	r2, [r7, #12]
 800fb5e:	490d      	ldr	r1, [pc, #52]	; (800fb94 <f_mount+0x88>)
 800fb60:	69fb      	ldr	r3, [r7, #28]
 800fb62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d002      	beq.n	800fb72 <f_mount+0x66>
 800fb6c:	79fb      	ldrb	r3, [r7, #7]
 800fb6e:	2b01      	cmp	r3, #1
 800fb70:	d001      	beq.n	800fb76 <f_mount+0x6a>
 800fb72:	2300      	movs	r3, #0
 800fb74:	e00a      	b.n	800fb8c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800fb76:	f107 010c 	add.w	r1, r7, #12
 800fb7a:	f107 0308 	add.w	r3, r7, #8
 800fb7e:	2200      	movs	r2, #0
 800fb80:	4618      	mov	r0, r3
 800fb82:	f7ff fd01 	bl	800f588 <find_volume>
 800fb86:	4603      	mov	r3, r0
 800fb88:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800fb8a:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	3720      	adds	r7, #32
 800fb90:	46bd      	mov	sp, r7
 800fb92:	bd80      	pop	{r7, pc}
 800fb94:	20013720 	.word	0x20013720

0800fb98 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b09a      	sub	sp, #104	; 0x68
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	60f8      	str	r0, [r7, #12]
 800fba0:	60b9      	str	r1, [r7, #8]
 800fba2:	4613      	mov	r3, r2
 800fba4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d101      	bne.n	800fbb0 <f_open+0x18>
 800fbac:	2309      	movs	r3, #9
 800fbae:	e1bb      	b.n	800ff28 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800fbb0:	79fb      	ldrb	r3, [r7, #7]
 800fbb2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fbb6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800fbb8:	79fa      	ldrb	r2, [r7, #7]
 800fbba:	f107 0114 	add.w	r1, r7, #20
 800fbbe:	f107 0308 	add.w	r3, r7, #8
 800fbc2:	4618      	mov	r0, r3
 800fbc4:	f7ff fce0 	bl	800f588 <find_volume>
 800fbc8:	4603      	mov	r3, r0
 800fbca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800fbce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	f040 819f 	bne.w	800ff16 <f_open+0x37e>
		dj.obj.fs = fs;
 800fbd8:	697b      	ldr	r3, [r7, #20]
 800fbda:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800fbdc:	68ba      	ldr	r2, [r7, #8]
 800fbde:	f107 0318 	add.w	r3, r7, #24
 800fbe2:	4611      	mov	r1, r2
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	f7ff fb9f 	bl	800f328 <follow_path>
 800fbea:	4603      	mov	r3, r0
 800fbec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800fbf0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d11a      	bne.n	800fc2e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800fbf8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800fbfc:	b25b      	sxtb	r3, r3
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	da03      	bge.n	800fc0a <f_open+0x72>
				res = FR_INVALID_NAME;
 800fc02:	2306      	movs	r3, #6
 800fc04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800fc08:	e011      	b.n	800fc2e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fc0a:	79fb      	ldrb	r3, [r7, #7]
 800fc0c:	f023 0301 	bic.w	r3, r3, #1
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	bf14      	ite	ne
 800fc14:	2301      	movne	r3, #1
 800fc16:	2300      	moveq	r3, #0
 800fc18:	b2db      	uxtb	r3, r3
 800fc1a:	461a      	mov	r2, r3
 800fc1c:	f107 0318 	add.w	r3, r7, #24
 800fc20:	4611      	mov	r1, r2
 800fc22:	4618      	mov	r0, r3
 800fc24:	f7fd fd78 	bl	800d718 <chk_lock>
 800fc28:	4603      	mov	r3, r0
 800fc2a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800fc2e:	79fb      	ldrb	r3, [r7, #7]
 800fc30:	f003 031c 	and.w	r3, r3, #28
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d07f      	beq.n	800fd38 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800fc38:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d017      	beq.n	800fc70 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800fc40:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fc44:	2b04      	cmp	r3, #4
 800fc46:	d10e      	bne.n	800fc66 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800fc48:	f7fd fdc2 	bl	800d7d0 <enq_lock>
 800fc4c:	4603      	mov	r3, r0
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d006      	beq.n	800fc60 <f_open+0xc8>
 800fc52:	f107 0318 	add.w	r3, r7, #24
 800fc56:	4618      	mov	r0, r3
 800fc58:	f7ff f820 	bl	800ec9c <dir_register>
 800fc5c:	4603      	mov	r3, r0
 800fc5e:	e000      	b.n	800fc62 <f_open+0xca>
 800fc60:	2312      	movs	r3, #18
 800fc62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800fc66:	79fb      	ldrb	r3, [r7, #7]
 800fc68:	f043 0308 	orr.w	r3, r3, #8
 800fc6c:	71fb      	strb	r3, [r7, #7]
 800fc6e:	e010      	b.n	800fc92 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800fc70:	7fbb      	ldrb	r3, [r7, #30]
 800fc72:	f003 0311 	and.w	r3, r3, #17
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d003      	beq.n	800fc82 <f_open+0xea>
					res = FR_DENIED;
 800fc7a:	2307      	movs	r3, #7
 800fc7c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800fc80:	e007      	b.n	800fc92 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800fc82:	79fb      	ldrb	r3, [r7, #7]
 800fc84:	f003 0304 	and.w	r3, r3, #4
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d002      	beq.n	800fc92 <f_open+0xfa>
 800fc8c:	2308      	movs	r3, #8
 800fc8e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800fc92:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d168      	bne.n	800fd6c <f_open+0x1d4>
 800fc9a:	79fb      	ldrb	r3, [r7, #7]
 800fc9c:	f003 0308 	and.w	r3, r3, #8
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d063      	beq.n	800fd6c <f_open+0x1d4>
				dw = GET_FATTIME();
 800fca4:	f7fd f94a 	bl	800cf3c <get_fattime>
 800fca8:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800fcaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcac:	330e      	adds	r3, #14
 800fcae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	f7fd fc87 	bl	800d5c4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800fcb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcb8:	3316      	adds	r3, #22
 800fcba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	f7fd fc81 	bl	800d5c4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800fcc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcc4:	330b      	adds	r3, #11
 800fcc6:	2220      	movs	r2, #32
 800fcc8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800fcca:	697b      	ldr	r3, [r7, #20]
 800fccc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fcce:	4611      	mov	r1, r2
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	f7fe fc50 	bl	800e576 <ld_clust>
 800fcd6:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800fcd8:	697b      	ldr	r3, [r7, #20]
 800fcda:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fcdc:	2200      	movs	r2, #0
 800fcde:	4618      	mov	r0, r3
 800fce0:	f7fe fc68 	bl	800e5b4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800fce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fce6:	331c      	adds	r3, #28
 800fce8:	2100      	movs	r1, #0
 800fcea:	4618      	mov	r0, r3
 800fcec:	f7fd fc6a 	bl	800d5c4 <st_dword>
					fs->wflag = 1;
 800fcf0:	697b      	ldr	r3, [r7, #20]
 800fcf2:	2201      	movs	r2, #1
 800fcf4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800fcf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d037      	beq.n	800fd6c <f_open+0x1d4>
						dw = fs->winsect;
 800fcfc:	697b      	ldr	r3, [r7, #20]
 800fcfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd00:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800fd02:	f107 0318 	add.w	r3, r7, #24
 800fd06:	2200      	movs	r2, #0
 800fd08:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	f7fe f958 	bl	800dfc0 <remove_chain>
 800fd10:	4603      	mov	r3, r0
 800fd12:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800fd16:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d126      	bne.n	800fd6c <f_open+0x1d4>
							res = move_window(fs, dw);
 800fd1e:	697b      	ldr	r3, [r7, #20]
 800fd20:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fd22:	4618      	mov	r0, r3
 800fd24:	f7fd fea8 	bl	800da78 <move_window>
 800fd28:	4603      	mov	r3, r0
 800fd2a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800fd2e:	697b      	ldr	r3, [r7, #20]
 800fd30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fd32:	3a01      	subs	r2, #1
 800fd34:	615a      	str	r2, [r3, #20]
 800fd36:	e019      	b.n	800fd6c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800fd38:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d115      	bne.n	800fd6c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800fd40:	7fbb      	ldrb	r3, [r7, #30]
 800fd42:	f003 0310 	and.w	r3, r3, #16
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d003      	beq.n	800fd52 <f_open+0x1ba>
					res = FR_NO_FILE;
 800fd4a:	2304      	movs	r3, #4
 800fd4c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800fd50:	e00c      	b.n	800fd6c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800fd52:	79fb      	ldrb	r3, [r7, #7]
 800fd54:	f003 0302 	and.w	r3, r3, #2
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d007      	beq.n	800fd6c <f_open+0x1d4>
 800fd5c:	7fbb      	ldrb	r3, [r7, #30]
 800fd5e:	f003 0301 	and.w	r3, r3, #1
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d002      	beq.n	800fd6c <f_open+0x1d4>
						res = FR_DENIED;
 800fd66:	2307      	movs	r3, #7
 800fd68:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800fd6c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d128      	bne.n	800fdc6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800fd74:	79fb      	ldrb	r3, [r7, #7]
 800fd76:	f003 0308 	and.w	r3, r3, #8
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d003      	beq.n	800fd86 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800fd7e:	79fb      	ldrb	r3, [r7, #7]
 800fd80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd84:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800fd86:	697b      	ldr	r3, [r7, #20]
 800fd88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800fd8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fd94:	79fb      	ldrb	r3, [r7, #7]
 800fd96:	f023 0301 	bic.w	r3, r3, #1
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	bf14      	ite	ne
 800fd9e:	2301      	movne	r3, #1
 800fda0:	2300      	moveq	r3, #0
 800fda2:	b2db      	uxtb	r3, r3
 800fda4:	461a      	mov	r2, r3
 800fda6:	f107 0318 	add.w	r3, r7, #24
 800fdaa:	4611      	mov	r1, r2
 800fdac:	4618      	mov	r0, r3
 800fdae:	f7fd fd31 	bl	800d814 <inc_lock>
 800fdb2:	4602      	mov	r2, r0
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	691b      	ldr	r3, [r3, #16]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d102      	bne.n	800fdc6 <f_open+0x22e>
 800fdc0:	2302      	movs	r3, #2
 800fdc2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800fdc6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	f040 80a3 	bne.w	800ff16 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800fdd0:	697b      	ldr	r3, [r7, #20]
 800fdd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fdd4:	4611      	mov	r1, r2
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	f7fe fbcd 	bl	800e576 <ld_clust>
 800fddc:	4602      	mov	r2, r0
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800fde2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fde4:	331c      	adds	r3, #28
 800fde6:	4618      	mov	r0, r3
 800fde8:	f7fd fbae 	bl	800d548 <ld_dword>
 800fdec:	4602      	mov	r2, r0
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	2200      	movs	r2, #0
 800fdf6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800fdf8:	697a      	ldr	r2, [r7, #20]
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800fdfe:	697b      	ldr	r3, [r7, #20]
 800fe00:	88da      	ldrh	r2, [r3, #6]
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	79fa      	ldrb	r2, [r7, #7]
 800fe0a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	2200      	movs	r2, #0
 800fe10:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	2200      	movs	r2, #0
 800fe16:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	2200      	movs	r2, #0
 800fe1c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	3330      	adds	r3, #48	; 0x30
 800fe22:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fe26:	2100      	movs	r1, #0
 800fe28:	4618      	mov	r0, r3
 800fe2a:	f7fd fc18 	bl	800d65e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800fe2e:	79fb      	ldrb	r3, [r7, #7]
 800fe30:	f003 0320 	and.w	r3, r3, #32
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d06e      	beq.n	800ff16 <f_open+0x37e>
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	68db      	ldr	r3, [r3, #12]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d06a      	beq.n	800ff16 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	68da      	ldr	r2, [r3, #12]
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800fe48:	697b      	ldr	r3, [r7, #20]
 800fe4a:	895b      	ldrh	r3, [r3, #10]
 800fe4c:	461a      	mov	r2, r3
 800fe4e:	697b      	ldr	r3, [r7, #20]
 800fe50:	899b      	ldrh	r3, [r3, #12]
 800fe52:	fb03 f302 	mul.w	r3, r3, r2
 800fe56:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	689b      	ldr	r3, [r3, #8]
 800fe5c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	68db      	ldr	r3, [r3, #12]
 800fe62:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fe64:	e016      	b.n	800fe94 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	f7fd fec1 	bl	800dbf2 <get_fat>
 800fe70:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800fe72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fe74:	2b01      	cmp	r3, #1
 800fe76:	d802      	bhi.n	800fe7e <f_open+0x2e6>
 800fe78:	2302      	movs	r3, #2
 800fe7a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800fe7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fe80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe84:	d102      	bne.n	800fe8c <f_open+0x2f4>
 800fe86:	2301      	movs	r3, #1
 800fe88:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fe8c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fe8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe90:	1ad3      	subs	r3, r2, r3
 800fe92:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fe94:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d103      	bne.n	800fea4 <f_open+0x30c>
 800fe9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fe9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fea0:	429a      	cmp	r2, r3
 800fea2:	d8e0      	bhi.n	800fe66 <f_open+0x2ce>
				}
				fp->clust = clst;
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fea8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800feaa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d131      	bne.n	800ff16 <f_open+0x37e>
 800feb2:	697b      	ldr	r3, [r7, #20]
 800feb4:	899b      	ldrh	r3, [r3, #12]
 800feb6:	461a      	mov	r2, r3
 800feb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800feba:	fbb3 f1f2 	udiv	r1, r3, r2
 800febe:	fb02 f201 	mul.w	r2, r2, r1
 800fec2:	1a9b      	subs	r3, r3, r2
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d026      	beq.n	800ff16 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800fec8:	697b      	ldr	r3, [r7, #20]
 800feca:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800fecc:	4618      	mov	r0, r3
 800fece:	f7fd fe71 	bl	800dbb4 <clust2sect>
 800fed2:	64f8      	str	r0, [r7, #76]	; 0x4c
 800fed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d103      	bne.n	800fee2 <f_open+0x34a>
						res = FR_INT_ERR;
 800feda:	2302      	movs	r3, #2
 800fedc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800fee0:	e019      	b.n	800ff16 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800fee2:	697b      	ldr	r3, [r7, #20]
 800fee4:	899b      	ldrh	r3, [r3, #12]
 800fee6:	461a      	mov	r2, r3
 800fee8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800feea:	fbb3 f2f2 	udiv	r2, r3, r2
 800feee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fef0:	441a      	add	r2, r3
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800fef6:	697b      	ldr	r3, [r7, #20]
 800fef8:	7858      	ldrb	r0, [r3, #1]
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	6a1a      	ldr	r2, [r3, #32]
 800ff04:	2301      	movs	r3, #1
 800ff06:	f7fd faa9 	bl	800d45c <disk_read>
 800ff0a:	4603      	mov	r3, r0
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d002      	beq.n	800ff16 <f_open+0x37e>
 800ff10:	2301      	movs	r3, #1
 800ff12:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ff16:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d002      	beq.n	800ff24 <f_open+0x38c>
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	2200      	movs	r2, #0
 800ff22:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ff24:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800ff28:	4618      	mov	r0, r3
 800ff2a:	3768      	adds	r7, #104	; 0x68
 800ff2c:	46bd      	mov	sp, r7
 800ff2e:	bd80      	pop	{r7, pc}

0800ff30 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800ff30:	b580      	push	{r7, lr}
 800ff32:	b08e      	sub	sp, #56	; 0x38
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	60f8      	str	r0, [r7, #12]
 800ff38:	60b9      	str	r1, [r7, #8]
 800ff3a:	607a      	str	r2, [r7, #4]
 800ff3c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800ff3e:	68bb      	ldr	r3, [r7, #8]
 800ff40:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800ff42:	683b      	ldr	r3, [r7, #0]
 800ff44:	2200      	movs	r2, #0
 800ff46:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	f107 0214 	add.w	r2, r7, #20
 800ff4e:	4611      	mov	r1, r2
 800ff50:	4618      	mov	r0, r3
 800ff52:	f7ff fda5 	bl	800faa0 <validate>
 800ff56:	4603      	mov	r3, r0
 800ff58:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ff5c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d107      	bne.n	800ff74 <f_read+0x44>
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	7d5b      	ldrb	r3, [r3, #21]
 800ff68:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ff6c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d002      	beq.n	800ff7a <f_read+0x4a>
 800ff74:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ff78:	e135      	b.n	80101e6 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	7d1b      	ldrb	r3, [r3, #20]
 800ff7e:	f003 0301 	and.w	r3, r3, #1
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d101      	bne.n	800ff8a <f_read+0x5a>
 800ff86:	2307      	movs	r3, #7
 800ff88:	e12d      	b.n	80101e6 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	68da      	ldr	r2, [r3, #12]
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	699b      	ldr	r3, [r3, #24]
 800ff92:	1ad3      	subs	r3, r2, r3
 800ff94:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800ff96:	687a      	ldr	r2, [r7, #4]
 800ff98:	6a3b      	ldr	r3, [r7, #32]
 800ff9a:	429a      	cmp	r2, r3
 800ff9c:	f240 811e 	bls.w	80101dc <f_read+0x2ac>
 800ffa0:	6a3b      	ldr	r3, [r7, #32]
 800ffa2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800ffa4:	e11a      	b.n	80101dc <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	699b      	ldr	r3, [r3, #24]
 800ffaa:	697a      	ldr	r2, [r7, #20]
 800ffac:	8992      	ldrh	r2, [r2, #12]
 800ffae:	fbb3 f1f2 	udiv	r1, r3, r2
 800ffb2:	fb02 f201 	mul.w	r2, r2, r1
 800ffb6:	1a9b      	subs	r3, r3, r2
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	f040 80d5 	bne.w	8010168 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	699b      	ldr	r3, [r3, #24]
 800ffc2:	697a      	ldr	r2, [r7, #20]
 800ffc4:	8992      	ldrh	r2, [r2, #12]
 800ffc6:	fbb3 f3f2 	udiv	r3, r3, r2
 800ffca:	697a      	ldr	r2, [r7, #20]
 800ffcc:	8952      	ldrh	r2, [r2, #10]
 800ffce:	3a01      	subs	r2, #1
 800ffd0:	4013      	ands	r3, r2
 800ffd2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800ffd4:	69fb      	ldr	r3, [r7, #28]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d12f      	bne.n	801003a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	699b      	ldr	r3, [r3, #24]
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d103      	bne.n	800ffea <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	689b      	ldr	r3, [r3, #8]
 800ffe6:	633b      	str	r3, [r7, #48]	; 0x30
 800ffe8:	e013      	b.n	8010012 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d007      	beq.n	8010002 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	699b      	ldr	r3, [r3, #24]
 800fff6:	4619      	mov	r1, r3
 800fff8:	68f8      	ldr	r0, [r7, #12]
 800fffa:	f7fe f8de 	bl	800e1ba <clmt_clust>
 800fffe:	6338      	str	r0, [r7, #48]	; 0x30
 8010000:	e007      	b.n	8010012 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8010002:	68fa      	ldr	r2, [r7, #12]
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	69db      	ldr	r3, [r3, #28]
 8010008:	4619      	mov	r1, r3
 801000a:	4610      	mov	r0, r2
 801000c:	f7fd fdf1 	bl	800dbf2 <get_fat>
 8010010:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8010012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010014:	2b01      	cmp	r3, #1
 8010016:	d804      	bhi.n	8010022 <f_read+0xf2>
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	2202      	movs	r2, #2
 801001c:	755a      	strb	r2, [r3, #21]
 801001e:	2302      	movs	r3, #2
 8010020:	e0e1      	b.n	80101e6 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010028:	d104      	bne.n	8010034 <f_read+0x104>
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	2201      	movs	r2, #1
 801002e:	755a      	strb	r2, [r3, #21]
 8010030:	2301      	movs	r3, #1
 8010032:	e0d8      	b.n	80101e6 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010038:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801003a:	697a      	ldr	r2, [r7, #20]
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	69db      	ldr	r3, [r3, #28]
 8010040:	4619      	mov	r1, r3
 8010042:	4610      	mov	r0, r2
 8010044:	f7fd fdb6 	bl	800dbb4 <clust2sect>
 8010048:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801004a:	69bb      	ldr	r3, [r7, #24]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d104      	bne.n	801005a <f_read+0x12a>
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	2202      	movs	r2, #2
 8010054:	755a      	strb	r2, [r3, #21]
 8010056:	2302      	movs	r3, #2
 8010058:	e0c5      	b.n	80101e6 <f_read+0x2b6>
			sect += csect;
 801005a:	69ba      	ldr	r2, [r7, #24]
 801005c:	69fb      	ldr	r3, [r7, #28]
 801005e:	4413      	add	r3, r2
 8010060:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8010062:	697b      	ldr	r3, [r7, #20]
 8010064:	899b      	ldrh	r3, [r3, #12]
 8010066:	461a      	mov	r2, r3
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	fbb3 f3f2 	udiv	r3, r3, r2
 801006e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8010070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010072:	2b00      	cmp	r3, #0
 8010074:	d041      	beq.n	80100fa <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010076:	69fa      	ldr	r2, [r7, #28]
 8010078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801007a:	4413      	add	r3, r2
 801007c:	697a      	ldr	r2, [r7, #20]
 801007e:	8952      	ldrh	r2, [r2, #10]
 8010080:	4293      	cmp	r3, r2
 8010082:	d905      	bls.n	8010090 <f_read+0x160>
					cc = fs->csize - csect;
 8010084:	697b      	ldr	r3, [r7, #20]
 8010086:	895b      	ldrh	r3, [r3, #10]
 8010088:	461a      	mov	r2, r3
 801008a:	69fb      	ldr	r3, [r7, #28]
 801008c:	1ad3      	subs	r3, r2, r3
 801008e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010090:	697b      	ldr	r3, [r7, #20]
 8010092:	7858      	ldrb	r0, [r3, #1]
 8010094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010096:	69ba      	ldr	r2, [r7, #24]
 8010098:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801009a:	f7fd f9df 	bl	800d45c <disk_read>
 801009e:	4603      	mov	r3, r0
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d004      	beq.n	80100ae <f_read+0x17e>
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	2201      	movs	r2, #1
 80100a8:	755a      	strb	r2, [r3, #21]
 80100aa:	2301      	movs	r3, #1
 80100ac:	e09b      	b.n	80101e6 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	7d1b      	ldrb	r3, [r3, #20]
 80100b2:	b25b      	sxtb	r3, r3
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	da18      	bge.n	80100ea <f_read+0x1ba>
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	6a1a      	ldr	r2, [r3, #32]
 80100bc:	69bb      	ldr	r3, [r7, #24]
 80100be:	1ad3      	subs	r3, r2, r3
 80100c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80100c2:	429a      	cmp	r2, r3
 80100c4:	d911      	bls.n	80100ea <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	6a1a      	ldr	r2, [r3, #32]
 80100ca:	69bb      	ldr	r3, [r7, #24]
 80100cc:	1ad3      	subs	r3, r2, r3
 80100ce:	697a      	ldr	r2, [r7, #20]
 80100d0:	8992      	ldrh	r2, [r2, #12]
 80100d2:	fb02 f303 	mul.w	r3, r2, r3
 80100d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80100d8:	18d0      	adds	r0, r2, r3
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80100e0:	697b      	ldr	r3, [r7, #20]
 80100e2:	899b      	ldrh	r3, [r3, #12]
 80100e4:	461a      	mov	r2, r3
 80100e6:	f7fd fa99 	bl	800d61c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80100ea:	697b      	ldr	r3, [r7, #20]
 80100ec:	899b      	ldrh	r3, [r3, #12]
 80100ee:	461a      	mov	r2, r3
 80100f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100f2:	fb02 f303 	mul.w	r3, r2, r3
 80100f6:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80100f8:	e05c      	b.n	80101b4 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	6a1b      	ldr	r3, [r3, #32]
 80100fe:	69ba      	ldr	r2, [r7, #24]
 8010100:	429a      	cmp	r2, r3
 8010102:	d02e      	beq.n	8010162 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	7d1b      	ldrb	r3, [r3, #20]
 8010108:	b25b      	sxtb	r3, r3
 801010a:	2b00      	cmp	r3, #0
 801010c:	da18      	bge.n	8010140 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801010e:	697b      	ldr	r3, [r7, #20]
 8010110:	7858      	ldrb	r0, [r3, #1]
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	6a1a      	ldr	r2, [r3, #32]
 801011c:	2301      	movs	r3, #1
 801011e:	f7fd f9bd 	bl	800d49c <disk_write>
 8010122:	4603      	mov	r3, r0
 8010124:	2b00      	cmp	r3, #0
 8010126:	d004      	beq.n	8010132 <f_read+0x202>
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	2201      	movs	r2, #1
 801012c:	755a      	strb	r2, [r3, #21]
 801012e:	2301      	movs	r3, #1
 8010130:	e059      	b.n	80101e6 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	7d1b      	ldrb	r3, [r3, #20]
 8010136:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801013a:	b2da      	uxtb	r2, r3
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010140:	697b      	ldr	r3, [r7, #20]
 8010142:	7858      	ldrb	r0, [r3, #1]
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801014a:	2301      	movs	r3, #1
 801014c:	69ba      	ldr	r2, [r7, #24]
 801014e:	f7fd f985 	bl	800d45c <disk_read>
 8010152:	4603      	mov	r3, r0
 8010154:	2b00      	cmp	r3, #0
 8010156:	d004      	beq.n	8010162 <f_read+0x232>
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	2201      	movs	r2, #1
 801015c:	755a      	strb	r2, [r3, #21]
 801015e:	2301      	movs	r3, #1
 8010160:	e041      	b.n	80101e6 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	69ba      	ldr	r2, [r7, #24]
 8010166:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010168:	697b      	ldr	r3, [r7, #20]
 801016a:	899b      	ldrh	r3, [r3, #12]
 801016c:	4618      	mov	r0, r3
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	699b      	ldr	r3, [r3, #24]
 8010172:	697a      	ldr	r2, [r7, #20]
 8010174:	8992      	ldrh	r2, [r2, #12]
 8010176:	fbb3 f1f2 	udiv	r1, r3, r2
 801017a:	fb02 f201 	mul.w	r2, r2, r1
 801017e:	1a9b      	subs	r3, r3, r2
 8010180:	1ac3      	subs	r3, r0, r3
 8010182:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8010184:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	429a      	cmp	r2, r3
 801018a:	d901      	bls.n	8010190 <f_read+0x260>
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	699b      	ldr	r3, [r3, #24]
 801019a:	697a      	ldr	r2, [r7, #20]
 801019c:	8992      	ldrh	r2, [r2, #12]
 801019e:	fbb3 f0f2 	udiv	r0, r3, r2
 80101a2:	fb02 f200 	mul.w	r2, r2, r0
 80101a6:	1a9b      	subs	r3, r3, r2
 80101a8:	440b      	add	r3, r1
 80101aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80101ac:	4619      	mov	r1, r3
 80101ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80101b0:	f7fd fa34 	bl	800d61c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80101b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80101b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101b8:	4413      	add	r3, r2
 80101ba:	627b      	str	r3, [r7, #36]	; 0x24
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	699a      	ldr	r2, [r3, #24]
 80101c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101c2:	441a      	add	r2, r3
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	619a      	str	r2, [r3, #24]
 80101c8:	683b      	ldr	r3, [r7, #0]
 80101ca:	681a      	ldr	r2, [r3, #0]
 80101cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101ce:	441a      	add	r2, r3
 80101d0:	683b      	ldr	r3, [r7, #0]
 80101d2:	601a      	str	r2, [r3, #0]
 80101d4:	687a      	ldr	r2, [r7, #4]
 80101d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101d8:	1ad3      	subs	r3, r2, r3
 80101da:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	2b00      	cmp	r3, #0
 80101e0:	f47f aee1 	bne.w	800ffa6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80101e4:	2300      	movs	r3, #0
}
 80101e6:	4618      	mov	r0, r3
 80101e8:	3738      	adds	r7, #56	; 0x38
 80101ea:	46bd      	mov	sp, r7
 80101ec:	bd80      	pop	{r7, pc}

080101ee <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80101ee:	b580      	push	{r7, lr}
 80101f0:	b08c      	sub	sp, #48	; 0x30
 80101f2:	af00      	add	r7, sp, #0
 80101f4:	60f8      	str	r0, [r7, #12]
 80101f6:	60b9      	str	r1, [r7, #8]
 80101f8:	607a      	str	r2, [r7, #4]
 80101fa:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80101fc:	68bb      	ldr	r3, [r7, #8]
 80101fe:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8010200:	683b      	ldr	r3, [r7, #0]
 8010202:	2200      	movs	r2, #0
 8010204:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	f107 0210 	add.w	r2, r7, #16
 801020c:	4611      	mov	r1, r2
 801020e:	4618      	mov	r0, r3
 8010210:	f7ff fc46 	bl	800faa0 <validate>
 8010214:	4603      	mov	r3, r0
 8010216:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801021a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801021e:	2b00      	cmp	r3, #0
 8010220:	d107      	bne.n	8010232 <f_write+0x44>
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	7d5b      	ldrb	r3, [r3, #21]
 8010226:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801022a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801022e:	2b00      	cmp	r3, #0
 8010230:	d002      	beq.n	8010238 <f_write+0x4a>
 8010232:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010236:	e16a      	b.n	801050e <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	7d1b      	ldrb	r3, [r3, #20]
 801023c:	f003 0302 	and.w	r3, r3, #2
 8010240:	2b00      	cmp	r3, #0
 8010242:	d101      	bne.n	8010248 <f_write+0x5a>
 8010244:	2307      	movs	r3, #7
 8010246:	e162      	b.n	801050e <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	699a      	ldr	r2, [r3, #24]
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	441a      	add	r2, r3
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	699b      	ldr	r3, [r3, #24]
 8010254:	429a      	cmp	r2, r3
 8010256:	f080 814c 	bcs.w	80104f2 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	699b      	ldr	r3, [r3, #24]
 801025e:	43db      	mvns	r3, r3
 8010260:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8010262:	e146      	b.n	80104f2 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	699b      	ldr	r3, [r3, #24]
 8010268:	693a      	ldr	r2, [r7, #16]
 801026a:	8992      	ldrh	r2, [r2, #12]
 801026c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010270:	fb02 f201 	mul.w	r2, r2, r1
 8010274:	1a9b      	subs	r3, r3, r2
 8010276:	2b00      	cmp	r3, #0
 8010278:	f040 80f1 	bne.w	801045e <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	699b      	ldr	r3, [r3, #24]
 8010280:	693a      	ldr	r2, [r7, #16]
 8010282:	8992      	ldrh	r2, [r2, #12]
 8010284:	fbb3 f3f2 	udiv	r3, r3, r2
 8010288:	693a      	ldr	r2, [r7, #16]
 801028a:	8952      	ldrh	r2, [r2, #10]
 801028c:	3a01      	subs	r2, #1
 801028e:	4013      	ands	r3, r2
 8010290:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8010292:	69bb      	ldr	r3, [r7, #24]
 8010294:	2b00      	cmp	r3, #0
 8010296:	d143      	bne.n	8010320 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	699b      	ldr	r3, [r3, #24]
 801029c:	2b00      	cmp	r3, #0
 801029e:	d10c      	bne.n	80102ba <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	689b      	ldr	r3, [r3, #8]
 80102a4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80102a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d11a      	bne.n	80102e2 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	2100      	movs	r1, #0
 80102b0:	4618      	mov	r0, r3
 80102b2:	f7fd feea 	bl	800e08a <create_chain>
 80102b6:	62b8      	str	r0, [r7, #40]	; 0x28
 80102b8:	e013      	b.n	80102e2 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d007      	beq.n	80102d2 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	699b      	ldr	r3, [r3, #24]
 80102c6:	4619      	mov	r1, r3
 80102c8:	68f8      	ldr	r0, [r7, #12]
 80102ca:	f7fd ff76 	bl	800e1ba <clmt_clust>
 80102ce:	62b8      	str	r0, [r7, #40]	; 0x28
 80102d0:	e007      	b.n	80102e2 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80102d2:	68fa      	ldr	r2, [r7, #12]
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	69db      	ldr	r3, [r3, #28]
 80102d8:	4619      	mov	r1, r3
 80102da:	4610      	mov	r0, r2
 80102dc:	f7fd fed5 	bl	800e08a <create_chain>
 80102e0:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80102e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	f000 8109 	beq.w	80104fc <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80102ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102ec:	2b01      	cmp	r3, #1
 80102ee:	d104      	bne.n	80102fa <f_write+0x10c>
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	2202      	movs	r2, #2
 80102f4:	755a      	strb	r2, [r3, #21]
 80102f6:	2302      	movs	r3, #2
 80102f8:	e109      	b.n	801050e <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80102fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010300:	d104      	bne.n	801030c <f_write+0x11e>
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	2201      	movs	r2, #1
 8010306:	755a      	strb	r2, [r3, #21]
 8010308:	2301      	movs	r3, #1
 801030a:	e100      	b.n	801050e <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010310:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	689b      	ldr	r3, [r3, #8]
 8010316:	2b00      	cmp	r3, #0
 8010318:	d102      	bne.n	8010320 <f_write+0x132>
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801031e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	7d1b      	ldrb	r3, [r3, #20]
 8010324:	b25b      	sxtb	r3, r3
 8010326:	2b00      	cmp	r3, #0
 8010328:	da18      	bge.n	801035c <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801032a:	693b      	ldr	r3, [r7, #16]
 801032c:	7858      	ldrb	r0, [r3, #1]
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	6a1a      	ldr	r2, [r3, #32]
 8010338:	2301      	movs	r3, #1
 801033a:	f7fd f8af 	bl	800d49c <disk_write>
 801033e:	4603      	mov	r3, r0
 8010340:	2b00      	cmp	r3, #0
 8010342:	d004      	beq.n	801034e <f_write+0x160>
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	2201      	movs	r2, #1
 8010348:	755a      	strb	r2, [r3, #21]
 801034a:	2301      	movs	r3, #1
 801034c:	e0df      	b.n	801050e <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	7d1b      	ldrb	r3, [r3, #20]
 8010352:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010356:	b2da      	uxtb	r2, r3
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801035c:	693a      	ldr	r2, [r7, #16]
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	69db      	ldr	r3, [r3, #28]
 8010362:	4619      	mov	r1, r3
 8010364:	4610      	mov	r0, r2
 8010366:	f7fd fc25 	bl	800dbb4 <clust2sect>
 801036a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801036c:	697b      	ldr	r3, [r7, #20]
 801036e:	2b00      	cmp	r3, #0
 8010370:	d104      	bne.n	801037c <f_write+0x18e>
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	2202      	movs	r2, #2
 8010376:	755a      	strb	r2, [r3, #21]
 8010378:	2302      	movs	r3, #2
 801037a:	e0c8      	b.n	801050e <f_write+0x320>
			sect += csect;
 801037c:	697a      	ldr	r2, [r7, #20]
 801037e:	69bb      	ldr	r3, [r7, #24]
 8010380:	4413      	add	r3, r2
 8010382:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8010384:	693b      	ldr	r3, [r7, #16]
 8010386:	899b      	ldrh	r3, [r3, #12]
 8010388:	461a      	mov	r2, r3
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	fbb3 f3f2 	udiv	r3, r3, r2
 8010390:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8010392:	6a3b      	ldr	r3, [r7, #32]
 8010394:	2b00      	cmp	r3, #0
 8010396:	d043      	beq.n	8010420 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010398:	69ba      	ldr	r2, [r7, #24]
 801039a:	6a3b      	ldr	r3, [r7, #32]
 801039c:	4413      	add	r3, r2
 801039e:	693a      	ldr	r2, [r7, #16]
 80103a0:	8952      	ldrh	r2, [r2, #10]
 80103a2:	4293      	cmp	r3, r2
 80103a4:	d905      	bls.n	80103b2 <f_write+0x1c4>
					cc = fs->csize - csect;
 80103a6:	693b      	ldr	r3, [r7, #16]
 80103a8:	895b      	ldrh	r3, [r3, #10]
 80103aa:	461a      	mov	r2, r3
 80103ac:	69bb      	ldr	r3, [r7, #24]
 80103ae:	1ad3      	subs	r3, r2, r3
 80103b0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80103b2:	693b      	ldr	r3, [r7, #16]
 80103b4:	7858      	ldrb	r0, [r3, #1]
 80103b6:	6a3b      	ldr	r3, [r7, #32]
 80103b8:	697a      	ldr	r2, [r7, #20]
 80103ba:	69f9      	ldr	r1, [r7, #28]
 80103bc:	f7fd f86e 	bl	800d49c <disk_write>
 80103c0:	4603      	mov	r3, r0
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d004      	beq.n	80103d0 <f_write+0x1e2>
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	2201      	movs	r2, #1
 80103ca:	755a      	strb	r2, [r3, #21]
 80103cc:	2301      	movs	r3, #1
 80103ce:	e09e      	b.n	801050e <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	6a1a      	ldr	r2, [r3, #32]
 80103d4:	697b      	ldr	r3, [r7, #20]
 80103d6:	1ad3      	subs	r3, r2, r3
 80103d8:	6a3a      	ldr	r2, [r7, #32]
 80103da:	429a      	cmp	r2, r3
 80103dc:	d918      	bls.n	8010410 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	6a1a      	ldr	r2, [r3, #32]
 80103e8:	697b      	ldr	r3, [r7, #20]
 80103ea:	1ad3      	subs	r3, r2, r3
 80103ec:	693a      	ldr	r2, [r7, #16]
 80103ee:	8992      	ldrh	r2, [r2, #12]
 80103f0:	fb02 f303 	mul.w	r3, r2, r3
 80103f4:	69fa      	ldr	r2, [r7, #28]
 80103f6:	18d1      	adds	r1, r2, r3
 80103f8:	693b      	ldr	r3, [r7, #16]
 80103fa:	899b      	ldrh	r3, [r3, #12]
 80103fc:	461a      	mov	r2, r3
 80103fe:	f7fd f90d 	bl	800d61c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	7d1b      	ldrb	r3, [r3, #20]
 8010406:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801040a:	b2da      	uxtb	r2, r3
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8010410:	693b      	ldr	r3, [r7, #16]
 8010412:	899b      	ldrh	r3, [r3, #12]
 8010414:	461a      	mov	r2, r3
 8010416:	6a3b      	ldr	r3, [r7, #32]
 8010418:	fb02 f303 	mul.w	r3, r2, r3
 801041c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801041e:	e04b      	b.n	80104b8 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	6a1b      	ldr	r3, [r3, #32]
 8010424:	697a      	ldr	r2, [r7, #20]
 8010426:	429a      	cmp	r2, r3
 8010428:	d016      	beq.n	8010458 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	699a      	ldr	r2, [r3, #24]
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010432:	429a      	cmp	r2, r3
 8010434:	d210      	bcs.n	8010458 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8010436:	693b      	ldr	r3, [r7, #16]
 8010438:	7858      	ldrb	r0, [r3, #1]
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010440:	2301      	movs	r3, #1
 8010442:	697a      	ldr	r2, [r7, #20]
 8010444:	f7fd f80a 	bl	800d45c <disk_read>
 8010448:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801044a:	2b00      	cmp	r3, #0
 801044c:	d004      	beq.n	8010458 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	2201      	movs	r2, #1
 8010452:	755a      	strb	r2, [r3, #21]
 8010454:	2301      	movs	r3, #1
 8010456:	e05a      	b.n	801050e <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	697a      	ldr	r2, [r7, #20]
 801045c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801045e:	693b      	ldr	r3, [r7, #16]
 8010460:	899b      	ldrh	r3, [r3, #12]
 8010462:	4618      	mov	r0, r3
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	699b      	ldr	r3, [r3, #24]
 8010468:	693a      	ldr	r2, [r7, #16]
 801046a:	8992      	ldrh	r2, [r2, #12]
 801046c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010470:	fb02 f201 	mul.w	r2, r2, r1
 8010474:	1a9b      	subs	r3, r3, r2
 8010476:	1ac3      	subs	r3, r0, r3
 8010478:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801047a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	429a      	cmp	r2, r3
 8010480:	d901      	bls.n	8010486 <f_write+0x298>
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	699b      	ldr	r3, [r3, #24]
 8010490:	693a      	ldr	r2, [r7, #16]
 8010492:	8992      	ldrh	r2, [r2, #12]
 8010494:	fbb3 f0f2 	udiv	r0, r3, r2
 8010498:	fb02 f200 	mul.w	r2, r2, r0
 801049c:	1a9b      	subs	r3, r3, r2
 801049e:	440b      	add	r3, r1
 80104a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80104a2:	69f9      	ldr	r1, [r7, #28]
 80104a4:	4618      	mov	r0, r3
 80104a6:	f7fd f8b9 	bl	800d61c <mem_cpy>
		fp->flag |= FA_DIRTY;
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	7d1b      	ldrb	r3, [r3, #20]
 80104ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80104b2:	b2da      	uxtb	r2, r3
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80104b8:	69fa      	ldr	r2, [r7, #28]
 80104ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104bc:	4413      	add	r3, r2
 80104be:	61fb      	str	r3, [r7, #28]
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	699a      	ldr	r2, [r3, #24]
 80104c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104c6:	441a      	add	r2, r3
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	619a      	str	r2, [r3, #24]
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	68da      	ldr	r2, [r3, #12]
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	699b      	ldr	r3, [r3, #24]
 80104d4:	429a      	cmp	r2, r3
 80104d6:	bf38      	it	cc
 80104d8:	461a      	movcc	r2, r3
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	60da      	str	r2, [r3, #12]
 80104de:	683b      	ldr	r3, [r7, #0]
 80104e0:	681a      	ldr	r2, [r3, #0]
 80104e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104e4:	441a      	add	r2, r3
 80104e6:	683b      	ldr	r3, [r7, #0]
 80104e8:	601a      	str	r2, [r3, #0]
 80104ea:	687a      	ldr	r2, [r7, #4]
 80104ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104ee:	1ad3      	subs	r3, r2, r3
 80104f0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	f47f aeb5 	bne.w	8010264 <f_write+0x76>
 80104fa:	e000      	b.n	80104fe <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80104fc:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	7d1b      	ldrb	r3, [r3, #20]
 8010502:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010506:	b2da      	uxtb	r2, r3
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801050c:	2300      	movs	r3, #0
}
 801050e:	4618      	mov	r0, r3
 8010510:	3730      	adds	r7, #48	; 0x30
 8010512:	46bd      	mov	sp, r7
 8010514:	bd80      	pop	{r7, pc}

08010516 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010516:	b580      	push	{r7, lr}
 8010518:	b086      	sub	sp, #24
 801051a:	af00      	add	r7, sp, #0
 801051c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	f107 0208 	add.w	r2, r7, #8
 8010524:	4611      	mov	r1, r2
 8010526:	4618      	mov	r0, r3
 8010528:	f7ff faba 	bl	800faa0 <validate>
 801052c:	4603      	mov	r3, r0
 801052e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010530:	7dfb      	ldrb	r3, [r7, #23]
 8010532:	2b00      	cmp	r3, #0
 8010534:	d168      	bne.n	8010608 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	7d1b      	ldrb	r3, [r3, #20]
 801053a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801053e:	2b00      	cmp	r3, #0
 8010540:	d062      	beq.n	8010608 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	7d1b      	ldrb	r3, [r3, #20]
 8010546:	b25b      	sxtb	r3, r3
 8010548:	2b00      	cmp	r3, #0
 801054a:	da15      	bge.n	8010578 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801054c:	68bb      	ldr	r3, [r7, #8]
 801054e:	7858      	ldrb	r0, [r3, #1]
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	6a1a      	ldr	r2, [r3, #32]
 801055a:	2301      	movs	r3, #1
 801055c:	f7fc ff9e 	bl	800d49c <disk_write>
 8010560:	4603      	mov	r3, r0
 8010562:	2b00      	cmp	r3, #0
 8010564:	d001      	beq.n	801056a <f_sync+0x54>
 8010566:	2301      	movs	r3, #1
 8010568:	e04f      	b.n	801060a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	7d1b      	ldrb	r3, [r3, #20]
 801056e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010572:	b2da      	uxtb	r2, r3
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010578:	f7fc fce0 	bl	800cf3c <get_fattime>
 801057c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801057e:	68ba      	ldr	r2, [r7, #8]
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010584:	4619      	mov	r1, r3
 8010586:	4610      	mov	r0, r2
 8010588:	f7fd fa76 	bl	800da78 <move_window>
 801058c:	4603      	mov	r3, r0
 801058e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8010590:	7dfb      	ldrb	r3, [r7, #23]
 8010592:	2b00      	cmp	r3, #0
 8010594:	d138      	bne.n	8010608 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801059a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	330b      	adds	r3, #11
 80105a0:	781a      	ldrb	r2, [r3, #0]
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	330b      	adds	r3, #11
 80105a6:	f042 0220 	orr.w	r2, r2, #32
 80105aa:	b2d2      	uxtb	r2, r2
 80105ac:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	6818      	ldr	r0, [r3, #0]
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	689b      	ldr	r3, [r3, #8]
 80105b6:	461a      	mov	r2, r3
 80105b8:	68f9      	ldr	r1, [r7, #12]
 80105ba:	f7fd fffb 	bl	800e5b4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	f103 021c 	add.w	r2, r3, #28
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	68db      	ldr	r3, [r3, #12]
 80105c8:	4619      	mov	r1, r3
 80105ca:	4610      	mov	r0, r2
 80105cc:	f7fc fffa 	bl	800d5c4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	3316      	adds	r3, #22
 80105d4:	6939      	ldr	r1, [r7, #16]
 80105d6:	4618      	mov	r0, r3
 80105d8:	f7fc fff4 	bl	800d5c4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	3312      	adds	r3, #18
 80105e0:	2100      	movs	r1, #0
 80105e2:	4618      	mov	r0, r3
 80105e4:	f7fc ffd3 	bl	800d58e <st_word>
					fs->wflag = 1;
 80105e8:	68bb      	ldr	r3, [r7, #8]
 80105ea:	2201      	movs	r2, #1
 80105ec:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80105ee:	68bb      	ldr	r3, [r7, #8]
 80105f0:	4618      	mov	r0, r3
 80105f2:	f7fd fa6f 	bl	800dad4 <sync_fs>
 80105f6:	4603      	mov	r3, r0
 80105f8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	7d1b      	ldrb	r3, [r3, #20]
 80105fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010602:	b2da      	uxtb	r2, r3
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010608:	7dfb      	ldrb	r3, [r7, #23]
}
 801060a:	4618      	mov	r0, r3
 801060c:	3718      	adds	r7, #24
 801060e:	46bd      	mov	sp, r7
 8010610:	bd80      	pop	{r7, pc}

08010612 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010612:	b580      	push	{r7, lr}
 8010614:	b084      	sub	sp, #16
 8010616:	af00      	add	r7, sp, #0
 8010618:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801061a:	6878      	ldr	r0, [r7, #4]
 801061c:	f7ff ff7b 	bl	8010516 <f_sync>
 8010620:	4603      	mov	r3, r0
 8010622:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010624:	7bfb      	ldrb	r3, [r7, #15]
 8010626:	2b00      	cmp	r3, #0
 8010628:	d118      	bne.n	801065c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	f107 0208 	add.w	r2, r7, #8
 8010630:	4611      	mov	r1, r2
 8010632:	4618      	mov	r0, r3
 8010634:	f7ff fa34 	bl	800faa0 <validate>
 8010638:	4603      	mov	r3, r0
 801063a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801063c:	7bfb      	ldrb	r3, [r7, #15]
 801063e:	2b00      	cmp	r3, #0
 8010640:	d10c      	bne.n	801065c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	691b      	ldr	r3, [r3, #16]
 8010646:	4618      	mov	r0, r3
 8010648:	f7fd f972 	bl	800d930 <dec_lock>
 801064c:	4603      	mov	r3, r0
 801064e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010650:	7bfb      	ldrb	r3, [r7, #15]
 8010652:	2b00      	cmp	r3, #0
 8010654:	d102      	bne.n	801065c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	2200      	movs	r2, #0
 801065a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801065c:	7bfb      	ldrb	r3, [r7, #15]
}
 801065e:	4618      	mov	r0, r3
 8010660:	3710      	adds	r7, #16
 8010662:	46bd      	mov	sp, r7
 8010664:	bd80      	pop	{r7, pc}

08010666 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8010666:	b590      	push	{r4, r7, lr}
 8010668:	b093      	sub	sp, #76	; 0x4c
 801066a:	af00      	add	r7, sp, #0
 801066c:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 801066e:	f107 010c 	add.w	r1, r7, #12
 8010672:	1d3b      	adds	r3, r7, #4
 8010674:	2200      	movs	r2, #0
 8010676:	4618      	mov	r0, r3
 8010678:	f7fe ff86 	bl	800f588 <find_volume>
 801067c:	4603      	mov	r3, r0
 801067e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8010682:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010686:	2b00      	cmp	r3, #0
 8010688:	d131      	bne.n	80106ee <f_chdir+0x88>
		dj.obj.fs = fs;
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	613b      	str	r3, [r7, #16]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 801068e:	687a      	ldr	r2, [r7, #4]
 8010690:	f107 0310 	add.w	r3, r7, #16
 8010694:	4611      	mov	r1, r2
 8010696:	4618      	mov	r0, r3
 8010698:	f7fe fe46 	bl	800f328 <follow_path>
 801069c:	4603      	mov	r3, r0
 801069e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (res == FR_OK) {					/* Follow completed */
 80106a2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d11a      	bne.n	80106e0 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80106aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80106ae:	b25b      	sxtb	r3, r3
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	da03      	bge.n	80106bc <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	69ba      	ldr	r2, [r7, #24]
 80106b8:	61da      	str	r2, [r3, #28]
 80106ba:	e011      	b.n	80106e0 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 80106bc:	7dbb      	ldrb	r3, [r7, #22]
 80106be:	f003 0310 	and.w	r3, r3, #16
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d009      	beq.n	80106da <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80106ca:	68fc      	ldr	r4, [r7, #12]
 80106cc:	4611      	mov	r1, r2
 80106ce:	4618      	mov	r0, r3
 80106d0:	f7fd ff51 	bl	800e576 <ld_clust>
 80106d4:	4603      	mov	r3, r0
 80106d6:	61e3      	str	r3, [r4, #28]
 80106d8:	e002      	b.n	80106e0 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 80106da:	2305      	movs	r3, #5
 80106dc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80106e0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80106e4:	2b04      	cmp	r3, #4
 80106e6:	d102      	bne.n	80106ee <f_chdir+0x88>
 80106e8:	2305      	movs	r3, #5
 80106ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}

	LEAVE_FF(fs, res);
 80106ee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80106f2:	4618      	mov	r0, r3
 80106f4:	374c      	adds	r7, #76	; 0x4c
 80106f6:	46bd      	mov	sp, r7
 80106f8:	bd90      	pop	{r4, r7, pc}

080106fa <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80106fa:	b580      	push	{r7, lr}
 80106fc:	b090      	sub	sp, #64	; 0x40
 80106fe:	af00      	add	r7, sp, #0
 8010700:	6078      	str	r0, [r7, #4]
 8010702:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	f107 0208 	add.w	r2, r7, #8
 801070a:	4611      	mov	r1, r2
 801070c:	4618      	mov	r0, r3
 801070e:	f7ff f9c7 	bl	800faa0 <validate>
 8010712:	4603      	mov	r3, r0
 8010714:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8010718:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801071c:	2b00      	cmp	r3, #0
 801071e:	d103      	bne.n	8010728 <f_lseek+0x2e>
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	7d5b      	ldrb	r3, [r3, #21]
 8010724:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8010728:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801072c:	2b00      	cmp	r3, #0
 801072e:	d002      	beq.n	8010736 <f_lseek+0x3c>
 8010730:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010734:	e201      	b.n	8010b3a <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801073a:	2b00      	cmp	r3, #0
 801073c:	f000 80d9 	beq.w	80108f2 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8010740:	683b      	ldr	r3, [r7, #0]
 8010742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010746:	d15a      	bne.n	80107fe <f_lseek+0x104>
			tbl = fp->cltbl;
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801074c:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 801074e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010750:	1d1a      	adds	r2, r3, #4
 8010752:	627a      	str	r2, [r7, #36]	; 0x24
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	617b      	str	r3, [r7, #20]
 8010758:	2302      	movs	r3, #2
 801075a:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	689b      	ldr	r3, [r3, #8]
 8010760:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8010762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010764:	2b00      	cmp	r3, #0
 8010766:	d03a      	beq.n	80107de <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8010768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801076a:	613b      	str	r3, [r7, #16]
 801076c:	2300      	movs	r3, #0
 801076e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010772:	3302      	adds	r3, #2
 8010774:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8010776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010778:	60fb      	str	r3, [r7, #12]
 801077a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801077c:	3301      	adds	r3, #1
 801077e:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010784:	4618      	mov	r0, r3
 8010786:	f7fd fa34 	bl	800dbf2 <get_fat>
 801078a:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 801078c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801078e:	2b01      	cmp	r3, #1
 8010790:	d804      	bhi.n	801079c <f_lseek+0xa2>
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	2202      	movs	r2, #2
 8010796:	755a      	strb	r2, [r3, #21]
 8010798:	2302      	movs	r3, #2
 801079a:	e1ce      	b.n	8010b3a <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801079c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801079e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107a2:	d104      	bne.n	80107ae <f_lseek+0xb4>
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	2201      	movs	r2, #1
 80107a8:	755a      	strb	r2, [r3, #21]
 80107aa:	2301      	movs	r3, #1
 80107ac:	e1c5      	b.n	8010b3a <f_lseek+0x440>
					} while (cl == pcl + 1);
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	3301      	adds	r3, #1
 80107b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80107b4:	429a      	cmp	r2, r3
 80107b6:	d0de      	beq.n	8010776 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80107b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80107ba:	697b      	ldr	r3, [r7, #20]
 80107bc:	429a      	cmp	r2, r3
 80107be:	d809      	bhi.n	80107d4 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80107c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107c2:	1d1a      	adds	r2, r3, #4
 80107c4:	627a      	str	r2, [r7, #36]	; 0x24
 80107c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80107c8:	601a      	str	r2, [r3, #0]
 80107ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107cc:	1d1a      	adds	r2, r3, #4
 80107ce:	627a      	str	r2, [r7, #36]	; 0x24
 80107d0:	693a      	ldr	r2, [r7, #16]
 80107d2:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80107d4:	68bb      	ldr	r3, [r7, #8]
 80107d6:	6a1b      	ldr	r3, [r3, #32]
 80107d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80107da:	429a      	cmp	r2, r3
 80107dc:	d3c4      	bcc.n	8010768 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80107e4:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80107e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80107e8:	697b      	ldr	r3, [r7, #20]
 80107ea:	429a      	cmp	r2, r3
 80107ec:	d803      	bhi.n	80107f6 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80107ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107f0:	2200      	movs	r2, #0
 80107f2:	601a      	str	r2, [r3, #0]
 80107f4:	e19f      	b.n	8010b36 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80107f6:	2311      	movs	r3, #17
 80107f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80107fc:	e19b      	b.n	8010b36 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	68db      	ldr	r3, [r3, #12]
 8010802:	683a      	ldr	r2, [r7, #0]
 8010804:	429a      	cmp	r2, r3
 8010806:	d902      	bls.n	801080e <f_lseek+0x114>
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	68db      	ldr	r3, [r3, #12]
 801080c:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	683a      	ldr	r2, [r7, #0]
 8010812:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8010814:	683b      	ldr	r3, [r7, #0]
 8010816:	2b00      	cmp	r3, #0
 8010818:	f000 818d 	beq.w	8010b36 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 801081c:	683b      	ldr	r3, [r7, #0]
 801081e:	3b01      	subs	r3, #1
 8010820:	4619      	mov	r1, r3
 8010822:	6878      	ldr	r0, [r7, #4]
 8010824:	f7fd fcc9 	bl	800e1ba <clmt_clust>
 8010828:	4602      	mov	r2, r0
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 801082e:	68ba      	ldr	r2, [r7, #8]
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	69db      	ldr	r3, [r3, #28]
 8010834:	4619      	mov	r1, r3
 8010836:	4610      	mov	r0, r2
 8010838:	f7fd f9bc 	bl	800dbb4 <clust2sect>
 801083c:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 801083e:	69bb      	ldr	r3, [r7, #24]
 8010840:	2b00      	cmp	r3, #0
 8010842:	d104      	bne.n	801084e <f_lseek+0x154>
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	2202      	movs	r2, #2
 8010848:	755a      	strb	r2, [r3, #21]
 801084a:	2302      	movs	r3, #2
 801084c:	e175      	b.n	8010b3a <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 801084e:	683b      	ldr	r3, [r7, #0]
 8010850:	3b01      	subs	r3, #1
 8010852:	68ba      	ldr	r2, [r7, #8]
 8010854:	8992      	ldrh	r2, [r2, #12]
 8010856:	fbb3 f3f2 	udiv	r3, r3, r2
 801085a:	68ba      	ldr	r2, [r7, #8]
 801085c:	8952      	ldrh	r2, [r2, #10]
 801085e:	3a01      	subs	r2, #1
 8010860:	4013      	ands	r3, r2
 8010862:	69ba      	ldr	r2, [r7, #24]
 8010864:	4413      	add	r3, r2
 8010866:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	699b      	ldr	r3, [r3, #24]
 801086c:	68ba      	ldr	r2, [r7, #8]
 801086e:	8992      	ldrh	r2, [r2, #12]
 8010870:	fbb3 f1f2 	udiv	r1, r3, r2
 8010874:	fb02 f201 	mul.w	r2, r2, r1
 8010878:	1a9b      	subs	r3, r3, r2
 801087a:	2b00      	cmp	r3, #0
 801087c:	f000 815b 	beq.w	8010b36 <f_lseek+0x43c>
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	6a1b      	ldr	r3, [r3, #32]
 8010884:	69ba      	ldr	r2, [r7, #24]
 8010886:	429a      	cmp	r2, r3
 8010888:	f000 8155 	beq.w	8010b36 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	7d1b      	ldrb	r3, [r3, #20]
 8010890:	b25b      	sxtb	r3, r3
 8010892:	2b00      	cmp	r3, #0
 8010894:	da18      	bge.n	80108c8 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010896:	68bb      	ldr	r3, [r7, #8]
 8010898:	7858      	ldrb	r0, [r3, #1]
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	6a1a      	ldr	r2, [r3, #32]
 80108a4:	2301      	movs	r3, #1
 80108a6:	f7fc fdf9 	bl	800d49c <disk_write>
 80108aa:	4603      	mov	r3, r0
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d004      	beq.n	80108ba <f_lseek+0x1c0>
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	2201      	movs	r2, #1
 80108b4:	755a      	strb	r2, [r3, #21]
 80108b6:	2301      	movs	r3, #1
 80108b8:	e13f      	b.n	8010b3a <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	7d1b      	ldrb	r3, [r3, #20]
 80108be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80108c2:	b2da      	uxtb	r2, r3
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80108c8:	68bb      	ldr	r3, [r7, #8]
 80108ca:	7858      	ldrb	r0, [r3, #1]
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80108d2:	2301      	movs	r3, #1
 80108d4:	69ba      	ldr	r2, [r7, #24]
 80108d6:	f7fc fdc1 	bl	800d45c <disk_read>
 80108da:	4603      	mov	r3, r0
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d004      	beq.n	80108ea <f_lseek+0x1f0>
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	2201      	movs	r2, #1
 80108e4:	755a      	strb	r2, [r3, #21]
 80108e6:	2301      	movs	r3, #1
 80108e8:	e127      	b.n	8010b3a <f_lseek+0x440>
#endif
					fp->sect = dsc;
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	69ba      	ldr	r2, [r7, #24]
 80108ee:	621a      	str	r2, [r3, #32]
 80108f0:	e121      	b.n	8010b36 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	68db      	ldr	r3, [r3, #12]
 80108f6:	683a      	ldr	r2, [r7, #0]
 80108f8:	429a      	cmp	r2, r3
 80108fa:	d908      	bls.n	801090e <f_lseek+0x214>
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	7d1b      	ldrb	r3, [r3, #20]
 8010900:	f003 0302 	and.w	r3, r3, #2
 8010904:	2b00      	cmp	r3, #0
 8010906:	d102      	bne.n	801090e <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	68db      	ldr	r3, [r3, #12]
 801090c:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	699b      	ldr	r3, [r3, #24]
 8010912:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8010914:	2300      	movs	r3, #0
 8010916:	637b      	str	r3, [r7, #52]	; 0x34
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801091c:	619a      	str	r2, [r3, #24]
		if (ofs) {
 801091e:	683b      	ldr	r3, [r7, #0]
 8010920:	2b00      	cmp	r3, #0
 8010922:	f000 80b5 	beq.w	8010a90 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8010926:	68bb      	ldr	r3, [r7, #8]
 8010928:	895b      	ldrh	r3, [r3, #10]
 801092a:	461a      	mov	r2, r3
 801092c:	68bb      	ldr	r3, [r7, #8]
 801092e:	899b      	ldrh	r3, [r3, #12]
 8010930:	fb03 f302 	mul.w	r3, r3, r2
 8010934:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8010936:	6a3b      	ldr	r3, [r7, #32]
 8010938:	2b00      	cmp	r3, #0
 801093a:	d01b      	beq.n	8010974 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 801093c:	683b      	ldr	r3, [r7, #0]
 801093e:	1e5a      	subs	r2, r3, #1
 8010940:	69fb      	ldr	r3, [r7, #28]
 8010942:	fbb2 f2f3 	udiv	r2, r2, r3
 8010946:	6a3b      	ldr	r3, [r7, #32]
 8010948:	1e59      	subs	r1, r3, #1
 801094a:	69fb      	ldr	r3, [r7, #28]
 801094c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8010950:	429a      	cmp	r2, r3
 8010952:	d30f      	bcc.n	8010974 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8010954:	6a3b      	ldr	r3, [r7, #32]
 8010956:	1e5a      	subs	r2, r3, #1
 8010958:	69fb      	ldr	r3, [r7, #28]
 801095a:	425b      	negs	r3, r3
 801095c:	401a      	ands	r2, r3
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	699b      	ldr	r3, [r3, #24]
 8010966:	683a      	ldr	r2, [r7, #0]
 8010968:	1ad3      	subs	r3, r2, r3
 801096a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	69db      	ldr	r3, [r3, #28]
 8010970:	63bb      	str	r3, [r7, #56]	; 0x38
 8010972:	e022      	b.n	80109ba <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	689b      	ldr	r3, [r3, #8]
 8010978:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801097a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801097c:	2b00      	cmp	r3, #0
 801097e:	d119      	bne.n	80109b4 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	2100      	movs	r1, #0
 8010984:	4618      	mov	r0, r3
 8010986:	f7fd fb80 	bl	800e08a <create_chain>
 801098a:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 801098c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801098e:	2b01      	cmp	r3, #1
 8010990:	d104      	bne.n	801099c <f_lseek+0x2a2>
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	2202      	movs	r2, #2
 8010996:	755a      	strb	r2, [r3, #21]
 8010998:	2302      	movs	r3, #2
 801099a:	e0ce      	b.n	8010b3a <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801099c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801099e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109a2:	d104      	bne.n	80109ae <f_lseek+0x2b4>
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	2201      	movs	r2, #1
 80109a8:	755a      	strb	r2, [r3, #21]
 80109aa:	2301      	movs	r3, #1
 80109ac:	e0c5      	b.n	8010b3a <f_lseek+0x440>
					fp->obj.sclust = clst;
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80109b2:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80109b8:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80109ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d067      	beq.n	8010a90 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 80109c0:	e03a      	b.n	8010a38 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 80109c2:	683a      	ldr	r2, [r7, #0]
 80109c4:	69fb      	ldr	r3, [r7, #28]
 80109c6:	1ad3      	subs	r3, r2, r3
 80109c8:	603b      	str	r3, [r7, #0]
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	699a      	ldr	r2, [r3, #24]
 80109ce:	69fb      	ldr	r3, [r7, #28]
 80109d0:	441a      	add	r2, r3
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	7d1b      	ldrb	r3, [r3, #20]
 80109da:	f003 0302 	and.w	r3, r3, #2
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d00b      	beq.n	80109fa <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80109e6:	4618      	mov	r0, r3
 80109e8:	f7fd fb4f 	bl	800e08a <create_chain>
 80109ec:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80109ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d108      	bne.n	8010a06 <f_lseek+0x30c>
							ofs = 0; break;
 80109f4:	2300      	movs	r3, #0
 80109f6:	603b      	str	r3, [r7, #0]
 80109f8:	e022      	b.n	8010a40 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80109fe:	4618      	mov	r0, r3
 8010a00:	f7fd f8f7 	bl	800dbf2 <get_fat>
 8010a04:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a0c:	d104      	bne.n	8010a18 <f_lseek+0x31e>
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	2201      	movs	r2, #1
 8010a12:	755a      	strb	r2, [r3, #21]
 8010a14:	2301      	movs	r3, #1
 8010a16:	e090      	b.n	8010b3a <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8010a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a1a:	2b01      	cmp	r3, #1
 8010a1c:	d904      	bls.n	8010a28 <f_lseek+0x32e>
 8010a1e:	68bb      	ldr	r3, [r7, #8]
 8010a20:	6a1b      	ldr	r3, [r3, #32]
 8010a22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010a24:	429a      	cmp	r2, r3
 8010a26:	d304      	bcc.n	8010a32 <f_lseek+0x338>
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	2202      	movs	r2, #2
 8010a2c:	755a      	strb	r2, [r3, #21]
 8010a2e:	2302      	movs	r3, #2
 8010a30:	e083      	b.n	8010b3a <f_lseek+0x440>
					fp->clust = clst;
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010a36:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8010a38:	683a      	ldr	r2, [r7, #0]
 8010a3a:	69fb      	ldr	r3, [r7, #28]
 8010a3c:	429a      	cmp	r2, r3
 8010a3e:	d8c0      	bhi.n	80109c2 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	699a      	ldr	r2, [r3, #24]
 8010a44:	683b      	ldr	r3, [r7, #0]
 8010a46:	441a      	add	r2, r3
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8010a4c:	68bb      	ldr	r3, [r7, #8]
 8010a4e:	899b      	ldrh	r3, [r3, #12]
 8010a50:	461a      	mov	r2, r3
 8010a52:	683b      	ldr	r3, [r7, #0]
 8010a54:	fbb3 f1f2 	udiv	r1, r3, r2
 8010a58:	fb02 f201 	mul.w	r2, r2, r1
 8010a5c:	1a9b      	subs	r3, r3, r2
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d016      	beq.n	8010a90 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8010a62:	68bb      	ldr	r3, [r7, #8]
 8010a64:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010a66:	4618      	mov	r0, r3
 8010a68:	f7fd f8a4 	bl	800dbb4 <clust2sect>
 8010a6c:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8010a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d104      	bne.n	8010a7e <f_lseek+0x384>
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	2202      	movs	r2, #2
 8010a78:	755a      	strb	r2, [r3, #21]
 8010a7a:	2302      	movs	r3, #2
 8010a7c:	e05d      	b.n	8010b3a <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8010a7e:	68bb      	ldr	r3, [r7, #8]
 8010a80:	899b      	ldrh	r3, [r3, #12]
 8010a82:	461a      	mov	r2, r3
 8010a84:	683b      	ldr	r3, [r7, #0]
 8010a86:	fbb3 f3f2 	udiv	r3, r3, r2
 8010a8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010a8c:	4413      	add	r3, r2
 8010a8e:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	699a      	ldr	r2, [r3, #24]
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	68db      	ldr	r3, [r3, #12]
 8010a98:	429a      	cmp	r2, r3
 8010a9a:	d90a      	bls.n	8010ab2 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	699a      	ldr	r2, [r3, #24]
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	7d1b      	ldrb	r3, [r3, #20]
 8010aa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010aac:	b2da      	uxtb	r2, r3
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	699b      	ldr	r3, [r3, #24]
 8010ab6:	68ba      	ldr	r2, [r7, #8]
 8010ab8:	8992      	ldrh	r2, [r2, #12]
 8010aba:	fbb3 f1f2 	udiv	r1, r3, r2
 8010abe:	fb02 f201 	mul.w	r2, r2, r1
 8010ac2:	1a9b      	subs	r3, r3, r2
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d036      	beq.n	8010b36 <f_lseek+0x43c>
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	6a1b      	ldr	r3, [r3, #32]
 8010acc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010ace:	429a      	cmp	r2, r3
 8010ad0:	d031      	beq.n	8010b36 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	7d1b      	ldrb	r3, [r3, #20]
 8010ad6:	b25b      	sxtb	r3, r3
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	da18      	bge.n	8010b0e <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010adc:	68bb      	ldr	r3, [r7, #8]
 8010ade:	7858      	ldrb	r0, [r3, #1]
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	6a1a      	ldr	r2, [r3, #32]
 8010aea:	2301      	movs	r3, #1
 8010aec:	f7fc fcd6 	bl	800d49c <disk_write>
 8010af0:	4603      	mov	r3, r0
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d004      	beq.n	8010b00 <f_lseek+0x406>
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	2201      	movs	r2, #1
 8010afa:	755a      	strb	r2, [r3, #21]
 8010afc:	2301      	movs	r3, #1
 8010afe:	e01c      	b.n	8010b3a <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	7d1b      	ldrb	r3, [r3, #20]
 8010b04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010b08:	b2da      	uxtb	r2, r3
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010b0e:	68bb      	ldr	r3, [r7, #8]
 8010b10:	7858      	ldrb	r0, [r3, #1]
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010b18:	2301      	movs	r3, #1
 8010b1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010b1c:	f7fc fc9e 	bl	800d45c <disk_read>
 8010b20:	4603      	mov	r3, r0
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d004      	beq.n	8010b30 <f_lseek+0x436>
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	2201      	movs	r2, #1
 8010b2a:	755a      	strb	r2, [r3, #21]
 8010b2c:	2301      	movs	r3, #1
 8010b2e:	e004      	b.n	8010b3a <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010b34:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8010b36:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	3740      	adds	r7, #64	; 0x40
 8010b3e:	46bd      	mov	sp, r7
 8010b40:	bd80      	pop	{r7, pc}

08010b42 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8010b42:	b580      	push	{r7, lr}
 8010b44:	b0a0      	sub	sp, #128	; 0x80
 8010b46:	af00      	add	r7, sp, #0
 8010b48:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8010b4a:	2300      	movs	r3, #0
 8010b4c:	67bb      	str	r3, [r7, #120]	; 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8010b4e:	f107 010c 	add.w	r1, r7, #12
 8010b52:	1d3b      	adds	r3, r7, #4
 8010b54:	2202      	movs	r2, #2
 8010b56:	4618      	mov	r0, r3
 8010b58:	f7fe fd16 	bl	800f588 <find_volume>
 8010b5c:	4603      	mov	r3, r0
 8010b5e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	dj.obj.fs = fs;
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	647b      	str	r3, [r7, #68]	; 0x44
	if (res == FR_OK) {
 8010b66:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	f040 80a4 	bne.w	8010cb8 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8010b70:	687a      	ldr	r2, [r7, #4]
 8010b72:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010b76:	4611      	mov	r1, r2
 8010b78:	4618      	mov	r0, r3
 8010b7a:	f7fe fbd5 	bl	800f328 <follow_path>
 8010b7e:	4603      	mov	r3, r0
 8010b80:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8010b84:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d108      	bne.n	8010b9e <f_unlink+0x5c>
 8010b8c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8010b90:	f003 0320 	and.w	r3, r3, #32
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d002      	beq.n	8010b9e <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8010b98:	2306      	movs	r3, #6
 8010b9a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8010b9e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d108      	bne.n	8010bb8 <f_unlink+0x76>
 8010ba6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010baa:	2102      	movs	r1, #2
 8010bac:	4618      	mov	r0, r3
 8010bae:	f7fc fdb3 	bl	800d718 <chk_lock>
 8010bb2:	4603      	mov	r3, r0
 8010bb4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8010bb8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d17b      	bne.n	8010cb8 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8010bc0:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8010bc4:	b25b      	sxtb	r3, r3
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	da03      	bge.n	8010bd2 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8010bca:	2306      	movs	r3, #6
 8010bcc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8010bd0:	e008      	b.n	8010be4 <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8010bd2:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8010bd6:	f003 0301 	and.w	r3, r3, #1
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d002      	beq.n	8010be4 <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8010bde:	2307      	movs	r3, #7
 8010be0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				}
			}
			if (res == FR_OK) {
 8010be4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d13d      	bne.n	8010c68 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010bf0:	4611      	mov	r1, r2
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	f7fd fcbf 	bl	800e576 <ld_clust>
 8010bf8:	67b8      	str	r0, [r7, #120]	; 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8010bfa:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8010bfe:	f003 0310 	and.w	r3, r3, #16
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d030      	beq.n	8010c68 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	69db      	ldr	r3, [r3, #28]
 8010c0a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010c0c:	429a      	cmp	r2, r3
 8010c0e:	d103      	bne.n	8010c18 <f_unlink+0xd6>
						res = FR_DENIED;
 8010c10:	2307      	movs	r3, #7
 8010c12:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8010c16:	e027      	b.n	8010c68 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8010c1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010c1e:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8010c20:	f107 0310 	add.w	r3, r7, #16
 8010c24:	2100      	movs	r1, #0
 8010c26:	4618      	mov	r0, r3
 8010c28:	f7fd faff 	bl	800e22a <dir_sdi>
 8010c2c:	4603      	mov	r3, r0
 8010c2e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						if (res == FR_OK) {
 8010c32:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d116      	bne.n	8010c68 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8010c3a:	f107 0310 	add.w	r3, r7, #16
 8010c3e:	2100      	movs	r1, #0
 8010c40:	4618      	mov	r0, r3
 8010c42:	f7fd fec3 	bl	800e9cc <dir_read>
 8010c46:	4603      	mov	r3, r0
 8010c48:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8010c4c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d102      	bne.n	8010c5a <f_unlink+0x118>
 8010c54:	2307      	movs	r3, #7
 8010c56:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8010c5a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010c5e:	2b04      	cmp	r3, #4
 8010c60:	d102      	bne.n	8010c68 <f_unlink+0x126>
 8010c62:	2300      	movs	r3, #0
 8010c64:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 8010c68:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d123      	bne.n	8010cb8 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8010c70:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010c74:	4618      	mov	r0, r3
 8010c76:	f7fe f909 	bl	800ee8c <dir_remove>
 8010c7a:	4603      	mov	r3, r0
 8010c7c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8010c80:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d10c      	bne.n	8010ca2 <f_unlink+0x160>
 8010c88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d009      	beq.n	8010ca2 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8010c8e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010c92:	2200      	movs	r2, #0
 8010c94:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8010c96:	4618      	mov	r0, r3
 8010c98:	f7fd f992 	bl	800dfc0 <remove_chain>
 8010c9c:	4603      	mov	r3, r0
 8010c9e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8010ca2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d106      	bne.n	8010cb8 <f_unlink+0x176>
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	4618      	mov	r0, r3
 8010cae:	f7fc ff11 	bl	800dad4 <sync_fs>
 8010cb2:	4603      	mov	r3, r0
 8010cb4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8010cb8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	3780      	adds	r7, #128	; 0x80
 8010cc0:	46bd      	mov	sp, r7
 8010cc2:	bd80      	pop	{r7, pc}

08010cc4 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8010cc4:	b580      	push	{r7, lr}
 8010cc6:	b098      	sub	sp, #96	; 0x60
 8010cc8:	af00      	add	r7, sp, #0
 8010cca:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8010ccc:	f107 010c 	add.w	r1, r7, #12
 8010cd0:	1d3b      	adds	r3, r7, #4
 8010cd2:	2202      	movs	r2, #2
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	f7fe fc57 	bl	800f588 <find_volume>
 8010cda:	4603      	mov	r3, r0
 8010cdc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	dj.obj.fs = fs;
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 8010ce4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	f040 80ff 	bne.w	8010eec <f_mkdir+0x228>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8010cee:	687a      	ldr	r2, [r7, #4]
 8010cf0:	f107 0310 	add.w	r3, r7, #16
 8010cf4:	4611      	mov	r1, r2
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	f7fe fb16 	bl	800f328 <follow_path>
 8010cfc:	4603      	mov	r3, r0
 8010cfe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8010d02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d102      	bne.n	8010d10 <f_mkdir+0x4c>
 8010d0a:	2308      	movs	r3, #8
 8010d0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8010d10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010d14:	2b04      	cmp	r3, #4
 8010d16:	d108      	bne.n	8010d2a <f_mkdir+0x66>
 8010d18:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010d1c:	f003 0320 	and.w	r3, r3, #32
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d002      	beq.n	8010d2a <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8010d24:	2306      	movs	r3, #6
 8010d26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8010d2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010d2e:	2b04      	cmp	r3, #4
 8010d30:	f040 80dc 	bne.w	8010eec <f_mkdir+0x228>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8010d34:	f107 0310 	add.w	r3, r7, #16
 8010d38:	2100      	movs	r1, #0
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	f7fd f9a5 	bl	800e08a <create_chain>
 8010d40:	64f8      	str	r0, [r7, #76]	; 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	895b      	ldrh	r3, [r3, #10]
 8010d46:	461a      	mov	r2, r3
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	899b      	ldrh	r3, [r3, #12]
 8010d4c:	fb03 f302 	mul.w	r3, r3, r2
 8010d50:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 8010d52:	2300      	movs	r3, #0
 8010d54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8010d58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d102      	bne.n	8010d64 <f_mkdir+0xa0>
 8010d5e:	2307      	movs	r3, #7
 8010d60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 8010d64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d66:	2b01      	cmp	r3, #1
 8010d68:	d102      	bne.n	8010d70 <f_mkdir+0xac>
 8010d6a:	2302      	movs	r3, #2
 8010d6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010d70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d76:	d102      	bne.n	8010d7e <f_mkdir+0xba>
 8010d78:	2301      	movs	r3, #1
 8010d7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8010d7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d106      	bne.n	8010d94 <f_mkdir+0xd0>
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	4618      	mov	r0, r3
 8010d8a:	f7fc fe31 	bl	800d9f0 <sync_window>
 8010d8e:	4603      	mov	r3, r0
 8010d90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			tm = GET_FATTIME();
 8010d94:	f7fc f8d2 	bl	800cf3c <get_fattime>
 8010d98:	64b8      	str	r0, [r7, #72]	; 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 8010d9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d16c      	bne.n	8010e7c <f_mkdir+0x1b8>
				dsc = clust2sect(fs, dcl);
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010da6:	4618      	mov	r0, r3
 8010da8:	f7fc ff04 	bl	800dbb4 <clust2sect>
 8010dac:	6578      	str	r0, [r7, #84]	; 0x54
				dir = fs->win;
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	333c      	adds	r3, #60	; 0x3c
 8010db2:	647b      	str	r3, [r7, #68]	; 0x44
				mem_set(dir, 0, SS(fs));
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	899b      	ldrh	r3, [r3, #12]
 8010db8:	461a      	mov	r2, r3
 8010dba:	2100      	movs	r1, #0
 8010dbc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010dbe:	f7fc fc4e 	bl	800d65e <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8010dc2:	220b      	movs	r2, #11
 8010dc4:	2120      	movs	r1, #32
 8010dc6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010dc8:	f7fc fc49 	bl	800d65e <mem_set>
					dir[DIR_Name] = '.';
 8010dcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010dce:	222e      	movs	r2, #46	; 0x2e
 8010dd0:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8010dd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010dd4:	330b      	adds	r3, #11
 8010dd6:	2210      	movs	r2, #16
 8010dd8:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8010dda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ddc:	3316      	adds	r3, #22
 8010dde:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8010de0:	4618      	mov	r0, r3
 8010de2:	f7fc fbef 	bl	800d5c4 <st_dword>
					st_clust(fs, dir, dcl);
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010dea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010dec:	4618      	mov	r0, r3
 8010dee:	f7fd fbe1 	bl	800e5b4 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8010df2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010df4:	3320      	adds	r3, #32
 8010df6:	2220      	movs	r2, #32
 8010df8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	f7fc fc0e 	bl	800d61c <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8010e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e02:	3321      	adds	r3, #33	; 0x21
 8010e04:	222e      	movs	r2, #46	; 0x2e
 8010e06:	701a      	strb	r2, [r3, #0]
 8010e08:	69bb      	ldr	r3, [r7, #24]
 8010e0a:	653b      	str	r3, [r7, #80]	; 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	781b      	ldrb	r3, [r3, #0]
 8010e10:	2b03      	cmp	r3, #3
 8010e12:	d106      	bne.n	8010e22 <f_mkdir+0x15e>
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e18:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010e1a:	429a      	cmp	r2, r3
 8010e1c:	d101      	bne.n	8010e22 <f_mkdir+0x15e>
 8010e1e:	2300      	movs	r3, #0
 8010e20:	653b      	str	r3, [r7, #80]	; 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 8010e22:	68f8      	ldr	r0, [r7, #12]
 8010e24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e26:	3320      	adds	r3, #32
 8010e28:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010e2a:	4619      	mov	r1, r3
 8010e2c:	f7fd fbc2 	bl	800e5b4 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	895b      	ldrh	r3, [r3, #10]
 8010e34:	65bb      	str	r3, [r7, #88]	; 0x58
 8010e36:	e01c      	b.n	8010e72 <f_mkdir+0x1ae>
					fs->winsect = dsc++;
 8010e38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010e3a:	1c5a      	adds	r2, r3, #1
 8010e3c:	657a      	str	r2, [r7, #84]	; 0x54
 8010e3e:	68fa      	ldr	r2, [r7, #12]
 8010e40:	6393      	str	r3, [r2, #56]	; 0x38
					fs->wflag = 1;
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	2201      	movs	r2, #1
 8010e46:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	4618      	mov	r0, r3
 8010e4c:	f7fc fdd0 	bl	800d9f0 <sync_window>
 8010e50:	4603      	mov	r3, r0
 8010e52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (res != FR_OK) break;
 8010e56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d10d      	bne.n	8010e7a <f_mkdir+0x1b6>
					mem_set(dir, 0, SS(fs));
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	899b      	ldrh	r3, [r3, #12]
 8010e62:	461a      	mov	r2, r3
 8010e64:	2100      	movs	r1, #0
 8010e66:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010e68:	f7fc fbf9 	bl	800d65e <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8010e6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010e6e:	3b01      	subs	r3, #1
 8010e70:	65bb      	str	r3, [r7, #88]	; 0x58
 8010e72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d1df      	bne.n	8010e38 <f_mkdir+0x174>
 8010e78:	e000      	b.n	8010e7c <f_mkdir+0x1b8>
					if (res != FR_OK) break;
 8010e7a:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8010e7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d107      	bne.n	8010e94 <f_mkdir+0x1d0>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8010e84:	f107 0310 	add.w	r3, r7, #16
 8010e88:	4618      	mov	r0, r3
 8010e8a:	f7fd ff07 	bl	800ec9c <dir_register>
 8010e8e:	4603      	mov	r3, r0
 8010e90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 8010e94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d120      	bne.n	8010ede <f_mkdir+0x21a>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8010e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e9e:	647b      	str	r3, [r7, #68]	; 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8010ea0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ea2:	3316      	adds	r3, #22
 8010ea4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	f7fc fb8c 	bl	800d5c4 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010eb0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	f7fd fb7e 	bl	800e5b4 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8010eb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010eba:	330b      	adds	r3, #11
 8010ebc:	2210      	movs	r2, #16
 8010ebe:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	2201      	movs	r2, #1
 8010ec4:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8010ec6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d10e      	bne.n	8010eec <f_mkdir+0x228>
					res = sync_fs(fs);
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	f7fc fdff 	bl	800dad4 <sync_fs>
 8010ed6:	4603      	mov	r3, r0
 8010ed8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010edc:	e006      	b.n	8010eec <f_mkdir+0x228>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8010ede:	f107 0310 	add.w	r3, r7, #16
 8010ee2:	2200      	movs	r2, #0
 8010ee4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	f7fd f86a 	bl	800dfc0 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8010eec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	3760      	adds	r7, #96	; 0x60
 8010ef4:	46bd      	mov	sp, r7
 8010ef6:	bd80      	pop	{r7, pc}

08010ef8 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	b088      	sub	sp, #32
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	60f8      	str	r0, [r7, #12]
 8010f00:	60b9      	str	r1, [r7, #8]
 8010f02:	607a      	str	r2, [r7, #4]
	int n = 0;
 8010f04:	2300      	movs	r3, #0
 8010f06:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8010f08:	68fb      	ldr	r3, [r7, #12]
 8010f0a:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8010f0c:	e01b      	b.n	8010f46 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8010f0e:	f107 0310 	add.w	r3, r7, #16
 8010f12:	f107 0114 	add.w	r1, r7, #20
 8010f16:	2201      	movs	r2, #1
 8010f18:	6878      	ldr	r0, [r7, #4]
 8010f1a:	f7ff f809 	bl	800ff30 <f_read>
		if (rc != 1) break;
 8010f1e:	693b      	ldr	r3, [r7, #16]
 8010f20:	2b01      	cmp	r3, #1
 8010f22:	d116      	bne.n	8010f52 <f_gets+0x5a>
		c = s[0];
 8010f24:	7d3b      	ldrb	r3, [r7, #20]
 8010f26:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8010f28:	7dfb      	ldrb	r3, [r7, #23]
 8010f2a:	2b0d      	cmp	r3, #13
 8010f2c:	d100      	bne.n	8010f30 <f_gets+0x38>
 8010f2e:	e00a      	b.n	8010f46 <f_gets+0x4e>
		*p++ = c;
 8010f30:	69bb      	ldr	r3, [r7, #24]
 8010f32:	1c5a      	adds	r2, r3, #1
 8010f34:	61ba      	str	r2, [r7, #24]
 8010f36:	7dfa      	ldrb	r2, [r7, #23]
 8010f38:	701a      	strb	r2, [r3, #0]
		n++;
 8010f3a:	69fb      	ldr	r3, [r7, #28]
 8010f3c:	3301      	adds	r3, #1
 8010f3e:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8010f40:	7dfb      	ldrb	r3, [r7, #23]
 8010f42:	2b0a      	cmp	r3, #10
 8010f44:	d007      	beq.n	8010f56 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8010f46:	68bb      	ldr	r3, [r7, #8]
 8010f48:	3b01      	subs	r3, #1
 8010f4a:	69fa      	ldr	r2, [r7, #28]
 8010f4c:	429a      	cmp	r2, r3
 8010f4e:	dbde      	blt.n	8010f0e <f_gets+0x16>
 8010f50:	e002      	b.n	8010f58 <f_gets+0x60>
		if (rc != 1) break;
 8010f52:	bf00      	nop
 8010f54:	e000      	b.n	8010f58 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8010f56:	bf00      	nop
	}
	*p = 0;
 8010f58:	69bb      	ldr	r3, [r7, #24]
 8010f5a:	2200      	movs	r2, #0
 8010f5c:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8010f5e:	69fb      	ldr	r3, [r7, #28]
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d001      	beq.n	8010f68 <f_gets+0x70>
 8010f64:	68fb      	ldr	r3, [r7, #12]
 8010f66:	e000      	b.n	8010f6a <f_gets+0x72>
 8010f68:	2300      	movs	r3, #0
}
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	3720      	adds	r7, #32
 8010f6e:	46bd      	mov	sp, r7
 8010f70:	bd80      	pop	{r7, pc}
	...

08010f74 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010f74:	b480      	push	{r7}
 8010f76:	b087      	sub	sp, #28
 8010f78:	af00      	add	r7, sp, #0
 8010f7a:	60f8      	str	r0, [r7, #12]
 8010f7c:	60b9      	str	r1, [r7, #8]
 8010f7e:	4613      	mov	r3, r2
 8010f80:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010f82:	2301      	movs	r3, #1
 8010f84:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010f86:	2300      	movs	r3, #0
 8010f88:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010f8a:	4b1f      	ldr	r3, [pc, #124]	; (8011008 <FATFS_LinkDriverEx+0x94>)
 8010f8c:	7a5b      	ldrb	r3, [r3, #9]
 8010f8e:	b2db      	uxtb	r3, r3
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d131      	bne.n	8010ff8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010f94:	4b1c      	ldr	r3, [pc, #112]	; (8011008 <FATFS_LinkDriverEx+0x94>)
 8010f96:	7a5b      	ldrb	r3, [r3, #9]
 8010f98:	b2db      	uxtb	r3, r3
 8010f9a:	461a      	mov	r2, r3
 8010f9c:	4b1a      	ldr	r3, [pc, #104]	; (8011008 <FATFS_LinkDriverEx+0x94>)
 8010f9e:	2100      	movs	r1, #0
 8010fa0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010fa2:	4b19      	ldr	r3, [pc, #100]	; (8011008 <FATFS_LinkDriverEx+0x94>)
 8010fa4:	7a5b      	ldrb	r3, [r3, #9]
 8010fa6:	b2db      	uxtb	r3, r3
 8010fa8:	4a17      	ldr	r2, [pc, #92]	; (8011008 <FATFS_LinkDriverEx+0x94>)
 8010faa:	009b      	lsls	r3, r3, #2
 8010fac:	4413      	add	r3, r2
 8010fae:	68fa      	ldr	r2, [r7, #12]
 8010fb0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010fb2:	4b15      	ldr	r3, [pc, #84]	; (8011008 <FATFS_LinkDriverEx+0x94>)
 8010fb4:	7a5b      	ldrb	r3, [r3, #9]
 8010fb6:	b2db      	uxtb	r3, r3
 8010fb8:	461a      	mov	r2, r3
 8010fba:	4b13      	ldr	r3, [pc, #76]	; (8011008 <FATFS_LinkDriverEx+0x94>)
 8010fbc:	4413      	add	r3, r2
 8010fbe:	79fa      	ldrb	r2, [r7, #7]
 8010fc0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010fc2:	4b11      	ldr	r3, [pc, #68]	; (8011008 <FATFS_LinkDriverEx+0x94>)
 8010fc4:	7a5b      	ldrb	r3, [r3, #9]
 8010fc6:	b2db      	uxtb	r3, r3
 8010fc8:	1c5a      	adds	r2, r3, #1
 8010fca:	b2d1      	uxtb	r1, r2
 8010fcc:	4a0e      	ldr	r2, [pc, #56]	; (8011008 <FATFS_LinkDriverEx+0x94>)
 8010fce:	7251      	strb	r1, [r2, #9]
 8010fd0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010fd2:	7dbb      	ldrb	r3, [r7, #22]
 8010fd4:	3330      	adds	r3, #48	; 0x30
 8010fd6:	b2da      	uxtb	r2, r3
 8010fd8:	68bb      	ldr	r3, [r7, #8]
 8010fda:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010fdc:	68bb      	ldr	r3, [r7, #8]
 8010fde:	3301      	adds	r3, #1
 8010fe0:	223a      	movs	r2, #58	; 0x3a
 8010fe2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010fe4:	68bb      	ldr	r3, [r7, #8]
 8010fe6:	3302      	adds	r3, #2
 8010fe8:	222f      	movs	r2, #47	; 0x2f
 8010fea:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010fec:	68bb      	ldr	r3, [r7, #8]
 8010fee:	3303      	adds	r3, #3
 8010ff0:	2200      	movs	r2, #0
 8010ff2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010ff4:	2300      	movs	r3, #0
 8010ff6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010ff8:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ffa:	4618      	mov	r0, r3
 8010ffc:	371c      	adds	r7, #28
 8010ffe:	46bd      	mov	sp, r7
 8011000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011004:	4770      	bx	lr
 8011006:	bf00      	nop
 8011008:	20013948 	.word	0x20013948

0801100c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801100c:	b580      	push	{r7, lr}
 801100e:	b082      	sub	sp, #8
 8011010:	af00      	add	r7, sp, #0
 8011012:	6078      	str	r0, [r7, #4]
 8011014:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011016:	2200      	movs	r2, #0
 8011018:	6839      	ldr	r1, [r7, #0]
 801101a:	6878      	ldr	r0, [r7, #4]
 801101c:	f7ff ffaa 	bl	8010f74 <FATFS_LinkDriverEx>
 8011020:	4603      	mov	r3, r0
}
 8011022:	4618      	mov	r0, r3
 8011024:	3708      	adds	r7, #8
 8011026:	46bd      	mov	sp, r7
 8011028:	bd80      	pop	{r7, pc}
	...

0801102c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801102c:	b480      	push	{r7}
 801102e:	b085      	sub	sp, #20
 8011030:	af00      	add	r7, sp, #0
 8011032:	4603      	mov	r3, r0
 8011034:	6039      	str	r1, [r7, #0]
 8011036:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8011038:	88fb      	ldrh	r3, [r7, #6]
 801103a:	2b7f      	cmp	r3, #127	; 0x7f
 801103c:	d802      	bhi.n	8011044 <ff_convert+0x18>
		c = chr;
 801103e:	88fb      	ldrh	r3, [r7, #6]
 8011040:	81fb      	strh	r3, [r7, #14]
 8011042:	e025      	b.n	8011090 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8011044:	683b      	ldr	r3, [r7, #0]
 8011046:	2b00      	cmp	r3, #0
 8011048:	d00b      	beq.n	8011062 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801104a:	88fb      	ldrh	r3, [r7, #6]
 801104c:	2bff      	cmp	r3, #255	; 0xff
 801104e:	d805      	bhi.n	801105c <ff_convert+0x30>
 8011050:	88fb      	ldrh	r3, [r7, #6]
 8011052:	3b80      	subs	r3, #128	; 0x80
 8011054:	4a12      	ldr	r2, [pc, #72]	; (80110a0 <ff_convert+0x74>)
 8011056:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801105a:	e000      	b.n	801105e <ff_convert+0x32>
 801105c:	2300      	movs	r3, #0
 801105e:	81fb      	strh	r3, [r7, #14]
 8011060:	e016      	b.n	8011090 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8011062:	2300      	movs	r3, #0
 8011064:	81fb      	strh	r3, [r7, #14]
 8011066:	e009      	b.n	801107c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8011068:	89fb      	ldrh	r3, [r7, #14]
 801106a:	4a0d      	ldr	r2, [pc, #52]	; (80110a0 <ff_convert+0x74>)
 801106c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011070:	88fa      	ldrh	r2, [r7, #6]
 8011072:	429a      	cmp	r2, r3
 8011074:	d006      	beq.n	8011084 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8011076:	89fb      	ldrh	r3, [r7, #14]
 8011078:	3301      	adds	r3, #1
 801107a:	81fb      	strh	r3, [r7, #14]
 801107c:	89fb      	ldrh	r3, [r7, #14]
 801107e:	2b7f      	cmp	r3, #127	; 0x7f
 8011080:	d9f2      	bls.n	8011068 <ff_convert+0x3c>
 8011082:	e000      	b.n	8011086 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8011084:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8011086:	89fb      	ldrh	r3, [r7, #14]
 8011088:	3380      	adds	r3, #128	; 0x80
 801108a:	b29b      	uxth	r3, r3
 801108c:	b2db      	uxtb	r3, r3
 801108e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8011090:	89fb      	ldrh	r3, [r7, #14]
}
 8011092:	4618      	mov	r0, r3
 8011094:	3714      	adds	r7, #20
 8011096:	46bd      	mov	sp, r7
 8011098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801109c:	4770      	bx	lr
 801109e:	bf00      	nop
 80110a0:	080173b4 	.word	0x080173b4

080110a4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80110a4:	b480      	push	{r7}
 80110a6:	b087      	sub	sp, #28
 80110a8:	af00      	add	r7, sp, #0
 80110aa:	4603      	mov	r3, r0
 80110ac:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80110ae:	88fb      	ldrh	r3, [r7, #6]
 80110b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80110b4:	d201      	bcs.n	80110ba <ff_wtoupper+0x16>
 80110b6:	4b3e      	ldr	r3, [pc, #248]	; (80111b0 <ff_wtoupper+0x10c>)
 80110b8:	e000      	b.n	80110bc <ff_wtoupper+0x18>
 80110ba:	4b3e      	ldr	r3, [pc, #248]	; (80111b4 <ff_wtoupper+0x110>)
 80110bc:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80110be:	697b      	ldr	r3, [r7, #20]
 80110c0:	1c9a      	adds	r2, r3, #2
 80110c2:	617a      	str	r2, [r7, #20]
 80110c4:	881b      	ldrh	r3, [r3, #0]
 80110c6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80110c8:	8a7b      	ldrh	r3, [r7, #18]
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d068      	beq.n	80111a0 <ff_wtoupper+0xfc>
 80110ce:	88fa      	ldrh	r2, [r7, #6]
 80110d0:	8a7b      	ldrh	r3, [r7, #18]
 80110d2:	429a      	cmp	r2, r3
 80110d4:	d364      	bcc.n	80111a0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80110d6:	697b      	ldr	r3, [r7, #20]
 80110d8:	1c9a      	adds	r2, r3, #2
 80110da:	617a      	str	r2, [r7, #20]
 80110dc:	881b      	ldrh	r3, [r3, #0]
 80110de:	823b      	strh	r3, [r7, #16]
 80110e0:	8a3b      	ldrh	r3, [r7, #16]
 80110e2:	0a1b      	lsrs	r3, r3, #8
 80110e4:	81fb      	strh	r3, [r7, #14]
 80110e6:	8a3b      	ldrh	r3, [r7, #16]
 80110e8:	b2db      	uxtb	r3, r3
 80110ea:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80110ec:	88fa      	ldrh	r2, [r7, #6]
 80110ee:	8a79      	ldrh	r1, [r7, #18]
 80110f0:	8a3b      	ldrh	r3, [r7, #16]
 80110f2:	440b      	add	r3, r1
 80110f4:	429a      	cmp	r2, r3
 80110f6:	da49      	bge.n	801118c <ff_wtoupper+0xe8>
			switch (cmd) {
 80110f8:	89fb      	ldrh	r3, [r7, #14]
 80110fa:	2b08      	cmp	r3, #8
 80110fc:	d84f      	bhi.n	801119e <ff_wtoupper+0xfa>
 80110fe:	a201      	add	r2, pc, #4	; (adr r2, 8011104 <ff_wtoupper+0x60>)
 8011100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011104:	08011129 	.word	0x08011129
 8011108:	0801113b 	.word	0x0801113b
 801110c:	08011151 	.word	0x08011151
 8011110:	08011159 	.word	0x08011159
 8011114:	08011161 	.word	0x08011161
 8011118:	08011169 	.word	0x08011169
 801111c:	08011171 	.word	0x08011171
 8011120:	08011179 	.word	0x08011179
 8011124:	08011181 	.word	0x08011181
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8011128:	88fa      	ldrh	r2, [r7, #6]
 801112a:	8a7b      	ldrh	r3, [r7, #18]
 801112c:	1ad3      	subs	r3, r2, r3
 801112e:	005b      	lsls	r3, r3, #1
 8011130:	697a      	ldr	r2, [r7, #20]
 8011132:	4413      	add	r3, r2
 8011134:	881b      	ldrh	r3, [r3, #0]
 8011136:	80fb      	strh	r3, [r7, #6]
 8011138:	e027      	b.n	801118a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801113a:	88fa      	ldrh	r2, [r7, #6]
 801113c:	8a7b      	ldrh	r3, [r7, #18]
 801113e:	1ad3      	subs	r3, r2, r3
 8011140:	b29b      	uxth	r3, r3
 8011142:	f003 0301 	and.w	r3, r3, #1
 8011146:	b29b      	uxth	r3, r3
 8011148:	88fa      	ldrh	r2, [r7, #6]
 801114a:	1ad3      	subs	r3, r2, r3
 801114c:	80fb      	strh	r3, [r7, #6]
 801114e:	e01c      	b.n	801118a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8011150:	88fb      	ldrh	r3, [r7, #6]
 8011152:	3b10      	subs	r3, #16
 8011154:	80fb      	strh	r3, [r7, #6]
 8011156:	e018      	b.n	801118a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8011158:	88fb      	ldrh	r3, [r7, #6]
 801115a:	3b20      	subs	r3, #32
 801115c:	80fb      	strh	r3, [r7, #6]
 801115e:	e014      	b.n	801118a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8011160:	88fb      	ldrh	r3, [r7, #6]
 8011162:	3b30      	subs	r3, #48	; 0x30
 8011164:	80fb      	strh	r3, [r7, #6]
 8011166:	e010      	b.n	801118a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8011168:	88fb      	ldrh	r3, [r7, #6]
 801116a:	3b1a      	subs	r3, #26
 801116c:	80fb      	strh	r3, [r7, #6]
 801116e:	e00c      	b.n	801118a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8011170:	88fb      	ldrh	r3, [r7, #6]
 8011172:	3308      	adds	r3, #8
 8011174:	80fb      	strh	r3, [r7, #6]
 8011176:	e008      	b.n	801118a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8011178:	88fb      	ldrh	r3, [r7, #6]
 801117a:	3b50      	subs	r3, #80	; 0x50
 801117c:	80fb      	strh	r3, [r7, #6]
 801117e:	e004      	b.n	801118a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8011180:	88fb      	ldrh	r3, [r7, #6]
 8011182:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8011186:	80fb      	strh	r3, [r7, #6]
 8011188:	bf00      	nop
			}
			break;
 801118a:	e008      	b.n	801119e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801118c:	89fb      	ldrh	r3, [r7, #14]
 801118e:	2b00      	cmp	r3, #0
 8011190:	d195      	bne.n	80110be <ff_wtoupper+0x1a>
 8011192:	8a3b      	ldrh	r3, [r7, #16]
 8011194:	005b      	lsls	r3, r3, #1
 8011196:	697a      	ldr	r2, [r7, #20]
 8011198:	4413      	add	r3, r2
 801119a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801119c:	e78f      	b.n	80110be <ff_wtoupper+0x1a>
			break;
 801119e:	bf00      	nop
	}

	return chr;
 80111a0:	88fb      	ldrh	r3, [r7, #6]
}
 80111a2:	4618      	mov	r0, r3
 80111a4:	371c      	adds	r7, #28
 80111a6:	46bd      	mov	sp, r7
 80111a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ac:	4770      	bx	lr
 80111ae:	bf00      	nop
 80111b0:	080174b4 	.word	0x080174b4
 80111b4:	080176a8 	.word	0x080176a8

080111b8 <cos>:
 80111b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80111ba:	ec51 0b10 	vmov	r0, r1, d0
 80111be:	4a1e      	ldr	r2, [pc, #120]	; (8011238 <cos+0x80>)
 80111c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80111c4:	4293      	cmp	r3, r2
 80111c6:	dc06      	bgt.n	80111d6 <cos+0x1e>
 80111c8:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8011230 <cos+0x78>
 80111cc:	f000 fa74 	bl	80116b8 <__kernel_cos>
 80111d0:	ec51 0b10 	vmov	r0, r1, d0
 80111d4:	e007      	b.n	80111e6 <cos+0x2e>
 80111d6:	4a19      	ldr	r2, [pc, #100]	; (801123c <cos+0x84>)
 80111d8:	4293      	cmp	r3, r2
 80111da:	dd09      	ble.n	80111f0 <cos+0x38>
 80111dc:	ee10 2a10 	vmov	r2, s0
 80111e0:	460b      	mov	r3, r1
 80111e2:	f7ef f869 	bl	80002b8 <__aeabi_dsub>
 80111e6:	ec41 0b10 	vmov	d0, r0, r1
 80111ea:	b005      	add	sp, #20
 80111ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80111f0:	4668      	mov	r0, sp
 80111f2:	f000 f86d 	bl	80112d0 <__ieee754_rem_pio2>
 80111f6:	f000 0003 	and.w	r0, r0, #3
 80111fa:	2801      	cmp	r0, #1
 80111fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011200:	ed9d 0b00 	vldr	d0, [sp]
 8011204:	d007      	beq.n	8011216 <cos+0x5e>
 8011206:	2802      	cmp	r0, #2
 8011208:	d00e      	beq.n	8011228 <cos+0x70>
 801120a:	2800      	cmp	r0, #0
 801120c:	d0de      	beq.n	80111cc <cos+0x14>
 801120e:	2001      	movs	r0, #1
 8011210:	f000 fe5a 	bl	8011ec8 <__kernel_sin>
 8011214:	e7dc      	b.n	80111d0 <cos+0x18>
 8011216:	f000 fe57 	bl	8011ec8 <__kernel_sin>
 801121a:	ec53 2b10 	vmov	r2, r3, d0
 801121e:	ee10 0a10 	vmov	r0, s0
 8011222:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011226:	e7de      	b.n	80111e6 <cos+0x2e>
 8011228:	f000 fa46 	bl	80116b8 <__kernel_cos>
 801122c:	e7f5      	b.n	801121a <cos+0x62>
 801122e:	bf00      	nop
	...
 8011238:	3fe921fb 	.word	0x3fe921fb
 801123c:	7fefffff 	.word	0x7fefffff

08011240 <sin>:
 8011240:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011242:	ec51 0b10 	vmov	r0, r1, d0
 8011246:	4a20      	ldr	r2, [pc, #128]	; (80112c8 <sin+0x88>)
 8011248:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801124c:	4293      	cmp	r3, r2
 801124e:	dc07      	bgt.n	8011260 <sin+0x20>
 8011250:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80112c0 <sin+0x80>
 8011254:	2000      	movs	r0, #0
 8011256:	f000 fe37 	bl	8011ec8 <__kernel_sin>
 801125a:	ec51 0b10 	vmov	r0, r1, d0
 801125e:	e007      	b.n	8011270 <sin+0x30>
 8011260:	4a1a      	ldr	r2, [pc, #104]	; (80112cc <sin+0x8c>)
 8011262:	4293      	cmp	r3, r2
 8011264:	dd09      	ble.n	801127a <sin+0x3a>
 8011266:	ee10 2a10 	vmov	r2, s0
 801126a:	460b      	mov	r3, r1
 801126c:	f7ef f824 	bl	80002b8 <__aeabi_dsub>
 8011270:	ec41 0b10 	vmov	d0, r0, r1
 8011274:	b005      	add	sp, #20
 8011276:	f85d fb04 	ldr.w	pc, [sp], #4
 801127a:	4668      	mov	r0, sp
 801127c:	f000 f828 	bl	80112d0 <__ieee754_rem_pio2>
 8011280:	f000 0003 	and.w	r0, r0, #3
 8011284:	2801      	cmp	r0, #1
 8011286:	ed9d 1b02 	vldr	d1, [sp, #8]
 801128a:	ed9d 0b00 	vldr	d0, [sp]
 801128e:	d004      	beq.n	801129a <sin+0x5a>
 8011290:	2802      	cmp	r0, #2
 8011292:	d005      	beq.n	80112a0 <sin+0x60>
 8011294:	b970      	cbnz	r0, 80112b4 <sin+0x74>
 8011296:	2001      	movs	r0, #1
 8011298:	e7dd      	b.n	8011256 <sin+0x16>
 801129a:	f000 fa0d 	bl	80116b8 <__kernel_cos>
 801129e:	e7dc      	b.n	801125a <sin+0x1a>
 80112a0:	2001      	movs	r0, #1
 80112a2:	f000 fe11 	bl	8011ec8 <__kernel_sin>
 80112a6:	ec53 2b10 	vmov	r2, r3, d0
 80112aa:	ee10 0a10 	vmov	r0, s0
 80112ae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80112b2:	e7dd      	b.n	8011270 <sin+0x30>
 80112b4:	f000 fa00 	bl	80116b8 <__kernel_cos>
 80112b8:	e7f5      	b.n	80112a6 <sin+0x66>
 80112ba:	bf00      	nop
 80112bc:	f3af 8000 	nop.w
	...
 80112c8:	3fe921fb 	.word	0x3fe921fb
 80112cc:	7fefffff 	.word	0x7fefffff

080112d0 <__ieee754_rem_pio2>:
 80112d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112d4:	ec57 6b10 	vmov	r6, r7, d0
 80112d8:	4bc3      	ldr	r3, [pc, #780]	; (80115e8 <__ieee754_rem_pio2+0x318>)
 80112da:	b08d      	sub	sp, #52	; 0x34
 80112dc:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80112e0:	4598      	cmp	r8, r3
 80112e2:	4604      	mov	r4, r0
 80112e4:	9704      	str	r7, [sp, #16]
 80112e6:	dc07      	bgt.n	80112f8 <__ieee754_rem_pio2+0x28>
 80112e8:	2200      	movs	r2, #0
 80112ea:	2300      	movs	r3, #0
 80112ec:	ed84 0b00 	vstr	d0, [r4]
 80112f0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80112f4:	2500      	movs	r5, #0
 80112f6:	e027      	b.n	8011348 <__ieee754_rem_pio2+0x78>
 80112f8:	4bbc      	ldr	r3, [pc, #752]	; (80115ec <__ieee754_rem_pio2+0x31c>)
 80112fa:	4598      	cmp	r8, r3
 80112fc:	dc75      	bgt.n	80113ea <__ieee754_rem_pio2+0x11a>
 80112fe:	9b04      	ldr	r3, [sp, #16]
 8011300:	4dbb      	ldr	r5, [pc, #748]	; (80115f0 <__ieee754_rem_pio2+0x320>)
 8011302:	2b00      	cmp	r3, #0
 8011304:	ee10 0a10 	vmov	r0, s0
 8011308:	a3a9      	add	r3, pc, #676	; (adr r3, 80115b0 <__ieee754_rem_pio2+0x2e0>)
 801130a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801130e:	4639      	mov	r1, r7
 8011310:	dd36      	ble.n	8011380 <__ieee754_rem_pio2+0xb0>
 8011312:	f7ee ffd1 	bl	80002b8 <__aeabi_dsub>
 8011316:	45a8      	cmp	r8, r5
 8011318:	4606      	mov	r6, r0
 801131a:	460f      	mov	r7, r1
 801131c:	d018      	beq.n	8011350 <__ieee754_rem_pio2+0x80>
 801131e:	a3a6      	add	r3, pc, #664	; (adr r3, 80115b8 <__ieee754_rem_pio2+0x2e8>)
 8011320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011324:	f7ee ffc8 	bl	80002b8 <__aeabi_dsub>
 8011328:	4602      	mov	r2, r0
 801132a:	460b      	mov	r3, r1
 801132c:	e9c4 2300 	strd	r2, r3, [r4]
 8011330:	4630      	mov	r0, r6
 8011332:	4639      	mov	r1, r7
 8011334:	f7ee ffc0 	bl	80002b8 <__aeabi_dsub>
 8011338:	a39f      	add	r3, pc, #636	; (adr r3, 80115b8 <__ieee754_rem_pio2+0x2e8>)
 801133a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801133e:	f7ee ffbb 	bl	80002b8 <__aeabi_dsub>
 8011342:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011346:	2501      	movs	r5, #1
 8011348:	4628      	mov	r0, r5
 801134a:	b00d      	add	sp, #52	; 0x34
 801134c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011350:	a39b      	add	r3, pc, #620	; (adr r3, 80115c0 <__ieee754_rem_pio2+0x2f0>)
 8011352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011356:	f7ee ffaf 	bl	80002b8 <__aeabi_dsub>
 801135a:	a39b      	add	r3, pc, #620	; (adr r3, 80115c8 <__ieee754_rem_pio2+0x2f8>)
 801135c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011360:	4606      	mov	r6, r0
 8011362:	460f      	mov	r7, r1
 8011364:	f7ee ffa8 	bl	80002b8 <__aeabi_dsub>
 8011368:	4602      	mov	r2, r0
 801136a:	460b      	mov	r3, r1
 801136c:	e9c4 2300 	strd	r2, r3, [r4]
 8011370:	4630      	mov	r0, r6
 8011372:	4639      	mov	r1, r7
 8011374:	f7ee ffa0 	bl	80002b8 <__aeabi_dsub>
 8011378:	a393      	add	r3, pc, #588	; (adr r3, 80115c8 <__ieee754_rem_pio2+0x2f8>)
 801137a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801137e:	e7de      	b.n	801133e <__ieee754_rem_pio2+0x6e>
 8011380:	f7ee ff9c 	bl	80002bc <__adddf3>
 8011384:	45a8      	cmp	r8, r5
 8011386:	4606      	mov	r6, r0
 8011388:	460f      	mov	r7, r1
 801138a:	d016      	beq.n	80113ba <__ieee754_rem_pio2+0xea>
 801138c:	a38a      	add	r3, pc, #552	; (adr r3, 80115b8 <__ieee754_rem_pio2+0x2e8>)
 801138e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011392:	f7ee ff93 	bl	80002bc <__adddf3>
 8011396:	4602      	mov	r2, r0
 8011398:	460b      	mov	r3, r1
 801139a:	e9c4 2300 	strd	r2, r3, [r4]
 801139e:	4630      	mov	r0, r6
 80113a0:	4639      	mov	r1, r7
 80113a2:	f7ee ff89 	bl	80002b8 <__aeabi_dsub>
 80113a6:	a384      	add	r3, pc, #528	; (adr r3, 80115b8 <__ieee754_rem_pio2+0x2e8>)
 80113a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113ac:	f7ee ff86 	bl	80002bc <__adddf3>
 80113b0:	f04f 35ff 	mov.w	r5, #4294967295
 80113b4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80113b8:	e7c6      	b.n	8011348 <__ieee754_rem_pio2+0x78>
 80113ba:	a381      	add	r3, pc, #516	; (adr r3, 80115c0 <__ieee754_rem_pio2+0x2f0>)
 80113bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113c0:	f7ee ff7c 	bl	80002bc <__adddf3>
 80113c4:	a380      	add	r3, pc, #512	; (adr r3, 80115c8 <__ieee754_rem_pio2+0x2f8>)
 80113c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113ca:	4606      	mov	r6, r0
 80113cc:	460f      	mov	r7, r1
 80113ce:	f7ee ff75 	bl	80002bc <__adddf3>
 80113d2:	4602      	mov	r2, r0
 80113d4:	460b      	mov	r3, r1
 80113d6:	e9c4 2300 	strd	r2, r3, [r4]
 80113da:	4630      	mov	r0, r6
 80113dc:	4639      	mov	r1, r7
 80113de:	f7ee ff6b 	bl	80002b8 <__aeabi_dsub>
 80113e2:	a379      	add	r3, pc, #484	; (adr r3, 80115c8 <__ieee754_rem_pio2+0x2f8>)
 80113e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113e8:	e7e0      	b.n	80113ac <__ieee754_rem_pio2+0xdc>
 80113ea:	4b82      	ldr	r3, [pc, #520]	; (80115f4 <__ieee754_rem_pio2+0x324>)
 80113ec:	4598      	cmp	r8, r3
 80113ee:	f300 80d0 	bgt.w	8011592 <__ieee754_rem_pio2+0x2c2>
 80113f2:	f000 fe23 	bl	801203c <fabs>
 80113f6:	ec57 6b10 	vmov	r6, r7, d0
 80113fa:	ee10 0a10 	vmov	r0, s0
 80113fe:	a374      	add	r3, pc, #464	; (adr r3, 80115d0 <__ieee754_rem_pio2+0x300>)
 8011400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011404:	4639      	mov	r1, r7
 8011406:	f7ef f90f 	bl	8000628 <__aeabi_dmul>
 801140a:	2200      	movs	r2, #0
 801140c:	4b7a      	ldr	r3, [pc, #488]	; (80115f8 <__ieee754_rem_pio2+0x328>)
 801140e:	f7ee ff55 	bl	80002bc <__adddf3>
 8011412:	f7ef fbb9 	bl	8000b88 <__aeabi_d2iz>
 8011416:	4605      	mov	r5, r0
 8011418:	f7ef f89c 	bl	8000554 <__aeabi_i2d>
 801141c:	a364      	add	r3, pc, #400	; (adr r3, 80115b0 <__ieee754_rem_pio2+0x2e0>)
 801141e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011422:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011426:	f7ef f8ff 	bl	8000628 <__aeabi_dmul>
 801142a:	4602      	mov	r2, r0
 801142c:	460b      	mov	r3, r1
 801142e:	4630      	mov	r0, r6
 8011430:	4639      	mov	r1, r7
 8011432:	f7ee ff41 	bl	80002b8 <__aeabi_dsub>
 8011436:	a360      	add	r3, pc, #384	; (adr r3, 80115b8 <__ieee754_rem_pio2+0x2e8>)
 8011438:	e9d3 2300 	ldrd	r2, r3, [r3]
 801143c:	4682      	mov	sl, r0
 801143e:	468b      	mov	fp, r1
 8011440:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011444:	f7ef f8f0 	bl	8000628 <__aeabi_dmul>
 8011448:	2d1f      	cmp	r5, #31
 801144a:	4606      	mov	r6, r0
 801144c:	460f      	mov	r7, r1
 801144e:	dc0c      	bgt.n	801146a <__ieee754_rem_pio2+0x19a>
 8011450:	1e6a      	subs	r2, r5, #1
 8011452:	4b6a      	ldr	r3, [pc, #424]	; (80115fc <__ieee754_rem_pio2+0x32c>)
 8011454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011458:	4543      	cmp	r3, r8
 801145a:	d006      	beq.n	801146a <__ieee754_rem_pio2+0x19a>
 801145c:	4632      	mov	r2, r6
 801145e:	463b      	mov	r3, r7
 8011460:	4650      	mov	r0, sl
 8011462:	4659      	mov	r1, fp
 8011464:	f7ee ff28 	bl	80002b8 <__aeabi_dsub>
 8011468:	e00e      	b.n	8011488 <__ieee754_rem_pio2+0x1b8>
 801146a:	4632      	mov	r2, r6
 801146c:	463b      	mov	r3, r7
 801146e:	4650      	mov	r0, sl
 8011470:	4659      	mov	r1, fp
 8011472:	f7ee ff21 	bl	80002b8 <__aeabi_dsub>
 8011476:	ea4f 5328 	mov.w	r3, r8, asr #20
 801147a:	9305      	str	r3, [sp, #20]
 801147c:	9a05      	ldr	r2, [sp, #20]
 801147e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011482:	1ad3      	subs	r3, r2, r3
 8011484:	2b10      	cmp	r3, #16
 8011486:	dc02      	bgt.n	801148e <__ieee754_rem_pio2+0x1be>
 8011488:	e9c4 0100 	strd	r0, r1, [r4]
 801148c:	e039      	b.n	8011502 <__ieee754_rem_pio2+0x232>
 801148e:	a34c      	add	r3, pc, #304	; (adr r3, 80115c0 <__ieee754_rem_pio2+0x2f0>)
 8011490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011494:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011498:	f7ef f8c6 	bl	8000628 <__aeabi_dmul>
 801149c:	4606      	mov	r6, r0
 801149e:	460f      	mov	r7, r1
 80114a0:	4602      	mov	r2, r0
 80114a2:	460b      	mov	r3, r1
 80114a4:	4650      	mov	r0, sl
 80114a6:	4659      	mov	r1, fp
 80114a8:	f7ee ff06 	bl	80002b8 <__aeabi_dsub>
 80114ac:	4602      	mov	r2, r0
 80114ae:	460b      	mov	r3, r1
 80114b0:	4680      	mov	r8, r0
 80114b2:	4689      	mov	r9, r1
 80114b4:	4650      	mov	r0, sl
 80114b6:	4659      	mov	r1, fp
 80114b8:	f7ee fefe 	bl	80002b8 <__aeabi_dsub>
 80114bc:	4632      	mov	r2, r6
 80114be:	463b      	mov	r3, r7
 80114c0:	f7ee fefa 	bl	80002b8 <__aeabi_dsub>
 80114c4:	a340      	add	r3, pc, #256	; (adr r3, 80115c8 <__ieee754_rem_pio2+0x2f8>)
 80114c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114ca:	4606      	mov	r6, r0
 80114cc:	460f      	mov	r7, r1
 80114ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80114d2:	f7ef f8a9 	bl	8000628 <__aeabi_dmul>
 80114d6:	4632      	mov	r2, r6
 80114d8:	463b      	mov	r3, r7
 80114da:	f7ee feed 	bl	80002b8 <__aeabi_dsub>
 80114de:	4602      	mov	r2, r0
 80114e0:	460b      	mov	r3, r1
 80114e2:	4606      	mov	r6, r0
 80114e4:	460f      	mov	r7, r1
 80114e6:	4640      	mov	r0, r8
 80114e8:	4649      	mov	r1, r9
 80114ea:	f7ee fee5 	bl	80002b8 <__aeabi_dsub>
 80114ee:	9a05      	ldr	r2, [sp, #20]
 80114f0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80114f4:	1ad3      	subs	r3, r2, r3
 80114f6:	2b31      	cmp	r3, #49	; 0x31
 80114f8:	dc20      	bgt.n	801153c <__ieee754_rem_pio2+0x26c>
 80114fa:	e9c4 0100 	strd	r0, r1, [r4]
 80114fe:	46c2      	mov	sl, r8
 8011500:	46cb      	mov	fp, r9
 8011502:	e9d4 8900 	ldrd	r8, r9, [r4]
 8011506:	4650      	mov	r0, sl
 8011508:	4642      	mov	r2, r8
 801150a:	464b      	mov	r3, r9
 801150c:	4659      	mov	r1, fp
 801150e:	f7ee fed3 	bl	80002b8 <__aeabi_dsub>
 8011512:	463b      	mov	r3, r7
 8011514:	4632      	mov	r2, r6
 8011516:	f7ee fecf 	bl	80002b8 <__aeabi_dsub>
 801151a:	9b04      	ldr	r3, [sp, #16]
 801151c:	2b00      	cmp	r3, #0
 801151e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011522:	f6bf af11 	bge.w	8011348 <__ieee754_rem_pio2+0x78>
 8011526:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801152a:	6063      	str	r3, [r4, #4]
 801152c:	f8c4 8000 	str.w	r8, [r4]
 8011530:	60a0      	str	r0, [r4, #8]
 8011532:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011536:	60e3      	str	r3, [r4, #12]
 8011538:	426d      	negs	r5, r5
 801153a:	e705      	b.n	8011348 <__ieee754_rem_pio2+0x78>
 801153c:	a326      	add	r3, pc, #152	; (adr r3, 80115d8 <__ieee754_rem_pio2+0x308>)
 801153e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011542:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011546:	f7ef f86f 	bl	8000628 <__aeabi_dmul>
 801154a:	4606      	mov	r6, r0
 801154c:	460f      	mov	r7, r1
 801154e:	4602      	mov	r2, r0
 8011550:	460b      	mov	r3, r1
 8011552:	4640      	mov	r0, r8
 8011554:	4649      	mov	r1, r9
 8011556:	f7ee feaf 	bl	80002b8 <__aeabi_dsub>
 801155a:	4602      	mov	r2, r0
 801155c:	460b      	mov	r3, r1
 801155e:	4682      	mov	sl, r0
 8011560:	468b      	mov	fp, r1
 8011562:	4640      	mov	r0, r8
 8011564:	4649      	mov	r1, r9
 8011566:	f7ee fea7 	bl	80002b8 <__aeabi_dsub>
 801156a:	4632      	mov	r2, r6
 801156c:	463b      	mov	r3, r7
 801156e:	f7ee fea3 	bl	80002b8 <__aeabi_dsub>
 8011572:	a31b      	add	r3, pc, #108	; (adr r3, 80115e0 <__ieee754_rem_pio2+0x310>)
 8011574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011578:	4606      	mov	r6, r0
 801157a:	460f      	mov	r7, r1
 801157c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011580:	f7ef f852 	bl	8000628 <__aeabi_dmul>
 8011584:	4632      	mov	r2, r6
 8011586:	463b      	mov	r3, r7
 8011588:	f7ee fe96 	bl	80002b8 <__aeabi_dsub>
 801158c:	4606      	mov	r6, r0
 801158e:	460f      	mov	r7, r1
 8011590:	e764      	b.n	801145c <__ieee754_rem_pio2+0x18c>
 8011592:	4b1b      	ldr	r3, [pc, #108]	; (8011600 <__ieee754_rem_pio2+0x330>)
 8011594:	4598      	cmp	r8, r3
 8011596:	dd35      	ble.n	8011604 <__ieee754_rem_pio2+0x334>
 8011598:	ee10 2a10 	vmov	r2, s0
 801159c:	463b      	mov	r3, r7
 801159e:	4630      	mov	r0, r6
 80115a0:	4639      	mov	r1, r7
 80115a2:	f7ee fe89 	bl	80002b8 <__aeabi_dsub>
 80115a6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80115aa:	e9c4 0100 	strd	r0, r1, [r4]
 80115ae:	e6a1      	b.n	80112f4 <__ieee754_rem_pio2+0x24>
 80115b0:	54400000 	.word	0x54400000
 80115b4:	3ff921fb 	.word	0x3ff921fb
 80115b8:	1a626331 	.word	0x1a626331
 80115bc:	3dd0b461 	.word	0x3dd0b461
 80115c0:	1a600000 	.word	0x1a600000
 80115c4:	3dd0b461 	.word	0x3dd0b461
 80115c8:	2e037073 	.word	0x2e037073
 80115cc:	3ba3198a 	.word	0x3ba3198a
 80115d0:	6dc9c883 	.word	0x6dc9c883
 80115d4:	3fe45f30 	.word	0x3fe45f30
 80115d8:	2e000000 	.word	0x2e000000
 80115dc:	3ba3198a 	.word	0x3ba3198a
 80115e0:	252049c1 	.word	0x252049c1
 80115e4:	397b839a 	.word	0x397b839a
 80115e8:	3fe921fb 	.word	0x3fe921fb
 80115ec:	4002d97b 	.word	0x4002d97b
 80115f0:	3ff921fb 	.word	0x3ff921fb
 80115f4:	413921fb 	.word	0x413921fb
 80115f8:	3fe00000 	.word	0x3fe00000
 80115fc:	08017764 	.word	0x08017764
 8011600:	7fefffff 	.word	0x7fefffff
 8011604:	ea4f 5528 	mov.w	r5, r8, asr #20
 8011608:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 801160c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8011610:	4630      	mov	r0, r6
 8011612:	460f      	mov	r7, r1
 8011614:	f7ef fab8 	bl	8000b88 <__aeabi_d2iz>
 8011618:	f7ee ff9c 	bl	8000554 <__aeabi_i2d>
 801161c:	4602      	mov	r2, r0
 801161e:	460b      	mov	r3, r1
 8011620:	4630      	mov	r0, r6
 8011622:	4639      	mov	r1, r7
 8011624:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011628:	f7ee fe46 	bl	80002b8 <__aeabi_dsub>
 801162c:	2200      	movs	r2, #0
 801162e:	4b1f      	ldr	r3, [pc, #124]	; (80116ac <__ieee754_rem_pio2+0x3dc>)
 8011630:	f7ee fffa 	bl	8000628 <__aeabi_dmul>
 8011634:	460f      	mov	r7, r1
 8011636:	4606      	mov	r6, r0
 8011638:	f7ef faa6 	bl	8000b88 <__aeabi_d2iz>
 801163c:	f7ee ff8a 	bl	8000554 <__aeabi_i2d>
 8011640:	4602      	mov	r2, r0
 8011642:	460b      	mov	r3, r1
 8011644:	4630      	mov	r0, r6
 8011646:	4639      	mov	r1, r7
 8011648:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801164c:	f7ee fe34 	bl	80002b8 <__aeabi_dsub>
 8011650:	2200      	movs	r2, #0
 8011652:	4b16      	ldr	r3, [pc, #88]	; (80116ac <__ieee754_rem_pio2+0x3dc>)
 8011654:	f7ee ffe8 	bl	8000628 <__aeabi_dmul>
 8011658:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801165c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8011660:	f04f 0803 	mov.w	r8, #3
 8011664:	2600      	movs	r6, #0
 8011666:	2700      	movs	r7, #0
 8011668:	4632      	mov	r2, r6
 801166a:	463b      	mov	r3, r7
 801166c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8011670:	f108 3aff 	add.w	sl, r8, #4294967295
 8011674:	f7ef fa40 	bl	8000af8 <__aeabi_dcmpeq>
 8011678:	b9b0      	cbnz	r0, 80116a8 <__ieee754_rem_pio2+0x3d8>
 801167a:	4b0d      	ldr	r3, [pc, #52]	; (80116b0 <__ieee754_rem_pio2+0x3e0>)
 801167c:	9301      	str	r3, [sp, #4]
 801167e:	2302      	movs	r3, #2
 8011680:	9300      	str	r3, [sp, #0]
 8011682:	462a      	mov	r2, r5
 8011684:	4643      	mov	r3, r8
 8011686:	4621      	mov	r1, r4
 8011688:	a806      	add	r0, sp, #24
 801168a:	f000 f8dd 	bl	8011848 <__kernel_rem_pio2>
 801168e:	9b04      	ldr	r3, [sp, #16]
 8011690:	2b00      	cmp	r3, #0
 8011692:	4605      	mov	r5, r0
 8011694:	f6bf ae58 	bge.w	8011348 <__ieee754_rem_pio2+0x78>
 8011698:	6863      	ldr	r3, [r4, #4]
 801169a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801169e:	6063      	str	r3, [r4, #4]
 80116a0:	68e3      	ldr	r3, [r4, #12]
 80116a2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80116a6:	e746      	b.n	8011536 <__ieee754_rem_pio2+0x266>
 80116a8:	46d0      	mov	r8, sl
 80116aa:	e7dd      	b.n	8011668 <__ieee754_rem_pio2+0x398>
 80116ac:	41700000 	.word	0x41700000
 80116b0:	080177e4 	.word	0x080177e4
 80116b4:	00000000 	.word	0x00000000

080116b8 <__kernel_cos>:
 80116b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116bc:	ec59 8b10 	vmov	r8, r9, d0
 80116c0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80116c4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80116c8:	ed2d 8b02 	vpush	{d8}
 80116cc:	eeb0 8a41 	vmov.f32	s16, s2
 80116d0:	eef0 8a61 	vmov.f32	s17, s3
 80116d4:	da07      	bge.n	80116e6 <__kernel_cos+0x2e>
 80116d6:	ee10 0a10 	vmov	r0, s0
 80116da:	4649      	mov	r1, r9
 80116dc:	f7ef fa54 	bl	8000b88 <__aeabi_d2iz>
 80116e0:	2800      	cmp	r0, #0
 80116e2:	f000 8089 	beq.w	80117f8 <__kernel_cos+0x140>
 80116e6:	4642      	mov	r2, r8
 80116e8:	464b      	mov	r3, r9
 80116ea:	4640      	mov	r0, r8
 80116ec:	4649      	mov	r1, r9
 80116ee:	f7ee ff9b 	bl	8000628 <__aeabi_dmul>
 80116f2:	2200      	movs	r2, #0
 80116f4:	4b4e      	ldr	r3, [pc, #312]	; (8011830 <__kernel_cos+0x178>)
 80116f6:	4604      	mov	r4, r0
 80116f8:	460d      	mov	r5, r1
 80116fa:	f7ee ff95 	bl	8000628 <__aeabi_dmul>
 80116fe:	a340      	add	r3, pc, #256	; (adr r3, 8011800 <__kernel_cos+0x148>)
 8011700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011704:	4682      	mov	sl, r0
 8011706:	468b      	mov	fp, r1
 8011708:	4620      	mov	r0, r4
 801170a:	4629      	mov	r1, r5
 801170c:	f7ee ff8c 	bl	8000628 <__aeabi_dmul>
 8011710:	a33d      	add	r3, pc, #244	; (adr r3, 8011808 <__kernel_cos+0x150>)
 8011712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011716:	f7ee fdd1 	bl	80002bc <__adddf3>
 801171a:	4622      	mov	r2, r4
 801171c:	462b      	mov	r3, r5
 801171e:	f7ee ff83 	bl	8000628 <__aeabi_dmul>
 8011722:	a33b      	add	r3, pc, #236	; (adr r3, 8011810 <__kernel_cos+0x158>)
 8011724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011728:	f7ee fdc6 	bl	80002b8 <__aeabi_dsub>
 801172c:	4622      	mov	r2, r4
 801172e:	462b      	mov	r3, r5
 8011730:	f7ee ff7a 	bl	8000628 <__aeabi_dmul>
 8011734:	a338      	add	r3, pc, #224	; (adr r3, 8011818 <__kernel_cos+0x160>)
 8011736:	e9d3 2300 	ldrd	r2, r3, [r3]
 801173a:	f7ee fdbf 	bl	80002bc <__adddf3>
 801173e:	4622      	mov	r2, r4
 8011740:	462b      	mov	r3, r5
 8011742:	f7ee ff71 	bl	8000628 <__aeabi_dmul>
 8011746:	a336      	add	r3, pc, #216	; (adr r3, 8011820 <__kernel_cos+0x168>)
 8011748:	e9d3 2300 	ldrd	r2, r3, [r3]
 801174c:	f7ee fdb4 	bl	80002b8 <__aeabi_dsub>
 8011750:	4622      	mov	r2, r4
 8011752:	462b      	mov	r3, r5
 8011754:	f7ee ff68 	bl	8000628 <__aeabi_dmul>
 8011758:	a333      	add	r3, pc, #204	; (adr r3, 8011828 <__kernel_cos+0x170>)
 801175a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801175e:	f7ee fdad 	bl	80002bc <__adddf3>
 8011762:	4622      	mov	r2, r4
 8011764:	462b      	mov	r3, r5
 8011766:	f7ee ff5f 	bl	8000628 <__aeabi_dmul>
 801176a:	4622      	mov	r2, r4
 801176c:	462b      	mov	r3, r5
 801176e:	f7ee ff5b 	bl	8000628 <__aeabi_dmul>
 8011772:	ec53 2b18 	vmov	r2, r3, d8
 8011776:	4604      	mov	r4, r0
 8011778:	460d      	mov	r5, r1
 801177a:	4640      	mov	r0, r8
 801177c:	4649      	mov	r1, r9
 801177e:	f7ee ff53 	bl	8000628 <__aeabi_dmul>
 8011782:	460b      	mov	r3, r1
 8011784:	4602      	mov	r2, r0
 8011786:	4629      	mov	r1, r5
 8011788:	4620      	mov	r0, r4
 801178a:	f7ee fd95 	bl	80002b8 <__aeabi_dsub>
 801178e:	4b29      	ldr	r3, [pc, #164]	; (8011834 <__kernel_cos+0x17c>)
 8011790:	429e      	cmp	r6, r3
 8011792:	4680      	mov	r8, r0
 8011794:	4689      	mov	r9, r1
 8011796:	dc11      	bgt.n	80117bc <__kernel_cos+0x104>
 8011798:	4602      	mov	r2, r0
 801179a:	460b      	mov	r3, r1
 801179c:	4650      	mov	r0, sl
 801179e:	4659      	mov	r1, fp
 80117a0:	f7ee fd8a 	bl	80002b8 <__aeabi_dsub>
 80117a4:	460b      	mov	r3, r1
 80117a6:	4924      	ldr	r1, [pc, #144]	; (8011838 <__kernel_cos+0x180>)
 80117a8:	4602      	mov	r2, r0
 80117aa:	2000      	movs	r0, #0
 80117ac:	f7ee fd84 	bl	80002b8 <__aeabi_dsub>
 80117b0:	ecbd 8b02 	vpop	{d8}
 80117b4:	ec41 0b10 	vmov	d0, r0, r1
 80117b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117bc:	4b1f      	ldr	r3, [pc, #124]	; (801183c <__kernel_cos+0x184>)
 80117be:	491e      	ldr	r1, [pc, #120]	; (8011838 <__kernel_cos+0x180>)
 80117c0:	429e      	cmp	r6, r3
 80117c2:	bfcc      	ite	gt
 80117c4:	4d1e      	ldrgt	r5, [pc, #120]	; (8011840 <__kernel_cos+0x188>)
 80117c6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80117ca:	2400      	movs	r4, #0
 80117cc:	4622      	mov	r2, r4
 80117ce:	462b      	mov	r3, r5
 80117d0:	2000      	movs	r0, #0
 80117d2:	f7ee fd71 	bl	80002b8 <__aeabi_dsub>
 80117d6:	4622      	mov	r2, r4
 80117d8:	4606      	mov	r6, r0
 80117da:	460f      	mov	r7, r1
 80117dc:	462b      	mov	r3, r5
 80117de:	4650      	mov	r0, sl
 80117e0:	4659      	mov	r1, fp
 80117e2:	f7ee fd69 	bl	80002b8 <__aeabi_dsub>
 80117e6:	4642      	mov	r2, r8
 80117e8:	464b      	mov	r3, r9
 80117ea:	f7ee fd65 	bl	80002b8 <__aeabi_dsub>
 80117ee:	4602      	mov	r2, r0
 80117f0:	460b      	mov	r3, r1
 80117f2:	4630      	mov	r0, r6
 80117f4:	4639      	mov	r1, r7
 80117f6:	e7d9      	b.n	80117ac <__kernel_cos+0xf4>
 80117f8:	2000      	movs	r0, #0
 80117fa:	490f      	ldr	r1, [pc, #60]	; (8011838 <__kernel_cos+0x180>)
 80117fc:	e7d8      	b.n	80117b0 <__kernel_cos+0xf8>
 80117fe:	bf00      	nop
 8011800:	be8838d4 	.word	0xbe8838d4
 8011804:	bda8fae9 	.word	0xbda8fae9
 8011808:	bdb4b1c4 	.word	0xbdb4b1c4
 801180c:	3e21ee9e 	.word	0x3e21ee9e
 8011810:	809c52ad 	.word	0x809c52ad
 8011814:	3e927e4f 	.word	0x3e927e4f
 8011818:	19cb1590 	.word	0x19cb1590
 801181c:	3efa01a0 	.word	0x3efa01a0
 8011820:	16c15177 	.word	0x16c15177
 8011824:	3f56c16c 	.word	0x3f56c16c
 8011828:	5555554c 	.word	0x5555554c
 801182c:	3fa55555 	.word	0x3fa55555
 8011830:	3fe00000 	.word	0x3fe00000
 8011834:	3fd33332 	.word	0x3fd33332
 8011838:	3ff00000 	.word	0x3ff00000
 801183c:	3fe90000 	.word	0x3fe90000
 8011840:	3fd20000 	.word	0x3fd20000
 8011844:	00000000 	.word	0x00000000

08011848 <__kernel_rem_pio2>:
 8011848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801184c:	ed2d 8b02 	vpush	{d8}
 8011850:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8011854:	1ed4      	subs	r4, r2, #3
 8011856:	9308      	str	r3, [sp, #32]
 8011858:	9101      	str	r1, [sp, #4]
 801185a:	4bc5      	ldr	r3, [pc, #788]	; (8011b70 <__kernel_rem_pio2+0x328>)
 801185c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 801185e:	9009      	str	r0, [sp, #36]	; 0x24
 8011860:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011864:	9304      	str	r3, [sp, #16]
 8011866:	9b08      	ldr	r3, [sp, #32]
 8011868:	3b01      	subs	r3, #1
 801186a:	9307      	str	r3, [sp, #28]
 801186c:	2318      	movs	r3, #24
 801186e:	fb94 f4f3 	sdiv	r4, r4, r3
 8011872:	f06f 0317 	mvn.w	r3, #23
 8011876:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801187a:	fb04 3303 	mla	r3, r4, r3, r3
 801187e:	eb03 0a02 	add.w	sl, r3, r2
 8011882:	9b04      	ldr	r3, [sp, #16]
 8011884:	9a07      	ldr	r2, [sp, #28]
 8011886:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8011b60 <__kernel_rem_pio2+0x318>
 801188a:	eb03 0802 	add.w	r8, r3, r2
 801188e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8011890:	1aa7      	subs	r7, r4, r2
 8011892:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8011896:	ae22      	add	r6, sp, #136	; 0x88
 8011898:	2500      	movs	r5, #0
 801189a:	4545      	cmp	r5, r8
 801189c:	dd13      	ble.n	80118c6 <__kernel_rem_pio2+0x7e>
 801189e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8011b60 <__kernel_rem_pio2+0x318>
 80118a2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80118a6:	2600      	movs	r6, #0
 80118a8:	9b04      	ldr	r3, [sp, #16]
 80118aa:	429e      	cmp	r6, r3
 80118ac:	dc32      	bgt.n	8011914 <__kernel_rem_pio2+0xcc>
 80118ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118b0:	9302      	str	r3, [sp, #8]
 80118b2:	9b08      	ldr	r3, [sp, #32]
 80118b4:	199d      	adds	r5, r3, r6
 80118b6:	ab22      	add	r3, sp, #136	; 0x88
 80118b8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80118bc:	9306      	str	r3, [sp, #24]
 80118be:	ec59 8b18 	vmov	r8, r9, d8
 80118c2:	2700      	movs	r7, #0
 80118c4:	e01f      	b.n	8011906 <__kernel_rem_pio2+0xbe>
 80118c6:	42ef      	cmn	r7, r5
 80118c8:	d407      	bmi.n	80118da <__kernel_rem_pio2+0x92>
 80118ca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80118ce:	f7ee fe41 	bl	8000554 <__aeabi_i2d>
 80118d2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80118d6:	3501      	adds	r5, #1
 80118d8:	e7df      	b.n	801189a <__kernel_rem_pio2+0x52>
 80118da:	ec51 0b18 	vmov	r0, r1, d8
 80118de:	e7f8      	b.n	80118d2 <__kernel_rem_pio2+0x8a>
 80118e0:	9906      	ldr	r1, [sp, #24]
 80118e2:	9d02      	ldr	r5, [sp, #8]
 80118e4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80118e8:	9106      	str	r1, [sp, #24]
 80118ea:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80118ee:	9502      	str	r5, [sp, #8]
 80118f0:	f7ee fe9a 	bl	8000628 <__aeabi_dmul>
 80118f4:	4602      	mov	r2, r0
 80118f6:	460b      	mov	r3, r1
 80118f8:	4640      	mov	r0, r8
 80118fa:	4649      	mov	r1, r9
 80118fc:	f7ee fcde 	bl	80002bc <__adddf3>
 8011900:	3701      	adds	r7, #1
 8011902:	4680      	mov	r8, r0
 8011904:	4689      	mov	r9, r1
 8011906:	9b07      	ldr	r3, [sp, #28]
 8011908:	429f      	cmp	r7, r3
 801190a:	dde9      	ble.n	80118e0 <__kernel_rem_pio2+0x98>
 801190c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8011910:	3601      	adds	r6, #1
 8011912:	e7c9      	b.n	80118a8 <__kernel_rem_pio2+0x60>
 8011914:	9b04      	ldr	r3, [sp, #16]
 8011916:	aa0e      	add	r2, sp, #56	; 0x38
 8011918:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801191c:	930c      	str	r3, [sp, #48]	; 0x30
 801191e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8011920:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011924:	9c04      	ldr	r4, [sp, #16]
 8011926:	930b      	str	r3, [sp, #44]	; 0x2c
 8011928:	ab9a      	add	r3, sp, #616	; 0x268
 801192a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 801192e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011932:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011936:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 801193a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801193e:	ab9a      	add	r3, sp, #616	; 0x268
 8011940:	445b      	add	r3, fp
 8011942:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8011946:	2500      	movs	r5, #0
 8011948:	1b63      	subs	r3, r4, r5
 801194a:	2b00      	cmp	r3, #0
 801194c:	dc78      	bgt.n	8011a40 <__kernel_rem_pio2+0x1f8>
 801194e:	4650      	mov	r0, sl
 8011950:	ec49 8b10 	vmov	d0, r8, r9
 8011954:	f000 fc00 	bl	8012158 <scalbn>
 8011958:	ec57 6b10 	vmov	r6, r7, d0
 801195c:	2200      	movs	r2, #0
 801195e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8011962:	ee10 0a10 	vmov	r0, s0
 8011966:	4639      	mov	r1, r7
 8011968:	f7ee fe5e 	bl	8000628 <__aeabi_dmul>
 801196c:	ec41 0b10 	vmov	d0, r0, r1
 8011970:	f000 fb6e 	bl	8012050 <floor>
 8011974:	2200      	movs	r2, #0
 8011976:	ec51 0b10 	vmov	r0, r1, d0
 801197a:	4b7e      	ldr	r3, [pc, #504]	; (8011b74 <__kernel_rem_pio2+0x32c>)
 801197c:	f7ee fe54 	bl	8000628 <__aeabi_dmul>
 8011980:	4602      	mov	r2, r0
 8011982:	460b      	mov	r3, r1
 8011984:	4630      	mov	r0, r6
 8011986:	4639      	mov	r1, r7
 8011988:	f7ee fc96 	bl	80002b8 <__aeabi_dsub>
 801198c:	460f      	mov	r7, r1
 801198e:	4606      	mov	r6, r0
 8011990:	f7ef f8fa 	bl	8000b88 <__aeabi_d2iz>
 8011994:	9006      	str	r0, [sp, #24]
 8011996:	f7ee fddd 	bl	8000554 <__aeabi_i2d>
 801199a:	4602      	mov	r2, r0
 801199c:	460b      	mov	r3, r1
 801199e:	4630      	mov	r0, r6
 80119a0:	4639      	mov	r1, r7
 80119a2:	f7ee fc89 	bl	80002b8 <__aeabi_dsub>
 80119a6:	f1ba 0f00 	cmp.w	sl, #0
 80119aa:	4606      	mov	r6, r0
 80119ac:	460f      	mov	r7, r1
 80119ae:	dd6c      	ble.n	8011a8a <__kernel_rem_pio2+0x242>
 80119b0:	1e62      	subs	r2, r4, #1
 80119b2:	ab0e      	add	r3, sp, #56	; 0x38
 80119b4:	f1ca 0118 	rsb	r1, sl, #24
 80119b8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80119bc:	9d06      	ldr	r5, [sp, #24]
 80119be:	fa40 f301 	asr.w	r3, r0, r1
 80119c2:	441d      	add	r5, r3
 80119c4:	408b      	lsls	r3, r1
 80119c6:	1ac0      	subs	r0, r0, r3
 80119c8:	ab0e      	add	r3, sp, #56	; 0x38
 80119ca:	9506      	str	r5, [sp, #24]
 80119cc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80119d0:	f1ca 0317 	rsb	r3, sl, #23
 80119d4:	fa40 f303 	asr.w	r3, r0, r3
 80119d8:	9302      	str	r3, [sp, #8]
 80119da:	9b02      	ldr	r3, [sp, #8]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	dd62      	ble.n	8011aa6 <__kernel_rem_pio2+0x25e>
 80119e0:	9b06      	ldr	r3, [sp, #24]
 80119e2:	2200      	movs	r2, #0
 80119e4:	3301      	adds	r3, #1
 80119e6:	9306      	str	r3, [sp, #24]
 80119e8:	4615      	mov	r5, r2
 80119ea:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80119ee:	4294      	cmp	r4, r2
 80119f0:	f300 8095 	bgt.w	8011b1e <__kernel_rem_pio2+0x2d6>
 80119f4:	f1ba 0f00 	cmp.w	sl, #0
 80119f8:	dd07      	ble.n	8011a0a <__kernel_rem_pio2+0x1c2>
 80119fa:	f1ba 0f01 	cmp.w	sl, #1
 80119fe:	f000 80a2 	beq.w	8011b46 <__kernel_rem_pio2+0x2fe>
 8011a02:	f1ba 0f02 	cmp.w	sl, #2
 8011a06:	f000 80c1 	beq.w	8011b8c <__kernel_rem_pio2+0x344>
 8011a0a:	9b02      	ldr	r3, [sp, #8]
 8011a0c:	2b02      	cmp	r3, #2
 8011a0e:	d14a      	bne.n	8011aa6 <__kernel_rem_pio2+0x25e>
 8011a10:	4632      	mov	r2, r6
 8011a12:	463b      	mov	r3, r7
 8011a14:	2000      	movs	r0, #0
 8011a16:	4958      	ldr	r1, [pc, #352]	; (8011b78 <__kernel_rem_pio2+0x330>)
 8011a18:	f7ee fc4e 	bl	80002b8 <__aeabi_dsub>
 8011a1c:	4606      	mov	r6, r0
 8011a1e:	460f      	mov	r7, r1
 8011a20:	2d00      	cmp	r5, #0
 8011a22:	d040      	beq.n	8011aa6 <__kernel_rem_pio2+0x25e>
 8011a24:	4650      	mov	r0, sl
 8011a26:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8011b68 <__kernel_rem_pio2+0x320>
 8011a2a:	f000 fb95 	bl	8012158 <scalbn>
 8011a2e:	4630      	mov	r0, r6
 8011a30:	4639      	mov	r1, r7
 8011a32:	ec53 2b10 	vmov	r2, r3, d0
 8011a36:	f7ee fc3f 	bl	80002b8 <__aeabi_dsub>
 8011a3a:	4606      	mov	r6, r0
 8011a3c:	460f      	mov	r7, r1
 8011a3e:	e032      	b.n	8011aa6 <__kernel_rem_pio2+0x25e>
 8011a40:	2200      	movs	r2, #0
 8011a42:	4b4e      	ldr	r3, [pc, #312]	; (8011b7c <__kernel_rem_pio2+0x334>)
 8011a44:	4640      	mov	r0, r8
 8011a46:	4649      	mov	r1, r9
 8011a48:	f7ee fdee 	bl	8000628 <__aeabi_dmul>
 8011a4c:	f7ef f89c 	bl	8000b88 <__aeabi_d2iz>
 8011a50:	f7ee fd80 	bl	8000554 <__aeabi_i2d>
 8011a54:	2200      	movs	r2, #0
 8011a56:	4b4a      	ldr	r3, [pc, #296]	; (8011b80 <__kernel_rem_pio2+0x338>)
 8011a58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011a5c:	f7ee fde4 	bl	8000628 <__aeabi_dmul>
 8011a60:	4602      	mov	r2, r0
 8011a62:	460b      	mov	r3, r1
 8011a64:	4640      	mov	r0, r8
 8011a66:	4649      	mov	r1, r9
 8011a68:	f7ee fc26 	bl	80002b8 <__aeabi_dsub>
 8011a6c:	f7ef f88c 	bl	8000b88 <__aeabi_d2iz>
 8011a70:	ab0e      	add	r3, sp, #56	; 0x38
 8011a72:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8011a76:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8011a7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011a7e:	f7ee fc1d 	bl	80002bc <__adddf3>
 8011a82:	3501      	adds	r5, #1
 8011a84:	4680      	mov	r8, r0
 8011a86:	4689      	mov	r9, r1
 8011a88:	e75e      	b.n	8011948 <__kernel_rem_pio2+0x100>
 8011a8a:	d105      	bne.n	8011a98 <__kernel_rem_pio2+0x250>
 8011a8c:	1e63      	subs	r3, r4, #1
 8011a8e:	aa0e      	add	r2, sp, #56	; 0x38
 8011a90:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8011a94:	15c3      	asrs	r3, r0, #23
 8011a96:	e79f      	b.n	80119d8 <__kernel_rem_pio2+0x190>
 8011a98:	2200      	movs	r2, #0
 8011a9a:	4b3a      	ldr	r3, [pc, #232]	; (8011b84 <__kernel_rem_pio2+0x33c>)
 8011a9c:	f7ef f84a 	bl	8000b34 <__aeabi_dcmpge>
 8011aa0:	2800      	cmp	r0, #0
 8011aa2:	d139      	bne.n	8011b18 <__kernel_rem_pio2+0x2d0>
 8011aa4:	9002      	str	r0, [sp, #8]
 8011aa6:	2200      	movs	r2, #0
 8011aa8:	2300      	movs	r3, #0
 8011aaa:	4630      	mov	r0, r6
 8011aac:	4639      	mov	r1, r7
 8011aae:	f7ef f823 	bl	8000af8 <__aeabi_dcmpeq>
 8011ab2:	2800      	cmp	r0, #0
 8011ab4:	f000 80c7 	beq.w	8011c46 <__kernel_rem_pio2+0x3fe>
 8011ab8:	1e65      	subs	r5, r4, #1
 8011aba:	462b      	mov	r3, r5
 8011abc:	2200      	movs	r2, #0
 8011abe:	9904      	ldr	r1, [sp, #16]
 8011ac0:	428b      	cmp	r3, r1
 8011ac2:	da6a      	bge.n	8011b9a <__kernel_rem_pio2+0x352>
 8011ac4:	2a00      	cmp	r2, #0
 8011ac6:	f000 8088 	beq.w	8011bda <__kernel_rem_pio2+0x392>
 8011aca:	ab0e      	add	r3, sp, #56	; 0x38
 8011acc:	f1aa 0a18 	sub.w	sl, sl, #24
 8011ad0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	f000 80b4 	beq.w	8011c42 <__kernel_rem_pio2+0x3fa>
 8011ada:	4650      	mov	r0, sl
 8011adc:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8011b68 <__kernel_rem_pio2+0x320>
 8011ae0:	f000 fb3a 	bl	8012158 <scalbn>
 8011ae4:	00ec      	lsls	r4, r5, #3
 8011ae6:	ab72      	add	r3, sp, #456	; 0x1c8
 8011ae8:	191e      	adds	r6, r3, r4
 8011aea:	ec59 8b10 	vmov	r8, r9, d0
 8011aee:	f106 0a08 	add.w	sl, r6, #8
 8011af2:	462f      	mov	r7, r5
 8011af4:	2f00      	cmp	r7, #0
 8011af6:	f280 80df 	bge.w	8011cb8 <__kernel_rem_pio2+0x470>
 8011afa:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8011b60 <__kernel_rem_pio2+0x318>
 8011afe:	f04f 0a00 	mov.w	sl, #0
 8011b02:	eba5 030a 	sub.w	r3, r5, sl
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	f2c0 810a 	blt.w	8011d20 <__kernel_rem_pio2+0x4d8>
 8011b0c:	f8df b078 	ldr.w	fp, [pc, #120]	; 8011b88 <__kernel_rem_pio2+0x340>
 8011b10:	ec59 8b18 	vmov	r8, r9, d8
 8011b14:	2700      	movs	r7, #0
 8011b16:	e0f5      	b.n	8011d04 <__kernel_rem_pio2+0x4bc>
 8011b18:	2302      	movs	r3, #2
 8011b1a:	9302      	str	r3, [sp, #8]
 8011b1c:	e760      	b.n	80119e0 <__kernel_rem_pio2+0x198>
 8011b1e:	ab0e      	add	r3, sp, #56	; 0x38
 8011b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b24:	b94d      	cbnz	r5, 8011b3a <__kernel_rem_pio2+0x2f2>
 8011b26:	b12b      	cbz	r3, 8011b34 <__kernel_rem_pio2+0x2ec>
 8011b28:	a80e      	add	r0, sp, #56	; 0x38
 8011b2a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8011b2e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8011b32:	2301      	movs	r3, #1
 8011b34:	3201      	adds	r2, #1
 8011b36:	461d      	mov	r5, r3
 8011b38:	e759      	b.n	80119ee <__kernel_rem_pio2+0x1a6>
 8011b3a:	a80e      	add	r0, sp, #56	; 0x38
 8011b3c:	1acb      	subs	r3, r1, r3
 8011b3e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8011b42:	462b      	mov	r3, r5
 8011b44:	e7f6      	b.n	8011b34 <__kernel_rem_pio2+0x2ec>
 8011b46:	1e62      	subs	r2, r4, #1
 8011b48:	ab0e      	add	r3, sp, #56	; 0x38
 8011b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b4e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011b52:	a90e      	add	r1, sp, #56	; 0x38
 8011b54:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8011b58:	e757      	b.n	8011a0a <__kernel_rem_pio2+0x1c2>
 8011b5a:	bf00      	nop
 8011b5c:	f3af 8000 	nop.w
	...
 8011b6c:	3ff00000 	.word	0x3ff00000
 8011b70:	08017930 	.word	0x08017930
 8011b74:	40200000 	.word	0x40200000
 8011b78:	3ff00000 	.word	0x3ff00000
 8011b7c:	3e700000 	.word	0x3e700000
 8011b80:	41700000 	.word	0x41700000
 8011b84:	3fe00000 	.word	0x3fe00000
 8011b88:	080178f0 	.word	0x080178f0
 8011b8c:	1e62      	subs	r2, r4, #1
 8011b8e:	ab0e      	add	r3, sp, #56	; 0x38
 8011b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b94:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011b98:	e7db      	b.n	8011b52 <__kernel_rem_pio2+0x30a>
 8011b9a:	a90e      	add	r1, sp, #56	; 0x38
 8011b9c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8011ba0:	3b01      	subs	r3, #1
 8011ba2:	430a      	orrs	r2, r1
 8011ba4:	e78b      	b.n	8011abe <__kernel_rem_pio2+0x276>
 8011ba6:	3301      	adds	r3, #1
 8011ba8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8011bac:	2900      	cmp	r1, #0
 8011bae:	d0fa      	beq.n	8011ba6 <__kernel_rem_pio2+0x35e>
 8011bb0:	9a08      	ldr	r2, [sp, #32]
 8011bb2:	4422      	add	r2, r4
 8011bb4:	00d2      	lsls	r2, r2, #3
 8011bb6:	a922      	add	r1, sp, #136	; 0x88
 8011bb8:	18e3      	adds	r3, r4, r3
 8011bba:	9206      	str	r2, [sp, #24]
 8011bbc:	440a      	add	r2, r1
 8011bbe:	9302      	str	r3, [sp, #8]
 8011bc0:	f10b 0108 	add.w	r1, fp, #8
 8011bc4:	f102 0308 	add.w	r3, r2, #8
 8011bc8:	1c66      	adds	r6, r4, #1
 8011bca:	910a      	str	r1, [sp, #40]	; 0x28
 8011bcc:	2500      	movs	r5, #0
 8011bce:	930d      	str	r3, [sp, #52]	; 0x34
 8011bd0:	9b02      	ldr	r3, [sp, #8]
 8011bd2:	42b3      	cmp	r3, r6
 8011bd4:	da04      	bge.n	8011be0 <__kernel_rem_pio2+0x398>
 8011bd6:	461c      	mov	r4, r3
 8011bd8:	e6a6      	b.n	8011928 <__kernel_rem_pio2+0xe0>
 8011bda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011bdc:	2301      	movs	r3, #1
 8011bde:	e7e3      	b.n	8011ba8 <__kernel_rem_pio2+0x360>
 8011be0:	9b06      	ldr	r3, [sp, #24]
 8011be2:	18ef      	adds	r7, r5, r3
 8011be4:	ab22      	add	r3, sp, #136	; 0x88
 8011be6:	441f      	add	r7, r3
 8011be8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011bea:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8011bee:	f7ee fcb1 	bl	8000554 <__aeabi_i2d>
 8011bf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011bf4:	461c      	mov	r4, r3
 8011bf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011bf8:	e9c7 0100 	strd	r0, r1, [r7]
 8011bfc:	eb03 0b05 	add.w	fp, r3, r5
 8011c00:	2700      	movs	r7, #0
 8011c02:	f04f 0800 	mov.w	r8, #0
 8011c06:	f04f 0900 	mov.w	r9, #0
 8011c0a:	9b07      	ldr	r3, [sp, #28]
 8011c0c:	429f      	cmp	r7, r3
 8011c0e:	dd08      	ble.n	8011c22 <__kernel_rem_pio2+0x3da>
 8011c10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c12:	aa72      	add	r2, sp, #456	; 0x1c8
 8011c14:	18eb      	adds	r3, r5, r3
 8011c16:	4413      	add	r3, r2
 8011c18:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8011c1c:	3601      	adds	r6, #1
 8011c1e:	3508      	adds	r5, #8
 8011c20:	e7d6      	b.n	8011bd0 <__kernel_rem_pio2+0x388>
 8011c22:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8011c26:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8011c2a:	f7ee fcfd 	bl	8000628 <__aeabi_dmul>
 8011c2e:	4602      	mov	r2, r0
 8011c30:	460b      	mov	r3, r1
 8011c32:	4640      	mov	r0, r8
 8011c34:	4649      	mov	r1, r9
 8011c36:	f7ee fb41 	bl	80002bc <__adddf3>
 8011c3a:	3701      	adds	r7, #1
 8011c3c:	4680      	mov	r8, r0
 8011c3e:	4689      	mov	r9, r1
 8011c40:	e7e3      	b.n	8011c0a <__kernel_rem_pio2+0x3c2>
 8011c42:	3d01      	subs	r5, #1
 8011c44:	e741      	b.n	8011aca <__kernel_rem_pio2+0x282>
 8011c46:	f1ca 0000 	rsb	r0, sl, #0
 8011c4a:	ec47 6b10 	vmov	d0, r6, r7
 8011c4e:	f000 fa83 	bl	8012158 <scalbn>
 8011c52:	ec57 6b10 	vmov	r6, r7, d0
 8011c56:	2200      	movs	r2, #0
 8011c58:	4b99      	ldr	r3, [pc, #612]	; (8011ec0 <__kernel_rem_pio2+0x678>)
 8011c5a:	ee10 0a10 	vmov	r0, s0
 8011c5e:	4639      	mov	r1, r7
 8011c60:	f7ee ff68 	bl	8000b34 <__aeabi_dcmpge>
 8011c64:	b1f8      	cbz	r0, 8011ca6 <__kernel_rem_pio2+0x45e>
 8011c66:	2200      	movs	r2, #0
 8011c68:	4b96      	ldr	r3, [pc, #600]	; (8011ec4 <__kernel_rem_pio2+0x67c>)
 8011c6a:	4630      	mov	r0, r6
 8011c6c:	4639      	mov	r1, r7
 8011c6e:	f7ee fcdb 	bl	8000628 <__aeabi_dmul>
 8011c72:	f7ee ff89 	bl	8000b88 <__aeabi_d2iz>
 8011c76:	4680      	mov	r8, r0
 8011c78:	f7ee fc6c 	bl	8000554 <__aeabi_i2d>
 8011c7c:	2200      	movs	r2, #0
 8011c7e:	4b90      	ldr	r3, [pc, #576]	; (8011ec0 <__kernel_rem_pio2+0x678>)
 8011c80:	f7ee fcd2 	bl	8000628 <__aeabi_dmul>
 8011c84:	460b      	mov	r3, r1
 8011c86:	4602      	mov	r2, r0
 8011c88:	4639      	mov	r1, r7
 8011c8a:	4630      	mov	r0, r6
 8011c8c:	f7ee fb14 	bl	80002b8 <__aeabi_dsub>
 8011c90:	f7ee ff7a 	bl	8000b88 <__aeabi_d2iz>
 8011c94:	1c65      	adds	r5, r4, #1
 8011c96:	ab0e      	add	r3, sp, #56	; 0x38
 8011c98:	f10a 0a18 	add.w	sl, sl, #24
 8011c9c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011ca0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8011ca4:	e719      	b.n	8011ada <__kernel_rem_pio2+0x292>
 8011ca6:	4630      	mov	r0, r6
 8011ca8:	4639      	mov	r1, r7
 8011caa:	f7ee ff6d 	bl	8000b88 <__aeabi_d2iz>
 8011cae:	ab0e      	add	r3, sp, #56	; 0x38
 8011cb0:	4625      	mov	r5, r4
 8011cb2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011cb6:	e710      	b.n	8011ada <__kernel_rem_pio2+0x292>
 8011cb8:	ab0e      	add	r3, sp, #56	; 0x38
 8011cba:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8011cbe:	f7ee fc49 	bl	8000554 <__aeabi_i2d>
 8011cc2:	4642      	mov	r2, r8
 8011cc4:	464b      	mov	r3, r9
 8011cc6:	f7ee fcaf 	bl	8000628 <__aeabi_dmul>
 8011cca:	2200      	movs	r2, #0
 8011ccc:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8011cd0:	4b7c      	ldr	r3, [pc, #496]	; (8011ec4 <__kernel_rem_pio2+0x67c>)
 8011cd2:	4640      	mov	r0, r8
 8011cd4:	4649      	mov	r1, r9
 8011cd6:	f7ee fca7 	bl	8000628 <__aeabi_dmul>
 8011cda:	3f01      	subs	r7, #1
 8011cdc:	4680      	mov	r8, r0
 8011cde:	4689      	mov	r9, r1
 8011ce0:	e708      	b.n	8011af4 <__kernel_rem_pio2+0x2ac>
 8011ce2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8011ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cea:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8011cee:	f7ee fc9b 	bl	8000628 <__aeabi_dmul>
 8011cf2:	4602      	mov	r2, r0
 8011cf4:	460b      	mov	r3, r1
 8011cf6:	4640      	mov	r0, r8
 8011cf8:	4649      	mov	r1, r9
 8011cfa:	f7ee fadf 	bl	80002bc <__adddf3>
 8011cfe:	3701      	adds	r7, #1
 8011d00:	4680      	mov	r8, r0
 8011d02:	4689      	mov	r9, r1
 8011d04:	9b04      	ldr	r3, [sp, #16]
 8011d06:	429f      	cmp	r7, r3
 8011d08:	dc01      	bgt.n	8011d0e <__kernel_rem_pio2+0x4c6>
 8011d0a:	45ba      	cmp	sl, r7
 8011d0c:	dae9      	bge.n	8011ce2 <__kernel_rem_pio2+0x49a>
 8011d0e:	ab4a      	add	r3, sp, #296	; 0x128
 8011d10:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011d14:	e9c3 8900 	strd	r8, r9, [r3]
 8011d18:	f10a 0a01 	add.w	sl, sl, #1
 8011d1c:	3e08      	subs	r6, #8
 8011d1e:	e6f0      	b.n	8011b02 <__kernel_rem_pio2+0x2ba>
 8011d20:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8011d22:	2b03      	cmp	r3, #3
 8011d24:	d85b      	bhi.n	8011dde <__kernel_rem_pio2+0x596>
 8011d26:	e8df f003 	tbb	[pc, r3]
 8011d2a:	264a      	.short	0x264a
 8011d2c:	0226      	.short	0x0226
 8011d2e:	ab9a      	add	r3, sp, #616	; 0x268
 8011d30:	441c      	add	r4, r3
 8011d32:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8011d36:	46a2      	mov	sl, r4
 8011d38:	46ab      	mov	fp, r5
 8011d3a:	f1bb 0f00 	cmp.w	fp, #0
 8011d3e:	dc6c      	bgt.n	8011e1a <__kernel_rem_pio2+0x5d2>
 8011d40:	46a2      	mov	sl, r4
 8011d42:	46ab      	mov	fp, r5
 8011d44:	f1bb 0f01 	cmp.w	fp, #1
 8011d48:	f300 8086 	bgt.w	8011e58 <__kernel_rem_pio2+0x610>
 8011d4c:	2000      	movs	r0, #0
 8011d4e:	2100      	movs	r1, #0
 8011d50:	2d01      	cmp	r5, #1
 8011d52:	f300 80a0 	bgt.w	8011e96 <__kernel_rem_pio2+0x64e>
 8011d56:	9b02      	ldr	r3, [sp, #8]
 8011d58:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8011d5c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	f040 809e 	bne.w	8011ea2 <__kernel_rem_pio2+0x65a>
 8011d66:	9b01      	ldr	r3, [sp, #4]
 8011d68:	e9c3 7800 	strd	r7, r8, [r3]
 8011d6c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8011d70:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8011d74:	e033      	b.n	8011dde <__kernel_rem_pio2+0x596>
 8011d76:	3408      	adds	r4, #8
 8011d78:	ab4a      	add	r3, sp, #296	; 0x128
 8011d7a:	441c      	add	r4, r3
 8011d7c:	462e      	mov	r6, r5
 8011d7e:	2000      	movs	r0, #0
 8011d80:	2100      	movs	r1, #0
 8011d82:	2e00      	cmp	r6, #0
 8011d84:	da3a      	bge.n	8011dfc <__kernel_rem_pio2+0x5b4>
 8011d86:	9b02      	ldr	r3, [sp, #8]
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d03d      	beq.n	8011e08 <__kernel_rem_pio2+0x5c0>
 8011d8c:	4602      	mov	r2, r0
 8011d8e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011d92:	9c01      	ldr	r4, [sp, #4]
 8011d94:	e9c4 2300 	strd	r2, r3, [r4]
 8011d98:	4602      	mov	r2, r0
 8011d9a:	460b      	mov	r3, r1
 8011d9c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8011da0:	f7ee fa8a 	bl	80002b8 <__aeabi_dsub>
 8011da4:	ae4c      	add	r6, sp, #304	; 0x130
 8011da6:	2401      	movs	r4, #1
 8011da8:	42a5      	cmp	r5, r4
 8011daa:	da30      	bge.n	8011e0e <__kernel_rem_pio2+0x5c6>
 8011dac:	9b02      	ldr	r3, [sp, #8]
 8011dae:	b113      	cbz	r3, 8011db6 <__kernel_rem_pio2+0x56e>
 8011db0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011db4:	4619      	mov	r1, r3
 8011db6:	9b01      	ldr	r3, [sp, #4]
 8011db8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8011dbc:	e00f      	b.n	8011dde <__kernel_rem_pio2+0x596>
 8011dbe:	ab9a      	add	r3, sp, #616	; 0x268
 8011dc0:	441c      	add	r4, r3
 8011dc2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8011dc6:	2000      	movs	r0, #0
 8011dc8:	2100      	movs	r1, #0
 8011dca:	2d00      	cmp	r5, #0
 8011dcc:	da10      	bge.n	8011df0 <__kernel_rem_pio2+0x5a8>
 8011dce:	9b02      	ldr	r3, [sp, #8]
 8011dd0:	b113      	cbz	r3, 8011dd8 <__kernel_rem_pio2+0x590>
 8011dd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011dd6:	4619      	mov	r1, r3
 8011dd8:	9b01      	ldr	r3, [sp, #4]
 8011dda:	e9c3 0100 	strd	r0, r1, [r3]
 8011dde:	9b06      	ldr	r3, [sp, #24]
 8011de0:	f003 0007 	and.w	r0, r3, #7
 8011de4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8011de8:	ecbd 8b02 	vpop	{d8}
 8011dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011df0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011df4:	f7ee fa62 	bl	80002bc <__adddf3>
 8011df8:	3d01      	subs	r5, #1
 8011dfa:	e7e6      	b.n	8011dca <__kernel_rem_pio2+0x582>
 8011dfc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011e00:	f7ee fa5c 	bl	80002bc <__adddf3>
 8011e04:	3e01      	subs	r6, #1
 8011e06:	e7bc      	b.n	8011d82 <__kernel_rem_pio2+0x53a>
 8011e08:	4602      	mov	r2, r0
 8011e0a:	460b      	mov	r3, r1
 8011e0c:	e7c1      	b.n	8011d92 <__kernel_rem_pio2+0x54a>
 8011e0e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8011e12:	f7ee fa53 	bl	80002bc <__adddf3>
 8011e16:	3401      	adds	r4, #1
 8011e18:	e7c6      	b.n	8011da8 <__kernel_rem_pio2+0x560>
 8011e1a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8011e1e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8011e22:	4640      	mov	r0, r8
 8011e24:	ec53 2b17 	vmov	r2, r3, d7
 8011e28:	4649      	mov	r1, r9
 8011e2a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011e2e:	f7ee fa45 	bl	80002bc <__adddf3>
 8011e32:	4602      	mov	r2, r0
 8011e34:	460b      	mov	r3, r1
 8011e36:	4606      	mov	r6, r0
 8011e38:	460f      	mov	r7, r1
 8011e3a:	4640      	mov	r0, r8
 8011e3c:	4649      	mov	r1, r9
 8011e3e:	f7ee fa3b 	bl	80002b8 <__aeabi_dsub>
 8011e42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011e46:	f7ee fa39 	bl	80002bc <__adddf3>
 8011e4a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011e4e:	e9ca 0100 	strd	r0, r1, [sl]
 8011e52:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8011e56:	e770      	b.n	8011d3a <__kernel_rem_pio2+0x4f2>
 8011e58:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8011e5c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8011e60:	4630      	mov	r0, r6
 8011e62:	ec53 2b17 	vmov	r2, r3, d7
 8011e66:	4639      	mov	r1, r7
 8011e68:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011e6c:	f7ee fa26 	bl	80002bc <__adddf3>
 8011e70:	4602      	mov	r2, r0
 8011e72:	460b      	mov	r3, r1
 8011e74:	4680      	mov	r8, r0
 8011e76:	4689      	mov	r9, r1
 8011e78:	4630      	mov	r0, r6
 8011e7a:	4639      	mov	r1, r7
 8011e7c:	f7ee fa1c 	bl	80002b8 <__aeabi_dsub>
 8011e80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011e84:	f7ee fa1a 	bl	80002bc <__adddf3>
 8011e88:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011e8c:	e9ca 0100 	strd	r0, r1, [sl]
 8011e90:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8011e94:	e756      	b.n	8011d44 <__kernel_rem_pio2+0x4fc>
 8011e96:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011e9a:	f7ee fa0f 	bl	80002bc <__adddf3>
 8011e9e:	3d01      	subs	r5, #1
 8011ea0:	e756      	b.n	8011d50 <__kernel_rem_pio2+0x508>
 8011ea2:	9b01      	ldr	r3, [sp, #4]
 8011ea4:	9a01      	ldr	r2, [sp, #4]
 8011ea6:	601f      	str	r7, [r3, #0]
 8011ea8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8011eac:	605c      	str	r4, [r3, #4]
 8011eae:	609d      	str	r5, [r3, #8]
 8011eb0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8011eb4:	60d3      	str	r3, [r2, #12]
 8011eb6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011eba:	6110      	str	r0, [r2, #16]
 8011ebc:	6153      	str	r3, [r2, #20]
 8011ebe:	e78e      	b.n	8011dde <__kernel_rem_pio2+0x596>
 8011ec0:	41700000 	.word	0x41700000
 8011ec4:	3e700000 	.word	0x3e700000

08011ec8 <__kernel_sin>:
 8011ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ecc:	ec55 4b10 	vmov	r4, r5, d0
 8011ed0:	b085      	sub	sp, #20
 8011ed2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011ed6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8011eda:	ed8d 1b00 	vstr	d1, [sp]
 8011ede:	9002      	str	r0, [sp, #8]
 8011ee0:	da06      	bge.n	8011ef0 <__kernel_sin+0x28>
 8011ee2:	ee10 0a10 	vmov	r0, s0
 8011ee6:	4629      	mov	r1, r5
 8011ee8:	f7ee fe4e 	bl	8000b88 <__aeabi_d2iz>
 8011eec:	2800      	cmp	r0, #0
 8011eee:	d051      	beq.n	8011f94 <__kernel_sin+0xcc>
 8011ef0:	4622      	mov	r2, r4
 8011ef2:	462b      	mov	r3, r5
 8011ef4:	4620      	mov	r0, r4
 8011ef6:	4629      	mov	r1, r5
 8011ef8:	f7ee fb96 	bl	8000628 <__aeabi_dmul>
 8011efc:	4682      	mov	sl, r0
 8011efe:	468b      	mov	fp, r1
 8011f00:	4602      	mov	r2, r0
 8011f02:	460b      	mov	r3, r1
 8011f04:	4620      	mov	r0, r4
 8011f06:	4629      	mov	r1, r5
 8011f08:	f7ee fb8e 	bl	8000628 <__aeabi_dmul>
 8011f0c:	a341      	add	r3, pc, #260	; (adr r3, 8012014 <__kernel_sin+0x14c>)
 8011f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f12:	4680      	mov	r8, r0
 8011f14:	4689      	mov	r9, r1
 8011f16:	4650      	mov	r0, sl
 8011f18:	4659      	mov	r1, fp
 8011f1a:	f7ee fb85 	bl	8000628 <__aeabi_dmul>
 8011f1e:	a33f      	add	r3, pc, #252	; (adr r3, 801201c <__kernel_sin+0x154>)
 8011f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f24:	f7ee f9c8 	bl	80002b8 <__aeabi_dsub>
 8011f28:	4652      	mov	r2, sl
 8011f2a:	465b      	mov	r3, fp
 8011f2c:	f7ee fb7c 	bl	8000628 <__aeabi_dmul>
 8011f30:	a33c      	add	r3, pc, #240	; (adr r3, 8012024 <__kernel_sin+0x15c>)
 8011f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f36:	f7ee f9c1 	bl	80002bc <__adddf3>
 8011f3a:	4652      	mov	r2, sl
 8011f3c:	465b      	mov	r3, fp
 8011f3e:	f7ee fb73 	bl	8000628 <__aeabi_dmul>
 8011f42:	a33a      	add	r3, pc, #232	; (adr r3, 801202c <__kernel_sin+0x164>)
 8011f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f48:	f7ee f9b6 	bl	80002b8 <__aeabi_dsub>
 8011f4c:	4652      	mov	r2, sl
 8011f4e:	465b      	mov	r3, fp
 8011f50:	f7ee fb6a 	bl	8000628 <__aeabi_dmul>
 8011f54:	a337      	add	r3, pc, #220	; (adr r3, 8012034 <__kernel_sin+0x16c>)
 8011f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f5a:	f7ee f9af 	bl	80002bc <__adddf3>
 8011f5e:	9b02      	ldr	r3, [sp, #8]
 8011f60:	4606      	mov	r6, r0
 8011f62:	460f      	mov	r7, r1
 8011f64:	b9db      	cbnz	r3, 8011f9e <__kernel_sin+0xd6>
 8011f66:	4602      	mov	r2, r0
 8011f68:	460b      	mov	r3, r1
 8011f6a:	4650      	mov	r0, sl
 8011f6c:	4659      	mov	r1, fp
 8011f6e:	f7ee fb5b 	bl	8000628 <__aeabi_dmul>
 8011f72:	a325      	add	r3, pc, #148	; (adr r3, 8012008 <__kernel_sin+0x140>)
 8011f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f78:	f7ee f99e 	bl	80002b8 <__aeabi_dsub>
 8011f7c:	4642      	mov	r2, r8
 8011f7e:	464b      	mov	r3, r9
 8011f80:	f7ee fb52 	bl	8000628 <__aeabi_dmul>
 8011f84:	4602      	mov	r2, r0
 8011f86:	460b      	mov	r3, r1
 8011f88:	4620      	mov	r0, r4
 8011f8a:	4629      	mov	r1, r5
 8011f8c:	f7ee f996 	bl	80002bc <__adddf3>
 8011f90:	4604      	mov	r4, r0
 8011f92:	460d      	mov	r5, r1
 8011f94:	ec45 4b10 	vmov	d0, r4, r5
 8011f98:	b005      	add	sp, #20
 8011f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f9e:	2200      	movs	r2, #0
 8011fa0:	4b1b      	ldr	r3, [pc, #108]	; (8012010 <__kernel_sin+0x148>)
 8011fa2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011fa6:	f7ee fb3f 	bl	8000628 <__aeabi_dmul>
 8011faa:	4632      	mov	r2, r6
 8011fac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011fb0:	463b      	mov	r3, r7
 8011fb2:	4640      	mov	r0, r8
 8011fb4:	4649      	mov	r1, r9
 8011fb6:	f7ee fb37 	bl	8000628 <__aeabi_dmul>
 8011fba:	4602      	mov	r2, r0
 8011fbc:	460b      	mov	r3, r1
 8011fbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011fc2:	f7ee f979 	bl	80002b8 <__aeabi_dsub>
 8011fc6:	4652      	mov	r2, sl
 8011fc8:	465b      	mov	r3, fp
 8011fca:	f7ee fb2d 	bl	8000628 <__aeabi_dmul>
 8011fce:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011fd2:	f7ee f971 	bl	80002b8 <__aeabi_dsub>
 8011fd6:	a30c      	add	r3, pc, #48	; (adr r3, 8012008 <__kernel_sin+0x140>)
 8011fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fdc:	4606      	mov	r6, r0
 8011fde:	460f      	mov	r7, r1
 8011fe0:	4640      	mov	r0, r8
 8011fe2:	4649      	mov	r1, r9
 8011fe4:	f7ee fb20 	bl	8000628 <__aeabi_dmul>
 8011fe8:	4602      	mov	r2, r0
 8011fea:	460b      	mov	r3, r1
 8011fec:	4630      	mov	r0, r6
 8011fee:	4639      	mov	r1, r7
 8011ff0:	f7ee f964 	bl	80002bc <__adddf3>
 8011ff4:	4602      	mov	r2, r0
 8011ff6:	460b      	mov	r3, r1
 8011ff8:	4620      	mov	r0, r4
 8011ffa:	4629      	mov	r1, r5
 8011ffc:	f7ee f95c 	bl	80002b8 <__aeabi_dsub>
 8012000:	e7c6      	b.n	8011f90 <__kernel_sin+0xc8>
 8012002:	bf00      	nop
 8012004:	f3af 8000 	nop.w
 8012008:	55555549 	.word	0x55555549
 801200c:	3fc55555 	.word	0x3fc55555
 8012010:	3fe00000 	.word	0x3fe00000
 8012014:	5acfd57c 	.word	0x5acfd57c
 8012018:	3de5d93a 	.word	0x3de5d93a
 801201c:	8a2b9ceb 	.word	0x8a2b9ceb
 8012020:	3e5ae5e6 	.word	0x3e5ae5e6
 8012024:	57b1fe7d 	.word	0x57b1fe7d
 8012028:	3ec71de3 	.word	0x3ec71de3
 801202c:	19c161d5 	.word	0x19c161d5
 8012030:	3f2a01a0 	.word	0x3f2a01a0
 8012034:	1110f8a6 	.word	0x1110f8a6
 8012038:	3f811111 	.word	0x3f811111

0801203c <fabs>:
 801203c:	ec51 0b10 	vmov	r0, r1, d0
 8012040:	ee10 2a10 	vmov	r2, s0
 8012044:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012048:	ec43 2b10 	vmov	d0, r2, r3
 801204c:	4770      	bx	lr
	...

08012050 <floor>:
 8012050:	ec51 0b10 	vmov	r0, r1, d0
 8012054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012058:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801205c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8012060:	2e13      	cmp	r6, #19
 8012062:	460c      	mov	r4, r1
 8012064:	ee10 5a10 	vmov	r5, s0
 8012068:	4680      	mov	r8, r0
 801206a:	dc34      	bgt.n	80120d6 <floor+0x86>
 801206c:	2e00      	cmp	r6, #0
 801206e:	da16      	bge.n	801209e <floor+0x4e>
 8012070:	a335      	add	r3, pc, #212	; (adr r3, 8012148 <floor+0xf8>)
 8012072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012076:	f7ee f921 	bl	80002bc <__adddf3>
 801207a:	2200      	movs	r2, #0
 801207c:	2300      	movs	r3, #0
 801207e:	f7ee fd63 	bl	8000b48 <__aeabi_dcmpgt>
 8012082:	b148      	cbz	r0, 8012098 <floor+0x48>
 8012084:	2c00      	cmp	r4, #0
 8012086:	da59      	bge.n	801213c <floor+0xec>
 8012088:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801208c:	4a30      	ldr	r2, [pc, #192]	; (8012150 <floor+0x100>)
 801208e:	432b      	orrs	r3, r5
 8012090:	2500      	movs	r5, #0
 8012092:	42ab      	cmp	r3, r5
 8012094:	bf18      	it	ne
 8012096:	4614      	movne	r4, r2
 8012098:	4621      	mov	r1, r4
 801209a:	4628      	mov	r0, r5
 801209c:	e025      	b.n	80120ea <floor+0x9a>
 801209e:	4f2d      	ldr	r7, [pc, #180]	; (8012154 <floor+0x104>)
 80120a0:	4137      	asrs	r7, r6
 80120a2:	ea01 0307 	and.w	r3, r1, r7
 80120a6:	4303      	orrs	r3, r0
 80120a8:	d01f      	beq.n	80120ea <floor+0x9a>
 80120aa:	a327      	add	r3, pc, #156	; (adr r3, 8012148 <floor+0xf8>)
 80120ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120b0:	f7ee f904 	bl	80002bc <__adddf3>
 80120b4:	2200      	movs	r2, #0
 80120b6:	2300      	movs	r3, #0
 80120b8:	f7ee fd46 	bl	8000b48 <__aeabi_dcmpgt>
 80120bc:	2800      	cmp	r0, #0
 80120be:	d0eb      	beq.n	8012098 <floor+0x48>
 80120c0:	2c00      	cmp	r4, #0
 80120c2:	bfbe      	ittt	lt
 80120c4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80120c8:	fa43 f606 	asrlt.w	r6, r3, r6
 80120cc:	19a4      	addlt	r4, r4, r6
 80120ce:	ea24 0407 	bic.w	r4, r4, r7
 80120d2:	2500      	movs	r5, #0
 80120d4:	e7e0      	b.n	8012098 <floor+0x48>
 80120d6:	2e33      	cmp	r6, #51	; 0x33
 80120d8:	dd0b      	ble.n	80120f2 <floor+0xa2>
 80120da:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80120de:	d104      	bne.n	80120ea <floor+0x9a>
 80120e0:	ee10 2a10 	vmov	r2, s0
 80120e4:	460b      	mov	r3, r1
 80120e6:	f7ee f8e9 	bl	80002bc <__adddf3>
 80120ea:	ec41 0b10 	vmov	d0, r0, r1
 80120ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120f2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80120f6:	f04f 33ff 	mov.w	r3, #4294967295
 80120fa:	fa23 f707 	lsr.w	r7, r3, r7
 80120fe:	4207      	tst	r7, r0
 8012100:	d0f3      	beq.n	80120ea <floor+0x9a>
 8012102:	a311      	add	r3, pc, #68	; (adr r3, 8012148 <floor+0xf8>)
 8012104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012108:	f7ee f8d8 	bl	80002bc <__adddf3>
 801210c:	2200      	movs	r2, #0
 801210e:	2300      	movs	r3, #0
 8012110:	f7ee fd1a 	bl	8000b48 <__aeabi_dcmpgt>
 8012114:	2800      	cmp	r0, #0
 8012116:	d0bf      	beq.n	8012098 <floor+0x48>
 8012118:	2c00      	cmp	r4, #0
 801211a:	da02      	bge.n	8012122 <floor+0xd2>
 801211c:	2e14      	cmp	r6, #20
 801211e:	d103      	bne.n	8012128 <floor+0xd8>
 8012120:	3401      	adds	r4, #1
 8012122:	ea25 0507 	bic.w	r5, r5, r7
 8012126:	e7b7      	b.n	8012098 <floor+0x48>
 8012128:	2301      	movs	r3, #1
 801212a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801212e:	fa03 f606 	lsl.w	r6, r3, r6
 8012132:	4435      	add	r5, r6
 8012134:	4545      	cmp	r5, r8
 8012136:	bf38      	it	cc
 8012138:	18e4      	addcc	r4, r4, r3
 801213a:	e7f2      	b.n	8012122 <floor+0xd2>
 801213c:	2500      	movs	r5, #0
 801213e:	462c      	mov	r4, r5
 8012140:	e7aa      	b.n	8012098 <floor+0x48>
 8012142:	bf00      	nop
 8012144:	f3af 8000 	nop.w
 8012148:	8800759c 	.word	0x8800759c
 801214c:	7e37e43c 	.word	0x7e37e43c
 8012150:	bff00000 	.word	0xbff00000
 8012154:	000fffff 	.word	0x000fffff

08012158 <scalbn>:
 8012158:	b570      	push	{r4, r5, r6, lr}
 801215a:	ec55 4b10 	vmov	r4, r5, d0
 801215e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8012162:	4606      	mov	r6, r0
 8012164:	462b      	mov	r3, r5
 8012166:	b9aa      	cbnz	r2, 8012194 <scalbn+0x3c>
 8012168:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801216c:	4323      	orrs	r3, r4
 801216e:	d03b      	beq.n	80121e8 <scalbn+0x90>
 8012170:	4b31      	ldr	r3, [pc, #196]	; (8012238 <scalbn+0xe0>)
 8012172:	4629      	mov	r1, r5
 8012174:	2200      	movs	r2, #0
 8012176:	ee10 0a10 	vmov	r0, s0
 801217a:	f7ee fa55 	bl	8000628 <__aeabi_dmul>
 801217e:	4b2f      	ldr	r3, [pc, #188]	; (801223c <scalbn+0xe4>)
 8012180:	429e      	cmp	r6, r3
 8012182:	4604      	mov	r4, r0
 8012184:	460d      	mov	r5, r1
 8012186:	da12      	bge.n	80121ae <scalbn+0x56>
 8012188:	a327      	add	r3, pc, #156	; (adr r3, 8012228 <scalbn+0xd0>)
 801218a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801218e:	f7ee fa4b 	bl	8000628 <__aeabi_dmul>
 8012192:	e009      	b.n	80121a8 <scalbn+0x50>
 8012194:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012198:	428a      	cmp	r2, r1
 801219a:	d10c      	bne.n	80121b6 <scalbn+0x5e>
 801219c:	ee10 2a10 	vmov	r2, s0
 80121a0:	4620      	mov	r0, r4
 80121a2:	4629      	mov	r1, r5
 80121a4:	f7ee f88a 	bl	80002bc <__adddf3>
 80121a8:	4604      	mov	r4, r0
 80121aa:	460d      	mov	r5, r1
 80121ac:	e01c      	b.n	80121e8 <scalbn+0x90>
 80121ae:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80121b2:	460b      	mov	r3, r1
 80121b4:	3a36      	subs	r2, #54	; 0x36
 80121b6:	4432      	add	r2, r6
 80121b8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80121bc:	428a      	cmp	r2, r1
 80121be:	dd0b      	ble.n	80121d8 <scalbn+0x80>
 80121c0:	ec45 4b11 	vmov	d1, r4, r5
 80121c4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8012230 <scalbn+0xd8>
 80121c8:	f000 f83c 	bl	8012244 <copysign>
 80121cc:	a318      	add	r3, pc, #96	; (adr r3, 8012230 <scalbn+0xd8>)
 80121ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121d2:	ec51 0b10 	vmov	r0, r1, d0
 80121d6:	e7da      	b.n	801218e <scalbn+0x36>
 80121d8:	2a00      	cmp	r2, #0
 80121da:	dd08      	ble.n	80121ee <scalbn+0x96>
 80121dc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80121e0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80121e4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80121e8:	ec45 4b10 	vmov	d0, r4, r5
 80121ec:	bd70      	pop	{r4, r5, r6, pc}
 80121ee:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80121f2:	da0d      	bge.n	8012210 <scalbn+0xb8>
 80121f4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80121f8:	429e      	cmp	r6, r3
 80121fa:	ec45 4b11 	vmov	d1, r4, r5
 80121fe:	dce1      	bgt.n	80121c4 <scalbn+0x6c>
 8012200:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8012228 <scalbn+0xd0>
 8012204:	f000 f81e 	bl	8012244 <copysign>
 8012208:	a307      	add	r3, pc, #28	; (adr r3, 8012228 <scalbn+0xd0>)
 801220a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801220e:	e7e0      	b.n	80121d2 <scalbn+0x7a>
 8012210:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012214:	3236      	adds	r2, #54	; 0x36
 8012216:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801221a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801221e:	4620      	mov	r0, r4
 8012220:	4629      	mov	r1, r5
 8012222:	2200      	movs	r2, #0
 8012224:	4b06      	ldr	r3, [pc, #24]	; (8012240 <scalbn+0xe8>)
 8012226:	e7b2      	b.n	801218e <scalbn+0x36>
 8012228:	c2f8f359 	.word	0xc2f8f359
 801222c:	01a56e1f 	.word	0x01a56e1f
 8012230:	8800759c 	.word	0x8800759c
 8012234:	7e37e43c 	.word	0x7e37e43c
 8012238:	43500000 	.word	0x43500000
 801223c:	ffff3cb0 	.word	0xffff3cb0
 8012240:	3c900000 	.word	0x3c900000

08012244 <copysign>:
 8012244:	ec51 0b10 	vmov	r0, r1, d0
 8012248:	ee11 0a90 	vmov	r0, s3
 801224c:	ee10 2a10 	vmov	r2, s0
 8012250:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8012254:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8012258:	ea41 0300 	orr.w	r3, r1, r0
 801225c:	ec43 2b10 	vmov	d0, r2, r3
 8012260:	4770      	bx	lr
	...

08012264 <__errno>:
 8012264:	4b01      	ldr	r3, [pc, #4]	; (801226c <__errno+0x8>)
 8012266:	6818      	ldr	r0, [r3, #0]
 8012268:	4770      	bx	lr
 801226a:	bf00      	nop
 801226c:	2000000c 	.word	0x2000000c

08012270 <__libc_init_array>:
 8012270:	b570      	push	{r4, r5, r6, lr}
 8012272:	4e0d      	ldr	r6, [pc, #52]	; (80122a8 <__libc_init_array+0x38>)
 8012274:	4c0d      	ldr	r4, [pc, #52]	; (80122ac <__libc_init_array+0x3c>)
 8012276:	1ba4      	subs	r4, r4, r6
 8012278:	10a4      	asrs	r4, r4, #2
 801227a:	2500      	movs	r5, #0
 801227c:	42a5      	cmp	r5, r4
 801227e:	d109      	bne.n	8012294 <__libc_init_array+0x24>
 8012280:	4e0b      	ldr	r6, [pc, #44]	; (80122b0 <__libc_init_array+0x40>)
 8012282:	4c0c      	ldr	r4, [pc, #48]	; (80122b4 <__libc_init_array+0x44>)
 8012284:	f004 ff36 	bl	80170f4 <_init>
 8012288:	1ba4      	subs	r4, r4, r6
 801228a:	10a4      	asrs	r4, r4, #2
 801228c:	2500      	movs	r5, #0
 801228e:	42a5      	cmp	r5, r4
 8012290:	d105      	bne.n	801229e <__libc_init_array+0x2e>
 8012292:	bd70      	pop	{r4, r5, r6, pc}
 8012294:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012298:	4798      	blx	r3
 801229a:	3501      	adds	r5, #1
 801229c:	e7ee      	b.n	801227c <__libc_init_array+0xc>
 801229e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80122a2:	4798      	blx	r3
 80122a4:	3501      	adds	r5, #1
 80122a6:	e7f2      	b.n	801228e <__libc_init_array+0x1e>
 80122a8:	08017c84 	.word	0x08017c84
 80122ac:	08017c84 	.word	0x08017c84
 80122b0:	08017c84 	.word	0x08017c84
 80122b4:	08017c8c 	.word	0x08017c8c

080122b8 <memset>:
 80122b8:	4402      	add	r2, r0
 80122ba:	4603      	mov	r3, r0
 80122bc:	4293      	cmp	r3, r2
 80122be:	d100      	bne.n	80122c2 <memset+0xa>
 80122c0:	4770      	bx	lr
 80122c2:	f803 1b01 	strb.w	r1, [r3], #1
 80122c6:	e7f9      	b.n	80122bc <memset+0x4>

080122c8 <__cvt>:
 80122c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80122cc:	ec55 4b10 	vmov	r4, r5, d0
 80122d0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80122d2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80122d6:	2d00      	cmp	r5, #0
 80122d8:	460e      	mov	r6, r1
 80122da:	4691      	mov	r9, r2
 80122dc:	4619      	mov	r1, r3
 80122de:	bfb8      	it	lt
 80122e0:	4622      	movlt	r2, r4
 80122e2:	462b      	mov	r3, r5
 80122e4:	f027 0720 	bic.w	r7, r7, #32
 80122e8:	bfbb      	ittet	lt
 80122ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80122ee:	461d      	movlt	r5, r3
 80122f0:	2300      	movge	r3, #0
 80122f2:	232d      	movlt	r3, #45	; 0x2d
 80122f4:	bfb8      	it	lt
 80122f6:	4614      	movlt	r4, r2
 80122f8:	2f46      	cmp	r7, #70	; 0x46
 80122fa:	700b      	strb	r3, [r1, #0]
 80122fc:	d004      	beq.n	8012308 <__cvt+0x40>
 80122fe:	2f45      	cmp	r7, #69	; 0x45
 8012300:	d100      	bne.n	8012304 <__cvt+0x3c>
 8012302:	3601      	adds	r6, #1
 8012304:	2102      	movs	r1, #2
 8012306:	e000      	b.n	801230a <__cvt+0x42>
 8012308:	2103      	movs	r1, #3
 801230a:	ab03      	add	r3, sp, #12
 801230c:	9301      	str	r3, [sp, #4]
 801230e:	ab02      	add	r3, sp, #8
 8012310:	9300      	str	r3, [sp, #0]
 8012312:	4632      	mov	r2, r6
 8012314:	4653      	mov	r3, sl
 8012316:	ec45 4b10 	vmov	d0, r4, r5
 801231a:	f001 ffb1 	bl	8014280 <_dtoa_r>
 801231e:	2f47      	cmp	r7, #71	; 0x47
 8012320:	4680      	mov	r8, r0
 8012322:	d102      	bne.n	801232a <__cvt+0x62>
 8012324:	f019 0f01 	tst.w	r9, #1
 8012328:	d026      	beq.n	8012378 <__cvt+0xb0>
 801232a:	2f46      	cmp	r7, #70	; 0x46
 801232c:	eb08 0906 	add.w	r9, r8, r6
 8012330:	d111      	bne.n	8012356 <__cvt+0x8e>
 8012332:	f898 3000 	ldrb.w	r3, [r8]
 8012336:	2b30      	cmp	r3, #48	; 0x30
 8012338:	d10a      	bne.n	8012350 <__cvt+0x88>
 801233a:	2200      	movs	r2, #0
 801233c:	2300      	movs	r3, #0
 801233e:	4620      	mov	r0, r4
 8012340:	4629      	mov	r1, r5
 8012342:	f7ee fbd9 	bl	8000af8 <__aeabi_dcmpeq>
 8012346:	b918      	cbnz	r0, 8012350 <__cvt+0x88>
 8012348:	f1c6 0601 	rsb	r6, r6, #1
 801234c:	f8ca 6000 	str.w	r6, [sl]
 8012350:	f8da 3000 	ldr.w	r3, [sl]
 8012354:	4499      	add	r9, r3
 8012356:	2200      	movs	r2, #0
 8012358:	2300      	movs	r3, #0
 801235a:	4620      	mov	r0, r4
 801235c:	4629      	mov	r1, r5
 801235e:	f7ee fbcb 	bl	8000af8 <__aeabi_dcmpeq>
 8012362:	b938      	cbnz	r0, 8012374 <__cvt+0xac>
 8012364:	2230      	movs	r2, #48	; 0x30
 8012366:	9b03      	ldr	r3, [sp, #12]
 8012368:	454b      	cmp	r3, r9
 801236a:	d205      	bcs.n	8012378 <__cvt+0xb0>
 801236c:	1c59      	adds	r1, r3, #1
 801236e:	9103      	str	r1, [sp, #12]
 8012370:	701a      	strb	r2, [r3, #0]
 8012372:	e7f8      	b.n	8012366 <__cvt+0x9e>
 8012374:	f8cd 900c 	str.w	r9, [sp, #12]
 8012378:	9b03      	ldr	r3, [sp, #12]
 801237a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801237c:	eba3 0308 	sub.w	r3, r3, r8
 8012380:	4640      	mov	r0, r8
 8012382:	6013      	str	r3, [r2, #0]
 8012384:	b004      	add	sp, #16
 8012386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801238a <__exponent>:
 801238a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801238c:	2900      	cmp	r1, #0
 801238e:	4604      	mov	r4, r0
 8012390:	bfba      	itte	lt
 8012392:	4249      	neglt	r1, r1
 8012394:	232d      	movlt	r3, #45	; 0x2d
 8012396:	232b      	movge	r3, #43	; 0x2b
 8012398:	2909      	cmp	r1, #9
 801239a:	f804 2b02 	strb.w	r2, [r4], #2
 801239e:	7043      	strb	r3, [r0, #1]
 80123a0:	dd20      	ble.n	80123e4 <__exponent+0x5a>
 80123a2:	f10d 0307 	add.w	r3, sp, #7
 80123a6:	461f      	mov	r7, r3
 80123a8:	260a      	movs	r6, #10
 80123aa:	fb91 f5f6 	sdiv	r5, r1, r6
 80123ae:	fb06 1115 	mls	r1, r6, r5, r1
 80123b2:	3130      	adds	r1, #48	; 0x30
 80123b4:	2d09      	cmp	r5, #9
 80123b6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80123ba:	f103 32ff 	add.w	r2, r3, #4294967295
 80123be:	4629      	mov	r1, r5
 80123c0:	dc09      	bgt.n	80123d6 <__exponent+0x4c>
 80123c2:	3130      	adds	r1, #48	; 0x30
 80123c4:	3b02      	subs	r3, #2
 80123c6:	f802 1c01 	strb.w	r1, [r2, #-1]
 80123ca:	42bb      	cmp	r3, r7
 80123cc:	4622      	mov	r2, r4
 80123ce:	d304      	bcc.n	80123da <__exponent+0x50>
 80123d0:	1a10      	subs	r0, r2, r0
 80123d2:	b003      	add	sp, #12
 80123d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80123d6:	4613      	mov	r3, r2
 80123d8:	e7e7      	b.n	80123aa <__exponent+0x20>
 80123da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80123de:	f804 2b01 	strb.w	r2, [r4], #1
 80123e2:	e7f2      	b.n	80123ca <__exponent+0x40>
 80123e4:	2330      	movs	r3, #48	; 0x30
 80123e6:	4419      	add	r1, r3
 80123e8:	7083      	strb	r3, [r0, #2]
 80123ea:	1d02      	adds	r2, r0, #4
 80123ec:	70c1      	strb	r1, [r0, #3]
 80123ee:	e7ef      	b.n	80123d0 <__exponent+0x46>

080123f0 <_printf_float>:
 80123f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123f4:	b08d      	sub	sp, #52	; 0x34
 80123f6:	460c      	mov	r4, r1
 80123f8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80123fc:	4616      	mov	r6, r2
 80123fe:	461f      	mov	r7, r3
 8012400:	4605      	mov	r5, r0
 8012402:	f003 f9a9 	bl	8015758 <_localeconv_r>
 8012406:	6803      	ldr	r3, [r0, #0]
 8012408:	9304      	str	r3, [sp, #16]
 801240a:	4618      	mov	r0, r3
 801240c:	f7ed fef8 	bl	8000200 <strlen>
 8012410:	2300      	movs	r3, #0
 8012412:	930a      	str	r3, [sp, #40]	; 0x28
 8012414:	f8d8 3000 	ldr.w	r3, [r8]
 8012418:	9005      	str	r0, [sp, #20]
 801241a:	3307      	adds	r3, #7
 801241c:	f023 0307 	bic.w	r3, r3, #7
 8012420:	f103 0208 	add.w	r2, r3, #8
 8012424:	f894 a018 	ldrb.w	sl, [r4, #24]
 8012428:	f8d4 b000 	ldr.w	fp, [r4]
 801242c:	f8c8 2000 	str.w	r2, [r8]
 8012430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012434:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012438:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801243c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012440:	9307      	str	r3, [sp, #28]
 8012442:	f8cd 8018 	str.w	r8, [sp, #24]
 8012446:	f04f 32ff 	mov.w	r2, #4294967295
 801244a:	4ba7      	ldr	r3, [pc, #668]	; (80126e8 <_printf_float+0x2f8>)
 801244c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012450:	f7ee fb84 	bl	8000b5c <__aeabi_dcmpun>
 8012454:	bb70      	cbnz	r0, 80124b4 <_printf_float+0xc4>
 8012456:	f04f 32ff 	mov.w	r2, #4294967295
 801245a:	4ba3      	ldr	r3, [pc, #652]	; (80126e8 <_printf_float+0x2f8>)
 801245c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012460:	f7ee fb5e 	bl	8000b20 <__aeabi_dcmple>
 8012464:	bb30      	cbnz	r0, 80124b4 <_printf_float+0xc4>
 8012466:	2200      	movs	r2, #0
 8012468:	2300      	movs	r3, #0
 801246a:	4640      	mov	r0, r8
 801246c:	4649      	mov	r1, r9
 801246e:	f7ee fb4d 	bl	8000b0c <__aeabi_dcmplt>
 8012472:	b110      	cbz	r0, 801247a <_printf_float+0x8a>
 8012474:	232d      	movs	r3, #45	; 0x2d
 8012476:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801247a:	4a9c      	ldr	r2, [pc, #624]	; (80126ec <_printf_float+0x2fc>)
 801247c:	4b9c      	ldr	r3, [pc, #624]	; (80126f0 <_printf_float+0x300>)
 801247e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8012482:	bf8c      	ite	hi
 8012484:	4690      	movhi	r8, r2
 8012486:	4698      	movls	r8, r3
 8012488:	2303      	movs	r3, #3
 801248a:	f02b 0204 	bic.w	r2, fp, #4
 801248e:	6123      	str	r3, [r4, #16]
 8012490:	6022      	str	r2, [r4, #0]
 8012492:	f04f 0900 	mov.w	r9, #0
 8012496:	9700      	str	r7, [sp, #0]
 8012498:	4633      	mov	r3, r6
 801249a:	aa0b      	add	r2, sp, #44	; 0x2c
 801249c:	4621      	mov	r1, r4
 801249e:	4628      	mov	r0, r5
 80124a0:	f000 f9e6 	bl	8012870 <_printf_common>
 80124a4:	3001      	adds	r0, #1
 80124a6:	f040 808d 	bne.w	80125c4 <_printf_float+0x1d4>
 80124aa:	f04f 30ff 	mov.w	r0, #4294967295
 80124ae:	b00d      	add	sp, #52	; 0x34
 80124b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124b4:	4642      	mov	r2, r8
 80124b6:	464b      	mov	r3, r9
 80124b8:	4640      	mov	r0, r8
 80124ba:	4649      	mov	r1, r9
 80124bc:	f7ee fb4e 	bl	8000b5c <__aeabi_dcmpun>
 80124c0:	b110      	cbz	r0, 80124c8 <_printf_float+0xd8>
 80124c2:	4a8c      	ldr	r2, [pc, #560]	; (80126f4 <_printf_float+0x304>)
 80124c4:	4b8c      	ldr	r3, [pc, #560]	; (80126f8 <_printf_float+0x308>)
 80124c6:	e7da      	b.n	801247e <_printf_float+0x8e>
 80124c8:	6861      	ldr	r1, [r4, #4]
 80124ca:	1c4b      	adds	r3, r1, #1
 80124cc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80124d0:	a80a      	add	r0, sp, #40	; 0x28
 80124d2:	d13e      	bne.n	8012552 <_printf_float+0x162>
 80124d4:	2306      	movs	r3, #6
 80124d6:	6063      	str	r3, [r4, #4]
 80124d8:	2300      	movs	r3, #0
 80124da:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80124de:	ab09      	add	r3, sp, #36	; 0x24
 80124e0:	9300      	str	r3, [sp, #0]
 80124e2:	ec49 8b10 	vmov	d0, r8, r9
 80124e6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80124ea:	6022      	str	r2, [r4, #0]
 80124ec:	f8cd a004 	str.w	sl, [sp, #4]
 80124f0:	6861      	ldr	r1, [r4, #4]
 80124f2:	4628      	mov	r0, r5
 80124f4:	f7ff fee8 	bl	80122c8 <__cvt>
 80124f8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80124fc:	2b47      	cmp	r3, #71	; 0x47
 80124fe:	4680      	mov	r8, r0
 8012500:	d109      	bne.n	8012516 <_printf_float+0x126>
 8012502:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012504:	1cd8      	adds	r0, r3, #3
 8012506:	db02      	blt.n	801250e <_printf_float+0x11e>
 8012508:	6862      	ldr	r2, [r4, #4]
 801250a:	4293      	cmp	r3, r2
 801250c:	dd47      	ble.n	801259e <_printf_float+0x1ae>
 801250e:	f1aa 0a02 	sub.w	sl, sl, #2
 8012512:	fa5f fa8a 	uxtb.w	sl, sl
 8012516:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801251a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801251c:	d824      	bhi.n	8012568 <_printf_float+0x178>
 801251e:	3901      	subs	r1, #1
 8012520:	4652      	mov	r2, sl
 8012522:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012526:	9109      	str	r1, [sp, #36]	; 0x24
 8012528:	f7ff ff2f 	bl	801238a <__exponent>
 801252c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801252e:	1813      	adds	r3, r2, r0
 8012530:	2a01      	cmp	r2, #1
 8012532:	4681      	mov	r9, r0
 8012534:	6123      	str	r3, [r4, #16]
 8012536:	dc02      	bgt.n	801253e <_printf_float+0x14e>
 8012538:	6822      	ldr	r2, [r4, #0]
 801253a:	07d1      	lsls	r1, r2, #31
 801253c:	d501      	bpl.n	8012542 <_printf_float+0x152>
 801253e:	3301      	adds	r3, #1
 8012540:	6123      	str	r3, [r4, #16]
 8012542:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012546:	2b00      	cmp	r3, #0
 8012548:	d0a5      	beq.n	8012496 <_printf_float+0xa6>
 801254a:	232d      	movs	r3, #45	; 0x2d
 801254c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012550:	e7a1      	b.n	8012496 <_printf_float+0xa6>
 8012552:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8012556:	f000 8177 	beq.w	8012848 <_printf_float+0x458>
 801255a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801255e:	d1bb      	bne.n	80124d8 <_printf_float+0xe8>
 8012560:	2900      	cmp	r1, #0
 8012562:	d1b9      	bne.n	80124d8 <_printf_float+0xe8>
 8012564:	2301      	movs	r3, #1
 8012566:	e7b6      	b.n	80124d6 <_printf_float+0xe6>
 8012568:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 801256c:	d119      	bne.n	80125a2 <_printf_float+0x1b2>
 801256e:	2900      	cmp	r1, #0
 8012570:	6863      	ldr	r3, [r4, #4]
 8012572:	dd0c      	ble.n	801258e <_printf_float+0x19e>
 8012574:	6121      	str	r1, [r4, #16]
 8012576:	b913      	cbnz	r3, 801257e <_printf_float+0x18e>
 8012578:	6822      	ldr	r2, [r4, #0]
 801257a:	07d2      	lsls	r2, r2, #31
 801257c:	d502      	bpl.n	8012584 <_printf_float+0x194>
 801257e:	3301      	adds	r3, #1
 8012580:	440b      	add	r3, r1
 8012582:	6123      	str	r3, [r4, #16]
 8012584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012586:	65a3      	str	r3, [r4, #88]	; 0x58
 8012588:	f04f 0900 	mov.w	r9, #0
 801258c:	e7d9      	b.n	8012542 <_printf_float+0x152>
 801258e:	b913      	cbnz	r3, 8012596 <_printf_float+0x1a6>
 8012590:	6822      	ldr	r2, [r4, #0]
 8012592:	07d0      	lsls	r0, r2, #31
 8012594:	d501      	bpl.n	801259a <_printf_float+0x1aa>
 8012596:	3302      	adds	r3, #2
 8012598:	e7f3      	b.n	8012582 <_printf_float+0x192>
 801259a:	2301      	movs	r3, #1
 801259c:	e7f1      	b.n	8012582 <_printf_float+0x192>
 801259e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80125a2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80125a6:	4293      	cmp	r3, r2
 80125a8:	db05      	blt.n	80125b6 <_printf_float+0x1c6>
 80125aa:	6822      	ldr	r2, [r4, #0]
 80125ac:	6123      	str	r3, [r4, #16]
 80125ae:	07d1      	lsls	r1, r2, #31
 80125b0:	d5e8      	bpl.n	8012584 <_printf_float+0x194>
 80125b2:	3301      	adds	r3, #1
 80125b4:	e7e5      	b.n	8012582 <_printf_float+0x192>
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	bfd4      	ite	le
 80125ba:	f1c3 0302 	rsble	r3, r3, #2
 80125be:	2301      	movgt	r3, #1
 80125c0:	4413      	add	r3, r2
 80125c2:	e7de      	b.n	8012582 <_printf_float+0x192>
 80125c4:	6823      	ldr	r3, [r4, #0]
 80125c6:	055a      	lsls	r2, r3, #21
 80125c8:	d407      	bmi.n	80125da <_printf_float+0x1ea>
 80125ca:	6923      	ldr	r3, [r4, #16]
 80125cc:	4642      	mov	r2, r8
 80125ce:	4631      	mov	r1, r6
 80125d0:	4628      	mov	r0, r5
 80125d2:	47b8      	blx	r7
 80125d4:	3001      	adds	r0, #1
 80125d6:	d12b      	bne.n	8012630 <_printf_float+0x240>
 80125d8:	e767      	b.n	80124aa <_printf_float+0xba>
 80125da:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80125de:	f240 80dc 	bls.w	801279a <_printf_float+0x3aa>
 80125e2:	2200      	movs	r2, #0
 80125e4:	2300      	movs	r3, #0
 80125e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80125ea:	f7ee fa85 	bl	8000af8 <__aeabi_dcmpeq>
 80125ee:	2800      	cmp	r0, #0
 80125f0:	d033      	beq.n	801265a <_printf_float+0x26a>
 80125f2:	2301      	movs	r3, #1
 80125f4:	4a41      	ldr	r2, [pc, #260]	; (80126fc <_printf_float+0x30c>)
 80125f6:	4631      	mov	r1, r6
 80125f8:	4628      	mov	r0, r5
 80125fa:	47b8      	blx	r7
 80125fc:	3001      	adds	r0, #1
 80125fe:	f43f af54 	beq.w	80124aa <_printf_float+0xba>
 8012602:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012606:	429a      	cmp	r2, r3
 8012608:	db02      	blt.n	8012610 <_printf_float+0x220>
 801260a:	6823      	ldr	r3, [r4, #0]
 801260c:	07d8      	lsls	r0, r3, #31
 801260e:	d50f      	bpl.n	8012630 <_printf_float+0x240>
 8012610:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012614:	4631      	mov	r1, r6
 8012616:	4628      	mov	r0, r5
 8012618:	47b8      	blx	r7
 801261a:	3001      	adds	r0, #1
 801261c:	f43f af45 	beq.w	80124aa <_printf_float+0xba>
 8012620:	f04f 0800 	mov.w	r8, #0
 8012624:	f104 091a 	add.w	r9, r4, #26
 8012628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801262a:	3b01      	subs	r3, #1
 801262c:	4543      	cmp	r3, r8
 801262e:	dc09      	bgt.n	8012644 <_printf_float+0x254>
 8012630:	6823      	ldr	r3, [r4, #0]
 8012632:	079b      	lsls	r3, r3, #30
 8012634:	f100 8103 	bmi.w	801283e <_printf_float+0x44e>
 8012638:	68e0      	ldr	r0, [r4, #12]
 801263a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801263c:	4298      	cmp	r0, r3
 801263e:	bfb8      	it	lt
 8012640:	4618      	movlt	r0, r3
 8012642:	e734      	b.n	80124ae <_printf_float+0xbe>
 8012644:	2301      	movs	r3, #1
 8012646:	464a      	mov	r2, r9
 8012648:	4631      	mov	r1, r6
 801264a:	4628      	mov	r0, r5
 801264c:	47b8      	blx	r7
 801264e:	3001      	adds	r0, #1
 8012650:	f43f af2b 	beq.w	80124aa <_printf_float+0xba>
 8012654:	f108 0801 	add.w	r8, r8, #1
 8012658:	e7e6      	b.n	8012628 <_printf_float+0x238>
 801265a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801265c:	2b00      	cmp	r3, #0
 801265e:	dc2b      	bgt.n	80126b8 <_printf_float+0x2c8>
 8012660:	2301      	movs	r3, #1
 8012662:	4a26      	ldr	r2, [pc, #152]	; (80126fc <_printf_float+0x30c>)
 8012664:	4631      	mov	r1, r6
 8012666:	4628      	mov	r0, r5
 8012668:	47b8      	blx	r7
 801266a:	3001      	adds	r0, #1
 801266c:	f43f af1d 	beq.w	80124aa <_printf_float+0xba>
 8012670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012672:	b923      	cbnz	r3, 801267e <_printf_float+0x28e>
 8012674:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012676:	b913      	cbnz	r3, 801267e <_printf_float+0x28e>
 8012678:	6823      	ldr	r3, [r4, #0]
 801267a:	07d9      	lsls	r1, r3, #31
 801267c:	d5d8      	bpl.n	8012630 <_printf_float+0x240>
 801267e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012682:	4631      	mov	r1, r6
 8012684:	4628      	mov	r0, r5
 8012686:	47b8      	blx	r7
 8012688:	3001      	adds	r0, #1
 801268a:	f43f af0e 	beq.w	80124aa <_printf_float+0xba>
 801268e:	f04f 0900 	mov.w	r9, #0
 8012692:	f104 0a1a 	add.w	sl, r4, #26
 8012696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012698:	425b      	negs	r3, r3
 801269a:	454b      	cmp	r3, r9
 801269c:	dc01      	bgt.n	80126a2 <_printf_float+0x2b2>
 801269e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80126a0:	e794      	b.n	80125cc <_printf_float+0x1dc>
 80126a2:	2301      	movs	r3, #1
 80126a4:	4652      	mov	r2, sl
 80126a6:	4631      	mov	r1, r6
 80126a8:	4628      	mov	r0, r5
 80126aa:	47b8      	blx	r7
 80126ac:	3001      	adds	r0, #1
 80126ae:	f43f aefc 	beq.w	80124aa <_printf_float+0xba>
 80126b2:	f109 0901 	add.w	r9, r9, #1
 80126b6:	e7ee      	b.n	8012696 <_printf_float+0x2a6>
 80126b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80126ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80126bc:	429a      	cmp	r2, r3
 80126be:	bfa8      	it	ge
 80126c0:	461a      	movge	r2, r3
 80126c2:	2a00      	cmp	r2, #0
 80126c4:	4691      	mov	r9, r2
 80126c6:	dd07      	ble.n	80126d8 <_printf_float+0x2e8>
 80126c8:	4613      	mov	r3, r2
 80126ca:	4631      	mov	r1, r6
 80126cc:	4642      	mov	r2, r8
 80126ce:	4628      	mov	r0, r5
 80126d0:	47b8      	blx	r7
 80126d2:	3001      	adds	r0, #1
 80126d4:	f43f aee9 	beq.w	80124aa <_printf_float+0xba>
 80126d8:	f104 031a 	add.w	r3, r4, #26
 80126dc:	f04f 0b00 	mov.w	fp, #0
 80126e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80126e4:	9306      	str	r3, [sp, #24]
 80126e6:	e015      	b.n	8012714 <_printf_float+0x324>
 80126e8:	7fefffff 	.word	0x7fefffff
 80126ec:	08017948 	.word	0x08017948
 80126f0:	08017944 	.word	0x08017944
 80126f4:	08017950 	.word	0x08017950
 80126f8:	0801794c 	.word	0x0801794c
 80126fc:	08017b73 	.word	0x08017b73
 8012700:	2301      	movs	r3, #1
 8012702:	9a06      	ldr	r2, [sp, #24]
 8012704:	4631      	mov	r1, r6
 8012706:	4628      	mov	r0, r5
 8012708:	47b8      	blx	r7
 801270a:	3001      	adds	r0, #1
 801270c:	f43f aecd 	beq.w	80124aa <_printf_float+0xba>
 8012710:	f10b 0b01 	add.w	fp, fp, #1
 8012714:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8012718:	ebaa 0309 	sub.w	r3, sl, r9
 801271c:	455b      	cmp	r3, fp
 801271e:	dcef      	bgt.n	8012700 <_printf_float+0x310>
 8012720:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012724:	429a      	cmp	r2, r3
 8012726:	44d0      	add	r8, sl
 8012728:	db15      	blt.n	8012756 <_printf_float+0x366>
 801272a:	6823      	ldr	r3, [r4, #0]
 801272c:	07da      	lsls	r2, r3, #31
 801272e:	d412      	bmi.n	8012756 <_printf_float+0x366>
 8012730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012732:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012734:	eba3 020a 	sub.w	r2, r3, sl
 8012738:	eba3 0a01 	sub.w	sl, r3, r1
 801273c:	4592      	cmp	sl, r2
 801273e:	bfa8      	it	ge
 8012740:	4692      	movge	sl, r2
 8012742:	f1ba 0f00 	cmp.w	sl, #0
 8012746:	dc0e      	bgt.n	8012766 <_printf_float+0x376>
 8012748:	f04f 0800 	mov.w	r8, #0
 801274c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012750:	f104 091a 	add.w	r9, r4, #26
 8012754:	e019      	b.n	801278a <_printf_float+0x39a>
 8012756:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801275a:	4631      	mov	r1, r6
 801275c:	4628      	mov	r0, r5
 801275e:	47b8      	blx	r7
 8012760:	3001      	adds	r0, #1
 8012762:	d1e5      	bne.n	8012730 <_printf_float+0x340>
 8012764:	e6a1      	b.n	80124aa <_printf_float+0xba>
 8012766:	4653      	mov	r3, sl
 8012768:	4642      	mov	r2, r8
 801276a:	4631      	mov	r1, r6
 801276c:	4628      	mov	r0, r5
 801276e:	47b8      	blx	r7
 8012770:	3001      	adds	r0, #1
 8012772:	d1e9      	bne.n	8012748 <_printf_float+0x358>
 8012774:	e699      	b.n	80124aa <_printf_float+0xba>
 8012776:	2301      	movs	r3, #1
 8012778:	464a      	mov	r2, r9
 801277a:	4631      	mov	r1, r6
 801277c:	4628      	mov	r0, r5
 801277e:	47b8      	blx	r7
 8012780:	3001      	adds	r0, #1
 8012782:	f43f ae92 	beq.w	80124aa <_printf_float+0xba>
 8012786:	f108 0801 	add.w	r8, r8, #1
 801278a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801278e:	1a9b      	subs	r3, r3, r2
 8012790:	eba3 030a 	sub.w	r3, r3, sl
 8012794:	4543      	cmp	r3, r8
 8012796:	dcee      	bgt.n	8012776 <_printf_float+0x386>
 8012798:	e74a      	b.n	8012630 <_printf_float+0x240>
 801279a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801279c:	2a01      	cmp	r2, #1
 801279e:	dc01      	bgt.n	80127a4 <_printf_float+0x3b4>
 80127a0:	07db      	lsls	r3, r3, #31
 80127a2:	d53a      	bpl.n	801281a <_printf_float+0x42a>
 80127a4:	2301      	movs	r3, #1
 80127a6:	4642      	mov	r2, r8
 80127a8:	4631      	mov	r1, r6
 80127aa:	4628      	mov	r0, r5
 80127ac:	47b8      	blx	r7
 80127ae:	3001      	adds	r0, #1
 80127b0:	f43f ae7b 	beq.w	80124aa <_printf_float+0xba>
 80127b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80127b8:	4631      	mov	r1, r6
 80127ba:	4628      	mov	r0, r5
 80127bc:	47b8      	blx	r7
 80127be:	3001      	adds	r0, #1
 80127c0:	f108 0801 	add.w	r8, r8, #1
 80127c4:	f43f ae71 	beq.w	80124aa <_printf_float+0xba>
 80127c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80127ca:	2200      	movs	r2, #0
 80127cc:	f103 3aff 	add.w	sl, r3, #4294967295
 80127d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80127d4:	2300      	movs	r3, #0
 80127d6:	f7ee f98f 	bl	8000af8 <__aeabi_dcmpeq>
 80127da:	b9c8      	cbnz	r0, 8012810 <_printf_float+0x420>
 80127dc:	4653      	mov	r3, sl
 80127de:	4642      	mov	r2, r8
 80127e0:	4631      	mov	r1, r6
 80127e2:	4628      	mov	r0, r5
 80127e4:	47b8      	blx	r7
 80127e6:	3001      	adds	r0, #1
 80127e8:	d10e      	bne.n	8012808 <_printf_float+0x418>
 80127ea:	e65e      	b.n	80124aa <_printf_float+0xba>
 80127ec:	2301      	movs	r3, #1
 80127ee:	4652      	mov	r2, sl
 80127f0:	4631      	mov	r1, r6
 80127f2:	4628      	mov	r0, r5
 80127f4:	47b8      	blx	r7
 80127f6:	3001      	adds	r0, #1
 80127f8:	f43f ae57 	beq.w	80124aa <_printf_float+0xba>
 80127fc:	f108 0801 	add.w	r8, r8, #1
 8012800:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012802:	3b01      	subs	r3, #1
 8012804:	4543      	cmp	r3, r8
 8012806:	dcf1      	bgt.n	80127ec <_printf_float+0x3fc>
 8012808:	464b      	mov	r3, r9
 801280a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801280e:	e6de      	b.n	80125ce <_printf_float+0x1de>
 8012810:	f04f 0800 	mov.w	r8, #0
 8012814:	f104 0a1a 	add.w	sl, r4, #26
 8012818:	e7f2      	b.n	8012800 <_printf_float+0x410>
 801281a:	2301      	movs	r3, #1
 801281c:	e7df      	b.n	80127de <_printf_float+0x3ee>
 801281e:	2301      	movs	r3, #1
 8012820:	464a      	mov	r2, r9
 8012822:	4631      	mov	r1, r6
 8012824:	4628      	mov	r0, r5
 8012826:	47b8      	blx	r7
 8012828:	3001      	adds	r0, #1
 801282a:	f43f ae3e 	beq.w	80124aa <_printf_float+0xba>
 801282e:	f108 0801 	add.w	r8, r8, #1
 8012832:	68e3      	ldr	r3, [r4, #12]
 8012834:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012836:	1a9b      	subs	r3, r3, r2
 8012838:	4543      	cmp	r3, r8
 801283a:	dcf0      	bgt.n	801281e <_printf_float+0x42e>
 801283c:	e6fc      	b.n	8012638 <_printf_float+0x248>
 801283e:	f04f 0800 	mov.w	r8, #0
 8012842:	f104 0919 	add.w	r9, r4, #25
 8012846:	e7f4      	b.n	8012832 <_printf_float+0x442>
 8012848:	2900      	cmp	r1, #0
 801284a:	f43f ae8b 	beq.w	8012564 <_printf_float+0x174>
 801284e:	2300      	movs	r3, #0
 8012850:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8012854:	ab09      	add	r3, sp, #36	; 0x24
 8012856:	9300      	str	r3, [sp, #0]
 8012858:	ec49 8b10 	vmov	d0, r8, r9
 801285c:	6022      	str	r2, [r4, #0]
 801285e:	f8cd a004 	str.w	sl, [sp, #4]
 8012862:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012866:	4628      	mov	r0, r5
 8012868:	f7ff fd2e 	bl	80122c8 <__cvt>
 801286c:	4680      	mov	r8, r0
 801286e:	e648      	b.n	8012502 <_printf_float+0x112>

08012870 <_printf_common>:
 8012870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012874:	4691      	mov	r9, r2
 8012876:	461f      	mov	r7, r3
 8012878:	688a      	ldr	r2, [r1, #8]
 801287a:	690b      	ldr	r3, [r1, #16]
 801287c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012880:	4293      	cmp	r3, r2
 8012882:	bfb8      	it	lt
 8012884:	4613      	movlt	r3, r2
 8012886:	f8c9 3000 	str.w	r3, [r9]
 801288a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801288e:	4606      	mov	r6, r0
 8012890:	460c      	mov	r4, r1
 8012892:	b112      	cbz	r2, 801289a <_printf_common+0x2a>
 8012894:	3301      	adds	r3, #1
 8012896:	f8c9 3000 	str.w	r3, [r9]
 801289a:	6823      	ldr	r3, [r4, #0]
 801289c:	0699      	lsls	r1, r3, #26
 801289e:	bf42      	ittt	mi
 80128a0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80128a4:	3302      	addmi	r3, #2
 80128a6:	f8c9 3000 	strmi.w	r3, [r9]
 80128aa:	6825      	ldr	r5, [r4, #0]
 80128ac:	f015 0506 	ands.w	r5, r5, #6
 80128b0:	d107      	bne.n	80128c2 <_printf_common+0x52>
 80128b2:	f104 0a19 	add.w	sl, r4, #25
 80128b6:	68e3      	ldr	r3, [r4, #12]
 80128b8:	f8d9 2000 	ldr.w	r2, [r9]
 80128bc:	1a9b      	subs	r3, r3, r2
 80128be:	42ab      	cmp	r3, r5
 80128c0:	dc28      	bgt.n	8012914 <_printf_common+0xa4>
 80128c2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80128c6:	6822      	ldr	r2, [r4, #0]
 80128c8:	3300      	adds	r3, #0
 80128ca:	bf18      	it	ne
 80128cc:	2301      	movne	r3, #1
 80128ce:	0692      	lsls	r2, r2, #26
 80128d0:	d42d      	bmi.n	801292e <_printf_common+0xbe>
 80128d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80128d6:	4639      	mov	r1, r7
 80128d8:	4630      	mov	r0, r6
 80128da:	47c0      	blx	r8
 80128dc:	3001      	adds	r0, #1
 80128de:	d020      	beq.n	8012922 <_printf_common+0xb2>
 80128e0:	6823      	ldr	r3, [r4, #0]
 80128e2:	68e5      	ldr	r5, [r4, #12]
 80128e4:	f8d9 2000 	ldr.w	r2, [r9]
 80128e8:	f003 0306 	and.w	r3, r3, #6
 80128ec:	2b04      	cmp	r3, #4
 80128ee:	bf08      	it	eq
 80128f0:	1aad      	subeq	r5, r5, r2
 80128f2:	68a3      	ldr	r3, [r4, #8]
 80128f4:	6922      	ldr	r2, [r4, #16]
 80128f6:	bf0c      	ite	eq
 80128f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80128fc:	2500      	movne	r5, #0
 80128fe:	4293      	cmp	r3, r2
 8012900:	bfc4      	itt	gt
 8012902:	1a9b      	subgt	r3, r3, r2
 8012904:	18ed      	addgt	r5, r5, r3
 8012906:	f04f 0900 	mov.w	r9, #0
 801290a:	341a      	adds	r4, #26
 801290c:	454d      	cmp	r5, r9
 801290e:	d11a      	bne.n	8012946 <_printf_common+0xd6>
 8012910:	2000      	movs	r0, #0
 8012912:	e008      	b.n	8012926 <_printf_common+0xb6>
 8012914:	2301      	movs	r3, #1
 8012916:	4652      	mov	r2, sl
 8012918:	4639      	mov	r1, r7
 801291a:	4630      	mov	r0, r6
 801291c:	47c0      	blx	r8
 801291e:	3001      	adds	r0, #1
 8012920:	d103      	bne.n	801292a <_printf_common+0xba>
 8012922:	f04f 30ff 	mov.w	r0, #4294967295
 8012926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801292a:	3501      	adds	r5, #1
 801292c:	e7c3      	b.n	80128b6 <_printf_common+0x46>
 801292e:	18e1      	adds	r1, r4, r3
 8012930:	1c5a      	adds	r2, r3, #1
 8012932:	2030      	movs	r0, #48	; 0x30
 8012934:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012938:	4422      	add	r2, r4
 801293a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801293e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012942:	3302      	adds	r3, #2
 8012944:	e7c5      	b.n	80128d2 <_printf_common+0x62>
 8012946:	2301      	movs	r3, #1
 8012948:	4622      	mov	r2, r4
 801294a:	4639      	mov	r1, r7
 801294c:	4630      	mov	r0, r6
 801294e:	47c0      	blx	r8
 8012950:	3001      	adds	r0, #1
 8012952:	d0e6      	beq.n	8012922 <_printf_common+0xb2>
 8012954:	f109 0901 	add.w	r9, r9, #1
 8012958:	e7d8      	b.n	801290c <_printf_common+0x9c>
	...

0801295c <_printf_i>:
 801295c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012960:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8012964:	460c      	mov	r4, r1
 8012966:	7e09      	ldrb	r1, [r1, #24]
 8012968:	b085      	sub	sp, #20
 801296a:	296e      	cmp	r1, #110	; 0x6e
 801296c:	4617      	mov	r7, r2
 801296e:	4606      	mov	r6, r0
 8012970:	4698      	mov	r8, r3
 8012972:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012974:	f000 80b3 	beq.w	8012ade <_printf_i+0x182>
 8012978:	d822      	bhi.n	80129c0 <_printf_i+0x64>
 801297a:	2963      	cmp	r1, #99	; 0x63
 801297c:	d036      	beq.n	80129ec <_printf_i+0x90>
 801297e:	d80a      	bhi.n	8012996 <_printf_i+0x3a>
 8012980:	2900      	cmp	r1, #0
 8012982:	f000 80b9 	beq.w	8012af8 <_printf_i+0x19c>
 8012986:	2958      	cmp	r1, #88	; 0x58
 8012988:	f000 8083 	beq.w	8012a92 <_printf_i+0x136>
 801298c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012990:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8012994:	e032      	b.n	80129fc <_printf_i+0xa0>
 8012996:	2964      	cmp	r1, #100	; 0x64
 8012998:	d001      	beq.n	801299e <_printf_i+0x42>
 801299a:	2969      	cmp	r1, #105	; 0x69
 801299c:	d1f6      	bne.n	801298c <_printf_i+0x30>
 801299e:	6820      	ldr	r0, [r4, #0]
 80129a0:	6813      	ldr	r3, [r2, #0]
 80129a2:	0605      	lsls	r5, r0, #24
 80129a4:	f103 0104 	add.w	r1, r3, #4
 80129a8:	d52a      	bpl.n	8012a00 <_printf_i+0xa4>
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	6011      	str	r1, [r2, #0]
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	da03      	bge.n	80129ba <_printf_i+0x5e>
 80129b2:	222d      	movs	r2, #45	; 0x2d
 80129b4:	425b      	negs	r3, r3
 80129b6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80129ba:	486f      	ldr	r0, [pc, #444]	; (8012b78 <_printf_i+0x21c>)
 80129bc:	220a      	movs	r2, #10
 80129be:	e039      	b.n	8012a34 <_printf_i+0xd8>
 80129c0:	2973      	cmp	r1, #115	; 0x73
 80129c2:	f000 809d 	beq.w	8012b00 <_printf_i+0x1a4>
 80129c6:	d808      	bhi.n	80129da <_printf_i+0x7e>
 80129c8:	296f      	cmp	r1, #111	; 0x6f
 80129ca:	d020      	beq.n	8012a0e <_printf_i+0xb2>
 80129cc:	2970      	cmp	r1, #112	; 0x70
 80129ce:	d1dd      	bne.n	801298c <_printf_i+0x30>
 80129d0:	6823      	ldr	r3, [r4, #0]
 80129d2:	f043 0320 	orr.w	r3, r3, #32
 80129d6:	6023      	str	r3, [r4, #0]
 80129d8:	e003      	b.n	80129e2 <_printf_i+0x86>
 80129da:	2975      	cmp	r1, #117	; 0x75
 80129dc:	d017      	beq.n	8012a0e <_printf_i+0xb2>
 80129de:	2978      	cmp	r1, #120	; 0x78
 80129e0:	d1d4      	bne.n	801298c <_printf_i+0x30>
 80129e2:	2378      	movs	r3, #120	; 0x78
 80129e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80129e8:	4864      	ldr	r0, [pc, #400]	; (8012b7c <_printf_i+0x220>)
 80129ea:	e055      	b.n	8012a98 <_printf_i+0x13c>
 80129ec:	6813      	ldr	r3, [r2, #0]
 80129ee:	1d19      	adds	r1, r3, #4
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	6011      	str	r1, [r2, #0]
 80129f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80129f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80129fc:	2301      	movs	r3, #1
 80129fe:	e08c      	b.n	8012b1a <_printf_i+0x1be>
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	6011      	str	r1, [r2, #0]
 8012a04:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012a08:	bf18      	it	ne
 8012a0a:	b21b      	sxthne	r3, r3
 8012a0c:	e7cf      	b.n	80129ae <_printf_i+0x52>
 8012a0e:	6813      	ldr	r3, [r2, #0]
 8012a10:	6825      	ldr	r5, [r4, #0]
 8012a12:	1d18      	adds	r0, r3, #4
 8012a14:	6010      	str	r0, [r2, #0]
 8012a16:	0628      	lsls	r0, r5, #24
 8012a18:	d501      	bpl.n	8012a1e <_printf_i+0xc2>
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	e002      	b.n	8012a24 <_printf_i+0xc8>
 8012a1e:	0668      	lsls	r0, r5, #25
 8012a20:	d5fb      	bpl.n	8012a1a <_printf_i+0xbe>
 8012a22:	881b      	ldrh	r3, [r3, #0]
 8012a24:	4854      	ldr	r0, [pc, #336]	; (8012b78 <_printf_i+0x21c>)
 8012a26:	296f      	cmp	r1, #111	; 0x6f
 8012a28:	bf14      	ite	ne
 8012a2a:	220a      	movne	r2, #10
 8012a2c:	2208      	moveq	r2, #8
 8012a2e:	2100      	movs	r1, #0
 8012a30:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012a34:	6865      	ldr	r5, [r4, #4]
 8012a36:	60a5      	str	r5, [r4, #8]
 8012a38:	2d00      	cmp	r5, #0
 8012a3a:	f2c0 8095 	blt.w	8012b68 <_printf_i+0x20c>
 8012a3e:	6821      	ldr	r1, [r4, #0]
 8012a40:	f021 0104 	bic.w	r1, r1, #4
 8012a44:	6021      	str	r1, [r4, #0]
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d13d      	bne.n	8012ac6 <_printf_i+0x16a>
 8012a4a:	2d00      	cmp	r5, #0
 8012a4c:	f040 808e 	bne.w	8012b6c <_printf_i+0x210>
 8012a50:	4665      	mov	r5, ip
 8012a52:	2a08      	cmp	r2, #8
 8012a54:	d10b      	bne.n	8012a6e <_printf_i+0x112>
 8012a56:	6823      	ldr	r3, [r4, #0]
 8012a58:	07db      	lsls	r3, r3, #31
 8012a5a:	d508      	bpl.n	8012a6e <_printf_i+0x112>
 8012a5c:	6923      	ldr	r3, [r4, #16]
 8012a5e:	6862      	ldr	r2, [r4, #4]
 8012a60:	429a      	cmp	r2, r3
 8012a62:	bfde      	ittt	le
 8012a64:	2330      	movle	r3, #48	; 0x30
 8012a66:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012a6a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012a6e:	ebac 0305 	sub.w	r3, ip, r5
 8012a72:	6123      	str	r3, [r4, #16]
 8012a74:	f8cd 8000 	str.w	r8, [sp]
 8012a78:	463b      	mov	r3, r7
 8012a7a:	aa03      	add	r2, sp, #12
 8012a7c:	4621      	mov	r1, r4
 8012a7e:	4630      	mov	r0, r6
 8012a80:	f7ff fef6 	bl	8012870 <_printf_common>
 8012a84:	3001      	adds	r0, #1
 8012a86:	d14d      	bne.n	8012b24 <_printf_i+0x1c8>
 8012a88:	f04f 30ff 	mov.w	r0, #4294967295
 8012a8c:	b005      	add	sp, #20
 8012a8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012a92:	4839      	ldr	r0, [pc, #228]	; (8012b78 <_printf_i+0x21c>)
 8012a94:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8012a98:	6813      	ldr	r3, [r2, #0]
 8012a9a:	6821      	ldr	r1, [r4, #0]
 8012a9c:	1d1d      	adds	r5, r3, #4
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	6015      	str	r5, [r2, #0]
 8012aa2:	060a      	lsls	r2, r1, #24
 8012aa4:	d50b      	bpl.n	8012abe <_printf_i+0x162>
 8012aa6:	07ca      	lsls	r2, r1, #31
 8012aa8:	bf44      	itt	mi
 8012aaa:	f041 0120 	orrmi.w	r1, r1, #32
 8012aae:	6021      	strmi	r1, [r4, #0]
 8012ab0:	b91b      	cbnz	r3, 8012aba <_printf_i+0x15e>
 8012ab2:	6822      	ldr	r2, [r4, #0]
 8012ab4:	f022 0220 	bic.w	r2, r2, #32
 8012ab8:	6022      	str	r2, [r4, #0]
 8012aba:	2210      	movs	r2, #16
 8012abc:	e7b7      	b.n	8012a2e <_printf_i+0xd2>
 8012abe:	064d      	lsls	r5, r1, #25
 8012ac0:	bf48      	it	mi
 8012ac2:	b29b      	uxthmi	r3, r3
 8012ac4:	e7ef      	b.n	8012aa6 <_printf_i+0x14a>
 8012ac6:	4665      	mov	r5, ip
 8012ac8:	fbb3 f1f2 	udiv	r1, r3, r2
 8012acc:	fb02 3311 	mls	r3, r2, r1, r3
 8012ad0:	5cc3      	ldrb	r3, [r0, r3]
 8012ad2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8012ad6:	460b      	mov	r3, r1
 8012ad8:	2900      	cmp	r1, #0
 8012ada:	d1f5      	bne.n	8012ac8 <_printf_i+0x16c>
 8012adc:	e7b9      	b.n	8012a52 <_printf_i+0xf6>
 8012ade:	6813      	ldr	r3, [r2, #0]
 8012ae0:	6825      	ldr	r5, [r4, #0]
 8012ae2:	6961      	ldr	r1, [r4, #20]
 8012ae4:	1d18      	adds	r0, r3, #4
 8012ae6:	6010      	str	r0, [r2, #0]
 8012ae8:	0628      	lsls	r0, r5, #24
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	d501      	bpl.n	8012af2 <_printf_i+0x196>
 8012aee:	6019      	str	r1, [r3, #0]
 8012af0:	e002      	b.n	8012af8 <_printf_i+0x19c>
 8012af2:	066a      	lsls	r2, r5, #25
 8012af4:	d5fb      	bpl.n	8012aee <_printf_i+0x192>
 8012af6:	8019      	strh	r1, [r3, #0]
 8012af8:	2300      	movs	r3, #0
 8012afa:	6123      	str	r3, [r4, #16]
 8012afc:	4665      	mov	r5, ip
 8012afe:	e7b9      	b.n	8012a74 <_printf_i+0x118>
 8012b00:	6813      	ldr	r3, [r2, #0]
 8012b02:	1d19      	adds	r1, r3, #4
 8012b04:	6011      	str	r1, [r2, #0]
 8012b06:	681d      	ldr	r5, [r3, #0]
 8012b08:	6862      	ldr	r2, [r4, #4]
 8012b0a:	2100      	movs	r1, #0
 8012b0c:	4628      	mov	r0, r5
 8012b0e:	f7ed fb7f 	bl	8000210 <memchr>
 8012b12:	b108      	cbz	r0, 8012b18 <_printf_i+0x1bc>
 8012b14:	1b40      	subs	r0, r0, r5
 8012b16:	6060      	str	r0, [r4, #4]
 8012b18:	6863      	ldr	r3, [r4, #4]
 8012b1a:	6123      	str	r3, [r4, #16]
 8012b1c:	2300      	movs	r3, #0
 8012b1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012b22:	e7a7      	b.n	8012a74 <_printf_i+0x118>
 8012b24:	6923      	ldr	r3, [r4, #16]
 8012b26:	462a      	mov	r2, r5
 8012b28:	4639      	mov	r1, r7
 8012b2a:	4630      	mov	r0, r6
 8012b2c:	47c0      	blx	r8
 8012b2e:	3001      	adds	r0, #1
 8012b30:	d0aa      	beq.n	8012a88 <_printf_i+0x12c>
 8012b32:	6823      	ldr	r3, [r4, #0]
 8012b34:	079b      	lsls	r3, r3, #30
 8012b36:	d413      	bmi.n	8012b60 <_printf_i+0x204>
 8012b38:	68e0      	ldr	r0, [r4, #12]
 8012b3a:	9b03      	ldr	r3, [sp, #12]
 8012b3c:	4298      	cmp	r0, r3
 8012b3e:	bfb8      	it	lt
 8012b40:	4618      	movlt	r0, r3
 8012b42:	e7a3      	b.n	8012a8c <_printf_i+0x130>
 8012b44:	2301      	movs	r3, #1
 8012b46:	464a      	mov	r2, r9
 8012b48:	4639      	mov	r1, r7
 8012b4a:	4630      	mov	r0, r6
 8012b4c:	47c0      	blx	r8
 8012b4e:	3001      	adds	r0, #1
 8012b50:	d09a      	beq.n	8012a88 <_printf_i+0x12c>
 8012b52:	3501      	adds	r5, #1
 8012b54:	68e3      	ldr	r3, [r4, #12]
 8012b56:	9a03      	ldr	r2, [sp, #12]
 8012b58:	1a9b      	subs	r3, r3, r2
 8012b5a:	42ab      	cmp	r3, r5
 8012b5c:	dcf2      	bgt.n	8012b44 <_printf_i+0x1e8>
 8012b5e:	e7eb      	b.n	8012b38 <_printf_i+0x1dc>
 8012b60:	2500      	movs	r5, #0
 8012b62:	f104 0919 	add.w	r9, r4, #25
 8012b66:	e7f5      	b.n	8012b54 <_printf_i+0x1f8>
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d1ac      	bne.n	8012ac6 <_printf_i+0x16a>
 8012b6c:	7803      	ldrb	r3, [r0, #0]
 8012b6e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012b72:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012b76:	e76c      	b.n	8012a52 <_printf_i+0xf6>
 8012b78:	08017954 	.word	0x08017954
 8012b7c:	08017965 	.word	0x08017965

08012b80 <_scanf_float>:
 8012b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b84:	469a      	mov	sl, r3
 8012b86:	688b      	ldr	r3, [r1, #8]
 8012b88:	4616      	mov	r6, r2
 8012b8a:	1e5a      	subs	r2, r3, #1
 8012b8c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8012b90:	b087      	sub	sp, #28
 8012b92:	bf83      	ittte	hi
 8012b94:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8012b98:	189b      	addhi	r3, r3, r2
 8012b9a:	9301      	strhi	r3, [sp, #4]
 8012b9c:	2300      	movls	r3, #0
 8012b9e:	bf86      	itte	hi
 8012ba0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012ba4:	608b      	strhi	r3, [r1, #8]
 8012ba6:	9301      	strls	r3, [sp, #4]
 8012ba8:	680b      	ldr	r3, [r1, #0]
 8012baa:	4688      	mov	r8, r1
 8012bac:	f04f 0b00 	mov.w	fp, #0
 8012bb0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8012bb4:	f848 3b1c 	str.w	r3, [r8], #28
 8012bb8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8012bbc:	4607      	mov	r7, r0
 8012bbe:	460c      	mov	r4, r1
 8012bc0:	4645      	mov	r5, r8
 8012bc2:	465a      	mov	r2, fp
 8012bc4:	46d9      	mov	r9, fp
 8012bc6:	f8cd b008 	str.w	fp, [sp, #8]
 8012bca:	68a1      	ldr	r1, [r4, #8]
 8012bcc:	b181      	cbz	r1, 8012bf0 <_scanf_float+0x70>
 8012bce:	6833      	ldr	r3, [r6, #0]
 8012bd0:	781b      	ldrb	r3, [r3, #0]
 8012bd2:	2b49      	cmp	r3, #73	; 0x49
 8012bd4:	d071      	beq.n	8012cba <_scanf_float+0x13a>
 8012bd6:	d84d      	bhi.n	8012c74 <_scanf_float+0xf4>
 8012bd8:	2b39      	cmp	r3, #57	; 0x39
 8012bda:	d840      	bhi.n	8012c5e <_scanf_float+0xde>
 8012bdc:	2b31      	cmp	r3, #49	; 0x31
 8012bde:	f080 8088 	bcs.w	8012cf2 <_scanf_float+0x172>
 8012be2:	2b2d      	cmp	r3, #45	; 0x2d
 8012be4:	f000 8090 	beq.w	8012d08 <_scanf_float+0x188>
 8012be8:	d815      	bhi.n	8012c16 <_scanf_float+0x96>
 8012bea:	2b2b      	cmp	r3, #43	; 0x2b
 8012bec:	f000 808c 	beq.w	8012d08 <_scanf_float+0x188>
 8012bf0:	f1b9 0f00 	cmp.w	r9, #0
 8012bf4:	d003      	beq.n	8012bfe <_scanf_float+0x7e>
 8012bf6:	6823      	ldr	r3, [r4, #0]
 8012bf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012bfc:	6023      	str	r3, [r4, #0]
 8012bfe:	3a01      	subs	r2, #1
 8012c00:	2a01      	cmp	r2, #1
 8012c02:	f200 80ea 	bhi.w	8012dda <_scanf_float+0x25a>
 8012c06:	4545      	cmp	r5, r8
 8012c08:	f200 80dc 	bhi.w	8012dc4 <_scanf_float+0x244>
 8012c0c:	2601      	movs	r6, #1
 8012c0e:	4630      	mov	r0, r6
 8012c10:	b007      	add	sp, #28
 8012c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c16:	2b2e      	cmp	r3, #46	; 0x2e
 8012c18:	f000 809f 	beq.w	8012d5a <_scanf_float+0x1da>
 8012c1c:	2b30      	cmp	r3, #48	; 0x30
 8012c1e:	d1e7      	bne.n	8012bf0 <_scanf_float+0x70>
 8012c20:	6820      	ldr	r0, [r4, #0]
 8012c22:	f410 7f80 	tst.w	r0, #256	; 0x100
 8012c26:	d064      	beq.n	8012cf2 <_scanf_float+0x172>
 8012c28:	9b01      	ldr	r3, [sp, #4]
 8012c2a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8012c2e:	6020      	str	r0, [r4, #0]
 8012c30:	f109 0901 	add.w	r9, r9, #1
 8012c34:	b11b      	cbz	r3, 8012c3e <_scanf_float+0xbe>
 8012c36:	3b01      	subs	r3, #1
 8012c38:	3101      	adds	r1, #1
 8012c3a:	9301      	str	r3, [sp, #4]
 8012c3c:	60a1      	str	r1, [r4, #8]
 8012c3e:	68a3      	ldr	r3, [r4, #8]
 8012c40:	3b01      	subs	r3, #1
 8012c42:	60a3      	str	r3, [r4, #8]
 8012c44:	6923      	ldr	r3, [r4, #16]
 8012c46:	3301      	adds	r3, #1
 8012c48:	6123      	str	r3, [r4, #16]
 8012c4a:	6873      	ldr	r3, [r6, #4]
 8012c4c:	3b01      	subs	r3, #1
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	6073      	str	r3, [r6, #4]
 8012c52:	f340 80ac 	ble.w	8012dae <_scanf_float+0x22e>
 8012c56:	6833      	ldr	r3, [r6, #0]
 8012c58:	3301      	adds	r3, #1
 8012c5a:	6033      	str	r3, [r6, #0]
 8012c5c:	e7b5      	b.n	8012bca <_scanf_float+0x4a>
 8012c5e:	2b45      	cmp	r3, #69	; 0x45
 8012c60:	f000 8085 	beq.w	8012d6e <_scanf_float+0x1ee>
 8012c64:	2b46      	cmp	r3, #70	; 0x46
 8012c66:	d06a      	beq.n	8012d3e <_scanf_float+0x1be>
 8012c68:	2b41      	cmp	r3, #65	; 0x41
 8012c6a:	d1c1      	bne.n	8012bf0 <_scanf_float+0x70>
 8012c6c:	2a01      	cmp	r2, #1
 8012c6e:	d1bf      	bne.n	8012bf0 <_scanf_float+0x70>
 8012c70:	2202      	movs	r2, #2
 8012c72:	e046      	b.n	8012d02 <_scanf_float+0x182>
 8012c74:	2b65      	cmp	r3, #101	; 0x65
 8012c76:	d07a      	beq.n	8012d6e <_scanf_float+0x1ee>
 8012c78:	d818      	bhi.n	8012cac <_scanf_float+0x12c>
 8012c7a:	2b54      	cmp	r3, #84	; 0x54
 8012c7c:	d066      	beq.n	8012d4c <_scanf_float+0x1cc>
 8012c7e:	d811      	bhi.n	8012ca4 <_scanf_float+0x124>
 8012c80:	2b4e      	cmp	r3, #78	; 0x4e
 8012c82:	d1b5      	bne.n	8012bf0 <_scanf_float+0x70>
 8012c84:	2a00      	cmp	r2, #0
 8012c86:	d146      	bne.n	8012d16 <_scanf_float+0x196>
 8012c88:	f1b9 0f00 	cmp.w	r9, #0
 8012c8c:	d145      	bne.n	8012d1a <_scanf_float+0x19a>
 8012c8e:	6821      	ldr	r1, [r4, #0]
 8012c90:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8012c94:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8012c98:	d13f      	bne.n	8012d1a <_scanf_float+0x19a>
 8012c9a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8012c9e:	6021      	str	r1, [r4, #0]
 8012ca0:	2201      	movs	r2, #1
 8012ca2:	e02e      	b.n	8012d02 <_scanf_float+0x182>
 8012ca4:	2b59      	cmp	r3, #89	; 0x59
 8012ca6:	d01e      	beq.n	8012ce6 <_scanf_float+0x166>
 8012ca8:	2b61      	cmp	r3, #97	; 0x61
 8012caa:	e7de      	b.n	8012c6a <_scanf_float+0xea>
 8012cac:	2b6e      	cmp	r3, #110	; 0x6e
 8012cae:	d0e9      	beq.n	8012c84 <_scanf_float+0x104>
 8012cb0:	d815      	bhi.n	8012cde <_scanf_float+0x15e>
 8012cb2:	2b66      	cmp	r3, #102	; 0x66
 8012cb4:	d043      	beq.n	8012d3e <_scanf_float+0x1be>
 8012cb6:	2b69      	cmp	r3, #105	; 0x69
 8012cb8:	d19a      	bne.n	8012bf0 <_scanf_float+0x70>
 8012cba:	f1bb 0f00 	cmp.w	fp, #0
 8012cbe:	d138      	bne.n	8012d32 <_scanf_float+0x1b2>
 8012cc0:	f1b9 0f00 	cmp.w	r9, #0
 8012cc4:	d197      	bne.n	8012bf6 <_scanf_float+0x76>
 8012cc6:	6821      	ldr	r1, [r4, #0]
 8012cc8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8012ccc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8012cd0:	d195      	bne.n	8012bfe <_scanf_float+0x7e>
 8012cd2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8012cd6:	6021      	str	r1, [r4, #0]
 8012cd8:	f04f 0b01 	mov.w	fp, #1
 8012cdc:	e011      	b.n	8012d02 <_scanf_float+0x182>
 8012cde:	2b74      	cmp	r3, #116	; 0x74
 8012ce0:	d034      	beq.n	8012d4c <_scanf_float+0x1cc>
 8012ce2:	2b79      	cmp	r3, #121	; 0x79
 8012ce4:	d184      	bne.n	8012bf0 <_scanf_float+0x70>
 8012ce6:	f1bb 0f07 	cmp.w	fp, #7
 8012cea:	d181      	bne.n	8012bf0 <_scanf_float+0x70>
 8012cec:	f04f 0b08 	mov.w	fp, #8
 8012cf0:	e007      	b.n	8012d02 <_scanf_float+0x182>
 8012cf2:	eb12 0f0b 	cmn.w	r2, fp
 8012cf6:	f47f af7b 	bne.w	8012bf0 <_scanf_float+0x70>
 8012cfa:	6821      	ldr	r1, [r4, #0]
 8012cfc:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8012d00:	6021      	str	r1, [r4, #0]
 8012d02:	702b      	strb	r3, [r5, #0]
 8012d04:	3501      	adds	r5, #1
 8012d06:	e79a      	b.n	8012c3e <_scanf_float+0xbe>
 8012d08:	6821      	ldr	r1, [r4, #0]
 8012d0a:	0608      	lsls	r0, r1, #24
 8012d0c:	f57f af70 	bpl.w	8012bf0 <_scanf_float+0x70>
 8012d10:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8012d14:	e7f4      	b.n	8012d00 <_scanf_float+0x180>
 8012d16:	2a02      	cmp	r2, #2
 8012d18:	d047      	beq.n	8012daa <_scanf_float+0x22a>
 8012d1a:	f1bb 0f01 	cmp.w	fp, #1
 8012d1e:	d003      	beq.n	8012d28 <_scanf_float+0x1a8>
 8012d20:	f1bb 0f04 	cmp.w	fp, #4
 8012d24:	f47f af64 	bne.w	8012bf0 <_scanf_float+0x70>
 8012d28:	f10b 0b01 	add.w	fp, fp, #1
 8012d2c:	fa5f fb8b 	uxtb.w	fp, fp
 8012d30:	e7e7      	b.n	8012d02 <_scanf_float+0x182>
 8012d32:	f1bb 0f03 	cmp.w	fp, #3
 8012d36:	d0f7      	beq.n	8012d28 <_scanf_float+0x1a8>
 8012d38:	f1bb 0f05 	cmp.w	fp, #5
 8012d3c:	e7f2      	b.n	8012d24 <_scanf_float+0x1a4>
 8012d3e:	f1bb 0f02 	cmp.w	fp, #2
 8012d42:	f47f af55 	bne.w	8012bf0 <_scanf_float+0x70>
 8012d46:	f04f 0b03 	mov.w	fp, #3
 8012d4a:	e7da      	b.n	8012d02 <_scanf_float+0x182>
 8012d4c:	f1bb 0f06 	cmp.w	fp, #6
 8012d50:	f47f af4e 	bne.w	8012bf0 <_scanf_float+0x70>
 8012d54:	f04f 0b07 	mov.w	fp, #7
 8012d58:	e7d3      	b.n	8012d02 <_scanf_float+0x182>
 8012d5a:	6821      	ldr	r1, [r4, #0]
 8012d5c:	0588      	lsls	r0, r1, #22
 8012d5e:	f57f af47 	bpl.w	8012bf0 <_scanf_float+0x70>
 8012d62:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8012d66:	6021      	str	r1, [r4, #0]
 8012d68:	f8cd 9008 	str.w	r9, [sp, #8]
 8012d6c:	e7c9      	b.n	8012d02 <_scanf_float+0x182>
 8012d6e:	6821      	ldr	r1, [r4, #0]
 8012d70:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8012d74:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8012d78:	d006      	beq.n	8012d88 <_scanf_float+0x208>
 8012d7a:	0548      	lsls	r0, r1, #21
 8012d7c:	f57f af38 	bpl.w	8012bf0 <_scanf_float+0x70>
 8012d80:	f1b9 0f00 	cmp.w	r9, #0
 8012d84:	f43f af3b 	beq.w	8012bfe <_scanf_float+0x7e>
 8012d88:	0588      	lsls	r0, r1, #22
 8012d8a:	bf58      	it	pl
 8012d8c:	9802      	ldrpl	r0, [sp, #8]
 8012d8e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8012d92:	bf58      	it	pl
 8012d94:	eba9 0000 	subpl.w	r0, r9, r0
 8012d98:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8012d9c:	bf58      	it	pl
 8012d9e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8012da2:	6021      	str	r1, [r4, #0]
 8012da4:	f04f 0900 	mov.w	r9, #0
 8012da8:	e7ab      	b.n	8012d02 <_scanf_float+0x182>
 8012daa:	2203      	movs	r2, #3
 8012dac:	e7a9      	b.n	8012d02 <_scanf_float+0x182>
 8012dae:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012db2:	9205      	str	r2, [sp, #20]
 8012db4:	4631      	mov	r1, r6
 8012db6:	4638      	mov	r0, r7
 8012db8:	4798      	blx	r3
 8012dba:	9a05      	ldr	r2, [sp, #20]
 8012dbc:	2800      	cmp	r0, #0
 8012dbe:	f43f af04 	beq.w	8012bca <_scanf_float+0x4a>
 8012dc2:	e715      	b.n	8012bf0 <_scanf_float+0x70>
 8012dc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012dc8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012dcc:	4632      	mov	r2, r6
 8012dce:	4638      	mov	r0, r7
 8012dd0:	4798      	blx	r3
 8012dd2:	6923      	ldr	r3, [r4, #16]
 8012dd4:	3b01      	subs	r3, #1
 8012dd6:	6123      	str	r3, [r4, #16]
 8012dd8:	e715      	b.n	8012c06 <_scanf_float+0x86>
 8012dda:	f10b 33ff 	add.w	r3, fp, #4294967295
 8012dde:	2b06      	cmp	r3, #6
 8012de0:	d80a      	bhi.n	8012df8 <_scanf_float+0x278>
 8012de2:	f1bb 0f02 	cmp.w	fp, #2
 8012de6:	d968      	bls.n	8012eba <_scanf_float+0x33a>
 8012de8:	f1ab 0b03 	sub.w	fp, fp, #3
 8012dec:	fa5f fb8b 	uxtb.w	fp, fp
 8012df0:	eba5 0b0b 	sub.w	fp, r5, fp
 8012df4:	455d      	cmp	r5, fp
 8012df6:	d14b      	bne.n	8012e90 <_scanf_float+0x310>
 8012df8:	6823      	ldr	r3, [r4, #0]
 8012dfa:	05da      	lsls	r2, r3, #23
 8012dfc:	d51f      	bpl.n	8012e3e <_scanf_float+0x2be>
 8012dfe:	055b      	lsls	r3, r3, #21
 8012e00:	d468      	bmi.n	8012ed4 <_scanf_float+0x354>
 8012e02:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8012e06:	6923      	ldr	r3, [r4, #16]
 8012e08:	2965      	cmp	r1, #101	; 0x65
 8012e0a:	f103 33ff 	add.w	r3, r3, #4294967295
 8012e0e:	f105 3bff 	add.w	fp, r5, #4294967295
 8012e12:	6123      	str	r3, [r4, #16]
 8012e14:	d00d      	beq.n	8012e32 <_scanf_float+0x2b2>
 8012e16:	2945      	cmp	r1, #69	; 0x45
 8012e18:	d00b      	beq.n	8012e32 <_scanf_float+0x2b2>
 8012e1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012e1e:	4632      	mov	r2, r6
 8012e20:	4638      	mov	r0, r7
 8012e22:	4798      	blx	r3
 8012e24:	6923      	ldr	r3, [r4, #16]
 8012e26:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8012e2a:	3b01      	subs	r3, #1
 8012e2c:	f1a5 0b02 	sub.w	fp, r5, #2
 8012e30:	6123      	str	r3, [r4, #16]
 8012e32:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012e36:	4632      	mov	r2, r6
 8012e38:	4638      	mov	r0, r7
 8012e3a:	4798      	blx	r3
 8012e3c:	465d      	mov	r5, fp
 8012e3e:	6826      	ldr	r6, [r4, #0]
 8012e40:	f016 0610 	ands.w	r6, r6, #16
 8012e44:	d17a      	bne.n	8012f3c <_scanf_float+0x3bc>
 8012e46:	702e      	strb	r6, [r5, #0]
 8012e48:	6823      	ldr	r3, [r4, #0]
 8012e4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8012e4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012e52:	d142      	bne.n	8012eda <_scanf_float+0x35a>
 8012e54:	9b02      	ldr	r3, [sp, #8]
 8012e56:	eba9 0303 	sub.w	r3, r9, r3
 8012e5a:	425a      	negs	r2, r3
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d149      	bne.n	8012ef4 <_scanf_float+0x374>
 8012e60:	2200      	movs	r2, #0
 8012e62:	4641      	mov	r1, r8
 8012e64:	4638      	mov	r0, r7
 8012e66:	f000 ffdf 	bl	8013e28 <_strtod_r>
 8012e6a:	6825      	ldr	r5, [r4, #0]
 8012e6c:	f8da 3000 	ldr.w	r3, [sl]
 8012e70:	f015 0f02 	tst.w	r5, #2
 8012e74:	f103 0204 	add.w	r2, r3, #4
 8012e78:	ec59 8b10 	vmov	r8, r9, d0
 8012e7c:	f8ca 2000 	str.w	r2, [sl]
 8012e80:	d043      	beq.n	8012f0a <_scanf_float+0x38a>
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	e9c3 8900 	strd	r8, r9, [r3]
 8012e88:	68e3      	ldr	r3, [r4, #12]
 8012e8a:	3301      	adds	r3, #1
 8012e8c:	60e3      	str	r3, [r4, #12]
 8012e8e:	e6be      	b.n	8012c0e <_scanf_float+0x8e>
 8012e90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012e94:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012e98:	4632      	mov	r2, r6
 8012e9a:	4638      	mov	r0, r7
 8012e9c:	4798      	blx	r3
 8012e9e:	6923      	ldr	r3, [r4, #16]
 8012ea0:	3b01      	subs	r3, #1
 8012ea2:	6123      	str	r3, [r4, #16]
 8012ea4:	e7a6      	b.n	8012df4 <_scanf_float+0x274>
 8012ea6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012eaa:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012eae:	4632      	mov	r2, r6
 8012eb0:	4638      	mov	r0, r7
 8012eb2:	4798      	blx	r3
 8012eb4:	6923      	ldr	r3, [r4, #16]
 8012eb6:	3b01      	subs	r3, #1
 8012eb8:	6123      	str	r3, [r4, #16]
 8012eba:	4545      	cmp	r5, r8
 8012ebc:	d8f3      	bhi.n	8012ea6 <_scanf_float+0x326>
 8012ebe:	e6a5      	b.n	8012c0c <_scanf_float+0x8c>
 8012ec0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012ec4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012ec8:	4632      	mov	r2, r6
 8012eca:	4638      	mov	r0, r7
 8012ecc:	4798      	blx	r3
 8012ece:	6923      	ldr	r3, [r4, #16]
 8012ed0:	3b01      	subs	r3, #1
 8012ed2:	6123      	str	r3, [r4, #16]
 8012ed4:	4545      	cmp	r5, r8
 8012ed6:	d8f3      	bhi.n	8012ec0 <_scanf_float+0x340>
 8012ed8:	e698      	b.n	8012c0c <_scanf_float+0x8c>
 8012eda:	9b03      	ldr	r3, [sp, #12]
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d0bf      	beq.n	8012e60 <_scanf_float+0x2e0>
 8012ee0:	9904      	ldr	r1, [sp, #16]
 8012ee2:	230a      	movs	r3, #10
 8012ee4:	4632      	mov	r2, r6
 8012ee6:	3101      	adds	r1, #1
 8012ee8:	4638      	mov	r0, r7
 8012eea:	f001 f829 	bl	8013f40 <_strtol_r>
 8012eee:	9b03      	ldr	r3, [sp, #12]
 8012ef0:	9d04      	ldr	r5, [sp, #16]
 8012ef2:	1ac2      	subs	r2, r0, r3
 8012ef4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8012ef8:	429d      	cmp	r5, r3
 8012efa:	bf28      	it	cs
 8012efc:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8012f00:	490f      	ldr	r1, [pc, #60]	; (8012f40 <_scanf_float+0x3c0>)
 8012f02:	4628      	mov	r0, r5
 8012f04:	f000 f8e8 	bl	80130d8 <siprintf>
 8012f08:	e7aa      	b.n	8012e60 <_scanf_float+0x2e0>
 8012f0a:	f015 0504 	ands.w	r5, r5, #4
 8012f0e:	d1b8      	bne.n	8012e82 <_scanf_float+0x302>
 8012f10:	681f      	ldr	r7, [r3, #0]
 8012f12:	ee10 2a10 	vmov	r2, s0
 8012f16:	464b      	mov	r3, r9
 8012f18:	ee10 0a10 	vmov	r0, s0
 8012f1c:	4649      	mov	r1, r9
 8012f1e:	f7ed fe1d 	bl	8000b5c <__aeabi_dcmpun>
 8012f22:	b128      	cbz	r0, 8012f30 <_scanf_float+0x3b0>
 8012f24:	4628      	mov	r0, r5
 8012f26:	f000 f89d 	bl	8013064 <nanf>
 8012f2a:	ed87 0a00 	vstr	s0, [r7]
 8012f2e:	e7ab      	b.n	8012e88 <_scanf_float+0x308>
 8012f30:	4640      	mov	r0, r8
 8012f32:	4649      	mov	r1, r9
 8012f34:	f7ed fe70 	bl	8000c18 <__aeabi_d2f>
 8012f38:	6038      	str	r0, [r7, #0]
 8012f3a:	e7a5      	b.n	8012e88 <_scanf_float+0x308>
 8012f3c:	2600      	movs	r6, #0
 8012f3e:	e666      	b.n	8012c0e <_scanf_float+0x8e>
 8012f40:	08017976 	.word	0x08017976

08012f44 <iprintf>:
 8012f44:	b40f      	push	{r0, r1, r2, r3}
 8012f46:	4b0a      	ldr	r3, [pc, #40]	; (8012f70 <iprintf+0x2c>)
 8012f48:	b513      	push	{r0, r1, r4, lr}
 8012f4a:	681c      	ldr	r4, [r3, #0]
 8012f4c:	b124      	cbz	r4, 8012f58 <iprintf+0x14>
 8012f4e:	69a3      	ldr	r3, [r4, #24]
 8012f50:	b913      	cbnz	r3, 8012f58 <iprintf+0x14>
 8012f52:	4620      	mov	r0, r4
 8012f54:	f002 f83c 	bl	8014fd0 <__sinit>
 8012f58:	ab05      	add	r3, sp, #20
 8012f5a:	9a04      	ldr	r2, [sp, #16]
 8012f5c:	68a1      	ldr	r1, [r4, #8]
 8012f5e:	9301      	str	r3, [sp, #4]
 8012f60:	4620      	mov	r0, r4
 8012f62:	f003 fc7d 	bl	8016860 <_vfiprintf_r>
 8012f66:	b002      	add	sp, #8
 8012f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f6c:	b004      	add	sp, #16
 8012f6e:	4770      	bx	lr
 8012f70:	2000000c 	.word	0x2000000c

08012f74 <putchar>:
 8012f74:	b538      	push	{r3, r4, r5, lr}
 8012f76:	4b08      	ldr	r3, [pc, #32]	; (8012f98 <putchar+0x24>)
 8012f78:	681c      	ldr	r4, [r3, #0]
 8012f7a:	4605      	mov	r5, r0
 8012f7c:	b124      	cbz	r4, 8012f88 <putchar+0x14>
 8012f7e:	69a3      	ldr	r3, [r4, #24]
 8012f80:	b913      	cbnz	r3, 8012f88 <putchar+0x14>
 8012f82:	4620      	mov	r0, r4
 8012f84:	f002 f824 	bl	8014fd0 <__sinit>
 8012f88:	68a2      	ldr	r2, [r4, #8]
 8012f8a:	4629      	mov	r1, r5
 8012f8c:	4620      	mov	r0, r4
 8012f8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012f92:	f003 bed3 	b.w	8016d3c <_putc_r>
 8012f96:	bf00      	nop
 8012f98:	2000000c 	.word	0x2000000c

08012f9c <_puts_r>:
 8012f9c:	b570      	push	{r4, r5, r6, lr}
 8012f9e:	460e      	mov	r6, r1
 8012fa0:	4605      	mov	r5, r0
 8012fa2:	b118      	cbz	r0, 8012fac <_puts_r+0x10>
 8012fa4:	6983      	ldr	r3, [r0, #24]
 8012fa6:	b90b      	cbnz	r3, 8012fac <_puts_r+0x10>
 8012fa8:	f002 f812 	bl	8014fd0 <__sinit>
 8012fac:	69ab      	ldr	r3, [r5, #24]
 8012fae:	68ac      	ldr	r4, [r5, #8]
 8012fb0:	b913      	cbnz	r3, 8012fb8 <_puts_r+0x1c>
 8012fb2:	4628      	mov	r0, r5
 8012fb4:	f002 f80c 	bl	8014fd0 <__sinit>
 8012fb8:	4b23      	ldr	r3, [pc, #140]	; (8013048 <_puts_r+0xac>)
 8012fba:	429c      	cmp	r4, r3
 8012fbc:	d117      	bne.n	8012fee <_puts_r+0x52>
 8012fbe:	686c      	ldr	r4, [r5, #4]
 8012fc0:	89a3      	ldrh	r3, [r4, #12]
 8012fc2:	071b      	lsls	r3, r3, #28
 8012fc4:	d51d      	bpl.n	8013002 <_puts_r+0x66>
 8012fc6:	6923      	ldr	r3, [r4, #16]
 8012fc8:	b1db      	cbz	r3, 8013002 <_puts_r+0x66>
 8012fca:	3e01      	subs	r6, #1
 8012fcc:	68a3      	ldr	r3, [r4, #8]
 8012fce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012fd2:	3b01      	subs	r3, #1
 8012fd4:	60a3      	str	r3, [r4, #8]
 8012fd6:	b9e9      	cbnz	r1, 8013014 <_puts_r+0x78>
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	da2e      	bge.n	801303a <_puts_r+0x9e>
 8012fdc:	4622      	mov	r2, r4
 8012fde:	210a      	movs	r1, #10
 8012fe0:	4628      	mov	r0, r5
 8012fe2:	f000 ffdf 	bl	8013fa4 <__swbuf_r>
 8012fe6:	3001      	adds	r0, #1
 8012fe8:	d011      	beq.n	801300e <_puts_r+0x72>
 8012fea:	200a      	movs	r0, #10
 8012fec:	e011      	b.n	8013012 <_puts_r+0x76>
 8012fee:	4b17      	ldr	r3, [pc, #92]	; (801304c <_puts_r+0xb0>)
 8012ff0:	429c      	cmp	r4, r3
 8012ff2:	d101      	bne.n	8012ff8 <_puts_r+0x5c>
 8012ff4:	68ac      	ldr	r4, [r5, #8]
 8012ff6:	e7e3      	b.n	8012fc0 <_puts_r+0x24>
 8012ff8:	4b15      	ldr	r3, [pc, #84]	; (8013050 <_puts_r+0xb4>)
 8012ffa:	429c      	cmp	r4, r3
 8012ffc:	bf08      	it	eq
 8012ffe:	68ec      	ldreq	r4, [r5, #12]
 8013000:	e7de      	b.n	8012fc0 <_puts_r+0x24>
 8013002:	4621      	mov	r1, r4
 8013004:	4628      	mov	r0, r5
 8013006:	f001 f831 	bl	801406c <__swsetup_r>
 801300a:	2800      	cmp	r0, #0
 801300c:	d0dd      	beq.n	8012fca <_puts_r+0x2e>
 801300e:	f04f 30ff 	mov.w	r0, #4294967295
 8013012:	bd70      	pop	{r4, r5, r6, pc}
 8013014:	2b00      	cmp	r3, #0
 8013016:	da04      	bge.n	8013022 <_puts_r+0x86>
 8013018:	69a2      	ldr	r2, [r4, #24]
 801301a:	429a      	cmp	r2, r3
 801301c:	dc06      	bgt.n	801302c <_puts_r+0x90>
 801301e:	290a      	cmp	r1, #10
 8013020:	d004      	beq.n	801302c <_puts_r+0x90>
 8013022:	6823      	ldr	r3, [r4, #0]
 8013024:	1c5a      	adds	r2, r3, #1
 8013026:	6022      	str	r2, [r4, #0]
 8013028:	7019      	strb	r1, [r3, #0]
 801302a:	e7cf      	b.n	8012fcc <_puts_r+0x30>
 801302c:	4622      	mov	r2, r4
 801302e:	4628      	mov	r0, r5
 8013030:	f000 ffb8 	bl	8013fa4 <__swbuf_r>
 8013034:	3001      	adds	r0, #1
 8013036:	d1c9      	bne.n	8012fcc <_puts_r+0x30>
 8013038:	e7e9      	b.n	801300e <_puts_r+0x72>
 801303a:	6823      	ldr	r3, [r4, #0]
 801303c:	200a      	movs	r0, #10
 801303e:	1c5a      	adds	r2, r3, #1
 8013040:	6022      	str	r2, [r4, #0]
 8013042:	7018      	strb	r0, [r3, #0]
 8013044:	e7e5      	b.n	8013012 <_puts_r+0x76>
 8013046:	bf00      	nop
 8013048:	08017a00 	.word	0x08017a00
 801304c:	08017a20 	.word	0x08017a20
 8013050:	080179e0 	.word	0x080179e0

08013054 <puts>:
 8013054:	4b02      	ldr	r3, [pc, #8]	; (8013060 <puts+0xc>)
 8013056:	4601      	mov	r1, r0
 8013058:	6818      	ldr	r0, [r3, #0]
 801305a:	f7ff bf9f 	b.w	8012f9c <_puts_r>
 801305e:	bf00      	nop
 8013060:	2000000c 	.word	0x2000000c

08013064 <nanf>:
 8013064:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801306c <nanf+0x8>
 8013068:	4770      	bx	lr
 801306a:	bf00      	nop
 801306c:	7fc00000 	.word	0x7fc00000

08013070 <sniprintf>:
 8013070:	b40c      	push	{r2, r3}
 8013072:	b530      	push	{r4, r5, lr}
 8013074:	4b17      	ldr	r3, [pc, #92]	; (80130d4 <sniprintf+0x64>)
 8013076:	1e0c      	subs	r4, r1, #0
 8013078:	b09d      	sub	sp, #116	; 0x74
 801307a:	681d      	ldr	r5, [r3, #0]
 801307c:	da08      	bge.n	8013090 <sniprintf+0x20>
 801307e:	238b      	movs	r3, #139	; 0x8b
 8013080:	602b      	str	r3, [r5, #0]
 8013082:	f04f 30ff 	mov.w	r0, #4294967295
 8013086:	b01d      	add	sp, #116	; 0x74
 8013088:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801308c:	b002      	add	sp, #8
 801308e:	4770      	bx	lr
 8013090:	f44f 7302 	mov.w	r3, #520	; 0x208
 8013094:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013098:	bf14      	ite	ne
 801309a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801309e:	4623      	moveq	r3, r4
 80130a0:	9304      	str	r3, [sp, #16]
 80130a2:	9307      	str	r3, [sp, #28]
 80130a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80130a8:	9002      	str	r0, [sp, #8]
 80130aa:	9006      	str	r0, [sp, #24]
 80130ac:	f8ad 3016 	strh.w	r3, [sp, #22]
 80130b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80130b2:	ab21      	add	r3, sp, #132	; 0x84
 80130b4:	a902      	add	r1, sp, #8
 80130b6:	4628      	mov	r0, r5
 80130b8:	9301      	str	r3, [sp, #4]
 80130ba:	f003 f905 	bl	80162c8 <_svfiprintf_r>
 80130be:	1c43      	adds	r3, r0, #1
 80130c0:	bfbc      	itt	lt
 80130c2:	238b      	movlt	r3, #139	; 0x8b
 80130c4:	602b      	strlt	r3, [r5, #0]
 80130c6:	2c00      	cmp	r4, #0
 80130c8:	d0dd      	beq.n	8013086 <sniprintf+0x16>
 80130ca:	9b02      	ldr	r3, [sp, #8]
 80130cc:	2200      	movs	r2, #0
 80130ce:	701a      	strb	r2, [r3, #0]
 80130d0:	e7d9      	b.n	8013086 <sniprintf+0x16>
 80130d2:	bf00      	nop
 80130d4:	2000000c 	.word	0x2000000c

080130d8 <siprintf>:
 80130d8:	b40e      	push	{r1, r2, r3}
 80130da:	b500      	push	{lr}
 80130dc:	b09c      	sub	sp, #112	; 0x70
 80130de:	ab1d      	add	r3, sp, #116	; 0x74
 80130e0:	9002      	str	r0, [sp, #8]
 80130e2:	9006      	str	r0, [sp, #24]
 80130e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80130e8:	4809      	ldr	r0, [pc, #36]	; (8013110 <siprintf+0x38>)
 80130ea:	9107      	str	r1, [sp, #28]
 80130ec:	9104      	str	r1, [sp, #16]
 80130ee:	4909      	ldr	r1, [pc, #36]	; (8013114 <siprintf+0x3c>)
 80130f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80130f4:	9105      	str	r1, [sp, #20]
 80130f6:	6800      	ldr	r0, [r0, #0]
 80130f8:	9301      	str	r3, [sp, #4]
 80130fa:	a902      	add	r1, sp, #8
 80130fc:	f003 f8e4 	bl	80162c8 <_svfiprintf_r>
 8013100:	9b02      	ldr	r3, [sp, #8]
 8013102:	2200      	movs	r2, #0
 8013104:	701a      	strb	r2, [r3, #0]
 8013106:	b01c      	add	sp, #112	; 0x70
 8013108:	f85d eb04 	ldr.w	lr, [sp], #4
 801310c:	b003      	add	sp, #12
 801310e:	4770      	bx	lr
 8013110:	2000000c 	.word	0x2000000c
 8013114:	ffff0208 	.word	0xffff0208

08013118 <siscanf>:
 8013118:	b40e      	push	{r1, r2, r3}
 801311a:	b530      	push	{r4, r5, lr}
 801311c:	b09c      	sub	sp, #112	; 0x70
 801311e:	ac1f      	add	r4, sp, #124	; 0x7c
 8013120:	f44f 7201 	mov.w	r2, #516	; 0x204
 8013124:	f854 5b04 	ldr.w	r5, [r4], #4
 8013128:	f8ad 2014 	strh.w	r2, [sp, #20]
 801312c:	9002      	str	r0, [sp, #8]
 801312e:	9006      	str	r0, [sp, #24]
 8013130:	f7ed f866 	bl	8000200 <strlen>
 8013134:	4b0b      	ldr	r3, [pc, #44]	; (8013164 <siscanf+0x4c>)
 8013136:	9003      	str	r0, [sp, #12]
 8013138:	9007      	str	r0, [sp, #28]
 801313a:	930b      	str	r3, [sp, #44]	; 0x2c
 801313c:	480a      	ldr	r0, [pc, #40]	; (8013168 <siscanf+0x50>)
 801313e:	9401      	str	r4, [sp, #4]
 8013140:	2300      	movs	r3, #0
 8013142:	930f      	str	r3, [sp, #60]	; 0x3c
 8013144:	9314      	str	r3, [sp, #80]	; 0x50
 8013146:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801314a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801314e:	462a      	mov	r2, r5
 8013150:	4623      	mov	r3, r4
 8013152:	a902      	add	r1, sp, #8
 8013154:	6800      	ldr	r0, [r0, #0]
 8013156:	f003 fa09 	bl	801656c <__ssvfiscanf_r>
 801315a:	b01c      	add	sp, #112	; 0x70
 801315c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013160:	b003      	add	sp, #12
 8013162:	4770      	bx	lr
 8013164:	0801318f 	.word	0x0801318f
 8013168:	2000000c 	.word	0x2000000c

0801316c <__sread>:
 801316c:	b510      	push	{r4, lr}
 801316e:	460c      	mov	r4, r1
 8013170:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013174:	f003 fe18 	bl	8016da8 <_read_r>
 8013178:	2800      	cmp	r0, #0
 801317a:	bfab      	itete	ge
 801317c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801317e:	89a3      	ldrhlt	r3, [r4, #12]
 8013180:	181b      	addge	r3, r3, r0
 8013182:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013186:	bfac      	ite	ge
 8013188:	6563      	strge	r3, [r4, #84]	; 0x54
 801318a:	81a3      	strhlt	r3, [r4, #12]
 801318c:	bd10      	pop	{r4, pc}

0801318e <__seofread>:
 801318e:	2000      	movs	r0, #0
 8013190:	4770      	bx	lr

08013192 <__swrite>:
 8013192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013196:	461f      	mov	r7, r3
 8013198:	898b      	ldrh	r3, [r1, #12]
 801319a:	05db      	lsls	r3, r3, #23
 801319c:	4605      	mov	r5, r0
 801319e:	460c      	mov	r4, r1
 80131a0:	4616      	mov	r6, r2
 80131a2:	d505      	bpl.n	80131b0 <__swrite+0x1e>
 80131a4:	2302      	movs	r3, #2
 80131a6:	2200      	movs	r2, #0
 80131a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80131ac:	f002 fae2 	bl	8015774 <_lseek_r>
 80131b0:	89a3      	ldrh	r3, [r4, #12]
 80131b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80131b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80131ba:	81a3      	strh	r3, [r4, #12]
 80131bc:	4632      	mov	r2, r6
 80131be:	463b      	mov	r3, r7
 80131c0:	4628      	mov	r0, r5
 80131c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80131c6:	f000 bf3f 	b.w	8014048 <_write_r>

080131ca <__sseek>:
 80131ca:	b510      	push	{r4, lr}
 80131cc:	460c      	mov	r4, r1
 80131ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80131d2:	f002 facf 	bl	8015774 <_lseek_r>
 80131d6:	1c43      	adds	r3, r0, #1
 80131d8:	89a3      	ldrh	r3, [r4, #12]
 80131da:	bf15      	itete	ne
 80131dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80131de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80131e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80131e6:	81a3      	strheq	r3, [r4, #12]
 80131e8:	bf18      	it	ne
 80131ea:	81a3      	strhne	r3, [r4, #12]
 80131ec:	bd10      	pop	{r4, pc}

080131ee <__sclose>:
 80131ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80131f2:	f000 bfa9 	b.w	8014148 <_close_r>

080131f6 <strcpy>:
 80131f6:	4603      	mov	r3, r0
 80131f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80131fc:	f803 2b01 	strb.w	r2, [r3], #1
 8013200:	2a00      	cmp	r2, #0
 8013202:	d1f9      	bne.n	80131f8 <strcpy+0x2>
 8013204:	4770      	bx	lr

08013206 <sulp>:
 8013206:	b570      	push	{r4, r5, r6, lr}
 8013208:	4604      	mov	r4, r0
 801320a:	460d      	mov	r5, r1
 801320c:	ec45 4b10 	vmov	d0, r4, r5
 8013210:	4616      	mov	r6, r2
 8013212:	f002 fe15 	bl	8015e40 <__ulp>
 8013216:	ec51 0b10 	vmov	r0, r1, d0
 801321a:	b17e      	cbz	r6, 801323c <sulp+0x36>
 801321c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013220:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013224:	2b00      	cmp	r3, #0
 8013226:	dd09      	ble.n	801323c <sulp+0x36>
 8013228:	051b      	lsls	r3, r3, #20
 801322a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801322e:	2400      	movs	r4, #0
 8013230:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8013234:	4622      	mov	r2, r4
 8013236:	462b      	mov	r3, r5
 8013238:	f7ed f9f6 	bl	8000628 <__aeabi_dmul>
 801323c:	bd70      	pop	{r4, r5, r6, pc}
	...

08013240 <_strtod_l>:
 8013240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013244:	461f      	mov	r7, r3
 8013246:	b0a1      	sub	sp, #132	; 0x84
 8013248:	2300      	movs	r3, #0
 801324a:	4681      	mov	r9, r0
 801324c:	4638      	mov	r0, r7
 801324e:	460e      	mov	r6, r1
 8013250:	9217      	str	r2, [sp, #92]	; 0x5c
 8013252:	931c      	str	r3, [sp, #112]	; 0x70
 8013254:	f002 fa7e 	bl	8015754 <__localeconv_l>
 8013258:	4680      	mov	r8, r0
 801325a:	6800      	ldr	r0, [r0, #0]
 801325c:	f7ec ffd0 	bl	8000200 <strlen>
 8013260:	f04f 0a00 	mov.w	sl, #0
 8013264:	4604      	mov	r4, r0
 8013266:	f04f 0b00 	mov.w	fp, #0
 801326a:	961b      	str	r6, [sp, #108]	; 0x6c
 801326c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801326e:	781a      	ldrb	r2, [r3, #0]
 8013270:	2a0d      	cmp	r2, #13
 8013272:	d832      	bhi.n	80132da <_strtod_l+0x9a>
 8013274:	2a09      	cmp	r2, #9
 8013276:	d236      	bcs.n	80132e6 <_strtod_l+0xa6>
 8013278:	2a00      	cmp	r2, #0
 801327a:	d03e      	beq.n	80132fa <_strtod_l+0xba>
 801327c:	2300      	movs	r3, #0
 801327e:	930d      	str	r3, [sp, #52]	; 0x34
 8013280:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8013282:	782b      	ldrb	r3, [r5, #0]
 8013284:	2b30      	cmp	r3, #48	; 0x30
 8013286:	f040 80ac 	bne.w	80133e2 <_strtod_l+0x1a2>
 801328a:	786b      	ldrb	r3, [r5, #1]
 801328c:	2b58      	cmp	r3, #88	; 0x58
 801328e:	d001      	beq.n	8013294 <_strtod_l+0x54>
 8013290:	2b78      	cmp	r3, #120	; 0x78
 8013292:	d167      	bne.n	8013364 <_strtod_l+0x124>
 8013294:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013296:	9301      	str	r3, [sp, #4]
 8013298:	ab1c      	add	r3, sp, #112	; 0x70
 801329a:	9300      	str	r3, [sp, #0]
 801329c:	9702      	str	r7, [sp, #8]
 801329e:	ab1d      	add	r3, sp, #116	; 0x74
 80132a0:	4a88      	ldr	r2, [pc, #544]	; (80134c4 <_strtod_l+0x284>)
 80132a2:	a91b      	add	r1, sp, #108	; 0x6c
 80132a4:	4648      	mov	r0, r9
 80132a6:	f001 ff6c 	bl	8015182 <__gethex>
 80132aa:	f010 0407 	ands.w	r4, r0, #7
 80132ae:	4606      	mov	r6, r0
 80132b0:	d005      	beq.n	80132be <_strtod_l+0x7e>
 80132b2:	2c06      	cmp	r4, #6
 80132b4:	d12b      	bne.n	801330e <_strtod_l+0xce>
 80132b6:	3501      	adds	r5, #1
 80132b8:	2300      	movs	r3, #0
 80132ba:	951b      	str	r5, [sp, #108]	; 0x6c
 80132bc:	930d      	str	r3, [sp, #52]	; 0x34
 80132be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	f040 859a 	bne.w	8013dfa <_strtod_l+0xbba>
 80132c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80132c8:	b1e3      	cbz	r3, 8013304 <_strtod_l+0xc4>
 80132ca:	4652      	mov	r2, sl
 80132cc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80132d0:	ec43 2b10 	vmov	d0, r2, r3
 80132d4:	b021      	add	sp, #132	; 0x84
 80132d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132da:	2a2b      	cmp	r2, #43	; 0x2b
 80132dc:	d015      	beq.n	801330a <_strtod_l+0xca>
 80132de:	2a2d      	cmp	r2, #45	; 0x2d
 80132e0:	d004      	beq.n	80132ec <_strtod_l+0xac>
 80132e2:	2a20      	cmp	r2, #32
 80132e4:	d1ca      	bne.n	801327c <_strtod_l+0x3c>
 80132e6:	3301      	adds	r3, #1
 80132e8:	931b      	str	r3, [sp, #108]	; 0x6c
 80132ea:	e7bf      	b.n	801326c <_strtod_l+0x2c>
 80132ec:	2201      	movs	r2, #1
 80132ee:	920d      	str	r2, [sp, #52]	; 0x34
 80132f0:	1c5a      	adds	r2, r3, #1
 80132f2:	921b      	str	r2, [sp, #108]	; 0x6c
 80132f4:	785b      	ldrb	r3, [r3, #1]
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d1c2      	bne.n	8013280 <_strtod_l+0x40>
 80132fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80132fc:	961b      	str	r6, [sp, #108]	; 0x6c
 80132fe:	2b00      	cmp	r3, #0
 8013300:	f040 8579 	bne.w	8013df6 <_strtod_l+0xbb6>
 8013304:	4652      	mov	r2, sl
 8013306:	465b      	mov	r3, fp
 8013308:	e7e2      	b.n	80132d0 <_strtod_l+0x90>
 801330a:	2200      	movs	r2, #0
 801330c:	e7ef      	b.n	80132ee <_strtod_l+0xae>
 801330e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013310:	b13a      	cbz	r2, 8013322 <_strtod_l+0xe2>
 8013312:	2135      	movs	r1, #53	; 0x35
 8013314:	a81e      	add	r0, sp, #120	; 0x78
 8013316:	f002 fe8b 	bl	8016030 <__copybits>
 801331a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801331c:	4648      	mov	r0, r9
 801331e:	f002 faf8 	bl	8015912 <_Bfree>
 8013322:	3c01      	subs	r4, #1
 8013324:	2c04      	cmp	r4, #4
 8013326:	d806      	bhi.n	8013336 <_strtod_l+0xf6>
 8013328:	e8df f004 	tbb	[pc, r4]
 801332c:	1714030a 	.word	0x1714030a
 8013330:	0a          	.byte	0x0a
 8013331:	00          	.byte	0x00
 8013332:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8013336:	0730      	lsls	r0, r6, #28
 8013338:	d5c1      	bpl.n	80132be <_strtod_l+0x7e>
 801333a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801333e:	e7be      	b.n	80132be <_strtod_l+0x7e>
 8013340:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8013344:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8013346:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801334a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801334e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8013352:	e7f0      	b.n	8013336 <_strtod_l+0xf6>
 8013354:	f8df b170 	ldr.w	fp, [pc, #368]	; 80134c8 <_strtod_l+0x288>
 8013358:	e7ed      	b.n	8013336 <_strtod_l+0xf6>
 801335a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801335e:	f04f 3aff 	mov.w	sl, #4294967295
 8013362:	e7e8      	b.n	8013336 <_strtod_l+0xf6>
 8013364:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013366:	1c5a      	adds	r2, r3, #1
 8013368:	921b      	str	r2, [sp, #108]	; 0x6c
 801336a:	785b      	ldrb	r3, [r3, #1]
 801336c:	2b30      	cmp	r3, #48	; 0x30
 801336e:	d0f9      	beq.n	8013364 <_strtod_l+0x124>
 8013370:	2b00      	cmp	r3, #0
 8013372:	d0a4      	beq.n	80132be <_strtod_l+0x7e>
 8013374:	2301      	movs	r3, #1
 8013376:	2500      	movs	r5, #0
 8013378:	9306      	str	r3, [sp, #24]
 801337a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801337c:	9308      	str	r3, [sp, #32]
 801337e:	9507      	str	r5, [sp, #28]
 8013380:	9505      	str	r5, [sp, #20]
 8013382:	220a      	movs	r2, #10
 8013384:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8013386:	7807      	ldrb	r7, [r0, #0]
 8013388:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 801338c:	b2d9      	uxtb	r1, r3
 801338e:	2909      	cmp	r1, #9
 8013390:	d929      	bls.n	80133e6 <_strtod_l+0x1a6>
 8013392:	4622      	mov	r2, r4
 8013394:	f8d8 1000 	ldr.w	r1, [r8]
 8013398:	f003 fd5a 	bl	8016e50 <strncmp>
 801339c:	2800      	cmp	r0, #0
 801339e:	d031      	beq.n	8013404 <_strtod_l+0x1c4>
 80133a0:	2000      	movs	r0, #0
 80133a2:	9c05      	ldr	r4, [sp, #20]
 80133a4:	9004      	str	r0, [sp, #16]
 80133a6:	463b      	mov	r3, r7
 80133a8:	4602      	mov	r2, r0
 80133aa:	2b65      	cmp	r3, #101	; 0x65
 80133ac:	d001      	beq.n	80133b2 <_strtod_l+0x172>
 80133ae:	2b45      	cmp	r3, #69	; 0x45
 80133b0:	d114      	bne.n	80133dc <_strtod_l+0x19c>
 80133b2:	b924      	cbnz	r4, 80133be <_strtod_l+0x17e>
 80133b4:	b910      	cbnz	r0, 80133bc <_strtod_l+0x17c>
 80133b6:	9b06      	ldr	r3, [sp, #24]
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d09e      	beq.n	80132fa <_strtod_l+0xba>
 80133bc:	2400      	movs	r4, #0
 80133be:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80133c0:	1c73      	adds	r3, r6, #1
 80133c2:	931b      	str	r3, [sp, #108]	; 0x6c
 80133c4:	7873      	ldrb	r3, [r6, #1]
 80133c6:	2b2b      	cmp	r3, #43	; 0x2b
 80133c8:	d078      	beq.n	80134bc <_strtod_l+0x27c>
 80133ca:	2b2d      	cmp	r3, #45	; 0x2d
 80133cc:	d070      	beq.n	80134b0 <_strtod_l+0x270>
 80133ce:	f04f 0c00 	mov.w	ip, #0
 80133d2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80133d6:	2f09      	cmp	r7, #9
 80133d8:	d97c      	bls.n	80134d4 <_strtod_l+0x294>
 80133da:	961b      	str	r6, [sp, #108]	; 0x6c
 80133dc:	f04f 0e00 	mov.w	lr, #0
 80133e0:	e09a      	b.n	8013518 <_strtod_l+0x2d8>
 80133e2:	2300      	movs	r3, #0
 80133e4:	e7c7      	b.n	8013376 <_strtod_l+0x136>
 80133e6:	9905      	ldr	r1, [sp, #20]
 80133e8:	2908      	cmp	r1, #8
 80133ea:	bfdd      	ittte	le
 80133ec:	9907      	ldrle	r1, [sp, #28]
 80133ee:	fb02 3301 	mlale	r3, r2, r1, r3
 80133f2:	9307      	strle	r3, [sp, #28]
 80133f4:	fb02 3505 	mlagt	r5, r2, r5, r3
 80133f8:	9b05      	ldr	r3, [sp, #20]
 80133fa:	3001      	adds	r0, #1
 80133fc:	3301      	adds	r3, #1
 80133fe:	9305      	str	r3, [sp, #20]
 8013400:	901b      	str	r0, [sp, #108]	; 0x6c
 8013402:	e7bf      	b.n	8013384 <_strtod_l+0x144>
 8013404:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013406:	191a      	adds	r2, r3, r4
 8013408:	921b      	str	r2, [sp, #108]	; 0x6c
 801340a:	9a05      	ldr	r2, [sp, #20]
 801340c:	5d1b      	ldrb	r3, [r3, r4]
 801340e:	2a00      	cmp	r2, #0
 8013410:	d037      	beq.n	8013482 <_strtod_l+0x242>
 8013412:	9c05      	ldr	r4, [sp, #20]
 8013414:	4602      	mov	r2, r0
 8013416:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801341a:	2909      	cmp	r1, #9
 801341c:	d913      	bls.n	8013446 <_strtod_l+0x206>
 801341e:	2101      	movs	r1, #1
 8013420:	9104      	str	r1, [sp, #16]
 8013422:	e7c2      	b.n	80133aa <_strtod_l+0x16a>
 8013424:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013426:	1c5a      	adds	r2, r3, #1
 8013428:	921b      	str	r2, [sp, #108]	; 0x6c
 801342a:	785b      	ldrb	r3, [r3, #1]
 801342c:	3001      	adds	r0, #1
 801342e:	2b30      	cmp	r3, #48	; 0x30
 8013430:	d0f8      	beq.n	8013424 <_strtod_l+0x1e4>
 8013432:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8013436:	2a08      	cmp	r2, #8
 8013438:	f200 84e4 	bhi.w	8013e04 <_strtod_l+0xbc4>
 801343c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801343e:	9208      	str	r2, [sp, #32]
 8013440:	4602      	mov	r2, r0
 8013442:	2000      	movs	r0, #0
 8013444:	4604      	mov	r4, r0
 8013446:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 801344a:	f100 0101 	add.w	r1, r0, #1
 801344e:	d012      	beq.n	8013476 <_strtod_l+0x236>
 8013450:	440a      	add	r2, r1
 8013452:	eb00 0c04 	add.w	ip, r0, r4
 8013456:	4621      	mov	r1, r4
 8013458:	270a      	movs	r7, #10
 801345a:	458c      	cmp	ip, r1
 801345c:	d113      	bne.n	8013486 <_strtod_l+0x246>
 801345e:	1821      	adds	r1, r4, r0
 8013460:	2908      	cmp	r1, #8
 8013462:	f104 0401 	add.w	r4, r4, #1
 8013466:	4404      	add	r4, r0
 8013468:	dc19      	bgt.n	801349e <_strtod_l+0x25e>
 801346a:	9b07      	ldr	r3, [sp, #28]
 801346c:	210a      	movs	r1, #10
 801346e:	fb01 e303 	mla	r3, r1, r3, lr
 8013472:	9307      	str	r3, [sp, #28]
 8013474:	2100      	movs	r1, #0
 8013476:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013478:	1c58      	adds	r0, r3, #1
 801347a:	901b      	str	r0, [sp, #108]	; 0x6c
 801347c:	785b      	ldrb	r3, [r3, #1]
 801347e:	4608      	mov	r0, r1
 8013480:	e7c9      	b.n	8013416 <_strtod_l+0x1d6>
 8013482:	9805      	ldr	r0, [sp, #20]
 8013484:	e7d3      	b.n	801342e <_strtod_l+0x1ee>
 8013486:	2908      	cmp	r1, #8
 8013488:	f101 0101 	add.w	r1, r1, #1
 801348c:	dc03      	bgt.n	8013496 <_strtod_l+0x256>
 801348e:	9b07      	ldr	r3, [sp, #28]
 8013490:	437b      	muls	r3, r7
 8013492:	9307      	str	r3, [sp, #28]
 8013494:	e7e1      	b.n	801345a <_strtod_l+0x21a>
 8013496:	2910      	cmp	r1, #16
 8013498:	bfd8      	it	le
 801349a:	437d      	mulle	r5, r7
 801349c:	e7dd      	b.n	801345a <_strtod_l+0x21a>
 801349e:	2c10      	cmp	r4, #16
 80134a0:	bfdc      	itt	le
 80134a2:	210a      	movle	r1, #10
 80134a4:	fb01 e505 	mlale	r5, r1, r5, lr
 80134a8:	e7e4      	b.n	8013474 <_strtod_l+0x234>
 80134aa:	2301      	movs	r3, #1
 80134ac:	9304      	str	r3, [sp, #16]
 80134ae:	e781      	b.n	80133b4 <_strtod_l+0x174>
 80134b0:	f04f 0c01 	mov.w	ip, #1
 80134b4:	1cb3      	adds	r3, r6, #2
 80134b6:	931b      	str	r3, [sp, #108]	; 0x6c
 80134b8:	78b3      	ldrb	r3, [r6, #2]
 80134ba:	e78a      	b.n	80133d2 <_strtod_l+0x192>
 80134bc:	f04f 0c00 	mov.w	ip, #0
 80134c0:	e7f8      	b.n	80134b4 <_strtod_l+0x274>
 80134c2:	bf00      	nop
 80134c4:	0801797c 	.word	0x0801797c
 80134c8:	7ff00000 	.word	0x7ff00000
 80134cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80134ce:	1c5f      	adds	r7, r3, #1
 80134d0:	971b      	str	r7, [sp, #108]	; 0x6c
 80134d2:	785b      	ldrb	r3, [r3, #1]
 80134d4:	2b30      	cmp	r3, #48	; 0x30
 80134d6:	d0f9      	beq.n	80134cc <_strtod_l+0x28c>
 80134d8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80134dc:	2f08      	cmp	r7, #8
 80134de:	f63f af7d 	bhi.w	80133dc <_strtod_l+0x19c>
 80134e2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80134e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80134e8:	930a      	str	r3, [sp, #40]	; 0x28
 80134ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80134ec:	1c5f      	adds	r7, r3, #1
 80134ee:	971b      	str	r7, [sp, #108]	; 0x6c
 80134f0:	785b      	ldrb	r3, [r3, #1]
 80134f2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80134f6:	f1b8 0f09 	cmp.w	r8, #9
 80134fa:	d937      	bls.n	801356c <_strtod_l+0x32c>
 80134fc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80134fe:	1a7f      	subs	r7, r7, r1
 8013500:	2f08      	cmp	r7, #8
 8013502:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8013506:	dc37      	bgt.n	8013578 <_strtod_l+0x338>
 8013508:	45be      	cmp	lr, r7
 801350a:	bfa8      	it	ge
 801350c:	46be      	movge	lr, r7
 801350e:	f1bc 0f00 	cmp.w	ip, #0
 8013512:	d001      	beq.n	8013518 <_strtod_l+0x2d8>
 8013514:	f1ce 0e00 	rsb	lr, lr, #0
 8013518:	2c00      	cmp	r4, #0
 801351a:	d151      	bne.n	80135c0 <_strtod_l+0x380>
 801351c:	2800      	cmp	r0, #0
 801351e:	f47f aece 	bne.w	80132be <_strtod_l+0x7e>
 8013522:	9a06      	ldr	r2, [sp, #24]
 8013524:	2a00      	cmp	r2, #0
 8013526:	f47f aeca 	bne.w	80132be <_strtod_l+0x7e>
 801352a:	9a04      	ldr	r2, [sp, #16]
 801352c:	2a00      	cmp	r2, #0
 801352e:	f47f aee4 	bne.w	80132fa <_strtod_l+0xba>
 8013532:	2b4e      	cmp	r3, #78	; 0x4e
 8013534:	d027      	beq.n	8013586 <_strtod_l+0x346>
 8013536:	dc21      	bgt.n	801357c <_strtod_l+0x33c>
 8013538:	2b49      	cmp	r3, #73	; 0x49
 801353a:	f47f aede 	bne.w	80132fa <_strtod_l+0xba>
 801353e:	49a0      	ldr	r1, [pc, #640]	; (80137c0 <_strtod_l+0x580>)
 8013540:	a81b      	add	r0, sp, #108	; 0x6c
 8013542:	f002 f851 	bl	80155e8 <__match>
 8013546:	2800      	cmp	r0, #0
 8013548:	f43f aed7 	beq.w	80132fa <_strtod_l+0xba>
 801354c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801354e:	499d      	ldr	r1, [pc, #628]	; (80137c4 <_strtod_l+0x584>)
 8013550:	3b01      	subs	r3, #1
 8013552:	a81b      	add	r0, sp, #108	; 0x6c
 8013554:	931b      	str	r3, [sp, #108]	; 0x6c
 8013556:	f002 f847 	bl	80155e8 <__match>
 801355a:	b910      	cbnz	r0, 8013562 <_strtod_l+0x322>
 801355c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801355e:	3301      	adds	r3, #1
 8013560:	931b      	str	r3, [sp, #108]	; 0x6c
 8013562:	f8df b274 	ldr.w	fp, [pc, #628]	; 80137d8 <_strtod_l+0x598>
 8013566:	f04f 0a00 	mov.w	sl, #0
 801356a:	e6a8      	b.n	80132be <_strtod_l+0x7e>
 801356c:	210a      	movs	r1, #10
 801356e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8013572:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8013576:	e7b8      	b.n	80134ea <_strtod_l+0x2aa>
 8013578:	46be      	mov	lr, r7
 801357a:	e7c8      	b.n	801350e <_strtod_l+0x2ce>
 801357c:	2b69      	cmp	r3, #105	; 0x69
 801357e:	d0de      	beq.n	801353e <_strtod_l+0x2fe>
 8013580:	2b6e      	cmp	r3, #110	; 0x6e
 8013582:	f47f aeba 	bne.w	80132fa <_strtod_l+0xba>
 8013586:	4990      	ldr	r1, [pc, #576]	; (80137c8 <_strtod_l+0x588>)
 8013588:	a81b      	add	r0, sp, #108	; 0x6c
 801358a:	f002 f82d 	bl	80155e8 <__match>
 801358e:	2800      	cmp	r0, #0
 8013590:	f43f aeb3 	beq.w	80132fa <_strtod_l+0xba>
 8013594:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013596:	781b      	ldrb	r3, [r3, #0]
 8013598:	2b28      	cmp	r3, #40	; 0x28
 801359a:	d10e      	bne.n	80135ba <_strtod_l+0x37a>
 801359c:	aa1e      	add	r2, sp, #120	; 0x78
 801359e:	498b      	ldr	r1, [pc, #556]	; (80137cc <_strtod_l+0x58c>)
 80135a0:	a81b      	add	r0, sp, #108	; 0x6c
 80135a2:	f002 f835 	bl	8015610 <__hexnan>
 80135a6:	2805      	cmp	r0, #5
 80135a8:	d107      	bne.n	80135ba <_strtod_l+0x37a>
 80135aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80135ac:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80135b0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80135b4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80135b8:	e681      	b.n	80132be <_strtod_l+0x7e>
 80135ba:	f8df b224 	ldr.w	fp, [pc, #548]	; 80137e0 <_strtod_l+0x5a0>
 80135be:	e7d2      	b.n	8013566 <_strtod_l+0x326>
 80135c0:	ebae 0302 	sub.w	r3, lr, r2
 80135c4:	9306      	str	r3, [sp, #24]
 80135c6:	9b05      	ldr	r3, [sp, #20]
 80135c8:	9807      	ldr	r0, [sp, #28]
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	bf08      	it	eq
 80135ce:	4623      	moveq	r3, r4
 80135d0:	2c10      	cmp	r4, #16
 80135d2:	9305      	str	r3, [sp, #20]
 80135d4:	46a0      	mov	r8, r4
 80135d6:	bfa8      	it	ge
 80135d8:	f04f 0810 	movge.w	r8, #16
 80135dc:	f7ec ffaa 	bl	8000534 <__aeabi_ui2d>
 80135e0:	2c09      	cmp	r4, #9
 80135e2:	4682      	mov	sl, r0
 80135e4:	468b      	mov	fp, r1
 80135e6:	dc13      	bgt.n	8013610 <_strtod_l+0x3d0>
 80135e8:	9b06      	ldr	r3, [sp, #24]
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	f43f ae67 	beq.w	80132be <_strtod_l+0x7e>
 80135f0:	9b06      	ldr	r3, [sp, #24]
 80135f2:	dd7a      	ble.n	80136ea <_strtod_l+0x4aa>
 80135f4:	2b16      	cmp	r3, #22
 80135f6:	dc61      	bgt.n	80136bc <_strtod_l+0x47c>
 80135f8:	4a75      	ldr	r2, [pc, #468]	; (80137d0 <_strtod_l+0x590>)
 80135fa:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80135fe:	e9de 0100 	ldrd	r0, r1, [lr]
 8013602:	4652      	mov	r2, sl
 8013604:	465b      	mov	r3, fp
 8013606:	f7ed f80f 	bl	8000628 <__aeabi_dmul>
 801360a:	4682      	mov	sl, r0
 801360c:	468b      	mov	fp, r1
 801360e:	e656      	b.n	80132be <_strtod_l+0x7e>
 8013610:	4b6f      	ldr	r3, [pc, #444]	; (80137d0 <_strtod_l+0x590>)
 8013612:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8013616:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801361a:	f7ed f805 	bl	8000628 <__aeabi_dmul>
 801361e:	4606      	mov	r6, r0
 8013620:	4628      	mov	r0, r5
 8013622:	460f      	mov	r7, r1
 8013624:	f7ec ff86 	bl	8000534 <__aeabi_ui2d>
 8013628:	4602      	mov	r2, r0
 801362a:	460b      	mov	r3, r1
 801362c:	4630      	mov	r0, r6
 801362e:	4639      	mov	r1, r7
 8013630:	f7ec fe44 	bl	80002bc <__adddf3>
 8013634:	2c0f      	cmp	r4, #15
 8013636:	4682      	mov	sl, r0
 8013638:	468b      	mov	fp, r1
 801363a:	ddd5      	ble.n	80135e8 <_strtod_l+0x3a8>
 801363c:	9b06      	ldr	r3, [sp, #24]
 801363e:	eba4 0808 	sub.w	r8, r4, r8
 8013642:	4498      	add	r8, r3
 8013644:	f1b8 0f00 	cmp.w	r8, #0
 8013648:	f340 8096 	ble.w	8013778 <_strtod_l+0x538>
 801364c:	f018 030f 	ands.w	r3, r8, #15
 8013650:	d00a      	beq.n	8013668 <_strtod_l+0x428>
 8013652:	495f      	ldr	r1, [pc, #380]	; (80137d0 <_strtod_l+0x590>)
 8013654:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013658:	4652      	mov	r2, sl
 801365a:	465b      	mov	r3, fp
 801365c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013660:	f7ec ffe2 	bl	8000628 <__aeabi_dmul>
 8013664:	4682      	mov	sl, r0
 8013666:	468b      	mov	fp, r1
 8013668:	f038 080f 	bics.w	r8, r8, #15
 801366c:	d073      	beq.n	8013756 <_strtod_l+0x516>
 801366e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8013672:	dd47      	ble.n	8013704 <_strtod_l+0x4c4>
 8013674:	2400      	movs	r4, #0
 8013676:	46a0      	mov	r8, r4
 8013678:	9407      	str	r4, [sp, #28]
 801367a:	9405      	str	r4, [sp, #20]
 801367c:	2322      	movs	r3, #34	; 0x22
 801367e:	f8df b158 	ldr.w	fp, [pc, #344]	; 80137d8 <_strtod_l+0x598>
 8013682:	f8c9 3000 	str.w	r3, [r9]
 8013686:	f04f 0a00 	mov.w	sl, #0
 801368a:	9b07      	ldr	r3, [sp, #28]
 801368c:	2b00      	cmp	r3, #0
 801368e:	f43f ae16 	beq.w	80132be <_strtod_l+0x7e>
 8013692:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013694:	4648      	mov	r0, r9
 8013696:	f002 f93c 	bl	8015912 <_Bfree>
 801369a:	9905      	ldr	r1, [sp, #20]
 801369c:	4648      	mov	r0, r9
 801369e:	f002 f938 	bl	8015912 <_Bfree>
 80136a2:	4641      	mov	r1, r8
 80136a4:	4648      	mov	r0, r9
 80136a6:	f002 f934 	bl	8015912 <_Bfree>
 80136aa:	9907      	ldr	r1, [sp, #28]
 80136ac:	4648      	mov	r0, r9
 80136ae:	f002 f930 	bl	8015912 <_Bfree>
 80136b2:	4621      	mov	r1, r4
 80136b4:	4648      	mov	r0, r9
 80136b6:	f002 f92c 	bl	8015912 <_Bfree>
 80136ba:	e600      	b.n	80132be <_strtod_l+0x7e>
 80136bc:	9a06      	ldr	r2, [sp, #24]
 80136be:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80136c2:	4293      	cmp	r3, r2
 80136c4:	dbba      	blt.n	801363c <_strtod_l+0x3fc>
 80136c6:	4d42      	ldr	r5, [pc, #264]	; (80137d0 <_strtod_l+0x590>)
 80136c8:	f1c4 040f 	rsb	r4, r4, #15
 80136cc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80136d0:	4652      	mov	r2, sl
 80136d2:	465b      	mov	r3, fp
 80136d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80136d8:	f7ec ffa6 	bl	8000628 <__aeabi_dmul>
 80136dc:	9b06      	ldr	r3, [sp, #24]
 80136de:	1b1c      	subs	r4, r3, r4
 80136e0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80136e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80136e8:	e78d      	b.n	8013606 <_strtod_l+0x3c6>
 80136ea:	f113 0f16 	cmn.w	r3, #22
 80136ee:	dba5      	blt.n	801363c <_strtod_l+0x3fc>
 80136f0:	4a37      	ldr	r2, [pc, #220]	; (80137d0 <_strtod_l+0x590>)
 80136f2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80136f6:	e9d2 2300 	ldrd	r2, r3, [r2]
 80136fa:	4650      	mov	r0, sl
 80136fc:	4659      	mov	r1, fp
 80136fe:	f7ed f8bd 	bl	800087c <__aeabi_ddiv>
 8013702:	e782      	b.n	801360a <_strtod_l+0x3ca>
 8013704:	2300      	movs	r3, #0
 8013706:	4e33      	ldr	r6, [pc, #204]	; (80137d4 <_strtod_l+0x594>)
 8013708:	ea4f 1828 	mov.w	r8, r8, asr #4
 801370c:	4650      	mov	r0, sl
 801370e:	4659      	mov	r1, fp
 8013710:	461d      	mov	r5, r3
 8013712:	f1b8 0f01 	cmp.w	r8, #1
 8013716:	dc21      	bgt.n	801375c <_strtod_l+0x51c>
 8013718:	b10b      	cbz	r3, 801371e <_strtod_l+0x4de>
 801371a:	4682      	mov	sl, r0
 801371c:	468b      	mov	fp, r1
 801371e:	4b2d      	ldr	r3, [pc, #180]	; (80137d4 <_strtod_l+0x594>)
 8013720:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8013724:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8013728:	4652      	mov	r2, sl
 801372a:	465b      	mov	r3, fp
 801372c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013730:	f7ec ff7a 	bl	8000628 <__aeabi_dmul>
 8013734:	4b28      	ldr	r3, [pc, #160]	; (80137d8 <_strtod_l+0x598>)
 8013736:	460a      	mov	r2, r1
 8013738:	400b      	ands	r3, r1
 801373a:	4928      	ldr	r1, [pc, #160]	; (80137dc <_strtod_l+0x59c>)
 801373c:	428b      	cmp	r3, r1
 801373e:	4682      	mov	sl, r0
 8013740:	d898      	bhi.n	8013674 <_strtod_l+0x434>
 8013742:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8013746:	428b      	cmp	r3, r1
 8013748:	bf86      	itte	hi
 801374a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80137e4 <_strtod_l+0x5a4>
 801374e:	f04f 3aff 	movhi.w	sl, #4294967295
 8013752:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8013756:	2300      	movs	r3, #0
 8013758:	9304      	str	r3, [sp, #16]
 801375a:	e077      	b.n	801384c <_strtod_l+0x60c>
 801375c:	f018 0f01 	tst.w	r8, #1
 8013760:	d006      	beq.n	8013770 <_strtod_l+0x530>
 8013762:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8013766:	e9d3 2300 	ldrd	r2, r3, [r3]
 801376a:	f7ec ff5d 	bl	8000628 <__aeabi_dmul>
 801376e:	2301      	movs	r3, #1
 8013770:	3501      	adds	r5, #1
 8013772:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013776:	e7cc      	b.n	8013712 <_strtod_l+0x4d2>
 8013778:	d0ed      	beq.n	8013756 <_strtod_l+0x516>
 801377a:	f1c8 0800 	rsb	r8, r8, #0
 801377e:	f018 020f 	ands.w	r2, r8, #15
 8013782:	d00a      	beq.n	801379a <_strtod_l+0x55a>
 8013784:	4b12      	ldr	r3, [pc, #72]	; (80137d0 <_strtod_l+0x590>)
 8013786:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801378a:	4650      	mov	r0, sl
 801378c:	4659      	mov	r1, fp
 801378e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013792:	f7ed f873 	bl	800087c <__aeabi_ddiv>
 8013796:	4682      	mov	sl, r0
 8013798:	468b      	mov	fp, r1
 801379a:	ea5f 1828 	movs.w	r8, r8, asr #4
 801379e:	d0da      	beq.n	8013756 <_strtod_l+0x516>
 80137a0:	f1b8 0f1f 	cmp.w	r8, #31
 80137a4:	dd20      	ble.n	80137e8 <_strtod_l+0x5a8>
 80137a6:	2400      	movs	r4, #0
 80137a8:	46a0      	mov	r8, r4
 80137aa:	9407      	str	r4, [sp, #28]
 80137ac:	9405      	str	r4, [sp, #20]
 80137ae:	2322      	movs	r3, #34	; 0x22
 80137b0:	f04f 0a00 	mov.w	sl, #0
 80137b4:	f04f 0b00 	mov.w	fp, #0
 80137b8:	f8c9 3000 	str.w	r3, [r9]
 80137bc:	e765      	b.n	801368a <_strtod_l+0x44a>
 80137be:	bf00      	nop
 80137c0:	08017949 	.word	0x08017949
 80137c4:	080179d3 	.word	0x080179d3
 80137c8:	08017951 	.word	0x08017951
 80137cc:	08017990 	.word	0x08017990
 80137d0:	08017a78 	.word	0x08017a78
 80137d4:	08017a50 	.word	0x08017a50
 80137d8:	7ff00000 	.word	0x7ff00000
 80137dc:	7ca00000 	.word	0x7ca00000
 80137e0:	fff80000 	.word	0xfff80000
 80137e4:	7fefffff 	.word	0x7fefffff
 80137e8:	f018 0310 	ands.w	r3, r8, #16
 80137ec:	bf18      	it	ne
 80137ee:	236a      	movne	r3, #106	; 0x6a
 80137f0:	4da0      	ldr	r5, [pc, #640]	; (8013a74 <_strtod_l+0x834>)
 80137f2:	9304      	str	r3, [sp, #16]
 80137f4:	4650      	mov	r0, sl
 80137f6:	4659      	mov	r1, fp
 80137f8:	2300      	movs	r3, #0
 80137fa:	f1b8 0f00 	cmp.w	r8, #0
 80137fe:	f300 810a 	bgt.w	8013a16 <_strtod_l+0x7d6>
 8013802:	b10b      	cbz	r3, 8013808 <_strtod_l+0x5c8>
 8013804:	4682      	mov	sl, r0
 8013806:	468b      	mov	fp, r1
 8013808:	9b04      	ldr	r3, [sp, #16]
 801380a:	b1bb      	cbz	r3, 801383c <_strtod_l+0x5fc>
 801380c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8013810:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013814:	2b00      	cmp	r3, #0
 8013816:	4659      	mov	r1, fp
 8013818:	dd10      	ble.n	801383c <_strtod_l+0x5fc>
 801381a:	2b1f      	cmp	r3, #31
 801381c:	f340 8107 	ble.w	8013a2e <_strtod_l+0x7ee>
 8013820:	2b34      	cmp	r3, #52	; 0x34
 8013822:	bfde      	ittt	le
 8013824:	3b20      	suble	r3, #32
 8013826:	f04f 32ff 	movle.w	r2, #4294967295
 801382a:	fa02 f303 	lslle.w	r3, r2, r3
 801382e:	f04f 0a00 	mov.w	sl, #0
 8013832:	bfcc      	ite	gt
 8013834:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8013838:	ea03 0b01 	andle.w	fp, r3, r1
 801383c:	2200      	movs	r2, #0
 801383e:	2300      	movs	r3, #0
 8013840:	4650      	mov	r0, sl
 8013842:	4659      	mov	r1, fp
 8013844:	f7ed f958 	bl	8000af8 <__aeabi_dcmpeq>
 8013848:	2800      	cmp	r0, #0
 801384a:	d1ac      	bne.n	80137a6 <_strtod_l+0x566>
 801384c:	9b07      	ldr	r3, [sp, #28]
 801384e:	9300      	str	r3, [sp, #0]
 8013850:	9a05      	ldr	r2, [sp, #20]
 8013852:	9908      	ldr	r1, [sp, #32]
 8013854:	4623      	mov	r3, r4
 8013856:	4648      	mov	r0, r9
 8013858:	f002 f8ad 	bl	80159b6 <__s2b>
 801385c:	9007      	str	r0, [sp, #28]
 801385e:	2800      	cmp	r0, #0
 8013860:	f43f af08 	beq.w	8013674 <_strtod_l+0x434>
 8013864:	9a06      	ldr	r2, [sp, #24]
 8013866:	9b06      	ldr	r3, [sp, #24]
 8013868:	2a00      	cmp	r2, #0
 801386a:	f1c3 0300 	rsb	r3, r3, #0
 801386e:	bfa8      	it	ge
 8013870:	2300      	movge	r3, #0
 8013872:	930e      	str	r3, [sp, #56]	; 0x38
 8013874:	2400      	movs	r4, #0
 8013876:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801387a:	9316      	str	r3, [sp, #88]	; 0x58
 801387c:	46a0      	mov	r8, r4
 801387e:	9b07      	ldr	r3, [sp, #28]
 8013880:	4648      	mov	r0, r9
 8013882:	6859      	ldr	r1, [r3, #4]
 8013884:	f002 f811 	bl	80158aa <_Balloc>
 8013888:	9005      	str	r0, [sp, #20]
 801388a:	2800      	cmp	r0, #0
 801388c:	f43f aef6 	beq.w	801367c <_strtod_l+0x43c>
 8013890:	9b07      	ldr	r3, [sp, #28]
 8013892:	691a      	ldr	r2, [r3, #16]
 8013894:	3202      	adds	r2, #2
 8013896:	f103 010c 	add.w	r1, r3, #12
 801389a:	0092      	lsls	r2, r2, #2
 801389c:	300c      	adds	r0, #12
 801389e:	f001 fff9 	bl	8015894 <memcpy>
 80138a2:	aa1e      	add	r2, sp, #120	; 0x78
 80138a4:	a91d      	add	r1, sp, #116	; 0x74
 80138a6:	ec4b ab10 	vmov	d0, sl, fp
 80138aa:	4648      	mov	r0, r9
 80138ac:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80138b0:	f002 fb3c 	bl	8015f2c <__d2b>
 80138b4:	901c      	str	r0, [sp, #112]	; 0x70
 80138b6:	2800      	cmp	r0, #0
 80138b8:	f43f aee0 	beq.w	801367c <_strtod_l+0x43c>
 80138bc:	2101      	movs	r1, #1
 80138be:	4648      	mov	r0, r9
 80138c0:	f002 f905 	bl	8015ace <__i2b>
 80138c4:	4680      	mov	r8, r0
 80138c6:	2800      	cmp	r0, #0
 80138c8:	f43f aed8 	beq.w	801367c <_strtod_l+0x43c>
 80138cc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80138ce:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80138d0:	2e00      	cmp	r6, #0
 80138d2:	bfab      	itete	ge
 80138d4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80138d6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80138d8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80138da:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80138dc:	bfac      	ite	ge
 80138de:	18f7      	addge	r7, r6, r3
 80138e0:	1b9d      	sublt	r5, r3, r6
 80138e2:	9b04      	ldr	r3, [sp, #16]
 80138e4:	1af6      	subs	r6, r6, r3
 80138e6:	4416      	add	r6, r2
 80138e8:	4b63      	ldr	r3, [pc, #396]	; (8013a78 <_strtod_l+0x838>)
 80138ea:	3e01      	subs	r6, #1
 80138ec:	429e      	cmp	r6, r3
 80138ee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80138f2:	f280 80af 	bge.w	8013a54 <_strtod_l+0x814>
 80138f6:	1b9b      	subs	r3, r3, r6
 80138f8:	2b1f      	cmp	r3, #31
 80138fa:	eba2 0203 	sub.w	r2, r2, r3
 80138fe:	f04f 0101 	mov.w	r1, #1
 8013902:	f300 809b 	bgt.w	8013a3c <_strtod_l+0x7fc>
 8013906:	fa01 f303 	lsl.w	r3, r1, r3
 801390a:	930f      	str	r3, [sp, #60]	; 0x3c
 801390c:	2300      	movs	r3, #0
 801390e:	930a      	str	r3, [sp, #40]	; 0x28
 8013910:	18be      	adds	r6, r7, r2
 8013912:	9b04      	ldr	r3, [sp, #16]
 8013914:	42b7      	cmp	r7, r6
 8013916:	4415      	add	r5, r2
 8013918:	441d      	add	r5, r3
 801391a:	463b      	mov	r3, r7
 801391c:	bfa8      	it	ge
 801391e:	4633      	movge	r3, r6
 8013920:	42ab      	cmp	r3, r5
 8013922:	bfa8      	it	ge
 8013924:	462b      	movge	r3, r5
 8013926:	2b00      	cmp	r3, #0
 8013928:	bfc2      	ittt	gt
 801392a:	1af6      	subgt	r6, r6, r3
 801392c:	1aed      	subgt	r5, r5, r3
 801392e:	1aff      	subgt	r7, r7, r3
 8013930:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013932:	b1bb      	cbz	r3, 8013964 <_strtod_l+0x724>
 8013934:	4641      	mov	r1, r8
 8013936:	461a      	mov	r2, r3
 8013938:	4648      	mov	r0, r9
 801393a:	f002 f967 	bl	8015c0c <__pow5mult>
 801393e:	4680      	mov	r8, r0
 8013940:	2800      	cmp	r0, #0
 8013942:	f43f ae9b 	beq.w	801367c <_strtod_l+0x43c>
 8013946:	4601      	mov	r1, r0
 8013948:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801394a:	4648      	mov	r0, r9
 801394c:	f002 f8c8 	bl	8015ae0 <__multiply>
 8013950:	900c      	str	r0, [sp, #48]	; 0x30
 8013952:	2800      	cmp	r0, #0
 8013954:	f43f ae92 	beq.w	801367c <_strtod_l+0x43c>
 8013958:	991c      	ldr	r1, [sp, #112]	; 0x70
 801395a:	4648      	mov	r0, r9
 801395c:	f001 ffd9 	bl	8015912 <_Bfree>
 8013960:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013962:	931c      	str	r3, [sp, #112]	; 0x70
 8013964:	2e00      	cmp	r6, #0
 8013966:	dc7a      	bgt.n	8013a5e <_strtod_l+0x81e>
 8013968:	9b06      	ldr	r3, [sp, #24]
 801396a:	2b00      	cmp	r3, #0
 801396c:	dd08      	ble.n	8013980 <_strtod_l+0x740>
 801396e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013970:	9905      	ldr	r1, [sp, #20]
 8013972:	4648      	mov	r0, r9
 8013974:	f002 f94a 	bl	8015c0c <__pow5mult>
 8013978:	9005      	str	r0, [sp, #20]
 801397a:	2800      	cmp	r0, #0
 801397c:	f43f ae7e 	beq.w	801367c <_strtod_l+0x43c>
 8013980:	2d00      	cmp	r5, #0
 8013982:	dd08      	ble.n	8013996 <_strtod_l+0x756>
 8013984:	462a      	mov	r2, r5
 8013986:	9905      	ldr	r1, [sp, #20]
 8013988:	4648      	mov	r0, r9
 801398a:	f002 f98d 	bl	8015ca8 <__lshift>
 801398e:	9005      	str	r0, [sp, #20]
 8013990:	2800      	cmp	r0, #0
 8013992:	f43f ae73 	beq.w	801367c <_strtod_l+0x43c>
 8013996:	2f00      	cmp	r7, #0
 8013998:	dd08      	ble.n	80139ac <_strtod_l+0x76c>
 801399a:	4641      	mov	r1, r8
 801399c:	463a      	mov	r2, r7
 801399e:	4648      	mov	r0, r9
 80139a0:	f002 f982 	bl	8015ca8 <__lshift>
 80139a4:	4680      	mov	r8, r0
 80139a6:	2800      	cmp	r0, #0
 80139a8:	f43f ae68 	beq.w	801367c <_strtod_l+0x43c>
 80139ac:	9a05      	ldr	r2, [sp, #20]
 80139ae:	991c      	ldr	r1, [sp, #112]	; 0x70
 80139b0:	4648      	mov	r0, r9
 80139b2:	f002 f9e7 	bl	8015d84 <__mdiff>
 80139b6:	4604      	mov	r4, r0
 80139b8:	2800      	cmp	r0, #0
 80139ba:	f43f ae5f 	beq.w	801367c <_strtod_l+0x43c>
 80139be:	68c3      	ldr	r3, [r0, #12]
 80139c0:	930c      	str	r3, [sp, #48]	; 0x30
 80139c2:	2300      	movs	r3, #0
 80139c4:	60c3      	str	r3, [r0, #12]
 80139c6:	4641      	mov	r1, r8
 80139c8:	f002 f9c2 	bl	8015d50 <__mcmp>
 80139cc:	2800      	cmp	r0, #0
 80139ce:	da55      	bge.n	8013a7c <_strtod_l+0x83c>
 80139d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80139d2:	b9e3      	cbnz	r3, 8013a0e <_strtod_l+0x7ce>
 80139d4:	f1ba 0f00 	cmp.w	sl, #0
 80139d8:	d119      	bne.n	8013a0e <_strtod_l+0x7ce>
 80139da:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80139de:	b9b3      	cbnz	r3, 8013a0e <_strtod_l+0x7ce>
 80139e0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80139e4:	0d1b      	lsrs	r3, r3, #20
 80139e6:	051b      	lsls	r3, r3, #20
 80139e8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80139ec:	d90f      	bls.n	8013a0e <_strtod_l+0x7ce>
 80139ee:	6963      	ldr	r3, [r4, #20]
 80139f0:	b913      	cbnz	r3, 80139f8 <_strtod_l+0x7b8>
 80139f2:	6923      	ldr	r3, [r4, #16]
 80139f4:	2b01      	cmp	r3, #1
 80139f6:	dd0a      	ble.n	8013a0e <_strtod_l+0x7ce>
 80139f8:	4621      	mov	r1, r4
 80139fa:	2201      	movs	r2, #1
 80139fc:	4648      	mov	r0, r9
 80139fe:	f002 f953 	bl	8015ca8 <__lshift>
 8013a02:	4641      	mov	r1, r8
 8013a04:	4604      	mov	r4, r0
 8013a06:	f002 f9a3 	bl	8015d50 <__mcmp>
 8013a0a:	2800      	cmp	r0, #0
 8013a0c:	dc67      	bgt.n	8013ade <_strtod_l+0x89e>
 8013a0e:	9b04      	ldr	r3, [sp, #16]
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d171      	bne.n	8013af8 <_strtod_l+0x8b8>
 8013a14:	e63d      	b.n	8013692 <_strtod_l+0x452>
 8013a16:	f018 0f01 	tst.w	r8, #1
 8013a1a:	d004      	beq.n	8013a26 <_strtod_l+0x7e6>
 8013a1c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013a20:	f7ec fe02 	bl	8000628 <__aeabi_dmul>
 8013a24:	2301      	movs	r3, #1
 8013a26:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013a2a:	3508      	adds	r5, #8
 8013a2c:	e6e5      	b.n	80137fa <_strtod_l+0x5ba>
 8013a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8013a32:	fa02 f303 	lsl.w	r3, r2, r3
 8013a36:	ea03 0a0a 	and.w	sl, r3, sl
 8013a3a:	e6ff      	b.n	801383c <_strtod_l+0x5fc>
 8013a3c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8013a40:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8013a44:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8013a48:	36e2      	adds	r6, #226	; 0xe2
 8013a4a:	fa01 f306 	lsl.w	r3, r1, r6
 8013a4e:	930a      	str	r3, [sp, #40]	; 0x28
 8013a50:	910f      	str	r1, [sp, #60]	; 0x3c
 8013a52:	e75d      	b.n	8013910 <_strtod_l+0x6d0>
 8013a54:	2300      	movs	r3, #0
 8013a56:	930a      	str	r3, [sp, #40]	; 0x28
 8013a58:	2301      	movs	r3, #1
 8013a5a:	930f      	str	r3, [sp, #60]	; 0x3c
 8013a5c:	e758      	b.n	8013910 <_strtod_l+0x6d0>
 8013a5e:	4632      	mov	r2, r6
 8013a60:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013a62:	4648      	mov	r0, r9
 8013a64:	f002 f920 	bl	8015ca8 <__lshift>
 8013a68:	901c      	str	r0, [sp, #112]	; 0x70
 8013a6a:	2800      	cmp	r0, #0
 8013a6c:	f47f af7c 	bne.w	8013968 <_strtod_l+0x728>
 8013a70:	e604      	b.n	801367c <_strtod_l+0x43c>
 8013a72:	bf00      	nop
 8013a74:	080179a8 	.word	0x080179a8
 8013a78:	fffffc02 	.word	0xfffffc02
 8013a7c:	465d      	mov	r5, fp
 8013a7e:	f040 8086 	bne.w	8013b8e <_strtod_l+0x94e>
 8013a82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013a84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013a88:	b32a      	cbz	r2, 8013ad6 <_strtod_l+0x896>
 8013a8a:	4aaf      	ldr	r2, [pc, #700]	; (8013d48 <_strtod_l+0xb08>)
 8013a8c:	4293      	cmp	r3, r2
 8013a8e:	d153      	bne.n	8013b38 <_strtod_l+0x8f8>
 8013a90:	9b04      	ldr	r3, [sp, #16]
 8013a92:	4650      	mov	r0, sl
 8013a94:	b1d3      	cbz	r3, 8013acc <_strtod_l+0x88c>
 8013a96:	4aad      	ldr	r2, [pc, #692]	; (8013d4c <_strtod_l+0xb0c>)
 8013a98:	402a      	ands	r2, r5
 8013a9a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8013a9e:	f04f 31ff 	mov.w	r1, #4294967295
 8013aa2:	d816      	bhi.n	8013ad2 <_strtod_l+0x892>
 8013aa4:	0d12      	lsrs	r2, r2, #20
 8013aa6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8013aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8013aae:	4298      	cmp	r0, r3
 8013ab0:	d142      	bne.n	8013b38 <_strtod_l+0x8f8>
 8013ab2:	4ba7      	ldr	r3, [pc, #668]	; (8013d50 <_strtod_l+0xb10>)
 8013ab4:	429d      	cmp	r5, r3
 8013ab6:	d102      	bne.n	8013abe <_strtod_l+0x87e>
 8013ab8:	3001      	adds	r0, #1
 8013aba:	f43f addf 	beq.w	801367c <_strtod_l+0x43c>
 8013abe:	4ba3      	ldr	r3, [pc, #652]	; (8013d4c <_strtod_l+0xb0c>)
 8013ac0:	402b      	ands	r3, r5
 8013ac2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8013ac6:	f04f 0a00 	mov.w	sl, #0
 8013aca:	e7a0      	b.n	8013a0e <_strtod_l+0x7ce>
 8013acc:	f04f 33ff 	mov.w	r3, #4294967295
 8013ad0:	e7ed      	b.n	8013aae <_strtod_l+0x86e>
 8013ad2:	460b      	mov	r3, r1
 8013ad4:	e7eb      	b.n	8013aae <_strtod_l+0x86e>
 8013ad6:	bb7b      	cbnz	r3, 8013b38 <_strtod_l+0x8f8>
 8013ad8:	f1ba 0f00 	cmp.w	sl, #0
 8013adc:	d12c      	bne.n	8013b38 <_strtod_l+0x8f8>
 8013ade:	9904      	ldr	r1, [sp, #16]
 8013ae0:	4a9a      	ldr	r2, [pc, #616]	; (8013d4c <_strtod_l+0xb0c>)
 8013ae2:	465b      	mov	r3, fp
 8013ae4:	b1f1      	cbz	r1, 8013b24 <_strtod_l+0x8e4>
 8013ae6:	ea02 010b 	and.w	r1, r2, fp
 8013aea:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8013aee:	dc19      	bgt.n	8013b24 <_strtod_l+0x8e4>
 8013af0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8013af4:	f77f ae5b 	ble.w	80137ae <_strtod_l+0x56e>
 8013af8:	4a96      	ldr	r2, [pc, #600]	; (8013d54 <_strtod_l+0xb14>)
 8013afa:	2300      	movs	r3, #0
 8013afc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8013b00:	4650      	mov	r0, sl
 8013b02:	4659      	mov	r1, fp
 8013b04:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8013b08:	f7ec fd8e 	bl	8000628 <__aeabi_dmul>
 8013b0c:	4682      	mov	sl, r0
 8013b0e:	468b      	mov	fp, r1
 8013b10:	2900      	cmp	r1, #0
 8013b12:	f47f adbe 	bne.w	8013692 <_strtod_l+0x452>
 8013b16:	2800      	cmp	r0, #0
 8013b18:	f47f adbb 	bne.w	8013692 <_strtod_l+0x452>
 8013b1c:	2322      	movs	r3, #34	; 0x22
 8013b1e:	f8c9 3000 	str.w	r3, [r9]
 8013b22:	e5b6      	b.n	8013692 <_strtod_l+0x452>
 8013b24:	4013      	ands	r3, r2
 8013b26:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013b2a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8013b2e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8013b32:	f04f 3aff 	mov.w	sl, #4294967295
 8013b36:	e76a      	b.n	8013a0e <_strtod_l+0x7ce>
 8013b38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013b3a:	b193      	cbz	r3, 8013b62 <_strtod_l+0x922>
 8013b3c:	422b      	tst	r3, r5
 8013b3e:	f43f af66 	beq.w	8013a0e <_strtod_l+0x7ce>
 8013b42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013b44:	9a04      	ldr	r2, [sp, #16]
 8013b46:	4650      	mov	r0, sl
 8013b48:	4659      	mov	r1, fp
 8013b4a:	b173      	cbz	r3, 8013b6a <_strtod_l+0x92a>
 8013b4c:	f7ff fb5b 	bl	8013206 <sulp>
 8013b50:	4602      	mov	r2, r0
 8013b52:	460b      	mov	r3, r1
 8013b54:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013b58:	f7ec fbb0 	bl	80002bc <__adddf3>
 8013b5c:	4682      	mov	sl, r0
 8013b5e:	468b      	mov	fp, r1
 8013b60:	e755      	b.n	8013a0e <_strtod_l+0x7ce>
 8013b62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013b64:	ea13 0f0a 	tst.w	r3, sl
 8013b68:	e7e9      	b.n	8013b3e <_strtod_l+0x8fe>
 8013b6a:	f7ff fb4c 	bl	8013206 <sulp>
 8013b6e:	4602      	mov	r2, r0
 8013b70:	460b      	mov	r3, r1
 8013b72:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013b76:	f7ec fb9f 	bl	80002b8 <__aeabi_dsub>
 8013b7a:	2200      	movs	r2, #0
 8013b7c:	2300      	movs	r3, #0
 8013b7e:	4682      	mov	sl, r0
 8013b80:	468b      	mov	fp, r1
 8013b82:	f7ec ffb9 	bl	8000af8 <__aeabi_dcmpeq>
 8013b86:	2800      	cmp	r0, #0
 8013b88:	f47f ae11 	bne.w	80137ae <_strtod_l+0x56e>
 8013b8c:	e73f      	b.n	8013a0e <_strtod_l+0x7ce>
 8013b8e:	4641      	mov	r1, r8
 8013b90:	4620      	mov	r0, r4
 8013b92:	f002 fa1a 	bl	8015fca <__ratio>
 8013b96:	ec57 6b10 	vmov	r6, r7, d0
 8013b9a:	2200      	movs	r2, #0
 8013b9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013ba0:	ee10 0a10 	vmov	r0, s0
 8013ba4:	4639      	mov	r1, r7
 8013ba6:	f7ec ffbb 	bl	8000b20 <__aeabi_dcmple>
 8013baa:	2800      	cmp	r0, #0
 8013bac:	d077      	beq.n	8013c9e <_strtod_l+0xa5e>
 8013bae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	d04a      	beq.n	8013c4a <_strtod_l+0xa0a>
 8013bb4:	4b68      	ldr	r3, [pc, #416]	; (8013d58 <_strtod_l+0xb18>)
 8013bb6:	2200      	movs	r2, #0
 8013bb8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8013bbc:	4f66      	ldr	r7, [pc, #408]	; (8013d58 <_strtod_l+0xb18>)
 8013bbe:	2600      	movs	r6, #0
 8013bc0:	4b62      	ldr	r3, [pc, #392]	; (8013d4c <_strtod_l+0xb0c>)
 8013bc2:	402b      	ands	r3, r5
 8013bc4:	930f      	str	r3, [sp, #60]	; 0x3c
 8013bc6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013bc8:	4b64      	ldr	r3, [pc, #400]	; (8013d5c <_strtod_l+0xb1c>)
 8013bca:	429a      	cmp	r2, r3
 8013bcc:	f040 80ce 	bne.w	8013d6c <_strtod_l+0xb2c>
 8013bd0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013bd4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013bd8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8013bdc:	ec4b ab10 	vmov	d0, sl, fp
 8013be0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8013be4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013be8:	f002 f92a 	bl	8015e40 <__ulp>
 8013bec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013bf0:	ec53 2b10 	vmov	r2, r3, d0
 8013bf4:	f7ec fd18 	bl	8000628 <__aeabi_dmul>
 8013bf8:	4652      	mov	r2, sl
 8013bfa:	465b      	mov	r3, fp
 8013bfc:	f7ec fb5e 	bl	80002bc <__adddf3>
 8013c00:	460b      	mov	r3, r1
 8013c02:	4952      	ldr	r1, [pc, #328]	; (8013d4c <_strtod_l+0xb0c>)
 8013c04:	4a56      	ldr	r2, [pc, #344]	; (8013d60 <_strtod_l+0xb20>)
 8013c06:	4019      	ands	r1, r3
 8013c08:	4291      	cmp	r1, r2
 8013c0a:	4682      	mov	sl, r0
 8013c0c:	d95b      	bls.n	8013cc6 <_strtod_l+0xa86>
 8013c0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c10:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8013c14:	4293      	cmp	r3, r2
 8013c16:	d103      	bne.n	8013c20 <_strtod_l+0x9e0>
 8013c18:	9b08      	ldr	r3, [sp, #32]
 8013c1a:	3301      	adds	r3, #1
 8013c1c:	f43f ad2e 	beq.w	801367c <_strtod_l+0x43c>
 8013c20:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8013d50 <_strtod_l+0xb10>
 8013c24:	f04f 3aff 	mov.w	sl, #4294967295
 8013c28:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013c2a:	4648      	mov	r0, r9
 8013c2c:	f001 fe71 	bl	8015912 <_Bfree>
 8013c30:	9905      	ldr	r1, [sp, #20]
 8013c32:	4648      	mov	r0, r9
 8013c34:	f001 fe6d 	bl	8015912 <_Bfree>
 8013c38:	4641      	mov	r1, r8
 8013c3a:	4648      	mov	r0, r9
 8013c3c:	f001 fe69 	bl	8015912 <_Bfree>
 8013c40:	4621      	mov	r1, r4
 8013c42:	4648      	mov	r0, r9
 8013c44:	f001 fe65 	bl	8015912 <_Bfree>
 8013c48:	e619      	b.n	801387e <_strtod_l+0x63e>
 8013c4a:	f1ba 0f00 	cmp.w	sl, #0
 8013c4e:	d11a      	bne.n	8013c86 <_strtod_l+0xa46>
 8013c50:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013c54:	b9eb      	cbnz	r3, 8013c92 <_strtod_l+0xa52>
 8013c56:	2200      	movs	r2, #0
 8013c58:	4b3f      	ldr	r3, [pc, #252]	; (8013d58 <_strtod_l+0xb18>)
 8013c5a:	4630      	mov	r0, r6
 8013c5c:	4639      	mov	r1, r7
 8013c5e:	f7ec ff55 	bl	8000b0c <__aeabi_dcmplt>
 8013c62:	b9c8      	cbnz	r0, 8013c98 <_strtod_l+0xa58>
 8013c64:	4630      	mov	r0, r6
 8013c66:	4639      	mov	r1, r7
 8013c68:	2200      	movs	r2, #0
 8013c6a:	4b3e      	ldr	r3, [pc, #248]	; (8013d64 <_strtod_l+0xb24>)
 8013c6c:	f7ec fcdc 	bl	8000628 <__aeabi_dmul>
 8013c70:	4606      	mov	r6, r0
 8013c72:	460f      	mov	r7, r1
 8013c74:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8013c78:	9618      	str	r6, [sp, #96]	; 0x60
 8013c7a:	9319      	str	r3, [sp, #100]	; 0x64
 8013c7c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8013c80:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8013c84:	e79c      	b.n	8013bc0 <_strtod_l+0x980>
 8013c86:	f1ba 0f01 	cmp.w	sl, #1
 8013c8a:	d102      	bne.n	8013c92 <_strtod_l+0xa52>
 8013c8c:	2d00      	cmp	r5, #0
 8013c8e:	f43f ad8e 	beq.w	80137ae <_strtod_l+0x56e>
 8013c92:	2200      	movs	r2, #0
 8013c94:	4b34      	ldr	r3, [pc, #208]	; (8013d68 <_strtod_l+0xb28>)
 8013c96:	e78f      	b.n	8013bb8 <_strtod_l+0x978>
 8013c98:	2600      	movs	r6, #0
 8013c9a:	4f32      	ldr	r7, [pc, #200]	; (8013d64 <_strtod_l+0xb24>)
 8013c9c:	e7ea      	b.n	8013c74 <_strtod_l+0xa34>
 8013c9e:	4b31      	ldr	r3, [pc, #196]	; (8013d64 <_strtod_l+0xb24>)
 8013ca0:	4630      	mov	r0, r6
 8013ca2:	4639      	mov	r1, r7
 8013ca4:	2200      	movs	r2, #0
 8013ca6:	f7ec fcbf 	bl	8000628 <__aeabi_dmul>
 8013caa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013cac:	4606      	mov	r6, r0
 8013cae:	460f      	mov	r7, r1
 8013cb0:	b933      	cbnz	r3, 8013cc0 <_strtod_l+0xa80>
 8013cb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013cb6:	9010      	str	r0, [sp, #64]	; 0x40
 8013cb8:	9311      	str	r3, [sp, #68]	; 0x44
 8013cba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013cbe:	e7df      	b.n	8013c80 <_strtod_l+0xa40>
 8013cc0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8013cc4:	e7f9      	b.n	8013cba <_strtod_l+0xa7a>
 8013cc6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8013cca:	9b04      	ldr	r3, [sp, #16]
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d1ab      	bne.n	8013c28 <_strtod_l+0x9e8>
 8013cd0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013cd4:	0d1b      	lsrs	r3, r3, #20
 8013cd6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013cd8:	051b      	lsls	r3, r3, #20
 8013cda:	429a      	cmp	r2, r3
 8013cdc:	465d      	mov	r5, fp
 8013cde:	d1a3      	bne.n	8013c28 <_strtod_l+0x9e8>
 8013ce0:	4639      	mov	r1, r7
 8013ce2:	4630      	mov	r0, r6
 8013ce4:	f7ec ff50 	bl	8000b88 <__aeabi_d2iz>
 8013ce8:	f7ec fc34 	bl	8000554 <__aeabi_i2d>
 8013cec:	460b      	mov	r3, r1
 8013cee:	4602      	mov	r2, r0
 8013cf0:	4639      	mov	r1, r7
 8013cf2:	4630      	mov	r0, r6
 8013cf4:	f7ec fae0 	bl	80002b8 <__aeabi_dsub>
 8013cf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013cfa:	4606      	mov	r6, r0
 8013cfc:	460f      	mov	r7, r1
 8013cfe:	b933      	cbnz	r3, 8013d0e <_strtod_l+0xace>
 8013d00:	f1ba 0f00 	cmp.w	sl, #0
 8013d04:	d103      	bne.n	8013d0e <_strtod_l+0xace>
 8013d06:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8013d0a:	2d00      	cmp	r5, #0
 8013d0c:	d06d      	beq.n	8013dea <_strtod_l+0xbaa>
 8013d0e:	a30a      	add	r3, pc, #40	; (adr r3, 8013d38 <_strtod_l+0xaf8>)
 8013d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d14:	4630      	mov	r0, r6
 8013d16:	4639      	mov	r1, r7
 8013d18:	f7ec fef8 	bl	8000b0c <__aeabi_dcmplt>
 8013d1c:	2800      	cmp	r0, #0
 8013d1e:	f47f acb8 	bne.w	8013692 <_strtod_l+0x452>
 8013d22:	a307      	add	r3, pc, #28	; (adr r3, 8013d40 <_strtod_l+0xb00>)
 8013d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d28:	4630      	mov	r0, r6
 8013d2a:	4639      	mov	r1, r7
 8013d2c:	f7ec ff0c 	bl	8000b48 <__aeabi_dcmpgt>
 8013d30:	2800      	cmp	r0, #0
 8013d32:	f43f af79 	beq.w	8013c28 <_strtod_l+0x9e8>
 8013d36:	e4ac      	b.n	8013692 <_strtod_l+0x452>
 8013d38:	94a03595 	.word	0x94a03595
 8013d3c:	3fdfffff 	.word	0x3fdfffff
 8013d40:	35afe535 	.word	0x35afe535
 8013d44:	3fe00000 	.word	0x3fe00000
 8013d48:	000fffff 	.word	0x000fffff
 8013d4c:	7ff00000 	.word	0x7ff00000
 8013d50:	7fefffff 	.word	0x7fefffff
 8013d54:	39500000 	.word	0x39500000
 8013d58:	3ff00000 	.word	0x3ff00000
 8013d5c:	7fe00000 	.word	0x7fe00000
 8013d60:	7c9fffff 	.word	0x7c9fffff
 8013d64:	3fe00000 	.word	0x3fe00000
 8013d68:	bff00000 	.word	0xbff00000
 8013d6c:	9b04      	ldr	r3, [sp, #16]
 8013d6e:	b333      	cbz	r3, 8013dbe <_strtod_l+0xb7e>
 8013d70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013d72:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013d76:	d822      	bhi.n	8013dbe <_strtod_l+0xb7e>
 8013d78:	a327      	add	r3, pc, #156	; (adr r3, 8013e18 <_strtod_l+0xbd8>)
 8013d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d7e:	4630      	mov	r0, r6
 8013d80:	4639      	mov	r1, r7
 8013d82:	f7ec fecd 	bl	8000b20 <__aeabi_dcmple>
 8013d86:	b1a0      	cbz	r0, 8013db2 <_strtod_l+0xb72>
 8013d88:	4639      	mov	r1, r7
 8013d8a:	4630      	mov	r0, r6
 8013d8c:	f7ec ff24 	bl	8000bd8 <__aeabi_d2uiz>
 8013d90:	2800      	cmp	r0, #0
 8013d92:	bf08      	it	eq
 8013d94:	2001      	moveq	r0, #1
 8013d96:	f7ec fbcd 	bl	8000534 <__aeabi_ui2d>
 8013d9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013d9c:	4606      	mov	r6, r0
 8013d9e:	460f      	mov	r7, r1
 8013da0:	bb03      	cbnz	r3, 8013de4 <_strtod_l+0xba4>
 8013da2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013da6:	9012      	str	r0, [sp, #72]	; 0x48
 8013da8:	9313      	str	r3, [sp, #76]	; 0x4c
 8013daa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8013dae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8013db2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013db4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013db6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8013dba:	1a9b      	subs	r3, r3, r2
 8013dbc:	930b      	str	r3, [sp, #44]	; 0x2c
 8013dbe:	ed9d 0b08 	vldr	d0, [sp, #32]
 8013dc2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8013dc6:	f002 f83b 	bl	8015e40 <__ulp>
 8013dca:	4650      	mov	r0, sl
 8013dcc:	ec53 2b10 	vmov	r2, r3, d0
 8013dd0:	4659      	mov	r1, fp
 8013dd2:	f7ec fc29 	bl	8000628 <__aeabi_dmul>
 8013dd6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013dda:	f7ec fa6f 	bl	80002bc <__adddf3>
 8013dde:	4682      	mov	sl, r0
 8013de0:	468b      	mov	fp, r1
 8013de2:	e772      	b.n	8013cca <_strtod_l+0xa8a>
 8013de4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8013de8:	e7df      	b.n	8013daa <_strtod_l+0xb6a>
 8013dea:	a30d      	add	r3, pc, #52	; (adr r3, 8013e20 <_strtod_l+0xbe0>)
 8013dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013df0:	f7ec fe8c 	bl	8000b0c <__aeabi_dcmplt>
 8013df4:	e79c      	b.n	8013d30 <_strtod_l+0xaf0>
 8013df6:	2300      	movs	r3, #0
 8013df8:	930d      	str	r3, [sp, #52]	; 0x34
 8013dfa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013dfc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013dfe:	6013      	str	r3, [r2, #0]
 8013e00:	f7ff ba61 	b.w	80132c6 <_strtod_l+0x86>
 8013e04:	2b65      	cmp	r3, #101	; 0x65
 8013e06:	f04f 0200 	mov.w	r2, #0
 8013e0a:	f43f ab4e 	beq.w	80134aa <_strtod_l+0x26a>
 8013e0e:	2101      	movs	r1, #1
 8013e10:	4614      	mov	r4, r2
 8013e12:	9104      	str	r1, [sp, #16]
 8013e14:	f7ff bacb 	b.w	80133ae <_strtod_l+0x16e>
 8013e18:	ffc00000 	.word	0xffc00000
 8013e1c:	41dfffff 	.word	0x41dfffff
 8013e20:	94a03595 	.word	0x94a03595
 8013e24:	3fcfffff 	.word	0x3fcfffff

08013e28 <_strtod_r>:
 8013e28:	4b05      	ldr	r3, [pc, #20]	; (8013e40 <_strtod_r+0x18>)
 8013e2a:	681b      	ldr	r3, [r3, #0]
 8013e2c:	b410      	push	{r4}
 8013e2e:	6a1b      	ldr	r3, [r3, #32]
 8013e30:	4c04      	ldr	r4, [pc, #16]	; (8013e44 <_strtod_r+0x1c>)
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	bf08      	it	eq
 8013e36:	4623      	moveq	r3, r4
 8013e38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013e3c:	f7ff ba00 	b.w	8013240 <_strtod_l>
 8013e40:	2000000c 	.word	0x2000000c
 8013e44:	20000070 	.word	0x20000070

08013e48 <_strtol_l.isra.0>:
 8013e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e4c:	4680      	mov	r8, r0
 8013e4e:	4689      	mov	r9, r1
 8013e50:	4692      	mov	sl, r2
 8013e52:	461e      	mov	r6, r3
 8013e54:	460f      	mov	r7, r1
 8013e56:	463d      	mov	r5, r7
 8013e58:	9808      	ldr	r0, [sp, #32]
 8013e5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013e5e:	f001 fc67 	bl	8015730 <__locale_ctype_ptr_l>
 8013e62:	4420      	add	r0, r4
 8013e64:	7843      	ldrb	r3, [r0, #1]
 8013e66:	f013 0308 	ands.w	r3, r3, #8
 8013e6a:	d132      	bne.n	8013ed2 <_strtol_l.isra.0+0x8a>
 8013e6c:	2c2d      	cmp	r4, #45	; 0x2d
 8013e6e:	d132      	bne.n	8013ed6 <_strtol_l.isra.0+0x8e>
 8013e70:	787c      	ldrb	r4, [r7, #1]
 8013e72:	1cbd      	adds	r5, r7, #2
 8013e74:	2201      	movs	r2, #1
 8013e76:	2e00      	cmp	r6, #0
 8013e78:	d05d      	beq.n	8013f36 <_strtol_l.isra.0+0xee>
 8013e7a:	2e10      	cmp	r6, #16
 8013e7c:	d109      	bne.n	8013e92 <_strtol_l.isra.0+0x4a>
 8013e7e:	2c30      	cmp	r4, #48	; 0x30
 8013e80:	d107      	bne.n	8013e92 <_strtol_l.isra.0+0x4a>
 8013e82:	782b      	ldrb	r3, [r5, #0]
 8013e84:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013e88:	2b58      	cmp	r3, #88	; 0x58
 8013e8a:	d14f      	bne.n	8013f2c <_strtol_l.isra.0+0xe4>
 8013e8c:	786c      	ldrb	r4, [r5, #1]
 8013e8e:	2610      	movs	r6, #16
 8013e90:	3502      	adds	r5, #2
 8013e92:	2a00      	cmp	r2, #0
 8013e94:	bf14      	ite	ne
 8013e96:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8013e9a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8013e9e:	2700      	movs	r7, #0
 8013ea0:	fbb1 fcf6 	udiv	ip, r1, r6
 8013ea4:	4638      	mov	r0, r7
 8013ea6:	fb06 1e1c 	mls	lr, r6, ip, r1
 8013eaa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8013eae:	2b09      	cmp	r3, #9
 8013eb0:	d817      	bhi.n	8013ee2 <_strtol_l.isra.0+0x9a>
 8013eb2:	461c      	mov	r4, r3
 8013eb4:	42a6      	cmp	r6, r4
 8013eb6:	dd23      	ble.n	8013f00 <_strtol_l.isra.0+0xb8>
 8013eb8:	1c7b      	adds	r3, r7, #1
 8013eba:	d007      	beq.n	8013ecc <_strtol_l.isra.0+0x84>
 8013ebc:	4584      	cmp	ip, r0
 8013ebe:	d31c      	bcc.n	8013efa <_strtol_l.isra.0+0xb2>
 8013ec0:	d101      	bne.n	8013ec6 <_strtol_l.isra.0+0x7e>
 8013ec2:	45a6      	cmp	lr, r4
 8013ec4:	db19      	blt.n	8013efa <_strtol_l.isra.0+0xb2>
 8013ec6:	fb00 4006 	mla	r0, r0, r6, r4
 8013eca:	2701      	movs	r7, #1
 8013ecc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013ed0:	e7eb      	b.n	8013eaa <_strtol_l.isra.0+0x62>
 8013ed2:	462f      	mov	r7, r5
 8013ed4:	e7bf      	b.n	8013e56 <_strtol_l.isra.0+0xe>
 8013ed6:	2c2b      	cmp	r4, #43	; 0x2b
 8013ed8:	bf04      	itt	eq
 8013eda:	1cbd      	addeq	r5, r7, #2
 8013edc:	787c      	ldrbeq	r4, [r7, #1]
 8013ede:	461a      	mov	r2, r3
 8013ee0:	e7c9      	b.n	8013e76 <_strtol_l.isra.0+0x2e>
 8013ee2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8013ee6:	2b19      	cmp	r3, #25
 8013ee8:	d801      	bhi.n	8013eee <_strtol_l.isra.0+0xa6>
 8013eea:	3c37      	subs	r4, #55	; 0x37
 8013eec:	e7e2      	b.n	8013eb4 <_strtol_l.isra.0+0x6c>
 8013eee:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8013ef2:	2b19      	cmp	r3, #25
 8013ef4:	d804      	bhi.n	8013f00 <_strtol_l.isra.0+0xb8>
 8013ef6:	3c57      	subs	r4, #87	; 0x57
 8013ef8:	e7dc      	b.n	8013eb4 <_strtol_l.isra.0+0x6c>
 8013efa:	f04f 37ff 	mov.w	r7, #4294967295
 8013efe:	e7e5      	b.n	8013ecc <_strtol_l.isra.0+0x84>
 8013f00:	1c7b      	adds	r3, r7, #1
 8013f02:	d108      	bne.n	8013f16 <_strtol_l.isra.0+0xce>
 8013f04:	2322      	movs	r3, #34	; 0x22
 8013f06:	f8c8 3000 	str.w	r3, [r8]
 8013f0a:	4608      	mov	r0, r1
 8013f0c:	f1ba 0f00 	cmp.w	sl, #0
 8013f10:	d107      	bne.n	8013f22 <_strtol_l.isra.0+0xda>
 8013f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f16:	b102      	cbz	r2, 8013f1a <_strtol_l.isra.0+0xd2>
 8013f18:	4240      	negs	r0, r0
 8013f1a:	f1ba 0f00 	cmp.w	sl, #0
 8013f1e:	d0f8      	beq.n	8013f12 <_strtol_l.isra.0+0xca>
 8013f20:	b10f      	cbz	r7, 8013f26 <_strtol_l.isra.0+0xde>
 8013f22:	f105 39ff 	add.w	r9, r5, #4294967295
 8013f26:	f8ca 9000 	str.w	r9, [sl]
 8013f2a:	e7f2      	b.n	8013f12 <_strtol_l.isra.0+0xca>
 8013f2c:	2430      	movs	r4, #48	; 0x30
 8013f2e:	2e00      	cmp	r6, #0
 8013f30:	d1af      	bne.n	8013e92 <_strtol_l.isra.0+0x4a>
 8013f32:	2608      	movs	r6, #8
 8013f34:	e7ad      	b.n	8013e92 <_strtol_l.isra.0+0x4a>
 8013f36:	2c30      	cmp	r4, #48	; 0x30
 8013f38:	d0a3      	beq.n	8013e82 <_strtol_l.isra.0+0x3a>
 8013f3a:	260a      	movs	r6, #10
 8013f3c:	e7a9      	b.n	8013e92 <_strtol_l.isra.0+0x4a>
	...

08013f40 <_strtol_r>:
 8013f40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013f42:	4c06      	ldr	r4, [pc, #24]	; (8013f5c <_strtol_r+0x1c>)
 8013f44:	4d06      	ldr	r5, [pc, #24]	; (8013f60 <_strtol_r+0x20>)
 8013f46:	6824      	ldr	r4, [r4, #0]
 8013f48:	6a24      	ldr	r4, [r4, #32]
 8013f4a:	2c00      	cmp	r4, #0
 8013f4c:	bf08      	it	eq
 8013f4e:	462c      	moveq	r4, r5
 8013f50:	9400      	str	r4, [sp, #0]
 8013f52:	f7ff ff79 	bl	8013e48 <_strtol_l.isra.0>
 8013f56:	b003      	add	sp, #12
 8013f58:	bd30      	pop	{r4, r5, pc}
 8013f5a:	bf00      	nop
 8013f5c:	2000000c 	.word	0x2000000c
 8013f60:	20000070 	.word	0x20000070

08013f64 <_vsiprintf_r>:
 8013f64:	b500      	push	{lr}
 8013f66:	b09b      	sub	sp, #108	; 0x6c
 8013f68:	9100      	str	r1, [sp, #0]
 8013f6a:	9104      	str	r1, [sp, #16]
 8013f6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013f70:	9105      	str	r1, [sp, #20]
 8013f72:	9102      	str	r1, [sp, #8]
 8013f74:	4905      	ldr	r1, [pc, #20]	; (8013f8c <_vsiprintf_r+0x28>)
 8013f76:	9103      	str	r1, [sp, #12]
 8013f78:	4669      	mov	r1, sp
 8013f7a:	f002 f9a5 	bl	80162c8 <_svfiprintf_r>
 8013f7e:	9b00      	ldr	r3, [sp, #0]
 8013f80:	2200      	movs	r2, #0
 8013f82:	701a      	strb	r2, [r3, #0]
 8013f84:	b01b      	add	sp, #108	; 0x6c
 8013f86:	f85d fb04 	ldr.w	pc, [sp], #4
 8013f8a:	bf00      	nop
 8013f8c:	ffff0208 	.word	0xffff0208

08013f90 <vsiprintf>:
 8013f90:	4613      	mov	r3, r2
 8013f92:	460a      	mov	r2, r1
 8013f94:	4601      	mov	r1, r0
 8013f96:	4802      	ldr	r0, [pc, #8]	; (8013fa0 <vsiprintf+0x10>)
 8013f98:	6800      	ldr	r0, [r0, #0]
 8013f9a:	f7ff bfe3 	b.w	8013f64 <_vsiprintf_r>
 8013f9e:	bf00      	nop
 8013fa0:	2000000c 	.word	0x2000000c

08013fa4 <__swbuf_r>:
 8013fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fa6:	460e      	mov	r6, r1
 8013fa8:	4614      	mov	r4, r2
 8013faa:	4605      	mov	r5, r0
 8013fac:	b118      	cbz	r0, 8013fb6 <__swbuf_r+0x12>
 8013fae:	6983      	ldr	r3, [r0, #24]
 8013fb0:	b90b      	cbnz	r3, 8013fb6 <__swbuf_r+0x12>
 8013fb2:	f001 f80d 	bl	8014fd0 <__sinit>
 8013fb6:	4b21      	ldr	r3, [pc, #132]	; (801403c <__swbuf_r+0x98>)
 8013fb8:	429c      	cmp	r4, r3
 8013fba:	d12a      	bne.n	8014012 <__swbuf_r+0x6e>
 8013fbc:	686c      	ldr	r4, [r5, #4]
 8013fbe:	69a3      	ldr	r3, [r4, #24]
 8013fc0:	60a3      	str	r3, [r4, #8]
 8013fc2:	89a3      	ldrh	r3, [r4, #12]
 8013fc4:	071a      	lsls	r2, r3, #28
 8013fc6:	d52e      	bpl.n	8014026 <__swbuf_r+0x82>
 8013fc8:	6923      	ldr	r3, [r4, #16]
 8013fca:	b363      	cbz	r3, 8014026 <__swbuf_r+0x82>
 8013fcc:	6923      	ldr	r3, [r4, #16]
 8013fce:	6820      	ldr	r0, [r4, #0]
 8013fd0:	1ac0      	subs	r0, r0, r3
 8013fd2:	6963      	ldr	r3, [r4, #20]
 8013fd4:	b2f6      	uxtb	r6, r6
 8013fd6:	4283      	cmp	r3, r0
 8013fd8:	4637      	mov	r7, r6
 8013fda:	dc04      	bgt.n	8013fe6 <__swbuf_r+0x42>
 8013fdc:	4621      	mov	r1, r4
 8013fde:	4628      	mov	r0, r5
 8013fe0:	f000 ff8c 	bl	8014efc <_fflush_r>
 8013fe4:	bb28      	cbnz	r0, 8014032 <__swbuf_r+0x8e>
 8013fe6:	68a3      	ldr	r3, [r4, #8]
 8013fe8:	3b01      	subs	r3, #1
 8013fea:	60a3      	str	r3, [r4, #8]
 8013fec:	6823      	ldr	r3, [r4, #0]
 8013fee:	1c5a      	adds	r2, r3, #1
 8013ff0:	6022      	str	r2, [r4, #0]
 8013ff2:	701e      	strb	r6, [r3, #0]
 8013ff4:	6963      	ldr	r3, [r4, #20]
 8013ff6:	3001      	adds	r0, #1
 8013ff8:	4283      	cmp	r3, r0
 8013ffa:	d004      	beq.n	8014006 <__swbuf_r+0x62>
 8013ffc:	89a3      	ldrh	r3, [r4, #12]
 8013ffe:	07db      	lsls	r3, r3, #31
 8014000:	d519      	bpl.n	8014036 <__swbuf_r+0x92>
 8014002:	2e0a      	cmp	r6, #10
 8014004:	d117      	bne.n	8014036 <__swbuf_r+0x92>
 8014006:	4621      	mov	r1, r4
 8014008:	4628      	mov	r0, r5
 801400a:	f000 ff77 	bl	8014efc <_fflush_r>
 801400e:	b190      	cbz	r0, 8014036 <__swbuf_r+0x92>
 8014010:	e00f      	b.n	8014032 <__swbuf_r+0x8e>
 8014012:	4b0b      	ldr	r3, [pc, #44]	; (8014040 <__swbuf_r+0x9c>)
 8014014:	429c      	cmp	r4, r3
 8014016:	d101      	bne.n	801401c <__swbuf_r+0x78>
 8014018:	68ac      	ldr	r4, [r5, #8]
 801401a:	e7d0      	b.n	8013fbe <__swbuf_r+0x1a>
 801401c:	4b09      	ldr	r3, [pc, #36]	; (8014044 <__swbuf_r+0xa0>)
 801401e:	429c      	cmp	r4, r3
 8014020:	bf08      	it	eq
 8014022:	68ec      	ldreq	r4, [r5, #12]
 8014024:	e7cb      	b.n	8013fbe <__swbuf_r+0x1a>
 8014026:	4621      	mov	r1, r4
 8014028:	4628      	mov	r0, r5
 801402a:	f000 f81f 	bl	801406c <__swsetup_r>
 801402e:	2800      	cmp	r0, #0
 8014030:	d0cc      	beq.n	8013fcc <__swbuf_r+0x28>
 8014032:	f04f 37ff 	mov.w	r7, #4294967295
 8014036:	4638      	mov	r0, r7
 8014038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801403a:	bf00      	nop
 801403c:	08017a00 	.word	0x08017a00
 8014040:	08017a20 	.word	0x08017a20
 8014044:	080179e0 	.word	0x080179e0

08014048 <_write_r>:
 8014048:	b538      	push	{r3, r4, r5, lr}
 801404a:	4c07      	ldr	r4, [pc, #28]	; (8014068 <_write_r+0x20>)
 801404c:	4605      	mov	r5, r0
 801404e:	4608      	mov	r0, r1
 8014050:	4611      	mov	r1, r2
 8014052:	2200      	movs	r2, #0
 8014054:	6022      	str	r2, [r4, #0]
 8014056:	461a      	mov	r2, r3
 8014058:	f7ef fb96 	bl	8003788 <_write>
 801405c:	1c43      	adds	r3, r0, #1
 801405e:	d102      	bne.n	8014066 <_write_r+0x1e>
 8014060:	6823      	ldr	r3, [r4, #0]
 8014062:	b103      	cbz	r3, 8014066 <_write_r+0x1e>
 8014064:	602b      	str	r3, [r5, #0]
 8014066:	bd38      	pop	{r3, r4, r5, pc}
 8014068:	20018260 	.word	0x20018260

0801406c <__swsetup_r>:
 801406c:	4b32      	ldr	r3, [pc, #200]	; (8014138 <__swsetup_r+0xcc>)
 801406e:	b570      	push	{r4, r5, r6, lr}
 8014070:	681d      	ldr	r5, [r3, #0]
 8014072:	4606      	mov	r6, r0
 8014074:	460c      	mov	r4, r1
 8014076:	b125      	cbz	r5, 8014082 <__swsetup_r+0x16>
 8014078:	69ab      	ldr	r3, [r5, #24]
 801407a:	b913      	cbnz	r3, 8014082 <__swsetup_r+0x16>
 801407c:	4628      	mov	r0, r5
 801407e:	f000 ffa7 	bl	8014fd0 <__sinit>
 8014082:	4b2e      	ldr	r3, [pc, #184]	; (801413c <__swsetup_r+0xd0>)
 8014084:	429c      	cmp	r4, r3
 8014086:	d10f      	bne.n	80140a8 <__swsetup_r+0x3c>
 8014088:	686c      	ldr	r4, [r5, #4]
 801408a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801408e:	b29a      	uxth	r2, r3
 8014090:	0715      	lsls	r5, r2, #28
 8014092:	d42c      	bmi.n	80140ee <__swsetup_r+0x82>
 8014094:	06d0      	lsls	r0, r2, #27
 8014096:	d411      	bmi.n	80140bc <__swsetup_r+0x50>
 8014098:	2209      	movs	r2, #9
 801409a:	6032      	str	r2, [r6, #0]
 801409c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80140a0:	81a3      	strh	r3, [r4, #12]
 80140a2:	f04f 30ff 	mov.w	r0, #4294967295
 80140a6:	e03e      	b.n	8014126 <__swsetup_r+0xba>
 80140a8:	4b25      	ldr	r3, [pc, #148]	; (8014140 <__swsetup_r+0xd4>)
 80140aa:	429c      	cmp	r4, r3
 80140ac:	d101      	bne.n	80140b2 <__swsetup_r+0x46>
 80140ae:	68ac      	ldr	r4, [r5, #8]
 80140b0:	e7eb      	b.n	801408a <__swsetup_r+0x1e>
 80140b2:	4b24      	ldr	r3, [pc, #144]	; (8014144 <__swsetup_r+0xd8>)
 80140b4:	429c      	cmp	r4, r3
 80140b6:	bf08      	it	eq
 80140b8:	68ec      	ldreq	r4, [r5, #12]
 80140ba:	e7e6      	b.n	801408a <__swsetup_r+0x1e>
 80140bc:	0751      	lsls	r1, r2, #29
 80140be:	d512      	bpl.n	80140e6 <__swsetup_r+0x7a>
 80140c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80140c2:	b141      	cbz	r1, 80140d6 <__swsetup_r+0x6a>
 80140c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80140c8:	4299      	cmp	r1, r3
 80140ca:	d002      	beq.n	80140d2 <__swsetup_r+0x66>
 80140cc:	4630      	mov	r0, r6
 80140ce:	f001 fff9 	bl	80160c4 <_free_r>
 80140d2:	2300      	movs	r3, #0
 80140d4:	6363      	str	r3, [r4, #52]	; 0x34
 80140d6:	89a3      	ldrh	r3, [r4, #12]
 80140d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80140dc:	81a3      	strh	r3, [r4, #12]
 80140de:	2300      	movs	r3, #0
 80140e0:	6063      	str	r3, [r4, #4]
 80140e2:	6923      	ldr	r3, [r4, #16]
 80140e4:	6023      	str	r3, [r4, #0]
 80140e6:	89a3      	ldrh	r3, [r4, #12]
 80140e8:	f043 0308 	orr.w	r3, r3, #8
 80140ec:	81a3      	strh	r3, [r4, #12]
 80140ee:	6923      	ldr	r3, [r4, #16]
 80140f0:	b94b      	cbnz	r3, 8014106 <__swsetup_r+0x9a>
 80140f2:	89a3      	ldrh	r3, [r4, #12]
 80140f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80140f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80140fc:	d003      	beq.n	8014106 <__swsetup_r+0x9a>
 80140fe:	4621      	mov	r1, r4
 8014100:	4630      	mov	r0, r6
 8014102:	f001 fb6d 	bl	80157e0 <__smakebuf_r>
 8014106:	89a2      	ldrh	r2, [r4, #12]
 8014108:	f012 0301 	ands.w	r3, r2, #1
 801410c:	d00c      	beq.n	8014128 <__swsetup_r+0xbc>
 801410e:	2300      	movs	r3, #0
 8014110:	60a3      	str	r3, [r4, #8]
 8014112:	6963      	ldr	r3, [r4, #20]
 8014114:	425b      	negs	r3, r3
 8014116:	61a3      	str	r3, [r4, #24]
 8014118:	6923      	ldr	r3, [r4, #16]
 801411a:	b953      	cbnz	r3, 8014132 <__swsetup_r+0xc6>
 801411c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014120:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8014124:	d1ba      	bne.n	801409c <__swsetup_r+0x30>
 8014126:	bd70      	pop	{r4, r5, r6, pc}
 8014128:	0792      	lsls	r2, r2, #30
 801412a:	bf58      	it	pl
 801412c:	6963      	ldrpl	r3, [r4, #20]
 801412e:	60a3      	str	r3, [r4, #8]
 8014130:	e7f2      	b.n	8014118 <__swsetup_r+0xac>
 8014132:	2000      	movs	r0, #0
 8014134:	e7f7      	b.n	8014126 <__swsetup_r+0xba>
 8014136:	bf00      	nop
 8014138:	2000000c 	.word	0x2000000c
 801413c:	08017a00 	.word	0x08017a00
 8014140:	08017a20 	.word	0x08017a20
 8014144:	080179e0 	.word	0x080179e0

08014148 <_close_r>:
 8014148:	b538      	push	{r3, r4, r5, lr}
 801414a:	4c06      	ldr	r4, [pc, #24]	; (8014164 <_close_r+0x1c>)
 801414c:	2300      	movs	r3, #0
 801414e:	4605      	mov	r5, r0
 8014150:	4608      	mov	r0, r1
 8014152:	6023      	str	r3, [r4, #0]
 8014154:	f7f1 f877 	bl	8005246 <_close>
 8014158:	1c43      	adds	r3, r0, #1
 801415a:	d102      	bne.n	8014162 <_close_r+0x1a>
 801415c:	6823      	ldr	r3, [r4, #0]
 801415e:	b103      	cbz	r3, 8014162 <_close_r+0x1a>
 8014160:	602b      	str	r3, [r5, #0]
 8014162:	bd38      	pop	{r3, r4, r5, pc}
 8014164:	20018260 	.word	0x20018260

08014168 <quorem>:
 8014168:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801416c:	6903      	ldr	r3, [r0, #16]
 801416e:	690c      	ldr	r4, [r1, #16]
 8014170:	42a3      	cmp	r3, r4
 8014172:	4680      	mov	r8, r0
 8014174:	f2c0 8082 	blt.w	801427c <quorem+0x114>
 8014178:	3c01      	subs	r4, #1
 801417a:	f101 0714 	add.w	r7, r1, #20
 801417e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8014182:	f100 0614 	add.w	r6, r0, #20
 8014186:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801418a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801418e:	eb06 030c 	add.w	r3, r6, ip
 8014192:	3501      	adds	r5, #1
 8014194:	eb07 090c 	add.w	r9, r7, ip
 8014198:	9301      	str	r3, [sp, #4]
 801419a:	fbb0 f5f5 	udiv	r5, r0, r5
 801419e:	b395      	cbz	r5, 8014206 <quorem+0x9e>
 80141a0:	f04f 0a00 	mov.w	sl, #0
 80141a4:	4638      	mov	r0, r7
 80141a6:	46b6      	mov	lr, r6
 80141a8:	46d3      	mov	fp, sl
 80141aa:	f850 2b04 	ldr.w	r2, [r0], #4
 80141ae:	b293      	uxth	r3, r2
 80141b0:	fb05 a303 	mla	r3, r5, r3, sl
 80141b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80141b8:	b29b      	uxth	r3, r3
 80141ba:	ebab 0303 	sub.w	r3, fp, r3
 80141be:	0c12      	lsrs	r2, r2, #16
 80141c0:	f8de b000 	ldr.w	fp, [lr]
 80141c4:	fb05 a202 	mla	r2, r5, r2, sl
 80141c8:	fa13 f38b 	uxtah	r3, r3, fp
 80141cc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80141d0:	fa1f fb82 	uxth.w	fp, r2
 80141d4:	f8de 2000 	ldr.w	r2, [lr]
 80141d8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80141dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80141e0:	b29b      	uxth	r3, r3
 80141e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80141e6:	4581      	cmp	r9, r0
 80141e8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80141ec:	f84e 3b04 	str.w	r3, [lr], #4
 80141f0:	d2db      	bcs.n	80141aa <quorem+0x42>
 80141f2:	f856 300c 	ldr.w	r3, [r6, ip]
 80141f6:	b933      	cbnz	r3, 8014206 <quorem+0x9e>
 80141f8:	9b01      	ldr	r3, [sp, #4]
 80141fa:	3b04      	subs	r3, #4
 80141fc:	429e      	cmp	r6, r3
 80141fe:	461a      	mov	r2, r3
 8014200:	d330      	bcc.n	8014264 <quorem+0xfc>
 8014202:	f8c8 4010 	str.w	r4, [r8, #16]
 8014206:	4640      	mov	r0, r8
 8014208:	f001 fda2 	bl	8015d50 <__mcmp>
 801420c:	2800      	cmp	r0, #0
 801420e:	db25      	blt.n	801425c <quorem+0xf4>
 8014210:	3501      	adds	r5, #1
 8014212:	4630      	mov	r0, r6
 8014214:	f04f 0c00 	mov.w	ip, #0
 8014218:	f857 2b04 	ldr.w	r2, [r7], #4
 801421c:	f8d0 e000 	ldr.w	lr, [r0]
 8014220:	b293      	uxth	r3, r2
 8014222:	ebac 0303 	sub.w	r3, ip, r3
 8014226:	0c12      	lsrs	r2, r2, #16
 8014228:	fa13 f38e 	uxtah	r3, r3, lr
 801422c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014230:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014234:	b29b      	uxth	r3, r3
 8014236:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801423a:	45b9      	cmp	r9, r7
 801423c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014240:	f840 3b04 	str.w	r3, [r0], #4
 8014244:	d2e8      	bcs.n	8014218 <quorem+0xb0>
 8014246:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801424a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801424e:	b92a      	cbnz	r2, 801425c <quorem+0xf4>
 8014250:	3b04      	subs	r3, #4
 8014252:	429e      	cmp	r6, r3
 8014254:	461a      	mov	r2, r3
 8014256:	d30b      	bcc.n	8014270 <quorem+0x108>
 8014258:	f8c8 4010 	str.w	r4, [r8, #16]
 801425c:	4628      	mov	r0, r5
 801425e:	b003      	add	sp, #12
 8014260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014264:	6812      	ldr	r2, [r2, #0]
 8014266:	3b04      	subs	r3, #4
 8014268:	2a00      	cmp	r2, #0
 801426a:	d1ca      	bne.n	8014202 <quorem+0x9a>
 801426c:	3c01      	subs	r4, #1
 801426e:	e7c5      	b.n	80141fc <quorem+0x94>
 8014270:	6812      	ldr	r2, [r2, #0]
 8014272:	3b04      	subs	r3, #4
 8014274:	2a00      	cmp	r2, #0
 8014276:	d1ef      	bne.n	8014258 <quorem+0xf0>
 8014278:	3c01      	subs	r4, #1
 801427a:	e7ea      	b.n	8014252 <quorem+0xea>
 801427c:	2000      	movs	r0, #0
 801427e:	e7ee      	b.n	801425e <quorem+0xf6>

08014280 <_dtoa_r>:
 8014280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014284:	ec57 6b10 	vmov	r6, r7, d0
 8014288:	b097      	sub	sp, #92	; 0x5c
 801428a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801428c:	9106      	str	r1, [sp, #24]
 801428e:	4604      	mov	r4, r0
 8014290:	920b      	str	r2, [sp, #44]	; 0x2c
 8014292:	9312      	str	r3, [sp, #72]	; 0x48
 8014294:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014298:	e9cd 6700 	strd	r6, r7, [sp]
 801429c:	b93d      	cbnz	r5, 80142ae <_dtoa_r+0x2e>
 801429e:	2010      	movs	r0, #16
 80142a0:	f001 fade 	bl	8015860 <malloc>
 80142a4:	6260      	str	r0, [r4, #36]	; 0x24
 80142a6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80142aa:	6005      	str	r5, [r0, #0]
 80142ac:	60c5      	str	r5, [r0, #12]
 80142ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80142b0:	6819      	ldr	r1, [r3, #0]
 80142b2:	b151      	cbz	r1, 80142ca <_dtoa_r+0x4a>
 80142b4:	685a      	ldr	r2, [r3, #4]
 80142b6:	604a      	str	r2, [r1, #4]
 80142b8:	2301      	movs	r3, #1
 80142ba:	4093      	lsls	r3, r2
 80142bc:	608b      	str	r3, [r1, #8]
 80142be:	4620      	mov	r0, r4
 80142c0:	f001 fb27 	bl	8015912 <_Bfree>
 80142c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80142c6:	2200      	movs	r2, #0
 80142c8:	601a      	str	r2, [r3, #0]
 80142ca:	1e3b      	subs	r3, r7, #0
 80142cc:	bfbb      	ittet	lt
 80142ce:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80142d2:	9301      	strlt	r3, [sp, #4]
 80142d4:	2300      	movge	r3, #0
 80142d6:	2201      	movlt	r2, #1
 80142d8:	bfac      	ite	ge
 80142da:	f8c8 3000 	strge.w	r3, [r8]
 80142de:	f8c8 2000 	strlt.w	r2, [r8]
 80142e2:	4baf      	ldr	r3, [pc, #700]	; (80145a0 <_dtoa_r+0x320>)
 80142e4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80142e8:	ea33 0308 	bics.w	r3, r3, r8
 80142ec:	d114      	bne.n	8014318 <_dtoa_r+0x98>
 80142ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80142f0:	f242 730f 	movw	r3, #9999	; 0x270f
 80142f4:	6013      	str	r3, [r2, #0]
 80142f6:	9b00      	ldr	r3, [sp, #0]
 80142f8:	b923      	cbnz	r3, 8014304 <_dtoa_r+0x84>
 80142fa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80142fe:	2800      	cmp	r0, #0
 8014300:	f000 8542 	beq.w	8014d88 <_dtoa_r+0xb08>
 8014304:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014306:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80145b4 <_dtoa_r+0x334>
 801430a:	2b00      	cmp	r3, #0
 801430c:	f000 8544 	beq.w	8014d98 <_dtoa_r+0xb18>
 8014310:	f10b 0303 	add.w	r3, fp, #3
 8014314:	f000 bd3e 	b.w	8014d94 <_dtoa_r+0xb14>
 8014318:	e9dd 6700 	ldrd	r6, r7, [sp]
 801431c:	2200      	movs	r2, #0
 801431e:	2300      	movs	r3, #0
 8014320:	4630      	mov	r0, r6
 8014322:	4639      	mov	r1, r7
 8014324:	f7ec fbe8 	bl	8000af8 <__aeabi_dcmpeq>
 8014328:	4681      	mov	r9, r0
 801432a:	b168      	cbz	r0, 8014348 <_dtoa_r+0xc8>
 801432c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801432e:	2301      	movs	r3, #1
 8014330:	6013      	str	r3, [r2, #0]
 8014332:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014334:	2b00      	cmp	r3, #0
 8014336:	f000 8524 	beq.w	8014d82 <_dtoa_r+0xb02>
 801433a:	4b9a      	ldr	r3, [pc, #616]	; (80145a4 <_dtoa_r+0x324>)
 801433c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801433e:	f103 3bff 	add.w	fp, r3, #4294967295
 8014342:	6013      	str	r3, [r2, #0]
 8014344:	f000 bd28 	b.w	8014d98 <_dtoa_r+0xb18>
 8014348:	aa14      	add	r2, sp, #80	; 0x50
 801434a:	a915      	add	r1, sp, #84	; 0x54
 801434c:	ec47 6b10 	vmov	d0, r6, r7
 8014350:	4620      	mov	r0, r4
 8014352:	f001 fdeb 	bl	8015f2c <__d2b>
 8014356:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801435a:	9004      	str	r0, [sp, #16]
 801435c:	2d00      	cmp	r5, #0
 801435e:	d07c      	beq.n	801445a <_dtoa_r+0x1da>
 8014360:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014364:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8014368:	46b2      	mov	sl, r6
 801436a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801436e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8014372:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8014376:	2200      	movs	r2, #0
 8014378:	4b8b      	ldr	r3, [pc, #556]	; (80145a8 <_dtoa_r+0x328>)
 801437a:	4650      	mov	r0, sl
 801437c:	4659      	mov	r1, fp
 801437e:	f7eb ff9b 	bl	80002b8 <__aeabi_dsub>
 8014382:	a381      	add	r3, pc, #516	; (adr r3, 8014588 <_dtoa_r+0x308>)
 8014384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014388:	f7ec f94e 	bl	8000628 <__aeabi_dmul>
 801438c:	a380      	add	r3, pc, #512	; (adr r3, 8014590 <_dtoa_r+0x310>)
 801438e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014392:	f7eb ff93 	bl	80002bc <__adddf3>
 8014396:	4606      	mov	r6, r0
 8014398:	4628      	mov	r0, r5
 801439a:	460f      	mov	r7, r1
 801439c:	f7ec f8da 	bl	8000554 <__aeabi_i2d>
 80143a0:	a37d      	add	r3, pc, #500	; (adr r3, 8014598 <_dtoa_r+0x318>)
 80143a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143a6:	f7ec f93f 	bl	8000628 <__aeabi_dmul>
 80143aa:	4602      	mov	r2, r0
 80143ac:	460b      	mov	r3, r1
 80143ae:	4630      	mov	r0, r6
 80143b0:	4639      	mov	r1, r7
 80143b2:	f7eb ff83 	bl	80002bc <__adddf3>
 80143b6:	4606      	mov	r6, r0
 80143b8:	460f      	mov	r7, r1
 80143ba:	f7ec fbe5 	bl	8000b88 <__aeabi_d2iz>
 80143be:	2200      	movs	r2, #0
 80143c0:	4682      	mov	sl, r0
 80143c2:	2300      	movs	r3, #0
 80143c4:	4630      	mov	r0, r6
 80143c6:	4639      	mov	r1, r7
 80143c8:	f7ec fba0 	bl	8000b0c <__aeabi_dcmplt>
 80143cc:	b148      	cbz	r0, 80143e2 <_dtoa_r+0x162>
 80143ce:	4650      	mov	r0, sl
 80143d0:	f7ec f8c0 	bl	8000554 <__aeabi_i2d>
 80143d4:	4632      	mov	r2, r6
 80143d6:	463b      	mov	r3, r7
 80143d8:	f7ec fb8e 	bl	8000af8 <__aeabi_dcmpeq>
 80143dc:	b908      	cbnz	r0, 80143e2 <_dtoa_r+0x162>
 80143de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80143e2:	f1ba 0f16 	cmp.w	sl, #22
 80143e6:	d859      	bhi.n	801449c <_dtoa_r+0x21c>
 80143e8:	4970      	ldr	r1, [pc, #448]	; (80145ac <_dtoa_r+0x32c>)
 80143ea:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80143ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80143f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80143f6:	f7ec fba7 	bl	8000b48 <__aeabi_dcmpgt>
 80143fa:	2800      	cmp	r0, #0
 80143fc:	d050      	beq.n	80144a0 <_dtoa_r+0x220>
 80143fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014402:	2300      	movs	r3, #0
 8014404:	930f      	str	r3, [sp, #60]	; 0x3c
 8014406:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014408:	1b5d      	subs	r5, r3, r5
 801440a:	f1b5 0801 	subs.w	r8, r5, #1
 801440e:	bf49      	itett	mi
 8014410:	f1c5 0301 	rsbmi	r3, r5, #1
 8014414:	2300      	movpl	r3, #0
 8014416:	9305      	strmi	r3, [sp, #20]
 8014418:	f04f 0800 	movmi.w	r8, #0
 801441c:	bf58      	it	pl
 801441e:	9305      	strpl	r3, [sp, #20]
 8014420:	f1ba 0f00 	cmp.w	sl, #0
 8014424:	db3e      	blt.n	80144a4 <_dtoa_r+0x224>
 8014426:	2300      	movs	r3, #0
 8014428:	44d0      	add	r8, sl
 801442a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801442e:	9307      	str	r3, [sp, #28]
 8014430:	9b06      	ldr	r3, [sp, #24]
 8014432:	2b09      	cmp	r3, #9
 8014434:	f200 8090 	bhi.w	8014558 <_dtoa_r+0x2d8>
 8014438:	2b05      	cmp	r3, #5
 801443a:	bfc4      	itt	gt
 801443c:	3b04      	subgt	r3, #4
 801443e:	9306      	strgt	r3, [sp, #24]
 8014440:	9b06      	ldr	r3, [sp, #24]
 8014442:	f1a3 0302 	sub.w	r3, r3, #2
 8014446:	bfcc      	ite	gt
 8014448:	2500      	movgt	r5, #0
 801444a:	2501      	movle	r5, #1
 801444c:	2b03      	cmp	r3, #3
 801444e:	f200 808f 	bhi.w	8014570 <_dtoa_r+0x2f0>
 8014452:	e8df f003 	tbb	[pc, r3]
 8014456:	7f7d      	.short	0x7f7d
 8014458:	7131      	.short	0x7131
 801445a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 801445e:	441d      	add	r5, r3
 8014460:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8014464:	2820      	cmp	r0, #32
 8014466:	dd13      	ble.n	8014490 <_dtoa_r+0x210>
 8014468:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801446c:	9b00      	ldr	r3, [sp, #0]
 801446e:	fa08 f800 	lsl.w	r8, r8, r0
 8014472:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8014476:	fa23 f000 	lsr.w	r0, r3, r0
 801447a:	ea48 0000 	orr.w	r0, r8, r0
 801447e:	f7ec f859 	bl	8000534 <__aeabi_ui2d>
 8014482:	2301      	movs	r3, #1
 8014484:	4682      	mov	sl, r0
 8014486:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801448a:	3d01      	subs	r5, #1
 801448c:	9313      	str	r3, [sp, #76]	; 0x4c
 801448e:	e772      	b.n	8014376 <_dtoa_r+0xf6>
 8014490:	9b00      	ldr	r3, [sp, #0]
 8014492:	f1c0 0020 	rsb	r0, r0, #32
 8014496:	fa03 f000 	lsl.w	r0, r3, r0
 801449a:	e7f0      	b.n	801447e <_dtoa_r+0x1fe>
 801449c:	2301      	movs	r3, #1
 801449e:	e7b1      	b.n	8014404 <_dtoa_r+0x184>
 80144a0:	900f      	str	r0, [sp, #60]	; 0x3c
 80144a2:	e7b0      	b.n	8014406 <_dtoa_r+0x186>
 80144a4:	9b05      	ldr	r3, [sp, #20]
 80144a6:	eba3 030a 	sub.w	r3, r3, sl
 80144aa:	9305      	str	r3, [sp, #20]
 80144ac:	f1ca 0300 	rsb	r3, sl, #0
 80144b0:	9307      	str	r3, [sp, #28]
 80144b2:	2300      	movs	r3, #0
 80144b4:	930e      	str	r3, [sp, #56]	; 0x38
 80144b6:	e7bb      	b.n	8014430 <_dtoa_r+0x1b0>
 80144b8:	2301      	movs	r3, #1
 80144ba:	930a      	str	r3, [sp, #40]	; 0x28
 80144bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80144be:	2b00      	cmp	r3, #0
 80144c0:	dd59      	ble.n	8014576 <_dtoa_r+0x2f6>
 80144c2:	9302      	str	r3, [sp, #8]
 80144c4:	4699      	mov	r9, r3
 80144c6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80144c8:	2200      	movs	r2, #0
 80144ca:	6072      	str	r2, [r6, #4]
 80144cc:	2204      	movs	r2, #4
 80144ce:	f102 0014 	add.w	r0, r2, #20
 80144d2:	4298      	cmp	r0, r3
 80144d4:	6871      	ldr	r1, [r6, #4]
 80144d6:	d953      	bls.n	8014580 <_dtoa_r+0x300>
 80144d8:	4620      	mov	r0, r4
 80144da:	f001 f9e6 	bl	80158aa <_Balloc>
 80144de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80144e0:	6030      	str	r0, [r6, #0]
 80144e2:	f1b9 0f0e 	cmp.w	r9, #14
 80144e6:	f8d3 b000 	ldr.w	fp, [r3]
 80144ea:	f200 80e6 	bhi.w	80146ba <_dtoa_r+0x43a>
 80144ee:	2d00      	cmp	r5, #0
 80144f0:	f000 80e3 	beq.w	80146ba <_dtoa_r+0x43a>
 80144f4:	ed9d 7b00 	vldr	d7, [sp]
 80144f8:	f1ba 0f00 	cmp.w	sl, #0
 80144fc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8014500:	dd74      	ble.n	80145ec <_dtoa_r+0x36c>
 8014502:	4a2a      	ldr	r2, [pc, #168]	; (80145ac <_dtoa_r+0x32c>)
 8014504:	f00a 030f 	and.w	r3, sl, #15
 8014508:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801450c:	ed93 7b00 	vldr	d7, [r3]
 8014510:	ea4f 162a 	mov.w	r6, sl, asr #4
 8014514:	06f0      	lsls	r0, r6, #27
 8014516:	ed8d 7b08 	vstr	d7, [sp, #32]
 801451a:	d565      	bpl.n	80145e8 <_dtoa_r+0x368>
 801451c:	4b24      	ldr	r3, [pc, #144]	; (80145b0 <_dtoa_r+0x330>)
 801451e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014522:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014526:	f7ec f9a9 	bl	800087c <__aeabi_ddiv>
 801452a:	e9cd 0100 	strd	r0, r1, [sp]
 801452e:	f006 060f 	and.w	r6, r6, #15
 8014532:	2503      	movs	r5, #3
 8014534:	4f1e      	ldr	r7, [pc, #120]	; (80145b0 <_dtoa_r+0x330>)
 8014536:	e04c      	b.n	80145d2 <_dtoa_r+0x352>
 8014538:	2301      	movs	r3, #1
 801453a:	930a      	str	r3, [sp, #40]	; 0x28
 801453c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801453e:	4453      	add	r3, sl
 8014540:	f103 0901 	add.w	r9, r3, #1
 8014544:	9302      	str	r3, [sp, #8]
 8014546:	464b      	mov	r3, r9
 8014548:	2b01      	cmp	r3, #1
 801454a:	bfb8      	it	lt
 801454c:	2301      	movlt	r3, #1
 801454e:	e7ba      	b.n	80144c6 <_dtoa_r+0x246>
 8014550:	2300      	movs	r3, #0
 8014552:	e7b2      	b.n	80144ba <_dtoa_r+0x23a>
 8014554:	2300      	movs	r3, #0
 8014556:	e7f0      	b.n	801453a <_dtoa_r+0x2ba>
 8014558:	2501      	movs	r5, #1
 801455a:	2300      	movs	r3, #0
 801455c:	9306      	str	r3, [sp, #24]
 801455e:	950a      	str	r5, [sp, #40]	; 0x28
 8014560:	f04f 33ff 	mov.w	r3, #4294967295
 8014564:	9302      	str	r3, [sp, #8]
 8014566:	4699      	mov	r9, r3
 8014568:	2200      	movs	r2, #0
 801456a:	2312      	movs	r3, #18
 801456c:	920b      	str	r2, [sp, #44]	; 0x2c
 801456e:	e7aa      	b.n	80144c6 <_dtoa_r+0x246>
 8014570:	2301      	movs	r3, #1
 8014572:	930a      	str	r3, [sp, #40]	; 0x28
 8014574:	e7f4      	b.n	8014560 <_dtoa_r+0x2e0>
 8014576:	2301      	movs	r3, #1
 8014578:	9302      	str	r3, [sp, #8]
 801457a:	4699      	mov	r9, r3
 801457c:	461a      	mov	r2, r3
 801457e:	e7f5      	b.n	801456c <_dtoa_r+0x2ec>
 8014580:	3101      	adds	r1, #1
 8014582:	6071      	str	r1, [r6, #4]
 8014584:	0052      	lsls	r2, r2, #1
 8014586:	e7a2      	b.n	80144ce <_dtoa_r+0x24e>
 8014588:	636f4361 	.word	0x636f4361
 801458c:	3fd287a7 	.word	0x3fd287a7
 8014590:	8b60c8b3 	.word	0x8b60c8b3
 8014594:	3fc68a28 	.word	0x3fc68a28
 8014598:	509f79fb 	.word	0x509f79fb
 801459c:	3fd34413 	.word	0x3fd34413
 80145a0:	7ff00000 	.word	0x7ff00000
 80145a4:	08017b74 	.word	0x08017b74
 80145a8:	3ff80000 	.word	0x3ff80000
 80145ac:	08017a78 	.word	0x08017a78
 80145b0:	08017a50 	.word	0x08017a50
 80145b4:	080179d9 	.word	0x080179d9
 80145b8:	07f1      	lsls	r1, r6, #31
 80145ba:	d508      	bpl.n	80145ce <_dtoa_r+0x34e>
 80145bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80145c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80145c4:	f7ec f830 	bl	8000628 <__aeabi_dmul>
 80145c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80145cc:	3501      	adds	r5, #1
 80145ce:	1076      	asrs	r6, r6, #1
 80145d0:	3708      	adds	r7, #8
 80145d2:	2e00      	cmp	r6, #0
 80145d4:	d1f0      	bne.n	80145b8 <_dtoa_r+0x338>
 80145d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80145da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80145de:	f7ec f94d 	bl	800087c <__aeabi_ddiv>
 80145e2:	e9cd 0100 	strd	r0, r1, [sp]
 80145e6:	e01a      	b.n	801461e <_dtoa_r+0x39e>
 80145e8:	2502      	movs	r5, #2
 80145ea:	e7a3      	b.n	8014534 <_dtoa_r+0x2b4>
 80145ec:	f000 80a0 	beq.w	8014730 <_dtoa_r+0x4b0>
 80145f0:	f1ca 0600 	rsb	r6, sl, #0
 80145f4:	4b9f      	ldr	r3, [pc, #636]	; (8014874 <_dtoa_r+0x5f4>)
 80145f6:	4fa0      	ldr	r7, [pc, #640]	; (8014878 <_dtoa_r+0x5f8>)
 80145f8:	f006 020f 	and.w	r2, r6, #15
 80145fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014604:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014608:	f7ec f80e 	bl	8000628 <__aeabi_dmul>
 801460c:	e9cd 0100 	strd	r0, r1, [sp]
 8014610:	1136      	asrs	r6, r6, #4
 8014612:	2300      	movs	r3, #0
 8014614:	2502      	movs	r5, #2
 8014616:	2e00      	cmp	r6, #0
 8014618:	d17f      	bne.n	801471a <_dtoa_r+0x49a>
 801461a:	2b00      	cmp	r3, #0
 801461c:	d1e1      	bne.n	80145e2 <_dtoa_r+0x362>
 801461e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014620:	2b00      	cmp	r3, #0
 8014622:	f000 8087 	beq.w	8014734 <_dtoa_r+0x4b4>
 8014626:	e9dd 6700 	ldrd	r6, r7, [sp]
 801462a:	2200      	movs	r2, #0
 801462c:	4b93      	ldr	r3, [pc, #588]	; (801487c <_dtoa_r+0x5fc>)
 801462e:	4630      	mov	r0, r6
 8014630:	4639      	mov	r1, r7
 8014632:	f7ec fa6b 	bl	8000b0c <__aeabi_dcmplt>
 8014636:	2800      	cmp	r0, #0
 8014638:	d07c      	beq.n	8014734 <_dtoa_r+0x4b4>
 801463a:	f1b9 0f00 	cmp.w	r9, #0
 801463e:	d079      	beq.n	8014734 <_dtoa_r+0x4b4>
 8014640:	9b02      	ldr	r3, [sp, #8]
 8014642:	2b00      	cmp	r3, #0
 8014644:	dd35      	ble.n	80146b2 <_dtoa_r+0x432>
 8014646:	f10a 33ff 	add.w	r3, sl, #4294967295
 801464a:	9308      	str	r3, [sp, #32]
 801464c:	4639      	mov	r1, r7
 801464e:	2200      	movs	r2, #0
 8014650:	4b8b      	ldr	r3, [pc, #556]	; (8014880 <_dtoa_r+0x600>)
 8014652:	4630      	mov	r0, r6
 8014654:	f7eb ffe8 	bl	8000628 <__aeabi_dmul>
 8014658:	e9cd 0100 	strd	r0, r1, [sp]
 801465c:	9f02      	ldr	r7, [sp, #8]
 801465e:	3501      	adds	r5, #1
 8014660:	4628      	mov	r0, r5
 8014662:	f7eb ff77 	bl	8000554 <__aeabi_i2d>
 8014666:	e9dd 2300 	ldrd	r2, r3, [sp]
 801466a:	f7eb ffdd 	bl	8000628 <__aeabi_dmul>
 801466e:	2200      	movs	r2, #0
 8014670:	4b84      	ldr	r3, [pc, #528]	; (8014884 <_dtoa_r+0x604>)
 8014672:	f7eb fe23 	bl	80002bc <__adddf3>
 8014676:	4605      	mov	r5, r0
 8014678:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801467c:	2f00      	cmp	r7, #0
 801467e:	d15d      	bne.n	801473c <_dtoa_r+0x4bc>
 8014680:	2200      	movs	r2, #0
 8014682:	4b81      	ldr	r3, [pc, #516]	; (8014888 <_dtoa_r+0x608>)
 8014684:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014688:	f7eb fe16 	bl	80002b8 <__aeabi_dsub>
 801468c:	462a      	mov	r2, r5
 801468e:	4633      	mov	r3, r6
 8014690:	e9cd 0100 	strd	r0, r1, [sp]
 8014694:	f7ec fa58 	bl	8000b48 <__aeabi_dcmpgt>
 8014698:	2800      	cmp	r0, #0
 801469a:	f040 8288 	bne.w	8014bae <_dtoa_r+0x92e>
 801469e:	462a      	mov	r2, r5
 80146a0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80146a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80146a8:	f7ec fa30 	bl	8000b0c <__aeabi_dcmplt>
 80146ac:	2800      	cmp	r0, #0
 80146ae:	f040 827c 	bne.w	8014baa <_dtoa_r+0x92a>
 80146b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80146b6:	e9cd 2300 	strd	r2, r3, [sp]
 80146ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80146bc:	2b00      	cmp	r3, #0
 80146be:	f2c0 8150 	blt.w	8014962 <_dtoa_r+0x6e2>
 80146c2:	f1ba 0f0e 	cmp.w	sl, #14
 80146c6:	f300 814c 	bgt.w	8014962 <_dtoa_r+0x6e2>
 80146ca:	4b6a      	ldr	r3, [pc, #424]	; (8014874 <_dtoa_r+0x5f4>)
 80146cc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80146d0:	ed93 7b00 	vldr	d7, [r3]
 80146d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80146dc:	f280 80d8 	bge.w	8014890 <_dtoa_r+0x610>
 80146e0:	f1b9 0f00 	cmp.w	r9, #0
 80146e4:	f300 80d4 	bgt.w	8014890 <_dtoa_r+0x610>
 80146e8:	f040 825e 	bne.w	8014ba8 <_dtoa_r+0x928>
 80146ec:	2200      	movs	r2, #0
 80146ee:	4b66      	ldr	r3, [pc, #408]	; (8014888 <_dtoa_r+0x608>)
 80146f0:	ec51 0b17 	vmov	r0, r1, d7
 80146f4:	f7eb ff98 	bl	8000628 <__aeabi_dmul>
 80146f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80146fc:	f7ec fa1a 	bl	8000b34 <__aeabi_dcmpge>
 8014700:	464f      	mov	r7, r9
 8014702:	464e      	mov	r6, r9
 8014704:	2800      	cmp	r0, #0
 8014706:	f040 8234 	bne.w	8014b72 <_dtoa_r+0x8f2>
 801470a:	2331      	movs	r3, #49	; 0x31
 801470c:	f10b 0501 	add.w	r5, fp, #1
 8014710:	f88b 3000 	strb.w	r3, [fp]
 8014714:	f10a 0a01 	add.w	sl, sl, #1
 8014718:	e22f      	b.n	8014b7a <_dtoa_r+0x8fa>
 801471a:	07f2      	lsls	r2, r6, #31
 801471c:	d505      	bpl.n	801472a <_dtoa_r+0x4aa>
 801471e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014722:	f7eb ff81 	bl	8000628 <__aeabi_dmul>
 8014726:	3501      	adds	r5, #1
 8014728:	2301      	movs	r3, #1
 801472a:	1076      	asrs	r6, r6, #1
 801472c:	3708      	adds	r7, #8
 801472e:	e772      	b.n	8014616 <_dtoa_r+0x396>
 8014730:	2502      	movs	r5, #2
 8014732:	e774      	b.n	801461e <_dtoa_r+0x39e>
 8014734:	f8cd a020 	str.w	sl, [sp, #32]
 8014738:	464f      	mov	r7, r9
 801473a:	e791      	b.n	8014660 <_dtoa_r+0x3e0>
 801473c:	4b4d      	ldr	r3, [pc, #308]	; (8014874 <_dtoa_r+0x5f4>)
 801473e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8014742:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8014746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014748:	2b00      	cmp	r3, #0
 801474a:	d047      	beq.n	80147dc <_dtoa_r+0x55c>
 801474c:	4602      	mov	r2, r0
 801474e:	460b      	mov	r3, r1
 8014750:	2000      	movs	r0, #0
 8014752:	494e      	ldr	r1, [pc, #312]	; (801488c <_dtoa_r+0x60c>)
 8014754:	f7ec f892 	bl	800087c <__aeabi_ddiv>
 8014758:	462a      	mov	r2, r5
 801475a:	4633      	mov	r3, r6
 801475c:	f7eb fdac 	bl	80002b8 <__aeabi_dsub>
 8014760:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014764:	465d      	mov	r5, fp
 8014766:	e9dd 0100 	ldrd	r0, r1, [sp]
 801476a:	f7ec fa0d 	bl	8000b88 <__aeabi_d2iz>
 801476e:	4606      	mov	r6, r0
 8014770:	f7eb fef0 	bl	8000554 <__aeabi_i2d>
 8014774:	4602      	mov	r2, r0
 8014776:	460b      	mov	r3, r1
 8014778:	e9dd 0100 	ldrd	r0, r1, [sp]
 801477c:	f7eb fd9c 	bl	80002b8 <__aeabi_dsub>
 8014780:	3630      	adds	r6, #48	; 0x30
 8014782:	f805 6b01 	strb.w	r6, [r5], #1
 8014786:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801478a:	e9cd 0100 	strd	r0, r1, [sp]
 801478e:	f7ec f9bd 	bl	8000b0c <__aeabi_dcmplt>
 8014792:	2800      	cmp	r0, #0
 8014794:	d163      	bne.n	801485e <_dtoa_r+0x5de>
 8014796:	e9dd 2300 	ldrd	r2, r3, [sp]
 801479a:	2000      	movs	r0, #0
 801479c:	4937      	ldr	r1, [pc, #220]	; (801487c <_dtoa_r+0x5fc>)
 801479e:	f7eb fd8b 	bl	80002b8 <__aeabi_dsub>
 80147a2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80147a6:	f7ec f9b1 	bl	8000b0c <__aeabi_dcmplt>
 80147aa:	2800      	cmp	r0, #0
 80147ac:	f040 80b7 	bne.w	801491e <_dtoa_r+0x69e>
 80147b0:	eba5 030b 	sub.w	r3, r5, fp
 80147b4:	429f      	cmp	r7, r3
 80147b6:	f77f af7c 	ble.w	80146b2 <_dtoa_r+0x432>
 80147ba:	2200      	movs	r2, #0
 80147bc:	4b30      	ldr	r3, [pc, #192]	; (8014880 <_dtoa_r+0x600>)
 80147be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80147c2:	f7eb ff31 	bl	8000628 <__aeabi_dmul>
 80147c6:	2200      	movs	r2, #0
 80147c8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80147cc:	4b2c      	ldr	r3, [pc, #176]	; (8014880 <_dtoa_r+0x600>)
 80147ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80147d2:	f7eb ff29 	bl	8000628 <__aeabi_dmul>
 80147d6:	e9cd 0100 	strd	r0, r1, [sp]
 80147da:	e7c4      	b.n	8014766 <_dtoa_r+0x4e6>
 80147dc:	462a      	mov	r2, r5
 80147de:	4633      	mov	r3, r6
 80147e0:	f7eb ff22 	bl	8000628 <__aeabi_dmul>
 80147e4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80147e8:	eb0b 0507 	add.w	r5, fp, r7
 80147ec:	465e      	mov	r6, fp
 80147ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80147f2:	f7ec f9c9 	bl	8000b88 <__aeabi_d2iz>
 80147f6:	4607      	mov	r7, r0
 80147f8:	f7eb feac 	bl	8000554 <__aeabi_i2d>
 80147fc:	3730      	adds	r7, #48	; 0x30
 80147fe:	4602      	mov	r2, r0
 8014800:	460b      	mov	r3, r1
 8014802:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014806:	f7eb fd57 	bl	80002b8 <__aeabi_dsub>
 801480a:	f806 7b01 	strb.w	r7, [r6], #1
 801480e:	42ae      	cmp	r6, r5
 8014810:	e9cd 0100 	strd	r0, r1, [sp]
 8014814:	f04f 0200 	mov.w	r2, #0
 8014818:	d126      	bne.n	8014868 <_dtoa_r+0x5e8>
 801481a:	4b1c      	ldr	r3, [pc, #112]	; (801488c <_dtoa_r+0x60c>)
 801481c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014820:	f7eb fd4c 	bl	80002bc <__adddf3>
 8014824:	4602      	mov	r2, r0
 8014826:	460b      	mov	r3, r1
 8014828:	e9dd 0100 	ldrd	r0, r1, [sp]
 801482c:	f7ec f98c 	bl	8000b48 <__aeabi_dcmpgt>
 8014830:	2800      	cmp	r0, #0
 8014832:	d174      	bne.n	801491e <_dtoa_r+0x69e>
 8014834:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014838:	2000      	movs	r0, #0
 801483a:	4914      	ldr	r1, [pc, #80]	; (801488c <_dtoa_r+0x60c>)
 801483c:	f7eb fd3c 	bl	80002b8 <__aeabi_dsub>
 8014840:	4602      	mov	r2, r0
 8014842:	460b      	mov	r3, r1
 8014844:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014848:	f7ec f960 	bl	8000b0c <__aeabi_dcmplt>
 801484c:	2800      	cmp	r0, #0
 801484e:	f43f af30 	beq.w	80146b2 <_dtoa_r+0x432>
 8014852:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014856:	2b30      	cmp	r3, #48	; 0x30
 8014858:	f105 32ff 	add.w	r2, r5, #4294967295
 801485c:	d002      	beq.n	8014864 <_dtoa_r+0x5e4>
 801485e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8014862:	e04a      	b.n	80148fa <_dtoa_r+0x67a>
 8014864:	4615      	mov	r5, r2
 8014866:	e7f4      	b.n	8014852 <_dtoa_r+0x5d2>
 8014868:	4b05      	ldr	r3, [pc, #20]	; (8014880 <_dtoa_r+0x600>)
 801486a:	f7eb fedd 	bl	8000628 <__aeabi_dmul>
 801486e:	e9cd 0100 	strd	r0, r1, [sp]
 8014872:	e7bc      	b.n	80147ee <_dtoa_r+0x56e>
 8014874:	08017a78 	.word	0x08017a78
 8014878:	08017a50 	.word	0x08017a50
 801487c:	3ff00000 	.word	0x3ff00000
 8014880:	40240000 	.word	0x40240000
 8014884:	401c0000 	.word	0x401c0000
 8014888:	40140000 	.word	0x40140000
 801488c:	3fe00000 	.word	0x3fe00000
 8014890:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014894:	465d      	mov	r5, fp
 8014896:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801489a:	4630      	mov	r0, r6
 801489c:	4639      	mov	r1, r7
 801489e:	f7eb ffed 	bl	800087c <__aeabi_ddiv>
 80148a2:	f7ec f971 	bl	8000b88 <__aeabi_d2iz>
 80148a6:	4680      	mov	r8, r0
 80148a8:	f7eb fe54 	bl	8000554 <__aeabi_i2d>
 80148ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80148b0:	f7eb feba 	bl	8000628 <__aeabi_dmul>
 80148b4:	4602      	mov	r2, r0
 80148b6:	460b      	mov	r3, r1
 80148b8:	4630      	mov	r0, r6
 80148ba:	4639      	mov	r1, r7
 80148bc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80148c0:	f7eb fcfa 	bl	80002b8 <__aeabi_dsub>
 80148c4:	f805 6b01 	strb.w	r6, [r5], #1
 80148c8:	eba5 060b 	sub.w	r6, r5, fp
 80148cc:	45b1      	cmp	r9, r6
 80148ce:	4602      	mov	r2, r0
 80148d0:	460b      	mov	r3, r1
 80148d2:	d139      	bne.n	8014948 <_dtoa_r+0x6c8>
 80148d4:	f7eb fcf2 	bl	80002bc <__adddf3>
 80148d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80148dc:	4606      	mov	r6, r0
 80148de:	460f      	mov	r7, r1
 80148e0:	f7ec f932 	bl	8000b48 <__aeabi_dcmpgt>
 80148e4:	b9c8      	cbnz	r0, 801491a <_dtoa_r+0x69a>
 80148e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80148ea:	4630      	mov	r0, r6
 80148ec:	4639      	mov	r1, r7
 80148ee:	f7ec f903 	bl	8000af8 <__aeabi_dcmpeq>
 80148f2:	b110      	cbz	r0, 80148fa <_dtoa_r+0x67a>
 80148f4:	f018 0f01 	tst.w	r8, #1
 80148f8:	d10f      	bne.n	801491a <_dtoa_r+0x69a>
 80148fa:	9904      	ldr	r1, [sp, #16]
 80148fc:	4620      	mov	r0, r4
 80148fe:	f001 f808 	bl	8015912 <_Bfree>
 8014902:	2300      	movs	r3, #0
 8014904:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014906:	702b      	strb	r3, [r5, #0]
 8014908:	f10a 0301 	add.w	r3, sl, #1
 801490c:	6013      	str	r3, [r2, #0]
 801490e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014910:	2b00      	cmp	r3, #0
 8014912:	f000 8241 	beq.w	8014d98 <_dtoa_r+0xb18>
 8014916:	601d      	str	r5, [r3, #0]
 8014918:	e23e      	b.n	8014d98 <_dtoa_r+0xb18>
 801491a:	f8cd a020 	str.w	sl, [sp, #32]
 801491e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8014922:	2a39      	cmp	r2, #57	; 0x39
 8014924:	f105 33ff 	add.w	r3, r5, #4294967295
 8014928:	d108      	bne.n	801493c <_dtoa_r+0x6bc>
 801492a:	459b      	cmp	fp, r3
 801492c:	d10a      	bne.n	8014944 <_dtoa_r+0x6c4>
 801492e:	9b08      	ldr	r3, [sp, #32]
 8014930:	3301      	adds	r3, #1
 8014932:	9308      	str	r3, [sp, #32]
 8014934:	2330      	movs	r3, #48	; 0x30
 8014936:	f88b 3000 	strb.w	r3, [fp]
 801493a:	465b      	mov	r3, fp
 801493c:	781a      	ldrb	r2, [r3, #0]
 801493e:	3201      	adds	r2, #1
 8014940:	701a      	strb	r2, [r3, #0]
 8014942:	e78c      	b.n	801485e <_dtoa_r+0x5de>
 8014944:	461d      	mov	r5, r3
 8014946:	e7ea      	b.n	801491e <_dtoa_r+0x69e>
 8014948:	2200      	movs	r2, #0
 801494a:	4b9b      	ldr	r3, [pc, #620]	; (8014bb8 <_dtoa_r+0x938>)
 801494c:	f7eb fe6c 	bl	8000628 <__aeabi_dmul>
 8014950:	2200      	movs	r2, #0
 8014952:	2300      	movs	r3, #0
 8014954:	4606      	mov	r6, r0
 8014956:	460f      	mov	r7, r1
 8014958:	f7ec f8ce 	bl	8000af8 <__aeabi_dcmpeq>
 801495c:	2800      	cmp	r0, #0
 801495e:	d09a      	beq.n	8014896 <_dtoa_r+0x616>
 8014960:	e7cb      	b.n	80148fa <_dtoa_r+0x67a>
 8014962:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014964:	2a00      	cmp	r2, #0
 8014966:	f000 808b 	beq.w	8014a80 <_dtoa_r+0x800>
 801496a:	9a06      	ldr	r2, [sp, #24]
 801496c:	2a01      	cmp	r2, #1
 801496e:	dc6e      	bgt.n	8014a4e <_dtoa_r+0x7ce>
 8014970:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014972:	2a00      	cmp	r2, #0
 8014974:	d067      	beq.n	8014a46 <_dtoa_r+0x7c6>
 8014976:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801497a:	9f07      	ldr	r7, [sp, #28]
 801497c:	9d05      	ldr	r5, [sp, #20]
 801497e:	9a05      	ldr	r2, [sp, #20]
 8014980:	2101      	movs	r1, #1
 8014982:	441a      	add	r2, r3
 8014984:	4620      	mov	r0, r4
 8014986:	9205      	str	r2, [sp, #20]
 8014988:	4498      	add	r8, r3
 801498a:	f001 f8a0 	bl	8015ace <__i2b>
 801498e:	4606      	mov	r6, r0
 8014990:	2d00      	cmp	r5, #0
 8014992:	dd0c      	ble.n	80149ae <_dtoa_r+0x72e>
 8014994:	f1b8 0f00 	cmp.w	r8, #0
 8014998:	dd09      	ble.n	80149ae <_dtoa_r+0x72e>
 801499a:	4545      	cmp	r5, r8
 801499c:	9a05      	ldr	r2, [sp, #20]
 801499e:	462b      	mov	r3, r5
 80149a0:	bfa8      	it	ge
 80149a2:	4643      	movge	r3, r8
 80149a4:	1ad2      	subs	r2, r2, r3
 80149a6:	9205      	str	r2, [sp, #20]
 80149a8:	1aed      	subs	r5, r5, r3
 80149aa:	eba8 0803 	sub.w	r8, r8, r3
 80149ae:	9b07      	ldr	r3, [sp, #28]
 80149b0:	b1eb      	cbz	r3, 80149ee <_dtoa_r+0x76e>
 80149b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	d067      	beq.n	8014a88 <_dtoa_r+0x808>
 80149b8:	b18f      	cbz	r7, 80149de <_dtoa_r+0x75e>
 80149ba:	4631      	mov	r1, r6
 80149bc:	463a      	mov	r2, r7
 80149be:	4620      	mov	r0, r4
 80149c0:	f001 f924 	bl	8015c0c <__pow5mult>
 80149c4:	9a04      	ldr	r2, [sp, #16]
 80149c6:	4601      	mov	r1, r0
 80149c8:	4606      	mov	r6, r0
 80149ca:	4620      	mov	r0, r4
 80149cc:	f001 f888 	bl	8015ae0 <__multiply>
 80149d0:	9904      	ldr	r1, [sp, #16]
 80149d2:	9008      	str	r0, [sp, #32]
 80149d4:	4620      	mov	r0, r4
 80149d6:	f000 ff9c 	bl	8015912 <_Bfree>
 80149da:	9b08      	ldr	r3, [sp, #32]
 80149dc:	9304      	str	r3, [sp, #16]
 80149de:	9b07      	ldr	r3, [sp, #28]
 80149e0:	1bda      	subs	r2, r3, r7
 80149e2:	d004      	beq.n	80149ee <_dtoa_r+0x76e>
 80149e4:	9904      	ldr	r1, [sp, #16]
 80149e6:	4620      	mov	r0, r4
 80149e8:	f001 f910 	bl	8015c0c <__pow5mult>
 80149ec:	9004      	str	r0, [sp, #16]
 80149ee:	2101      	movs	r1, #1
 80149f0:	4620      	mov	r0, r4
 80149f2:	f001 f86c 	bl	8015ace <__i2b>
 80149f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80149f8:	4607      	mov	r7, r0
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	f000 81d0 	beq.w	8014da0 <_dtoa_r+0xb20>
 8014a00:	461a      	mov	r2, r3
 8014a02:	4601      	mov	r1, r0
 8014a04:	4620      	mov	r0, r4
 8014a06:	f001 f901 	bl	8015c0c <__pow5mult>
 8014a0a:	9b06      	ldr	r3, [sp, #24]
 8014a0c:	2b01      	cmp	r3, #1
 8014a0e:	4607      	mov	r7, r0
 8014a10:	dc40      	bgt.n	8014a94 <_dtoa_r+0x814>
 8014a12:	9b00      	ldr	r3, [sp, #0]
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	d139      	bne.n	8014a8c <_dtoa_r+0x80c>
 8014a18:	9b01      	ldr	r3, [sp, #4]
 8014a1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	d136      	bne.n	8014a90 <_dtoa_r+0x810>
 8014a22:	9b01      	ldr	r3, [sp, #4]
 8014a24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014a28:	0d1b      	lsrs	r3, r3, #20
 8014a2a:	051b      	lsls	r3, r3, #20
 8014a2c:	b12b      	cbz	r3, 8014a3a <_dtoa_r+0x7ba>
 8014a2e:	9b05      	ldr	r3, [sp, #20]
 8014a30:	3301      	adds	r3, #1
 8014a32:	9305      	str	r3, [sp, #20]
 8014a34:	f108 0801 	add.w	r8, r8, #1
 8014a38:	2301      	movs	r3, #1
 8014a3a:	9307      	str	r3, [sp, #28]
 8014a3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d12a      	bne.n	8014a98 <_dtoa_r+0x818>
 8014a42:	2001      	movs	r0, #1
 8014a44:	e030      	b.n	8014aa8 <_dtoa_r+0x828>
 8014a46:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014a48:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014a4c:	e795      	b.n	801497a <_dtoa_r+0x6fa>
 8014a4e:	9b07      	ldr	r3, [sp, #28]
 8014a50:	f109 37ff 	add.w	r7, r9, #4294967295
 8014a54:	42bb      	cmp	r3, r7
 8014a56:	bfbf      	itttt	lt
 8014a58:	9b07      	ldrlt	r3, [sp, #28]
 8014a5a:	9707      	strlt	r7, [sp, #28]
 8014a5c:	1afa      	sublt	r2, r7, r3
 8014a5e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8014a60:	bfbb      	ittet	lt
 8014a62:	189b      	addlt	r3, r3, r2
 8014a64:	930e      	strlt	r3, [sp, #56]	; 0x38
 8014a66:	1bdf      	subge	r7, r3, r7
 8014a68:	2700      	movlt	r7, #0
 8014a6a:	f1b9 0f00 	cmp.w	r9, #0
 8014a6e:	bfb5      	itete	lt
 8014a70:	9b05      	ldrlt	r3, [sp, #20]
 8014a72:	9d05      	ldrge	r5, [sp, #20]
 8014a74:	eba3 0509 	sublt.w	r5, r3, r9
 8014a78:	464b      	movge	r3, r9
 8014a7a:	bfb8      	it	lt
 8014a7c:	2300      	movlt	r3, #0
 8014a7e:	e77e      	b.n	801497e <_dtoa_r+0x6fe>
 8014a80:	9f07      	ldr	r7, [sp, #28]
 8014a82:	9d05      	ldr	r5, [sp, #20]
 8014a84:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8014a86:	e783      	b.n	8014990 <_dtoa_r+0x710>
 8014a88:	9a07      	ldr	r2, [sp, #28]
 8014a8a:	e7ab      	b.n	80149e4 <_dtoa_r+0x764>
 8014a8c:	2300      	movs	r3, #0
 8014a8e:	e7d4      	b.n	8014a3a <_dtoa_r+0x7ba>
 8014a90:	9b00      	ldr	r3, [sp, #0]
 8014a92:	e7d2      	b.n	8014a3a <_dtoa_r+0x7ba>
 8014a94:	2300      	movs	r3, #0
 8014a96:	9307      	str	r3, [sp, #28]
 8014a98:	693b      	ldr	r3, [r7, #16]
 8014a9a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8014a9e:	6918      	ldr	r0, [r3, #16]
 8014aa0:	f000 ffc7 	bl	8015a32 <__hi0bits>
 8014aa4:	f1c0 0020 	rsb	r0, r0, #32
 8014aa8:	4440      	add	r0, r8
 8014aaa:	f010 001f 	ands.w	r0, r0, #31
 8014aae:	d047      	beq.n	8014b40 <_dtoa_r+0x8c0>
 8014ab0:	f1c0 0320 	rsb	r3, r0, #32
 8014ab4:	2b04      	cmp	r3, #4
 8014ab6:	dd3b      	ble.n	8014b30 <_dtoa_r+0x8b0>
 8014ab8:	9b05      	ldr	r3, [sp, #20]
 8014aba:	f1c0 001c 	rsb	r0, r0, #28
 8014abe:	4403      	add	r3, r0
 8014ac0:	9305      	str	r3, [sp, #20]
 8014ac2:	4405      	add	r5, r0
 8014ac4:	4480      	add	r8, r0
 8014ac6:	9b05      	ldr	r3, [sp, #20]
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	dd05      	ble.n	8014ad8 <_dtoa_r+0x858>
 8014acc:	461a      	mov	r2, r3
 8014ace:	9904      	ldr	r1, [sp, #16]
 8014ad0:	4620      	mov	r0, r4
 8014ad2:	f001 f8e9 	bl	8015ca8 <__lshift>
 8014ad6:	9004      	str	r0, [sp, #16]
 8014ad8:	f1b8 0f00 	cmp.w	r8, #0
 8014adc:	dd05      	ble.n	8014aea <_dtoa_r+0x86a>
 8014ade:	4639      	mov	r1, r7
 8014ae0:	4642      	mov	r2, r8
 8014ae2:	4620      	mov	r0, r4
 8014ae4:	f001 f8e0 	bl	8015ca8 <__lshift>
 8014ae8:	4607      	mov	r7, r0
 8014aea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014aec:	b353      	cbz	r3, 8014b44 <_dtoa_r+0x8c4>
 8014aee:	4639      	mov	r1, r7
 8014af0:	9804      	ldr	r0, [sp, #16]
 8014af2:	f001 f92d 	bl	8015d50 <__mcmp>
 8014af6:	2800      	cmp	r0, #0
 8014af8:	da24      	bge.n	8014b44 <_dtoa_r+0x8c4>
 8014afa:	2300      	movs	r3, #0
 8014afc:	220a      	movs	r2, #10
 8014afe:	9904      	ldr	r1, [sp, #16]
 8014b00:	4620      	mov	r0, r4
 8014b02:	f000 ff1d 	bl	8015940 <__multadd>
 8014b06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b08:	9004      	str	r0, [sp, #16]
 8014b0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	f000 814d 	beq.w	8014dae <_dtoa_r+0xb2e>
 8014b14:	2300      	movs	r3, #0
 8014b16:	4631      	mov	r1, r6
 8014b18:	220a      	movs	r2, #10
 8014b1a:	4620      	mov	r0, r4
 8014b1c:	f000 ff10 	bl	8015940 <__multadd>
 8014b20:	9b02      	ldr	r3, [sp, #8]
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	4606      	mov	r6, r0
 8014b26:	dc4f      	bgt.n	8014bc8 <_dtoa_r+0x948>
 8014b28:	9b06      	ldr	r3, [sp, #24]
 8014b2a:	2b02      	cmp	r3, #2
 8014b2c:	dd4c      	ble.n	8014bc8 <_dtoa_r+0x948>
 8014b2e:	e011      	b.n	8014b54 <_dtoa_r+0x8d4>
 8014b30:	d0c9      	beq.n	8014ac6 <_dtoa_r+0x846>
 8014b32:	9a05      	ldr	r2, [sp, #20]
 8014b34:	331c      	adds	r3, #28
 8014b36:	441a      	add	r2, r3
 8014b38:	9205      	str	r2, [sp, #20]
 8014b3a:	441d      	add	r5, r3
 8014b3c:	4498      	add	r8, r3
 8014b3e:	e7c2      	b.n	8014ac6 <_dtoa_r+0x846>
 8014b40:	4603      	mov	r3, r0
 8014b42:	e7f6      	b.n	8014b32 <_dtoa_r+0x8b2>
 8014b44:	f1b9 0f00 	cmp.w	r9, #0
 8014b48:	dc38      	bgt.n	8014bbc <_dtoa_r+0x93c>
 8014b4a:	9b06      	ldr	r3, [sp, #24]
 8014b4c:	2b02      	cmp	r3, #2
 8014b4e:	dd35      	ble.n	8014bbc <_dtoa_r+0x93c>
 8014b50:	f8cd 9008 	str.w	r9, [sp, #8]
 8014b54:	9b02      	ldr	r3, [sp, #8]
 8014b56:	b963      	cbnz	r3, 8014b72 <_dtoa_r+0x8f2>
 8014b58:	4639      	mov	r1, r7
 8014b5a:	2205      	movs	r2, #5
 8014b5c:	4620      	mov	r0, r4
 8014b5e:	f000 feef 	bl	8015940 <__multadd>
 8014b62:	4601      	mov	r1, r0
 8014b64:	4607      	mov	r7, r0
 8014b66:	9804      	ldr	r0, [sp, #16]
 8014b68:	f001 f8f2 	bl	8015d50 <__mcmp>
 8014b6c:	2800      	cmp	r0, #0
 8014b6e:	f73f adcc 	bgt.w	801470a <_dtoa_r+0x48a>
 8014b72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014b74:	465d      	mov	r5, fp
 8014b76:	ea6f 0a03 	mvn.w	sl, r3
 8014b7a:	f04f 0900 	mov.w	r9, #0
 8014b7e:	4639      	mov	r1, r7
 8014b80:	4620      	mov	r0, r4
 8014b82:	f000 fec6 	bl	8015912 <_Bfree>
 8014b86:	2e00      	cmp	r6, #0
 8014b88:	f43f aeb7 	beq.w	80148fa <_dtoa_r+0x67a>
 8014b8c:	f1b9 0f00 	cmp.w	r9, #0
 8014b90:	d005      	beq.n	8014b9e <_dtoa_r+0x91e>
 8014b92:	45b1      	cmp	r9, r6
 8014b94:	d003      	beq.n	8014b9e <_dtoa_r+0x91e>
 8014b96:	4649      	mov	r1, r9
 8014b98:	4620      	mov	r0, r4
 8014b9a:	f000 feba 	bl	8015912 <_Bfree>
 8014b9e:	4631      	mov	r1, r6
 8014ba0:	4620      	mov	r0, r4
 8014ba2:	f000 feb6 	bl	8015912 <_Bfree>
 8014ba6:	e6a8      	b.n	80148fa <_dtoa_r+0x67a>
 8014ba8:	2700      	movs	r7, #0
 8014baa:	463e      	mov	r6, r7
 8014bac:	e7e1      	b.n	8014b72 <_dtoa_r+0x8f2>
 8014bae:	f8dd a020 	ldr.w	sl, [sp, #32]
 8014bb2:	463e      	mov	r6, r7
 8014bb4:	e5a9      	b.n	801470a <_dtoa_r+0x48a>
 8014bb6:	bf00      	nop
 8014bb8:	40240000 	.word	0x40240000
 8014bbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014bbe:	f8cd 9008 	str.w	r9, [sp, #8]
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	f000 80fa 	beq.w	8014dbc <_dtoa_r+0xb3c>
 8014bc8:	2d00      	cmp	r5, #0
 8014bca:	dd05      	ble.n	8014bd8 <_dtoa_r+0x958>
 8014bcc:	4631      	mov	r1, r6
 8014bce:	462a      	mov	r2, r5
 8014bd0:	4620      	mov	r0, r4
 8014bd2:	f001 f869 	bl	8015ca8 <__lshift>
 8014bd6:	4606      	mov	r6, r0
 8014bd8:	9b07      	ldr	r3, [sp, #28]
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	d04c      	beq.n	8014c78 <_dtoa_r+0x9f8>
 8014bde:	6871      	ldr	r1, [r6, #4]
 8014be0:	4620      	mov	r0, r4
 8014be2:	f000 fe62 	bl	80158aa <_Balloc>
 8014be6:	6932      	ldr	r2, [r6, #16]
 8014be8:	3202      	adds	r2, #2
 8014bea:	4605      	mov	r5, r0
 8014bec:	0092      	lsls	r2, r2, #2
 8014bee:	f106 010c 	add.w	r1, r6, #12
 8014bf2:	300c      	adds	r0, #12
 8014bf4:	f000 fe4e 	bl	8015894 <memcpy>
 8014bf8:	2201      	movs	r2, #1
 8014bfa:	4629      	mov	r1, r5
 8014bfc:	4620      	mov	r0, r4
 8014bfe:	f001 f853 	bl	8015ca8 <__lshift>
 8014c02:	9b00      	ldr	r3, [sp, #0]
 8014c04:	f8cd b014 	str.w	fp, [sp, #20]
 8014c08:	f003 0301 	and.w	r3, r3, #1
 8014c0c:	46b1      	mov	r9, r6
 8014c0e:	9307      	str	r3, [sp, #28]
 8014c10:	4606      	mov	r6, r0
 8014c12:	4639      	mov	r1, r7
 8014c14:	9804      	ldr	r0, [sp, #16]
 8014c16:	f7ff faa7 	bl	8014168 <quorem>
 8014c1a:	4649      	mov	r1, r9
 8014c1c:	4605      	mov	r5, r0
 8014c1e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8014c22:	9804      	ldr	r0, [sp, #16]
 8014c24:	f001 f894 	bl	8015d50 <__mcmp>
 8014c28:	4632      	mov	r2, r6
 8014c2a:	9000      	str	r0, [sp, #0]
 8014c2c:	4639      	mov	r1, r7
 8014c2e:	4620      	mov	r0, r4
 8014c30:	f001 f8a8 	bl	8015d84 <__mdiff>
 8014c34:	68c3      	ldr	r3, [r0, #12]
 8014c36:	4602      	mov	r2, r0
 8014c38:	bb03      	cbnz	r3, 8014c7c <_dtoa_r+0x9fc>
 8014c3a:	4601      	mov	r1, r0
 8014c3c:	9008      	str	r0, [sp, #32]
 8014c3e:	9804      	ldr	r0, [sp, #16]
 8014c40:	f001 f886 	bl	8015d50 <__mcmp>
 8014c44:	9a08      	ldr	r2, [sp, #32]
 8014c46:	4603      	mov	r3, r0
 8014c48:	4611      	mov	r1, r2
 8014c4a:	4620      	mov	r0, r4
 8014c4c:	9308      	str	r3, [sp, #32]
 8014c4e:	f000 fe60 	bl	8015912 <_Bfree>
 8014c52:	9b08      	ldr	r3, [sp, #32]
 8014c54:	b9a3      	cbnz	r3, 8014c80 <_dtoa_r+0xa00>
 8014c56:	9a06      	ldr	r2, [sp, #24]
 8014c58:	b992      	cbnz	r2, 8014c80 <_dtoa_r+0xa00>
 8014c5a:	9a07      	ldr	r2, [sp, #28]
 8014c5c:	b982      	cbnz	r2, 8014c80 <_dtoa_r+0xa00>
 8014c5e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014c62:	d029      	beq.n	8014cb8 <_dtoa_r+0xa38>
 8014c64:	9b00      	ldr	r3, [sp, #0]
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	dd01      	ble.n	8014c6e <_dtoa_r+0x9ee>
 8014c6a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8014c6e:	9b05      	ldr	r3, [sp, #20]
 8014c70:	1c5d      	adds	r5, r3, #1
 8014c72:	f883 8000 	strb.w	r8, [r3]
 8014c76:	e782      	b.n	8014b7e <_dtoa_r+0x8fe>
 8014c78:	4630      	mov	r0, r6
 8014c7a:	e7c2      	b.n	8014c02 <_dtoa_r+0x982>
 8014c7c:	2301      	movs	r3, #1
 8014c7e:	e7e3      	b.n	8014c48 <_dtoa_r+0x9c8>
 8014c80:	9a00      	ldr	r2, [sp, #0]
 8014c82:	2a00      	cmp	r2, #0
 8014c84:	db04      	blt.n	8014c90 <_dtoa_r+0xa10>
 8014c86:	d125      	bne.n	8014cd4 <_dtoa_r+0xa54>
 8014c88:	9a06      	ldr	r2, [sp, #24]
 8014c8a:	bb1a      	cbnz	r2, 8014cd4 <_dtoa_r+0xa54>
 8014c8c:	9a07      	ldr	r2, [sp, #28]
 8014c8e:	bb0a      	cbnz	r2, 8014cd4 <_dtoa_r+0xa54>
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	ddec      	ble.n	8014c6e <_dtoa_r+0x9ee>
 8014c94:	2201      	movs	r2, #1
 8014c96:	9904      	ldr	r1, [sp, #16]
 8014c98:	4620      	mov	r0, r4
 8014c9a:	f001 f805 	bl	8015ca8 <__lshift>
 8014c9e:	4639      	mov	r1, r7
 8014ca0:	9004      	str	r0, [sp, #16]
 8014ca2:	f001 f855 	bl	8015d50 <__mcmp>
 8014ca6:	2800      	cmp	r0, #0
 8014ca8:	dc03      	bgt.n	8014cb2 <_dtoa_r+0xa32>
 8014caa:	d1e0      	bne.n	8014c6e <_dtoa_r+0x9ee>
 8014cac:	f018 0f01 	tst.w	r8, #1
 8014cb0:	d0dd      	beq.n	8014c6e <_dtoa_r+0x9ee>
 8014cb2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014cb6:	d1d8      	bne.n	8014c6a <_dtoa_r+0x9ea>
 8014cb8:	9b05      	ldr	r3, [sp, #20]
 8014cba:	9a05      	ldr	r2, [sp, #20]
 8014cbc:	1c5d      	adds	r5, r3, #1
 8014cbe:	2339      	movs	r3, #57	; 0x39
 8014cc0:	7013      	strb	r3, [r2, #0]
 8014cc2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014cc6:	2b39      	cmp	r3, #57	; 0x39
 8014cc8:	f105 32ff 	add.w	r2, r5, #4294967295
 8014ccc:	d04f      	beq.n	8014d6e <_dtoa_r+0xaee>
 8014cce:	3301      	adds	r3, #1
 8014cd0:	7013      	strb	r3, [r2, #0]
 8014cd2:	e754      	b.n	8014b7e <_dtoa_r+0x8fe>
 8014cd4:	9a05      	ldr	r2, [sp, #20]
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	f102 0501 	add.w	r5, r2, #1
 8014cdc:	dd06      	ble.n	8014cec <_dtoa_r+0xa6c>
 8014cde:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014ce2:	d0e9      	beq.n	8014cb8 <_dtoa_r+0xa38>
 8014ce4:	f108 0801 	add.w	r8, r8, #1
 8014ce8:	9b05      	ldr	r3, [sp, #20]
 8014cea:	e7c2      	b.n	8014c72 <_dtoa_r+0x9f2>
 8014cec:	9a02      	ldr	r2, [sp, #8]
 8014cee:	f805 8c01 	strb.w	r8, [r5, #-1]
 8014cf2:	eba5 030b 	sub.w	r3, r5, fp
 8014cf6:	4293      	cmp	r3, r2
 8014cf8:	d021      	beq.n	8014d3e <_dtoa_r+0xabe>
 8014cfa:	2300      	movs	r3, #0
 8014cfc:	220a      	movs	r2, #10
 8014cfe:	9904      	ldr	r1, [sp, #16]
 8014d00:	4620      	mov	r0, r4
 8014d02:	f000 fe1d 	bl	8015940 <__multadd>
 8014d06:	45b1      	cmp	r9, r6
 8014d08:	9004      	str	r0, [sp, #16]
 8014d0a:	f04f 0300 	mov.w	r3, #0
 8014d0e:	f04f 020a 	mov.w	r2, #10
 8014d12:	4649      	mov	r1, r9
 8014d14:	4620      	mov	r0, r4
 8014d16:	d105      	bne.n	8014d24 <_dtoa_r+0xaa4>
 8014d18:	f000 fe12 	bl	8015940 <__multadd>
 8014d1c:	4681      	mov	r9, r0
 8014d1e:	4606      	mov	r6, r0
 8014d20:	9505      	str	r5, [sp, #20]
 8014d22:	e776      	b.n	8014c12 <_dtoa_r+0x992>
 8014d24:	f000 fe0c 	bl	8015940 <__multadd>
 8014d28:	4631      	mov	r1, r6
 8014d2a:	4681      	mov	r9, r0
 8014d2c:	2300      	movs	r3, #0
 8014d2e:	220a      	movs	r2, #10
 8014d30:	4620      	mov	r0, r4
 8014d32:	f000 fe05 	bl	8015940 <__multadd>
 8014d36:	4606      	mov	r6, r0
 8014d38:	e7f2      	b.n	8014d20 <_dtoa_r+0xaa0>
 8014d3a:	f04f 0900 	mov.w	r9, #0
 8014d3e:	2201      	movs	r2, #1
 8014d40:	9904      	ldr	r1, [sp, #16]
 8014d42:	4620      	mov	r0, r4
 8014d44:	f000 ffb0 	bl	8015ca8 <__lshift>
 8014d48:	4639      	mov	r1, r7
 8014d4a:	9004      	str	r0, [sp, #16]
 8014d4c:	f001 f800 	bl	8015d50 <__mcmp>
 8014d50:	2800      	cmp	r0, #0
 8014d52:	dcb6      	bgt.n	8014cc2 <_dtoa_r+0xa42>
 8014d54:	d102      	bne.n	8014d5c <_dtoa_r+0xadc>
 8014d56:	f018 0f01 	tst.w	r8, #1
 8014d5a:	d1b2      	bne.n	8014cc2 <_dtoa_r+0xa42>
 8014d5c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014d60:	2b30      	cmp	r3, #48	; 0x30
 8014d62:	f105 32ff 	add.w	r2, r5, #4294967295
 8014d66:	f47f af0a 	bne.w	8014b7e <_dtoa_r+0x8fe>
 8014d6a:	4615      	mov	r5, r2
 8014d6c:	e7f6      	b.n	8014d5c <_dtoa_r+0xadc>
 8014d6e:	4593      	cmp	fp, r2
 8014d70:	d105      	bne.n	8014d7e <_dtoa_r+0xafe>
 8014d72:	2331      	movs	r3, #49	; 0x31
 8014d74:	f10a 0a01 	add.w	sl, sl, #1
 8014d78:	f88b 3000 	strb.w	r3, [fp]
 8014d7c:	e6ff      	b.n	8014b7e <_dtoa_r+0x8fe>
 8014d7e:	4615      	mov	r5, r2
 8014d80:	e79f      	b.n	8014cc2 <_dtoa_r+0xa42>
 8014d82:	f8df b064 	ldr.w	fp, [pc, #100]	; 8014de8 <_dtoa_r+0xb68>
 8014d86:	e007      	b.n	8014d98 <_dtoa_r+0xb18>
 8014d88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014d8a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8014dec <_dtoa_r+0xb6c>
 8014d8e:	b11b      	cbz	r3, 8014d98 <_dtoa_r+0xb18>
 8014d90:	f10b 0308 	add.w	r3, fp, #8
 8014d94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014d96:	6013      	str	r3, [r2, #0]
 8014d98:	4658      	mov	r0, fp
 8014d9a:	b017      	add	sp, #92	; 0x5c
 8014d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014da0:	9b06      	ldr	r3, [sp, #24]
 8014da2:	2b01      	cmp	r3, #1
 8014da4:	f77f ae35 	ble.w	8014a12 <_dtoa_r+0x792>
 8014da8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014daa:	9307      	str	r3, [sp, #28]
 8014dac:	e649      	b.n	8014a42 <_dtoa_r+0x7c2>
 8014dae:	9b02      	ldr	r3, [sp, #8]
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	dc03      	bgt.n	8014dbc <_dtoa_r+0xb3c>
 8014db4:	9b06      	ldr	r3, [sp, #24]
 8014db6:	2b02      	cmp	r3, #2
 8014db8:	f73f aecc 	bgt.w	8014b54 <_dtoa_r+0x8d4>
 8014dbc:	465d      	mov	r5, fp
 8014dbe:	4639      	mov	r1, r7
 8014dc0:	9804      	ldr	r0, [sp, #16]
 8014dc2:	f7ff f9d1 	bl	8014168 <quorem>
 8014dc6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8014dca:	f805 8b01 	strb.w	r8, [r5], #1
 8014dce:	9a02      	ldr	r2, [sp, #8]
 8014dd0:	eba5 030b 	sub.w	r3, r5, fp
 8014dd4:	429a      	cmp	r2, r3
 8014dd6:	ddb0      	ble.n	8014d3a <_dtoa_r+0xaba>
 8014dd8:	2300      	movs	r3, #0
 8014dda:	220a      	movs	r2, #10
 8014ddc:	9904      	ldr	r1, [sp, #16]
 8014dde:	4620      	mov	r0, r4
 8014de0:	f000 fdae 	bl	8015940 <__multadd>
 8014de4:	9004      	str	r0, [sp, #16]
 8014de6:	e7ea      	b.n	8014dbe <_dtoa_r+0xb3e>
 8014de8:	08017b73 	.word	0x08017b73
 8014dec:	080179d0 	.word	0x080179d0

08014df0 <__sflush_r>:
 8014df0:	898a      	ldrh	r2, [r1, #12]
 8014df2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014df6:	4605      	mov	r5, r0
 8014df8:	0710      	lsls	r0, r2, #28
 8014dfa:	460c      	mov	r4, r1
 8014dfc:	d458      	bmi.n	8014eb0 <__sflush_r+0xc0>
 8014dfe:	684b      	ldr	r3, [r1, #4]
 8014e00:	2b00      	cmp	r3, #0
 8014e02:	dc05      	bgt.n	8014e10 <__sflush_r+0x20>
 8014e04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	dc02      	bgt.n	8014e10 <__sflush_r+0x20>
 8014e0a:	2000      	movs	r0, #0
 8014e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014e12:	2e00      	cmp	r6, #0
 8014e14:	d0f9      	beq.n	8014e0a <__sflush_r+0x1a>
 8014e16:	2300      	movs	r3, #0
 8014e18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014e1c:	682f      	ldr	r7, [r5, #0]
 8014e1e:	6a21      	ldr	r1, [r4, #32]
 8014e20:	602b      	str	r3, [r5, #0]
 8014e22:	d032      	beq.n	8014e8a <__sflush_r+0x9a>
 8014e24:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014e26:	89a3      	ldrh	r3, [r4, #12]
 8014e28:	075a      	lsls	r2, r3, #29
 8014e2a:	d505      	bpl.n	8014e38 <__sflush_r+0x48>
 8014e2c:	6863      	ldr	r3, [r4, #4]
 8014e2e:	1ac0      	subs	r0, r0, r3
 8014e30:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014e32:	b10b      	cbz	r3, 8014e38 <__sflush_r+0x48>
 8014e34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014e36:	1ac0      	subs	r0, r0, r3
 8014e38:	2300      	movs	r3, #0
 8014e3a:	4602      	mov	r2, r0
 8014e3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014e3e:	6a21      	ldr	r1, [r4, #32]
 8014e40:	4628      	mov	r0, r5
 8014e42:	47b0      	blx	r6
 8014e44:	1c43      	adds	r3, r0, #1
 8014e46:	89a3      	ldrh	r3, [r4, #12]
 8014e48:	d106      	bne.n	8014e58 <__sflush_r+0x68>
 8014e4a:	6829      	ldr	r1, [r5, #0]
 8014e4c:	291d      	cmp	r1, #29
 8014e4e:	d848      	bhi.n	8014ee2 <__sflush_r+0xf2>
 8014e50:	4a29      	ldr	r2, [pc, #164]	; (8014ef8 <__sflush_r+0x108>)
 8014e52:	40ca      	lsrs	r2, r1
 8014e54:	07d6      	lsls	r6, r2, #31
 8014e56:	d544      	bpl.n	8014ee2 <__sflush_r+0xf2>
 8014e58:	2200      	movs	r2, #0
 8014e5a:	6062      	str	r2, [r4, #4]
 8014e5c:	04d9      	lsls	r1, r3, #19
 8014e5e:	6922      	ldr	r2, [r4, #16]
 8014e60:	6022      	str	r2, [r4, #0]
 8014e62:	d504      	bpl.n	8014e6e <__sflush_r+0x7e>
 8014e64:	1c42      	adds	r2, r0, #1
 8014e66:	d101      	bne.n	8014e6c <__sflush_r+0x7c>
 8014e68:	682b      	ldr	r3, [r5, #0]
 8014e6a:	b903      	cbnz	r3, 8014e6e <__sflush_r+0x7e>
 8014e6c:	6560      	str	r0, [r4, #84]	; 0x54
 8014e6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014e70:	602f      	str	r7, [r5, #0]
 8014e72:	2900      	cmp	r1, #0
 8014e74:	d0c9      	beq.n	8014e0a <__sflush_r+0x1a>
 8014e76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014e7a:	4299      	cmp	r1, r3
 8014e7c:	d002      	beq.n	8014e84 <__sflush_r+0x94>
 8014e7e:	4628      	mov	r0, r5
 8014e80:	f001 f920 	bl	80160c4 <_free_r>
 8014e84:	2000      	movs	r0, #0
 8014e86:	6360      	str	r0, [r4, #52]	; 0x34
 8014e88:	e7c0      	b.n	8014e0c <__sflush_r+0x1c>
 8014e8a:	2301      	movs	r3, #1
 8014e8c:	4628      	mov	r0, r5
 8014e8e:	47b0      	blx	r6
 8014e90:	1c41      	adds	r1, r0, #1
 8014e92:	d1c8      	bne.n	8014e26 <__sflush_r+0x36>
 8014e94:	682b      	ldr	r3, [r5, #0]
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d0c5      	beq.n	8014e26 <__sflush_r+0x36>
 8014e9a:	2b1d      	cmp	r3, #29
 8014e9c:	d001      	beq.n	8014ea2 <__sflush_r+0xb2>
 8014e9e:	2b16      	cmp	r3, #22
 8014ea0:	d101      	bne.n	8014ea6 <__sflush_r+0xb6>
 8014ea2:	602f      	str	r7, [r5, #0]
 8014ea4:	e7b1      	b.n	8014e0a <__sflush_r+0x1a>
 8014ea6:	89a3      	ldrh	r3, [r4, #12]
 8014ea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014eac:	81a3      	strh	r3, [r4, #12]
 8014eae:	e7ad      	b.n	8014e0c <__sflush_r+0x1c>
 8014eb0:	690f      	ldr	r7, [r1, #16]
 8014eb2:	2f00      	cmp	r7, #0
 8014eb4:	d0a9      	beq.n	8014e0a <__sflush_r+0x1a>
 8014eb6:	0793      	lsls	r3, r2, #30
 8014eb8:	680e      	ldr	r6, [r1, #0]
 8014eba:	bf08      	it	eq
 8014ebc:	694b      	ldreq	r3, [r1, #20]
 8014ebe:	600f      	str	r7, [r1, #0]
 8014ec0:	bf18      	it	ne
 8014ec2:	2300      	movne	r3, #0
 8014ec4:	eba6 0807 	sub.w	r8, r6, r7
 8014ec8:	608b      	str	r3, [r1, #8]
 8014eca:	f1b8 0f00 	cmp.w	r8, #0
 8014ece:	dd9c      	ble.n	8014e0a <__sflush_r+0x1a>
 8014ed0:	4643      	mov	r3, r8
 8014ed2:	463a      	mov	r2, r7
 8014ed4:	6a21      	ldr	r1, [r4, #32]
 8014ed6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014ed8:	4628      	mov	r0, r5
 8014eda:	47b0      	blx	r6
 8014edc:	2800      	cmp	r0, #0
 8014ede:	dc06      	bgt.n	8014eee <__sflush_r+0xfe>
 8014ee0:	89a3      	ldrh	r3, [r4, #12]
 8014ee2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014ee6:	81a3      	strh	r3, [r4, #12]
 8014ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8014eec:	e78e      	b.n	8014e0c <__sflush_r+0x1c>
 8014eee:	4407      	add	r7, r0
 8014ef0:	eba8 0800 	sub.w	r8, r8, r0
 8014ef4:	e7e9      	b.n	8014eca <__sflush_r+0xda>
 8014ef6:	bf00      	nop
 8014ef8:	20400001 	.word	0x20400001

08014efc <_fflush_r>:
 8014efc:	b538      	push	{r3, r4, r5, lr}
 8014efe:	690b      	ldr	r3, [r1, #16]
 8014f00:	4605      	mov	r5, r0
 8014f02:	460c      	mov	r4, r1
 8014f04:	b1db      	cbz	r3, 8014f3e <_fflush_r+0x42>
 8014f06:	b118      	cbz	r0, 8014f10 <_fflush_r+0x14>
 8014f08:	6983      	ldr	r3, [r0, #24]
 8014f0a:	b90b      	cbnz	r3, 8014f10 <_fflush_r+0x14>
 8014f0c:	f000 f860 	bl	8014fd0 <__sinit>
 8014f10:	4b0c      	ldr	r3, [pc, #48]	; (8014f44 <_fflush_r+0x48>)
 8014f12:	429c      	cmp	r4, r3
 8014f14:	d109      	bne.n	8014f2a <_fflush_r+0x2e>
 8014f16:	686c      	ldr	r4, [r5, #4]
 8014f18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014f1c:	b17b      	cbz	r3, 8014f3e <_fflush_r+0x42>
 8014f1e:	4621      	mov	r1, r4
 8014f20:	4628      	mov	r0, r5
 8014f22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014f26:	f7ff bf63 	b.w	8014df0 <__sflush_r>
 8014f2a:	4b07      	ldr	r3, [pc, #28]	; (8014f48 <_fflush_r+0x4c>)
 8014f2c:	429c      	cmp	r4, r3
 8014f2e:	d101      	bne.n	8014f34 <_fflush_r+0x38>
 8014f30:	68ac      	ldr	r4, [r5, #8]
 8014f32:	e7f1      	b.n	8014f18 <_fflush_r+0x1c>
 8014f34:	4b05      	ldr	r3, [pc, #20]	; (8014f4c <_fflush_r+0x50>)
 8014f36:	429c      	cmp	r4, r3
 8014f38:	bf08      	it	eq
 8014f3a:	68ec      	ldreq	r4, [r5, #12]
 8014f3c:	e7ec      	b.n	8014f18 <_fflush_r+0x1c>
 8014f3e:	2000      	movs	r0, #0
 8014f40:	bd38      	pop	{r3, r4, r5, pc}
 8014f42:	bf00      	nop
 8014f44:	08017a00 	.word	0x08017a00
 8014f48:	08017a20 	.word	0x08017a20
 8014f4c:	080179e0 	.word	0x080179e0

08014f50 <std>:
 8014f50:	2300      	movs	r3, #0
 8014f52:	b510      	push	{r4, lr}
 8014f54:	4604      	mov	r4, r0
 8014f56:	e9c0 3300 	strd	r3, r3, [r0]
 8014f5a:	6083      	str	r3, [r0, #8]
 8014f5c:	8181      	strh	r1, [r0, #12]
 8014f5e:	6643      	str	r3, [r0, #100]	; 0x64
 8014f60:	81c2      	strh	r2, [r0, #14]
 8014f62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014f66:	6183      	str	r3, [r0, #24]
 8014f68:	4619      	mov	r1, r3
 8014f6a:	2208      	movs	r2, #8
 8014f6c:	305c      	adds	r0, #92	; 0x5c
 8014f6e:	f7fd f9a3 	bl	80122b8 <memset>
 8014f72:	4b05      	ldr	r3, [pc, #20]	; (8014f88 <std+0x38>)
 8014f74:	6263      	str	r3, [r4, #36]	; 0x24
 8014f76:	4b05      	ldr	r3, [pc, #20]	; (8014f8c <std+0x3c>)
 8014f78:	62a3      	str	r3, [r4, #40]	; 0x28
 8014f7a:	4b05      	ldr	r3, [pc, #20]	; (8014f90 <std+0x40>)
 8014f7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014f7e:	4b05      	ldr	r3, [pc, #20]	; (8014f94 <std+0x44>)
 8014f80:	6224      	str	r4, [r4, #32]
 8014f82:	6323      	str	r3, [r4, #48]	; 0x30
 8014f84:	bd10      	pop	{r4, pc}
 8014f86:	bf00      	nop
 8014f88:	0801316d 	.word	0x0801316d
 8014f8c:	08013193 	.word	0x08013193
 8014f90:	080131cb 	.word	0x080131cb
 8014f94:	080131ef 	.word	0x080131ef

08014f98 <_cleanup_r>:
 8014f98:	4901      	ldr	r1, [pc, #4]	; (8014fa0 <_cleanup_r+0x8>)
 8014f9a:	f000 b885 	b.w	80150a8 <_fwalk_reent>
 8014f9e:	bf00      	nop
 8014fa0:	08014efd 	.word	0x08014efd

08014fa4 <__sfmoreglue>:
 8014fa4:	b570      	push	{r4, r5, r6, lr}
 8014fa6:	1e4a      	subs	r2, r1, #1
 8014fa8:	2568      	movs	r5, #104	; 0x68
 8014faa:	4355      	muls	r5, r2
 8014fac:	460e      	mov	r6, r1
 8014fae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014fb2:	f001 f8d5 	bl	8016160 <_malloc_r>
 8014fb6:	4604      	mov	r4, r0
 8014fb8:	b140      	cbz	r0, 8014fcc <__sfmoreglue+0x28>
 8014fba:	2100      	movs	r1, #0
 8014fbc:	e9c0 1600 	strd	r1, r6, [r0]
 8014fc0:	300c      	adds	r0, #12
 8014fc2:	60a0      	str	r0, [r4, #8]
 8014fc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014fc8:	f7fd f976 	bl	80122b8 <memset>
 8014fcc:	4620      	mov	r0, r4
 8014fce:	bd70      	pop	{r4, r5, r6, pc}

08014fd0 <__sinit>:
 8014fd0:	6983      	ldr	r3, [r0, #24]
 8014fd2:	b510      	push	{r4, lr}
 8014fd4:	4604      	mov	r4, r0
 8014fd6:	bb33      	cbnz	r3, 8015026 <__sinit+0x56>
 8014fd8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8014fdc:	6503      	str	r3, [r0, #80]	; 0x50
 8014fde:	4b12      	ldr	r3, [pc, #72]	; (8015028 <__sinit+0x58>)
 8014fe0:	4a12      	ldr	r2, [pc, #72]	; (801502c <__sinit+0x5c>)
 8014fe2:	681b      	ldr	r3, [r3, #0]
 8014fe4:	6282      	str	r2, [r0, #40]	; 0x28
 8014fe6:	4298      	cmp	r0, r3
 8014fe8:	bf04      	itt	eq
 8014fea:	2301      	moveq	r3, #1
 8014fec:	6183      	streq	r3, [r0, #24]
 8014fee:	f000 f81f 	bl	8015030 <__sfp>
 8014ff2:	6060      	str	r0, [r4, #4]
 8014ff4:	4620      	mov	r0, r4
 8014ff6:	f000 f81b 	bl	8015030 <__sfp>
 8014ffa:	60a0      	str	r0, [r4, #8]
 8014ffc:	4620      	mov	r0, r4
 8014ffe:	f000 f817 	bl	8015030 <__sfp>
 8015002:	2200      	movs	r2, #0
 8015004:	60e0      	str	r0, [r4, #12]
 8015006:	2104      	movs	r1, #4
 8015008:	6860      	ldr	r0, [r4, #4]
 801500a:	f7ff ffa1 	bl	8014f50 <std>
 801500e:	2201      	movs	r2, #1
 8015010:	2109      	movs	r1, #9
 8015012:	68a0      	ldr	r0, [r4, #8]
 8015014:	f7ff ff9c 	bl	8014f50 <std>
 8015018:	2202      	movs	r2, #2
 801501a:	2112      	movs	r1, #18
 801501c:	68e0      	ldr	r0, [r4, #12]
 801501e:	f7ff ff97 	bl	8014f50 <std>
 8015022:	2301      	movs	r3, #1
 8015024:	61a3      	str	r3, [r4, #24]
 8015026:	bd10      	pop	{r4, pc}
 8015028:	08017940 	.word	0x08017940
 801502c:	08014f99 	.word	0x08014f99

08015030 <__sfp>:
 8015030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015032:	4b1b      	ldr	r3, [pc, #108]	; (80150a0 <__sfp+0x70>)
 8015034:	681e      	ldr	r6, [r3, #0]
 8015036:	69b3      	ldr	r3, [r6, #24]
 8015038:	4607      	mov	r7, r0
 801503a:	b913      	cbnz	r3, 8015042 <__sfp+0x12>
 801503c:	4630      	mov	r0, r6
 801503e:	f7ff ffc7 	bl	8014fd0 <__sinit>
 8015042:	3648      	adds	r6, #72	; 0x48
 8015044:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015048:	3b01      	subs	r3, #1
 801504a:	d503      	bpl.n	8015054 <__sfp+0x24>
 801504c:	6833      	ldr	r3, [r6, #0]
 801504e:	b133      	cbz	r3, 801505e <__sfp+0x2e>
 8015050:	6836      	ldr	r6, [r6, #0]
 8015052:	e7f7      	b.n	8015044 <__sfp+0x14>
 8015054:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015058:	b16d      	cbz	r5, 8015076 <__sfp+0x46>
 801505a:	3468      	adds	r4, #104	; 0x68
 801505c:	e7f4      	b.n	8015048 <__sfp+0x18>
 801505e:	2104      	movs	r1, #4
 8015060:	4638      	mov	r0, r7
 8015062:	f7ff ff9f 	bl	8014fa4 <__sfmoreglue>
 8015066:	6030      	str	r0, [r6, #0]
 8015068:	2800      	cmp	r0, #0
 801506a:	d1f1      	bne.n	8015050 <__sfp+0x20>
 801506c:	230c      	movs	r3, #12
 801506e:	603b      	str	r3, [r7, #0]
 8015070:	4604      	mov	r4, r0
 8015072:	4620      	mov	r0, r4
 8015074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015076:	4b0b      	ldr	r3, [pc, #44]	; (80150a4 <__sfp+0x74>)
 8015078:	6665      	str	r5, [r4, #100]	; 0x64
 801507a:	e9c4 5500 	strd	r5, r5, [r4]
 801507e:	60a5      	str	r5, [r4, #8]
 8015080:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8015084:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8015088:	2208      	movs	r2, #8
 801508a:	4629      	mov	r1, r5
 801508c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015090:	f7fd f912 	bl	80122b8 <memset>
 8015094:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015098:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801509c:	e7e9      	b.n	8015072 <__sfp+0x42>
 801509e:	bf00      	nop
 80150a0:	08017940 	.word	0x08017940
 80150a4:	ffff0001 	.word	0xffff0001

080150a8 <_fwalk_reent>:
 80150a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80150ac:	4680      	mov	r8, r0
 80150ae:	4689      	mov	r9, r1
 80150b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80150b4:	2600      	movs	r6, #0
 80150b6:	b914      	cbnz	r4, 80150be <_fwalk_reent+0x16>
 80150b8:	4630      	mov	r0, r6
 80150ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80150be:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80150c2:	3f01      	subs	r7, #1
 80150c4:	d501      	bpl.n	80150ca <_fwalk_reent+0x22>
 80150c6:	6824      	ldr	r4, [r4, #0]
 80150c8:	e7f5      	b.n	80150b6 <_fwalk_reent+0xe>
 80150ca:	89ab      	ldrh	r3, [r5, #12]
 80150cc:	2b01      	cmp	r3, #1
 80150ce:	d907      	bls.n	80150e0 <_fwalk_reent+0x38>
 80150d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80150d4:	3301      	adds	r3, #1
 80150d6:	d003      	beq.n	80150e0 <_fwalk_reent+0x38>
 80150d8:	4629      	mov	r1, r5
 80150da:	4640      	mov	r0, r8
 80150dc:	47c8      	blx	r9
 80150de:	4306      	orrs	r6, r0
 80150e0:	3568      	adds	r5, #104	; 0x68
 80150e2:	e7ee      	b.n	80150c2 <_fwalk_reent+0x1a>

080150e4 <rshift>:
 80150e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80150e6:	6906      	ldr	r6, [r0, #16]
 80150e8:	114b      	asrs	r3, r1, #5
 80150ea:	429e      	cmp	r6, r3
 80150ec:	f100 0414 	add.w	r4, r0, #20
 80150f0:	dd30      	ble.n	8015154 <rshift+0x70>
 80150f2:	f011 011f 	ands.w	r1, r1, #31
 80150f6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80150fa:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80150fe:	d108      	bne.n	8015112 <rshift+0x2e>
 8015100:	4621      	mov	r1, r4
 8015102:	42b2      	cmp	r2, r6
 8015104:	460b      	mov	r3, r1
 8015106:	d211      	bcs.n	801512c <rshift+0x48>
 8015108:	f852 3b04 	ldr.w	r3, [r2], #4
 801510c:	f841 3b04 	str.w	r3, [r1], #4
 8015110:	e7f7      	b.n	8015102 <rshift+0x1e>
 8015112:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8015116:	f1c1 0c20 	rsb	ip, r1, #32
 801511a:	40cd      	lsrs	r5, r1
 801511c:	3204      	adds	r2, #4
 801511e:	4623      	mov	r3, r4
 8015120:	42b2      	cmp	r2, r6
 8015122:	4617      	mov	r7, r2
 8015124:	d30c      	bcc.n	8015140 <rshift+0x5c>
 8015126:	601d      	str	r5, [r3, #0]
 8015128:	b105      	cbz	r5, 801512c <rshift+0x48>
 801512a:	3304      	adds	r3, #4
 801512c:	1b1a      	subs	r2, r3, r4
 801512e:	42a3      	cmp	r3, r4
 8015130:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015134:	bf08      	it	eq
 8015136:	2300      	moveq	r3, #0
 8015138:	6102      	str	r2, [r0, #16]
 801513a:	bf08      	it	eq
 801513c:	6143      	streq	r3, [r0, #20]
 801513e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015140:	683f      	ldr	r7, [r7, #0]
 8015142:	fa07 f70c 	lsl.w	r7, r7, ip
 8015146:	433d      	orrs	r5, r7
 8015148:	f843 5b04 	str.w	r5, [r3], #4
 801514c:	f852 5b04 	ldr.w	r5, [r2], #4
 8015150:	40cd      	lsrs	r5, r1
 8015152:	e7e5      	b.n	8015120 <rshift+0x3c>
 8015154:	4623      	mov	r3, r4
 8015156:	e7e9      	b.n	801512c <rshift+0x48>

08015158 <__hexdig_fun>:
 8015158:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801515c:	2b09      	cmp	r3, #9
 801515e:	d802      	bhi.n	8015166 <__hexdig_fun+0xe>
 8015160:	3820      	subs	r0, #32
 8015162:	b2c0      	uxtb	r0, r0
 8015164:	4770      	bx	lr
 8015166:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801516a:	2b05      	cmp	r3, #5
 801516c:	d801      	bhi.n	8015172 <__hexdig_fun+0x1a>
 801516e:	3847      	subs	r0, #71	; 0x47
 8015170:	e7f7      	b.n	8015162 <__hexdig_fun+0xa>
 8015172:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8015176:	2b05      	cmp	r3, #5
 8015178:	d801      	bhi.n	801517e <__hexdig_fun+0x26>
 801517a:	3827      	subs	r0, #39	; 0x27
 801517c:	e7f1      	b.n	8015162 <__hexdig_fun+0xa>
 801517e:	2000      	movs	r0, #0
 8015180:	4770      	bx	lr

08015182 <__gethex>:
 8015182:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015186:	b08b      	sub	sp, #44	; 0x2c
 8015188:	468a      	mov	sl, r1
 801518a:	9002      	str	r0, [sp, #8]
 801518c:	9816      	ldr	r0, [sp, #88]	; 0x58
 801518e:	9306      	str	r3, [sp, #24]
 8015190:	4690      	mov	r8, r2
 8015192:	f000 fadf 	bl	8015754 <__localeconv_l>
 8015196:	6803      	ldr	r3, [r0, #0]
 8015198:	9303      	str	r3, [sp, #12]
 801519a:	4618      	mov	r0, r3
 801519c:	f7eb f830 	bl	8000200 <strlen>
 80151a0:	9b03      	ldr	r3, [sp, #12]
 80151a2:	9001      	str	r0, [sp, #4]
 80151a4:	4403      	add	r3, r0
 80151a6:	f04f 0b00 	mov.w	fp, #0
 80151aa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80151ae:	9307      	str	r3, [sp, #28]
 80151b0:	f8da 3000 	ldr.w	r3, [sl]
 80151b4:	3302      	adds	r3, #2
 80151b6:	461f      	mov	r7, r3
 80151b8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80151bc:	2830      	cmp	r0, #48	; 0x30
 80151be:	d06c      	beq.n	801529a <__gethex+0x118>
 80151c0:	f7ff ffca 	bl	8015158 <__hexdig_fun>
 80151c4:	4604      	mov	r4, r0
 80151c6:	2800      	cmp	r0, #0
 80151c8:	d16a      	bne.n	80152a0 <__gethex+0x11e>
 80151ca:	9a01      	ldr	r2, [sp, #4]
 80151cc:	9903      	ldr	r1, [sp, #12]
 80151ce:	4638      	mov	r0, r7
 80151d0:	f001 fe3e 	bl	8016e50 <strncmp>
 80151d4:	2800      	cmp	r0, #0
 80151d6:	d166      	bne.n	80152a6 <__gethex+0x124>
 80151d8:	9b01      	ldr	r3, [sp, #4]
 80151da:	5cf8      	ldrb	r0, [r7, r3]
 80151dc:	18fe      	adds	r6, r7, r3
 80151de:	f7ff ffbb 	bl	8015158 <__hexdig_fun>
 80151e2:	2800      	cmp	r0, #0
 80151e4:	d062      	beq.n	80152ac <__gethex+0x12a>
 80151e6:	4633      	mov	r3, r6
 80151e8:	7818      	ldrb	r0, [r3, #0]
 80151ea:	2830      	cmp	r0, #48	; 0x30
 80151ec:	461f      	mov	r7, r3
 80151ee:	f103 0301 	add.w	r3, r3, #1
 80151f2:	d0f9      	beq.n	80151e8 <__gethex+0x66>
 80151f4:	f7ff ffb0 	bl	8015158 <__hexdig_fun>
 80151f8:	fab0 f580 	clz	r5, r0
 80151fc:	096d      	lsrs	r5, r5, #5
 80151fe:	4634      	mov	r4, r6
 8015200:	f04f 0b01 	mov.w	fp, #1
 8015204:	463a      	mov	r2, r7
 8015206:	4616      	mov	r6, r2
 8015208:	3201      	adds	r2, #1
 801520a:	7830      	ldrb	r0, [r6, #0]
 801520c:	f7ff ffa4 	bl	8015158 <__hexdig_fun>
 8015210:	2800      	cmp	r0, #0
 8015212:	d1f8      	bne.n	8015206 <__gethex+0x84>
 8015214:	9a01      	ldr	r2, [sp, #4]
 8015216:	9903      	ldr	r1, [sp, #12]
 8015218:	4630      	mov	r0, r6
 801521a:	f001 fe19 	bl	8016e50 <strncmp>
 801521e:	b950      	cbnz	r0, 8015236 <__gethex+0xb4>
 8015220:	b954      	cbnz	r4, 8015238 <__gethex+0xb6>
 8015222:	9b01      	ldr	r3, [sp, #4]
 8015224:	18f4      	adds	r4, r6, r3
 8015226:	4622      	mov	r2, r4
 8015228:	4616      	mov	r6, r2
 801522a:	3201      	adds	r2, #1
 801522c:	7830      	ldrb	r0, [r6, #0]
 801522e:	f7ff ff93 	bl	8015158 <__hexdig_fun>
 8015232:	2800      	cmp	r0, #0
 8015234:	d1f8      	bne.n	8015228 <__gethex+0xa6>
 8015236:	b10c      	cbz	r4, 801523c <__gethex+0xba>
 8015238:	1ba4      	subs	r4, r4, r6
 801523a:	00a4      	lsls	r4, r4, #2
 801523c:	7833      	ldrb	r3, [r6, #0]
 801523e:	2b50      	cmp	r3, #80	; 0x50
 8015240:	d001      	beq.n	8015246 <__gethex+0xc4>
 8015242:	2b70      	cmp	r3, #112	; 0x70
 8015244:	d140      	bne.n	80152c8 <__gethex+0x146>
 8015246:	7873      	ldrb	r3, [r6, #1]
 8015248:	2b2b      	cmp	r3, #43	; 0x2b
 801524a:	d031      	beq.n	80152b0 <__gethex+0x12e>
 801524c:	2b2d      	cmp	r3, #45	; 0x2d
 801524e:	d033      	beq.n	80152b8 <__gethex+0x136>
 8015250:	1c71      	adds	r1, r6, #1
 8015252:	f04f 0900 	mov.w	r9, #0
 8015256:	7808      	ldrb	r0, [r1, #0]
 8015258:	f7ff ff7e 	bl	8015158 <__hexdig_fun>
 801525c:	1e43      	subs	r3, r0, #1
 801525e:	b2db      	uxtb	r3, r3
 8015260:	2b18      	cmp	r3, #24
 8015262:	d831      	bhi.n	80152c8 <__gethex+0x146>
 8015264:	f1a0 0210 	sub.w	r2, r0, #16
 8015268:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801526c:	f7ff ff74 	bl	8015158 <__hexdig_fun>
 8015270:	1e43      	subs	r3, r0, #1
 8015272:	b2db      	uxtb	r3, r3
 8015274:	2b18      	cmp	r3, #24
 8015276:	d922      	bls.n	80152be <__gethex+0x13c>
 8015278:	f1b9 0f00 	cmp.w	r9, #0
 801527c:	d000      	beq.n	8015280 <__gethex+0xfe>
 801527e:	4252      	negs	r2, r2
 8015280:	4414      	add	r4, r2
 8015282:	f8ca 1000 	str.w	r1, [sl]
 8015286:	b30d      	cbz	r5, 80152cc <__gethex+0x14a>
 8015288:	f1bb 0f00 	cmp.w	fp, #0
 801528c:	bf0c      	ite	eq
 801528e:	2706      	moveq	r7, #6
 8015290:	2700      	movne	r7, #0
 8015292:	4638      	mov	r0, r7
 8015294:	b00b      	add	sp, #44	; 0x2c
 8015296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801529a:	f10b 0b01 	add.w	fp, fp, #1
 801529e:	e78a      	b.n	80151b6 <__gethex+0x34>
 80152a0:	2500      	movs	r5, #0
 80152a2:	462c      	mov	r4, r5
 80152a4:	e7ae      	b.n	8015204 <__gethex+0x82>
 80152a6:	463e      	mov	r6, r7
 80152a8:	2501      	movs	r5, #1
 80152aa:	e7c7      	b.n	801523c <__gethex+0xba>
 80152ac:	4604      	mov	r4, r0
 80152ae:	e7fb      	b.n	80152a8 <__gethex+0x126>
 80152b0:	f04f 0900 	mov.w	r9, #0
 80152b4:	1cb1      	adds	r1, r6, #2
 80152b6:	e7ce      	b.n	8015256 <__gethex+0xd4>
 80152b8:	f04f 0901 	mov.w	r9, #1
 80152bc:	e7fa      	b.n	80152b4 <__gethex+0x132>
 80152be:	230a      	movs	r3, #10
 80152c0:	fb03 0202 	mla	r2, r3, r2, r0
 80152c4:	3a10      	subs	r2, #16
 80152c6:	e7cf      	b.n	8015268 <__gethex+0xe6>
 80152c8:	4631      	mov	r1, r6
 80152ca:	e7da      	b.n	8015282 <__gethex+0x100>
 80152cc:	1bf3      	subs	r3, r6, r7
 80152ce:	3b01      	subs	r3, #1
 80152d0:	4629      	mov	r1, r5
 80152d2:	2b07      	cmp	r3, #7
 80152d4:	dc49      	bgt.n	801536a <__gethex+0x1e8>
 80152d6:	9802      	ldr	r0, [sp, #8]
 80152d8:	f000 fae7 	bl	80158aa <_Balloc>
 80152dc:	9b01      	ldr	r3, [sp, #4]
 80152de:	f100 0914 	add.w	r9, r0, #20
 80152e2:	f04f 0b00 	mov.w	fp, #0
 80152e6:	f1c3 0301 	rsb	r3, r3, #1
 80152ea:	4605      	mov	r5, r0
 80152ec:	f8cd 9010 	str.w	r9, [sp, #16]
 80152f0:	46da      	mov	sl, fp
 80152f2:	9308      	str	r3, [sp, #32]
 80152f4:	42b7      	cmp	r7, r6
 80152f6:	d33b      	bcc.n	8015370 <__gethex+0x1ee>
 80152f8:	9804      	ldr	r0, [sp, #16]
 80152fa:	f840 ab04 	str.w	sl, [r0], #4
 80152fe:	eba0 0009 	sub.w	r0, r0, r9
 8015302:	1080      	asrs	r0, r0, #2
 8015304:	6128      	str	r0, [r5, #16]
 8015306:	0147      	lsls	r7, r0, #5
 8015308:	4650      	mov	r0, sl
 801530a:	f000 fb92 	bl	8015a32 <__hi0bits>
 801530e:	f8d8 6000 	ldr.w	r6, [r8]
 8015312:	1a3f      	subs	r7, r7, r0
 8015314:	42b7      	cmp	r7, r6
 8015316:	dd64      	ble.n	80153e2 <__gethex+0x260>
 8015318:	1bbf      	subs	r7, r7, r6
 801531a:	4639      	mov	r1, r7
 801531c:	4628      	mov	r0, r5
 801531e:	f000 fea1 	bl	8016064 <__any_on>
 8015322:	4682      	mov	sl, r0
 8015324:	b178      	cbz	r0, 8015346 <__gethex+0x1c4>
 8015326:	1e7b      	subs	r3, r7, #1
 8015328:	1159      	asrs	r1, r3, #5
 801532a:	f003 021f 	and.w	r2, r3, #31
 801532e:	f04f 0a01 	mov.w	sl, #1
 8015332:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8015336:	fa0a f202 	lsl.w	r2, sl, r2
 801533a:	420a      	tst	r2, r1
 801533c:	d003      	beq.n	8015346 <__gethex+0x1c4>
 801533e:	4553      	cmp	r3, sl
 8015340:	dc46      	bgt.n	80153d0 <__gethex+0x24e>
 8015342:	f04f 0a02 	mov.w	sl, #2
 8015346:	4639      	mov	r1, r7
 8015348:	4628      	mov	r0, r5
 801534a:	f7ff fecb 	bl	80150e4 <rshift>
 801534e:	443c      	add	r4, r7
 8015350:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015354:	42a3      	cmp	r3, r4
 8015356:	da52      	bge.n	80153fe <__gethex+0x27c>
 8015358:	4629      	mov	r1, r5
 801535a:	9802      	ldr	r0, [sp, #8]
 801535c:	f000 fad9 	bl	8015912 <_Bfree>
 8015360:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015362:	2300      	movs	r3, #0
 8015364:	6013      	str	r3, [r2, #0]
 8015366:	27a3      	movs	r7, #163	; 0xa3
 8015368:	e793      	b.n	8015292 <__gethex+0x110>
 801536a:	3101      	adds	r1, #1
 801536c:	105b      	asrs	r3, r3, #1
 801536e:	e7b0      	b.n	80152d2 <__gethex+0x150>
 8015370:	1e73      	subs	r3, r6, #1
 8015372:	9305      	str	r3, [sp, #20]
 8015374:	9a07      	ldr	r2, [sp, #28]
 8015376:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801537a:	4293      	cmp	r3, r2
 801537c:	d018      	beq.n	80153b0 <__gethex+0x22e>
 801537e:	f1bb 0f20 	cmp.w	fp, #32
 8015382:	d107      	bne.n	8015394 <__gethex+0x212>
 8015384:	9b04      	ldr	r3, [sp, #16]
 8015386:	f8c3 a000 	str.w	sl, [r3]
 801538a:	3304      	adds	r3, #4
 801538c:	f04f 0a00 	mov.w	sl, #0
 8015390:	9304      	str	r3, [sp, #16]
 8015392:	46d3      	mov	fp, sl
 8015394:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8015398:	f7ff fede 	bl	8015158 <__hexdig_fun>
 801539c:	f000 000f 	and.w	r0, r0, #15
 80153a0:	fa00 f00b 	lsl.w	r0, r0, fp
 80153a4:	ea4a 0a00 	orr.w	sl, sl, r0
 80153a8:	f10b 0b04 	add.w	fp, fp, #4
 80153ac:	9b05      	ldr	r3, [sp, #20]
 80153ae:	e00d      	b.n	80153cc <__gethex+0x24a>
 80153b0:	9b05      	ldr	r3, [sp, #20]
 80153b2:	9a08      	ldr	r2, [sp, #32]
 80153b4:	4413      	add	r3, r2
 80153b6:	42bb      	cmp	r3, r7
 80153b8:	d3e1      	bcc.n	801537e <__gethex+0x1fc>
 80153ba:	4618      	mov	r0, r3
 80153bc:	9a01      	ldr	r2, [sp, #4]
 80153be:	9903      	ldr	r1, [sp, #12]
 80153c0:	9309      	str	r3, [sp, #36]	; 0x24
 80153c2:	f001 fd45 	bl	8016e50 <strncmp>
 80153c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80153c8:	2800      	cmp	r0, #0
 80153ca:	d1d8      	bne.n	801537e <__gethex+0x1fc>
 80153cc:	461e      	mov	r6, r3
 80153ce:	e791      	b.n	80152f4 <__gethex+0x172>
 80153d0:	1eb9      	subs	r1, r7, #2
 80153d2:	4628      	mov	r0, r5
 80153d4:	f000 fe46 	bl	8016064 <__any_on>
 80153d8:	2800      	cmp	r0, #0
 80153da:	d0b2      	beq.n	8015342 <__gethex+0x1c0>
 80153dc:	f04f 0a03 	mov.w	sl, #3
 80153e0:	e7b1      	b.n	8015346 <__gethex+0x1c4>
 80153e2:	da09      	bge.n	80153f8 <__gethex+0x276>
 80153e4:	1bf7      	subs	r7, r6, r7
 80153e6:	4629      	mov	r1, r5
 80153e8:	463a      	mov	r2, r7
 80153ea:	9802      	ldr	r0, [sp, #8]
 80153ec:	f000 fc5c 	bl	8015ca8 <__lshift>
 80153f0:	1be4      	subs	r4, r4, r7
 80153f2:	4605      	mov	r5, r0
 80153f4:	f100 0914 	add.w	r9, r0, #20
 80153f8:	f04f 0a00 	mov.w	sl, #0
 80153fc:	e7a8      	b.n	8015350 <__gethex+0x1ce>
 80153fe:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8015402:	42a0      	cmp	r0, r4
 8015404:	dd6a      	ble.n	80154dc <__gethex+0x35a>
 8015406:	1b04      	subs	r4, r0, r4
 8015408:	42a6      	cmp	r6, r4
 801540a:	dc2e      	bgt.n	801546a <__gethex+0x2e8>
 801540c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015410:	2b02      	cmp	r3, #2
 8015412:	d022      	beq.n	801545a <__gethex+0x2d8>
 8015414:	2b03      	cmp	r3, #3
 8015416:	d024      	beq.n	8015462 <__gethex+0x2e0>
 8015418:	2b01      	cmp	r3, #1
 801541a:	d115      	bne.n	8015448 <__gethex+0x2c6>
 801541c:	42a6      	cmp	r6, r4
 801541e:	d113      	bne.n	8015448 <__gethex+0x2c6>
 8015420:	2e01      	cmp	r6, #1
 8015422:	dc0b      	bgt.n	801543c <__gethex+0x2ba>
 8015424:	9a06      	ldr	r2, [sp, #24]
 8015426:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801542a:	6013      	str	r3, [r2, #0]
 801542c:	2301      	movs	r3, #1
 801542e:	612b      	str	r3, [r5, #16]
 8015430:	f8c9 3000 	str.w	r3, [r9]
 8015434:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015436:	2762      	movs	r7, #98	; 0x62
 8015438:	601d      	str	r5, [r3, #0]
 801543a:	e72a      	b.n	8015292 <__gethex+0x110>
 801543c:	1e71      	subs	r1, r6, #1
 801543e:	4628      	mov	r0, r5
 8015440:	f000 fe10 	bl	8016064 <__any_on>
 8015444:	2800      	cmp	r0, #0
 8015446:	d1ed      	bne.n	8015424 <__gethex+0x2a2>
 8015448:	4629      	mov	r1, r5
 801544a:	9802      	ldr	r0, [sp, #8]
 801544c:	f000 fa61 	bl	8015912 <_Bfree>
 8015450:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015452:	2300      	movs	r3, #0
 8015454:	6013      	str	r3, [r2, #0]
 8015456:	2750      	movs	r7, #80	; 0x50
 8015458:	e71b      	b.n	8015292 <__gethex+0x110>
 801545a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801545c:	2b00      	cmp	r3, #0
 801545e:	d0e1      	beq.n	8015424 <__gethex+0x2a2>
 8015460:	e7f2      	b.n	8015448 <__gethex+0x2c6>
 8015462:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015464:	2b00      	cmp	r3, #0
 8015466:	d1dd      	bne.n	8015424 <__gethex+0x2a2>
 8015468:	e7ee      	b.n	8015448 <__gethex+0x2c6>
 801546a:	1e67      	subs	r7, r4, #1
 801546c:	f1ba 0f00 	cmp.w	sl, #0
 8015470:	d131      	bne.n	80154d6 <__gethex+0x354>
 8015472:	b127      	cbz	r7, 801547e <__gethex+0x2fc>
 8015474:	4639      	mov	r1, r7
 8015476:	4628      	mov	r0, r5
 8015478:	f000 fdf4 	bl	8016064 <__any_on>
 801547c:	4682      	mov	sl, r0
 801547e:	117a      	asrs	r2, r7, #5
 8015480:	2301      	movs	r3, #1
 8015482:	f007 071f 	and.w	r7, r7, #31
 8015486:	fa03 f707 	lsl.w	r7, r3, r7
 801548a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801548e:	4621      	mov	r1, r4
 8015490:	421f      	tst	r7, r3
 8015492:	4628      	mov	r0, r5
 8015494:	bf18      	it	ne
 8015496:	f04a 0a02 	orrne.w	sl, sl, #2
 801549a:	1b36      	subs	r6, r6, r4
 801549c:	f7ff fe22 	bl	80150e4 <rshift>
 80154a0:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80154a4:	2702      	movs	r7, #2
 80154a6:	f1ba 0f00 	cmp.w	sl, #0
 80154aa:	d048      	beq.n	801553e <__gethex+0x3bc>
 80154ac:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80154b0:	2b02      	cmp	r3, #2
 80154b2:	d015      	beq.n	80154e0 <__gethex+0x35e>
 80154b4:	2b03      	cmp	r3, #3
 80154b6:	d017      	beq.n	80154e8 <__gethex+0x366>
 80154b8:	2b01      	cmp	r3, #1
 80154ba:	d109      	bne.n	80154d0 <__gethex+0x34e>
 80154bc:	f01a 0f02 	tst.w	sl, #2
 80154c0:	d006      	beq.n	80154d0 <__gethex+0x34e>
 80154c2:	f8d9 3000 	ldr.w	r3, [r9]
 80154c6:	ea4a 0a03 	orr.w	sl, sl, r3
 80154ca:	f01a 0f01 	tst.w	sl, #1
 80154ce:	d10e      	bne.n	80154ee <__gethex+0x36c>
 80154d0:	f047 0710 	orr.w	r7, r7, #16
 80154d4:	e033      	b.n	801553e <__gethex+0x3bc>
 80154d6:	f04f 0a01 	mov.w	sl, #1
 80154da:	e7d0      	b.n	801547e <__gethex+0x2fc>
 80154dc:	2701      	movs	r7, #1
 80154de:	e7e2      	b.n	80154a6 <__gethex+0x324>
 80154e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80154e2:	f1c3 0301 	rsb	r3, r3, #1
 80154e6:	9315      	str	r3, [sp, #84]	; 0x54
 80154e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d0f0      	beq.n	80154d0 <__gethex+0x34e>
 80154ee:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80154f2:	f105 0314 	add.w	r3, r5, #20
 80154f6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80154fa:	eb03 010a 	add.w	r1, r3, sl
 80154fe:	f04f 0c00 	mov.w	ip, #0
 8015502:	4618      	mov	r0, r3
 8015504:	f853 2b04 	ldr.w	r2, [r3], #4
 8015508:	f1b2 3fff 	cmp.w	r2, #4294967295
 801550c:	d01c      	beq.n	8015548 <__gethex+0x3c6>
 801550e:	3201      	adds	r2, #1
 8015510:	6002      	str	r2, [r0, #0]
 8015512:	2f02      	cmp	r7, #2
 8015514:	f105 0314 	add.w	r3, r5, #20
 8015518:	d138      	bne.n	801558c <__gethex+0x40a>
 801551a:	f8d8 2000 	ldr.w	r2, [r8]
 801551e:	3a01      	subs	r2, #1
 8015520:	42b2      	cmp	r2, r6
 8015522:	d10a      	bne.n	801553a <__gethex+0x3b8>
 8015524:	1171      	asrs	r1, r6, #5
 8015526:	2201      	movs	r2, #1
 8015528:	f006 061f 	and.w	r6, r6, #31
 801552c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015530:	fa02 f606 	lsl.w	r6, r2, r6
 8015534:	421e      	tst	r6, r3
 8015536:	bf18      	it	ne
 8015538:	4617      	movne	r7, r2
 801553a:	f047 0720 	orr.w	r7, r7, #32
 801553e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015540:	601d      	str	r5, [r3, #0]
 8015542:	9b06      	ldr	r3, [sp, #24]
 8015544:	601c      	str	r4, [r3, #0]
 8015546:	e6a4      	b.n	8015292 <__gethex+0x110>
 8015548:	4299      	cmp	r1, r3
 801554a:	f843 cc04 	str.w	ip, [r3, #-4]
 801554e:	d8d8      	bhi.n	8015502 <__gethex+0x380>
 8015550:	68ab      	ldr	r3, [r5, #8]
 8015552:	4599      	cmp	r9, r3
 8015554:	db12      	blt.n	801557c <__gethex+0x3fa>
 8015556:	6869      	ldr	r1, [r5, #4]
 8015558:	9802      	ldr	r0, [sp, #8]
 801555a:	3101      	adds	r1, #1
 801555c:	f000 f9a5 	bl	80158aa <_Balloc>
 8015560:	692a      	ldr	r2, [r5, #16]
 8015562:	3202      	adds	r2, #2
 8015564:	f105 010c 	add.w	r1, r5, #12
 8015568:	4683      	mov	fp, r0
 801556a:	0092      	lsls	r2, r2, #2
 801556c:	300c      	adds	r0, #12
 801556e:	f000 f991 	bl	8015894 <memcpy>
 8015572:	4629      	mov	r1, r5
 8015574:	9802      	ldr	r0, [sp, #8]
 8015576:	f000 f9cc 	bl	8015912 <_Bfree>
 801557a:	465d      	mov	r5, fp
 801557c:	692b      	ldr	r3, [r5, #16]
 801557e:	1c5a      	adds	r2, r3, #1
 8015580:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8015584:	612a      	str	r2, [r5, #16]
 8015586:	2201      	movs	r2, #1
 8015588:	615a      	str	r2, [r3, #20]
 801558a:	e7c2      	b.n	8015512 <__gethex+0x390>
 801558c:	692a      	ldr	r2, [r5, #16]
 801558e:	454a      	cmp	r2, r9
 8015590:	dd0b      	ble.n	80155aa <__gethex+0x428>
 8015592:	2101      	movs	r1, #1
 8015594:	4628      	mov	r0, r5
 8015596:	f7ff fda5 	bl	80150e4 <rshift>
 801559a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801559e:	3401      	adds	r4, #1
 80155a0:	42a3      	cmp	r3, r4
 80155a2:	f6ff aed9 	blt.w	8015358 <__gethex+0x1d6>
 80155a6:	2701      	movs	r7, #1
 80155a8:	e7c7      	b.n	801553a <__gethex+0x3b8>
 80155aa:	f016 061f 	ands.w	r6, r6, #31
 80155ae:	d0fa      	beq.n	80155a6 <__gethex+0x424>
 80155b0:	449a      	add	sl, r3
 80155b2:	f1c6 0620 	rsb	r6, r6, #32
 80155b6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80155ba:	f000 fa3a 	bl	8015a32 <__hi0bits>
 80155be:	42b0      	cmp	r0, r6
 80155c0:	dbe7      	blt.n	8015592 <__gethex+0x410>
 80155c2:	e7f0      	b.n	80155a6 <__gethex+0x424>

080155c4 <L_shift>:
 80155c4:	f1c2 0208 	rsb	r2, r2, #8
 80155c8:	0092      	lsls	r2, r2, #2
 80155ca:	b570      	push	{r4, r5, r6, lr}
 80155cc:	f1c2 0620 	rsb	r6, r2, #32
 80155d0:	6843      	ldr	r3, [r0, #4]
 80155d2:	6804      	ldr	r4, [r0, #0]
 80155d4:	fa03 f506 	lsl.w	r5, r3, r6
 80155d8:	432c      	orrs	r4, r5
 80155da:	40d3      	lsrs	r3, r2
 80155dc:	6004      	str	r4, [r0, #0]
 80155de:	f840 3f04 	str.w	r3, [r0, #4]!
 80155e2:	4288      	cmp	r0, r1
 80155e4:	d3f4      	bcc.n	80155d0 <L_shift+0xc>
 80155e6:	bd70      	pop	{r4, r5, r6, pc}

080155e8 <__match>:
 80155e8:	b530      	push	{r4, r5, lr}
 80155ea:	6803      	ldr	r3, [r0, #0]
 80155ec:	3301      	adds	r3, #1
 80155ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80155f2:	b914      	cbnz	r4, 80155fa <__match+0x12>
 80155f4:	6003      	str	r3, [r0, #0]
 80155f6:	2001      	movs	r0, #1
 80155f8:	bd30      	pop	{r4, r5, pc}
 80155fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80155fe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8015602:	2d19      	cmp	r5, #25
 8015604:	bf98      	it	ls
 8015606:	3220      	addls	r2, #32
 8015608:	42a2      	cmp	r2, r4
 801560a:	d0f0      	beq.n	80155ee <__match+0x6>
 801560c:	2000      	movs	r0, #0
 801560e:	e7f3      	b.n	80155f8 <__match+0x10>

08015610 <__hexnan>:
 8015610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015614:	680b      	ldr	r3, [r1, #0]
 8015616:	6801      	ldr	r1, [r0, #0]
 8015618:	115f      	asrs	r7, r3, #5
 801561a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801561e:	f013 031f 	ands.w	r3, r3, #31
 8015622:	b087      	sub	sp, #28
 8015624:	bf18      	it	ne
 8015626:	3704      	addne	r7, #4
 8015628:	2500      	movs	r5, #0
 801562a:	1f3e      	subs	r6, r7, #4
 801562c:	4682      	mov	sl, r0
 801562e:	4690      	mov	r8, r2
 8015630:	9301      	str	r3, [sp, #4]
 8015632:	f847 5c04 	str.w	r5, [r7, #-4]
 8015636:	46b1      	mov	r9, r6
 8015638:	4634      	mov	r4, r6
 801563a:	9502      	str	r5, [sp, #8]
 801563c:	46ab      	mov	fp, r5
 801563e:	784a      	ldrb	r2, [r1, #1]
 8015640:	1c4b      	adds	r3, r1, #1
 8015642:	9303      	str	r3, [sp, #12]
 8015644:	b342      	cbz	r2, 8015698 <__hexnan+0x88>
 8015646:	4610      	mov	r0, r2
 8015648:	9105      	str	r1, [sp, #20]
 801564a:	9204      	str	r2, [sp, #16]
 801564c:	f7ff fd84 	bl	8015158 <__hexdig_fun>
 8015650:	2800      	cmp	r0, #0
 8015652:	d143      	bne.n	80156dc <__hexnan+0xcc>
 8015654:	9a04      	ldr	r2, [sp, #16]
 8015656:	9905      	ldr	r1, [sp, #20]
 8015658:	2a20      	cmp	r2, #32
 801565a:	d818      	bhi.n	801568e <__hexnan+0x7e>
 801565c:	9b02      	ldr	r3, [sp, #8]
 801565e:	459b      	cmp	fp, r3
 8015660:	dd13      	ble.n	801568a <__hexnan+0x7a>
 8015662:	454c      	cmp	r4, r9
 8015664:	d206      	bcs.n	8015674 <__hexnan+0x64>
 8015666:	2d07      	cmp	r5, #7
 8015668:	dc04      	bgt.n	8015674 <__hexnan+0x64>
 801566a:	462a      	mov	r2, r5
 801566c:	4649      	mov	r1, r9
 801566e:	4620      	mov	r0, r4
 8015670:	f7ff ffa8 	bl	80155c4 <L_shift>
 8015674:	4544      	cmp	r4, r8
 8015676:	d944      	bls.n	8015702 <__hexnan+0xf2>
 8015678:	2300      	movs	r3, #0
 801567a:	f1a4 0904 	sub.w	r9, r4, #4
 801567e:	f844 3c04 	str.w	r3, [r4, #-4]
 8015682:	f8cd b008 	str.w	fp, [sp, #8]
 8015686:	464c      	mov	r4, r9
 8015688:	461d      	mov	r5, r3
 801568a:	9903      	ldr	r1, [sp, #12]
 801568c:	e7d7      	b.n	801563e <__hexnan+0x2e>
 801568e:	2a29      	cmp	r2, #41	; 0x29
 8015690:	d14a      	bne.n	8015728 <__hexnan+0x118>
 8015692:	3102      	adds	r1, #2
 8015694:	f8ca 1000 	str.w	r1, [sl]
 8015698:	f1bb 0f00 	cmp.w	fp, #0
 801569c:	d044      	beq.n	8015728 <__hexnan+0x118>
 801569e:	454c      	cmp	r4, r9
 80156a0:	d206      	bcs.n	80156b0 <__hexnan+0xa0>
 80156a2:	2d07      	cmp	r5, #7
 80156a4:	dc04      	bgt.n	80156b0 <__hexnan+0xa0>
 80156a6:	462a      	mov	r2, r5
 80156a8:	4649      	mov	r1, r9
 80156aa:	4620      	mov	r0, r4
 80156ac:	f7ff ff8a 	bl	80155c4 <L_shift>
 80156b0:	4544      	cmp	r4, r8
 80156b2:	d928      	bls.n	8015706 <__hexnan+0xf6>
 80156b4:	4643      	mov	r3, r8
 80156b6:	f854 2b04 	ldr.w	r2, [r4], #4
 80156ba:	f843 2b04 	str.w	r2, [r3], #4
 80156be:	42a6      	cmp	r6, r4
 80156c0:	d2f9      	bcs.n	80156b6 <__hexnan+0xa6>
 80156c2:	2200      	movs	r2, #0
 80156c4:	f843 2b04 	str.w	r2, [r3], #4
 80156c8:	429e      	cmp	r6, r3
 80156ca:	d2fb      	bcs.n	80156c4 <__hexnan+0xb4>
 80156cc:	6833      	ldr	r3, [r6, #0]
 80156ce:	b91b      	cbnz	r3, 80156d8 <__hexnan+0xc8>
 80156d0:	4546      	cmp	r6, r8
 80156d2:	d127      	bne.n	8015724 <__hexnan+0x114>
 80156d4:	2301      	movs	r3, #1
 80156d6:	6033      	str	r3, [r6, #0]
 80156d8:	2005      	movs	r0, #5
 80156da:	e026      	b.n	801572a <__hexnan+0x11a>
 80156dc:	3501      	adds	r5, #1
 80156de:	2d08      	cmp	r5, #8
 80156e0:	f10b 0b01 	add.w	fp, fp, #1
 80156e4:	dd06      	ble.n	80156f4 <__hexnan+0xe4>
 80156e6:	4544      	cmp	r4, r8
 80156e8:	d9cf      	bls.n	801568a <__hexnan+0x7a>
 80156ea:	2300      	movs	r3, #0
 80156ec:	f844 3c04 	str.w	r3, [r4, #-4]
 80156f0:	2501      	movs	r5, #1
 80156f2:	3c04      	subs	r4, #4
 80156f4:	6822      	ldr	r2, [r4, #0]
 80156f6:	f000 000f 	and.w	r0, r0, #15
 80156fa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80156fe:	6020      	str	r0, [r4, #0]
 8015700:	e7c3      	b.n	801568a <__hexnan+0x7a>
 8015702:	2508      	movs	r5, #8
 8015704:	e7c1      	b.n	801568a <__hexnan+0x7a>
 8015706:	9b01      	ldr	r3, [sp, #4]
 8015708:	2b00      	cmp	r3, #0
 801570a:	d0df      	beq.n	80156cc <__hexnan+0xbc>
 801570c:	f04f 32ff 	mov.w	r2, #4294967295
 8015710:	f1c3 0320 	rsb	r3, r3, #32
 8015714:	fa22 f303 	lsr.w	r3, r2, r3
 8015718:	f857 2c04 	ldr.w	r2, [r7, #-4]
 801571c:	401a      	ands	r2, r3
 801571e:	f847 2c04 	str.w	r2, [r7, #-4]
 8015722:	e7d3      	b.n	80156cc <__hexnan+0xbc>
 8015724:	3e04      	subs	r6, #4
 8015726:	e7d1      	b.n	80156cc <__hexnan+0xbc>
 8015728:	2004      	movs	r0, #4
 801572a:	b007      	add	sp, #28
 801572c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015730 <__locale_ctype_ptr_l>:
 8015730:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8015734:	4770      	bx	lr
	...

08015738 <__locale_ctype_ptr>:
 8015738:	4b04      	ldr	r3, [pc, #16]	; (801574c <__locale_ctype_ptr+0x14>)
 801573a:	4a05      	ldr	r2, [pc, #20]	; (8015750 <__locale_ctype_ptr+0x18>)
 801573c:	681b      	ldr	r3, [r3, #0]
 801573e:	6a1b      	ldr	r3, [r3, #32]
 8015740:	2b00      	cmp	r3, #0
 8015742:	bf08      	it	eq
 8015744:	4613      	moveq	r3, r2
 8015746:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801574a:	4770      	bx	lr
 801574c:	2000000c 	.word	0x2000000c
 8015750:	20000070 	.word	0x20000070

08015754 <__localeconv_l>:
 8015754:	30f0      	adds	r0, #240	; 0xf0
 8015756:	4770      	bx	lr

08015758 <_localeconv_r>:
 8015758:	4b04      	ldr	r3, [pc, #16]	; (801576c <_localeconv_r+0x14>)
 801575a:	681b      	ldr	r3, [r3, #0]
 801575c:	6a18      	ldr	r0, [r3, #32]
 801575e:	4b04      	ldr	r3, [pc, #16]	; (8015770 <_localeconv_r+0x18>)
 8015760:	2800      	cmp	r0, #0
 8015762:	bf08      	it	eq
 8015764:	4618      	moveq	r0, r3
 8015766:	30f0      	adds	r0, #240	; 0xf0
 8015768:	4770      	bx	lr
 801576a:	bf00      	nop
 801576c:	2000000c 	.word	0x2000000c
 8015770:	20000070 	.word	0x20000070

08015774 <_lseek_r>:
 8015774:	b538      	push	{r3, r4, r5, lr}
 8015776:	4c07      	ldr	r4, [pc, #28]	; (8015794 <_lseek_r+0x20>)
 8015778:	4605      	mov	r5, r0
 801577a:	4608      	mov	r0, r1
 801577c:	4611      	mov	r1, r2
 801577e:	2200      	movs	r2, #0
 8015780:	6022      	str	r2, [r4, #0]
 8015782:	461a      	mov	r2, r3
 8015784:	f7ef fd86 	bl	8005294 <_lseek>
 8015788:	1c43      	adds	r3, r0, #1
 801578a:	d102      	bne.n	8015792 <_lseek_r+0x1e>
 801578c:	6823      	ldr	r3, [r4, #0]
 801578e:	b103      	cbz	r3, 8015792 <_lseek_r+0x1e>
 8015790:	602b      	str	r3, [r5, #0]
 8015792:	bd38      	pop	{r3, r4, r5, pc}
 8015794:	20018260 	.word	0x20018260

08015798 <__swhatbuf_r>:
 8015798:	b570      	push	{r4, r5, r6, lr}
 801579a:	460e      	mov	r6, r1
 801579c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80157a0:	2900      	cmp	r1, #0
 80157a2:	b096      	sub	sp, #88	; 0x58
 80157a4:	4614      	mov	r4, r2
 80157a6:	461d      	mov	r5, r3
 80157a8:	da07      	bge.n	80157ba <__swhatbuf_r+0x22>
 80157aa:	2300      	movs	r3, #0
 80157ac:	602b      	str	r3, [r5, #0]
 80157ae:	89b3      	ldrh	r3, [r6, #12]
 80157b0:	061a      	lsls	r2, r3, #24
 80157b2:	d410      	bmi.n	80157d6 <__swhatbuf_r+0x3e>
 80157b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80157b8:	e00e      	b.n	80157d8 <__swhatbuf_r+0x40>
 80157ba:	466a      	mov	r2, sp
 80157bc:	f001 fc2e 	bl	801701c <_fstat_r>
 80157c0:	2800      	cmp	r0, #0
 80157c2:	dbf2      	blt.n	80157aa <__swhatbuf_r+0x12>
 80157c4:	9a01      	ldr	r2, [sp, #4]
 80157c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80157ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80157ce:	425a      	negs	r2, r3
 80157d0:	415a      	adcs	r2, r3
 80157d2:	602a      	str	r2, [r5, #0]
 80157d4:	e7ee      	b.n	80157b4 <__swhatbuf_r+0x1c>
 80157d6:	2340      	movs	r3, #64	; 0x40
 80157d8:	2000      	movs	r0, #0
 80157da:	6023      	str	r3, [r4, #0]
 80157dc:	b016      	add	sp, #88	; 0x58
 80157de:	bd70      	pop	{r4, r5, r6, pc}

080157e0 <__smakebuf_r>:
 80157e0:	898b      	ldrh	r3, [r1, #12]
 80157e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80157e4:	079d      	lsls	r5, r3, #30
 80157e6:	4606      	mov	r6, r0
 80157e8:	460c      	mov	r4, r1
 80157ea:	d507      	bpl.n	80157fc <__smakebuf_r+0x1c>
 80157ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80157f0:	6023      	str	r3, [r4, #0]
 80157f2:	6123      	str	r3, [r4, #16]
 80157f4:	2301      	movs	r3, #1
 80157f6:	6163      	str	r3, [r4, #20]
 80157f8:	b002      	add	sp, #8
 80157fa:	bd70      	pop	{r4, r5, r6, pc}
 80157fc:	ab01      	add	r3, sp, #4
 80157fe:	466a      	mov	r2, sp
 8015800:	f7ff ffca 	bl	8015798 <__swhatbuf_r>
 8015804:	9900      	ldr	r1, [sp, #0]
 8015806:	4605      	mov	r5, r0
 8015808:	4630      	mov	r0, r6
 801580a:	f000 fca9 	bl	8016160 <_malloc_r>
 801580e:	b948      	cbnz	r0, 8015824 <__smakebuf_r+0x44>
 8015810:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015814:	059a      	lsls	r2, r3, #22
 8015816:	d4ef      	bmi.n	80157f8 <__smakebuf_r+0x18>
 8015818:	f023 0303 	bic.w	r3, r3, #3
 801581c:	f043 0302 	orr.w	r3, r3, #2
 8015820:	81a3      	strh	r3, [r4, #12]
 8015822:	e7e3      	b.n	80157ec <__smakebuf_r+0xc>
 8015824:	4b0d      	ldr	r3, [pc, #52]	; (801585c <__smakebuf_r+0x7c>)
 8015826:	62b3      	str	r3, [r6, #40]	; 0x28
 8015828:	89a3      	ldrh	r3, [r4, #12]
 801582a:	6020      	str	r0, [r4, #0]
 801582c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015830:	81a3      	strh	r3, [r4, #12]
 8015832:	9b00      	ldr	r3, [sp, #0]
 8015834:	6163      	str	r3, [r4, #20]
 8015836:	9b01      	ldr	r3, [sp, #4]
 8015838:	6120      	str	r0, [r4, #16]
 801583a:	b15b      	cbz	r3, 8015854 <__smakebuf_r+0x74>
 801583c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015840:	4630      	mov	r0, r6
 8015842:	f001 fbfd 	bl	8017040 <_isatty_r>
 8015846:	b128      	cbz	r0, 8015854 <__smakebuf_r+0x74>
 8015848:	89a3      	ldrh	r3, [r4, #12]
 801584a:	f023 0303 	bic.w	r3, r3, #3
 801584e:	f043 0301 	orr.w	r3, r3, #1
 8015852:	81a3      	strh	r3, [r4, #12]
 8015854:	89a3      	ldrh	r3, [r4, #12]
 8015856:	431d      	orrs	r5, r3
 8015858:	81a5      	strh	r5, [r4, #12]
 801585a:	e7cd      	b.n	80157f8 <__smakebuf_r+0x18>
 801585c:	08014f99 	.word	0x08014f99

08015860 <malloc>:
 8015860:	4b02      	ldr	r3, [pc, #8]	; (801586c <malloc+0xc>)
 8015862:	4601      	mov	r1, r0
 8015864:	6818      	ldr	r0, [r3, #0]
 8015866:	f000 bc7b 	b.w	8016160 <_malloc_r>
 801586a:	bf00      	nop
 801586c:	2000000c 	.word	0x2000000c

08015870 <__ascii_mbtowc>:
 8015870:	b082      	sub	sp, #8
 8015872:	b901      	cbnz	r1, 8015876 <__ascii_mbtowc+0x6>
 8015874:	a901      	add	r1, sp, #4
 8015876:	b142      	cbz	r2, 801588a <__ascii_mbtowc+0x1a>
 8015878:	b14b      	cbz	r3, 801588e <__ascii_mbtowc+0x1e>
 801587a:	7813      	ldrb	r3, [r2, #0]
 801587c:	600b      	str	r3, [r1, #0]
 801587e:	7812      	ldrb	r2, [r2, #0]
 8015880:	1c10      	adds	r0, r2, #0
 8015882:	bf18      	it	ne
 8015884:	2001      	movne	r0, #1
 8015886:	b002      	add	sp, #8
 8015888:	4770      	bx	lr
 801588a:	4610      	mov	r0, r2
 801588c:	e7fb      	b.n	8015886 <__ascii_mbtowc+0x16>
 801588e:	f06f 0001 	mvn.w	r0, #1
 8015892:	e7f8      	b.n	8015886 <__ascii_mbtowc+0x16>

08015894 <memcpy>:
 8015894:	b510      	push	{r4, lr}
 8015896:	1e43      	subs	r3, r0, #1
 8015898:	440a      	add	r2, r1
 801589a:	4291      	cmp	r1, r2
 801589c:	d100      	bne.n	80158a0 <memcpy+0xc>
 801589e:	bd10      	pop	{r4, pc}
 80158a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80158a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80158a8:	e7f7      	b.n	801589a <memcpy+0x6>

080158aa <_Balloc>:
 80158aa:	b570      	push	{r4, r5, r6, lr}
 80158ac:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80158ae:	4604      	mov	r4, r0
 80158b0:	460e      	mov	r6, r1
 80158b2:	b93d      	cbnz	r5, 80158c4 <_Balloc+0x1a>
 80158b4:	2010      	movs	r0, #16
 80158b6:	f7ff ffd3 	bl	8015860 <malloc>
 80158ba:	6260      	str	r0, [r4, #36]	; 0x24
 80158bc:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80158c0:	6005      	str	r5, [r0, #0]
 80158c2:	60c5      	str	r5, [r0, #12]
 80158c4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80158c6:	68eb      	ldr	r3, [r5, #12]
 80158c8:	b183      	cbz	r3, 80158ec <_Balloc+0x42>
 80158ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80158cc:	68db      	ldr	r3, [r3, #12]
 80158ce:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80158d2:	b9b8      	cbnz	r0, 8015904 <_Balloc+0x5a>
 80158d4:	2101      	movs	r1, #1
 80158d6:	fa01 f506 	lsl.w	r5, r1, r6
 80158da:	1d6a      	adds	r2, r5, #5
 80158dc:	0092      	lsls	r2, r2, #2
 80158de:	4620      	mov	r0, r4
 80158e0:	f000 fbe1 	bl	80160a6 <_calloc_r>
 80158e4:	b160      	cbz	r0, 8015900 <_Balloc+0x56>
 80158e6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80158ea:	e00e      	b.n	801590a <_Balloc+0x60>
 80158ec:	2221      	movs	r2, #33	; 0x21
 80158ee:	2104      	movs	r1, #4
 80158f0:	4620      	mov	r0, r4
 80158f2:	f000 fbd8 	bl	80160a6 <_calloc_r>
 80158f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80158f8:	60e8      	str	r0, [r5, #12]
 80158fa:	68db      	ldr	r3, [r3, #12]
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	d1e4      	bne.n	80158ca <_Balloc+0x20>
 8015900:	2000      	movs	r0, #0
 8015902:	bd70      	pop	{r4, r5, r6, pc}
 8015904:	6802      	ldr	r2, [r0, #0]
 8015906:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801590a:	2300      	movs	r3, #0
 801590c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015910:	e7f7      	b.n	8015902 <_Balloc+0x58>

08015912 <_Bfree>:
 8015912:	b570      	push	{r4, r5, r6, lr}
 8015914:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8015916:	4606      	mov	r6, r0
 8015918:	460d      	mov	r5, r1
 801591a:	b93c      	cbnz	r4, 801592c <_Bfree+0x1a>
 801591c:	2010      	movs	r0, #16
 801591e:	f7ff ff9f 	bl	8015860 <malloc>
 8015922:	6270      	str	r0, [r6, #36]	; 0x24
 8015924:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015928:	6004      	str	r4, [r0, #0]
 801592a:	60c4      	str	r4, [r0, #12]
 801592c:	b13d      	cbz	r5, 801593e <_Bfree+0x2c>
 801592e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8015930:	686a      	ldr	r2, [r5, #4]
 8015932:	68db      	ldr	r3, [r3, #12]
 8015934:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015938:	6029      	str	r1, [r5, #0]
 801593a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801593e:	bd70      	pop	{r4, r5, r6, pc}

08015940 <__multadd>:
 8015940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015944:	690d      	ldr	r5, [r1, #16]
 8015946:	461f      	mov	r7, r3
 8015948:	4606      	mov	r6, r0
 801594a:	460c      	mov	r4, r1
 801594c:	f101 0c14 	add.w	ip, r1, #20
 8015950:	2300      	movs	r3, #0
 8015952:	f8dc 0000 	ldr.w	r0, [ip]
 8015956:	b281      	uxth	r1, r0
 8015958:	fb02 7101 	mla	r1, r2, r1, r7
 801595c:	0c0f      	lsrs	r7, r1, #16
 801595e:	0c00      	lsrs	r0, r0, #16
 8015960:	fb02 7000 	mla	r0, r2, r0, r7
 8015964:	b289      	uxth	r1, r1
 8015966:	3301      	adds	r3, #1
 8015968:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801596c:	429d      	cmp	r5, r3
 801596e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8015972:	f84c 1b04 	str.w	r1, [ip], #4
 8015976:	dcec      	bgt.n	8015952 <__multadd+0x12>
 8015978:	b1d7      	cbz	r7, 80159b0 <__multadd+0x70>
 801597a:	68a3      	ldr	r3, [r4, #8]
 801597c:	42ab      	cmp	r3, r5
 801597e:	dc12      	bgt.n	80159a6 <__multadd+0x66>
 8015980:	6861      	ldr	r1, [r4, #4]
 8015982:	4630      	mov	r0, r6
 8015984:	3101      	adds	r1, #1
 8015986:	f7ff ff90 	bl	80158aa <_Balloc>
 801598a:	6922      	ldr	r2, [r4, #16]
 801598c:	3202      	adds	r2, #2
 801598e:	f104 010c 	add.w	r1, r4, #12
 8015992:	4680      	mov	r8, r0
 8015994:	0092      	lsls	r2, r2, #2
 8015996:	300c      	adds	r0, #12
 8015998:	f7ff ff7c 	bl	8015894 <memcpy>
 801599c:	4621      	mov	r1, r4
 801599e:	4630      	mov	r0, r6
 80159a0:	f7ff ffb7 	bl	8015912 <_Bfree>
 80159a4:	4644      	mov	r4, r8
 80159a6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80159aa:	3501      	adds	r5, #1
 80159ac:	615f      	str	r7, [r3, #20]
 80159ae:	6125      	str	r5, [r4, #16]
 80159b0:	4620      	mov	r0, r4
 80159b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080159b6 <__s2b>:
 80159b6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80159ba:	460c      	mov	r4, r1
 80159bc:	4615      	mov	r5, r2
 80159be:	461f      	mov	r7, r3
 80159c0:	2209      	movs	r2, #9
 80159c2:	3308      	adds	r3, #8
 80159c4:	4606      	mov	r6, r0
 80159c6:	fb93 f3f2 	sdiv	r3, r3, r2
 80159ca:	2100      	movs	r1, #0
 80159cc:	2201      	movs	r2, #1
 80159ce:	429a      	cmp	r2, r3
 80159d0:	db20      	blt.n	8015a14 <__s2b+0x5e>
 80159d2:	4630      	mov	r0, r6
 80159d4:	f7ff ff69 	bl	80158aa <_Balloc>
 80159d8:	9b08      	ldr	r3, [sp, #32]
 80159da:	6143      	str	r3, [r0, #20]
 80159dc:	2d09      	cmp	r5, #9
 80159de:	f04f 0301 	mov.w	r3, #1
 80159e2:	6103      	str	r3, [r0, #16]
 80159e4:	dd19      	ble.n	8015a1a <__s2b+0x64>
 80159e6:	f104 0809 	add.w	r8, r4, #9
 80159ea:	46c1      	mov	r9, r8
 80159ec:	442c      	add	r4, r5
 80159ee:	f819 3b01 	ldrb.w	r3, [r9], #1
 80159f2:	4601      	mov	r1, r0
 80159f4:	3b30      	subs	r3, #48	; 0x30
 80159f6:	220a      	movs	r2, #10
 80159f8:	4630      	mov	r0, r6
 80159fa:	f7ff ffa1 	bl	8015940 <__multadd>
 80159fe:	45a1      	cmp	r9, r4
 8015a00:	d1f5      	bne.n	80159ee <__s2b+0x38>
 8015a02:	eb08 0405 	add.w	r4, r8, r5
 8015a06:	3c08      	subs	r4, #8
 8015a08:	1b2d      	subs	r5, r5, r4
 8015a0a:	1963      	adds	r3, r4, r5
 8015a0c:	42bb      	cmp	r3, r7
 8015a0e:	db07      	blt.n	8015a20 <__s2b+0x6a>
 8015a10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015a14:	0052      	lsls	r2, r2, #1
 8015a16:	3101      	adds	r1, #1
 8015a18:	e7d9      	b.n	80159ce <__s2b+0x18>
 8015a1a:	340a      	adds	r4, #10
 8015a1c:	2509      	movs	r5, #9
 8015a1e:	e7f3      	b.n	8015a08 <__s2b+0x52>
 8015a20:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015a24:	4601      	mov	r1, r0
 8015a26:	3b30      	subs	r3, #48	; 0x30
 8015a28:	220a      	movs	r2, #10
 8015a2a:	4630      	mov	r0, r6
 8015a2c:	f7ff ff88 	bl	8015940 <__multadd>
 8015a30:	e7eb      	b.n	8015a0a <__s2b+0x54>

08015a32 <__hi0bits>:
 8015a32:	0c02      	lsrs	r2, r0, #16
 8015a34:	0412      	lsls	r2, r2, #16
 8015a36:	4603      	mov	r3, r0
 8015a38:	b9b2      	cbnz	r2, 8015a68 <__hi0bits+0x36>
 8015a3a:	0403      	lsls	r3, r0, #16
 8015a3c:	2010      	movs	r0, #16
 8015a3e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8015a42:	bf04      	itt	eq
 8015a44:	021b      	lsleq	r3, r3, #8
 8015a46:	3008      	addeq	r0, #8
 8015a48:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8015a4c:	bf04      	itt	eq
 8015a4e:	011b      	lsleq	r3, r3, #4
 8015a50:	3004      	addeq	r0, #4
 8015a52:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8015a56:	bf04      	itt	eq
 8015a58:	009b      	lsleq	r3, r3, #2
 8015a5a:	3002      	addeq	r0, #2
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	db06      	blt.n	8015a6e <__hi0bits+0x3c>
 8015a60:	005b      	lsls	r3, r3, #1
 8015a62:	d503      	bpl.n	8015a6c <__hi0bits+0x3a>
 8015a64:	3001      	adds	r0, #1
 8015a66:	4770      	bx	lr
 8015a68:	2000      	movs	r0, #0
 8015a6a:	e7e8      	b.n	8015a3e <__hi0bits+0xc>
 8015a6c:	2020      	movs	r0, #32
 8015a6e:	4770      	bx	lr

08015a70 <__lo0bits>:
 8015a70:	6803      	ldr	r3, [r0, #0]
 8015a72:	f013 0207 	ands.w	r2, r3, #7
 8015a76:	4601      	mov	r1, r0
 8015a78:	d00b      	beq.n	8015a92 <__lo0bits+0x22>
 8015a7a:	07da      	lsls	r2, r3, #31
 8015a7c:	d423      	bmi.n	8015ac6 <__lo0bits+0x56>
 8015a7e:	0798      	lsls	r0, r3, #30
 8015a80:	bf49      	itett	mi
 8015a82:	085b      	lsrmi	r3, r3, #1
 8015a84:	089b      	lsrpl	r3, r3, #2
 8015a86:	2001      	movmi	r0, #1
 8015a88:	600b      	strmi	r3, [r1, #0]
 8015a8a:	bf5c      	itt	pl
 8015a8c:	600b      	strpl	r3, [r1, #0]
 8015a8e:	2002      	movpl	r0, #2
 8015a90:	4770      	bx	lr
 8015a92:	b298      	uxth	r0, r3
 8015a94:	b9a8      	cbnz	r0, 8015ac2 <__lo0bits+0x52>
 8015a96:	0c1b      	lsrs	r3, r3, #16
 8015a98:	2010      	movs	r0, #16
 8015a9a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8015a9e:	bf04      	itt	eq
 8015aa0:	0a1b      	lsreq	r3, r3, #8
 8015aa2:	3008      	addeq	r0, #8
 8015aa4:	071a      	lsls	r2, r3, #28
 8015aa6:	bf04      	itt	eq
 8015aa8:	091b      	lsreq	r3, r3, #4
 8015aaa:	3004      	addeq	r0, #4
 8015aac:	079a      	lsls	r2, r3, #30
 8015aae:	bf04      	itt	eq
 8015ab0:	089b      	lsreq	r3, r3, #2
 8015ab2:	3002      	addeq	r0, #2
 8015ab4:	07da      	lsls	r2, r3, #31
 8015ab6:	d402      	bmi.n	8015abe <__lo0bits+0x4e>
 8015ab8:	085b      	lsrs	r3, r3, #1
 8015aba:	d006      	beq.n	8015aca <__lo0bits+0x5a>
 8015abc:	3001      	adds	r0, #1
 8015abe:	600b      	str	r3, [r1, #0]
 8015ac0:	4770      	bx	lr
 8015ac2:	4610      	mov	r0, r2
 8015ac4:	e7e9      	b.n	8015a9a <__lo0bits+0x2a>
 8015ac6:	2000      	movs	r0, #0
 8015ac8:	4770      	bx	lr
 8015aca:	2020      	movs	r0, #32
 8015acc:	4770      	bx	lr

08015ace <__i2b>:
 8015ace:	b510      	push	{r4, lr}
 8015ad0:	460c      	mov	r4, r1
 8015ad2:	2101      	movs	r1, #1
 8015ad4:	f7ff fee9 	bl	80158aa <_Balloc>
 8015ad8:	2201      	movs	r2, #1
 8015ada:	6144      	str	r4, [r0, #20]
 8015adc:	6102      	str	r2, [r0, #16]
 8015ade:	bd10      	pop	{r4, pc}

08015ae0 <__multiply>:
 8015ae0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ae4:	4614      	mov	r4, r2
 8015ae6:	690a      	ldr	r2, [r1, #16]
 8015ae8:	6923      	ldr	r3, [r4, #16]
 8015aea:	429a      	cmp	r2, r3
 8015aec:	bfb8      	it	lt
 8015aee:	460b      	movlt	r3, r1
 8015af0:	4688      	mov	r8, r1
 8015af2:	bfbc      	itt	lt
 8015af4:	46a0      	movlt	r8, r4
 8015af6:	461c      	movlt	r4, r3
 8015af8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8015afc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8015b00:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015b04:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015b08:	eb07 0609 	add.w	r6, r7, r9
 8015b0c:	42b3      	cmp	r3, r6
 8015b0e:	bfb8      	it	lt
 8015b10:	3101      	addlt	r1, #1
 8015b12:	f7ff feca 	bl	80158aa <_Balloc>
 8015b16:	f100 0514 	add.w	r5, r0, #20
 8015b1a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8015b1e:	462b      	mov	r3, r5
 8015b20:	2200      	movs	r2, #0
 8015b22:	4573      	cmp	r3, lr
 8015b24:	d316      	bcc.n	8015b54 <__multiply+0x74>
 8015b26:	f104 0214 	add.w	r2, r4, #20
 8015b2a:	f108 0114 	add.w	r1, r8, #20
 8015b2e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8015b32:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8015b36:	9300      	str	r3, [sp, #0]
 8015b38:	9b00      	ldr	r3, [sp, #0]
 8015b3a:	9201      	str	r2, [sp, #4]
 8015b3c:	4293      	cmp	r3, r2
 8015b3e:	d80c      	bhi.n	8015b5a <__multiply+0x7a>
 8015b40:	2e00      	cmp	r6, #0
 8015b42:	dd03      	ble.n	8015b4c <__multiply+0x6c>
 8015b44:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	d05d      	beq.n	8015c08 <__multiply+0x128>
 8015b4c:	6106      	str	r6, [r0, #16]
 8015b4e:	b003      	add	sp, #12
 8015b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b54:	f843 2b04 	str.w	r2, [r3], #4
 8015b58:	e7e3      	b.n	8015b22 <__multiply+0x42>
 8015b5a:	f8b2 b000 	ldrh.w	fp, [r2]
 8015b5e:	f1bb 0f00 	cmp.w	fp, #0
 8015b62:	d023      	beq.n	8015bac <__multiply+0xcc>
 8015b64:	4689      	mov	r9, r1
 8015b66:	46ac      	mov	ip, r5
 8015b68:	f04f 0800 	mov.w	r8, #0
 8015b6c:	f859 4b04 	ldr.w	r4, [r9], #4
 8015b70:	f8dc a000 	ldr.w	sl, [ip]
 8015b74:	b2a3      	uxth	r3, r4
 8015b76:	fa1f fa8a 	uxth.w	sl, sl
 8015b7a:	fb0b a303 	mla	r3, fp, r3, sl
 8015b7e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8015b82:	f8dc 4000 	ldr.w	r4, [ip]
 8015b86:	4443      	add	r3, r8
 8015b88:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8015b8c:	fb0b 840a 	mla	r4, fp, sl, r8
 8015b90:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8015b94:	46e2      	mov	sl, ip
 8015b96:	b29b      	uxth	r3, r3
 8015b98:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8015b9c:	454f      	cmp	r7, r9
 8015b9e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8015ba2:	f84a 3b04 	str.w	r3, [sl], #4
 8015ba6:	d82b      	bhi.n	8015c00 <__multiply+0x120>
 8015ba8:	f8cc 8004 	str.w	r8, [ip, #4]
 8015bac:	9b01      	ldr	r3, [sp, #4]
 8015bae:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8015bb2:	3204      	adds	r2, #4
 8015bb4:	f1ba 0f00 	cmp.w	sl, #0
 8015bb8:	d020      	beq.n	8015bfc <__multiply+0x11c>
 8015bba:	682b      	ldr	r3, [r5, #0]
 8015bbc:	4689      	mov	r9, r1
 8015bbe:	46a8      	mov	r8, r5
 8015bc0:	f04f 0b00 	mov.w	fp, #0
 8015bc4:	f8b9 c000 	ldrh.w	ip, [r9]
 8015bc8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8015bcc:	fb0a 440c 	mla	r4, sl, ip, r4
 8015bd0:	445c      	add	r4, fp
 8015bd2:	46c4      	mov	ip, r8
 8015bd4:	b29b      	uxth	r3, r3
 8015bd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8015bda:	f84c 3b04 	str.w	r3, [ip], #4
 8015bde:	f859 3b04 	ldr.w	r3, [r9], #4
 8015be2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8015be6:	0c1b      	lsrs	r3, r3, #16
 8015be8:	fb0a b303 	mla	r3, sl, r3, fp
 8015bec:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8015bf0:	454f      	cmp	r7, r9
 8015bf2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8015bf6:	d805      	bhi.n	8015c04 <__multiply+0x124>
 8015bf8:	f8c8 3004 	str.w	r3, [r8, #4]
 8015bfc:	3504      	adds	r5, #4
 8015bfe:	e79b      	b.n	8015b38 <__multiply+0x58>
 8015c00:	46d4      	mov	ip, sl
 8015c02:	e7b3      	b.n	8015b6c <__multiply+0x8c>
 8015c04:	46e0      	mov	r8, ip
 8015c06:	e7dd      	b.n	8015bc4 <__multiply+0xe4>
 8015c08:	3e01      	subs	r6, #1
 8015c0a:	e799      	b.n	8015b40 <__multiply+0x60>

08015c0c <__pow5mult>:
 8015c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015c10:	4615      	mov	r5, r2
 8015c12:	f012 0203 	ands.w	r2, r2, #3
 8015c16:	4606      	mov	r6, r0
 8015c18:	460f      	mov	r7, r1
 8015c1a:	d007      	beq.n	8015c2c <__pow5mult+0x20>
 8015c1c:	3a01      	subs	r2, #1
 8015c1e:	4c21      	ldr	r4, [pc, #132]	; (8015ca4 <__pow5mult+0x98>)
 8015c20:	2300      	movs	r3, #0
 8015c22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015c26:	f7ff fe8b 	bl	8015940 <__multadd>
 8015c2a:	4607      	mov	r7, r0
 8015c2c:	10ad      	asrs	r5, r5, #2
 8015c2e:	d035      	beq.n	8015c9c <__pow5mult+0x90>
 8015c30:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8015c32:	b93c      	cbnz	r4, 8015c44 <__pow5mult+0x38>
 8015c34:	2010      	movs	r0, #16
 8015c36:	f7ff fe13 	bl	8015860 <malloc>
 8015c3a:	6270      	str	r0, [r6, #36]	; 0x24
 8015c3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015c40:	6004      	str	r4, [r0, #0]
 8015c42:	60c4      	str	r4, [r0, #12]
 8015c44:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015c48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015c4c:	b94c      	cbnz	r4, 8015c62 <__pow5mult+0x56>
 8015c4e:	f240 2171 	movw	r1, #625	; 0x271
 8015c52:	4630      	mov	r0, r6
 8015c54:	f7ff ff3b 	bl	8015ace <__i2b>
 8015c58:	2300      	movs	r3, #0
 8015c5a:	f8c8 0008 	str.w	r0, [r8, #8]
 8015c5e:	4604      	mov	r4, r0
 8015c60:	6003      	str	r3, [r0, #0]
 8015c62:	f04f 0800 	mov.w	r8, #0
 8015c66:	07eb      	lsls	r3, r5, #31
 8015c68:	d50a      	bpl.n	8015c80 <__pow5mult+0x74>
 8015c6a:	4639      	mov	r1, r7
 8015c6c:	4622      	mov	r2, r4
 8015c6e:	4630      	mov	r0, r6
 8015c70:	f7ff ff36 	bl	8015ae0 <__multiply>
 8015c74:	4639      	mov	r1, r7
 8015c76:	4681      	mov	r9, r0
 8015c78:	4630      	mov	r0, r6
 8015c7a:	f7ff fe4a 	bl	8015912 <_Bfree>
 8015c7e:	464f      	mov	r7, r9
 8015c80:	106d      	asrs	r5, r5, #1
 8015c82:	d00b      	beq.n	8015c9c <__pow5mult+0x90>
 8015c84:	6820      	ldr	r0, [r4, #0]
 8015c86:	b938      	cbnz	r0, 8015c98 <__pow5mult+0x8c>
 8015c88:	4622      	mov	r2, r4
 8015c8a:	4621      	mov	r1, r4
 8015c8c:	4630      	mov	r0, r6
 8015c8e:	f7ff ff27 	bl	8015ae0 <__multiply>
 8015c92:	6020      	str	r0, [r4, #0]
 8015c94:	f8c0 8000 	str.w	r8, [r0]
 8015c98:	4604      	mov	r4, r0
 8015c9a:	e7e4      	b.n	8015c66 <__pow5mult+0x5a>
 8015c9c:	4638      	mov	r0, r7
 8015c9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015ca2:	bf00      	nop
 8015ca4:	08017b40 	.word	0x08017b40

08015ca8 <__lshift>:
 8015ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015cac:	460c      	mov	r4, r1
 8015cae:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015cb2:	6923      	ldr	r3, [r4, #16]
 8015cb4:	6849      	ldr	r1, [r1, #4]
 8015cb6:	eb0a 0903 	add.w	r9, sl, r3
 8015cba:	68a3      	ldr	r3, [r4, #8]
 8015cbc:	4607      	mov	r7, r0
 8015cbe:	4616      	mov	r6, r2
 8015cc0:	f109 0501 	add.w	r5, r9, #1
 8015cc4:	42ab      	cmp	r3, r5
 8015cc6:	db32      	blt.n	8015d2e <__lshift+0x86>
 8015cc8:	4638      	mov	r0, r7
 8015cca:	f7ff fdee 	bl	80158aa <_Balloc>
 8015cce:	2300      	movs	r3, #0
 8015cd0:	4680      	mov	r8, r0
 8015cd2:	f100 0114 	add.w	r1, r0, #20
 8015cd6:	461a      	mov	r2, r3
 8015cd8:	4553      	cmp	r3, sl
 8015cda:	db2b      	blt.n	8015d34 <__lshift+0x8c>
 8015cdc:	6920      	ldr	r0, [r4, #16]
 8015cde:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015ce2:	f104 0314 	add.w	r3, r4, #20
 8015ce6:	f016 021f 	ands.w	r2, r6, #31
 8015cea:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015cee:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015cf2:	d025      	beq.n	8015d40 <__lshift+0x98>
 8015cf4:	f1c2 0e20 	rsb	lr, r2, #32
 8015cf8:	2000      	movs	r0, #0
 8015cfa:	681e      	ldr	r6, [r3, #0]
 8015cfc:	468a      	mov	sl, r1
 8015cfe:	4096      	lsls	r6, r2
 8015d00:	4330      	orrs	r0, r6
 8015d02:	f84a 0b04 	str.w	r0, [sl], #4
 8015d06:	f853 0b04 	ldr.w	r0, [r3], #4
 8015d0a:	459c      	cmp	ip, r3
 8015d0c:	fa20 f00e 	lsr.w	r0, r0, lr
 8015d10:	d814      	bhi.n	8015d3c <__lshift+0x94>
 8015d12:	6048      	str	r0, [r1, #4]
 8015d14:	b108      	cbz	r0, 8015d1a <__lshift+0x72>
 8015d16:	f109 0502 	add.w	r5, r9, #2
 8015d1a:	3d01      	subs	r5, #1
 8015d1c:	4638      	mov	r0, r7
 8015d1e:	f8c8 5010 	str.w	r5, [r8, #16]
 8015d22:	4621      	mov	r1, r4
 8015d24:	f7ff fdf5 	bl	8015912 <_Bfree>
 8015d28:	4640      	mov	r0, r8
 8015d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d2e:	3101      	adds	r1, #1
 8015d30:	005b      	lsls	r3, r3, #1
 8015d32:	e7c7      	b.n	8015cc4 <__lshift+0x1c>
 8015d34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8015d38:	3301      	adds	r3, #1
 8015d3a:	e7cd      	b.n	8015cd8 <__lshift+0x30>
 8015d3c:	4651      	mov	r1, sl
 8015d3e:	e7dc      	b.n	8015cfa <__lshift+0x52>
 8015d40:	3904      	subs	r1, #4
 8015d42:	f853 2b04 	ldr.w	r2, [r3], #4
 8015d46:	f841 2f04 	str.w	r2, [r1, #4]!
 8015d4a:	459c      	cmp	ip, r3
 8015d4c:	d8f9      	bhi.n	8015d42 <__lshift+0x9a>
 8015d4e:	e7e4      	b.n	8015d1a <__lshift+0x72>

08015d50 <__mcmp>:
 8015d50:	6903      	ldr	r3, [r0, #16]
 8015d52:	690a      	ldr	r2, [r1, #16]
 8015d54:	1a9b      	subs	r3, r3, r2
 8015d56:	b530      	push	{r4, r5, lr}
 8015d58:	d10c      	bne.n	8015d74 <__mcmp+0x24>
 8015d5a:	0092      	lsls	r2, r2, #2
 8015d5c:	3014      	adds	r0, #20
 8015d5e:	3114      	adds	r1, #20
 8015d60:	1884      	adds	r4, r0, r2
 8015d62:	4411      	add	r1, r2
 8015d64:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8015d68:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8015d6c:	4295      	cmp	r5, r2
 8015d6e:	d003      	beq.n	8015d78 <__mcmp+0x28>
 8015d70:	d305      	bcc.n	8015d7e <__mcmp+0x2e>
 8015d72:	2301      	movs	r3, #1
 8015d74:	4618      	mov	r0, r3
 8015d76:	bd30      	pop	{r4, r5, pc}
 8015d78:	42a0      	cmp	r0, r4
 8015d7a:	d3f3      	bcc.n	8015d64 <__mcmp+0x14>
 8015d7c:	e7fa      	b.n	8015d74 <__mcmp+0x24>
 8015d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8015d82:	e7f7      	b.n	8015d74 <__mcmp+0x24>

08015d84 <__mdiff>:
 8015d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015d88:	460d      	mov	r5, r1
 8015d8a:	4607      	mov	r7, r0
 8015d8c:	4611      	mov	r1, r2
 8015d8e:	4628      	mov	r0, r5
 8015d90:	4614      	mov	r4, r2
 8015d92:	f7ff ffdd 	bl	8015d50 <__mcmp>
 8015d96:	1e06      	subs	r6, r0, #0
 8015d98:	d108      	bne.n	8015dac <__mdiff+0x28>
 8015d9a:	4631      	mov	r1, r6
 8015d9c:	4638      	mov	r0, r7
 8015d9e:	f7ff fd84 	bl	80158aa <_Balloc>
 8015da2:	2301      	movs	r3, #1
 8015da4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8015da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015dac:	bfa4      	itt	ge
 8015dae:	4623      	movge	r3, r4
 8015db0:	462c      	movge	r4, r5
 8015db2:	4638      	mov	r0, r7
 8015db4:	6861      	ldr	r1, [r4, #4]
 8015db6:	bfa6      	itte	ge
 8015db8:	461d      	movge	r5, r3
 8015dba:	2600      	movge	r6, #0
 8015dbc:	2601      	movlt	r6, #1
 8015dbe:	f7ff fd74 	bl	80158aa <_Balloc>
 8015dc2:	692b      	ldr	r3, [r5, #16]
 8015dc4:	60c6      	str	r6, [r0, #12]
 8015dc6:	6926      	ldr	r6, [r4, #16]
 8015dc8:	f105 0914 	add.w	r9, r5, #20
 8015dcc:	f104 0214 	add.w	r2, r4, #20
 8015dd0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8015dd4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8015dd8:	f100 0514 	add.w	r5, r0, #20
 8015ddc:	f04f 0e00 	mov.w	lr, #0
 8015de0:	f852 ab04 	ldr.w	sl, [r2], #4
 8015de4:	f859 4b04 	ldr.w	r4, [r9], #4
 8015de8:	fa1e f18a 	uxtah	r1, lr, sl
 8015dec:	b2a3      	uxth	r3, r4
 8015dee:	1ac9      	subs	r1, r1, r3
 8015df0:	0c23      	lsrs	r3, r4, #16
 8015df2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8015df6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8015dfa:	b289      	uxth	r1, r1
 8015dfc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8015e00:	45c8      	cmp	r8, r9
 8015e02:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8015e06:	4694      	mov	ip, r2
 8015e08:	f845 3b04 	str.w	r3, [r5], #4
 8015e0c:	d8e8      	bhi.n	8015de0 <__mdiff+0x5c>
 8015e0e:	45bc      	cmp	ip, r7
 8015e10:	d304      	bcc.n	8015e1c <__mdiff+0x98>
 8015e12:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8015e16:	b183      	cbz	r3, 8015e3a <__mdiff+0xb6>
 8015e18:	6106      	str	r6, [r0, #16]
 8015e1a:	e7c5      	b.n	8015da8 <__mdiff+0x24>
 8015e1c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8015e20:	fa1e f381 	uxtah	r3, lr, r1
 8015e24:	141a      	asrs	r2, r3, #16
 8015e26:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8015e2a:	b29b      	uxth	r3, r3
 8015e2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015e30:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8015e34:	f845 3b04 	str.w	r3, [r5], #4
 8015e38:	e7e9      	b.n	8015e0e <__mdiff+0x8a>
 8015e3a:	3e01      	subs	r6, #1
 8015e3c:	e7e9      	b.n	8015e12 <__mdiff+0x8e>
	...

08015e40 <__ulp>:
 8015e40:	4b12      	ldr	r3, [pc, #72]	; (8015e8c <__ulp+0x4c>)
 8015e42:	ee10 2a90 	vmov	r2, s1
 8015e46:	401a      	ands	r2, r3
 8015e48:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	dd04      	ble.n	8015e5a <__ulp+0x1a>
 8015e50:	2000      	movs	r0, #0
 8015e52:	4619      	mov	r1, r3
 8015e54:	ec41 0b10 	vmov	d0, r0, r1
 8015e58:	4770      	bx	lr
 8015e5a:	425b      	negs	r3, r3
 8015e5c:	151b      	asrs	r3, r3, #20
 8015e5e:	2b13      	cmp	r3, #19
 8015e60:	f04f 0000 	mov.w	r0, #0
 8015e64:	f04f 0100 	mov.w	r1, #0
 8015e68:	dc04      	bgt.n	8015e74 <__ulp+0x34>
 8015e6a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8015e6e:	fa42 f103 	asr.w	r1, r2, r3
 8015e72:	e7ef      	b.n	8015e54 <__ulp+0x14>
 8015e74:	3b14      	subs	r3, #20
 8015e76:	2b1e      	cmp	r3, #30
 8015e78:	f04f 0201 	mov.w	r2, #1
 8015e7c:	bfda      	itte	le
 8015e7e:	f1c3 031f 	rsble	r3, r3, #31
 8015e82:	fa02 f303 	lslle.w	r3, r2, r3
 8015e86:	4613      	movgt	r3, r2
 8015e88:	4618      	mov	r0, r3
 8015e8a:	e7e3      	b.n	8015e54 <__ulp+0x14>
 8015e8c:	7ff00000 	.word	0x7ff00000

08015e90 <__b2d>:
 8015e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e92:	6905      	ldr	r5, [r0, #16]
 8015e94:	f100 0714 	add.w	r7, r0, #20
 8015e98:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8015e9c:	1f2e      	subs	r6, r5, #4
 8015e9e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8015ea2:	4620      	mov	r0, r4
 8015ea4:	f7ff fdc5 	bl	8015a32 <__hi0bits>
 8015ea8:	f1c0 0320 	rsb	r3, r0, #32
 8015eac:	280a      	cmp	r0, #10
 8015eae:	600b      	str	r3, [r1, #0]
 8015eb0:	f8df c074 	ldr.w	ip, [pc, #116]	; 8015f28 <__b2d+0x98>
 8015eb4:	dc14      	bgt.n	8015ee0 <__b2d+0x50>
 8015eb6:	f1c0 0e0b 	rsb	lr, r0, #11
 8015eba:	fa24 f10e 	lsr.w	r1, r4, lr
 8015ebe:	42b7      	cmp	r7, r6
 8015ec0:	ea41 030c 	orr.w	r3, r1, ip
 8015ec4:	bf34      	ite	cc
 8015ec6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015eca:	2100      	movcs	r1, #0
 8015ecc:	3015      	adds	r0, #21
 8015ece:	fa04 f000 	lsl.w	r0, r4, r0
 8015ed2:	fa21 f10e 	lsr.w	r1, r1, lr
 8015ed6:	ea40 0201 	orr.w	r2, r0, r1
 8015eda:	ec43 2b10 	vmov	d0, r2, r3
 8015ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015ee0:	42b7      	cmp	r7, r6
 8015ee2:	bf3a      	itte	cc
 8015ee4:	f1a5 0608 	subcc.w	r6, r5, #8
 8015ee8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015eec:	2100      	movcs	r1, #0
 8015eee:	380b      	subs	r0, #11
 8015ef0:	d015      	beq.n	8015f1e <__b2d+0x8e>
 8015ef2:	4084      	lsls	r4, r0
 8015ef4:	f1c0 0520 	rsb	r5, r0, #32
 8015ef8:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8015efc:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8015f00:	42be      	cmp	r6, r7
 8015f02:	fa21 fc05 	lsr.w	ip, r1, r5
 8015f06:	ea44 030c 	orr.w	r3, r4, ip
 8015f0a:	bf8c      	ite	hi
 8015f0c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8015f10:	2400      	movls	r4, #0
 8015f12:	fa01 f000 	lsl.w	r0, r1, r0
 8015f16:	40ec      	lsrs	r4, r5
 8015f18:	ea40 0204 	orr.w	r2, r0, r4
 8015f1c:	e7dd      	b.n	8015eda <__b2d+0x4a>
 8015f1e:	ea44 030c 	orr.w	r3, r4, ip
 8015f22:	460a      	mov	r2, r1
 8015f24:	e7d9      	b.n	8015eda <__b2d+0x4a>
 8015f26:	bf00      	nop
 8015f28:	3ff00000 	.word	0x3ff00000

08015f2c <__d2b>:
 8015f2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015f30:	460e      	mov	r6, r1
 8015f32:	2101      	movs	r1, #1
 8015f34:	ec59 8b10 	vmov	r8, r9, d0
 8015f38:	4615      	mov	r5, r2
 8015f3a:	f7ff fcb6 	bl	80158aa <_Balloc>
 8015f3e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8015f42:	4607      	mov	r7, r0
 8015f44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015f48:	bb34      	cbnz	r4, 8015f98 <__d2b+0x6c>
 8015f4a:	9301      	str	r3, [sp, #4]
 8015f4c:	f1b8 0300 	subs.w	r3, r8, #0
 8015f50:	d027      	beq.n	8015fa2 <__d2b+0x76>
 8015f52:	a802      	add	r0, sp, #8
 8015f54:	f840 3d08 	str.w	r3, [r0, #-8]!
 8015f58:	f7ff fd8a 	bl	8015a70 <__lo0bits>
 8015f5c:	9900      	ldr	r1, [sp, #0]
 8015f5e:	b1f0      	cbz	r0, 8015f9e <__d2b+0x72>
 8015f60:	9a01      	ldr	r2, [sp, #4]
 8015f62:	f1c0 0320 	rsb	r3, r0, #32
 8015f66:	fa02 f303 	lsl.w	r3, r2, r3
 8015f6a:	430b      	orrs	r3, r1
 8015f6c:	40c2      	lsrs	r2, r0
 8015f6e:	617b      	str	r3, [r7, #20]
 8015f70:	9201      	str	r2, [sp, #4]
 8015f72:	9b01      	ldr	r3, [sp, #4]
 8015f74:	61bb      	str	r3, [r7, #24]
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	bf14      	ite	ne
 8015f7a:	2102      	movne	r1, #2
 8015f7c:	2101      	moveq	r1, #1
 8015f7e:	6139      	str	r1, [r7, #16]
 8015f80:	b1c4      	cbz	r4, 8015fb4 <__d2b+0x88>
 8015f82:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8015f86:	4404      	add	r4, r0
 8015f88:	6034      	str	r4, [r6, #0]
 8015f8a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015f8e:	6028      	str	r0, [r5, #0]
 8015f90:	4638      	mov	r0, r7
 8015f92:	b003      	add	sp, #12
 8015f94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015f98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015f9c:	e7d5      	b.n	8015f4a <__d2b+0x1e>
 8015f9e:	6179      	str	r1, [r7, #20]
 8015fa0:	e7e7      	b.n	8015f72 <__d2b+0x46>
 8015fa2:	a801      	add	r0, sp, #4
 8015fa4:	f7ff fd64 	bl	8015a70 <__lo0bits>
 8015fa8:	9b01      	ldr	r3, [sp, #4]
 8015faa:	617b      	str	r3, [r7, #20]
 8015fac:	2101      	movs	r1, #1
 8015fae:	6139      	str	r1, [r7, #16]
 8015fb0:	3020      	adds	r0, #32
 8015fb2:	e7e5      	b.n	8015f80 <__d2b+0x54>
 8015fb4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8015fb8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015fbc:	6030      	str	r0, [r6, #0]
 8015fbe:	6918      	ldr	r0, [r3, #16]
 8015fc0:	f7ff fd37 	bl	8015a32 <__hi0bits>
 8015fc4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8015fc8:	e7e1      	b.n	8015f8e <__d2b+0x62>

08015fca <__ratio>:
 8015fca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fce:	4688      	mov	r8, r1
 8015fd0:	4669      	mov	r1, sp
 8015fd2:	4681      	mov	r9, r0
 8015fd4:	f7ff ff5c 	bl	8015e90 <__b2d>
 8015fd8:	a901      	add	r1, sp, #4
 8015fda:	4640      	mov	r0, r8
 8015fdc:	ec57 6b10 	vmov	r6, r7, d0
 8015fe0:	f7ff ff56 	bl	8015e90 <__b2d>
 8015fe4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015fe8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015fec:	eba3 0c02 	sub.w	ip, r3, r2
 8015ff0:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015ff4:	1a9b      	subs	r3, r3, r2
 8015ff6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8015ffa:	ec5b ab10 	vmov	sl, fp, d0
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	bfce      	itee	gt
 8016002:	463a      	movgt	r2, r7
 8016004:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016008:	465a      	movle	r2, fp
 801600a:	4659      	mov	r1, fp
 801600c:	463d      	mov	r5, r7
 801600e:	bfd4      	ite	le
 8016010:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8016014:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8016018:	4630      	mov	r0, r6
 801601a:	ee10 2a10 	vmov	r2, s0
 801601e:	460b      	mov	r3, r1
 8016020:	4629      	mov	r1, r5
 8016022:	f7ea fc2b 	bl	800087c <__aeabi_ddiv>
 8016026:	ec41 0b10 	vmov	d0, r0, r1
 801602a:	b003      	add	sp, #12
 801602c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016030 <__copybits>:
 8016030:	3901      	subs	r1, #1
 8016032:	b510      	push	{r4, lr}
 8016034:	1149      	asrs	r1, r1, #5
 8016036:	6914      	ldr	r4, [r2, #16]
 8016038:	3101      	adds	r1, #1
 801603a:	f102 0314 	add.w	r3, r2, #20
 801603e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016042:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016046:	42a3      	cmp	r3, r4
 8016048:	4602      	mov	r2, r0
 801604a:	d303      	bcc.n	8016054 <__copybits+0x24>
 801604c:	2300      	movs	r3, #0
 801604e:	428a      	cmp	r2, r1
 8016050:	d305      	bcc.n	801605e <__copybits+0x2e>
 8016052:	bd10      	pop	{r4, pc}
 8016054:	f853 2b04 	ldr.w	r2, [r3], #4
 8016058:	f840 2b04 	str.w	r2, [r0], #4
 801605c:	e7f3      	b.n	8016046 <__copybits+0x16>
 801605e:	f842 3b04 	str.w	r3, [r2], #4
 8016062:	e7f4      	b.n	801604e <__copybits+0x1e>

08016064 <__any_on>:
 8016064:	f100 0214 	add.w	r2, r0, #20
 8016068:	6900      	ldr	r0, [r0, #16]
 801606a:	114b      	asrs	r3, r1, #5
 801606c:	4298      	cmp	r0, r3
 801606e:	b510      	push	{r4, lr}
 8016070:	db11      	blt.n	8016096 <__any_on+0x32>
 8016072:	dd0a      	ble.n	801608a <__any_on+0x26>
 8016074:	f011 011f 	ands.w	r1, r1, #31
 8016078:	d007      	beq.n	801608a <__any_on+0x26>
 801607a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801607e:	fa24 f001 	lsr.w	r0, r4, r1
 8016082:	fa00 f101 	lsl.w	r1, r0, r1
 8016086:	428c      	cmp	r4, r1
 8016088:	d10b      	bne.n	80160a2 <__any_on+0x3e>
 801608a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801608e:	4293      	cmp	r3, r2
 8016090:	d803      	bhi.n	801609a <__any_on+0x36>
 8016092:	2000      	movs	r0, #0
 8016094:	bd10      	pop	{r4, pc}
 8016096:	4603      	mov	r3, r0
 8016098:	e7f7      	b.n	801608a <__any_on+0x26>
 801609a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801609e:	2900      	cmp	r1, #0
 80160a0:	d0f5      	beq.n	801608e <__any_on+0x2a>
 80160a2:	2001      	movs	r0, #1
 80160a4:	e7f6      	b.n	8016094 <__any_on+0x30>

080160a6 <_calloc_r>:
 80160a6:	b538      	push	{r3, r4, r5, lr}
 80160a8:	fb02 f401 	mul.w	r4, r2, r1
 80160ac:	4621      	mov	r1, r4
 80160ae:	f000 f857 	bl	8016160 <_malloc_r>
 80160b2:	4605      	mov	r5, r0
 80160b4:	b118      	cbz	r0, 80160be <_calloc_r+0x18>
 80160b6:	4622      	mov	r2, r4
 80160b8:	2100      	movs	r1, #0
 80160ba:	f7fc f8fd 	bl	80122b8 <memset>
 80160be:	4628      	mov	r0, r5
 80160c0:	bd38      	pop	{r3, r4, r5, pc}
	...

080160c4 <_free_r>:
 80160c4:	b538      	push	{r3, r4, r5, lr}
 80160c6:	4605      	mov	r5, r0
 80160c8:	2900      	cmp	r1, #0
 80160ca:	d045      	beq.n	8016158 <_free_r+0x94>
 80160cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80160d0:	1f0c      	subs	r4, r1, #4
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	bfb8      	it	lt
 80160d6:	18e4      	addlt	r4, r4, r3
 80160d8:	f000 ffdb 	bl	8017092 <__malloc_lock>
 80160dc:	4a1f      	ldr	r2, [pc, #124]	; (801615c <_free_r+0x98>)
 80160de:	6813      	ldr	r3, [r2, #0]
 80160e0:	4610      	mov	r0, r2
 80160e2:	b933      	cbnz	r3, 80160f2 <_free_r+0x2e>
 80160e4:	6063      	str	r3, [r4, #4]
 80160e6:	6014      	str	r4, [r2, #0]
 80160e8:	4628      	mov	r0, r5
 80160ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80160ee:	f000 bfd1 	b.w	8017094 <__malloc_unlock>
 80160f2:	42a3      	cmp	r3, r4
 80160f4:	d90c      	bls.n	8016110 <_free_r+0x4c>
 80160f6:	6821      	ldr	r1, [r4, #0]
 80160f8:	1862      	adds	r2, r4, r1
 80160fa:	4293      	cmp	r3, r2
 80160fc:	bf04      	itt	eq
 80160fe:	681a      	ldreq	r2, [r3, #0]
 8016100:	685b      	ldreq	r3, [r3, #4]
 8016102:	6063      	str	r3, [r4, #4]
 8016104:	bf04      	itt	eq
 8016106:	1852      	addeq	r2, r2, r1
 8016108:	6022      	streq	r2, [r4, #0]
 801610a:	6004      	str	r4, [r0, #0]
 801610c:	e7ec      	b.n	80160e8 <_free_r+0x24>
 801610e:	4613      	mov	r3, r2
 8016110:	685a      	ldr	r2, [r3, #4]
 8016112:	b10a      	cbz	r2, 8016118 <_free_r+0x54>
 8016114:	42a2      	cmp	r2, r4
 8016116:	d9fa      	bls.n	801610e <_free_r+0x4a>
 8016118:	6819      	ldr	r1, [r3, #0]
 801611a:	1858      	adds	r0, r3, r1
 801611c:	42a0      	cmp	r0, r4
 801611e:	d10b      	bne.n	8016138 <_free_r+0x74>
 8016120:	6820      	ldr	r0, [r4, #0]
 8016122:	4401      	add	r1, r0
 8016124:	1858      	adds	r0, r3, r1
 8016126:	4282      	cmp	r2, r0
 8016128:	6019      	str	r1, [r3, #0]
 801612a:	d1dd      	bne.n	80160e8 <_free_r+0x24>
 801612c:	6810      	ldr	r0, [r2, #0]
 801612e:	6852      	ldr	r2, [r2, #4]
 8016130:	605a      	str	r2, [r3, #4]
 8016132:	4401      	add	r1, r0
 8016134:	6019      	str	r1, [r3, #0]
 8016136:	e7d7      	b.n	80160e8 <_free_r+0x24>
 8016138:	d902      	bls.n	8016140 <_free_r+0x7c>
 801613a:	230c      	movs	r3, #12
 801613c:	602b      	str	r3, [r5, #0]
 801613e:	e7d3      	b.n	80160e8 <_free_r+0x24>
 8016140:	6820      	ldr	r0, [r4, #0]
 8016142:	1821      	adds	r1, r4, r0
 8016144:	428a      	cmp	r2, r1
 8016146:	bf04      	itt	eq
 8016148:	6811      	ldreq	r1, [r2, #0]
 801614a:	6852      	ldreq	r2, [r2, #4]
 801614c:	6062      	str	r2, [r4, #4]
 801614e:	bf04      	itt	eq
 8016150:	1809      	addeq	r1, r1, r0
 8016152:	6021      	streq	r1, [r4, #0]
 8016154:	605c      	str	r4, [r3, #4]
 8016156:	e7c7      	b.n	80160e8 <_free_r+0x24>
 8016158:	bd38      	pop	{r3, r4, r5, pc}
 801615a:	bf00      	nop
 801615c:	20013954 	.word	0x20013954

08016160 <_malloc_r>:
 8016160:	b570      	push	{r4, r5, r6, lr}
 8016162:	1ccd      	adds	r5, r1, #3
 8016164:	f025 0503 	bic.w	r5, r5, #3
 8016168:	3508      	adds	r5, #8
 801616a:	2d0c      	cmp	r5, #12
 801616c:	bf38      	it	cc
 801616e:	250c      	movcc	r5, #12
 8016170:	2d00      	cmp	r5, #0
 8016172:	4606      	mov	r6, r0
 8016174:	db01      	blt.n	801617a <_malloc_r+0x1a>
 8016176:	42a9      	cmp	r1, r5
 8016178:	d903      	bls.n	8016182 <_malloc_r+0x22>
 801617a:	230c      	movs	r3, #12
 801617c:	6033      	str	r3, [r6, #0]
 801617e:	2000      	movs	r0, #0
 8016180:	bd70      	pop	{r4, r5, r6, pc}
 8016182:	f000 ff86 	bl	8017092 <__malloc_lock>
 8016186:	4a21      	ldr	r2, [pc, #132]	; (801620c <_malloc_r+0xac>)
 8016188:	6814      	ldr	r4, [r2, #0]
 801618a:	4621      	mov	r1, r4
 801618c:	b991      	cbnz	r1, 80161b4 <_malloc_r+0x54>
 801618e:	4c20      	ldr	r4, [pc, #128]	; (8016210 <_malloc_r+0xb0>)
 8016190:	6823      	ldr	r3, [r4, #0]
 8016192:	b91b      	cbnz	r3, 801619c <_malloc_r+0x3c>
 8016194:	4630      	mov	r0, r6
 8016196:	f000 fe19 	bl	8016dcc <_sbrk_r>
 801619a:	6020      	str	r0, [r4, #0]
 801619c:	4629      	mov	r1, r5
 801619e:	4630      	mov	r0, r6
 80161a0:	f000 fe14 	bl	8016dcc <_sbrk_r>
 80161a4:	1c43      	adds	r3, r0, #1
 80161a6:	d124      	bne.n	80161f2 <_malloc_r+0x92>
 80161a8:	230c      	movs	r3, #12
 80161aa:	6033      	str	r3, [r6, #0]
 80161ac:	4630      	mov	r0, r6
 80161ae:	f000 ff71 	bl	8017094 <__malloc_unlock>
 80161b2:	e7e4      	b.n	801617e <_malloc_r+0x1e>
 80161b4:	680b      	ldr	r3, [r1, #0]
 80161b6:	1b5b      	subs	r3, r3, r5
 80161b8:	d418      	bmi.n	80161ec <_malloc_r+0x8c>
 80161ba:	2b0b      	cmp	r3, #11
 80161bc:	d90f      	bls.n	80161de <_malloc_r+0x7e>
 80161be:	600b      	str	r3, [r1, #0]
 80161c0:	50cd      	str	r5, [r1, r3]
 80161c2:	18cc      	adds	r4, r1, r3
 80161c4:	4630      	mov	r0, r6
 80161c6:	f000 ff65 	bl	8017094 <__malloc_unlock>
 80161ca:	f104 000b 	add.w	r0, r4, #11
 80161ce:	1d23      	adds	r3, r4, #4
 80161d0:	f020 0007 	bic.w	r0, r0, #7
 80161d4:	1ac3      	subs	r3, r0, r3
 80161d6:	d0d3      	beq.n	8016180 <_malloc_r+0x20>
 80161d8:	425a      	negs	r2, r3
 80161da:	50e2      	str	r2, [r4, r3]
 80161dc:	e7d0      	b.n	8016180 <_malloc_r+0x20>
 80161de:	428c      	cmp	r4, r1
 80161e0:	684b      	ldr	r3, [r1, #4]
 80161e2:	bf16      	itet	ne
 80161e4:	6063      	strne	r3, [r4, #4]
 80161e6:	6013      	streq	r3, [r2, #0]
 80161e8:	460c      	movne	r4, r1
 80161ea:	e7eb      	b.n	80161c4 <_malloc_r+0x64>
 80161ec:	460c      	mov	r4, r1
 80161ee:	6849      	ldr	r1, [r1, #4]
 80161f0:	e7cc      	b.n	801618c <_malloc_r+0x2c>
 80161f2:	1cc4      	adds	r4, r0, #3
 80161f4:	f024 0403 	bic.w	r4, r4, #3
 80161f8:	42a0      	cmp	r0, r4
 80161fa:	d005      	beq.n	8016208 <_malloc_r+0xa8>
 80161fc:	1a21      	subs	r1, r4, r0
 80161fe:	4630      	mov	r0, r6
 8016200:	f000 fde4 	bl	8016dcc <_sbrk_r>
 8016204:	3001      	adds	r0, #1
 8016206:	d0cf      	beq.n	80161a8 <_malloc_r+0x48>
 8016208:	6025      	str	r5, [r4, #0]
 801620a:	e7db      	b.n	80161c4 <_malloc_r+0x64>
 801620c:	20013954 	.word	0x20013954
 8016210:	20013958 	.word	0x20013958

08016214 <__ssputs_r>:
 8016214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016218:	688e      	ldr	r6, [r1, #8]
 801621a:	429e      	cmp	r6, r3
 801621c:	4682      	mov	sl, r0
 801621e:	460c      	mov	r4, r1
 8016220:	4690      	mov	r8, r2
 8016222:	4699      	mov	r9, r3
 8016224:	d837      	bhi.n	8016296 <__ssputs_r+0x82>
 8016226:	898a      	ldrh	r2, [r1, #12]
 8016228:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801622c:	d031      	beq.n	8016292 <__ssputs_r+0x7e>
 801622e:	6825      	ldr	r5, [r4, #0]
 8016230:	6909      	ldr	r1, [r1, #16]
 8016232:	1a6f      	subs	r7, r5, r1
 8016234:	6965      	ldr	r5, [r4, #20]
 8016236:	2302      	movs	r3, #2
 8016238:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801623c:	fb95 f5f3 	sdiv	r5, r5, r3
 8016240:	f109 0301 	add.w	r3, r9, #1
 8016244:	443b      	add	r3, r7
 8016246:	429d      	cmp	r5, r3
 8016248:	bf38      	it	cc
 801624a:	461d      	movcc	r5, r3
 801624c:	0553      	lsls	r3, r2, #21
 801624e:	d530      	bpl.n	80162b2 <__ssputs_r+0x9e>
 8016250:	4629      	mov	r1, r5
 8016252:	f7ff ff85 	bl	8016160 <_malloc_r>
 8016256:	4606      	mov	r6, r0
 8016258:	b950      	cbnz	r0, 8016270 <__ssputs_r+0x5c>
 801625a:	230c      	movs	r3, #12
 801625c:	f8ca 3000 	str.w	r3, [sl]
 8016260:	89a3      	ldrh	r3, [r4, #12]
 8016262:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016266:	81a3      	strh	r3, [r4, #12]
 8016268:	f04f 30ff 	mov.w	r0, #4294967295
 801626c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016270:	463a      	mov	r2, r7
 8016272:	6921      	ldr	r1, [r4, #16]
 8016274:	f7ff fb0e 	bl	8015894 <memcpy>
 8016278:	89a3      	ldrh	r3, [r4, #12]
 801627a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801627e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016282:	81a3      	strh	r3, [r4, #12]
 8016284:	6126      	str	r6, [r4, #16]
 8016286:	6165      	str	r5, [r4, #20]
 8016288:	443e      	add	r6, r7
 801628a:	1bed      	subs	r5, r5, r7
 801628c:	6026      	str	r6, [r4, #0]
 801628e:	60a5      	str	r5, [r4, #8]
 8016290:	464e      	mov	r6, r9
 8016292:	454e      	cmp	r6, r9
 8016294:	d900      	bls.n	8016298 <__ssputs_r+0x84>
 8016296:	464e      	mov	r6, r9
 8016298:	4632      	mov	r2, r6
 801629a:	4641      	mov	r1, r8
 801629c:	6820      	ldr	r0, [r4, #0]
 801629e:	f000 fedf 	bl	8017060 <memmove>
 80162a2:	68a3      	ldr	r3, [r4, #8]
 80162a4:	1b9b      	subs	r3, r3, r6
 80162a6:	60a3      	str	r3, [r4, #8]
 80162a8:	6823      	ldr	r3, [r4, #0]
 80162aa:	441e      	add	r6, r3
 80162ac:	6026      	str	r6, [r4, #0]
 80162ae:	2000      	movs	r0, #0
 80162b0:	e7dc      	b.n	801626c <__ssputs_r+0x58>
 80162b2:	462a      	mov	r2, r5
 80162b4:	f000 feef 	bl	8017096 <_realloc_r>
 80162b8:	4606      	mov	r6, r0
 80162ba:	2800      	cmp	r0, #0
 80162bc:	d1e2      	bne.n	8016284 <__ssputs_r+0x70>
 80162be:	6921      	ldr	r1, [r4, #16]
 80162c0:	4650      	mov	r0, sl
 80162c2:	f7ff feff 	bl	80160c4 <_free_r>
 80162c6:	e7c8      	b.n	801625a <__ssputs_r+0x46>

080162c8 <_svfiprintf_r>:
 80162c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162cc:	461d      	mov	r5, r3
 80162ce:	898b      	ldrh	r3, [r1, #12]
 80162d0:	061f      	lsls	r7, r3, #24
 80162d2:	b09d      	sub	sp, #116	; 0x74
 80162d4:	4680      	mov	r8, r0
 80162d6:	460c      	mov	r4, r1
 80162d8:	4616      	mov	r6, r2
 80162da:	d50f      	bpl.n	80162fc <_svfiprintf_r+0x34>
 80162dc:	690b      	ldr	r3, [r1, #16]
 80162de:	b96b      	cbnz	r3, 80162fc <_svfiprintf_r+0x34>
 80162e0:	2140      	movs	r1, #64	; 0x40
 80162e2:	f7ff ff3d 	bl	8016160 <_malloc_r>
 80162e6:	6020      	str	r0, [r4, #0]
 80162e8:	6120      	str	r0, [r4, #16]
 80162ea:	b928      	cbnz	r0, 80162f8 <_svfiprintf_r+0x30>
 80162ec:	230c      	movs	r3, #12
 80162ee:	f8c8 3000 	str.w	r3, [r8]
 80162f2:	f04f 30ff 	mov.w	r0, #4294967295
 80162f6:	e0c8      	b.n	801648a <_svfiprintf_r+0x1c2>
 80162f8:	2340      	movs	r3, #64	; 0x40
 80162fa:	6163      	str	r3, [r4, #20]
 80162fc:	2300      	movs	r3, #0
 80162fe:	9309      	str	r3, [sp, #36]	; 0x24
 8016300:	2320      	movs	r3, #32
 8016302:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016306:	2330      	movs	r3, #48	; 0x30
 8016308:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801630c:	9503      	str	r5, [sp, #12]
 801630e:	f04f 0b01 	mov.w	fp, #1
 8016312:	4637      	mov	r7, r6
 8016314:	463d      	mov	r5, r7
 8016316:	f815 3b01 	ldrb.w	r3, [r5], #1
 801631a:	b10b      	cbz	r3, 8016320 <_svfiprintf_r+0x58>
 801631c:	2b25      	cmp	r3, #37	; 0x25
 801631e:	d13e      	bne.n	801639e <_svfiprintf_r+0xd6>
 8016320:	ebb7 0a06 	subs.w	sl, r7, r6
 8016324:	d00b      	beq.n	801633e <_svfiprintf_r+0x76>
 8016326:	4653      	mov	r3, sl
 8016328:	4632      	mov	r2, r6
 801632a:	4621      	mov	r1, r4
 801632c:	4640      	mov	r0, r8
 801632e:	f7ff ff71 	bl	8016214 <__ssputs_r>
 8016332:	3001      	adds	r0, #1
 8016334:	f000 80a4 	beq.w	8016480 <_svfiprintf_r+0x1b8>
 8016338:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801633a:	4453      	add	r3, sl
 801633c:	9309      	str	r3, [sp, #36]	; 0x24
 801633e:	783b      	ldrb	r3, [r7, #0]
 8016340:	2b00      	cmp	r3, #0
 8016342:	f000 809d 	beq.w	8016480 <_svfiprintf_r+0x1b8>
 8016346:	2300      	movs	r3, #0
 8016348:	f04f 32ff 	mov.w	r2, #4294967295
 801634c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016350:	9304      	str	r3, [sp, #16]
 8016352:	9307      	str	r3, [sp, #28]
 8016354:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016358:	931a      	str	r3, [sp, #104]	; 0x68
 801635a:	462f      	mov	r7, r5
 801635c:	2205      	movs	r2, #5
 801635e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8016362:	4850      	ldr	r0, [pc, #320]	; (80164a4 <_svfiprintf_r+0x1dc>)
 8016364:	f7e9 ff54 	bl	8000210 <memchr>
 8016368:	9b04      	ldr	r3, [sp, #16]
 801636a:	b9d0      	cbnz	r0, 80163a2 <_svfiprintf_r+0xda>
 801636c:	06d9      	lsls	r1, r3, #27
 801636e:	bf44      	itt	mi
 8016370:	2220      	movmi	r2, #32
 8016372:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016376:	071a      	lsls	r2, r3, #28
 8016378:	bf44      	itt	mi
 801637a:	222b      	movmi	r2, #43	; 0x2b
 801637c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016380:	782a      	ldrb	r2, [r5, #0]
 8016382:	2a2a      	cmp	r2, #42	; 0x2a
 8016384:	d015      	beq.n	80163b2 <_svfiprintf_r+0xea>
 8016386:	9a07      	ldr	r2, [sp, #28]
 8016388:	462f      	mov	r7, r5
 801638a:	2000      	movs	r0, #0
 801638c:	250a      	movs	r5, #10
 801638e:	4639      	mov	r1, r7
 8016390:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016394:	3b30      	subs	r3, #48	; 0x30
 8016396:	2b09      	cmp	r3, #9
 8016398:	d94d      	bls.n	8016436 <_svfiprintf_r+0x16e>
 801639a:	b1b8      	cbz	r0, 80163cc <_svfiprintf_r+0x104>
 801639c:	e00f      	b.n	80163be <_svfiprintf_r+0xf6>
 801639e:	462f      	mov	r7, r5
 80163a0:	e7b8      	b.n	8016314 <_svfiprintf_r+0x4c>
 80163a2:	4a40      	ldr	r2, [pc, #256]	; (80164a4 <_svfiprintf_r+0x1dc>)
 80163a4:	1a80      	subs	r0, r0, r2
 80163a6:	fa0b f000 	lsl.w	r0, fp, r0
 80163aa:	4318      	orrs	r0, r3
 80163ac:	9004      	str	r0, [sp, #16]
 80163ae:	463d      	mov	r5, r7
 80163b0:	e7d3      	b.n	801635a <_svfiprintf_r+0x92>
 80163b2:	9a03      	ldr	r2, [sp, #12]
 80163b4:	1d11      	adds	r1, r2, #4
 80163b6:	6812      	ldr	r2, [r2, #0]
 80163b8:	9103      	str	r1, [sp, #12]
 80163ba:	2a00      	cmp	r2, #0
 80163bc:	db01      	blt.n	80163c2 <_svfiprintf_r+0xfa>
 80163be:	9207      	str	r2, [sp, #28]
 80163c0:	e004      	b.n	80163cc <_svfiprintf_r+0x104>
 80163c2:	4252      	negs	r2, r2
 80163c4:	f043 0302 	orr.w	r3, r3, #2
 80163c8:	9207      	str	r2, [sp, #28]
 80163ca:	9304      	str	r3, [sp, #16]
 80163cc:	783b      	ldrb	r3, [r7, #0]
 80163ce:	2b2e      	cmp	r3, #46	; 0x2e
 80163d0:	d10c      	bne.n	80163ec <_svfiprintf_r+0x124>
 80163d2:	787b      	ldrb	r3, [r7, #1]
 80163d4:	2b2a      	cmp	r3, #42	; 0x2a
 80163d6:	d133      	bne.n	8016440 <_svfiprintf_r+0x178>
 80163d8:	9b03      	ldr	r3, [sp, #12]
 80163da:	1d1a      	adds	r2, r3, #4
 80163dc:	681b      	ldr	r3, [r3, #0]
 80163de:	9203      	str	r2, [sp, #12]
 80163e0:	2b00      	cmp	r3, #0
 80163e2:	bfb8      	it	lt
 80163e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80163e8:	3702      	adds	r7, #2
 80163ea:	9305      	str	r3, [sp, #20]
 80163ec:	4d2e      	ldr	r5, [pc, #184]	; (80164a8 <_svfiprintf_r+0x1e0>)
 80163ee:	7839      	ldrb	r1, [r7, #0]
 80163f0:	2203      	movs	r2, #3
 80163f2:	4628      	mov	r0, r5
 80163f4:	f7e9 ff0c 	bl	8000210 <memchr>
 80163f8:	b138      	cbz	r0, 801640a <_svfiprintf_r+0x142>
 80163fa:	2340      	movs	r3, #64	; 0x40
 80163fc:	1b40      	subs	r0, r0, r5
 80163fe:	fa03 f000 	lsl.w	r0, r3, r0
 8016402:	9b04      	ldr	r3, [sp, #16]
 8016404:	4303      	orrs	r3, r0
 8016406:	3701      	adds	r7, #1
 8016408:	9304      	str	r3, [sp, #16]
 801640a:	7839      	ldrb	r1, [r7, #0]
 801640c:	4827      	ldr	r0, [pc, #156]	; (80164ac <_svfiprintf_r+0x1e4>)
 801640e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016412:	2206      	movs	r2, #6
 8016414:	1c7e      	adds	r6, r7, #1
 8016416:	f7e9 fefb 	bl	8000210 <memchr>
 801641a:	2800      	cmp	r0, #0
 801641c:	d038      	beq.n	8016490 <_svfiprintf_r+0x1c8>
 801641e:	4b24      	ldr	r3, [pc, #144]	; (80164b0 <_svfiprintf_r+0x1e8>)
 8016420:	bb13      	cbnz	r3, 8016468 <_svfiprintf_r+0x1a0>
 8016422:	9b03      	ldr	r3, [sp, #12]
 8016424:	3307      	adds	r3, #7
 8016426:	f023 0307 	bic.w	r3, r3, #7
 801642a:	3308      	adds	r3, #8
 801642c:	9303      	str	r3, [sp, #12]
 801642e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016430:	444b      	add	r3, r9
 8016432:	9309      	str	r3, [sp, #36]	; 0x24
 8016434:	e76d      	b.n	8016312 <_svfiprintf_r+0x4a>
 8016436:	fb05 3202 	mla	r2, r5, r2, r3
 801643a:	2001      	movs	r0, #1
 801643c:	460f      	mov	r7, r1
 801643e:	e7a6      	b.n	801638e <_svfiprintf_r+0xc6>
 8016440:	2300      	movs	r3, #0
 8016442:	3701      	adds	r7, #1
 8016444:	9305      	str	r3, [sp, #20]
 8016446:	4619      	mov	r1, r3
 8016448:	250a      	movs	r5, #10
 801644a:	4638      	mov	r0, r7
 801644c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016450:	3a30      	subs	r2, #48	; 0x30
 8016452:	2a09      	cmp	r2, #9
 8016454:	d903      	bls.n	801645e <_svfiprintf_r+0x196>
 8016456:	2b00      	cmp	r3, #0
 8016458:	d0c8      	beq.n	80163ec <_svfiprintf_r+0x124>
 801645a:	9105      	str	r1, [sp, #20]
 801645c:	e7c6      	b.n	80163ec <_svfiprintf_r+0x124>
 801645e:	fb05 2101 	mla	r1, r5, r1, r2
 8016462:	2301      	movs	r3, #1
 8016464:	4607      	mov	r7, r0
 8016466:	e7f0      	b.n	801644a <_svfiprintf_r+0x182>
 8016468:	ab03      	add	r3, sp, #12
 801646a:	9300      	str	r3, [sp, #0]
 801646c:	4622      	mov	r2, r4
 801646e:	4b11      	ldr	r3, [pc, #68]	; (80164b4 <_svfiprintf_r+0x1ec>)
 8016470:	a904      	add	r1, sp, #16
 8016472:	4640      	mov	r0, r8
 8016474:	f7fb ffbc 	bl	80123f0 <_printf_float>
 8016478:	f1b0 3fff 	cmp.w	r0, #4294967295
 801647c:	4681      	mov	r9, r0
 801647e:	d1d6      	bne.n	801642e <_svfiprintf_r+0x166>
 8016480:	89a3      	ldrh	r3, [r4, #12]
 8016482:	065b      	lsls	r3, r3, #25
 8016484:	f53f af35 	bmi.w	80162f2 <_svfiprintf_r+0x2a>
 8016488:	9809      	ldr	r0, [sp, #36]	; 0x24
 801648a:	b01d      	add	sp, #116	; 0x74
 801648c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016490:	ab03      	add	r3, sp, #12
 8016492:	9300      	str	r3, [sp, #0]
 8016494:	4622      	mov	r2, r4
 8016496:	4b07      	ldr	r3, [pc, #28]	; (80164b4 <_svfiprintf_r+0x1ec>)
 8016498:	a904      	add	r1, sp, #16
 801649a:	4640      	mov	r0, r8
 801649c:	f7fc fa5e 	bl	801295c <_printf_i>
 80164a0:	e7ea      	b.n	8016478 <_svfiprintf_r+0x1b0>
 80164a2:	bf00      	nop
 80164a4:	08017b4c 	.word	0x08017b4c
 80164a8:	08017b52 	.word	0x08017b52
 80164ac:	08017b56 	.word	0x08017b56
 80164b0:	080123f1 	.word	0x080123f1
 80164b4:	08016215 	.word	0x08016215

080164b8 <_sungetc_r>:
 80164b8:	b538      	push	{r3, r4, r5, lr}
 80164ba:	1c4b      	adds	r3, r1, #1
 80164bc:	4614      	mov	r4, r2
 80164be:	d103      	bne.n	80164c8 <_sungetc_r+0x10>
 80164c0:	f04f 35ff 	mov.w	r5, #4294967295
 80164c4:	4628      	mov	r0, r5
 80164c6:	bd38      	pop	{r3, r4, r5, pc}
 80164c8:	8993      	ldrh	r3, [r2, #12]
 80164ca:	f023 0320 	bic.w	r3, r3, #32
 80164ce:	8193      	strh	r3, [r2, #12]
 80164d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80164d2:	6852      	ldr	r2, [r2, #4]
 80164d4:	b2cd      	uxtb	r5, r1
 80164d6:	b18b      	cbz	r3, 80164fc <_sungetc_r+0x44>
 80164d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80164da:	4293      	cmp	r3, r2
 80164dc:	dd08      	ble.n	80164f0 <_sungetc_r+0x38>
 80164de:	6823      	ldr	r3, [r4, #0]
 80164e0:	1e5a      	subs	r2, r3, #1
 80164e2:	6022      	str	r2, [r4, #0]
 80164e4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80164e8:	6863      	ldr	r3, [r4, #4]
 80164ea:	3301      	adds	r3, #1
 80164ec:	6063      	str	r3, [r4, #4]
 80164ee:	e7e9      	b.n	80164c4 <_sungetc_r+0xc>
 80164f0:	4621      	mov	r1, r4
 80164f2:	f000 fd4b 	bl	8016f8c <__submore>
 80164f6:	2800      	cmp	r0, #0
 80164f8:	d0f1      	beq.n	80164de <_sungetc_r+0x26>
 80164fa:	e7e1      	b.n	80164c0 <_sungetc_r+0x8>
 80164fc:	6921      	ldr	r1, [r4, #16]
 80164fe:	6823      	ldr	r3, [r4, #0]
 8016500:	b151      	cbz	r1, 8016518 <_sungetc_r+0x60>
 8016502:	4299      	cmp	r1, r3
 8016504:	d208      	bcs.n	8016518 <_sungetc_r+0x60>
 8016506:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801650a:	42a9      	cmp	r1, r5
 801650c:	d104      	bne.n	8016518 <_sungetc_r+0x60>
 801650e:	3b01      	subs	r3, #1
 8016510:	3201      	adds	r2, #1
 8016512:	6023      	str	r3, [r4, #0]
 8016514:	6062      	str	r2, [r4, #4]
 8016516:	e7d5      	b.n	80164c4 <_sungetc_r+0xc>
 8016518:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801651c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016520:	6363      	str	r3, [r4, #52]	; 0x34
 8016522:	2303      	movs	r3, #3
 8016524:	63a3      	str	r3, [r4, #56]	; 0x38
 8016526:	4623      	mov	r3, r4
 8016528:	f803 5f46 	strb.w	r5, [r3, #70]!
 801652c:	6023      	str	r3, [r4, #0]
 801652e:	2301      	movs	r3, #1
 8016530:	e7dc      	b.n	80164ec <_sungetc_r+0x34>

08016532 <__ssrefill_r>:
 8016532:	b510      	push	{r4, lr}
 8016534:	460c      	mov	r4, r1
 8016536:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016538:	b169      	cbz	r1, 8016556 <__ssrefill_r+0x24>
 801653a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801653e:	4299      	cmp	r1, r3
 8016540:	d001      	beq.n	8016546 <__ssrefill_r+0x14>
 8016542:	f7ff fdbf 	bl	80160c4 <_free_r>
 8016546:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016548:	6063      	str	r3, [r4, #4]
 801654a:	2000      	movs	r0, #0
 801654c:	6360      	str	r0, [r4, #52]	; 0x34
 801654e:	b113      	cbz	r3, 8016556 <__ssrefill_r+0x24>
 8016550:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016552:	6023      	str	r3, [r4, #0]
 8016554:	bd10      	pop	{r4, pc}
 8016556:	6923      	ldr	r3, [r4, #16]
 8016558:	6023      	str	r3, [r4, #0]
 801655a:	2300      	movs	r3, #0
 801655c:	6063      	str	r3, [r4, #4]
 801655e:	89a3      	ldrh	r3, [r4, #12]
 8016560:	f043 0320 	orr.w	r3, r3, #32
 8016564:	81a3      	strh	r3, [r4, #12]
 8016566:	f04f 30ff 	mov.w	r0, #4294967295
 801656a:	e7f3      	b.n	8016554 <__ssrefill_r+0x22>

0801656c <__ssvfiscanf_r>:
 801656c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016570:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8016574:	460c      	mov	r4, r1
 8016576:	2100      	movs	r1, #0
 8016578:	9144      	str	r1, [sp, #272]	; 0x110
 801657a:	9145      	str	r1, [sp, #276]	; 0x114
 801657c:	499f      	ldr	r1, [pc, #636]	; (80167fc <__ssvfiscanf_r+0x290>)
 801657e:	91a0      	str	r1, [sp, #640]	; 0x280
 8016580:	f10d 0804 	add.w	r8, sp, #4
 8016584:	499e      	ldr	r1, [pc, #632]	; (8016800 <__ssvfiscanf_r+0x294>)
 8016586:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8016804 <__ssvfiscanf_r+0x298>
 801658a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801658e:	4606      	mov	r6, r0
 8016590:	4692      	mov	sl, r2
 8016592:	91a1      	str	r1, [sp, #644]	; 0x284
 8016594:	9300      	str	r3, [sp, #0]
 8016596:	270a      	movs	r7, #10
 8016598:	f89a 3000 	ldrb.w	r3, [sl]
 801659c:	2b00      	cmp	r3, #0
 801659e:	f000 812a 	beq.w	80167f6 <__ssvfiscanf_r+0x28a>
 80165a2:	4655      	mov	r5, sl
 80165a4:	f7ff f8c8 	bl	8015738 <__locale_ctype_ptr>
 80165a8:	f815 bb01 	ldrb.w	fp, [r5], #1
 80165ac:	4458      	add	r0, fp
 80165ae:	7843      	ldrb	r3, [r0, #1]
 80165b0:	f013 0308 	ands.w	r3, r3, #8
 80165b4:	d01c      	beq.n	80165f0 <__ssvfiscanf_r+0x84>
 80165b6:	6863      	ldr	r3, [r4, #4]
 80165b8:	2b00      	cmp	r3, #0
 80165ba:	dd12      	ble.n	80165e2 <__ssvfiscanf_r+0x76>
 80165bc:	f7ff f8bc 	bl	8015738 <__locale_ctype_ptr>
 80165c0:	6823      	ldr	r3, [r4, #0]
 80165c2:	781a      	ldrb	r2, [r3, #0]
 80165c4:	4410      	add	r0, r2
 80165c6:	7842      	ldrb	r2, [r0, #1]
 80165c8:	0712      	lsls	r2, r2, #28
 80165ca:	d401      	bmi.n	80165d0 <__ssvfiscanf_r+0x64>
 80165cc:	46aa      	mov	sl, r5
 80165ce:	e7e3      	b.n	8016598 <__ssvfiscanf_r+0x2c>
 80165d0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80165d2:	3201      	adds	r2, #1
 80165d4:	9245      	str	r2, [sp, #276]	; 0x114
 80165d6:	6862      	ldr	r2, [r4, #4]
 80165d8:	3301      	adds	r3, #1
 80165da:	3a01      	subs	r2, #1
 80165dc:	6062      	str	r2, [r4, #4]
 80165de:	6023      	str	r3, [r4, #0]
 80165e0:	e7e9      	b.n	80165b6 <__ssvfiscanf_r+0x4a>
 80165e2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80165e4:	4621      	mov	r1, r4
 80165e6:	4630      	mov	r0, r6
 80165e8:	4798      	blx	r3
 80165ea:	2800      	cmp	r0, #0
 80165ec:	d0e6      	beq.n	80165bc <__ssvfiscanf_r+0x50>
 80165ee:	e7ed      	b.n	80165cc <__ssvfiscanf_r+0x60>
 80165f0:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80165f4:	f040 8082 	bne.w	80166fc <__ssvfiscanf_r+0x190>
 80165f8:	9343      	str	r3, [sp, #268]	; 0x10c
 80165fa:	9341      	str	r3, [sp, #260]	; 0x104
 80165fc:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8016600:	2b2a      	cmp	r3, #42	; 0x2a
 8016602:	d103      	bne.n	801660c <__ssvfiscanf_r+0xa0>
 8016604:	2310      	movs	r3, #16
 8016606:	9341      	str	r3, [sp, #260]	; 0x104
 8016608:	f10a 0502 	add.w	r5, sl, #2
 801660c:	46aa      	mov	sl, r5
 801660e:	f815 1b01 	ldrb.w	r1, [r5], #1
 8016612:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8016616:	2a09      	cmp	r2, #9
 8016618:	d922      	bls.n	8016660 <__ssvfiscanf_r+0xf4>
 801661a:	2203      	movs	r2, #3
 801661c:	4879      	ldr	r0, [pc, #484]	; (8016804 <__ssvfiscanf_r+0x298>)
 801661e:	f7e9 fdf7 	bl	8000210 <memchr>
 8016622:	b138      	cbz	r0, 8016634 <__ssvfiscanf_r+0xc8>
 8016624:	eba0 0309 	sub.w	r3, r0, r9
 8016628:	2001      	movs	r0, #1
 801662a:	4098      	lsls	r0, r3
 801662c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801662e:	4318      	orrs	r0, r3
 8016630:	9041      	str	r0, [sp, #260]	; 0x104
 8016632:	46aa      	mov	sl, r5
 8016634:	f89a 3000 	ldrb.w	r3, [sl]
 8016638:	2b67      	cmp	r3, #103	; 0x67
 801663a:	f10a 0501 	add.w	r5, sl, #1
 801663e:	d82b      	bhi.n	8016698 <__ssvfiscanf_r+0x12c>
 8016640:	2b65      	cmp	r3, #101	; 0x65
 8016642:	f080 809f 	bcs.w	8016784 <__ssvfiscanf_r+0x218>
 8016646:	2b47      	cmp	r3, #71	; 0x47
 8016648:	d810      	bhi.n	801666c <__ssvfiscanf_r+0x100>
 801664a:	2b45      	cmp	r3, #69	; 0x45
 801664c:	f080 809a 	bcs.w	8016784 <__ssvfiscanf_r+0x218>
 8016650:	2b00      	cmp	r3, #0
 8016652:	d06c      	beq.n	801672e <__ssvfiscanf_r+0x1c2>
 8016654:	2b25      	cmp	r3, #37	; 0x25
 8016656:	d051      	beq.n	80166fc <__ssvfiscanf_r+0x190>
 8016658:	2303      	movs	r3, #3
 801665a:	9347      	str	r3, [sp, #284]	; 0x11c
 801665c:	9742      	str	r7, [sp, #264]	; 0x108
 801665e:	e027      	b.n	80166b0 <__ssvfiscanf_r+0x144>
 8016660:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8016662:	fb07 1303 	mla	r3, r7, r3, r1
 8016666:	3b30      	subs	r3, #48	; 0x30
 8016668:	9343      	str	r3, [sp, #268]	; 0x10c
 801666a:	e7cf      	b.n	801660c <__ssvfiscanf_r+0xa0>
 801666c:	2b5b      	cmp	r3, #91	; 0x5b
 801666e:	d06a      	beq.n	8016746 <__ssvfiscanf_r+0x1da>
 8016670:	d80c      	bhi.n	801668c <__ssvfiscanf_r+0x120>
 8016672:	2b58      	cmp	r3, #88	; 0x58
 8016674:	d1f0      	bne.n	8016658 <__ssvfiscanf_r+0xec>
 8016676:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016678:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801667c:	9241      	str	r2, [sp, #260]	; 0x104
 801667e:	2210      	movs	r2, #16
 8016680:	9242      	str	r2, [sp, #264]	; 0x108
 8016682:	2b6e      	cmp	r3, #110	; 0x6e
 8016684:	bf8c      	ite	hi
 8016686:	2304      	movhi	r3, #4
 8016688:	2303      	movls	r3, #3
 801668a:	e010      	b.n	80166ae <__ssvfiscanf_r+0x142>
 801668c:	2b63      	cmp	r3, #99	; 0x63
 801668e:	d065      	beq.n	801675c <__ssvfiscanf_r+0x1f0>
 8016690:	2b64      	cmp	r3, #100	; 0x64
 8016692:	d1e1      	bne.n	8016658 <__ssvfiscanf_r+0xec>
 8016694:	9742      	str	r7, [sp, #264]	; 0x108
 8016696:	e7f4      	b.n	8016682 <__ssvfiscanf_r+0x116>
 8016698:	2b70      	cmp	r3, #112	; 0x70
 801669a:	d04b      	beq.n	8016734 <__ssvfiscanf_r+0x1c8>
 801669c:	d826      	bhi.n	80166ec <__ssvfiscanf_r+0x180>
 801669e:	2b6e      	cmp	r3, #110	; 0x6e
 80166a0:	d062      	beq.n	8016768 <__ssvfiscanf_r+0x1fc>
 80166a2:	d84c      	bhi.n	801673e <__ssvfiscanf_r+0x1d2>
 80166a4:	2b69      	cmp	r3, #105	; 0x69
 80166a6:	d1d7      	bne.n	8016658 <__ssvfiscanf_r+0xec>
 80166a8:	2300      	movs	r3, #0
 80166aa:	9342      	str	r3, [sp, #264]	; 0x108
 80166ac:	2303      	movs	r3, #3
 80166ae:	9347      	str	r3, [sp, #284]	; 0x11c
 80166b0:	6863      	ldr	r3, [r4, #4]
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	dd68      	ble.n	8016788 <__ssvfiscanf_r+0x21c>
 80166b6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80166b8:	0659      	lsls	r1, r3, #25
 80166ba:	d407      	bmi.n	80166cc <__ssvfiscanf_r+0x160>
 80166bc:	f7ff f83c 	bl	8015738 <__locale_ctype_ptr>
 80166c0:	6823      	ldr	r3, [r4, #0]
 80166c2:	781a      	ldrb	r2, [r3, #0]
 80166c4:	4410      	add	r0, r2
 80166c6:	7842      	ldrb	r2, [r0, #1]
 80166c8:	0712      	lsls	r2, r2, #28
 80166ca:	d464      	bmi.n	8016796 <__ssvfiscanf_r+0x22a>
 80166cc:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80166ce:	2b02      	cmp	r3, #2
 80166d0:	dc73      	bgt.n	80167ba <__ssvfiscanf_r+0x24e>
 80166d2:	466b      	mov	r3, sp
 80166d4:	4622      	mov	r2, r4
 80166d6:	a941      	add	r1, sp, #260	; 0x104
 80166d8:	4630      	mov	r0, r6
 80166da:	f000 f9d7 	bl	8016a8c <_scanf_chars>
 80166de:	2801      	cmp	r0, #1
 80166e0:	f000 8089 	beq.w	80167f6 <__ssvfiscanf_r+0x28a>
 80166e4:	2802      	cmp	r0, #2
 80166e6:	f47f af71 	bne.w	80165cc <__ssvfiscanf_r+0x60>
 80166ea:	e01d      	b.n	8016728 <__ssvfiscanf_r+0x1bc>
 80166ec:	2b75      	cmp	r3, #117	; 0x75
 80166ee:	d0d1      	beq.n	8016694 <__ssvfiscanf_r+0x128>
 80166f0:	2b78      	cmp	r3, #120	; 0x78
 80166f2:	d0c0      	beq.n	8016676 <__ssvfiscanf_r+0x10a>
 80166f4:	2b73      	cmp	r3, #115	; 0x73
 80166f6:	d1af      	bne.n	8016658 <__ssvfiscanf_r+0xec>
 80166f8:	2302      	movs	r3, #2
 80166fa:	e7d8      	b.n	80166ae <__ssvfiscanf_r+0x142>
 80166fc:	6863      	ldr	r3, [r4, #4]
 80166fe:	2b00      	cmp	r3, #0
 8016700:	dd0c      	ble.n	801671c <__ssvfiscanf_r+0x1b0>
 8016702:	6823      	ldr	r3, [r4, #0]
 8016704:	781a      	ldrb	r2, [r3, #0]
 8016706:	455a      	cmp	r2, fp
 8016708:	d175      	bne.n	80167f6 <__ssvfiscanf_r+0x28a>
 801670a:	3301      	adds	r3, #1
 801670c:	6862      	ldr	r2, [r4, #4]
 801670e:	6023      	str	r3, [r4, #0]
 8016710:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8016712:	3a01      	subs	r2, #1
 8016714:	3301      	adds	r3, #1
 8016716:	6062      	str	r2, [r4, #4]
 8016718:	9345      	str	r3, [sp, #276]	; 0x114
 801671a:	e757      	b.n	80165cc <__ssvfiscanf_r+0x60>
 801671c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801671e:	4621      	mov	r1, r4
 8016720:	4630      	mov	r0, r6
 8016722:	4798      	blx	r3
 8016724:	2800      	cmp	r0, #0
 8016726:	d0ec      	beq.n	8016702 <__ssvfiscanf_r+0x196>
 8016728:	9844      	ldr	r0, [sp, #272]	; 0x110
 801672a:	2800      	cmp	r0, #0
 801672c:	d159      	bne.n	80167e2 <__ssvfiscanf_r+0x276>
 801672e:	f04f 30ff 	mov.w	r0, #4294967295
 8016732:	e05c      	b.n	80167ee <__ssvfiscanf_r+0x282>
 8016734:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016736:	f042 0220 	orr.w	r2, r2, #32
 801673a:	9241      	str	r2, [sp, #260]	; 0x104
 801673c:	e79b      	b.n	8016676 <__ssvfiscanf_r+0x10a>
 801673e:	2308      	movs	r3, #8
 8016740:	9342      	str	r3, [sp, #264]	; 0x108
 8016742:	2304      	movs	r3, #4
 8016744:	e7b3      	b.n	80166ae <__ssvfiscanf_r+0x142>
 8016746:	4629      	mov	r1, r5
 8016748:	4640      	mov	r0, r8
 801674a:	f000 fb4f 	bl	8016dec <__sccl>
 801674e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016754:	9341      	str	r3, [sp, #260]	; 0x104
 8016756:	4605      	mov	r5, r0
 8016758:	2301      	movs	r3, #1
 801675a:	e7a8      	b.n	80166ae <__ssvfiscanf_r+0x142>
 801675c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801675e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016762:	9341      	str	r3, [sp, #260]	; 0x104
 8016764:	2300      	movs	r3, #0
 8016766:	e7a2      	b.n	80166ae <__ssvfiscanf_r+0x142>
 8016768:	9841      	ldr	r0, [sp, #260]	; 0x104
 801676a:	06c3      	lsls	r3, r0, #27
 801676c:	f53f af2e 	bmi.w	80165cc <__ssvfiscanf_r+0x60>
 8016770:	9b00      	ldr	r3, [sp, #0]
 8016772:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016774:	1d19      	adds	r1, r3, #4
 8016776:	9100      	str	r1, [sp, #0]
 8016778:	681b      	ldr	r3, [r3, #0]
 801677a:	07c0      	lsls	r0, r0, #31
 801677c:	bf4c      	ite	mi
 801677e:	801a      	strhmi	r2, [r3, #0]
 8016780:	601a      	strpl	r2, [r3, #0]
 8016782:	e723      	b.n	80165cc <__ssvfiscanf_r+0x60>
 8016784:	2305      	movs	r3, #5
 8016786:	e792      	b.n	80166ae <__ssvfiscanf_r+0x142>
 8016788:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801678a:	4621      	mov	r1, r4
 801678c:	4630      	mov	r0, r6
 801678e:	4798      	blx	r3
 8016790:	2800      	cmp	r0, #0
 8016792:	d090      	beq.n	80166b6 <__ssvfiscanf_r+0x14a>
 8016794:	e7c8      	b.n	8016728 <__ssvfiscanf_r+0x1bc>
 8016796:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016798:	3201      	adds	r2, #1
 801679a:	9245      	str	r2, [sp, #276]	; 0x114
 801679c:	6862      	ldr	r2, [r4, #4]
 801679e:	3a01      	subs	r2, #1
 80167a0:	2a00      	cmp	r2, #0
 80167a2:	6062      	str	r2, [r4, #4]
 80167a4:	dd02      	ble.n	80167ac <__ssvfiscanf_r+0x240>
 80167a6:	3301      	adds	r3, #1
 80167a8:	6023      	str	r3, [r4, #0]
 80167aa:	e787      	b.n	80166bc <__ssvfiscanf_r+0x150>
 80167ac:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80167ae:	4621      	mov	r1, r4
 80167b0:	4630      	mov	r0, r6
 80167b2:	4798      	blx	r3
 80167b4:	2800      	cmp	r0, #0
 80167b6:	d081      	beq.n	80166bc <__ssvfiscanf_r+0x150>
 80167b8:	e7b6      	b.n	8016728 <__ssvfiscanf_r+0x1bc>
 80167ba:	2b04      	cmp	r3, #4
 80167bc:	dc06      	bgt.n	80167cc <__ssvfiscanf_r+0x260>
 80167be:	466b      	mov	r3, sp
 80167c0:	4622      	mov	r2, r4
 80167c2:	a941      	add	r1, sp, #260	; 0x104
 80167c4:	4630      	mov	r0, r6
 80167c6:	f000 f9c5 	bl	8016b54 <_scanf_i>
 80167ca:	e788      	b.n	80166de <__ssvfiscanf_r+0x172>
 80167cc:	4b0e      	ldr	r3, [pc, #56]	; (8016808 <__ssvfiscanf_r+0x29c>)
 80167ce:	2b00      	cmp	r3, #0
 80167d0:	f43f aefc 	beq.w	80165cc <__ssvfiscanf_r+0x60>
 80167d4:	466b      	mov	r3, sp
 80167d6:	4622      	mov	r2, r4
 80167d8:	a941      	add	r1, sp, #260	; 0x104
 80167da:	4630      	mov	r0, r6
 80167dc:	f7fc f9d0 	bl	8012b80 <_scanf_float>
 80167e0:	e77d      	b.n	80166de <__ssvfiscanf_r+0x172>
 80167e2:	89a3      	ldrh	r3, [r4, #12]
 80167e4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80167e8:	bf18      	it	ne
 80167ea:	f04f 30ff 	movne.w	r0, #4294967295
 80167ee:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80167f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167f6:	9844      	ldr	r0, [sp, #272]	; 0x110
 80167f8:	e7f9      	b.n	80167ee <__ssvfiscanf_r+0x282>
 80167fa:	bf00      	nop
 80167fc:	080164b9 	.word	0x080164b9
 8016800:	08016533 	.word	0x08016533
 8016804:	08017b52 	.word	0x08017b52
 8016808:	08012b81 	.word	0x08012b81

0801680c <__sfputc_r>:
 801680c:	6893      	ldr	r3, [r2, #8]
 801680e:	3b01      	subs	r3, #1
 8016810:	2b00      	cmp	r3, #0
 8016812:	b410      	push	{r4}
 8016814:	6093      	str	r3, [r2, #8]
 8016816:	da08      	bge.n	801682a <__sfputc_r+0x1e>
 8016818:	6994      	ldr	r4, [r2, #24]
 801681a:	42a3      	cmp	r3, r4
 801681c:	db01      	blt.n	8016822 <__sfputc_r+0x16>
 801681e:	290a      	cmp	r1, #10
 8016820:	d103      	bne.n	801682a <__sfputc_r+0x1e>
 8016822:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016826:	f7fd bbbd 	b.w	8013fa4 <__swbuf_r>
 801682a:	6813      	ldr	r3, [r2, #0]
 801682c:	1c58      	adds	r0, r3, #1
 801682e:	6010      	str	r0, [r2, #0]
 8016830:	7019      	strb	r1, [r3, #0]
 8016832:	4608      	mov	r0, r1
 8016834:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016838:	4770      	bx	lr

0801683a <__sfputs_r>:
 801683a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801683c:	4606      	mov	r6, r0
 801683e:	460f      	mov	r7, r1
 8016840:	4614      	mov	r4, r2
 8016842:	18d5      	adds	r5, r2, r3
 8016844:	42ac      	cmp	r4, r5
 8016846:	d101      	bne.n	801684c <__sfputs_r+0x12>
 8016848:	2000      	movs	r0, #0
 801684a:	e007      	b.n	801685c <__sfputs_r+0x22>
 801684c:	463a      	mov	r2, r7
 801684e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016852:	4630      	mov	r0, r6
 8016854:	f7ff ffda 	bl	801680c <__sfputc_r>
 8016858:	1c43      	adds	r3, r0, #1
 801685a:	d1f3      	bne.n	8016844 <__sfputs_r+0xa>
 801685c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016860 <_vfiprintf_r>:
 8016860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016864:	460c      	mov	r4, r1
 8016866:	b09d      	sub	sp, #116	; 0x74
 8016868:	4617      	mov	r7, r2
 801686a:	461d      	mov	r5, r3
 801686c:	4606      	mov	r6, r0
 801686e:	b118      	cbz	r0, 8016878 <_vfiprintf_r+0x18>
 8016870:	6983      	ldr	r3, [r0, #24]
 8016872:	b90b      	cbnz	r3, 8016878 <_vfiprintf_r+0x18>
 8016874:	f7fe fbac 	bl	8014fd0 <__sinit>
 8016878:	4b7c      	ldr	r3, [pc, #496]	; (8016a6c <_vfiprintf_r+0x20c>)
 801687a:	429c      	cmp	r4, r3
 801687c:	d158      	bne.n	8016930 <_vfiprintf_r+0xd0>
 801687e:	6874      	ldr	r4, [r6, #4]
 8016880:	89a3      	ldrh	r3, [r4, #12]
 8016882:	0718      	lsls	r0, r3, #28
 8016884:	d55e      	bpl.n	8016944 <_vfiprintf_r+0xe4>
 8016886:	6923      	ldr	r3, [r4, #16]
 8016888:	2b00      	cmp	r3, #0
 801688a:	d05b      	beq.n	8016944 <_vfiprintf_r+0xe4>
 801688c:	2300      	movs	r3, #0
 801688e:	9309      	str	r3, [sp, #36]	; 0x24
 8016890:	2320      	movs	r3, #32
 8016892:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016896:	2330      	movs	r3, #48	; 0x30
 8016898:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801689c:	9503      	str	r5, [sp, #12]
 801689e:	f04f 0b01 	mov.w	fp, #1
 80168a2:	46b8      	mov	r8, r7
 80168a4:	4645      	mov	r5, r8
 80168a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80168aa:	b10b      	cbz	r3, 80168b0 <_vfiprintf_r+0x50>
 80168ac:	2b25      	cmp	r3, #37	; 0x25
 80168ae:	d154      	bne.n	801695a <_vfiprintf_r+0xfa>
 80168b0:	ebb8 0a07 	subs.w	sl, r8, r7
 80168b4:	d00b      	beq.n	80168ce <_vfiprintf_r+0x6e>
 80168b6:	4653      	mov	r3, sl
 80168b8:	463a      	mov	r2, r7
 80168ba:	4621      	mov	r1, r4
 80168bc:	4630      	mov	r0, r6
 80168be:	f7ff ffbc 	bl	801683a <__sfputs_r>
 80168c2:	3001      	adds	r0, #1
 80168c4:	f000 80c2 	beq.w	8016a4c <_vfiprintf_r+0x1ec>
 80168c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80168ca:	4453      	add	r3, sl
 80168cc:	9309      	str	r3, [sp, #36]	; 0x24
 80168ce:	f898 3000 	ldrb.w	r3, [r8]
 80168d2:	2b00      	cmp	r3, #0
 80168d4:	f000 80ba 	beq.w	8016a4c <_vfiprintf_r+0x1ec>
 80168d8:	2300      	movs	r3, #0
 80168da:	f04f 32ff 	mov.w	r2, #4294967295
 80168de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80168e2:	9304      	str	r3, [sp, #16]
 80168e4:	9307      	str	r3, [sp, #28]
 80168e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80168ea:	931a      	str	r3, [sp, #104]	; 0x68
 80168ec:	46a8      	mov	r8, r5
 80168ee:	2205      	movs	r2, #5
 80168f0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80168f4:	485e      	ldr	r0, [pc, #376]	; (8016a70 <_vfiprintf_r+0x210>)
 80168f6:	f7e9 fc8b 	bl	8000210 <memchr>
 80168fa:	9b04      	ldr	r3, [sp, #16]
 80168fc:	bb78      	cbnz	r0, 801695e <_vfiprintf_r+0xfe>
 80168fe:	06d9      	lsls	r1, r3, #27
 8016900:	bf44      	itt	mi
 8016902:	2220      	movmi	r2, #32
 8016904:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016908:	071a      	lsls	r2, r3, #28
 801690a:	bf44      	itt	mi
 801690c:	222b      	movmi	r2, #43	; 0x2b
 801690e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016912:	782a      	ldrb	r2, [r5, #0]
 8016914:	2a2a      	cmp	r2, #42	; 0x2a
 8016916:	d02a      	beq.n	801696e <_vfiprintf_r+0x10e>
 8016918:	9a07      	ldr	r2, [sp, #28]
 801691a:	46a8      	mov	r8, r5
 801691c:	2000      	movs	r0, #0
 801691e:	250a      	movs	r5, #10
 8016920:	4641      	mov	r1, r8
 8016922:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016926:	3b30      	subs	r3, #48	; 0x30
 8016928:	2b09      	cmp	r3, #9
 801692a:	d969      	bls.n	8016a00 <_vfiprintf_r+0x1a0>
 801692c:	b360      	cbz	r0, 8016988 <_vfiprintf_r+0x128>
 801692e:	e024      	b.n	801697a <_vfiprintf_r+0x11a>
 8016930:	4b50      	ldr	r3, [pc, #320]	; (8016a74 <_vfiprintf_r+0x214>)
 8016932:	429c      	cmp	r4, r3
 8016934:	d101      	bne.n	801693a <_vfiprintf_r+0xda>
 8016936:	68b4      	ldr	r4, [r6, #8]
 8016938:	e7a2      	b.n	8016880 <_vfiprintf_r+0x20>
 801693a:	4b4f      	ldr	r3, [pc, #316]	; (8016a78 <_vfiprintf_r+0x218>)
 801693c:	429c      	cmp	r4, r3
 801693e:	bf08      	it	eq
 8016940:	68f4      	ldreq	r4, [r6, #12]
 8016942:	e79d      	b.n	8016880 <_vfiprintf_r+0x20>
 8016944:	4621      	mov	r1, r4
 8016946:	4630      	mov	r0, r6
 8016948:	f7fd fb90 	bl	801406c <__swsetup_r>
 801694c:	2800      	cmp	r0, #0
 801694e:	d09d      	beq.n	801688c <_vfiprintf_r+0x2c>
 8016950:	f04f 30ff 	mov.w	r0, #4294967295
 8016954:	b01d      	add	sp, #116	; 0x74
 8016956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801695a:	46a8      	mov	r8, r5
 801695c:	e7a2      	b.n	80168a4 <_vfiprintf_r+0x44>
 801695e:	4a44      	ldr	r2, [pc, #272]	; (8016a70 <_vfiprintf_r+0x210>)
 8016960:	1a80      	subs	r0, r0, r2
 8016962:	fa0b f000 	lsl.w	r0, fp, r0
 8016966:	4318      	orrs	r0, r3
 8016968:	9004      	str	r0, [sp, #16]
 801696a:	4645      	mov	r5, r8
 801696c:	e7be      	b.n	80168ec <_vfiprintf_r+0x8c>
 801696e:	9a03      	ldr	r2, [sp, #12]
 8016970:	1d11      	adds	r1, r2, #4
 8016972:	6812      	ldr	r2, [r2, #0]
 8016974:	9103      	str	r1, [sp, #12]
 8016976:	2a00      	cmp	r2, #0
 8016978:	db01      	blt.n	801697e <_vfiprintf_r+0x11e>
 801697a:	9207      	str	r2, [sp, #28]
 801697c:	e004      	b.n	8016988 <_vfiprintf_r+0x128>
 801697e:	4252      	negs	r2, r2
 8016980:	f043 0302 	orr.w	r3, r3, #2
 8016984:	9207      	str	r2, [sp, #28]
 8016986:	9304      	str	r3, [sp, #16]
 8016988:	f898 3000 	ldrb.w	r3, [r8]
 801698c:	2b2e      	cmp	r3, #46	; 0x2e
 801698e:	d10e      	bne.n	80169ae <_vfiprintf_r+0x14e>
 8016990:	f898 3001 	ldrb.w	r3, [r8, #1]
 8016994:	2b2a      	cmp	r3, #42	; 0x2a
 8016996:	d138      	bne.n	8016a0a <_vfiprintf_r+0x1aa>
 8016998:	9b03      	ldr	r3, [sp, #12]
 801699a:	1d1a      	adds	r2, r3, #4
 801699c:	681b      	ldr	r3, [r3, #0]
 801699e:	9203      	str	r2, [sp, #12]
 80169a0:	2b00      	cmp	r3, #0
 80169a2:	bfb8      	it	lt
 80169a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80169a8:	f108 0802 	add.w	r8, r8, #2
 80169ac:	9305      	str	r3, [sp, #20]
 80169ae:	4d33      	ldr	r5, [pc, #204]	; (8016a7c <_vfiprintf_r+0x21c>)
 80169b0:	f898 1000 	ldrb.w	r1, [r8]
 80169b4:	2203      	movs	r2, #3
 80169b6:	4628      	mov	r0, r5
 80169b8:	f7e9 fc2a 	bl	8000210 <memchr>
 80169bc:	b140      	cbz	r0, 80169d0 <_vfiprintf_r+0x170>
 80169be:	2340      	movs	r3, #64	; 0x40
 80169c0:	1b40      	subs	r0, r0, r5
 80169c2:	fa03 f000 	lsl.w	r0, r3, r0
 80169c6:	9b04      	ldr	r3, [sp, #16]
 80169c8:	4303      	orrs	r3, r0
 80169ca:	f108 0801 	add.w	r8, r8, #1
 80169ce:	9304      	str	r3, [sp, #16]
 80169d0:	f898 1000 	ldrb.w	r1, [r8]
 80169d4:	482a      	ldr	r0, [pc, #168]	; (8016a80 <_vfiprintf_r+0x220>)
 80169d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80169da:	2206      	movs	r2, #6
 80169dc:	f108 0701 	add.w	r7, r8, #1
 80169e0:	f7e9 fc16 	bl	8000210 <memchr>
 80169e4:	2800      	cmp	r0, #0
 80169e6:	d037      	beq.n	8016a58 <_vfiprintf_r+0x1f8>
 80169e8:	4b26      	ldr	r3, [pc, #152]	; (8016a84 <_vfiprintf_r+0x224>)
 80169ea:	bb1b      	cbnz	r3, 8016a34 <_vfiprintf_r+0x1d4>
 80169ec:	9b03      	ldr	r3, [sp, #12]
 80169ee:	3307      	adds	r3, #7
 80169f0:	f023 0307 	bic.w	r3, r3, #7
 80169f4:	3308      	adds	r3, #8
 80169f6:	9303      	str	r3, [sp, #12]
 80169f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80169fa:	444b      	add	r3, r9
 80169fc:	9309      	str	r3, [sp, #36]	; 0x24
 80169fe:	e750      	b.n	80168a2 <_vfiprintf_r+0x42>
 8016a00:	fb05 3202 	mla	r2, r5, r2, r3
 8016a04:	2001      	movs	r0, #1
 8016a06:	4688      	mov	r8, r1
 8016a08:	e78a      	b.n	8016920 <_vfiprintf_r+0xc0>
 8016a0a:	2300      	movs	r3, #0
 8016a0c:	f108 0801 	add.w	r8, r8, #1
 8016a10:	9305      	str	r3, [sp, #20]
 8016a12:	4619      	mov	r1, r3
 8016a14:	250a      	movs	r5, #10
 8016a16:	4640      	mov	r0, r8
 8016a18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016a1c:	3a30      	subs	r2, #48	; 0x30
 8016a1e:	2a09      	cmp	r2, #9
 8016a20:	d903      	bls.n	8016a2a <_vfiprintf_r+0x1ca>
 8016a22:	2b00      	cmp	r3, #0
 8016a24:	d0c3      	beq.n	80169ae <_vfiprintf_r+0x14e>
 8016a26:	9105      	str	r1, [sp, #20]
 8016a28:	e7c1      	b.n	80169ae <_vfiprintf_r+0x14e>
 8016a2a:	fb05 2101 	mla	r1, r5, r1, r2
 8016a2e:	2301      	movs	r3, #1
 8016a30:	4680      	mov	r8, r0
 8016a32:	e7f0      	b.n	8016a16 <_vfiprintf_r+0x1b6>
 8016a34:	ab03      	add	r3, sp, #12
 8016a36:	9300      	str	r3, [sp, #0]
 8016a38:	4622      	mov	r2, r4
 8016a3a:	4b13      	ldr	r3, [pc, #76]	; (8016a88 <_vfiprintf_r+0x228>)
 8016a3c:	a904      	add	r1, sp, #16
 8016a3e:	4630      	mov	r0, r6
 8016a40:	f7fb fcd6 	bl	80123f0 <_printf_float>
 8016a44:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016a48:	4681      	mov	r9, r0
 8016a4a:	d1d5      	bne.n	80169f8 <_vfiprintf_r+0x198>
 8016a4c:	89a3      	ldrh	r3, [r4, #12]
 8016a4e:	065b      	lsls	r3, r3, #25
 8016a50:	f53f af7e 	bmi.w	8016950 <_vfiprintf_r+0xf0>
 8016a54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016a56:	e77d      	b.n	8016954 <_vfiprintf_r+0xf4>
 8016a58:	ab03      	add	r3, sp, #12
 8016a5a:	9300      	str	r3, [sp, #0]
 8016a5c:	4622      	mov	r2, r4
 8016a5e:	4b0a      	ldr	r3, [pc, #40]	; (8016a88 <_vfiprintf_r+0x228>)
 8016a60:	a904      	add	r1, sp, #16
 8016a62:	4630      	mov	r0, r6
 8016a64:	f7fb ff7a 	bl	801295c <_printf_i>
 8016a68:	e7ec      	b.n	8016a44 <_vfiprintf_r+0x1e4>
 8016a6a:	bf00      	nop
 8016a6c:	08017a00 	.word	0x08017a00
 8016a70:	08017b4c 	.word	0x08017b4c
 8016a74:	08017a20 	.word	0x08017a20
 8016a78:	080179e0 	.word	0x080179e0
 8016a7c:	08017b52 	.word	0x08017b52
 8016a80:	08017b56 	.word	0x08017b56
 8016a84:	080123f1 	.word	0x080123f1
 8016a88:	0801683b 	.word	0x0801683b

08016a8c <_scanf_chars>:
 8016a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a90:	4615      	mov	r5, r2
 8016a92:	688a      	ldr	r2, [r1, #8]
 8016a94:	4680      	mov	r8, r0
 8016a96:	460c      	mov	r4, r1
 8016a98:	b932      	cbnz	r2, 8016aa8 <_scanf_chars+0x1c>
 8016a9a:	698a      	ldr	r2, [r1, #24]
 8016a9c:	2a00      	cmp	r2, #0
 8016a9e:	bf14      	ite	ne
 8016aa0:	f04f 32ff 	movne.w	r2, #4294967295
 8016aa4:	2201      	moveq	r2, #1
 8016aa6:	608a      	str	r2, [r1, #8]
 8016aa8:	6822      	ldr	r2, [r4, #0]
 8016aaa:	06d1      	lsls	r1, r2, #27
 8016aac:	bf5f      	itttt	pl
 8016aae:	681a      	ldrpl	r2, [r3, #0]
 8016ab0:	1d11      	addpl	r1, r2, #4
 8016ab2:	6019      	strpl	r1, [r3, #0]
 8016ab4:	6817      	ldrpl	r7, [r2, #0]
 8016ab6:	2600      	movs	r6, #0
 8016ab8:	69a3      	ldr	r3, [r4, #24]
 8016aba:	b1db      	cbz	r3, 8016af4 <_scanf_chars+0x68>
 8016abc:	2b01      	cmp	r3, #1
 8016abe:	d107      	bne.n	8016ad0 <_scanf_chars+0x44>
 8016ac0:	682b      	ldr	r3, [r5, #0]
 8016ac2:	6962      	ldr	r2, [r4, #20]
 8016ac4:	781b      	ldrb	r3, [r3, #0]
 8016ac6:	5cd3      	ldrb	r3, [r2, r3]
 8016ac8:	b9a3      	cbnz	r3, 8016af4 <_scanf_chars+0x68>
 8016aca:	2e00      	cmp	r6, #0
 8016acc:	d132      	bne.n	8016b34 <_scanf_chars+0xa8>
 8016ace:	e006      	b.n	8016ade <_scanf_chars+0x52>
 8016ad0:	2b02      	cmp	r3, #2
 8016ad2:	d007      	beq.n	8016ae4 <_scanf_chars+0x58>
 8016ad4:	2e00      	cmp	r6, #0
 8016ad6:	d12d      	bne.n	8016b34 <_scanf_chars+0xa8>
 8016ad8:	69a3      	ldr	r3, [r4, #24]
 8016ada:	2b01      	cmp	r3, #1
 8016adc:	d12a      	bne.n	8016b34 <_scanf_chars+0xa8>
 8016ade:	2001      	movs	r0, #1
 8016ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ae4:	f7fe fe28 	bl	8015738 <__locale_ctype_ptr>
 8016ae8:	682b      	ldr	r3, [r5, #0]
 8016aea:	781b      	ldrb	r3, [r3, #0]
 8016aec:	4418      	add	r0, r3
 8016aee:	7843      	ldrb	r3, [r0, #1]
 8016af0:	071b      	lsls	r3, r3, #28
 8016af2:	d4ef      	bmi.n	8016ad4 <_scanf_chars+0x48>
 8016af4:	6823      	ldr	r3, [r4, #0]
 8016af6:	06da      	lsls	r2, r3, #27
 8016af8:	bf5e      	ittt	pl
 8016afa:	682b      	ldrpl	r3, [r5, #0]
 8016afc:	781b      	ldrbpl	r3, [r3, #0]
 8016afe:	703b      	strbpl	r3, [r7, #0]
 8016b00:	682a      	ldr	r2, [r5, #0]
 8016b02:	686b      	ldr	r3, [r5, #4]
 8016b04:	f102 0201 	add.w	r2, r2, #1
 8016b08:	602a      	str	r2, [r5, #0]
 8016b0a:	68a2      	ldr	r2, [r4, #8]
 8016b0c:	f103 33ff 	add.w	r3, r3, #4294967295
 8016b10:	f102 32ff 	add.w	r2, r2, #4294967295
 8016b14:	606b      	str	r3, [r5, #4]
 8016b16:	f106 0601 	add.w	r6, r6, #1
 8016b1a:	bf58      	it	pl
 8016b1c:	3701      	addpl	r7, #1
 8016b1e:	60a2      	str	r2, [r4, #8]
 8016b20:	b142      	cbz	r2, 8016b34 <_scanf_chars+0xa8>
 8016b22:	2b00      	cmp	r3, #0
 8016b24:	dcc8      	bgt.n	8016ab8 <_scanf_chars+0x2c>
 8016b26:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016b2a:	4629      	mov	r1, r5
 8016b2c:	4640      	mov	r0, r8
 8016b2e:	4798      	blx	r3
 8016b30:	2800      	cmp	r0, #0
 8016b32:	d0c1      	beq.n	8016ab8 <_scanf_chars+0x2c>
 8016b34:	6823      	ldr	r3, [r4, #0]
 8016b36:	f013 0310 	ands.w	r3, r3, #16
 8016b3a:	d105      	bne.n	8016b48 <_scanf_chars+0xbc>
 8016b3c:	68e2      	ldr	r2, [r4, #12]
 8016b3e:	3201      	adds	r2, #1
 8016b40:	60e2      	str	r2, [r4, #12]
 8016b42:	69a2      	ldr	r2, [r4, #24]
 8016b44:	b102      	cbz	r2, 8016b48 <_scanf_chars+0xbc>
 8016b46:	703b      	strb	r3, [r7, #0]
 8016b48:	6923      	ldr	r3, [r4, #16]
 8016b4a:	441e      	add	r6, r3
 8016b4c:	6126      	str	r6, [r4, #16]
 8016b4e:	2000      	movs	r0, #0
 8016b50:	e7c6      	b.n	8016ae0 <_scanf_chars+0x54>
	...

08016b54 <_scanf_i>:
 8016b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b58:	469a      	mov	sl, r3
 8016b5a:	4b74      	ldr	r3, [pc, #464]	; (8016d2c <_scanf_i+0x1d8>)
 8016b5c:	460c      	mov	r4, r1
 8016b5e:	4683      	mov	fp, r0
 8016b60:	4616      	mov	r6, r2
 8016b62:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016b66:	b087      	sub	sp, #28
 8016b68:	ab03      	add	r3, sp, #12
 8016b6a:	68a7      	ldr	r7, [r4, #8]
 8016b6c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8016b70:	4b6f      	ldr	r3, [pc, #444]	; (8016d30 <_scanf_i+0x1dc>)
 8016b72:	69a1      	ldr	r1, [r4, #24]
 8016b74:	4a6f      	ldr	r2, [pc, #444]	; (8016d34 <_scanf_i+0x1e0>)
 8016b76:	2903      	cmp	r1, #3
 8016b78:	bf08      	it	eq
 8016b7a:	461a      	moveq	r2, r3
 8016b7c:	1e7b      	subs	r3, r7, #1
 8016b7e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8016b82:	bf84      	itt	hi
 8016b84:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016b88:	60a3      	strhi	r3, [r4, #8]
 8016b8a:	6823      	ldr	r3, [r4, #0]
 8016b8c:	9200      	str	r2, [sp, #0]
 8016b8e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8016b92:	bf88      	it	hi
 8016b94:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016b98:	f104 091c 	add.w	r9, r4, #28
 8016b9c:	6023      	str	r3, [r4, #0]
 8016b9e:	bf8c      	ite	hi
 8016ba0:	197f      	addhi	r7, r7, r5
 8016ba2:	2700      	movls	r7, #0
 8016ba4:	464b      	mov	r3, r9
 8016ba6:	f04f 0800 	mov.w	r8, #0
 8016baa:	9301      	str	r3, [sp, #4]
 8016bac:	6831      	ldr	r1, [r6, #0]
 8016bae:	ab03      	add	r3, sp, #12
 8016bb0:	2202      	movs	r2, #2
 8016bb2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8016bb6:	7809      	ldrb	r1, [r1, #0]
 8016bb8:	f7e9 fb2a 	bl	8000210 <memchr>
 8016bbc:	9b01      	ldr	r3, [sp, #4]
 8016bbe:	b330      	cbz	r0, 8016c0e <_scanf_i+0xba>
 8016bc0:	f1b8 0f01 	cmp.w	r8, #1
 8016bc4:	d15a      	bne.n	8016c7c <_scanf_i+0x128>
 8016bc6:	6862      	ldr	r2, [r4, #4]
 8016bc8:	b92a      	cbnz	r2, 8016bd6 <_scanf_i+0x82>
 8016bca:	6822      	ldr	r2, [r4, #0]
 8016bcc:	2108      	movs	r1, #8
 8016bce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016bd2:	6061      	str	r1, [r4, #4]
 8016bd4:	6022      	str	r2, [r4, #0]
 8016bd6:	6822      	ldr	r2, [r4, #0]
 8016bd8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8016bdc:	6022      	str	r2, [r4, #0]
 8016bde:	68a2      	ldr	r2, [r4, #8]
 8016be0:	1e51      	subs	r1, r2, #1
 8016be2:	60a1      	str	r1, [r4, #8]
 8016be4:	b19a      	cbz	r2, 8016c0e <_scanf_i+0xba>
 8016be6:	6832      	ldr	r2, [r6, #0]
 8016be8:	1c51      	adds	r1, r2, #1
 8016bea:	6031      	str	r1, [r6, #0]
 8016bec:	7812      	ldrb	r2, [r2, #0]
 8016bee:	701a      	strb	r2, [r3, #0]
 8016bf0:	1c5d      	adds	r5, r3, #1
 8016bf2:	6873      	ldr	r3, [r6, #4]
 8016bf4:	3b01      	subs	r3, #1
 8016bf6:	2b00      	cmp	r3, #0
 8016bf8:	6073      	str	r3, [r6, #4]
 8016bfa:	dc07      	bgt.n	8016c0c <_scanf_i+0xb8>
 8016bfc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016c00:	4631      	mov	r1, r6
 8016c02:	4658      	mov	r0, fp
 8016c04:	4798      	blx	r3
 8016c06:	2800      	cmp	r0, #0
 8016c08:	f040 8086 	bne.w	8016d18 <_scanf_i+0x1c4>
 8016c0c:	462b      	mov	r3, r5
 8016c0e:	f108 0801 	add.w	r8, r8, #1
 8016c12:	f1b8 0f03 	cmp.w	r8, #3
 8016c16:	d1c8      	bne.n	8016baa <_scanf_i+0x56>
 8016c18:	6862      	ldr	r2, [r4, #4]
 8016c1a:	b90a      	cbnz	r2, 8016c20 <_scanf_i+0xcc>
 8016c1c:	220a      	movs	r2, #10
 8016c1e:	6062      	str	r2, [r4, #4]
 8016c20:	6862      	ldr	r2, [r4, #4]
 8016c22:	4945      	ldr	r1, [pc, #276]	; (8016d38 <_scanf_i+0x1e4>)
 8016c24:	6960      	ldr	r0, [r4, #20]
 8016c26:	9301      	str	r3, [sp, #4]
 8016c28:	1a89      	subs	r1, r1, r2
 8016c2a:	f000 f8df 	bl	8016dec <__sccl>
 8016c2e:	9b01      	ldr	r3, [sp, #4]
 8016c30:	f04f 0800 	mov.w	r8, #0
 8016c34:	461d      	mov	r5, r3
 8016c36:	68a3      	ldr	r3, [r4, #8]
 8016c38:	6822      	ldr	r2, [r4, #0]
 8016c3a:	2b00      	cmp	r3, #0
 8016c3c:	d03a      	beq.n	8016cb4 <_scanf_i+0x160>
 8016c3e:	6831      	ldr	r1, [r6, #0]
 8016c40:	6960      	ldr	r0, [r4, #20]
 8016c42:	f891 c000 	ldrb.w	ip, [r1]
 8016c46:	f810 000c 	ldrb.w	r0, [r0, ip]
 8016c4a:	2800      	cmp	r0, #0
 8016c4c:	d032      	beq.n	8016cb4 <_scanf_i+0x160>
 8016c4e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8016c52:	d121      	bne.n	8016c98 <_scanf_i+0x144>
 8016c54:	0510      	lsls	r0, r2, #20
 8016c56:	d51f      	bpl.n	8016c98 <_scanf_i+0x144>
 8016c58:	f108 0801 	add.w	r8, r8, #1
 8016c5c:	b117      	cbz	r7, 8016c64 <_scanf_i+0x110>
 8016c5e:	3301      	adds	r3, #1
 8016c60:	3f01      	subs	r7, #1
 8016c62:	60a3      	str	r3, [r4, #8]
 8016c64:	6873      	ldr	r3, [r6, #4]
 8016c66:	3b01      	subs	r3, #1
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	6073      	str	r3, [r6, #4]
 8016c6c:	dd1b      	ble.n	8016ca6 <_scanf_i+0x152>
 8016c6e:	6833      	ldr	r3, [r6, #0]
 8016c70:	3301      	adds	r3, #1
 8016c72:	6033      	str	r3, [r6, #0]
 8016c74:	68a3      	ldr	r3, [r4, #8]
 8016c76:	3b01      	subs	r3, #1
 8016c78:	60a3      	str	r3, [r4, #8]
 8016c7a:	e7dc      	b.n	8016c36 <_scanf_i+0xe2>
 8016c7c:	f1b8 0f02 	cmp.w	r8, #2
 8016c80:	d1ad      	bne.n	8016bde <_scanf_i+0x8a>
 8016c82:	6822      	ldr	r2, [r4, #0]
 8016c84:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8016c88:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8016c8c:	d1bf      	bne.n	8016c0e <_scanf_i+0xba>
 8016c8e:	2110      	movs	r1, #16
 8016c90:	6061      	str	r1, [r4, #4]
 8016c92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8016c96:	e7a1      	b.n	8016bdc <_scanf_i+0x88>
 8016c98:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8016c9c:	6022      	str	r2, [r4, #0]
 8016c9e:	780b      	ldrb	r3, [r1, #0]
 8016ca0:	702b      	strb	r3, [r5, #0]
 8016ca2:	3501      	adds	r5, #1
 8016ca4:	e7de      	b.n	8016c64 <_scanf_i+0x110>
 8016ca6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016caa:	4631      	mov	r1, r6
 8016cac:	4658      	mov	r0, fp
 8016cae:	4798      	blx	r3
 8016cb0:	2800      	cmp	r0, #0
 8016cb2:	d0df      	beq.n	8016c74 <_scanf_i+0x120>
 8016cb4:	6823      	ldr	r3, [r4, #0]
 8016cb6:	05d9      	lsls	r1, r3, #23
 8016cb8:	d50c      	bpl.n	8016cd4 <_scanf_i+0x180>
 8016cba:	454d      	cmp	r5, r9
 8016cbc:	d908      	bls.n	8016cd0 <_scanf_i+0x17c>
 8016cbe:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016cc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016cc6:	4632      	mov	r2, r6
 8016cc8:	4658      	mov	r0, fp
 8016cca:	4798      	blx	r3
 8016ccc:	1e6f      	subs	r7, r5, #1
 8016cce:	463d      	mov	r5, r7
 8016cd0:	454d      	cmp	r5, r9
 8016cd2:	d029      	beq.n	8016d28 <_scanf_i+0x1d4>
 8016cd4:	6822      	ldr	r2, [r4, #0]
 8016cd6:	f012 0210 	ands.w	r2, r2, #16
 8016cda:	d113      	bne.n	8016d04 <_scanf_i+0x1b0>
 8016cdc:	702a      	strb	r2, [r5, #0]
 8016cde:	6863      	ldr	r3, [r4, #4]
 8016ce0:	9e00      	ldr	r6, [sp, #0]
 8016ce2:	4649      	mov	r1, r9
 8016ce4:	4658      	mov	r0, fp
 8016ce6:	47b0      	blx	r6
 8016ce8:	f8da 3000 	ldr.w	r3, [sl]
 8016cec:	6821      	ldr	r1, [r4, #0]
 8016cee:	1d1a      	adds	r2, r3, #4
 8016cf0:	f8ca 2000 	str.w	r2, [sl]
 8016cf4:	f011 0f20 	tst.w	r1, #32
 8016cf8:	681b      	ldr	r3, [r3, #0]
 8016cfa:	d010      	beq.n	8016d1e <_scanf_i+0x1ca>
 8016cfc:	6018      	str	r0, [r3, #0]
 8016cfe:	68e3      	ldr	r3, [r4, #12]
 8016d00:	3301      	adds	r3, #1
 8016d02:	60e3      	str	r3, [r4, #12]
 8016d04:	eba5 0509 	sub.w	r5, r5, r9
 8016d08:	44a8      	add	r8, r5
 8016d0a:	6925      	ldr	r5, [r4, #16]
 8016d0c:	4445      	add	r5, r8
 8016d0e:	6125      	str	r5, [r4, #16]
 8016d10:	2000      	movs	r0, #0
 8016d12:	b007      	add	sp, #28
 8016d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d18:	f04f 0800 	mov.w	r8, #0
 8016d1c:	e7ca      	b.n	8016cb4 <_scanf_i+0x160>
 8016d1e:	07ca      	lsls	r2, r1, #31
 8016d20:	bf4c      	ite	mi
 8016d22:	8018      	strhmi	r0, [r3, #0]
 8016d24:	6018      	strpl	r0, [r3, #0]
 8016d26:	e7ea      	b.n	8016cfe <_scanf_i+0x1aa>
 8016d28:	2001      	movs	r0, #1
 8016d2a:	e7f2      	b.n	8016d12 <_scanf_i+0x1be>
 8016d2c:	080172e4 	.word	0x080172e4
 8016d30:	08013f41 	.word	0x08013f41
 8016d34:	08016f69 	.word	0x08016f69
 8016d38:	08017b6d 	.word	0x08017b6d

08016d3c <_putc_r>:
 8016d3c:	b570      	push	{r4, r5, r6, lr}
 8016d3e:	460d      	mov	r5, r1
 8016d40:	4614      	mov	r4, r2
 8016d42:	4606      	mov	r6, r0
 8016d44:	b118      	cbz	r0, 8016d4e <_putc_r+0x12>
 8016d46:	6983      	ldr	r3, [r0, #24]
 8016d48:	b90b      	cbnz	r3, 8016d4e <_putc_r+0x12>
 8016d4a:	f7fe f941 	bl	8014fd0 <__sinit>
 8016d4e:	4b13      	ldr	r3, [pc, #76]	; (8016d9c <_putc_r+0x60>)
 8016d50:	429c      	cmp	r4, r3
 8016d52:	d112      	bne.n	8016d7a <_putc_r+0x3e>
 8016d54:	6874      	ldr	r4, [r6, #4]
 8016d56:	68a3      	ldr	r3, [r4, #8]
 8016d58:	3b01      	subs	r3, #1
 8016d5a:	2b00      	cmp	r3, #0
 8016d5c:	60a3      	str	r3, [r4, #8]
 8016d5e:	da16      	bge.n	8016d8e <_putc_r+0x52>
 8016d60:	69a2      	ldr	r2, [r4, #24]
 8016d62:	4293      	cmp	r3, r2
 8016d64:	db02      	blt.n	8016d6c <_putc_r+0x30>
 8016d66:	b2eb      	uxtb	r3, r5
 8016d68:	2b0a      	cmp	r3, #10
 8016d6a:	d110      	bne.n	8016d8e <_putc_r+0x52>
 8016d6c:	4622      	mov	r2, r4
 8016d6e:	4629      	mov	r1, r5
 8016d70:	4630      	mov	r0, r6
 8016d72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016d76:	f7fd b915 	b.w	8013fa4 <__swbuf_r>
 8016d7a:	4b09      	ldr	r3, [pc, #36]	; (8016da0 <_putc_r+0x64>)
 8016d7c:	429c      	cmp	r4, r3
 8016d7e:	d101      	bne.n	8016d84 <_putc_r+0x48>
 8016d80:	68b4      	ldr	r4, [r6, #8]
 8016d82:	e7e8      	b.n	8016d56 <_putc_r+0x1a>
 8016d84:	4b07      	ldr	r3, [pc, #28]	; (8016da4 <_putc_r+0x68>)
 8016d86:	429c      	cmp	r4, r3
 8016d88:	bf08      	it	eq
 8016d8a:	68f4      	ldreq	r4, [r6, #12]
 8016d8c:	e7e3      	b.n	8016d56 <_putc_r+0x1a>
 8016d8e:	6823      	ldr	r3, [r4, #0]
 8016d90:	1c5a      	adds	r2, r3, #1
 8016d92:	6022      	str	r2, [r4, #0]
 8016d94:	701d      	strb	r5, [r3, #0]
 8016d96:	b2e8      	uxtb	r0, r5
 8016d98:	bd70      	pop	{r4, r5, r6, pc}
 8016d9a:	bf00      	nop
 8016d9c:	08017a00 	.word	0x08017a00
 8016da0:	08017a20 	.word	0x08017a20
 8016da4:	080179e0 	.word	0x080179e0

08016da8 <_read_r>:
 8016da8:	b538      	push	{r3, r4, r5, lr}
 8016daa:	4c07      	ldr	r4, [pc, #28]	; (8016dc8 <_read_r+0x20>)
 8016dac:	4605      	mov	r5, r0
 8016dae:	4608      	mov	r0, r1
 8016db0:	4611      	mov	r1, r2
 8016db2:	2200      	movs	r2, #0
 8016db4:	6022      	str	r2, [r4, #0]
 8016db6:	461a      	mov	r2, r3
 8016db8:	f7ee fa28 	bl	800520c <_read>
 8016dbc:	1c43      	adds	r3, r0, #1
 8016dbe:	d102      	bne.n	8016dc6 <_read_r+0x1e>
 8016dc0:	6823      	ldr	r3, [r4, #0]
 8016dc2:	b103      	cbz	r3, 8016dc6 <_read_r+0x1e>
 8016dc4:	602b      	str	r3, [r5, #0]
 8016dc6:	bd38      	pop	{r3, r4, r5, pc}
 8016dc8:	20018260 	.word	0x20018260

08016dcc <_sbrk_r>:
 8016dcc:	b538      	push	{r3, r4, r5, lr}
 8016dce:	4c06      	ldr	r4, [pc, #24]	; (8016de8 <_sbrk_r+0x1c>)
 8016dd0:	2300      	movs	r3, #0
 8016dd2:	4605      	mov	r5, r0
 8016dd4:	4608      	mov	r0, r1
 8016dd6:	6023      	str	r3, [r4, #0]
 8016dd8:	f7ee fa6a 	bl	80052b0 <_sbrk>
 8016ddc:	1c43      	adds	r3, r0, #1
 8016dde:	d102      	bne.n	8016de6 <_sbrk_r+0x1a>
 8016de0:	6823      	ldr	r3, [r4, #0]
 8016de2:	b103      	cbz	r3, 8016de6 <_sbrk_r+0x1a>
 8016de4:	602b      	str	r3, [r5, #0]
 8016de6:	bd38      	pop	{r3, r4, r5, pc}
 8016de8:	20018260 	.word	0x20018260

08016dec <__sccl>:
 8016dec:	b570      	push	{r4, r5, r6, lr}
 8016dee:	780b      	ldrb	r3, [r1, #0]
 8016df0:	2b5e      	cmp	r3, #94	; 0x5e
 8016df2:	bf13      	iteet	ne
 8016df4:	1c4a      	addne	r2, r1, #1
 8016df6:	1c8a      	addeq	r2, r1, #2
 8016df8:	784b      	ldrbeq	r3, [r1, #1]
 8016dfa:	2100      	movne	r1, #0
 8016dfc:	bf08      	it	eq
 8016dfe:	2101      	moveq	r1, #1
 8016e00:	1e44      	subs	r4, r0, #1
 8016e02:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8016e06:	f804 1f01 	strb.w	r1, [r4, #1]!
 8016e0a:	42ac      	cmp	r4, r5
 8016e0c:	d1fb      	bne.n	8016e06 <__sccl+0x1a>
 8016e0e:	b913      	cbnz	r3, 8016e16 <__sccl+0x2a>
 8016e10:	3a01      	subs	r2, #1
 8016e12:	4610      	mov	r0, r2
 8016e14:	bd70      	pop	{r4, r5, r6, pc}
 8016e16:	f081 0401 	eor.w	r4, r1, #1
 8016e1a:	54c4      	strb	r4, [r0, r3]
 8016e1c:	1c51      	adds	r1, r2, #1
 8016e1e:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8016e22:	2d2d      	cmp	r5, #45	; 0x2d
 8016e24:	f101 36ff 	add.w	r6, r1, #4294967295
 8016e28:	460a      	mov	r2, r1
 8016e2a:	d006      	beq.n	8016e3a <__sccl+0x4e>
 8016e2c:	2d5d      	cmp	r5, #93	; 0x5d
 8016e2e:	d0f0      	beq.n	8016e12 <__sccl+0x26>
 8016e30:	b90d      	cbnz	r5, 8016e36 <__sccl+0x4a>
 8016e32:	4632      	mov	r2, r6
 8016e34:	e7ed      	b.n	8016e12 <__sccl+0x26>
 8016e36:	462b      	mov	r3, r5
 8016e38:	e7ef      	b.n	8016e1a <__sccl+0x2e>
 8016e3a:	780e      	ldrb	r6, [r1, #0]
 8016e3c:	2e5d      	cmp	r6, #93	; 0x5d
 8016e3e:	d0fa      	beq.n	8016e36 <__sccl+0x4a>
 8016e40:	42b3      	cmp	r3, r6
 8016e42:	dcf8      	bgt.n	8016e36 <__sccl+0x4a>
 8016e44:	3301      	adds	r3, #1
 8016e46:	429e      	cmp	r6, r3
 8016e48:	54c4      	strb	r4, [r0, r3]
 8016e4a:	dcfb      	bgt.n	8016e44 <__sccl+0x58>
 8016e4c:	3102      	adds	r1, #2
 8016e4e:	e7e6      	b.n	8016e1e <__sccl+0x32>

08016e50 <strncmp>:
 8016e50:	b510      	push	{r4, lr}
 8016e52:	b16a      	cbz	r2, 8016e70 <strncmp+0x20>
 8016e54:	3901      	subs	r1, #1
 8016e56:	1884      	adds	r4, r0, r2
 8016e58:	f810 3b01 	ldrb.w	r3, [r0], #1
 8016e5c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8016e60:	4293      	cmp	r3, r2
 8016e62:	d103      	bne.n	8016e6c <strncmp+0x1c>
 8016e64:	42a0      	cmp	r0, r4
 8016e66:	d001      	beq.n	8016e6c <strncmp+0x1c>
 8016e68:	2b00      	cmp	r3, #0
 8016e6a:	d1f5      	bne.n	8016e58 <strncmp+0x8>
 8016e6c:	1a98      	subs	r0, r3, r2
 8016e6e:	bd10      	pop	{r4, pc}
 8016e70:	4610      	mov	r0, r2
 8016e72:	e7fc      	b.n	8016e6e <strncmp+0x1e>

08016e74 <_strtoul_l.isra.0>:
 8016e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016e78:	4680      	mov	r8, r0
 8016e7a:	4689      	mov	r9, r1
 8016e7c:	4692      	mov	sl, r2
 8016e7e:	461e      	mov	r6, r3
 8016e80:	460f      	mov	r7, r1
 8016e82:	463d      	mov	r5, r7
 8016e84:	9808      	ldr	r0, [sp, #32]
 8016e86:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016e8a:	f7fe fc51 	bl	8015730 <__locale_ctype_ptr_l>
 8016e8e:	4420      	add	r0, r4
 8016e90:	7843      	ldrb	r3, [r0, #1]
 8016e92:	f013 0308 	ands.w	r3, r3, #8
 8016e96:	d130      	bne.n	8016efa <_strtoul_l.isra.0+0x86>
 8016e98:	2c2d      	cmp	r4, #45	; 0x2d
 8016e9a:	d130      	bne.n	8016efe <_strtoul_l.isra.0+0x8a>
 8016e9c:	787c      	ldrb	r4, [r7, #1]
 8016e9e:	1cbd      	adds	r5, r7, #2
 8016ea0:	2101      	movs	r1, #1
 8016ea2:	2e00      	cmp	r6, #0
 8016ea4:	d05c      	beq.n	8016f60 <_strtoul_l.isra.0+0xec>
 8016ea6:	2e10      	cmp	r6, #16
 8016ea8:	d109      	bne.n	8016ebe <_strtoul_l.isra.0+0x4a>
 8016eaa:	2c30      	cmp	r4, #48	; 0x30
 8016eac:	d107      	bne.n	8016ebe <_strtoul_l.isra.0+0x4a>
 8016eae:	782b      	ldrb	r3, [r5, #0]
 8016eb0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016eb4:	2b58      	cmp	r3, #88	; 0x58
 8016eb6:	d14e      	bne.n	8016f56 <_strtoul_l.isra.0+0xe2>
 8016eb8:	786c      	ldrb	r4, [r5, #1]
 8016eba:	2610      	movs	r6, #16
 8016ebc:	3502      	adds	r5, #2
 8016ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8016ec2:	2300      	movs	r3, #0
 8016ec4:	fbb2 f2f6 	udiv	r2, r2, r6
 8016ec8:	fb06 fc02 	mul.w	ip, r6, r2
 8016ecc:	ea6f 0c0c 	mvn.w	ip, ip
 8016ed0:	4618      	mov	r0, r3
 8016ed2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8016ed6:	2f09      	cmp	r7, #9
 8016ed8:	d817      	bhi.n	8016f0a <_strtoul_l.isra.0+0x96>
 8016eda:	463c      	mov	r4, r7
 8016edc:	42a6      	cmp	r6, r4
 8016ede:	dd23      	ble.n	8016f28 <_strtoul_l.isra.0+0xb4>
 8016ee0:	2b00      	cmp	r3, #0
 8016ee2:	db1e      	blt.n	8016f22 <_strtoul_l.isra.0+0xae>
 8016ee4:	4282      	cmp	r2, r0
 8016ee6:	d31c      	bcc.n	8016f22 <_strtoul_l.isra.0+0xae>
 8016ee8:	d101      	bne.n	8016eee <_strtoul_l.isra.0+0x7a>
 8016eea:	45a4      	cmp	ip, r4
 8016eec:	db19      	blt.n	8016f22 <_strtoul_l.isra.0+0xae>
 8016eee:	fb00 4006 	mla	r0, r0, r6, r4
 8016ef2:	2301      	movs	r3, #1
 8016ef4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016ef8:	e7eb      	b.n	8016ed2 <_strtoul_l.isra.0+0x5e>
 8016efa:	462f      	mov	r7, r5
 8016efc:	e7c1      	b.n	8016e82 <_strtoul_l.isra.0+0xe>
 8016efe:	2c2b      	cmp	r4, #43	; 0x2b
 8016f00:	bf04      	itt	eq
 8016f02:	1cbd      	addeq	r5, r7, #2
 8016f04:	787c      	ldrbeq	r4, [r7, #1]
 8016f06:	4619      	mov	r1, r3
 8016f08:	e7cb      	b.n	8016ea2 <_strtoul_l.isra.0+0x2e>
 8016f0a:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8016f0e:	2f19      	cmp	r7, #25
 8016f10:	d801      	bhi.n	8016f16 <_strtoul_l.isra.0+0xa2>
 8016f12:	3c37      	subs	r4, #55	; 0x37
 8016f14:	e7e2      	b.n	8016edc <_strtoul_l.isra.0+0x68>
 8016f16:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8016f1a:	2f19      	cmp	r7, #25
 8016f1c:	d804      	bhi.n	8016f28 <_strtoul_l.isra.0+0xb4>
 8016f1e:	3c57      	subs	r4, #87	; 0x57
 8016f20:	e7dc      	b.n	8016edc <_strtoul_l.isra.0+0x68>
 8016f22:	f04f 33ff 	mov.w	r3, #4294967295
 8016f26:	e7e5      	b.n	8016ef4 <_strtoul_l.isra.0+0x80>
 8016f28:	2b00      	cmp	r3, #0
 8016f2a:	da09      	bge.n	8016f40 <_strtoul_l.isra.0+0xcc>
 8016f2c:	2322      	movs	r3, #34	; 0x22
 8016f2e:	f8c8 3000 	str.w	r3, [r8]
 8016f32:	f04f 30ff 	mov.w	r0, #4294967295
 8016f36:	f1ba 0f00 	cmp.w	sl, #0
 8016f3a:	d107      	bne.n	8016f4c <_strtoul_l.isra.0+0xd8>
 8016f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016f40:	b101      	cbz	r1, 8016f44 <_strtoul_l.isra.0+0xd0>
 8016f42:	4240      	negs	r0, r0
 8016f44:	f1ba 0f00 	cmp.w	sl, #0
 8016f48:	d0f8      	beq.n	8016f3c <_strtoul_l.isra.0+0xc8>
 8016f4a:	b10b      	cbz	r3, 8016f50 <_strtoul_l.isra.0+0xdc>
 8016f4c:	f105 39ff 	add.w	r9, r5, #4294967295
 8016f50:	f8ca 9000 	str.w	r9, [sl]
 8016f54:	e7f2      	b.n	8016f3c <_strtoul_l.isra.0+0xc8>
 8016f56:	2430      	movs	r4, #48	; 0x30
 8016f58:	2e00      	cmp	r6, #0
 8016f5a:	d1b0      	bne.n	8016ebe <_strtoul_l.isra.0+0x4a>
 8016f5c:	2608      	movs	r6, #8
 8016f5e:	e7ae      	b.n	8016ebe <_strtoul_l.isra.0+0x4a>
 8016f60:	2c30      	cmp	r4, #48	; 0x30
 8016f62:	d0a4      	beq.n	8016eae <_strtoul_l.isra.0+0x3a>
 8016f64:	260a      	movs	r6, #10
 8016f66:	e7aa      	b.n	8016ebe <_strtoul_l.isra.0+0x4a>

08016f68 <_strtoul_r>:
 8016f68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016f6a:	4c06      	ldr	r4, [pc, #24]	; (8016f84 <_strtoul_r+0x1c>)
 8016f6c:	4d06      	ldr	r5, [pc, #24]	; (8016f88 <_strtoul_r+0x20>)
 8016f6e:	6824      	ldr	r4, [r4, #0]
 8016f70:	6a24      	ldr	r4, [r4, #32]
 8016f72:	2c00      	cmp	r4, #0
 8016f74:	bf08      	it	eq
 8016f76:	462c      	moveq	r4, r5
 8016f78:	9400      	str	r4, [sp, #0]
 8016f7a:	f7ff ff7b 	bl	8016e74 <_strtoul_l.isra.0>
 8016f7e:	b003      	add	sp, #12
 8016f80:	bd30      	pop	{r4, r5, pc}
 8016f82:	bf00      	nop
 8016f84:	2000000c 	.word	0x2000000c
 8016f88:	20000070 	.word	0x20000070

08016f8c <__submore>:
 8016f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f90:	460c      	mov	r4, r1
 8016f92:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016f94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016f98:	4299      	cmp	r1, r3
 8016f9a:	d11d      	bne.n	8016fd8 <__submore+0x4c>
 8016f9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016fa0:	f7ff f8de 	bl	8016160 <_malloc_r>
 8016fa4:	b918      	cbnz	r0, 8016fae <__submore+0x22>
 8016fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8016faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016fae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016fb2:	63a3      	str	r3, [r4, #56]	; 0x38
 8016fb4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8016fb8:	6360      	str	r0, [r4, #52]	; 0x34
 8016fba:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8016fbe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8016fc2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8016fc6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8016fca:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8016fce:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8016fd2:	6020      	str	r0, [r4, #0]
 8016fd4:	2000      	movs	r0, #0
 8016fd6:	e7e8      	b.n	8016faa <__submore+0x1e>
 8016fd8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8016fda:	0077      	lsls	r7, r6, #1
 8016fdc:	463a      	mov	r2, r7
 8016fde:	f000 f85a 	bl	8017096 <_realloc_r>
 8016fe2:	4605      	mov	r5, r0
 8016fe4:	2800      	cmp	r0, #0
 8016fe6:	d0de      	beq.n	8016fa6 <__submore+0x1a>
 8016fe8:	eb00 0806 	add.w	r8, r0, r6
 8016fec:	4601      	mov	r1, r0
 8016fee:	4632      	mov	r2, r6
 8016ff0:	4640      	mov	r0, r8
 8016ff2:	f7fe fc4f 	bl	8015894 <memcpy>
 8016ff6:	f8c4 8000 	str.w	r8, [r4]
 8016ffa:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8016ffe:	e7e9      	b.n	8016fd4 <__submore+0x48>

08017000 <__ascii_wctomb>:
 8017000:	b149      	cbz	r1, 8017016 <__ascii_wctomb+0x16>
 8017002:	2aff      	cmp	r2, #255	; 0xff
 8017004:	bf85      	ittet	hi
 8017006:	238a      	movhi	r3, #138	; 0x8a
 8017008:	6003      	strhi	r3, [r0, #0]
 801700a:	700a      	strbls	r2, [r1, #0]
 801700c:	f04f 30ff 	movhi.w	r0, #4294967295
 8017010:	bf98      	it	ls
 8017012:	2001      	movls	r0, #1
 8017014:	4770      	bx	lr
 8017016:	4608      	mov	r0, r1
 8017018:	4770      	bx	lr
	...

0801701c <_fstat_r>:
 801701c:	b538      	push	{r3, r4, r5, lr}
 801701e:	4c07      	ldr	r4, [pc, #28]	; (801703c <_fstat_r+0x20>)
 8017020:	2300      	movs	r3, #0
 8017022:	4605      	mov	r5, r0
 8017024:	4608      	mov	r0, r1
 8017026:	4611      	mov	r1, r2
 8017028:	6023      	str	r3, [r4, #0]
 801702a:	f7ee f918 	bl	800525e <_fstat>
 801702e:	1c43      	adds	r3, r0, #1
 8017030:	d102      	bne.n	8017038 <_fstat_r+0x1c>
 8017032:	6823      	ldr	r3, [r4, #0]
 8017034:	b103      	cbz	r3, 8017038 <_fstat_r+0x1c>
 8017036:	602b      	str	r3, [r5, #0]
 8017038:	bd38      	pop	{r3, r4, r5, pc}
 801703a:	bf00      	nop
 801703c:	20018260 	.word	0x20018260

08017040 <_isatty_r>:
 8017040:	b538      	push	{r3, r4, r5, lr}
 8017042:	4c06      	ldr	r4, [pc, #24]	; (801705c <_isatty_r+0x1c>)
 8017044:	2300      	movs	r3, #0
 8017046:	4605      	mov	r5, r0
 8017048:	4608      	mov	r0, r1
 801704a:	6023      	str	r3, [r4, #0]
 801704c:	f7ee f917 	bl	800527e <_isatty>
 8017050:	1c43      	adds	r3, r0, #1
 8017052:	d102      	bne.n	801705a <_isatty_r+0x1a>
 8017054:	6823      	ldr	r3, [r4, #0]
 8017056:	b103      	cbz	r3, 801705a <_isatty_r+0x1a>
 8017058:	602b      	str	r3, [r5, #0]
 801705a:	bd38      	pop	{r3, r4, r5, pc}
 801705c:	20018260 	.word	0x20018260

08017060 <memmove>:
 8017060:	4288      	cmp	r0, r1
 8017062:	b510      	push	{r4, lr}
 8017064:	eb01 0302 	add.w	r3, r1, r2
 8017068:	d807      	bhi.n	801707a <memmove+0x1a>
 801706a:	1e42      	subs	r2, r0, #1
 801706c:	4299      	cmp	r1, r3
 801706e:	d00a      	beq.n	8017086 <memmove+0x26>
 8017070:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017074:	f802 4f01 	strb.w	r4, [r2, #1]!
 8017078:	e7f8      	b.n	801706c <memmove+0xc>
 801707a:	4283      	cmp	r3, r0
 801707c:	d9f5      	bls.n	801706a <memmove+0xa>
 801707e:	1881      	adds	r1, r0, r2
 8017080:	1ad2      	subs	r2, r2, r3
 8017082:	42d3      	cmn	r3, r2
 8017084:	d100      	bne.n	8017088 <memmove+0x28>
 8017086:	bd10      	pop	{r4, pc}
 8017088:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801708c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8017090:	e7f7      	b.n	8017082 <memmove+0x22>

08017092 <__malloc_lock>:
 8017092:	4770      	bx	lr

08017094 <__malloc_unlock>:
 8017094:	4770      	bx	lr

08017096 <_realloc_r>:
 8017096:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017098:	4607      	mov	r7, r0
 801709a:	4614      	mov	r4, r2
 801709c:	460e      	mov	r6, r1
 801709e:	b921      	cbnz	r1, 80170aa <_realloc_r+0x14>
 80170a0:	4611      	mov	r1, r2
 80170a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80170a6:	f7ff b85b 	b.w	8016160 <_malloc_r>
 80170aa:	b922      	cbnz	r2, 80170b6 <_realloc_r+0x20>
 80170ac:	f7ff f80a 	bl	80160c4 <_free_r>
 80170b0:	4625      	mov	r5, r4
 80170b2:	4628      	mov	r0, r5
 80170b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80170b6:	f000 f814 	bl	80170e2 <_malloc_usable_size_r>
 80170ba:	42a0      	cmp	r0, r4
 80170bc:	d20f      	bcs.n	80170de <_realloc_r+0x48>
 80170be:	4621      	mov	r1, r4
 80170c0:	4638      	mov	r0, r7
 80170c2:	f7ff f84d 	bl	8016160 <_malloc_r>
 80170c6:	4605      	mov	r5, r0
 80170c8:	2800      	cmp	r0, #0
 80170ca:	d0f2      	beq.n	80170b2 <_realloc_r+0x1c>
 80170cc:	4631      	mov	r1, r6
 80170ce:	4622      	mov	r2, r4
 80170d0:	f7fe fbe0 	bl	8015894 <memcpy>
 80170d4:	4631      	mov	r1, r6
 80170d6:	4638      	mov	r0, r7
 80170d8:	f7fe fff4 	bl	80160c4 <_free_r>
 80170dc:	e7e9      	b.n	80170b2 <_realloc_r+0x1c>
 80170de:	4635      	mov	r5, r6
 80170e0:	e7e7      	b.n	80170b2 <_realloc_r+0x1c>

080170e2 <_malloc_usable_size_r>:
 80170e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80170e6:	1f18      	subs	r0, r3, #4
 80170e8:	2b00      	cmp	r3, #0
 80170ea:	bfbc      	itt	lt
 80170ec:	580b      	ldrlt	r3, [r1, r0]
 80170ee:	18c0      	addlt	r0, r0, r3
 80170f0:	4770      	bx	lr
	...

080170f4 <_init>:
 80170f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170f6:	bf00      	nop
 80170f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80170fa:	bc08      	pop	{r3}
 80170fc:	469e      	mov	lr, r3
 80170fe:	4770      	bx	lr

08017100 <_fini>:
 8017100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017102:	bf00      	nop
 8017104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017106:	bc08      	pop	{r3}
 8017108:	469e      	mov	lr, r3
 801710a:	4770      	bx	lr
